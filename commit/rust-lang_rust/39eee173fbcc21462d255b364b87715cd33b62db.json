{"sha": "39eee173fbcc21462d255b364b87715cd33b62db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZWVlMTczZmJjYzIxNDYyZDI1NWIzNjRiODc3MTVjZDMzYjYyZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-05T11:06:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-05T11:06:20Z"}, "message": "Auto merge of #83880 - Dylan-DPC:rollup-hz9ph0e, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #81922 (Let `#[allow(unstable_name_collisions)]` work for things other than function)\n - #82483 (Use FromStr trait for number option parsing)\n - #82739 (Use the beta compiler for building bootstrap tools when `download-rustc` is set)\n - #83650 (Update Source Serif to release 4.004)\n - #83826 (List trait impls before deref methods in doc's sidebar)\n - #83831 (Add `#[inline]` to IpAddr methods)\n - #83863 (Render destructured struct function param names as underscore)\n - #83865 (Don't report disambiguator error if link would have been ignored)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e930e86d52114de16148de08b917c974cb874669", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e930e86d52114de16148de08b917c974cb874669"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39eee173fbcc21462d255b364b87715cd33b62db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39eee173fbcc21462d255b364b87715cd33b62db", "html_url": "https://github.com/rust-lang/rust/commit/39eee173fbcc21462d255b364b87715cd33b62db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39eee173fbcc21462d255b364b87715cd33b62db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58e71896506edb701f276158bd2f47e8788a1133", "url": "https://api.github.com/repos/rust-lang/rust/commits/58e71896506edb701f276158bd2f47e8788a1133", "html_url": "https://github.com/rust-lang/rust/commit/58e71896506edb701f276158bd2f47e8788a1133"}, {"sha": "3ca197e89c9affc76e79f0421e1bb9d65a8ec855", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ca197e89c9affc76e79f0421e1bb9d65a8ec855", "html_url": "https://github.com/rust-lang/rust/commit/3ca197e89c9affc76e79f0421e1bb9d65a8ec855"}], "stats": {"total": 517, "additions": 323, "deletions": 194}, "files": [{"sha": "b628ae3ae3afccbc6afa3eda3e80e8a5438555c1", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -1047,7 +1047,7 @@ pub unsafe fn with_llvm_pmb(\n     // thresholds copied from clang.\n     match (opt_level, opt_size, inline_threshold) {\n         (.., Some(t)) => {\n-            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, t as u32);\n+            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, t);\n         }\n         (llvm::CodeGenOptLevel::Aggressive, ..) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 275);"}, {"sha": "04d06864ee14fea4ad950454a08f26a71c709534", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -107,7 +107,7 @@ pub struct ModuleConfig {\n     pub vectorize_loop: bool,\n     pub vectorize_slp: bool,\n     pub merge_functions: bool,\n-    pub inline_threshold: Option<usize>,\n+    pub inline_threshold: Option<u32>,\n     pub new_llvm_pass_manager: bool,\n     pub emit_lifetime_markers: bool,\n }"}, {"sha": "ec04bf7d05418785c929923d3c0a1ac03cb5b237", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -2332,6 +2332,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(PathBuf);\n     impl_dep_tracking_hash_via_hash!(lint::Level);\n     impl_dep_tracking_hash_via_hash!(Option<bool>);\n+    impl_dep_tracking_hash_via_hash!(Option<u32>);\n     impl_dep_tracking_hash_via_hash!(Option<usize>);\n     impl_dep_tracking_hash_via_hash!(Option<NonZeroUsize>);\n     impl_dep_tracking_hash_via_hash!(Option<String>);"}, {"sha": "a184608ed29bfb8d7fa2607addac75dba7dabac3", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -251,9 +251,9 @@ macro_rules! options {\n         pub const parse_list: &str = \"a space-separated list of strings\";\n         pub const parse_opt_list: &str = parse_list;\n         pub const parse_opt_comma_list: &str = \"a comma-separated list of strings\";\n-        pub const parse_uint: &str = \"a number\";\n-        pub const parse_opt_uint: &str = parse_uint;\n-        pub const parse_threads: &str = parse_uint;\n+        pub const parse_number: &str = \"a number\";\n+        pub const parse_opt_number: &str = parse_number;\n+        pub const parse_threads: &str = parse_number;\n         pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n         pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n         pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n@@ -417,16 +417,16 @@ macro_rules! options {\n             }\n         }\n \n-        /// Use this for any uint option that has a static default.\n-        fn parse_uint(slot: &mut usize, v: Option<&str>) -> bool {\n+        /// Use this for any numeric option that has a static default.\n+        fn parse_number<T: Copy + FromStr>(slot: &mut T, v: Option<&str>) -> bool {\n             match v.and_then(|s| s.parse().ok()) {\n                 Some(i) => { *slot = i; true },\n                 None => false\n             }\n         }\n \n-        /// Use this for any uint option that lacks a static default.\n-        fn parse_opt_uint(slot: &mut Option<usize>, v: Option<&str>) -> bool {\n+        /// Use this for any numeric option that lacks a static default.\n+        fn parse_opt_number<T: Copy + FromStr>(slot: &mut Option<T>, v: Option<&str>) -> bool {\n             match v {\n                 Some(s) => { *slot = s.parse().ok(); slot.is_some() }\n                 None => false\n@@ -787,13 +787,13 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"this option is deprecated and does nothing\"),\n     code_model: Option<CodeModel> = (None, parse_code_model, [TRACKED],\n         \"choose the code model to use (`rustc --print code-models` for details)\"),\n-    codegen_units: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n+    codegen_units: Option<usize> = (None, parse_opt_number, [UNTRACKED],\n         \"divide crate into N units to optimize in parallel\"),\n     control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [TRACKED],\n         \"use Windows Control Flow Guard (default: no)\"),\n     debug_assertions: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"explicitly enable the `cfg(debug_assertions)` directive\"),\n-    debuginfo: usize = (0, parse_uint, [TRACKED],\n+    debuginfo: usize = (0, parse_number, [TRACKED],\n         \"debug info emission level (0 = no debug info, 1 = line tables only, \\\n         2 = full debug info with variable and type information; default: 0)\"),\n     default_linker_libraries: bool = (false, parse_bool, [UNTRACKED],\n@@ -808,7 +808,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"force use of unwind tables\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"enable incremental compilation\"),\n-    inline_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    inline_threshold: Option<u32> = (None, parse_opt_number, [TRACKED],\n         \"set the threshold for inlining a function\"),\n     link_arg: (/* redirected to link_args */) = ((), parse_string_push, [UNTRACKED],\n         \"a single extra argument to append to the linker invocation (can be used several times)\"),\n@@ -996,9 +996,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"verify incr. comp. hashes of green query instances (default: no)\"),\n     inline_mir: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable MIR inlining (default: no)\"),\n-    inline_mir_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    inline_mir_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"a default MIR inlining threshold (default: 50)\"),\n-    inline_mir_hint_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    inline_mir_hint_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"inlining threshold for functions with inline hint (default: 100)\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"control whether `#[inline]` functions are in all CGUs\"),\n@@ -1034,7 +1034,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n         \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n         (default: no)\"),\n-    mir_opt_level: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    mir_opt_level: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\"),\n     mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"emit noalias metadata for mutable references (default: yes for LLVM >= 12, otherwise no)\"),\n@@ -1155,7 +1155,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"which mangling version to use for symbol names ('legacy' (default) or 'v0')\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n         \"show extended diagnostic help (default: no)\"),\n-    terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],\n+    terminal_width: Option<usize> = (None, parse_opt_number, [UNTRACKED],\n         \"set the current terminal width\"),\n     tune_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select processor to schedule for (`rustc --print target-cpus` for details)\"),"}, {"sha": "d83b74f4ce9e068bf1f82a250510386d13205d52", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -83,6 +83,8 @@ struct ProbeContext<'a, 'tcx> {\n     unsatisfied_predicates: Vec<(ty::Predicate<'tcx>, Option<ty::Predicate<'tcx>>)>,\n \n     is_suggestion: IsSuggestion,\n+\n+    scope_expr_id: hir::HirId,\n }\n \n impl<'a, 'tcx> Deref for ProbeContext<'a, 'tcx> {\n@@ -448,6 +450,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 orig_values,\n                 steps.steps,\n                 is_suggestion,\n+                scope_expr_id,\n             );\n \n             probe_cx.assemble_inherent_candidates();\n@@ -547,6 +550,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         orig_steps_var_values: OriginalQueryValues<'tcx>,\n         steps: Lrc<Vec<CandidateStep<'tcx>>>,\n         is_suggestion: IsSuggestion,\n+        scope_expr_id: hir::HirId,\n     ) -> ProbeContext<'a, 'tcx> {\n         ProbeContext {\n             fcx,\n@@ -564,6 +568,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             private_candidate: None,\n             unsatisfied_predicates: Vec::new(),\n             is_suggestion,\n+            scope_expr_id,\n         }\n     }\n \n@@ -1312,7 +1317,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ) {\n         self.tcx.struct_span_lint_hir(\n             lint::builtin::UNSTABLE_NAME_COLLISIONS,\n-            self.fcx.body_id,\n+            self.scope_expr_id,\n             self.span,\n             |lint| {\n                 let def_kind = stable_pick.item.kind.as_def_kind();\n@@ -1594,6 +1599,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 self.orig_steps_var_values.clone(),\n                 steps,\n                 IsSuggestion(true),\n+                self.scope_expr_id,\n             );\n             pcx.allow_similar_names = true;\n             pcx.assemble_inherent_candidates();"}, {"sha": "da2415e361077606abda1e2abface5b1f23651a8", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -993,6 +993,7 @@ impl Ord for Ipv4Addr {\n }\n \n impl IntoInner<c::in_addr> for Ipv4Addr {\n+    #[inline]\n     fn into_inner(self) -> c::in_addr {\n         self.inner\n     }\n@@ -1800,11 +1801,13 @@ impl Ord for Ipv6Addr {\n }\n \n impl AsInner<c::in6_addr> for Ipv6Addr {\n+    #[inline]\n     fn as_inner(&self) -> &c::in6_addr {\n         &self.inner\n     }\n }\n impl FromInner<c::in6_addr> for Ipv6Addr {\n+    #[inline]\n     fn from_inner(addr: c::in6_addr) -> Ipv6Addr {\n         Ipv6Addr { inner: addr }\n     }"}, {"sha": "0b024d1333f0edfb2c16447c735ada86c1897975", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 83, "deletions": 68, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -383,7 +383,7 @@ def __init__(self):\n         self.nix_deps_dir = None\n         self.rustc_commit = None\n \n-    def download_stage0(self):\n+    def download_toolchain(self, stage0=True, rustc_channel=None):\n         \"\"\"Fetch the build system for Rust, written in Rust\n \n         This method will build a cache directory, then it will fetch the\n@@ -393,43 +393,47 @@ def download_stage0(self):\n         Each downloaded tarball is extracted, after that, the script\n         will move all the content to the right place.\n         \"\"\"\n-        rustc_channel = self.rustc_channel\n+        if rustc_channel is None:\n+            rustc_channel = self.rustc_channel\n         rustfmt_channel = self.rustfmt_channel\n-\n-        if self.rustc().startswith(self.bin_root()) and \\\n-                (not os.path.exists(self.rustc()) or\n-                 self.program_out_of_date(self.rustc_stamp(), self.date + str(self.rustc_commit))):\n-            if os.path.exists(self.bin_root()):\n-                shutil.rmtree(self.bin_root())\n-            download_rustc = self.rustc_commit is not None\n+        bin_root = self.bin_root(stage0)\n+\n+        key = self.date\n+        if not stage0:\n+            key += str(self.rustc_commit)\n+        if self.rustc(stage0).startswith(bin_root) and \\\n+                (not os.path.exists(self.rustc(stage0)) or\n+                 self.program_out_of_date(self.rustc_stamp(stage0), key)):\n+            if os.path.exists(bin_root):\n+                shutil.rmtree(bin_root)\n             tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n             filename = \"rust-std-{}-{}{}\".format(\n                 rustc_channel, self.build, tarball_suffix)\n             pattern = \"rust-std-{}\".format(self.build)\n-            self._download_component_helper(filename, pattern, tarball_suffix, download_rustc)\n+            self._download_component_helper(filename, pattern, tarball_suffix, stage0)\n             filename = \"rustc-{}-{}{}\".format(rustc_channel, self.build,\n                                               tarball_suffix)\n-            self._download_component_helper(filename, \"rustc\", tarball_suffix, download_rustc)\n+            self._download_component_helper(filename, \"rustc\", tarball_suffix, stage0)\n             filename = \"cargo-{}-{}{}\".format(rustc_channel, self.build,\n                                               tarball_suffix)\n             self._download_component_helper(filename, \"cargo\", tarball_suffix)\n-            if self.rustc_commit is not None:\n+            if not stage0:\n                 filename = \"rustc-dev-{}-{}{}\".format(rustc_channel, self.build, tarball_suffix)\n                 self._download_component_helper(\n-                    filename, \"rustc-dev\", tarball_suffix, download_rustc\n+                    filename, \"rustc-dev\", tarball_suffix, stage0\n                 )\n \n-            self.fix_bin_or_dylib(\"{}/bin/rustc\".format(self.bin_root()))\n-            self.fix_bin_or_dylib(\"{}/bin/rustdoc\".format(self.bin_root()))\n-            self.fix_bin_or_dylib(\"{}/bin/cargo\".format(self.bin_root()))\n-            lib_dir = \"{}/lib\".format(self.bin_root())\n+            self.fix_bin_or_dylib(\"{}/bin/rustc\".format(bin_root))\n+            self.fix_bin_or_dylib(\"{}/bin/rustdoc\".format(bin_root))\n+            self.fix_bin_or_dylib(\"{}/bin/cargo\".format(bin_root))\n+            lib_dir = \"{}/lib\".format(bin_root)\n             for lib in os.listdir(lib_dir):\n                 if lib.endswith(\".so\"):\n                     self.fix_bin_or_dylib(os.path.join(lib_dir, lib), rpath_libz=True)\n-            with output(self.rustc_stamp()) as rust_stamp:\n-                rust_stamp.write(self.date + str(self.rustc_commit))\n+            with output(self.rustc_stamp(stage0)) as rust_stamp:\n+                rust_stamp.write(key)\n \n-        if self.rustfmt() and self.rustfmt().startswith(self.bin_root()) and (\n+        if self.rustfmt() and self.rustfmt().startswith(bin_root) and (\n             not os.path.exists(self.rustfmt())\n             or self.program_out_of_date(self.rustfmt_stamp(), self.rustfmt_channel)\n         ):\n@@ -440,12 +444,13 @@ def download_stage0(self):\n                 self._download_component_helper(\n                     filename, \"rustfmt-preview\", tarball_suffix, key=date\n                 )\n-                self.fix_bin_or_dylib(\"{}/bin/rustfmt\".format(self.bin_root()))\n-                self.fix_bin_or_dylib(\"{}/bin/cargo-fmt\".format(self.bin_root()))\n+                self.fix_bin_or_dylib(\"{}/bin/rustfmt\".format(bin_root))\n+                self.fix_bin_or_dylib(\"{}/bin/cargo-fmt\".format(bin_root))\n                 with output(self.rustfmt_stamp()) as rustfmt_stamp:\n                     rustfmt_stamp.write(self.rustfmt_channel)\n \n-        if self.downloading_llvm():\n+        # Avoid downloading LLVM twice (once for stage0 and once for the master rustc)\n+        if self.downloading_llvm() and stage0:\n             # We want the most recent LLVM submodule update to avoid downloading\n             # LLVM more often than necessary.\n             #\n@@ -498,27 +503,26 @@ def downloading_llvm(self):\n             or (opt == \"if-available\" and self.build in supported_platforms)\n \n     def _download_component_helper(\n-        self, filename, pattern, tarball_suffix, download_rustc=False, key=None\n+        self, filename, pattern, tarball_suffix, stage0=True, key=None\n     ):\n         if key is None:\n-            if download_rustc:\n-                key = self.rustc_commit\n-            else:\n+            if stage0:\n                 key = self.date\n+            else:\n+                key = self.rustc_commit\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n         rustc_cache = os.path.join(cache_dst, key)\n         if not os.path.exists(rustc_cache):\n             os.makedirs(rustc_cache)\n \n-        if download_rustc:\n-            url = \"https://ci-artifacts.rust-lang.org/rustc-builds/{}\".format(self.rustc_commit)\n-        else:\n+        if stage0:\n             url = \"{}/dist/{}\".format(self._download_url, key)\n+        else:\n+            url = \"https://ci-artifacts.rust-lang.org/rustc-builds/{}\".format(self.rustc_commit)\n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):\n-            do_verify = not download_rustc\n-            get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose, do_verify=do_verify)\n-        unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n+            get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose, do_verify=stage0)\n+        unpack(tarball, tarball_suffix, self.bin_root(stage0), match=pattern, verbose=self.verbose)\n \n     def _download_ci_llvm(self, llvm_sha, llvm_assertions):\n         cache_prefix = \"llvm-{}-{}\".format(llvm_sha, llvm_assertions)\n@@ -576,10 +580,10 @@ def fix_bin_or_dylib(self, fname, rpath_libz=False):\n         nix_os_msg = \"info: you seem to be running NixOS. Attempting to patch\"\n         print(nix_os_msg, fname)\n \n-        # Only build `stage0/.nix-deps` once.\n+        # Only build `.nix-deps` once.\n         nix_deps_dir = self.nix_deps_dir\n         if not nix_deps_dir:\n-            nix_deps_dir = \"{}/.nix-deps\".format(self.bin_root())\n+            nix_deps_dir = \".nix-deps\"\n             if not os.path.exists(nix_deps_dir):\n                 os.makedirs(nix_deps_dir)\n \n@@ -637,8 +641,8 @@ def fix_bin_or_dylib(self, fname, rpath_libz=False):\n             print(\"warning: failed to call patchelf:\", reason)\n             return\n \n-    # Return the stage1 compiler to download, if any.\n-    def maybe_download_rustc(self):\n+    # If `download-rustc` is set, download the most recent commit with CI artifacts\n+    def maybe_download_ci_toolchain(self):\n         # If `download-rustc` is not set, default to rebuilding.\n         if self.get_toml(\"download-rustc\", section=\"rust\") != \"true\":\n             return None\n@@ -658,17 +662,23 @@ def maybe_download_rustc(self):\n         if status != 0:\n             print(\"warning: `download-rustc` is enabled, but there are changes to compiler/\")\n \n-        return commit\n+        if self.verbose:\n+            print(\"using downloaded stage1 artifacts from CI (commit {})\".format(commit))\n+        self.rustc_commit = commit\n+        # FIXME: support downloading artifacts from the beta channel\n+        self.download_toolchain(False, \"nightly\")\n \n-    def rustc_stamp(self):\n-        \"\"\"Return the path for .rustc-stamp\n+    def rustc_stamp(self, stage0):\n+        \"\"\"Return the path for .rustc-stamp at the given stage\n \n         >>> rb = RustBuild()\n         >>> rb.build_dir = \"build\"\n-        >>> rb.rustc_stamp() == os.path.join(\"build\", \"stage0\", \".rustc-stamp\")\n+        >>> rb.rustc_stamp(True) == os.path.join(\"build\", \"stage0\", \".rustc-stamp\")\n+        True\n+        >>> rb.rustc_stamp(False) == os.path.join(\"build\", \"ci-rustc\", \".rustc-stamp\")\n         True\n         \"\"\"\n-        return os.path.join(self.bin_root(), '.rustc-stamp')\n+        return os.path.join(self.bin_root(stage0), '.rustc-stamp')\n \n     def rustfmt_stamp(self):\n         \"\"\"Return the path for .rustfmt-stamp\n@@ -678,7 +688,7 @@ def rustfmt_stamp(self):\n         >>> rb.rustfmt_stamp() == os.path.join(\"build\", \"stage0\", \".rustfmt-stamp\")\n         True\n         \"\"\"\n-        return os.path.join(self.bin_root(), '.rustfmt-stamp')\n+        return os.path.join(self.bin_root(True), '.rustfmt-stamp')\n \n     def llvm_stamp(self):\n         \"\"\"Return the path for .rustfmt-stamp\n@@ -698,21 +708,27 @@ def program_out_of_date(self, stamp_path, key):\n         with open(stamp_path, 'r') as stamp:\n             return key != stamp.read()\n \n-    def bin_root(self):\n-        \"\"\"Return the binary root directory\n+    def bin_root(self, stage0):\n+        \"\"\"Return the binary root directory for the given stage\n \n         >>> rb = RustBuild()\n         >>> rb.build_dir = \"build\"\n-        >>> rb.bin_root() == os.path.join(\"build\", \"stage0\")\n+        >>> rb.bin_root(True) == os.path.join(\"build\", \"stage0\")\n+        True\n+        >>> rb.bin_root(False) == os.path.join(\"build\", \"ci-rustc\")\n         True\n \n         When the 'build' property is given should be a nested directory:\n \n         >>> rb.build = \"devel\"\n-        >>> rb.bin_root() == os.path.join(\"build\", \"devel\", \"stage0\")\n+        >>> rb.bin_root(True) == os.path.join(\"build\", \"devel\", \"stage0\")\n         True\n         \"\"\"\n-        return os.path.join(self.build_dir, self.build, \"stage0\")\n+        if stage0:\n+            subdir = \"stage0\"\n+        else:\n+            subdir = \"ci-rustc\"\n+        return os.path.join(self.build_dir, self.build, subdir)\n \n     def llvm_root(self):\n         \"\"\"Return the CI LLVM root directory\n@@ -775,33 +791,37 @@ def cargo(self):\n         \"\"\"Return config path for cargo\"\"\"\n         return self.program_config('cargo')\n \n-    def rustc(self):\n+    def rustc(self, stage0):\n         \"\"\"Return config path for rustc\"\"\"\n-        return self.program_config('rustc')\n+        return self.program_config('rustc', stage0)\n \n     def rustfmt(self):\n         \"\"\"Return config path for rustfmt\"\"\"\n         if not self.rustfmt_channel:\n             return None\n         return self.program_config('rustfmt')\n \n-    def program_config(self, program):\n-        \"\"\"Return config path for the given program\n+    def program_config(self, program, stage0=True):\n+        \"\"\"Return config path for the given program at the given stage\n \n         >>> rb = RustBuild()\n         >>> rb.config_toml = 'rustc = \"rustc\"\\\\n'\n         >>> rb.program_config('rustc')\n         'rustc'\n         >>> rb.config_toml = ''\n-        >>> cargo_path = rb.program_config('cargo')\n-        >>> cargo_path.rstrip(\".exe\") == os.path.join(rb.bin_root(),\n+        >>> cargo_path = rb.program_config('cargo', True)\n+        >>> cargo_path.rstrip(\".exe\") == os.path.join(rb.bin_root(True),\n+        ... \"bin\", \"cargo\")\n+        True\n+        >>> cargo_path = rb.program_config('cargo', False)\n+        >>> cargo_path.rstrip(\".exe\") == os.path.join(rb.bin_root(False),\n         ... \"bin\", \"cargo\")\n         True\n         \"\"\"\n         config = self.get_toml(program)\n         if config:\n             return os.path.expanduser(config)\n-        return os.path.join(self.bin_root(), \"bin\", \"{}{}\".format(\n+        return os.path.join(self.bin_root(stage0), \"bin\", \"{}{}\".format(\n             program, self.exe_suffix()))\n \n     @staticmethod\n@@ -856,14 +876,14 @@ def build_bootstrap(self):\n         if \"CARGO_BUILD_TARGET\" in env:\n             del env[\"CARGO_BUILD_TARGET\"]\n         env[\"CARGO_TARGET_DIR\"] = build_dir\n-        env[\"RUSTC\"] = self.rustc()\n-        env[\"LD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n+        env[\"RUSTC\"] = self.rustc(True)\n+        env[\"LD_LIBRARY_PATH\"] = os.path.join(self.bin_root(True), \"lib\") + \\\n             (os.pathsep + env[\"LD_LIBRARY_PATH\"]) \\\n             if \"LD_LIBRARY_PATH\" in env else \"\"\n-        env[\"DYLD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n+        env[\"DYLD_LIBRARY_PATH\"] = os.path.join(self.bin_root(True), \"lib\") + \\\n             (os.pathsep + env[\"DYLD_LIBRARY_PATH\"]) \\\n             if \"DYLD_LIBRARY_PATH\" in env else \"\"\n-        env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n+        env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(True), \"lib\") + \\\n             (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n             if \"LIBRARY_PATH\" in env else \"\"\n         # preserve existing RUSTFLAGS\n@@ -886,7 +906,7 @@ def build_bootstrap(self):\n         if self.get_toml(\"deny-warnings\", \"rust\") != \"false\":\n             env[\"RUSTFLAGS\"] += \" -Dwarnings\"\n \n-        env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n+        env[\"PATH\"] = os.path.join(self.bin_root(True), \"bin\") + \\\n             os.pathsep + env[\"PATH\"]\n         if not os.path.isfile(self.cargo()):\n             raise Exception(\"no cargo executable found at `{}`\".format(\n@@ -1137,14 +1157,9 @@ def bootstrap(help_triggered):\n     build.update_submodules()\n \n     # Fetch/build the bootstrap\n-    build.rustc_commit = build.maybe_download_rustc()\n-    if build.rustc_commit is not None:\n-        if build.verbose:\n-            commit = build.rustc_commit\n-            print(\"using downloaded stage1 artifacts from CI (commit {})\".format(commit))\n-        # FIXME: support downloading artifacts from the beta channel\n-        build.rustc_channel = \"nightly\"\n-    build.download_stage0()\n+    build.download_toolchain()\n+    # Download the master compiler if `download-rustc` is set\n+    build.maybe_download_ci_toolchain()\n     sys.stdout.flush()\n     build.ensure_vendored()\n     build.build_bootstrap()"}, {"sha": "8244c7710ab7b6f7f50bb555c3fe2786364b7a0c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -65,7 +65,9 @@ impl Step for Std {\n \n         // These artifacts were already copied (in `impl Step for Sysroot`).\n         // Don't recompile them.\n-        if builder.config.download_rustc {\n+        // NOTE: the ABI of the beta compiler is different from the ABI of the downloaded compiler,\n+        // so its artifacts can't be reused.\n+        if builder.config.download_rustc && compiler.stage != 0 {\n             return;\n         }\n \n@@ -513,7 +515,9 @@ impl Step for Rustc {\n         let compiler = self.compiler;\n         let target = self.target;\n \n-        if builder.config.download_rustc {\n+        // NOTE: the ABI of the beta compiler is different from the ABI of the downloaded compiler,\n+        // so its artifacts can't be reused.\n+        if builder.config.download_rustc && compiler.stage != 0 {\n             // Copy the existing artifacts instead of rebuilding them.\n             // NOTE: this path is only taken for tools linking to rustc-dev.\n             builder.ensure(Sysroot { compiler });\n@@ -934,14 +938,15 @@ impl Step for Sysroot {\n         t!(fs::create_dir_all(&sysroot));\n \n         // If we're downloading a compiler from CI, we can use the same compiler for all stages other than 0.\n-        if builder.config.download_rustc {\n+        if builder.config.download_rustc && compiler.stage != 0 {\n             assert_eq!(\n                 builder.config.build, compiler.host,\n                 \"Cross-compiling is not yet supported with `download-rustc`\",\n             );\n             // Copy the compiler into the correct sysroot.\n-            let stage0_dir = builder.config.out.join(&*builder.config.build.triple).join(\"stage0\");\n-            builder.cp_r(&stage0_dir, &sysroot);\n+            let ci_rustc_dir =\n+                builder.config.out.join(&*builder.config.build.triple).join(\"ci-rustc\");\n+            builder.cp_r(&ci_rustc_dir, &sysroot);\n             return INTERNER.intern_path(sysroot);\n         }\n "}, {"sha": "471f671fd272abd3cce0219c3986f64ee83b7d6f", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 53, "deletions": 45, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -687,51 +687,6 @@ impl Config {\n         set(&mut config.print_step_timings, build.print_step_timings);\n         set(&mut config.print_step_rusage, build.print_step_rusage);\n \n-        // See https://github.com/rust-lang/compiler-team/issues/326\n-        config.stage = match config.cmd {\n-            Subcommand::Check { .. } => flags.stage.or(build.check_stage).unwrap_or(0),\n-            Subcommand::Doc { .. } => flags.stage.or(build.doc_stage).unwrap_or(0),\n-            Subcommand::Build { .. } => flags.stage.or(build.build_stage).unwrap_or(1),\n-            Subcommand::Test { .. } => flags.stage.or(build.test_stage).unwrap_or(1),\n-            Subcommand::Bench { .. } => flags.stage.or(build.bench_stage).unwrap_or(2),\n-            Subcommand::Dist { .. } => flags.stage.or(build.dist_stage).unwrap_or(2),\n-            Subcommand::Install { .. } => flags.stage.or(build.install_stage).unwrap_or(2),\n-            // These are all bootstrap tools, which don't depend on the compiler.\n-            // The stage we pass shouldn't matter, but use 0 just in case.\n-            Subcommand::Clean { .. }\n-            | Subcommand::Clippy { .. }\n-            | Subcommand::Fix { .. }\n-            | Subcommand::Run { .. }\n-            | Subcommand::Setup { .. }\n-            | Subcommand::Format { .. } => flags.stage.unwrap_or(0),\n-        };\n-\n-        // CI should always run stage 2 builds, unless it specifically states otherwise\n-        #[cfg(not(test))]\n-        if flags.stage.is_none() && crate::CiEnv::current() != crate::CiEnv::None {\n-            match config.cmd {\n-                Subcommand::Test { .. }\n-                | Subcommand::Doc { .. }\n-                | Subcommand::Build { .. }\n-                | Subcommand::Bench { .. }\n-                | Subcommand::Dist { .. }\n-                | Subcommand::Install { .. } => {\n-                    assert_eq!(\n-                        config.stage, 2,\n-                        \"x.py should be run with `--stage 2` on CI, but was run with `--stage {}`\",\n-                        config.stage,\n-                    );\n-                }\n-                Subcommand::Clean { .. }\n-                | Subcommand::Check { .. }\n-                | Subcommand::Clippy { .. }\n-                | Subcommand::Fix { .. }\n-                | Subcommand::Run { .. }\n-                | Subcommand::Setup { .. }\n-                | Subcommand::Format { .. } => {}\n-            }\n-        }\n-\n         config.verbose = cmp::max(config.verbose, flags.verbose);\n \n         if let Some(install) = toml.install {\n@@ -1005,6 +960,59 @@ impl Config {\n         let default = config.channel == \"dev\";\n         config.ignore_git = ignore_git.unwrap_or(default);\n \n+        let download_rustc = config.download_rustc;\n+        // See https://github.com/rust-lang/compiler-team/issues/326\n+        config.stage = match config.cmd {\n+            Subcommand::Check { .. } => flags.stage.or(build.check_stage).unwrap_or(0),\n+            // `download-rustc` only has a speed-up for stage2 builds. Default to stage2 unless explicitly overridden.\n+            Subcommand::Doc { .. } => {\n+                flags.stage.or(build.doc_stage).unwrap_or(if download_rustc { 2 } else { 0 })\n+            }\n+            Subcommand::Build { .. } => {\n+                flags.stage.or(build.build_stage).unwrap_or(if download_rustc { 2 } else { 1 })\n+            }\n+            Subcommand::Test { .. } => {\n+                flags.stage.or(build.test_stage).unwrap_or(if download_rustc { 2 } else { 1 })\n+            }\n+            Subcommand::Bench { .. } => flags.stage.or(build.bench_stage).unwrap_or(2),\n+            Subcommand::Dist { .. } => flags.stage.or(build.dist_stage).unwrap_or(2),\n+            Subcommand::Install { .. } => flags.stage.or(build.install_stage).unwrap_or(2),\n+            // These are all bootstrap tools, which don't depend on the compiler.\n+            // The stage we pass shouldn't matter, but use 0 just in case.\n+            Subcommand::Clean { .. }\n+            | Subcommand::Clippy { .. }\n+            | Subcommand::Fix { .. }\n+            | Subcommand::Run { .. }\n+            | Subcommand::Setup { .. }\n+            | Subcommand::Format { .. } => flags.stage.unwrap_or(0),\n+        };\n+\n+        // CI should always run stage 2 builds, unless it specifically states otherwise\n+        #[cfg(not(test))]\n+        if flags.stage.is_none() && crate::CiEnv::current() != crate::CiEnv::None {\n+            match config.cmd {\n+                Subcommand::Test { .. }\n+                | Subcommand::Doc { .. }\n+                | Subcommand::Build { .. }\n+                | Subcommand::Bench { .. }\n+                | Subcommand::Dist { .. }\n+                | Subcommand::Install { .. } => {\n+                    assert_eq!(\n+                        config.stage, 2,\n+                        \"x.py should be run with `--stage 2` on CI, but was run with `--stage {}`\",\n+                        config.stage,\n+                    );\n+                }\n+                Subcommand::Clean { .. }\n+                | Subcommand::Check { .. }\n+                | Subcommand::Clippy { .. }\n+                | Subcommand::Fix { .. }\n+                | Subcommand::Run { .. }\n+                | Subcommand::Setup { .. }\n+                | Subcommand::Format { .. } => {}\n+            }\n+        }\n+\n         config\n     }\n "}, {"sha": "f9be35d7c5e0df7619acb4feda3793a239c67f3f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -513,6 +513,19 @@ impl Step for Rustdoc {\n         // rustc compiler it's paired with, so it must be built with the previous stage compiler.\n         let build_compiler = builder.compiler(target_compiler.stage - 1, builder.config.build);\n \n+        // When using `download-rustc` and a stage0 build_compiler, copying rustc doesn't actually\n+        // build stage0 libstd (because the libstd in sysroot has the wrong ABI). Explicitly build\n+        // it.\n+        builder.ensure(compile::Std { compiler: build_compiler, target: target_compiler.host });\n+        builder.ensure(compile::Rustc { compiler: build_compiler, target: target_compiler.host });\n+        // NOTE: this implies that `download-rustc` is pretty useless when compiling with the stage0\n+        // compiler, since you do just as much work.\n+        if !builder.config.dry_run && builder.config.download_rustc && build_compiler.stage == 0 {\n+            println!(\n+                \"warning: `download-rustc` does nothing when building stage1 tools; consider using `--stage 2` instead\"\n+            );\n+        }\n+\n         // The presence of `target_compiler` ensures that the necessary libraries (codegen backends,\n         // compiler libraries, ...) are built. Rustdoc does not require the presence of any\n         // libraries within sysroot_libdir (i.e., rustlib), though doctests may want it (since"}, {"sha": "9c0ed1480fef3846db5dc08accffab7b1f7f75b5", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -251,19 +251,9 @@ crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n     debug!(\"trying to get a name from pattern: {:?}\", p);\n \n     Symbol::intern(&match p.kind {\n-        PatKind::Wild => return kw::Underscore,\n+        PatKind::Wild | PatKind::Struct(..) => return kw::Underscore,\n         PatKind::Binding(_, _, ident, _) => return ident.name,\n         PatKind::TupleStruct(ref p, ..) | PatKind::Path(ref p) => qpath_to_string(p),\n-        PatKind::Struct(ref name, ref fields, etc) => format!(\n-            \"{} {{ {}{} }}\",\n-            qpath_to_string(name),\n-            fields\n-                .iter()\n-                .map(|fp| format!(\"{}: {}\", fp.ident, name_from_pat(&fp.pat)))\n-                .collect::<Vec<String>>()\n-                .join(\", \"),\n-            if etc { \", ..\" } else { \"\" }\n-        ),\n         PatKind::Or(ref pats) => pats\n             .iter()\n             .map(|p| name_from_pat(&**p).to_string())"}, {"sha": "bf57e3c37d3fb2edf5fc47f10aef42e0d5aecf63", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -1915,13 +1915,6 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n         }\n \n         if v.iter().any(|i| i.inner_impl().trait_.is_some()) {\n-            if let Some(impl_) = v\n-                .iter()\n-                .filter(|i| i.inner_impl().trait_.is_some())\n-                .find(|i| i.inner_impl().trait_.def_id_full(cache) == cx.cache.deref_trait_did)\n-            {\n-                sidebar_deref_methods(cx, out, impl_, v);\n-            }\n             let format_impls = |impls: Vec<&Impl>| {\n                 let mut links = FxHashSet::default();\n \n@@ -1989,6 +1982,14 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                 );\n                 write_sidebar_links(out, blanket_format);\n             }\n+\n+            if let Some(impl_) = v\n+                .iter()\n+                .filter(|i| i.inner_impl().trait_.is_some())\n+                .find(|i| i.inner_impl().trait_.def_id_full(cache) == cx.cache.deref_trait_did)\n+            {\n+                sidebar_deref_methods(cx, out, impl_, v);\n+            }\n         }\n     }\n }"}, {"sha": "8fb6d68f3c6bc61df4b50798b1e14dcc39684453", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -26,10 +26,10 @@ crate static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| {\n         \"FiraSans-Regular.woff\" => static_files::fira_sans::REGULAR,\n         \"FiraSans-Medium.woff\" => static_files::fira_sans::MEDIUM,\n         \"FiraSans-LICENSE.txt\" => static_files::fira_sans::LICENSE,\n-        \"SourceSerifPro-Regular.ttf.woff\" => static_files::source_serif_pro::REGULAR,\n-        \"SourceSerifPro-Bold.ttf.woff\" => static_files::source_serif_pro::BOLD,\n-        \"SourceSerifPro-It.ttf.woff\" => static_files::source_serif_pro::ITALIC,\n-        \"SourceSerifPro-LICENSE.md\" => static_files::source_serif_pro::LICENSE,\n+        \"SourceSerif4-Regular.ttf.woff\" => static_files::source_serif_4::REGULAR,\n+        \"SourceSerif4-Bold.ttf.woff\" => static_files::source_serif_4::BOLD,\n+        \"SourceSerif4-It.ttf.woff\" => static_files::source_serif_4::ITALIC,\n+        \"SourceSerif4-LICENSE.md\" => static_files::source_serif_4::LICENSE,\n         \"SourceCodePro-Regular.ttf.woff\" => static_files::source_code_pro::REGULAR,\n         \"SourceCodePro-Semibold.ttf.woff\" => static_files::source_code_pro::SEMIBOLD,\n         \"SourceCodePro-It.ttf.woff\" => static_files::source_code_pro::ITALIC,"}, {"sha": "16d79032fcc63edacc6b5485564fc4e6db3e80b2", "filename": "src/librustdoc/html/static/COPYRIGHT.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -33,14 +33,14 @@ included, and carry their own copyright notices and license terms:\n     Licensed under the SIL Open Font License, Version 1.1.\n     See SourceCodePro-LICENSE.txt.\n \n-* Source Serif Pro (SourceSerifPro-Regular.ttf.woff,\n-    SourceSerifPro-Bold.ttf.woff, SourceSerifPro-It.ttf.woff):\n+* Source Serif 4 (SourceSerif4-Regular.ttf.woff, SourceSerif4-Bold.ttf.woff,\n+    SourceSerif4-It.ttf.woff):\n \n-    Copyright 2014 Adobe Systems Incorporated (http://www.adobe.com/), with\n-    Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of\n-    Adobe Systems Incorporated in the United States and/or other countries.\n+    Copyright 2014-2021 Adobe (http://www.adobe.com/), with Reserved Font Name\n+    'Source'. All Rights Reserved. Source is a trademark of Adobe in the United\n+    States and/or other countries.\n \n     Licensed under the SIL Open Font License, Version 1.1.\n-    See SourceSerifPro-LICENSE.txt.\n+    See SourceSerif4-LICENSE.md.\n \n This copyright file is intended to be distributed with rustdoc output."}, {"sha": "8ad41888e6e3f9f4439052ae6b14ece2cdfcd7cb", "filename": "src/librustdoc/html/static/SourceSerif4-Bold.ttf.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Bold.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Bold.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Bold.ttf.woff?ref=39eee173fbcc21462d255b364b87715cd33b62db"}, {"sha": "2a34b5c42a8aaca17a3c6a37a33489ab0cf2193f", "filename": "src/librustdoc/html/static/SourceSerif4-It.ttf.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-It.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-It.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-It.ttf.woff?ref=39eee173fbcc21462d255b364b87715cd33b62db"}, {"sha": "68ea1892406cbcb50b001b99cd19b49d69a9c585", "filename": "src/librustdoc/html/static/SourceSerif4-LICENSE.md", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-LICENSE.md", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-LICENSE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-LICENSE.md?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -1,4 +1,4 @@\n-Copyright 2014-2018 Adobe (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries.\n+Copyright 2014-2021 Adobe (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries.\n \n This Font Software is licensed under the SIL Open Font License, Version 1.1.\n ", "previous_filename": "src/librustdoc/html/static/SourceSerifPro-LICENSE.md"}, {"sha": "45a5521ab0c77a02ebf55a3f7305faccc02e2894", "filename": "src/librustdoc/html/static/SourceSerif4-Regular.ttf.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Regular.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Regular.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerif4-Regular.ttf.woff?ref=39eee173fbcc21462d255b364b87715cd33b62db"}, {"sha": "ca254318fe9ea9fc0f3313bc5df7ea5109f16921", "filename": "src/librustdoc/html/static/SourceSerifPro-Bold.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/58e71896506edb701f276158bd2f47e8788a1133/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/58e71896506edb701f276158bd2f47e8788a1133/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Bold.ttf.woff?ref=58e71896506edb701f276158bd2f47e8788a1133"}, {"sha": "a287bbe6ed3f871376686682bb455d71a13882b2", "filename": "src/librustdoc/html/static/SourceSerifPro-It.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/58e71896506edb701f276158bd2f47e8788a1133/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-It.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/58e71896506edb701f276158bd2f47e8788a1133/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-It.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-It.ttf.woff?ref=58e71896506edb701f276158bd2f47e8788a1133"}, {"sha": "a3d55cfdf2555f47860979797d2e8971520c2fa4", "filename": "src/librustdoc/html/static/SourceSerifPro-Regular.ttf.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/58e71896506edb701f276158bd2f47e8788a1133/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/58e71896506edb701f276158bd2f47e8788a1133/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceSerifPro-Regular.ttf.woff?ref=58e71896506edb701f276158bd2f47e8788a1133"}, {"sha": "585b7459bd717cde44684c2415aef6fa96d257d3", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -18,26 +18,26 @@\n \tfont-display: swap;\n }\n \n-/* See SourceSerifPro-LICENSE.txt for the Source Serif Pro license. */\n+/* See SourceSerif4-LICENSE.md for the Source Serif 4 license. */\n @font-face {\n-\tfont-family: 'Source Serif Pro';\n+\tfont-family: 'Source Serif 4';\n \tfont-style: normal;\n \tfont-weight: 400;\n-\tsrc: local('Source Serif Pro'), url(\"SourceSerifPro-Regular.ttf.woff\") format('woff');\n+\tsrc: local('Source Serif 4'), url(\"SourceSerif4-Regular.ttf.woff\") format('woff');\n \tfont-display: swap;\n }\n @font-face {\n-\tfont-family: 'Source Serif Pro';\n+\tfont-family: 'Source Serif 4';\n \tfont-style: italic;\n \tfont-weight: 400;\n-\tsrc: local('Source Serif Pro Italic'), url(\"SourceSerifPro-It.ttf.woff\") format('woff');\n+\tsrc: local('Source Serif 4 Italic'), url(\"SourceSerif4-It.ttf.woff\") format('woff');\n \tfont-display: swap;\n }\n @font-face {\n-\tfont-family: 'Source Serif Pro';\n+\tfont-family: 'Source Serif 4';\n \tfont-style: normal;\n \tfont-weight: 700;\n-\tsrc: local('Source Serif Pro Bold'), url(\"SourceSerifPro-Bold.ttf.woff\") format('woff');\n+\tsrc: local('Source Serif 4 Bold'), url(\"SourceSerif4-Bold.ttf.woff\") format('woff');\n \tfont-display: swap;\n }\n \n@@ -90,7 +90,7 @@ html {\n /* General structure and fonts */\n \n body {\n-\tfont: 16px/1.4 \"Source Serif Pro\", serif;\n+\tfont: 16px/1.4 \"Source Serif 4\", serif;\n \tmargin: 0;\n \tposition: relative;\n \tpadding: 10px 15px 20px 15px;"}, {"sha": "b3ac865d55ea1c4390c3625bc7b75990afe5a675", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -89,20 +89,19 @@ crate mod fira_sans {\n     crate static LICENSE: &[u8] = include_bytes!(\"static/FiraSans-LICENSE.txt\");\n }\n \n-/// Files related to the Source Serif Pro font.\n-crate mod source_serif_pro {\n-    /// The file `SourceSerifPro-Regular.ttf.woff`, the Regular variant of the Source Serif Pro\n-    /// font.\n-    crate static REGULAR: &[u8] = include_bytes!(\"static/SourceSerifPro-Regular.ttf.woff\");\n+/// Files related to the Source Serif 4 font.\n+crate mod source_serif_4 {\n+    /// The file `SourceSerif4-Regular.ttf.woff`, the Regular variant of the Source Serif 4 font.\n+    crate static REGULAR: &[u8] = include_bytes!(\"static/SourceSerif4-Regular.ttf.woff\");\n \n-    /// The file `SourceSerifPro-Bold.ttf.woff`, the Bold variant of the Source Serif Pro font.\n-    crate static BOLD: &[u8] = include_bytes!(\"static/SourceSerifPro-Bold.ttf.woff\");\n+    /// The file `SourceSerif4-Bold.ttf.woff`, the Bold variant of the Source Serif 4 font.\n+    crate static BOLD: &[u8] = include_bytes!(\"static/SourceSerif4-Bold.ttf.woff\");\n \n-    /// The file `SourceSerifPro-It.ttf.woff`, the Italic variant of the Source Serif Pro font.\n-    crate static ITALIC: &[u8] = include_bytes!(\"static/SourceSerifPro-It.ttf.woff\");\n+    /// The file `SourceSerif4-It.ttf.woff`, the Italic variant of the Source Serif 4 font.\n+    crate static ITALIC: &[u8] = include_bytes!(\"static/SourceSerif4-It.ttf.woff\");\n \n-    /// The file `SourceSerifPro-LICENSE.txt`, the license text for the Source Serif Pro font.\n-    crate static LICENSE: &[u8] = include_bytes!(\"static/SourceSerifPro-LICENSE.md\");\n+    /// The file `SourceSerif4-LICENSE.txt`, the license text for the Source Serif 4 font.\n+    crate static LICENSE: &[u8] = include_bytes!(\"static/SourceSerif4-LICENSE.md\");\n }\n \n /// Files related to the Source Code Pro font."}, {"sha": "545fbf2618121f23645026ca6731a00f1cfefc1d", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -978,14 +978,18 @@ impl LinkCollector<'_, '_> {\n             Ok(Some((d, path))) => (path.trim(), Some(d)),\n             Ok(None) => (link.trim(), None),\n             Err((err_msg, relative_range)) => {\n-                let disambiguator_range = (no_backticks_range.start + relative_range.start)\n-                    ..(no_backticks_range.start + relative_range.end);\n-                disambiguator_error(self.cx, &item, dox, disambiguator_range, &err_msg);\n+                if !should_ignore_link_with_disambiguators(link) {\n+                    // Only report error if we would not have ignored this link.\n+                    // See issue #83859.\n+                    let disambiguator_range = (no_backticks_range.start + relative_range.start)\n+                        ..(no_backticks_range.start + relative_range.end);\n+                    disambiguator_error(self.cx, &item, dox, disambiguator_range, &err_msg);\n+                }\n                 return None;\n             }\n         };\n \n-        if path_str.contains(|ch: char| !(ch.is_alphanumeric() || \":_<>, !*&;\".contains(ch))) {\n+        if should_ignore_link(path_str) {\n             return None;\n         }\n \n@@ -1515,6 +1519,22 @@ fn range_between_backticks(ori_link: &MarkdownLink) -> Range<usize> {\n         ..(ori_link.range.start + before_second_backtick_group)\n }\n \n+/// Returns true if we should ignore `link` due to it being unlikely\n+/// that it is an intra-doc link. `link` should still have disambiguators\n+/// if there were any.\n+///\n+/// The difference between this and [`should_ignore_link()`] is that this\n+/// check should only be used on links that still have disambiguators.\n+fn should_ignore_link_with_disambiguators(link: &str) -> bool {\n+    link.contains(|ch: char| !(ch.is_alphanumeric() || \":_<>, !*&;@()\".contains(ch)))\n+}\n+\n+/// Returns true if we should ignore `path_str` due to it being unlikely\n+/// that it is an intra-doc link.\n+fn should_ignore_link(path_str: &str) -> bool {\n+    path_str.contains(|ch: char| !(ch.is_alphanumeric() || \":_<>, !*&;\".contains(ch)))\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n /// Disambiguators for a link.\n crate enum Disambiguator {"}, {"sha": "4b20cd5d7453ee6a21262a9d600725d78bde2705", "filename": "src/test/run-make-fulldeps/print-unversioned-files/unversioned-files.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -10,7 +10,7 @@ SourceCodePro-It.ttf.woff\n SourceCodePro-LICENSE.txt\n SourceCodePro-Regular.ttf.woff\n SourceCodePro-Semibold.ttf.woff\n-SourceSerifPro-Bold.ttf.woff\n-SourceSerifPro-It.ttf.woff\n-SourceSerifPro-LICENSE.md\n-SourceSerifPro-Regular.ttf.woff\n+SourceSerif4-Bold.ttf.woff\n+SourceSerif4-It.ttf.woff\n+SourceSerif4-LICENSE.md\n+SourceSerif4-Regular.ttf.woff"}, {"sha": "d89b526d4303fddb93b2c9a08112dbb4c5e742fc", "filename": "src/test/run-make/emit-shared-files/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -14,7 +14,7 @@ invocation-only:\n \t[ -e $(INVOCATION_ONLY)/x/index.html ]\n \t[ -e $(INVOCATION_ONLY)/theme-xxx.css ] # generated from z.css\n \t! [ -e $(INVOCATION_ONLY)/storage-xxx.js ]\n-\t! [ -e $(INVOCATION_ONLY)/SourceSerifPro-It.ttf.woff ]\n+\t! [ -e $(INVOCATION_ONLY)/SourceSerif4-It.ttf.woff ]\n \n \t# FIXME: this probably shouldn't have a suffix\n \t[ -e $(INVOCATION_ONLY)/y-xxx.css ]\n@@ -24,7 +24,7 @@ invocation-only:\n toolchain-only:\n \t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources --output $(TOOLCHAIN_ONLY) --resource-suffix=-xxx --extend-css z.css x.rs\n \t[ -e $(TOOLCHAIN_ONLY)/storage-xxx.js ]\n-\t! [ -e $(TOOLCHAIN_ONLY)/SourceSerifPro-It.ttf.woff ]\n+\t! [ -e $(TOOLCHAIN_ONLY)/SourceSerif4-It.ttf.woff ]\n \t! [ -e $(TOOLCHAIN_ONLY)/search-index-xxx.js ]\n \t! [ -e $(TOOLCHAIN_ONLY)/x/index.html ]\n \t! [ -e $(TOOLCHAIN_ONLY)/theme.css ]\n@@ -35,7 +35,7 @@ toolchain-only:\n all-shared:\n \t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources,unversioned-shared-resources --output $(ALL_SHARED) --resource-suffix=-xxx --extend-css z.css x.rs\n \t[ -e $(ALL_SHARED)/storage-xxx.js ]\n-\t[ -e $(ALL_SHARED)/SourceSerifPro-It.ttf.woff ]\n+\t[ -e $(ALL_SHARED)/SourceSerif4-It.ttf.woff ]\n \t! [ -e $(ALL_SHARED)/search-index-xxx.js ]\n \t! [ -e $(ALL_SHARED)/settings.html ]\n \t! [ -e $(ALL_SHARED)/x ]"}, {"sha": "417618c74582cda0c897cf8a7658eb6e0f1ef3b0", "filename": "src/test/rustdoc-ui/intra-doc/email-address-localhost.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -0,0 +1,6 @@\n+#![deny(warnings)]\n+\n+//! Email me at <hello@localhost>.\n+//~^ ERROR unknown disambiguator `hello`\n+\n+//! This should *not* warn: <hello@example.com>."}, {"sha": "de215b2163bd4e28d1100720c34876aa08ec4f8f", "filename": "src/test/rustdoc-ui/intra-doc/email-address-localhost.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Femail-address-localhost.stderr?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -0,0 +1,15 @@\n+error: unknown disambiguator `hello`\n+  --> $DIR/email-address-localhost.rs:3:18\n+   |\n+LL | //! Email me at <hello@localhost>.\n+   |                  ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/email-address-localhost.rs:1:9\n+   |\n+LL | #![deny(warnings)]\n+   |         ^^^^^^^^\n+   = note: `#[deny(rustdoc::broken_intra_doc_links)]` implied by `#[deny(warnings)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "c407eb80da225aed5eb1895a02d5fc33eb387b26", "filename": "src/test/rustdoc/intra-doc/email-address.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Ftest%2Frustdoc%2Fintra-doc%2Femail-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Ftest%2Frustdoc%2Fintra-doc%2Femail-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Femail-address.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -0,0 +1,6 @@\n+//! Email me at <hello@example.com>.\n+//! Email me at <hello-world@example.com>.\n+//! Email me at <hello@localhost> (this warns but will still become a link).\n+// @has email_address/index.html '//a[@href=\"mailto:hello@example.com\"]' 'hello@example.com'\n+// @has email_address/index.html '//a[@href=\"mailto:hello-world@example.com\"]' 'hello-world@example.com'\n+// @has email_address/index.html '//a[@href=\"mailto:hello@localhost\"]' 'hello@localhost'"}, {"sha": "3c0369e3d3413e221f775561555dd3e37b9d2c28", "filename": "src/test/rustdoc/struct-arg-pattern.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Ftest%2Frustdoc%2Fstruct-arg-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Ftest%2Frustdoc%2Fstruct-arg-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstruct-arg-pattern.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -0,0 +1,10 @@\n+#![crate_name = \"foo\"]\n+\n+struct BodyId {\n+    hir_id: usize,\n+}\n+\n+// @has 'foo/fn.body_owner.html' '//*[@class=\"rust fn\"]' 'pub fn body_owner(_: BodyId)'\n+pub fn body_owner(BodyId { hir_id }: BodyId) {\n+    // ...\n+}"}, {"sha": "902f8fdde58e9c2f80b624603ed1a4b6d081c9c7", "filename": "src/test/ui/inference/issue-81522.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/39eee173fbcc21462d255b364b87715cd33b62db/src%2Ftest%2Fui%2Finference%2Fissue-81522.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39eee173fbcc21462d255b364b87715cd33b62db/src%2Ftest%2Fui%2Finference%2Fissue-81522.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-81522.rs?ref=39eee173fbcc21462d255b364b87715cd33b62db", "patch": "@@ -0,0 +1,31 @@\n+// Regression test for #81522.\n+// Ensures that `#[allow(unstable_name_collisions)]` appended to things other than function\n+// suppresses the corresponding diagnostics emitted from inside them.\n+// But note that this attribute doesn't work for macro invocations if it is appended directly.\n+\n+// aux-build:inference_unstable_iterator.rs\n+// aux-build:inference_unstable_itertools.rs\n+// run-pass\n+\n+extern crate inference_unstable_iterator;\n+extern crate inference_unstable_itertools;\n+\n+#[allow(unused_imports)]\n+use inference_unstable_iterator::IpuIterator;\n+use inference_unstable_itertools::IpuItertools;\n+\n+fn main() {\n+    // expression statement\n+    #[allow(unstable_name_collisions)]\n+    'x'.ipu_flatten();\n+\n+    // let statement\n+    #[allow(unstable_name_collisions)]\n+    let _ = 'x'.ipu_flatten();\n+\n+    // block expression\n+    #[allow(unstable_name_collisions)]\n+    {\n+        'x'.ipu_flatten();\n+    }\n+}"}]}