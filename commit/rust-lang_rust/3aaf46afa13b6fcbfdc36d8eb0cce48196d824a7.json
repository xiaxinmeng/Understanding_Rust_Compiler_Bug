{"sha": "3aaf46afa13b6fcbfdc36d8eb0cce48196d824a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYWY0NmFmYTEzYjZmY2JmZGMzNmQ4ZWIwY2NlNDgxOTZkODI0YTc=", "commit": {"author": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-11T15:40:08Z"}, "committer": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-11T15:40:08Z"}, "message": "Formatted changes.", "tree": {"sha": "a178742f62144801bd70bac21dc090923e1ced9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a178742f62144801bd70bac21dc090923e1ced9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aaf46afa13b6fcbfdc36d8eb0cce48196d824a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aaf46afa13b6fcbfdc36d8eb0cce48196d824a7", "html_url": "https://github.com/rust-lang/rust/commit/3aaf46afa13b6fcbfdc36d8eb0cce48196d824a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aaf46afa13b6fcbfdc36d8eb0cce48196d824a7/comments", "author": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7e36c3dd2b601401feb86bef3c0f8bb62fb4331", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7e36c3dd2b601401feb86bef3c0f8bb62fb4331", "html_url": "https://github.com/rust-lang/rust/commit/d7e36c3dd2b601401feb86bef3c0f8bb62fb4331"}], "stats": {"total": 52, "additions": 23, "deletions": 29}, "files": [{"sha": "ab21388c8d4159a6974b632ca366a6ed7c24687c", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aaf46afa13b6fcbfdc36d8eb0cce48196d824a7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aaf46afa13b6fcbfdc36d8eb0cce48196d824a7/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=3aaf46afa13b6fcbfdc36d8eb0cce48196d824a7", "patch": "@@ -6,8 +6,8 @@ use ra_syntax::{\n \n use crate::{\n     ast_transform::{self, AstTransform, QualifyPaths, SubstituteTypeParams},\n-    Assist, AssistCtx, AssistId,\n     utils::{get_missing_impl_items, resolve_target_trait},\n+    Assist, AssistCtx, AssistId,\n };\n \n #[derive(PartialEq)]\n@@ -129,7 +129,7 @@ fn add_missing_impl_members_inner(\n             ast::ImplItem::FnDef(def) => match mode {\n                 AddMissingImplMembersMode::DefaultMethodsOnly => def.body().is_some(),\n                 AddMissingImplMembersMode::NoDefaultMethods => def.body().is_none(),\n-            }\n+            },\n             _ => mode == AddMissingImplMembersMode::NoDefaultMethods,\n         })\n         .collect::<Vec<_>>();"}, {"sha": "461f01536e3199b71fdfb274b97bd765f4288345", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3aaf46afa13b6fcbfdc36d8eb0cce48196d824a7/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aaf46afa13b6fcbfdc36d8eb0cce48196d824a7/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=3aaf46afa13b6fcbfdc36d8eb0cce48196d824a7", "patch": "@@ -9,14 +9,13 @@ use hir::db::HirDatabase;\n \n use rustc_hash::FxHashSet;\n \n-/// Generate a collection of associated items that are missing from a \n+/// Generate a collection of associated items that are missing from a\n /// `impl Trait for` block.\n pub fn get_missing_impl_items(\n     db: &impl HirDatabase,\n     analyzer: &hir::SourceAnalyzer,\n     impl_block: &ast::ImplBlock,\n ) -> Vec<hir::AssocItem> {\n-    \n     // Names must be unique between constants and functions. However, type aliases\n     // may share the same name as a function or constant.\n     let mut impl_fns_consts = FxHashSet::default();\n@@ -53,9 +52,10 @@ pub fn get_missing_impl_items(\n             .filter(|i| match i {\n                 hir::AssocItem::Function(f) => !impl_fns_consts.contains(&f.name(db).to_string()),\n                 hir::AssocItem::TypeAlias(t) => !impl_type.contains(&t.name(db).to_string()),\n-                hir::AssocItem::Const(c) => {\n-                    c.name(db).map(|n| !impl_fns_consts.contains(&n.to_string())).unwrap_or_default()\n-                }\n+                hir::AssocItem::Const(c) => c\n+                    .name(db)\n+                    .map(|n| !impl_fns_consts.contains(&n.to_string()))\n+                    .unwrap_or_default(),\n             })\n             .map(|i| i.clone())\n             .collect()"}, {"sha": "cd3f016bfabc0155f427ce28daca3d3eaa39f526", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3aaf46afa13b6fcbfdc36d8eb0cce48196d824a7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aaf46afa13b6fcbfdc36d8eb0cce48196d824a7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=3aaf46afa13b6fcbfdc36d8eb0cce48196d824a7", "patch": "@@ -2,53 +2,55 @@ use crate::completion::{\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n };\n \n-use ra_syntax::{ast::{self, edit}, AstNode, SyntaxKind, TextRange};\n use hir::{self, Docs, HasSource};\n+use ra_syntax::{\n+    ast::{self, edit},\n+    AstNode, SyntaxKind, TextRange,\n+};\n \n use ra_assists::utils::get_missing_impl_items;\n \n /// Analyzes the specified `CompletionContext` and provides magic completions\n /// if the context falls within a `impl Trait for` block.\n-/// \n+///\n /// # Completion Activation\n-/// The completion will activate when a user begins to type a function \n+/// The completion will activate when a user begins to type a function\n /// definition, an associated type, or an associated constant.\n-/// \n+///\n /// ### Functions\n /// ```ignore\n /// trait SomeTrait {\n ///     fn foo(&self);\n /// }\n-/// \n+///\n /// impl SomeTrait for () {\n ///     fn <|>\n /// }\n /// ```\n-/// \n+///\n /// ### Associated Types\n /// ```ignore\n /// trait SomeTrait {\n ///     type SomeType;\n /// }\n-/// \n+///\n /// impl SomeTrait for () {\n ///     type <|>\n /// }\n /// ```\n-/// \n+///\n /// ### Associated Constants\n /// ```ignore\n /// trait SomeTrait {\n ///     const SOME_CONST: u16;\n /// }\n-/// \n+///\n /// impl SomeTrait for () {\n ///     const <|>\n /// }\n /// ```\n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n-\n-    // it is possible to have a parent `fn` and `impl` block. Ignore completion \n+    // it is possible to have a parent `fn` and `impl` block. Ignore completion\n     // attempts from within a `fn` block.\n     if ctx.function_syntax.is_some() {\n         return;\n@@ -111,11 +113,7 @@ fn add_type_alias_impl(\n         .add_to(acc);\n }\n \n-fn add_const_impl(\n-    acc: &mut Completions,\n-    ctx: &CompletionContext,\n-    const_: &hir::Const,\n-) {\n+fn add_const_impl(acc: &mut Completions, ctx: &CompletionContext, const_: &hir::Const) {\n     let snippet = make_const_compl_syntax(&const_.source(ctx.db).value);\n \n     CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n@@ -131,12 +129,8 @@ fn make_const_compl_syntax(const_: &ast::ConstDef) -> String {\n     let const_start = const_.syntax().text_range().start();\n     let const_end = const_.syntax().text_range().end();\n \n-    let start = const_\n-        .syntax()\n-        .first_child_or_token()\n-        .map_or(\n-            const_start,\n-            |f| f.text_range().start());\n+    let start =\n+        const_.syntax().first_child_or_token().map_or(const_start, |f| f.text_range().start());\n \n     let end = const_\n         .syntax()"}]}