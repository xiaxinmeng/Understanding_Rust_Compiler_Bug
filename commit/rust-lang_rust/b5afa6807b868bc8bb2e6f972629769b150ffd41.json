{"sha": "b5afa6807b868bc8bb2e6f972629769b150ffd41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YWZhNjgwN2I4NjhiYzhiYjJlNmY5NzI2Mjk3NjliMTUwZmZkNDE=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-14T16:35:12Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-17T07:15:54Z"}, "message": "Constified `Default` implementations\n\nThe libs-api team agrees to allow const_trait_impl to appear in the\nstandard library as long as stable code cannot be broken (they are\nproperly gated) this means if the compiler teams thinks it's okay, then\nit's okay.\n\nMy priority on constifying would be:\n\n\t1. Non-generic impls (e.g. Default) or generic impls with no\n\t   bounds\n\t2. Generic functions with bounds (that use const impls)\n\t3. Generic impls with bounds\n\t4. Impls for traits with associated types\n\nFor people opening constification PRs: please cc me and/or oli-obk.", "tree": {"sha": "4abfdf049ab0964aa14b4137fe4446d019169939", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4abfdf049ab0964aa14b4137fe4446d019169939"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5afa6807b868bc8bb2e6f972629769b150ffd41", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEbYi0ACgkQAn35M4hi\nrd017xAAnSvm3zJUioNhpwkgmhBFKbvSXkNLvuXNC8urfrddHq+oUO6ni/3+esMe\niehlh4JfkOqxdNJ2YjturUlZTv6L+5+JjGRKlQduEWNUMGCX5T5fHg62DnOZ1IWo\negMJRongG2iYcxegoNhohCqrvZQ2P/jgTAlqMQjZjm5EiAnCgxKWBPOWD9IY8q/w\nkyUC2Lsg0Zdj077pBdfmNyatj3iVCO+9VtHttp000nnmM7Gjf9j46qxVTBjYVIdB\ne0aHQ4abAwaJeeZY0kA3s0S49lzTX4DsfDPpGA/RAqPmjT6CRV5dBnv3QBArP0JZ\nfEbG88Lu8ph+7UZgE7Z1FA6tQDl4rSx1yWYnJeZ3zoiDal7vQKnmA7gZAi7GHIG5\nuw/PwwZI/zKMe0rOWopdTHctLgIUhshrfim+i3uOCa7G8c3/WjwaI1JYS4Bst38s\n+zW1B6P5L4KYMfKgwWd8aAbeCzN175kK/6+tnvlPFx8imOaDmAyN5CkBXb58VGAv\nGNa/+zJGZFO69bhXkRYPWX/95nLZf0r5MW63iisDkDbW//3LE7MJd0KY2yd6nPRl\nDK8He/VQ2I+yMVzICj3JYntgW5t6iTjK8b/yA0qYb7z2v56TDY/ajqViL+apbT1x\nab3z75w2Ldo1nP1FghKcyUy92JTX0nw2JvjSjN1RZp9NJlGLshc=\n=9Cr6\n-----END PGP SIGNATURE-----", "payload": "tree 4abfdf049ab0964aa14b4137fe4446d019169939\nparent 3b5df014390dcef66cc35f968fe51e9558e6ca13\nauthor Deadbeef <ent3rm4n@gmail.com> 1628958912 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1629184554 +0000\n\nConstified `Default` implementations\n\nThe libs-api team agrees to allow const_trait_impl to appear in the\nstandard library as long as stable code cannot be broken (they are\nproperly gated) this means if the compiler teams thinks it's okay, then\nit's okay.\n\nMy priority on constifying would be:\n\n\t1. Non-generic impls (e.g. Default) or generic impls with no\n\t   bounds\n\t2. Generic functions with bounds (that use const impls)\n\t3. Generic impls with bounds\n\t4. Impls for traits with associated types\n\nFor people opening constification PRs: please cc me and/or oli-obk.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5afa6807b868bc8bb2e6f972629769b150ffd41", "html_url": "https://github.com/rust-lang/rust/commit/b5afa6807b868bc8bb2e6f972629769b150ffd41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5afa6807b868bc8bb2e6f972629769b150ffd41/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b5df014390dcef66cc35f968fe51e9558e6ca13", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5df014390dcef66cc35f968fe51e9558e6ca13", "html_url": "https://github.com/rust-lang/rust/commit/3b5df014390dcef66cc35f968fe51e9558e6ca13"}], "stats": {"total": 75, "additions": 47, "deletions": 28}, "files": [{"sha": "1a387f291ccf43b17b6a1f026c729ed7a9bd76ca", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -95,6 +95,7 @@\n #![feature(const_fn_trait_bound)]\n #![feature(cow_is_borrowed)]\n #![feature(const_cow_is_borrowed)]\n+#![feature(const_trait_impl)]\n #![feature(destructuring_assignment)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]"}, {"sha": "6568d9f9907b998156293c7357b19f3eee447c87", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -2105,7 +2105,8 @@ impl_eq! { Cow<'a, str>, &'b str }\n impl_eq! { Cow<'a, str>, String }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Default for String {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl const Default for String {\n     /// Creates an empty `String`.\n     #[inline]\n     fn default() -> String {"}, {"sha": "87a0d371815629dde7a5e6523e546e0aab61953e", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -2758,7 +2758,8 @@ unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Default for Vec<T> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for Vec<T> {\n     /// Creates an empty `Vec<T>`.\n     fn default() -> Vec<T> {\n         Vec::new()"}, {"sha": "da58ae92e112489516b49391f71bd1130f0b2f79", "filename": "library/alloc/tests/const_fns.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Falloc%2Ftests%2Fconst_fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Falloc%2Ftests%2Fconst_fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fconst_fns.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -1,16 +1,8 @@\n-// Test several functions can be used for constants\n-// 1. Vec::new()\n-// 2. String::new()\n-// 3. BTreeMap::new()\n-// 4. BTreeSet::new()\n+// Test const functions in the library\n \n-#[allow(dead_code)]\n-pub const MY_VEC: Vec<usize> = Vec::new();\n-\n-#[allow(dead_code)]\n-pub const MY_STRING: String = String::new();\n+use core::cmp::Ordering;\n \n-// FIXME(fee1-dead) remove this struct once we put `K: ?const Ord` on BTreeMap::new.\n+// FIXME remove this struct once we put `K: ?const Ord` on BTreeMap::new.\n #[derive(PartialEq, Eq, PartialOrd)]\n pub struct MyType;\n \n@@ -32,7 +24,12 @@ impl const Ord for MyType {\n     }\n }\n \n-use core::cmp::Ordering;\n+pub const MY_VEC: Vec<usize> = Vec::new();\n+pub const MY_VEC2: Vec<usize> = Default::default();\n+\n+pub const MY_STRING: String = String::new();\n+pub const MY_STRING2: String = Default::default();\n+\n use std::collections::{BTreeMap, BTreeSet};\n \n pub const MY_BTREEMAP: BTreeMap<MyType, MyType> = BTreeMap::new();\n@@ -47,7 +44,10 @@ pub const SET_IS_EMPTY: bool = SET.is_empty();\n \n #[test]\n fn test_const() {\n+    assert_eq!(MY_VEC, MY_VEC2);\n+    assert_eq!(MY_STRING, MY_STRING2);\n+\n     assert_eq!(MAP_LEN, 0);\n     assert_eq!(SET_LEN, 0);\n-    assert!(MAP_IS_EMPTY && SET_IS_EMPTY)\n+    assert!(MAP_IS_EMPTY && SET_IS_EMPTY);\n }"}, {"sha": "5767108d423c6c418a6f455ffb1d7a290cf68778", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -24,6 +24,7 @@\n #![feature(vec_spare_capacity)]\n #![feature(string_remove_matches)]\n #![feature(const_btree_new)]\n+#![feature(const_default_impls)]\n #![feature(const_trait_impl)]\n \n use std::collections::hash_map::DefaultHasher;"}, {"sha": "3c638e655dc91dd525e42c9fc2c101c89a7ab682", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -280,7 +280,8 @@ macro_rules! array_impl_default {\n     };\n     {$n:expr,} => {\n         #[stable(since = \"1.4.0\", feature = \"array_default\")]\n-        impl<T> Default for [T; $n] {\n+        #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+        impl<T> const Default for [T; $n] {\n             fn default() -> [T; $n] { [] }\n         }\n     };"}, {"sha": "0ee8cd59ba4ff8c500356d7a407ae315f46c4d61", "filename": "library/core/src/default.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fdefault.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -171,7 +171,8 @@ pub macro Default($item:item) {\n macro_rules! default_impl {\n     ($t:ty, $v:expr, $doc:tt) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl Default for $t {\n+        #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+        impl const Default for $t {\n             #[inline]\n             #[doc = $doc]\n             fn default() -> $t {"}, {"sha": "510e233b43110d7c60bb83944426cce98cdeddff", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -599,7 +599,8 @@ impl<H> Clone for BuildHasherDefault<H> {\n }\n \n #[stable(since = \"1.7.0\", feature = \"build_hasher\")]\n-impl<H> Default for BuildHasherDefault<H> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<H> const Default for BuildHasherDefault<H> {\n     fn default() -> BuildHasherDefault<H> {\n         BuildHasherDefault(marker::PhantomData)\n     }"}, {"sha": "a7d4646f5c5973e63c291142191a519782b2eb38", "filename": "library/core/src/iter/sources/empty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Fempty.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -85,7 +85,8 @@ impl<T> Clone for Empty<T> {\n // not #[derive] because that adds a Default bound on T,\n // which isn't necessary.\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n-impl<T> Default for Empty<T> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for Empty<T> {\n     fn default() -> Empty<T> {\n         Empty(marker::PhantomData)\n     }"}, {"sha": "4ab7cc24a0d42c7cd27d42646d27035c4aec4810", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -103,6 +103,7 @@\n #![feature(const_type_id)]\n #![feature(const_type_name)]\n #![feature(const_unreachable_unchecked)]\n+#![feature(const_default_impls)]\n #![feature(duration_consts_2)]\n #![feature(ptr_metadata)]\n #![feature(slice_ptr_get)]"}, {"sha": "333f81ce4cfc4b52c967522d84b6690b29553f4e", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -528,7 +528,8 @@ macro_rules! impls {\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<T: ?Sized> Default for $t<T> {\n+        #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+        impl<T: ?Sized> const Default for $t<T> {\n             fn default() -> Self {\n                 Self\n             }"}, {"sha": "78f5954532ff08e5161e7cd422106a93a9f1ffd5", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -1642,7 +1642,8 @@ impl<T: Clone> Clone for Option<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Default for Option<T> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for Option<T> {\n     /// Returns [`None`][Option::None].\n     ///\n     /// # Examples"}, {"sha": "361a9b03aebc7304d8ff1bab432c31ff3bf9fa78", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -3501,15 +3501,17 @@ where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Default for &[T] {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for &[T] {\n     /// Creates an empty slice.\n     fn default() -> Self {\n         &[]\n     }\n }\n \n #[stable(feature = \"mut_slice_default\", since = \"1.5.0\")]\n-impl<T> Default for &mut [T] {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for &mut [T] {\n     /// Creates a mutable empty slice.\n     fn default() -> Self {\n         &mut []"}, {"sha": "947afbdc68dfbcbfced52b632f15b42cf774f19c", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -2442,7 +2442,8 @@ impl AsRef<[u8]> for str {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Default for &str {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl const Default for &str {\n     /// Creates an empty str\n     #[inline]\n     fn default() -> Self {"}, {"sha": "d9de37e9c519797430a43b40829228bce2ef3335", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -138,7 +138,8 @@ pub struct AtomicBool {\n \n #[cfg(target_has_atomic_load_store = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Default for AtomicBool {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl const Default for AtomicBool {\n     /// Creates an `AtomicBool` initialized to `false`.\n     #[inline]\n     fn default() -> Self {\n@@ -168,7 +169,8 @@ pub struct AtomicPtr<T> {\n \n #[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Default for AtomicPtr<T> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for AtomicPtr<T> {\n     /// Creates a null `AtomicPtr<T>`.\n     fn default() -> AtomicPtr<T> {\n         AtomicPtr::new(crate::ptr::null_mut())\n@@ -1351,7 +1353,8 @@ macro_rules! atomic_int {\n         pub const $atomic_init: $atomic_type = $atomic_type::new(0);\n \n         #[$stable]\n-        impl Default for $atomic_type {\n+        #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+        impl const Default for $atomic_type {\n             #[inline]\n             fn default() -> Self {\n                 Self::new(Default::default())"}, {"sha": "5afdb799f0c74aadbff4b1ff167834a7c871acc9", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -86,7 +86,8 @@ impl<T: RefUnwindSafe + UnwindSafe> RefUnwindSafe for SyncOnceCell<T> {}\n impl<T: UnwindSafe> UnwindSafe for SyncOnceCell<T> {}\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n-impl<T> Default for SyncOnceCell<T> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for SyncOnceCell<T> {\n     /// Creates a new empty cell.\n     ///\n     /// # Example"}, {"sha": "5e91a0cdbd6b54cf6b2b3636f503e641b55741a7", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5afa6807b868bc8bb2e6f972629769b150ffd41/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=b5afa6807b868bc8bb2e6f972629769b150ffd41", "patch": "@@ -255,6 +255,7 @@\n #![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_socketaddr)]\n+#![feature(const_trait_impl)]\n #![feature(container_error_extra)]\n #![feature(core_intrinsics)]\n #![feature(custom_test_frameworks)]"}]}