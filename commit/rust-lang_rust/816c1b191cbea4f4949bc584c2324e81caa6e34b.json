{"sha": "816c1b191cbea4f4949bc584c2324e81caa6e34b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNmMxYjE5MWNiZWE0ZjQ5NDliYzU4NGMyMzI0ZTgxY2FhNmUzNGI=", "commit": {"author": {"name": "matthew", "email": "matthew.tejo@gmail.com", "date": "2018-03-22T15:57:26Z"}, "committer": {"name": "matthew", "email": "matthew.tejo@gmail.com", "date": "2018-03-26T15:43:16Z"}, "message": "Check for known but incorrect attributes\n\n- Change nested_visit_map so it will recusively check functions\n\n- Add visit_stmt and visit_expr for impl Visitor for CheckAttrVisitor and check for incorrect\ninline and repr attributes on staements and expressions\n\n- Add regression test for isssue #43988", "tree": {"sha": "3ca91ee3dd8660adb0221e89ce03c2d624ec3e44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ca91ee3dd8660adb0221e89ce03c2d624ec3e44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/816c1b191cbea4f4949bc584c2324e81caa6e34b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/816c1b191cbea4f4949bc584c2324e81caa6e34b", "html_url": "https://github.com/rust-lang/rust/commit/816c1b191cbea4f4949bc584c2324e81caa6e34b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/816c1b191cbea4f4949bc584c2324e81caa6e34b/comments", "author": {"login": "tejom", "id": 7831521, "node_id": "MDQ6VXNlcjc4MzE1MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/7831521?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejom", "html_url": "https://github.com/tejom", "followers_url": "https://api.github.com/users/tejom/followers", "following_url": "https://api.github.com/users/tejom/following{/other_user}", "gists_url": "https://api.github.com/users/tejom/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejom/subscriptions", "organizations_url": "https://api.github.com/users/tejom/orgs", "repos_url": "https://api.github.com/users/tejom/repos", "events_url": "https://api.github.com/users/tejom/events{/privacy}", "received_events_url": "https://api.github.com/users/tejom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tejom", "id": 7831521, "node_id": "MDQ6VXNlcjc4MzE1MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/7831521?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejom", "html_url": "https://github.com/tejom", "followers_url": "https://api.github.com/users/tejom/followers", "following_url": "https://api.github.com/users/tejom/following{/other_user}", "gists_url": "https://api.github.com/users/tejom/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejom/subscriptions", "organizations_url": "https://api.github.com/users/tejom/orgs", "repos_url": "https://api.github.com/users/tejom/repos", "events_url": "https://api.github.com/users/tejom/events{/privacy}", "received_events_url": "https://api.github.com/users/tejom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "url": "https://api.github.com/repos/rust-lang/rust/commits/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14", "html_url": "https://github.com/rust-lang/rust/commit/c08480fce0f39f5c9c6db6dde0dccb375ca0ab14"}], "stats": {"total": 127, "additions": 118, "deletions": 9}, "files": [{"sha": "6e1b7dc86a295587f12f5757493b4a985c1043f3", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 82, "deletions": 9, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/816c1b191cbea4f4949bc584c2324e81caa6e34b/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816c1b191cbea4f4949bc584c2324e81caa6e34b/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=816c1b191cbea4f4949bc584c2324e81caa6e34b", "patch": "@@ -14,6 +14,7 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n+use syntax_pos::Span;\n use ty::TyCtxt;\n \n use hir;\n@@ -27,6 +28,8 @@ enum Target {\n     Enum,\n     Const,\n     ForeignMod,\n+    Expression,\n+    Statement,\n     Other,\n }\n \n@@ -62,7 +65,7 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n         let mut has_wasm_import_module = false;\n         for attr in &item.attrs {\n             if attr.check_name(\"inline\") {\n-                self.check_inline(attr, item, target)\n+                self.check_inline(attr, &item.span, target)\n             } else if attr.check_name(\"wasm_import_module\") {\n                 has_wasm_import_module = true;\n                 if attr.value_str().is_none() {\n@@ -99,13 +102,13 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n     }\n \n     /// Check if an `#[inline]` is applied to a function.\n-    fn check_inline(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) {\n+    fn check_inline(&self, attr: &hir::Attribute, span: &Span, target: Target) {\n         if target != Target::Fn {\n             struct_span_err!(self.tcx.sess,\n                              attr.span,\n                              E0518,\n                              \"attribute should be applied to function\")\n-                .span_label(item.span, \"not a function\")\n+                .span_label(*span, \"not a function\")\n                 .emit();\n         }\n     }\n@@ -196,10 +199,12 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                 }\n                 _ => continue,\n             };\n-            struct_span_err!(self.tcx.sess, hint.span, E0517,\n-                             \"attribute should be applied to {}\", allowed_targets)\n-                .span_label(item.span, format!(\"not {} {}\", article, allowed_targets))\n-                .emit();\n+            self.emit_repr_error(\n+                hint.span,\n+                item.span,\n+                &format!(\"attribute should be applied to {}\", allowed_targets),\n+                &format!(\"not {} {}\", article, allowed_targets),\n+            )\n         }\n \n         // Just point at all repr hints if there are any incompatibilities.\n@@ -221,17 +226,85 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                        \"conflicting representation hints\");\n         }\n     }\n+\n+    fn emit_repr_error(\n+        &self,\n+        hint_span: Span,\n+        label_span: Span,\n+        hint_message: &str,\n+        label_message: &str,\n+    ) {\n+        struct_span_err!(self.tcx.sess, hint_span, E0517, \"{}\", hint_message)\n+            .span_label(label_span, label_message)\n+            .emit();\n+    }\n+\n+    fn check_stmt_attributes(&self, stmt: &hir::Stmt) {\n+        // When checking statements ignore expressions, they will be checked later\n+        if let hir::Stmt_::StmtDecl(_, _) = stmt.node {\n+            for attr in stmt.node.attrs() {\n+                if attr.check_name(\"inline\") {\n+                    self.check_inline(attr, &stmt.span, Target::Statement);\n+                }\n+                if attr.check_name(\"repr\") {\n+                    self.emit_repr_error(\n+                        attr.span,\n+                        stmt.span,\n+                        &format!(\"attribute should not be applied to statements\"),\n+                        &format!(\"not a struct, enum or union\"),\n+                    );\n+                }\n+            }\n+        }\n+    }\n+\n+    fn check_expr_attributes(&self, expr: &hir::Expr) {\n+        use hir::Expr_::*;\n+        match expr.node {\n+            // Assignments, Calls and Structs were handled by Items and Statements\n+            ExprCall(..) |\n+            ExprAssign(..) |\n+            ExprMethodCall(..) |\n+            ExprStruct(..) => return,\n+            _ => (),\n+        }\n+\n+        for attr in expr.attrs.iter() {\n+            if attr.check_name(\"inline\") {\n+                self.check_inline(attr, &expr.span, Target::Expression);\n+            }\n+            if attr.check_name(\"repr\") {\n+                self.emit_repr_error(\n+                    attr.span,\n+                    expr.span,\n+                    &format!(\"attribute should not be applied to an expression\"),\n+                    &format!(\"not a struct, enum or union\"),\n+                );\n+            }\n+        }\n+    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for CheckAttrVisitor<'a, 'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::None\n+        NestedVisitorMap::OnlyBodies(&self.tcx.hir)\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         let target = Target::from_item(item);\n         self.check_attributes(item, target);\n-        intravisit::walk_item(self, item);\n+        intravisit::walk_item(self, item)\n+    }\n+\n+\n+    fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt) {\n+        self.check_stmt_attributes(stmt);\n+        intravisit::walk_stmt(self, stmt)\n+    }\n+\n+    fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n+        self.check_expr_attributes(expr);\n+        intravisit::walk_expr(self, expr)\n     }\n }\n "}, {"sha": "78237e31ba06e36e3ab6106f988c9019eae2d9d9", "filename": "src/test/compile-fail/issue-43988.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/816c1b191cbea4f4949bc584c2324e81caa6e34b/src%2Ftest%2Fcompile-fail%2Fissue-43988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/816c1b191cbea4f4949bc584c2324e81caa6e34b/src%2Ftest%2Fcompile-fail%2Fissue-43988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43988.rs?ref=816c1b191cbea4f4949bc584c2324e81caa6e34b", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+\n+    #[inline]\n+    let _a = 4;\n+    //~^^ ERROR attribute should be applied to function\n+\n+\n+    #[inline(XYZ)]\n+    let _b = 4;\n+    //~^^ ERROR attribute should be applied to function\n+\n+    #[repr(nothing)]\n+    let _x = 0;\n+    //~^^ ERROR attribute should not be applied to statements\n+\n+\n+    #[repr(something_not_real)]\n+    loop {\n+        ()\n+    };\n+    //~^^^^ ERROR attribute should not be applied to an expression\n+\n+    #[repr]\n+    let _y = \"123\";\n+    //~^^ ERROR attribute should not be applied to statements\n+}"}]}