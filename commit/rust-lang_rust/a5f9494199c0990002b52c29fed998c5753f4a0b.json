{"sha": "a5f9494199c0990002b52c29fed998c5753f4a0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1Zjk0OTQxOTljMDk5MDAwMmI1MmMyOWZlZDk5OGM1NzUzZjRhMGI=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-12T16:39:39Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-15T00:52:55Z"}, "message": "std: Change either::{lefts, rights} to return an iterator", "tree": {"sha": "3803bb54a0d4172b751e9402ae02a38fb4a8ff1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3803bb54a0d4172b751e9402ae02a38fb4a8ff1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5f9494199c0990002b52c29fed998c5753f4a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f9494199c0990002b52c29fed998c5753f4a0b", "html_url": "https://github.com/rust-lang/rust/commit/a5f9494199c0990002b52c29fed998c5753f4a0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5f9494199c0990002b52c29fed998c5753f4a0b/comments", "author": null, "committer": null, "parents": [{"sha": "e7b572952c76fd6b05c947aa3193e10410773078", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b572952c76fd6b05c947aa3193e10410773078", "html_url": "https://github.com/rust-lang/rust/commit/e7b572952c76fd6b05c947aa3193e10410773078"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "7150430893b33a9df30be24ac9aa61f0913bd812", "filename": "src/libstd/either.rs", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a5f9494199c0990002b52c29fed998c5753f4a0b/src%2Flibstd%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f9494199c0990002b52c29fed998c5753f4a0b/src%2Flibstd%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Feither.rs?ref=a5f9494199c0990002b52c29fed998c5753f4a0b", "patch": "@@ -16,7 +16,7 @@ use option::{Some, None};\n use clone::Clone;\n use container::Container;\n use cmp::Eq;\n-use iterator::Iterator;\n+use iterator::{Iterator, FilterMap};\n use result::Result;\n use result;\n use str::StrSlice;\n@@ -116,32 +116,35 @@ impl<L, R> Either<L, R> {\n     }\n }\n \n-// FIXME: #8228 Replaceable by an external iterator?\n-/// Extracts from a vector of either all the left values\n-pub fn lefts<L: Clone, R>(eithers: &[Either<L, R>]) -> ~[L] {\n-    do vec::build_sized(eithers.len()) |push| {\n-        for elt in eithers.iter() {\n-            match *elt {\n-                Left(ref l) => { push((*l).clone()); }\n-                _ => { /* fallthrough */ }\n-            }\n+/// An iterator yielding the `Left` values of its source\n+pub type Lefts<L, R, Iter> = FilterMap<'static, Either<L, R>, L, Iter>;\n+\n+/// An iterator yielding the `Right` values of its source\n+pub type Rights<L, R, Iter> = FilterMap<'static, Either<L, R>, R, Iter>;\n+\n+/// Extracts all the left values\n+pub fn lefts<L, R, Iter: Iterator<Either<L, R>>>(eithers: Iter)\n+    -> Lefts<L, R, Iter> {\n+    do eithers.filter_map |elt| {\n+        match elt {\n+            Left(x) => Some(x),\n+            _ => None,\n         }\n     }\n }\n \n-// FIXME: #8228 Replaceable by an external iterator?\n-/// Extracts from a vector of either all the right values\n-pub fn rights<L, R: Clone>(eithers: &[Either<L, R>]) -> ~[R] {\n-    do vec::build_sized(eithers.len()) |push| {\n-        for elt in eithers.iter() {\n-            match *elt {\n-                Right(ref r) => { push((*r).clone()); }\n-                _ => { /* fallthrough */ }\n-            }\n+/// Extracts all the right values\n+pub fn rights<L, R, Iter: Iterator<Either<L, R>>>(eithers: Iter)\n+    -> Rights<L, R, Iter> {\n+    do eithers.filter_map |elt| {\n+        match elt {\n+            Right(x) => Some(x),\n+            _ => None,\n         }\n     }\n }\n \n+\n // FIXME: #8228 Replaceable by an external iterator?\n /// Extracts from a vector of either all the left values and right values\n ///\n@@ -182,42 +185,42 @@ mod tests {\n     #[test]\n     fn test_lefts() {\n         let input = ~[Left(10), Right(11), Left(12), Right(13), Left(14)];\n-        let result = lefts(input);\n+        let result = lefts(input.move_iter()).to_owned_vec();\n         assert_eq!(result, ~[10, 12, 14]);\n     }\n \n     #[test]\n     fn test_lefts_none() {\n         let input: ~[Either<int, int>] = ~[Right(10), Right(10)];\n-        let result = lefts(input);\n+        let result = lefts(input.move_iter()).to_owned_vec();\n         assert_eq!(result.len(), 0u);\n     }\n \n     #[test]\n     fn test_lefts_empty() {\n         let input: ~[Either<int, int>] = ~[];\n-        let result = lefts(input);\n+        let result = lefts(input.move_iter()).to_owned_vec();\n         assert_eq!(result.len(), 0u);\n     }\n \n     #[test]\n     fn test_rights() {\n         let input = ~[Left(10), Right(11), Left(12), Right(13), Left(14)];\n-        let result = rights(input);\n+        let result = rights(input.move_iter()).to_owned_vec();\n         assert_eq!(result, ~[11, 13]);\n     }\n \n     #[test]\n     fn test_rights_none() {\n         let input: ~[Either<int, int>] = ~[Left(10), Left(10)];\n-        let result = rights(input);\n+        let result = rights(input.move_iter()).to_owned_vec();\n         assert_eq!(result.len(), 0u);\n     }\n \n     #[test]\n     fn test_rights_empty() {\n         let input: ~[Either<int, int>] = ~[];\n-        let result = rights(input);\n+        let result = rights(input.move_iter()).to_owned_vec();\n         assert_eq!(result.len(), 0u);\n     }\n "}, {"sha": "a2664dcf890ad3b3a44d035c05399b291e8c7dc6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5f9494199c0990002b52c29fed998c5753f4a0b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f9494199c0990002b52c29fed998c5753f4a0b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a5f9494199c0990002b52c29fed998c5753f4a0b", "patch": "@@ -3445,7 +3445,7 @@ impl Parser {\n                 |p| p.parse_arg()\n             );\n \n-        let inputs = either::lefts(args_or_capture_items);\n+        let inputs = either::lefts(args_or_capture_items.move_iter()).collect();\n \n         let (ret_style, ret_ty) = self.parse_ret_ty();\n         ast::fn_decl {\n@@ -3608,7 +3608,7 @@ impl Parser {\n \n         let hi = self.span.hi;\n \n-        let inputs = either::lefts(args_or_capture_items);\n+        let inputs = either::lefts(args_or_capture_items.move_iter()).collect();\n         let (ret_style, ret_ty) = self.parse_ret_ty();\n \n         let fn_decl = ast::fn_decl {\n@@ -3641,7 +3641,7 @@ impl Parser {\n         };\n \n         ast::fn_decl {\n-            inputs: either::lefts(inputs_captures),\n+            inputs: either::lefts(inputs_captures.move_iter()).collect(),\n             output: output,\n             cf: return_val,\n         }"}]}