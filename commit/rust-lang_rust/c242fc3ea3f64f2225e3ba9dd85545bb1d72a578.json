{"sha": "c242fc3ea3f64f2225e3ba9dd85545bb1d72a578", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNDJmYzNlYTNmNjRmMjIyNWUzYmE5ZGQ4NTU0NWJiMWQ3MmE1Nzg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-07-11T14:52:37Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-09-23T15:01:04Z"}, "message": "Generic unit tests for attributes on lifetime/type formals in generics list.", "tree": {"sha": "b3fcc396fdd5ea2106da024220d07440e3578080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3fcc396fdd5ea2106da024220d07440e3578080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c242fc3ea3f64f2225e3ba9dd85545bb1d72a578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c242fc3ea3f64f2225e3ba9dd85545bb1d72a578", "html_url": "https://github.com/rust-lang/rust/commit/c242fc3ea3f64f2225e3ba9dd85545bb1d72a578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c242fc3ea3f64f2225e3ba9dd85545bb1d72a578/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c37ad660714ab65d20226c743f686cf6174abc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c37ad660714ab65d20226c743f686cf6174abc7", "html_url": "https://github.com/rust-lang/rust/commit/4c37ad660714ab65d20226c743f686cf6174abc7"}], "stats": {"total": 211, "additions": 211, "deletions": 0}, "files": [{"sha": "c902cfdd756df839d288ac406290b2a1f7332cec", "filename": "src/test/compile-fail/attr-on-generic-formals-are-visited.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c242fc3ea3f64f2225e3ba9dd85545bb1d72a578/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-are-visited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c242fc3ea3f64f2225e3ba9dd85545bb1d72a578/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-are-visited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-are-visited.rs?ref=c242fc3ea3f64f2225e3ba9dd85545bb1d72a578", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test ensures that attributes on formals in generic parameter\n+// lists are included when we are checking for unstable attributes.\n+//\n+// Note that feature(generic_param_attrs) *is* enabled here. We are\n+// checking feature-gating of the attributes themselves, not the\n+// capability to parse such attributes in that context.\n+\n+#![feature(generic_param_attrs)]\n+#![allow(dead_code)]\n+\n+struct StLt<#[lt_struct] 'a>(&'a u32);\n+//~^ ERROR The attribute `lt_struct` is currently unknown to the compiler\n+struct StTy<#[ty_struct] I>(I);\n+//~^ ERROR The attribute `ty_struct` is currently unknown to the compiler\n+\n+enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n+//~^ ERROR The attribute `lt_enum` is currently unknown to the compiler\n+enum EnTy<#[ty_enum] J> { A(J), B }\n+//~^ ERROR The attribute `ty_enum` is currently unknown to the compiler\n+\n+trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+//~^ ERROR The attribute `lt_trait` is currently unknown to the compiler\n+trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n+//~^ ERROR The attribute `ty_trait` is currently unknown to the compiler\n+\n+type TyLt<#[lt_type] 'd> = &'d u32;\n+//~^ ERROR The attribute `lt_type` is currently unknown to the compiler\n+type TyTy<#[ty_type] L> = (L, );\n+//~^ ERROR The attribute `ty_type` is currently unknown to the compiler\n+\n+impl<#[lt_inherent] 'e> StLt<'e> { }\n+//~^ ERROR The attribute `lt_inherent` is currently unknown to the compiler\n+impl<#[ty_inherent] M> StTy<M> { }\n+//~^ ERROR The attribute `ty_inherent` is currently unknown to the compiler\n+\n+impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+    //~^ ERROR The attribute `lt_impl_for` is currently unknown to the compiler\n+    fn foo(&self, _: &'f [u32]) -> &'f u32 { loop { } }\n+}\n+impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n+    //~^ ERROR The attribute `ty_impl_for` is currently unknown to the compiler\n+    fn foo(&self, _: N) { }\n+}\n+\n+fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+//~^ ERROR The attribute `lt_fn` is currently unknown to the compiler\n+fn f_ty<#[ty_fn] O>(_: O) { }\n+//~^ ERROR The attribute `ty_fn` is currently unknown to the compiler\n+\n+impl<I> StTy<I> {\n+    fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+    //~^ ERROR The attribute `lt_meth` is currently unknown to the compiler\n+    fn m_ty<#[ty_meth] P>(_: P) { }\n+    //~^ ERROR The attribute `ty_meth` is currently unknown to the compiler\n+}\n+\n+fn hof_lt<Q>(_: Q)\n+    where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+    //~^ ERROR The attribute `lt_hof` is currently unknown to the compiler\n+{\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "944802f450a6d0eee317fd634188dd448d9d8944", "filename": "src/test/compile-fail/attr-on-generic-formals-wo-feature-gate.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c242fc3ea3f64f2225e3ba9dd85545bb1d72a578/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-wo-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c242fc3ea3f64f2225e3ba9dd85545bb1d72a578/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-wo-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-wo-feature-gate.rs?ref=c242fc3ea3f64f2225e3ba9dd85545bb1d72a578", "patch": "@@ -0,0 +1,76 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test ensures that attributes on formals in generic parameter\n+// lists are rejected if feature(generic_param_attrs) is not enabled.\n+//\n+// (We are prefixing all tested features with `rustc_`, to ensure that\n+// the attributes themselves won't be rejected by the compiler when\n+// using `rustc_attrs` feature. There is a separate compile-fail/ test\n+// ensuring that the attribute feature-gating works in this context.)\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct StLt<#[rustc_lt_struct] 'a>(&'a u32);\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+struct StTy<#[rustc_ty_struct] I>(I);\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+enum EnLt<#[rustc_lt_enum] 'b> { A(&'b u32), B }\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+enum EnTy<#[rustc_ty_enum] J> { A(J), B }\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+trait TrLt<#[rustc_lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+trait TrTy<#[rustc_ty_trait] K> { fn foo(&self, _: K); }\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+type TyLt<#[rustc_lt_type] 'd> = &'d u32;\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+type TyTy<#[rustc_ty_type] L> = (L, );\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+impl<#[rustc_lt_inherent] 'e> StLt<'e> { }\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+impl<#[rustc_ty_inherent] M> StTy<M> { }\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+impl<#[rustc_lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+    //~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+    fn foo(&self, _: &'f [u32]) -> &'f u32 { loop { } }\n+}\n+impl<#[rustc_ty_impl_for] N> TrTy<N> for StTy<N> {\n+    //~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+    fn foo(&self, _: N) { }\n+}\n+\n+fn f_lt<#[rustc_lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+fn f_ty<#[rustc_ty_fn] O>(_: O) { }\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+impl<I> StTy<I> {\n+    fn m_lt<#[rustc_lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+    //~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+    fn m_ty<#[rustc_ty_meth] P>(_: P) { }\n+    //~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+}\n+\n+fn hof_lt<Q>(_: Q)\n+    where Q: for <#[rustc_lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+    //~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+{\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "5985284d8496b83676a84daf4cc5116554800705", "filename": "src/test/run-pass/attr-on-generic-formals.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c242fc3ea3f64f2225e3ba9dd85545bb1d72a578/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c242fc3ea3f64f2225e3ba9dd85545bb1d72a578/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs?ref=c242fc3ea3f64f2225e3ba9dd85545bb1d72a578", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test ensures we can attach attributes to the formals in all\n+// places where generic parameter lists occur, assuming appropriate\n+// feature gates are enabled.\n+//\n+// (We are prefixing all tested features with `rustc_`, to ensure that\n+// the attributes themselves won't be rejected by the compiler when\n+// using `rustc_attrs` feature. There is a separate compile-fail/ test\n+// ensuring that the attribute feature-gating works in this context.)\n+\n+#![feature(generic_param_attrs, rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct StLt<#[rustc_lt_struct] 'a>(&'a u32);\n+struct StTy<#[rustc_ty_struct] I>(I);\n+\n+enum EnLt<#[rustc_lt_enum] 'b> { A(&'b u32), B }\n+enum EnTy<#[rustc_ty_enum] J> { A(J), B }\n+\n+trait TrLt<#[rustc_lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+trait TrTy<#[rustc_ty_trait] K> { fn foo(&self, _: K); }\n+\n+type TyLt<#[rustc_lt_type] 'd> = &'d u32;\n+type TyTy<#[rustc_ty_type] L> = (L, );\n+\n+impl<#[rustc_lt_inherent] 'e> StLt<'e> { }\n+impl<#[rustc_ty_inherent] M> StTy<M> { }\n+\n+impl<#[rustc_lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+    fn foo(&self, _: &'f [u32]) -> &'f u32 { loop { } }\n+}\n+impl<#[rustc_ty_impl_for] N> TrTy<N> for StTy<N> {\n+    fn foo(&self, _: N) { }\n+}\n+\n+fn f_lt<#[rustc_lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+fn f_ty<#[rustc_ty_fn] O>(_: O) { }\n+\n+impl<I> StTy<I> {\n+    fn m_lt<#[rustc_lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+    fn m_ty<#[rustc_ty_meth] P>(_: P) { }\n+}\n+\n+fn hof_lt<Q>(_: Q)\n+    where Q: for <#[rustc_lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+{\n+}\n+\n+fn main() {\n+\n+}"}]}