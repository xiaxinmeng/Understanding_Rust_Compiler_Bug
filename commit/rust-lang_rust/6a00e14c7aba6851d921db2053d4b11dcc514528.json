{"sha": "6a00e14c7aba6851d921db2053d4b11dcc514528", "node_id": "C_kwDOAAsO6NoAKDZhMDBlMTRjN2FiYTY4NTFkOTIxZGIyMDUzZDRiMTFkY2M1MTQ1Mjg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-24T12:56:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-24T12:56:58Z"}, "message": "fix: Don't respond with an error when requesting a shutdown while starting", "tree": {"sha": "44c9f9461ad4334b1b962212a16de056a45c53cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44c9f9461ad4334b1b962212a16de056a45c53cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a00e14c7aba6851d921db2053d4b11dcc514528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a00e14c7aba6851d921db2053d4b11dcc514528", "html_url": "https://github.com/rust-lang/rust/commit/6a00e14c7aba6851d921db2053d4b11dcc514528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a00e14c7aba6851d921db2053d4b11dcc514528/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43fb9563b2943d6abc5f3552195f3e27ac618966", "url": "https://api.github.com/repos/rust-lang/rust/commits/43fb9563b2943d6abc5f3552195f3e27ac618966", "html_url": "https://github.com/rust-lang/rust/commit/43fb9563b2943d6abc5f3552195f3e27ac618966"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "7d10dc5d15b62d1143e2dd07ad18358d642b71c9", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6a00e14c7aba6851d921db2053d4b11dcc514528/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a00e14c7aba6851d921db2053d4b11dcc514528/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=6a00e14c7aba6851d921db2053d4b11dcc514528", "patch": "@@ -607,30 +607,34 @@ impl GlobalState {\n \n     /// Handles a request.\n     fn on_request(&mut self, req: Request) {\n-        if self.shutdown_requested {\n-            self.respond(lsp_server::Response::new_err(\n-                req.id,\n-                lsp_server::ErrorCode::InvalidRequest as i32,\n-                \"Shutdown already requested.\".to_owned(),\n-            ));\n-            return;\n-        }\n+        let mut dispatcher = RequestDispatcher { req: Some(req), global_state: self };\n+        dispatcher.on_sync_mut::<lsp_types::request::Shutdown>(|s, ()| {\n+            s.shutdown_requested = true;\n+            Ok(())\n+        });\n+\n+        if let RequestDispatcher { req: Some(req), global_state: this } = &mut dispatcher {\n+            if this.shutdown_requested {\n+                this.respond(lsp_server::Response::new_err(\n+                    req.id.clone(),\n+                    lsp_server::ErrorCode::InvalidRequest as i32,\n+                    \"Shutdown already requested.\".to_owned(),\n+                ));\n+                return;\n+            }\n \n-        // Avoid flashing a bunch of unresolved references during initial load.\n-        if self.workspaces.is_empty() && !self.is_quiescent() {\n-            self.respond(lsp_server::Response::new_err(\n-                req.id,\n-                lsp_server::ErrorCode::ContentModified as i32,\n-                \"waiting for cargo metadata or cargo check\".to_owned(),\n-            ));\n-            return;\n+            // Avoid flashing a bunch of unresolved references during initial load.\n+            if this.workspaces.is_empty() && !this.is_quiescent() {\n+                this.respond(lsp_server::Response::new_err(\n+                    req.id.clone(),\n+                    lsp_server::ErrorCode::ContentModified as i32,\n+                    \"waiting for cargo metadata or cargo check\".to_owned(),\n+                ));\n+                return;\n+            }\n         }\n \n-        RequestDispatcher { req: Some(req), global_state: self }\n-            .on_sync_mut::<lsp_types::request::Shutdown>(|s, ()| {\n-                s.shutdown_requested = true;\n-                Ok(())\n-            })\n+        dispatcher\n             .on_sync_mut::<lsp_ext::ReloadWorkspace>(handlers::handle_workspace_reload)\n             .on_sync_mut::<lsp_ext::MemoryUsage>(handlers::handle_memory_usage)\n             .on_sync_mut::<lsp_ext::ShuffleCrateGraph>(handlers::handle_shuffle_crate_graph)"}]}