{"sha": "1ef7bdc0c7a3ad8a4b3421b3224988cbd0b1a557", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZjdiZGMwYzdhM2FkOGE0YjM0MjFiMzIyNDk4OGNiZDBiMWE1NTc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-09T17:57:08Z"}, "committer": {"name": "ggomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-11T15:25:10Z"}, "message": "Improve boxed docs", "tree": {"sha": "df2382286a46c85227bcd4d62c2e01ee43f0f744", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df2382286a46c85227bcd4d62c2e01ee43f0f744"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ef7bdc0c7a3ad8a4b3421b3224988cbd0b1a557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef7bdc0c7a3ad8a4b3421b3224988cbd0b1a557", "html_url": "https://github.com/rust-lang/rust/commit/1ef7bdc0c7a3ad8a4b3421b3224988cbd0b1a557", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ef7bdc0c7a3ad8a4b3421b3224988cbd0b1a557/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4114b68eba6914b46202a2108f34f7653e393851", "url": "https://api.github.com/repos/rust-lang/rust/commits/4114b68eba6914b46202a2108f34f7653e393851", "html_url": "https://github.com/rust-lang/rust/commit/4114b68eba6914b46202a2108f34f7653e393851"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "7ba5ca30941f476f01f7957325b1cd361ab43e27", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1ef7bdc0c7a3ad8a4b3421b3224988cbd0b1a557/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef7bdc0c7a3ad8a4b3421b3224988cbd0b1a557/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=1ef7bdc0c7a3ad8a4b3421b3224988cbd0b1a557", "patch": "@@ -249,6 +249,14 @@ impl<T: ?Sized> Box<T> {\n     /// This function is unsafe because improper use may lead to\n     /// memory problems. For example, a double-free may occur if the\n     /// function is called twice on the same raw pointer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = Box::new(5);\n+    /// let ptr = Box::into_raw(x);\n+    /// let x = unsafe { Box::from_raw(ptr) };\n+    /// ```\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub unsafe fn from_raw(raw: *mut T) -> Self {\n@@ -266,9 +274,8 @@ impl<T: ?Sized> Box<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// let seventeen = Box::new(17);\n-    /// let raw = Box::into_raw(seventeen);\n-    /// let boxed_again = unsafe { Box::from_raw(raw) };\n+    /// let x = Box::new(5);\n+    /// let ptr = Box::into_raw(x);\n     /// ```\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n@@ -399,6 +406,24 @@ impl Box<Any> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Attempt to downcast the box to a concrete type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn print_if_string(value: Box<Any>) {\n+    ///     if let Ok(string) = value.downcast::<String>() {\n+    ///         println!(\"String ({}): {}\", string.len(), string);\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let my_string = \"Hello World\".to_string();\n+    ///     print_if_string(Box::new(my_string));\n+    ///     print_if_string(Box::new(0i8));\n+    /// }\n+    /// ```\n     pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any>> {\n         if self.is::<T>() {\n             unsafe {\n@@ -419,6 +444,24 @@ impl Box<Any + Send> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Attempt to downcast the box to a concrete type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::Any;\n+    ///\n+    /// fn print_if_string(value: Box<Any + Send>) {\n+    ///     if let Ok(string) = value.downcast::<String>() {\n+    ///         println!(\"String ({}): {}\", string.len(), string);\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let my_string = \"Hello World\".to_string();\n+    ///     print_if_string(Box::new(my_string));\n+    ///     print_if_string(Box::new(0i8));\n+    /// }\n+    /// ```\n     pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any + Send>> {\n         <Box<Any>>::downcast(self).map_err(|s| unsafe {\n             // reapply the Send marker"}]}