{"sha": "e38739bb442263f1ef67b6c2415f932aa49e6646", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzODczOWJiNDQyMjYzZjFlZjY3YjZjMjQxNWY5MzJhYTQ5ZTY2NDY=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2013-08-30T14:42:49Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2013-09-04T12:18:56Z"}, "message": "Convert rust_log.cpp to Rust, closes #8703", "tree": {"sha": "832cc6ef84a7f48f8cd776c1b058a1f34ffe89a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/832cc6ef84a7f48f8cd776c1b058a1f34ffe89a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e38739bb442263f1ef67b6c2415f932aa49e6646", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e38739bb442263f1ef67b6c2415f932aa49e6646", "html_url": "https://github.com/rust-lang/rust/commit/e38739bb442263f1ef67b6c2415f932aa49e6646", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e38739bb442263f1ef67b6c2415f932aa49e6646/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed422b88727807aee40495a6193a69e4c3842be1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed422b88727807aee40495a6193a69e4c3842be1", "html_url": "https://github.com/rust-lang/rust/commit/ed422b88727807aee40495a6193a69e4c3842be1"}], "stats": {"total": 475, "additions": 285, "deletions": 190}, "files": [{"sha": "352165d600257be2c5842cb48e591030f82dc227", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e38739bb442263f1ef67b6c2415f932aa49e6646/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e38739bb442263f1ef67b6c2415f932aa49e6646/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=e38739bb442263f1ef67b6c2415f932aa49e6646", "patch": "@@ -76,7 +76,6 @@ RUNTIME_CXXS_$(1)_$(2) := \\\n               rt/rust_upcall.cpp \\\n               rt/rust_uv.cpp \\\n               rt/rust_crate_map.cpp \\\n-              rt/rust_log.cpp \\\n               rt/isaac/randport.cpp \\\n               rt/miniz.cpp \\\n               rt/memory_region.cpp \\"}, {"sha": "bcd8ef98d28f275844d77668c266558b2902f932", "filename": "src/libstd/rt/logging.rs", "status": "modified", "additions": 248, "deletions": 15, "changes": 263, "blob_url": "https://github.com/rust-lang/rust/blob/e38739bb442263f1ef67b6c2415f932aa49e6646/src%2Flibstd%2Frt%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38739bb442263f1ef67b6c2415f932aa49e6646/src%2Flibstd%2Frt%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flogging.rs?ref=e38739bb442263f1ef67b6c2415f932aa49e6646", "patch": "@@ -7,10 +7,159 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+use cast::transmute;\n use either::*;\n-use libc;\n+use libc::{c_void, uintptr_t, c_char, exit, STDERR_FILENO};\n+use option::{Some, None};\n+use rt::util::dumb_println;\n use str::StrSlice;\n+use str::raw::from_c_str;\n+use u32;\n+use unstable::raw::Closure;\n+use vec::ImmutableVector;\n+\n+\n+struct LogDirective {\n+    name: ~str,\n+    level: u32\n+}\n+\n+// This is the Rust representation of the mod_entry struct in src/rt/rust_crate_map.h\n+struct ModEntry{\n+    name: *c_char,\n+    log_level: *mut u32\n+}\n+\n+static MAX_LOG_DIRECTIVES: u32 = 255;\n+static MAX_LOG_LEVEL: u32 = 255;\n+static DEFAULT_LOG_LEVEL: u32 = 1;\n+\n+fn iter_crate_map(map: *u8, f: &fn(*mut ModEntry)) {\n+    unsafe {\n+        let closure : Closure = transmute(f);\n+        let code = transmute(closure.code);\n+        let env = transmute(closure.env);\n+        rust_iter_crate_map(transmute(map), iter_cb, code, env);\n+    }\n+\n+    extern fn iter_cb(code: *c_void, env: *c_void, entry: *ModEntry){\n+         unsafe {\n+            let closure: Closure = Closure {\n+                code: transmute(code),\n+                env: transmute(env),\n+            };\n+            let closure: &fn(*ModEntry) = transmute(closure);\n+            return closure(entry);\n+        }\n+    }\n+    extern {\n+        #[cfg(not(stage0))]\n+        #[rust_stack]\n+        fn rust_iter_crate_map(map: *c_void,\n+                    f: extern \"C\" fn(*c_void, *c_void, entry: *ModEntry),\n+                    code: *c_void,\n+                    data: *c_void);\n+\n+        #[cfg(stage0)]\n+        #[rust_stack]\n+        fn rust_iter_crate_map(map: *c_void,\n+                    f: *u8,\n+                    code: *c_void,\n+                    data: *c_void);\n+    }\n+}\n+\n+/// Parse a logging specification string (e.g: \"crate1,crate2::mod3,crate3::x=1\")\n+/// and return a vector with log directives.\n+/// Valid log levels are 0-255, with the most likely ones being 0-3 (defined in std::).\n+fn parse_logging_spec(spec: ~str) -> ~[LogDirective]{\n+    let mut dirs = ~[];\n+    for s in spec.split_iter(',') {\n+        let parts: ~[&str] = s.split_iter('=').collect();\n+        let mut loglevel;\n+        match parts.len() {\n+            1 => loglevel = MAX_LOG_LEVEL,\n+            2 => {\n+                let num = u32::from_str(parts[1]);\n+                match (num) {\n+                    Some(num) => {\n+                        if num < MAX_LOG_LEVEL {\n+                            loglevel = num;\n+                        } else {\n+                            loglevel = MAX_LOG_LEVEL;\n+                        }\n+                    }\n+                    _ => {\n+                         dumb_println(fmt!(\"warning: invalid logging spec \\\n+                                           '%s', ignoring it\", s));\n+                         loop;\n+                    }\n+                }\n+                if loglevel > MAX_LOG_LEVEL { loglevel = MAX_LOG_LEVEL}\n+            },\n+            _ => {\n+                dumb_println(fmt!(\"warning: invalid logging spec '%s',\\\n+                                  ignoring it\", s));\n+                loop;\n+            }\n+        }\n+        let dir = LogDirective {name: parts[0].to_owned(), level: loglevel};\n+        dirs.push(dir);\n+    }\n+    return dirs;\n+}\n+\n+/// Set the log level of an entry in the crate map depending on the vector\n+/// of log directives\n+fn update_entry(dirs: &[LogDirective], entry: *mut ModEntry) -> u32 {\n+    let mut new_lvl: u32 = DEFAULT_LOG_LEVEL;\n+    let mut longest_match = 0;\n+    unsafe {\n+        for dir in dirs.iter() {\n+            let name = from_c_str((*entry).name);\n+            if name.starts_with(dir.name) && dir.name.len() > longest_match {\n+                longest_match = dir.name.len();\n+                new_lvl = dir.level;\n+            }\n+        }\n+        *(*entry).log_level = new_lvl;\n+    }\n+    if longest_match > 0 { return 1; } else { return 0; }\n+}\n+\n+#[fixed_stack_segment] #[inline(never)]\n+/// Set log level for every entry in crate_map according to the sepecification\n+/// in settings\n+fn update_log_settings(crate_map: *u8, settings: ~str) {\n+    let mut dirs = ~[];\n+    if settings.len() > 0 {\n+        if settings == ~\"::help\" || settings == ~\"?\" {\n+            dumb_println(\"\\nCrate log map:\\n\");\n+            do iter_crate_map(crate_map) |entry: *mut ModEntry| {\n+                unsafe {\n+                    dumb_println(\" \"+from_c_str((*entry).name));\n+                }\n+            }\n+            unsafe {\n+                exit(1);\n+            }\n+        }\n+        dirs = parse_logging_spec(settings);\n+    }\n+\n+    let mut n_matches: u32 = 0;\n+    do iter_crate_map(crate_map) |entry: *mut ModEntry| {\n+        let m = update_entry(dirs, entry);\n+        n_matches += m;\n+    }\n+\n+    if n_matches < (dirs.len() as u32) {\n+        dumb_println(fmt!(\"warning: got %u RUST_LOG specs but only matched %u of them.\\n\\\n+                          You may have mistyped a RUST_LOG spec.\\n\\\n+                          Use RUST_LOG=::help to see the list of crates and modules.\\n\",\n+                          dirs.len() as uint, n_matches as uint));\n+    }\n+}\n \n pub trait Logger {\n     fn log(&mut self, msg: Either<~str, &'static str>);\n@@ -47,34 +196,26 @@ impl Logger for StdErrLogger {\n         };\n \n         fn print(s: &str) {\n-            let dbg = ::libc::STDERR_FILENO as ::io::fd_t;\n+            let dbg = STDERR_FILENO as ::io::fd_t;\n             dbg.write_str(s);\n             dbg.write_str(\"\\n\");\n             dbg.flush();\n         }\n     }\n }\n-\n /// Configure logging by traversing the crate map and setting the\n /// per-module global logging flags based on the logging spec\n #[fixed_stack_segment] #[inline(never)]\n pub fn init(crate_map: *u8) {\n-    use c_str::ToCStr;\n     use os;\n-    use ptr;\n-    use option::{Some, None};\n \n     let log_spec = os::getenv(\"RUST_LOG\");\n     match log_spec {\n         Some(spec) => {\n-            do spec.with_c_str |buf| {\n-                unsafe { rust_update_log_settings(crate_map, buf) }\n-            }\n+            update_log_settings(crate_map, spec);\n         }\n         None => {\n-            unsafe {\n-                rust_update_log_settings(crate_map, ptr::null());\n-            }\n+            update_log_settings(crate_map, ~\"\");\n         }\n     }\n }\n@@ -89,9 +230,101 @@ pub fn console_off() { unsafe { rust_log_console_off() } }\n fn should_log_console() -> bool { unsafe { rust_should_log_console() != 0 } }\n \n extern {\n-    fn rust_update_log_settings(crate_map: *u8, settings: *libc::c_char);\n     fn rust_log_console_on();\n     fn rust_log_console_off();\n-    fn rust_should_log_console() -> libc::uintptr_t;\n+    fn rust_should_log_console() -> uintptr_t;\n+}\n+\n+// Tests for parse_logging_spec()\n+#[test]\n+fn parse_logging_spec_valid() {\n+    let dirs: ~[LogDirective] = parse_logging_spec(~\"crate1::mod1=1,crate1::mod2,crate2=4\");\n+    assert_eq!(dirs.len(), 3);\n+    assert!(dirs[0].name == ~\"crate1::mod1\");\n+    assert_eq!(dirs[0].level, 1);\n+\n+    assert!(dirs[1].name == ~\"crate1::mod2\");\n+    assert_eq!(dirs[1].level, MAX_LOG_LEVEL);\n+\n+    assert!(dirs[2].name == ~\"crate2\");\n+    assert_eq!(dirs[2].level, 4);\n+}\n+\n+#[test]\n+fn parse_logging_spec_invalid_crate() {\n+    // test parse_logging_spec with multiple = in specification\n+    let dirs: ~[LogDirective] = parse_logging_spec(~\"crate1::mod1=1=2,crate2=4\");\n+    assert_eq!(dirs.len(), 1);\n+    assert!(dirs[0].name == ~\"crate2\");\n+    assert_eq!(dirs[0].level, 4);\n+}\n+\n+#[test]\n+fn parse_logging_spec_invalid_log_level() {\n+    // test parse_logging_spec with 'noNumber' as log level\n+    let dirs: ~[LogDirective] = parse_logging_spec(~\"crate1::mod1=noNumber,crate2=4\");\n+    assert_eq!(dirs.len(), 1);\n+    assert!(dirs[0].name == ~\"crate2\");\n+    assert_eq!(dirs[0].level, 4);\n+}\n+\n+// Tests for update_entry\n+#[test]\n+fn update_entry_match_full_path() {\n+    use c_str::ToCStr;\n+    let dirs = ~[LogDirective {name: ~\"crate1::mod1\", level: 2 },\n+    LogDirective {name: ~\"crate2\", level: 3}];\n+    unsafe {\n+        do \"crate1::mod1\".to_c_str().with_ref |ptr| {\n+            let entry= &ModEntry {name: ptr, log_level: &mut 0};\n+            let m = update_entry(dirs, transmute(entry));\n+            assert!(*entry.log_level == 2);\n+            assert!(m == 1);\n+        }\n+    }\n }\n \n+#[test]\n+fn update_entry_no_match() {\n+    use c_str::ToCStr;\n+    let dirs = ~[LogDirective {name: ~\"crate1::mod1\", level: 2 },\n+        LogDirective {name: ~\"crate2\", level: 3}];\n+    unsafe {\n+        do \"crate3::mod1\".to_c_str().with_ref |ptr| {\n+            let entry= &ModEntry {name: ptr, log_level: &mut 0};\n+            let m = update_entry(dirs, transmute(entry));\n+            assert!(*entry.log_level == DEFAULT_LOG_LEVEL);\n+            assert!(m == 0);\n+        }\n+    }\n+}\n+\n+#[test]\n+fn update_entry_match_beginning() {\n+    use c_str::ToCStr;\n+    let dirs = ~[LogDirective {name: ~\"crate1::mod1\", level: 2 },\n+        LogDirective {name: ~\"crate2\", level: 3}];\n+    unsafe {\n+        do \"crate2::mod1\".to_c_str().with_ref |ptr| {\n+            let entry= &ModEntry {name: ptr, log_level: &mut 0};\n+            let m = update_entry(dirs, transmute(entry));\n+            assert!(*entry.log_level == 3);\n+            assert!(m == 1);\n+        }\n+    }\n+}\n+\n+#[test]\n+fn update_entry_match_beginning_longest_match() {\n+    use c_str::ToCStr;\n+    let dirs = ~[LogDirective {name: ~\"crate1::mod1\", level: 2 },\n+        LogDirective {name: ~\"crate2\", level: 3}, LogDirective {name: ~\"crate2::mod\", level: 4}];\n+    unsafe {\n+        do \"crate2::mod1\".to_c_str().with_ref |ptr| {\n+            let entry = &ModEntry {name: ptr, log_level: &mut 0};\n+            let m = update_entry(dirs, transmute(entry));\n+            assert!(*entry.log_level == 4);\n+            assert!(m == 1);\n+        }\n+    }\n+}"}, {"sha": "e6206fd7bcb311674188100cd9cde06298b7001f", "filename": "src/rt/rust_crate_map.cpp", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e38739bb442263f1ef67b6c2415f932aa49e6646/src%2Frt%2Frust_crate_map.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e38739bb442263f1ef67b6c2415f932aa49e6646/src%2Frt%2Frust_crate_map.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_map.cpp?ref=e38739bb442263f1ef67b6c2415f932aa49e6646", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -12,36 +12,52 @@\n #include <set>\n \n void iter_module_map(const mod_entry* map,\n-                     void (*fn)(const mod_entry* entry, void *cookie),\n-                     void *cookie) {\n+                    void (*fn)(void* fptr, void* env, const mod_entry *entry),\n+                    void* fptr,\n+                    void* env\n+                    ) {\n     for (const mod_entry* cur = map; cur->name; cur++) {\n-        fn(cur, cookie);\n+        fn(fptr, env, cur);\n     }\n }\n \n void iter_crate_map(const cratemap* map,\n-                    void (*fn)(const mod_entry* map, void *cookie),\n-                    void *cookie,\n+                    void (*fn)(void* fptr, void* env, const mod_entry *entry),\n+                    void *fptr,\n+                    void *env,\n                     std::set<const cratemap*>& visited) {\n     if (visited.find(map) == visited.end()) {\n         // Mark this crate visited\n         visited.insert(map);\n         // First iterate this crate\n-        iter_module_map(map->entries(), fn, cookie);\n+        iter_module_map(map->entries(), fn, fptr, env);\n         // Then recurse on linked crates\n         for (cratemap::iterator i = map->begin(),\n                 e = map->end(); i != e; ++i) {\n-            iter_crate_map(*i, fn, cookie, visited);\n+            iter_crate_map(*i, fn, fptr, env, visited);\n         }\n     }\n }\n \n void iter_crate_map(const cratemap* map,\n-                    void (*fn)(const mod_entry* map, void *cookie),\n-                    void *cookie) {\n+                    void (*fn)(void* fptr, void* env, const mod_entry *entry),\n+                    void *fptr,\n+                    void *env\n+                    ) {\n     std::set<const cratemap*> visited;\n-    iter_crate_map(map, fn, cookie, visited);\n+    iter_crate_map(map, fn, fptr, env, visited);\n }\n+\n+extern \"C\" CDECL void\n+rust_iter_crate_map(const cratemap* map,\n+                    void (*fn)(void* fptr, void* env, const mod_entry *entry),\n+                    void *fptr,\n+                    void *env\n+                    ) {\n+    return iter_crate_map(map, fn, fptr, env);\n+}\n+\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "1bcb2aa8f7e4d3ce403d73dc4d78818ff35d1d8d", "filename": "src/rt/rust_crate_map.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e38739bb442263f1ef67b6c2415f932aa49e6646/src%2Frt%2Frust_crate_map.h", "raw_url": "https://github.com/rust-lang/rust/raw/e38739bb442263f1ef67b6c2415f932aa49e6646/src%2Frt%2Frust_crate_map.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_map.h?ref=e38739bb442263f1ef67b6c2415f932aa49e6646", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -16,7 +16,7 @@\n \n struct mod_entry {\n     const char* name;\n-    uint32_t* state;\n+    uint32_t* log_level;\n };\n \n class cratemap;\n@@ -83,12 +83,14 @@ class cratemap {\n };\n \n void iter_module_map(const mod_entry* map,\n-                     void (*fn)(const mod_entry* entry, void *cookie),\n-                     void *cookie);\n+                     void (*fn)(void* fptr, void* env, const mod_entry *entry),\n+                     void *fptr,\n+                     void *env);\n \n void iter_crate_map(const cratemap* map,\n-                    void (*fn)(const mod_entry* entry, void *cookie),\n-                    void *cookie);\n+                    void (*fn)(void* fptr, void* env, const mod_entry *entry),\n+                    void *fptr,\n+                    void *env);\n \n //\n // Local Variables:"}, {"sha": "97c1135fe01d2aa732f134596ff2af4232a9ee59", "filename": "src/rt/rust_log.cpp", "status": "removed", "additions": 0, "deletions": 155, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/ed422b88727807aee40495a6193a69e4c3842be1/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ed422b88727807aee40495a6193a69e4c3842be1/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=ed422b88727807aee40495a6193a69e4c3842be1", "patch": "@@ -1,155 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*\n- * Logging infrastructure that aims to support multi-threading\n- */\n-\n-\n-#include \"rust_crate_map.h\"\n-#include \"util/array_list.h\"\n-#include \"rust_util.h\"\n-\n-// Reading log directives and setting log level vars\n-\n-struct log_directive {\n-    char* name;\n-    size_t level;\n-};\n-\n-\n-const uint32_t log_err = 1;\n-const uint32_t log_warn = 2;\n-const uint32_t log_info = 3;\n-const uint32_t log_debug = 4;\n-\n-const size_t max_log_directives = 255;\n-const size_t max_log_level = 255;\n-const size_t default_log_level = log_err;\n-\n-// This is a rather ugly parser for strings in the form\n-// \"crate1,crate2.mod3,crate3.x=1\". Log levels are 0-255,\n-// with the most likely ones being 0-3 (defined in std::).\n-size_t parse_logging_spec(char* spec, log_directive* dirs) {\n-    size_t dir = 0;\n-    while (dir < max_log_directives && *spec) {\n-        char* start = spec;\n-        char cur;\n-        while (true) {\n-            cur = *spec;\n-            if (cur == ',' || cur == '=' || cur == '\\0') {\n-                if (start == spec) {spec++; break;}\n-                if (*spec != '\\0') {\n-                    *spec = '\\0';\n-                    spec++;\n-                }\n-                size_t level = max_log_level;\n-                if (cur == '=' && *spec != '\\0') {\n-                    level = *spec - '0';\n-                    if (level > max_log_level) level = max_log_level;\n-                    if (*spec) ++spec;\n-                }\n-                dirs[dir].name = start;\n-                dirs[dir++].level = level;\n-                break;\n-            } else {\n-                spec++;\n-            }\n-        }\n-    }\n-    return dir;\n-}\n-\n-struct update_entry_args {\n-    log_directive* dirs;\n-    size_t n_dirs;\n-    size_t *n_matches;\n-};\n-\n-static void update_entry(const mod_entry* entry, void *cookie) {\n-    update_entry_args *args = (update_entry_args *)cookie;\n-    size_t level = default_log_level, longest_match = 0;\n-    for (size_t d = 0; d < args->n_dirs; d++) {\n-        if (strstr(entry->name, args->dirs[d].name) == entry->name &&\n-            strlen(args->dirs[d].name) > longest_match) {\n-            longest_match = strlen(args->dirs[d].name);\n-            level = args->dirs[d].level;\n-        }\n-    }\n-    *entry->state = level;\n-    if (longest_match > 0) {\n-        (*args->n_matches)++;\n-    }\n-}\n-\n-void update_crate_map(const cratemap* map, log_directive* dirs,\n-                      size_t n_dirs, size_t *n_matches) {\n-    update_entry_args args = { dirs, n_dirs, n_matches };\n-    iter_crate_map(map, update_entry, &args);\n-}\n-\n-void print_mod_name(const mod_entry* mod, void *cooke) {\n-    printf(\" %s\\n\", mod->name);\n-}\n-\n-void print_crate_log_map(const cratemap* map) {\n-    iter_crate_map(map, print_mod_name, NULL);\n-}\n-\n-void update_log_settings(void* crate_map, char* settings) {\n-    char* buffer = NULL;\n-    log_directive dirs[256];\n-    size_t n_dirs = 0;\n-\n-    if (settings) {\n-\n-        if (strcmp(settings, \"::help\") == 0 ||\n-            strcmp(settings, \"?\") == 0) {\n-            printf(\"\\nCrate log map:\\n\\n\");\n-            print_crate_log_map((const cratemap*)crate_map);\n-            printf(\"\\n\");\n-            exit(1);\n-        }\n-\n-        size_t buflen = strlen(settings) + 1;\n-        buffer = (char*)malloc(buflen);\n-        strncpy(buffer, settings, buflen);\n-        n_dirs = parse_logging_spec(buffer, &dirs[0]);\n-    }\n-\n-    size_t n_matches = 0;\n-    update_crate_map((const cratemap*)crate_map, &dirs[0],\n-                     n_dirs, &n_matches);\n-\n-    if (n_matches < n_dirs) {\n-        fprintf(stderr, \"warning: got %lu RUST_LOG specs but only matched %lu of them.\\n\"\n-                \"You may have mistyped a RUST_LOG spec.\\n\"\n-                \"Use RUST_LOG=::help to see the list of crates and modules.\\n\",\n-                (unsigned long)n_dirs, (unsigned long)n_matches);\n-    }\n-\n-    free(buffer);\n-}\n-\n-extern \"C\" CDECL void\n-rust_update_log_settings(void* crate_map, char* settings) {\n-    update_log_settings(crate_map, settings);\n-}\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:\n-//"}, {"sha": "c1ba0524be9bc2d3f36a25c81b52622e2ecf2814", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e38739bb442263f1ef67b6c2415f932aa49e6646/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/e38739bb442263f1ef67b6c2415f932aa49e6646/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=e38739bb442263f1ef67b6c2415f932aa49e6646", "patch": "@@ -182,7 +182,7 @@ rust_valgrind_stack_register\n rust_valgrind_stack_deregister\n rust_take_env_lock\n rust_drop_env_lock\n-rust_update_log_settings\n+rust_iter_crate_map\n rust_running_on_valgrind\n rust_get_num_cpus\n rust_get_global_args_ptr\n@@ -191,4 +191,4 @@ rust_drop_global_args_lock\n rust_take_change_dir_lock\n rust_drop_change_dir_lock\n rust_get_test_int\n-rust_get_task\n\\ No newline at end of file\n+rust_get_task"}]}