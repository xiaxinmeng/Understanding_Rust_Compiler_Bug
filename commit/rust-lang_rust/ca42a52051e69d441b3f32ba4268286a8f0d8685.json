{"sha": "ca42a52051e69d441b3f32ba4268286a8f0d8685", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNDJhNTIwNTFlNjlkNDQxYjNmMzJiYTQyNjgyODZhOGYwZDg2ODU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-01-04T16:33:05Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-01-04T16:33:05Z"}, "message": "Code review fixes", "tree": {"sha": "217c9b610f657a3b60833c4e7b1c0bbf5c29d122", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/217c9b610f657a3b60833c4e7b1c0bbf5c29d122"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca42a52051e69d441b3f32ba4268286a8f0d8685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca42a52051e69d441b3f32ba4268286a8f0d8685", "html_url": "https://github.com/rust-lang/rust/commit/ca42a52051e69d441b3f32ba4268286a8f0d8685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca42a52051e69d441b3f32ba4268286a8f0d8685/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed1ef3ae13a8f7bc2144bd06d0271d9a6e3205a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1ef3ae13a8f7bc2144bd06d0271d9a6e3205a0", "html_url": "https://github.com/rust-lang/rust/commit/ed1ef3ae13a8f7bc2144bd06d0271d9a6e3205a0"}], "stats": {"total": 92, "additions": 50, "deletions": 42}, "files": [{"sha": "f376ded57bdc48333962fe4b771f9434d10c757c", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca42a52051e69d441b3f32ba4268286a8f0d8685/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca42a52051e69d441b3f32ba4268286a8f0d8685/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=ca42a52051e69d441b3f32ba4268286a8f0d8685", "patch": "@@ -3,7 +3,7 @@\n use std::iter;\n \n use either::Either;\n-use hir::{Adt, AsAssocItem, ModPath, ModuleDef, ScopeDef, Type};\n+use hir::{Adt, ModPath, ModuleDef, ScopeDef, Type};\n use ide_db::helpers::insert_use::ImportScope;\n use ide_db::imports_locator;\n use syntax::AstNode;\n@@ -142,15 +142,8 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n         Some(40),\n         potential_import_name,\n         true,\n+        true,\n     )\n-    .filter(|import_candidate| match import_candidate {\n-        Either::Left(ModuleDef::Function(function)) => function.as_assoc_item(ctx.db).is_none(),\n-        Either::Left(ModuleDef::Const(const_)) => const_.as_assoc_item(ctx.db).is_none(),\n-        Either::Left(ModuleDef::TypeAlias(type_alias)) => {\n-            type_alias.as_assoc_item(ctx.db).is_none()\n-        }\n-        _ => true,\n-    })\n     .filter_map(|import_candidate| {\n         Some(match import_candidate {\n             Either::Left(module_def) => {"}, {"sha": "1325a93d1382965ab5045d428718e8772272b2d0", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ca42a52051e69d441b3f32ba4268286a8f0d8685/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca42a52051e69d441b3f32ba4268286a8f0d8685/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=ca42a52051e69d441b3f32ba4268286a8f0d8685", "patch": "@@ -199,7 +199,7 @@ impl ImportMap {\n                 ItemInNs::Values(module_def_id)\n             };\n \n-            let mut assoc_item_info = original_import_info.to_owned();\n+            let mut assoc_item_info = original_import_info.clone();\n             assoc_item_info.path.segments.push(assoc_item_name.to_owned());\n             assoc_item_info.is_trait_assoc_item = true;\n             self.map.insert(assoc_item, assoc_item_info);\n@@ -325,38 +325,38 @@ impl Query {\n         self.exclude_import_kinds.insert(import_kind);\n         self\n     }\n-}\n \n-fn import_matches_query(import: &ImportInfo, query: &Query, enforce_lowercase: bool) -> bool {\n-    let mut input = if import.is_trait_assoc_item || query.name_only {\n-        import.path.segments.last().unwrap().to_string()\n-    } else {\n-        import.path.to_string()\n-    };\n-    if enforce_lowercase || !query.case_sensitive {\n-        input.make_ascii_lowercase();\n-    }\n+    fn import_matches(&self, import: &ImportInfo, enforce_lowercase: bool) -> bool {\n+        let mut input = if import.is_trait_assoc_item || self.name_only {\n+            import.path.segments.last().unwrap().to_string()\n+        } else {\n+            import.path.to_string()\n+        };\n+        if enforce_lowercase || !self.case_sensitive {\n+            input.make_ascii_lowercase();\n+        }\n \n-    let query_string =\n-        if !enforce_lowercase && query.case_sensitive { &query.query } else { &query.lowercased };\n-\n-    match query.search_mode {\n-        SearchMode::Equals => &input == query_string,\n-        SearchMode::Contains => input.contains(query_string),\n-        SearchMode::Fuzzy => {\n-            let mut unchecked_query_chars = query_string.chars();\n-            let mut mismatching_query_char = unchecked_query_chars.next();\n-\n-            for input_char in input.chars() {\n-                match mismatching_query_char {\n-                    None => return true,\n-                    Some(matching_query_char) if matching_query_char == input_char => {\n-                        mismatching_query_char = unchecked_query_chars.next();\n+        let query_string =\n+            if !enforce_lowercase && self.case_sensitive { &self.query } else { &self.lowercased };\n+\n+        match self.search_mode {\n+            SearchMode::Equals => &input == query_string,\n+            SearchMode::Contains => input.contains(query_string),\n+            SearchMode::Fuzzy => {\n+                let mut unchecked_query_chars = query_string.chars();\n+                let mut mismatching_query_char = unchecked_query_chars.next();\n+\n+                for input_char in input.chars() {\n+                    match mismatching_query_char {\n+                        None => return true,\n+                        Some(matching_query_char) if matching_query_char == input_char => {\n+                            mismatching_query_char = unchecked_query_chars.next();\n+                        }\n+                        _ => (),\n                     }\n-                    _ => (),\n                 }\n+                mismatching_query_char.is_none()\n             }\n-            mismatching_query_char.is_none()\n         }\n     }\n }\n@@ -390,7 +390,7 @@ pub fn search_dependencies<'a>(\n             let importables = &import_map.importables[indexed_value.value as usize..];\n \n             let common_importable_data = &import_map.map[&importables[0]];\n-            if !import_matches_query(common_importable_data, &query, true) {\n+            if !query.import_matches(common_importable_data, true) {\n                 continue;\n             }\n \n@@ -410,7 +410,7 @@ pub fn search_dependencies<'a>(\n                 })\n                 .filter(|item| {\n                     !query.case_sensitive // we've already checked the common importables path case-insensitively\n-                        || import_matches_query(&import_map.map[item], &query, false)\n+                        || query.import_matches(&import_map.map[item], false)\n                 });\n             res.extend(iter);\n "}, {"sha": "0782ab070957ee75038e889bfa7590d9270f9e89", "filename": "crates/ide_db/src/imports_locator.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ca42a52051e69d441b3f32ba4268286a8f0d8685/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca42a52051e69d441b3f32ba4268286a8f0d8685/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports_locator.rs?ref=ca42a52051e69d441b3f32ba4268286a8f0d8685", "patch": "@@ -1,7 +1,7 @@\n //! This module contains an import search funcionality that is provided to the assists module.\n //! Later, this should be moved away to a separate crate that is accessible from the assists module.\n \n-use hir::{import_map, Crate, MacroDef, ModuleDef, Semantics};\n+use hir::{import_map, AsAssocItem, Crate, MacroDef, ModuleDef, Semantics};\n use syntax::{ast, AstNode, SyntaxKind::NAME};\n \n use crate::{\n@@ -40,8 +40,9 @@ pub fn find_similar_imports<'a>(\n     krate: Crate,\n     limit: Option<usize>,\n     fuzzy_search_string: String,\n+    ignore_assoc_items: bool,\n     name_only: bool,\n-) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n+) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> + 'a {\n     let _p = profile::span(\"find_similar_imports\");\n \n     let mut external_query = import_map::Query::new(fuzzy_search_string.clone())\n@@ -57,7 +58,21 @@ pub fn find_similar_imports<'a>(\n         external_query = external_query.limit(limit);\n     }\n \n-    find_imports(sema, krate, local_query, external_query)\n+    let db = sema.db;\n+    find_imports(sema, krate, local_query, external_query).filter(move |import_candidate| {\n+        if ignore_assoc_items {\n+            match import_candidate {\n+                Either::Left(ModuleDef::Function(function)) => function.as_assoc_item(db).is_none(),\n+                Either::Left(ModuleDef::Const(const_)) => const_.as_assoc_item(db).is_none(),\n+                Either::Left(ModuleDef::TypeAlias(type_alias)) => {\n+                    type_alias.as_assoc_item(db).is_none()\n+                }\n+                _ => true,\n+            }\n+        } else {\n+            true\n+        }\n+    })\n }\n \n fn find_imports<'a>("}]}