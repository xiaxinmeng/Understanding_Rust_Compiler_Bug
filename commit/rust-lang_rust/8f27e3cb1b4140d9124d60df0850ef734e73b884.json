{"sha": "8f27e3cb1b4140d9124d60df0850ef734e73b884", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMjdlM2NiMWI0MTQwZDkxMjRkNjBkZjA4NTBlZjczNGU3M2I4ODQ=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-12T23:55:34Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-12T23:55:34Z"}, "message": "Make some methods of `Pin` unstable const\n\nMake the following methods unstable const under the `const_pin` feature:\n- `new`\n- `new_unchecked`\n- `into_inner`\n- `into_inner_unchecked`\n- `get_ref`\n- `into_ref`\n\nAlso adds tests for these methods in a const context.\n\nTracking issue: #76654", "tree": {"sha": "203d391a20c28b1a9015dc2e97fcdc9d98478897", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/203d391a20c28b1a9015dc2e97fcdc9d98478897"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f27e3cb1b4140d9124d60df0850ef734e73b884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f27e3cb1b4140d9124d60df0850ef734e73b884", "html_url": "https://github.com/rust-lang/rust/commit/8f27e3cb1b4140d9124d60df0850ef734e73b884", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f27e3cb1b4140d9124d60df0850ef734e73b884/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "989190874fe2a0e9877ce4f02a6c60641e3d42a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/989190874fe2a0e9877ce4f02a6c60641e3d42a3", "html_url": "https://github.com/rust-lang/rust/commit/989190874fe2a0e9877ce4f02a6c60641e3d42a3"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "696b6a64a9fec351b5156743cb93d1da64170530", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f27e3cb1b4140d9124d60df0850ef734e73b884/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f27e3cb1b4140d9124d60df0850ef734e73b884/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=8f27e3cb1b4140d9124d60df0850ef734e73b884", "patch": "@@ -80,6 +80,7 @@\n #![feature(const_int_pow)]\n #![feature(constctlz)]\n #![feature(const_panic)]\n+#![feature(const_pin)]\n #![feature(const_fn_union)]\n #![feature(const_generics)]\n #![feature(const_option)]"}, {"sha": "fa5b37edc36e6ba330e73867c497490204c309aa", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8f27e3cb1b4140d9124d60df0850ef734e73b884/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f27e3cb1b4140d9124d60df0850ef734e73b884/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=8f27e3cb1b4140d9124d60df0850ef734e73b884", "patch": "@@ -471,9 +471,10 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n     ///\n     /// Unlike `Pin::new_unchecked`, this method is safe because the pointer\n     /// `P` dereferences to an [`Unpin`] type, which cancels the pinning guarantees.\n-    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn new(pointer: P) -> Pin<P> {\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    pub const fn new(pointer: P) -> Pin<P> {\n         // SAFETY: the value pointed to is `Unpin`, and so has no requirements\n         // around pinning.\n         unsafe { Pin::new_unchecked(pointer) }\n@@ -483,9 +484,10 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n     ///\n     /// This requires that the data inside this `Pin` is [`Unpin`] so that we\n     /// can ignore the pinning invariants when unwrapping it.\n-    #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n     #[inline(always)]\n-    pub fn into_inner(pin: Pin<P>) -> P {\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n+    pub const fn into_inner(pin: Pin<P>) -> P {\n         pin.pointer\n     }\n }\n@@ -556,9 +558,10 @@ impl<P: Deref> Pin<P> {\n     ///\n     /// [`mem::swap`]: crate::mem::swap\n     #[lang = \"new_unchecked\"]\n-    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub unsafe fn new_unchecked(pointer: P) -> Pin<P> {\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    pub const unsafe fn new_unchecked(pointer: P) -> Pin<P> {\n         Pin { pointer }\n     }\n \n@@ -589,9 +592,10 @@ impl<P: Deref> Pin<P> {\n     ///\n     /// If the underlying data is [`Unpin`], [`Pin::into_inner`] should be used\n     /// instead.\n-    #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n     #[inline(always)]\n-    pub unsafe fn into_inner_unchecked(pin: Pin<P>) -> P {\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    #[stable(feature = \"pin_into_inner\", since = \"1.39.0\")]\n+    pub const unsafe fn into_inner_unchecked(pin: Pin<P>) -> P {\n         pin.pointer\n     }\n }\n@@ -693,17 +697,18 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     /// with the same lifetime as the original `Pin`.\n     ///\n     /// [\"pinning projections\"]: self#projections-and-structural-pinning\n-    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n-    pub fn get_ref(self) -> &'a T {\n+    #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n+    pub const fn get_ref(self) -> &'a T {\n         self.pointer\n     }\n }\n \n impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// Converts this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.\n-    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n+    #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn into_ref(self) -> Pin<&'a T> {\n         Pin { pointer: self.pointer }\n     }"}, {"sha": "b8d67d72665435e680fcd9d6f5fc67ab9d48aecf", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f27e3cb1b4140d9124d60df0850ef734e73b884/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f27e3cb1b4140d9124d60df0850ef734e73b884/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=8f27e3cb1b4140d9124d60df0850ef734e73b884", "patch": "@@ -39,6 +39,7 @@\n #![feature(iter_order_by)]\n #![feature(cmp_min_max_by)]\n #![feature(iter_map_while)]\n+#![feature(const_pin)]\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_raw_ptr_deref)]\n #![feature(never_type)]\n@@ -74,6 +75,7 @@ mod num;\n mod ops;\n mod option;\n mod pattern;\n+mod pin;\n mod ptr;\n mod result;\n mod slice;"}, {"sha": "136335316382913a626a63bcac764b62edf6c554", "filename": "library/core/tests/pin.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8f27e3cb1b4140d9124d60df0850ef734e73b884/library%2Fcore%2Ftests%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f27e3cb1b4140d9124d60df0850ef734e73b884/library%2Fcore%2Ftests%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fpin.rs?ref=8f27e3cb1b4140d9124d60df0850ef734e73b884", "patch": "@@ -0,0 +1,21 @@\n+use core::pin::Pin;\n+\n+#[test]\n+fn pin_const() {\n+    // test that the methods of `Pin` are usable in a const context\n+\n+    const POINTER: &'static usize = &2;\n+\n+    const PINNED: Pin<&'static usize> = Pin::new(POINTER);\n+    const PINNED_UNCHECKED: Pin<&'static usize> = unsafe { Pin::new_unchecked(POINTER) };\n+    assert_eq!(PINNED_UNCHECKED, PINNED);\n+\n+    const INNER: &'static usize = Pin::into_inner(PINNED);\n+    assert_eq!(INNER, POINTER);\n+\n+    const INNER_UNCHECKED: &'static usize = unsafe { Pin::into_inner_unchecked(PINNED) };\n+    assert_eq!(INNER_UNCHECKED, POINTER);\n+\n+    const REF: &'static usize = PINNED.get_ref();\n+    assert_eq!(REF, POINTER)\n+}"}]}