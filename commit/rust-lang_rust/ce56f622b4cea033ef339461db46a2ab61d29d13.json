{"sha": "ce56f622b4cea033ef339461db46a2ab61d29d13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNTZmNjIyYjRjZWEwMzNlZjMzOTQ2MWRiNDZhMmFiNjFkMjlkMTM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-24T20:38:51Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-14T02:42:12Z"}, "message": "Use an `Iterator` for `MovePath` traversal", "tree": {"sha": "3dd0a70355d1650da2d9adfd70618ae224e9c46d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dd0a70355d1650da2d9adfd70618ae224e9c46d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce56f622b4cea033ef339461db46a2ab61d29d13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce56f622b4cea033ef339461db46a2ab61d29d13", "html_url": "https://github.com/rust-lang/rust/commit/ce56f622b4cea033ef339461db46a2ab61d29d13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce56f622b4cea033ef339461db46a2ab61d29d13/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64cd592247b0029352b57a7caf038e6d2ba6a05", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64cd592247b0029352b57a7caf038e6d2ba6a05", "html_url": "https://github.com/rust-lang/rust/commit/a64cd592247b0029352b57a7caf038e6d2ba6a05"}], "stats": {"total": 63, "additions": 47, "deletions": 16}, "files": [{"sha": "4f83a660f5c3fbc8d94f9137e704d6aadc56ede7", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce56f622b4cea033ef339461db46a2ab61d29d13/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce56f622b4cea033ef339461db46a2ab61d29d13/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=ce56f622b4cea033ef339461db46a2ab61d29d13", "patch": "@@ -1350,7 +1350,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // there.\n                 let mut mpis = vec![mpi];\n                 let move_paths = &self.move_data.move_paths;\n-                mpis.extend(move_paths[mpi].parents(move_paths));\n+                mpis.extend(move_paths[mpi].parents(move_paths).map(|(mpi, _)| mpi));\n \n                 for moi in &self.move_data.loc_map[location] {\n                     debug!(\"report_use_of_moved_or_uninitialized: moi={:?}\", moi);"}, {"sha": "03871984e40d6f4f2f5607048563193c5c8ed792", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce56f622b4cea033ef339461db46a2ab61d29d13/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce56f622b4cea033ef339461db46a2ab61d29d13/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=ce56f622b4cea033ef339461db46a2ab61d29d13", "patch": "@@ -1582,9 +1582,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) {\n         if let Some(mpi) = self.move_path_for_place(place_span.0) {\n             let move_paths = &self.move_data.move_paths;\n-            let mut child = move_paths[mpi].first_child;\n-            while let Some(child_mpi) = child {\n-                let child_move_path = &move_paths[child_mpi];\n+\n+            let root_path = &move_paths[mpi];\n+            for (child_mpi, child_move_path) in root_path.children(move_paths) {\n                 let last_proj = child_move_path.place.projection.last().unwrap();\n                 if let ProjectionElem::ConstantIndex { offset, from_end, .. } = last_proj {\n                     debug_assert!(!from_end, \"Array constant indexing shouldn't be `from_end`.\");\n@@ -1606,7 +1606,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         }\n                     }\n                 }\n-                child = child_move_path.next_sibling;\n             }\n         }\n     }"}, {"sha": "1fcd5aefb3ea18c0dd264b2afba976c5b65afa8b", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce56f622b4cea033ef339461db46a2ab61d29d13/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce56f622b4cea033ef339461db46a2ab61d29d13/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=ce56f622b4cea033ef339461db46a2ab61d29d13", "patch": "@@ -90,7 +90,7 @@ fn populate_polonius_move_facts(\n     for (child, move_path) in move_data.move_paths.iter_enumerated() {\n         all_facts\n             .child\n-            .extend(move_path.parents(&move_data.move_paths).iter().map(|&parent| (child, parent)));\n+            .extend(move_path.parents(&move_data.move_paths).map(|(parent, _)| (child, parent)));\n     }\n \n     // initialized_at"}, {"sha": "6f6ba7dc27128adda533997dec7ab5f10173b76b", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ce56f622b4cea033ef339461db46a2ab61d29d13/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce56f622b4cea033ef339461db46a2ab61d29d13/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=ce56f622b4cea033ef339461db46a2ab61d29d13", "patch": "@@ -58,19 +58,32 @@ pub struct MovePath<'tcx> {\n }\n \n impl<'tcx> MovePath<'tcx> {\n-    pub fn parents(\n+    /// Returns an iterator over the parents of `self`.\n+    pub fn parents<'a>(\n         &self,\n-        move_paths: &IndexVec<MovePathIndex, MovePath<'_>>,\n-    ) -> Vec<MovePathIndex> {\n-        let mut parents = Vec::new();\n-\n-        let mut curr_parent = self.parent;\n-        while let Some(parent_mpi) = curr_parent {\n-            parents.push(parent_mpi);\n-            curr_parent = move_paths[parent_mpi].parent;\n+        move_paths: &'a IndexVec<MovePathIndex, MovePath<'tcx>>,\n+    ) -> impl 'a + Iterator<Item = (MovePathIndex, &'a MovePath<'tcx>)> {\n+        let first = self.parent.map(|mpi| (mpi, &move_paths[mpi]));\n+        MovePathLinearIter {\n+            next: first,\n+            fetch_next: move |_, parent: &MovePath<'_>| {\n+                parent.parent.map(|mpi| (mpi, &move_paths[mpi]))\n+            },\n         }\n+    }\n \n-        parents\n+    /// Returns an iterator over the immediate children of `self`.\n+    pub fn children<'a>(\n+        &self,\n+        move_paths: &'a IndexVec<MovePathIndex, MovePath<'tcx>>,\n+    ) -> impl 'a + Iterator<Item = (MovePathIndex, &'a MovePath<'tcx>)> {\n+        let first = self.first_child.map(|mpi| (mpi, &move_paths[mpi]));\n+        MovePathLinearIter {\n+            next: first,\n+            fetch_next: move |_, child: &MovePath<'_>| {\n+                child.next_sibling.map(|mpi| (mpi, &move_paths[mpi]))\n+            },\n+        }\n     }\n \n     /// Finds the closest descendant of `self` for which `f` returns `true` using a breadth-first\n@@ -131,6 +144,25 @@ impl<'tcx> fmt::Display for MovePath<'tcx> {\n     }\n }\n \n+#[allow(unused)]\n+struct MovePathLinearIter<'a, 'tcx, F> {\n+    next: Option<(MovePathIndex, &'a MovePath<'tcx>)>,\n+    fetch_next: F,\n+}\n+\n+impl<'a, 'tcx, F> Iterator for MovePathLinearIter<'a, 'tcx, F>\n+where\n+    F: FnMut(MovePathIndex, &'a MovePath<'tcx>) -> Option<(MovePathIndex, &'a MovePath<'tcx>)>,\n+{\n+    type Item = (MovePathIndex, &'a MovePath<'tcx>);\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        let ret = self.next.take()?;\n+        self.next = (self.fetch_next)(ret.0, ret.1);\n+        Some(ret)\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct MoveData<'tcx> {\n     pub move_paths: IndexVec<MovePathIndex, MovePath<'tcx>>,"}]}