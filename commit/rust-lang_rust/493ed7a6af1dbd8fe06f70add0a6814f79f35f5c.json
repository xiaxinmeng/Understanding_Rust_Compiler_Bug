{"sha": "493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "node_id": "C_kwDOAAsO6NoAKDQ5M2VkN2E2YWYxZGJkOGZlMDZmNzBhZGQwYTY4MTRmNzlmMzVmNWM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-03T00:09:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-03T00:09:12Z"}, "message": "Rollup merge of #94433 - Urgau:check-cfg-allowness, r=petrochenkov\n\nImprove allowness of the unexpected_cfgs lint\n\nThis pull-request improve the allowness (`#[allow(...)]`) of the `unexpected_cfgs` lint.\n\nBefore this PR only crate level `#![allow(unexpected_cfgs)]` worked, now with this PR it also work when put around `cfg!` or if it is in a upper level. Making it work ~for the attributes `cfg`, `cfg_attr`, ...~ for the same level is awkward as the current code is design to give \"Some parent node that is close to this macro call\" (cf. https://doc.rust-lang.org/nightly/nightly-rustc/rustc_expand/base/struct.ExpansionData.html) meaning that allow on the same line as an attribute won't work. I'm note even sure if this would be possible.\n\nFound while working on https://github.com/rust-lang/rust/pull/94298.\nr? ````````@petrochenkov````````", "tree": {"sha": "07ad9807526b07b6cb2ae84b740edc6863c6017d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07ad9807526b07b6cb2ae84b740edc6863c6017d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIAcoCRBK7hj4Ov3rIwAA9EUIAGoVVBiLBEDLu4gaOKhunwab\nRJmvztNUmeCiJBFbSnyT898AWAHpVQzJ8wxefi9eYtQ7+iiFjFCv7N+V3/Z3H7UW\n+cqlHwCCJSG4gt0tq6OuUN7WF+1Kst0CqBg8skuuffEiM3F4yzrOxmPTDdyZqIs6\nt/8SYAUA+4XAz25kE/1KcPab2ccGp8oNl87V6xNKW8s36qtwvUi/QzQK11Gg7Bh+\nywfmNQ/7nb51Z60DTggDDTqxzLxgvRoMi7xidmJbGDhSMhIKrbXH/K4aMUQ62ICS\nk0e7pTFgI56VYR8wRPPlgDzi4FHxeR6dQMU0BFevBeYpvgzZfe0Ek7rJ1ezG/D4=\n=SPV/\n-----END PGP SIGNATURE-----\n", "payload": "tree 07ad9807526b07b6cb2ae84b740edc6863c6017d\nparent 7537b2036a472e80fce4295eb799a53f61f959c0\nparent 765205b9b8274f6437d3fee291bc80e7e61a0af0\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646266152 +0100\ncommitter GitHub <noreply@github.com> 1646266152 +0100\n\nRollup merge of #94433 - Urgau:check-cfg-allowness, r=petrochenkov\n\nImprove allowness of the unexpected_cfgs lint\n\nThis pull-request improve the allowness (`#[allow(...)]`) of the `unexpected_cfgs` lint.\n\nBefore this PR only crate level `#![allow(unexpected_cfgs)]` worked, now with this PR it also work when put around `cfg!` or if it is in a upper level. Making it work ~for the attributes `cfg`, `cfg_attr`, ...~ for the same level is awkward as the current code is design to give \"Some parent node that is close to this macro call\" (cf. https://doc.rust-lang.org/nightly/nightly-rustc/rustc_expand/base/struct.ExpansionData.html) meaning that allow on the same line as an attribute won't work. I'm note even sure if this would be possible.\n\nFound while working on https://github.com/rust-lang/rust/pull/94298.\nr? ````````@petrochenkov````````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "html_url": "https://github.com/rust-lang/rust/commit/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7537b2036a472e80fce4295eb799a53f61f959c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7537b2036a472e80fce4295eb799a53f61f959c0", "html_url": "https://github.com/rust-lang/rust/commit/7537b2036a472e80fce4295eb799a53f61f959c0"}, {"sha": "765205b9b8274f6437d3fee291bc80e7e61a0af0", "url": "https://api.github.com/repos/rust-lang/rust/commits/765205b9b8274f6437d3fee291bc80e7e61a0af0", "html_url": "https://github.com/rust-lang/rust/commit/765205b9b8274f6437d3fee291bc80e7e61a0af0"}], "stats": {"total": 148, "additions": 122, "deletions": 26}, "files": [{"sha": "846abce9d6a6e23bd1429b90f290703c5e23dd6b", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "patch": "@@ -1,8 +1,7 @@\n //! Parsing and validation of builtin attributes\n \n use rustc_ast as ast;\n-use rustc_ast::node_id::CRATE_NODE_ID;\n-use rustc_ast::{Attribute, Lit, LitKind, MetaItem, MetaItemKind, NestedMetaItem};\n+use rustc_ast::{Attribute, Lit, LitKind, MetaItem, MetaItemKind, NestedMetaItem, NodeId};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};\n@@ -436,7 +435,12 @@ pub fn find_crate_name(sess: &Session, attrs: &[Attribute]) -> Option<Symbol> {\n }\n \n /// Tests if a cfg-pattern matches the cfg set\n-pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Features>) -> bool {\n+pub fn cfg_matches(\n+    cfg: &ast::MetaItem,\n+    sess: &ParseSess,\n+    lint_node_id: NodeId,\n+    features: Option<&Features>,\n+) -> bool {\n     eval_condition(cfg, sess, features, &mut |cfg| {\n         try_gate_cfg(cfg, sess, features);\n         let error = |span, msg| {\n@@ -470,7 +474,7 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n                         sess.buffer_lint_with_diagnostic(\n                             UNEXPECTED_CFGS,\n                             cfg.span,\n-                            CRATE_NODE_ID,\n+                            lint_node_id,\n                             \"unexpected `cfg` condition name\",\n                             BuiltinLintDiagnostics::UnexpectedCfg(ident.span, name, None),\n                         );\n@@ -482,7 +486,7 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n                             sess.buffer_lint_with_diagnostic(\n                                 UNEXPECTED_CFGS,\n                                 cfg.span,\n-                                CRATE_NODE_ID,\n+                                lint_node_id,\n                                 \"unexpected `cfg` condition value\",\n                                 BuiltinLintDiagnostics::UnexpectedCfg(\n                                     cfg.name_value_literal_span().unwrap(),"}, {"sha": "f5ef4765df64f9240d899b228ab1be8a4cdec524", "filename": "compiler/rustc_builtin_macros/src/cfg.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs?ref=493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "patch": "@@ -19,7 +19,12 @@ pub fn expand_cfg(\n \n     match parse_cfg(cx, sp, tts) {\n         Ok(cfg) => {\n-            let matches_cfg = attr::cfg_matches(&cfg, &cx.sess.parse_sess, cx.ecfg.features);\n+            let matches_cfg = attr::cfg_matches(\n+                &cfg,\n+                &cx.sess.parse_sess,\n+                cx.current_expansion.lint_node_id,\n+                cx.ecfg.features,\n+            );\n             MacEager::expr(cx.expr_bool(sp, matches_cfg))\n         }\n         Err(mut err) => {"}, {"sha": "3c8f8f1854bf2934ff72e4cd8de0ff63b8e29813", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "patch": "@@ -5,6 +5,7 @@ use rustc_ast::mut_visit::MutVisitor;\n use rustc_ast::ptr::P;\n use rustc_ast::tokenstream::CanSynthesizeMissingTokens;\n use rustc_ast::visit::Visitor;\n+use rustc_ast::NodeId;\n use rustc_ast::{mut_visit, visit};\n use rustc_ast::{AstLike, Attribute};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n@@ -26,15 +27,16 @@ crate fn expand(\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(ecx, meta_item, sym::cfg_eval);\n     warn_on_duplicate_attribute(&ecx, &annotatable, sym::cfg_eval);\n-    vec![cfg_eval(ecx.sess, ecx.ecfg.features, annotatable)]\n+    vec![cfg_eval(ecx.sess, ecx.ecfg.features, annotatable, ecx.current_expansion.lint_node_id)]\n }\n \n crate fn cfg_eval(\n     sess: &Session,\n     features: Option<&Features>,\n     annotatable: Annotatable,\n+    lint_node_id: NodeId,\n ) -> Annotatable {\n-    CfgEval { cfg: &mut StripUnconfigured { sess, features, config_tokens: true } }\n+    CfgEval { cfg: &mut StripUnconfigured { sess, features, config_tokens: true, lint_node_id } }\n         .configure_annotatable(annotatable)\n         // Since the item itself has already been configured by the `InvocationCollector`,\n         // we know that fold result vector will contain exactly one element."}, {"sha": "61681ec66a48dfdea63284c47f358021af72b9bb", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "patch": "@@ -64,7 +64,12 @@ impl MultiItemModifier for Expander {\n                 match &mut resolutions[..] {\n                     [] => {}\n                     [(_, first_item, _), others @ ..] => {\n-                        *first_item = cfg_eval(sess, features, item.clone());\n+                        *first_item = cfg_eval(\n+                            sess,\n+                            features,\n+                            item.clone(),\n+                            ecx.current_expansion.lint_node_id,\n+                        );\n                         for (_, item, _) in others {\n                             *item = first_item.clone();\n                         }"}, {"sha": "9cc06ac0319698ddbe64e962585a8a78f34c2b78", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "patch": "@@ -1,4 +1,5 @@\n use rustc_arena::TypedArena;\n+use rustc_ast::CRATE_NODE_ID;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::temp_dir::MaybeTempDir;\n@@ -2434,7 +2435,7 @@ fn add_upstream_native_libraries(\n \n fn relevant_lib(sess: &Session, lib: &NativeLib) -> bool {\n     match lib.cfg {\n-        Some(ref cfg) => rustc_attr::cfg_matches(cfg, &sess.parse_sess, None),\n+        Some(ref cfg) => rustc_attr::cfg_matches(cfg, &sess.parse_sess, CRATE_NODE_ID, None),\n         None => true,\n     }\n }"}, {"sha": "d43c6fec7d5ad4efde6b308e3b72eab0946c92b0", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "patch": "@@ -5,6 +5,7 @@ use rustc_ast::token::{DelimToken, Token, TokenKind};\n use rustc_ast::tokenstream::{AttrAnnotatedTokenStream, AttrAnnotatedTokenTree};\n use rustc_ast::tokenstream::{DelimSpan, Spacing};\n use rustc_ast::tokenstream::{LazyTokenStream, TokenTree};\n+use rustc_ast::NodeId;\n use rustc_ast::{self as ast, AstLike, AttrStyle, Attribute, MetaItem};\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashMap;\n@@ -29,6 +30,7 @@ pub struct StripUnconfigured<'a> {\n     /// This is only used for the input to derive macros,\n     /// which needs eager expansion of `cfg` and `cfg_attr`\n     pub config_tokens: bool,\n+    pub lint_node_id: NodeId,\n }\n \n fn get_features(\n@@ -196,8 +198,13 @@ fn get_features(\n }\n \n // `cfg_attr`-process the crate's attributes and compute the crate's features.\n-pub fn features(sess: &Session, mut krate: ast::Crate) -> (ast::Crate, Features) {\n-    let mut strip_unconfigured = StripUnconfigured { sess, features: None, config_tokens: false };\n+pub fn features(\n+    sess: &Session,\n+    mut krate: ast::Crate,\n+    lint_node_id: NodeId,\n+) -> (ast::Crate, Features) {\n+    let mut strip_unconfigured =\n+        StripUnconfigured { sess, features: None, config_tokens: false, lint_node_id };\n \n     let unconfigured_attrs = krate.attrs.clone();\n     let diag = &sess.parse_sess.span_diagnostic;\n@@ -353,7 +360,12 @@ impl<'a> StripUnconfigured<'a> {\n             );\n         }\n \n-        if !attr::cfg_matches(&cfg_predicate, &self.sess.parse_sess, self.features) {\n+        if !attr::cfg_matches(\n+            &cfg_predicate,\n+            &self.sess.parse_sess,\n+            self.lint_node_id,\n+            self.features,\n+        ) {\n             return vec![];\n         }\n \n@@ -445,7 +457,7 @@ impl<'a> StripUnconfigured<'a> {\n             }\n         };\n         parse_cfg(&meta_item, &self.sess).map_or(true, |meta_item| {\n-            attr::cfg_matches(&meta_item, &self.sess.parse_sess, self.features)\n+            attr::cfg_matches(&meta_item, &self.sess.parse_sess, self.lint_node_id, self.features)\n         })\n     }\n "}, {"sha": "1b9761805093974a6012d674821ebb66b919c345", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "patch": "@@ -551,11 +551,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 // attribute is expanded. Therefore, we don't need to configure the tokens\n                 // Derive macros *can* see the results of cfg-expansion - they are handled\n                 // specially in `fully_expand_fragment`\n-                cfg: StripUnconfigured {\n-                    sess: &self.cx.sess,\n-                    features: self.cx.ecfg.features,\n-                    config_tokens: false,\n-                },\n                 cx: self.cx,\n                 invocations: Vec::new(),\n                 monotonic: self.monotonic,\n@@ -1538,12 +1533,20 @@ impl InvocationCollectorNode for AstLikeWrapper<P<ast::Expr>, OptExprTag> {\n \n struct InvocationCollector<'a, 'b> {\n     cx: &'a mut ExtCtxt<'b>,\n-    cfg: StripUnconfigured<'a>,\n     invocations: Vec<(Invocation, Option<Lrc<SyntaxExtension>>)>,\n     monotonic: bool,\n }\n \n impl<'a, 'b> InvocationCollector<'a, 'b> {\n+    fn cfg(&self) -> StripUnconfigured<'_> {\n+        StripUnconfigured {\n+            sess: &self.cx.sess,\n+            features: self.cx.ecfg.features,\n+            config_tokens: false,\n+            lint_node_id: self.cx.current_expansion.lint_node_id,\n+        }\n+    }\n+\n     fn collect(&mut self, fragment_kind: AstFragmentKind, kind: InvocationKind) -> AstFragment {\n         let expn_id = LocalExpnId::fresh_empty();\n         let vis = kind.placeholder_visibility();\n@@ -1683,7 +1686,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         attr: ast::Attribute,\n         pos: usize,\n     ) -> bool {\n-        let res = self.cfg.cfg_true(&attr);\n+        let res = self.cfg().cfg_true(&attr);\n         if res {\n             // FIXME: `cfg(TRUE)` attributes do not currently remove themselves during expansion,\n             // and some tools like rustdoc and clippy rely on that. Find a way to remove them\n@@ -1696,7 +1699,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n \n     fn expand_cfg_attr(&self, node: &mut impl AstLike, attr: ast::Attribute, pos: usize) {\n         node.visit_attrs(|attrs| {\n-            attrs.splice(pos..pos, self.cfg.expand_cfg_attr(attr, false));\n+            attrs.splice(pos..pos, self.cfg().expand_cfg_attr(attr, false));\n         });\n     }\n \n@@ -1718,7 +1721,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                         continue;\n                     }\n                     _ => {\n-                        Node::pre_flat_map_node_collect_attr(&self.cfg, &attr);\n+                        Node::pre_flat_map_node_collect_attr(&self.cfg(), &attr);\n                         self.collect_attr((attr, pos, derives), node.to_annotatable(), Node::KIND)\n                             .make_ast::<Node>()\n                     }\n@@ -1882,7 +1885,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     fn visit_expr(&mut self, node: &mut P<ast::Expr>) {\n         // FIXME: Feature gating is performed inconsistently between `Expr` and `OptExpr`.\n         if let Some(attr) = node.attrs.first() {\n-            self.cfg.maybe_emit_expr_attr_err(attr);\n+            self.cfg().maybe_emit_expr_attr_err(attr);\n         }\n         self.visit_node(node)\n     }"}, {"sha": "3b51f8eb61c8e83a2397bfc794487329c132359e", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "patch": "@@ -2,6 +2,7 @@ use crate::interface::{Compiler, Result};\n use crate::proc_macro_decls;\n use crate::util;\n \n+use ast::CRATE_NODE_ID;\n use rustc_ast::mut_visit::MutVisitor;\n use rustc_ast::{self as ast, visit};\n use rustc_borrowck as mir_borrowck;\n@@ -188,7 +189,7 @@ pub fn register_plugins<'a>(\n         )\n     });\n \n-    let (krate, features) = rustc_expand::config::features(sess, krate);\n+    let (krate, features) = rustc_expand::config::features(sess, krate, CRATE_NODE_ID);\n     // these need to be set \"early\" so that expansion sees `quote` if enabled.\n     sess.init_features(features);\n "}, {"sha": "7cdcb6a4ab302604c30cb4fb95c1f1937cc56610", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "patch": "@@ -1,3 +1,4 @@\n+use rustc_ast::CRATE_NODE_ID;\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n@@ -21,7 +22,7 @@ crate fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLib> {\n \n crate fn relevant_lib(sess: &Session, lib: &NativeLib) -> bool {\n     match lib.cfg {\n-        Some(ref cfg) => attr::cfg_matches(cfg, &sess.parse_sess, None),\n+        Some(ref cfg) => attr::cfg_matches(cfg, &sess.parse_sess, CRATE_NODE_ID, None),\n         None => true,\n     }\n }"}, {"sha": "8016a4d190cc32477ee59dae83b5e0849ab56aed", "filename": "src/test/ui/check-cfg/allow-macro-cfg.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-macro-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-macro-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-macro-cfg.rs?ref=493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "patch": "@@ -0,0 +1,14 @@\n+// This test check that local #[allow(unexpected_cfgs)] works\n+//\n+// check-pass\n+// compile-flags:--check-cfg=names() -Z unstable-options\n+\n+#[allow(unexpected_cfgs)]\n+fn foo() {\n+    if cfg!(FALSE) {}\n+}\n+\n+fn main() {\n+    #[allow(unexpected_cfgs)]\n+    if cfg!(FALSE) {}\n+}"}, {"sha": "6c869dc420235e1bc1181cf9eec1d5766f4c7b29", "filename": "src/test/ui/check-cfg/allow-same-level.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-same-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-same-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-same-level.rs?ref=493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "patch": "@@ -0,0 +1,11 @@\n+// This test check that #[allow(unexpected_cfgs)] doesn't work if put on the same level\n+//\n+// check-pass\n+// compile-flags:--check-cfg=names() -Z unstable-options\n+\n+#[allow(unexpected_cfgs)]\n+#[cfg(FALSE)]\n+//~^ WARNING unexpected `cfg` condition name\n+fn bar() {}\n+\n+fn main() {}"}, {"sha": "7797de584b9e1f1354c0b829d0b4e6b3db29352b", "filename": "src/test/ui/check-cfg/allow-same-level.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-same-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-same-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-same-level.stderr?ref=493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "patch": "@@ -0,0 +1,10 @@\n+warning: unexpected `cfg` condition name\n+  --> $DIR/allow-same-level.rs:7:7\n+   |\n+LL | #[cfg(FALSE)]\n+   |       ^^^^^\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "d14b0eae5ccdd7c8caa680e6dffac5aa51d9e48c", "filename": "src/test/ui/check-cfg/allow-top-level.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-top-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-top-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-top-level.rs?ref=493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "patch": "@@ -0,0 +1,15 @@\n+// This test check that a top-level #![allow(unexpected_cfgs)] works\n+//\n+// check-pass\n+// compile-flags:--check-cfg=names() -Z unstable-options\n+\n+#![allow(unexpected_cfgs)]\n+\n+#[cfg(FALSE)]\n+fn bar() {}\n+\n+fn foo() {\n+    if cfg!(FALSE) {}\n+}\n+\n+fn main() {}"}, {"sha": "04340694d9c1e333fc4af061966860d75502de30", "filename": "src/test/ui/check-cfg/allow-upper-level.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-upper-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493ed7a6af1dbd8fe06f70add0a6814f79f35f5c/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-upper-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fallow-upper-level.rs?ref=493ed7a6af1dbd8fe06f70add0a6814f79f35f5c", "patch": "@@ -0,0 +1,12 @@\n+// This test check that #[allow(unexpected_cfgs)] work if put on an upper level\n+//\n+// check-pass\n+// compile-flags:--check-cfg=names() -Z unstable-options\n+\n+#[allow(unexpected_cfgs)]\n+mod aa {\n+    #[cfg(FALSE)]\n+    fn bar() {}\n+}\n+\n+fn main() {}"}]}