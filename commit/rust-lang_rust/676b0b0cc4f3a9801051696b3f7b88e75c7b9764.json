{"sha": "676b0b0cc4f3a9801051696b3f7b88e75c7b9764", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NmIwYjBjYzRmM2E5ODAxMDUxNjk2YjNmN2I4OGU3NWM3Yjk3NjQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-01-05T15:56:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-05T15:56:58Z"}, "message": "Rollup merge of #57313 - Nemo157:box-to-pin, r=cramertj\n\nImprove Box<T> -> Pin<Box<T>> conversion\n\nI found the `From` trait conversion for this very hard to find, having a named function for it is much more discoverable. Also fixes #56256 as I need that in the place I'm using this.\n\nHas a placeholder tracking issue, will file an issue once I get feedback.", "tree": {"sha": "15fda102a08490d9be9ef401bab9a841e4a5fb7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15fda102a08490d9be9ef401bab9a841e4a5fb7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/676b0b0cc4f3a9801051696b3f7b88e75c7b9764", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcMNPKCRBK7hj4Ov3rIwAAdHIIADVCQOYoNVe5AmfGTpf/KGj/\ntL+JLezfF+UJr84/0bZJcF18HjCulm9h+fu9IyfbTk6/vpdM7afxMmIvLZ7b3Wn9\nPEmlCTxyrTv9zi0ggagCz6L2DHjSHLOkCNBXuZkGWyMbX1LpJpv3WLc7MUnxHB7A\nZPiOBYPgw80gKE1spHH1zCSbOJ52Ld2eebO0jay61nIgdka1f1aNbQcjJnVUHHWy\nHKQqN9dxYNo13XeDdn57N9RksetfPHKKFEwfVSAUdka9YpP9jYKA2zpFsV934TBq\nF2zOFvVjwhAxXmOnUSGGqpzG7sIYVg9S+LQLrHVO2uoVzpGCnjZ5hFxYFAlo5wg=\n=ajAE\n-----END PGP SIGNATURE-----\n", "payload": "tree 15fda102a08490d9be9ef401bab9a841e4a5fb7c\nparent e1a1ab08361213e545136c51c52144acff1678d0\nparent d1a42ea8d05b00a3b05f35531c8c78e8c7c6bde9\nauthor kennytm <kennytm@gmail.com> 1546703818 +0800\ncommitter GitHub <noreply@github.com> 1546703818 +0800\n\nRollup merge of #57313 - Nemo157:box-to-pin, r=cramertj\n\nImprove Box<T> -> Pin<Box<T>> conversion\n\nI found the `From` trait conversion for this very hard to find, having a named function for it is much more discoverable. Also fixes #56256 as I need that in the place I'm using this.\n\nHas a placeholder tracking issue, will file an issue once I get feedback.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/676b0b0cc4f3a9801051696b3f7b88e75c7b9764", "html_url": "https://github.com/rust-lang/rust/commit/676b0b0cc4f3a9801051696b3f7b88e75c7b9764", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/676b0b0cc4f3a9801051696b3f7b88e75c7b9764/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1a1ab08361213e545136c51c52144acff1678d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a1ab08361213e545136c51c52144acff1678d0", "html_url": "https://github.com/rust-lang/rust/commit/e1a1ab08361213e545136c51c52144acff1678d0"}, {"sha": "d1a42ea8d05b00a3b05f35531c8c78e8c7c6bde9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a42ea8d05b00a3b05f35531c8c78e8c7c6bde9", "html_url": "https://github.com/rust-lang/rust/commit/d1a42ea8d05b00a3b05f35531c8c78e8c7c6bde9"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "1c459f5c4250e462c63d86d094b0d21f2e8b5e21", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/676b0b0cc4f3a9801051696b3f7b88e75c7b9764/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/676b0b0cc4f3a9801051696b3f7b88e75c7b9764/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=676b0b0cc4f3a9801051696b3f7b88e75c7b9764", "patch": "@@ -257,6 +257,19 @@ impl<T: ?Sized> Box<T> {\n     {\n         unsafe { &mut *Box::into_raw(b) }\n     }\n+\n+    /// Converts a `Box<T>` into a `Pin<Box<T>>`\n+    ///\n+    /// This conversion does not allocate on the heap and happens in place.\n+    ///\n+    /// This is also available via [`From`].\n+    #[unstable(feature = \"box_into_pin\", issue = \"0\")]\n+    pub fn into_pin(boxed: Box<T>) -> Pin<Box<T>> {\n+        // It's not possible to move or replace the insides of a `Pin<Box<T>>`\n+        // when `T: !Unpin`,  so it's safe to pin it directly without any\n+        // additional requirements.\n+        unsafe { Pin::new_unchecked(boxed) }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -451,15 +464,12 @@ impl<T> From<T> for Box<T> {\n }\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<T> From<Box<T>> for Pin<Box<T>> {\n+impl<T: ?Sized> From<Box<T>> for Pin<Box<T>> {\n     /// Converts a `Box<T>` into a `Pin<Box<T>>`\n     ///\n     /// This conversion does not allocate on the heap and happens in place.\n     fn from(boxed: Box<T>) -> Self {\n-        // It's not possible to move or replace the insides of a `Pin<Box<T>>`\n-        // when `T: !Unpin`,  so it's safe to pin it directly without any\n-        // additional requirements.\n-        unsafe { Pin::new_unchecked(boxed) }\n+        Box::into_pin(boxed)\n     }\n }\n "}]}