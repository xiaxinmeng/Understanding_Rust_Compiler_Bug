{"sha": "c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "node_id": "C_kwDOAAsO6NoAKGMzNjA1ZjhjODAyMGRiYmU4ZjBkMTk2MWM3YjMzYzRjNGI3OGFkMGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-15T14:21:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-15T14:21:28Z"}, "message": "Auto merge of #95897 - AzureMarker:feature/horizon-std, r=nagisa\n\nSTD support for the Nintendo 3DS\n\nRustc already supports compiling for the Nintendo 3DS using the `armv6k-nintendo-3ds` target (Tier 3). Until now though, only `core` and `alloc` were supported. This PR adds standard library support for the Nintendo 3DS. A notable exclusion is `std::thread` support, which will come in a follow-up PR as it requires more complicated changes.\n\nThis has been a joint effort by `@Meziu,` `@ian-h-chamberlain,` myself, and prior work by `@rust3ds` members.\n\n### Background\n\nThe Nintendo 3DS (Horizon OS) is a mostly-UNIX looking system, with the caveat that it does not come with a full libc implementation out of the box. On the homebrew side (I'm not under NDA), the libc interface is partially implemented by the [devkitPro](https://devkitpro.org/wiki/devkitPro_pacman) toolchain and a user library like [`libctru`](https://github.com/devkitPro/libctru). This is important because there are [some possible legal barriers](https://github.com/rust-lang/rust/pull/88529#issuecomment-919938396) to linking directly to a library that uses the underlying platform APIs, since they might be considered a trade secret or under NDA.\n\nTo get around this, the standard library impl for the 3DS does not directly depend on any platform-level APIs. Instead, it expects standard libc functions to be linked in. The implementation of these libc functions is left to the user. Some functions are provided by the devkitPro toolchain, but in our testing, we used the following to fill in the other functions:\n- [`libctru`] - provides more basic APIs, such as `nanosleep`. Linked in by way of [`ctru-sys`](https://github.com/Meziu/ctru-rs/tree/master/ctru-sys).\n- [`pthread-3ds`](https://github.com/Meziu/pthread-3ds) - provides pthread APIs for `std::thread`. Implemented using [`libctru`].\n- [`linker-fix-3ds`](https://github.com/Meziu/rust-linker-fix-3ds) - fulfills some other missing libc APIs. Implemented using [`libctru`].\n\nFor more details, see the `src/doc/rustc/src/platform-support/armv6k-nintendo-3ds.md` file added in this PR.\n\n### Notes\nWe've already upstreamed changes to the [`libc`] crate to support this PR, as well as the upcoming threading PR. These changes have all been released as of 0.2.121, so we bump the crate version in this PR.\nEdit: After some rebases, the version bump has already been merged so it doesn't appear in this PR.\n\nA lot of the changes in this PR are straightforward, and follow in the footsteps of the ESP-IDF target: https://github.com/rust-lang/rust/pull/87666.\n\nThe 3DS does not support user space process spawning, so these APIs are unimplemented (similar to ESP-IDF).\n\n[`libctru`]: https://github.com/devkitPro/libctru\n[`libc`]: https://github.com/rust-lang/libc", "tree": {"sha": "9c69ec553ce9679b117c2fdf6cbdbe66512b7fc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c69ec553ce9679b117c2fdf6cbdbe66512b7fc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "html_url": "https://github.com/rust-lang/rust/commit/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4cec9742b7e05c33c84cd75002cd56762f7e33b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cec9742b7e05c33c84cd75002cd56762f7e33b", "html_url": "https://github.com/rust-lang/rust/commit/a4cec9742b7e05c33c84cd75002cd56762f7e33b"}, {"sha": "c814f842e46de25c95e08551a29f06ede1880a47", "url": "https://api.github.com/repos/rust-lang/rust/commits/c814f842e46de25c95e08551a29f06ede1880a47", "html_url": "https://github.com/rust-lang/rust/commit/c814f842e46de25c95e08551a29f06ede1880a47"}], "stats": {"total": 526, "additions": 437, "deletions": 89}, "files": [{"sha": "67df73fa935911418e4fe705177aa2b5f479b8f7", "filename": "compiler/rustc_target/src/spec/armv6k_nintendo_3ds.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -37,7 +37,8 @@ pub fn target() -> Target {\n             pre_link_args,\n             exe_suffix: \".elf\".into(),\n             no_default_libraries: false,\n-            has_thread_local: true,\n+            // There are some issues in debug builds with this enabled in certain programs.\n+            has_thread_local: false,\n             ..Default::default()\n         },\n     }"}, {"sha": "93cdf121fbe0f742a7c7270c2f5e6c36f1f7de01", "filename": "library/core/src/ffi/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -143,7 +143,8 @@ mod c_char_definition {\n                     target_arch = \"powerpc\"\n                 )\n             ),\n-            all(target_os = \"fuchsia\", target_arch = \"aarch64\")\n+            all(target_os = \"fuchsia\", target_arch = \"aarch64\"),\n+            target_os = \"horizon\"\n         ))] {\n             pub type c_char = u8;\n             pub type NonZero_c_char = crate::num::NonZeroU8;"}, {"sha": "bffbe802fd01e864ca2e3c476c85f04abc6a1421", "filename": "library/std/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -29,6 +29,7 @@ fn main() {\n         || target.contains(\"asmjs\")\n         || target.contains(\"espidf\")\n         || target.contains(\"solid\")\n+        || target.contains(\"nintendo-3ds\")\n     {\n         // These platforms don't have any special requirements.\n     } else {"}, {"sha": "1325522105dc8f61df1c8bd3e3b60837e3b03383", "filename": "library/std/src/os/horizon/fs.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Ffs.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -0,0 +1,95 @@\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n+\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: crate::fs::Metadata\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atim.tv_sec\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atim.tv_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtim.tv_sec\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtim.tv_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctim.tv_sec\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctim.tv_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}"}, {"sha": "326d0ae9cb96d2ee564e83e11a8d96aa2fe871f1", "filename": "library/std/src/os/horizon/mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Fmod.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -0,0 +1,6 @@\n+//! Definitions for Horizon OS\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+pub mod fs;\n+pub(crate) mod raw;"}, {"sha": "929fa7db1f964128c611763cfa82c0b39606d944", "filename": "library/std/src/os/horizon/raw.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhorizon%2Fraw.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -0,0 +1,70 @@\n+//! Horizon OS raw type definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![deprecated(\n+    since = \"1.8.0\",\n+    note = \"these type aliases are no longer supported by \\\n+            the standard library, the `libc` crate on \\\n+            crates.io should be used instead for the correct \\\n+            definitions\"\n+)]\n+#![allow(deprecated)]\n+\n+use crate::os::raw::c_long;\n+use crate::os::unix::raw::{gid_t, uid_t};\n+\n+#[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n+pub type pthread_t = libc::pthread_t;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = libc::blkcnt_t;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = libc::blksize_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = libc::dev_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = libc::ino_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = libc::mode_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = libc::nlink_t;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = libc::off_t;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = libc::time_t;\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blocks: blkcnt_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_spare4: [c_long; 2usize],\n+}"}, {"sha": "a1df72a8a0480e7094e70ae7a9b0f7d94e320a6f", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -123,6 +123,8 @@ pub mod freebsd;\n pub mod fuchsia;\n #[cfg(target_os = \"haiku\")]\n pub mod haiku;\n+#[cfg(target_os = \"horizon\")]\n+pub mod horizon;\n #[cfg(target_os = \"illumos\")]\n pub mod illumos;\n #[cfg(target_os = \"ios\")]"}, {"sha": "cef546487f327e8edb18653a1a1634ea075d34de", "filename": "library/std/src/os/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -51,6 +51,8 @@ mod platform {\n     pub use crate::os::fuchsia::*;\n     #[cfg(target_os = \"haiku\")]\n     pub use crate::os::haiku::*;\n+    #[cfg(target_os = \"horizon\")]\n+    pub use crate::os::horizon::*;\n     #[cfg(target_os = \"illumos\")]\n     pub use crate::os::illumos::*;\n     #[cfg(target_os = \"ios\")]"}, {"sha": "5065530e8d4d003b8e373aed9ba4bcfa5e7a0ff1", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 16, "deletions": 30, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -12,6 +12,16 @@ use crate::sealed::Sealed;\n use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n+#[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n+type UserId = u32;\n+#[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n+type GroupId = u32;\n+\n+#[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))]\n+type UserId = u16;\n+#[cfg(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\"))]\n+type GroupId = u16;\n+\n /// Unix-specific extensions to the [`process::Command`] builder.\n ///\n /// This trait is sealed: it cannot be implemented outside the standard library.\n@@ -22,29 +32,17 @@ pub trait CommandExt: Sealed {\n     /// `setuid` call in the child process. Failure in the `setuid`\n     /// call will cause the spawn to fail.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn uid(\n-        &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] id: u32,\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] id: u16,\n-    ) -> &mut process::Command;\n+    fn uid(&mut self, id: UserId) -> &mut process::Command;\n \n     /// Similar to `uid`, but sets the group ID of the child process. This has\n     /// the same semantics as the `uid` field.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn gid(\n-        &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] id: u32,\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] id: u16,\n-    ) -> &mut process::Command;\n+    fn gid(&mut self, id: GroupId) -> &mut process::Command;\n \n     /// Sets the supplementary group IDs for the calling process. Translates to\n     /// a `setgroups` call in the child process.\n     #[unstable(feature = \"setgroups\", issue = \"90747\")]\n-    fn groups(\n-        &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] groups: &[u32],\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] groups: &[u16],\n-    ) -> &mut process::Command;\n+    fn groups(&mut self, groups: &[GroupId]) -> &mut process::Command;\n \n     /// Schedules a closure to be run just before the `exec` function is\n     /// invoked.\n@@ -158,29 +156,17 @@ pub trait CommandExt: Sealed {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl CommandExt for process::Command {\n-    fn uid(\n-        &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] id: u32,\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] id: u16,\n-    ) -> &mut process::Command {\n+    fn uid(&mut self, id: UserId) -> &mut process::Command {\n         self.as_inner_mut().uid(id);\n         self\n     }\n \n-    fn gid(\n-        &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] id: u32,\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] id: u16,\n-    ) -> &mut process::Command {\n+    fn gid(&mut self, id: GroupId) -> &mut process::Command {\n         self.as_inner_mut().gid(id);\n         self\n     }\n \n-    fn groups(\n-        &mut self,\n-        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] groups: &[u32],\n-        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] groups: &[u16],\n-    ) -> &mut process::Command {\n+    fn groups(&mut self, groups: &[GroupId]) -> &mut process::Command {\n         self.as_inner_mut().groups(groups);\n         self\n     }"}, {"sha": "9d6567c9fb471f381b5c95aab6ea5efedb014775", "filename": "library/std/src/sys/unix/alloc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Falloc.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -58,7 +58,8 @@ cfg_if::cfg_if! {\n         target_os = \"illumos\",\n         target_os = \"redox\",\n         target_os = \"solaris\",\n-        target_os = \"espidf\"\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n     ))] {\n         #[inline]\n         unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {"}, {"sha": "79964e2b2385fd24a732b551786682981846c4fe", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -68,7 +68,8 @@ impl DoubleEndedIterator for Args {\n     target_os = \"l4re\",\n     target_os = \"fuchsia\",\n     target_os = \"redox\",\n-    target_os = \"vxworks\"\n+    target_os = \"vxworks\",\n+    target_os = \"horizon\"\n ))]\n mod imp {\n     use super::Args;"}, {"sha": "4d8391656a4dd6f1bd601875d067c1a5faa46b28", "filename": "library/std/src/sys/unix/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -119,6 +119,17 @@ pub mod os {\n     pub const EXE_EXTENSION: &str = \"\";\n }\n \n+#[cfg(target_os = \"horizon\")]\n+pub mod os {\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"horizon\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \".elf\";\n+    pub const EXE_EXTENSION: &str = \"elf\";\n+}\n+\n #[cfg(all(target_os = \"emscripten\", target_arch = \"asmjs\"))]\n pub mod os {\n     pub const FAMILY: &str = \"unix\";"}, {"sha": "137ca3a763368dd92ab9204c39c534aed3a59754", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -9,8 +9,6 @@ use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, Owned\n use crate::sys::cvt;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n-use libc::{c_int, c_void};\n-\n #[cfg(any(\n     target_os = \"android\",\n     target_os = \"linux\",\n@@ -38,7 +36,7 @@ pub struct FileDesc(OwnedFd);\n // larger than or equal to INT_MAX. To handle both of these the read\n // size is capped on both platforms.\n #[cfg(target_os = \"macos\")]\n-const READ_LIMIT: usize = c_int::MAX as usize - 1;\n+const READ_LIMIT: usize = libc::c_int::MAX as usize - 1;\n #[cfg(not(target_os = \"macos\"))]\n const READ_LIMIT: usize = libc::ssize_t::MAX as usize;\n \n@@ -69,6 +67,7 @@ const fn max_iov() -> usize {\n     target_os = \"macos\",\n     target_os = \"netbsd\",\n     target_os = \"openbsd\",\n+    target_os = \"horizon\"\n )))]\n const fn max_iov() -> usize {\n     16 // The minimum value required by POSIX.\n@@ -79,33 +78,33 @@ impl FileDesc {\n         let ret = cvt(unsafe {\n             libc::read(\n                 self.as_raw_fd(),\n-                buf.as_mut_ptr() as *mut c_void,\n+                buf.as_mut_ptr() as *mut libc::c_void,\n                 cmp::min(buf.len(), READ_LIMIT),\n             )\n         })?;\n         Ok(ret as usize)\n     }\n \n-    #[cfg(not(target_os = \"espidf\"))]\n+    #[cfg(not(any(target_os = \"espidf\", target_os = \"horizon\")))]\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n             libc::readv(\n                 self.as_raw_fd(),\n                 bufs.as_ptr() as *const libc::iovec,\n-                cmp::min(bufs.len(), max_iov()) as c_int,\n+                cmp::min(bufs.len(), max_iov()) as libc::c_int,\n             )\n         })?;\n         Ok(ret as usize)\n     }\n \n-    #[cfg(target_os = \"espidf\")]\n+    #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         return crate::io::default_read_vectored(|b| self.read(b), bufs);\n     }\n \n     #[inline]\n     pub fn is_read_vectored(&self) -> bool {\n-        cfg!(not(target_os = \"espidf\"))\n+        cfg!(not(any(target_os = \"espidf\", target_os = \"horizon\")))\n     }\n \n     pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n@@ -122,7 +121,7 @@ impl FileDesc {\n         unsafe {\n             cvt(pread64(\n                 self.as_raw_fd(),\n-                buf.as_mut_ptr() as *mut c_void,\n+                buf.as_mut_ptr() as *mut libc::c_void,\n                 cmp::min(buf.len(), READ_LIMIT),\n                 offset as off64_t,\n             ))\n@@ -134,7 +133,7 @@ impl FileDesc {\n         let ret = cvt(unsafe {\n             libc::read(\n                 self.as_raw_fd(),\n-                buf.unfilled_mut().as_mut_ptr() as *mut c_void,\n+                buf.unfilled_mut().as_mut_ptr() as *mut libc::c_void,\n                 cmp::min(buf.remaining(), READ_LIMIT),\n             )\n         })?;\n@@ -151,33 +150,33 @@ impl FileDesc {\n         let ret = cvt(unsafe {\n             libc::write(\n                 self.as_raw_fd(),\n-                buf.as_ptr() as *const c_void,\n+                buf.as_ptr() as *const libc::c_void,\n                 cmp::min(buf.len(), READ_LIMIT),\n             )\n         })?;\n         Ok(ret as usize)\n     }\n \n-    #[cfg(not(target_os = \"espidf\"))]\n+    #[cfg(not(any(target_os = \"espidf\", target_os = \"horizon\")))]\n     pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n             libc::writev(\n                 self.as_raw_fd(),\n                 bufs.as_ptr() as *const libc::iovec,\n-                cmp::min(bufs.len(), max_iov()) as c_int,\n+                cmp::min(bufs.len(), max_iov()) as libc::c_int,\n             )\n         })?;\n         Ok(ret as usize)\n     }\n \n-    #[cfg(target_os = \"espidf\")]\n+    #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n     pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         return crate::io::default_write_vectored(|b| self.write(b), bufs);\n     }\n \n     #[inline]\n     pub fn is_write_vectored(&self) -> bool {\n-        cfg!(not(target_os = \"espidf\"))\n+        cfg!(not(any(target_os = \"espidf\", target_os = \"horizon\")))\n     }\n \n     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n@@ -189,7 +188,7 @@ impl FileDesc {\n         unsafe {\n             cvt(pwrite64(\n                 self.as_raw_fd(),\n-                buf.as_ptr() as *const c_void,\n+                buf.as_ptr() as *const libc::c_void,\n                 cmp::min(buf.len(), READ_LIMIT),\n                 offset as off64_t,\n             ))\n@@ -221,7 +220,7 @@ impl FileDesc {\n         }\n     }\n     #[cfg(any(\n-        all(target_env = \"newlib\", not(target_os = \"espidf\")),\n+        all(target_env = \"newlib\", not(any(target_os = \"espidf\", target_os = \"horizon\"))),\n         target_os = \"solaris\",\n         target_os = \"illumos\",\n         target_os = \"emscripten\",\n@@ -242,17 +241,17 @@ impl FileDesc {\n             Ok(())\n         }\n     }\n-    #[cfg(target_os = \"espidf\")]\n+    #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n     pub fn set_cloexec(&self) -> io::Result<()> {\n-        // FD_CLOEXEC is not supported in ESP-IDF but there's no need to,\n-        // because ESP-IDF does not support spawning processes either.\n+        // FD_CLOEXEC is not supported in ESP-IDF and Horizon OS but there's no need to,\n+        // because neither supports spawning processes.\n         Ok(())\n     }\n \n     #[cfg(target_os = \"linux\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         unsafe {\n-            let v = nonblocking as c_int;\n+            let v = nonblocking as libc::c_int;\n             cvt(libc::ioctl(self.as_raw_fd(), libc::FIONBIO, &v))?;\n             Ok(())\n         }"}, {"sha": "8b0bbd6a55c6bb2e7e8d4aebbb5a1f7509d8f842", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -395,7 +395,7 @@ impl FileAttr {\n \n #[cfg(not(target_os = \"netbsd\"))]\n impl FileAttr {\n-    #[cfg(all(not(target_os = \"vxworks\"), not(target_os = \"espidf\")))]\n+    #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n     pub fn modified(&self) -> io::Result<SystemTime> {\n         #[cfg(target_pointer_width = \"32\")]\n         cfg_has_statx! {\n@@ -412,7 +412,12 @@ impl FileAttr {\n         Ok(SystemTime::new(self.stat.st_mtime as i64, 0))\n     }\n \n-    #[cfg(all(not(target_os = \"vxworks\"), not(target_os = \"espidf\")))]\n+    #[cfg(target_os = \"horizon\")]\n+    pub fn modified(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::from(self.stat.st_mtim))\n+    }\n+\n+    #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\", target_os = \"horizon\")))]\n     pub fn accessed(&self) -> io::Result<SystemTime> {\n         #[cfg(target_pointer_width = \"32\")]\n         cfg_has_statx! {\n@@ -429,6 +434,11 @@ impl FileAttr {\n         Ok(SystemTime::new(self.stat.st_atime as i64, 0))\n     }\n \n+    #[cfg(target_os = \"horizon\")]\n+    pub fn accessed(&self) -> io::Result<SystemTime> {\n+        Ok(SystemTime::from(self.stat.st_atim))\n+    }\n+\n     #[cfg(any(\n         target_os = \"freebsd\",\n         target_os = \"openbsd\",\n@@ -707,7 +717,8 @@ impl DirEntry {\n         target_os = \"fuchsia\",\n         target_os = \"redox\",\n         target_os = \"vxworks\",\n-        target_os = \"espidf\"\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n     ))]\n     pub fn ino(&self) -> u64 {\n         self.entry.d_ino as u64\n@@ -1251,7 +1262,7 @@ pub fn link(original: &Path, link: &Path) -> io::Result<()> {\n     let original = cstr(original)?;\n     let link = cstr(link)?;\n     cfg_if::cfg_if! {\n-        if #[cfg(any(target_os = \"vxworks\", target_os = \"redox\", target_os = \"android\", target_os = \"espidf\"))] {\n+        if #[cfg(any(target_os = \"vxworks\", target_os = \"redox\", target_os = \"android\", target_os = \"espidf\", target_os = \"horizon\"))] {\n             // VxWorks, Redox and ESP-IDF lack `linkat`, so use `link` instead. POSIX leaves\n             // it implementation-defined whether `link` follows symlinks, so rely on the\n             // `symlink_hard_link` test in library/std/src/fs/tests.rs to check the behavior.\n@@ -1549,14 +1560,14 @@ pub fn chroot(dir: &Path) -> io::Result<()> {\n \n pub use remove_dir_impl::remove_dir_all;\n \n-// Fallback for REDOX and ESP-IDF (and Miri)\n-#[cfg(any(target_os = \"redox\", target_os = \"espidf\", miri))]\n+// Fallback for REDOX, ESP-ID, Horizon, and Miri\n+#[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\", miri))]\n mod remove_dir_impl {\n     pub use crate::sys_common::fs::remove_dir_all;\n }\n \n // Modern implementation using openat(), unlinkat() and fdopendir()\n-#[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", miri)))]\n+#[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\", miri)))]\n mod remove_dir_impl {\n     use super::{cstr, lstat, Dir, DirEntry, InnerReadDir, ReadDir};\n     use crate::ffi::CStr;"}, {"sha": "78f10f0534c031f8079c7236e9cc1a4f8db72dd2", "filename": "library/std/src/sys/unix/locks/pthread_condvar.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -47,7 +47,9 @@ impl Condvar {\n     // So on that platform, init() should always be called\n     // Moreover, that platform does not have pthread_condattr_setclock support,\n     // hence that initialization should be skipped as well\n-    #[cfg(target_os = \"espidf\")]\n+    //\n+    // Similar story for the 3DS (horizon).\n+    #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n     unsafe fn init(&mut self) {\n         let r = libc::pthread_cond_init(self.inner.get(), crate::ptr::null());\n         assert_eq!(r, 0);\n@@ -59,7 +61,8 @@ impl Condvar {\n         target_os = \"l4re\",\n         target_os = \"android\",\n         target_os = \"redox\",\n-        target_os = \"espidf\"\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n     )))]\n     unsafe fn init(&mut self) {\n         use crate::mem::MaybeUninit;\n@@ -100,7 +103,8 @@ impl Condvar {\n         target_os = \"macos\",\n         target_os = \"ios\",\n         target_os = \"android\",\n-        target_os = \"espidf\"\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n     )))]\n     pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {\n         use crate::mem;\n@@ -132,7 +136,8 @@ impl Condvar {\n         target_os = \"macos\",\n         target_os = \"ios\",\n         target_os = \"android\",\n-        target_os = \"espidf\"\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n     ))]\n     pub unsafe fn wait_timeout(&self, mutex: &Mutex, mut dur: Duration) -> bool {\n         use crate::ptr;"}, {"sha": "34a023b02c4fe74e4ed5abd41a5a0cfaf997b6a9", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -88,6 +88,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n             target_os = \"ios\",\n             target_os = \"redox\",\n             target_os = \"l4re\",\n+            target_os = \"horizon\",\n         )))]\n         'poll: {\n             use crate::sys::os::errno;\n@@ -131,6 +132,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n             target_os = \"fuchsia\",\n             target_os = \"vxworks\",\n             target_os = \"l4re\",\n+            target_os = \"horizon\",\n         )))]\n         {\n             use crate::sys::os::errno;\n@@ -149,7 +151,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n     }\n \n     unsafe fn reset_sigpipe() {\n-        #[cfg(not(any(target_os = \"emscripten\", target_os = \"fuchsia\")))]\n+        #[cfg(not(any(target_os = \"emscripten\", target_os = \"fuchsia\", target_os = \"horizon\")))]\n         rtassert!(signal(libc::SIGPIPE, libc::SIG_IGN) != libc::SIG_ERR);\n     }\n }\n@@ -344,7 +346,7 @@ cfg_if::cfg_if! {\n     }\n }\n \n-#[cfg(target_os = \"espidf\")]\n+#[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n mod unsupported {\n     use crate::io;\n "}, {"sha": "7252ad321844bd3b72c3e033cbe87b093f4c7e2e", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -446,7 +446,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     path.canonicalize()\n }\n \n-#[cfg(target_os = \"espidf\")]\n+#[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     super::unsupported::unsupported()\n }\n@@ -601,7 +601,8 @@ pub fn home_dir() -> Option<PathBuf> {\n         target_os = \"emscripten\",\n         target_os = \"redox\",\n         target_os = \"vxworks\",\n-        target_os = \"espidf\"\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n     ))]\n     unsafe fn fallback() -> Option<OsString> {\n         None\n@@ -612,7 +613,8 @@ pub fn home_dir() -> Option<PathBuf> {\n         target_os = \"emscripten\",\n         target_os = \"redox\",\n         target_os = \"vxworks\",\n-        target_os = \"espidf\"\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n     )))]\n     unsafe fn fallback() -> Option<OsString> {\n         let amt = match libc::sysconf(libc::_SC_GETPW_R_SIZE_MAX) {"}, {"sha": "3701510f3a4283aef35351c2b15683ae09c56de8", "filename": "library/std/src/sys/unix/process/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -3,6 +3,7 @@ pub use self::process_inner::{ExitStatus, ExitStatusError, Process};\n pub use crate::ffi::OsString as EnvKey;\n pub use crate::sys_common::process::CommandEnvs;\n \n+#[cfg_attr(any(target_os = \"espidf\", target_os = \"horizon\"), allow(unused))]\n mod process_common;\n \n cfg_if::cfg_if! {\n@@ -13,7 +14,7 @@ cfg_if::cfg_if! {\n     } else if #[cfg(target_os = \"vxworks\")] {\n         #[path = \"process_vxworks.rs\"]\n         mod process_inner;\n-    } else if #[cfg(target_os = \"espidf\")] {\n+    } else if #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))] {\n         #[path = \"process_unsupported.rs\"]\n         mod process_inner;\n     } else {"}, {"sha": "72f9f3f9ca74c0371427c67df9a337f1fe603db4", "filename": "library/std/src/sys/unix/process/process_unsupported.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -1,10 +1,6 @@\n use crate::fmt;\n use crate::io;\n-use crate::io::ErrorKind;\n use crate::num::NonZeroI32;\n-use crate::sys;\n-use crate::sys::cvt;\n-use crate::sys::pipe::AnonPipe;\n use crate::sys::process::process_common::*;\n use crate::sys::unix::unsupported::*;\n use core::ffi::NonZero_c_int;\n@@ -18,13 +14,13 @@ use libc::{c_int, pid_t};\n impl Command {\n     pub fn spawn(\n         &mut self,\n-        default: Stdio,\n-        needs_stdin: bool,\n+        _default: Stdio,\n+        _needs_stdin: bool,\n     ) -> io::Result<(Process, StdioPipes)> {\n         unsupported()\n     }\n \n-    pub fn exec(&mut self, default: Stdio) -> io::Error {\n+    pub fn exec(&mut self, _default: Stdio) -> io::Error {\n         unsupported_err()\n     }\n }\n@@ -34,7 +30,7 @@ impl Command {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct Process {\n-    handle: pid_t,\n+    _handle: pid_t,\n }\n \n impl Process {\n@@ -59,6 +55,7 @@ impl Process {\n pub struct ExitStatus(c_int);\n \n impl ExitStatus {\n+    #[cfg_attr(target_os = \"horizon\", allow(unused))]\n     pub fn success(&self) -> bool {\n         self.code() == Some(0)\n     }"}, {"sha": "56d01074c20edc69626e012367107b4d2544e33f", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -59,17 +59,27 @@ mod imp {\n         unsafe { getrandom(buf.as_mut_ptr().cast(), buf.len(), libc::GRND_NONBLOCK) }\n     }\n \n-    #[cfg(target_os = \"espidf\")]\n+    #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n     fn getrandom(buf: &mut [u8]) -> libc::ssize_t {\n         unsafe { libc::getrandom(buf.as_mut_ptr().cast(), buf.len(), 0) }\n     }\n \n-    #[cfg(not(any(target_os = \"linux\", target_os = \"android\", target_os = \"espidf\")))]\n+    #[cfg(not(any(\n+        target_os = \"linux\",\n+        target_os = \"android\",\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n+    )))]\n     fn getrandom_fill_bytes(_buf: &mut [u8]) -> bool {\n         false\n     }\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"espidf\"))]\n+    #[cfg(any(\n+        target_os = \"linux\",\n+        target_os = \"android\",\n+        target_os = \"espidf\",\n+        target_os = \"horizon\"\n+    ))]\n     fn getrandom_fill_bytes(v: &mut [u8]) -> bool {\n         use crate::sync::atomic::{AtomicBool, Ordering};\n         use crate::sys::os::errno;"}, {"sha": "6e8be2a91de003a5f165ebfd7fda18a49a9c2f28", "filename": "library/std/src/sys/unix/thread_local_dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -93,7 +93,7 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n     }\n }\n \n-#[cfg(target_os = \"vxworks\")]\n+#[cfg(any(target_os = \"vxworks\", target_os = \"horizon\"))]\n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n     use crate::sys_common::thread_local_dtor::register_dtor_fallback;\n     register_dtor_fallback(t, dtor);"}, {"sha": "76278ae30f1af650475c0a0906f0e97f6e742600", "filename": "library/std/src/sys/unix/thread_parker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -115,7 +115,7 @@ impl Parker {\n                 target_os = \"redox\"\n             ))] {\n                 addr_of_mut!((*parker).cvar).write(UnsafeCell::new(libc::PTHREAD_COND_INITIALIZER));\n-            } else if #[cfg(target_os = \"espidf\")] {\n+            } else if #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))] {\n                 let r = libc::pthread_cond_init(addr_of_mut!((*parker).cvar).cast(), crate::ptr::null());\n                 assert_eq!(r, 0);\n             } else {"}, {"sha": "d114af49d26c7154537ea0d53f9ca8041297308d", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -18,6 +18,7 @@ pub(in crate::sys::unix) struct Timespec {\n }\n \n impl SystemTime {\n+    #[cfg_attr(target_os = \"horizon\", allow(unused))]\n     pub fn new(tv_sec: i64, tv_nsec: i64) -> SystemTime {\n         SystemTime { t: Timespec::new(tv_sec, tv_nsec) }\n     }\n@@ -303,9 +304,9 @@ mod inner {\n         }\n     }\n \n-    #[cfg(not(any(target_os = \"dragonfly\", target_os = \"espidf\")))]\n+    #[cfg(not(any(target_os = \"dragonfly\", target_os = \"espidf\", target_os = \"horizon\")))]\n     pub type clock_t = libc::c_int;\n-    #[cfg(any(target_os = \"dragonfly\", target_os = \"espidf\"))]\n+    #[cfg(any(target_os = \"dragonfly\", target_os = \"espidf\", target_os = \"horizon\"))]\n     pub type clock_t = libc::c_ulong;\n \n     impl Timespec {"}, {"sha": "f5730a2cea52b5b4c469428f8fe156990b66c9bc", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -398,8 +398,20 @@ impl TcpListener {\n         let (addrp, len) = addr.into_inner();\n         cvt(unsafe { c::bind(sock.as_raw(), addrp, len as _) })?;\n \n+        cfg_if::cfg_if! {\n+            if #[cfg(target_os = \"horizon\")] {\n+                // The 3DS doesn't support a big connection backlog. Sometimes\n+                // it allows up to about 37, but other times it doesn't even\n+                // accept 32. There may be a global limitation causing this.\n+                let backlog = 20;\n+            } else {\n+                // The default for all other platforms\n+                let backlog = 128;\n+            }\n+        }\n+\n         // Start listening\n-        cvt(unsafe { c::listen(sock.as_raw(), 128) })?;\n+        cvt(unsafe { c::listen(sock.as_raw(), backlog) })?;\n         Ok(TcpListener { inner: sock })\n     }\n "}, {"sha": "87dc513853968d3008187fad8a8c79e6a3d0dbd1", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -17,6 +17,7 @@\n     - [Template for Target-specific Documentation](platform-support/TEMPLATE.md)\n     - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n     - [\\*-apple-watchos\\*](platform-support/apple-watchos.md)\n+    - [armv6k-nintendo-3ds](platform-support/armv6k-nintendo-3ds.md)\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)"}, {"sha": "eb985803266e7e8a975f3d94db50a441a12606e5", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -226,7 +226,7 @@ target | std | host | notes\n `armv5te-unknown-linux-uclibceabi` | ? |  | ARMv5TE Linux with uClibc\n `armv6-unknown-freebsd` | \u2713 | \u2713 | ARMv6 FreeBSD\n `armv6-unknown-netbsd-eabihf` | ? |  |\n-`armv6k-nintendo-3ds` | * |  | ARMv6K Nintendo 3DS, Horizon (Requires devkitARM toolchain)\n+[`armv6k-nintendo-3ds`](platform-support/armv6k-nintendo-3ds.md) | ? |  | ARMv6K Nintendo 3DS, Horizon (Requires devkitARM toolchain)\n `armv7-apple-ios` | \u2713 |  | ARMv7 iOS, Cortex-a8\n [`armv7-unknown-linux-uclibceabi`](platform-support/armv7-unknown-linux-uclibceabi.md) | \u2713 | \u2713 | ARMv7 Linux with uClibc, softfloat\n [`armv7-unknown-linux-uclibceabihf`](platform-support/armv7-unknown-linux-uclibceabihf.md) | \u2713 | ? | ARMv7 Linux with uClibc, hardfloat"}, {"sha": "215290e389843d9279e5049c3269506ab1d4ac9f", "filename": "src/doc/rustc/src/platform-support/armv6k-nintendo-3ds.md", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv6k-nintendo-3ds.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv6k-nintendo-3ds.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv6k-nintendo-3ds.md?ref=c3605f8c8020dbbe8f0d1961c7b33c4c4b78ad0d", "patch": "@@ -0,0 +1,130 @@\n+# `armv6k-nintendo-3ds`\n+\n+**Tier: 3**\n+\n+The Nintendo 3DS platform, which has an ARMv6K processor, and its associated\n+operating system (`horizon`).\n+\n+Rust support for this target is not affiliated with Nintendo, and is not derived\n+from nor used with any official Nintendo SDK.\n+\n+## Target maintainers\n+\n+- [@Meziu](https://github.com/Meziu)\n+- [@AzureMarker](https://github.com/AzureMarker)\n+- [@ian-h-chamberlain](https://github.com/ian-h-chamberlain)\n+\n+## Requirements\n+\n+This target is cross-compiled. Dynamic linking is not supported.\n+\n+`#![no_std]` crates can be built using `build-std` to build `core` and optionally\n+`alloc`, and either `panic_abort` or `panic_unwind`.\n+\n+`std` is partially supported, but mostly works. Some APIs are unimplemented\n+and will simply return an error, such as `std::process`. An allocator is provided\n+by default.\n+\n+In order to support some APIs, binaries must be linked against `libc` written\n+for the target, using a linker for the target. These are provided by the\n+devkitARM toolchain. See\n+[Cross-compilation toolchains and C code](#cross-compilation-toolchains-and-c-code)\n+for more details.\n+\n+Additionally, some helper crates provide implementations of some `libc` functions\n+use by `std` that may otherwise be missing. These, or an alternate implementation\n+of the relevant functions, are required to use `std`:\n+\n+- [`pthread-3ds`](https://github.com/Meziu/pthread-3ds) provides pthread APIs for `std::thread`.\n+- [`linker-fix-3ds`](https://github.com/Meziu/rust-linker-fix-3ds) fulfills some other missing libc APIs.\n+\n+Binaries built for this target should be compatible with all variants of the\n+3DS (and 2DS) hardware and firmware, but testing is limited and some versions may\n+not work correctly.\n+\n+This target generates binaries in the ELF format.\n+\n+## Building the target\n+\n+You can build Rust with support for the target by adding it to the `target`\n+list in `config.toml` and providing paths to the devkitARM toolchain.\n+\n+```toml\n+[build]\n+build-stage = 1\n+target = [\"armv6k-nintendo-3ds\"]\n+\n+[target.armv6k-nintendo-3ds]\n+cc = \"/opt/devkitpro/devkitARM/bin/arm-none-eabi-gcc\"\n+cxx = \"/opt/devkitpro/devkitARM/bin/arm-none-eabi-g++\"\n+ar = \"/opt/devkitpro/devkitARM/bin/arm-none-eabi-ar\"\n+ranlib = \"/opt/devkitpro/devkitARM/bin/arm-none-eabi-ranlib\"\n+linker = \"/opt/devkitpro/devkitARM/bin/arm-none-eabi-gcc\"\n+```\n+\n+Also, to build `compiler_builtins` for the target, export these flags before\n+building the Rust toolchain:\n+\n+```sh\n+export CFLAGS_armv6k_nintendo_3ds=\"-mfloat-abi=hard -mtune=mpcore -mtp=soft -march=armv6k\"\n+```\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target.\n+\n+The recommended way to build binaries is by using the\n+[cargo-3ds](https://github.com/Meziu/cargo-3ds) tool, which uses `build-std`\n+and provides commands that work like the usual `cargo run`, `cargo build`, etc.\n+\n+You can also build Rust with the target enabled (see\n+[Building the target](#building-the-target) above).\n+\n+As mentioned in [Requirements](#requirements), programs that use `std` must link\n+against both the devkitARM toolchain and libraries providing the `libc` APIs used\n+in `std`.  There is a general-purpose utility crate for working with nonstandard\n+APIs provided by the OS: [`ctru-rs`](https://github.com/Meziu/ctru-rs).\n+Add it to Cargo.toml to use it in your program:\n+\n+```toml\n+[dependencies]\n+ctru-rs = { git = \"https://github.com/Meziu/ctru-rs.git\" }\n+```\n+\n+Using this library's `init()` function ensures the symbols needed to link\n+against `std` are present (as mentioned in [Requirements](#requirements)\n+above), as well as providing a runtime suitable for `std`:\n+\n+```rust,ignore (requires-3rd-party-library)\n+fn main() {\n+    ctru::init();\n+}\n+```\n+\n+## Testing\n+\n+Binaries built for this target can be run in an emulator (most commonly\n+[Citra](https://citra-emu.org/)), or sent to a device through\n+the use of a tool like devkitARM's `3dslink`. They may also simply be copied\n+to an SD card to be inserted in the device.\n+\n+The `cargo-3ds` tool mentioned in [Building Rust programs](#building-rust-programs)\n+supports the use of `3dslink` with `cargo 3ds run`. The default Rust test runner\n+is not supported, but\n+[custom test frameworks](https://doc.rust-lang.org/beta/unstable-book/language-features/custom-test-frameworks.html)\n+can be used with `cargo 3ds test` to run unit tests on a device.\n+\n+The Rust test suite for `library/std` is not yet supported.\n+\n+## Cross-compilation toolchains and C code\n+\n+C code can be built for this target using the\n+[devkitARM toolchain](https://devkitpro.org/wiki/Getting_Started).\n+This toolchain provides `arm-none-eabi-gcc` as the linker used to link Rust\n+programs as well.\n+\n+The toolchain also provides a `libc` implementation, which is required by `std`\n+for many of its APIs, and a helper library `libctru` which is used by several\n+of the helper crates listed in [Requirements](#requirements).\n+This toolchain does not, however, include all of the APIs expected by `std`,\n+and the remaining APIs are implemented by `pthread-3ds` and `linker-fix-3ds`."}]}