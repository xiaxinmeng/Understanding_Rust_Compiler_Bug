{"sha": "0117033c721d35ade8d815e1fbf83f10d73f15e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMTcwMzNjNzIxZDM1YWRlOGQ4MTVlMWZiZjgzZjEwZDczZjE1ZTQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-01-23T18:13:36Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-02T12:20:57Z"}, "message": "Add a resume type param to the generator substs\n\n...and unify it with `()` for now", "tree": {"sha": "0ecfe2676f555592edb7f133595ef9a8754e0b29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ecfe2676f555592edb7f133595ef9a8754e0b29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0117033c721d35ade8d815e1fbf83f10d73f15e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0117033c721d35ade8d815e1fbf83f10d73f15e4", "html_url": "https://github.com/rust-lang/rust/commit/0117033c721d35ade8d815e1fbf83f10d73f15e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0117033c721d35ade8d815e1fbf83f10d73f15e4/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "url": "https://api.github.com/repos/rust-lang/rust/commits/044fe0f558aa62926e6de9a76b95e4a74c0b1f99", "html_url": "https://github.com/rust-lang/rust/commit/044fe0f558aa62926e6de9a76b95e4a74c0b1f99"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "d28507f6eb2e3b28b5181025037cdc3640f534e8", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0117033c721d35ade8d815e1fbf83f10d73f15e4/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0117033c721d35ade8d815e1fbf83f10d73f15e4/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=0117033c721d35ade8d815e1fbf83f10d73f15e4", "patch": "@@ -744,6 +744,7 @@ where\n \n                 substs.as_generator().return_ty(def_id, self.tcx).visit_with(self);\n                 substs.as_generator().yield_ty(def_id, self.tcx).visit_with(self);\n+                substs.as_generator().resume_ty(def_id, self.tcx).visit_with(self);\n             }\n             _ => {\n                 ty.super_visit_with(self);"}, {"sha": "d4c3518260c602be532f9f99d24c0b6ae756db04", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0117033c721d35ade8d815e1fbf83f10d73f15e4/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0117033c721d35ade8d815e1fbf83f10d73f15e4/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=0117033c721d35ade8d815e1fbf83f10d73f15e4", "patch": "@@ -645,7 +645,7 @@ pub fn generator_trait_ref_and_outputs(\n ) -> ty::Binder<(ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n     let trait_ref = ty::TraitRef {\n         def_id: fn_trait_def_id,\n-        substs: tcx.mk_substs_trait(self_ty, &[tcx.mk_unit().into()]),\n+        substs: tcx.mk_substs_trait(self_ty, &[sig.skip_binder().resume_ty.into()]),\n     };\n     ty::Binder::bind((trait_ref, sig.skip_binder().yield_ty, sig.skip_binder().return_ty))\n }"}, {"sha": "9d00d27226320a2407a285c83a648ba419c11ce0", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0117033c721d35ade8d815e1fbf83f10d73f15e4/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0117033c721d35ade8d815e1fbf83f10d73f15e4/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=0117033c721d35ade8d815e1fbf83f10d73f15e4", "patch": "@@ -598,8 +598,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::AutoBorrow<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ty::GenSig<'a> {\n     type Lifted = ty::GenSig<'tcx>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&(self.yield_ty, self.return_ty))\n-            .map(|(yield_ty, return_ty)| ty::GenSig { yield_ty, return_ty })\n+        tcx.lift(&(self.resume_ty, self.yield_ty, self.return_ty))\n+            .map(|(resume_ty, yield_ty, return_ty)| ty::GenSig { resume_ty, yield_ty, return_ty })\n     }\n }\n "}, {"sha": "0d30395d2501b93fea4442e223db135c80f89b40", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0117033c721d35ade8d815e1fbf83f10d73f15e4/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0117033c721d35ade8d815e1fbf83f10d73f15e4/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=0117033c721d35ade8d815e1fbf83f10d73f15e4", "patch": "@@ -346,9 +346,17 @@ static_assert_size!(TyKind<'_>, 24);\n /// ## Generators\n ///\n /// Generators are handled similarly in `GeneratorSubsts`.  The set of\n-/// type parameters is similar, but the role of CK and CS are\n-/// different. CK represents the \"yield type\" and CS represents the\n-/// \"return type\" of the generator.\n+/// type parameters is similar, but `CK` and `CS` are replaced by the\n+/// following type parameters:\n+///\n+/// * `GS`: The generator's \"resume type\", which is the type of the\n+///   argument passed to `resume`, and the type of `yield` expressions\n+///   inside the generator.\n+/// * `GY`: The \"yield type\", which is the type of values passed to\n+///   `yield` inside the generator.\n+/// * `GR`: The \"return type\", which is the type of value returned upon\n+///   completion of the generator.\n+/// * `GW`: The \"generator witness\".\n #[derive(Copy, Clone, Debug, TypeFoldable)]\n pub struct ClosureSubsts<'tcx> {\n     /// Lifetime and type parameters from the enclosing function,\n@@ -442,6 +450,7 @@ pub struct GeneratorSubsts<'tcx> {\n }\n \n struct SplitGeneratorSubsts<'tcx> {\n+    resume_ty: Ty<'tcx>,\n     yield_ty: Ty<'tcx>,\n     return_ty: Ty<'tcx>,\n     witness: Ty<'tcx>,\n@@ -453,10 +462,11 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         let generics = tcx.generics_of(def_id);\n         let parent_len = generics.parent_count;\n         SplitGeneratorSubsts {\n-            yield_ty: self.substs.type_at(parent_len),\n-            return_ty: self.substs.type_at(parent_len + 1),\n-            witness: self.substs.type_at(parent_len + 2),\n-            upvar_kinds: &self.substs[parent_len + 3..],\n+            resume_ty: self.substs.type_at(parent_len),\n+            yield_ty: self.substs.type_at(parent_len + 1),\n+            return_ty: self.substs.type_at(parent_len + 2),\n+            witness: self.substs.type_at(parent_len + 3),\n+            upvar_kinds: &self.substs[parent_len + 4..],\n         }\n     }\n \n@@ -485,6 +495,11 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         })\n     }\n \n+    /// Returns the type representing the resume type of the generator.\n+    pub fn resume_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n+        self.split(def_id, tcx).resume_ty\n+    }\n+\n     /// Returns the type representing the yield type of the generator.\n     pub fn yield_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).yield_ty\n@@ -505,10 +520,14 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         ty::Binder::dummy(self.sig(def_id, tcx))\n     }\n \n-    /// Returns the \"generator signature\", which consists of its yield\n+    /// Returns the \"generator signature\", which consists of its resume, yield\n     /// and return types.\n     pub fn sig(self, def_id: DefId, tcx: TyCtxt<'_>) -> GenSig<'tcx> {\n-        ty::GenSig { yield_ty: self.yield_ty(def_id, tcx), return_ty: self.return_ty(def_id, tcx) }\n+        ty::GenSig {\n+            resume_ty: self.resume_ty(def_id, tcx),\n+            yield_ty: self.yield_ty(def_id, tcx),\n+            return_ty: self.return_ty(def_id, tcx),\n+        }\n     }\n }\n \n@@ -1072,13 +1091,17 @@ impl<'tcx> ProjectionTy<'tcx> {\n \n #[derive(Clone, Debug, TypeFoldable)]\n pub struct GenSig<'tcx> {\n+    pub resume_ty: Ty<'tcx>,\n     pub yield_ty: Ty<'tcx>,\n     pub return_ty: Ty<'tcx>,\n }\n \n pub type PolyGenSig<'tcx> = Binder<GenSig<'tcx>>;\n \n impl<'tcx> PolyGenSig<'tcx> {\n+    pub fn resume_ty(&self) -> ty::Binder<Ty<'tcx>> {\n+        self.map_bound_ref(|sig| sig.resume_ty)\n+    }\n     pub fn yield_ty(&self) -> ty::Binder<Ty<'tcx>> {\n         self.map_bound_ref(|sig| sig.yield_ty)\n     }"}, {"sha": "97067e0b0551d1bf6afc423a3d8588537870b7ce", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0117033c721d35ade8d815e1fbf83f10d73f15e4/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0117033c721d35ade8d815e1fbf83f10d73f15e4/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=0117033c721d35ade8d815e1fbf83f10d73f15e4", "patch": "@@ -94,6 +94,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         });\n         if let Some(GeneratorTypes { yield_ty, interior, movability }) = generator_types {\n             let generator_substs = substs.as_generator();\n+            self.demand_eqtype(\n+                expr.span,\n+                self.tcx.mk_unit(),  // WIP\n+                generator_substs.resume_ty(expr_def_id, self.tcx),\n+            );\n             self.demand_eqtype(\n                 expr.span,\n                 yield_ty,"}, {"sha": "dc089c9045693e15e3a0583bdcb468efa55b4ebb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0117033c721d35ade8d815e1fbf83f10d73f15e4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0117033c721d35ade8d815e1fbf83f10d73f15e4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=0117033c721d35ade8d815e1fbf83f10d73f15e4", "patch": "@@ -1189,7 +1189,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n     // and we don't do that for closures.\n     if let Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(.., gen), .. }) = node {\n         let dummy_args = if gen.is_some() {\n-            &[\"<yield_ty>\", \"<return_ty>\", \"<witness>\"][..]\n+            &[\"<resume_ty>\", \"<yield_ty>\", \"<return_ty>\", \"<witness>\"][..]\n         } else {\n             &[\"<closure_kind>\", \"<closure_signature>\"][..]\n         };"}]}