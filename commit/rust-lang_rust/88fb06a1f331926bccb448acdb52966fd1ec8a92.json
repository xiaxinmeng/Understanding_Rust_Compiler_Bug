{"sha": "88fb06a1f331926bccb448acdb52966fd1ec8a92", "node_id": "C_kwDOAAsO6NoAKDg4ZmIwNmExZjMzMTkyNmJjY2I0NDhhY2RiNTI5NjZmZDFlYzhhOTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-05T18:27:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-05T18:27:06Z"}, "message": "Auto merge of #93539 - petrochenkov:doclink, r=camelid,michaelwoerister\n\nrustdoc: Collect traits in scope for foreign inherent impls\n\nInherent impls can be inlined for variety of reasons (impls of reexported types, impls available through `Deref`, impls inlined for unclear reasons like in https://github.com/rust-lang/rust/pull/88679#issuecomment-1023929480).\nIf an impl is inlined, then doc links in its comments are resolved and we may need the set of traits that are in scope at that impl's definition point.\nSo in this PR we simply collect traits in scope for *all* inherent impls from other crates if their `Self` type is public, which is very similar for the strategy for trait impls previously used in https://github.com/rust-lang/rust/pull/88679.\n\nFixes https://github.com/rust-lang/rust/issues/93476\nFixes https://github.com/rust-lang/rust/pull/88679#issuecomment-1026520300\nFixes https://github.com/rust-lang/rust/pull/88679#issuecomment-1023929480", "tree": {"sha": "b22d7f3ae052860d29a30ee334f22121234062a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b22d7f3ae052860d29a30ee334f22121234062a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88fb06a1f331926bccb448acdb52966fd1ec8a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88fb06a1f331926bccb448acdb52966fd1ec8a92", "html_url": "https://github.com/rust-lang/rust/commit/88fb06a1f331926bccb448acdb52966fd1ec8a92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88fb06a1f331926bccb448acdb52966fd1ec8a92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "291bf94cfd6456602d67f0e3be109bcd8c125b1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/291bf94cfd6456602d67f0e3be109bcd8c125b1a", "html_url": "https://github.com/rust-lang/rust/commit/291bf94cfd6456602d67f0e3be109bcd8c125b1a"}, {"sha": "afc0030ed3cf2ddaac52b637eeb1e629f8f39800", "url": "https://api.github.com/repos/rust-lang/rust/commits/afc0030ed3cf2ddaac52b637eeb1e629f8f39800", "html_url": "https://github.com/rust-lang/rust/commit/afc0030ed3cf2ddaac52b637eeb1e629f8f39800"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "bb729807cad9a9cc56af1a1e5107d607a41e8a6e", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/88fb06a1f331926bccb448acdb52966fd1ec8a92/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fb06a1f331926bccb448acdb52966fd1ec8a92/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=88fb06a1f331926bccb448acdb52966fd1ec8a92", "patch": "@@ -1369,10 +1369,27 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         )\n     }\n \n+    /// Decodes all inherent impls in the crate (for rustdoc).\n+    fn get_inherent_impls(self) -> impl Iterator<Item = (DefId, DefId)> + 'a {\n+        (0..self.root.tables.inherent_impls.size()).flat_map(move |i| {\n+            let ty_index = DefIndex::from_usize(i);\n+            let ty_def_id = self.local_def_id(ty_index);\n+            self.root\n+                .tables\n+                .inherent_impls\n+                .get(self, ty_index)\n+                .unwrap_or_else(Lazy::empty)\n+                .decode(self)\n+                .map(move |impl_index| (ty_def_id, self.local_def_id(impl_index)))\n+        })\n+    }\n+\n+    /// Decodes all traits in the crate (for rustdoc and rustc diagnostics).\n     fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {\n         self.root.traits.decode(self).map(move |index| self.local_def_id(index))\n     }\n \n+    /// Decodes all trait impls in the crate (for rustdoc).\n     fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {\n         self.cdata.trait_impls.iter().flat_map(move |((trait_cnum_raw, trait_index), impls)| {\n             let trait_def_id = DefId {"}, {"sha": "a94c4e2f4e0e88d72a93f49c79c677053d777f67", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88fb06a1f331926bccb448acdb52966fd1ec8a92/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fb06a1f331926bccb448acdb52966fd1ec8a92/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=88fb06a1f331926bccb448acdb52966fd1ec8a92", "patch": "@@ -486,16 +486,26 @@ impl CStore {\n         self.get_crate_data(cnum).get_proc_macro_quoted_span(id, sess)\n     }\n \n+    /// Decodes all traits in the crate (for rustdoc).\n     pub fn traits_in_crate_untracked(&self, cnum: CrateNum) -> impl Iterator<Item = DefId> + '_ {\n         self.get_crate_data(cnum).get_traits()\n     }\n \n+    /// Decodes all trait impls in the crate (for rustdoc).\n     pub fn trait_impls_in_crate_untracked(\n         &self,\n         cnum: CrateNum,\n     ) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + '_ {\n         self.get_crate_data(cnum).get_trait_impls()\n     }\n+\n+    /// Decodes all inherent impls in the crate (for rustdoc).\n+    pub fn inherent_impls_in_crate_untracked(\n+        &self,\n+        cnum: CrateNum,\n+    ) -> impl Iterator<Item = (DefId, DefId)> + '_ {\n+        self.get_crate_data(cnum).get_inherent_impls()\n+    }\n }\n \n impl CrateStore for CStore {"}, {"sha": "e28034b2b0d7a0cd4e26b2309b4a2f5f4ea0972b", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88fb06a1f331926bccb448acdb52966fd1ec8a92/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fb06a1f331926bccb448acdb52966fd1ec8a92/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=88fb06a1f331926bccb448acdb52966fd1ec8a92", "patch": "@@ -116,6 +116,8 @@ impl IntraLinkCrateLoader<'_, '_> {\n             let all_traits = Vec::from_iter(self.resolver.cstore().traits_in_crate_untracked(cnum));\n             let all_trait_impls =\n                 Vec::from_iter(self.resolver.cstore().trait_impls_in_crate_untracked(cnum));\n+            let all_inherent_impls =\n+                Vec::from_iter(self.resolver.cstore().inherent_impls_in_crate_untracked(cnum));\n \n             // Querying traits in scope is expensive so we try to prune the impl and traits lists\n             // using privacy, private traits and impls from other crates are never documented in\n@@ -134,6 +136,11 @@ impl IntraLinkCrateLoader<'_, '_> {\n                     self.add_traits_in_parent_scope(impl_def_id);\n                 }\n             }\n+            for (ty_def_id, impl_def_id) in all_inherent_impls {\n+                if self.resolver.cstore().visibility_untracked(ty_def_id) == Visibility::Public {\n+                    self.add_traits_in_parent_scope(impl_def_id);\n+                }\n+            }\n \n             self.all_traits.extend(all_traits);\n             self.all_trait_impls.extend(all_trait_impls.into_iter().map(|(_, def_id, _)| def_id));"}, {"sha": "ee4138b6865a014c8cbedddb043256a0e7cec875", "filename": "src/test/rustdoc/intra-doc/auxiliary/extern-inherent-impl-dep.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/88fb06a1f331926bccb448acdb52966fd1ec8a92/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fextern-inherent-impl-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fb06a1f331926bccb448acdb52966fd1ec8a92/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fextern-inherent-impl-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fextern-inherent-impl-dep.rs?ref=88fb06a1f331926bccb448acdb52966fd1ec8a92", "patch": "@@ -0,0 +1,11 @@\n+#[derive(Clone)]\n+pub struct PublicStruct;\n+\n+mod inner {\n+    use super::PublicStruct;\n+\n+    impl PublicStruct {\n+        /// [PublicStruct::clone]\n+        pub fn method() {}\n+    }\n+}"}, {"sha": "2e41c2214f4fe87664ef3ae870c88b0de162e38b", "filename": "src/test/rustdoc/intra-doc/extern-inherent-impl.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88fb06a1f331926bccb448acdb52966fd1ec8a92/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fb06a1f331926bccb448acdb52966fd1ec8a92/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-inherent-impl.rs?ref=88fb06a1f331926bccb448acdb52966fd1ec8a92", "patch": "@@ -0,0 +1,8 @@\n+// Reexport of a structure with public inherent impls having doc links in their comments. The doc\n+// link points to an associated item, so we check that traits in scope for that link are populated.\n+\n+// aux-build:extern-inherent-impl-dep.rs\n+\n+extern crate extern_inherent_impl_dep;\n+\n+pub use extern_inherent_impl_dep::PublicStruct;"}]}