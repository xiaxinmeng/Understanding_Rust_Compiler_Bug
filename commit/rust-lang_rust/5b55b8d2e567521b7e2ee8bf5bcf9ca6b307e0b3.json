{"sha": "5b55b8d2e567521b7e2ee8bf5bcf9ca6b307e0b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNTViOGQyZTU2NzUyMWI3ZTJlZThiZjViY2Y5Y2E2YjMwN2UwYjM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-12T07:48:51Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-12T07:48:51Z"}, "message": "Rollup merge of #29785 - steveklabnik:doc_prelude, r=nikomatsakis\n\nThis mostly brings them in line with existing linking convention, but\nalso has some minor re-wording.\n\nThe text at the top has been re-focused, by starting out with what the\nprelude does, rather than starting from injecting std.\n\nAlso, it now mentions that other preludes exist.\n\nPart of https://github.com/rust-lang/rust/issues/29369", "tree": {"sha": "5ed04c9b98835a7142c574b2d1b2989da559ad36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ed04c9b98835a7142c574b2d1b2989da559ad36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b55b8d2e567521b7e2ee8bf5bcf9ca6b307e0b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b55b8d2e567521b7e2ee8bf5bcf9ca6b307e0b3", "html_url": "https://github.com/rust-lang/rust/commit/5b55b8d2e567521b7e2ee8bf5bcf9ca6b307e0b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b55b8d2e567521b7e2ee8bf5bcf9ca6b307e0b3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7f6d7239b03d1f7b8a9713412e1b74364879432", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f6d7239b03d1f7b8a9713412e1b74364879432", "html_url": "https://github.com/rust-lang/rust/commit/b7f6d7239b03d1f7b8a9713412e1b74364879432"}, {"sha": "a1b24768a6a57de029110f8370d59badd05b224d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b24768a6a57de029110f8370d59badd05b224d", "html_url": "https://github.com/rust-lang/rust/commit/a1b24768a6a57de029110f8370d59badd05b224d"}], "stats": {"total": 211, "additions": 115, "deletions": 96}, "files": [{"sha": "3ff1798159efaa436a13ed13fdeb46b068b26f68", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 113, "deletions": 96, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/5b55b8d2e567521b7e2ee8bf5bcf9ca6b307e0b3/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b55b8d2e567521b7e2ee8bf5bcf9ca6b307e0b3/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=5b55b8d2e567521b7e2ee8bf5bcf9ca6b307e0b3", "patch": "@@ -10,119 +10,136 @@\n \n //! The Rust Prelude\n //!\n-//! Because `std` is required by most serious Rust software, it is\n-//! imported at the topmost level of every crate by default, as if\n-//! each crate contains the following:\n+//! Rust comes with a variety of things in its standard library. However, if\n+//! you had to manually import every single thing that you used, it would be\n+//! very verbose. But importing a lot of things that a program never uses isn't\n+//! good either. A balance needs to be struck.\n+//!\n+//! The *prelude* is the list of things that Rust automatically imports into\n+//! every Rust program. It's kept as small as possible, and is focused on\n+//! things, particuarly traits, which are used in almost every single Rust\n+//! program.\n+//!\n+//! On a technical level, Rust inserts\n //!\n //! ```ignore\n //! extern crate std;\n //! ```\n //!\n-//! This means that the contents of std can be accessed from any context\n-//! with the `std::` path prefix, as in `use std::vec`, `use std::thread::spawn`,\n-//! etc.\n-//!\n-//! Additionally, `std` contains a versioned *prelude* that reexports many of the\n-//! most common traits, types, and functions. *The contents of the prelude are\n-//! imported into every module by default*.  Implicitly, all modules behave as if\n-//! they contained the following [`use` statement][book-use]:\n-//!\n-//! [book-use]: ../../book/crates-and-modules.html#importing-modules-with-use\n+//! into the crate root of every crate, and \n //!\n //! ```ignore\n //! use std::prelude::v1::*;\n //! ```\n //!\n-//! The prelude is primarily concerned with exporting *traits* that\n-//! are so pervasive that they would be onerous to import for every use,\n-//! particularly those that are commonly mentioned in [generic type\n-//! bounds][book-traits].\n+//! into every module.\n+//!\n+//! # Other preludes\n+//!\n+//! Preludes can be seen as a pattern to make using multiple types more\n+//! convenient. As such, you'll find other preludes in the standard library,\n+//! such as [`std::io::prelude`]. Various libraries in the Rust ecosystem may\n+//! also define their own preludes.\n+//!\n+//! [`std::io::prelude`]: ../io/prelude/index.html\n+//!\n+//! The differece between 'the prelude' and these other preludes is that they\n+//! are not automatically `use`'d, and must be imported manually. This is still\n+//! easier than importing all of their consitutent components.\n+//!\n+//! # Prelude contents\n //!\n //! The current version of the prelude (version 1) lives in\n-//! [`std::prelude::v1`](v1/index.html), and reexports the following.\n+//! [`std::prelude::v1`], and reexports the following.\n //!\n-//! * `std::marker::`{\n-//!     [`Copy`](../marker/trait.Copy.html),\n-//!     [`Send`](../marker/trait.Send.html),\n-//!     [`Sized`](../marker/trait.Sized.html),\n-//!     [`Sync`](../marker/trait.Sync.html)\n-//!   }.\n-//!   The marker traits indicate fundamental properties of types.\n-//! * `std::ops::`{\n-//!     [`Drop`](../ops/trait.Drop.html),\n-//!     [`Fn`](../ops/trait.Fn.html),\n-//!     [`FnMut`](../ops/trait.FnMut.html),\n-//!     [`FnOnce`](../ops/trait.FnOnce.html)\n-//!   }.\n-//!   The [destructor][book-dtor] trait and the\n-//!   [closure][book-closures] traits, reexported from the same\n-//!   [module that also defines overloaded\n-//!   operators](../ops/index.html).\n-//! * `std::mem::`[`drop`](../mem/fn.drop.html).\n-//!   A convenience function for explicitly dropping a value.\n-//! * `std::boxed::`[`Box`](../boxed/struct.Box.html).\n-//!   The owned heap pointer.\n-//! * `std::borrow::`[`ToOwned`](../borrow/trait.ToOwned.html).\n-//!   The conversion trait that defines `to_owned`, the generic method\n-//!   for creating an owned type from a borrowed type.\n-//! * `std::clone::`[`Clone`](../clone/trait.Clone.html).\n-//!   The ubiquitous trait that defines `clone`, the method for\n-//!   producing copies of values that are consider expensive to copy.\n-//! * `std::cmp::`{\n-//!     [`PartialEq`](../cmp/trait.PartialEq.html),\n-//!     [`PartialOrd`](../cmp/trait.PartialOrd.html),\n-//!     [`Eq`](../cmp/trait.Eq.html),\n-//!     [`Ord`](../cmp/trait.Ord.html)\n-//!   }.\n-//!   The comparison traits, which implement the comparison operators\n-//!   and are often seen in trait bounds.\n-//! * `std::convert::`{\n-//!     [`AsRef`](../convert/trait.AsRef.html),\n-//!     [`AsMut`](../convert/trait.AsMut.html),\n-//!     [`Into`](../convert/trait.Into.html),\n-//!     [`From`](../convert/trait.From.html)\n-//!   }.\n-//!   Generic conversions, used by savvy API authors to create\n-//!   overloaded methods.\n-//! * `std::default::`[`Default`](../default/trait.Default.html).\n-//!   Types that have default values.\n-//! * `std::iter::`{\n-//!     [`Iterator`](../iter/trait.Iterator.html),\n-//!     [`Extend`](../iter/trait.Extend.html),\n-//!     [`IntoIterator`](../iter/trait.IntoIterator.html),\n-//!     [`DoubleEndedIterator`](../iter/trait.DoubleEndedIterator.html),\n-//!     [`ExactSizeIterator`](../iter/trait.ExactSizeIterator.html)\n-//!   }.\n-//!   [Iterators][book-iter].\n-//! * `std::option::Option::`{\n-//!     [`self`](../option/enum.Option.html),\n-//!     [`Some`](../option/enum.Option.html),\n-//!     [`None`](../option/enum.Option.html)\n-//!   }.\n-//!   The ubiquitous `Option` type and its two [variants][book-enums],\n-//!   `Some` and `None`.\n-//! * `std::result::Result::`{\n-//!     [`self`](../result/enum.Result.html),\n-//!     [`Ok`](../result/enum.Result.html),\n-//!     [`Err`](../result/enum.Result.html)\n-//!   }.\n-//!   The ubiquitous `Result` type and its two [variants][book-enums],\n-//!   `Ok` and `Err`.\n-//! * `std::slice::`[`SliceConcatExt`](../slice/trait.SliceConcatExt.html).\n-//!   An unstable extension to slices that shouldn't have to exist.\n-//! * `std::string::`{\n-//!     [`String`](../string/struct.String.html),\n-//!     [`ToString`](../string/trait.ToString.html)\n-//!   }.\n-//!   Heap allocated strings.\n-//! * `std::vec::`[`Vec`](../vec/struct.Vec.html).\n-//!   Heap allocated vectors.\n+//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`]}. The marker\n+//!   traits indicate fundamental properties of types.\n+//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}. Various\n+//!   operations for both destuctors and overloading `()`.\n+//! * [`std::mem`]::[`drop`], a convenience function for explicitly dropping a\n+//!   value.\n+//! * [`std::boxed`]::[`Box`], a way to allocate values on the heap.\n+//! * [`std::borrow`]::[`ToOwned`], The conversion trait that defines\n+//!   [`to_owned()`], the generic method for creating an owned type from a\n+//!   borrowed type.\n+//! * [`std::clone`]::[`Clone`], the ubiquitous trait that defines [`clone()`],\n+//!   the method for producing a copy of a value.\n+//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`] }. The\n+//!   comparison traits, which implement the comparison operators and are often\n+//!   seen in trait bounds.\n+//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}. Generic\n+//!   conversions, used by savvy API authors to create overloaded methods.\n+//! * [`std::default`]::[`Default`], types that have default values.\n+//! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`],\n+//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}. Iterators of various\n+//!   kinds.\n+//! * [`std::option`]::[`Option`]::{`self`, `Some`, `None`}. A type which\n+//!   expresses the presence or absence of a value. This type is so commonly\n+//!   used, its variants are also exported.\n+//! * [`std::result`]::[`Result`]::{`self`, `Ok`, `Err`}. A type for functions\n+//!   that may succeed or fail. Like [`Option`], its variants are exported as\n+//!   well.\n+//! * [`std::slice`]::[`SliceConcatExt`], a trait that exists for technical\n+//!   reasons, but shouldn't have to exist. It provides a few useful methods on\n+//!   slices.\n+//! * [`std::string`]::{[`String`], [`ToString`]}, heap allocated strings.\n+//! * [`std::vec`]::[`Vec`](../vec/struct.Vec.html), a growable, heap-allocated\n+//!   vector.\n //!\n-//! [book-traits]: ../../book/traits.html\n+//! [`AsMut`]: ../convert/trait.AsMut.html\n+//! [`AsRef`]: ../convert/trait.AsRef.html\n+//! [`Box`]: ../boxed/struct.Box.html\n+//! [`Clone`]: ../clone/trait.Clone.html\n+//! [`Copy`]: ../marker/trait.Copy.html\n+//! [`Default`]: ../default/trait.Default.html\n+//! [`DoubleEndedIterator`]: ../iter/trait.DoubleEndedIterator.html\n+//! [`Drop`]: ../ops/trait.Drop.html\n+//! [`Eq`]: ../cmp/trait.Eq.html\n+//! [`ExactSizeIterator`]: ../iter/trait.ExactSizeIterator.html\n+//! [`Extend`]: ../iter/trait.Extend.html\n+//! [`FnMut`]: ../ops/trait.FnMut.html\n+//! [`FnOnce`]: ../ops/trait.FnOnce.html\n+//! [`Fn`]: ../ops/trait.Fn.html\n+//! [`From`]: ../convert/trait.From.html\n+//! [`IntoIterator`]: ../iter/trait.IntoIterator.html\n+//! [`Into`]: ../convert/trait.Into.html\n+//! [`Iterator`]: ../iter/trait.Iterator.html\n+//! [`Option`]: ../option/enum.Option.html\n+//! [`Ord`]: ../cmp/trait.Ord.html\n+//! [`PartialEq`]: ../cmp/trait.PartialEq.html\n+//! [`PartialOrd`]: ../cmp/trait.PartialOrd.html\n+//! [`Result`]: ../result/enum.Result.html\n+//! [`Send`]: ../marker/trait.Send.html\n+//! [`Sized`]: ../marker/trait.Sized.html\n+//! [`SliceConcatExt`]: ../slice/trait.SliceConcatExt.html\n+//! [`String`]: ../string/struct.String.html\n+//! [`Sync`]: ../marker/trait.Sync.html\n+//! [`ToOwned`]: ../borrow/trait.ToOwned.html\n+//! [`ToString`]: ../string/trait.ToString.html\n+//! [`Vec`]: ../vec/struct.Vec.html\n+//! [`clone()`]: ../clone/trait.Clone.html#tymethod.clone\n+//! [`drop`]: ../mem/fn.drop.html\n+//! [`std::borrow`]: ../borrow/index.html\n+//! [`std::boxed`]: ../boxed/index.html\n+//! [`std::clone`]: ../clone/index.html\n+//! [`std::cmp`]: ../cmp/index.html\n+//! [`std::convert`]: ../convert/index.html\n+//! [`std::default`]: ../default/index.html\n+//! [`std::iter`]: ../iter/index.html\n+//! [`std::marker`]: ../marker/index.html\n+//! [`std::mem`]: ../mem/index.html\n+//! [`std::ops`]: ../ops/index.html\n+//! [`std::option`]: ../option/index.html\n+//! [`std::prelude::v1`]: v1/index.html\n+//! [`std::result`]: ../result/index.html\n+//! [`std::slice`]: ../slice/index.html\n+//! [`std::string`]: ../string/index.html\n+//! [`std::vec`]: ../vec/index.html\n+//! [`to_owned()`]: ../borrow/trait.ToOwned.html#tymethod.to_owned\n //! [book-closures]: ../../book/closures.html\n //! [book-dtor]: ../../book/drop.html\n-//! [book-iter]: ../../book/iterators.html\n //! [book-enums]: ../../book/enums.html\n+//! [book-iter]: ../../book/iterators.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "9ca5b445c86a9d8a78b9ea20215a6a7694ef2e5c", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b55b8d2e567521b7e2ee8bf5bcf9ca6b307e0b3/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b55b8d2e567521b7e2ee8bf5bcf9ca6b307e0b3/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=5b55b8d2e567521b7e2ee8bf5bcf9ca6b307e0b3", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n //! The first version of the prelude of The Rust Standard Library.\n+//!\n+//! See the [module-level documentation](../index.html) for more.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}