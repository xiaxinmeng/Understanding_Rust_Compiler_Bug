{"sha": "9e638c9f3ee68784cd93ec0458b0c92c18776f06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNjM4YzlmM2VlNjg3ODRjZDkzZWMwNDU4YjBjOTJjMTg3NzZmMDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-27T14:26:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-27T14:27:05Z"}, "message": "simplify", "tree": {"sha": "2fee74650c4390b0abacb3e422f7fc9c438872e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fee74650c4390b0abacb3e422f7fc9c438872e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e638c9f3ee68784cd93ec0458b0c92c18776f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e638c9f3ee68784cd93ec0458b0c92c18776f06", "html_url": "https://github.com/rust-lang/rust/commit/9e638c9f3ee68784cd93ec0458b0c92c18776f06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e638c9f3ee68784cd93ec0458b0c92c18776f06/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad950830d0902aaacfb5a76355a203626eb93b5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad950830d0902aaacfb5a76355a203626eb93b5f", "html_url": "https://github.com/rust-lang/rust/commit/ad950830d0902aaacfb5a76355a203626eb93b5f"}], "stats": {"total": 43, "additions": 13, "deletions": 30}, "files": [{"sha": "7aa66b1fec67ab5106554ebf5095bc3005d8e635", "filename": "crates/ra_assists/src/assists/add_import.rs", "status": "modified", "additions": 13, "deletions": 30, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9e638c9f3ee68784cd93ec0458b0c92c18776f06/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e638c9f3ee68784cd93ec0458b0c92c18776f06/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs?ref=9e638c9f3ee68784cd93ec0458b0c92c18776f06", "patch": "@@ -52,36 +52,18 @@ pub(crate) fn add_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n         return None;\n     }\n \n-    if let Some(module) = path.syntax().ancestors().find_map(ast::Module::cast) {\n-        if let (Some(item_list), Some(name)) = (module.item_list(), module.name()) {\n-            ctx.add_action(\n-                AssistId(\"add_import\"),\n-                format!(\"import {} in mod {}\", fmt_segments(&segments), name.text()),\n-                |edit| {\n-                    apply_auto_import(\n-                        item_list.syntax(),\n-                        &path,\n-                        &segments,\n-                        edit.text_edit_builder(),\n-                    );\n-                },\n-            );\n+    let module = path.syntax().ancestors().find_map(ast::Module::cast);\n+    let anchor = match module.and_then(|it| it.item_list()) {\n+        Some(item_list) => item_list.syntax().clone(),\n+        None => {\n+            let current_file = path.syntax().ancestors().find_map(ast::SourceFile::cast)?;\n+            current_file.syntax().clone()\n         }\n-    } else {\n-        let current_file = path.syntax().ancestors().find_map(ast::SourceFile::cast)?;\n-        ctx.add_action(\n-            AssistId(\"add_import\"),\n-            format!(\"import {} in the current file\", fmt_segments(&segments)),\n-            |edit| {\n-                apply_auto_import(\n-                    current_file.syntax(),\n-                    &path,\n-                    &segments,\n-                    edit.text_edit_builder(),\n-                );\n-            },\n-        );\n-    }\n+    };\n+\n+    ctx.add_action(AssistId(\"add_import\"), format!(\"import {}\", fmt_segments(&segments)), |edit| {\n+        apply_auto_import(&anchor, &path, &segments, edit.text_edit_builder());\n+    });\n \n     ctx.build()\n }\n@@ -595,9 +577,10 @@ fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n     use crate::helpers::{check_assist, check_assist_not_applicable};\n \n+    use super::*;\n+\n     #[test]\n     fn test_auto_import_add_use_no_anchor() {\n         check_assist("}]}