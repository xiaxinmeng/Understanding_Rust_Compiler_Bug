{"sha": "671770ed852daf803e6a49fc9b622a4a2e478efb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MTc3MGVkODUyZGFmODAzZTZhNDlmYzliNjIyYTRhMmU0NzhlZmI=", "commit": {"author": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-08-25T04:00:24Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-08-25T13:51:30Z"}, "message": "Also handle transparent single-variant enums", "tree": {"sha": "0de16388d6bf618d0a7e666fdc94547a6d8fe743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0de16388d6bf618d0a7e666fdc94547a6d8fe743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/671770ed852daf803e6a49fc9b622a4a2e478efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/671770ed852daf803e6a49fc9b622a4a2e478efb", "html_url": "https://github.com/rust-lang/rust/commit/671770ed852daf803e6a49fc9b622a4a2e478efb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/671770ed852daf803e6a49fc9b622a4a2e478efb/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f38eb93634b844ee8351501502f5331b04f063a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f38eb93634b844ee8351501502f5331b04f063a5", "html_url": "https://github.com/rust-lang/rust/commit/f38eb93634b844ee8351501502f5331b04f063a5"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "f51d7662d058c8dad70b2f867adb03beedd13d26", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/671770ed852daf803e6a49fc9b622a4a2e478efb/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671770ed852daf803e6a49fc9b622a4a2e478efb/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=671770ed852daf803e6a49fc9b622a4a2e478efb", "patch": "@@ -38,6 +38,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{ForeignItemKind, GenericParamKind, PatKind};\n use rustc_hir::{HirId, HirIdSet, Node};\n+use rustc_index::vec::Idx;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -2171,18 +2172,19 @@ impl ClashingExternDeclarations {\n                 loop {\n                     if let ty::Adt(def, substs) = ty.kind {\n                         let is_transparent = def.subst(tcx, substs).repr.transparent();\n-                        let is_enum = def.is_enum();\n                         let is_non_null = crate::types::guaranteed_nonnull_optimization(tcx, &def);\n                         debug!(\n-                            \"non_transparent_ty({:?}) -- type is transparent? {}, type is enum? {}, type is non-null? {}\",\n-                            ty, is_transparent, is_enum, is_non_null\n+                            \"non_transparent_ty({:?}) -- type is transparent? {}, type is non-null? {}\",\n+                            ty, is_transparent, is_non_null\n                         );\n-                        if is_transparent && !is_enum && !is_non_null {\n-                            ty = def\n-                                .non_enum_variant()\n-                                .transparent_newtype_field(tcx)\n-                                .unwrap()\n-                                .ty(tcx, substs);\n+                        if is_transparent && !is_non_null {\n+                            debug_assert!(def.variants.len() == 1);\n+                            let v = &def.variants[VariantIdx::new(0)];\n+                            assert!(\n+                                v.fields.len() > 0,\n+                                \"single-variant transparent structure with zero-sized field\"\n+                            );\n+                            ty = v.transparent_newtype_field(tcx).unwrap().ty(tcx, substs);\n                             continue;\n                         }\n                     }"}, {"sha": "79e3b4cbf70efc9f48fe84fff3d072f0340fa4ca", "filename": "src/test/ui/lint/clashing-extern-fn.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/671770ed852daf803e6a49fc9b622a4a2e478efb/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671770ed852daf803e6a49fc9b622a4a2e478efb/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs?ref=671770ed852daf803e6a49fc9b622a4a2e478efb", "patch": "@@ -182,7 +182,9 @@ mod same_sized_members_clash {\n             y: f32,\n             z: f32,\n         }\n-        extern \"C\" { fn origin() -> Point3; }\n+        extern \"C\" {\n+            fn origin() -> Point3;\n+        }\n     }\n     mod b {\n         #[repr(C)]\n@@ -191,8 +193,9 @@ mod same_sized_members_clash {\n             y: i32,\n             z: i32, // NOTE: Incorrectly redeclared as i32\n         }\n-        extern \"C\" { fn origin() -> Point3; }\n-        //~^ WARN `origin` redeclared with a different signature\n+        extern \"C\" {\n+            fn origin() -> Point3; //~ WARN `origin` redeclared with a different signature\n+        }\n     }\n }\n \n@@ -312,6 +315,22 @@ mod non_zero_transparent {\n             fn f3() -> core::ptr::NonNull<i32>;\n         }\n     }\n+\n+    mod a4 {\n+        #[repr(transparent)]\n+        enum E {\n+            X(std::num::NonZeroUsize),\n+        }\n+        extern \"C\" {\n+            fn f4() -> E;\n+        }\n+    }\n+\n+    mod b4 {\n+        extern \"C\" {\n+            fn f4() -> std::num::NonZeroUsize;\n+        }\n+    }\n }\n \n mod null_optimised_enums {"}, {"sha": "0a18f05ba2903ca915219a80db4fd94fbd35ede1", "filename": "src/test/ui/lint/clashing-extern-fn.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/671770ed852daf803e6a49fc9b622a4a2e478efb/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671770ed852daf803e6a49fc9b622a4a2e478efb/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr?ref=671770ed852daf803e6a49fc9b622a4a2e478efb", "patch": "@@ -106,19 +106,19 @@ LL |             fn draw_point(p: Point);\n               found `unsafe extern \"C\" fn(sameish_members::b::Point)`\n \n warning: `origin` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:194:22\n+  --> $DIR/clashing-extern-fn.rs:197:13\n    |\n-LL |         extern \"C\" { fn origin() -> Point3; }\n-   |                      ---------------------- `origin` previously declared here\n+LL |             fn origin() -> Point3;\n+   |             ---------------------- `origin` previously declared here\n ...\n-LL |         extern \"C\" { fn origin() -> Point3; }\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n+LL |             fn origin() -> Point3;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n    |\n    = note: expected `unsafe extern \"C\" fn() -> same_sized_members_clash::a::Point3`\n               found `unsafe extern \"C\" fn() -> same_sized_members_clash::b::Point3`\n \n warning: `transparent_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:217:13\n+  --> $DIR/clashing-extern-fn.rs:220:13\n    |\n LL |             fn transparent_incorrect() -> T;\n    |             -------------------------------- `transparent_incorrect` previously declared here\n@@ -130,7 +130,7 @@ LL |             fn transparent_incorrect() -> isize;\n               found `unsafe extern \"C\" fn() -> isize`\n \n warning: `missing_return_type` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:235:13\n+  --> $DIR/clashing-extern-fn.rs:238:13\n    |\n LL |             fn missing_return_type() -> usize;\n    |             ---------------------------------- `missing_return_type` previously declared here\n@@ -142,7 +142,7 @@ LL |             fn missing_return_type();\n               found `unsafe extern \"C\" fn()`\n \n warning: `non_zero_usize` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:253:13\n+  --> $DIR/clashing-extern-fn.rs:256:13\n    |\n LL |             fn non_zero_usize() -> core::num::NonZeroUsize;\n    |             ----------------------------------------------- `non_zero_usize` previously declared here\n@@ -154,7 +154,7 @@ LL |             fn non_zero_usize() -> usize;\n               found `unsafe extern \"C\" fn() -> usize`\n \n warning: `non_null_ptr` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:255:13\n+  --> $DIR/clashing-extern-fn.rs:258:13\n    |\n LL |             fn non_null_ptr() -> core::ptr::NonNull<usize>;\n    |             ----------------------------------------------- `non_null_ptr` previously declared here\n@@ -166,7 +166,7 @@ LL |             fn non_null_ptr() -> *const usize;\n               found `unsafe extern \"C\" fn() -> *const usize`\n \n warning: `option_non_zero_usize_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:337:13\n+  --> $DIR/clashing-extern-fn.rs:356:13\n    |\n LL |             fn option_non_zero_usize_incorrect() -> usize;\n    |             ---------------------------------------------- `option_non_zero_usize_incorrect` previously declared here\n@@ -178,7 +178,7 @@ LL |             fn option_non_zero_usize_incorrect() -> isize;\n               found `unsafe extern \"C\" fn() -> isize`\n \n warning: `option_non_null_ptr_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:339:13\n+  --> $DIR/clashing-extern-fn.rs:358:13\n    |\n LL |             fn option_non_null_ptr_incorrect() -> *const usize;\n    |             --------------------------------------------------- `option_non_null_ptr_incorrect` previously declared here"}]}