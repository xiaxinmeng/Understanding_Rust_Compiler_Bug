{"sha": "cba48b8af3721a9a385a6c82ccad9d1e4c8acc4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYTQ4YjhhZjM3MjFhOWEzODVhNmM4MmNjYWQ5ZDFlNGM4YWNjNGI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-01-19T11:52:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-19T11:52:06Z"}, "message": "Rollup merge of #67682 - wesleywiser:remove_opty_const_typedef, r=Dylan-DPC\n\n[const-prop] Remove useless typedef\n\nIt's confusing because it conflicts with `ty::Const` and just isn't\ngenerally useful.", "tree": {"sha": "e6f719eb3dc9d18369c7de50e963b99f0511fc41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6f719eb3dc9d18369c7de50e963b99f0511fc41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cba48b8af3721a9a385a6c82ccad9d1e4c8acc4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeJELmCRBK7hj4Ov3rIwAAdHIIAAnGcuq9mqLGEzlozWA5HQCZ\n9gMNY1cjMaHadN7rxIlgE5x2DRRnVD6HVRus82nA/0ayOGXNhVwfLqbJ3kIvQ/XM\nlbvARFImrLZeVN5HBrA/iUvI7e7L8UmutFwhJ/PtrtPsxIc5Lv7GnojfR71t0hO5\nvccb7ZefV75ypmNa4YUu8WbE32b5B0Zo8lefmEXUhYh7z/1OamVxCN1N4oHmZjwG\nIMfeu0yh2guU6C+E/Z0y0VebG+xSUaoRdZhtAZTpk72n5XHJXyKA830KR6BX8z20\n44ODgED/7T9+xYmBl7QcZlQuAJb4Y4pv65kkn1mw762c2CU/DKd8p8bZHTEEkMc=\n=W0mi\n-----END PGP SIGNATURE-----\n", "payload": "tree e6f719eb3dc9d18369c7de50e963b99f0511fc41\nparent 6250d56355d72264ece721e8d0dc95b16a6824b1\nparent a957f0d7ff2c6389ec94f921d9ba4e9fade26a72\nauthor Dylan DPC <dylan.dpc@gmail.com> 1579434726 +0530\ncommitter GitHub <noreply@github.com> 1579434726 +0530\n\nRollup merge of #67682 - wesleywiser:remove_opty_const_typedef, r=Dylan-DPC\n\n[const-prop] Remove useless typedef\n\nIt's confusing because it conflicts with `ty::Const` and just isn't\ngenerally useful.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cba48b8af3721a9a385a6c82ccad9d1e4c8acc4b", "html_url": "https://github.com/rust-lang/rust/commit/cba48b8af3721a9a385a6c82ccad9d1e4c8acc4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cba48b8af3721a9a385a6c82ccad9d1e4c8acc4b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6250d56355d72264ece721e8d0dc95b16a6824b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6250d56355d72264ece721e8d0dc95b16a6824b1", "html_url": "https://github.com/rust-lang/rust/commit/6250d56355d72264ece721e8d0dc95b16a6824b1"}, {"sha": "a957f0d7ff2c6389ec94f921d9ba4e9fade26a72", "url": "https://api.github.com/repos/rust-lang/rust/commits/a957f0d7ff2c6389ec94f921d9ba4e9fade26a72", "html_url": "https://github.com/rust-lang/rust/commit/a957f0d7ff2c6389ec94f921d9ba4e9fade26a72"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "bd398c6e5b449e0a4ebbd3dcbcd5dc15cf820a60", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cba48b8af3721a9a385a6c82ccad9d1e4c8acc4b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba48b8af3721a9a385a6c82ccad9d1e4c8acc4b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=cba48b8af3721a9a385a6c82ccad9d1e4c8acc4b", "patch": "@@ -288,8 +288,6 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n     }\n }\n \n-type Const<'tcx> = OpTy<'tcx>;\n-\n /// Finds optimization opportunities on the MIR.\n struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine>,\n@@ -387,7 +385,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn get_const(&self, local: Local) -> Option<Const<'tcx>> {\n+    fn get_const(&self, local: Local) -> Option<OpTy<'tcx>> {\n         if local == RETURN_PLACE {\n             // Try to read the return place as an immediate so that if it is representable as a\n             // scalar, we can handle it as such, but otherwise, just return the value as is.\n@@ -466,11 +464,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         r\n     }\n \n-    fn eval_constant(\n-        &mut self,\n-        c: &Constant<'tcx>,\n-        source_info: SourceInfo,\n-    ) -> Option<Const<'tcx>> {\n+    fn eval_constant(&mut self, c: &Constant<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         self.ecx.tcx.span = c.span;\n \n         // FIXME we need to revisit this for #67176\n@@ -510,12 +504,12 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn eval_place(&mut self, place: &Place<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n+    fn eval_place(&mut self, place: &Place<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         trace!(\"eval_place(place={:?})\", place);\n         self.use_ecx(source_info, |this| this.ecx.eval_place_to_op(place, None))\n     }\n \n-    fn eval_operand(&mut self, op: &Operand<'tcx>, source_info: SourceInfo) -> Option<Const<'tcx>> {\n+    fn eval_operand(&mut self, op: &Operand<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {\n         match *op {\n             Operand::Constant(ref c) => self.eval_constant(c, source_info),\n             Operand::Move(ref place) | Operand::Copy(ref place) => {\n@@ -664,7 +658,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     fn replace_with_const(\n         &mut self,\n         rval: &mut Rvalue<'tcx>,\n-        value: Const<'tcx>,\n+        value: OpTy<'tcx>,\n         source_info: SourceInfo,\n     ) {\n         trace!(\"attepting to replace {:?} with {:?}\", rval, value);"}]}