{"sha": "9e172ffeb7c01df25097d7888b23a39505cb5aed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMTcyZmZlYjdjMDFkZjI1MDk3ZDc4ODhiMjNhMzk1MDVjYjVhZWQ=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-31T09:43:03Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-11-03T07:11:02Z"}, "message": "Remove numbers from comments in decl_check.rs", "tree": {"sha": "ba340717567c3e11f4e58c1c2601b59b0839fc26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba340717567c3e11f4e58c1c2601b59b0839fc26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e172ffeb7c01df25097d7888b23a39505cb5aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e172ffeb7c01df25097d7888b23a39505cb5aed", "html_url": "https://github.com/rust-lang/rust/commit/9e172ffeb7c01df25097d7888b23a39505cb5aed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e172ffeb7c01df25097d7888b23a39505cb5aed/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdfe12df8fd055bfa4bbcd0493c285e2e48dfd13", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdfe12df8fd055bfa4bbcd0493c285e2e48dfd13", "html_url": "https://github.com/rust-lang/rust/commit/bdfe12df8fd055bfa4bbcd0493c285e2e48dfd13"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "93d61589cff5aade5940b3e4df130a01dbb93e71", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9e172ffeb7c01df25097d7888b23a39505cb5aed/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e172ffeb7c01df25097d7888b23a39505cb5aed/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=9e172ffeb7c01df25097d7888b23a39505cb5aed", "patch": "@@ -89,18 +89,18 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         let data = db.function_data(func);\n         let body = db.body(func.into());\n \n-        // 1. Recursively validate inner scope items, such as static variables and constants.\n+        // Recursively validate inner scope items, such as static variables and constants.\n         for (item_id, _) in body.item_scope.values() {\n             let mut validator = DeclValidator::new(item_id, self.sink);\n             validator.validate_item(db);\n         }\n \n-        // 2. Check whether non-snake case identifiers are allowed for this function.\n+        // Check whether non-snake case identifiers are allowed for this function.\n         if self.allowed(db, func.into(), allow::NON_SNAKE_CASE) {\n             return;\n         }\n \n-        // 2. Check the function name.\n+        // Check the function name.\n         let function_name = data.name.to_string();\n         let fn_name_replacement = if let Some(new_name) = to_lower_snake_case(&function_name) {\n             let replacement = Replacement {\n@@ -113,7 +113,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             None\n         };\n \n-        // 3. Check the param names.\n+        // Check the param names.\n         let mut fn_param_replacements = Vec::new();\n \n         for pat_id in body.params.iter().cloned() {\n@@ -135,7 +135,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             }\n         }\n \n-        // 4. Check the patterns inside the function body.\n+        // Check the patterns inside the function body.\n         let mut pats_replacements = Vec::new();\n \n         for (pat_idx, pat) in body.pats.iter() {\n@@ -160,7 +160,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             }\n         }\n \n-        // 5. If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n+        // If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n         self.create_incorrect_case_diagnostic_for_func(\n             func,\n             db,\n@@ -187,7 +187,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n         let fn_loc = func.lookup(db.upcast());\n         let fn_src = fn_loc.source(db.upcast());\n \n-        // 1. Diagnostic for function name.\n+        // Diagnostic for function name.\n         if let Some(replacement) = fn_name_replacement {\n             let ast_ptr = match fn_src.value.name() {\n                 Some(name) => name,\n@@ -214,7 +214,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             self.sink.push(diagnostic);\n         }\n \n-        // 2. Diagnostics for function params.\n+        // Diagnostics for function params.\n         let fn_params_list = match fn_src.value.param_list() {\n             Some(params) => params,\n             None => {\n@@ -334,7 +334,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             self.allowed(db, struct_id.into(), allow::NON_CAMEL_CASE_TYPES);\n         let non_snake_case_allowed = self.allowed(db, struct_id.into(), allow::NON_SNAKE_CASE);\n \n-        // 1. Check the structure name.\n+        // Check the structure name.\n         let struct_name = data.name.to_string();\n         let struct_name_replacement = if let Some(new_name) = to_camel_case(&struct_name) {\n             let replacement = Replacement {\n@@ -351,7 +351,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             None\n         };\n \n-        // 2. Check the field names.\n+        // Check the field names.\n         let mut struct_fields_replacements = Vec::new();\n \n         if !non_snake_case_allowed {\n@@ -370,7 +370,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             }\n         }\n \n-        // 3. If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n+        // If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n         self.create_incorrect_case_diagnostic_for_struct(\n             struct_id,\n             db,\n@@ -470,12 +470,12 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n     fn validate_enum(&mut self, db: &dyn HirDatabase, enum_id: EnumId) {\n         let data = db.enum_data(enum_id);\n \n-        // 1. Check whether non-camel case names are allowed for this enum.\n+        // Check whether non-camel case names are allowed for this enum.\n         if self.allowed(db, enum_id.into(), allow::NON_CAMEL_CASE_TYPES) {\n             return;\n         }\n \n-        // 2. Check the enum name.\n+        // Check the enum name.\n         let enum_name = data.name.to_string();\n         let enum_name_replacement = if let Some(new_name) = to_camel_case(&enum_name) {\n             let replacement = Replacement {\n@@ -488,7 +488,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             None\n         };\n \n-        // 3. Check the field names.\n+        // Check the field names.\n         let mut enum_fields_replacements = Vec::new();\n \n         for (_, variant) in data.variants.iter() {\n@@ -503,7 +503,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n             }\n         }\n \n-        // 4. If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n+        // If there is at least one element to spawn a warning on, go to the source map and generate a warning.\n         self.create_incorrect_case_diagnostic_for_enum(\n             enum_id,\n             db,"}]}