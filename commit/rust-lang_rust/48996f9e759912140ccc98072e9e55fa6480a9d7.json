{"sha": "48996f9e759912140ccc98072e9e55fa6480a9d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4OTk2ZjllNzU5OTEyMTQwY2NjOTgwNzJlOWU1NWZhNjQ4MGE5ZDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-11-20T14:22:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-11-25T14:44:35Z"}, "message": "rustbuild: Enable WebAssembly backend by default\n\nThis commit alters how we compile LLVM by default enabling the WebAssembly\nbackend. This then also adds the wasm32-unknown-unknown target to get compiled\non the `cross` builder and distributed through rustup. Tests are not yet enabled\nfor this target but that should hopefully be coming soon!", "tree": {"sha": "9ee7d07b394b806138cd00cb1ca2cbed86448183", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ee7d07b394b806138cd00cb1ca2cbed86448183"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48996f9e759912140ccc98072e9e55fa6480a9d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48996f9e759912140ccc98072e9e55fa6480a9d7", "html_url": "https://github.com/rust-lang/rust/commit/48996f9e759912140ccc98072e9e55fa6480a9d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48996f9e759912140ccc98072e9e55fa6480a9d7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b", "html_url": "https://github.com/rust-lang/rust/commit/cc6b88ccb2fd10c2ad04a30ba648a1e9abf7ba4b"}], "stats": {"total": 255, "additions": 148, "deletions": 107}, "files": [{"sha": "a9281a31b13ba442b112bb57e8afcf67f5cc1e35", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/48996f9e759912140ccc98072e9e55fa6480a9d7/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/48996f9e759912140ccc98072e9e55fa6480a9d7/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=48996f9e759912140ccc98072e9e55fa6480a9d7", "patch": "@@ -60,10 +60,9 @@\n # LLVM experimental targets to build support for. These targets are specified in\n # the same format as above, but since these targets are experimental, they are\n # not built by default and the experimental Rust compilation targets that depend\n-# on them will not work unless the user opts in to building them. Possible\n-# experimental LLVM targets include WebAssembly for the\n-# wasm32-experimental-emscripten Rust target.\n-#experimental-targets = \"\"\n+# on them will not work unless the user opts in to building them. By default the\n+# `WebAssembly` target is enabled when compiling LLVM from scratch.\n+#experimental-targets = \"WebAssembly\"\n \n # Cap the number of parallel linker invocations when compiling LLVM.\n # This can be useful when building LLVM with debug info, which significantly"}, {"sha": "d43cd54ddce248ad9b0a6e2fc359a69d7ad5f902", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=48996f9e759912140ccc98072e9e55fa6480a9d7", "patch": "@@ -76,7 +76,7 @@ pub struct Config {\n     pub llvm_static_stdcpp: bool,\n     pub llvm_link_shared: bool,\n     pub llvm_targets: Option<String>,\n-    pub llvm_experimental_targets: Option<String>,\n+    pub llvm_experimental_targets: String,\n     pub llvm_link_jobs: Option<u32>,\n \n     // rust codegen options\n@@ -447,7 +447,8 @@ impl Config {\n             set(&mut config.llvm_static_stdcpp, llvm.static_libstdcpp);\n             set(&mut config.llvm_link_shared, llvm.link_shared);\n             config.llvm_targets = llvm.targets.clone();\n-            config.llvm_experimental_targets = llvm.experimental_targets.clone();\n+            config.llvm_experimental_targets = llvm.experimental_targets.clone()\n+                .unwrap_or(\"WebAssembly\".to_string());\n             config.llvm_link_jobs = llvm.link_jobs;\n         }\n "}, {"sha": "ac068ebe651789f6d669080df27143fa53c2e39e", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=48996f9e759912140ccc98072e9e55fa6480a9d7", "patch": "@@ -110,10 +110,7 @@ impl Step for Llvm {\n             None => \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon\",\n         };\n \n-        let llvm_exp_targets = match build.config.llvm_experimental_targets {\n-            Some(ref s) => s,\n-            None => \"\",\n-        };\n+        let llvm_exp_targets = &build.config.llvm_experimental_targets;\n \n         let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n "}, {"sha": "f16d97d39ef90dc6d57055b32580ef1d81b82790", "filename": "src/ci/docker/cross2/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Fci%2Fdocker%2Fcross2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Fci%2Fdocker%2Fcross2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross2%2FDockerfile?ref=48996f9e759912140ccc98072e9e55fa6480a9d7", "patch": "@@ -47,6 +47,7 @@ ENV \\\n ENV TARGETS=x86_64-unknown-fuchsia\n ENV TARGETS=$TARGETS,aarch64-unknown-fuchsia\n ENV TARGETS=$TARGETS,sparcv9-sun-solaris\n+ENV TARGETS=$TARGETS,wasm32-unknown-unknown\n ENV TARGETS=$TARGETS,x86_64-sun-solaris\n ENV TARGETS=$TARGETS,x86_64-unknown-linux-gnux32\n "}, {"sha": "b1e9bc7e47c76ade4b066e101245e64f06767de4", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=48996f9e759912140ccc98072e9e55fa6480a9d7", "patch": "@@ -56,13 +56,15 @@ use std::sync::mpsc;\n use syntax::{ast, diagnostics, visit};\n use syntax::attr;\n use syntax::ext::base::ExtCtxt;\n+use syntax::fold::Folder;\n use syntax::parse::{self, PResult};\n use syntax::util::node_count::NodeCounter;\n use syntax;\n use syntax_ext;\n use arena::DroplessArena;\n \n use derive_registrar;\n+use pretty::ReplaceBodyWithLoop;\n \n use profile;\n \n@@ -809,6 +811,12 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n                                          sess.diagnostic())\n     });\n \n+    // If we're actually rustdoc then there's no need to actually compile\n+    // anything, so switch everything to just looping\n+    if sess.opts.actually_rustdoc {\n+        krate = ReplaceBodyWithLoop::new(sess).fold_crate(krate);\n+    }\n+\n     // If we're in rustdoc we're always compiling as an rlib, but that'll trip a\n     // bunch of checks in the `modify` function below. For now just skip this\n     // step entirely if we're rustdoc as it's not too useful anyway."}, {"sha": "bda721d07831012a871c86ce8d35667cead92f23", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=48996f9e759912140ccc98072e9e55fa6480a9d7", "patch": "@@ -565,7 +565,9 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                 control.after_hir_lowering.stop = Compilation::Stop;\n \n                 control.after_parse.callback = box move |state| {\n-                    state.krate = Some(pretty::fold_crate(state.krate.take().unwrap(), ppm));\n+                    state.krate = Some(pretty::fold_crate(state.session,\n+                                                          state.krate.take().unwrap(),\n+                                                          ppm));\n                 };\n                 control.after_hir_lowering.callback = box move |state| {\n                     pretty::print_after_hir_lowering(state.session,\n@@ -587,7 +589,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                 control.after_parse.stop = Compilation::Stop;\n \n                 control.after_parse.callback = box move |state| {\n-                    let krate = pretty::fold_crate(state.krate.take().unwrap(), ppm);\n+                    let krate = pretty::fold_crate(state.session, state.krate.take().unwrap(), ppm);\n                     pretty::print_after_parsing(state.session,\n                                                 state.input,\n                                                 &krate,"}, {"sha": "d930739c9f014b75bff20c5aa5be186f24767c28", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=48996f9e759912140ccc98072e9e55fa6480a9d7", "patch": "@@ -638,13 +638,14 @@ impl UserIdentifiedItem {\n //    ambitious form of the closed RFC #1637. See also [#34511].\n //\n // [#34511]: https://github.com/rust-lang/rust/issues/34511#issuecomment-322340401\n-pub struct ReplaceBodyWithLoop {\n+pub struct ReplaceBodyWithLoop<'a> {\n     within_static_or_const: bool,\n+    sess: &'a Session,\n }\n \n-impl ReplaceBodyWithLoop {\n-    pub fn new() -> ReplaceBodyWithLoop {\n-        ReplaceBodyWithLoop { within_static_or_const: false }\n+impl<'a> ReplaceBodyWithLoop<'a> {\n+    pub fn new(sess: &'a Session) -> ReplaceBodyWithLoop<'a> {\n+        ReplaceBodyWithLoop { within_static_or_const: false, sess }\n     }\n \n     fn run<R, F: FnOnce(&mut Self) -> R>(&mut self, is_const: bool, action: F) -> R {\n@@ -691,7 +692,7 @@ impl ReplaceBodyWithLoop {\n     }\n }\n \n-impl fold::Folder for ReplaceBodyWithLoop {\n+impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n     fn fold_item_kind(&mut self, i: ast::ItemKind) -> ast::ItemKind {\n         let is_const = match i {\n             ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => true,\n@@ -723,34 +724,36 @@ impl fold::Folder for ReplaceBodyWithLoop {\n     }\n \n     fn fold_block(&mut self, b: P<ast::Block>) -> P<ast::Block> {\n-        fn expr_to_block(rules: ast::BlockCheckMode, e: Option<P<ast::Expr>>) -> P<ast::Block> {\n+        fn expr_to_block(rules: ast::BlockCheckMode,\n+                         e: Option<P<ast::Expr>>,\n+                         sess: &Session) -> P<ast::Block> {\n             P(ast::Block {\n                 stmts: e.map(|e| {\n                         ast::Stmt {\n-                            id: ast::DUMMY_NODE_ID,\n+                            id: sess.next_node_id(),\n                             span: e.span,\n                             node: ast::StmtKind::Expr(e),\n                         }\n                     })\n                     .into_iter()\n                     .collect(),\n                 rules,\n-                id: ast::DUMMY_NODE_ID,\n+                id: sess.next_node_id(),\n                 span: syntax_pos::DUMMY_SP,\n             })\n         }\n \n         if !self.within_static_or_const {\n \n-            let empty_block = expr_to_block(BlockCheckMode::Default, None);\n+            let empty_block = expr_to_block(BlockCheckMode::Default, None, self.sess);\n             let loop_expr = P(ast::Expr {\n                 node: ast::ExprKind::Loop(empty_block, None),\n-                id: ast::DUMMY_NODE_ID,\n+                id: self.sess.next_node_id(),\n                 span: syntax_pos::DUMMY_SP,\n                 attrs: ast::ThinVec::new(),\n             });\n \n-            expr_to_block(b.rules, Some(loop_expr))\n+            expr_to_block(b.rules, Some(loop_expr), self.sess)\n \n         } else {\n             fold::noop_fold_block(b, self)\n@@ -829,9 +832,9 @@ fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n     }\n }\n \n-pub fn fold_crate(krate: ast::Crate, ppm: PpMode) -> ast::Crate {\n+pub fn fold_crate(sess: &Session, krate: ast::Crate, ppm: PpMode) -> ast::Crate {\n     if let PpmSource(PpmEveryBodyLoops) = ppm {\n-        let mut fold = ReplaceBodyWithLoop::new();\n+        let mut fold = ReplaceBodyWithLoop::new(sess);\n         fold.fold_crate(krate)\n     } else {\n         krate"}, {"sha": "456a00947ae0a7b60566850c6c6fcc113d18b9c8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=48996f9e759912140ccc98072e9e55fa6480a9d7", "patch": "@@ -10,7 +10,6 @@\n \n use rustc_lint;\n use rustc_driver::{driver, target_features, abort_on_err};\n-use rustc_driver::pretty::ReplaceBodyWithLoop;\n use rustc::session::{self, config};\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::Def;\n@@ -26,7 +25,6 @@ use rustc_metadata::cstore::CStore;\n \n use syntax::codemap;\n use syntax::feature_gate::UnstableFeatures;\n-use syntax::fold::Folder;\n use errors;\n use errors::emitter::ColorConfig;\n \n@@ -157,7 +155,6 @@ pub fn run_core(search_paths: SearchPaths,\n     let control = &driver::CompileController::basic();\n \n     let krate = panictry!(driver::phase_1_parse_input(control, &sess, &input));\n-    let krate = ReplaceBodyWithLoop::new().fold_crate(krate);\n \n     let name = link::find_crate_name(Some(&sess), &krate.attrs, &input);\n "}, {"sha": "ee0d9a7f3e2d23cd9ea92458bdc0697f96281ffd", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=48996f9e759912140ccc98072e9e55fa6480a9d7", "patch": "@@ -31,15 +31,13 @@ use rustc_back::dynamic_lib::DynamicLibrary;\n use rustc_back::tempdir::TempDir;\n use rustc_driver::{self, driver, Compilation};\n use rustc_driver::driver::phase_2_configure_and_expand;\n-use rustc_driver::pretty::ReplaceBodyWithLoop;\n use rustc_metadata::cstore::CStore;\n use rustc_resolve::MakeGlobMap;\n use rustc_trans;\n use rustc_trans::back::link;\n use syntax::ast;\n use syntax::codemap::CodeMap;\n use syntax::feature_gate::UnstableFeatures;\n-use syntax::fold::Folder;\n use syntax_pos::{BytePos, DUMMY_SP, Pos, Span};\n use errors;\n use errors::emitter::ColorConfig;\n@@ -97,7 +95,6 @@ pub fn run(input: &str,\n     let krate = panictry!(driver::phase_1_parse_input(&driver::CompileController::basic(),\n                                                       &sess,\n                                                       &input));\n-    let krate = ReplaceBodyWithLoop::new().fold_crate(krate);\n     let driver::ExpansionResult { defs, mut hir_forest, .. } = {\n         phase_2_configure_and_expand(\n             &sess,"}, {"sha": "ac7809451d152d244a8d55df0a92cc46d697113b", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 48, "deletions": 30, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=48996f9e759912140ccc98072e9e55fa6480a9d7", "patch": "@@ -13,35 +13,53 @@\n #![stable(feature = \"os\", since = \"1.0.0\")]\n #![allow(missing_docs, bad_style, missing_debug_implementations)]\n \n-#[cfg(all(not(dox), any(target_os = \"redox\", unix)))]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use sys::ext as unix;\n-#[cfg(all(not(dox), windows))]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use sys::ext as windows;\n-\n-#[cfg(dox)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use sys::unix_ext as unix;\n-#[cfg(dox)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use sys::windows_ext as windows;\n-\n-#[cfg(any(dox, target_os = \"linux\", target_os = \"l4re\"))]\n-#[doc(cfg(target_os = \"linux\"))]\n-pub mod linux;\n-\n-#[cfg(all(not(dox), target_os = \"android\"))]    pub mod android;\n-#[cfg(all(not(dox), target_os = \"bitrig\"))]     pub mod bitrig;\n-#[cfg(all(not(dox), target_os = \"dragonfly\"))]  pub mod dragonfly;\n-#[cfg(all(not(dox), target_os = \"freebsd\"))]    pub mod freebsd;\n-#[cfg(all(not(dox), target_os = \"haiku\"))]      pub mod haiku;\n-#[cfg(all(not(dox), target_os = \"ios\"))]        pub mod ios;\n-#[cfg(all(not(dox), target_os = \"macos\"))]      pub mod macos;\n-#[cfg(all(not(dox), target_os = \"netbsd\"))]     pub mod netbsd;\n-#[cfg(all(not(dox), target_os = \"openbsd\"))]    pub mod openbsd;\n-#[cfg(all(not(dox), target_os = \"solaris\"))]    pub mod solaris;\n-#[cfg(all(not(dox), target_os = \"emscripten\"))] pub mod emscripten;\n-#[cfg(all(not(dox), target_os = \"fuchsia\"))]    pub mod fuchsia;\n+cfg_if! {\n+    if #[cfg(dox)] {\n+\n+        // When documenting libstd we want to show unix/windows/linux modules as\n+        // these are the \"main modules\" that are used across platforms. This\n+        // should help show platform-specific functionality in a hopefully\n+        // cross-platform way in the documentation\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub use sys::unix_ext as unix;\n+\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub use sys::windows_ext as windows;\n+\n+        #[doc(cfg(target_os = \"linux\"))]\n+        pub mod linux;\n+\n+    } else {\n+\n+        // If we're not documenting libstd then we just expose everything as we\n+        // otherwise would.\n+\n+        #[cfg(target_os = \"android\")]    pub mod android;\n+        #[cfg(target_os = \"bitrig\")]     pub mod bitrig;\n+        #[cfg(target_os = \"dragonfly\")]  pub mod dragonfly;\n+        #[cfg(target_os = \"freebsd\")]    pub mod freebsd;\n+        #[cfg(target_os = \"haiku\")]      pub mod haiku;\n+        #[cfg(target_os = \"ios\")]        pub mod ios;\n+        #[cfg(target_os = \"macos\")]      pub mod macos;\n+        #[cfg(target_os = \"netbsd\")]     pub mod netbsd;\n+        #[cfg(target_os = \"openbsd\")]    pub mod openbsd;\n+        #[cfg(target_os = \"solaris\")]    pub mod solaris;\n+        #[cfg(target_os = \"emscripten\")] pub mod emscripten;\n+        #[cfg(target_os = \"fuchsia\")]    pub mod fuchsia;\n+\n+        #[cfg(any(target_os = \"redox\", unix))]\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub use sys::ext as unix;\n+\n+        #[cfg(windows)]\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub use sys::ext as windows;\n+\n+        #[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n+        pub mod linux;\n+\n+    }\n+}\n \n pub mod raw;"}, {"sha": "be8cb88416bb6561f5fed45ae0a696973df73cc5", "filename": "src/libstd/sys/mod.rs", "status": "modified", "additions": 63, "deletions": 46, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Flibstd%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Flibstd%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fmod.rs?ref=48996f9e759912140ccc98072e9e55fa6480a9d7", "patch": "@@ -32,49 +32,66 @@\n \n #![allow(missing_debug_implementations)]\n \n-pub use self::imp::*;\n-\n-#[cfg(unix)]\n-#[path = \"unix/mod.rs\"]\n-mod imp;\n-\n-#[cfg(windows)]\n-#[path = \"windows/mod.rs\"]\n-mod imp;\n-\n-#[cfg(target_os = \"redox\")]\n-#[path = \"redox/mod.rs\"]\n-mod imp;\n-\n-#[cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))]\n-#[path = \"wasm/mod.rs\"]\n-mod imp;\n-\n-// Import essential modules from both platforms when documenting.\n-\n-#[cfg(all(dox, not(unix)))]\n-use os::linux as platform;\n-\n-#[cfg(all(dox, not(any(unix, target_os = \"redox\"))))]\n-#[path = \"unix/ext/mod.rs\"]\n-pub mod unix_ext;\n-\n-#[cfg(all(dox, any(unix, target_os = \"redox\")))]\n-pub use self::ext as unix_ext;\n-\n-\n-#[cfg(all(dox, not(windows)))]\n-#[macro_use]\n-#[path = \"windows/compat.rs\"]\n-mod compat;\n-\n-#[cfg(all(dox, not(windows)))]\n-#[path = \"windows/c.rs\"]\n-mod c;\n-\n-#[cfg(all(dox, not(windows)))]\n-#[path = \"windows/ext/mod.rs\"]\n-pub mod windows_ext;\n-\n-#[cfg(all(dox, windows))]\n-pub use self::ext as windows_ext;\n+cfg_if! {\n+    if #[cfg(unix)] {\n+        mod unix;\n+        pub use self::unix::*;\n+    } else if #[cfg(windows)] {\n+        mod windows;\n+        pub use self::windows::*;\n+    } else if #[cfg(target_os = \"redox\")] {\n+        mod redox;\n+        pub use self::redox::*;\n+    } else if #[cfg(target_arch = \"wasm32\")] {\n+        mod wasm;\n+        pub use self::wasm::*;\n+    } else {\n+        compile_error!(\"libstd doesn't compile for this platform yet\");\n+    }\n+}\n+\n+// Import essential modules from both platforms when documenting. These are\n+// then later used in the `std::os` module when documenting, for example,\n+// Windows when we're compiling for Linux.\n+\n+#[cfg(dox)]\n+cfg_if! {\n+    if #[cfg(any(unix, target_os = \"redox\"))] {\n+        // On unix we'll document what's already available\n+        pub use self::ext as unix_ext;\n+    } else if #[cfg(target_arch = \"wasm32\")] {\n+        // On wasm right now the module below doesn't compile (missing things\n+        // in `libc` which is empty) so just omit everything with an empty module\n+        #[unstable(issue = \"0\", feature = \"std_internals\")]\n+        pub mod unix_ext {}\n+    } else {\n+        // On other platforms like Windows document the bare bones of unix\n+        use os::linux as platform;\n+        #[path = \"unix/ext/mod.rs\"]\n+        pub mod unix_ext;\n+    }\n+}\n+\n+#[cfg(dox)]\n+cfg_if! {\n+    if #[cfg(windows)] {\n+        // On windows we'll just be documenting what's already available\n+        pub use self::ext as windows_ext;\n+    } else if #[cfg(target_arch = \"wasm32\")] {\n+        // On wasm right now the shim below doesn't compile, so just omit it\n+        #[unstable(issue = \"0\", feature = \"std_internals\")]\n+        pub mod windows_ext {}\n+    } else {\n+        // On all other platforms (aka linux/osx/etc) then pull in a \"minimal\"\n+        // amount of windows goop which ends up compiling\n+        #[macro_use]\n+        #[path = \"windows/compat.rs\"]\n+        mod compat;\n+\n+        #[path = \"windows/c.rs\"]\n+        mod c;\n+\n+        #[path = \"windows/ext/mod.rs\"]\n+        pub mod windows_ext;\n+    }\n+}"}, {"sha": "c4e696e176085e6a57689baf3c398e45f749bee1", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48996f9e759912140ccc98072e9e55fa6480a9d7/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=48996f9e759912140ccc98072e9e55fa6480a9d7", "patch": "@@ -84,6 +84,7 @@ static TARGETS: &'static [&'static str] = &[\n     \"sparc64-unknown-linux-gnu\",\n     \"sparcv9-sun-solaris\",\n     \"wasm32-unknown-emscripten\",\n+    \"wasm32-unknown-unknown\",\n     \"x86_64-linux-android\",\n     \"x86_64-apple-darwin\",\n     \"x86_64-apple-ios\","}]}