{"sha": "728a2db35e76f5126a405db917757ee43910c136", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOGEyZGIzNWU3NmY1MTI2YTQwNWRiOTE3NzU3ZWU0MzkxMGMxMzY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-25T23:26:33Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-26T19:57:13Z"}, "message": "Add expect_ty method to Kind", "tree": {"sha": "c4d20c0a1f44d136171ceef110606b812a1a2faa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4d20c0a1f44d136171ceef110606b812a1a2faa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/728a2db35e76f5126a405db917757ee43910c136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/728a2db35e76f5126a405db917757ee43910c136", "html_url": "https://github.com/rust-lang/rust/commit/728a2db35e76f5126a405db917757ee43910c136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/728a2db35e76f5126a405db917757ee43910c136/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "597f432489f12a3f33419daa039ccef11a12c4fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/597f432489f12a3f33419daa039ccef11a12c4fd", "html_url": "https://github.com/rust-lang/rust/commit/597f432489f12a3f33419daa039ccef11a12c4fd"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "ed3da31fb89bd53a4ff111b65c2eb008cdb4cac6", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/728a2db35e76f5126a405db917757ee43910c136/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728a2db35e76f5126a405db917757ee43910c136/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=728a2db35e76f5126a405db917757ee43910c136", "patch": "@@ -123,6 +123,16 @@ impl<'tcx> Kind<'tcx> {\n             }\n         }\n     }\n+\n+    /// Unpack the `Kind` as a type when it is known certainly to be a type.\n+    /// This is true in cases where `Substs` is used in places where the kinds are known\n+    /// to be limited (e.g. in tuples, where the only parameters are type parameters).\n+    pub fn expect_ty(self) -> Ty<'tcx> {\n+        match self.unpack() {\n+            UnpackedKind::Type(ty) => ty,\n+            _ => bug!(\"expected a type, but found another kind\"),\n+        }\n+    }\n }\n \n impl<'a, 'tcx> Lift<'tcx> for Kind<'a> {\n@@ -174,8 +184,7 @@ pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;\n \n impl<'a, 'gcx, 'tcx> InternalSubsts<'tcx> {\n     /// Creates a `InternalSubsts` that maps each generic parameter to itself.\n-    pub fn identity_for_item(tcx: TyCtxt<'a, 'gcx, 'tcx>, def_id: DefId)\n-                             -> SubstsRef<'tcx> {\n+    pub fn identity_for_item(tcx: TyCtxt<'a, 'gcx, 'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n         Self::for_item(tcx, def_id, |param, _| {\n             tcx.mk_param_from_def(param)\n         })"}]}