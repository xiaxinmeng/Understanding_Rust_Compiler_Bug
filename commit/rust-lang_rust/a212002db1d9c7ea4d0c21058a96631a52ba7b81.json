{"sha": "a212002db1d9c7ea4d0c21058a96631a52ba7b81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMTIwMDJkYjFkOWM3ZWE0ZDBjMjEwNThhOTY2MzFhNTJiYTdiODE=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-03-21T08:26:27Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2017-03-21T20:29:38Z"}, "message": "Remove unused adt-def insertion by constructor DefIndex", "tree": {"sha": "7674facb906fcd0d932c5bbb3e6f61fe7f5089c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7674facb906fcd0d932c5bbb3e6f61fe7f5089c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a212002db1d9c7ea4d0c21058a96631a52ba7b81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a212002db1d9c7ea4d0c21058a96631a52ba7b81", "html_url": "https://github.com/rust-lang/rust/commit/a212002db1d9c7ea4d0c21058a96631a52ba7b81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a212002db1d9c7ea4d0c21058a96631a52ba7b81/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58c701f5c7dc26d9b55c631006ece52abe1ddce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/58c701f5c7dc26d9b55c631006ece52abe1ddce2", "html_url": "https://github.com/rust-lang/rust/commit/58c701f5c7dc26d9b55c631006ece52abe1ddce2"}], "stats": {"total": 12, "additions": 2, "deletions": 10}, "files": [{"sha": "ba6d552e134dcd5d5c4f80e77c7a2c1e2fa38e09", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a212002db1d9c7ea4d0c21058a96631a52ba7b81/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a212002db1d9c7ea4d0c21058a96631a52ba7b81/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=a212002db1d9c7ea4d0c21058a96631a52ba7b81", "patch": "@@ -558,7 +558,6 @@ impl<'a, 'tcx> CrateMetadata {\n             EntryKind::Union(_, _) => ty::AdtKind::Union,\n             _ => bug!(\"get_adt_def called on a non-ADT {:?}\", did),\n         };\n-        let mut ctor_index = None;\n         let variants = if let ty::AdtKind::Enum = kind {\n             item.children\n                 .decode(self)\n@@ -570,8 +569,7 @@ impl<'a, 'tcx> CrateMetadata {\n                 })\n                 .collect()\n         } else {\n-            let (variant, struct_ctor) = self.get_variant(&item, item_id, tcx);\n-            ctor_index = struct_ctor;\n+            let (variant, _struct_ctor) = self.get_variant(&item, item_id, tcx);\n             vec![variant]\n         };\n         let (kind, repr) = match item.kind {\n@@ -581,13 +579,7 @@ impl<'a, 'tcx> CrateMetadata {\n             _ => bug!(\"get_adt_def called on a non-ADT {:?}\", did),\n         };\n \n-        let adt = tcx.alloc_adt_def(did, kind, variants, repr);\n-        if let Some(ctor_index) = ctor_index {\n-            // Make adt definition available through constructor id as well.\n-            tcx.maps.adt_def.borrow_mut().insert(self.local_def_id(ctor_index), adt);\n-        }\n-\n-        adt\n+        tcx.alloc_adt_def(did, kind, variants, repr)\n     }\n \n     pub fn get_predicates(&self,"}]}