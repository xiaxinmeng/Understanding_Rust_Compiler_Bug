{"sha": "ba9d01be67a97dd6762935762172e37ee22083ae", "node_id": "C_kwDOAAsO6NoAKGJhOWQwMWJlNjdhOTdkZDY3NjI5MzU3NjIxNzJlMzdlZTIyMDgzYWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-21T15:27:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-21T15:27:56Z"}, "message": "Auto merge of #98450 - lqd:doc-metadata, r=lqd,GuillaumeGomez\n\nRemove more attributes from metadata\n\nA lot of the attributes that are currently stored in the metadata aren't used at all. The biggest metadata usage comes from the doc attributes currently but they are needed by rustdoc so we only removed the ones that cannot be used in downstream crates (doc comments on private items).\n\nr? `@ghost`", "tree": {"sha": "12b8991b22d48979054ee13dc8019ae02f31972a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12b8991b22d48979054ee13dc8019ae02f31972a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba9d01be67a97dd6762935762172e37ee22083ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9d01be67a97dd6762935762172e37ee22083ae", "html_url": "https://github.com/rust-lang/rust/commit/ba9d01be67a97dd6762935762172e37ee22083ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba9d01be67a97dd6762935762172e37ee22083ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "657f246812ab2684e3c3954b1c77f98fd59e0b21", "url": "https://api.github.com/repos/rust-lang/rust/commits/657f246812ab2684e3c3954b1c77f98fd59e0b21", "html_url": "https://github.com/rust-lang/rust/commit/657f246812ab2684e3c3954b1c77f98fd59e0b21"}, {"sha": "41263d2898121f46d7a6c35a3f106d3894299f4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/41263d2898121f46d7a6c35a3f106d3894299f4b", "html_url": "https://github.com/rust-lang/rust/commit/41263d2898121f46d7a6c35a3f106d3894299f4b"}], "stats": {"total": 125, "additions": 111, "deletions": 14}, "files": [{"sha": "afa0f6fcb80f569e9b54ebf8f6b94925782baae4", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ba9d01be67a97dd6762935762172e37ee22083ae/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9d01be67a97dd6762935762172e37ee22083ae/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=ba9d01be67a97dd6762935762172e37ee22083ae", "patch": "@@ -296,20 +296,24 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     // Lints:\n     ungated!(\n-        warn, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+        warn, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n+        DuplicatesOk, @only_local: true,\n     ),\n     ungated!(\n-        allow, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+        allow, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n+        DuplicatesOk, @only_local: true,\n     ),\n     gated!(\n         expect, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk,\n         lint_reasons, experimental!(expect)\n     ),\n     ungated!(\n-        forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+        forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n+        DuplicatesOk, @only_local: true,\n     ),\n     ungated!(\n-        deny, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+        deny, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#),\n+        DuplicatesOk, @only_local: true,\n     ),\n     ungated!(must_use, Normal, template!(Word, NameValueStr: \"reason\"), FutureWarnFollowing),\n     gated!(\n@@ -340,7 +344,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     ungated!(link_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(no_link, Normal, template!(Word), WarnFollowing),\n-    ungated!(repr, Normal, template!(List: \"C\"), DuplicatesOk),\n+    ungated!(repr, Normal, template!(List: \"C\"), DuplicatesOk, @only_local: true),\n     ungated!(export_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(link_section, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(no_mangle, Normal, template!(Word), WarnFollowing, @only_local: true),\n@@ -382,7 +386,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ungated!(inline, Normal, template!(Word, List: \"always|never\"), FutureWarnFollowing, @only_local: true),\n     ungated!(cold, Normal, template!(Word), WarnFollowing, @only_local: true),\n     ungated!(no_builtins, CrateLevel, template!(Word), WarnFollowing),\n-    ungated!(target_feature, Normal, template!(List: r#\"enable = \"name\"\"#), DuplicatesOk),\n+    ungated!(\n+        target_feature, Normal, template!(List: r#\"enable = \"name\"\"#),\n+        DuplicatesOk, @only_local: true,\n+    ),\n     ungated!(track_caller, Normal, template!(Word), WarnFollowing),\n     gated!(\n         no_sanitize, Normal,\n@@ -488,18 +495,24 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes: Stability, deprecation, and unsafe:\n     // ==========================================================================\n \n-    ungated!(feature, CrateLevel, template!(List: \"name1, name2, ...\"), DuplicatesOk),\n+    ungated!(\n+        feature, CrateLevel,\n+        template!(List: \"name1, name2, ...\"), DuplicatesOk, @only_local: true,\n+    ),\n     // DuplicatesOk since it has its own validation\n     ungated!(\n-        stable, Normal, template!(List: r#\"feature = \"name\", since = \"version\"\"#), DuplicatesOk,\n+        stable, Normal,\n+        template!(List: r#\"feature = \"name\", since = \"version\"\"#), DuplicatesOk, @only_local: true,\n     ),\n     ungated!(\n         unstable, Normal,\n         template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#), DuplicatesOk,\n     ),\n     ungated!(rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n-    ungated!(rustc_const_stable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n-    ungated!(rustc_safe_intrinsic, Normal, template!(Word), DuplicatesOk),\n+    ungated!(\n+        rustc_const_stable, Normal,\n+        template!(List: r#\"feature = \"name\"\"#), DuplicatesOk, @only_local: true,\n+    ),\n     ungated!(\n         rustc_default_body_unstable, Normal,\n         template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#), DuplicatesOk\n@@ -517,6 +530,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         allow_internal_unsafe, Normal, template!(Word), WarnFollowing,\n         \"allow_internal_unsafe side-steps the unsafe_code lint\",\n     ),\n+    ungated!(rustc_safe_intrinsic, Normal, template!(Word), DuplicatesOk),\n     rustc_attr!(rustc_allowed_through_unstable_modules, Normal, template!(Word), WarnFollowing,\n     \"rustc_allowed_through_unstable_modules special cases accidental stabilizations of stable items \\\n     through unstable paths\"),\n@@ -823,6 +837,8 @@ pub fn is_builtin_attr_name(name: Symbol) -> bool {\n     BUILTIN_ATTRIBUTE_MAP.get(&name).is_some()\n }\n \n+/// Whether this builtin attribute is only used in the local crate.\n+/// If so, it is not encoded in the crate metadata.\n pub fn is_builtin_only_local(name: Symbol) -> bool {\n     BUILTIN_ATTRIBUTE_MAP.get(&name).map_or(false, |attr| attr.only_local)\n }"}, {"sha": "377e3f013be1f452d28fcb1ddbd9e8c98212350b", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ba9d01be67a97dd6762935762172e37ee22083ae/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9d01be67a97dd6762935762172e37ee22083ae/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ba9d01be67a97dd6762935762172e37ee22083ae", "patch": "@@ -3,6 +3,7 @@ use crate::rmeta::def_path_hash_map::DefPathHashMapRef;\n use crate::rmeta::table::TableBuilder;\n use crate::rmeta::*;\n \n+use rustc_ast::Attribute;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_data_structures::memmap::{Mmap, MmapMut};\n@@ -764,6 +765,40 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     }\n }\n \n+/// Returns whether an attribute needs to be recorded in metadata, that is, if it's usable and\n+/// useful in downstream crates. Local-only attributes are an obvious example, but some\n+/// rustdoc-specific attributes can equally be of use while documenting the current crate only.\n+///\n+/// Removing these superfluous attributes speeds up compilation by making the metadata smaller.\n+///\n+/// Note: the `is_def_id_public` parameter is used to cache whether the given `DefId` has a public\n+/// visibility: this is a piece of data that can be computed once per defid, and not once per\n+/// attribute. Some attributes would only be usable downstream if they are public.\n+#[inline]\n+fn should_encode_attr(\n+    tcx: TyCtxt<'_>,\n+    attr: &Attribute,\n+    def_id: LocalDefId,\n+    is_def_id_public: &mut Option<bool>,\n+) -> bool {\n+    if rustc_feature::is_builtin_only_local(attr.name_or_empty()) {\n+        // Attributes marked local-only don't need to be encoded for downstream crates.\n+        false\n+    } else if attr.doc_str().is_some() {\n+        // We keep all public doc comments because they might be \"imported\" into downstream crates\n+        // if they use `#[doc(inline)]` to copy an item's documentation into their own.\n+        *is_def_id_public.get_or_insert_with(|| {\n+            tcx.privacy_access_levels(()).get_effective_vis(def_id).is_some()\n+        })\n+    } else if attr.has_name(sym::doc) {\n+        // If this is a `doc` attribute, and it's marked `inline` (as in `#[doc(inline)]`), we can\n+        // remove it. It won't be inlinable in downstream crates.\n+        attr.meta_item_list().map(|l| l.iter().any(|l| !l.has_name(sym::inline))).unwrap_or(false)\n+    } else {\n+        true\n+    }\n+}\n+\n fn should_encode_visibility(def_kind: DefKind) -> bool {\n     match def_kind {\n         DefKind::Mod\n@@ -1126,12 +1161,14 @@ fn should_encode_trait_impl_trait_tys<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) ->\n \n impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_attrs(&mut self, def_id: LocalDefId) {\n-        let mut attrs = self\n-            .tcx\n+        let tcx = self.tcx;\n+        let mut is_public: Option<bool> = None;\n+\n+        let mut attrs = tcx\n             .hir()\n-            .attrs(self.tcx.hir().local_def_id_to_hir_id(def_id))\n+            .attrs(tcx.hir().local_def_id_to_hir_id(def_id))\n             .iter()\n-            .filter(|attr| !rustc_feature::is_builtin_only_local(attr.name_or_empty()));\n+            .filter(move |attr| should_encode_attr(tcx, attr, def_id, &mut is_public));\n \n         record_array!(self.tables.attributes[def_id.to_def_id()] <- attrs.clone());\n         if attrs.any(|attr| attr.may_have_doc_links()) {"}, {"sha": "bb3a5c94d419b41eb2400a8b67e0f65144b14c5a", "filename": "src/test/ui/attr-from-macro.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ba9d01be67a97dd6762935762172e37ee22083ae/src%2Ftest%2Fui%2Fattr-from-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9d01be67a97dd6762935762172e37ee22083ae/src%2Ftest%2Fui%2Fattr-from-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-from-macro.rs?ref=ba9d01be67a97dd6762935762172e37ee22083ae", "patch": "@@ -0,0 +1,20 @@\n+// aux-build:attr-from-macro.rs\n+// run-pass\n+\n+extern crate attr_from_macro;\n+\n+attr_from_macro::creator! {\n+    struct Foo;\n+    enum Bar;\n+    enum FooBar;\n+}\n+\n+fn main() {\n+    // Checking the `repr(u32)` on the enum.\n+    assert_eq!(4, std::mem::size_of::<Bar>());\n+    // Checking the `repr(u16)` on the enum.\n+    assert_eq!(2, std::mem::size_of::<FooBar>());\n+\n+    // Checking the Debug impl on the types.\n+    eprintln!(\"{:?} {:?} {:?}\", Foo, Bar::A, FooBar::A);\n+}"}, {"sha": "9b388675c80bf1fcc362172000e6890aadc85290", "filename": "src/test/ui/auxiliary/attr-from-macro.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ba9d01be67a97dd6762935762172e37ee22083ae/src%2Ftest%2Fui%2Fauxiliary%2Fattr-from-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9d01be67a97dd6762935762172e37ee22083ae/src%2Ftest%2Fui%2Fauxiliary%2Fattr-from-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fattr-from-macro.rs?ref=ba9d01be67a97dd6762935762172e37ee22083ae", "patch": "@@ -0,0 +1,15 @@\n+#[macro_export]\n+macro_rules! creator {\n+    (struct $name1:ident; enum $name2:ident; enum $name3:ident;) => {\n+        #[derive(Debug)]\n+        pub struct $name1;\n+\n+        #[derive(Debug)]\n+        #[repr(u32)]\n+        pub enum $name2 { A }\n+\n+        #[derive(Debug)]\n+        #[repr(u16)]\n+        pub enum $name3 { A }\n+    }\n+}"}, {"sha": "09a289d85daa7f36962d1acbc1168dbafe36c0c7", "filename": "src/test/ui/query-visibility.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba9d01be67a97dd6762935762172e37ee22083ae/src%2Ftest%2Fui%2Fquery-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba9d01be67a97dd6762935762172e37ee22083ae/src%2Ftest%2Fui%2Fquery-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquery-visibility.rs?ref=ba9d01be67a97dd6762935762172e37ee22083ae", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+// Check that it doesn't panic when `Input` gets its visibility checked.\n+\n+#![crate_type = \"lib\"]\n+\n+pub trait Layer<\n+    /// Hello.\n+    Input,\n+> {}"}]}