{"sha": "5279cdbefbdef2f71febb1ab430060e7f0a4021e", "node_id": "C_kwDOAAsO6NoAKDUyNzljZGJlZmJkZWYyZjcxZmViYjFhYjQzMDA2MGU3ZjBhNDAyMWU", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-18T16:38:41Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-05-18T17:22:04Z"}, "message": "Include self type in generated getter/setter docs", "tree": {"sha": "da059ca4fff4b8857ebf11dd300efac8b8d45f39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da059ca4fff4b8857ebf11dd300efac8b8d45f39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5279cdbefbdef2f71febb1ab430060e7f0a4021e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5279cdbefbdef2f71febb1ab430060e7f0a4021e", "html_url": "https://github.com/rust-lang/rust/commit/5279cdbefbdef2f71febb1ab430060e7f0a4021e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5279cdbefbdef2f71febb1ab430060e7f0a4021e/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6b17c7a59538de37e34878c2c148e2ac7deeb8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6b17c7a59538de37e34878c2c148e2ac7deeb8d", "html_url": "https://github.com/rust-lang/rust/commit/b6b17c7a59538de37e34878c2c148e2ac7deeb8d"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "d22d8c831fbe2f26f1f209cae6cc7f8c0a1bfa69", "filename": "crates/ide-assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5279cdbefbdef2f71febb1ab430060e7f0a4021e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5279cdbefbdef2f71febb1ab430060e7f0a4021e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=5279cdbefbdef2f71febb1ab430060e7f0a4021e", "patch": "@@ -26,7 +26,7 @@ use crate::assist_context::{AssistContext, Assists};\n // ```\n // pub struct S;\n // impl S {\n-//     /// Sets the length.\n+//     /// Sets the length of this [`S`].\n //     ///\n //     /// # Errors\n //     ///\n@@ -183,11 +183,13 @@ fn introduction_builder(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Strin\n         let ret_ty = hir_func.ret_type(ctx.db());\n         let self_ty = imp.self_ty(ctx.db());\n         let name = ast_func.name()?.to_string();\n+        let linkable_self_ty = self_type_without_lifetimes(ast_func);\n+        let linkable_self_ty = linkable_self_ty.as_deref();\n \n         let intro_for_new = || {\n             let is_new = name == \"new\";\n             if is_new && ret_ty == self_ty {\n-                Some(format!(\"Creates a new [`{}`].\", self_type_without_lifetimes(ast_func)?))\n+                Some(format!(\"Creates a new [`{}`].\", linkable_self_ty?))\n             } else {\n                 None\n             }\n@@ -204,15 +206,15 @@ fn introduction_builder(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Strin\n                 let mut what = name.trim_end_matches(\"_mut\").replace('_', \" \");\n                 if what == \"len\" {\n                     what = \"length\".into()\n-                };\n+                }\n                 let reference = if ret_ty.is_mutable_reference() {\n                     \" a mutable reference to\"\n                 } else if ret_ty.is_reference() {\n                     \" a reference to\"\n                 } else {\n                     \"\"\n                 };\n-                Some(format!(\"Returns{reference} the {what}.\"))\n+                Some(format!(\"Returns{reference} the {what} of this [`{}`].\", linkable_self_ty?))\n             }\n             _ => None,\n         };\n@@ -226,7 +228,7 @@ fn introduction_builder(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Strin\n             if what == \"len\" {\n                 what = \"length\".into()\n             };\n-            Some(format!(\"Sets the {what}.\"))\n+            Some(format!(\"Sets the {what} of this [`{}`].\", linkable_self_ty?))\n         };\n \n         if let Some(intro) = intro_for_new() {\n@@ -325,11 +327,11 @@ fn self_type_without_lifetimes(ast_func: &ast::Fn) -> Option<String> {\n         _ => return None,\n     };\n     let mut name = path_segment.name_ref()?.to_string();\n-    let generics = path_segment\n-        .generic_arg_list()?\n-        .generic_args()\n-        .filter(|generic| matches!(generic, ast::GenericArg::TypeArg(_)))\n-        .map(|generic| generic.to_string());\n+    let generics = path_segment.generic_arg_list().into_iter().flat_map(|list| {\n+        list.generic_args()\n+            .filter(|generic| matches!(generic, ast::GenericArg::TypeArg(_)))\n+            .map(|generic| generic.to_string())\n+    });\n     let generics: String = generics.format(\", \").to_string();\n     if !generics.is_empty() {\n         name.push('<');\n@@ -970,6 +972,26 @@ pub trait MyTrait {\n         check_assist(\n             generate_documentation_template,\n             r#\"\n+pub struct String(u8);\n+impl String {\n+    pub fn new$0(x: u8) -> String {\n+        String(x)\n+    }\n+}\n+\"#,\n+            r#\"\n+pub struct String(u8);\n+impl String {\n+    /// Creates a new [`String`].\n+    pub fn new(x: u8) -> String {\n+        String(x)\n+    }\n+}\n+\"#,\n+        );\n+        check_assist(\n+            generate_documentation_template,\n+            r#\"\n #[derive(Debug, PartialEq)]\n pub struct MyGenericStruct<T> {\n     pub x: T,\n@@ -1193,7 +1215,7 @@ impl S {\n             r#\"\n pub struct S;\n impl S {\n-    /// Returns the speed.\n+    /// Returns the speed of this [`S`].\n     pub fn speed(&self) -> f32 { 0.0 }\n }\n \"#,\n@@ -1209,7 +1231,7 @@ impl S {\n             r#\"\n pub struct S;\n impl S {\n-    /// Returns a reference to the data.\n+    /// Returns a reference to the data of this [`S`].\n     pub fn data(&self) -> &[u8] { &[] }\n }\n \"#,\n@@ -1225,7 +1247,7 @@ impl S {\n             r#\"\n pub struct S;\n impl S {\n-    /// Returns a mutable reference to the data.\n+    /// Returns a mutable reference to the data of this [`S`].\n     pub fn data(&mut self) -> &mut [u8] { &mut [] }\n }\n \"#,\n@@ -1241,7 +1263,7 @@ impl S {\n             r#\"\n pub struct S;\n impl S {\n-    /// Returns a mutable reference to the data.\n+    /// Returns a mutable reference to the data of this [`S`].\n     pub fn data_mut(&mut self) -> &mut [u8] { &mut [] }\n }\n \"#,\n@@ -1281,7 +1303,7 @@ impl S {\n             r#\"\n pub struct S;\n impl S {\n-    /// Sets the data.\n+    /// Sets the data of this [`S`].\n     pub fn set_data(&mut self, data: Vec<u8>) {}\n }\n \"#,\n@@ -1297,7 +1319,7 @@ impl S {\n             r#\"\n pub struct S;\n impl S {\n-    /// Sets the domain name.\n+    /// Sets the domain name of this [`S`].\n     pub fn set_domain_name(&mut self, name: String) {}\n }\n \"#,"}, {"sha": "69d754d4f70705c45f494a9fa68c79b25823af8a", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5279cdbefbdef2f71febb1ab430060e7f0a4021e/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5279cdbefbdef2f71febb1ab430060e7f0a4021e/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=5279cdbefbdef2f71febb1ab430060e7f0a4021e", "patch": "@@ -900,7 +900,7 @@ impl S {\n         r#####\"\n pub struct S;\n impl S {\n-    /// Sets the length.\n+    /// Sets the length of this [`S`].\n     ///\n     /// # Errors\n     ///"}]}