{"sha": "17934e5c29509fe72dbf6228033ab632919dba95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OTM0ZTVjMjk1MDlmZTcyZGJmNjIyODAzM2FiNjMyOTE5ZGJhOTU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-23T20:45:32Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-23T20:45:32Z"}, "message": "Do not include attributes in trait item spans.\n\n(And other kinds of items).", "tree": {"sha": "eda68371b90a65caf5f687f9b3f24f078978807c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eda68371b90a65caf5f687f9b3f24f078978807c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17934e5c29509fe72dbf6228033ab632919dba95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17934e5c29509fe72dbf6228033ab632919dba95", "html_url": "https://github.com/rust-lang/rust/commit/17934e5c29509fe72dbf6228033ab632919dba95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17934e5c29509fe72dbf6228033ab632919dba95/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a", "html_url": "https://github.com/rust-lang/rust/commit/6b29a7d5641e5242e1f3459b290e2c7f8e49e85a"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "68006a8979a6468c702fe7d0497a869d830c9e52", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17934e5c29509fe72dbf6228033ab632919dba95/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17934e5c29509fe72dbf6228033ab632919dba95/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=17934e5c29509fe72dbf6228033ab632919dba95", "patch": "@@ -1151,8 +1151,8 @@ impl<'a> Parser<'a> {\n             &token::CloseDelim(token::Brace),\n             seq_sep_none(),\n             |p| {\n-            let lo = p.span.lo;\n             let mut attrs = p.parse_outer_attributes();\n+            let lo = p.span.lo;\n \n             let (name, node) = if try!(p.eat_keyword(keywords::Type)) {\n                 let TyParam {ident, bounds, default, ..} = try!(p.parse_ty_param());\n@@ -3409,8 +3409,8 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        let lo = self.span.lo;\n         let attrs = self.parse_outer_attributes();\n+        let lo = self.span.lo;\n \n         Ok(Some(if self.check_keyword(keywords::Let) {\n             check_expected_item(self, &attrs);\n@@ -4304,8 +4304,8 @@ impl<'a> Parser<'a> {\n \n     /// Parse an impl item.\n     pub fn parse_impl_item(&mut self) -> PResult<P<ImplItem>> {\n-        let lo = self.span.lo;\n         let mut attrs = self.parse_outer_attributes();\n+        let lo = self.span.lo;\n         let vis = try!(self.parse_visibility());\n         let (name, node) = if try!(self.eat_keyword(keywords::Type)) {\n             let name = try!(self.parse_ident());\n@@ -5380,9 +5380,8 @@ impl<'a> Parser<'a> {\n \n     /// Parse a foreign item.\n     fn parse_foreign_item(&mut self) -> PResult<Option<P<ForeignItem>>> {\n-        let lo = self.span.lo;\n-\n         let attrs = self.parse_outer_attributes();\n+        let lo = self.span.lo;\n         let visibility = try!(self.parse_visibility());\n \n         if self.check_keyword(keywords::Static) {"}]}