{"sha": "7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNmZkZWYwZTkyYTg4NjU3MjhmMTMwZmRiZWI2ZDBhMWRiZTczMDc=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-01-18T01:28:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-18T01:28:15Z"}, "message": "Rollup merge of #68256 - estebank:bad-sugg-span, r=petrochenkov\n\nDo not ICE on malformed suggestion spans\n\nUnder the assumption that suggestions are by their very nature always \"best effort\", it is ok if we don't display them instead of having an ICE. The underlying issue of the malformed span being _created_ is left unaddressed.\n\nFix #67567.\n\nr? @petrochenkov", "tree": {"sha": "7674f06fb3f2d5dffaf3d71ff42ba92c1d6ef667", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7674f06fb3f2d5dffaf3d71ff42ba92c1d6ef667"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeIl8wCRBK7hj4Ov3rIwAAdHIIAF4tC6gwSsb+dB/nwsnODuZ/\n5YLmtRdfUqs77KpE/tvwzzjz/+IjnMvcHA0YuNh1S1kq852trdEVS27keC5ye95p\nzXMTfDfMYb3A95CEOUWHbizp91ENMMugQoTaxhwl8teMiEAPZB5DSohNeNQI5sUi\nlkk/UFdpy8inpTHCtEidWPk2s+PkqBtq2SYHkt/Y+lG3z8w4o49Pcp+KlFA8snpc\nLTFerUWlibC+BB05GKdCZnx8Wf1fhETow4EI2EeFErC/uT6Rz/CrieRdQczD02Zs\nomt1VgdkXpPVjVXvvNNcoYUr2yy4KGVWpDl3D4PC2+Ws8xH1AsrKiI12VjWyk6A=\n=c9S6\n-----END PGP SIGNATURE-----\n", "payload": "tree 7674f06fb3f2d5dffaf3d71ff42ba92c1d6ef667\nparent fca3264406c5c8d08c061f6f68ac69c84b0a8a75\nparent 03240e1359f68bdddcdb236f3a89f9907b907449\nauthor Tyler Mandry <tmandry@gmail.com> 1579310895 -0800\ncommitter GitHub <noreply@github.com> 1579310895 -0800\n\nRollup merge of #68256 - estebank:bad-sugg-span, r=petrochenkov\n\nDo not ICE on malformed suggestion spans\n\nUnder the assumption that suggestions are by their very nature always \"best effort\", it is ok if we don't display them instead of having an ICE. The underlying issue of the malformed span being _created_ is left unaddressed.\n\nFix #67567.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307", "html_url": "https://github.com/rust-lang/rust/commit/7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fca3264406c5c8d08c061f6f68ac69c84b0a8a75", "url": "https://api.github.com/repos/rust-lang/rust/commits/fca3264406c5c8d08c061f6f68ac69c84b0a8a75", "html_url": "https://github.com/rust-lang/rust/commit/fca3264406c5c8d08c061f6f68ac69c84b0a8a75"}, {"sha": "03240e1359f68bdddcdb236f3a89f9907b907449", "url": "https://api.github.com/repos/rust-lang/rust/commits/03240e1359f68bdddcdb236f3a89f9907b907449", "html_url": "https://github.com/rust-lang/rust/commit/03240e1359f68bdddcdb236f3a89f9907b907449"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "b0e0cb611afaffb60711b97e46c21e669ff2d4dc", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307", "patch": "@@ -1476,6 +1476,15 @@ impl EmitterWriter {\n             None => return Ok(()),\n         };\n \n+        // Render the replacements for each suggestion\n+        let suggestions = suggestion.splice_lines(&**sm);\n+\n+        if suggestions.is_empty() {\n+            // Suggestions coming from macros can have malformed spans. This is a heavy handed\n+            // approach to avoid ICEs by ignoring the suggestion outright.\n+            return Ok(());\n+        }\n+\n         let mut buffer = StyledBuffer::new();\n \n         // Render the suggestion message\n@@ -1492,9 +1501,6 @@ impl EmitterWriter {\n             Some(Style::HeaderMsg),\n         );\n \n-        // Render the replacements for each suggestion\n-        let suggestions = suggestion.splice_lines(&**sm);\n-\n         let mut row_num = 2;\n         let mut notice_capitalization = false;\n         for (complete, parts, only_capitalization) in suggestions.iter().take(MAX_SUGGESTIONS) {\n@@ -1505,7 +1511,9 @@ impl EmitterWriter {\n             let show_underline = !(parts.len() == 1 && parts[0].snippet.trim() == complete.trim())\n                 && complete.lines().count() == 1;\n \n-            let lines = sm.span_to_lines(parts[0].span).unwrap();\n+            let lines = sm\n+                .span_to_lines(parts[0].span)\n+                .expect(\"span_to_lines failed when emitting suggestion\");\n \n             assert!(!lines.lines.is_empty());\n "}, {"sha": "827e9b831f32d711978c1b0c960fc90aabc4ab49", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307", "patch": "@@ -10,6 +10,7 @@\n \n pub use emitter::ColorConfig;\n \n+use log::debug;\n use Level::*;\n \n use emitter::{is_case_difference, Emitter, EmitterWriter};\n@@ -174,6 +175,15 @@ impl CodeSuggestion {\n \n         self.substitutions\n             .iter()\n+            .filter(|subst| {\n+                // Suggestions coming from macros can have malformed spans. This is a heavy\n+                // handed approach to avoid ICEs by ignoring the suggestion outright.\n+                let invalid = subst.parts.iter().any(|item| cm.is_valid_span(item.span).is_err());\n+                if invalid {\n+                    debug!(\"splice_lines: suggestion contains an invalid span: {:?}\", subst);\n+                }\n+                !invalid\n+            })\n             .cloned()\n             .map(|mut substitution| {\n                 // Assumption: all spans are in the same file, and all spans"}, {"sha": "9c7c0f0c8b0eca79346dd05357cf2fede430baa2", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307", "patch": "@@ -473,20 +473,23 @@ impl SourceMap {\n         lo.line != hi.line\n     }\n \n-    pub fn span_to_lines(&self, sp: Span) -> FileLinesResult {\n-        debug!(\"span_to_lines(sp={:?})\", sp);\n-\n+    pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {\n         let lo = self.lookup_char_pos(sp.lo());\n         debug!(\"span_to_lines: lo={:?}\", lo);\n         let hi = self.lookup_char_pos(sp.hi());\n         debug!(\"span_to_lines: hi={:?}\", hi);\n-\n         if lo.file.start_pos != hi.file.start_pos {\n             return Err(SpanLinesError::DistinctSources(DistinctSources {\n                 begin: (lo.file.name.clone(), lo.file.start_pos),\n                 end: (hi.file.name.clone(), hi.file.start_pos),\n             }));\n         }\n+        Ok((lo, hi))\n+    }\n+\n+    pub fn span_to_lines(&self, sp: Span) -> FileLinesResult {\n+        debug!(\"span_to_lines(sp={:?})\", sp);\n+        let (lo, hi) = self.is_valid_span(sp)?;\n         assert!(hi.line >= lo.line);\n \n         let mut lines = Vec::with_capacity(hi.line - lo.line + 1);"}, {"sha": "0d7fb845a40eeffb1cba2bc8193a1c8455e27d92", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=7f6fdef0e92a8865728f130fdbeb6d0a1dbe7307", "patch": "@@ -10,7 +10,7 @@ error: internal compiler error: mutable allocation in constant\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:346:17\n+thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:356:17\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic"}]}