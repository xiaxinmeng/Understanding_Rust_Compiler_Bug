{"sha": "63a462f37ca584e1a585a69e30823ce25d4d252f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYTQ2MmYzN2NhNTg0ZTFhNTg1YTY5ZTMwODIzY2UyNWQ0ZDI1MmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-24T22:57:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-25T09:59:18Z"}, "message": "Switch to TryFrom", "tree": {"sha": "005ab4d5b50f7d031be9f4056bd1fccd68473587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/005ab4d5b50f7d031be9f4056bd1fccd68473587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63a462f37ca584e1a585a69e30823ce25d4d252f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63a462f37ca584e1a585a69e30823ce25d4d252f", "html_url": "https://github.com/rust-lang/rust/commit/63a462f37ca584e1a585a69e30823ce25d4d252f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63a462f37ca584e1a585a69e30823ce25d4d252f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc2151085e9b117bc87307bf47edf3d17a170b49", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2151085e9b117bc87307bf47edf3d17a170b49", "html_url": "https://github.com/rust-lang/rust/commit/dc2151085e9b117bc87307bf47edf3d17a170b49"}], "stats": {"total": 116, "additions": 63, "deletions": 53}, "files": [{"sha": "4ea26a55082c7dc77b3d80b170876f6d155e799d", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=63a462f37ca584e1a585a69e30823ce25d4d252f", "patch": "@@ -60,7 +60,6 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n             .collect::<Vec<SmolStr>>();\n         let has_more_derives = !new_attr_input.is_empty();\n         let new_attr_input = new_attr_input.iter().sep_by(\", \").surround_with(\"(\", \")\").to_string();\n-        let new_attr_input_len = new_attr_input.len();\n \n         let mut buf = String::new();\n         buf.push_str(\"\\n\\nimpl \");\n@@ -70,8 +69,9 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n         buf.push_str(\" {\\n\");\n \n         let cursor_delta = if has_more_derives {\n+            let delta = input.syntax().text_range().len() - TextSize::of(&new_attr_input);\n             edit.replace(input.syntax().text_range(), new_attr_input);\n-            input.syntax().text_range().len() - TextSize::from_usize(new_attr_input_len)\n+            delta\n         } else {\n             let attr_range = attr.syntax().text_range();\n             edit.delete(attr_range);"}, {"sha": "6c7456579fe4d63e5cf28fcddd2e7106d2c7cec4", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=63a462f37ca584e1a585a69e30823ce25d4d252f", "patch": "@@ -129,7 +129,7 @@ impl FunctionBuilder {\n                 let fn_def = indent_once.increase_indent(fn_def);\n                 let fn_def = ast::make::add_trailing_newlines(1, fn_def);\n                 let fn_def = indent.increase_indent(fn_def);\n-                (fn_def, it.syntax().text_range().start() + TextSize::from_usize(1))\n+                (fn_def, it.syntax().text_range().start() + TextSize::of('{'))\n             }\n         };\n "}, {"sha": "0f9174a299523d9ccabd87775d5aae763ec463f1", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=63a462f37ca584e1a585a69e30823ce25d4d252f", "patch": "@@ -77,13 +77,13 @@ pub(crate) fn add_new(ctx: AssistCtx) -> Option<Assist> {\n                     .text_range()\n                     .end();\n \n-                Some((start, TextSize::from_usize(1)))\n+                Some((start, TextSize::of(\"\\n\")))\n             })\n             .unwrap_or_else(|| {\n                 buf = generate_impl_text(&strukt, &buf);\n                 let start = strukt.syntax().text_range().end();\n \n-                (start, TextSize::from_usize(3))\n+                (start, TextSize::of(\"\\n}\\n\"))\n             });\n \n         edit.set_cursor(start_offset + TextSize::of(&buf) - end_offset);"}, {"sha": "5a77d3dbceb51d3f59d9e155d02c65b976b5bfc9", "filename": "crates/ra_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=63a462f37ca584e1a585a69e30823ce25d4d252f", "patch": "@@ -89,7 +89,7 @@ pub(crate) fn merge_match_arms(ctx: AssistCtx) -> Option<Assist> {\n \n         edit.target(current_text_range);\n         edit.set_cursor(match cursor_pos {\n-            CursorPos::InExpr(back_offset) => start + TextSize::from_usize(arm.len()) - back_offset,\n+            CursorPos::InExpr(back_offset) => start + TextSize::of(&arm) - back_offset,\n             CursorPos::InPat(offset) => offset,\n         });\n         edit.replace(TextRange::new(start, end), arm);"}, {"sha": "00ba95913c6ae1b00976552976e49ca364dbc816", "filename": "crates/ra_ide_db/src/line_index.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs?ref=63a462f37ca584e1a585a69e30823ce25d4d252f", "patch": "@@ -1,8 +1,9 @@\n //! `LineIndex` maps flat `TextSize` offsets into `(Line, Column)`\n //! representation.\n+use std::iter;\n+\n use ra_syntax::{TextRange, TextSize};\n use rustc_hash::FxHashMap;\n-use std::iter;\n use superslice::Ext;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -116,12 +117,11 @@ impl LineIndex {\n         res\n     }\n \n-    fn utf16_to_utf8_col(&self, line: u32, col: u32) -> TextSize {\n-        let mut col: TextSize = col.into();\n+    fn utf16_to_utf8_col(&self, line: u32, mut col: u32) -> TextSize {\n         if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n             for c in utf16_chars {\n-                if col >= c.start {\n-                    col += c.len() - TextSize::from_usize(1);\n+                if col >= u32::from(c.start) {\n+                    col += u32::from(c.len()) - 1;\n                 } else {\n                     // From here on, all utf16 characters come *after* the character we are mapping,\n                     // so we don't need to take them into account\n@@ -130,12 +130,12 @@ impl LineIndex {\n             }\n         }\n \n-        col\n+        col.into()\n     }\n }\n \n #[cfg(test)]\n-mod test_line_index {\n+mod tests {\n     use super::*;\n \n     #[test]\n@@ -224,12 +224,12 @@ const C: char = \\\"\u30e1 \u30e1\\\";\n         assert!(col_index.utf8_to_utf16_col(2, 15.into()) == 15);\n \n         // UTF-16 to UTF-8\n-        assert_eq!(col_index.utf16_to_utf8_col(1, 15), TextSize::from_usize(15));\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 15), TextSize::from(15));\n \n-        assert_eq!(col_index.utf16_to_utf8_col(1, 18), TextSize::from_usize(20));\n-        assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextSize::from_usize(23));\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 18), TextSize::from(20));\n+        assert_eq!(col_index.utf16_to_utf8_col(1, 19), TextSize::from(23));\n \n-        assert_eq!(col_index.utf16_to_utf8_col(2, 15), TextSize::from_usize(15));\n+        assert_eq!(col_index.utf16_to_utf8_col(2, 15), TextSize::from(15));\n     }\n \n     #[test]"}, {"sha": "039a12c0d84823005e16b6246e176ce4aae6a9ab", "filename": "crates/ra_ide_db/src/line_index_utils.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs?ref=63a462f37ca584e1a585a69e30823ce25d4d252f", "patch": "@@ -7,6 +7,8 @@\n //! Code in this module applies this \"to (Line, Column) after edit\"\n //! transformation.\n \n+use std::convert::TryInto;\n+\n use ra_syntax::{TextRange, TextSize};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n \n@@ -139,14 +141,15 @@ impl Iterator for OffsetStepIter<'_> {\n             .text\n             .char_indices()\n             .filter_map(|(i, c)| {\n+                let i: TextSize = i.try_into().unwrap();\n+                let char_len = TextSize::of(c);\n                 if c == '\\n' {\n-                    let next_offset = self.offset + TextSize::from_usize(i + 1);\n+                    let next_offset = self.offset + i + char_len;\n                     let next = Step::Newline(next_offset);\n                     Some((next, next_offset))\n                 } else {\n-                    let char_len = TextSize::of(c);\n-                    if char_len > TextSize::from_usize(1) {\n-                        let start = self.offset + TextSize::from_usize(i);\n+                    if !c.is_ascii() {\n+                        let start = self.offset + i;\n                         let end = start + char_len;\n                         let next = Step::Utf16Char(TextRange::new(start, end));\n                         let next_offset = end;"}, {"sha": "596f957b8c34a0c78db93783eabd68be4c68114a", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=63a462f37ca584e1a585a69e30823ce25d4d252f", "patch": "@@ -4,7 +4,7 @@\n //! get a super-set of matches. Then, we we confirm each match using precise\n //! name resolution.\n \n-use std::mem;\n+use std::{convert::TryInto, mem};\n \n use hir::{DefWithBody, HasSource, Module, ModuleSource, Semantics, Visibility};\n use once_cell::unsync::Lazy;\n@@ -207,7 +207,7 @@ impl Definition {\n             let tree = Lazy::new(|| sema.parse(file_id).syntax().clone());\n \n             for (idx, _) in text.match_indices(pat) {\n-                let offset = TextSize::from_usize(idx);\n+                let offset: TextSize = idx.try_into().unwrap();\n                 if !search_range.contains_inclusive(offset) {\n                     tested_by!(search_filters_by_range; force);\n                     continue;"}, {"sha": "bb28acfd95d8e88e9f0a89a8a222f013996ffc43", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=63a462f37ca584e1a585a69e30823ce25d4d252f", "patch": "@@ -516,7 +516,7 @@ impl TokenConvertor for Convertor {\n     fn bump(&mut self) -> Option<(Self::Token, TextRange)> {\n         if let Some((punct, offset)) = self.punct_offset.clone() {\n             if usize::from(offset) + 1 < punct.text().len() {\n-                let offset = offset + TextSize::from_usize(1);\n+                let offset = offset + TextSize::of('.');\n                 let range = punct.text_range();\n                 self.punct_offset = Some((punct.clone(), offset));\n                 let range = TextRange::at(range.start() + offset, TextSize::of('.'));\n@@ -532,9 +532,9 @@ impl TokenConvertor for Convertor {\n \n         let token = if curr.kind().is_punct() {\n             let range = curr.text_range();\n-            let range = TextRange::at(range.start(), TextSize::from_usize(1));\n-            self.punct_offset = Some((curr.clone(), TextSize::from_usize(0)));\n-            (SynToken::Punch(curr, TextSize::from_usize(0)), range)\n+            let range = TextRange::at(range.start(), TextSize::of('.'));\n+            self.punct_offset = Some((curr.clone(), 0.into()));\n+            (SynToken::Punch(curr, 0.into()), range)\n         } else {\n             self.punct_offset = None;\n             let range = curr.text_range();\n@@ -546,7 +546,7 @@ impl TokenConvertor for Convertor {\n \n     fn peek(&self) -> Option<Self::Token> {\n         if let Some((punct, mut offset)) = self.punct_offset.clone() {\n-            offset = offset + TextSize::from_usize(1);\n+            offset = offset + TextSize::of('.');\n             if usize::from(offset) < punct.text().len() {\n                 return Some(SynToken::Punch(punct, offset));\n             }\n@@ -558,7 +558,7 @@ impl TokenConvertor for Convertor {\n         }\n \n         let token = if curr.kind().is_punct() {\n-            SynToken::Punch(curr, TextSize::from_usize(0))\n+            SynToken::Punch(curr, 0.into())\n         } else {\n             SynToken::Ordiniary(curr)\n         };"}, {"sha": "8e04b0bbd6d7d98880e12228e3613721e76b0644", "filename": "crates/ra_syntax/src/ast/tokens.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs?ref=63a462f37ca584e1a585a69e30823ce25d4d252f", "patch": "@@ -1,5 +1,7 @@\n //! There are many AstNodes, but only a few tokens, so we hand-write them here.\n \n+use std::convert::{TryFrom, TryInto};\n+\n use crate::{\n     ast::{AstToken, Comment, RawString, String, Whitespace},\n     TextRange, TextSize,\n@@ -95,8 +97,8 @@ impl QuoteOffsets {\n         }\n \n         let start = TextSize::from(0);\n-        let left_quote = TextSize::from_usize(left_quote) + TextSize::of('\"');\n-        let right_quote = TextSize::from_usize(right_quote);\n+        let left_quote = TextSize::try_from(left_quote).unwrap() + TextSize::of('\"');\n+        let right_quote = TextSize::try_from(right_quote).unwrap();\n         let end = TextSize::of(literal);\n \n         let res = QuoteOffsets {\n@@ -498,7 +500,7 @@ impl HasFormatSpecifier for String {\n         let mut res = Vec::with_capacity(text.len());\n         rustc_lexer::unescape::unescape_str(text, &mut |range, unescaped_char| {\n             res.push((\n-                TextRange::new(TextSize::from_usize(range.start), TextSize::from_usize(range.end))\n+                TextRange::new(range.start.try_into().unwrap(), range.end.try_into().unwrap())\n                     + offset,\n                 unescaped_char,\n             ))\n@@ -518,11 +520,7 @@ impl HasFormatSpecifier for RawString {\n \n         let mut res = Vec::with_capacity(text.len());\n         for (idx, c) in text.char_indices() {\n-            res.push((\n-                TextRange::new(TextSize::from_usize(idx), TextSize::from_usize(idx + c.len_utf8()))\n-                    + offset,\n-                Ok(c),\n-            ));\n+            res.push((TextRange::at(idx.try_into().unwrap(), TextSize::of(c)) + offset, Ok(c)));\n         }\n         Some(res)\n     }"}, {"sha": "10fbe31768cbda7677daafe2e9e6fc5851da20c7", "filename": "crates/ra_syntax/src/fuzz.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs?ref=63a462f37ca584e1a585a69e30823ce25d4d252f", "patch": "@@ -1,8 +1,13 @@\n //! FIXME: write short doc here\n \n-use crate::{validation, AstNode, SourceFile, TextRange, TextSize};\n+use std::{\n+    convert::TryInto,\n+    str::{self, FromStr},\n+};\n+\n use ra_text_edit::AtomTextEdit;\n-use std::str::{self, FromStr};\n+\n+use crate::{validation, AstNode, SourceFile, TextRange};\n \n fn check_file_invariants(file: &SourceFile) {\n     let root = file.syntax();\n@@ -35,7 +40,7 @@ impl CheckReparse {\n         let text = format!(\"{}{}{}\", PREFIX, text, SUFFIX);\n         text.get(delete_start..delete_start.checked_add(delete_len)?)?; // make sure delete is a valid range\n         let delete =\n-            TextRange::at(TextSize::from_usize(delete_start), TextSize::from_usize(delete_len));\n+            TextRange::at(delete_start.try_into().unwrap(), delete_len.try_into().unwrap());\n         let edited_text =\n             format!(\"{}{}{}\", &text[..delete_start], &insert, &text[delete_start + delete_len..]);\n         let edit = AtomTextEdit { delete, insert };"}, {"sha": "f450ef4a2c27c3d6cb7d83d38bc3aeef7dc9255b", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=63a462f37ca584e1a585a69e30823ce25d4d252f", "patch": "@@ -1,6 +1,8 @@\n //! Lexer analyzes raw input string and produces lexemes (tokens).\n //! It is just a bridge to `rustc_lexer`.\n \n+use std::convert::TryInto;\n+\n use crate::{\n     SyntaxError,\n     SyntaxKind::{self, *},\n@@ -28,18 +30,19 @@ pub fn tokenize(text: &str) -> (Vec<Token>, Vec<SyntaxError>) {\n     let mut tokens = Vec::new();\n     let mut errors = Vec::new();\n \n-    let mut offset: usize = rustc_lexer::strip_shebang(text)\n-        .map(|shebang_len| {\n-            tokens.push(Token { kind: SHEBANG, len: TextSize::from_usize(shebang_len) });\n+    let mut offset = match rustc_lexer::strip_shebang(text) {\n+        Some(shebang_len) => {\n+            tokens.push(Token { kind: SHEBANG, len: shebang_len.try_into().unwrap() });\n             shebang_len\n-        })\n-        .unwrap_or(0);\n+        }\n+        None => 0,\n+    };\n \n     let text_without_shebang = &text[offset..];\n \n     for rustc_token in rustc_lexer::tokenize(text_without_shebang) {\n-        let token_len = TextSize::from_usize(rustc_token.len);\n-        let token_range = TextRange::at(TextSize::from_usize(offset), token_len);\n+        let token_len: TextSize = rustc_token.len.try_into().unwrap();\n+        let token_range = TextRange::at(offset.try_into().unwrap(), token_len);\n \n         let (syntax_kind, err_message) =\n             rustc_token_kind_to_syntax_kind(&rustc_token.kind, &text[token_range]);\n@@ -96,10 +99,9 @@ fn lex_first_token(text: &str) -> Option<(Token, Option<SyntaxError>)> {\n     let rustc_token = rustc_lexer::first_token(text);\n     let (syntax_kind, err_message) = rustc_token_kind_to_syntax_kind(&rustc_token.kind, text);\n \n-    let token = Token { kind: syntax_kind, len: TextSize::from_usize(rustc_token.len) };\n-    let optional_error = err_message.map(|err_message| {\n-        SyntaxError::new(err_message, TextRange::new(0.into(), TextSize::of(text)))\n-    });\n+    let token = Token { kind: syntax_kind, len: rustc_token.len.try_into().unwrap() };\n+    let optional_error = err_message\n+        .map(|err_message| SyntaxError::new(err_message, TextRange::up_to(TextSize::of(text))));\n \n     Some((token, optional_error))\n }"}, {"sha": "aee57db62a32ecf1a9cfbc916668f71bb92f72a5", "filename": "crates/ra_syntax/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ftests.rs?ref=63a462f37ca584e1a585a69e30823ce25d4d252f", "patch": "@@ -121,7 +121,7 @@ fn assert_errors_are_absent(errors: &[SyntaxError], path: &Path) {\n \n fn dump_tokens_and_errors(tokens: &[Token], errors: &[SyntaxError], text: &str) -> String {\n     let mut acc = String::new();\n-    let mut offset = TextSize::from_usize(0);\n+    let mut offset: TextSize = 0.into();\n     for token in tokens {\n         let token_len = token.len;\n         let token_text = &text[TextRange::at(offset, token.len)];"}, {"sha": "5e93895ec5de8fa9ba356704a76fbdf12228480a", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63a462f37ca584e1a585a69e30823ce25d4d252f/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=63a462f37ca584e1a585a69e30823ce25d4d252f", "patch": "@@ -2,6 +2,8 @@\n \n mod block;\n \n+use std::convert::TryFrom;\n+\n use rustc_lexer::unescape;\n \n use crate::{\n@@ -112,7 +114,7 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n \n     // FIXME: lift this lambda refactor to `fn` (https://github.com/rust-analyzer/rust-analyzer/pull/2834#discussion_r366199205)\n     let mut push_err = |prefix_len, (off, err): (usize, unescape::EscapeError)| {\n-        let off = token.text_range().start() + TextSize::from_usize(off + prefix_len);\n+        let off = token.text_range().start() + TextSize::try_from(off + prefix_len).unwrap();\n         acc.push(SyntaxError::new_at_offset(rustc_unescape_error_to_string(err), off));\n     };\n "}]}