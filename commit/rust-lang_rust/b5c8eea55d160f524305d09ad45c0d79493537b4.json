{"sha": "b5c8eea55d160f524305d09ad45c0d79493537b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YzhlZWE1NWQxNjBmNTI0MzA1ZDA5YWQ0NWMwZDc5NDkzNTM3YjQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-12T13:33:32Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-23T20:58:16Z"}, "message": "Put clean::Trait extra information into a new struct to make it more coherent", "tree": {"sha": "99533d0c45ecf9e7b86b47ee1f79e2e90ad652b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99533d0c45ecf9e7b86b47ee1f79e2e90ad652b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5c8eea55d160f524305d09ad45c0d79493537b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c8eea55d160f524305d09ad45c0d79493537b4", "html_url": "https://github.com/rust-lang/rust/commit/b5c8eea55d160f524305d09ad45c0d79493537b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5c8eea55d160f524305d09ad45c0d79493537b4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa51c0f472fc9989f2dcc15f29e8b4079bcdb585", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa51c0f472fc9989f2dcc15f29e8b4079bcdb585", "html_url": "https://github.com/rust-lang/rust/commit/fa51c0f472fc9989f2dcc15f29e8b4079bcdb585"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "51cdcd74147d538a5fd67c630d59b043f86905b0", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5c8eea55d160f524305d09ad45c0d79493537b4/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c8eea55d160f524305d09ad45c0d79493537b4/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b5c8eea55d160f524305d09ad45c0d79493537b4", "patch": "@@ -624,8 +624,12 @@ crate fn record_extern_trait(cx: &mut DocContext<'_>, did: DefId) {\n     debug!(\"record_extern_trait: {:?}\", did);\n     let trait_ = build_external_trait(cx, did);\n \n-    cx.external_traits\n-        .borrow_mut()\n-        .insert(did, (trait_, clean::utils::has_doc_flag(cx.tcx.get_attrs(did), sym::spotlight)));\n+    cx.external_traits.borrow_mut().insert(\n+        did,\n+        clean::TraitWithExtraInfo {\n+            trait_,\n+            is_spotlight: clean::utils::has_doc_flag(cx.tcx.get_attrs(did), sym::spotlight),\n+        },\n+    );\n     cx.active_extern_traits.remove(&did);\n }"}, {"sha": "51bef344e6722a80186032cfedec372e67e528d3", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5c8eea55d160f524305d09ad45c0d79493537b4/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c8eea55d160f524305d09ad45c0d79493537b4/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=b5c8eea55d160f524305d09ad45c0d79493537b4", "patch": "@@ -57,11 +57,18 @@ crate struct Crate {\n     crate primitives: Vec<(DefId, PrimitiveType)>,\n     // These are later on moved into `CACHEKEY`, leaving the map empty.\n     // Only here so that they can be filtered through the rustdoc passes.\n-    crate external_traits: Rc<RefCell<FxHashMap<DefId, (Trait, bool)>>>,\n+    crate external_traits: Rc<RefCell<FxHashMap<DefId, TraitWithExtraInfo>>>,\n     crate masked_crates: FxHashSet<CrateNum>,\n     crate collapsed: bool,\n }\n \n+/// This struct is used to wrap additional information added by rustdoc on a `trait` item.\n+#[derive(Clone, Debug)]\n+crate struct TraitWithExtraInfo {\n+    crate trait_: Trait,\n+    crate is_spotlight: bool,\n+}\n+\n #[derive(Clone, Debug)]\n crate struct ExternalCrate {\n     crate name: Symbol,"}, {"sha": "3883652375fa5017819015c556bf2b77755df7d1", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5c8eea55d160f524305d09ad45c0d79493537b4/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c8eea55d160f524305d09ad45c0d79493537b4/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=b5c8eea55d160f524305d09ad45c0d79493537b4", "patch": "@@ -55,7 +55,7 @@ crate struct DocContext<'tcx> {\n     /// Later on moved into `cache`\n     crate renderinfo: RenderInfo,\n     /// Later on moved through `clean::Crate` into `cache`\n-    crate external_traits: Rc<RefCell<FxHashMap<DefId, (clean::Trait, bool)>>>,\n+    crate external_traits: Rc<RefCell<FxHashMap<DefId, clean::TraitWithExtraInfo>>>,\n     /// Used while populating `external_traits` to ensure we don't process the same trait twice at\n     /// the same time.\n     crate active_extern_traits: FxHashSet<DefId>,"}, {"sha": "2b980ebe5926a88cf55f6e76e3c37946545803c7", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5c8eea55d160f524305d09ad45c0d79493537b4/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c8eea55d160f524305d09ad45c0d79493537b4/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=b5c8eea55d160f524305d09ad45c0d79493537b4", "patch": "@@ -91,9 +91,10 @@ crate trait DocFolder: Sized {\n \n         {\n             let external_traits = { std::mem::take(&mut *c.external_traits.borrow_mut()) };\n-            for (k, (mut v, is_spotlight)) in external_traits {\n-                v.items = v.items.into_iter().filter_map(|i| self.fold_item(i)).collect();\n-                c.external_traits.borrow_mut().insert(k, (v, is_spotlight));\n+            for (k, mut v) in external_traits {\n+                v.trait_.items =\n+                    v.trait_.items.into_iter().filter_map(|i| self.fold_item(i)).collect();\n+                c.external_traits.borrow_mut().insert(k, v);\n             }\n         }\n         c"}, {"sha": "ef4e0e0d57c920565b87d954f008689866f2b644", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5c8eea55d160f524305d09ad45c0d79493537b4/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c8eea55d160f524305d09ad45c0d79493537b4/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=b5c8eea55d160f524305d09ad45c0d79493537b4", "patch": "@@ -65,9 +65,7 @@ crate struct Cache {\n     /// Implementations of a crate should inherit the documentation of the\n     /// parent trait if no extra documentation is specified, and default methods\n     /// should show up in documentation about trait implementations.\n-    ///\n-    /// The `bool` parameter is about if the trait is `spotlight`.\n-    crate traits: FxHashMap<DefId, (clean::Trait, bool)>,\n+    crate traits: FxHashMap<DefId, clean::TraitWithExtraInfo>,\n \n     /// When rendering traits, it's often useful to be able to list all\n     /// implementors of the trait, and this mapping is exactly, that: a mapping\n@@ -251,8 +249,12 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n         // Propagate a trait method's documentation to all implementors of the\n         // trait.\n         if let clean::TraitItem(ref t) = *item.kind {\n-            self.cache.traits.entry(item.def_id).or_insert_with(|| {\n-                (t.clone(), clean::utils::has_doc_flag(tcx.get_attrs(item.def_id), sym::spotlight))\n+            self.cache.traits.entry(item.def_id).or_insert_with(|| clean::TraitWithExtraInfo {\n+                trait_: t.clone(),\n+                is_spotlight: clean::utils::has_doc_flag(\n+                    tcx.get_attrs(item.def_id),\n+                    sym::spotlight,\n+                ),\n             });\n         }\n "}, {"sha": "b21f6a13392361bd82f5ba20d3903a93a1f8a1f2", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5c8eea55d160f524305d09ad45c0d79493537b4/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c8eea55d160f524305d09ad45c0d79493537b4/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b5c8eea55d160f524305d09ad45c0d79493537b4", "patch": "@@ -3688,7 +3688,7 @@ fn spotlight_decl(decl: &clean::FnDecl, cache: &Cache) -> String {\n             for i in impls {\n                 let impl_ = i.inner_impl();\n                 if impl_.trait_.def_id().map_or(false, |d| {\n-                    cache.traits.get(&d).map(|(_, is_spotlight)| *is_spotlight).unwrap_or(false)\n+                    cache.traits.get(&d).map(|t| t.is_spotlight).unwrap_or(false)\n                 }) {\n                     if out.is_empty() {\n                         write!(\n@@ -3980,7 +3980,7 @@ fn render_impl(\n             false,\n             outer_version,\n             outer_const_version,\n-            trait_.map(|(t, _)| t),\n+            trait_.map(|t| &t.trait_),\n             show_def_docs,\n         );\n     }\n@@ -4025,11 +4025,11 @@ fn render_impl(\n     // We don't emit documentation for default items if they appear in the\n     // Implementations on Foreign Types or Implementors sections.\n     if show_default_items {\n-        if let Some((t, _)) = trait_ {\n+        if let Some(t) = trait_ {\n             render_default_items(\n                 w,\n                 cx,\n-                t,\n+                &t.trait_,\n                 &i.inner_impl(),\n                 &i.impl_item,\n                 render_mode,"}, {"sha": "a3b214677941b143a857f6d30b075b5d749da15c", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5c8eea55d160f524305d09ad45c0d79493537b4/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c8eea55d160f524305d09ad45c0d79493537b4/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=b5c8eea55d160f524305d09ad45c0d79493537b4", "patch": "@@ -84,9 +84,10 @@ impl JsonRenderer<'tcx> {\n         Rc::clone(&self.cache)\n             .traits\n             .iter()\n-            .filter_map(|(&id, (trait_item, _))| {\n+            .filter_map(|(&id, trait_item)| {\n                 // only need to synthesize items for external traits\n                 if !id.is_local() {\n+                    let trait_item = &trait_item.trait_;\n                     trait_item.items.clone().into_iter().for_each(|i| self.item(i).unwrap());\n                     Some((\n                         from_def_id(id),"}]}