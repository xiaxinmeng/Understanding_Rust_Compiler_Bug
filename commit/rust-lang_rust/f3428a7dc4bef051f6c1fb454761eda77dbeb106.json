{"sha": "f3428a7dc4bef051f6c1fb454761eda77dbeb106", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNDI4YTdkYzRiZWYwNTFmNmMxZmI0NTQ3NjFlZGE3N2RiZWIxMDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-11-03T17:20:07Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-11-03T17:23:51Z"}, "message": "rustc: Delete grouping logic from the musl target\n\nThis commit deletes the injection of `-(` and `-)` options to the linker\nfor the musl targets. This actually causes problems today on nightly if\nyou execute:\n\n    $ echo 'fn main() {}' >> foo.rs\n    $ rustc --target x86_64-unknown-linux-musl -C panic=abort\n\nyou get a linker error about \"cannot nest groups\". This comes about\nbecause rustc injects its own `--start-group` and `--end-group`\nvariables which clash with the outer `-(` and `-)` variables. It's not\nentirely clear to me why this doesn't affect the musl target by default\n(in `-C panic=unwind` mode).\n\nThe compiler's own injection of `--start-group` and `--end-group` should\nsolve the issues mentioned in the comment for injecting `-(` and `-)` as\nwell.", "tree": {"sha": "c92e07c340a5fd618c32d777c0c500765c72b62b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c92e07c340a5fd618c32d777c0c500765c72b62b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3428a7dc4bef051f6c1fb454761eda77dbeb106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3428a7dc4bef051f6c1fb454761eda77dbeb106", "html_url": "https://github.com/rust-lang/rust/commit/f3428a7dc4bef051f6c1fb454761eda77dbeb106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3428a7dc4bef051f6c1fb454761eda77dbeb106/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ad8c7b3502616aff142a4640cce911c6c2c5463", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ad8c7b3502616aff142a4640cce911c6c2c5463", "html_url": "https://github.com/rust-lang/rust/commit/2ad8c7b3502616aff142a4640cce911c6c2c5463"}], "stats": {"total": 25, "additions": 0, "deletions": 25}, "files": [{"sha": "c87f14977cb1d5f50702d58e47874e6699835816", "filename": "src/librustc_target/spec/linux_musl_base.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f3428a7dc4bef051f6c1fb454761eda77dbeb106/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3428a7dc4bef051f6c1fb454761eda77dbeb106/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs?ref=f3428a7dc4bef051f6c1fb454761eda77dbeb106", "patch": "@@ -24,31 +24,6 @@ pub fn opts() -> TargetOptions {\n     // argument is *not* necessary for normal builds, but it can't hurt!\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-Wl,--eh-frame-hdr\".to_string());\n \n-    // There's a whole bunch of circular dependencies when dealing with MUSL\n-    // unfortunately. To put this in perspective libc is statically linked to\n-    // liblibc and libunwind is statically linked to libstd:\n-    //\n-    // * libcore depends on `fmod` which is in libc (transitively in liblibc).\n-    //   liblibc, however, depends on libcore.\n-    // * compiler-rt has personality symbols that depend on libunwind, but\n-    //   libunwind is in libstd which depends on compiler-rt.\n-    //\n-    // Recall that linkers discard libraries and object files as much as\n-    // possible, and with all the static linking and archives flying around with\n-    // MUSL the linker is super aggressively stripping out objects. For example\n-    // the first case has fmod stripped from liblibc (it's in its own object\n-    // file) so it's not there when libcore needs it. In the second example all\n-    // the unused symbols from libunwind are stripped (each is in its own object\n-    // file in libstd) before we end up linking compiler-rt which depends on\n-    // those symbols.\n-    //\n-    // To deal with these circular dependencies we just force the compiler to\n-    // link everything as a group, not stripping anything out until everything\n-    // is processed. The linker will still perform a pass to strip out object\n-    // files but it won't do so until all objects/archives have been processed.\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-Wl,-(\".to_string());\n-    base.post_link_args.insert(LinkerFlavor::Gcc, vec![\"-Wl,-)\".to_string()]);\n-\n     // When generating a statically linked executable there's generally some\n     // small setup needed which is listed in these files. These are provided by\n     // a musl toolchain and are linked by default by the `musl-gcc` script. Note"}]}