{"sha": "25c47a48858122b3b20a4a5f08ecbf13eb15e19d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YzQ3YTQ4ODU4MTIyYjNiMjBhNGE1ZjA4ZWNiZjEzZWIxNWUxOWQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-06-16T11:19:05Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-06-16T13:00:53Z"}, "message": "rustc_codegen_llvm: don't treat i1 as signed, even for #[repr(i8)] enums.", "tree": {"sha": "ce4b3afab421717f93725596d162604df7f91e75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce4b3afab421717f93725596d162604df7f91e75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25c47a48858122b3b20a4a5f08ecbf13eb15e19d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25c47a48858122b3b20a4a5f08ecbf13eb15e19d", "html_url": "https://github.com/rust-lang/rust/commit/25c47a48858122b3b20a4a5f08ecbf13eb15e19d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25c47a48858122b3b20a4a5f08ecbf13eb15e19d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68cee8bb36d8cf0c5fe1e9b7ffa0bf096ac5bd68", "url": "https://api.github.com/repos/rust-lang/rust/commits/68cee8bb36d8cf0c5fe1e9b7ffa0bf096ac5bd68", "html_url": "https://github.com/rust-lang/rust/commit/68cee8bb36d8cf0c5fe1e9b7ffa0bf096ac5bd68"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "2a1e3980adbcfaa58ee83880d10818127ce5d8cb", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25c47a48858122b3b20a4a5f08ecbf13eb15e19d/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c47a48858122b3b20a4a5f08ecbf13eb15e19d/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=25c47a48858122b3b20a4a5f08ecbf13eb15e19d", "patch": "@@ -275,7 +275,11 @@ impl<'a, 'tcx> PlaceRef<'tcx> {\n             layout::Variants::Single { .. } => bug!(),\n             layout::Variants::Tagged { ref tag, .. } => {\n                 let signed = match tag.value {\n-                    layout::Int(_, signed) => signed,\n+                    // We use `i1` for bytes that are always `0` or `1`,\n+                    // e.g. `#[repr(i8)] enum E { A, B }`, but we can't\n+                    // let LLVM interpret the `i1` as signed, because\n+                    // then `i1 1` (i.e. E::B) is effectively `i8 -1`.\n+                    layout::Int(_, signed) => !tag.is_bool() && signed,\n                     _ => false\n                 };\n                 bx.intcast(lldiscr, cast_to, signed)"}, {"sha": "0fd81c6074e48e87012ee895350119966bc5ff29", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25c47a48858122b3b20a4a5f08ecbf13eb15e19d/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c47a48858122b3b20a4a5f08ecbf13eb15e19d/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=25c47a48858122b3b20a4a5f08ecbf13eb15e19d", "patch": "@@ -298,7 +298,11 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                         let mut signed = false;\n                         if let layout::Abi::Scalar(ref scalar) = operand.layout.abi {\n                             if let layout::Int(_, s) = scalar.value {\n-                                signed = s;\n+                                // We use `i1` for bytes that are always `0` or `1`,\n+                                // e.g. `#[repr(i8)] enum E { A, B }`, but we can't\n+                                // let LLVM interpret the `i1` as signed, because\n+                                // then `i1 1` (i.e. E::B) is effectively `i8 -1`.\n+                                signed = !scalar.is_bool() && s;\n \n                                 if scalar.valid_range.end() > scalar.valid_range.start() {\n                                     // We want `table[e as usize]` to not"}, {"sha": "bca05d83e406411ea8143b9b1a58978fe38d25df", "filename": "src/test/run-pass/issue-51582.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/25c47a48858122b3b20a4a5f08ecbf13eb15e19d/src%2Ftest%2Frun-pass%2Fissue-51582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c47a48858122b3b20a4a5f08ecbf13eb15e19d/src%2Ftest%2Frun-pass%2Fissue-51582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-51582.rs?ref=25c47a48858122b3b20a4a5f08ecbf13eb15e19d", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core_intrinsics)]\n+\n+#[repr(i8)]\n+pub enum Enum {\n+    VariantA,\n+    VariantB,\n+}\n+\n+fn make_b() -> Enum { Enum::VariantB }\n+\n+fn main() {\n+    assert_eq!(1, make_b() as i8);\n+    assert_eq!(1, make_b() as u8);\n+    assert_eq!(1, make_b() as i32);\n+    assert_eq!(1, make_b() as u32);\n+    assert_eq!(1, unsafe { std::intrinsics::discriminant_value(&make_b()) });\n+}"}]}