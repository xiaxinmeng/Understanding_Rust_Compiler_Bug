{"sha": "d31386a52bc3944adbdf0e925f4764f8aa6b1875", "node_id": "C_kwDOAAsO6NoAKGQzMTM4NmE1MmJjMzk0NGFkYmRmMGU5MjVmNDc2NGY4YWE2YjE4NzU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-10T09:08:10Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-14T19:52:42Z"}, "message": "Make is_block_tail a variant of LocalInfo.", "tree": {"sha": "2cf3378bdaf5d619b752cec87e39e9f846482983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cf3378bdaf5d619b752cec87e39e9f846482983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d31386a52bc3944adbdf0e925f4764f8aa6b1875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d31386a52bc3944adbdf0e925f4764f8aa6b1875", "html_url": "https://github.com/rust-lang/rust/commit/d31386a52bc3944adbdf0e925f4764f8aa6b1875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d31386a52bc3944adbdf0e925f4764f8aa6b1875/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcb161def7dbef64aebe698c42373d13b44a1c53", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb161def7dbef64aebe698c42373d13b44a1c53", "html_url": "https://github.com/rust-lang/rust/commit/bcb161def7dbef64aebe698c42373d13b44a1c53"}], "stats": {"total": 65, "additions": 26, "deletions": 39}, "files": [{"sha": "62b3f3ecfc32f21cbee976fac14a6e5eedd71fb4", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d31386a52bc3944adbdf0e925f4764f8aa6b1875/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31386a52bc3944adbdf0e925f4764f8aa6b1875/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=d31386a52bc3944adbdf0e925f4764f8aa6b1875", "patch": "@@ -6,8 +6,8 @@ use rustc_hir::intravisit::Visitor;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::mir::{\n-    Body, CastKind, ConstraintCategory, FakeReadCause, Local, Location, Operand, Place, Rvalue,\n-    Statement, StatementKind, TerminatorKind,\n+    Body, CastKind, ConstraintCategory, FakeReadCause, Local, LocalInfo, Location, Operand, Place,\n+    Rvalue, Statement, StatementKind, TerminatorKind,\n };\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::{self, RegionVid, TyCtxt};\n@@ -220,7 +220,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                         );\n                         err.span_label(body.source_info(drop_loc).span, message);\n \n-                        if let Some(info) = &local_decl.is_block_tail {\n+                        if let LocalInfo::BlockTailTemp(info) = local_decl.local_info() {\n                             if info.tail_result_is_ignored {\n                                 // #85581: If the first mutable borrow's scope contains\n                                 // the second borrow, this suggestion isn't helpful."}, {"sha": "5fbc0347a4cb292148af4c0789b9b90e67f69997", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d31386a52bc3944adbdf0e925f4764f8aa6b1875/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31386a52bc3944adbdf0e925f4764f8aa6b1875/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=d31386a52bc3944adbdf0e925f4764f8aa6b1875", "patch": "@@ -785,13 +785,6 @@ pub struct LocalDecl<'tcx> {\n     /// generator.\n     pub internal: bool,\n \n-    /// If this local is a temporary and `is_block_tail` is `Some`,\n-    /// then it is a temporary created for evaluation of some\n-    /// subexpression of some block's tail expression (with no\n-    /// intervening statement context).\n-    // FIXME(matthewjasper) Don't store in this in `Body`\n-    pub is_block_tail: Option<BlockTailInfo>,\n-\n     /// The type of this local.\n     pub ty: Ty<'tcx>,\n \n@@ -905,6 +898,10 @@ pub enum LocalInfo<'tcx> {\n     /// A temporary created during the creation of an aggregate\n     /// (e.g. a temporary for `foo` in `MyStruct { my_field: foo }`)\n     AggregateTemp,\n+    /// A temporary created for evaluation of some subexpression of some block's tail expression\n+    /// (with no intervening statement context).\n+    // FIXME(matthewjasper) Don't store in this in `Body`\n+    BlockTailTemp(BlockTailInfo),\n     /// A temporary created during the pass `Derefer` to avoid it's retagging\n     DerefTemp,\n     /// A temporary created for borrow checking.\n@@ -1018,7 +1015,6 @@ impl<'tcx> LocalDecl<'tcx> {\n             mutability: Mutability::Mut,\n             local_info: ClearCrossCrate::Set(Box::new(LocalInfo::Boring)),\n             internal: false,\n-            is_block_tail: None,\n             ty,\n             user_ty: None,\n             source_info,\n@@ -1038,14 +1034,6 @@ impl<'tcx> LocalDecl<'tcx> {\n         self.mutability = Mutability::Not;\n         self\n     }\n-\n-    /// Converts `self` into same `LocalDecl` except tagged as internal temporary.\n-    #[inline]\n-    pub fn block_tail(mut self, info: BlockTailInfo) -> Self {\n-        assert!(self.is_block_tail.is_none());\n-        self.is_block_tail = Some(info);\n-        self\n-    }\n }\n \n #[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n@@ -3106,7 +3094,7 @@ mod size_asserts {\n     use rustc_data_structures::static_assert_size;\n     // tidy-alphabetical-start\n     static_assert_size!(BasicBlockData<'_>, 144);\n-    static_assert_size!(LocalDecl<'_>, 56);\n+    static_assert_size!(LocalDecl<'_>, 40);\n     static_assert_size!(Statement<'_>, 32);\n     static_assert_size!(StatementKind<'_>, 16);\n     static_assert_size!(Terminator<'_>, 112);"}, {"sha": "cffdd7ff37f220d720d5c2cc05e72652457cd111", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d31386a52bc3944adbdf0e925f4764f8aa6b1875/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31386a52bc3944adbdf0e925f4764f8aa6b1875/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=d31386a52bc3944adbdf0e925f4764f8aa6b1875", "patch": "@@ -804,7 +804,6 @@ macro_rules! make_mir_visitor {\n                     source_info,\n                     internal: _,\n                     local_info: _,\n-                    is_block_tail: _,\n                 } = local_decl;\n \n                 self.visit_ty($(& $mutability)? *ty, TyContext::LocalDecl {"}, {"sha": "6941da331fc58d9975fb1c5552236788f9d6b88f", "filename": "compiler/rustc_mir_build/src/build/expr/as_operand.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d31386a52bc3944adbdf0e925f4764f8aa6b1875/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31386a52bc3944adbdf0e925f4764f8aa6b1875/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs?ref=d31386a52bc3944adbdf0e925f4764f8aa6b1875", "patch": "@@ -124,9 +124,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             Category::Constant | Category::Place | Category::Rvalue(..) => {\n                 let operand = unpack!(block = this.as_temp(block, scope, expr, Mutability::Mut));\n-                let decl_info = this.local_decls[operand].local_info.as_mut().assert_crate_local();\n-                if let LocalInfo::Boring = **decl_info {\n-                    **decl_info = local_info;\n+                // Overwrite temp local info if we have something more interesting to record.\n+                if !matches!(local_info, LocalInfo::Boring) {\n+                    let decl_info = this.local_decls[operand].local_info.as_mut().assert_crate_local();\n+                    if let LocalInfo::Boring | LocalInfo::BlockTailTemp(_) = **decl_info {\n+                        **decl_info = local_info;\n+                    }\n                 }\n                 block.and(Operand::Move(Place::from(operand)))\n             }"}, {"sha": "c8910c272b1bbfcd1bac25c7284bca3937abf978", "filename": "compiler/rustc_mir_build/src/build/expr/as_temp.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d31386a52bc3944adbdf0e925f4764f8aa6b1875/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31386a52bc3944adbdf0e925f4764f8aa6b1875/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs?ref=d31386a52bc3944adbdf0e925f4764f8aa6b1875", "patch": "@@ -49,29 +49,28 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             debug!(\"creating temp {:?} with block_context: {:?}\", local_decl, this.block_context);\n-            // Find out whether this temp is being created within the\n-            // tail expression of a block whose result is ignored.\n-            if let Some(tail_info) = this.block_context.currently_in_block_tail() {\n-                local_decl = local_decl.block_tail(tail_info);\n-            }\n-            match expr.kind {\n+            let local_info = match expr.kind {\n                 ExprKind::StaticRef { def_id, .. } => {\n                     assert!(!this.tcx.is_thread_local_static(def_id));\n                     local_decl.internal = true;\n-                    **local_decl.local_info.as_mut().assert_crate_local() =\n-                        LocalInfo::StaticRef { def_id, is_thread_local: false };\n+                    LocalInfo::StaticRef { def_id, is_thread_local: false }\n                 }\n                 ExprKind::ThreadLocalRef(def_id) => {\n                     assert!(this.tcx.is_thread_local_static(def_id));\n                     local_decl.internal = true;\n-                    **local_decl.local_info.as_mut().assert_crate_local() =\n-                        LocalInfo::StaticRef { def_id, is_thread_local: true };\n+                    LocalInfo::StaticRef { def_id, is_thread_local: true }\n                 }\n                 ExprKind::NamedConst { def_id, .. } | ExprKind::ConstParam { def_id, .. } => {\n-                    **local_decl.local_info.as_mut().assert_crate_local() = LocalInfo::ConstRef { def_id };\n+                    LocalInfo::ConstRef { def_id }\n                 }\n-                _ => {}\n-            }\n+                // Find out whether this temp is being created within the\n+                // tail expression of a block whose result is ignored.\n+                _ if let Some(tail_info) = this.block_context.currently_in_block_tail() => {\n+                    LocalInfo::BlockTailTemp(tail_info)\n+                }\n+                _ => LocalInfo::Boring,\n+            };\n+            **local_decl.local_info.as_mut().assert_crate_local() = local_info;\n             this.local_decls.push(local_decl)\n         };\n         let temp_place = Place::from(temp);"}, {"sha": "22785dfd2ce0e18b13a157858cde04cd822cb86b", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d31386a52bc3944adbdf0e925f4764f8aa6b1875/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31386a52bc3944adbdf0e925f4764f8aa6b1875/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=d31386a52bc3944adbdf0e925f4764f8aa6b1875", "patch": "@@ -2224,7 +2224,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             user_ty: if user_ty.is_empty() { None } else { Some(Box::new(user_ty)) },\n             source_info,\n             internal: false,\n-            is_block_tail: None,\n             local_info: ClearCrossCrate::Set(Box::new(LocalInfo::User(BindingForm::Var(\n                 VarBindingForm {\n                     binding_mode,\n@@ -2253,7 +2252,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 user_ty: None,\n                 source_info,\n                 internal: false,\n-                is_block_tail: None,\n                 local_info: ClearCrossCrate::Set(Box::new(LocalInfo::User(BindingForm::RefForGuard))),\n             });\n             self.var_debug_info.push(VarDebugInfo {"}]}