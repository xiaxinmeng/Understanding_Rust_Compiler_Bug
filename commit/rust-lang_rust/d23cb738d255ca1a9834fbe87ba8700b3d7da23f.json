{"sha": "d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "node_id": "C_kwDOAAsO6NoAKGQyM2NiNzM4ZDI1NWNhMWE5ODM0ZmJlODdiYTg3MDBiM2Q3ZGEyM2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-23T23:31:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-23T23:31:41Z"}, "message": "Rollup merge of #105975 - jeremystucki:rustc-remove-needless-lifetimes, r=eholk\n\nrustc: Remove needless lifetimes", "tree": {"sha": "d821a3713007d0ed74b75c66b8df0fcca1d11e3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d821a3713007d0ed74b75c66b8df0fcca1d11e3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjpjpdCRBK7hj4Ov3rIwAAO/0IACA42/nsB4AFFPc/eaoocHmV\nunmLluLJGq7FtDrlSNVV0oClrmfKG9rSnqHyYtW2Yg2Zsy6aDMGaiiGuX9d5K1jD\n6HqaU8WQ6PUMbyl5FBVP1AmkeFKGDaJCESI4iyU+OLhNAGf6ue34kGlGCT+t4oAW\n8Q40OygKP/YvnMFZD9vwhzSuH1ovoUAvvwFLG88THV2t9yvEwq1BNmgmLIpd0UwC\nVHiiKlBxbJYVzGl2kLnIyz1n1H6Vdcl9YFVQiQByNWPnci9oRIVBlc97CXtusSiZ\nlWVBiGdIreeNs7H2Q1E0rVglQKgOLESsuF1YzDCyQs+LfpjROmQRR6Ih/vBcoIQ=\n=vXe2\n-----END PGP SIGNATURE-----\n", "payload": "tree d821a3713007d0ed74b75c66b8df0fcca1d11e3e\nparent e08dd9d998a697a8da791ee183db468e4de7aa72\nparent 1174aacf598d01b3e063668bb6ecd9c472688d02\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671838301 +0100\ncommitter GitHub <noreply@github.com> 1671838301 +0100\n\nRollup merge of #105975 - jeremystucki:rustc-remove-needless-lifetimes, r=eholk\n\nrustc: Remove needless lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "html_url": "https://github.com/rust-lang/rust/commit/d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e08dd9d998a697a8da791ee183db468e4de7aa72", "url": "https://api.github.com/repos/rust-lang/rust/commits/e08dd9d998a697a8da791ee183db468e4de7aa72", "html_url": "https://github.com/rust-lang/rust/commit/e08dd9d998a697a8da791ee183db468e4de7aa72"}, {"sha": "1174aacf598d01b3e063668bb6ecd9c472688d02", "url": "https://api.github.com/repos/rust-lang/rust/commits/1174aacf598d01b3e063668bb6ecd9c472688d02", "html_url": "https://github.com/rust-lang/rust/commit/1174aacf598d01b3e063668bb6ecd9c472688d02"}], "stats": {"total": 586, "additions": 266, "deletions": 320}, "files": [{"sha": "275ed02c2b9f7fa031184ac794f871902a49d9d1", "filename": "compiler/rustc_ast/src/util/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fcomments.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -51,7 +51,7 @@ pub fn beautify_doc_string(data: Symbol, kind: CommentKind) -> Symbol {\n         if i != 0 || j != lines.len() { Some((i, j)) } else { None }\n     }\n \n-    fn get_horizontal_trim<'a>(lines: &'a [&str], kind: CommentKind) -> Option<String> {\n+    fn get_horizontal_trim(lines: &[&str], kind: CommentKind) -> Option<String> {\n         let mut i = usize::MAX;\n         let mut first = true;\n "}, {"sha": "db2527a200c329b7190abdb5fea08f86f13ca725", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -414,7 +414,7 @@ fn compute_hir_hash(\n     })\n }\n \n-pub fn lower_to_hir<'hir>(tcx: TyCtxt<'hir>, (): ()) -> hir::Crate<'hir> {\n+pub fn lower_to_hir(tcx: TyCtxt<'_>, (): ()) -> hir::Crate<'_> {\n     let sess = tcx.sess;\n     let krate = tcx.untracked_crate.steal();\n     let mut resolver = tcx.resolver_for_lowering(()).steal();"}, {"sha": "becc04bbdab0d54fd3f54c43853c2aa3b72ee7a9", "filename": "compiler/rustc_borrowck/src/consumers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -28,10 +28,10 @@ pub use super::{\n ///     that shows how to do this at `src/test/run-make/obtain-borrowck/`.\n ///\n /// *   Polonius is highly unstable, so expect regular changes in its signature or other details.\n-pub fn get_body_with_borrowck_facts<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn get_body_with_borrowck_facts(\n+    tcx: TyCtxt<'_>,\n     def: ty::WithOptConstParam<LocalDefId>,\n-) -> BodyWithBorrowckFacts<'tcx> {\n+) -> BodyWithBorrowckFacts<'_> {\n     let (input_body, promoted) = tcx.mir_promoted(def);\n     let infcx = tcx.infer_ctxt().with_opaque_type_inference(DefiningAnchor::Bind(def.did)).build();\n     let input_body: &Body<'_> = &input_body.borrow();"}, {"sha": "2c4d953f011fc013c8058fc17506cecb12e76832", "filename": "compiler/rustc_borrowck/src/diagnostics/find_all_local_uses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::mir::{Body, Local, Location};\n /// Find all uses of (including assignments to) a [`Local`].\n ///\n /// Uses `BTreeSet` so output is deterministic.\n-pub(super) fn find<'tcx>(body: &Body<'tcx>, local: Local) -> BTreeSet<Location> {\n+pub(super) fn find(body: &Body<'_>, local: Local) -> BTreeSet<Location> {\n     let mut visitor = AllLocalUsesVisitor { for_local: local, uses: BTreeSet::default() };\n     visitor.visit_body(body);\n     visitor.uses"}, {"sha": "168b798788b4c747c7fad8e4db5337b5f36fceaf", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -124,10 +124,7 @@ pub fn provide(providers: &mut Providers) {\n     };\n }\n \n-fn mir_borrowck<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptConstParam<LocalDefId>,\n-) -> &'tcx BorrowCheckResult<'tcx> {\n+fn mir_borrowck(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> &BorrowCheckResult<'_> {\n     let (input_body, promoted) = tcx.mir_promoted(def);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def.did.to_def_id()));\n "}, {"sha": "09cf870bcf35af780f724bdb8a4ea55a6fca3ccd", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -85,7 +85,7 @@ impl UniversalRegionRelations<'_> {\n     /// outlives `fr` and (b) is not local.\n     ///\n     /// (*) If there are multiple competing choices, we return all of them.\n-    pub(crate) fn non_local_upper_bounds<'a>(&'a self, fr: RegionVid) -> Vec<RegionVid> {\n+    pub(crate) fn non_local_upper_bounds(&self, fr: RegionVid) -> Vec<RegionVid> {\n         debug!(\"non_local_upper_bound(fr={:?})\", fr);\n         let res = self.non_local_bounds(&self.inverse_outlives, fr);\n         assert!(!res.is_empty(), \"can't find an upper bound!?\");\n@@ -148,9 +148,9 @@ impl UniversalRegionRelations<'_> {\n     /// Helper for `non_local_upper_bounds` and `non_local_lower_bounds`.\n     /// Repeatedly invokes `postdom_parent` until we find something that is not\n     /// local. Returns `None` if we never do so.\n-    fn non_local_bounds<'a>(\n+    fn non_local_bounds(\n         &self,\n-        relation: &'a TransitiveRelation<RegionVid>,\n+        relation: &TransitiveRelation<RegionVid>,\n         fr0: RegionVid,\n     ) -> Vec<RegionVid> {\n         // This method assumes that `fr0` is one of the universally"}, {"sha": "925392b500ad27196d33e92c7a81b475762a33a0", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -352,7 +352,7 @@ pub fn parse_asm_args<'a>(\n ///\n /// This function must be called immediately after the option token is parsed.\n /// Otherwise, the suggestion will be incorrect.\n-fn err_duplicate_option<'a>(p: &mut Parser<'a>, symbol: Symbol, span: Span) {\n+fn err_duplicate_option(p: &mut Parser<'_>, symbol: Symbol, span: Span) {\n     let mut err = p\n         .sess\n         .span_diagnostic"}, {"sha": "d464bd3d12a07a57fe6304f213018dd3777b23d8", "filename": "compiler/rustc_codegen_gcc/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbase.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -52,7 +52,7 @@ pub fn linkage_to_gcc(linkage: Linkage) -> FunctionType {\n     }\n }\n \n-pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol, supports_128bit_integers: bool) -> (ModuleCodegen<GccContext>, u64) {\n+pub fn compile_codegen_unit(tcx: TyCtxt<'_>, cgu_name: Symbol, supports_128bit_integers: bool) -> (ModuleCodegen<GccContext>, u64) {\n     let prof_timer = tcx.prof.generic_activity(\"codegen_module\");\n     let start_time = Instant::now();\n "}, {"sha": "0afc56b4494d3a237948dd508dbd4e5c00bf9cac", "filename": "compiler/rustc_codegen_gcc/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -44,7 +44,7 @@ pub fn bytes_in_context<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, bytes: &[u8]) ->\n     context.new_array_constructor(None, typ, &elements)\n }\n \n-pub fn type_is_pointer<'gcc>(typ: Type<'gcc>) -> bool {\n+pub fn type_is_pointer(typ: Type<'_>) -> bool {\n     typ.get_pointee().is_some()\n }\n "}, {"sha": "bf1da38312f7d93ed0aafc0af1d388373ec0debf", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -161,7 +161,7 @@ impl ExtraBackendMethods for GccCodegenBackend {\n         mods\n     }\n \n-    fn compile_codegen_unit<'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: Symbol) -> (ModuleCodegen<Self::Module>, u64) {\n+    fn compile_codegen_unit(&self, tcx: TyCtxt<'_>, cgu_name: Symbol) -> (ModuleCodegen<Self::Module>, u64) {\n         base::compile_codegen_unit(tcx, cgu_name, *self.supports_128bit_integers.lock().expect(\"lock\"))\n     }\n "}, {"sha": "393bf30e9f83411d5063ba17d76c7657aeb020ee", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -30,7 +30,7 @@ use std::ffi::CString;\n /// implementing this Rust version, and though the format documentation is very explicit and\n /// detailed, some undocumented details in Clang's implementation (that may or may not be important)\n /// were also replicated for Rust's Coverage Map.\n-pub fn finalize<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n+pub fn finalize(cx: &CodegenCx<'_, '_>) {\n     let tcx = cx.tcx;\n \n     // Ensure the installed version of LLVM supports at least Coverage Map\n@@ -284,7 +284,7 @@ fn save_function_record(\n /// \"code coverage dead code cgu\" during the partitioning process. This prevents us from generating\n /// code regions for the same function more than once which can lead to linker errors regarding\n /// duplicate symbols.\n-fn add_unused_functions<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n+fn add_unused_functions(cx: &CodegenCx<'_, '_>) {\n     assert!(cx.codegen_unit.is_code_coverage_dead_code_cgu());\n \n     let tcx = cx.tcx;"}, {"sha": "48e3a812e4f20c839a60a7adcb61969201e82065", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -111,7 +111,7 @@ macro_rules! return_if_di_node_created_in_meantime {\n \n /// Extract size and alignment from a TyAndLayout.\n #[inline]\n-fn size_and_align_of<'tcx>(ty_and_layout: TyAndLayout<'tcx>) -> (Size, Align) {\n+fn size_and_align_of(ty_and_layout: TyAndLayout<'_>) -> (Size, Align) {\n     (ty_and_layout.size, ty_and_layout.align.abi)\n }\n "}, {"sha": "8b4861962b22947f0d9d1dd4fbeae5571eb4c50f", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -2390,11 +2390,11 @@ extern \"C\" {\n \n     pub fn LLVMRustSetDataLayoutFromTargetMachine<'a>(M: &'a Module, TM: &'a TargetMachine);\n \n-    pub fn LLVMRustBuildOperandBundleDef<'a>(\n+    pub fn LLVMRustBuildOperandBundleDef(\n         Name: *const c_char,\n-        Inputs: *const &'a Value,\n+        Inputs: *const &'_ Value,\n         NumInputs: c_uint,\n-    ) -> &'a mut OperandBundleDef<'a>;\n+    ) -> &mut OperandBundleDef<'_>;\n     pub fn LLVMRustFreeOperandBundleDef<'a>(Bundle: &'a mut OperandBundleDef<'a>);\n \n     pub fn LLVMRustPositionBuilderAtStart<'a>(B: &Builder<'a>, BB: &'a BasicBlock);"}, {"sha": "edde1537b81e19bcbde989104bf83592b4aff038", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -607,21 +607,21 @@ fn link_dwarf_object<'a>(\n     }\n \n     impl<Relocations> ThorinSession<Relocations> {\n-        fn alloc_mmap<'arena>(&'arena self, data: Mmap) -> &'arena Mmap {\n+        fn alloc_mmap(&self, data: Mmap) -> &Mmap {\n             (*self.arena_mmap.alloc(data)).borrow()\n         }\n     }\n \n     impl<Relocations> thorin::Session<Relocations> for ThorinSession<Relocations> {\n-        fn alloc_data<'arena>(&'arena self, data: Vec<u8>) -> &'arena [u8] {\n+        fn alloc_data(&self, data: Vec<u8>) -> &[u8] {\n             (*self.arena_data.alloc(data)).borrow()\n         }\n \n-        fn alloc_relocation<'arena>(&'arena self, data: Relocations) -> &'arena Relocations {\n+        fn alloc_relocation(&self, data: Relocations) -> &Relocations {\n             (*self.arena_relocations.alloc(data)).borrow()\n         }\n \n-        fn read_input<'arena>(&'arena self, path: &Path) -> std::io::Result<&'arena [u8]> {\n+        fn read_input(&self, path: &Path) -> std::io::Result<&[u8]> {\n             let file = File::open(&path)?;\n             let mmap = (unsafe { Mmap::map(file) })?;\n             Ok(self.alloc_mmap(mmap))"}, {"sha": "8cb7d74b90d4b40dc6393cd63b5925b7a3260c9c", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -163,10 +163,10 @@ fn is_reachable_non_generic_provider_extern(tcx: TyCtxt<'_>, def_id: DefId) -> b\n     tcx.reachable_non_generics(def_id.krate).contains_key(&def_id)\n }\n \n-fn exported_symbols_provider_local<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn exported_symbols_provider_local(\n+    tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportInfo)] {\n+) -> &[(ExportedSymbol<'_>, SymbolExportInfo)] {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {"}, {"sha": "60e9b40e8fb409f862244c561500de87ca628a66", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -10,7 +10,7 @@ pub mod type_names;\n /// NOTE: This is somewhat inconsistent right now: For empty enums and enums with a single\n ///       fieldless variant, we generate DW_TAG_struct_type, although a\n ///       DW_TAG_enumeration_type would be a better fit.\n-pub fn wants_c_like_enum_debuginfo<'tcx>(enum_type_and_layout: TyAndLayout<'tcx>) -> bool {\n+pub fn wants_c_like_enum_debuginfo(enum_type_and_layout: TyAndLayout<'_>) -> bool {\n     match enum_type_and_layout.ty.kind() {\n         ty::Adt(adt_def, _) => {\n             if !adt_def.is_enum() {"}, {"sha": "2421acab4715d1078b73471abf79515d270f6448", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'tcx> VirtualIndex {\n \n /// This takes a valid `self` receiver type and extracts the principal trait\n /// ref of the type.\n-fn expect_dyn_trait_in_self<'tcx>(ty: Ty<'tcx>) -> ty::PolyExistentialTraitRef<'tcx> {\n+fn expect_dyn_trait_in_self(ty: Ty<'_>) -> ty::PolyExistentialTraitRef<'_> {\n     for arg in ty.peel_refs().walk() {\n         if let GenericArgKind::Type(ty) = arg.unpack() {\n             if let ty::Dynamic(data, _, _) = ty.kind() {"}, {"sha": "da69fc8ecf77e11d6726f0686d3f061cd7374407", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -419,7 +419,7 @@ pub fn from_target_feature(\n \n /// Computes the set of target features used in a function for the purposes of\n /// inline assembly.\n-fn asm_target_features<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx FxHashSet<Symbol> {\n+fn asm_target_features(tcx: TyCtxt<'_>, did: DefId) -> &FxHashSet<Symbol> {\n     let mut target_features = tcx.sess.unstable_target_features.clone();\n     if tcx.def_kind(did).has_codegen_attrs() {\n         let attrs = tcx.codegen_fn_attrs(did);"}, {"sha": "16296b2248975e6eb627a3d9ceb21ed967a6bb42", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -205,22 +205,19 @@ impl SelfProfilerRef {\n     /// VerboseTimingGuard returned from this call is dropped. In addition to recording\n     /// a measureme event, \"verbose\" generic activities also print a timing entry to\n     /// stderr if the compiler is invoked with -Ztime-passes.\n-    pub fn verbose_generic_activity<'a>(\n-        &'a self,\n-        event_label: &'static str,\n-    ) -> VerboseTimingGuard<'a> {\n+    pub fn verbose_generic_activity(&self, event_label: &'static str) -> VerboseTimingGuard<'_> {\n         let message =\n             if self.print_verbose_generic_activities { Some(event_label.to_owned()) } else { None };\n \n         VerboseTimingGuard::start(message, self.generic_activity(event_label))\n     }\n \n     /// Like `verbose_generic_activity`, but with an extra arg.\n-    pub fn verbose_generic_activity_with_arg<'a, A>(\n-        &'a self,\n+    pub fn verbose_generic_activity_with_arg<A>(\n+        &self,\n         event_label: &'static str,\n         event_arg: A,\n-    ) -> VerboseTimingGuard<'a>\n+    ) -> VerboseTimingGuard<'_>\n     where\n         A: Borrow<str> + Into<String>,\n     {"}, {"sha": "1ff0d58df140907129ac3d97d39a81ee10a3e630", "filename": "compiler/rustc_data_structures/src/transitive_relation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_data_structures%2Fsrc%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_data_structures%2Fsrc%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftransitive_relation.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -199,7 +199,7 @@ impl<T: Eq + Hash + Copy> TransitiveRelation<T> {\n     /// Viewing the relation as a graph, computes the \"mutual\n     /// immediate postdominator\" of a set of points (if one\n     /// exists). See `postdom_upper_bound` for details.\n-    pub fn mutual_immediate_postdominator<'a>(&'a self, mut mubs: Vec<T>) -> Option<T> {\n+    pub fn mutual_immediate_postdominator(&self, mut mubs: Vec<T>) -> Option<T> {\n         loop {\n             match mubs.len() {\n                 0 => return None,"}, {"sha": "14257e4d5c60b8c1ccbd5c40b89267b0162d19eb", "filename": "compiler/rustc_data_structures/src/unord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -178,7 +178,7 @@ impl<V: Eq + Hash> UnordSet<V> {\n     }\n \n     #[inline]\n-    pub fn items<'a>(&'a self) -> UnordItems<&'a V, impl Iterator<Item = &'a V>> {\n+    pub fn items(&self) -> UnordItems<&V, impl Iterator<Item = &V>> {\n         UnordItems(self.inner.iter())\n     }\n \n@@ -255,7 +255,7 @@ impl<K: Eq + Hash, V> UnordMap<K, V> {\n     }\n \n     #[inline]\n-    pub fn items<'a>(&'a self) -> UnordItems<(&'a K, &'a V), impl Iterator<Item = (&'a K, &'a V)>> {\n+    pub fn items(&self) -> UnordItems<(&K, &V), impl Iterator<Item = (&K, &V)>> {\n         UnordItems(self.inner.iter())\n     }\n \n@@ -311,7 +311,7 @@ impl<V> UnordBag<V> {\n     }\n \n     #[inline]\n-    pub fn items<'a>(&'a self) -> UnordItems<&'a V, impl Iterator<Item = &'a V>> {\n+    pub fn items(&self) -> UnordItems<&V, impl Iterator<Item = &V>> {\n         UnordItems(self.inner.iter())\n     }\n "}, {"sha": "37a51980a0888b375ff07b9b33fdca744c521337", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -549,9 +549,7 @@ fn icu_locale_from_unic_langid(lang: LanguageIdentifier) -> Option<icu_locid::Lo\n     icu_locid::Locale::try_from_bytes(lang.to_string().as_bytes()).ok()\n }\n \n-pub fn fluent_value_from_str_list_sep_by_and<'source>(\n-    l: Vec<Cow<'source, str>>,\n-) -> FluentValue<'source> {\n+pub fn fluent_value_from_str_list_sep_by_and(l: Vec<Cow<'_, str>>) -> FluentValue<'_> {\n     // Fluent requires 'static value here for its AnyEq usages.\n     #[derive(Clone, PartialEq, Debug)]\n     struct FluentStrListSepByAnd(Vec<String>);"}, {"sha": "878284f5928de6cc4fffbe77a8bf94f4a20b3891", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -356,7 +356,7 @@ fn parse_sep_and_kleene_op(\n // `$$` or a meta-variable is the lhs of a macro but shouldn't.\n //\n // For example, `macro_rules! foo { ( ${length()} ) => {} }`\n-fn span_dollar_dollar_or_metavar_in_the_lhs_err<'sess>(sess: &'sess ParseSess, token: &Token) {\n+fn span_dollar_dollar_or_metavar_in_the_lhs_err(sess: &ParseSess, token: &Token) {\n     sess.span_diagnostic\n         .span_err(token.span, &format!(\"unexpected token: {}\", pprust::token_to_string(token)));\n     sess.span_diagnostic.span_note_without_error("}, {"sha": "434f0a53b7866aed46efe8e4668653842cac157e", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -164,7 +164,7 @@\n //!     fn node_id(&'a self, n: &Nd) -> dot::Id<'a> {\n //!         dot::Id::new(format!(\"N{}\", n)).unwrap()\n //!     }\n-//!     fn node_label<'b>(&'b self, n: &Nd) -> dot::LabelText<'b> {\n+//!     fn node_label(&self, n: &Nd) -> dot::LabelText<'_> {\n //!         dot::LabelText::LabelStr(self.nodes[*n].into())\n //!     }\n //!     fn edge_label<'b>(&'b self, _: &Ed) -> dot::LabelText<'b> {"}, {"sha": "a714663741be72eaf7448eae77b05c45bf4f8aec", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -162,7 +162,7 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n }\n \n /// Check that a `static` is inhabited.\n-fn check_static_inhabited<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n+fn check_static_inhabited(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     // Make sure statics are inhabited.\n     // Other parts of the compiler assume that there are no uninhabited places. In principle it\n     // would be enough to check this for `extern` statics, as statics with an initializer will\n@@ -212,7 +212,7 @@ fn check_static_inhabited<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n \n /// Checks that an opaque type does not contain cycles and does not use `Self` or `T::Foo`\n /// projections that would result in \"inheriting lifetimes\".\n-fn check_opaque<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n+fn check_opaque(tcx: TyCtxt<'_>, id: hir::ItemId) {\n     let item = tcx.hir().item(id);\n     let hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) = item.kind else {\n         tcx.sess.delay_span_bug(tcx.hir().span(id.hir_id()), \"expected opaque item\");\n@@ -245,8 +245,8 @@ fn check_opaque<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n /// Checks that an opaque type does not use `Self` or `T::Foo` projections that would result\n /// in \"inheriting lifetimes\".\n #[instrument(level = \"debug\", skip(tcx, span))]\n-pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(super) fn check_opaque_for_inheriting_lifetimes(\n+    tcx: TyCtxt<'_>,\n     def_id: LocalDefId,\n     span: Span,\n ) {\n@@ -496,7 +496,7 @@ fn is_enum_of_nonnullable_ptr<'tcx>(\n     matches!(field.ty(tcx, substs).kind(), ty::FnPtr(..) | ty::Ref(..))\n }\n \n-fn check_static_linkage<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n+fn check_static_linkage(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     if tcx.codegen_fn_attrs(def_id).import_linkage.is_some() {\n         if match tcx.type_of(def_id).kind() {\n             ty::RawPtr(_) => false,\n@@ -508,7 +508,7 @@ fn check_static_linkage<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n     }\n }\n \n-fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n+fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n     debug!(\n         \"check_item_type(it.def_id={:?}, it.name={})\",\n         id.owner_id,\n@@ -1160,7 +1160,7 @@ pub(super) fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, adt: ty::AdtDef<'tcx>)\n }\n \n #[allow(trivial_numeric_casts)]\n-fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n+fn check_enum(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n "}, {"sha": "c6bda9b46410edbeb539aeb31b40bf17d601f45b", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -1517,8 +1517,8 @@ fn compare_generic_param_kinds<'tcx>(\n }\n \n /// Use `tcx.compare_assoc_const_impl_item_with_trait_item` instead\n-pub(crate) fn raw_compare_const_impl<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(crate) fn raw_compare_const_impl(\n+    tcx: TyCtxt<'_>,\n     (impl_const_item_def, trait_const_item_def): (LocalDefId, DefId),\n ) -> Result<(), ErrorGuaranteed> {\n     let impl_const_item = tcx.associated_item(impl_const_item_def);"}, {"sha": "ed2aed293a7710218016b653a028db52f5a9ff9d", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -115,10 +115,10 @@ fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n \n /// Given a `DefId` for an opaque type in return position, find its parent item's return\n /// expressions.\n-fn get_owner_return_paths<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn get_owner_return_paths(\n+    tcx: TyCtxt<'_>,\n     def_id: LocalDefId,\n-) -> Option<(LocalDefId, ReturnsVisitor<'tcx>)> {\n+) -> Option<(LocalDefId, ReturnsVisitor<'_>)> {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let parent_id = tcx.hir().get_parent_item(hir_id).def_id;\n     tcx.hir().find_by_def_id(parent_id).and_then(|node| node.body_id()).map(|body_id| {"}, {"sha": "aedc736b023939f3f8b8d72cde6412d7ccb668c6", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -1673,7 +1673,7 @@ fn check_method_receiver<'tcx>(\n     }\n }\n \n-fn e0307<'tcx>(tcx: TyCtxt<'tcx>, span: Span, receiver_ty: Ty<'_>) {\n+fn e0307(tcx: TyCtxt<'_>, span: Span, receiver_ty: Ty<'_>) {\n     struct_span_err!(\n         tcx.sess.diagnostic(),\n         span,"}, {"sha": "2790d91572becae4c81abe75a32371ce804ff0d2", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -171,7 +171,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     }\n }\n \n-fn visit_implementation_of_coerce_unsized<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) {\n+fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     debug!(\"visit_implementation_of_coerce_unsized: impl_did={:?}\", impl_did);\n \n     // Just compute this for the side-effects, in particular reporting\n@@ -181,7 +181,7 @@ fn visit_implementation_of_coerce_unsized<'tcx>(tcx: TyCtxt<'tcx>, impl_did: Loc\n     tcx.at(span).coerce_unsized_info(impl_did);\n }\n \n-fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) {\n+fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     debug!(\"visit_implementation_of_dispatch_from_dyn: impl_did={:?}\", impl_did);\n \n     let impl_hir_id = tcx.hir().local_def_id_to_hir_id(impl_did);"}, {"sha": "b7d599f57fd449136dd6e81d461ac269fba5b5bb", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -839,7 +839,7 @@ fn convert_variant(\n     )\n }\n \n-fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::AdtDef<'tcx> {\n+fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AdtDef<'_> {\n     use rustc_hir::*;\n \n     let def_id = def_id.expect_local();"}, {"sha": "b63a8ef698d1843f77021a8197e5c57ee14bd022", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -276,7 +276,7 @@ fn resolve_lifetimes(tcx: TyCtxt<'_>, local_def_id: hir::OwnerId) -> ResolveLife\n     rl\n }\n \n-fn late_region_as_bound_region<'tcx>(tcx: TyCtxt<'tcx>, region: &Region) -> ty::BoundVariableKind {\n+fn late_region_as_bound_region(tcx: TyCtxt<'_>, region: &Region) -> ty::BoundVariableKind {\n     match region {\n         Region::LateBound(_, _, def_id) => {\n             let name = tcx.hir().name(tcx.hir().local_def_id_to_hir_id(def_id.expect_local()));\n@@ -1018,7 +1018,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n }\n \n-fn object_lifetime_default<'tcx>(tcx: TyCtxt<'tcx>, param_def_id: DefId) -> ObjectLifetimeDefault {\n+fn object_lifetime_default(tcx: TyCtxt<'_>, param_def_id: DefId) -> ObjectLifetimeDefault {\n     debug_assert_eq!(tcx.def_kind(param_def_id), DefKind::TyParam);\n     let param_def_id = param_def_id.expect_local();\n     let parent_def_id = tcx.local_parent(param_def_id);"}, {"sha": "0943350e2d47c8431c97132a85fe6f844a356b27", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -318,10 +318,10 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     }\n }\n \n-fn const_evaluatable_predicates_of<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn const_evaluatable_predicates_of(\n+    tcx: TyCtxt<'_>,\n     def_id: LocalDefId,\n-) -> FxIndexSet<(ty::Predicate<'tcx>, Span)> {\n+) -> FxIndexSet<(ty::Predicate<'_>, Span)> {\n     struct ConstCollector<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         preds: FxIndexSet<(ty::Predicate<'tcx>, Span)>,"}, {"sha": "b60fc276178b396204208118750ca7434fa54976", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -157,11 +157,11 @@ fn check_constness(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node: Node,\n /// ```\n ///\n /// Would return `S1 = [C]` and `S2 = [Vec<C>, C]`.\n-fn get_impl_substs<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn get_impl_substs(\n+    tcx: TyCtxt<'_>,\n     impl1_def_id: LocalDefId,\n     impl2_node: Node,\n-) -> Option<(SubstsRef<'tcx>, SubstsRef<'tcx>)> {\n+) -> Option<(SubstsRef<'_>, SubstsRef<'_>)> {\n     let infcx = &tcx.infer_ctxt().build();\n     let ocx = ObligationCtxt::new(infcx);\n     let param_env = tcx.param_env(impl1_def_id);"}, {"sha": "a46f2a94cd281a17006d5cb2a6be6332eaabb661", "filename": "compiler/rustc_hir_analysis/src/outlives/implicit_infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -13,9 +13,9 @@ use super::utils::*;\n /// `global_inferred_outlives`: this is initially the empty map that\n ///     was generated by walking the items in the crate. This will\n ///     now be filled with inferred predicates.\n-pub(super) fn infer_predicates<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-) -> FxHashMap<DefId, ty::EarlyBinder<RequiredPredicates<'tcx>>> {\n+pub(super) fn infer_predicates(\n+    tcx: TyCtxt<'_>,\n+) -> FxHashMap<DefId, ty::EarlyBinder<RequiredPredicates<'_>>> {\n     debug!(\"infer_predicates\");\n \n     let mut explicit_map = ExplicitPredicatesMap::new();"}, {"sha": "b0cd4a16e9869270546b1a485cb0479ddd7b7626", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -118,7 +118,7 @@ fn identity(_: Ty<'_>) -> Vec<Adjustment<'_>> {\n     vec![]\n }\n \n-fn simple<'tcx>(kind: Adjust<'tcx>) -> impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>> {\n+fn simple<'tcx>(kind: Adjust<'tcx>) -> impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'_>> {\n     move |target| vec![Adjustment { kind, target }]\n }\n "}, {"sha": "7774ffc9b9793ea8ac6a93a0e41b9ca196514a71", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -756,8 +756,8 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     /// - When reporting the Place back to the Delegate, ensure that the UpvarId uses the enclosing\n     /// closure as the DefId.\n     fn walk_captures(&mut self, closure_expr: &hir::Closure<'_>) {\n-        fn upvar_is_local_variable<'tcx>(\n-            upvars: Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>>,\n+        fn upvar_is_local_variable(\n+            upvars: Option<&FxIndexMap<hir::HirId, hir::Upvar>>,\n             upvar_id: hir::HirId,\n             body_owner_is_closure: bool,\n         ) -> bool {"}, {"sha": "f7b493bc2242bd4b8bdd2141fbbfb27515980013", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -79,7 +79,7 @@ pub fn compute_drop_ranges<'a, 'tcx>(\n /// result of `foo`. On the other hand, if `place` points to `x` then `f` will\n /// be called both on the `ExprKind::Path` node that represents the expression\n /// as well as the HirId of the local `x` itself.\n-fn for_each_consumable<'tcx>(hir: Map<'tcx>, place: TrackedValue, mut f: impl FnMut(TrackedValue)) {\n+fn for_each_consumable(hir: Map<'_>, place: TrackedValue, mut f: impl FnMut(TrackedValue)) {\n     f(place);\n     let node = hir.find(place.hir_id());\n     if let Some(Node::Expr(expr)) = node {"}, {"sha": "b06927f9662be7aeb09882ab6b7ec860a1a94061", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -462,8 +462,8 @@ fn fatally_break_rust(sess: &Session) {\n     ));\n }\n \n-fn has_expected_num_generic_args<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn has_expected_num_generic_args(\n+    tcx: TyCtxt<'_>,\n     trait_did: Option<DefId>,\n     expected: usize,\n ) -> bool {"}, {"sha": "9f0d175c4c669870d4edff2499bb79f2490ddb3d", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -904,7 +904,7 @@ enum Op {\n }\n \n /// Dereferences a single level of immutable referencing.\n-fn deref_ty_if_possible<'tcx>(ty: Ty<'tcx>) -> Ty<'tcx> {\n+fn deref_ty_if_possible(ty: Ty<'_>) -> Ty<'_> {\n     match ty.kind() {\n         ty::Ref(_, ty, hir::Mutability::Not) => *ty,\n         _ => ty,"}, {"sha": "a9347991e7f9899935a361581d47600b8ed777f5", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -1675,7 +1675,7 @@ fn apply_capture_kind_on_capture_ty<'tcx>(\n }\n \n /// Returns the Span of where the value with the provided HirId would be dropped\n-fn drop_location_span<'tcx>(tcx: TyCtxt<'tcx>, hir_id: hir::HirId) -> Span {\n+fn drop_location_span(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> Span {\n     let owner_id = tcx.hir().get_enclosing_scope(hir_id).unwrap();\n \n     let owner_node = tcx.hir().get(owner_id);\n@@ -1843,10 +1843,10 @@ fn restrict_precision_for_drop_types<'a, 'tcx>(\n /// - No projections are applied to raw pointers, since these require unsafe blocks. We capture\n ///   them completely.\n /// - No projections are applied on top of Union ADTs, since these require unsafe blocks.\n-fn restrict_precision_for_unsafe<'tcx>(\n-    mut place: Place<'tcx>,\n+fn restrict_precision_for_unsafe(\n+    mut place: Place<'_>,\n     mut curr_mode: ty::UpvarCapture,\n-) -> (Place<'tcx>, ty::UpvarCapture) {\n+) -> (Place<'_>, ty::UpvarCapture) {\n     if place.base_ty.is_unsafe_ptr() {\n         truncate_place_to_len_and_update_capture_kind(&mut place, &mut curr_mode, 0);\n     }\n@@ -1876,10 +1876,10 @@ fn restrict_precision_for_unsafe<'tcx>(\n /// - No Index projections are captured, since arrays are captured completely.\n /// - No unsafe block is required to capture `place`\n /// Returns the truncated place and updated capture mode.\n-fn restrict_capture_precision<'tcx>(\n-    place: Place<'tcx>,\n+fn restrict_capture_precision(\n+    place: Place<'_>,\n     curr_mode: ty::UpvarCapture,\n-) -> (Place<'tcx>, ty::UpvarCapture) {\n+) -> (Place<'_>, ty::UpvarCapture) {\n     let (mut place, mut curr_mode) = restrict_precision_for_unsafe(place, curr_mode);\n \n     if place.projections.is_empty() {\n@@ -1904,10 +1904,10 @@ fn restrict_capture_precision<'tcx>(\n }\n \n /// Truncate deref of any reference.\n-fn adjust_for_move_closure<'tcx>(\n-    mut place: Place<'tcx>,\n+fn adjust_for_move_closure(\n+    mut place: Place<'_>,\n     mut kind: ty::UpvarCapture,\n-) -> (Place<'tcx>, ty::UpvarCapture) {\n+) -> (Place<'_>, ty::UpvarCapture) {\n     let first_deref = place.projections.iter().position(|proj| proj.kind == ProjectionKind::Deref);\n \n     if let Some(idx) = first_deref {\n@@ -1919,10 +1919,10 @@ fn adjust_for_move_closure<'tcx>(\n \n /// Adjust closure capture just that if taking ownership of data, only move data\n /// from enclosing stack frame.\n-fn adjust_for_non_move_closure<'tcx>(\n-    mut place: Place<'tcx>,\n+fn adjust_for_non_move_closure(\n+    mut place: Place<'_>,\n     mut kind: ty::UpvarCapture,\n-) -> (Place<'tcx>, ty::UpvarCapture) {\n+) -> (Place<'_>, ty::UpvarCapture) {\n     let contains_deref =\n         place.projections.iter().position(|proj| proj.kind == ProjectionKind::Deref);\n \n@@ -2225,10 +2225,10 @@ fn determine_place_ancestry_relation<'tcx>(\n ///     // it is constrained to `'a`\n /// }\n /// ```\n-fn truncate_capture_for_optimization<'tcx>(\n-    mut place: Place<'tcx>,\n+fn truncate_capture_for_optimization(\n+    mut place: Place<'_>,\n     mut curr_mode: ty::UpvarCapture,\n-) -> (Place<'tcx>, ty::UpvarCapture) {\n+) -> (Place<'_>, ty::UpvarCapture) {\n     let is_shared_ref = |ty: Ty<'_>| matches!(ty.kind(), ty::Ref(.., hir::Mutability::Not));\n \n     // Find the right-most deref (if any). All the projections that come after this"}, {"sha": "67b4d6d6959f602c042889c168d0047adf2fbd5b", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -432,10 +432,7 @@ fn walk_between<'q>(\n     }\n }\n \n-fn filter_edges<'q>(\n-    query: &'q DepGraphQuery,\n-    nodes: &FxHashSet<DepKind>,\n-) -> Vec<(DepKind, DepKind)> {\n+fn filter_edges(query: &DepGraphQuery, nodes: &FxHashSet<DepKind>) -> Vec<(DepKind, DepKind)> {\n     let uniq: FxHashSet<_> = query\n         .edges()\n         .into_iter()"}, {"sha": "96a976fb89e0fe8f15fdf680787893d676315771", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -2199,10 +2199,10 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             );\n         }\n \n-        fn binding_suggestion<'tcx, S: fmt::Display>(\n+        fn binding_suggestion<S: fmt::Display>(\n             err: &mut Diagnostic,\n             type_param_span: Option<(Span, bool)>,\n-            bound_kind: GenericKind<'tcx>,\n+            bound_kind: GenericKind<'_>,\n             sub: S,\n             add_lt_sugg: Option<(Span, String)>,\n         ) {"}, {"sha": "8dccfe0046c451d2f8d5969b7fd537be7968b430", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -304,7 +304,7 @@ fn check_panic_str<'tcx>(\n \n /// Given the span of `some_macro!(args);`, gives the span of `(` and `)`,\n /// and the type of (opening) delimiter used.\n-fn find_delimiters<'tcx>(cx: &LateContext<'tcx>, span: Span) -> Option<(Span, Span, char)> {\n+fn find_delimiters(cx: &LateContext<'_>, span: Span) -> Option<(Span, Span, char)> {\n     let snippet = cx.sess().parse_sess.source_map().span_to_snippet(span).ok()?;\n     let (open, open_ch) = snippet.char_indices().find(|&(_, c)| \"([{\".contains(c))?;\n     let close = snippet.rfind(|c| \")]}\".contains(c))?;"}, {"sha": "67868ded0b86b5b4c9de2442bfc2a75515fee6a0", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -1405,7 +1405,7 @@ declare_lint! {\n     /// struct S;\n     ///\n     /// impl S {\n-    ///     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n+    ///     fn late(self, _: &u8, _: &u8) {}\n     /// }\n     ///\n     /// fn main() {"}, {"sha": "767db3673225988f7bbe02621bfab31cb76b56db", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -29,7 +29,7 @@ impl SubdiagnosticDeriveBuilder {\n         Self { diag, f }\n     }\n \n-    pub(crate) fn into_tokens<'a>(self, mut structure: Structure<'a>) -> TokenStream {\n+    pub(crate) fn into_tokens(self, mut structure: Structure<'_>) -> TokenStream {\n         let implementation = {\n             let ast = structure.ast();\n             let span = ast.span().unwrap();"}, {"sha": "4ff9c777ad8587215548ecff47ff104733d0b9e0", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -385,7 +385,7 @@ impl quote::ToTokens for Applicability {\n \n /// Build the mapping of field names to fields. This allows attributes to peek values from\n /// other fields.\n-pub(super) fn build_field_mapping<'v>(variant: &VariantInfo<'v>) -> HashMap<String, TokenStream> {\n+pub(super) fn build_field_mapping(variant: &VariantInfo<'_>) -> HashMap<String, TokenStream> {\n     let mut fields_map = FieldMap::new();\n     for binding in variant.bindings() {\n         if let Some(ident) = &binding.ast().ident {"}, {"sha": "b34dc0df1e2805702763fc4ce09a53a677308022", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -520,8 +520,8 @@ impl<'a> CrateLoader<'a> {\n         }))\n     }\n \n-    fn resolve_crate<'b>(\n-        &'b mut self,\n+    fn resolve_crate(\n+        &mut self,\n         name: Symbol,\n         span: Span,\n         dep_kind: CrateDepKind,"}, {"sha": "d5d31bc3edc97af6572079812df5d2a68ad14f1b", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -1093,7 +1093,7 @@ fn should_encode_const(def_kind: DefKind) -> bool {\n     }\n }\n \n-fn should_encode_trait_impl_trait_tys<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn should_encode_trait_impl_trait_tys(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     if tcx.def_kind(def_id) != DefKind::AssocFn {\n         return false;\n     }"}, {"sha": "865bb70afb506172c5976fc73f8e504246a9b210", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -175,7 +175,7 @@ impl DepNodeExt for DepNode {\n     /// DepNode. Condition (2) might not be fulfilled if a DepNode\n     /// refers to something from the previous compilation session that\n     /// has been removed.\n-    fn extract_def_id<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n+    fn extract_def_id(&self, tcx: TyCtxt<'_>) -> Option<DefId> {\n         if tcx.fingerprint_style(self.kind) == FingerprintStyle::DefPathHash {\n             Some(tcx.def_path_hash_to_def_id(DefPathHash(self.hash.into()), &mut || {\n                 panic!(\"Failed to extract DefId: {:?} {}\", self.kind, self.hash)"}, {"sha": "fe640f185b647847b55320c58854f50bfb33184a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -18,7 +18,7 @@ use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n #[inline]\n-pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n+pub fn associated_body(node: Node<'_>) -> Option<BodyId> {\n     match node {\n         Node::Item(Item {\n             kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),\n@@ -41,7 +41,7 @@ pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n     }\n }\n \n-fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {\n+fn is_body_owner(node: Node<'_>, hir_id: HirId) -> bool {\n     match associated_body(node) {\n         Some(b) => b.hir_id == hir_id,\n         None => false,"}, {"sha": "0836f236e248f7779e50dee234a9f2a712952054", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -223,8 +223,8 @@ pub fn deprecation_message_and_lint(\n     )\n }\n \n-pub fn early_report_deprecation<'a>(\n-    lint_buffer: &'a mut LintBuffer,\n+pub fn early_report_deprecation(\n+    lint_buffer: &mut LintBuffer,\n     message: &str,\n     suggestion: Option<Symbol>,\n     lint: &'static Lint,"}, {"sha": "50e41e3e006310a098eeb9652a3ff09d161418bc", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -1767,9 +1767,9 @@ impl SourceScope {\n     /// Finds the original HirId this MIR item came from.\n     /// This is necessary after MIR optimizations, as otherwise we get a HirId\n     /// from the function that was inlined instead of the function call site.\n-    pub fn lint_root<'tcx>(\n+    pub fn lint_root(\n         self,\n-        source_scopes: &IndexVec<SourceScope, SourceScopeData<'tcx>>,\n+        source_scopes: &IndexVec<SourceScope, SourceScopeData<'_>>,\n     ) -> Option<HirId> {\n         let mut data = &source_scopes[self];\n         // FIXME(oli-obk): we should be able to just walk the `inlined_parent_scope`, but it"}, {"sha": "40289af257ff4dda8bcfdc411decbdb7f8936aad", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -88,7 +88,7 @@ pub fn dump_mir<'tcx, F>(\n     dump_matched_mir_node(tcx, pass_num, pass_name, disambiguator, body, extra_data);\n }\n \n-pub fn dump_enabled<'tcx>(tcx: TyCtxt<'tcx>, pass_name: &str, def_id: DefId) -> bool {\n+pub fn dump_enabled(tcx: TyCtxt<'_>, pass_name: &str, def_id: DefId) -> bool {\n     let Some(ref filters) = tcx.sess.opts.unstable_opts.dump_mir else {\n         return false;\n     };\n@@ -421,7 +421,7 @@ impl<'tcx> ExtraComments<'tcx> {\n     }\n }\n \n-fn use_verbose<'tcx>(ty: Ty<'tcx>, fn_def: bool) -> bool {\n+fn use_verbose(ty: Ty<'_>, fn_def: bool) -> bool {\n     match *ty.kind() {\n         ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_) => false,\n         // Unit type"}, {"sha": "887ee57157540e6f408de841d5825761978af356", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -230,7 +230,7 @@ where\n }\n \n /// Format a string showing the start line and column, and end line and column within a file.\n-pub fn source_range_no_file<'tcx>(tcx: TyCtxt<'tcx>, span: Span) -> String {\n+pub fn source_range_no_file(tcx: TyCtxt<'_>, span: Span) -> String {\n     let source_map = tcx.sess.source_map();\n     let start = source_map.lookup_char_pos(span.lo());\n     let end = source_map.lookup_char_pos(span.hi());\n@@ -322,7 +322,7 @@ fn block_span_viewable<'tcx>(\n     Some(SpanViewable { bb, span, id, tooltip })\n }\n \n-fn compute_block_span<'tcx>(data: &BasicBlockData<'tcx>, body_span: Span) -> Span {\n+fn compute_block_span(data: &BasicBlockData<'_>, body_span: Span) -> Span {\n     let mut span = data.terminator().source_info.span;\n     for statement_span in data.statements.iter().map(|statement| statement.source_info.span) {\n         // Only combine Spans from the root context, and within the function's body_span.\n@@ -522,12 +522,7 @@ where\n }\n \n #[inline(always)]\n-fn write_coverage_gap<'tcx, W>(\n-    tcx: TyCtxt<'tcx>,\n-    lo: BytePos,\n-    hi: BytePos,\n-    w: &mut W,\n-) -> io::Result<()>\n+fn write_coverage_gap<W>(tcx: TyCtxt<'_>, lo: BytePos, hi: BytePos, w: &mut W) -> io::Result<()>\n where\n     W: Write,\n {\n@@ -582,8 +577,8 @@ where\n     Ok(())\n }\n \n-fn make_html_snippet<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn make_html_snippet(\n+    tcx: TyCtxt<'_>,\n     span: Span,\n     some_viewable: Option<&SpanViewable>,\n ) -> Option<String> {\n@@ -664,7 +659,7 @@ fn trim_span_hi(span: Span, to_pos: BytePos) -> Span {\n     if to_pos >= span.hi() { span } else { span.with_hi(cmp::max(span.lo(), to_pos)) }\n }\n \n-fn fn_span<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Span {\n+fn fn_span(tcx: TyCtxt<'_>, def_id: DefId) -> Span {\n     let fn_decl_span = tcx.def_span(def_id);\n     if let Some(body_span) = hir_body(tcx, def_id).map(|hir_body| hir_body.value.span) {\n         if fn_decl_span.eq_ctxt(body_span) { fn_decl_span.to(body_span) } else { body_span }\n@@ -673,7 +668,7 @@ fn fn_span<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Span {\n     }\n }\n \n-fn hir_body<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<&'tcx rustc_hir::Body<'tcx>> {\n+fn hir_body(tcx: TyCtxt<'_>, def_id: DefId) -> Option<&rustc_hir::Body<'_>> {\n     let hir_node = tcx.hir().get_if_local(def_id).expect(\"expected DefId is local\");\n     hir::map::associated_body(hir_node).map(|fn_body_id| tcx.hir().body(fn_body_id))\n }"}, {"sha": "0b461d1ce41c5f2559bda8ea0a82f3e06562431d", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -302,7 +302,7 @@ pub fn reachable<'a, 'tcx>(\n }\n \n /// Returns a `BitSet` containing all basic blocks reachable from the `START_BLOCK`.\n-pub fn reachable_as_bitset<'tcx>(body: &Body<'tcx>) -> BitSet<BasicBlock> {\n+pub fn reachable_as_bitset(body: &Body<'_>) -> BitSet<BasicBlock> {\n     let mut iter = preorder(body);\n     (&mut iter).for_each(drop);\n     iter.visited"}, {"sha": "dd75b0d9ebc23e30de15728d67d877fb48e52a00", "filename": "compiler/rustc_middle/src/traits/chalk.rs", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -210,26 +210,23 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n         Box::new(chalk_ir::TyData { kind: ty, flags: flags })\n     }\n \n-    fn ty_data<'a>(self, ty: &'a Self::InternedType) -> &'a chalk_ir::TyData<Self> {\n+    fn ty_data(self, ty: &Self::InternedType) -> &chalk_ir::TyData<Self> {\n         ty\n     }\n \n     fn intern_lifetime(self, lifetime: chalk_ir::LifetimeData<Self>) -> Self::InternedLifetime {\n         Box::new(lifetime)\n     }\n \n-    fn lifetime_data<'a>(\n-        self,\n-        lifetime: &'a Self::InternedLifetime,\n-    ) -> &'a chalk_ir::LifetimeData<Self> {\n+    fn lifetime_data(self, lifetime: &Self::InternedLifetime) -> &chalk_ir::LifetimeData<Self> {\n         &lifetime\n     }\n \n     fn intern_const(self, constant: chalk_ir::ConstData<Self>) -> Self::InternedConst {\n         Box::new(constant)\n     }\n \n-    fn const_data<'a>(self, constant: &'a Self::InternedConst) -> &'a chalk_ir::ConstData<Self> {\n+    fn const_data(self, constant: &Self::InternedConst) -> &chalk_ir::ConstData<Self> {\n         &constant\n     }\n \n@@ -246,18 +243,15 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n         Box::new(data)\n     }\n \n-    fn generic_arg_data<'a>(\n-        self,\n-        data: &'a Self::InternedGenericArg,\n-    ) -> &'a chalk_ir::GenericArgData<Self> {\n+    fn generic_arg_data(self, data: &Self::InternedGenericArg) -> &chalk_ir::GenericArgData<Self> {\n         &data\n     }\n \n     fn intern_goal(self, goal: chalk_ir::GoalData<Self>) -> Self::InternedGoal {\n         Box::new(goal)\n     }\n \n-    fn goal_data<'a>(self, goal: &'a Self::InternedGoal) -> &'a chalk_ir::GoalData<Self> {\n+    fn goal_data(self, goal: &Self::InternedGoal) -> &chalk_ir::GoalData<Self> {\n         &goal\n     }\n \n@@ -268,7 +262,7 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n-    fn goals_data<'a>(self, goals: &'a Self::InternedGoals) -> &'a [chalk_ir::Goal<Self>] {\n+    fn goals_data(self, goals: &Self::InternedGoals) -> &[chalk_ir::Goal<Self>] {\n         goals\n     }\n \n@@ -279,10 +273,10 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n-    fn substitution_data<'a>(\n+    fn substitution_data(\n         self,\n-        substitution: &'a Self::InternedSubstitution,\n-    ) -> &'a [chalk_ir::GenericArg<Self>] {\n+        substitution: &Self::InternedSubstitution,\n+    ) -> &[chalk_ir::GenericArg<Self>] {\n         substitution\n     }\n \n@@ -293,10 +287,10 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n         Box::new(data)\n     }\n \n-    fn program_clause_data<'a>(\n+    fn program_clause_data(\n         self,\n-        clause: &'a Self::InternedProgramClause,\n-    ) -> &'a chalk_ir::ProgramClauseData<Self> {\n+        clause: &Self::InternedProgramClause,\n+    ) -> &chalk_ir::ProgramClauseData<Self> {\n         &clause\n     }\n \n@@ -307,10 +301,10 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n-    fn program_clauses_data<'a>(\n+    fn program_clauses_data(\n         self,\n-        clauses: &'a Self::InternedProgramClauses,\n-    ) -> &'a [chalk_ir::ProgramClause<Self>] {\n+        clauses: &Self::InternedProgramClauses,\n+    ) -> &[chalk_ir::ProgramClause<Self>] {\n         clauses\n     }\n \n@@ -321,10 +315,10 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n-    fn quantified_where_clauses_data<'a>(\n+    fn quantified_where_clauses_data(\n         self,\n-        clauses: &'a Self::InternedQuantifiedWhereClauses,\n-    ) -> &'a [chalk_ir::QuantifiedWhereClause<Self>] {\n+        clauses: &Self::InternedQuantifiedWhereClauses,\n+    ) -> &[chalk_ir::QuantifiedWhereClause<Self>] {\n         clauses\n     }\n \n@@ -335,10 +329,10 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n-    fn variable_kinds_data<'a>(\n+    fn variable_kinds_data(\n         self,\n-        parameter_kinds: &'a Self::InternedVariableKinds,\n-    ) -> &'a [chalk_ir::VariableKind<Self>] {\n+        parameter_kinds: &Self::InternedVariableKinds,\n+    ) -> &[chalk_ir::VariableKind<Self>] {\n         parameter_kinds\n     }\n \n@@ -349,10 +343,10 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n-    fn canonical_var_kinds_data<'a>(\n+    fn canonical_var_kinds_data(\n         self,\n-        canonical_var_kinds: &'a Self::InternedCanonicalVarKinds,\n-    ) -> &'a [chalk_ir::CanonicalVarKind<Self>] {\n+        canonical_var_kinds: &Self::InternedCanonicalVarKinds,\n+    ) -> &[chalk_ir::CanonicalVarKind<Self>] {\n         canonical_var_kinds\n     }\n \n@@ -363,10 +357,10 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n-    fn constraints_data<'a>(\n+    fn constraints_data(\n         self,\n-        constraints: &'a Self::InternedConstraints,\n-    ) -> &'a [chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>] {\n+        constraints: &Self::InternedConstraints,\n+    ) -> &[chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>] {\n         constraints\n     }\n \n@@ -377,10 +371,7 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n         data.into_iter().collect::<Result<Vec<_>, _>>()\n     }\n \n-    fn variances_data<'a>(\n-        self,\n-        variances: &'a Self::InternedVariances,\n-    ) -> &'a [chalk_ir::Variance] {\n+    fn variances_data(self, variances: &Self::InternedVariances) -> &[chalk_ir::Variance] {\n         variances\n     }\n }"}, {"sha": "aad5b2fbe0769c115b25f290980ec972d5ae2369", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -60,7 +60,7 @@ pub enum OverlapMode {\n }\n \n impl OverlapMode {\n-    pub fn get<'tcx>(tcx: TyCtxt<'tcx>, trait_id: DefId) -> OverlapMode {\n+    pub fn get(tcx: TyCtxt<'_>, trait_id: DefId) -> OverlapMode {\n         let with_negative_coherence = tcx.features().with_negative_coherence;\n         let strict_coherence = tcx.has_attr(trait_id, sym::rustc_strict_coherence);\n \n@@ -254,11 +254,11 @@ impl<'tcx> Ancestors<'tcx> {\n ///\n /// Returns `Err` if an error was reported while building the specialization\n /// graph.\n-pub fn ancestors<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn ancestors(\n+    tcx: TyCtxt<'_>,\n     trait_def_id: DefId,\n     start_from_impl: DefId,\n-) -> Result<Ancestors<'tcx>, ErrorGuaranteed> {\n+) -> Result<Ancestors<'_>, ErrorGuaranteed> {\n     let specialization_graph = tcx.specialization_graph_of(trait_def_id);\n \n     if let Some(reported) = specialization_graph.has_errored {"}, {"sha": "6ade8935fc84f3116607411fe126a9664c2def53", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -238,10 +238,7 @@ impl<'tcx> CapturedPlace<'tcx> {\n     }\n }\n \n-fn symbols_for_closure_captures<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def_id: (LocalDefId, LocalDefId),\n-) -> Vec<Symbol> {\n+fn symbols_for_closure_captures(tcx: TyCtxt<'_>, def_id: (LocalDefId, LocalDefId)) -> Vec<Symbol> {\n     let typeck_results = tcx.typeck(def_id.0);\n     let captures = typeck_results.closure_min_captures_flattened(def_id.1);\n     captures.into_iter().map(|captured_place| captured_place.to_symbol(tcx)).collect()"}, {"sha": "152a7e9d43fa4e32e7c6754efb5397cdc782beeb", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -239,7 +239,7 @@ impl<'tcx> Const<'tcx> {\n     }\n }\n \n-pub fn const_param_default<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Const<'tcx> {\n+pub fn const_param_default(tcx: TyCtxt<'_>, def_id: DefId) -> Const<'_> {\n     let default_def_id = match tcx.hir().get_by_def_id(def_id.expect_local()) {\n         hir::Node::GenericParam(hir::GenericParam {\n             kind: hir::GenericParamKind::Const { default: Some(ac), .. },"}, {"sha": "48958e0d9e91cd6328ea6eff03b246257a5de180", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -232,7 +232,7 @@ impl ScalarInt {\n     }\n \n     #[inline]\n-    pub fn try_to_machine_usize<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Result<u64, Size> {\n+    pub fn try_to_machine_usize(&self, tcx: TyCtxt<'_>) -> Result<u64, Size> {\n         Ok(self.to_bits(tcx.data_layout.pointer_size)? as u64)\n     }\n "}, {"sha": "5de414077a2b134bc8b9c0ac4924cc18f23b9565", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -1518,7 +1518,7 @@ impl<'tcx, T: 'tcx + ?Sized> IntoPointer for InternedInSet<'tcx, T> {\n \n #[allow(rustc::usage_of_ty_tykind)]\n impl<'tcx, T> Borrow<T> for InternedInSet<'tcx, WithCachedTypeInfo<T>> {\n-    fn borrow<'a>(&'a self) -> &'a T {\n+    fn borrow(&self) -> &T {\n         &self.0.internee\n     }\n }\n@@ -1541,7 +1541,7 @@ impl<'tcx, T: Hash> Hash for InternedInSet<'tcx, WithCachedTypeInfo<T>> {\n }\n \n impl<'tcx, T> Borrow<[T]> for InternedInSet<'tcx, List<T>> {\n-    fn borrow<'a>(&'a self) -> &'a [T] {\n+    fn borrow(&self) -> &[T] {\n         &self.0[..]\n     }\n }"}, {"sha": "8306d670a65deed8e81a4ecd092790b5834786e9", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -22,7 +22,7 @@ impl FlagComputation {\n         result\n     }\n \n-    pub fn for_predicate<'tcx>(binder: ty::Binder<'tcx, ty::PredicateKind<'_>>) -> FlagComputation {\n+    pub fn for_predicate(binder: ty::Binder<'_, ty::PredicateKind<'_>>) -> FlagComputation {\n         let mut result = FlagComputation::new();\n         result.add_predicate(binder);\n         result"}, {"sha": "9e0ca44d0981df0dbcf4afc9a3282310d37d1c1e", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -993,7 +993,7 @@ where\n /// might (from a foreign exception or similar).\n #[inline]\n #[tracing::instrument(level = \"debug\", skip(tcx))]\n-pub fn fn_can_unwind<'tcx>(tcx: TyCtxt<'tcx>, fn_def_id: Option<DefId>, abi: SpecAbi) -> bool {\n+pub fn fn_can_unwind(tcx: TyCtxt<'_>, fn_def_id: Option<DefId>, abi: SpecAbi) -> bool {\n     if let Some(did) = fn_def_id {\n         // Special attribute for functions which can't unwind.\n         if tcx.codegen_fn_attrs(did).flags.contains(CodegenFnAttrFlags::NEVER_UNWIND) {"}, {"sha": "6d3b94c1fdbf8651c113ba2f7dd73e4fb09cb8bd", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -1248,7 +1248,7 @@ pub fn needs_drop_components<'tcx>(\n     }\n }\n \n-pub fn is_trivially_const_drop<'tcx>(ty: Ty<'tcx>) -> bool {\n+pub fn is_trivially_const_drop(ty: Ty<'_>) -> bool {\n     match *ty.kind() {\n         ty::Bool\n         | ty::Char"}, {"sha": "e22fa6365dcb44ebb25f27e7bd1e58cc254c6d02", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -81,8 +81,8 @@ pub(in crate::build) struct PlaceBuilder<'tcx> {\n /// ProjectionElems `Downcast`, `ConstantIndex`, `Index`, or `Subslice` because those will never be\n /// part of a path that is captured by a closure. We stop applying projections once we see the first\n /// projection that isn't captured by a closure.\n-fn convert_to_hir_projections_and_truncate_for_capture<'tcx>(\n-    mir_projections: &[PlaceElem<'tcx>],\n+fn convert_to_hir_projections_and_truncate_for_capture(\n+    mir_projections: &[PlaceElem<'_>],\n ) -> Vec<HirProjectionKind> {\n     let mut hir_projections = Vec::new();\n     let mut variant = None;"}, {"sha": "9daf68a15f4b1ea4aef695c67f463e6f72514523", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -28,10 +28,10 @@ use rustc_target::spec::abi::Abi;\n \n use super::lints;\n \n-pub(crate) fn mir_built<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(crate) fn mir_built(\n+    tcx: TyCtxt<'_>,\n     def: ty::WithOptConstParam<LocalDefId>,\n-) -> &'tcx rustc_data_structures::steal::Steal<Body<'tcx>> {\n+) -> &rustc_data_structures::steal::Steal<Body<'_>> {\n     if let Some(def) = def.try_upgrade(tcx) {\n         return tcx.mir_built(def);\n     }\n@@ -625,12 +625,12 @@ fn construct_const<'a, 'tcx>(\n ///\n /// This is required because we may still want to run MIR passes on an item\n /// with type errors, but normal MIR construction can't handle that in general.\n-fn construct_error<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn construct_error(\n+    tcx: TyCtxt<'_>,\n     def: LocalDefId,\n     body_owner_kind: hir::BodyOwnerKind,\n     err: ErrorGuaranteed,\n-) -> Body<'tcx> {\n+) -> Body<'_> {\n     let span = tcx.def_span(def);\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def);\n     let generator_kind = tcx.generator_kind(def);"}, {"sha": "3c311729a52aa6dd0f29c912c7230d721ec97bef", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -703,7 +703,7 @@ impl UnsafeOpKind {\n     }\n }\n \n-pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalDefId>) {\n+pub fn check_unsafety(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) {\n     // THIR unsafeck is gated under `-Z thir-unsafeck`\n     if !tcx.sess.opts.unstable_opts.thir_unsafeck {\n         return;\n@@ -749,16 +749,16 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n     visitor.visit_expr(&thir[expr]);\n }\n \n-pub(crate) fn thir_check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n+pub(crate) fn thir_check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     if let Some(def) = ty::WithOptConstParam::try_lookup(def_id, tcx) {\n         tcx.thir_check_unsafety_for_const_arg(def)\n     } else {\n         check_unsafety(tcx, ty::WithOptConstParam::unknown(def_id))\n     }\n }\n \n-pub(crate) fn thir_check_unsafety_for_const_arg<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(crate) fn thir_check_unsafety_for_const_arg(\n+    tcx: TyCtxt<'_>,\n     (did, param_did): (LocalDefId, DefId),\n ) {\n     check_unsafety(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })"}, {"sha": "a355e1bdab5f51c78d865660833d0faafe83e33a", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -18,10 +18,10 @@ use rustc_middle::thir::*;\n use rustc_middle::ty::{self, RvalueScopes, TyCtxt};\n use rustc_span::Span;\n \n-pub(crate) fn thir_body<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(crate) fn thir_body(\n+    tcx: TyCtxt<'_>,\n     owner_def: ty::WithOptConstParam<LocalDefId>,\n-) -> Result<(&'tcx Steal<Thir<'tcx>>, ExprId), ErrorGuaranteed> {\n+) -> Result<(&Steal<Thir<'_>>, ExprId), ErrorGuaranteed> {\n     let hir = tcx.hir();\n     let body = hir.body(hir.body_owned_by(owner_def.did));\n     let mut cx = Cx::new(tcx, owner_def);\n@@ -52,10 +52,7 @@ pub(crate) fn thir_body<'tcx>(\n     Ok((tcx.alloc_steal_thir(cx.thir), expr))\n }\n \n-pub(crate) fn thir_tree<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    owner_def: ty::WithOptConstParam<LocalDefId>,\n-) -> String {\n+pub(crate) fn thir_tree(tcx: TyCtxt<'_>, owner_def: ty::WithOptConstParam<LocalDefId>) -> String {\n     match thir_body(tcx, owner_def) {\n         Ok((thir, _)) => format!(\"{:#?}\", thir.steal()),\n         Err(_) => \"error\".into(),"}, {"sha": "6470efab2e93c676318e22dad0ce87954c5754b0", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -70,7 +70,7 @@ mod fallback_to_const_ref {\n     /// hoops to get a reference to the value.\n     pub(super) struct FallbackToConstRef(());\n \n-    pub(super) fn fallback_to_const_ref<'tcx>(c2p: &super::ConstToPat<'tcx>) -> FallbackToConstRef {\n+    pub(super) fn fallback_to_const_ref(c2p: &super::ConstToPat<'_>) -> FallbackToConstRef {\n         assert!(c2p.behind_reference.get());\n         FallbackToConstRef(())\n     }"}, {"sha": "a95349d767098bc58baca1211ce8b744e3f7bd7a", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -404,7 +404,7 @@ impl SplitIntRange {\n     }\n \n     /// Iterate over the contained ranges.\n-    fn iter<'a>(&'a self) -> impl Iterator<Item = IntRange> + Captures<'a> {\n+    fn iter(&self) -> impl Iterator<Item = IntRange> + Captures<'_> {\n         use IntBorder::*;\n \n         let self_range = Self::to_borders(self.range.clone());\n@@ -612,7 +612,7 @@ impl SplitVarLenSlice {\n     }\n \n     /// Iterate over the partition of this slice.\n-    fn iter<'a>(&'a self) -> impl Iterator<Item = Slice> + Captures<'a> {\n+    fn iter(&self) -> impl Iterator<Item = Slice> + Captures<'_> {\n         let smaller_lengths = match self.array_len {\n             // The only admissible fixed-length slice is one of the array size. Whether `max_slice`\n             // is fixed-length or variable-length, it will be the only relevant slice to output"}, {"sha": "923dc16c11b077268e175de33677bb58400649c3", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -149,15 +149,15 @@ enum DefUse {\n }\n \n impl DefUse {\n-    fn apply<'tcx>(trans: &mut impl GenKill<Local>, place: Place<'tcx>, context: PlaceContext) {\n+    fn apply(trans: &mut impl GenKill<Local>, place: Place<'_>, context: PlaceContext) {\n         match DefUse::for_place(place, context) {\n             Some(DefUse::Def) => trans.kill(place.local),\n             Some(DefUse::Use) => trans.gen(place.local),\n             None => {}\n         }\n     }\n \n-    fn for_place<'tcx>(place: Place<'tcx>, context: PlaceContext) -> Option<DefUse> {\n+    fn for_place(place: Place<'_>, context: PlaceContext) -> Option<DefUse> {\n         match context {\n             PlaceContext::NonUse(_) => None,\n "}, {"sha": "fe5ee4011ab8483bb3987779220c77ce7af56577", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -823,7 +823,7 @@ fn iter_fields<'tcx>(\n }\n \n /// Returns all locals with projections that have their reference or address taken.\n-fn excluded_locals<'tcx>(body: &Body<'tcx>) -> IndexVec<Local, bool> {\n+fn excluded_locals(body: &Body<'_>) -> IndexVec<Local, bool> {\n     struct Collector {\n         result: IndexVec<Local, bool>,\n     }"}, {"sha": "adf6ae4c7270fbe37b642bb26e738d7cb1063354", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -490,10 +490,10 @@ fn check_unused_unsafe(\n     unused_unsafes\n }\n \n-fn unsafety_check_result<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn unsafety_check_result(\n+    tcx: TyCtxt<'_>,\n     def: ty::WithOptConstParam<LocalDefId>,\n-) -> &'tcx UnsafetyCheckResult {\n+) -> &UnsafetyCheckResult {\n     debug!(\"unsafety_violations({:?})\", def);\n \n     // N.B., this borrow is valid because all the consumers of"}, {"sha": "1468afc64563dc20bba1ea5e4e2f062918042d99", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -533,10 +533,10 @@ fn make_code_region(\n     }\n }\n \n-fn fn_sig_and_body<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn fn_sig_and_body(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> (Option<&'tcx rustc_hir::FnSig<'tcx>>, &'tcx rustc_hir::Body<'tcx>) {\n+) -> (Option<&rustc_hir::FnSig<'_>>, &rustc_hir::Body<'_>) {\n     // FIXME(#79625): Consider improving MIR to provide the information needed, to avoid going back\n     // to HIR for it.\n     let hir_node = tcx.hir().get_if_local(def_id).expect(\"expected DefId is local\");"}, {"sha": "3bd7f31b45dcaa673f9e4873615bc10c8b7d4607", "filename": "compiler/rustc_mir_transform/src/coverage/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fquery.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -136,7 +136,7 @@ fn coverageinfo<'tcx>(tcx: TyCtxt<'tcx>, instance_def: ty::InstanceDef<'tcx>) ->\n     coverage_visitor.info\n }\n \n-fn covered_code_regions<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Vec<&'tcx CodeRegion> {\n+fn covered_code_regions(tcx: TyCtxt<'_>, def_id: DefId) -> Vec<&CodeRegion> {\n     let body = mir_body(tcx, def_id);\n     body.basic_blocks\n         .iter()\n@@ -163,7 +163,7 @@ fn is_inlined(body: &Body<'_>, statement: &Statement<'_>) -> bool {\n /// This function ensures we obtain the correct MIR for the given item irrespective of\n /// whether that means const mir or runtime mir. For `const fn` this opts for runtime\n /// mir.\n-fn mir_body<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx mir::Body<'tcx> {\n+fn mir_body(tcx: TyCtxt<'_>, def_id: DefId) -> &mir::Body<'_> {\n     let id = ty::WithOptConstParam::unknown(def_id);\n     let def = ty::InstanceDef::Item(id);\n     tcx.instance_mir(def)"}, {"sha": "fa7f22303a8b50514bfcea5703d22b6b3c59b0c3", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -169,7 +169,7 @@ impl<'tcx> MockBlocks<'tcx> {\n     }\n }\n \n-fn debug_basic_blocks<'tcx>(mir_body: &Body<'tcx>) -> String {\n+fn debug_basic_blocks(mir_body: &Body<'_>) -> String {\n     format!(\n         \"{:?}\",\n         mir_body"}, {"sha": "ddab7bbb2e3016a29fb23d9259c66a4064d9eac2", "filename": "compiler/rustc_mir_transform/src/deduce_param_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdeduce_param_attrs.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -129,7 +129,7 @@ impl<'tcx> Visitor<'tcx> for DeduceReadOnly {\n }\n \n /// Returns true if values of a given type will never be passed indirectly, regardless of ABI.\n-fn type_will_always_be_passed_directly<'tcx>(ty: Ty<'tcx>) -> bool {\n+fn type_will_always_be_passed_directly(ty: Ty<'_>) -> bool {\n     matches!(\n         ty.kind(),\n         ty::Bool"}, {"sha": "08e296a837127b72911b152275b7c242ca47d0f9", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -658,7 +658,7 @@ impl WriteInfo {\n         }\n     }\n \n-    fn add_place<'tcx>(&mut self, place: Place<'tcx>) {\n+    fn add_place(&mut self, place: Place<'_>) {\n         self.writes.push(place.local);\n     }\n "}, {"sha": "ae79c2290f6d30c0f923a2f75e6aaac9f6b95f17", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -266,10 +266,7 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) ->\n /// Make MIR ready for const evaluation. This is run on all MIR, not just on consts!\n /// FIXME(oli-obk): it's unclear whether we still need this phase (and its corresponding query).\n /// We used to have this for pre-miri MIR based const eval.\n-fn mir_const<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptConstParam<LocalDefId>,\n-) -> &'tcx Steal<Body<'tcx>> {\n+fn mir_const(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> &Steal<Body<'_>> {\n     if let Some(def) = def.try_upgrade(tcx) {\n         return tcx.mir_const(def);\n     }\n@@ -308,10 +305,10 @@ fn mir_const<'tcx>(\n }\n \n /// Compute the main MIR body and the list of MIR bodies of the promoteds.\n-fn mir_promoted<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn mir_promoted(\n+    tcx: TyCtxt<'_>,\n     def: ty::WithOptConstParam<LocalDefId>,\n-) -> (&'tcx Steal<Body<'tcx>>, &'tcx Steal<IndexVec<Promoted, Body<'tcx>>>) {\n+) -> (&Steal<Body<'_>>, &Steal<IndexVec<Promoted, Body<'_>>>) {\n     if let Some(def) = def.try_upgrade(tcx) {\n         return tcx.mir_promoted(def);\n     }\n@@ -350,7 +347,7 @@ fn mir_promoted<'tcx>(\n }\n \n /// Compute the MIR that is used during CTFE (and thus has no optimizations run on it)\n-fn mir_for_ctfe<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n+fn mir_for_ctfe(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n     let did = def_id.expect_local();\n     if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {\n         tcx.mir_for_ctfe_of_const_arg(def)\n@@ -364,10 +361,7 @@ fn mir_for_ctfe<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n /// we'd get cycle errors with `mir_for_ctfe`, because typeck would need to typeck\n /// the const parameter while type checking the main body, which in turn would try\n /// to type check the main body again.\n-fn mir_for_ctfe_of_const_arg<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    (did, param_did): (LocalDefId, DefId),\n-) -> &'tcx Body<'tcx> {\n+fn mir_for_ctfe_of_const_arg(tcx: TyCtxt<'_>, (did, param_did): (LocalDefId, DefId)) -> &Body<'_> {\n     tcx.arena.alloc(inner_mir_for_ctfe(\n         tcx,\n         ty::WithOptConstParam { did, const_param_did: Some(param_did) },\n@@ -424,10 +418,10 @@ fn inner_mir_for_ctfe(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -\n /// Obtain just the main MIR (no promoteds) and run some cleanups on it. This also runs\n /// mir borrowck *before* doing so in order to ensure that borrowck can be run and doesn't\n /// end up missing the source MIR due to stealing happening.\n-fn mir_drops_elaborated_and_const_checked<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn mir_drops_elaborated_and_const_checked(\n+    tcx: TyCtxt<'_>,\n     def: ty::WithOptConstParam<LocalDefId>,\n-) -> &'tcx Steal<Body<'tcx>> {\n+) -> &Steal<Body<'_>> {\n     if let Some(def) = def.try_upgrade(tcx) {\n         return tcx.mir_drops_elaborated_and_const_checked(def);\n     }\n@@ -597,7 +591,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n }\n \n /// Optimize the MIR and prepare it for codegen.\n-fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx Body<'tcx> {\n+fn optimized_mir(tcx: TyCtxt<'_>, did: DefId) -> &Body<'_> {\n     let did = did.expect_local();\n     assert_eq!(ty::WithOptConstParam::try_lookup(did, tcx), None);\n     tcx.arena.alloc(inner_optimized_mir(tcx, did))\n@@ -634,10 +628,10 @@ fn inner_optimized_mir(tcx: TyCtxt<'_>, did: LocalDefId) -> Body<'_> {\n \n /// Fetch all the promoteds of an item and prepare their MIR bodies to be ready for\n /// constant evaluation once all substitutions become known.\n-fn promoted_mir<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn promoted_mir(\n+    tcx: TyCtxt<'_>,\n     def: ty::WithOptConstParam<LocalDefId>,\n-) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n+) -> &IndexVec<Promoted, Body<'_>> {\n     if tcx.is_constructor(def.did.to_def_id()) {\n         return tcx.arena.alloc(IndexVec::new());\n     }"}, {"sha": "e4f3ace9a93dafced0e7a50fefd1e1d8a597433c", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -532,7 +532,7 @@ struct VarField<'tcx> {\n }\n \n /// Match on `((_LOCAL as Variant).FIELD: TY)`.\n-fn match_variant_field_place<'tcx>(place: Place<'tcx>) -> Option<(Local, VarField<'tcx>)> {\n+fn match_variant_field_place(place: Place<'_>) -> Option<(Local, VarField<'_>)> {\n     match place.as_ref() {\n         PlaceRef {\n             local,"}, {"sha": "a55a3fe5ccaaa1663bcbeebc7465010be70d9130", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -345,10 +345,7 @@ where\n     }\n }\n \n-fn collect_and_partition_mono_items<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    (): (),\n-) -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'tcx>]) {\n+fn collect_and_partition_mono_items(tcx: TyCtxt<'_>, (): ()) -> (&DefIdSet, &[CodegenUnit<'_>]) {\n     let collection_mode = match tcx.sess.opts.unstable_opts.print_mono_items {\n         Some(ref s) => {\n             let mode_string = s.to_lowercase();\n@@ -541,7 +538,7 @@ fn dump_mono_items_stats<'tcx>(\n     Ok(())\n }\n \n-fn codegened_and_inlined_items<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> &'tcx DefIdSet {\n+fn codegened_and_inlined_items(tcx: TyCtxt<'_>, (): ()) -> &DefIdSet {\n     let (items, cgus) = tcx.collect_and_partition_mono_items(());\n     let mut visited = DefIdSet::default();\n     let mut result = items.clone();"}, {"sha": "edb0e4367f27354114415fa2dccac4ba576a1af8", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -571,7 +571,7 @@ fn check_item<'tcx>(\n     }\n }\n \n-fn check_trait_item<'tcx>(tcx: TyCtxt<'tcx>, worklist: &mut Vec<LocalDefId>, id: hir::TraitItemId) {\n+fn check_trait_item(tcx: TyCtxt<'_>, worklist: &mut Vec<LocalDefId>, id: hir::TraitItemId) {\n     use hir::TraitItemKind::{Const, Fn};\n     if matches!(tcx.def_kind(id.owner_id), DefKind::AssocConst | DefKind::AssocFn) {\n         let trait_item = tcx.hir().trait_item(id);\n@@ -583,20 +583,16 @@ fn check_trait_item<'tcx>(tcx: TyCtxt<'tcx>, worklist: &mut Vec<LocalDefId>, id:\n     }\n }\n \n-fn check_foreign_item<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    worklist: &mut Vec<LocalDefId>,\n-    id: hir::ForeignItemId,\n-) {\n+fn check_foreign_item(tcx: TyCtxt<'_>, worklist: &mut Vec<LocalDefId>, id: hir::ForeignItemId) {\n     if matches!(tcx.def_kind(id.owner_id), DefKind::Static(_) | DefKind::Fn)\n         && has_allow_dead_code_or_lang_attr(tcx, id.hir_id())\n     {\n         worklist.push(id.owner_id.def_id);\n     }\n }\n \n-fn create_and_seed_worklist<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn create_and_seed_worklist(\n+    tcx: TyCtxt<'_>,\n ) -> (Vec<LocalDefId>, FxHashMap<LocalDefId, LocalDefId>) {\n     let effective_visibilities = &tcx.effective_visibilities(());\n     // see `MarkSymbolVisitor::struct_constructors`\n@@ -626,8 +622,8 @@ fn create_and_seed_worklist<'tcx>(\n     (worklist, struct_constructors)\n }\n \n-fn live_symbols_and_ignored_derived_traits<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn live_symbols_and_ignored_derived_traits(\n+    tcx: TyCtxt<'_>,\n     (): (),\n ) -> (FxHashSet<LocalDefId>, FxHashMap<LocalDefId, Vec<(DefId, DefId)>>) {\n     let (worklist, struct_constructors) = create_and_seed_worklist(tcx);"}, {"sha": "aeacbaa67cb5718976fa8b34d46ef03b7482b35d", "filename": "compiler/rustc_passes/src/debugger_visualizer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -15,8 +15,8 @@ use std::sync::Arc;\n \n use crate::errors::DebugVisualizerUnreadable;\n \n-fn check_for_debugger_visualizer<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn check_for_debugger_visualizer(\n+    tcx: TyCtxt<'_>,\n     hir_id: HirId,\n     debugger_visualizers: &mut FxHashSet<DebuggerVisualizerFile>,\n ) {\n@@ -69,7 +69,7 @@ fn check_for_debugger_visualizer<'tcx>(\n }\n \n /// Traverses and collects the debugger visualizers for a specific crate.\n-fn debugger_visualizers<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Vec<DebuggerVisualizerFile> {\n+fn debugger_visualizers(tcx: TyCtxt<'_>, cnum: CrateNum) -> Vec<DebuggerVisualizerFile> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     // Initialize the collector."}, {"sha": "10ffa87efe35f635228a6de8d161ead2172c934d", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -18,11 +18,7 @@ use rustc_span::symbol::{kw::Empty, sym, Symbol};\n \n use crate::errors::{DuplicateDiagnosticItem, DuplicateDiagnosticItemInCrate};\n \n-fn observe_item<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    diagnostic_items: &mut DiagnosticItems,\n-    def_id: LocalDefId,\n-) {\n+fn observe_item(tcx: TyCtxt<'_>, diagnostic_items: &mut DiagnosticItems, def_id: LocalDefId) {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let attrs = tcx.hir().attrs(hir_id);\n     if let Some(name) = extract(attrs) {\n@@ -63,7 +59,7 @@ fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n }\n \n /// Traverse and collect the diagnostic items in the current\n-fn diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> DiagnosticItems {\n+fn diagnostic_items(tcx: TyCtxt<'_>, cnum: CrateNum) -> DiagnosticItems {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     // Initialize the collector.\n@@ -92,7 +88,7 @@ fn diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> DiagnosticItems\n }\n \n /// Traverse and collect all the diagnostic items in all crates.\n-fn all_diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> DiagnosticItems {\n+fn all_diagnostic_items(tcx: TyCtxt<'_>, (): ()) -> DiagnosticItems {\n     // Initialize the collector.\n     let mut items = DiagnosticItems::default();\n "}, {"sha": "827d86780aa8c517b87b2d41f6b0e76ab49b2d06", "filename": "compiler/rustc_passes/src/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -26,7 +26,7 @@ pub fn test_layout(tcx: TyCtxt<'_>) {\n     }\n }\n \n-fn dump_layout_of<'tcx>(tcx: TyCtxt<'tcx>, item_def_id: LocalDefId, attr: &Attribute) {\n+fn dump_layout_of(tcx: TyCtxt<'_>, item_def_id: LocalDefId, attr: &Attribute) {\n     let tcx = tcx;\n     let param_env = tcx.param_env(item_def_id);\n     let ty = tcx.type_of(item_def_id);"}, {"sha": "ad09522038678f0842b25a0196910c4d9552ade2", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -347,7 +347,7 @@ fn check_item<'tcx>(\n     }\n }\n \n-fn has_custom_linkage<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> bool {\n+fn has_custom_linkage(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n     // Anything which has custom linkage gets thrown on the worklist no\n     // matter where it is in the crate, along with \"special std symbols\"\n     // which are currently akin to allocator symbols.\n@@ -364,7 +364,7 @@ fn has_custom_linkage<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> bool {\n         || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n }\n \n-fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashSet<LocalDefId> {\n+fn reachable_set(tcx: TyCtxt<'_>, (): ()) -> FxHashSet<LocalDefId> {\n     let effective_visibilities = &tcx.effective_visibilities(());\n \n     let any_library ="}, {"sha": "96f7236de5cb12ab9209f1b2827319026419cfaf", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -853,7 +853,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n /// Check whether a path is a `use` item that has been marked as unstable.\n ///\n /// See issue #94972 for details on why this is a special case\n-fn is_unstable_reexport<'tcx>(tcx: TyCtxt<'tcx>, id: hir::HirId) -> bool {\n+fn is_unstable_reexport(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n     // Get the LocalDefId so we can lookup the item to check the kind.\n     let Some(def_id) = tcx.hir().opt_local_def_id(id) else { return false; };\n "}, {"sha": "fc6372cf99ee8be90a2def5d6a32d41718df2f0e", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -11,7 +11,7 @@ use crate::errors::{MissingLangItem, MissingPanicHandler, UnknownExternLangItem}\n \n /// Checks the crate for usage of weak lang items, returning a vector of all the\n /// language items required by this crate, but not defined yet.\n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>, items: &mut lang_items::LanguageItems) {\n+pub fn check_crate(tcx: TyCtxt<'_>, items: &mut lang_items::LanguageItems) {\n     // These are never called by user code, they're generated by the compiler.\n     // They will never implicitly be added to the `missing` array unless we do\n     // so here.\n@@ -40,7 +40,7 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>, items: &mut lang_items::LanguageItem\n     verify(tcx, items);\n }\n \n-fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n+fn verify(tcx: TyCtxt<'_>, items: &lang_items::LanguageItems) {\n     // We only need to check for the presence of weak lang items if we're\n     // emitting something that's not an rlib.\n     let needs_check = tcx.sess.crate_types().iter().any(|kind| match *kind {"}, {"sha": "2bcfdab03c817bcc983a216d84fa3a78a59e8c92", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -227,7 +227,7 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n         *self.serialized_data.write() = None;\n     }\n \n-    fn serialize<'tcx>(&self, tcx: TyCtxt<'tcx>, encoder: FileEncoder) -> FileEncodeResult {\n+    fn serialize(&self, tcx: TyCtxt<'_>, encoder: FileEncoder) -> FileEncodeResult {\n         // Serializing the `DepGraph` should not modify it.\n         tcx.dep_graph.with_ignore(|| {\n             // Allocate `SourceFileIndex`es."}, {"sha": "5f54bab9c31474d87852d7e4fa820a34a385274d", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -278,7 +278,7 @@ pub(crate) fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n /// If we are recording only summary data, the ids will point to\n /// just the query names. If we are recording query keys too, we\n /// allocate the corresponding strings here.\n-pub fn alloc_self_profile_query_strings<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'_>) {\n     if !tcx.prof.enabled() {\n         return;\n     }"}, {"sha": "53844dab9db59490992e073f0b62bf742df3f223", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -340,9 +340,9 @@ where\n /// which will be used if the query is not in the cache and we need\n /// to compute it.\n #[inline]\n-pub fn try_get_cached<'a, Tcx, C, R, OnHit>(\n+pub fn try_get_cached<Tcx, C, R, OnHit>(\n     tcx: Tcx,\n-    cache: &'a C,\n+    cache: &C,\n     key: &C::Key,\n     // `on_hit` can be called while holding a lock to the query cache\n     on_hit: OnHit,"}, {"sha": "6afd5fe5a7f2a1a9e96b9f2d5d10c5a74427ac92", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -957,10 +957,10 @@ impl SaveHandler for CallbackHandler<'_> {\n     }\n }\n \n-pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn process_crate<H: SaveHandler>(\n+    tcx: TyCtxt<'_>,\n     cratename: Symbol,\n-    input: &'l Input,\n+    input: &Input,\n     config: Option<Config>,\n     mut handler: H,\n ) {"}, {"sha": "2aa8ca9e4a9194d94316f5e184d313e8ed5cb7b3", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -122,7 +122,7 @@ pub fn feature_err_issue<'a>(\n /// Construct a future incompatibility diagnostic for a feature gate.\n ///\n /// This diagnostic is only a warning and *does not cause compilation to fail*.\n-pub fn feature_warn<'a>(sess: &'a ParseSess, feature: Symbol, span: Span, explain: &str) {\n+pub fn feature_warn(sess: &ParseSess, feature: Symbol, span: Span, explain: &str) {\n     feature_warn_issue(sess, feature, span, GateIssue::Language, explain);\n }\n \n@@ -134,8 +134,8 @@ pub fn feature_warn<'a>(sess: &'a ParseSess, feature: Symbol, span: Span, explai\n /// Almost always, you want to use this for a language feature. If so, prefer `feature_warn`.\n #[allow(rustc::diagnostic_outside_of_impl)]\n #[allow(rustc::untranslatable_diagnostic)]\n-pub fn feature_warn_issue<'a>(\n-    sess: &'a ParseSess,\n+pub fn feature_warn_issue(\n+    sess: &ParseSess,\n     feature: Symbol,\n     span: Span,\n     issue: GateIssue,\n@@ -160,7 +160,7 @@ pub fn feature_warn_issue<'a>(\n }\n \n /// Adds the diagnostics for a feature to an existing error.\n-pub fn add_feature_diagnostics<'a>(err: &mut Diagnostic, sess: &'a ParseSess, feature: Symbol) {\n+pub fn add_feature_diagnostics(err: &mut Diagnostic, sess: &ParseSess, feature: Symbol) {\n     add_feature_diagnostics_for_issue(err, sess, feature, GateIssue::Language);\n }\n \n@@ -169,9 +169,9 @@ pub fn add_feature_diagnostics<'a>(err: &mut Diagnostic, sess: &'a ParseSess, fe\n /// This variant allows you to control whether it is a library or language feature.\n /// Almost always, you want to use this for a language feature. If so, prefer\n /// `add_feature_diagnostics`.\n-pub fn add_feature_diagnostics_for_issue<'a>(\n+pub fn add_feature_diagnostics_for_issue(\n     err: &mut Diagnostic,\n-    sess: &'a ParseSess,\n+    sess: &ParseSess,\n     feature: Symbol,\n     issue: GateIssue,\n ) {"}, {"sha": "b996d36a318c5f42ca287a2465a389d1d8f77ec1", "filename": "compiler/rustc_session/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_session%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_session%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Futils.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::profiling::VerboseTimingGuard;\n use std::path::{Path, PathBuf};\n \n impl Session {\n-    pub fn timer<'a>(&'a self, what: &'static str) -> VerboseTimingGuard<'a> {\n+    pub fn timer(&self, what: &'static str) -> VerboseTimingGuard<'_> {\n         self.prof.verbose_generic_activity(what)\n     }\n     pub fn time<R>(&self, what: &'static str, f: impl FnOnce() -> R) -> R {"}, {"sha": "493e31a688fccdf6f6c0a4a19d1811faa763969a", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -338,7 +338,7 @@ fn encode_substs<'tcx>(\n }\n \n /// Encodes a ty:Ty name, including its crate and path disambiguators and names.\n-fn encode_ty_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> String {\n+fn encode_ty_name(tcx: TyCtxt<'_>, def_id: DefId) -> String {\n     // Encode <name> for use in u<length><name>[I<element-type1..element-typeN>E], where\n     // <element-type> is <subst>, using v0's <path> without v0's extended form of paths:\n     //"}, {"sha": "4a2d39cc70023bbb81b49c3ba06413273b85e9f0", "filename": "compiler/rustc_target/src/abi/call/loongarch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Floongarch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Floongarch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Floongarch.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -19,7 +19,7 @@ enum FloatConv {\n #[derive(Copy, Clone)]\n struct CannotUseFpConv;\n \n-fn is_loongarch_aggregate<'a, Ty>(arg: &ArgAbi<'a, Ty>) -> bool {\n+fn is_loongarch_aggregate<Ty>(arg: &ArgAbi<'_, Ty>) -> bool {\n     match arg.layout.abi {\n         Abi::Vector { .. } => true,\n         _ => arg.layout.is_aggregate(),\n@@ -290,7 +290,7 @@ fn classify_arg<'a, Ty, C>(\n     }\n }\n \n-fn extend_integer_width<'a, Ty>(arg: &mut ArgAbi<'a, Ty>, xlen: u64) {\n+fn extend_integer_width<Ty>(arg: &mut ArgAbi<'_, Ty>, xlen: u64) {\n     if let Abi::Scalar(scalar) = arg.layout.abi {\n         if let abi::Int(i, _) = scalar.primitive() {\n             // 32-bit integers are always sign-extended"}, {"sha": "34280d38e3406a7bef5f4e00839b993f88f10eec", "filename": "compiler/rustc_target/src/abi/call/riscv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -25,7 +25,7 @@ enum FloatConv {\n #[derive(Copy, Clone)]\n struct CannotUseFpConv;\n \n-fn is_riscv_aggregate<'a, Ty>(arg: &ArgAbi<'a, Ty>) -> bool {\n+fn is_riscv_aggregate<Ty>(arg: &ArgAbi<'_, Ty>) -> bool {\n     match arg.layout.abi {\n         Abi::Vector { .. } => true,\n         _ => arg.layout.is_aggregate(),\n@@ -296,7 +296,7 @@ fn classify_arg<'a, Ty, C>(\n     }\n }\n \n-fn extend_integer_width<'a, Ty>(arg: &mut ArgAbi<'a, Ty>, xlen: u64) {\n+fn extend_integer_width<Ty>(arg: &mut ArgAbi<'_, Ty>, xlen: u64) {\n     if let Abi::Scalar(scalar) = arg.layout.abi {\n         if let abi::Int(i, _) = scalar.primitive() {\n             // 32-bit integers are always sign-extended"}, {"sha": "988cd401f406bff9f66d02a6d55895afde9a5e21", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -1319,7 +1319,7 @@ pub struct Target {\n }\n \n impl Target {\n-    pub fn parse_data_layout<'a>(&'a self) -> Result<TargetDataLayout, TargetDataLayoutErrors<'a>> {\n+    pub fn parse_data_layout(&self) -> Result<TargetDataLayout, TargetDataLayoutErrors<'_>> {\n         let mut dl = TargetDataLayout::parse_from_llvm_datalayout_string(&self.data_layout)?;\n \n         // Perform consistency checks against the Target information."}, {"sha": "26757965c9583ee0b5981342d2e462bb9e8f8148", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -66,13 +66,13 @@ pub fn add_placeholder_note(err: &mut Diagnostic) {\n /// with a suitably-freshened `ImplHeader` with those types\n /// substituted. Otherwise, returns `None`.\n #[instrument(skip(tcx, skip_leak_check), level = \"debug\")]\n-pub fn overlapping_impls<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn overlapping_impls(\n+    tcx: TyCtxt<'_>,\n     impl1_def_id: DefId,\n     impl2_def_id: DefId,\n     skip_leak_check: SkipLeakCheck,\n     overlap_mode: OverlapMode,\n-) -> Option<OverlapResult<'tcx>> {\n+) -> Option<OverlapResult<'_>> {\n     // Before doing expensive operations like entering an inference context, do\n     // a quick check via fast_reject to tell if the impl headers could possibly\n     // unify.\n@@ -283,7 +283,7 @@ fn implicit_negative<'cx, 'tcx>(\n \n /// Given impl1 and impl2 check if both impls are never satisfied by a common type (including\n /// where-clauses) If so, return true, they are disjoint and false otherwise.\n-fn negative_impl<'tcx>(tcx: TyCtxt<'tcx>, impl1_def_id: DefId, impl2_def_id: DefId) -> bool {\n+fn negative_impl(tcx: TyCtxt<'_>, impl1_def_id: DefId, impl2_def_id: DefId) -> bool {\n     debug!(\"negative_impl(impl1_def_id={:?}, impl2_def_id={:?})\", impl1_def_id, impl2_def_id);\n \n     // Create an infcx, taking the predicates of impl1 as assumptions:"}, {"sha": "9656bfbf4ecc161fb6e6dbd31acb750bb8daee4e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -3472,7 +3472,7 @@ fn hint_missing_borrow<'tcx>(\n \n     let arg_spans = fn_decl.inputs.iter().map(|ty| ty.span);\n \n-    fn get_deref_type_and_refs<'tcx>(mut ty: Ty<'tcx>) -> (Ty<'tcx>, usize) {\n+    fn get_deref_type_and_refs(mut ty: Ty<'_>) -> (Ty<'_>, usize) {\n         let mut refs = 0;\n \n         while let ty::Ref(_, new_ty, _) = ty.kind() {"}, {"sha": "c30531fa906642c090bd7abb9e2389a64773d38e", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -484,10 +484,7 @@ fn subst_and_check_impossible_predicates<'tcx>(\n ///\n /// This only considers predicates that reference the impl's generics, and not\n /// those that reference the method's generics.\n-fn is_impossible_method<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    (impl_def_id, trait_item_def_id): (DefId, DefId),\n-) -> bool {\n+fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefId, DefId)) -> bool {\n     struct ReferencesOnlyParentGenerics<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         generics: &'tcx ty::Generics,"}, {"sha": "f2c5f730b31b938ed858a46156458f02d3717496", "filename": "compiler/rustc_trait_selection/src/traits/outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -34,7 +34,7 @@ impl<'a, 'tcx: 'a> InferCtxtExt<'a, 'tcx> for InferCtxt<'tcx> {\n     /// argument types are well-formed. This may imply certain relationships\n     /// between generic parameters. For example:\n     /// ```\n-    /// fn foo<'a,T>(x: &'a T) {}\n+    /// fn foo<T>(x: &T) {}\n     /// ```\n     /// can only be called with a `'a` and `T` such that `&'a T` is WF.\n     /// For `&'a T` to be WF, `T: 'a` must hold. So we can assume `T: 'a`."}, {"sha": "5ec9c2a24cd448db3534fa5f3a8798cba24a1c64", "filename": "compiler/rustc_trait_selection/src/traits/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -191,7 +191,7 @@ fn dump_vtable_entries<'tcx>(\n     });\n }\n \n-fn own_existential_vtable_entries<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId) -> &'tcx [DefId] {\n+fn own_existential_vtable_entries(tcx: TyCtxt<'_>, trait_def_id: DefId) -> &[DefId] {\n     let trait_methods = tcx\n         .associated_items(trait_def_id)\n         .in_definition_order()"}, {"sha": "f288eb112582dfeed77719c0ea805d3c2376c17f", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -719,7 +719,7 @@ impl<'tcx> chalk_ir::UnificationDatabase<RustInterner<'tcx>> for RustIrDatabase<\n /// var bound at index `0`. For types, we use a `BoundVar` index equal to\n /// the type parameter index. For regions, we use the `BoundRegionKind::BrNamed`\n /// variant (which has a `DefId`).\n-fn bound_vars_for_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n+fn bound_vars_for_item(tcx: TyCtxt<'_>, def_id: DefId) -> SubstsRef<'_> {\n     InternalSubsts::for_item(tcx, def_id, |param, substs| match param.kind {\n         ty::GenericParamDefKind::Type { .. } => tcx\n             .mk_ty(ty::Bound("}, {"sha": "6e6bc62a040d11df006d5d30727948c9253e9c19", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -54,7 +54,7 @@ fn try_normalize_after_erasing_regions<'tcx, T: TypeFoldable<'tcx> + PartialEq +\n     }\n }\n \n-fn not_outlives_predicate<'tcx>(p: ty::Predicate<'tcx>) -> bool {\n+fn not_outlives_predicate(p: ty::Predicate<'_>) -> bool {\n     match p.kind().skip_binder() {\n         ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n         | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..)) => false,"}, {"sha": "a9b4e1420ea0db1b5b9cbe5670e8df8c3f1c84d3", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -267,8 +267,8 @@ struct IsThirPolymorphic<'a, 'tcx> {\n     thir: &'a thir::Thir<'tcx>,\n }\n \n-fn error<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn error(\n+    tcx: TyCtxt<'_>,\n     sub: GenericConstantTooComplexSub,\n     root_span: Span,\n ) -> Result<!, ErrorGuaranteed> {\n@@ -281,8 +281,8 @@ fn error<'tcx>(\n     Err(reported)\n }\n \n-fn maybe_supported_error<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn maybe_supported_error(\n+    tcx: TyCtxt<'_>,\n     sub: GenericConstantTooComplexSub,\n     root_span: Span,\n ) -> Result<!, ErrorGuaranteed> {\n@@ -349,10 +349,10 @@ impl<'a, 'tcx> visit::Visitor<'a, 'tcx> for IsThirPolymorphic<'a, 'tcx> {\n }\n \n /// Builds an abstract const, do not use this directly, but use `AbstractConst::new` instead.\n-pub fn thir_abstract_const<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn thir_abstract_const(\n+    tcx: TyCtxt<'_>,\n     def: ty::WithOptConstParam<LocalDefId>,\n-) -> Result<Option<ty::Const<'tcx>>, ErrorGuaranteed> {\n+) -> Result<Option<ty::Const<'_>>, ErrorGuaranteed> {\n     if tcx.features().generic_const_exprs {\n         match tcx.def_kind(def.did) {\n             // FIXME(generic_const_exprs): We currently only do this for anonymous constants,"}, {"sha": "b7a24a22c53e3d8d3916257116e62f7f3c741ab2", "filename": "compiler/rustc_ty_utils/src/implied_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -6,7 +6,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers { assumed_wf_types, ..*providers };\n }\n \n-fn assumed_wf_types<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::List<Ty<'tcx>> {\n+fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Ty<'_>> {\n     match tcx.def_kind(def_id) {\n         DefKind::Fn => {\n             let sig = tcx.fn_sig(def_id);"}, {"sha": "c8c6acaa45397771641b180415290fe3bb4c2edb", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -489,8 +489,8 @@ enum SavedLocalEligibility {\n // of any variant.\n \n /// Compute the eligibility and assignment of each local.\n-fn generator_saved_local_eligibility<'tcx>(\n-    info: &GeneratorLayout<'tcx>,\n+fn generator_saved_local_eligibility(\n+    info: &GeneratorLayout<'_>,\n ) -> (BitSet<GeneratorSavedLocal>, IndexVec<GeneratorSavedLocal, SavedLocalEligibility>) {\n     use SavedLocalEligibility::*;\n "}, {"sha": "e2d10f550c326d9151265196c0c11bc5c9ff5fb6", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23cb738d255ca1a9834fbe87ba8700b3d7da23f/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=d23cb738d255ca1a9834fbe87ba8700b3d7da23f", "patch": "@@ -225,10 +225,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n /// that are assumed to be well-formed (because they come from the environment).\n ///\n /// Used only in chalk mode.\n-fn well_formed_types_in_env<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n-) -> &'tcx ty::List<Predicate<'tcx>> {\n+fn well_formed_types_in_env(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Predicate<'_>> {\n     use rustc_hir::{ForeignItemKind, ImplItemKind, ItemKind, Node, TraitItemKind};\n     use rustc_middle::ty::subst::GenericArgKind;\n "}]}