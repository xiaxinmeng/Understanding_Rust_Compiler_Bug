{"sha": "725856d67fafcb19901dfa033d52f38d1994dc17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNTg1NmQ2N2ZhZmNiMTk5MDFkZmEwMzNkNTJmMzhkMTk5NGRjMTc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-25T07:54:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-25T07:54:40Z"}, "message": "Rollup merge of #48076 - canarysnort01:fix_pie, r=alexcrichton\n\npass correct pie args to gcc linker\n\nWhen linking with gcc, run gcc -v to see if --enable-default-pie is\ncompiled in. If it is, pass -no-pie when necessary to disable pie.\nOtherwise, pass -pie when necessary to enable it.\n\nFixes #48032 and fixes #35061", "tree": {"sha": "e740cadc9cf5da45268cadd54da3b1a1ab826459", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e740cadc9cf5da45268cadd54da3b1a1ab826459"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/725856d67fafcb19901dfa033d52f38d1994dc17", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJakmvACRBK7hj4Ov3rIwAAdHIIAJVGNJrZW9RVtmyyADt/OaBo\n5Rs4Tt1aLpHt1Mo43TWiQqGQCSOaSMtJLW8qDD+76l8B3uSW7mThV9X9ysEwp44B\nEA2Zi6Fd3iGr9ODmDgwMhnhf0+JVqT0/0Vzhhb+1FnsFmYNmptqWSX+paSmypqNb\nK3isC15BwC6iL3DDPNVZQtKSAyq96DVSjz52z48sOPHqlcl8f9m/PDNeyau4q0EU\nKlLNU6XI8ByEZH4JubrTHZKku4nTPe9wbxIAhjujy78qy4Rs9NDdVTrta5JsOsHX\n4t0VUzGGvK/juUcENH6mUqoa3LA0tJaqOxfM36nJ4xDvxZdot/Ga4lB+Z+oe2eQ=\n=WM4G\n-----END PGP SIGNATURE-----\n", "payload": "tree e740cadc9cf5da45268cadd54da3b1a1ab826459\nparent e25322454147c02c054022d3a30f319184dbe49e\nparent ab9cae1ba192afcc35e8bd6a5fddcd1445d05da7\nauthor kennytm <kennytm@gmail.com> 1519545280 +0800\ncommitter GitHub <noreply@github.com> 1519545280 +0800\n\nRollup merge of #48076 - canarysnort01:fix_pie, r=alexcrichton\n\npass correct pie args to gcc linker\n\nWhen linking with gcc, run gcc -v to see if --enable-default-pie is\ncompiled in. If it is, pass -no-pie when necessary to disable pie.\nOtherwise, pass -pie when necessary to enable it.\n\nFixes #48032 and fixes #35061\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/725856d67fafcb19901dfa033d52f38d1994dc17", "html_url": "https://github.com/rust-lang/rust/commit/725856d67fafcb19901dfa033d52f38d1994dc17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/725856d67fafcb19901dfa033d52f38d1994dc17/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e25322454147c02c054022d3a30f319184dbe49e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e25322454147c02c054022d3a30f319184dbe49e", "html_url": "https://github.com/rust-lang/rust/commit/e25322454147c02c054022d3a30f319184dbe49e"}, {"sha": "ab9cae1ba192afcc35e8bd6a5fddcd1445d05da7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9cae1ba192afcc35e8bd6a5fddcd1445d05da7", "html_url": "https://github.com/rust-lang/rust/commit/ab9cae1ba192afcc35e8bd6a5fddcd1445d05da7"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "0bccef1e62a8e186126bd6cc4593d806e3d6064f", "filename": "src/librustc_trans/back/command.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/725856d67fafcb19901dfa033d52f38d1994dc17/src%2Flibrustc_trans%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725856d67fafcb19901dfa033d52f38d1994dc17/src%2Flibrustc_trans%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fcommand.rs?ref=725856d67fafcb19901dfa033d52f38d1994dc17", "patch": "@@ -109,6 +109,10 @@ impl Command {\n \n     // extensions\n \n+    pub fn get_args(&self) -> &[OsString] {\n+        &self.args\n+    }\n+\n     pub fn take_args(&mut self) -> Vec<OsString> {\n         mem::replace(&mut self.args, Vec::new())\n     }"}, {"sha": "d7c75dea8d04eb021275c541018f1c4f727ee4e6", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/725856d67fafcb19901dfa033d52f38d1994dc17/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725856d67fafcb19901dfa033d52f38d1994dc17/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=725856d67fafcb19901dfa033d52f38d1994dc17", "patch": "@@ -700,9 +700,6 @@ fn link_natively(sess: &Session,\n         prog = time(sess.time_passes(), \"running linker\", || {\n             exec_linker(sess, &mut cmd, tmpdir)\n         });\n-        if !retry_on_segfault || i > 3 {\n-            break\n-        }\n         let output = match prog {\n             Ok(ref output) => output,\n             Err(_) => break,\n@@ -713,6 +710,31 @@ fn link_natively(sess: &Session,\n         let mut out = output.stderr.clone();\n         out.extend(&output.stdout);\n         let out = String::from_utf8_lossy(&out);\n+\n+        // Check to see if the link failed with \"unrecognized command line option:\n+        // '-no-pie'\" for gcc or \"unknown argument: '-no-pie'\" for clang. If so,\n+        // reperform the link step without the -no-pie option. This is safe because\n+        // if the linker doesn't support -no-pie then it should not default to\n+        // linking executables as pie. Different versions of gcc seem to use\n+        // different quotes in the error message so don't check for them.\n+        if sess.target.target.options.linker_is_gnu &&\n+           (out.contains(\"unrecognized command line option\") ||\n+            out.contains(\"unknown argument\")) &&\n+           out.contains(\"-no-pie\") &&\n+           cmd.get_args().iter().any(|e| e.to_string_lossy() == \"-no-pie\") {\n+            info!(\"linker output: {:?}\", out);\n+            warn!(\"Linker does not support -no-pie command line option. Retrying without.\");\n+            for arg in cmd.take_args() {\n+                if arg.to_string_lossy() != \"-no-pie\" {\n+                    cmd.arg(arg);\n+                }\n+            }\n+            info!(\"{:?}\", &cmd);\n+            continue;\n+        }\n+        if !retry_on_segfault || i > 3 {\n+            break\n+        }\n         let msg_segv = \"clang: error: unable to execute command: Segmentation fault: 11\";\n         let msg_bus  = \"clang: error: unable to execute command: Bus error: 10\";\n         if !(out.contains(msg_segv) || out.contains(msg_bus)) {\n@@ -949,16 +971,30 @@ fn link_args(cmd: &mut Linker,\n \n     let used_link_args = &trans.crate_info.link_args;\n \n-    if crate_type == config::CrateTypeExecutable &&\n-       t.options.position_independent_executables {\n-        let empty_vec = Vec::new();\n-        let args = sess.opts.cg.link_args.as_ref().unwrap_or(&empty_vec);\n-        let more_args = &sess.opts.cg.link_arg;\n-        let mut args = args.iter().chain(more_args.iter()).chain(used_link_args.iter());\n-\n-        if get_reloc_model(sess) == llvm::RelocMode::PIC\n-            && !sess.crt_static() && !args.any(|x| *x == \"-static\") {\n+    if crate_type == config::CrateTypeExecutable {\n+        let mut position_independent_executable = false;\n+\n+        if t.options.position_independent_executables {\n+            let empty_vec = Vec::new();\n+            let args = sess.opts.cg.link_args.as_ref().unwrap_or(&empty_vec);\n+            let more_args = &sess.opts.cg.link_arg;\n+            let mut args = args.iter().chain(more_args.iter()).chain(used_link_args.iter());\n+\n+            if get_reloc_model(sess) == llvm::RelocMode::PIC\n+                && !sess.crt_static() && !args.any(|x| *x == \"-static\") {\n+                position_independent_executable = true;\n+            }\n+        }\n+\n+        if position_independent_executable {\n             cmd.position_independent_executable();\n+        } else {\n+            // recent versions of gcc can be configured to generate position\n+            // independent executables by default. We have to pass -no-pie to\n+            // explicitly turn that off.\n+            if sess.target.target.options.linker_is_gnu {\n+                cmd.no_position_independent_executable();\n+            }\n         }\n     }\n "}, {"sha": "7e7811c56c74e39f1b9a476a235637920476cda2", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/725856d67fafcb19901dfa033d52f38d1994dc17/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725856d67fafcb19901dfa033d52f38d1994dc17/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=725856d67fafcb19901dfa033d52f38d1994dc17", "patch": "@@ -105,6 +105,7 @@ pub trait Linker {\n     fn add_object(&mut self, path: &Path);\n     fn gc_sections(&mut self, keep_metadata: bool);\n     fn position_independent_executable(&mut self);\n+    fn no_position_independent_executable(&mut self);\n     fn partial_relro(&mut self);\n     fn full_relro(&mut self);\n     fn optimize(&mut self);\n@@ -179,6 +180,7 @@ impl<'a> Linker for GccLinker<'a> {\n     fn output_filename(&mut self, path: &Path) { self.cmd.arg(\"-o\").arg(path); }\n     fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }\n     fn position_independent_executable(&mut self) { self.cmd.arg(\"-pie\"); }\n+    fn no_position_independent_executable(&mut self) { self.cmd.arg(\"-no-pie\"); }\n     fn partial_relro(&mut self) { self.linker_arg(\"-z,relro\"); }\n     fn full_relro(&mut self) { self.linker_arg(\"-z,relro,-z,now\"); }\n     fn build_static_executable(&mut self) { self.cmd.arg(\"-static\"); }\n@@ -439,6 +441,10 @@ impl<'a> Linker for MsvcLinker<'a> {\n         // noop\n     }\n \n+    fn no_position_independent_executable(&mut self) {\n+        // noop\n+    }\n+\n     fn partial_relro(&mut self) {\n         // noop\n     }\n@@ -647,6 +653,10 @@ impl<'a> Linker for EmLinker<'a> {\n         // noop\n     }\n \n+    fn no_position_independent_executable(&mut self) {\n+        // noop\n+    }\n+\n     fn partial_relro(&mut self) {\n         // noop\n     }"}]}