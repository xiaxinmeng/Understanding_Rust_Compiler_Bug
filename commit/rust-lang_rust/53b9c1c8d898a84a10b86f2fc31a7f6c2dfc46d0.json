{"sha": "53b9c1c8d898a84a10b86f2fc31a7f6c2dfc46d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYjljMWM4ZDg5OGE4NGExMGI4NmYyZmMzMWE3ZjZjMmRmYzQ2ZDA=", "commit": {"author": {"name": "Metabaron", "email": "metabaron@tuta.io", "date": "2019-11-12T10:53:31Z"}, "committer": {"name": "Metabaron", "email": "metabaron@tuta.io", "date": "2019-11-12T11:01:13Z"}, "message": "return Error instead of panicking in from_cargo_metadata", "tree": {"sha": "d7dc144ff0cb0a5b4dc1bf8221cc0bf082cb15ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7dc144ff0cb0a5b4dc1bf8221cc0bf082cb15ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53b9c1c8d898a84a10b86f2fc31a7f6c2dfc46d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53b9c1c8d898a84a10b86f2fc31a7f6c2dfc46d0", "html_url": "https://github.com/rust-lang/rust/commit/53b9c1c8d898a84a10b86f2fc31a7f6c2dfc46d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53b9c1c8d898a84a10b86f2fc31a7f6c2dfc46d0/comments", "author": null, "committer": null, "parents": [{"sha": "b69738590ca1c4823a030d317e7fa6e918618a4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b69738590ca1c4823a030d317e7fa6e918618a4b", "html_url": "https://github.com/rust-lang/rust/commit/b69738590ca1c4823a030d317e7fa6e918618a4b"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "472a15f2b9a228e8299e6b2a98df4b9c965bce22", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53b9c1c8d898a84a10b86f2fc31a7f6c2dfc46d0/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b9c1c8d898a84a10b86f2fc31a7f6c2dfc46d0/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=53b9c1c8d898a84a10b86f2fc31a7f6c2dfc46d0", "patch": "@@ -13,7 +13,7 @@ use ra_syntax::SmolStr;\n use rustc_hash::FxHashSet;\n \n use crate::{RelativePath, RelativePathBuf};\n-use std::str::FromStr;\n+use std::{error::Error, str::FromStr};\n \n /// `FileId` is an integer which uniquely identifies a file. File paths are\n /// messy and system-dependent, so most of the code should work directly with\n@@ -98,13 +98,18 @@ pub enum Edition {\n     Edition2015,\n }\n \n+#[derive(Debug)]\n+pub struct ParseEditionError {\n+    pub msg: String,\n+}\n+\n impl FromStr for Edition {\n-    type Err = String;\n+    type Err = ParseEditionError;\n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n         match s {\n             \"2015\" => Ok(Edition::Edition2015),\n             \"2018\" => Ok(Edition::Edition2018),\n-            _ => Err(format! {\"unknown edition: {}\" , s}),\n+            _ => Err(ParseEditionError { msg: format!(\"unknown edition: {}\", s) }),\n         }\n     }\n }"}, {"sha": "cf88911b751b3a86e224f28155b1c63a734f266e", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/53b9c1c8d898a84a10b86f2fc31a7f6c2dfc46d0/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53b9c1c8d898a84a10b86f2fc31a7f6c2dfc46d0/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=53b9c1c8d898a84a10b86f2fc31a7f6c2dfc46d0", "patch": "@@ -141,20 +141,21 @@ impl CargoWorkspace {\n         let ws_members = &meta.workspace_members;\n \n         for meta_pkg in meta.packages {\n-            let is_member = ws_members.contains(&meta_pkg.id);\n-            let name = meta_pkg.name;\n+            let cargo_metadata::Package { id, edition, name, manifest_path, .. } = meta_pkg;\n+            let is_member = ws_members.contains(&id);\n+            let edition = Edition::from_str(&edition)\n+                .map_err(|e| (format!(\"metadata for package {} failed: {}\", &name, e.msg)))?;\n             let pkg = packages.alloc(PackageData {\n-                name: name.clone(),\n-                manifest: meta_pkg.manifest_path.clone(),\n+                name,\n+                manifest: manifest_path,\n                 targets: Vec::new(),\n                 is_member,\n-                edition: Edition::from_str(&meta_pkg.edition)\n-                    .unwrap_or_else(|e| panic!(\"unknown edition {} for package {:?}\", e, &name)),\n+                edition,\n                 dependencies: Vec::new(),\n                 features: Vec::new(),\n             });\n             let pkg_data = &mut packages[pkg];\n-            pkg_by_id.insert(meta_pkg.id.clone(), pkg);\n+            pkg_by_id.insert(id, pkg);\n             for meta_tgt in meta_pkg.targets {\n                 let tgt = targets.alloc(TargetData {\n                     pkg,"}]}