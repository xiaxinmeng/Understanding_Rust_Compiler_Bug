{"sha": "769a2b5c813fc476e69ac21b13b42a2fa96f3dfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OWEyYjVjODEzZmM0NzZlNjlhYzIxYjEzYjQyYTJmYTk2ZjNkZmU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-14T06:34:08Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-25T08:30:12Z"}, "message": "Handle trait objects.  Only very superficial checking of the vtable for now. (88)", "tree": {"sha": "5f966a4f4853123135f8794232b807fec2eeb70b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f966a4f4853123135f8794232b807fec2eeb70b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/769a2b5c813fc476e69ac21b13b42a2fa96f3dfe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAll3AZQACgkQpp+NIls6\n19nRsQ//TrEqIGo2rjXX7br+eLZ0/Jto4FB6oFDd2t028JnyIJmBbpjgofNlL9mm\nBfczU8JqCWyCNw408701RoQvdapPLu2WlexdJOSIAEaEAcGg6XCgLo/nJyAXXXU7\nHHemejIGOxoH9p6qemrNyMDhT0bJ0mW7/dW05WOIMLP4PnX2lw4LJ29OzTNXATzQ\nKWbBo6NT2qntolw+JMs9tx5OjdbLznpXdLMrTygcwOUMcJdRpetArGy2YdHQlJhs\nMeui1WPEevIlbyvSe3wlHlDRMLOraMTlZjVHTue5X29RdpCxjBlNQ5/nH/LESwEZ\nGlLGRMxubwzVgNba81hpJOvuX7W2IJi6O6x19hDupzmR+vZQ4Vw7g2xXLHX+KVWT\nrCSynDmpDUBnxjYR9KHzzE/UsegZc/s24t2dAE6dBKHV3mhZK7yEH8rDULz5PyH4\nCMn0sP01bo399hDlfb5yICSBtbvNoSJFWKAtRnryd9fe6FKdDMASRRYcW9EWMbSF\nXVAXJ+DRcvtLpaptZTU3dNG4UjBYOJhsnzK0/WFHXSu2BblOV9mmqn4gyc0CHy+E\nemUL3SlT1Zxv65RY6a4Y2OkLruwUAWQcpAnX0iv/8TprOfjyLxfmlEpUyGo0RWOk\nhJMjiMSsU0z6EwghKYtCe8uqgVt0uONWXfJ6i3ty3fbyuKEMVDM=\n=LnZ3\n-----END PGP SIGNATURE-----", "payload": "tree 5f966a4f4853123135f8794232b807fec2eeb70b\nparent e5c6637d87bc7aca8aa30dc0ff9c3957960d3ed3\nauthor Ralf Jung <post@ralfj.de> 1500014048 -0700\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500971412 +0200\n\nHandle trait objects.  Only very superficial checking of the vtable for now. (88)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/769a2b5c813fc476e69ac21b13b42a2fa96f3dfe", "html_url": "https://github.com/rust-lang/rust/commit/769a2b5c813fc476e69ac21b13b42a2fa96f3dfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/769a2b5c813fc476e69ac21b13b42a2fa96f3dfe/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5c6637d87bc7aca8aa30dc0ff9c3957960d3ed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5c6637d87bc7aca8aa30dc0ff9c3957960d3ed3", "html_url": "https://github.com/rust-lang/rust/commit/e5c6637d87bc7aca8aa30dc0ff9c3957960d3ed3"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "7506ecdedbd845a0c4c139e44c990fcc5fd25995", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/769a2b5c813fc476e69ac21b13b42a2fa96f3dfe/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769a2b5c813fc476e69ac21b13b42a2fa96f3dfe/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=769a2b5c813fc476e69ac21b13b42a2fa96f3dfe", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             TyBool | TyFloat(_) | TyChar | TyStr |\n             TyRef(..) | TyFnPtr(..) | TyNever => true,\n             TyAdt(adt, _) if adt.is_box() => true,\n-            TySlice(_) | TyAdt(_, _) | TyTuple(..) | TyClosure(..) | TyArray(..) => false,\n+            TySlice(_) | TyAdt(_, _) | TyTuple(..) | TyClosure(..) | TyArray(..) | TyDynamic(..) => false,\n             TyParam(_) | TyInfer(_) => bug!(\"I got an incomplete type for validation\"),\n             _ => return Err(EvalError::Unimplemented(format!(\"Unimplemented type encountered when checking validity.\"))),\n         };\n@@ -178,6 +178,20 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n                 Ok(())\n             }\n+            TyDynamic(_data, _region) => {\n+                // Check that this is a valid vtable\n+                let vtable = match lvalue {\n+                    Lvalue::Ptr { extra: LvalueExtra::Vtable(vtable), .. } => vtable,\n+                    _ => bug!(\"acquire_valid of a TyDynamic given non-trait-object lvalue: {:?}\", lvalue),\n+                };\n+                self.read_size_and_align_from_vtable(vtable)?;\n+                // TODO: Check that the vtable contains all the function pointers we expect it to have.\n+                // TODO: Is there anything we can/should validate here?  Trait objects cannot have any operations performed\n+                // on them directly.  We cannot, in general, even acquire any locks as the trait object *could*\n+                // contain an UnsafeCell.  If we call functions to get access to data, we will validate\n+                // their return values.  So, it doesn't seem like there's anything to do.\n+                Ok(())\n+            }\n             TyAdt(adt, subst) => {\n                 if Some(adt.did) == self.tcx.lang_items.unsafe_cell_type() {\n                     // No locks for unsafe cells.  Also no other validation, the only field is private anyway."}]}