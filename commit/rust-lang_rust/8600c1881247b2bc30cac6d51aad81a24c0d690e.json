{"sha": "8600c1881247b2bc30cac6d51aad81a24c0d690e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MDBjMTg4MTI0N2IyYmMzMGNhYzZkNTFhYWQ4MWEyNGMwZDY5MGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-28T08:01:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-28T08:01:52Z"}, "message": "auto merge of #7272 : Aatch/rust/namegen_thunk, r=thestinger\n\nThis removes the `namegen` thunk that was in `common.rs`. I also take the opportunity to refactor a few uses where we had a `str -> ident -> str` chain that seemed somewhat redundant to me.\r\n\r\nAlso cleans up some warnings that made their way in already.", "tree": {"sha": "9fcb8dc1cd99a8a81e36bf92a4a1da1ecf300a48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fcb8dc1cd99a8a81e36bf92a4a1da1ecf300a48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8600c1881247b2bc30cac6d51aad81a24c0d690e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8600c1881247b2bc30cac6d51aad81a24c0d690e", "html_url": "https://github.com/rust-lang/rust/commit/8600c1881247b2bc30cac6d51aad81a24c0d690e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8600c1881247b2bc30cac6d51aad81a24c0d690e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7", "html_url": "https://github.com/rust-lang/rust/commit/61dc7760d06fbae0252ba6172f2caeb7b9dcb1a7"}, {"sha": "a897a9ab9fa046483564efdf84e731b872d2356a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a897a9ab9fa046483564efdf84e731b872d2356a", "html_url": "https://github.com/rust-lang/rust/commit/a897a9ab9fa046483564efdf84e731b872d2356a"}], "stats": {"total": 85, "additions": 40, "deletions": 45}, "files": [{"sha": "55d0219a78716adfa9bc9a06d47eefa5b6705c3a", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8600c1881247b2bc30cac6d51aad81a24c0d690e/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8600c1881247b2bc30cac6d51aad81a24c0d690e/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=8600c1881247b2bc30cac6d51aad81a24c0d690e", "patch": "@@ -19,6 +19,7 @@ use lib;\n use metadata::common::LinkMeta;\n use metadata::{encoder, csearch, cstore};\n use middle::trans::context::CrateContext;\n+use middle::trans::common::gensym_name;\n use middle::ty;\n use util::ppaux;\n \n@@ -37,6 +38,7 @@ use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::attr;\n use syntax::print::pprust;\n+use syntax::parse::token;\n \n #[deriving(Eq)]\n pub enum output_type {\n@@ -731,22 +733,22 @@ pub fn mangle_internal_name_by_type_and_seq(ccx: &mut CrateContext,\n     return mangle(ccx.sess,\n         ~[path_name(ccx.sess.ident_of(s)),\n           path_name(ccx.sess.ident_of(hash)),\n-          path_name((ccx.names)(name))]);\n+          path_name(gensym_name(name))]);\n }\n \n pub fn mangle_internal_name_by_path_and_seq(ccx: &mut CrateContext,\n-                                            path: path,\n+                                            mut path: path,\n                                             flav: &str) -> ~str {\n-    mangle(ccx.sess,\n-           vec::append_one(path, path_name((ccx.names)(flav))))\n+    path.push(path_name(gensym_name(flav)));\n+    mangle(ccx.sess, path)\n }\n \n pub fn mangle_internal_name_by_path(ccx: &mut CrateContext, path: path) -> ~str {\n     mangle(ccx.sess, path)\n }\n \n-pub fn mangle_internal_name_by_seq(ccx: &mut CrateContext, flav: &str) -> ~str {\n-    fmt!(\"%s_%u\", flav, (ccx.names)(flav).name)\n+pub fn mangle_internal_name_by_seq(_ccx: &mut CrateContext, flav: &str) -> ~str {\n+    return fmt!(\"%s_%u\", flav, token::gensym(flav));\n }\n \n "}, {"sha": "251add59326c3ab76fafba8b348376411cff3874", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8600c1881247b2bc30cac6d51aad81a24c0d690e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8600c1881247b2bc30cac6d51aad81a24c0d690e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8600c1881247b2bc30cac6d51aad81a24c0d690e", "patch": "@@ -1129,24 +1129,22 @@ pub fn new_block(cx: fn_ctxt, parent: Option<block>, kind: block_kind,\n                  is_lpad: bool, name: &str, opt_node_info: Option<NodeInfo>)\n     -> block {\n \n-    let s = if cx.ccx.sess.opts.save_temps || cx.ccx.sess.opts.debuginfo {\n-        (cx.ccx.names)(name)\n-    } else {\n-        special_idents::invalid\n-    };\n     unsafe {\n-        let llbb = str::as_c_str(cx.ccx.sess.str_of(s), |buf| {\n+        let llbb = do name.as_c_str |buf| {\n             llvm::LLVMAppendBasicBlockInContext(cx.ccx.llcx, cx.llfn, buf)\n-        });\n+        };\n         let bcx = mk_block(llbb,\n                            parent,\n                            kind,\n                            is_lpad,\n                            opt_node_info,\n                            cx);\n         for parent.iter().advance |cx| {\n-            if cx.unreachable { Unreachable(bcx); }\n-        };\n+            if cx.unreachable {\n+                Unreachable(bcx);\n+                break;\n+            }\n+        }\n         bcx\n     }\n }\n@@ -2524,12 +2522,15 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::node_id) -> ValueRef {\n \n pub fn register_method(ccx: @mut CrateContext,\n                        id: ast::node_id,\n-                       pth: @ast_map::path,\n+                       path: @ast_map::path,\n                        m: @ast::method) -> ValueRef {\n     let mty = ty::node_id_to_type(ccx.tcx, id);\n-    let pth = vec::append(/*bad*/copy *pth, [path_name((ccx.names)(\"meth\")),\n-                                  path_name(m.ident)]);\n-    let llfn = register_fn_full(ccx, m.span, pth, id, m.attrs, mty);\n+\n+    let mut path = /*bad*/ copy *path;\n+    path.push(path_name(gensym_name(\"meth\")));\n+    path.push(path_name(m.ident));\n+\n+    let llfn = register_fn_full(ccx, m.span, path, id, m.attrs, mty);\n     set_inline_hint_if_appr(m.attrs, llfn);\n     llfn\n }"}, {"sha": "67ca647862baece7550346a6a42943022febfa16", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8600c1881247b2bc30cac6d51aad81a24c0d690e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8600c1881247b2bc30cac6d51aad81a24c0d690e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=8600c1881247b2bc30cac6d51aad81a24c0d690e", "patch": "@@ -45,14 +45,8 @@ use syntax::{ast, ast_map};\n \n pub use middle::trans::context::CrateContext;\n \n-// NOTE: this thunk is totally pointless now that we're not passing\n-// interners around...\n-pub type namegen = @fn(s: &str) -> ident;\n-pub fn new_namegen() -> namegen {\n-    let f: @fn(s: &str) -> ident = |prefix| {\n-        token::str_to_ident(fmt!(\"%s_%u\", prefix, token::gensym(prefix)))\n-    };\n-    f\n+pub fn gensym_name(name: &str) -> ident {\n+    token::str_to_ident(fmt!(\"%s_%u\", name, token::gensym(name)))\n }\n \n pub struct tydesc_info {\n@@ -819,8 +813,9 @@ pub fn C_bytes(bytes: &[u8]) -> ValueRef {\n \n pub fn C_bytes_plus_null(bytes: &[u8]) -> ValueRef {\n     unsafe {\n-        let ptr = cast::transmute(vec::raw::to_ptr(bytes));\n-        return llvm::LLVMConstStringInContext(base::task_llcx(), ptr, bytes.len() as c_uint,False);\n+        return llvm::LLVMConstStringInContext(base::task_llcx(),\n+            cast::transmute(vec::raw::to_ptr(bytes)),\n+            bytes.len() as c_uint, False);\n     }\n }\n "}, {"sha": "7046c8b9f41b9f4317b68ef0646df557eadafc63", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8600c1881247b2bc30cac6d51aad81a24c0d690e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8600c1881247b2bc30cac6d51aad81a24c0d690e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=8600c1881247b2bc30cac6d51aad81a24c0d690e", "patch": "@@ -34,8 +34,7 @@ use core::local_data;\n use extra::time;\n use syntax::ast;\n \n-use middle::trans::common::{ExternMap,tydesc_info,BuilderRef_res,Stats,namegen};\n-use middle::trans::common::{mono_id,new_namegen};\n+use middle::trans::common::{mono_id,ExternMap,tydesc_info,BuilderRef_res,Stats};\n \n use middle::trans::base::{decl_crate_map};\n \n@@ -93,7 +92,6 @@ pub struct CrateContext {\n      lltypes: HashMap<ty::t, Type>,\n      llsizingtypes: HashMap<ty::t, Type>,\n      adt_reprs: HashMap<ty::t, @adt::Repr>,\n-     names: namegen,\n      symbol_hasher: hash::State,\n      type_hashcodes: HashMap<ty::t, @str>,\n      type_short_names: HashMap<ty::t, ~str>,\n@@ -194,7 +192,6 @@ impl CrateContext {\n                   lltypes: HashMap::new(),\n                   llsizingtypes: HashMap::new(),\n                   adt_reprs: HashMap::new(),\n-                  names: new_namegen(),\n                   symbol_hasher: symbol_hasher,\n                   type_hashcodes: HashMap::new(),\n                   type_short_names: HashMap::new(),"}, {"sha": "22448f577a350f10701b960140e23800588d2bdd", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8600c1881247b2bc30cac6d51aad81a24c0d690e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8600c1881247b2bc30cac6d51aad81a24c0d690e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=8600c1881247b2bc30cac6d51aad81a24c0d690e", "patch": "@@ -64,6 +64,7 @@ use core::sys;\n use core::vec;\n use syntax::codemap::span;\n use syntax::{ast, codemap, ast_util, ast_map};\n+use syntax::parse::token;\n \n static DW_LANG_RUST: int = 0x9000;\n \n@@ -86,7 +87,6 @@ static DW_ATE_unsigned_char: int = 0x08;\n \n /// A context object for maintaining all state needed by the debuginfo module.\n pub struct DebugContext {\n-    names: namegen,\n     crate_file: ~str,\n     llcontext: ContextRef,\n     builder: DIBuilderRef,\n@@ -104,7 +104,6 @@ impl DebugContext {\n         // DIBuilder inherits context from the module, so we'd better use the same one\n         let llcontext = unsafe { llvm::LLVMGetModuleContext(llmod) };\n         return DebugContext {\n-            names: new_namegen(),\n             crate_file: crate,\n             llcontext: llcontext,\n             builder: builder,\n@@ -276,7 +275,8 @@ pub fn create_function(fcx: fn_ctxt) -> DISubprogram {\n       ast_map::node_expr(expr) => {\n         match expr.node {\n           ast::expr_fn_block(ref decl, _) => {\n-            ((dbg_cx(cx).names)(\"fn\"), decl.output, expr.id)\n+            let name = gensym_name(\"fn\");\n+            (name, decl.output, expr.id)\n           }\n           _ => fcx.ccx.sess.span_bug(expr.span,\n                   \"create_function: expected an expr_fn_block here\")\n@@ -628,7 +628,7 @@ fn create_tuple(cx: &mut CrateContext, tuple_type: ty::t, elements: &[ty::t], sp\n     let loc = span_start(cx, span);\n     let file_md = create_file(cx, loc.file.name);\n \n-    let name = (cx.sess.str_of((dbg_cx(cx).names)(\"tuple\"))).to_owned();\n+    let name = fmt!(\"tuple_%u\", token::gensym(\"tuple\"));\n     let mut scx = StructContext::new(cx, name, file_md, loc.line);\n     for elements.iter().advance |element| {\n         let ty_md = create_ty(cx, *element, span);\n@@ -911,8 +911,6 @@ fn set_debug_location(cx: @mut CrateContext, scope: DIScope, line: uint, col: ui\n }\n \n \n-\n-\n //=-------------------------------------------------------------------------------------------------\n //  Utility Functions\n //=-------------------------------------------------------------------------------------------------"}, {"sha": "fc0c9c06c450b9723c3f94a36a68863b64eb57c0", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8600c1881247b2bc30cac6d51aad81a24c0d690e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8600c1881247b2bc30cac6d51aad81a24c0d690e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=8600c1881247b2bc30cac6d51aad81a24c0d690e", "patch": "@@ -28,15 +28,15 @@ use middle::trans::type_of::*;\n use middle::ty;\n use middle::typeck;\n use util::common::indenter;\n-use util::ppaux::Repr;\n+use util::ppaux::{Repr, ty_to_str};\n \n use middle::trans::type_::Type;\n \n-use core::str;\n use core::vec;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util;\n use syntax::{ast, ast_map};\n+use syntax::parse::token;\n \n /**\n The main \"translation\" pass for methods.  Generates code\n@@ -755,9 +755,10 @@ pub fn make_vtable(ccx: &mut CrateContext,\n             components.push(ptr)\n         }\n \n+        let name = fmt!(\"%s_vtable_%u\", ty_to_str(ccx.tcx, tydesc.ty), token::gensym(\"vtable\"));\n+\n         let tbl = C_struct(components);\n-        let vtable = ccx.sess.str_of((ccx.names)(\"vtable\"));\n-        let vt_gvar = do str::as_c_str(vtable) |buf| {\n+        let vt_gvar = do name.as_c_str |buf| {\n             llvm::LLVMAddGlobal(ccx.llmod, val_ty(tbl).to_ref(), buf)\n         };\n         llvm::LLVMSetInitializer(vt_gvar, tbl);"}, {"sha": "586dfd7e98a02bcdc3b1f931b9b6981a4e852b51", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8600c1881247b2bc30cac6d51aad81a24c0d690e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8600c1881247b2bc30cac6d51aad81a24c0d690e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=8600c1881247b2bc30cac6d51aad81a24c0d690e", "patch": "@@ -161,8 +161,9 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n     }\n     ccx.monomorphizing.insert(fn_id, depth + 1);\n \n-    let pt = vec::append(/*bad*/copy *pt,\n-                         [path_name((ccx.names)(ccx.sess.str_of(name)))]);\n+    let elt = path_name(gensym_name(ccx.sess.str_of(name)));\n+    let mut pt = /* bad */copy (*pt);\n+    pt.push(elt);\n     let s = mangle_exported_name(ccx, /*bad*/copy pt, mono_ty);\n \n     let mk_lldecl = || {"}]}