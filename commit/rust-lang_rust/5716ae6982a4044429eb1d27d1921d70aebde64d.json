{"sha": "5716ae6982a4044429eb1d27d1921d70aebde64d", "node_id": "C_kwDOAAsO6NoAKDU3MTZhZTY5ODJhNDA0NDQyOWViMWQyN2QxOTIxZDcwYWViZGU2NGQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-11T04:18:30Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-04-11T04:18:53Z"}, "message": "Introduce `Region::get_name_or_anon`.\n\nFor a common pattern.", "tree": {"sha": "d978f91143ede9b7c60d72d607dc4c5679a35ced", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d978f91143ede9b7c60d72d607dc4c5679a35ced"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5716ae6982a4044429eb1d27d1921d70aebde64d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5716ae6982a4044429eb1d27d1921d70aebde64d", "html_url": "https://github.com/rust-lang/rust/commit/5716ae6982a4044429eb1d27d1921d70aebde64d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5716ae6982a4044429eb1d27d1921d70aebde64d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88fb1b922b047981fc0cfc62aa1418b4361ae72e", "url": "https://api.github.com/repos/rust-lang/rust/commits/88fb1b922b047981fc0cfc62aa1418b4361ae72e", "html_url": "https://github.com/rust-lang/rust/commit/88fb1b922b047981fc0cfc62aa1418b4361ae72e"}], "stats": {"total": 48, "additions": 16, "deletions": 32}, "files": [{"sha": "9a2c14d960221552a9d0bb4d0f4672522339c84b", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5716ae6982a4044429eb1d27d1921d70aebde64d/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5716ae6982a4044429eb1d27d1921d70aebde64d/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=5716ae6982a4044429eb1d27d1921d70aebde64d", "patch": "@@ -440,11 +440,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                     debug!(?r);\n                     if !indices.indices.contains_key(&r) {\n                         let region_vid = {\n-                            let name = match r.get_name() {\n-                                Some(name) => name,\n-                                _ => Symbol::intern(\"anon\"),\n-                            };\n-\n+                            let name = r.get_name_or_anon();\n                             self.infcx.next_nll_region_var(FR, || {\n                                 RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n                             })\n@@ -478,11 +474,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = {\n-                    let name = match r.get_name() {\n-                        Some(name) => name,\n-                        _ => Symbol::intern(\"anon\"),\n-                    };\n-\n+                    let name = r.get_name_or_anon();\n                     self.infcx.next_nll_region_var(FR, || {\n                         RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n                     })\n@@ -768,15 +760,10 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n         T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.infcx.tcx.fold_regions(value, |region, _depth| {\n-            let name = match region.get_name() {\n-                Some(name) => name,\n-                _ => Symbol::intern(\"anon\"),\n-            };\n+            let name = region.get_name_or_anon();\n             debug!(?region, ?name);\n \n-            let reg_var = self.next_nll_region_var(origin, || RegionCtxt::Free(name));\n-\n-            reg_var\n+            self.next_nll_region_var(origin, || RegionCtxt::Free(name))\n         })\n     }\n \n@@ -829,11 +816,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = {\n-                    let name = match r.get_name() {\n-                        Some(name) => name,\n-                        _ => Symbol::intern(\"anon\"),\n-                    };\n-\n+                    let name = r.get_name_or_anon();\n                     self.next_nll_region_var(FR, || {\n                         RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n                     })\n@@ -855,11 +838,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = {\n-                    let name = match r.get_name() {\n-                        Some(name) => name,\n-                        _ => Symbol::intern(\"anon\"),\n-                    };\n-\n+                    let name = r.get_name_or_anon();\n                     self.next_nll_region_var(FR, || {\n                         RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n                     })"}, {"sha": "e941a4058de6f3470d289d8069bb1853ad2fa8ce", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5716ae6982a4044429eb1d27d1921d70aebde64d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5716ae6982a4044429eb1d27d1921d70aebde64d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=5716ae6982a4044429eb1d27d1921d70aebde64d", "patch": "@@ -1621,19 +1621,24 @@ impl<'tcx> Region<'tcx> {\n \n     pub fn get_name(self) -> Option<Symbol> {\n         if self.has_name() {\n-            let name = match *self {\n+            match *self {\n                 ty::ReEarlyBound(ebr) => Some(ebr.name),\n                 ty::ReLateBound(_, br) => br.kind.get_name(),\n                 ty::ReFree(fr) => fr.bound_region.get_name(),\n                 ty::ReStatic => Some(kw::StaticLifetime),\n                 ty::RePlaceholder(placeholder) => placeholder.bound.kind.get_name(),\n                 _ => None,\n-            };\n-\n-            return name;\n+            }\n+        } else {\n+            None\n         }\n+    }\n \n-        None\n+    pub fn get_name_or_anon(self) -> Symbol {\n+        match self.get_name() {\n+            Some(name) => name,\n+            None => Symbol::intern(\"anon\"),\n+        }\n     }\n \n     /// Is this region named by the user?"}]}