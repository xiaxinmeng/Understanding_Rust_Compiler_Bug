{"sha": "a167435b76c1070fa0290e27f7756c9bb5b6548b", "node_id": "C_kwDOAAsO6NoAKGExNjc0MzViNzZjMTA3MGZhMDI5MGUyN2Y3NzU2YzliYjViNjU0OGI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-01-02T13:29:38Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-01-02T13:49:08Z"}, "message": "Add regression test for #105742", "tree": {"sha": "2601ccffe03e558d9171588682e6ee7fcd7d601e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2601ccffe03e558d9171588682e6ee7fcd7d601e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a167435b76c1070fa0290e27f7756c9bb5b6548b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a167435b76c1070fa0290e27f7756c9bb5b6548b", "html_url": "https://github.com/rust-lang/rust/commit/a167435b76c1070fa0290e27f7756c9bb5b6548b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a167435b76c1070fa0290e27f7756c9bb5b6548b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a9432255eac349e4349f323123f3b49234d4f6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a9432255eac349e4349f323123f3b49234d4f6b", "html_url": "https://github.com/rust-lang/rust/commit/1a9432255eac349e4349f323123f3b49234d4f6b"}], "stats": {"total": 425, "additions": 425, "deletions": 0}, "files": [{"sha": "cb1de7433cfaa4d33ef9cbc4ab31cb78cbe653cb", "filename": "src/test/rustdoc-ui/issue-105742.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a167435b76c1070fa0290e27f7756c9bb5b6548b/src%2Ftest%2Frustdoc-ui%2Fissue-105742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167435b76c1070fa0290e27f7756c9bb5b6548b/src%2Ftest%2Frustdoc-ui%2Fissue-105742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105742.rs?ref=a167435b76c1070fa0290e27f7756c9bb5b6548b", "patch": "@@ -0,0 +1,40 @@\n+// compile-flags: -Znormalize-docs\n+\n+use std::ops::Index;\n+\n+pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+//~^ ERROR\n+//~^^ ERROR\n+//~^^^ ERROR\n+    let _ = s;\n+}\n+\n+pub trait SVec: Index<\n+    <Self as SVec>::Item,\n+//~^ ERROR\n+//~^^ ERROR\n+//~^^^ ERROR\n+//~^^^^ ERROR\n+    Output = <Index<<Self as SVec>::Item,\n+//~^ ERROR\n+//~^^ ERROR\n+//~^^^ ERROR\n+//~^^^^ ERROR\n+    Output = <Self as SVec>::Item> as SVec>::Item,\n+//~^ ERROR\n+//~^^ ERROR\n+//~^^^ ERROR\n+//~^^^^ ERROR\n+//~^^^^^ ERROR\n+//~^^^^^^ ERROR\n+//~^^^^^^^ ERROR\n+//~^^^^^^^^ ERROR\n+> {\n+    type Item<'a, T>;\n+\n+    fn len(&self) -> <Self as SVec>::Item;\n+    //~^ ERROR\n+    //~^^ ERROR\n+    //~^^^ ERROR\n+    //~^^^^ ERROR\n+}"}, {"sha": "cc101b7ff37577a2f75554ecf6a965d92e6dbbb6", "filename": "src/test/rustdoc-ui/issue-105742.stderr", "status": "added", "additions": 385, "deletions": 0, "changes": 385, "blob_url": "https://github.com/rust-lang/rust/blob/a167435b76c1070fa0290e27f7756c9bb5b6548b/src%2Ftest%2Frustdoc-ui%2Fissue-105742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a167435b76c1070fa0290e27f7756c9bb5b6548b/src%2Ftest%2Frustdoc-ui%2Fissue-105742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-105742.stderr?ref=a167435b76c1070fa0290e27f7756c9bb5b6548b", "patch": "@@ -0,0 +1,385 @@\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:13:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     <Self as SVec>::Item<'a>,\n+   |                     ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:13:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     <Self as SVec>::Item<T>,\n+   |                     ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:18:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<'a>,\n+   |                                     ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:18:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<T>,\n+   |                                     ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n+   |                              ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n+   |                              ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n+   |                                              ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n+   |                                              ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:5:40\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                                        ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item<'_> = T, Output = T>) {\n+   |                                        ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:5:40\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                                        ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item<T> = T, Output = T>) {\n+   |                                        ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:13:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     <Self as SVec>::Item<'a>,\n+   |                     ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:13:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     <Self as SVec>::Item<T>,\n+   |                     ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:18:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<'a>,\n+   |                                     ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:18:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<T>,\n+   |                                     ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n+   |                              ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n+   |                              ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n+   |                                              ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:23:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n+   |                                              ~~~~~~~\n+\n+error[E0038]: the trait `SVec` cannot be made into an object\n+  --> $DIR/issue-105742.rs:5:31\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SVec` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-105742.rs:12:17\n+   |\n+LL |    pub trait SVec: Index<\n+   |  ____________----__^\n+   | |            |\n+   | |            this trait cannot be made into an object...\n+LL | |      <Self as SVec>::Item,\n+LL | |\n+LL | |\n+...  |\n+LL | |/     Output = <Index<<Self as SVec>::Item,\n+LL | ||\n+LL | ||\n+LL | ||\n+LL | ||\n+LL | ||     Output = <Self as SVec>::Item> as SVec>::Item,\n+   | ||_________________________________________________^ ...because it uses `Self` as a type parameter\n+...  |\n+LL | |\n+LL | |  > {\n+   | |__^ ...because it uses `Self` as a type parameter\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:35:38\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item;\n+   |                                      ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item<'_>;\n+   |                                      ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:35:38\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item;\n+   |                                      ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item<T>;\n+   |                                      ~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:35:38\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item;\n+   |                                      ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item<'_>;\n+   |                                      ~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:35:38\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item;\n+   |                                      ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:33:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     fn len(&self) -> <Self as SVec>::Item<T>;\n+   |                                      ~~~~~~~\n+\n+error: aborting due to 23 previous errors\n+\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}]}