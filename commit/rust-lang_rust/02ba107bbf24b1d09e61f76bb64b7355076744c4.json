{"sha": "02ba107bbf24b1d09e61f76bb64b7355076744c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYmExMDdiYmYyNGIxZDA5ZTYxZjc2YmI2NGI3MzU1MDc2NzQ0YzQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-12T18:01:28Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-12T18:01:28Z"}, "message": "Merge #1265\n\n1265: drop obsolete render test subcommand r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4046c8840eb1e15704a9c195fe5ee54327799091", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4046c8840eb1e15704a9c195fe5ee54327799091"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02ba107bbf24b1d09e61f76bb64b7355076744c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02ba107bbf24b1d09e61f76bb64b7355076744c4", "html_url": "https://github.com/rust-lang/rust/commit/02ba107bbf24b1d09e61f76bb64b7355076744c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02ba107bbf24b1d09e61f76bb64b7355076744c4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "1944fc2c2b9ed5d9414afbc1b167e628d6e4e7f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1944fc2c2b9ed5d9414afbc1b167e628d6e4e7f9", "html_url": "https://github.com/rust-lang/rust/commit/1944fc2c2b9ed5d9414afbc1b167e628d6e4e7f9"}, {"sha": "8ee2926aa2be9ac0e658386b91617e6563cc5d71", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee2926aa2be9ac0e658386b91617e6563cc5d71", "html_url": "https://github.com/rust-lang/rust/commit/8ee2926aa2be9ac0e658386b91617e6563cc5d71"}], "stats": {"total": 41, "additions": 7, "deletions": 34}, "files": [{"sha": "e6b2b30c6786183affc1782e2f2d323ad9f0f922", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02ba107bbf24b1d09e61f76bb64b7355076744c4/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ba107bbf24b1d09e61f76bb64b7355076744c4/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=02ba107bbf24b1d09e61f76bb64b7355076744c4", "patch": "@@ -7,9 +7,9 @@ use ra_syntax::AstNode;\n \n use crate::Result;\n \n-pub fn run(verbose: bool, only: Option<&str>) -> Result<()> {\n+pub fn run(verbose: bool, path: &str, only: Option<&str>) -> Result<()> {\n     let db_load_time = Instant::now();\n-    let (db, roots) = BatchDatabase::load_cargo(\".\")?;\n+    let (db, roots) = BatchDatabase::load_cargo(path)?;\n     println!(\"Database loaded, {} roots, {:?}\", roots.len(), db_load_time.elapsed());\n     let analysis_time = Instant::now();\n     let mut num_crates = 0;"}, {"sha": "038f5f3fe6cb02f93875f598f91777f0f79ec379", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/02ba107bbf24b1d09e61f76bb64b7355076744c4/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ba107bbf24b1d09e61f76bb64b7355076744c4/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=02ba107bbf24b1d09e61f76bb64b7355076744c4", "patch": "@@ -1,11 +1,10 @@\n mod analysis_stats;\n \n-use std::{fs, io::Read, path::Path};\n+use std::io::Read;\n \n use clap::{App, Arg, SubCommand};\n use ra_ide_api::file_structure;\n use ra_syntax::{SourceFile, TreeArc, AstNode};\n-use tools::collect_tests;\n use flexi_logger::Logger;\n use ra_prof::profile;\n \n@@ -15,17 +14,13 @@ fn main() -> Result<()> {\n     Logger::with_env().start()?;\n     let matches = App::new(\"ra-cli\")\n         .setting(clap::AppSettings::SubcommandRequiredElseHelp)\n-        .subcommand(\n-            SubCommand::with_name(\"render-test\")\n-                .arg(Arg::with_name(\"line\").long(\"--line\").required(true).takes_value(true))\n-                .arg(Arg::with_name(\"file\").long(\"--file\").required(true).takes_value(true)),\n-        )\n         .subcommand(SubCommand::with_name(\"parse\").arg(Arg::with_name(\"no-dump\").long(\"--no-dump\")))\n         .subcommand(SubCommand::with_name(\"symbols\"))\n         .subcommand(\n             SubCommand::with_name(\"analysis-stats\")\n                 .arg(Arg::with_name(\"verbose\").short(\"v\"))\n-                .arg(Arg::with_name(\"only\").short(\"o\").takes_value(true)),\n+                .arg(Arg::with_name(\"only\").short(\"o\").takes_value(true))\n+                .arg(Arg::with_name(\"path\")),\n         )\n         .get_matches();\n     match matches.subcommand() {\n@@ -43,18 +38,11 @@ fn main() -> Result<()> {\n                 println!(\"{:?}\", s);\n             }\n         }\n-        (\"render-test\", Some(matches)) => {\n-            let file = matches.value_of(\"file\").unwrap();\n-            let file = Path::new(file);\n-            let line: usize = matches.value_of(\"line\").unwrap().parse()?;\n-            let line = line - 1;\n-            let (test, tree) = render_test(file, line)?;\n-            println!(\"{}\\n{}\", test, tree);\n-        }\n         (\"analysis-stats\", Some(matches)) => {\n             let verbose = matches.is_present(\"verbose\");\n+            let path = matches.value_of(\"path\").unwrap_or(\"\");\n             let only = matches.value_of(\"only\");\n-            analysis_stats::run(verbose, only)?;\n+            analysis_stats::run(verbose, path, only)?;\n         }\n         _ => unreachable!(),\n     }\n@@ -71,18 +59,3 @@ fn read_stdin() -> Result<String> {\n     ::std::io::stdin().read_to_string(&mut buff)?;\n     Ok(buff)\n }\n-\n-fn render_test(file: &Path, line: usize) -> Result<(String, String)> {\n-    let text = fs::read_to_string(file)?;\n-    let tests = collect_tests(&text);\n-    let test = tests.into_iter().find(|(start_line, t)| {\n-        *start_line <= line && line <= *start_line + t.text.lines().count()\n-    });\n-    let test = match test {\n-        None => failure::bail!(\"No test found at line {} at {}\", line, file.display()),\n-        Some((_start_line, test)) => test,\n-    };\n-    let file = SourceFile::parse(&test.text);\n-    let tree = file.syntax().debug_dump();\n-    Ok((test.text, tree))\n-}"}]}