{"sha": "6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYzRmYzdmYzJmYjQ4NTk5ZGJiYTU1ZmNlYTVjZmMxZTZjZDQ2MDI=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-10T15:43:03Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-15T17:55:19Z"}, "message": "Deprecate `str::from_utf16`\n\nUse `String::from_utf16` instead\n\n[breaking-change]", "tree": {"sha": "50f3c0ebee097596588282f1260bed2fdaa122fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50f3c0ebee097596588282f1260bed2fdaa122fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602", "html_url": "https://github.com/rust-lang/rust/commit/6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "173baac495485848335cf5ffd52fcd4d061d6d50", "url": "https://api.github.com/repos/rust-lang/rust/commits/173baac495485848335cf5ffd52fcd4d061d6d50", "html_url": "https://github.com/rust-lang/rust/commit/173baac495485848335cf5ffd52fcd4d061d6d50"}], "stats": {"total": 76, "additions": 40, "deletions": 36}, "files": [{"sha": "8ed664e6c697a66ffd85f0d3468bae6ffebf27ba", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 9, "deletions": 31, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602", "patch": "@@ -378,32 +378,10 @@ pub fn replace(s: &str, from: &str, to: &str) -> String {\n Section: Misc\n */\n \n-/// Decode a UTF-16 encoded vector `v` into a string, returning `None`\n-/// if `v` contains any invalid data.\n-///\n-/// # Example\n-///\n-/// ```rust\n-/// use std::str;\n-///\n-/// // \ud834\udd1emusic\n-/// let mut v = [0xD834, 0xDD1E, 0x006d, 0x0075,\n-///              0x0073, 0x0069, 0x0063];\n-/// assert_eq!(str::from_utf16(v), Some(\"\ud834\udd1emusic\".to_string()));\n-///\n-/// // \ud834\udd1emu<invalid>ic\n-/// v[4] = 0xD800;\n-/// assert_eq!(str::from_utf16(v), None);\n-/// ```\n+/// Deprecated. Use `String::from_utf16`.\n+#[deprecated = \"Replaced by String::from_utf16\"]\n pub fn from_utf16(v: &[u16]) -> Option<String> {\n-    let mut s = String::with_capacity(v.len() / 2);\n-    for c in utf16_items(v) {\n-        match c {\n-            ScalarValue(c) => s.push_char(c),\n-            LoneSurrogate(_) => return None\n-        }\n-    }\n-    Some(s)\n+    String::from_utf16(v)\n }\n \n /// Decode a UTF-16 encoded vector `v` into a string, replacing\n@@ -1722,15 +1700,15 @@ mod tests {\n         for p in pairs.iter() {\n             let (s, u) = (*p).clone();\n             let s_as_utf16 = s.as_slice().utf16_units().collect::<Vec<u16>>();\n-            let u_as_string = from_utf16(u.as_slice()).unwrap();\n+            let u_as_string = String::from_utf16(u.as_slice()).unwrap();\n \n             assert!(is_utf16(u.as_slice()));\n             assert_eq!(s_as_utf16, u);\n \n             assert_eq!(u_as_string, s);\n             assert_eq!(from_utf16_lossy(u.as_slice()), s);\n \n-            assert_eq!(from_utf16(s_as_utf16.as_slice()).unwrap(), s);\n+            assert_eq!(String::from_utf16(s_as_utf16.as_slice()).unwrap(), s);\n             assert_eq!(u_as_string.as_slice().utf16_units().collect::<Vec<u16>>(), u);\n         }\n     }\n@@ -1739,15 +1717,15 @@ mod tests {\n     fn test_utf16_invalid() {\n         // completely positive cases tested above.\n         // lead + eof\n-        assert_eq!(from_utf16([0xD800]), None);\n+        assert_eq!(String::from_utf16([0xD800]), None);\n         // lead + lead\n-        assert_eq!(from_utf16([0xD800, 0xD800]), None);\n+        assert_eq!(String::from_utf16([0xD800, 0xD800]), None);\n \n         // isolated trail\n-        assert_eq!(from_utf16([0x0061, 0xDC00]), None);\n+        assert_eq!(String::from_utf16([0x0061, 0xDC00]), None);\n \n         // general\n-        assert_eq!(from_utf16([0xD800, 0xd801, 0xdc8b, 0xD800]), None);\n+        assert_eq!(String::from_utf16([0xD800, 0xd801, 0xdc8b, 0xD800]), None);\n     }\n \n     #[test]"}, {"sha": "2928fd327aeec9f644452eaa91a64c9793daf2a5", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602", "patch": "@@ -91,6 +91,32 @@ impl String {\n             Err(vec)\n         }\n     }\n+    \n+    /// Decode a UTF-16 encoded vector `v` into a string, returning `None`\n+    /// if `v` contains any invalid data.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// // \u00f0\u009d\u201e\u017emusic\n+    /// let mut v = [0xD834, 0xDD1E, 0x006d, 0x0075,\n+    ///              0x0073, 0x0069, 0x0063];\n+    /// assert_eq!(String::from_utf16(v), Some(\"\u00f0\u009d\u201e\u017emusic\".to_string()));\n+    ///\n+    /// // \u00f0\u009d\u201e\u017emu<invalid>ic\n+    /// v[4] = 0xD800;\n+    /// assert_eq!(String::from_utf16(v), None);\n+    /// ```\n+    pub fn from_utf16(v: &[u16]) -> Option<String> {\n+        let mut s = String::with_capacity(v.len() / 2);\n+        for c in str::utf16_items(v) {\n+            match c {\n+                str::ScalarValue(c) => s.push_char(c),\n+                str::LoneSurrogate(_) => return None\n+            }\n+        }\n+        Some(s)\n+    }\n \n     /// Convert a vector of chars to a string\n     ///"}, {"sha": "0f8fa2618027fa02d7d7354cd6c0faec5217dc65", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602", "patch": "@@ -378,7 +378,7 @@ pub fn readdir(p: &CString) -> IoResult<Vec<CString>> {\n                 } else {\n                     let fp_vec = vec::raw::from_buf(fp_buf, libc::wcslen(fp_buf) as uint);\n                     let fp_trimmed = str::truncate_utf16_at_nul(fp_vec.as_slice());\n-                    let fp_str = str::from_utf16(fp_trimmed)\n+                    let fp_str = String::from_utf16(fp_trimmed)\n                             .expect(\"rust_list_dir_wfd_fp_buf returned invalid UTF-16\");\n                     paths.push(Path::new(fp_str));\n                 }"}, {"sha": "a221dd5b376b60645686b652e8581d6a89d1ffb9", "filename": "src/libstd/os.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=6ac4fc7fc2fb48599dbba55fcea5cfc1e6cd4602", "patch": "@@ -137,7 +137,7 @@ pub fn getcwd() -> Path {\n             fail!();\n         }\n     }\n-    Path::new(str::from_utf16(str::truncate_utf16_at_nul(buf))\n+    Path::new(String::from_utf16(str::truncate_utf16_at_nul(buf))\n               .expect(\"GetCurrentDirectoryW returned invalid UTF-16\"))\n }\n \n@@ -180,7 +180,7 @@ pub mod win32 {\n                     // We want to explicitly catch the case when the\n                     // closure returned invalid UTF-16, rather than\n                     // set `res` to None and continue.\n-                    let s = str::from_utf16(sub)\n+                    let s = String::from_utf16(sub)\n                         .expect(\"fill_utf16_buf_and_decode: closure created invalid UTF-16\");\n                     res = option::Some(s)\n                 }\n@@ -1050,7 +1050,7 @@ pub fn error_string(errnum: uint) -> String {\n                 return format!(\"OS Error {} (FormatMessageW() returned error {})\", errnum, fm_err);\n             }\n \n-            let msg = str::from_utf16(str::truncate_utf16_at_nul(buf));\n+            let msg = String::from_utf16(str::truncate_utf16_at_nul(buf));\n             match msg {\n                 Some(msg) => format!(\"OS Error {}: {}\", errnum, msg),\n                 None => format!(\"OS Error {} (FormatMessageW() returned invalid UTF-16)\", errnum),\n@@ -1207,7 +1207,7 @@ fn real_args() -> Vec<String> {\n \n         // Push it onto the list.\n         let opt_s = slice::raw::buf_as_slice(ptr as *const _, len, |buf| {\n-            str::from_utf16(str::truncate_utf16_at_nul(buf))\n+            String::from_utf16(str::truncate_utf16_at_nul(buf))\n         });\n         opt_s.expect(\"CommandLineToArgvW returned invalid UTF-16\")\n     });"}]}