{"sha": "e53e9b9e63be157efeac9212dc05b3e9c8d0fd19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1M2U5YjllNjNiZTE1N2VmZWFjOTIxMmRjMDViM2U5YzhkMGZkMTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-28T13:27:50Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-28T13:27:50Z"}, "message": "Deduplicate writing null case of struct wrapped nullable pointers", "tree": {"sha": "c73af0460e0d80312849022b055be8d248500391", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c73af0460e0d80312849022b055be8d248500391"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e53e9b9e63be157efeac9212dc05b3e9c8d0fd19", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmkGnAACgkQpp+NIls6\n19k0/hAAqqbqY6dGqbAhLi2krSJU4PBEZ+7v2v2/rf4xA4z8AduWMSZ+Xtdgs7uu\nEAGlZSUri28F9shjkvLHxpfU/NiBgva0HLkmDSUgQ8wT2lAkdG16Ef/qBghA/EbG\nNC1PDcaolgoM2YGww8npMsZZ22LL9ublkAgDtSABQMhJzLUHJ1W4a95vRAF/Dxp+\nmmM9CEm9+rYXBCysnsSoTm2aVasraGjDM75ucccSYLIIgwsqnyhM6dozTK+7bPWM\nGIB2On0fjKXI0MWUZDcng9oPf7S3oRjBZhA1p/vdD+pxUqSFZes/PUXhmBK6NI4x\nMmjQ83EwuDrN52G1p49lmC13u6SJPiMYCZRf0tJy3NoJp9VfL7L7An495VCKq+67\npC1dD+MnUtzSzw1Xk3Mf/V+grMUGizQZKjyK4vwJb8bDto0TJ78l5zB9LdMbiXbs\n17rjDB5vVVcSYEyZEHnkAvDtbEpwkh0ElbBtPVfA1xixVmjdTKOI4vG09ZOV+MVS\nVZmkm6ptoyL6ny7TuXPlCVFxfoHUdEcwPhifErA0btbQ3KRIYKpy7CTpn1R324mK\na8flLBvRPgbYCR/xNNyS87AmHKrStUDOFpI/nbQEOhs+sdCRjZZFGMyFI7q933lu\nMz/0+OVlGETu+U8+UIzvummjBTbTiJJpXx28GiWtW8+48peiIBA=\n=cS9y\n-----END PGP SIGNATURE-----", "payload": "tree c73af0460e0d80312849022b055be8d248500391\nparent 3464401576f707ff6cfb71bf15da6a95088e54e5\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503926870 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503926870 +0200\n\nDeduplicate writing null case of struct wrapped nullable pointers\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e53e9b9e63be157efeac9212dc05b3e9c8d0fd19", "html_url": "https://github.com/rust-lang/rust/commit/e53e9b9e63be157efeac9212dc05b3e9c8d0fd19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e53e9b9e63be157efeac9212dc05b3e9c8d0fd19/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3464401576f707ff6cfb71bf15da6a95088e54e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3464401576f707ff6cfb71bf15da6a95088e54e5", "html_url": "https://github.com/rust-lang/rust/commit/3464401576f707ff6cfb71bf15da6a95088e54e5"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "39ead337906f88d4dee25f128b49d2d0ba45c5fa", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e53e9b9e63be157efeac9212dc05b3e9c8d0fd19/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53e9b9e63be157efeac9212dc05b3e9c8d0fd19/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=e53e9b9e63be157efeac9212dc05b3e9c8d0fd19", "patch": "@@ -767,25 +767,11 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                                     let operand_ty = self.operand_ty(operand);\n                                     assert_eq!(self.type_size(operand_ty)?, Some(0));\n                                 }\n-                                let (offset, TyAndPacked { ty, packed: _ }) =\n-                                    self.nonnull_offset_and_ty(\n-                                        dest_ty,\n-                                        nndiscr,\n-                                        discrfield_source,\n-                                    )?;\n-                                // TODO: The packed flag is ignored\n-\n-                                // FIXME(solson)\n-                                let dest = self.force_allocation(dest)?.to_ptr()?;\n-\n-                                let dest = dest.offset(offset.bytes(), &self)?;\n-                                let dest_size = self.type_size(ty)?.expect(\n-                                    \"bad StructWrappedNullablePointer discrfield\",\n-                                );\n-                                self.memory.write_maybe_aligned_mut(\n-                                    !nonnull.packed,\n-                                    // The sign does not matter for 0\n-                                    |mem| mem.write_primval(dest, PrimVal::Bytes(0), dest_size, false),\n+                                self.write_struct_wrapped_null_pointer(\n+                                    dest_ty,\n+                                    nndiscr,\n+                                    discrfield_source,\n+                                    dest,\n                                 )?;\n                             }\n                         } else {\n@@ -1021,6 +1007,33 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         Ok(())\n     }\n \n+    pub(crate) fn write_struct_wrapped_null_pointer(\n+        &mut self,\n+        dest_ty: ty::Ty<'tcx>,\n+        nndiscr: u64,\n+        discrfield_source: &layout::FieldPath,\n+        dest: Lvalue,\n+    ) -> EvalResult<'tcx> {\n+        let (offset, TyAndPacked { ty, packed }) = self.nonnull_offset_and_ty(\n+            dest_ty,\n+            nndiscr,\n+            discrfield_source,\n+        )?;\n+        let nonnull = self.force_allocation(dest)?.to_ptr()?.offset(\n+            offset.bytes(),\n+            &self,\n+        )?;\n+        trace!(\"struct wrapped nullable pointer type: {}\", ty);\n+        // only the pointer part of a fat pointer is used for this space optimization\n+        let discr_size = self.type_size(ty)?.expect(\n+            \"bad StructWrappedNullablePointer discrfield\",\n+        );\n+        self.memory.write_maybe_aligned_mut(!packed, |mem| {\n+            // We're writing 0, signedness does not matter\n+            mem.write_primval(nonnull, PrimVal::Bytes(0), discr_size, false)\n+        })\n+    }\n+\n     pub(super) fn type_is_fat_ptr(&self, ty: Ty<'tcx>) -> bool {\n         match ty.sty {\n             ty::TyRawPtr(ref tam) |"}, {"sha": "ea90e39489d5e3e9f8a77288e9e355443848e34e", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e53e9b9e63be157efeac9212dc05b3e9c8d0fd19/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53e9b9e63be157efeac9212dc05b3e9c8d0fd19/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=e53e9b9e63be157efeac9212dc05b3e9c8d0fd19", "patch": "@@ -11,8 +11,8 @@ use rustc::ty;\n use rustc::ty::layout::Layout;\n use rustc::ty::subst::Substs;\n \n-use super::{EvalResult, EvalContext, StackPopCleanup, TyAndPacked, PtrAndAlign, GlobalId, Lvalue,\n-            HasMemory, MemoryKind, Machine, PrimVal};\n+use super::{EvalResult, EvalContext, StackPopCleanup, PtrAndAlign, GlobalId, Lvalue,\n+            MemoryKind, Machine, PrimVal};\n \n use syntax::codemap::Span;\n use syntax::ast::Mutability;\n@@ -125,26 +125,13 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                         ref discrfield_source,\n                         ..\n                     } => {\n-                        // TODO: There's some duplication between here and eval_rvalue_into_lvalue\n                         if variant_index as u64 != nndiscr {\n-                            let (offset, TyAndPacked { ty, packed }) = self.nonnull_offset_and_ty(\n+                            self.write_struct_wrapped_null_pointer(\n                                 dest_ty,\n                                 nndiscr,\n                                 discrfield_source,\n+                                dest,\n                             )?;\n-                            let nonnull = self.force_allocation(dest)?.to_ptr()?.offset(\n-                                offset.bytes(),\n-                                &self,\n-                            )?;\n-                            trace!(\"struct wrapped nullable pointer type: {}\", ty);\n-                            // only the pointer part of a fat pointer is used for this space optimization\n-                            let discr_size = self.type_size(ty)?.expect(\n-                                \"bad StructWrappedNullablePointer discrfield\",\n-                            );\n-                            self.write_maybe_aligned_mut(!packed, |ectx| {\n-                                // We're writing 0, signedness does not matter\n-                                ectx.memory.write_primval(nonnull, PrimVal::Bytes(0), discr_size, false)\n-                            })?;\n                         }\n                     }\n "}]}