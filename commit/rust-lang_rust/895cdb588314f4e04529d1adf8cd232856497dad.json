{"sha": "895cdb588314f4e04529d1adf8cd232856497dad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NWNkYjU4ODMxNGY0ZTA0NTI5ZDFhZGY4Y2QyMzI4NTY0OTdkYWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-06T16:50:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-06T16:50:01Z"}, "message": "Merge #3034\n\n3034: Remove ImportLocator hack r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6466cb45c30478eb0c413c25cc6d07cf23d39d3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6466cb45c30478eb0c413c25cc6d07cf23d39d3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/895cdb588314f4e04529d1adf8cd232856497dad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJePEO5CRBK7hj4Ov3rIwAAdHIIACbPuVmk+Yx3dt+YGGpVkefV\nOfOL4FGFekUZcQMVDx25td3DuYaItmQoU1uJzc72bgs+M3TPln1DMCGjDPvnoY3y\nf982H2Phd9WioggOy23Ey3uuUPZ90ZLaCaC/pRcL9IN/5s5Oa8adTLRHR/jBKpyR\nkjrL/0bWPujmgD0XBGnWvSUFcZCF5BVzt7Atpm9wAQvCRPh+49rN9N1VK7BkMyDK\nejsMHtd760FapMJ2+uObhaTocUc84dSGqBa0Ce7xQIiXGXXK5HbY1CwTxYg7T4Dc\nCUGsJHYdeq8QVt8g6Zdm7sZFm+WajjG2phqtBfdFyFF65JYkvPKbgMX2kB2aKbk=\n=g8bU\n-----END PGP SIGNATURE-----\n", "payload": "tree 6466cb45c30478eb0c413c25cc6d07cf23d39d3a\nparent 8b957caf83b18b3fea153f770bfd0ed979227eff\nparent d1e8b8d134da802eecef5cbcd5486bd542ad75b5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581007801 +0000\ncommitter GitHub <noreply@github.com> 1581007801 +0000\n\nMerge #3034\n\n3034: Remove ImportLocator hack r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/895cdb588314f4e04529d1adf8cd232856497dad", "html_url": "https://github.com/rust-lang/rust/commit/895cdb588314f4e04529d1adf8cd232856497dad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/895cdb588314f4e04529d1adf8cd232856497dad/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b957caf83b18b3fea153f770bfd0ed979227eff", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b957caf83b18b3fea153f770bfd0ed979227eff", "html_url": "https://github.com/rust-lang/rust/commit/8b957caf83b18b3fea153f770bfd0ed979227eff"}, {"sha": "d1e8b8d134da802eecef5cbcd5486bd542ad75b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e8b8d134da802eecef5cbcd5486bd542ad75b5", "html_url": "https://github.com/rust-lang/rust/commit/d1e8b8d134da802eecef5cbcd5486bd542ad75b5"}], "stats": {"total": 482, "additions": 132, "deletions": 350}, "files": [{"sha": "e29ff898d715a1ccbac8b79fe03444124b9920f0", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -963,6 +963,7 @@ dependencies = [\n  \"ra_db\",\n  \"ra_fmt\",\n  \"ra_hir\",\n+ \"ra_ide_db\",\n  \"ra_prof\",\n  \"ra_syntax\",\n  \"ra_text_edit\",\n@@ -1165,7 +1166,6 @@ dependencies = [\n  \"log\",\n  \"once_cell\",\n  \"proptest\",\n- \"ra_assists\",\n  \"ra_cfg\",\n  \"ra_db\",\n  \"ra_fmt\","}, {"sha": "6973038d4e99dc3c8551d8f140646a54d331340e", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -18,5 +18,6 @@ ra_text_edit = { path = \"../ra_text_edit\" }\n ra_fmt = { path = \"../ra_fmt\" }\n ra_prof = { path = \"../ra_prof\" }\n ra_db = { path = \"../ra_db\" }\n+ra_ide_db = { path = \"../ra_ide_db\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "f32072dbdb6097f370ccfc0ddf70a4636a2d35ee", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,8 +1,9 @@\n //! This module defines `AssistCtx` -- the API surface that is exposed to assists.\n use either::Either;\n-use hir::{db::HirDatabase, InFile, SourceAnalyzer, SourceBinder};\n-use ra_db::FileRange;\n+use hir::{InFile, SourceAnalyzer, SourceBinder};\n+use ra_db::{FileRange, SourceDatabase};\n use ra_fmt::{leading_indent, reindent};\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::{self, find_covering_element, find_node_at_offset},\n     AstNode, SourceFile, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken, TextRange, TextUnit,\n@@ -49,14 +50,14 @@ pub(crate) enum Assist {\n /// moment, because the LSP API is pretty awkward in this place, and it's much\n /// easier to just compute the edit eagerly :-)\n #[derive(Debug)]\n-pub(crate) struct AssistCtx<'a, DB> {\n-    pub(crate) db: &'a DB,\n+pub(crate) struct AssistCtx<'a> {\n+    pub(crate) db: &'a RootDatabase,\n     pub(crate) frange: FileRange,\n     source_file: SourceFile,\n     should_compute_edit: bool,\n }\n \n-impl<'a, DB> Clone for AssistCtx<'a, DB> {\n+impl<'a> Clone for AssistCtx<'a> {\n     fn clone(&self) -> Self {\n         AssistCtx {\n             db: self.db,\n@@ -67,17 +68,24 @@ impl<'a, DB> Clone for AssistCtx<'a, DB> {\n     }\n }\n \n-impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n-    pub(crate) fn with_ctx<F, T>(db: &DB, frange: FileRange, should_compute_edit: bool, f: F) -> T\n+impl<'a> AssistCtx<'a> {\n+    pub(crate) fn with_ctx<F, T>(\n+        db: &RootDatabase,\n+        frange: FileRange,\n+        should_compute_edit: bool,\n+        f: F,\n+    ) -> T\n     where\n-        F: FnOnce(AssistCtx<DB>) -> T,\n+        F: FnOnce(AssistCtx) -> T,\n     {\n         let parse = db.parse(frange.file_id);\n \n         let ctx = AssistCtx { db, frange, source_file: parse.tree(), should_compute_edit };\n         f(ctx)\n     }\n+}\n \n+impl<'a> AssistCtx<'a> {\n     pub(crate) fn add_assist(\n         self,\n         id: AssistId,\n@@ -141,7 +149,7 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n     pub(crate) fn covering_element(&self) -> SyntaxElement {\n         find_covering_element(self.source_file.syntax(), self.frange.range)\n     }\n-    pub(crate) fn source_binder(&self) -> SourceBinder<'a, DB> {\n+    pub(crate) fn source_binder(&self) -> SourceBinder<'a, RootDatabase> {\n         SourceBinder::new(self.db)\n     }\n     pub(crate) fn source_analyzer("}, {"sha": "7fdd816bf82e9af08f0542ab2e94d8bef7b31679", "filename": "crates/ra_assists/src/assists/add_custom_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use crate::{Assist, AssistCtx, AssistId};\n-use hir::db::HirDatabase;\n+\n use join_to_string::join;\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -29,7 +29,7 @@ const DERIVE_TRAIT: &str = \"derive\";\n //\n // }\n // ```\n-pub(crate) fn add_custom_impl(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n     let input = ctx.find_node_at_offset::<ast::AttrInput>()?;\n     let attr = input.syntax().parent().and_then(ast::Attr::cast)?;\n "}, {"sha": "b0d1a0a80dbafde6aafe55d2073a147a4c5b0dc5", "filename": "crates/ra_assists/src/assists/add_derive.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner},\n     SyntaxKind::{COMMENT, WHITESPACE},\n@@ -25,7 +24,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     y: u32,\n // }\n // ```\n-pub(crate) fn add_derive(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_derive(ctx: AssistCtx) -> Option<Assist> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n     ctx.add_assist(AssistId(\"add_derive\"), \"Add `#[derive]`\", |edit| {"}, {"sha": "2cb9d2f48ebf4e0b5527e0767b338a711641f896", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,4 +1,4 @@\n-use hir::{db::HirDatabase, HirDisplay};\n+use hir::HirDisplay;\n use ra_syntax::{\n     ast::{self, AstNode, LetStmt, NameOwner, TypeAscriptionOwner},\n     TextRange,\n@@ -21,7 +21,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     let x: i32 = 92;\n // }\n // ```\n-pub(crate) fn add_explicit_type(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_explicit_type(ctx: AssistCtx) -> Option<Assist> {\n     let stmt = ctx.find_node_at_offset::<LetStmt>()?;\n     let expr = stmt.initializer()?;\n     let pat = stmt.pat()?;"}, {"sha": "241b085fd2265648c6e098ea26d94b8e90c3bf55", "filename": "crates/ra_assists/src/assists/add_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,5 +1,5 @@\n use format_buf::format;\n-use hir::db::HirDatabase;\n+\n use join_to_string::join;\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner, TypeParamsOwner},\n@@ -27,7 +27,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //\n // }\n // ```\n-pub(crate) fn add_impl(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_impl(ctx: AssistCtx) -> Option<Assist> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let name = nominal.name()?;\n     ctx.add_assist(AssistId(\"add_impl\"), format!(\"Implement {}\", name.text().as_str()), |edit| {"}, {"sha": "f03dddac8fcf8355692e5b626b0d02f51384023e", "filename": "crates/ra_assists/src/assists/add_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,4 +1,4 @@\n-use hir::{self, db::HirDatabase, ModPath};\n+use hir::{self, ModPath};\n use ra_syntax::{\n     ast::{self, NameOwner},\n     AstNode, Direction, SmolStr,\n@@ -50,7 +50,7 @@ pub fn auto_import_text_edit(\n //\n // fn process(map: HashMap<String, String>) {}\n // ```\n-pub(crate) fn add_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_import(ctx: AssistCtx) -> Option<Assist> {\n     let path: ast::Path = ctx.find_node_at_offset()?;\n     // We don't want to mess with use statements\n     if path.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {"}, {"sha": "448697d3151749f9d5c98eb33744373a8206a939", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -43,7 +43,7 @@ enum AddMissingImplMembersMode {\n //\n // }\n // ```\n-pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_missing_impl_members(ctx: AssistCtx) -> Option<Assist> {\n     add_missing_impl_members_inner(\n         ctx,\n         AddMissingImplMembersMode::NoDefaultMethods,\n@@ -84,7 +84,7 @@ pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Opti\n //\n // }\n // ```\n-pub(crate) fn add_missing_default_members(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_missing_default_members(ctx: AssistCtx) -> Option<Assist> {\n     add_missing_impl_members_inner(\n         ctx,\n         AddMissingImplMembersMode::DefaultMethodsOnly,\n@@ -94,7 +94,7 @@ pub(crate) fn add_missing_default_members(ctx: AssistCtx<impl HirDatabase>) -> O\n }\n \n fn add_missing_impl_members_inner(\n-    ctx: AssistCtx<impl HirDatabase>,\n+    ctx: AssistCtx,\n     mode: AddMissingImplMembersMode,\n     assist_id: &'static str,\n     label: &'static str,"}, {"sha": "a08639311f4be5b941b01fa93d3e330b6902c4af", "filename": "crates/ra_assists/src/assists/add_new.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,5 +1,5 @@\n use format_buf::format;\n-use hir::{db::HirDatabase, InFile};\n+use hir::InFile;\n use join_to_string::join;\n use ra_syntax::{\n     ast::{\n@@ -31,7 +31,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // }\n //\n // ```\n-pub(crate) fn add_new(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_new(ctx: AssistCtx) -> Option<Assist> {\n     let strukt = ctx.find_node_at_offset::<ast::StructDef>()?;\n \n     // We want to only apply this to non-union structs with named fields\n@@ -128,10 +128,7 @@ fn generate_impl_text(strukt: &ast::StructDef, code: &str) -> String {\n //\n // FIXME: change the new fn checking to a more semantic approach when that's more\n // viable (e.g. we process proc macros, etc)\n-fn find_struct_impl(\n-    ctx: &AssistCtx<impl HirDatabase>,\n-    strukt: &ast::StructDef,\n-) -> Option<Option<ast::ImplBlock>> {\n+fn find_struct_impl(ctx: &AssistCtx, strukt: &ast::StructDef) -> Option<Option<ast::ImplBlock>> {\n     let db = ctx.db;\n     let module = strukt.syntax().ancestors().find(|node| {\n         ast::Module::can_cast(node.kind()) || ast::SourceFile::can_cast(node.kind())"}, {"sha": "dac6280ad82a00c4d838e4c0d66f7689f35a3ae6", "filename": "crates/ra_assists/src/assists/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,5 +1,4 @@\n use super::invert_if::invert_boolean_expression;\n-use hir::db::HirDatabase;\n use ra_syntax::ast::{self, AstNode};\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -23,7 +22,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     if !(x == 4 && y) {}\n // }\n // ```\n-pub(crate) fn apply_demorgan(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn apply_demorgan(ctx: AssistCtx) -> Option<Assist> {\n     let expr = ctx.find_node_at_offset::<ast::BinExpr>()?;\n     let op = expr.op_kind()?;\n     let op_range = expr.op_token()?.text_range();"}, {"sha": "21905106325bc489e749e0e7ee7b673265b71dc6", "filename": "crates/ra_assists/src/assists/auto_import.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,13 +1,14 @@\n-use hir::{db::HirDatabase, ModPath};\n+use hir::ModPath;\n use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxNode,\n };\n \n use crate::{\n     assist_ctx::{ActionBuilder, Assist, AssistCtx},\n-    auto_import_text_edit, AssistId, ImportsLocator,\n+    auto_import_text_edit, AssistId,\n };\n+use ra_ide_db::imports_locator::ImportsLocatorIde;\n \n // Assist: auto_import\n //\n@@ -26,10 +27,7 @@ use crate::{\n //     let map = HashMap<|>::new();\n // }\n // ```\n-pub(crate) fn auto_import<F: ImportsLocator>(\n-    ctx: AssistCtx<impl HirDatabase>,\n-    imports_locator: &mut F,\n-) -> Option<Assist> {\n+pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n     let path_to_import: ast::Path = ctx.find_node_at_offset()?;\n     let path_to_import_syntax = path_to_import.syntax();\n     if path_to_import_syntax.ancestors().find_map(ast::UseItem::cast).is_some() {\n@@ -52,6 +50,8 @@ pub(crate) fn auto_import<F: ImportsLocator>(\n         return None;\n     }\n \n+    let mut imports_locator = ImportsLocatorIde::new(ctx.db);\n+\n     let proposed_imports = imports_locator\n         .find_imports(&name_to_import)\n         .into_iter()\n@@ -81,16 +81,12 @@ fn import_to_action(import: ModPath, position: &SyntaxNode, anchor: &SyntaxNode)\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{\n-        check_assist_with_imports_locator, check_assist_with_imports_locator_not_applicable,\n-        TestImportsLocator,\n-    };\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n \n     #[test]\n     fn applicable_when_found_an_import() {\n-        check_assist_with_imports_locator(\n+        check_assist(\n             auto_import,\n-            TestImportsLocator::new,\n             r\"\n             <|>PubStruct\n \n@@ -112,9 +108,8 @@ mod tests {\n \n     #[test]\n     fn auto_imports_are_merged() {\n-        check_assist_with_imports_locator(\n+        check_assist(\n             auto_import,\n-            TestImportsLocator::new,\n             r\"\n             use PubMod::PubStruct1;\n \n@@ -148,9 +143,8 @@ mod tests {\n \n     #[test]\n     fn applicable_when_found_multiple_imports() {\n-        check_assist_with_imports_locator(\n+        check_assist(\n             auto_import,\n-            TestImportsLocator::new,\n             r\"\n             PubSt<|>ruct\n \n@@ -184,9 +178,8 @@ mod tests {\n \n     #[test]\n     fn not_applicable_for_already_imported_types() {\n-        check_assist_with_imports_locator_not_applicable(\n+        check_assist_not_applicable(\n             auto_import,\n-            TestImportsLocator::new,\n             r\"\n             use PubMod::PubStruct;\n \n@@ -201,9 +194,8 @@ mod tests {\n \n     #[test]\n     fn not_applicable_for_types_with_private_paths() {\n-        check_assist_with_imports_locator_not_applicable(\n+        check_assist_not_applicable(\n             auto_import,\n-            TestImportsLocator::new,\n             r\"\n             PrivateStruct<|>\n \n@@ -216,19 +208,17 @@ mod tests {\n \n     #[test]\n     fn not_applicable_when_no_imports_found() {\n-        check_assist_with_imports_locator_not_applicable(\n+        check_assist_not_applicable(\n             auto_import,\n-            TestImportsLocator::new,\n             \"\n             PubStruct<|>\",\n         );\n     }\n \n     #[test]\n     fn not_applicable_in_import_statements() {\n-        check_assist_with_imports_locator_not_applicable(\n+        check_assist_not_applicable(\n             auto_import,\n-            TestImportsLocator::new,\n             r\"\n             use PubStruct<|>;\n \n@@ -240,9 +230,8 @@ mod tests {\n \n     #[test]\n     fn function_import() {\n-        check_assist_with_imports_locator(\n+        check_assist(\n             auto_import,\n-            TestImportsLocator::new,\n             r\"\n             test_function<|>\n "}, {"sha": "f325b6f9225bf92290255b228bbee215d76ed932", "filename": "crates/ra_assists/src/assists/change_visibility.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, NameOwner, VisibilityOwner},\n     AstNode,\n@@ -22,14 +21,14 @@ use crate::{Assist, AssistCtx, AssistId};\n // ```\n // pub(crate) fn frobnicate() {}\n // ```\n-pub(crate) fn change_visibility(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn change_visibility(ctx: AssistCtx) -> Option<Assist> {\n     if let Some(vis) = ctx.find_node_at_offset::<ast::Visibility>() {\n         return change_vis(ctx, vis);\n     }\n     add_vis(ctx)\n }\n \n-fn add_vis(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+fn add_vis(ctx: AssistCtx) -> Option<Assist> {\n     let item_keyword = ctx.token_at_offset().find(|leaf| match leaf.kind() {\n         T![fn] | T![mod] | T![struct] | T![enum] | T![trait] => true,\n         _ => false,\n@@ -75,7 +74,7 @@ fn vis_offset(node: &SyntaxNode) -> TextUnit {\n         .unwrap_or_else(|| node.text_range().start())\n }\n \n-fn change_vis(ctx: AssistCtx<impl HirDatabase>, vis: ast::Visibility) -> Option<Assist> {\n+fn change_vis(ctx: AssistCtx, vis: ast::Visibility) -> Option<Assist> {\n     if vis.syntax().text() == \"pub\" {\n         return ctx.add_assist(\n             AssistId(\"change_visibility\"),"}, {"sha": "7d510b05526e0ca38492d1bbe426e17d7e48a803", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,6 +1,5 @@\n use std::{iter::once, ops::RangeInclusive};\n \n-use hir::db::HirDatabase;\n use ra_syntax::{\n     algo::replace_children,\n     ast::{self, edit::IndentLevel, make, Block, Pat::TupleStructPat},\n@@ -36,7 +35,7 @@ use crate::{\n //     bar();\n // }\n // ```\n-pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n     let if_expr: ast::IfExpr = ctx.find_node_at_offset()?;\n     if if_expr.else_branch().is_some() {\n         return None;"}, {"sha": "0908fc2469f70217e28d1ff3f7f5f708048cbbea", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -31,7 +31,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     }\n // }\n // ```\n-pub(crate) fn fill_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn fill_match_arms(ctx: AssistCtx) -> Option<Assist> {\n     let match_expr = ctx.find_node_at_offset::<ast::MatchExpr>()?;\n     let match_arm_list = match_expr.match_arm_list()?;\n "}, {"sha": "bfcc09e909779d08a9b5ff6578182e80a45e0d60", "filename": "crates/ra_assists/src/assists/flip_binexpr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::ast::{AstNode, BinExpr, BinOp};\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -18,7 +17,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     let _ = 2 + 90;\n // }\n // ```\n-pub(crate) fn flip_binexpr(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn flip_binexpr(ctx: AssistCtx) -> Option<Assist> {\n     let expr = ctx.find_node_at_offset::<BinExpr>()?;\n     let lhs = expr.lhs()?.syntax().clone();\n     let rhs = expr.rhs()?.syntax().clone();"}, {"sha": "1dacf29f834280f3f0c0197a21a76ad94cdf4c57", "filename": "crates/ra_assists/src/assists/flip_comma.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{algo::non_trivia_sibling, Direction, T};\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -18,7 +17,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     ((3, 4), (1, 2));\n // }\n // ```\n-pub(crate) fn flip_comma(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn flip_comma(ctx: AssistCtx) -> Option<Assist> {\n     let comma = ctx.find_token_at_offset(T![,])?;\n     let prev = non_trivia_sibling(comma.clone().into(), Direction::Prev)?;\n     let next = non_trivia_sibling(comma.clone().into(), Direction::Next)?;"}, {"sha": "f56769624e7fcaf70b628648f77f7df47dff078f", "filename": "crates/ra_assists/src/assists/flip_trait_bound.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     algo::non_trivia_sibling,\n     ast::{self, AstNode},\n@@ -18,7 +17,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // ```\n // fn foo<T: Copy + Clone>() { }\n // ```\n-pub(crate) fn flip_trait_bound(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn flip_trait_bound(ctx: AssistCtx) -> Option<Assist> {\n     // We want to replicate the behavior of `flip_binexpr` by only suggesting\n     // the assist when the cursor is on a `+`\n     let plus = ctx.find_token_at_offset(T![+])?;"}, {"sha": "91b588243eb4f40ec82f71bc19b2f219639337a5", "filename": "crates/ra_assists/src/assists/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode, AstToken},\n     TextRange,\n@@ -23,7 +22,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     (1 + 2) * 4;\n // }\n // ```\n-pub(crate) fn inline_local_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n     let let_stmt = ctx.find_node_at_offset::<ast::LetStmt>()?;\n     let bind_pat = match let_stmt.pat()? {\n         ast::Pat::BindPat(pat) => pat,"}, {"sha": "7312ce6871e0e64ad54200a597c6c1aa8656b922", "filename": "crates/ra_assists/src/assists/introduce_variable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,5 +1,4 @@\n use format_buf::format;\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxKind::{\n@@ -28,7 +27,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     var_name * 4;\n // }\n // ```\n-pub(crate) fn introduce_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn introduce_variable(ctx: AssistCtx) -> Option<Assist> {\n     if ctx.frange.range.is_empty() {\n         return None;\n     }"}, {"sha": "694c3642c8d39949f26b3d85ebcc87426014ab3d", "filename": "crates/ra_assists/src/assists/invert_if.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::ast::{self, AstNode};\n use ra_syntax::T;\n \n@@ -23,7 +22,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // }\n // ```\n \n-pub(crate) fn invert_if(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn invert_if(ctx: AssistCtx) -> Option<Assist> {\n     let if_keyword = ctx.find_token_at_offset(T![if])?;\n     let expr = ast::IfExpr::cast(if_keyword.parent())?;\n     let if_range = if_keyword.text_range();"}, {"sha": "670614dd83df1b7aee8a717f62d30e0a3f5d3300", "filename": "crates/ra_assists/src/assists/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,6 +1,5 @@\n use std::iter::successors;\n \n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n     Direction, TextUnit,\n@@ -32,7 +31,7 @@ use crate::{Assist, AssistCtx, AssistId, TextRange};\n //     }\n // }\n // ```\n-pub(crate) fn merge_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn merge_match_arms(ctx: AssistCtx) -> Option<Assist> {\n     let current_arm = ctx.find_node_at_offset::<ast::MatchArm>()?;\n     // Don't try to handle arms with guards for now - can add support for this later\n     if current_arm.guard().is_some() {"}, {"sha": "90793b5fc3a16fbb89d593f3f7fc9267be7d6e85", "filename": "crates/ra_assists/src/assists/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, edit, make, AstNode, NameOwner, TypeBoundsOwner},\n     SyntaxElement,\n@@ -22,7 +21,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     f(x)\n // }\n // ```\n-pub(crate) fn move_bounds_to_where_clause(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn move_bounds_to_where_clause(ctx: AssistCtx) -> Option<Assist> {\n     let type_param_list = ctx.find_node_at_offset::<ast::TypeParamList>()?;\n \n     let mut type_params = type_param_list.type_params();"}, {"sha": "2b91ce7c4dc7836a9491f79da4419e2a4597900f", "filename": "crates/ra_assists/src/assists/move_guard.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast,\n     ast::{AstNode, AstToken, IfExpr, MatchArm},\n@@ -32,7 +31,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     }\n // }\n // ```\n-pub(crate) fn move_guard_to_arm_body(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn move_guard_to_arm_body(ctx: AssistCtx) -> Option<Assist> {\n     let match_arm = ctx.find_node_at_offset::<MatchArm>()?;\n     let guard = match_arm.guard()?;\n     let space_before_guard = guard.syntax().prev_sibling_or_token();\n@@ -89,7 +88,7 @@ pub(crate) fn move_guard_to_arm_body(ctx: AssistCtx<impl HirDatabase>) -> Option\n //     }\n // }\n // ```\n-pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx) -> Option<Assist> {\n     let match_arm: MatchArm = ctx.find_node_at_offset::<MatchArm>()?;\n     let last_match_pat = match_arm.pats().last()?;\n "}, {"sha": "2c0a1e12656de1b191ccdeb2358c10d780310d70", "filename": "crates/ra_assists/src/assists/raw_string.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast, AstToken,\n     SyntaxKind::{RAW_STRING, STRING},\n@@ -22,7 +21,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     r#\"Hello, World!\"#;\n // }\n // ```\n-pub(crate) fn make_raw_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn make_raw_string(ctx: AssistCtx) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(STRING).and_then(ast::String::cast)?;\n     let value = token.value()?;\n     ctx.add_assist(AssistId(\"make_raw_string\"), \"Rewrite as raw string\", |edit| {\n@@ -51,7 +50,7 @@ pub(crate) fn make_raw_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n //     \"Hello, \\\"World!\\\"\";\n // }\n // ```\n-pub(crate) fn make_usual_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn make_usual_string(ctx: AssistCtx) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING).and_then(ast::RawString::cast)?;\n     let value = token.value()?;\n     ctx.add_assist(AssistId(\"make_usual_string\"), \"Rewrite as regular string\", |edit| {\n@@ -77,7 +76,7 @@ pub(crate) fn make_usual_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assi\n //     r##\"Hello, World!\"##;\n // }\n // ```\n-pub(crate) fn add_hash(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_hash(ctx: AssistCtx) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n     ctx.add_assist(AssistId(\"add_hash\"), \"Add # to raw string\", |edit| {\n         edit.target(token.text_range());\n@@ -101,7 +100,7 @@ pub(crate) fn add_hash(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n //     r\"Hello, World!\";\n // }\n // ```\n-pub(crate) fn remove_hash(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn remove_hash(ctx: AssistCtx) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n     let text = token.text().as_str();\n     if text.starts_with(\"r\\\"\") {"}, {"sha": "5085649b42aaa05652f1cb76616d48c97f62db9f", "filename": "crates/ra_assists/src/assists/remove_dbg.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n     TextUnit, T,\n@@ -21,7 +20,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     92;\n // }\n // ```\n-pub(crate) fn remove_dbg(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn remove_dbg(ctx: AssistCtx) -> Option<Assist> {\n     let macro_call = ctx.find_node_at_offset::<ast::MacroCall>()?;\n \n     if !is_valid_macrocall(&macro_call, \"dbg\")? {"}, {"sha": "e6cd50bc1236ae3b6d6219b181442f0b7f61011f", "filename": "crates/ra_assists/src/assists/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_fmt::unwrap_trivial_block;\n use ra_syntax::{\n     ast::{self, make},\n@@ -34,7 +33,7 @@ use ast::edit::IndentLevel;\n //     }\n // }\n // ```\n-pub(crate) fn replace_if_let_with_match(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn replace_if_let_with_match(ctx: AssistCtx) -> Option<Assist> {\n     let if_expr: ast::IfExpr = ctx.find_node_at_offset()?;\n     let cond = if_expr.condition()?;\n     let pat = cond.pat()?;"}, {"sha": "2c3f07a79dff4489727dc4da325988a992f682f4", "filename": "crates/ra_assists/src/assists/split_import.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -1,6 +1,5 @@\n use std::iter::successors;\n \n-use hir::db::HirDatabase;\n use ra_syntax::{ast, AstNode, TextUnit, T};\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -16,7 +15,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // ```\n // use std::{collections::HashMap};\n // ```\n-pub(crate) fn split_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn split_import(ctx: AssistCtx) -> Option<Assist> {\n     let colon_colon = ctx.find_token_at_offset(T![::])?;\n     let path = ast::Path::cast(colon_colon.parent())?;\n     let top_path = successors(Some(path), |it| it.parent_path()).last()?;"}, {"sha": "370b642255a43f7605c9fd65f4f893f858fd422e", "filename": "crates/ra_assists/src/doc_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -8,15 +8,15 @@ mod generated;\n use ra_db::{fixture::WithFixture, FileRange};\n use test_utils::{assert_eq_text, extract_range_or_offset};\n \n-use crate::test_db::TestDB;\n+use ra_ide_db::RootDatabase;\n \n fn check(assist_id: &str, before: &str, after: &str) {\n     // FIXME we cannot get the imports search functionality here yet, but still need to generate a test and a doc for an assist\n     if assist_id == \"auto_import\" {\n         return;\n     }\n     let (selection, before) = extract_range_or_offset(before);\n-    let (db, file_id) = TestDB::with_single_file(&before);\n+    let (db, file_id) = RootDatabase::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n     let assist = crate::assists(&db, frange)"}, {"sha": "1343043ddf183b63cf77668006fc94cbf893b384", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 34, "deletions": 181, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -9,13 +9,11 @@ mod assist_ctx;\n mod marks;\n #[cfg(test)]\n mod doc_tests;\n-#[cfg(test)]\n-mod test_db;\n pub mod ast_transform;\n \n use either::Either;\n-use hir::{db::HirDatabase, ModuleDef};\n use ra_db::FileRange;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n \n@@ -61,10 +59,7 @@ impl ResolvedAssist {\n ///\n /// Assists are returned in the \"unresolved\" state, that is only labels are\n /// returned, without actual edits.\n-pub fn applicable_assists<H>(db: &H, range: FileRange) -> Vec<AssistLabel>\n-where\n-    H: HirDatabase + 'static,\n-{\n+pub fn applicable_assists(db: &RootDatabase, range: FileRange) -> Vec<AssistLabel> {\n     AssistCtx::with_ctx(db, range, false, |ctx| {\n         assists::all()\n             .iter()\n@@ -77,59 +72,11 @@ where\n     })\n }\n \n-/// A functionality for locating imports for the given name.\n-///\n-/// Currently has to be a trait with the real implementation provided by the ra_ide_api crate,\n-/// due to the search functionality located there.\n-/// Later, this trait should be removed completely and the search functionality moved to a separate crate,\n-/// accessible from the ra_assists crate.\n-pub trait ImportsLocator {\n-    /// Finds all imports for the given name and the module that contains this name.\n-    fn find_imports(&mut self, name_to_import: &str) -> Vec<ModuleDef>;\n-}\n-\n-/// Return all the assists applicable at the given position\n-/// and additional assists that need the imports locator functionality to work.\n-///\n-/// Assists are returned in the \"resolved\" state, that is with edit fully\n-/// computed.\n-pub fn assists_with_imports_locator<H, F>(\n-    db: &H,\n-    range: FileRange,\n-    mut imports_locator: F,\n-) -> Vec<ResolvedAssist>\n-where\n-    H: HirDatabase + 'static,\n-    F: ImportsLocator,\n-{\n-    AssistCtx::with_ctx(db, range, true, |ctx| {\n-        let mut assists = assists::all()\n-            .iter()\n-            .map(|f| f(ctx.clone()))\n-            .chain(\n-                assists::all_with_imports_locator()\n-                    .iter()\n-                    .map(|f| f(ctx.clone(), &mut imports_locator)),\n-            )\n-            .filter_map(std::convert::identity)\n-            .map(|a| match a {\n-                Assist::Resolved { assist } => assist,\n-                Assist::Unresolved { .. } => unreachable!(),\n-            })\n-            .collect();\n-        sort_assists(&mut assists);\n-        assists\n-    })\n-}\n-\n /// Return all the assists applicable at the given position.\n ///\n /// Assists are returned in the \"resolved\" state, that is with edit fully\n /// computed.\n-pub fn assists<H>(db: &H, range: FileRange) -> Vec<ResolvedAssist>\n-where\n-    H: HirDatabase + 'static,\n-{\n+pub fn assists(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssist> {\n     AssistCtx::with_ctx(db, range, true, |ctx| {\n         let mut a = assists::all()\n             .iter()\n@@ -155,8 +102,7 @@ fn sort_assists(assists: &mut Vec<ResolvedAssist>) {\n }\n \n mod assists {\n-    use crate::{Assist, AssistCtx, ImportsLocator};\n-    use hir::db::HirDatabase;\n+    use crate::{Assist, AssistCtx};\n \n     mod add_derive;\n     mod add_explicit_type;\n@@ -184,7 +130,7 @@ mod assists {\n     mod move_bounds;\n     mod early_return;\n \n-    pub(crate) fn all<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assist>] {\n+    pub(crate) fn all() -> &'static [fn(AssistCtx) -> Option<Assist>] {\n         &[\n             add_derive::add_derive,\n             add_explicit_type::add_explicit_type,\n@@ -215,79 +161,34 @@ mod assists {\n             raw_string::make_usual_string,\n             raw_string::remove_hash,\n             early_return::convert_to_guarded_return,\n+            auto_import::auto_import,\n         ]\n     }\n-\n-    pub(crate) fn all_with_imports_locator<'a, DB: HirDatabase, F: ImportsLocator>(\n-    ) -> &'a [fn(AssistCtx<DB>, &mut F) -> Option<Assist>] {\n-        &[auto_import::auto_import]\n-    }\n }\n \n #[cfg(test)]\n mod helpers {\n-    use hir::db::DefDatabase;\n-    use ra_db::{fixture::WithFixture, FileId, FileRange};\n-    use ra_syntax::TextRange;\n-    use test_utils::{add_cursor, assert_eq_text, extract_offset, extract_range};\n-\n-    use crate::{test_db::TestDB, Assist, AssistCtx, ImportsLocator};\n     use std::sync::Arc;\n \n-    // FIXME remove the `ModuleDefId` reexport from `ra_hir` when this gets removed.\n-    pub(crate) struct TestImportsLocator {\n-        db: Arc<TestDB>,\n-        test_file_id: FileId,\n-    }\n-\n-    impl TestImportsLocator {\n-        pub(crate) fn new(db: Arc<TestDB>, test_file_id: FileId) -> Self {\n-            TestImportsLocator { db, test_file_id }\n-        }\n-    }\n+    use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n+    use ra_ide_db::{symbol_index::SymbolsDatabase, RootDatabase};\n+    use ra_syntax::TextRange;\n+    use test_utils::{add_cursor, assert_eq_text, extract_offset, extract_range};\n \n-    impl ImportsLocator for TestImportsLocator {\n-        fn find_imports(&mut self, name_to_import: &str) -> Vec<hir::ModuleDef> {\n-            let crate_def_map = self.db.crate_def_map(self.db.test_crate());\n-            let mut findings = Vec::new();\n-\n-            let mut module_ids_to_process =\n-                crate_def_map.modules_for_file(self.test_file_id).collect::<Vec<_>>();\n-\n-            while !module_ids_to_process.is_empty() {\n-                let mut more_ids_to_process = Vec::new();\n-                for local_module_id in module_ids_to_process.drain(..) {\n-                    for (name, namespace_data) in\n-                        crate_def_map[local_module_id].scope.entries_without_primitives()\n-                    {\n-                        let found_a_match = &name.to_string() == name_to_import;\n-                        vec![namespace_data.types, namespace_data.values]\n-                            .into_iter()\n-                            .filter_map(std::convert::identity)\n-                            .for_each(|(module_def_id, _)| {\n-                                if found_a_match {\n-                                    findings.push(module_def_id.into());\n-                                }\n-                                if let hir::ModuleDefId::ModuleId(module_id) = module_def_id {\n-                                    more_ids_to_process.push(module_id.local_id);\n-                                }\n-                            });\n-                    }\n-                }\n-                module_ids_to_process = more_ids_to_process;\n-            }\n+    use crate::{Assist, AssistCtx};\n \n-            findings\n-        }\n+    pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n+        let (mut db, file_id) = RootDatabase::with_single_file(text);\n+        // FIXME: ideally, this should be done by the above `RootDatabase::with_single_file`,\n+        // but it looks like this might need specialization? :(\n+        let local_roots = vec![db.file_source_root(file_id)];\n+        db.set_local_roots(Arc::new(local_roots));\n+        (db, file_id)\n     }\n \n-    pub(crate) fn check_assist(\n-        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n-        before: &str,\n-        after: &str,\n-    ) {\n+    pub(crate) fn check_assist(assist: fn(AssistCtx) -> Option<Assist>, before: &str, after: &str) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n@@ -309,45 +210,13 @@ mod helpers {\n         assert_eq_text!(after, &actual);\n     }\n \n-    pub(crate) fn check_assist_with_imports_locator<F: ImportsLocator>(\n-        assist: fn(AssistCtx<TestDB>, &mut F) -> Option<Assist>,\n-        imports_locator_provider: fn(db: Arc<TestDB>, file_id: FileId) -> F,\n-        before: &str,\n-        after: &str,\n-    ) {\n-        let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n-        let db = Arc::new(db);\n-        let mut imports_locator = imports_locator_provider(Arc::clone(&db), file_id);\n-        let frange =\n-            FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n-        let assist =\n-            AssistCtx::with_ctx(db.as_ref(), frange, true, |ctx| assist(ctx, &mut imports_locator))\n-                .expect(\"code action is not applicable\");\n-        let action = match assist {\n-            Assist::Unresolved { .. } => unreachable!(),\n-            Assist::Resolved { assist } => assist.get_first_action(),\n-        };\n-\n-        let actual = action.edit.apply(&before);\n-        let actual_cursor_pos = match action.cursor_position {\n-            None => action\n-                .edit\n-                .apply_to_offset(before_cursor_pos)\n-                .expect(\"cursor position is affected by the edit\"),\n-            Some(off) => off,\n-        };\n-        let actual = add_cursor(&actual, actual_cursor_pos);\n-        assert_eq_text!(after, &actual);\n-    }\n-\n     pub(crate) fn check_assist_range(\n-        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n+        assist: fn(AssistCtx) -> Option<Assist>,\n         before: &str,\n         after: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n@@ -364,12 +233,12 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_target(\n-        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n+        assist: fn(AssistCtx) -> Option<Assist>,\n         before: &str,\n         target: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n@@ -384,12 +253,12 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_range_target(\n-        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n+        assist: fn(AssistCtx) -> Option<Assist>,\n         before: &str,\n         target: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n@@ -403,39 +272,23 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_not_applicable(\n-        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n+        assist: fn(AssistCtx) -> Option<Assist>,\n         before: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n         assert!(assist.is_none());\n     }\n \n-    pub(crate) fn check_assist_with_imports_locator_not_applicable<F: ImportsLocator>(\n-        assist: fn(AssistCtx<TestDB>, &mut F) -> Option<Assist>,\n-        imports_locator_provider: fn(db: Arc<TestDB>, file_id: FileId) -> F,\n-        before: &str,\n-    ) {\n-        let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n-        let db = Arc::new(db);\n-        let mut imports_locator = imports_locator_provider(Arc::clone(&db), file_id);\n-        let frange =\n-            FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n-        let assist =\n-            AssistCtx::with_ctx(db.as_ref(), frange, true, |ctx| assist(ctx, &mut imports_locator));\n-        assert!(assist.is_none());\n-    }\n-\n     pub(crate) fn check_assist_range_not_applicable(\n-        assist: fn(AssistCtx<TestDB>) -> Option<Assist>,\n+        assist: fn(AssistCtx) -> Option<Assist>,\n         before: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n         assert!(assist.is_none());\n@@ -444,17 +297,17 @@ mod helpers {\n \n #[cfg(test)]\n mod tests {\n-    use ra_db::{fixture::WithFixture, FileRange};\n+    use ra_db::FileRange;\n     use ra_syntax::TextRange;\n     use test_utils::{extract_offset, extract_range};\n \n-    use crate::test_db::TestDB;\n+    use crate::helpers;\n \n     #[test]\n     fn assist_order_field_struct() {\n         let before = \"struct Foo { <|>bar: u32 }\";\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = helpers::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assists = super::assists(&db, frange);\n@@ -478,7 +331,7 @@ mod tests {\n             }\n         }\";\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = TestDB::with_single_file(&before);\n+        let (db, file_id) = helpers::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assists = super::assists(&db, frange);\n         let mut assists = assists.iter();"}, {"sha": "d5249f3088597a484f04f491bb26f2c66f3ba8af", "filename": "crates/ra_assists/src/test_db.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8b957caf83b18b3fea153f770bfd0ed979227eff/crates%2Fra_assists%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b957caf83b18b3fea153f770bfd0ed979227eff/crates%2Fra_assists%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftest_db.rs?ref=8b957caf83b18b3fea153f770bfd0ed979227eff", "patch": "@@ -1,45 +0,0 @@\n-//! Database used for testing `ra_assists`.\n-\n-use std::sync::Arc;\n-\n-use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath};\n-\n-#[salsa::database(\n-    ra_db::SourceDatabaseExtStorage,\n-    ra_db::SourceDatabaseStorage,\n-    hir::db::InternDatabaseStorage,\n-    hir::db::AstDatabaseStorage,\n-    hir::db::DefDatabaseStorage,\n-    hir::db::HirDatabaseStorage\n-)]\n-#[derive(Debug, Default)]\n-pub struct TestDB {\n-    runtime: salsa::Runtime<TestDB>,\n-}\n-\n-impl salsa::Database for TestDB {\n-    fn salsa_runtime(&self) -> &salsa::Runtime<Self> {\n-        &self.runtime\n-    }\n-    fn salsa_runtime_mut(&mut self) -> &mut salsa::Runtime<Self> {\n-        &mut self.runtime\n-    }\n-}\n-\n-impl std::panic::RefUnwindSafe for TestDB {}\n-\n-impl FileLoader for TestDB {\n-    fn file_text(&self, file_id: FileId) -> Arc<String> {\n-        FileLoaderDelegate(self).file_text(file_id)\n-    }\n-    fn resolve_relative_path(\n-        &self,\n-        anchor: FileId,\n-        relative_path: &RelativePath,\n-    ) -> Option<FileId> {\n-        FileLoaderDelegate(self).resolve_relative_path(anchor, relative_path)\n-    }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n-        FileLoaderDelegate(self).relevant_crates(file_id)\n-    }\n-}"}, {"sha": "c3b2c638b620ca6724e100b40bff07312d547f91", "filename": "crates/ra_ide/src/assists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_ide%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_ide%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fassists.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -3,7 +3,7 @@\n use either::Either;\n use ra_assists::{AssistAction, AssistLabel};\n use ra_db::{FilePosition, FileRange};\n-use ra_ide_db::{imports_locator::ImportsLocatorIde, RootDatabase};\n+use ra_ide_db::RootDatabase;\n \n use crate::{FileId, SourceChange, SourceFileEdit};\n \n@@ -17,7 +17,7 @@ pub struct Assist {\n }\n \n pub(crate) fn assists(db: &RootDatabase, frange: FileRange) -> Vec<Assist> {\n-    ra_assists::assists_with_imports_locator(db, frange, ImportsLocatorIde::new(db))\n+    ra_assists::assists(db, frange)\n         .into_iter()\n         .map(|assist| {\n             let file_id = frange.file_id;"}, {"sha": "716e88bc1bf0ea34a35117e383ee0714afb925ea", "filename": "crates/ra_ide_db/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_ide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_ide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2FCargo.toml?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -32,7 +32,6 @@ ra_cfg = { path = \"../ra_cfg\" }\n ra_fmt = { path = \"../ra_fmt\" }\n ra_prof = { path = \"../ra_prof\" }\n test_utils = { path = \"../test_utils\" }\n-ra_assists = { path = \"../ra_assists\" }\n \n # ra_ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`."}, {"sha": "7889067232a6298cafeb1c1e8973a4ed631fec9f", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -92,7 +92,7 @@ pub fn classify_name(\n             ast::FnDef(it) => {\n                 let src = name.with_value(it);\n                 let def: hir::Function = sb.to_def(src)?;\n-                if parent.parent().and_then(ast::ItemList::cast).is_some() {\n+                if parent.parent().and_then(ast::ItemList::cast).map_or(false, |it| it.syntax().parent().and_then(ast::Module::cast).is_none()) {\n                     Some(from_assoc_item(sb.db, def.into()))\n                 } else {\n                     Some(from_module_def(sb.db, def.into(), None))"}, {"sha": "d77fc53f3a3fccd95c8b6acd3723f618ca384e64", "filename": "crates/ra_ide_db/src/imports_locator.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895cdb588314f4e04529d1adf8cd232856497dad/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fimports_locator.rs?ref=895cdb588314f4e04529d1adf8cd232856497dad", "patch": "@@ -2,7 +2,6 @@\n //! Later, this should be moved away to a separate crate that is accessible from the ra_assists module.\n \n use hir::{db::HirDatabase, ModuleDef, SourceBinder};\n-use ra_assists::ImportsLocator;\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, SyntaxKind::NAME};\n \n@@ -22,29 +21,7 @@ impl<'a> ImportsLocatorIde<'a> {\n         Self { source_binder: SourceBinder::new(db) }\n     }\n \n-    fn get_name_definition(\n-        &mut self,\n-        db: &impl HirDatabase,\n-        import_candidate: &FileSymbol,\n-    ) -> Option<NameKind> {\n-        let _p = profile(\"get_name_definition\");\n-        let file_id = import_candidate.file_id.into();\n-        let candidate_node = import_candidate.ptr.to_node(&db.parse_or_expand(file_id)?);\n-        let candidate_name_node = if candidate_node.kind() != NAME {\n-            candidate_node.children().find(|it| it.kind() == NAME)?\n-        } else {\n-            candidate_node\n-        };\n-        classify_name(\n-            &mut self.source_binder,\n-            hir::InFile { file_id, value: &ast::Name::cast(candidate_name_node)? },\n-        )\n-        .map(|it| it.kind)\n-    }\n-}\n-\n-impl ImportsLocator for ImportsLocatorIde<'_> {\n-    fn find_imports(&mut self, name_to_import: &str) -> Vec<ModuleDef> {\n+    pub fn find_imports(&mut self, name_to_import: &str) -> Vec<ModuleDef> {\n         let _p = profile(\"search_for_imports\");\n         let db = self.source_binder.db;\n \n@@ -72,4 +49,24 @@ impl ImportsLocator for ImportsLocatorIde<'_> {\n             })\n             .collect()\n     }\n+\n+    fn get_name_definition(\n+        &mut self,\n+        db: &impl HirDatabase,\n+        import_candidate: &FileSymbol,\n+    ) -> Option<NameKind> {\n+        let _p = profile(\"get_name_definition\");\n+        let file_id = import_candidate.file_id.into();\n+        let candidate_node = import_candidate.ptr.to_node(&db.parse_or_expand(file_id)?);\n+        let candidate_name_node = if candidate_node.kind() != NAME {\n+            candidate_node.children().find(|it| it.kind() == NAME)?\n+        } else {\n+            candidate_node\n+        };\n+        classify_name(\n+            &mut self.source_binder,\n+            hir::InFile { file_id, value: &ast::Name::cast(candidate_name_node)? },\n+        )\n+        .map(|it| it.kind)\n+    }\n }"}]}