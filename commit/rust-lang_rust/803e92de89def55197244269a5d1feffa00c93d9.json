{"sha": "803e92de89def55197244269a5d1feffa00c93d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwM2U5MmRlODlkZWY1NTE5NzI0NDI2OWE1ZDFmZWZmYTAwYzkzZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-21T15:06:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-21T15:06:27Z"}, "message": "auto merge of #14326 : huonw/rust/tiny-fixes, r=pnkfelix\n\nThe changes to flowgraph make invalid invocations slightly more forgiving by (trying to) provide slightly more information and by avoiding the ICE message.", "tree": {"sha": "f50c772b8db38778835e7b05f203c2640c17aaae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f50c772b8db38778835e7b05f203c2640c17aaae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/803e92de89def55197244269a5d1feffa00c93d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/803e92de89def55197244269a5d1feffa00c93d9", "html_url": "https://github.com/rust-lang/rust/commit/803e92de89def55197244269a5d1feffa00c93d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/803e92de89def55197244269a5d1feffa00c93d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1edb0e536433056738b7f715dd02ff1de582f2ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/1edb0e536433056738b7f715dd02ff1de582f2ba", "html_url": "https://github.com/rust-lang/rust/commit/1edb0e536433056738b7f715dd02ff1de582f2ba"}, {"sha": "feb91f3216c7a60c9f7da582b3a02551fe73bb40", "url": "https://api.github.com/repos/rust-lang/rust/commits/feb91f3216c7a60c9f7da582b3a02551fe73bb40", "html_url": "https://github.com/rust-lang/rust/commit/feb91f3216c7a60c9f7da582b3a02551fe73bb40"}], "stats": {"total": 185, "additions": 101, "deletions": 84}, "files": [{"sha": "4cf33a777ad78c556cd1355704612a9af5317fb8", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/803e92de89def55197244269a5d1feffa00c93d9/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803e92de89def55197244269a5d1feffa00c93d9/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=803e92de89def55197244269a5d1feffa00c93d9", "patch": "@@ -70,7 +70,7 @@ pub struct Options {\n     pub gc: bool,\n     pub optimize: OptLevel,\n     pub debuginfo: DebugInfoLevel,\n-    pub lint_opts: Vec<(lint::Lint, lint::level)> ,\n+    pub lint_opts: Vec<(lint::Lint, lint::Level)> ,\n     pub output_types: Vec<back::link::OutputType> ,\n     // This was mutable for rustpkg, which updates search paths based on the\n     // parsed code. It remains mutable in case its replacements wants to use\n@@ -580,8 +580,8 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let no_trans = matches.opt_present(\"no-trans\");\n     let no_analysis = matches.opt_present(\"no-analysis\");\n \n-    let lint_levels = [lint::allow, lint::warn,\n-                       lint::deny, lint::forbid];\n+    let lint_levels = [lint::Allow, lint::Warn,\n+                       lint::Deny, lint::Forbid];\n     let mut lint_opts = Vec::new();\n     let lint_dict = lint::get_lint_dict();\n     for level in lint_levels.iter() {"}, {"sha": "f51735afaceac8b6a79e72b899ec56b8385e5613", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/803e92de89def55197244269a5d1feffa00c93d9/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803e92de89def55197244269a5d1feffa00c93d9/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=803e92de89def55197244269a5d1feffa00c93d9", "patch": "@@ -226,7 +226,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     krate = time(time_passes, \"prelude injection\", krate, |krate|\n                  front::std_inject::maybe_inject_prelude(sess, krate));\n \n-    let (krate, map) = time(time_passes, \"assinging node ids and indexing ast\", krate, |krate|\n+    let (krate, map) = time(time_passes, \"assigning node ids and indexing ast\", krate, |krate|\n          front::assign_node_ids_and_map::assign_node_ids_and_map(sess, krate));\n \n     if sess.opts.debugging_opts & config::AST_JSON != 0 {\n@@ -653,11 +653,22 @@ pub fn pretty_print_input(sess: Session,\n         PpmFlowGraph(nodeid) => {\n             let ast_map = ast_map.expect(\"--pretty flowgraph missing ast_map\");\n             let node = ast_map.find(nodeid).unwrap_or_else(|| {\n-                fail!(\"--pretty flowgraph=id couldn't find id: {}\", id)\n+                sess.fatal(format_strbuf!(\"--pretty flowgraph couldn't find id: {}\",\n+                                          nodeid).as_slice())\n             });\n             let block = match node {\n                 syntax::ast_map::NodeBlock(block) => block,\n-                _ => fail!(\"--pretty=flowgraph needs block, got {:?}\", node)\n+                _ => {\n+                    let message = format_strbuf!(\"--pretty=flowgraph needs block, got {:?}\",\n+                                                 node);\n+\n+                    // point to what was found, if there's an\n+                    // accessible span.\n+                    match ast_map.opt_span(nodeid) {\n+                        Some(sp) => sess.span_fatal(sp, message.as_slice()),\n+                        None => sess.fatal(message.as_slice())\n+                    }\n+                }\n             };\n             let analysis = phase_3_run_analysis_passes(sess, &krate, ast_map);\n             print_flowgraph(analysis, block, out)\n@@ -846,4 +857,3 @@ pub fn build_output_filenames(input: &Input,\n         }\n     }\n }\n-"}, {"sha": "06d62c82ce1f2a0e0c38940adddd0edb84fc085a", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/803e92de89def55197244269a5d1feffa00c93d9/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803e92de89def55197244269a5d1feffa00c93d9/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=803e92de89def55197244269a5d1feffa00c93d9", "patch": "@@ -302,11 +302,12 @@ pub fn parse_pretty(sess: &Session, name: &str) -> PpMode {\n         (None, \"typed\")        => PpmTyped,\n         (None, \"expanded,identified\") => PpmExpandedIdentified,\n         (None, \"identified\")   => PpmIdentified,\n-        (Some(s), \"flowgraph\") => {\n-             match from_str(s) {\n+        (arg, \"flowgraph\") => {\n+             match arg.and_then(from_str) {\n                  Some(id) => PpmFlowGraph(id),\n-                 None => sess.fatal(format!(\"`pretty flowgraph=<nodeid>` needs \\\n-                                             an integer <nodeid>; got {}\", s))\n+                 None => sess.fatal(format_strbuf!(\"`pretty flowgraph=<nodeid>` needs \\\n+                                                     an integer <nodeid>; got {}\",\n+                                                   arg.unwrap_or(\"nothing\")).as_slice())\n              }\n         }\n         _ => {"}, {"sha": "5d26947bee3466ac6e571fbcbf7d88eca396ca65", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/803e92de89def55197244269a5d1feffa00c93d9/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803e92de89def55197244269a5d1feffa00c93d9/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=803e92de89def55197244269a5d1feffa00c93d9", "patch": "@@ -12,7 +12,7 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n-use middle::lint::{allow, contains_lint, DeadCode};\n+use middle::lint::{Allow, contains_lint, DeadCode};\n use middle::privacy;\n use middle::ty;\n use middle::typeck;\n@@ -195,7 +195,7 @@ impl<'a> Visitor<()> for MarkSymbolVisitor<'a> {\n }\n \n fn has_allow_dead_code_or_lang_attr(attrs: &[ast::Attribute]) -> bool {\n-    contains_lint(attrs, allow, DEAD_CODE_LINT_STR)\n+    contains_lint(attrs, Allow, DEAD_CODE_LINT_STR)\n     || attr::contains_name(attrs.as_slice(), \"lang\")\n }\n "}, {"sha": "d0b7eed6e0099465e4d5e45b91d2915f1abff1c4", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/803e92de89def55197244269a5d1feffa00c93d9/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803e92de89def55197244269a5d1feffa00c93d9/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=803e92de89def55197244269a5d1feffa00c93d9", "patch": "@@ -123,23 +123,23 @@ pub enum Lint {\n     RawPointerDeriving,\n }\n \n-pub fn level_to_str(lv: level) -> &'static str {\n+pub fn level_to_str(lv: Level) -> &'static str {\n     match lv {\n-      allow => \"allow\",\n-      warn => \"warn\",\n-      deny => \"deny\",\n-      forbid => \"forbid\"\n+      Allow => \"allow\",\n+      Warn => \"warn\",\n+      Deny => \"deny\",\n+      Forbid => \"forbid\"\n     }\n }\n \n #[deriving(Clone, Eq, Ord, TotalEq, TotalOrd)]\n-pub enum level {\n-    allow, warn, deny, forbid\n+pub enum Level {\n+    Allow, Warn, Deny, Forbid\n }\n \n #[deriving(Clone, Eq, Ord, TotalEq, TotalOrd)]\n pub struct LintSpec {\n-    pub default: level,\n+    pub default: Level,\n     pub lint: Lint,\n     pub desc: &'static str,\n }\n@@ -158,273 +158,273 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n      LintSpec {\n         lint: CTypes,\n         desc: \"proper use of libc types in foreign modules\",\n-        default: warn\n+        default: Warn\n      }),\n \n     (\"unused_imports\",\n      LintSpec {\n         lint: UnusedImports,\n         desc: \"imports that are never used\",\n-        default: warn\n+        default: Warn\n      }),\n \n     (\"unnecessary_qualification\",\n      LintSpec {\n         lint: UnnecessaryQualification,\n         desc: \"detects unnecessarily qualified names\",\n-        default: allow\n+        default: Allow\n      }),\n \n     (\"while_true\",\n      LintSpec {\n         lint: WhileTrue,\n         desc: \"suggest using `loop { }` instead of `while true { }`\",\n-        default: warn\n+        default: Warn\n      }),\n \n     (\"path_statement\",\n      LintSpec {\n         lint: PathStatement,\n         desc: \"path statements with no effect\",\n-        default: warn\n+        default: Warn\n      }),\n \n     (\"unrecognized_lint\",\n      LintSpec {\n         lint: UnrecognizedLint,\n         desc: \"unrecognized lint attribute\",\n-        default: warn\n+        default: Warn\n      }),\n \n     (\"non_camel_case_types\",\n      LintSpec {\n         lint: NonCamelCaseTypes,\n         desc: \"types, variants and traits should have camel case names\",\n-        default: warn\n+        default: Warn\n      }),\n \n     (\"non_uppercase_statics\",\n      LintSpec {\n          lint: NonUppercaseStatics,\n          desc: \"static constants should have uppercase identifiers\",\n-         default: allow\n+         default: Allow\n      }),\n \n     (\"non_uppercase_pattern_statics\",\n      LintSpec {\n          lint: NonUppercasePatternStatics,\n          desc: \"static constants in match patterns should be all caps\",\n-         default: warn\n+         default: Warn\n      }),\n \n     (\"uppercase_variables\",\n      LintSpec {\n          lint: UppercaseVariables,\n          desc: \"variable and structure field names should start with a lowercase character\",\n-         default: warn\n+         default: Warn\n      }),\n \n      (\"unnecessary_parens\",\n      LintSpec {\n         lint: UnnecessaryParens,\n         desc: \"`if`, `match`, `while` and `return` do not need parentheses\",\n-        default: warn\n+        default: Warn\n      }),\n \n     (\"managed_heap_memory\",\n      LintSpec {\n         lint: ManagedHeapMemory,\n         desc: \"use of managed (@ type) heap memory\",\n-        default: allow\n+        default: Allow\n      }),\n \n     (\"owned_heap_memory\",\n      LintSpec {\n         lint: OwnedHeapMemory,\n         desc: \"use of owned (Box type) heap memory\",\n-        default: allow\n+        default: Allow\n      }),\n \n     (\"heap_memory\",\n      LintSpec {\n         lint: HeapMemory,\n         desc: \"use of any (Box type or @ type) heap memory\",\n-        default: allow\n+        default: Allow\n      }),\n \n     (\"type_limits\",\n      LintSpec {\n         lint: TypeLimits,\n         desc: \"comparisons made useless by limits of the types involved\",\n-        default: warn\n+        default: Warn\n      }),\n \n     (\"type_overflow\",\n      LintSpec {\n         lint: TypeOverflow,\n         desc: \"literal out of range for its type\",\n-        default: warn\n+        default: Warn\n      }),\n \n \n     (\"unused_unsafe\",\n      LintSpec {\n         lint: UnusedUnsafe,\n         desc: \"unnecessary use of an `unsafe` block\",\n-        default: warn\n+        default: Warn\n     }),\n \n     (\"unsafe_block\",\n      LintSpec {\n         lint: UnsafeBlock,\n         desc: \"usage of an `unsafe` block\",\n-        default: allow\n+        default: Allow\n     }),\n \n     (\"attribute_usage\",\n      LintSpec {\n         lint: AttributeUsage,\n         desc: \"detects bad use of attributes\",\n-        default: warn\n+        default: Warn\n     }),\n \n     (\"unused_variable\",\n      LintSpec {\n         lint: UnusedVariable,\n         desc: \"detect variables which are not used in any way\",\n-        default: warn\n+        default: Warn\n     }),\n \n     (\"dead_assignment\",\n      LintSpec {\n         lint: DeadAssignment,\n         desc: \"detect assignments that will never be read\",\n-        default: warn\n+        default: Warn\n     }),\n \n     (\"unnecessary_typecast\",\n      LintSpec {\n         lint: UnnecessaryTypecast,\n         desc: \"detects unnecessary type casts, that can be removed\",\n-        default: allow,\n+        default: Allow,\n     }),\n \n     (\"unused_mut\",\n      LintSpec {\n         lint: UnusedMut,\n         desc: \"detect mut variables which don't need to be mutable\",\n-        default: warn\n+        default: Warn\n     }),\n \n     (\"unnecessary_allocation\",\n      LintSpec {\n         lint: UnnecessaryAllocation,\n         desc: \"detects unnecessary allocations that can be eliminated\",\n-        default: warn\n+        default: Warn\n     }),\n \n     (DEAD_CODE_LINT_STR,\n      LintSpec {\n         lint: DeadCode,\n         desc: \"detect piece of code that will never be used\",\n-        default: warn\n+        default: Warn\n     }),\n     (\"visible_private_types\",\n      LintSpec {\n         lint: VisiblePrivateTypes,\n         desc: \"detect use of private types in exported type signatures\",\n-        default: warn\n+        default: Warn\n     }),\n \n     (\"missing_doc\",\n      LintSpec {\n         lint: MissingDoc,\n         desc: \"detects missing documentation for public members\",\n-        default: allow\n+        default: Allow\n     }),\n \n     (\"unreachable_code\",\n      LintSpec {\n         lint: UnreachableCode,\n         desc: \"detects unreachable code\",\n-        default: warn\n+        default: Warn\n     }),\n \n     (\"deprecated\",\n      LintSpec {\n         lint: Deprecated,\n         desc: \"detects use of #[deprecated] items\",\n-        default: warn\n+        default: Warn\n     }),\n \n     (\"experimental\",\n      LintSpec {\n         lint: Experimental,\n         desc: \"detects use of #[experimental] items\",\n-        default: warn\n+        default: Warn\n     }),\n \n     (\"unstable\",\n      LintSpec {\n         lint: Unstable,\n         desc: \"detects use of #[unstable] items (incl. items with no stability attribute)\",\n-        default: allow\n+        default: Allow\n     }),\n \n     (\"warnings\",\n      LintSpec {\n         lint: Warnings,\n         desc: \"mass-change the level for lints which produce warnings\",\n-        default: warn\n+        default: Warn\n     }),\n \n     (\"unknown_features\",\n      LintSpec {\n         lint: UnknownFeatures,\n         desc: \"unknown features found in crate-level #[feature] directives\",\n-        default: deny,\n+        default: Deny,\n     }),\n \n     (\"unknown_crate_type\",\n     LintSpec {\n         lint: UnknownCrateType,\n         desc: \"unknown crate type found in #[crate_type] directive\",\n-        default: deny,\n+        default: Deny,\n     }),\n \n     (\"unsigned_negate\",\n     LintSpec {\n         lint: UnsignedNegate,\n         desc: \"using an unary minus operator on unsigned type\",\n-        default: warn\n+        default: Warn\n     }),\n \n     (\"unused_must_use\",\n     LintSpec {\n         lint: UnusedMustUse,\n         desc: \"unused result of a type flagged as #[must_use]\",\n-        default: warn,\n+        default: Warn,\n     }),\n \n     (\"unused_result\",\n     LintSpec {\n         lint: UnusedResult,\n         desc: \"unused result of an expression in a statement\",\n-        default: allow,\n+        default: Allow,\n     }),\n \n     (\"deprecated_owned_vector\",\n      LintSpec {\n         lint: DeprecatedOwnedVector,\n         desc: \"use of a `~[T]` vector\",\n-        default: allow,\n+        default: Allow,\n     }),\n \n     (\"raw_pointer_deriving\",\n      LintSpec {\n         lint: RawPointerDeriving,\n         desc: \"uses of #[deriving] with raw pointers are rarely correct\",\n-        default: warn,\n+        default: Warn,\n     }),\n ];\n \n@@ -440,7 +440,7 @@ struct Context<'a> {\n     // All known lint modes (string versions)\n     dict: LintDict,\n     // Current levels of each lint warning\n-    cur: SmallIntMap<(level, LintSource)>,\n+    cur: SmallIntMap<(Level, LintSource)>,\n     // context we're checking in (used to access fields like sess)\n     tcx: &'a ty::ctxt,\n     // Items exported by the crate; used by the missing_doc lint.\n@@ -454,7 +454,7 @@ struct Context<'a> {\n     // When recursing into an attributed node of the ast which modifies lint\n     // levels, this stack keeps track of the previous lint levels of whatever\n     // was modified.\n-    lint_stack: Vec<(Lint, level, LintSource)>,\n+    lint_stack: Vec<(Lint, Level, LintSource)>,\n \n     // id of the last visited negated expression\n     negated_expr_id: ast::NodeId,\n@@ -464,10 +464,10 @@ struct Context<'a> {\n }\n \n impl<'a> Context<'a> {\n-    fn get_level(&self, lint: Lint) -> level {\n+    fn get_level(&self, lint: Lint) -> Level {\n         match self.cur.find(&(lint as uint)) {\n           Some(&(lvl, _)) => lvl,\n-          None => allow\n+          None => Allow\n         }\n     }\n \n@@ -478,8 +478,8 @@ impl<'a> Context<'a> {\n         }\n     }\n \n-    fn set_level(&mut self, lint: Lint, level: level, src: LintSource) {\n-        if level == allow {\n+    fn set_level(&mut self, lint: Lint, level: Level, src: LintSource) {\n+        if level == Allow {\n             self.cur.remove(&(lint as uint));\n         } else {\n             self.cur.insert(lint as uint, (level, src));\n@@ -498,10 +498,10 @@ impl<'a> Context<'a> {\n     fn span_lint(&self, lint: Lint, span: Span, msg: &str) {\n         let (level, src) = match self.cur.find(&(lint as uint)) {\n             None => { return }\n-            Some(&(warn, src)) => (self.get_level(Warnings), src),\n+            Some(&(Warn, src)) => (self.get_level(Warnings), src),\n             Some(&pair) => pair,\n         };\n-        if level == allow { return }\n+        if level == Allow { return }\n \n         let mut note = None;\n         let msg = match src {\n@@ -512,8 +512,8 @@ impl<'a> Context<'a> {\n             CommandLine => {\n                 format!(\"{} [-{} {}]\", msg,\n                     match level {\n-                        warn => 'W', deny => 'D', forbid => 'F',\n-                        allow => fail!()\n+                        Warn => 'W', Deny => 'D', Forbid => 'F',\n+                        Allow => fail!()\n                     }, self.lint_to_str(lint).replace(\"_\", \"-\"))\n             },\n             Node(src) => {\n@@ -522,9 +522,9 @@ impl<'a> Context<'a> {\n             }\n         };\n         match level {\n-            warn =>          { self.tcx.sess.span_warn(span, msg); }\n-            deny | forbid => { self.tcx.sess.span_err(span, msg);  }\n-            allow => fail!(),\n+            Warn =>          { self.tcx.sess.span_warn(span, msg); }\n+            Deny | Forbid => { self.tcx.sess.span_err(span, msg);  }\n+            Allow => fail!(),\n         }\n \n         for &span in note.iter() {\n@@ -557,7 +557,7 @@ impl<'a> Context<'a> {\n                 Some(lint) => {\n                     let lint = lint.lint;\n                     let now = self.get_level(lint);\n-                    if now == forbid && level != forbid {\n+                    if now == Forbid && level != Forbid {\n                         self.tcx.sess.span_err(meta.span,\n                         format!(\"{}({}) overruled by outer forbid({})\",\n                         level_to_str(level),\n@@ -611,9 +611,9 @@ impl<'a> Context<'a> {\n // Return true if that's the case. Otherwise return false.\n pub fn each_lint(sess: &session::Session,\n                  attrs: &[ast::Attribute],\n-                 f: |@ast::MetaItem, level, InternedString| -> bool)\n+                 f: |@ast::MetaItem, Level, InternedString| -> bool)\n                  -> bool {\n-    let xs = [allow, warn, deny, forbid];\n+    let xs = [Allow, Warn, Deny, Forbid];\n     for &level in xs.iter() {\n         let level_name = level_to_str(level);\n         for attr in attrs.iter().filter(|m| m.name().equiv(&level_name)) {\n@@ -645,7 +645,7 @@ pub fn each_lint(sess: &session::Session,\n // Check from a list of attributes if it contains the appropriate\n // `#[level(lintname)]` attribute (e.g. `#[allow(dead_code)]).\n pub fn contains_lint(attrs: &[ast::Attribute],\n-                     level: level,\n+                     level: Level,\n                      lintname: &'static str)\n                      -> bool {\n     let level_name = level_to_str(level);\n@@ -937,7 +937,7 @@ fn check_item_ctypes(cx: &Context, it: &ast::Item) {\n fn check_heap_type(cx: &Context, span: Span, ty: ty::t) {\n     let xs = [ManagedHeapMemory, OwnedHeapMemory, HeapMemory];\n     for &lint in xs.iter() {\n-        if cx.get_level(lint) == allow { continue }\n+        if cx.get_level(lint) == Allow { continue }\n \n         let mut n_box = 0;\n         let mut n_uniq = 0;\n@@ -1876,7 +1876,7 @@ pub fn check_crate(tcx: &ty::ctxt,\n     // Install default lint levels, followed by the command line levels, and\n     // then actually visit the whole crate.\n     for (_, spec) in cx.dict.iter() {\n-        if spec.default != allow {\n+        if spec.default != Allow {\n             cx.cur.insert(spec.lint as uint, (spec.default, Default));\n         }\n     }"}, {"sha": "f105e14e6e47519161fc553005704e128d0f669a", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/803e92de89def55197244269a5d1feffa00c93d9/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803e92de89def55197244269a5d1feffa00c93d9/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=803e92de89def55197244269a5d1feffa00c93d9", "patch": "@@ -72,7 +72,7 @@ fn get_ast_and_resolve(cpath: &Path, libs: HashSet<Path>, cfgs: Vec<StrBuf>)\n         maybe_sysroot: Some(os::self_exe_path().unwrap().dir_path()),\n         addl_lib_search_paths: RefCell::new(libs),\n         crate_types: vec!(driver::config::CrateTypeRlib),\n-        lint_opts: vec!((lint::Warnings, lint::allow)),\n+        lint_opts: vec!((lint::Warnings, lint::Allow)),\n         ..rustc::driver::config::basic_options().clone()\n     };\n "}, {"sha": "d0b820044dab2ab2a475aeb4bff9b30c916a4e71", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/803e92de89def55197244269a5d1feffa00c93d9/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803e92de89def55197244269a5d1feffa00c93d9/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=803e92de89def55197244269a5d1feffa00c93d9", "patch": "@@ -388,8 +388,8 @@ impl Map {\n         f(attrs)\n     }\n \n-    pub fn span(&self, id: NodeId) -> Span {\n-        match self.find(id) {\n+    pub fn opt_span(&self, id: NodeId) -> Option<Span> {\n+        let sp = match self.find(id) {\n             Some(NodeItem(item)) => item.span,\n             Some(NodeForeignItem(foreign_item)) => foreign_item.span,\n             Some(NodeTraitMethod(trait_method)) => {\n@@ -406,8 +406,14 @@ impl Map {\n             Some(NodePat(pat)) => pat.span,\n             Some(NodeBlock(block)) => block.span,\n             Some(NodeStructCtor(_)) => self.expect_item(self.get_parent(id)).span,\n-            _ => fail!(\"node_span: could not find span for id {}\", id),\n-        }\n+            _ => return None,\n+        };\n+        Some(sp)\n+    }\n+\n+    pub fn span(&self, id: NodeId) -> Span {\n+        self.opt_span(id)\n+            .unwrap_or_else(|| fail!(\"AstMap.span: could not find span for id {}\", id))\n     }\n \n     pub fn node_to_str(&self, id: NodeId) -> StrBuf {"}]}