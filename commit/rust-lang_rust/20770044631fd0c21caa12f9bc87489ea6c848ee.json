{"sha": "20770044631fd0c21caa12f9bc87489ea6c848ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNzcwMDQ0NjMxZmQwYzIxY2FhMTJmOWJjODc0ODllYTZjODQ4ZWU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-07-15T19:47:45Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-07-15T20:07:13Z"}, "message": "Remove TypeCtor interning\n\nOur TypeCtor and Chalk's TypeName match now!", "tree": {"sha": "27ba12638469c763874fa094744ffe3f628a7164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27ba12638469c763874fa094744ffe3f628a7164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20770044631fd0c21caa12f9bc87489ea6c848ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20770044631fd0c21caa12f9bc87489ea6c848ee", "html_url": "https://github.com/rust-lang/rust/commit/20770044631fd0c21caa12f9bc87489ea6c848ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20770044631fd0c21caa12f9bc87489ea6c848ee/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a48843a16a2306399f2f6a78c69d9192a6480c88", "url": "https://api.github.com/repos/rust-lang/rust/commits/a48843a16a2306399f2f6a78c69d9192a6480c88", "html_url": "https://github.com/rust-lang/rust/commit/a48843a16a2306399f2f6a78c69d9192a6480c88"}], "stats": {"total": 66, "additions": 28, "deletions": 38}, "files": [{"sha": "1ad92a1f81dd256b8e8388c1f8f26be631656217", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=20770044631fd0c21caa12f9bc87489ea6c848ee", "patch": "@@ -17,9 +17,9 @@ pub use hir_ty::db::{\n     AssociatedTyDataQuery, AssociatedTyValueQuery, CallableItemSignatureQuery, FieldTypesQuery,\n     GenericDefaultsQuery, GenericPredicatesForParamQuery, GenericPredicatesQuery, HirDatabase,\n     HirDatabaseStorage, ImplDatumQuery, ImplSelfTyQuery, ImplTraitQuery, InferQueryQuery,\n-    InherentImplsInCrateQuery, InternTypeCtorQuery, InternTypeParamIdQuery,\n-    ReturnTypeImplTraitsQuery, StructDatumQuery, TraitDatumQuery, TraitImplsInCrateQuery,\n-    TraitImplsInDepsQuery, TraitSolveQuery, TyQuery, ValueTyQuery,\n+    InherentImplsInCrateQuery, InternTypeParamIdQuery, ReturnTypeImplTraitsQuery, StructDatumQuery,\n+    TraitDatumQuery, TraitImplsInCrateQuery, TraitImplsInDepsQuery, TraitSolveQuery, TyQuery,\n+    ValueTyQuery,\n };\n \n #[test]"}, {"sha": "87000fe9876745483b3e2546a01f0cabb6fbeaa4", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=20770044631fd0c21caa12f9bc87489ea6c848ee", "patch": "@@ -159,17 +159,17 @@ pub struct FunctionId(salsa::InternId);\n type FunctionLoc = AssocItemLoc<Function>;\n impl_intern!(FunctionId, FunctionLoc, intern_function, lookup_intern_function);\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct StructId(salsa::InternId);\n type StructLoc = ItemLoc<Struct>;\n impl_intern!(StructId, StructLoc, intern_struct, lookup_intern_struct);\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct UnionId(salsa::InternId);\n pub type UnionLoc = ItemLoc<Union>;\n impl_intern!(UnionId, UnionLoc, intern_union, lookup_intern_union);\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct EnumId(salsa::InternId);\n pub type EnumLoc = ItemLoc<Enum>;\n impl_intern!(EnumId, EnumLoc, intern_enum, lookup_intern_enum);\n@@ -239,7 +239,7 @@ pub enum AssocContainerId {\n impl_from!(ContainerId for AssocContainerId);\n \n /// A Data Type\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub enum AdtId {\n     StructId(StructId),\n     UnionId(UnionId),"}, {"sha": "608bab1b182acbd4dffdaf5dd075b4b3bb1f5ff9", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=20770044631fd0c21caa12f9bc87489ea6c848ee", "patch": "@@ -14,7 +14,7 @@ use crate::{\n     method_resolution::{InherentImpls, TraitImpls},\n     traits::chalk,\n     Binders, CallableDef, GenericPredicate, InferenceResult, OpaqueTyId, PolyFnSig,\n-    ReturnTypeImplTraits, TraitRef, Ty, TyDefId, TypeCtor, ValueTyDefId,\n+    ReturnTypeImplTraits, TraitRef, Ty, TyDefId, ValueTyDefId,\n };\n use hir_expand::name::Name;\n \n@@ -77,8 +77,6 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n \n     // Interned IDs for Chalk integration\n     #[salsa::interned]\n-    fn intern_type_ctor(&self, type_ctor: TypeCtor) -> crate::TypeCtorId;\n-    #[salsa::interned]\n     fn intern_callable_def(&self, callable_def: CallableDef) -> crate::CallableDefId;\n     #[salsa::interned]\n     fn intern_type_param_id(&self, param_id: TypeParamId) -> GlobalTypeParamId;"}, {"sha": "9f034eca514cc2e9c619343112768b518bfca3fc", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=20770044631fd0c21caa12f9bc87489ea6c848ee", "patch": "@@ -112,6 +112,7 @@ pub enum TypeCtor {\n     /// fn foo() -> i32 { 1 }\n     /// let bar: fn() -> i32 = foo;\n     /// ```\n+    // FIXME make this a Ty variant like in Chalk\n     FnPtr { num_args: u16, is_varargs: bool },\n \n     /// The never type `!`.\n@@ -139,13 +140,6 @@ pub enum TypeCtor {\n     Closure { def: DefWithBodyId, expr: ExprId },\n }\n \n-/// This exists just for Chalk, because Chalk just has a single `StructId` where\n-/// we have different kinds of ADTs, primitive types and special type\n-/// constructors like tuples and function pointers.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, Ord, PartialOrd)]\n-pub struct TypeCtorId(salsa::InternId);\n-impl_intern_key!(TypeCtorId);\n-\n /// This exists just for Chalk, because Chalk just has a single `FnDefId` where\n /// we have different IDs for struct and enum variant constructors.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, Ord, PartialOrd)]"}, {"sha": "1ef5baa05914f40c5e0e7799f0140c1c43daa0cc", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=20770044631fd0c21caa12f9bc87489ea6c848ee", "patch": "@@ -552,18 +552,6 @@ pub(crate) fn fn_def_datum_query(\n     Arc::new(datum)\n }\n \n-impl From<AdtId> for crate::TypeCtorId {\n-    fn from(struct_id: AdtId) -> Self {\n-        struct_id.0\n-    }\n-}\n-\n-impl From<crate::TypeCtorId> for AdtId {\n-    fn from(type_ctor_id: crate::TypeCtorId) -> Self {\n-        chalk_ir::AdtId(type_ctor_id)\n-    }\n-}\n-\n impl From<FnDefId> for crate::CallableDefId {\n     fn from(fn_def_id: FnDefId) -> Self {\n         InternKey::from_intern_id(fn_def_id.0)"}, {"sha": "8d4c51a8ffda80b8f525ccfc69bcd31ed8e67f7d", "filename": "crates/ra_hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=20770044631fd0c21caa12f9bc87489ea6c848ee", "patch": "@@ -41,7 +41,7 @@ impl chalk_ir::interner::Interner for Interner {\n     type InternedCanonicalVarKinds = Vec<chalk_ir::CanonicalVarKind<Self>>;\n     type InternedConstraints = Vec<chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>>;\n     type DefId = InternId;\n-    type InternedAdtId = crate::TypeCtorId;\n+    type InternedAdtId = hir_def::AdtId;\n     type Identifier = TypeAliasId;\n     type FnAbi = ();\n \n@@ -364,6 +364,18 @@ impl chalk_ir::interner::Interner for Interner {\n     ) -> &'a [chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>] {\n         constraints\n     }\n+    fn debug_closure_id(\n+        _fn_def_id: chalk_ir::ClosureId<Self>,\n+        _fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        None\n+    }\n+    fn debug_constraints(\n+        _clauses: &chalk_ir::Constraints<Self>,\n+        _fmt: &mut fmt::Formatter<'_>,\n+    ) -> Option<fmt::Result> {\n+        None\n+    }\n }\n \n impl chalk_ir::interner::HasInterner for Interner {"}, {"sha": "a852ce2ac1f93e72e382c3b471596c026a39da35", "filename": "crates/ra_hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=20770044631fd0c21caa12f9bc87489ea6c848ee", "patch": "@@ -316,20 +316,19 @@ impl ToChalk for TypeCtor {\n                 TypeName::Closure(closure_id.into())\n             }\n \n-            TypeCtor::FnPtr { .. } => panic!(\"Trying to convert FnPtr to TypeName\"),\n+            TypeCtor::Adt(adt_id) => TypeName::Adt(chalk_ir::AdtId(adt_id)),\n \n-            TypeCtor::Adt(_) => {\n-                // FIXME no interning needed anymore\n-                // other TypeCtors get interned and turned into a chalk StructId\n-                let struct_id = db.intern_type_ctor(self).into();\n-                TypeName::Adt(struct_id)\n+            TypeCtor::FnPtr { .. } => {\n+                // This should not be reached, since Chalk doesn't represent\n+                // function pointers with TypeName\n+                unreachable!()\n             }\n         }\n     }\n \n     fn from_chalk(db: &dyn HirDatabase, type_name: TypeName<Interner>) -> TypeCtor {\n         match type_name {\n-            TypeName::Adt(struct_id) => db.lookup_intern_type_ctor(struct_id.into()),\n+            TypeName::Adt(struct_id) => TypeCtor::Adt(struct_id.0),\n             TypeName::AssociatedType(type_id) => TypeCtor::AssociatedType(from_chalk(db, type_id)),\n             TypeName::OpaqueType(opaque_type_id) => {\n                 TypeCtor::OpaqueType(from_chalk(db, opaque_type_id))"}, {"sha": "a1bb3043b6b4dd3f90509fbc4dd33c0fbe906e3e", "filename": "crates/ra_ide_db/src/change.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20770044631fd0c21caa12f9bc87489ea6c848ee/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=20770044631fd0c21caa12f9bc87489ea6c848ee", "patch": "@@ -279,7 +279,6 @@ impl RootDatabase {\n             hir::db::InternImplQuery\n \n             // HirDatabase\n-            hir::db::InternTypeCtorQuery\n             hir::db::InternTypeParamIdQuery\n         ];\n "}]}