{"sha": "6575988d8e383fedd3d5579577c05ef23e77913b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NzU5ODhkOGUzODNmZWRkM2Q1NTc5NTc3YzA1ZWYyM2U3NzkxM2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-16T13:58:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-16T14:37:33Z"}, "message": "handle trait objects formed from traits with `Self::Foo: 'a` clauses", "tree": {"sha": "407dfba0a678148f806b64063bf9836eee4739a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/407dfba0a678148f806b64063bf9836eee4739a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6575988d8e383fedd3d5579577c05ef23e77913b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6575988d8e383fedd3d5579577c05ef23e77913b", "html_url": "https://github.com/rust-lang/rust/commit/6575988d8e383fedd3d5579577c05ef23e77913b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6575988d8e383fedd3d5579577c05ef23e77913b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d744ec6eca622aa63bb89f02e819e4270fa5794", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d744ec6eca622aa63bb89f02e819e4270fa5794", "html_url": "https://github.com/rust-lang/rust/commit/0d744ec6eca622aa63bb89f02e819e4270fa5794"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "30e304375fe0e357bc1ebdfc3b8436fe57f8336a", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6575988d8e383fedd3d5579577c05ef23e77913b/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6575988d8e383fedd3d5579577c05ef23e77913b/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=6575988d8e383fedd3d5579577c05ef23e77913b", "patch": "@@ -14,6 +14,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::subst::{Kind, Subst, UnpackedKind};\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::fold::TypeFoldable;\n use rustc::util::nodemap::FxHashMap;\n \n use super::explicit::ExplicitPredicatesMap;\n@@ -311,13 +312,23 @@ pub fn check_explicit_predicates<'tcx>(\n         //\n         // Note that we do this check for self **before** applying `substs`. In the\n         // case that `substs` come from a `dyn Trait` type, our caller will have\n-        // included `Self = dyn Trait<'x, X>` as the value for `Self`. If we were\n+        // included `Self = usize` as the value for `Self`. If we were\n         // to apply the substs, and not filter this predicate, we might then falsely\n         // conclude that e.g. `X: 'x` was a reasonable inferred requirement.\n-        if let UnpackedKind::Type(ty) = outlives_predicate.0.unpack() {\n-            if ty.is_self() && ignore_self_ty.0 {\n-                debug!(\"skipping self ty = {:?}\", &ty);\n-                continue;\n+        //\n+        // Another similar case is where we have a inferred\n+        // requirement like `<Self as Trait>::Foo: 'b`. We presently\n+        // ignore such requirements as well (cc #54467)-- though\n+        // conceivably it might be better if we could extract the `Foo\n+        // = X` binding from the object type (there must be such a\n+        // binding) and thus infer an outlives requirement that `X:\n+        // 'b`.\n+        if ignore_self_ty.0 {\n+            if let UnpackedKind::Type(ty) = outlives_predicate.0.unpack() {\n+                if ty.has_self_ty() {\n+                    debug!(\"skipping self ty = {:?}\", &ty);\n+                    continue;\n+                }\n             }\n         }\n "}, {"sha": "438923e29246c99fe5f443cd126bf217a57b41c1", "filename": "src/test/ui/rfc-2093-infer-outlives/issue-54467.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6575988d8e383fedd3d5579577c05ef23e77913b/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fissue-54467.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6575988d8e383fedd3d5579577c05ef23e77913b/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fissue-54467.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fissue-54467.rs?ref=6575988d8e383fedd3d5579577c05ef23e77913b", "patch": "@@ -0,0 +1,17 @@\n+// Regression test for #54467:\n+//\n+// Here, the trait object has an \"inferred outlives\" requirement that\n+// `<Self as MyIterator<'a>>::Item: 'a`; but since we don't know what\n+// `Self` is, we were (incorrectly) messing things up, leading to\n+// strange errors. This test ensures that we do not give compilation\n+// errors.\n+//\n+// compile-pass\n+\n+trait MyIterator<'a>: Iterator where Self::Item: 'a { }\n+\n+struct MyStruct<'a, A> {\n+    item: Box<dyn MyIterator<'a, Item = A>>\n+}\n+\n+fn main() { }"}]}