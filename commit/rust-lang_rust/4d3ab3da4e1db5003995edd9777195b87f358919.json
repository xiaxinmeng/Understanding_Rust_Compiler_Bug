{"sha": "4d3ab3da4e1db5003995edd9777195b87f358919", "node_id": "C_kwDOAAsO6NoAKDRkM2FiM2RhNGUxZGI1MDAzOTk1ZWRkOTc3NzE5NWI4N2YzNTg5MTk", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-24T17:33:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-24T17:33:30Z"}, "message": "Rollup merge of #110685 - cjgillot:clean-dcp, r=oli-obk\n\nSome cleanups to DataflowConstProp\n\nMostly moving code around and short-circuiting useless cases.", "tree": {"sha": "2647b9effdf63f21705f7e0113d69bb132865cfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2647b9effdf63f21705f7e0113d69bb132865cfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d3ab3da4e1db5003995edd9777195b87f358919", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkRr1qCRBK7hj4Ov3rIwAADIkIABm+7cUbuMzBPnUrZtg1C8io\nOQUdPnzJv3UicR/3P8Y1NCCO8eYl0IxLXO4PrD8SvoW9scsQBMZ8tk1XUnRMen64\nCr1dW3rEEpqY1A+V3Na94SqqBUXa4mGqMNZQQcKnfuhIN+1Fb4zkc8oZcsSSfUlA\nmPsQpFyLIfN5RGcZ+B3svZtO5ceqwxUyGVPFtgwdHY5KsLZoLp6sBmgfp0oxIO1U\ndjDGX7y4IxqedBiHWOZ1UsktMc/jfWaisIitMZFsUH6jSo/cL2HtT/62STzivHcq\nPusXyGehq8z4xV1TFEbnWY+ymnGWOgeXASqZykFhAAqSAVySDWGUbILjaoioeT4=\n=vK/t\n-----END PGP SIGNATURE-----\n", "payload": "tree 2647b9effdf63f21705f7e0113d69bb132865cfc\nparent a373623d55a42598dab1ef8c5a6d4dd89f6ca91c\nparent dd78b997b59b298a8e869db0def714c0630dcf94\nauthor Yuki Okushi <jtitor@2k36.org> 1682357610 +0900\ncommitter GitHub <noreply@github.com> 1682357610 +0900\n\nRollup merge of #110685 - cjgillot:clean-dcp, r=oli-obk\n\nSome cleanups to DataflowConstProp\n\nMostly moving code around and short-circuiting useless cases.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3ab3da4e1db5003995edd9777195b87f358919", "html_url": "https://github.com/rust-lang/rust/commit/4d3ab3da4e1db5003995edd9777195b87f358919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d3ab3da4e1db5003995edd9777195b87f358919/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a373623d55a42598dab1ef8c5a6d4dd89f6ca91c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a373623d55a42598dab1ef8c5a6d4dd89f6ca91c", "html_url": "https://github.com/rust-lang/rust/commit/a373623d55a42598dab1ef8c5a6d4dd89f6ca91c"}, {"sha": "dd78b997b59b298a8e869db0def714c0630dcf94", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd78b997b59b298a8e869db0def714c0630dcf94", "html_url": "https://github.com/rust-lang/rust/commit/dd78b997b59b298a8e869db0def714c0630dcf94"}], "stats": {"total": 125, "additions": 52, "deletions": 73}, "files": [{"sha": "254b704f9fc8493fb60d95a94b7a460155267890", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 52, "deletions": 73, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/4d3ab3da4e1db5003995edd9777195b87f358919/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3ab3da4e1db5003995edd9777195b87f358919/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=4d3ab3da4e1db5003995edd9777195b87f358919", "patch": "@@ -70,22 +70,6 @@ struct ConstAnalysis<'a, 'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n-impl<'tcx> ConstAnalysis<'_, 'tcx> {\n-    fn eval_discriminant(\n-        &self,\n-        enum_ty: Ty<'tcx>,\n-        variant_index: VariantIdx,\n-    ) -> Option<ScalarTy<'tcx>> {\n-        if !enum_ty.is_enum() {\n-            return None;\n-        }\n-        let discr = enum_ty.discriminant_for_variant(self.tcx, variant_index)?;\n-        let discr_layout = self.tcx.layout_of(self.param_env.and(discr.ty)).ok()?;\n-        let discr_value = Scalar::try_from_uint(discr.val, discr_layout.size)?;\n-        Some(ScalarTy(discr_value, discr.ty))\n-    }\n-}\n-\n impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n     type Value = FlatSet<ScalarTy<'tcx>>;\n \n@@ -126,59 +110,55 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n                 // we must make sure that all `target as Variant#i` are `Top`.\n                 state.flood(target.as_ref(), self.map());\n \n-                if let Some(target_idx) = self.map().find(target.as_ref()) {\n-                    let (variant_target, variant_index) = match **kind {\n-                        AggregateKind::Tuple | AggregateKind::Closure(..) => {\n-                            (Some(target_idx), None)\n-                        }\n-                        AggregateKind::Adt(def_id, variant_index, ..) => {\n-                            match self.tcx.def_kind(def_id) {\n-                                DefKind::Struct => (Some(target_idx), None),\n-                                DefKind::Enum => (\n-                                    self.map.apply(target_idx, TrackElem::Variant(variant_index)),\n-                                    Some(variant_index),\n-                                ),\n-                                _ => (None, None),\n-                            }\n-                        }\n-                        _ => (None, None),\n-                    };\n-                    if let Some(variant_target_idx) = variant_target {\n-                        for (field_index, operand) in operands.iter().enumerate() {\n-                            if let Some(field) = self.map().apply(\n-                                variant_target_idx,\n-                                TrackElem::Field(FieldIdx::from_usize(field_index)),\n-                            ) {\n-                                let result = self.handle_operand(operand, state);\n-                                state.insert_idx(field, result, self.map());\n-                            }\n+                let Some(target_idx) = self.map().find(target.as_ref()) else { return };\n+\n+                let (variant_target, variant_index) = match **kind {\n+                    AggregateKind::Tuple | AggregateKind::Closure(..) => (Some(target_idx), None),\n+                    AggregateKind::Adt(def_id, variant_index, ..) => {\n+                        match self.tcx.def_kind(def_id) {\n+                            DefKind::Struct => (Some(target_idx), None),\n+                            DefKind::Enum => (\n+                                self.map.apply(target_idx, TrackElem::Variant(variant_index)),\n+                                Some(variant_index),\n+                            ),\n+                            _ => return,\n                         }\n                     }\n-                    if let Some(variant_index) = variant_index\n-                        && let Some(discr_idx) = self.map().apply(target_idx, TrackElem::Discriminant)\n-                    {\n-                        // We are assigning the discriminant as part of an aggregate.\n-                        // This discriminant can only alias a variant field's value if the operand\n-                        // had an invalid value for that type.\n-                        // Using invalid values is UB, so we are allowed to perform the assignment\n-                        // without extra flooding.\n-                        let enum_ty = target.ty(self.local_decls, self.tcx).ty;\n-                        if let Some(discr_val) = self.eval_discriminant(enum_ty, variant_index) {\n-                            state.insert_value_idx(discr_idx, FlatSet::Elem(discr_val), &self.map);\n+                    _ => return,\n+                };\n+                if let Some(variant_target_idx) = variant_target {\n+                    for (field_index, operand) in operands.iter().enumerate() {\n+                        if let Some(field) = self.map().apply(\n+                            variant_target_idx,\n+                            TrackElem::Field(FieldIdx::from_usize(field_index)),\n+                        ) {\n+                            let result = self.handle_operand(operand, state);\n+                            state.insert_idx(field, result, self.map());\n                         }\n                     }\n                 }\n+                if let Some(variant_index) = variant_index\n+                    && let Some(discr_idx) = self.map().apply(target_idx, TrackElem::Discriminant)\n+                {\n+                    // We are assigning the discriminant as part of an aggregate.\n+                    // This discriminant can only alias a variant field's value if the operand\n+                    // had an invalid value for that type.\n+                    // Using invalid values is UB, so we are allowed to perform the assignment\n+                    // without extra flooding.\n+                    let enum_ty = target.ty(self.local_decls, self.tcx).ty;\n+                    if let Some(discr_val) = self.eval_discriminant(enum_ty, variant_index) {\n+                        state.insert_value_idx(discr_idx, FlatSet::Elem(discr_val), &self.map);\n+                    }\n+                }\n             }\n             Rvalue::CheckedBinaryOp(op, box (left, right)) => {\n                 // Flood everything now, so we can use `insert_value_idx` directly later.\n                 state.flood(target.as_ref(), self.map());\n \n-                let target = self.map().find(target.as_ref());\n+                let Some(target) = self.map().find(target.as_ref()) else { return };\n \n-                let value_target = target\n-                    .and_then(|target| self.map().apply(target, TrackElem::Field(0_u32.into())));\n-                let overflow_target = target\n-                    .and_then(|target| self.map().apply(target, TrackElem::Field(1_u32.into())));\n+                let value_target = self.map().apply(target, TrackElem::Field(0_u32.into()));\n+                let overflow_target = self.map().apply(target, TrackElem::Field(1_u32.into()));\n \n                 if value_target.is_some() || overflow_target.is_some() {\n                     let (val, overflow) = self.binary_op(state, *op, left, right);\n@@ -377,6 +357,20 @@ impl<'a, 'tcx> ConstAnalysis<'a, 'tcx> {\n         }\n     }\n \n+    fn eval_discriminant(\n+        &self,\n+        enum_ty: Ty<'tcx>,\n+        variant_index: VariantIdx,\n+    ) -> Option<ScalarTy<'tcx>> {\n+        if !enum_ty.is_enum() {\n+            return None;\n+        }\n+        let discr = enum_ty.discriminant_for_variant(self.tcx, variant_index)?;\n+        let discr_layout = self.tcx.layout_of(self.param_env.and(discr.ty)).ok()?;\n+        let discr_value = Scalar::try_from_uint(discr.val, discr_layout.size)?;\n+        Some(ScalarTy(discr_value, discr.ty))\n+    }\n+\n     fn wrap_scalar(&self, scalar: Scalar, ty: Ty<'tcx>) -> FlatSet<ScalarTy<'tcx>> {\n         FlatSet::Elem(ScalarTy(scalar, ty))\n     }\n@@ -520,21 +514,6 @@ impl<'tcx, 'map, 'a> Visitor<'tcx> for OperandCollector<'tcx, 'map, 'a> {\n             _ => (),\n         }\n     }\n-\n-    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n-        match rvalue {\n-            Rvalue::Discriminant(place) => {\n-                match self.state.get_discr(place.as_ref(), self.visitor.map) {\n-                    FlatSet::Top => (),\n-                    FlatSet::Elem(value) => {\n-                        self.visitor.before_effect.insert((location, *place), value);\n-                    }\n-                    FlatSet::Bottom => (),\n-                }\n-            }\n-            _ => self.super_rvalue(rvalue, location),\n-        }\n-    }\n }\n \n struct DummyMachine;"}]}