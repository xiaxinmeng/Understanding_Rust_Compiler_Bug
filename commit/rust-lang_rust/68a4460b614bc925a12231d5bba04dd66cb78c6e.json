{"sha": "68a4460b614bc925a12231d5bba04dd66cb78c6e", "node_id": "C_kwDOAAsO6NoAKDY4YTQ0NjBiNjE0YmM5MjVhMTIyMzFkNWJiYTA0ZGQ2NmNiNzhjNmU", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-10-27T13:45:31Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-10-27T15:01:05Z"}, "message": "replace `&` with `&&` in {integer}::checked_rem\n\nUsing short-circuit operators makes it easier to perform some kinds of\nsource code analysis, like MC/DC code coverage (a requirement in\nsafety-critical environments). The optimized x86 assembly is the same\nbetween the old and new versions:\n\n```\nxor eax, eax\ntest esi, esi\nje .LBB0_1\ncmp edi, -2147483648\njne .LBB0_4\ncmp esi, -1\njne .LBB0_4\nret\n.LBB0_1:\nret\n.LBB0_4:\nmov eax, edi\ncdq\nidiv esi\nmov eax, 1\nret\n```", "tree": {"sha": "4932dde79a35989123774b2a219eecdf45752e50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4932dde79a35989123774b2a219eecdf45752e50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68a4460b614bc925a12231d5bba04dd66cb78c6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmF5abcACgkQzXazX3c0\ndp4bzQ//W2Y4tG5b8XQkUzfnclLW/bHTFUnwde42AhSVG2ui9x+OFPfM+g77GiDI\n4yvWoB+HtVwOg3NoT8asW3ZMQ1dX0ZsTxeTwc19w4jjXjANRrnX8uUjaXrmSaIEp\nTplx+X/KGA4VDnB8+MPK954Gu6+Mj4jTgHNDKrmCYzknPREKnh4glARSB3PTc6+o\nQHFjCdCOhxNy/Nawxeh8IM/kNrwDhkChOr63HFqIlkxXHrbaHWneW2bNheJhwSpK\nFUlqwlSp4MuSfi59oZN65LXPftTFV9eT0HppNWj7SdmTL0TUKHaq8srfnupUm3Hg\nM5RYyWdCKnVE4dGkLEweY2qS413zpQU5JXPR+VRvGPcSqIABX7n8UoztlwuS7rIJ\nybsikgLnPEVL4oJqC15wv72VKkAQe347QSQlKgVVP5/f/nI5BtQdQY46CCHM69J7\nCOdQye+tqyxvco1Mu5cVpVEHemOKkPX8B0+n0c/AQ8a46jj4QDM+ztG/EO2dZXv/\n5B7Br/lSiWqknx+iZv/4L7wcgb/1QPhJaNeigrzeReqk7pkNuA7olGysuE9Cpnfy\n9OBh5IxfSvuUhHq7IUSKetF+ZNho79J/+iMLi9iZSPgwjxBCYivyldbjay8/HFfm\nNLveHE9mgOl5CXx2yOBjev6bCz4Fgu30H2yrckBmQYW1eakm6xA=\n=4dp0\n-----END PGP SIGNATURE-----", "payload": "tree 4932dde79a35989123774b2a219eecdf45752e50\nparent 81130fe188ff37f2deacdf53d7afe823ceaba7ec\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1635342331 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1635346865 +0200\n\nreplace `&` with `&&` in {integer}::checked_rem\n\nUsing short-circuit operators makes it easier to perform some kinds of\nsource code analysis, like MC/DC code coverage (a requirement in\nsafety-critical environments). The optimized x86 assembly is the same\nbetween the old and new versions:\n\n```\nxor eax, eax\ntest esi, esi\nje .LBB0_1\ncmp edi, -2147483648\njne .LBB0_4\ncmp esi, -1\njne .LBB0_4\nret\n.LBB0_1:\nret\n.LBB0_4:\nmov eax, edi\ncdq\nidiv esi\nmov eax, 1\nret\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68a4460b614bc925a12231d5bba04dd66cb78c6e", "html_url": "https://github.com/rust-lang/rust/commit/68a4460b614bc925a12231d5bba04dd66cb78c6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68a4460b614bc925a12231d5bba04dd66cb78c6e/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81130fe188ff37f2deacdf53d7afe823ceaba7ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/81130fe188ff37f2deacdf53d7afe823ceaba7ec", "html_url": "https://github.com/rust-lang/rust/commit/81130fe188ff37f2deacdf53d7afe823ceaba7ec"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "052e1a21b32cbd0379424aae6672ac6bed183856", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68a4460b614bc925a12231d5bba04dd66cb78c6e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a4460b614bc925a12231d5bba04dd66cb78c6e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=68a4460b614bc925a12231d5bba04dd66cb78c6e", "patch": "@@ -661,8 +661,7 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_rem(self, rhs: Self) -> Option<Self> {\n-            // Using `&` helps LLVM see that it is the same check made in division.\n-            if unlikely!(rhs == 0 || ((self == Self::MIN) & (rhs == -1))) {\n+            if unlikely!(rhs == 0 || ((self == Self::MIN) && (rhs == -1))) {\n                 None\n             } else {\n                 // SAFETY: div by zero and by INT_MIN have been checked above"}]}