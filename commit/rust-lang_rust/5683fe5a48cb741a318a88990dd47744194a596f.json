{"sha": "5683fe5a48cb741a318a88990dd47744194a596f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ODNmZTVhNDhjYjc0MWEzMThhODg5OTBkZDQ3NzQ0MTk0YTU5NmY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-13T13:09:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-13T13:09:26Z"}, "message": "Rollup merge of #66331 - JohnTitor:add-tests, r=Centril\n\nAdd some tests for fixed ICEs\n\nCloses #30904 (fixed between nightly-2019-07-14 and nightly-2019-07-31)\nCloses #40231 (example 1 is fixed in 1.32.0, example 2 is fixed in 1.38.0)\nCloses #52432 (fixed in rustc 1.40.0-beta.1 (76b40532a 2019-11-05))\nCloses #63279 (fixed in rustc 1.40.0-nightly (246be7e1a 2019-10-25))\n\nr? @Centril", "tree": {"sha": "fe3119cf0e50f92507fc3ea1b2741965c2061fc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe3119cf0e50f92507fc3ea1b2741965c2061fc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5683fe5a48cb741a318a88990dd47744194a596f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzACGCRBK7hj4Ov3rIwAAdHIIAI1RsNqEGen3pg8474Wp2eRB\nsCqB4QjgzvY0B+Dm8jugv68NZ/rKs9601LW0C5jdAws3NWfPIZUsyZAXu1hrTRJD\nARGNgwOCHtulWumtl7EK2W5NT/7eGebMbHx+j3MEs1raGFXtwP653sEL9yQEJS+C\n+NrWDDuM0JrMBCuE9JcVO9SjJaWpZHjVWV3bUw+11HGaQ8OuWCjdze6c70p+bX+M\ny06phVF89aMwI5pPVIwgpnE2FiUr51GPeb2HlaKAWYgEntrIrqxjzXHv+WGs+zcO\nNjmEOelHF1wbh+V/Vzh0GJL3c3uZG3tRubV+pc/SVw9LOUQys37YoV91JDxXsu8=\n=C0BV\n-----END PGP SIGNATURE-----\n", "payload": "tree fe3119cf0e50f92507fc3ea1b2741965c2061fc8\nparent 60ba5c70fcba9a9ce3a9b86d9511e4df6ed4f22e\nparent 74d45afbf5473d1b255629e786e074060dcc7ec2\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573650566 +0900\ncommitter GitHub <noreply@github.com> 1573650566 +0900\n\nRollup merge of #66331 - JohnTitor:add-tests, r=Centril\n\nAdd some tests for fixed ICEs\n\nCloses #30904 (fixed between nightly-2019-07-14 and nightly-2019-07-31)\nCloses #40231 (example 1 is fixed in 1.32.0, example 2 is fixed in 1.38.0)\nCloses #52432 (fixed in rustc 1.40.0-beta.1 (76b40532a 2019-11-05))\nCloses #63279 (fixed in rustc 1.40.0-nightly (246be7e1a 2019-10-25))\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5683fe5a48cb741a318a88990dd47744194a596f", "html_url": "https://github.com/rust-lang/rust/commit/5683fe5a48cb741a318a88990dd47744194a596f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5683fe5a48cb741a318a88990dd47744194a596f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60ba5c70fcba9a9ce3a9b86d9511e4df6ed4f22e", "url": "https://api.github.com/repos/rust-lang/rust/commits/60ba5c70fcba9a9ce3a9b86d9511e4df6ed4f22e", "html_url": "https://github.com/rust-lang/rust/commit/60ba5c70fcba9a9ce3a9b86d9511e4df6ed4f22e"}, {"sha": "74d45afbf5473d1b255629e786e074060dcc7ec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/74d45afbf5473d1b255629e786e074060dcc7ec2", "html_url": "https://github.com/rust-lang/rust/commit/74d45afbf5473d1b255629e786e074060dcc7ec2"}], "stats": {"total": 228, "additions": 228, "deletions": 0}, "files": [{"sha": "2d4c939f47d795369a55f4c89dc68bc0d1263e77", "filename": "src/test/ui/consts/issue-52432.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs?ref=5683fe5a48cb741a318a88990dd47744194a596f", "patch": "@@ -0,0 +1,10 @@\n+#![feature(const_raw_ptr_to_usize_cast)]\n+\n+fn main() {\n+    [(); &(static |x| {}) as *const _ as usize];\n+    //~^ ERROR: closures cannot be static\n+    //~| ERROR: type annotations needed\n+    [(); &(static || {}) as *const _ as usize];\n+    //~^ ERROR: closures cannot be static\n+    //~| ERROR: evaluation of constant value failed\n+}"}, {"sha": "e9539d24118a0533bbc18e447589c3693d2fd9ad", "filename": "src/test/ui/consts/issue-52432.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr?ref=5683fe5a48cb741a318a88990dd47744194a596f", "patch": "@@ -0,0 +1,28 @@\n+error[E0697]: closures cannot be static\n+  --> $DIR/issue-52432.rs:4:12\n+   |\n+LL |     [(); &(static |x| {}) as *const _ as usize];\n+   |            ^^^^^^^^^^\n+\n+error[E0697]: closures cannot be static\n+  --> $DIR/issue-52432.rs:7:12\n+   |\n+LL |     [(); &(static || {}) as *const _ as usize];\n+   |            ^^^^^^^^^\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-52432.rs:4:20\n+   |\n+LL |     [(); &(static |x| {}) as *const _ as usize];\n+   |                    ^ consider giving this closure parameter a type\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-52432.rs:7:10\n+   |\n+LL |     [(); &(static || {}) as *const _ as usize];\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0080, E0282, E0697.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "999399ec8d34c6bed4c93fcedc6bf399cf86cf9f", "filename": "src/test/ui/issues/issue-40231-1.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Fissues%2Fissue-40231-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Fissues%2Fissue-40231-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40231-1.rs?ref=5683fe5a48cb741a318a88990dd47744194a596f", "patch": "@@ -0,0 +1,54 @@\n+// check-pass\n+\n+#![allow(dead_code)]\n+\n+trait Structure<E>: Sized where E: Encoding {\n+    type RefTarget: ?Sized;\n+    type FfiPtr;\n+    unsafe fn borrow_from_ffi_ptr<'a>(ptr: Self::FfiPtr) -> Option<&'a Self::RefTarget>;\n+}\n+\n+enum Slice {}\n+\n+impl<E> Structure<E> for Slice where E: Encoding {\n+    type RefTarget = [E::Unit];\n+    type FfiPtr = (*const E::FfiUnit, usize);\n+    unsafe fn borrow_from_ffi_ptr<'a>(_ptr: Self::FfiPtr) -> Option<&'a Self::RefTarget> {\n+        panic!()\n+    }\n+}\n+\n+trait Encoding {\n+    type Unit: Unit;\n+    type FfiUnit;\n+}\n+\n+trait Unit {}\n+\n+enum Utf16 {}\n+\n+impl Encoding for Utf16 {\n+    type Unit = Utf16Unit;\n+    type FfiUnit = u16;\n+}\n+\n+struct Utf16Unit(pub u16);\n+\n+impl Unit for Utf16Unit {}\n+\n+type SUtf16Str = SeStr<Slice, Utf16>;\n+\n+struct SeStr<S, E> where S: Structure<E>, E: Encoding {\n+    _data: S::RefTarget,\n+}\n+\n+impl<S, E> SeStr<S, E> where S: Structure<E>, E: Encoding {\n+    pub unsafe fn from_ptr<'a>(_ptr: S::FfiPtr) -> Option<&'a Self> {\n+        panic!()\n+    }\n+}\n+\n+fn main() {\n+    const TEXT_U16: &'static [u16] = &[];\n+    let _ = unsafe { SUtf16Str::from_ptr((TEXT_U16.as_ptr(), TEXT_U16.len())).unwrap() };\n+}"}, {"sha": "780433b28c5964951ee043701d842a1607d76284", "filename": "src/test/ui/issues/issue-40231-2.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Fissues%2Fissue-40231-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Fissues%2Fissue-40231-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40231-2.rs?ref=5683fe5a48cb741a318a88990dd47744194a596f", "patch": "@@ -0,0 +1,54 @@\n+// check-pass\n+\n+#![allow(dead_code)]\n+\n+trait Structure<E>: Sized where E: Encoding {\n+    type RefTarget: ?Sized;\n+    type FfiPtr;\n+    unsafe fn borrow_from_ffi_ptr<'a>(ptr: Self::FfiPtr) -> Option<&'a Self::RefTarget>;\n+}\n+\n+enum Slice {}\n+\n+impl<E> Structure<E> for Slice where E: Encoding {\n+    type RefTarget = [E::Unit];\n+    type FfiPtr = (*const E::FfiUnit, usize);\n+    unsafe fn borrow_from_ffi_ptr<'a>(_ptr: Self::FfiPtr) -> Option<&'a Self::RefTarget> {\n+        panic!()\n+    }\n+}\n+\n+trait Encoding {\n+    type Unit: Unit;\n+    type FfiUnit;\n+}\n+\n+trait Unit {}\n+\n+enum Utf16 {}\n+\n+impl Encoding for Utf16 {\n+    type Unit = Utf16Unit;\n+    type FfiUnit = u16;\n+}\n+\n+struct Utf16Unit(pub u16);\n+\n+impl Unit for Utf16Unit {}\n+\n+struct SUtf16Str {\n+    _data: <Slice as Structure<Utf16>>::RefTarget,\n+}\n+\n+impl SUtf16Str {\n+    pub unsafe fn from_ptr<'a>(ptr: <Slice as Structure<Utf16>>::FfiPtr)\n+    -> Option<&'a Self> {\n+        std::mem::transmute::<Option<&[<Utf16 as Encoding>::Unit]>, _>(\n+            <Slice as Structure<Utf16>>::borrow_from_ffi_ptr(ptr))\n+    }\n+}\n+\n+fn main() {\n+    const TEXT_U16: &'static [u16] = &[];\n+    let _ = unsafe { SUtf16Str::from_ptr((TEXT_U16.as_ptr(), TEXT_U16.len())).unwrap() };\n+}"}, {"sha": "586ff7a31587fa71820c8f53c2d8e39ca4283bec", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs?ref=5683fe5a48cb741a318a88990dd47744194a596f", "patch": "@@ -0,0 +1,9 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Closure = impl FnOnce(); //~ ERROR: type mismatch resolving\n+\n+fn c() -> Closure {\n+    || -> Closure { || () }\n+}\n+\n+fn main() {}"}, {"sha": "a5065241fc74ddd30b379bdc339a056b0d453edb", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=5683fe5a48cb741a318a88990dd47744194a596f", "patch": "@@ -0,0 +1,13 @@\n+error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:6:5: 6:28] as std::ops::FnOnce<()>>::Output == ()`\n+  --> $DIR/issue-63279.rs:3:1\n+   |\n+LL | type Closure = impl FnOnce();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected opaque type, found ()\n+   |\n+   = note: expected type `Closure`\n+              found type `()`\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "eec5e962b431e55ef2bcd69fcc003fd0c255a629", "filename": "src/test/ui/unboxed-closures/issue-30904.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.rs?ref=5683fe5a48cb741a318a88990dd47744194a596f", "patch": "@@ -0,0 +1,36 @@\n+#![feature(fn_traits, unboxed_closures)]\n+\n+fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n+\n+struct Compose<F,G>(F,G);\n+impl<T,F,G> FnOnce<(T,)> for Compose<F,G>\n+where F: FnOnce<(T,)>, G: FnOnce<(F::Output,)> {\n+    type Output = G::Output;\n+    extern \"rust-call\" fn call_once(self, (x,): (T,)) -> G::Output {\n+        (self.1)((self.0)(x))\n+    }\n+}\n+\n+struct Str<'a>(&'a str);\n+fn mk_str<'a>(s: &'a str) -> Str<'a> { Str(s) }\n+\n+fn main() {\n+    let _: for<'a> fn(&'a str) -> Str<'a> = mk_str;\n+    // expected concrete lifetime, found bound lifetime parameter 'a\n+    let _: for<'a> fn(&'a str) -> Str<'a> = Str;\n+    //~^ ERROR: mismatched types\n+\n+    test(|_: &str| {});\n+    test(mk_str);\n+    // expected concrete lifetime, found bound lifetime parameter 'x\n+    test(Str); //~ ERROR: type mismatch in function arguments\n+\n+    test(Compose(|_: &str| {}, |_| {}));\n+    test(Compose(mk_str, |_| {}));\n+    // internal compiler error: cannot relate bound region:\n+    //   ReLateBound(DebruijnIndex { depth: 2 },\n+    //     BrNamed(DefId { krate: 0, node: DefIndex(6) => test::'x }, 'x(65)))\n+    //<= ReSkolemized(0,\n+    //     BrNamed(DefId { krate: 0, node: DefIndex(6) => test::'x }, 'x(65)))\n+    test(Compose(Str, |_| {}));\n+}"}, {"sha": "943cbe0ccc2978d63f48c0db601cd66a50b7754b", "filename": "src/test/ui/unboxed-closures/issue-30904.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5683fe5a48cb741a318a88990dd47744194a596f/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Fissue-30904.stderr?ref=5683fe5a48cb741a318a88990dd47744194a596f", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-30904.rs:20:45\n+   |\n+LL |     let _: for<'a> fn(&'a str) -> Str<'a> = Str;\n+   |                                             ^^^ expected concrete lifetime, found bound lifetime parameter 'a\n+   |\n+   = note: expected type `for<'a> fn(&'a str) -> Str<'a>`\n+              found type `fn(&str) -> Str<'_> {Str::<'_>}`\n+\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/issue-30904.rs:26:10\n+   |\n+LL | fn test<F: for<'x> FnOnce<(&'x str,)>>(_: F) {}\n+   |    ----    -------------------------- required by this bound in `test`\n+...\n+LL | struct Str<'a>(&'a str);\n+   | ------------------------ found signature of `fn(&str) -> _`\n+...\n+LL |     test(Str);\n+   |          ^^^ expected signature of `for<'x> fn(&'x str) -> _`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}