{"sha": "ba87be05cfa8f9a02d673a64aa2ee83976d80e60", "node_id": "C_kwDOAAsO6NoAKGJhODdiZTA1Y2ZhOGY5YTAyZDY3M2E2NGFhMmVlODM5NzZkODBlNjA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-19T01:01:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-19T01:01:52Z"}, "message": "Short-circuit some trivially const Drop types", "tree": {"sha": "a66d71d29d35fceed9131b245af9a02e3132ea2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a66d71d29d35fceed9131b245af9a02e3132ea2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba87be05cfa8f9a02d673a64aa2ee83976d80e60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba87be05cfa8f9a02d673a64aa2ee83976d80e60", "html_url": "https://github.com/rust-lang/rust/commit/ba87be05cfa8f9a02d673a64aa2ee83976d80e60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba87be05cfa8f9a02d673a64aa2ee83976d80e60/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33e5efbd586cbdc683cb54949fe163755c57e9e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/33e5efbd586cbdc683cb54949fe163755c57e9e8", "html_url": "https://github.com/rust-lang/rust/commit/33e5efbd586cbdc683cb54949fe163755c57e9e8"}], "stats": {"total": 55, "additions": 45, "deletions": 10}, "files": [{"sha": "8dfdbf5d9dda2077f49377a938bd115ad49a4cd2", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ba87be05cfa8f9a02d673a64aa2ee83976d80e60/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba87be05cfa8f9a02d673a64aa2ee83976d80e60/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=ba87be05cfa8f9a02d673a64aa2ee83976d80e60", "patch": "@@ -146,15 +146,10 @@ impl Qualif for NeedsNonConstDrop {\n         qualifs.needs_non_const_drop\n     }\n \n-    fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, mut ty: Ty<'tcx>) -> bool {\n-        // Avoid selecting for simple cases.\n-        match ty::util::needs_drop_components(ty, &cx.tcx.data_layout).as_deref() {\n-            Ok([]) => return false,\n-            Err(ty::util::AlwaysRequiresDrop) => return true,\n-            // If we've got a single component, select with that\n-            // to increase the chance that we hit the selection cache.\n-            Ok([t]) => ty = t,\n-            Ok([..]) => {}\n+    fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n+        // Avoid selecting for simple cases, such as builtin types.\n+        if ty::util::trivial_const_drop(ty) {\n+            return false;\n         }\n \n         let Some(drop_trait) = cx.tcx.lang_items().drop_trait() else {\n@@ -187,11 +182,15 @@ impl Qualif for NeedsNonConstDrop {\n                 impl_src,\n                 ImplSource::ConstDrop(_) | ImplSource::Param(_, ty::BoundConstness::ConstIfConst)\n             ) {\n-                // If our const drop candidate is not ConstDrop or implied by param,\n+                // If our const drop candidate is not ConstDrop or implied by the param env,\n                 // then it's bad\n                 return true;\n             }\n \n+            if impl_src.borrow_nested_obligations().is_empty() {\n+                return false;\n+            }\n+\n             // If we successfully found one, then select all of the predicates\n             // implied by our const drop impl.\n             let mut fcx = FulfillmentContext::new();"}, {"sha": "71e9197e4f59f0505c05c19a3b28af411e2a7550", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ba87be05cfa8f9a02d673a64aa2ee83976d80e60/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba87be05cfa8f9a02d673a64aa2ee83976d80e60/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=ba87be05cfa8f9a02d673a64aa2ee83976d80e60", "patch": "@@ -1041,6 +1041,42 @@ pub fn needs_drop_components<'tcx>(\n     }\n }\n \n+pub fn trivial_const_drop<'tcx>(ty: Ty<'tcx>) -> bool {\n+    match *ty.kind() {\n+        ty::Bool\n+        | ty::Char\n+        | ty::Int(_)\n+        | ty::Uint(_)\n+        | ty::Float(_)\n+        | ty::Infer(ty::IntVar(_))\n+        | ty::Infer(ty::FloatVar(_))\n+        | ty::Str\n+        | ty::RawPtr(_)\n+        | ty::Ref(..)\n+        | ty::FnDef(..)\n+        | ty::FnPtr(_) => true,\n+\n+        ty::Opaque(..)\n+        | ty::Dynamic(..)\n+        | ty::Error(_)\n+        | ty::Bound(..)\n+        | ty::Param(_)\n+        | ty::Placeholder(_)\n+        | ty::Never\n+        | ty::Foreign(_)\n+        | ty::Projection(_)\n+        | ty::Infer(_) => false,\n+\n+        // Not trivial because they have components, and instead of looking inside,\n+        // we'll just perform trait selection.\n+        ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(_) | ty::Adt(..) => false,\n+\n+        ty::Array(ty, _) | ty::Slice(ty) => trivial_const_drop(ty),\n+\n+        ty::Tuple(tys) => tys.iter().all(|ty| trivial_const_drop(ty.expect_ty())),\n+    }\n+}\n+\n // Does the equivalent of\n // ```\n // let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();"}]}