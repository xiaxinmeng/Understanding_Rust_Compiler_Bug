{"sha": "04892d915512abe85d7a663b68dc62ef802eef30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ODkyZDkxNTUxMmFiZTg1ZDdhNjYzYjY4ZGM2MmVmODAyZWVmMzA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-10T09:33:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-10T09:33:33Z"}, "message": "typo", "tree": {"sha": "580985b686a4c607897546571d9953de8068763e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/580985b686a4c607897546571d9953de8068763e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04892d915512abe85d7a663b68dc62ef802eef30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04892d915512abe85d7a663b68dc62ef802eef30", "html_url": "https://github.com/rust-lang/rust/commit/04892d915512abe85d7a663b68dc62ef802eef30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04892d915512abe85d7a663b68dc62ef802eef30/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33eb5657d6b3677b000680e9fd349550143d3693", "url": "https://api.github.com/repos/rust-lang/rust/commits/33eb5657d6b3677b000680e9fd349550143d3693", "html_url": "https://github.com/rust-lang/rust/commit/33eb5657d6b3677b000680e9fd349550143d3693"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "0288773044ac5f170b0cd4220652a66268bebc1c", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04892d915512abe85d7a663b68dc62ef802eef30/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04892d915512abe85d7a663b68dc62ef802eef30/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=04892d915512abe85d7a663b68dc62ef802eef30", "patch": "@@ -597,15 +597,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"_ldexp\" | \"ldexp\" | \"scalbn\" => {\n                 let x = this.read_scalar(args[0])?.to_f64()?;\n                 let exp = this.read_scalar(args[1])?.to_i32()?;\n+\n                 // Saturating cast to i16. Even those are outside the valid exponent range to\n-                // `scalbn` below will to its over/underflow handling.\n+                // `scalbn` below will do its over/underflow handling.\n                 let exp = if exp > i16::max_value() as i32 {\n                     i16::max_value()\n                 } else if exp < i16::min_value() as i32 {\n                     i16::min_value()\n                 } else {\n                     exp.try_into().unwrap()\n                 };\n+\n                 let res = x.scalbn(exp);\n                 this.write_scalar(Scalar::from_f64(res), dest)?;\n             }"}]}