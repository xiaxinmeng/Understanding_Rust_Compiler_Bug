{"sha": "b32a4edb2078ca61ebcd9bad993905873f4a990a", "node_id": "C_kwDOAAsO6NoAKGIzMmE0ZWRiMjA3OGNhNjFlYmNkOWJhZDk5MzkwNTg3M2Y0YTk5MGE", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-12-01T15:51:20Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-12-01T15:51:20Z"}, "message": "rustc_ast_lowering: Stop lowering imports into multiple items\n\nLower them into a single item with multiple resolutions instead.\nThis also allows to remove additional `NodId`s and `DefId`s related to those additional items.", "tree": {"sha": "50acd792b559138cc1c306259b5886d3ce1004bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50acd792b559138cc1c306259b5886d3ce1004bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b32a4edb2078ca61ebcd9bad993905873f4a990a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b32a4edb2078ca61ebcd9bad993905873f4a990a", "html_url": "https://github.com/rust-lang/rust/commit/b32a4edb2078ca61ebcd9bad993905873f4a990a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b32a4edb2078ca61ebcd9bad993905873f4a990a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f259ae6799e7e0a08e5b84fc5686e404b17eef0", "html_url": "https://github.com/rust-lang/rust/commit/1f259ae6799e7e0a08e5b84fc5686e404b17eef0"}], "stats": {"total": 277, "additions": 79, "deletions": 198}, "files": [{"sha": "f2f8e1386a5c7dcae63a8111a4663eaaca2fd349", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -2517,10 +2517,7 @@ pub struct Variant {\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum UseTreeKind {\n     /// `use prefix` or `use prefix as rename`\n-    ///\n-    /// The extra `NodeId`s are for HIR lowering, when additional statements are created for each\n-    /// namespace.\n-    Simple(Option<Ident>, NodeId, NodeId),\n+    Simple(Option<Ident>),\n     /// `use prefix::{...}`\n     Nested(Vec<(UseTree, NodeId)>),\n     /// `use prefix::*`\n@@ -2539,8 +2536,8 @@ pub struct UseTree {\n impl UseTree {\n     pub fn ident(&self) -> Ident {\n         match self.kind {\n-            UseTreeKind::Simple(Some(rename), ..) => rename,\n-            UseTreeKind::Simple(None, ..) => {\n+            UseTreeKind::Simple(Some(rename)) => rename,\n+            UseTreeKind::Simple(None) => {\n                 self.prefix.segments.last().expect(\"empty prefix in a simple import\").ident\n             }\n             _ => panic!(\"`UseTree::ident` can only be used on a simple import\"),"}, {"sha": "963e5a608a4927ecc24551fa6cee3f39f957754e", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -410,11 +410,7 @@ pub fn noop_visit_use_tree<T: MutVisitor>(use_tree: &mut UseTree, vis: &mut T) {\n     let UseTree { prefix, kind, span } = use_tree;\n     vis.visit_path(prefix);\n     match kind {\n-        UseTreeKind::Simple(rename, id1, id2) => {\n-            visit_opt(rename, |rename| vis.visit_ident(rename));\n-            vis.visit_id(id1);\n-            vis.visit_id(id2);\n-        }\n+        UseTreeKind::Simple(rename) => visit_opt(rename, |rename| vis.visit_ident(rename)),\n         UseTreeKind::Nested(items) => {\n             for (tree, id) in items {\n                 vis.visit_use_tree(tree);"}, {"sha": "fe27d7fa8de172bb87587435d18c2b6c256d884b", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -439,7 +439,7 @@ pub fn walk_path<'a, V: Visitor<'a>>(visitor: &mut V, path: &'a Path) {\n pub fn walk_use_tree<'a, V: Visitor<'a>>(visitor: &mut V, use_tree: &'a UseTree, id: NodeId) {\n     visitor.visit_path(&use_tree.prefix, id);\n     match &use_tree.kind {\n-        UseTreeKind::Simple(rename, ..) => {\n+        UseTreeKind::Simple(rename) => {\n             // The extra IDs are handled during HIR lowering.\n             if let &Some(rename) = rename {\n                 visitor.visit_ident(rename);"}, {"sha": "f6275433fc51bcde5fb9edf669094fd338c4ba6c", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 10, "deletions": 74, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -19,7 +19,6 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, Symbol};\n use rustc_target::spec::abi;\n use smallvec::{smallvec, SmallVec};\n-use std::iter;\n use thin_vec::ThinVec;\n \n pub(super) struct ItemLowerer<'a, 'hir> {\n@@ -179,36 +178,22 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let mut node_ids =\n             smallvec![hir::ItemId { owner_id: hir::OwnerId { def_id: self.local_def_id(i.id) } }];\n         if let ItemKind::Use(use_tree) = &i.kind {\n-            self.lower_item_id_use_tree(use_tree, i.id, &mut node_ids);\n+            self.lower_item_id_use_tree(use_tree, &mut node_ids);\n         }\n         node_ids\n     }\n \n-    fn lower_item_id_use_tree(\n-        &mut self,\n-        tree: &UseTree,\n-        base_id: NodeId,\n-        vec: &mut SmallVec<[hir::ItemId; 1]>,\n-    ) {\n+    fn lower_item_id_use_tree(&mut self, tree: &UseTree, vec: &mut SmallVec<[hir::ItemId; 1]>) {\n         match &tree.kind {\n             UseTreeKind::Nested(nested_vec) => {\n                 for &(ref nested, id) in nested_vec {\n                     vec.push(hir::ItemId {\n                         owner_id: hir::OwnerId { def_id: self.local_def_id(id) },\n                     });\n-                    self.lower_item_id_use_tree(nested, id, vec);\n-                }\n-            }\n-            UseTreeKind::Glob => {}\n-            UseTreeKind::Simple(_, id1, id2) => {\n-                for (_, id) in\n-                    iter::zip(self.expect_full_res_from_use(base_id).skip(1), [*id1, *id2])\n-                {\n-                    vec.push(hir::ItemId {\n-                        owner_id: hir::OwnerId { def_id: self.local_def_id(id) },\n-                    });\n+                    self.lower_item_id_use_tree(nested, vec);\n                 }\n             }\n+            UseTreeKind::Simple(..) | UseTreeKind::Glob => {}\n         }\n     }\n \n@@ -489,7 +474,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let segments = prefix.segments.iter().chain(path.segments.iter()).cloned().collect();\n \n         match tree.kind {\n-            UseTreeKind::Simple(rename, id1, id2) => {\n+            UseTreeKind::Simple(rename) => {\n                 *ident = tree.ident();\n \n                 // First, apply the prefix to the path.\n@@ -505,58 +490,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     }\n                 }\n \n-                let mut resolutions = self.expect_full_res_from_use(id).fuse();\n-                // We want to return *something* from this function, so hold onto the first item\n-                // for later.\n-                let ret_res = smallvec![self.lower_res(resolutions.next().unwrap_or(Res::Err))];\n-\n-                // Here, we are looping over namespaces, if they exist for the definition\n-                // being imported. We only handle type and value namespaces because we\n-                // won't be dealing with macros in the rest of the compiler.\n-                // Essentially a single `use` which imports two names is desugared into\n-                // two imports.\n-                for new_node_id in [id1, id2] {\n-                    let new_id = self.local_def_id(new_node_id);\n-                    let Some(res) = resolutions.next() else {\n-                        debug_assert!(self.children.iter().find(|(id, _)| id == &new_id).is_none());\n-                        // Associate an HirId to both ids even if there is no resolution.\n-                        self.children.push((\n-                            new_id,\n-                            hir::MaybeOwner::NonOwner(hir::HirId::make_owner(new_id))),\n-                        );\n-                        continue;\n-                    };\n-                    let ident = *ident;\n-                    let mut path = path.clone();\n-                    for seg in &mut path.segments {\n-                        // Give the cloned segment the same resolution information\n-                        // as the old one (this is needed for stability checking).\n-                        let new_id = self.next_node_id();\n-                        self.resolver.clone_res(seg.id, new_id);\n-                        seg.id = new_id;\n-                    }\n-                    let span = path.span;\n-\n-                    self.with_hir_id_owner(new_node_id, |this| {\n-                        let res = smallvec![this.lower_res(res)];\n-                        let path = this.lower_use_path(res, &path, ParamMode::Explicit);\n-                        let kind = hir::ItemKind::Use(path, hir::UseKind::Single);\n-                        if let Some(attrs) = attrs {\n-                            this.attrs.insert(hir::ItemLocalId::new(0), attrs);\n-                        }\n-\n-                        let item = hir::Item {\n-                            owner_id: hir::OwnerId { def_id: new_id },\n-                            ident: this.lower_ident(ident),\n-                            kind,\n-                            vis_span,\n-                            span: this.lower_span(span),\n-                        };\n-                        hir::OwnerNode::Item(this.arena.alloc(item))\n-                    });\n-                }\n-\n-                let path = self.lower_use_path(ret_res, &path, ParamMode::Explicit);\n+                let res =\n+                    self.expect_full_res_from_use(id).map(|res| self.lower_res(res)).collect();\n+                let path = self.lower_use_path(res, &path, ParamMode::Explicit);\n                 hir::ItemKind::Use(path, hir::UseKind::Single)\n             }\n             UseTreeKind::Glob => {\n@@ -633,8 +569,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     });\n                 }\n \n-                let res = self.expect_full_res_from_use(id).next().unwrap_or(Res::Err);\n-                let res = smallvec![self.lower_res(res)];\n+                let res =\n+                    self.expect_full_res_from_use(id).map(|res| self.lower_res(res)).collect();\n                 let path = self.lower_use_path(res, &prefix, ParamMode::Explicit);\n                 hir::ItemKind::Use(path, hir::UseKind::ListStem)\n             }"}, {"sha": "e68a7b3f202b3e4238d26675bca20291e5d7df14", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -663,7 +663,7 @@ impl<'a> State<'a> {\n \n     fn print_use_tree(&mut self, tree: &ast::UseTree) {\n         match &tree.kind {\n-            ast::UseTreeKind::Simple(rename, ..) => {\n+            ast::UseTreeKind::Simple(rename) => {\n                 self.print_path(&tree.prefix, false, 0);\n                 if let &Some(rename) = rename {\n                     self.nbsp();"}, {"sha": "d82bc0453f5722c0912c4a9463dcf461daf941ec", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -106,7 +106,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             (\n                 UseTree {\n                     prefix: this.cx.path(this.span, vec![Ident::with_dummy_span(sym)]),\n-                    kind: UseTreeKind::Simple(None, DUMMY_NODE_ID, DUMMY_NODE_ID),\n+                    kind: UseTreeKind::Simple(None),\n                     span: this.span,\n                 },\n                 DUMMY_NODE_ID,"}, {"sha": "a7836ea8e7a4bc5fdd6136e612d92ec28dbdc542", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -1264,7 +1264,7 @@ impl UnusedImportBraces {\n \n             // Trigger the lint if the nested item is a non-self single item\n             let node_name = match items[0].0.kind {\n-                ast::UseTreeKind::Simple(rename, ..) => {\n+                ast::UseTreeKind::Simple(rename) => {\n                     let orig_ident = items[0].0.prefix.segments.last().unwrap().ident;\n                     if orig_ident.name == kw::SelfLower {\n                         return;"}, {"sha": "84c632199203aa76b3a09759ee28309f258c5fe4", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -1012,7 +1012,7 @@ impl<'a> Parser<'a> {\n                     prefix.span = lo.to(self.prev_token.span);\n                 }\n \n-                UseTreeKind::Simple(self.parse_rename()?, DUMMY_NODE_ID, DUMMY_NODE_ID)\n+                UseTreeKind::Simple(self.parse_rename()?)\n             }\n         };\n "}, {"sha": "9c90d67aadf7194c4a79108ac0c35f041716030e", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -445,19 +445,13 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             prefix.is_empty() || prefix.len() == 1 && prefix[0].ident.name == kw::PathRoot\n         };\n         match use_tree.kind {\n-            ast::UseTreeKind::Simple(rename, id1, id2) => {\n+            ast::UseTreeKind::Simple(rename) => {\n                 let mut ident = use_tree.ident();\n                 let mut module_path = prefix;\n                 let mut source = module_path.pop().unwrap();\n                 let mut type_ns_only = false;\n \n                 self.r.visibilities.insert(self.r.local_def_id(id), vis);\n-                if id1 != ast::DUMMY_NODE_ID {\n-                    self.r.visibilities.insert(self.r.local_def_id(id1), vis);\n-                }\n-                if id2 != ast::DUMMY_NODE_ID {\n-                    self.r.visibilities.insert(self.r.local_def_id(id2), vis);\n-                }\n \n                 if nested {\n                     // Correctly handle `self`\n@@ -565,7 +559,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     type_ns_only,\n                     nested,\n                     id,\n-                    additional_ids: (id1, id2),\n                 };\n \n                 self.add_import(module_path, kind, use_tree.span, item, root_span, item.id, vis);\n@@ -621,11 +614,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     let new_span = prefix[prefix.len() - 1].ident.span;\n                     let tree = ast::UseTree {\n                         prefix: ast::Path::from_ident(Ident::new(kw::SelfLower, new_span)),\n-                        kind: ast::UseTreeKind::Simple(\n-                            Some(Ident::new(kw::Underscore, new_span)),\n-                            ast::DUMMY_NODE_ID,\n-                            ast::DUMMY_NODE_ID,\n-                        ),\n+                        kind: ast::UseTreeKind::Simple(Some(Ident::new(kw::Underscore, new_span))),\n                         span: use_tree.span,\n                     };\n                     self.build_reduced_graph_for_use_tree("}, {"sha": "2764a6c28a5e934bc7b74c27acfdf1ad372ece0a", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -158,14 +158,6 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n \n     fn visit_use_tree(&mut self, use_tree: &'a UseTree, id: NodeId, _nested: bool) {\n         self.create_def(id, DefPathData::Use, use_tree.span);\n-        match use_tree.kind {\n-            UseTreeKind::Simple(_, id1, id2) => {\n-                self.create_def(id1, DefPathData::Use, use_tree.prefix.span);\n-                self.create_def(id2, DefPathData::Use, use_tree.prefix.span);\n-            }\n-            UseTreeKind::Glob => (),\n-            UseTreeKind::Nested(..) => {}\n-        }\n         visit::walk_use_tree(self, use_tree, id);\n     }\n "}, {"sha": "85399385d1fd4fb2bd66a9b1244a869011aae057", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -1,4 +1,4 @@\n-use crate::{ImportKind, NameBinding, NameBindingKind, Resolver, ResolverTree};\n+use crate::{NameBinding, NameBindingKind, Resolver, ResolverTree};\n use rustc_ast::ast;\n use rustc_ast::visit;\n use rustc_ast::visit::Visitor;\n@@ -104,28 +104,11 @@ impl<'r, 'a> EffectiveVisibilitiesVisitor<'r, 'a> {\n         for (binding, eff_vis) in visitor.import_effective_visibilities.iter() {\n             let NameBindingKind::Import { import, .. } = binding.kind else { unreachable!() };\n             if let Some(node_id) = import.id() {\n-                let mut update = |node_id| {\n-                    r.effective_visibilities.update_eff_vis(\n-                        r.local_def_id(node_id),\n-                        eff_vis,\n-                        ResolverTree(&r.definitions, &r.crate_loader),\n-                    )\n-                };\n-                update(node_id);\n-                if let ImportKind::Single { additional_ids: (id1, id2), .. } = import.kind {\n-                    // In theory all the single import IDs have individual visibilities and\n-                    // effective visibilities, but in practice these IDs go straight to HIR\n-                    // where all their few uses assume that their (effective) visibility\n-                    // applies to the whole syntactic `use` item. So they all get the same\n-                    // value which is the maximum of all bindings. Maybe HIR for imports\n-                    // shouldn't use three IDs at all.\n-                    if id1 != ast::DUMMY_NODE_ID {\n-                        update(id1);\n-                    }\n-                    if id2 != ast::DUMMY_NODE_ID {\n-                        update(id2);\n-                    }\n-                }\n+                r.effective_visibilities.update_eff_vis(\n+                    r.local_def_id(node_id),\n+                    eff_vis,\n+                    ResolverTree(&r.definitions, &r.crate_loader),\n+                )\n             }\n         }\n "}, {"sha": "e6f4d7fcfcf06b92629d0ca423d9c0ef84ccabbe", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -56,9 +56,6 @@ pub enum ImportKind<'a> {\n         /// If this is the import for `foo::bar::a`, we would have the ID of the `UseTree`\n         /// for `a` in this field.\n         id: NodeId,\n-        /// Additional `NodeId`s allocated to a `ast::UseTree` for automatically generated `use` statement\n-        /// (eg. implicit struct constructors)\n-        additional_ids: (NodeId, NodeId),\n     },\n     Glob {\n         is_prelude: bool,\n@@ -88,7 +85,6 @@ impl<'a> std::fmt::Debug for ImportKind<'a> {\n                 ref type_ns_only,\n                 ref nested,\n                 ref id,\n-                ref additional_ids,\n                 // Ignore the following to avoid an infinite loop while printing.\n                 source_bindings: _,\n                 target_bindings: _,\n@@ -99,7 +95,6 @@ impl<'a> std::fmt::Debug for ImportKind<'a> {\n                 .field(\"type_ns_only\", type_ns_only)\n                 .field(\"nested\", nested)\n                 .field(\"id\", id)\n-                .field(\"additional_ids\", additional_ids)\n                 .finish_non_exhaustive(),\n             Glob { ref is_prelude, ref max_vis, ref id } => f\n                 .debug_struct(\"Glob\")"}, {"sha": "83be1a16eb2c474bd11752530c6f1b357c3c5243", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -225,10 +225,10 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n \n                 types::ItemEnum::Function(_)\n                 | types::ItemEnum::Module(_)\n+                | types::ItemEnum::Import(_)\n                 | types::ItemEnum::AssocConst { .. }\n                 | types::ItemEnum::AssocType { .. } => true,\n                 types::ItemEnum::ExternCrate { .. }\n-                | types::ItemEnum::Import(_)\n                 | types::ItemEnum::StructField(_)\n                 | types::ItemEnum::Variant(_)\n                 | types::ItemEnum::TraitAlias(_)"}, {"sha": "7aaeadd0403cbe5e36115c26eb38cb7fa3b47f8c", "filename": "src/test/ui/consts/miri_unleashed/tls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -2,13 +2,13 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:11:25\n    |\n LL |     unsafe { let _val = A; }\n-   |                         ^ cannot access thread local static (DefId(0:6 ~ tls[78b0]::A))\n+   |                         ^ cannot access thread local static (DefId(0:4 ~ tls[78b0]::A))\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:18:26\n    |\n LL |     unsafe { let _val = &A; }\n-   |                          ^ cannot access thread local static (DefId(0:6 ~ tls[78b0]::A))\n+   |                          ^ cannot access thread local static (DefId(0:4 ~ tls[78b0]::A))\n \n warning: skipping const checks\n    |"}, {"sha": "ed0628bbbc3cce135ed9308d8911b9aa66e14fff", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -9,7 +9,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/generator-print-verbose-1.rs:35:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `Opaque(DefId(0:44 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n@@ -35,17 +35,17 @@ note: required because it's used within this generator\n    |\n LL |     || {\n    |     ^^\n-note: required because it appears within the type `Opaque(DefId(0:45 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n+note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n   --> $DIR/generator-print-verbose-1.rs:41:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required because it appears within the type `Opaque(DefId(0:46 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n   --> $DIR/generator-print-verbose-1.rs:47:34\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `Opaque(DefId(0:46 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n+   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-1.rs:52:20\n    |"}, {"sha": "9e9b2e18abeb85164e1cdbd2f2ef09204bd456de", "filename": "src/test/ui/generic-associated-types/self-outlives-lint.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -108,17 +108,6 @@ LL |     type Bar<'b>;\n    = note: this bound is currently required to ensure that impls have maximum flexibility\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n-error: missing required bound on `Item`\n-  --> $DIR/self-outlives-lint.rs:140:5\n-   |\n-LL |     type Item<'a>;\n-   |     ^^^^^^^^^^^^^-\n-   |                  |\n-   |                  help: add the required where clause: `where Self: 'a`\n-   |\n-   = note: this bound is currently required to ensure that impls have maximum flexibility\n-   = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n-\n error: missing required bound on `Iterator`\n   --> $DIR/self-outlives-lint.rs:142:5\n    |\n@@ -130,6 +119,17 @@ LL |     type Iterator<'a>: Iterator<Item = Self::Item<'a>>;\n    = note: this bound is currently required to ensure that impls have maximum flexibility\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n+error: missing required bound on `Item`\n+  --> $DIR/self-outlives-lint.rs:140:5\n+   |\n+LL |     type Item<'a>;\n+   |     ^^^^^^^^^^^^^-\n+   |                  |\n+   |                  help: add the required where clause: `where Self: 'a`\n+   |\n+   = note: this bound is currently required to ensure that impls have maximum flexibility\n+   = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n+\n error: missing required bound on `Item`\n   --> $DIR/self-outlives-lint.rs:148:5\n    |"}, {"sha": "ff20e20d332884d6cb8526651d3143f16b9141cf", "filename": "src/test/ui/privacy/effective_visibilities.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -72,6 +72,5 @@ mod half_public_import {\n \n #[rustc_effective_visibility]\n pub use half_public_import::HalfPublicImport; //~ ERROR Direct: pub, Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-                                              //~^ ERROR Direct: pub, Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n \n fn main() {}"}, {"sha": "046b6095f4e79b0008cb4c01d1884118b69c6a8e", "filename": "src/test/ui/privacy/effective_visibilities.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Feffective_visibilities.stderr?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -124,12 +124,6 @@ error: Direct: pub, Reexported: pub, Reachable: pub, ReachableThroughImplTrait:\n LL | pub use half_public_import::HalfPublicImport;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Direct: pub, Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n-  --> $DIR/effective_visibilities.rs:74:9\n-   |\n-LL | pub use half_public_import::HalfPublicImport;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImplTrait: pub\n   --> $DIR/effective_visibilities.rs:14:13\n    |\n@@ -142,5 +136,5 @@ error: Direct: pub(crate), Reexported: pub, Reachable: pub, ReachableThroughImpl\n LL |             type B;\n    |             ^^^^^^\n \n-error: aborting due to 24 previous errors\n+error: aborting due to 23 previous errors\n "}, {"sha": "15900bef7f62458493a9a04fb0ae4c7ad900fbf4", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -120,59 +120,59 @@ hir-stats Name                Accumulated Size         Count     Item Size\n hir-stats ----------------------------------------------------------------\n hir-stats ForeignItemRef            24 ( 0.3%)             1            24\n hir-stats Lifetime                  24 ( 0.3%)             1            24\n-hir-stats Mod                       32 ( 0.3%)             1            32\n+hir-stats Mod                       32 ( 0.4%)             1            32\n hir-stats ExprField                 40 ( 0.4%)             1            40\n hir-stats TraitItemRef              56 ( 0.6%)             2            28\n hir-stats Local                     64 ( 0.7%)             1            64\n hir-stats Param                     64 ( 0.7%)             2            32\n hir-stats InlineAsm                 72 ( 0.8%)             1            72\n hir-stats ImplItemRef               72 ( 0.8%)             2            36\n-hir-stats Body                      96 ( 1.0%)             3            32\n-hir-stats FieldDef                  96 ( 1.0%)             2            48\n-hir-stats Arm                       96 ( 1.0%)             2            48\n-hir-stats Stmt                      96 ( 1.0%)             3            32\n-hir-stats - Local                     32 ( 0.3%)             1\n-hir-stats - Semi                      32 ( 0.3%)             1\n-hir-stats - Expr                      32 ( 0.3%)             1\n+hir-stats Body                      96 ( 1.1%)             3            32\n+hir-stats FieldDef                  96 ( 1.1%)             2            48\n+hir-stats Arm                       96 ( 1.1%)             2            48\n+hir-stats Stmt                      96 ( 1.1%)             3            32\n+hir-stats - Local                     32 ( 0.4%)             1\n+hir-stats - Semi                      32 ( 0.4%)             1\n+hir-stats - Expr                      32 ( 0.4%)             1\n hir-stats FnDecl                   120 ( 1.3%)             3            40\n hir-stats Attribute                128 ( 1.4%)             4            32\n hir-stats GenericArg               128 ( 1.4%)             4            32\n-hir-stats - Type                      32 ( 0.3%)             1\n-hir-stats - Lifetime                  96 ( 1.0%)             3\n+hir-stats - Type                      32 ( 0.4%)             1\n+hir-stats - Lifetime                  96 ( 1.1%)             3\n hir-stats GenericArgs              144 ( 1.6%)             3            48\n hir-stats Variant                  176 ( 1.9%)             2            88\n hir-stats GenericBound             192 ( 2.1%)             4            48\n hir-stats - Trait                    192 ( 2.1%)             4\n hir-stats WherePredicate           192 ( 2.1%)             3            64\n hir-stats - BoundPredicate           192 ( 2.1%)             3\n-hir-stats Block                    288 ( 3.1%)             6            48\n-hir-stats Pat                      360 ( 3.9%)             5            72\n+hir-stats Block                    288 ( 3.2%)             6            48\n+hir-stats Pat                      360 ( 4.0%)             5            72\n hir-stats - Wild                      72 ( 0.8%)             1\n hir-stats - Struct                    72 ( 0.8%)             1\n hir-stats - Binding                  216 ( 2.4%)             3\n hir-stats GenericParam             400 ( 4.4%)             5            80\n-hir-stats Generics                 560 ( 6.1%)            10            56\n-hir-stats Ty                       720 ( 7.9%)            15            48\n+hir-stats Generics                 560 ( 6.2%)            10            56\n+hir-stats Ty                       720 ( 8.0%)            15            48\n hir-stats - Ptr                       48 ( 0.5%)             1\n hir-stats - Rptr                      48 ( 0.5%)             1\n-hir-stats - Path                     624 ( 6.8%)            13\n-hir-stats Expr                     768 ( 8.4%)            12            64\n+hir-stats - Path                     624 ( 6.9%)            13\n+hir-stats Expr                     768 ( 8.5%)            12            64\n hir-stats - Path                      64 ( 0.7%)             1\n hir-stats - Struct                    64 ( 0.7%)             1\n hir-stats - Match                     64 ( 0.7%)             1\n hir-stats - InlineAsm                 64 ( 0.7%)             1\n hir-stats - Lit                      128 ( 1.4%)             2\n hir-stats - Block                    384 ( 4.2%)             6\n-hir-stats Item                     960 (10.5%)            12            80\n+hir-stats Item                     880 ( 9.7%)            11            80\n hir-stats - Trait                     80 ( 0.9%)             1\n hir-stats - Enum                      80 ( 0.9%)             1\n hir-stats - ExternCrate               80 ( 0.9%)             1\n hir-stats - ForeignMod                80 ( 0.9%)             1\n hir-stats - Impl                      80 ( 0.9%)             1\n-hir-stats - Fn                       160 ( 1.7%)             2\n-hir-stats - Use                      400 ( 4.4%)             5\n-hir-stats Path                   1_280 (14.0%)            32            40\n-hir-stats PathSegment            1_920 (20.9%)            40            48\n+hir-stats - Fn                       160 ( 1.8%)             2\n+hir-stats - Use                      320 ( 3.5%)             4\n+hir-stats Path                   1_240 (13.7%)            31            40\n+hir-stats PathSegment            1_920 (21.2%)            40            48\n hir-stats ----------------------------------------------------------------\n-hir-stats Total                  9_168\n+hir-stats Total                  9_048\n hir-stats"}, {"sha": "d46f6a6352c63ead2b1418c911e887ce0eaefe4b", "filename": "src/tools/clippy/clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -149,7 +149,7 @@ impl SingleComponentPathImports {\n \n                 // keep track of `use some_module;` usages\n                 if segments.len() == 1 {\n-                    if let UseTreeKind::Simple(None, _, _) = use_tree.kind {\n+                    if let UseTreeKind::Simple(None) = use_tree.kind {\n                         let name = segments[0].ident.name;\n                         if !macros.contains(&name) {\n                             single_use_usages.push(SingleUse {\n@@ -169,7 +169,7 @@ impl SingleComponentPathImports {\n                         for tree in trees {\n                             let segments = &tree.0.prefix.segments;\n                             if segments.len() == 1 {\n-                                if let UseTreeKind::Simple(None, _, _) = tree.0.kind {\n+                                if let UseTreeKind::Simple(None) = tree.0.kind {\n                                     let name = segments[0].ident.name;\n                                     if !macros.contains(&name) {\n                                         single_use_usages.push(SingleUse {"}, {"sha": "397633f533b22c767b3e1186d4f172c9341e31c2", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_self_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_self_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_self_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_self_imports.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -57,7 +57,7 @@ impl EarlyLintPass for UnnecessarySelfImports {\n                             format!(\n                                 \"{}{};\",\n                                 last_segment.ident,\n-                                if let UseTreeKind::Simple(Some(alias), ..) = self_tree.kind { format!(\" as {alias}\") } else { String::new() },\n+                                if let UseTreeKind::Simple(Some(alias)) = self_tree.kind { format!(\" as {alias}\") } else { String::new() },\n                             ),\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "7ee785804f0a564ad9b2a68cc46d75022159aec5", "filename": "src/tools/clippy/clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -39,7 +39,7 @@ impl EarlyLintPass for UnsafeNameRemoval {\n \n fn check_use_tree(use_tree: &UseTree, cx: &EarlyContext<'_>, span: Span) {\n     match use_tree.kind {\n-        UseTreeKind::Simple(Some(new_name), ..) => {\n+        UseTreeKind::Simple(Some(new_name)) => {\n             let old_name = use_tree\n                 .prefix\n                 .segments\n@@ -48,7 +48,7 @@ fn check_use_tree(use_tree: &UseTree, cx: &EarlyContext<'_>, span: Span) {\n                 .ident;\n             unsafe_to_safe_check(old_name, new_name, cx, span);\n         },\n-        UseTreeKind::Simple(None, ..) | UseTreeKind::Glob => {},\n+        UseTreeKind::Simple(None) | UseTreeKind::Glob => {},\n         UseTreeKind::Nested(ref nested_use_tree) => {\n             for (use_tree, _) in nested_use_tree {\n                 check_use_tree(use_tree, cx, span);"}, {"sha": "49e5f283db08904b5e273449a9f3696343dcab3a", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -566,7 +566,7 @@ pub fn eq_use_tree_kind(l: &UseTreeKind, r: &UseTreeKind) -> bool {\n     use UseTreeKind::*;\n     match (l, r) {\n         (Glob, Glob) => true,\n-        (Simple(l, _, _), Simple(r, _, _)) => both(l, r, |l, r| eq_id(*l, *r)),\n+        (Simple(l), Simple(r)) => both(l, r, |l, r| eq_id(*l, *r)),\n         (Nested(l), Nested(r)) => over(l, r, |(l, _), (r, _)| eq_use_tree(l, r)),\n         _ => false,\n     }"}, {"sha": "61843124ccd91f03e3b4cd760aeccb1b7fc40102", "filename": "src/tools/clippy/tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.stderr?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -1,8 +1,8 @@\n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:23:5\n+  --> $DIR/macro_use_imports.rs:25:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`\n    |\n    = note: `-D clippy::macro-use-imports` implied by `-D warnings`\n \n@@ -13,10 +13,10 @@ LL |     #[macro_use]\n    |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mini_mac::ClippyMiniMacroTest;`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:25:5\n+  --> $DIR/macro_use_imports.rs:23:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n   --> $DIR/macro_use_imports.rs:19:5"}, {"sha": "d9dc8d004aff42d4b24eea2c400ca33c6dfecbd1", "filename": "src/tools/rustfmt/src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftools%2Frustfmt%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b32a4edb2078ca61ebcd9bad993905873f4a990a/src%2Ftools%2Frustfmt%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fimports.rs?ref=b32a4edb2078ca61ebcd9bad993905873f4a990a", "patch": "@@ -490,7 +490,7 @@ impl UseTree {\n                 );\n                 result.path.push(UseSegment { kind, version });\n             }\n-            UseTreeKind::Simple(ref rename, ..) => {\n+            UseTreeKind::Simple(ref rename) => {\n                 // If the path has leading double colons and is composed of only 2 segments, then we\n                 // bypass the call to path_to_imported_ident which would get only the ident and\n                 // lose the path root, e.g., `that` in `::that`."}]}