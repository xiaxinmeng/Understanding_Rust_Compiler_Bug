{"sha": "3840d505168652cd4115b24613077ee9d571ff44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NDBkNTA1MTY4NjUyY2Q0MTE1YjI0NjEzMDc3ZWU5ZDU3MWZmNDQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T04:35:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:29Z"}, "message": "librustc: De-`@mut` the variable bindings in the inference context", "tree": {"sha": "195a28f6c53d22bd435650e36227d521a319ebcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/195a28f6c53d22bd435650e36227d521a319ebcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3840d505168652cd4115b24613077ee9d571ff44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3840d505168652cd4115b24613077ee9d571ff44", "html_url": "https://github.com/rust-lang/rust/commit/3840d505168652cd4115b24613077ee9d571ff44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3840d505168652cd4115b24613077ee9d571ff44/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "984b567f9e5bb7153634bbdbc9661e8b8a6c8c63", "url": "https://api.github.com/repos/rust-lang/rust/commits/984b567f9e5bb7153634bbdbc9661e8b8a6c8c63", "html_url": "https://github.com/rust-lang/rust/commit/984b567f9e5bb7153634bbdbc9661e8b8a6c8c63"}], "stats": {"total": 78, "additions": 45, "deletions": 33}, "files": [{"sha": "bb3289930ff87fbae3c6d3a11107c40a862254b1", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3840d505168652cd4115b24613077ee9d571ff44/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3840d505168652cd4115b24613077ee9d571ff44/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=3840d505168652cd4115b24613077ee9d571ff44", "patch": "@@ -35,7 +35,7 @@ use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::unify::{ValsAndBindings, Root};\n use middle::typeck::infer::error_reporting::ErrorReporting;\n-use std::cell::Cell;\n+use std::cell::{Cell, RefCell};\n use std::hashmap::HashMap;\n use std::result;\n use std::vec;\n@@ -80,15 +80,17 @@ pub struct InferCtxt {\n     // We instantiate ValsAndBindings with bounds<ty::t> because the\n     // types that might instantiate a general type variable have an\n     // order, represented by its upper and lower bounds.\n-    ty_var_bindings: ValsAndBindings<ty::TyVid, Bounds<ty::t>>,\n+    ty_var_bindings: RefCell<ValsAndBindings<ty::TyVid, Bounds<ty::t>>>,\n     ty_var_counter: Cell<uint>,\n \n     // Map from integral variable to the kind of integer it represents\n-    int_var_bindings: ValsAndBindings<ty::IntVid, Option<IntVarValue>>,\n+    int_var_bindings: RefCell<ValsAndBindings<ty::IntVid,\n+                                              Option<IntVarValue>>>,\n     int_var_counter: Cell<uint>,\n \n     // Map from floating variable to the kind of float it represents\n-    float_var_bindings: ValsAndBindings<ty::FloatVid, Option<ast::float_ty>>,\n+    float_var_bindings: RefCell<ValsAndBindings<ty::FloatVid,\n+                                                Option<ast::float_ty>>>,\n     float_var_counter: Cell<uint>,\n \n     // For region variables.\n@@ -260,13 +262,13 @@ pub fn new_infer_ctxt(tcx: ty::ctxt) -> @mut InferCtxt {\n     @mut InferCtxt {\n         tcx: tcx,\n \n-        ty_var_bindings: new_ValsAndBindings(),\n+        ty_var_bindings: RefCell::new(new_ValsAndBindings()),\n         ty_var_counter: Cell::new(0),\n \n-        int_var_bindings: new_ValsAndBindings(),\n+        int_var_bindings: RefCell::new(new_ValsAndBindings()),\n         int_var_counter: Cell::new(0),\n \n-        float_var_bindings: new_ValsAndBindings(),\n+        float_var_bindings: RefCell::new(new_ValsAndBindings()),\n         float_var_counter: Cell::new(0),\n \n         region_vars: RegionVarBindings(tcx),\n@@ -522,25 +524,25 @@ impl InferCtxt {\n     }\n \n     pub fn start_snapshot(&mut self) -> Snapshot {\n+        let ty_var_bindings = self.ty_var_bindings.borrow();\n+        let int_var_bindings = self.int_var_bindings.borrow();\n+        let float_var_bindings = self.float_var_bindings.borrow();\n         Snapshot {\n-            ty_var_bindings_len:\n-                self.ty_var_bindings.bindings.len(),\n-            int_var_bindings_len:\n-                self.int_var_bindings.bindings.len(),\n-            float_var_bindings_len:\n-                self.float_var_bindings.bindings.len(),\n-            region_vars_snapshot:\n-                self.region_vars.start_snapshot(),\n+            ty_var_bindings_len: ty_var_bindings.get().bindings.len(),\n+            int_var_bindings_len: int_var_bindings.get().bindings.len(),\n+            float_var_bindings_len: float_var_bindings.get().bindings.len(),\n+            region_vars_snapshot: self.region_vars.start_snapshot(),\n         }\n     }\n \n     pub fn rollback_to(&mut self, snapshot: &Snapshot) {\n         debug!(\"rollback!\");\n-        rollback_to(&mut self.ty_var_bindings, snapshot.ty_var_bindings_len);\n-\n-        rollback_to(&mut self.int_var_bindings,\n-                    snapshot.int_var_bindings_len);\n-        rollback_to(&mut self.float_var_bindings,\n+        let mut ty_var_bindings = self.ty_var_bindings.borrow_mut();\n+        let mut int_var_bindings = self.int_var_bindings.borrow_mut();\n+        let mut float_var_bindings = self.float_var_bindings.borrow_mut();\n+        rollback_to(ty_var_bindings.get(), snapshot.ty_var_bindings_len);\n+        rollback_to(int_var_bindings.get(), snapshot.int_var_bindings_len);\n+        rollback_to(float_var_bindings.get(),\n                     snapshot.float_var_bindings_len);\n \n         self.region_vars.rollback_to(snapshot.region_vars_snapshot);\n@@ -554,8 +556,10 @@ impl InferCtxt {\n         indent(|| {\n             let r = self.try(|| f());\n \n-            self.ty_var_bindings.bindings.truncate(0);\n-            self.int_var_bindings.bindings.truncate(0);\n+            let mut ty_var_bindings = self.ty_var_bindings.borrow_mut();\n+            let mut int_var_bindings = self.int_var_bindings.borrow_mut();\n+            ty_var_bindings.get().bindings.truncate(0);\n+            int_var_bindings.get().bindings.truncate(0);\n             self.region_vars.commit();\n             r\n         })\n@@ -603,7 +607,8 @@ impl InferCtxt {\n         let id = self.ty_var_counter.get();\n         self.ty_var_counter.set(id + 1);\n         {\n-            let vals = &mut self.ty_var_bindings.vals;\n+            let mut ty_var_bindings = self.ty_var_bindings.borrow_mut();\n+            let vals = &mut ty_var_bindings.get().vals;\n             vals.insert(id, Root(Bounds { lb: None, ub: None }, 0u));\n         }\n         return TyVid(id);\n@@ -619,8 +624,9 @@ impl InferCtxt {\n \n     pub fn next_int_var_id(&mut self) -> IntVid {\n         let mut int_var_counter = self.int_var_counter.get();\n+        let mut int_var_bindings = self.int_var_bindings.borrow_mut();\n         let result = IntVid(next_simple_var(&mut int_var_counter,\n-                                            &mut self.int_var_bindings));\n+                                            int_var_bindings.get()));\n         self.int_var_counter.set(int_var_counter);\n         result\n     }\n@@ -631,8 +637,9 @@ impl InferCtxt {\n \n     pub fn next_float_var_id(&mut self) -> FloatVid {\n         let mut float_var_counter = self.float_var_counter.get();\n+        let mut float_var_bindings = self.float_var_bindings.borrow_mut();\n         let result = FloatVid(next_simple_var(&mut float_var_counter,\n-                                              &mut self.float_var_bindings));\n+                                              float_var_bindings.get()));\n         self.float_var_counter.set(float_var_counter);\n         result\n     }"}, {"sha": "2294fb5244258ff9e5513d7bb174491d8d45d9b9", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3840d505168652cd4115b24613077ee9d571ff44/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3840d505168652cd4115b24613077ee9d571ff44/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=3840d505168652cd4115b24613077ee9d571ff44", "patch": "@@ -16,6 +16,7 @@ use middle::ty;\n use middle::typeck::infer::{Bounds, uok, ures};\n use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::to_str::InferStr;\n+use std::cell::RefCell;\n use syntax::ast;\n \n #[deriving(Clone)]\n@@ -37,7 +38,8 @@ pub struct Node<V, T> {\n \n pub trait UnifyVid<T> {\n     fn appropriate_vals_and_bindings<'v>(infcx: &'v mut InferCtxt)\n-                                      -> &'v mut ValsAndBindings<Self, T>;\n+                                      -> &'v mut RefCell<ValsAndBindings<Self,\n+                                                                         T>>;\n }\n \n pub trait UnifyInferCtxtMethods {\n@@ -74,7 +76,8 @@ impl UnifyInferCtxtMethods for InferCtxt {\n \n         let tcx = self.tcx;\n         let vb = UnifyVid::appropriate_vals_and_bindings(self);\n-        return helper(tcx, vb, vid);\n+        let mut vb = vb.borrow_mut();\n+        return helper(tcx, vb.get(), vid);\n \n         fn helper<T:Clone, V:Clone+Eq+Vid>(\n             tcx: ty::ctxt,\n@@ -120,9 +123,10 @@ impl UnifyInferCtxtMethods for InferCtxt {\n                vid.to_str(), new_v.inf_str(self));\n \n         let vb = UnifyVid::appropriate_vals_and_bindings(self);\n-        let old_v = (*vb.vals.get(&vid.to_uint())).clone();\n-        vb.bindings.push((vid.clone(), old_v));\n-        vb.vals.insert(vid.to_uint(), new_v);\n+        let mut vb = vb.borrow_mut();\n+        let old_v = (*vb.get().vals.get(&vid.to_uint())).clone();\n+        vb.get().bindings.push((vid.clone(), old_v));\n+        vb.get().vals.insert(vid.to_uint(), new_v);\n     }\n \n     fn unify<T:Clone + InferStr,\n@@ -275,14 +279,14 @@ impl InferCtxtMethods for InferCtxt {\n \n impl UnifyVid<Bounds<ty::t>> for ty::TyVid {\n     fn appropriate_vals_and_bindings<'v>(infcx: &'v mut InferCtxt)\n-        -> &'v mut ValsAndBindings<ty::TyVid, Bounds<ty::t>> {\n+        -> &'v mut RefCell<ValsAndBindings<ty::TyVid, Bounds<ty::t>>> {\n         return &mut infcx.ty_var_bindings;\n     }\n }\n \n impl UnifyVid<Option<IntVarValue>> for ty::IntVid {\n     fn appropriate_vals_and_bindings<'v>(infcx: &'v mut InferCtxt)\n-        -> &'v mut ValsAndBindings<ty::IntVid, Option<IntVarValue>> {\n+        -> &'v mut RefCell<ValsAndBindings<ty::IntVid, Option<IntVarValue>>> {\n         return &mut infcx.int_var_bindings;\n     }\n }\n@@ -295,7 +299,8 @@ impl SimplyUnifiable for IntVarValue {\n \n impl UnifyVid<Option<ast::float_ty>> for ty::FloatVid {\n     fn appropriate_vals_and_bindings<'v>(infcx: &'v mut InferCtxt)\n-        -> &'v mut ValsAndBindings<ty::FloatVid, Option<ast::float_ty>> {\n+        -> &'v mut RefCell<ValsAndBindings<ty::FloatVid,\n+                                           Option<ast::float_ty>>> {\n         return &mut infcx.float_var_bindings;\n     }\n }"}]}