{"sha": "751e343ab2714bbbc4e2622d650f65466b98d676", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MWUzNDNhYjI3MTRiYmJjNGUyNjIyZDY1MGY2NTQ2NmI5OGQ2NzY=", "commit": {"author": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-19T12:13:53Z"}, "committer": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-19T12:13:53Z"}, "message": "Use intra-doc linkks", "tree": {"sha": "d845c6e6b93d0bce2d9d50fa522612d0a004c328", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d845c6e6b93d0bce2d9d50fa522612d0a004c328"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/751e343ab2714bbbc4e2622d650f65466b98d676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/751e343ab2714bbbc4e2622d650f65466b98d676", "html_url": "https://github.com/rust-lang/rust/commit/751e343ab2714bbbc4e2622d650f65466b98d676", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/751e343ab2714bbbc4e2622d650f65466b98d676/comments", "author": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d339cfe4a120cfcd6db33e8c57efd040e5764738", "url": "https://api.github.com/repos/rust-lang/rust/commits/d339cfe4a120cfcd6db33e8c57efd040e5764738", "html_url": "https://github.com/rust-lang/rust/commit/d339cfe4a120cfcd6db33e8c57efd040e5764738"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "3f7cd96ab4807baad096de4673f3871a2eaf02ee", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/751e343ab2714bbbc4e2622d650f65466b98d676/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751e343ab2714bbbc4e2622d650f65466b98d676/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=751e343ab2714bbbc4e2622d650f65466b98d676", "patch": "@@ -931,7 +931,7 @@ extern \"rust-intrinsic\" {\n     /// reach code marked with this function.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::hint::unreachable_unchecked`](../../std/hint/fn.unreachable_unchecked.html).\n+    /// [`std::hint::unreachable_unchecked`](crate::hint::unreachable_unchecked).\n     #[rustc_const_unstable(feature = \"const_unreachable_unchecked\", issue = \"53188\")]\n     pub fn unreachable() -> !;\n \n@@ -1016,7 +1016,7 @@ extern \"rust-intrinsic\" {\n     /// Gets a static string slice containing the name of a type.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::any::type_name`](../../std/any/fn.type_name.html)\n+    /// [`std::any::type_name`](crate::any::type_name)\n     #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n     pub fn type_name<T: ?Sized>() -> &'static str;\n \n@@ -1025,7 +1025,7 @@ extern \"rust-intrinsic\" {\n     /// crate it is invoked in.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::any::TypeId::of`](../../std/any/struct.TypeId.html#method.of)\n+    /// [`std::any::TypeId::of`](crate::any::TypeId::of)\n     #[rustc_const_stable(feature = \"const_type_id\", since = \"1.46.0\")]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n@@ -1049,7 +1049,7 @@ extern \"rust-intrinsic\" {\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n     ///\n-    /// Consider using [`std::panic::Location::caller`](../../std/panic/struct.Location.html#method.caller)\n+    /// Consider using [`std::panic::Location::caller`](crate::panic::Location::caller)\n     /// instead.\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"47809\")]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;\n@@ -2053,7 +2053,6 @@ pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -\n /// `copy_nonoverlapping` is semantically equivalent to C's [`memcpy`], but\n /// with the argument order swapped.\n ///\n-/// [`copy`]: ./fn.copy.html\n /// [`memcpy`]: https://en.cppreference.com/w/c/string/byte/memcpy\n ///\n /// # Safety\n@@ -2078,8 +2077,8 @@ pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -\n /// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n /// `0`, the pointers must be non-NULL and properly aligned.\n ///\n-/// [`Copy`]: ../marker/trait.Copy.html\n-/// [`read`]: ../ptr/fn.read.html\n+/// [`Copy`]: crate::marker::Copy\n+/// [`read`]: crate::ptr::read\n /// [read-ownership]: ../ptr/fn.read.html#ownership-of-the-returned-value\n /// [valid]: ../ptr/index.html#safety\n ///\n@@ -2160,7 +2159,6 @@ pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n /// order swapped. Copying takes place as if the bytes were copied from `src`\n /// to a temporary array and then copied from the array to `dst`.\n ///\n-/// [`copy_nonoverlapping`]: ./fn.copy_nonoverlapping.html\n /// [`memmove`]: https://en.cppreference.com/w/c/string/byte/memmove\n ///\n /// # Safety\n@@ -2181,8 +2179,8 @@ pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n /// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n /// `0`, the pointers must be non-NULL and properly aligned.\n ///\n-/// [`Copy`]: ../marker/trait.Copy.html\n-/// [`read`]: ../ptr/fn.read.html\n+/// [`Copy`]: crate::marker::Copy\n+/// [`read`]: crate::ptr::read\n /// [read-ownership]: ../ptr/fn.read.html#ownership-of-the-returned-value\n /// [valid]: ../ptr/index.html#safety\n ///"}]}