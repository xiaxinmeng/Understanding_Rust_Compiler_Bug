{"sha": "b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b", "node_id": "C_kwDOAAsO6NoAKGI4ZWQ0YTM4OGNlOGZiZDMxN2IxZTk0MjMzZjllN2FlMzZlYTA0M2I", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-07T17:08:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-07T17:08:02Z"}, "message": "Merge #11920\n\n11920: Consider types of const generics r=flodiebold a=HKalbasi\n\nfix #11913 \r\n\r\nWe should emit type_mismatch in const generics, probably after #7434. Currently they will lead to a misleading, time of use type error (like the added test).\r\n\n\nCo-authored-by: hkalbasi <hamidrezakalbasi@protonmail.com>", "tree": {"sha": "69a0e2c8560a93dd7aa64309f6cf560d5b08363c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69a0e2c8560a93dd7aa64309f6cf560d5b08363c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTxpyCRBK7hj4Ov3rIwAA5XsIAEpwQMaEXDTDoI42smS81HLX\n9Lhl8shraQttaHkGcxt9XHdPqgDq6px5AWehopTi4JuYoxn2tRGnGIsTxqtcuK4+\n7w4/EvABMTzKkLPVBvrweVwls4xn4+bi5uJg/D5TE/AEBo8oGUF2tUSAowJfvWIm\nWABymAR/WA6842w6L8r9dLVhhGX7YtiiAXXsl58iwB2N3ckEbc330LpMF1wbzKyp\nqT0GBRV4NDnhpg9OwYizRuu4rnzEmCJboo5Dmqeu1+dpXvstROP9OK7inqra6AD2\n1Iqt6sDqJ0Il4JHvUrVnJx4Z2WWYyJr71q+1dq26j3BnRR70gV6E1u5L7Lmq0DQ=\n=Wg43\n-----END PGP SIGNATURE-----\n", "payload": "tree 69a0e2c8560a93dd7aa64309f6cf560d5b08363c\nparent ec871bb8b203bbd631b564b17850898ae874068d\nparent 204a1561b2363f7583868f10939ed9427befdef9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649351282 +0000\ncommitter GitHub <noreply@github.com> 1649351282 +0000\n\nMerge #11920\n\n11920: Consider types of const generics r=flodiebold a=HKalbasi\n\nfix #11913 \r\n\r\nWe should emit type_mismatch in const generics, probably after #7434. Currently they will lead to a misleading, time of use type error (like the added test).\r\n\n\nCo-authored-by: hkalbasi <hamidrezakalbasi@protonmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b", "html_url": "https://github.com/rust-lang/rust/commit/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec871bb8b203bbd631b564b17850898ae874068d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec871bb8b203bbd631b564b17850898ae874068d", "html_url": "https://github.com/rust-lang/rust/commit/ec871bb8b203bbd631b564b17850898ae874068d"}, {"sha": "204a1561b2363f7583868f10939ed9427befdef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/204a1561b2363f7583868f10939ed9427befdef9", "html_url": "https://github.com/rust-lang/rust/commit/204a1561b2363f7583868f10939ed9427befdef9"}], "stats": {"total": 142, "additions": 86, "deletions": 56}, "files": [{"sha": "8c47e9ce1cbec66cb531b9c7742633130ffa5c74", "filename": "crates/hir_ty/src/builder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fbuilder.rs?ref=b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b", "patch": "@@ -154,6 +154,10 @@ impl TyBuilder<()> {\n         TyKind::Tuple(0, Substitution::empty(Interner)).intern(Interner)\n     }\n \n+    pub fn usize() -> Ty {\n+        TyKind::Scalar(chalk_ir::Scalar::Uint(chalk_ir::UintTy::Usize)).intern(Interner)\n+    }\n+\n     pub fn fn_ptr(sig: CallableSig) -> Ty {\n         TyKind::Function(sig.to_fn_ptr()).intern(Interner)\n     }"}, {"sha": "4b58262dace0791cfd143f72a19f7cac2ac6d906", "filename": "crates/hir_ty/src/consteval.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs?ref=b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b", "patch": "@@ -20,7 +20,7 @@ use stdx::never;\n use crate::{\n     db::HirDatabase, infer::InferenceContext, lower::ParamLoweringMode, to_placeholder_idx,\n     utils::Generics, Const, ConstData, ConstValue, GenericArg, InferenceResult, Interner, Ty,\n-    TyKind,\n+    TyBuilder, TyKind,\n };\n \n /// Extension trait for [`Const`]\n@@ -401,23 +401,22 @@ pub fn unknown_const(ty: Ty) -> Const {\n     .intern(Interner)\n }\n \n-pub fn unknown_const_usize() -> Const {\n-    unknown_const(TyKind::Scalar(chalk_ir::Scalar::Uint(chalk_ir::UintTy::Usize)).intern(Interner))\n-}\n-\n pub fn unknown_const_as_generic(ty: Ty) -> GenericArg {\n     GenericArgData::Const(unknown_const(ty)).intern(Interner)\n }\n \n+/// Interns a constant scalar with the given type\n+pub fn intern_scalar_const(value: ConstScalar, ty: Ty) -> Const {\n+    ConstData { ty, value: ConstValue::Concrete(chalk_ir::ConcreteConst { interned: value }) }\n+        .intern(Interner)\n+}\n+\n /// Interns a possibly-unknown target usize\n pub fn usize_const(value: Option<u64>) -> Const {\n-    ConstData {\n-        ty: TyKind::Scalar(chalk_ir::Scalar::Uint(chalk_ir::UintTy::Usize)).intern(Interner),\n-        value: ConstValue::Concrete(chalk_ir::ConcreteConst {\n-            interned: value.map(ConstScalar::Usize).unwrap_or(ConstScalar::Unknown),\n-        }),\n-    }\n-    .intern(Interner)\n+    intern_scalar_const(\n+        value.map(ConstScalar::Usize).unwrap_or(ConstScalar::Unknown),\n+        TyBuilder::usize(),\n+    )\n }\n \n pub(crate) fn const_eval_recover("}, {"sha": "7426a22e6af08a3604890961293124143db3e593", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b", "patch": "@@ -1129,10 +1129,11 @@ impl<'a> InferenceContext<'a> {\n                     arg,\n                     self,\n                     |this, type_ref| this.make_ty(type_ref),\n-                    |this, c| {\n+                    |this, c, ty| {\n                         const_or_path_to_chalk(\n                             this.db,\n                             &this.resolver,\n+                            ty,\n                             c,\n                             ParamLoweringMode::Placeholder,\n                             || generics(this.db.upcast(), (&this.resolver).generic_def().unwrap()),"}, {"sha": "85d8ccc07720f4278263b9ed8f1e32a2323e6f82", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b", "patch": "@@ -35,17 +35,13 @@ use std::sync::Arc;\n use chalk_ir::{\n     fold::{Fold, Shift},\n     interner::HasInterner,\n-    NoSolution, UintTy,\n-};\n-use hir_def::{\n-    expr::ExprId,\n-    type_ref::{ConstScalar, Rawness},\n-    TypeOrConstParamId,\n+    NoSolution,\n };\n+use hir_def::{expr::ExprId, type_ref::Rawness, TypeOrConstParamId};\n use itertools::Either;\n use utils::Generics;\n \n-use crate::{db::HirDatabase, utils::generics};\n+use crate::{consteval::unknown_const, db::HirDatabase, utils::generics};\n \n pub use autoderef::autoderef;\n pub use builder::{ParamKind, TyBuilder};\n@@ -303,17 +299,6 @@ pub fn static_lifetime() -> Lifetime {\n     LifetimeData::Static.intern(Interner)\n }\n \n-pub fn dummy_usize_const() -> Const {\n-    let usize_ty = chalk_ir::TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(Interner);\n-    chalk_ir::ConstData {\n-        ty: usize_ty,\n-        value: chalk_ir::ConstValue::Concrete(chalk_ir::ConcreteConst {\n-            interned: ConstScalar::Unknown,\n-        }),\n-    }\n-    .intern(Interner)\n-}\n-\n pub(crate) fn fold_free_vars<T: HasInterner<Interner = Interner> + Fold<Interner>>(\n     t: T,\n     for_ty: impl FnMut(BoundVar, DebruijnIndex) -> Ty,\n@@ -476,27 +461,27 @@ where\n \n         fn fold_inference_const(\n             &mut self,\n-            _ty: Ty,\n+            ty: Ty,\n             _var: InferenceVar,\n             _outer_binder: DebruijnIndex,\n         ) -> Fallible<Const> {\n             if cfg!(debug_assertions) {\n                 Err(NoSolution)\n             } else {\n-                Ok(dummy_usize_const())\n+                Ok(unknown_const(ty))\n             }\n         }\n \n         fn fold_free_var_const(\n             &mut self,\n-            _ty: Ty,\n+            ty: Ty,\n             _bound_var: BoundVar,\n             _outer_binder: DebruijnIndex,\n         ) -> Fallible<Const> {\n             if cfg!(debug_assertions) {\n                 Err(NoSolution)\n             } else {\n-                Ok(dummy_usize_const())\n+                Ok(unknown_const(ty))\n             }\n         }\n "}, {"sha": "ca6241c5d1a9000505644871791fa546b5343161", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b", "patch": "@@ -37,11 +37,12 @@ use smallvec::SmallVec;\n use stdx::{impl_from, never};\n use syntax::{ast, SmolStr};\n \n-use crate::consteval::{path_to_const, unknown_const_as_generic, unknown_const_usize, usize_const};\n+use crate::consteval::{\n+    intern_scalar_const, path_to_const, unknown_const, unknown_const_as_generic,\n+};\n use crate::utils::Generics;\n use crate::{all_super_traits, make_binders, Const, GenericArgData, ParamKind};\n use crate::{\n-    consteval,\n     db::HirDatabase,\n     mapping::ToChalk,\n     static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n@@ -202,6 +203,7 @@ impl<'a> TyLoweringContext<'a> {\n                 let const_len = const_or_path_to_chalk(\n                     self.db,\n                     self.resolver,\n+                    TyBuilder::usize(),\n                     len,\n                     self.type_param_mode,\n                     || self.generics(),\n@@ -677,12 +679,13 @@ impl<'a> TyLoweringContext<'a> {\n             parent_params + self_params + type_params + const_params + impl_trait_params;\n \n         let ty_error = GenericArgData::Ty(TyKind::Error.intern(Interner)).intern(Interner);\n-        let const_error = GenericArgData::Const(consteval::usize_const(None)).intern(Interner);\n \n-        for (_, data) in def_generics.iter().take(parent_params) {\n-            match data {\n-                TypeOrConstParamData::TypeParamData(_) => substs.push(ty_error.clone()),\n-                TypeOrConstParamData::ConstParamData(_) => substs.push(const_error.clone()),\n+        for eid in def_generics.iter_id().take(parent_params) {\n+            match eid {\n+                Either::Left(_) => substs.push(ty_error.clone()),\n+                Either::Right(x) => {\n+                    substs.push(unknown_const_as_generic(self.db.const_param_ty(x)))\n+                }\n             }\n         }\n \n@@ -722,10 +725,11 @@ impl<'a> TyLoweringContext<'a> {\n                     arg,\n                     &mut (),\n                     |_, type_ref| self.lower_ty(type_ref),\n-                    |_, c| {\n+                    |_, c, ty| {\n                         const_or_path_to_chalk(\n                             self.db,\n                             &self.resolver,\n+                            ty,\n                             c,\n                             self.type_param_mode,\n                             || self.generics(),\n@@ -759,10 +763,12 @@ impl<'a> TyLoweringContext<'a> {\n \n         // add placeholders for args that were not provided\n         // FIXME: emit diagnostics in contexts where this is not allowed\n-        for (_, data) in def_generics.iter().skip(substs.len()) {\n-            match data {\n-                TypeOrConstParamData::TypeParamData(_) => substs.push(ty_error.clone()),\n-                TypeOrConstParamData::ConstParamData(_) => substs.push(const_error.clone()),\n+        for eid in def_generics.iter_id().skip(substs.len()) {\n+            match eid {\n+                Either::Left(_) => substs.push(ty_error.clone()),\n+                Either::Right(x) => {\n+                    substs.push(unknown_const_as_generic(self.db.const_param_ty(x)))\n+                }\n             }\n         }\n         assert_eq!(substs.len(), total_len);\n@@ -1642,7 +1648,7 @@ pub(crate) fn generic_arg_to_chalk<'a, T>(\n     arg: &'a GenericArg,\n     this: &mut T,\n     for_type: impl FnOnce(&mut T, &TypeRef) -> Ty + 'a,\n-    for_const: impl FnOnce(&mut T, &ConstScalarOrPath) -> Const + 'a,\n+    for_const: impl FnOnce(&mut T, &ConstScalarOrPath, Ty) -> Const + 'a,\n ) -> Option<crate::GenericArg> {\n     let kind = match kind_id {\n         Either::Left(_) => ParamKind::Type,\n@@ -1656,13 +1662,13 @@ pub(crate) fn generic_arg_to_chalk<'a, T>(\n             let ty = for_type(this, type_ref);\n             GenericArgData::Ty(ty).intern(Interner)\n         }\n-        (GenericArg::Const(c), ParamKind::Const(_)) => {\n-            GenericArgData::Const(for_const(this, c)).intern(Interner)\n+        (GenericArg::Const(c), ParamKind::Const(c_ty)) => {\n+            GenericArgData::Const(for_const(this, c, c_ty)).intern(Interner)\n         }\n         (GenericArg::Const(_), ParamKind::Type) => {\n             GenericArgData::Ty(TyKind::Error.intern(Interner)).intern(Interner)\n         }\n-        (GenericArg::Type(t), ParamKind::Const(ty)) => {\n+        (GenericArg::Type(t), ParamKind::Const(c_ty)) => {\n             // We want to recover simple idents, which parser detects them\n             // as types. Maybe here is not the best place to do it, but\n             // it works.\n@@ -1671,11 +1677,13 @@ pub(crate) fn generic_arg_to_chalk<'a, T>(\n                 if p.kind == PathKind::Plain {\n                     if let [n] = p.segments() {\n                         let c = ConstScalarOrPath::Path(n.clone());\n-                        return Some(GenericArgData::Const(for_const(this, &c)).intern(Interner));\n+                        return Some(\n+                            GenericArgData::Const(for_const(this, &c, c_ty)).intern(Interner),\n+                        );\n                     }\n                 }\n             }\n-            unknown_const_as_generic(ty)\n+            unknown_const_as_generic(c_ty)\n         }\n         (GenericArg::Lifetime(_), _) => return None,\n     })\n@@ -1684,17 +1692,18 @@ pub(crate) fn generic_arg_to_chalk<'a, T>(\n pub(crate) fn const_or_path_to_chalk(\n     db: &dyn HirDatabase,\n     resolver: &Resolver,\n+    expected_ty: Ty,\n     value: &ConstScalarOrPath,\n     mode: ParamLoweringMode,\n     args: impl FnOnce() -> Generics,\n     debruijn: DebruijnIndex,\n ) -> Const {\n     match value {\n-        ConstScalarOrPath::Scalar(s) => usize_const(s.as_usize()),\n+        ConstScalarOrPath::Scalar(s) => intern_scalar_const(s.clone(), expected_ty),\n         ConstScalarOrPath::Path(n) => {\n             let path = ModPath::from_segments(PathKind::Plain, Some(n.clone()));\n             path_to_const(db, resolver, &path, mode, args, debruijn)\n-                .unwrap_or_else(|| unknown_const_usize())\n+                .unwrap_or_else(|| unknown_const(expected_ty))\n         }\n     }\n }\n@@ -1716,7 +1725,7 @@ fn fallback_bound_vars<T: Fold<Interner> + HasInterner<Interner = Interner>>(\n         },\n         |ty, bound, binders| {\n             if bound.index >= num_vars_to_keep && bound.debruijn == DebruijnIndex::INNERMOST {\n-                consteval::unknown_const(ty.clone())\n+                unknown_const(ty.clone())\n             } else {\n                 bound.shifted_in_from(binders).to_const(Interner, ty)\n             }"}, {"sha": "442268d13524a5605149a71d14c044be9a8efab0", "filename": "crates/ide_diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=b8ed4a388ce8fbd317b1e94233f9e7ae36ea043b", "patch": "@@ -316,6 +316,38 @@ fn div(x: i32, y: i32) -> Option<i32> {\n         );\n     }\n \n+    #[test]\n+    fn const_generic_type_mismatch() {\n+        check_diagnostics(\n+            r#\"\n+            pub struct Rate<const N: u32>;\n+            fn f<const N: u64>() -> Rate<N> { // FIXME: add some error\n+                loop {}\n+            }\n+            fn run(t: Rate<5>) {\n+            }\n+            fn main() {\n+                run(f()) // FIXME: remove this error\n+                  //^^^ error: expected Rate<5>, found Rate<_>\n+            }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn const_generic_unknown() {\n+        check_diagnostics(\n+            r#\"\n+            pub struct Rate<T, const NOM: u32, const DENOM: u32>(T);\n+            fn run(t: Rate<u32, 1, 1>) {\n+            }\n+            fn main() {\n+                run(Rate::<_, _, _>(5));\n+            }\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_wrap_return_type_option_tails() {\n         check_fix("}]}