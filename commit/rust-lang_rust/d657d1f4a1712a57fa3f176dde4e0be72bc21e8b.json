{"sha": "d657d1f4a1712a57fa3f176dde4e0be72bc21e8b", "node_id": "C_kwDOAAsO6NoAKGQ2NTdkMWY0YTE3MTJhNTdmYTNmMTc2ZGRlNGUwYmU3MmJjMjFlOGI", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-14T14:02:48Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-14T17:03:01Z"}, "message": "Disallow defaults on type GATs", "tree": {"sha": "497ab21a0e815c8ee4e1c2481bfbf3791c6d9111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/497ab21a0e815c8ee4e1c2481bfbf3791c6d9111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d657d1f4a1712a57fa3f176dde4e0be72bc21e8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d657d1f4a1712a57fa3f176dde4e0be72bc21e8b", "html_url": "https://github.com/rust-lang/rust/commit/d657d1f4a1712a57fa3f176dde4e0be72bc21e8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d657d1f4a1712a57fa3f176dde4e0be72bc21e8b/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c97922dca563cb7f9385b18dbf7ca8c97f8e1597", "url": "https://api.github.com/repos/rust-lang/rust/commits/c97922dca563cb7f9385b18dbf7ca8c97f8e1597", "html_url": "https://github.com/rust-lang/rust/commit/c97922dca563cb7f9385b18dbf7ca8c97f8e1597"}], "stats": {"total": 115, "additions": 96, "deletions": 19}, "files": [{"sha": "60bd91c867e7a14feb2bf15512ac4e1dba8d4edf", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d657d1f4a1712a57fa3f176dde4e0be72bc21e8b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d657d1f4a1712a57fa3f176dde4e0be72bc21e8b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=d657d1f4a1712a57fa3f176dde4e0be72bc21e8b", "patch": "@@ -1604,6 +1604,13 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         _ => None,\n     };\n \n+    enum Defaults {\n+        Allowed,\n+        // See #36887\n+        FutureCompatDisallowed,\n+        Deny,\n+    }\n+\n     let no_generics = hir::Generics::empty();\n     let ast_generics = node.generics().unwrap_or(&no_generics);\n     let (opt_self, allow_defaults) = match node {\n@@ -1625,17 +1632,26 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                         },\n                     });\n \n-                    (opt_self, true)\n+                    (opt_self, Defaults::Allowed)\n                 }\n                 ItemKind::TyAlias(..)\n                 | ItemKind::Enum(..)\n                 | ItemKind::Struct(..)\n                 | ItemKind::OpaqueTy(..)\n-                | ItemKind::Union(..) => (None, true),\n-                _ => (None, false),\n+                | ItemKind::Union(..) => (None, Defaults::Allowed),\n+                _ => (None, Defaults::FutureCompatDisallowed),\n             }\n         }\n-        _ => (None, false),\n+\n+        // GATs\n+        Node::TraitItem(item) if matches!(item.kind, TraitItemKind::Type(..)) => {\n+            (None, Defaults::Deny)\n+        }\n+        Node::ImplItem(item) if matches!(item.kind, ImplItemKind::TyAlias(..)) => {\n+            (None, Defaults::Deny)\n+        }\n+\n+        _ => (None, Defaults::FutureCompatDisallowed),\n     };\n \n     let has_self = opt_self.is_some();\n@@ -1668,23 +1684,30 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     let type_start = own_start - has_self as u32 + params.len() as u32;\n     let mut i = 0;\n \n+    const TYPE_DEFAULT_NOT_ALLOWED: &'static str = \"defaults for type parameters are only allowed in \\\n+    `struct`, `enum`, `type`, or `trait` definitions\";\n+\n     params.extend(ast_generics.params.iter().filter_map(|param| match param.kind {\n         GenericParamKind::Lifetime { .. } => None,\n         GenericParamKind::Type { ref default, synthetic, .. } => {\n-            if !allow_defaults && default.is_some() {\n-                if !tcx.features().default_type_parameter_fallback {\n-                    tcx.struct_span_lint_hir(\n-                        lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n-                        param.hir_id,\n-                        param.span,\n-                        |lint| {\n-                            lint.build(\n-                                \"defaults for type parameters are only allowed in \\\n-                                 `struct`, `enum`, `type`, or `trait` definitions\",\n-                            )\n-                            .emit();\n-                        },\n-                    );\n+            if default.is_some() {\n+                match allow_defaults {\n+                    Defaults::Allowed => {}\n+                    Defaults::FutureCompatDisallowed\n+                        if tcx.features().default_type_parameter_fallback => {}\n+                    Defaults::FutureCompatDisallowed => {\n+                        tcx.struct_span_lint_hir(\n+                            lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n+                            param.hir_id,\n+                            param.span,\n+                            |lint| {\n+                                lint.build(TYPE_DEFAULT_NOT_ALLOWED).emit();\n+                            },\n+                        );\n+                    }\n+                    Defaults::Deny => {\n+                        tcx.sess.span_err(param.span, TYPE_DEFAULT_NOT_ALLOWED);\n+                    }\n                 }\n             }\n \n@@ -1701,7 +1724,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             Some(param_def)\n         }\n         GenericParamKind::Const { default, .. } => {\n-            if !allow_defaults && default.is_some() {\n+            if !matches!(allow_defaults, Defaults::Allowed) && default.is_some() {\n                 tcx.sess.span_err(\n                     param.span,\n                     \"defaults for const parameters are only allowed in \\"}, {"sha": "f034076b01093aed18f4a3eaf60466bf05cbfa0d", "filename": "src/test/ui/generic-associated-types/type-param-defaults.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d657d1f4a1712a57fa3f176dde4e0be72bc21e8b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftype-param-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d657d1f4a1712a57fa3f176dde4e0be72bc21e8b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftype-param-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftype-param-defaults.rs?ref=d657d1f4a1712a57fa3f176dde4e0be72bc21e8b", "patch": "@@ -0,0 +1,34 @@\n+// Check that we disallow GAT param defaults, even with `invalid_type_param_default` allowed\n+\n+#![allow(invalid_type_param_default)]\n+\n+trait Trait {\n+    type Assoc<T = u32>;\n+    //~^ defaults for type parameters are only allowed\n+}\n+\n+impl Trait for () {\n+    type Assoc<T = u32> = u64;\n+    //~^ defaults for type parameters are only allowed\n+}\n+\n+impl Trait for u32 {\n+    type Assoc<T = u32> = T;\n+    //~^ defaults for type parameters are only allowed\n+}\n+\n+trait Other {}\n+impl Other for u32 {}\n+\n+fn foo<T>()\n+where\n+    T: Trait<Assoc = u32>,\n+    T::Assoc: Other {\n+    }\n+\n+fn main() {\n+    // errors\n+    foo::<()>();\n+    // works\n+    foo::<u32>();\n+}"}, {"sha": "85ccaba0e69e721a40b70821dc7776ce0849c7a4", "filename": "src/test/ui/generic-associated-types/type-param-defaults.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d657d1f4a1712a57fa3f176dde4e0be72bc21e8b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftype-param-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d657d1f4a1712a57fa3f176dde4e0be72bc21e8b/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftype-param-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftype-param-defaults.stderr?ref=d657d1f4a1712a57fa3f176dde4e0be72bc21e8b", "patch": "@@ -0,0 +1,20 @@\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/type-param-defaults.rs:6:16\n+   |\n+LL |     type Assoc<T = u32>;\n+   |                ^^^^^^^\n+\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/type-param-defaults.rs:11:16\n+   |\n+LL |     type Assoc<T = u32> = u64;\n+   |                ^^^^^^^\n+\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/type-param-defaults.rs:16:16\n+   |\n+LL |     type Assoc<T = u32> = T;\n+   |                ^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}