{"sha": "2477bc4451dc93b9e89c3e1e1621b4333675d94b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NzdiYzQ0NTFkYzkzYjllODljM2UxZTE2MjFiNDMzMzY3NWQ5NGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-14T10:55:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-19T11:20:20Z"}, "message": "Update libcollections tests to pass the new type rules. They used to return a pointer to the value they were modifying, but this should not have been legal, since that pointer would have to outlive the closure, and the closure continues to modify the value during the execution. This return value was just passed to `black_box` so as to convince llvm that the value was live, so rather than returning a pointer, modify to just call `black_box` directly inside the fn.", "tree": {"sha": "ba2b7fe188d382f570c2cee6212fa4620f01543d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba2b7fe188d382f570c2cee6212fa4620f01543d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2477bc4451dc93b9e89c3e1e1621b4333675d94b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2477bc4451dc93b9e89c3e1e1621b4333675d94b", "html_url": "https://github.com/rust-lang/rust/commit/2477bc4451dc93b9e89c3e1e1621b4333675d94b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2477bc4451dc93b9e89c3e1e1621b4333675d94b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b6ec701974096b68e666693b8a750fb6a5d65c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6ec701974096b68e666693b8a750fb6a5d65c6", "html_url": "https://github.com/rust-lang/rust/commit/0b6ec701974096b68e666693b8a750fb6a5d65c6"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "64abc78daf309c70f2e379ed445d9e053d7f5f70", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2477bc4451dc93b9e89c3e1e1621b4333675d94b/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2477bc4451dc93b9e89c3e1e1621b4333675d94b/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=2477bc4451dc93b9e89c3e1e1621b4333675d94b", "patch": "@@ -1678,10 +1678,10 @@ impl<'a> Iterator<uint> for TwoBitPositions<'a> {\n mod tests {\n     use std::prelude::*;\n     use std::iter::range_step;\n-    use std::u32;\n     use std::rand;\n     use std::rand::Rng;\n-    use test::Bencher;\n+    use std::u32;\n+    use test::{Bencher, black_box};\n \n     use super::{Bitv, BitvSet, from_fn, from_bytes};\n     use bitv;\n@@ -2676,8 +2676,8 @@ mod tests {\n             for _ in range(0u, 100) {\n                 bitv |= 1 << ((r.next_u32() as uint) % u32::BITS);\n             }\n-            &bitv\n-        })\n+            black_box(&bitv)\n+        });\n     }\n \n     #[bench]\n@@ -2688,8 +2688,8 @@ mod tests {\n             for _ in range(0u, 100) {\n                 bitv.set((r.next_u32() as uint) % BENCH_BITS, true);\n             }\n-            &bitv\n-        })\n+            black_box(&bitv)\n+        });\n     }\n \n     #[bench]\n@@ -2700,8 +2700,8 @@ mod tests {\n             for _ in range(0u, 100) {\n                 bitv.set((r.next_u32() as uint) % BENCH_BITS, r.gen());\n             }\n-            &bitv\n-        })\n+            black_box(&bitv);\n+        });\n     }\n \n     #[bench]\n@@ -2712,8 +2712,8 @@ mod tests {\n             for _ in range(0u, 100) {\n                 bitv.set((r.next_u32() as uint) % u32::BITS, true);\n             }\n-            &bitv\n-        })\n+            black_box(&bitv);\n+        });\n     }\n \n     #[bench]\n@@ -2724,8 +2724,8 @@ mod tests {\n             for _ in range(0u, 100) {\n                 bitv.insert((r.next_u32() as uint) % u32::BITS);\n             }\n-            &bitv\n-        })\n+            black_box(&bitv);\n+        });\n     }\n \n     #[bench]\n@@ -2736,8 +2736,8 @@ mod tests {\n             for _ in range(0u, 100) {\n                 bitv.insert((r.next_u32() as uint) % BENCH_BITS);\n             }\n-            &bitv\n-        })\n+            black_box(&bitv);\n+        });\n     }\n \n     #[bench]"}, {"sha": "5e341ba8b04d3b2e90e19cb5717a5d3ee762915d", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2477bc4451dc93b9e89c3e1e1621b4333675d94b/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2477bc4451dc93b9e89c3e1e1621b4333675d94b/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=2477bc4451dc93b9e89c3e1e1621b4333675d94b", "patch": "@@ -2084,7 +2084,7 @@ mod bench {\n     use std::rand::{weak_rng, Rng};\n     use std::mem;\n     use std::ptr;\n-    use test::Bencher;\n+    use test::{Bencher, black_box};\n \n     use vec::Vec;\n \n@@ -2140,8 +2140,8 @@ mod bench {\n         let mut vec: Vec<uint> = vec![];\n         b.iter(|| {\n             vec.push(0);\n-            &vec\n-        })\n+            black_box(&vec);\n+        });\n     }\n \n     #[bench]"}]}