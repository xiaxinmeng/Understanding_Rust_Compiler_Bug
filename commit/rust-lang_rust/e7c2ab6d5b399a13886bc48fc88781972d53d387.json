{"sha": "e7c2ab6d5b399a13886bc48fc88781972d53d387", "node_id": "C_kwDOAAsO6NoAKGU3YzJhYjZkNWIzOTlhMTM4ODZiYzQ4ZmM4ODc4MTk3MmQ1M2QzODc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-25T17:39:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-25T17:39:53Z"}, "message": "Auto merge of #2157 - RalfJung:tests, r=oli-obk\n\ntweak new test suite output\n\n- Make the entire \"## Running ui tests ...\" green, including the target.\n- Fix double-space in `testname.rs  .. ok`.\n- Make the final summary a bit more like compiletest-rs, in particular the newlines around it\n- Use the term \"ignored\" consistently, rather than \"skipped\"\n\nr? `@oli-obk`", "tree": {"sha": "f191ec83dbfb74796f1caecc3d64d465fb105e9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f191ec83dbfb74796f1caecc3d64d465fb105e9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7c2ab6d5b399a13886bc48fc88781972d53d387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c2ab6d5b399a13886bc48fc88781972d53d387", "html_url": "https://github.com/rust-lang/rust/commit/e7c2ab6d5b399a13886bc48fc88781972d53d387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7c2ab6d5b399a13886bc48fc88781972d53d387/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5832dd1c0c5578915411368e5f0f117881d16e8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5832dd1c0c5578915411368e5f0f117881d16e8d", "html_url": "https://github.com/rust-lang/rust/commit/5832dd1c0c5578915411368e5f0f117881d16e8d"}, {"sha": "a6b5b0e4ff911c5e36e544fc2aed80e8d4ed912b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b5b0e4ff911c5e36e544fc2aed80e8d4ed912b", "html_url": "https://github.com/rust-lang/rust/commit/a6b5b0e4ff911c5e36e544fc2aed80e8d4ed912b"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "9ffc4744eb8586b1f90a98b9dbef5e6f3c49f15e", "filename": "tests/compiletest.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7c2ab6d5b399a13886bc48fc88781972d53d387/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c2ab6d5b399a13886bc48fc88781972d53d387/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=e7c2ab6d5b399a13886bc48fc88781972d53d387", "patch": "@@ -109,13 +109,11 @@ regexes! {\n fn ui(mode: Mode, path: &str) {\n     let target = get_target();\n \n-    eprint!(\"{}\", format!(\"## Running ui tests in {path} against miri for \").green().bold());\n-\n-    if let Some(target) = &target {\n-        eprintln!(\"{target}\");\n-    } else {\n-        eprintln!(\"host\");\n-    }\n+    let msg = format!(\n+        \"## Running ui tests in {path} against miri for {}\",\n+        target.as_deref().unwrap_or(\"host\")\n+    );\n+    eprintln!(\"{}\", msg.green().bold());\n \n     run_tests(mode, path, target);\n }"}, {"sha": "b779d6844a970b74b36e696ce14fdca1ec0a6a46", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e7c2ab6d5b399a13886bc48fc88781972d53d387/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c2ab6d5b399a13886bc48fc88781972d53d387/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=e7c2ab6d5b399a13886bc48fc88781972d53d387", "patch": "@@ -56,7 +56,7 @@ pub fn run_tests(config: Config) {\n     // Some statistics and failure reports.\n     let failures = Mutex::new(vec![]);\n     let succeeded = AtomicUsize::default();\n-    let skipped = AtomicUsize::default();\n+    let ignored = AtomicUsize::default();\n \n     crossbeam::scope(|s| {\n         for _ in 0..std::thread::available_parallelism().unwrap().get() {\n@@ -74,10 +74,10 @@ pub fn run_tests(config: Config) {\n                         continue;\n                     }\n                     let comments = Comments::parse(&path);\n-                    // Skip file if only/skip rules do (not) apply\n+                    // Ignore file if only/ignore rules do (not) apply\n                     if ignore_file(&comments, &target) {\n-                        skipped.fetch_add(1, Ordering::Relaxed);\n-                        eprintln!(\"{} .. {}\", path.display(), \"skipped\".yellow());\n+                        ignored.fetch_add(1, Ordering::Relaxed);\n+                        eprintln!(\"{} .. {}\", path.display(), \"ignored\".yellow());\n                         continue;\n                     }\n                     // Run the test for all revisions\n@@ -91,7 +91,7 @@ pub fn run_tests(config: Config) {\n                         if !revision.is_empty() {\n                             write!(msg, \"(revision `{revision}`) \").unwrap();\n                         }\n-                        write!(msg, \" .. \").unwrap();\n+                        write!(msg, \"... \").unwrap();\n                         if errors.is_empty() {\n                             eprintln!(\"{msg}{}\", \"ok\".green());\n                             succeeded.fetch_add(1, Ordering::Relaxed);\n@@ -109,15 +109,15 @@ pub fn run_tests(config: Config) {\n     // Print all errors in a single thread to show reliable output\n     let failures = failures.into_inner().unwrap();\n     let succeeded = succeeded.load(Ordering::Relaxed);\n-    let skipped = skipped.load(Ordering::Relaxed);\n+    let ignored = ignored.load(Ordering::Relaxed);\n     if !failures.is_empty() {\n         for (path, miri, revision, errors) in &failures {\n             eprintln!();\n             eprint!(\"{}\", path.display().to_string().underline());\n             if !revision.is_empty() {\n                 eprint!(\" (revision `{}`)\", revision);\n             }\n-            eprint!(\"{}\", \" FAILED\".red());\n+            eprint!(\" {}\", \"FAILED\".red());\n             eprintln!();\n             eprintln!(\"command: {:?}\", miri);\n             eprintln!();\n@@ -153,19 +153,21 @@ pub fn run_tests(config: Config) {\n             }\n         }\n         eprintln!(\n-            \"{} tests failed, {} tests passed, {} skipped\",\n+            \"{} tests failed, {} tests passed, {} ignored\",\n             failures.len().to_string().red().bold(),\n             succeeded.to_string().green(),\n-            skipped.to_string().yellow()\n+            ignored.to_string().yellow()\n         );\n         std::process::exit(1);\n     }\n     eprintln!();\n     eprintln!(\n-        \"{} tests passed, {} skipped\",\n+        \"test result: {}. {} tests passed, {} ignored\",\n+        \"ok\".green(),\n         succeeded.to_string().green(),\n-        skipped.to_string().yellow()\n+        ignored.to_string().yellow()\n     );\n+    eprintln!();\n }\n \n #[derive(Debug)]"}]}