{"sha": "e1f408e6c8d440224dfa45f8b1a97ed84c790fcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZjQwOGU2YzhkNDQwMjI0ZGZhNDVmOGIxYTk3ZWQ4NGM3OTBmY2Q=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-22T07:42:29Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-24T07:03:07Z"}, "message": "const_evaluatable_checked: collect predicates from fn_sig", "tree": {"sha": "5803cc6bf2680ff2642774947891e9f2be677ace", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5803cc6bf2680ff2642774947891e9f2be677ace"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd", "html_url": "https://github.com/rust-lang/rust/commit/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78a089487b5f6d5e4205ac4500410b442857bced", "url": "https://api.github.com/repos/rust-lang/rust/commits/78a089487b5f6d5e4205ac4500410b442857bced", "html_url": "https://github.com/rust-lang/rust/commit/78a089487b5f6d5e4205ac4500410b442857bced"}], "stats": {"total": 78, "additions": 72, "deletions": 6}, "files": [{"sha": "d04b5cf588f725025be4f3ce87b9fd17b88a58f3", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=e1f408e6c8d440224dfa45f8b1a97ed84c790fcd", "patch": "@@ -1678,8 +1678,10 @@ fn predicates_defined_on(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicate\n \n     if tcx.features().const_evaluatable_checked {\n         let const_evaluatable = const_evaluatable_predicates_of(tcx, def_id, &result);\n-        result.predicates =\n-            tcx.arena.alloc_from_iter(result.predicates.iter().copied().chain(const_evaluatable));\n+        if !const_evaluatable.is_empty() {\n+            result.predicates =\n+                tcx.arena.alloc_from_iter(result.predicates.iter().copied().chain(const_evaluatable));\n+        }\n     }\n \n     debug!(\"predicates_defined_on({:?}) = {:?}\", def_id, result);\n@@ -1690,7 +1692,7 @@ pub fn const_evaluatable_predicates_of<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     predicates: &ty::GenericPredicates<'tcx>,\n-) -> impl Iterator<Item = (ty::Predicate<'tcx>, Span)> {\n+) -> Vec<(ty::Predicate<'tcx>, Span)> {\n     #[derive(Default)]\n     struct ConstCollector<'tcx> {\n         ct: SmallVec<[(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>, Span); 4]>,\n@@ -1711,10 +1713,21 @@ pub fn const_evaluatable_predicates_of<'tcx>(\n         collector.curr_span = span;\n         pred.visit_with(&mut collector);\n     }\n-    warn!(\"const_evaluatable_predicates_of({:?}) = {:?}\", def_id, collector.ct);\n+\n+    match tcx.def_kind(def_id) {\n+        DefKind::Fn | DefKind::AssocFn => {\n+            tcx.fn_sig(def_id).visit_with(&mut collector);\n+        }\n+        _ => (),\n+    }\n+    debug!(\"const_evaluatable_predicates_of({:?}) = {:?}\", def_id, collector.ct);\n+\n+    // We only want unique const evaluatable predicates.\n+    collector.ct.sort();\n+    collector.ct.dedup();\n     collector.ct.into_iter().map(move |(def_id, subst, span)| {\n         (ty::PredicateAtom::ConstEvaluatable(def_id, subst).to_predicate(tcx), span)\n-    })\n+    }).collect()\n }\n \n /// Returns a list of all type predicates (explicit and implicit) for the definition with"}, {"sha": "52b89cfa0458866698188b1fd6745b54a3008af2", "filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate_predicate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.rs?ref=e1f408e6c8d440224dfa45f8b1a97ed84c790fcd", "patch": "@@ -8,6 +8,7 @@ fn user<T>() {\n     //~^ ERROR constant expression depends\n     //~| ERROR constant expression depends\n     //~| ERROR constant expression depends\n+    //~| ERROR constant expression depends\n }\n \n fn main() {}"}, {"sha": "e8afb495e602b0a7477e83f5db0538d333424e2c", "filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate_predicate.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr?ref=e1f408e6c8d440224dfa45f8b1a97ed84c790fcd", "patch": "@@ -11,6 +11,19 @@ LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n    |\n    = note: this may fail depending on what value the parameter takes\n \n+error: constant expression depends on a generic parameter\n+  --> $DIR/cross_crate_predicate.rs:7:13\n+   |\n+LL |     let _ = const_evaluatable_lib::test1::<T>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | \n+  ::: $DIR/auxiliary/const_evaluatable_lib.rs:6:41\n+   |\n+LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n+   |                                         ----- required by this bound in `test1`\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n error: constant expression depends on a generic parameter\n   --> $DIR/cross_crate_predicate.rs:7:13\n    |\n@@ -29,8 +42,13 @@ error: constant expression depends on a generic parameter\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | \n+  ::: $DIR/auxiliary/const_evaluatable_lib.rs:6:41\n+   |\n+LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n+   |                                         ----- required by this bound in `test1::{{constant}}#1`\n    |\n    = note: this may fail depending on what value the parameter takes\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "3da4688702c96d83dbebeb11a8acc76d5735ae94", "filename": "src/test/ui/const-generics/const_evaluatable_checked/from-sig-fail.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.rs?ref=e1f408e6c8d440224dfa45f8b1a97ed84c790fcd", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+fn test<const N: usize>() -> [u8; N - 1] {\n+    //~^ ERROR evaluation of constant\n+    todo!()\n+}\n+\n+fn main() {\n+    test::<0>();\n+}"}, {"sha": "a5acfec34aa87feaa054540ec58a11b9e5eadb47", "filename": "src/test/ui/const-generics/const_evaluatable_checked/from-sig-fail.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig-fail.stderr?ref=e1f408e6c8d440224dfa45f8b1a97ed84c790fcd", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/from-sig-fail.rs:4:35\n+   |\n+LL | fn test<const N: usize>() -> [u8; N - 1] {\n+   |                                   ^^^^^ attempt to compute `0_usize - 1_usize` which would overflow\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "5c05a5acfe96d310e980229200fa8ecd2547b5ea", "filename": "src/test/ui/const-generics/const_evaluatable_checked/from-sig.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1f408e6c8d440224dfa45f8b1a97ed84c790fcd/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffrom-sig.rs?ref=e1f408e6c8d440224dfa45f8b1a97ed84c790fcd", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const B: bool>;\n+\n+fn test<const N: usize>() -> Foo<{ N > 10 }> {\n+    Foo\n+}\n+\n+fn main() {\n+    let _: Foo<true> = test::<12>();\n+    let _: Foo<false> = test::<9>();\n+}"}]}