{"sha": "633f38ae99b657f70e2aba135318178abc9fee16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzM2YzOGFlOTliNjU3ZjcwZTJhYmExMzUzMTgxNzhhYmM5ZmVlMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-21T03:26:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-21T03:26:37Z"}, "message": "Auto merge of #39086 - aidanhs:aphs-local-rebuild-no-jemalloc, r=alexcrichton\n\nMake rustbuild force_alloc_system rather than relying on stage0\n\nThis 'fixes' jemalloc-less local rebuilds, where we tell cargo that we're actually stage1 (this only fixes the rustbuild path, since I wasn't enthusiastic to dive into the makefiles).\n\nThere should be one effect from this PR: `--enable-local-rebuild --disable-jemalloc` will successfully build a stage0 std (rather than erroring). Ideally I think it'd be nice to specify an allocator preference in Cargo.toml/cargo command line (used when an allocator must be picked i.e. dylibs, not rlibs), but since that's not possible we can make do with a force_alloc_system feature. Sadly this locks you into a single allocator in the build libstd, making any eventual implementation of #38575 not quite right in this edge case, but clearly not many people exercise the combination of these two flags.\n\nThis PR is also a substitute for #37975 I think. The crucial difference is that the feature name here is distinct from the jemalloc feature (reused in the previous PR) - we don't want someone to be forced into alloc_system just for disabling jemalloc!\n\nFixes #39054\n\nr? @alexcrichton", "tree": {"sha": "0131b807f53c9fcb750437daebe1f4227726dff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0131b807f53c9fcb750437daebe1f4227726dff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/633f38ae99b657f70e2aba135318178abc9fee16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/633f38ae99b657f70e2aba135318178abc9fee16", "html_url": "https://github.com/rust-lang/rust/commit/633f38ae99b657f70e2aba135318178abc9fee16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/633f38ae99b657f70e2aba135318178abc9fee16/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aedb49cbc9977fee56bb51a20980b380aca53659", "url": "https://api.github.com/repos/rust-lang/rust/commits/aedb49cbc9977fee56bb51a20980b380aca53659", "html_url": "https://github.com/rust-lang/rust/commit/aedb49cbc9977fee56bb51a20980b380aca53659"}, {"sha": "70d2372adaf48bb24f8b829417229149bd103e4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/70d2372adaf48bb24f8b829417229149bd103e4a", "html_url": "https://github.com/rust-lang/rust/commit/70d2372adaf48bb24f8b829417229149bd103e4a"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "7bc11d88ebad77e331040aacfd9897d883d8f97d", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/633f38ae99b657f70e2aba135318178abc9fee16/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633f38ae99b657f70e2aba135318178abc9fee16/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=633f38ae99b657f70e2aba135318178abc9fee16", "patch": "@@ -42,7 +42,16 @@ pub fn std(build: &Build, target: &str, compiler: &Compiler) {\n     let out_dir = build.cargo_out(compiler, Mode::Libstd, target);\n     build.clear_if_dirty(&out_dir, &build.compiler_path(compiler));\n     let mut cargo = build.cargo(compiler, Mode::Libstd, target, \"build\");\n-    cargo.arg(\"--features\").arg(build.std_features())\n+    let mut features = build.std_features();\n+    // When doing a local rebuild we tell cargo that we're stage1 rather than\n+    // stage0. This works fine if the local rust and being-built rust have the\n+    // same view of what the default allocator is, but fails otherwise. Since\n+    // we don't have a way to express an allocator preference yet, work\n+    // around the issue in the case of a local rebuild with jemalloc disabled.\n+    if compiler.stage == 0 && build.local_rebuild && !build.config.use_jemalloc {\n+        features.push_str(\" force_alloc_system\");\n+    }\n+    cargo.arg(\"--features\").arg(features)\n          .arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/std_shim/Cargo.toml\"));\n "}, {"sha": "8146e7fb1edaf4a5b0a413d781a06dbd7d7b943b", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/633f38ae99b657f70e2aba135318178abc9fee16/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/633f38ae99b657f70e2aba135318178abc9fee16/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=633f38ae99b657f70e2aba135318178abc9fee16", "patch": "@@ -31,4 +31,5 @@ gcc = \"0.3.27\"\n backtrace = []\n debug-jemalloc = [\"alloc_jemalloc/debug\"]\n jemalloc = [\"alloc_jemalloc\"]\n+force_alloc_system = []\n panic-unwind = [\"panic_unwind\"]"}, {"sha": "37632ac76f2dbab5c2e04793a892f7aad619fd9c", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/633f38ae99b657f70e2aba135318178abc9fee16/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633f38ae99b657f70e2aba135318178abc9fee16/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=633f38ae99b657f70e2aba135318178abc9fee16", "patch": "@@ -219,9 +219,10 @@\n // Tell the compiler to link to either panic_abort or panic_unwind\n #![needs_panic_runtime]\n \n-// Always use alloc_system during stage0 since jemalloc might be unavailable or\n-// disabled (Issue #30592)\n-#![cfg_attr(stage0, feature(alloc_system))]\n+// Always use alloc_system during stage0 since we don't know if the alloc_*\n+// crate the stage0 compiler will pick by default is available (most\n+// obviously, if the user has disabled jemalloc in `./configure`).\n+#![cfg_attr(any(stage0, feature = \"force_alloc_system\"), feature(alloc_system))]\n \n // Turn warnings into errors, but only after stage0, where it can be useful for\n // code to emit warnings during language transitions\n@@ -333,7 +334,7 @@ extern crate libc;\n // We always need an unwinder currently for backtraces\n extern crate unwind;\n \n-#[cfg(stage0)]\n+#[cfg(any(stage0, feature = \"force_alloc_system\"))]\n extern crate alloc_system;\n \n // compiler-rt intrinsics"}, {"sha": "7260a8440734d9ea0f64a47167d06126dc76160d", "filename": "src/rustc/std_shim/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/633f38ae99b657f70e2aba135318178abc9fee16/src%2Frustc%2Fstd_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/633f38ae99b657f70e2aba135318178abc9fee16/src%2Frustc%2Fstd_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fstd_shim%2FCargo.toml?ref=633f38ae99b657f70e2aba135318178abc9fee16", "patch": "@@ -38,4 +38,5 @@ core = { path = \"../../libcore\" }\n backtrace = [\"std/backtrace\"]\n debug-jemalloc = [\"std/debug-jemalloc\"]\n jemalloc = [\"std/jemalloc\"]\n+force_alloc_system = [\"std/force_alloc_system\"]\n panic-unwind = [\"std/panic-unwind\"]"}]}