{"sha": "3f87975d656aa9847b3fc9e7310e9308cebfdf8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmODc5NzVkNjU2YWE5ODQ3YjNmYzllNzMxMGU5MzA4Y2ViZmRmOGQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-01T15:57:29Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-05-23T16:51:51Z"}, "message": "Update get_lib_features, defined_lib_features, get_lang_items, defined_lang_items, missing_lang_items, postorder_cnums and maybe_unused_extern_crates", "tree": {"sha": "03b2256ee6eef506bb264ee4ef1a78925ed33e1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03b2256ee6eef506bb264ee4ef1a78925ed33e1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f87975d656aa9847b3fc9e7310e9308cebfdf8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f87975d656aa9847b3fc9e7310e9308cebfdf8d", "html_url": "https://github.com/rust-lang/rust/commit/3f87975d656aa9847b3fc9e7310e9308cebfdf8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46f251129695f9e768bb444dd20a6cce8f2bfbc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/46f251129695f9e768bb444dd20a6cce8f2bfbc9", "html_url": "https://github.com/rust-lang/rust/commit/46f251129695f9e768bb444dd20a6cce8f2bfbc9"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "53349773a360cd7b6111b3abed93e6369c1e5faf", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=3f87975d656aa9847b3fc9e7310e9308cebfdf8d", "patch": "@@ -91,6 +91,8 @@ macro_rules! arena_types {\n                 rustc::hir::def_id::DefId,\n                 String\n             >,\n+            [few] get_lib_features: rustc::middle::lib_features::LibFeatures,\n+            [few] defined_lib_features: rustc::middle::lang_items::LanguageItems,\n         ], $tcx);\n     )\n }"}, {"sha": "6f9abcd624f9921abca3606fa11e73172449c2f1", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=3f87975d656aa9847b3fc9e7310e9308cebfdf8d", "patch": "@@ -256,8 +256,8 @@ pub fn used_crates(tcx: TyCtxt<'_, '_, '_>, prefer: LinkagePreference)\n             Some((cnum, path))\n         })\n         .collect::<Vec<_>>();\n-    let mut ordering = tcx.postorder_cnums(LOCAL_CRATE);\n-    Lrc::make_mut(&mut ordering).reverse();\n+    let mut ordering = tcx.postorder_cnums(LOCAL_CRATE).to_owned();\n+    ordering.reverse();\n     libs.sort_by_cached_key(|&(a, _)| {\n         ordering.iter().position(|x| *x == a)\n     });"}, {"sha": "ac0e99137cbc3ea68f76f7affc21f4d991347ffe", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=3f87975d656aa9847b3fc9e7310e9308cebfdf8d", "patch": "@@ -883,7 +883,7 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     remaining_lib_features.remove(&Symbol::intern(\"test\"));\n \n     let check_features =\n-        |remaining_lib_features: &mut FxHashMap<_, _>, defined_features: &Vec<_>| {\n+        |remaining_lib_features: &mut FxHashMap<_, _>, defined_features: &[_]| {\n             for &(feature, since) in defined_features {\n                 if let Some(since) = since {\n                     if let Some(span) = remaining_lib_features.get(&feature) {\n@@ -908,7 +908,7 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n             if remaining_lib_features.is_empty() {\n                 break;\n             }\n-            check_features(&mut remaining_lib_features, &tcx.defined_lib_features(cnum));\n+            check_features(&mut remaining_lib_features, tcx.defined_lib_features(cnum));\n         }\n     }\n "}, {"sha": "84e88acbbded7ea0f1bc96edc4af156a98b55fff", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=3f87975d656aa9847b3fc9e7310e9308cebfdf8d", "patch": "@@ -787,22 +787,22 @@ rustc_queries! {\n         query item_children(_: DefId) -> &'tcx [Export<hir::HirId>] {}\n         query extern_mod_stmt_cnum(_: DefId) -> Option<CrateNum> {}\n \n-        query get_lib_features(_: CrateNum) -> Lrc<LibFeatures> {\n+        query get_lib_features(_: CrateNum) -> &'tcx LibFeatures {\n             eval_always\n             desc { \"calculating the lib features map\" }\n         }\n         query defined_lib_features(_: CrateNum)\n-            -> Lrc<Vec<(Symbol, Option<Symbol>)>> {\n+            -> &'tcx [(Symbol, Option<Symbol>)] {\n             desc { \"calculating the lib features defined in a crate\" }\n         }\n-        query get_lang_items(_: CrateNum) -> Lrc<LanguageItems> {\n+        query get_lang_items(_: CrateNum) -> &'tcx LanguageItems {\n             eval_always\n             desc { \"calculating the lang items map\" }\n         }\n-        query defined_lang_items(_: CrateNum) -> Lrc<Vec<(DefId, usize)>> {\n+        query defined_lang_items(_: CrateNum) -> &'tcx [(DefId, usize)] {\n             desc { \"calculating the lang items defined in a crate\" }\n         }\n-        query missing_lang_items(_: CrateNum) -> Lrc<Vec<LangItem>> {\n+        query missing_lang_items(_: CrateNum) -> &'tcx [LangItem] {\n             desc { \"calculating the missing lang items in a crate\" }\n         }\n         query visible_parent_map(_: CrateNum)\n@@ -817,7 +817,7 @@ rustc_queries! {\n             eval_always\n             desc { \"looking at the source for a crate\" }\n         }\n-        query postorder_cnums(_: CrateNum) -> Lrc<Vec<CrateNum>> {\n+        query postorder_cnums(_: CrateNum) -> &'tcx [CrateNum] {\n             eval_always\n             desc { \"generating a postorder list of CrateNums\" }\n         }\n@@ -829,7 +829,7 @@ rustc_queries! {\n             eval_always\n         }\n         query maybe_unused_extern_crates(_: CrateNum)\n-            -> Lrc<Vec<(DefId, Span)>> {\n+            -> &'tcx [(DefId, Span)] {\n             eval_always\n             desc { \"looking up all possibly unused extern crates\" }\n         }"}, {"sha": "d83b2ce842a88057df2322e1d550ad88e7d1882e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3f87975d656aa9847b3fc9e7310e9308cebfdf8d", "patch": "@@ -1376,11 +1376,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.sess.consider_optimizing(&cname, msg)\n     }\n \n-    pub fn lib_features(self) -> Lrc<middle::lib_features::LibFeatures> {\n+    pub fn lib_features(self) -> &'gcx middle::lib_features::LibFeatures {\n         self.get_lib_features(LOCAL_CRATE)\n     }\n \n-    pub fn lang_items(self) -> Lrc<middle::lang_items::LanguageItems> {\n+    pub fn lang_items(self) -> &'gcx middle::lang_items::LanguageItems {\n         self.get_lang_items(LOCAL_CRATE)\n     }\n \n@@ -3060,19 +3060,19 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     };\n     providers.get_lib_features = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n-        Lrc::new(middle::lib_features::collect(tcx))\n+        tcx.arena.alloc(middle::lib_features::collect(tcx))\n     };\n     providers.get_lang_items = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n-        Lrc::new(middle::lang_items::collect(tcx))\n+        tcx.arena.alloc(middle::lang_items::collect(tcx))\n     };\n     providers.upvars = |tcx, id| tcx.gcx.upvars.get(&id).map(|v| &v[..]);\n     providers.maybe_unused_trait_import = |tcx, id| {\n         tcx.maybe_unused_trait_imports.contains(&id)\n     };\n     providers.maybe_unused_extern_crates = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n-        Lrc::new(tcx.maybe_unused_extern_crates.clone())\n+        &tcx.maybe_unused_extern_crates[..]\n     };\n     providers.names_imported_by_glob_use = |tcx, id| {\n         assert_eq!(id.krate, LOCAL_CRATE);\n@@ -3103,7 +3103,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     };\n     providers.postorder_cnums = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n-        Lrc::new(tcx.cstore.postorder_cnums_untracked())\n+        tcx.arena.alloc_slice(&tcx.cstore.postorder_cnums_untracked())\n     };\n     providers.output_filenames = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "2469732a749de08536490781c6b01b26e1641642", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=3f87975d656aa9847b3fc9e7310e9308cebfdf8d", "patch": "@@ -229,9 +229,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         cdata.each_child_of_item(def_id.index, |child| result.push(child), tcx.sess);\n         tcx.arena.alloc_slice(&result)\n     }\n-    defined_lib_features => { Lrc::new(cdata.get_lib_features()) }\n-    defined_lang_items => { Lrc::new(cdata.get_lang_items()) }\n-    missing_lang_items => { Lrc::new(cdata.get_missing_lang_items()) }\n+    defined_lib_features => { cdata.get_lib_features(tcx) }\n+    defined_lang_items => { cdata.get_lang_items(tcx) }\n+    missing_lang_items => { cdata.get_missing_lang_items(tcx) }\n \n     missing_extern_crate_item => {\n         let r = match *cdata.extern_crate.borrow() {"}, {"sha": "ea79161a6d90fcd5d38137ab9ea9d57f5286539f", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f87975d656aa9847b3fc9e7310e9308cebfdf8d/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=3f87975d656aa9847b3fc9e7310e9308cebfdf8d", "patch": "@@ -708,26 +708,30 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     /// Iterates over all the stability attributes in the given crate.\n-    pub fn get_lib_features(&self) -> Vec<(ast::Name, Option<ast::Name>)> {\n+    pub fn get_lib_features(\n+        &self,\n+        tcx: TyCtxt<'_, 'tcx, '_>,\n+    ) -> &'tcx [(ast::Name, Option<ast::Name>)] {\n         // FIXME: For a proc macro crate, not sure whether we should return the \"host\"\n         // features or an empty Vec. Both don't cause ICEs.\n-        self.root\n+        tcx.arena.alloc_from_iter(self.root\n             .lib_features\n-            .decode(self)\n-            .collect()\n+            .decode(self))\n     }\n \n     /// Iterates over the language items in the given crate.\n-    pub fn get_lang_items(&self) -> Vec<(DefId, usize)> {\n+    pub fn get_lang_items(\n+        &self,\n+        tcx: TyCtxt<'_, 'tcx, '_>,\n+    ) -> &'tcx [(DefId, usize)] {\n         if self.proc_macros.is_some() {\n             // Proc macro crates do not export any lang-items to the target.\n-            vec![]\n+            &[]\n         } else {\n-            self.root\n+            tcx.arena.alloc_from_iter(self.root\n                 .lang_items\n                 .decode(self)\n-                .map(|(def_index, index)| (self.local_def_id(def_index), index))\n-                .collect()\n+                .map(|(def_index, index)| (self.local_def_id(def_index), index)))\n         }\n     }\n \n@@ -1102,15 +1106,17 @@ impl<'a, 'tcx> CrateMetadata {\n             .collect()\n     }\n \n-    pub fn get_missing_lang_items(&self) -> Vec<lang_items::LangItem> {\n+    pub fn get_missing_lang_items(\n+        &self,\n+        tcx: TyCtxt<'_, 'tcx, '_>,\n+    ) -> &'tcx [lang_items::LangItem] {\n         if self.proc_macros.is_some() {\n             // Proc macro crates do not depend on any target weak lang-items.\n-            vec![]\n+            &[]\n         } else {\n-            self.root\n+            tcx.arena.alloc_from_iter(self.root\n                 .lang_items_missing\n-                .decode(self)\n-                .collect()\n+                .decode(self))\n         }\n     }\n "}]}