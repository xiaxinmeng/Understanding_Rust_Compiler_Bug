{"sha": "39fccf3bc78c53924dd0b5676dc114d62ab8d1b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZmNjZjNiYzc4YzUzOTI0ZGQwYjU2NzZkYzExNGQ2MmFiOGQxYjA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-30T20:04:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-30T20:04:35Z"}, "message": "Conditionally compile items declared as statements. Issue #489", "tree": {"sha": "11490fbbc928ef927fc0d05d05096fcc82a279a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11490fbbc928ef927fc0d05d05096fcc82a279a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39fccf3bc78c53924dd0b5676dc114d62ab8d1b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39fccf3bc78c53924dd0b5676dc114d62ab8d1b0", "html_url": "https://github.com/rust-lang/rust/commit/39fccf3bc78c53924dd0b5676dc114d62ab8d1b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39fccf3bc78c53924dd0b5676dc114d62ab8d1b0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6346a67cbd96f0c1faf483851e1f120334862309", "url": "https://api.github.com/repos/rust-lang/rust/commits/6346a67cbd96f0c1faf483851e1f120334862309", "html_url": "https://github.com/rust-lang/rust/commit/6346a67cbd96f0c1faf483851e1f120334862309"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "5d10ea05816b7eafed53b98c7b4f41ad1e51fd2b", "filename": "src/comp/front/config.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/39fccf3bc78c53924dd0b5676dc114d62ab8d1b0/src%2Fcomp%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39fccf3bc78c53924dd0b5676dc114d62ab8d1b0/src%2Fcomp%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fconfig.rs?ref=39fccf3bc78c53924dd0b5676dc114d62ab8d1b0", "patch": "@@ -11,7 +11,8 @@ export strip_unconfigured_items;\n fn strip_unconfigured_items(@ast::crate crate) -> @ast::crate {\n     auto cfg = crate.node.config;\n \n-    auto precursor = rec(fold_mod = bind fold_mod(cfg, _, _)\n+    auto precursor = rec(fold_mod = bind fold_mod(cfg, _, _),\n+                         fold_block = bind fold_block(cfg, _, _)\n                          with *fold::default_ast_fold());\n \n     auto fold = fold::make_fold(precursor);\n@@ -38,6 +39,34 @@ fn fold_mod(&ast::crate_cfg cfg, &ast::_mod m,\n             items=vec::map(fld.fold_item, filtered_items));\n }\n \n+fn filter_stmt(&ast::crate_cfg cfg,\n+               &@ast::stmt stmt) -> option::t[@ast::stmt] {\n+    alt (stmt.node) {\n+        case (ast::stmt_decl(?decl, _)) {\n+            alt (decl.node) {\n+                case (ast::decl_item(?item)) {\n+                    if (in_cfg(cfg, item)) {\n+                        option::some(stmt)\n+                    } else {\n+                        option::none\n+                    }\n+                }\n+                case (_) { option::some(stmt) }\n+            }\n+        }\n+        case (_) { option::some(stmt) }\n+    }\n+}\n+\n+fn fold_block(&ast::crate_cfg cfg, &ast::block_ b,\n+              fold::ast_fold fld) -> ast::block_  {\n+    auto filter = bind filter_stmt(cfg, _);\n+    auto filtered_stmts = vec::filter_map(filter, b.stmts);\n+    ret rec(stmts=vec::map(fld.fold_stmt, filtered_stmts),\n+            expr=option::map(fld.fold_expr, b.expr),\n+            id=b.id);\n+}\n+\n // Determine if an item should be translated in the current crate\n // configuration based on the item's attributes\n fn in_cfg(&ast::crate_cfg cfg, &@ast::item item) -> bool {"}, {"sha": "6acc399dfea6714dc85b37d9e5834c9be0c5a960", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/39fccf3bc78c53924dd0b5676dc114d62ab8d1b0/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39fccf3bc78c53924dd0b5676dc114d62ab8d1b0/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=39fccf3bc78c53924dd0b5676dc114d62ab8d1b0", "patch": "@@ -70,5 +70,18 @@ fn main() {\n   assert b;\n   let t x = true;\n   let tg y = bar;\n+\n+  test_in_fn_ctxt();\n }\n \n+fn test_in_fn_ctxt() {\n+  #[cfg(bogus)]\n+  fn f() { fail }\n+  fn f() {}\n+  f();\n+\n+  #[cfg(bogus)]\n+  const int i = 0;\n+  const int i = 1;\n+  assert i == 1;\n+}"}]}