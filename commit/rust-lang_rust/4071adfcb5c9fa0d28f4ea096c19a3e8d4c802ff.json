{"sha": "4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNzFhZGZjYjVjOWZhMGQyOGY0ZWEwOTZjMTlhM2U4ZDRjODAyZmY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-28T21:49:01Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-28T21:52:44Z"}, "message": "Always check type_dependent_defs", "tree": {"sha": "a4c68cc13ae73171a616f8f6216d0c5c3af4c6eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4c68cc13ae73171a616f8f6216d0c5c3af4c6eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff", "html_url": "https://github.com/rust-lang/rust/commit/4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fe88c05cd14fa182fd58cc68127f98aca77d1ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe88c05cd14fa182fd58cc68127f98aca77d1ff", "html_url": "https://github.com/rust-lang/rust/commit/4fe88c05cd14fa182fd58cc68127f98aca77d1ff"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "f59cce4bd9e39dff7bfadb9a389553d288c6fd10", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff", "patch": "@@ -96,7 +96,11 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn lookup_and_handle_method(&mut self, id: hir::HirId) {\n-        self.check_def_id(self.tables.type_dependent_defs()[id].def_id());\n+        if let Some(def) = self.tables.type_dependent_defs().get(id) {\n+            self.check_def_id(def.def_id());\n+        } else {\n+            bug!(\"no type-dependent def for method\");\n+        }\n     }\n \n     fn handle_field_access(&mut self, lhs: &hir::Expr, node_id: ast::NodeId) {"}, {"sha": "476f3f5799daf6d322cf9908de8f42a7c9400c9e", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n                 Some(self.tables.qpath_def(qpath, expr.hir_id))\n             }\n             hir::ExprMethodCall(..) => {\n-                Some(self.tables.type_dependent_defs()[expr.hir_id])\n+                self.tables.type_dependent_defs().get(expr.hir_id).cloned()\n             }\n             _ => None\n         };"}, {"sha": "6d0f60f65791c2972c01409dbc5ee0193010fa59", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff", "patch": "@@ -1007,10 +1007,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n             // Check for method calls and overloaded operators.\n             if cx.tables.is_method_call(expr) {\n                 let hir_id = cx.tcx.hir.definitions().node_to_hir_id(id);\n-                let def_id = cx.tables.type_dependent_defs()[hir_id].def_id();\n-                let substs = cx.tables.node_substs(hir_id);\n-                if method_call_refers_to_method(cx, method, def_id, substs, id) {\n-                    return true;\n+                if let Some(def) = cx.tables.type_dependent_defs().get(hir_id) {\n+                    let def_id = def.def_id();\n+                    let substs = cx.tables.node_substs(hir_id);\n+                    if method_call_refers_to_method(cx, method, def_id, substs, id) {\n+                        return true;\n+                    }\n+                } else {\n+                    cx.tcx.sess.delay_span_bug(expr.span,\n+                                               \"no type-dependent def for method call\");\n                 }\n             }\n "}, {"sha": "8c73771e57b22544be20dc014a3b64603f432ec4", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff", "patch": "@@ -692,8 +692,11 @@ fn method_callee<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                  -> Expr<'tcx> {\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n     let (def_id, substs) = custom_callee.unwrap_or_else(|| {\n-        (cx.tables().type_dependent_defs()[expr.hir_id].def_id(),\n-         cx.tables().node_substs(expr.hir_id))\n+        if let Some(def) = cx.tables().type_dependent_defs().get(expr.hir_id) {\n+            (def.def_id(), cx.tables().node_substs(expr.hir_id))\n+        } else {\n+            span_bug!(expr.span, \"no type-dependent def for method callee\")\n+        }\n     });\n     let ty = cx.tcx().mk_fn_def(def_id, substs);\n     Expr {"}, {"sha": "118e0dce73fdb3c0398ec222fdd630ce3004333a", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=4071adfcb5c9fa0d28f4ea096c19a3e8d4c802ff", "patch": "@@ -795,10 +795,15 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             }\n             hir::ExprMethodCall(_, span, _) => {\n                 // Method calls have to be checked specially.\n-                let def_id = self.tables.type_dependent_defs()[expr.hir_id].def_id();\n                 self.span = span;\n-                if self.tcx.type_of(def_id).visit_with(self) {\n-                    return;\n+                if let Some(def) = self.tables.type_dependent_defs().get(expr.hir_id) {\n+                    let def_id = def.def_id();\n+                    if self.tcx.type_of(def_id).visit_with(self) {\n+                        return;\n+                    }\n+                } else {\n+                    self.tcx.sess.delay_span_bug(expr.span,\n+                                                 \"no type-dependent def for method call\");\n                 }\n             }\n             _ => {}"}]}