{"sha": "539813944d69ae20e5c576ccd05578f861ee895b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOTgxMzk0NGQ2OWFlMjBlNWM1NzZjY2QwNTU3OGY4NjFlZTg5NWI=", "commit": {"author": {"name": "David Hewitt", "email": "1939362+davidhewitt@users.noreply.github.com", "date": "2019-11-11T14:32:36Z"}, "committer": {"name": "David Hewitt", "email": "1939362+davidhewitt@users.noreply.github.com", "date": "2019-11-27T12:01:04Z"}, "message": "Add memoization for const function evaluations\n\nWhen a const function is being evaluated, as long as all its\narguments are zero-sized-types (or it has no arguments) then we\ncan trivially memoize the evaluation result using the existing\nquery mechanism.", "tree": {"sha": "257e8900dfdbdff52dcd2e81abd9f4bfb18abbce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/257e8900dfdbdff52dcd2e81abd9f4bfb18abbce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/539813944d69ae20e5c576ccd05578f861ee895b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/539813944d69ae20e5c576ccd05578f861ee895b", "html_url": "https://github.com/rust-lang/rust/commit/539813944d69ae20e5c576ccd05578f861ee895b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/539813944d69ae20e5c576ccd05578f861ee895b/comments", "author": {"login": "davidhewitt", "id": 1939362, "node_id": "MDQ6VXNlcjE5MzkzNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1939362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhewitt", "html_url": "https://github.com/davidhewitt", "followers_url": "https://api.github.com/users/davidhewitt/followers", "following_url": "https://api.github.com/users/davidhewitt/following{/other_user}", "gists_url": "https://api.github.com/users/davidhewitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhewitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhewitt/subscriptions", "organizations_url": "https://api.github.com/users/davidhewitt/orgs", "repos_url": "https://api.github.com/users/davidhewitt/repos", "events_url": "https://api.github.com/users/davidhewitt/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhewitt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidhewitt", "id": 1939362, "node_id": "MDQ6VXNlcjE5MzkzNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1939362?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhewitt", "html_url": "https://github.com/davidhewitt", "followers_url": "https://api.github.com/users/davidhewitt/followers", "following_url": "https://api.github.com/users/davidhewitt/following{/other_user}", "gists_url": "https://api.github.com/users/davidhewitt/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhewitt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhewitt/subscriptions", "organizations_url": "https://api.github.com/users/davidhewitt/orgs", "repos_url": "https://api.github.com/users/davidhewitt/repos", "events_url": "https://api.github.com/users/davidhewitt/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhewitt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5f265eeed23ac87ec6b4a7e6bc7cb4ea3e67c31", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f265eeed23ac87ec6b4a7e6bc7cb4ea3e67c31", "html_url": "https://github.com/rust-lang/rust/commit/b5f265eeed23ac87ec6b4a7e6bc7cb4ea3e67c31"}], "stats": {"total": 233, "additions": 101, "deletions": 132}, "files": [{"sha": "65f4ee88a9c2fa388a7bb5b5db8ff373aa8c7252", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/539813944d69ae20e5c576ccd05578f861ee895b/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539813944d69ae20e5c576ccd05578f861ee895b/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=539813944d69ae20e5c576ccd05578f861ee895b", "patch": "@@ -123,7 +123,10 @@ use rustc_data_structures::tiny_list::TinyList;\n use rustc_macros::HashStable;\n use byteorder::{WriteBytesExt, ReadBytesExt, LittleEndian, BigEndian};\n \n-/// Uniquely identifies a specific constant or static.\n+/// Uniquely identifies one of the following:\n+/// - A constant\n+/// - A static\n+/// - A const fn where all arguments (if any) are zero-sized types\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n #[derive(HashStable, Lift)]\n pub struct GlobalId<'tcx> {"}, {"sha": "3352f7ae6581c746fc5b71ae586af96ad16108ec", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/539813944d69ae20e5c576ccd05578f861ee895b/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539813944d69ae20e5c576ccd05578f861ee895b/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=539813944d69ae20e5c576ccd05578f861ee895b", "patch": "@@ -146,7 +146,16 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     let name = ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id()));\n     let prom = cid.promoted.map_or(String::new(), |p| format!(\"::promoted[{:?}]\", p));\n     trace!(\"eval_body_using_ecx: pushing stack frame for global: {}{}\", name, prom);\n-    assert!(body.arg_count == 0);\n+\n+    // Assert all args (if any) are zero-sized types; `eval_body_using_ecx` doesn't\n+    // make sense if the body is expecting nontrival arguments.\n+    // (The alternative would be to use `eval_fn_call` with an args slice.)\n+    for arg in body.args_iter() {\n+        let decl = body.local_decls.get(arg).expect(\"arg missing from local_decls\");\n+        let layout = ecx.layout_of(decl.ty.subst(tcx, cid.instance.substs))?;\n+        assert!(layout.is_zst())\n+    };\n+\n     ecx.push_stack_frame(\n         cid.instance,\n         body.span,"}, {"sha": "7285836d1c3182d99bf97e1b18a0253e16ec99d9", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/539813944d69ae20e5c576ccd05578f861ee895b/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539813944d69ae20e5c576ccd05578f861ee895b/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=539813944d69ae20e5c576ccd05578f861ee895b", "patch": "@@ -7,7 +7,7 @@ use syntax::source_map::Span;\n use rustc_target::spec::abi::Abi;\n \n use super::{\n-    InterpResult, PointerArithmetic,\n+    GlobalId, InterpResult, PointerArithmetic,\n     InterpCx, Machine, OpTy, ImmTy, PlaceTy, MPlaceTy, StackPopCleanup, FnVal,\n };\n \n@@ -284,6 +284,18 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::InstanceDef::DropGlue(..) |\n             ty::InstanceDef::CloneShim(..) |\n             ty::InstanceDef::Item(_) => {\n+                // If this function is a `const fn` then as an optimization we can query this\n+                // evaluation immediately.\n+                //\n+                // For the moment we only do this for functions which take no arguments\n+                // (or all arguments are ZSTs) so that we don't memoize too much.\n+                if self.tcx.is_const_fn_raw(instance.def.def_id()) &&\n+                   args.iter().all(|a| a.layout.is_zst())\n+                {\n+                    let gid = GlobalId { instance, promoted: None };\n+                    return self.eval_const_fn_call(gid, ret);\n+                }\n+\n                 // We need MIR for this fn\n                 let body = match M::find_fn(self, instance, args, ret, unwind)? {\n                     Some(body) => body,\n@@ -449,6 +461,25 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n+    /// Evaluate a const function where all arguments (if any) are zero-sized types.\n+    /// The evaluation is memoized thanks to the query system.\n+    fn eval_const_fn_call(\n+        &mut self,\n+        gid: GlobalId<'tcx>,\n+        ret: Option<(PlaceTy<'tcx, M::PointerTag>, mir::BasicBlock)>,\n+    ) -> InterpResult<'tcx> {\n+        trace!(\"eval_const_fn_call: {:?}\", gid);\n+\n+        let place = self.const_eval_raw(gid)?;\n+        let dest = ret.ok_or_else(|| err_ub!(Unreachable))?.0;\n+\n+        self.copy_op(place.into(), dest)?;\n+\n+        self.return_to_block(ret.map(|r| r.1))?;\n+        self.dump_place(*dest);\n+        return Ok(())\n+    }\n+\n     fn drop_in_place(\n         &mut self,\n         place: PlaceTy<'tcx, M::PointerTag>,"}, {"sha": "82c27b37573ada2e2175f016ce8107260254fdaa", "filename": "src/test/ui/consts/const-fn-zst-args.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/539813944d69ae20e5c576ccd05578f861ee895b/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-zst-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539813944d69ae20e5c576ccd05578f861ee895b/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-zst-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-zst-args.rs?ref=539813944d69ae20e5c576ccd05578f861ee895b", "patch": "@@ -0,0 +1,14 @@\n+// build-pass\n+\n+// Check that the evaluation of const-functions with\n+// zero-sized types as arguments compiles successfully\n+\n+struct Zst {}\n+\n+const fn foo(val: Zst) -> Zst { val }\n+\n+const FOO: Zst = foo(Zst {});\n+\n+fn main() {\n+    const _: Zst = FOO;\n+}"}, {"sha": "db1932a92098e98ed658049e771ad221a900cde2", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/539813944d69ae20e5c576ccd05578f861ee895b/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539813944d69ae20e5c576ccd05578f861ee895b/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=539813944d69ae20e5c576ccd05578f861ee895b", "patch": "@@ -10,6 +10,11 @@ note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating `Foo::bytes::{{constant}}#0`...\n+  --> $DIR/const-size_of-cycle.rs:5:17\n+   |\n+LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires const-evaluating `std::mem::size_of`...\n   --> $SRC_DIR/libcore/mem/mod.rs:LL:COL\n    |\n LL |     intrinsics::size_of::<T>()"}, {"sha": "e10b38a614a9a3d53c0301683a57fc303eaf6f30", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/539813944d69ae20e5c576ccd05578f861ee895b/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539813944d69ae20e5c576ccd05578f861ee895b/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs?ref=539813944d69ae20e5c576ccd05578f861ee895b", "patch": "@@ -1,11 +1,11 @@\n // compile-fail\n \n pub const unsafe fn fake_type<T>() -> T {\n-    hint_unreachable() //~ ERROR any use of this value will cause an error\n+    hint_unreachable()\n }\n \n pub const unsafe fn hint_unreachable() -> ! {\n-    fake_type()\n+    fake_type() //~ ERROR cycle detected when const-evaluating `hint_unreachable` [E0391]\n }\n \n trait Const {\n@@ -15,5 +15,5 @@ trait Const {\n impl <T> Const for T {}\n \n pub fn main() -> () {\n-    dbg!(i32::CONSTANT); //~ ERROR erroneous constant used\n+    dbg!(i32::CONSTANT);\n }"}, {"sha": "2a25ecc55e8747c04fced6f2dddaf606263a05a9", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 14, "deletions": 66, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/539813944d69ae20e5c576ccd05578f861ee895b/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539813944d69ae20e5c576ccd05578f861ee895b/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=539813944d69ae20e5c576ccd05578f861ee895b", "patch": "@@ -1,73 +1,21 @@\n-error: any use of this value will cause an error\n+error[E0391]: cycle detected when const-evaluating `hint_unreachable`\n+  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |\n+LL |     fake_type()\n+   |     ^^^^^^^^^^^\n+   |\n+note: ...which requires const-evaluating `fake_type`...\n   --> $DIR/uninhabited-const-issue-61744.rs:4:5\n    |\n LL |     hint_unreachable()\n    |     ^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     reached the configured maximum number of stack frames\n-   |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside call to `fake_type::<i32>` at $DIR/uninhabited-const-issue-61744.rs:12:36\n-...\n-LL |     const CONSTANT: i32 = unsafe { fake_type() };\n-   |     ---------------------------------------------\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-\n-error[E0080]: erroneous constant used\n-  --> $DIR/uninhabited-const-issue-61744.rs:18:10\n+   = note: ...which again requires const-evaluating `hint_unreachable`, completing the cycle\n+note: cycle used when const-evaluating `fake_type`\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n    |\n-LL |     dbg!(i32::CONSTANT);\n-   |          ^^^^^^^^^^^^^ referenced constant has errors\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "8289a3db6fc5b6ee56c940318a25bc2a859f3be1", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/539813944d69ae20e5c576ccd05578f861ee895b/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539813944d69ae20e5c576ccd05578f861ee895b/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs?ref=539813944d69ae20e5c576ccd05578f861ee895b", "patch": "@@ -1,6 +1,6 @@\n //https://github.com/rust-lang/rust/issues/31364\n \n-const fn a() -> usize { b() } //~ ERROR evaluation of constant value failed\n+const fn a() -> usize { b() } //~ ERROR cycle detected when const-evaluating `a` [E0391]\n const fn b() -> usize { a() }\n const ARR: [i32; a()] = [5; 6];\n "}, {"sha": "6bd5e035f57434e4940f567930dc0d282120fff9", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 12, "deletions": 57, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/539813944d69ae20e5c576ccd05578f861ee895b/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539813944d69ae20e5c576ccd05578f861ee895b/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr?ref=539813944d69ae20e5c576ccd05578f861ee895b", "patch": "@@ -1,66 +1,21 @@\n-error[E0080]: evaluation of constant value failed\n+error[E0391]: cycle detected when const-evaluating `a`\n   --> $DIR/infinite-recursion-const-fn.rs:3:25\n    |\n LL | const fn a() -> usize { b() }\n    |                         ^^^\n-   |                         |\n-   |                         reached the configured maximum number of stack frames\n-   |                         inside call to `b` at $DIR/infinite-recursion-const-fn.rs:3:25\n+   |\n+note: ...which requires const-evaluating `b`...\n+  --> $DIR/infinite-recursion-const-fn.rs:4:25\n+   |\n LL | const fn b() -> usize { a() }\n-   |                         ---\n-   |                         |\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n-   |                         inside call to `a` at $DIR/infinite-recursion-const-fn.rs:4:25\n+   |                         ^^^\n+   = note: ...which again requires const-evaluating `a`, completing the cycle\n+note: cycle used when const-evaluating `ARR::{{constant}}#0`\n+  --> $DIR/infinite-recursion-const-fn.rs:5:18\n+   |\n LL | const ARR: [i32; a()] = [5; 6];\n-   |                  --- inside call to `a` at $DIR/infinite-recursion-const-fn.rs:5:18\n+   |                  ^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "91115ef74b8221c42f0dee9d63021996422a0d08", "filename": "src/test/ui/invalid_const_promotion.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/539813944d69ae20e5c576ccd05578f861ee895b/src%2Ftest%2Fui%2Finvalid_const_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539813944d69ae20e5c576ccd05578f861ee895b/src%2Ftest%2Fui%2Finvalid_const_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_const_promotion.rs?ref=539813944d69ae20e5c576ccd05578f861ee895b", "patch": "@@ -17,12 +17,16 @@ use std::env;\n use std::process::{Command, Stdio};\n \n // this will panic in debug mode and overflow in release mode\n+//\n+// NB we give bar an unused argument because otherwise memoization\n+// of the const fn kicks in, causing a different code path in the\n+// compiler to be executed (see PR #66294).\n #[stable(feature = \"rustc\", since = \"1.0.0\")]\n #[rustc_promotable]\n-const fn bar() -> usize { 0 - 1 }\n+const fn bar(_: bool) -> usize { 0 - 1 }\n \n fn foo() {\n-    let _: &'static _ = &bar();\n+    let _: &'static _ = &bar(true);\n }\n \n #[cfg(unix)]"}]}