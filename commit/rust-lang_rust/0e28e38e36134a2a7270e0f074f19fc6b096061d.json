{"sha": "0e28e38e36134a2a7270e0f074f19fc6b096061d", "node_id": "C_kwDOAAsO6NoAKDBlMjhlMzhlMzYxMzRhMmE3MjcwZTBmMDc0ZjE5ZmM2YjA5NjA2MWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-04T18:23:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-04T18:23:39Z"}, "message": "Auto merge of #8220 - Jarcho:manual_swap_8154, r=camsteffen\n\nConsider auto-deref when linting `manual_swap`\n\nfixes #8154\n\nchangelog: Don't lint `manual_swap` when a field access involves auto-deref", "tree": {"sha": "3a9638b72562f9f5982629a2fe77b0d9b67ecd57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a9638b72562f9f5982629a2fe77b0d9b67ecd57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e28e38e36134a2a7270e0f074f19fc6b096061d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e28e38e36134a2a7270e0f074f19fc6b096061d", "html_url": "https://github.com/rust-lang/rust/commit/0e28e38e36134a2a7270e0f074f19fc6b096061d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e28e38e36134a2a7270e0f074f19fc6b096061d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ea77847fee93e51957e51a4480ef31a04602a7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea77847fee93e51957e51a4480ef31a04602a7a", "html_url": "https://github.com/rust-lang/rust/commit/3ea77847fee93e51957e51a4480ef31a04602a7a"}, {"sha": "a7097b80c3b864d0558fec91e4097de6af972746", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7097b80c3b864d0558fec91e4097de6af972746", "html_url": "https://github.com/rust-lang/rust/commit/a7097b80c3b864d0558fec91e4097de6af972746"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "8c9e229359781adafd94481841d64597608f3f4f", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0e28e38e36134a2a7270e0f074f19fc6b096061d/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e28e38e36134a2a7270e0f074f19fc6b096061d/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=0e28e38e36134a2a7270e0f074f19fc6b096061d", "patch": "@@ -621,6 +621,19 @@ fn projection_stack<'a, 'hir>(mut e: &'a Expr<'hir>) -> (Vec<&'a Expr<'hir>>, &'\n     (result, root)\n }\n \n+/// Gets the mutability of the custom deref adjustment, if any.\n+pub fn expr_custom_deref_adjustment(cx: &LateContext<'_>, e: &Expr<'_>) -> Option<Mutability> {\n+    cx.typeck_results()\n+        .expr_adjustments(e)\n+        .iter()\n+        .find_map(|a| match a.kind {\n+            Adjust::Deref(Some(d)) => Some(Some(d.mutbl)),\n+            Adjust::Deref(None) => None,\n+            _ => Some(None),\n+        })\n+        .and_then(|x| x)\n+}\n+\n /// Checks if two expressions can be mutably borrowed simultaneously\n /// and they aren't dependent on borrowing same thing twice\n pub fn can_mut_borrow_both(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>) -> bool {\n@@ -629,7 +642,15 @@ pub fn can_mut_borrow_both(cx: &LateContext<'_>, e1: &Expr<'_>, e2: &Expr<'_>) -\n     if !eq_expr_value(cx, r1, r2) {\n         return true;\n     }\n+    if expr_custom_deref_adjustment(cx, r1).is_some() || expr_custom_deref_adjustment(cx, r2).is_some() {\n+        return false;\n+    }\n+\n     for (x1, x2) in s1.iter().zip(s2.iter()) {\n+        if expr_custom_deref_adjustment(cx, x1).is_some() || expr_custom_deref_adjustment(cx, x2).is_some() {\n+            return false;\n+        }\n+\n         match (&x1.kind, &x2.kind) {\n             (ExprKind::Field(_, i1), ExprKind::Field(_, i2)) => {\n                 if i1 != i2 {"}, {"sha": "3329efbd4ff429f1daabef797cf9793513b010c0", "filename": "tests/ui/swap.fixed", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0e28e38e36134a2a7270e0f074f19fc6b096061d/tests%2Fui%2Fswap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0e28e38e36134a2a7270e0f074f19fc6b096061d/tests%2Fui%2Fswap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.fixed?ref=0e28e38e36134a2a7270e0f074f19fc6b096061d", "patch": "@@ -122,3 +122,36 @@ fn main() {\n \n     ; std::mem::swap(&mut c.0, &mut a);\n }\n+\n+fn issue_8154() {\n+    struct S1 {\n+        x: i32,\n+        y: i32,\n+    }\n+    struct S2(S1);\n+    struct S3<'a, 'b>(&'a mut &'b mut S1);\n+\n+    impl std::ops::Deref for S2 {\n+        type Target = S1;\n+        fn deref(&self) -> &Self::Target {\n+            &self.0\n+        }\n+    }\n+    impl std::ops::DerefMut for S2 {\n+        fn deref_mut(&mut self) -> &mut Self::Target {\n+            &mut self.0\n+        }\n+    }\n+\n+    // Don't lint. `s.0` is mutably borrowed by `s.x` and `s.y` via the deref impl.\n+    let mut s = S2(S1 { x: 0, y: 0 });\n+    let t = s.x;\n+    s.x = s.y;\n+    s.y = t;\n+\n+    // Accessing through a mutable reference is fine\n+    let mut s = S1 { x: 0, y: 0 };\n+    let mut s = &mut s;\n+    let s = S3(&mut s);\n+    std::mem::swap(&mut s.0.x, &mut s.0.y);\n+}"}, {"sha": "8179ac1f2ab028a7a5d5eb26a0adcb6a24c811c7", "filename": "tests/ui/swap.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0e28e38e36134a2a7270e0f074f19fc6b096061d/tests%2Fui%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e28e38e36134a2a7270e0f074f19fc6b096061d/tests%2Fui%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.rs?ref=0e28e38e36134a2a7270e0f074f19fc6b096061d", "patch": "@@ -144,3 +144,38 @@ fn main() {\n     c.0 = a;\n     a = t;\n }\n+\n+fn issue_8154() {\n+    struct S1 {\n+        x: i32,\n+        y: i32,\n+    }\n+    struct S2(S1);\n+    struct S3<'a, 'b>(&'a mut &'b mut S1);\n+\n+    impl std::ops::Deref for S2 {\n+        type Target = S1;\n+        fn deref(&self) -> &Self::Target {\n+            &self.0\n+        }\n+    }\n+    impl std::ops::DerefMut for S2 {\n+        fn deref_mut(&mut self) -> &mut Self::Target {\n+            &mut self.0\n+        }\n+    }\n+\n+    // Don't lint. `s.0` is mutably borrowed by `s.x` and `s.y` via the deref impl.\n+    let mut s = S2(S1 { x: 0, y: 0 });\n+    let t = s.x;\n+    s.x = s.y;\n+    s.y = t;\n+\n+    // Accessing through a mutable reference is fine\n+    let mut s = S1 { x: 0, y: 0 };\n+    let mut s = &mut s;\n+    let s = S3(&mut s);\n+    let t = s.0.x;\n+    s.0.x = s.0.y;\n+    s.0.y = t;\n+}"}, {"sha": "2b556b475cee9da92ba55ebc79139ff980231ed0", "filename": "tests/ui/swap.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e28e38e36134a2a7270e0f074f19fc6b096061d/tests%2Fui%2Fswap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e28e38e36134a2a7270e0f074f19fc6b096061d/tests%2Fui%2Fswap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.stderr?ref=0e28e38e36134a2a7270e0f074f19fc6b096061d", "patch": "@@ -108,5 +108,15 @@ LL | |     a = c.0;\n    |\n    = note: or maybe you should use `std::mem::replace`?\n \n-error: aborting due to 12 previous errors\n+error: this looks like you are swapping `s.0.x` and `s.0.y` manually\n+  --> $DIR/swap.rs:178:5\n+   |\n+LL | /     let t = s.0.x;\n+LL | |     s.0.x = s.0.y;\n+LL | |     s.0.y = t;\n+   | |_____________^ help: try: `std::mem::swap(&mut s.0.x, &mut s.0.y)`\n+   |\n+   = note: or maybe you should use `std::mem::replace`?\n+\n+error: aborting due to 13 previous errors\n "}]}