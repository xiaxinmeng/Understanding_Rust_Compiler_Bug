{"sha": "fa6bb398553200c0bc6ddba488eec43d5a497aef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNmJiMzk4NTUzMjAwYzBiYzZkZGJhNDg4ZWVjNDNkNWE0OTdhZWY=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-11-06T05:13:17Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-12-06T05:03:14Z"}, "message": "Add caller_location paramter to FnAbi::new_internal.\n\nWe pass it in `of_instance` when the instance requires caller location.", "tree": {"sha": "afa59892e80c7c65d2ec26377bb2bde17bc79b4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afa59892e80c7c65d2ec26377bb2bde17bc79b4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa6bb398553200c0bc6ddba488eec43d5a497aef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6bb398553200c0bc6ddba488eec43d5a497aef", "html_url": "https://github.com/rust-lang/rust/commit/fa6bb398553200c0bc6ddba488eec43d5a497aef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa6bb398553200c0bc6ddba488eec43d5a497aef/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4773ded15ba23518cd3ba23ab30a2eaf69d9c20f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4773ded15ba23518cd3ba23ab30a2eaf69d9c20f", "html_url": "https://github.com/rust-lang/rust/commit/4773ded15ba23518cd3ba23ab30a2eaf69d9c20f"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "6c921134ab895ad1ca0f21710d33b51cac0694e4", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fa6bb398553200c0bc6ddba488eec43d5a497aef/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa6bb398553200c0bc6ddba488eec43d5a497aef/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=fa6bb398553200c0bc6ddba488eec43d5a497aef", "patch": "@@ -2434,6 +2434,7 @@ where\n         cx: &C,\n         sig: ty::PolyFnSig<'tcx>,\n         extra_args: &[Ty<'tcx>],\n+        caller_location: Option<Ty<'tcx>>,\n         mk_arg_type: impl Fn(Ty<'tcx>, Option<usize>) -> ArgAbi<'tcx, Ty<'tcx>>,\n     ) -> Self;\n     fn adjust_for_abi(&mut self, cx: &C, abi: SpecAbi);\n@@ -2448,13 +2449,19 @@ where\n         + HasParamEnv<'tcx>,\n {\n     fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n-        call::FnAbi::new_internal(cx, sig, extra_args, |ty, _| ArgAbi::new(cx.layout_of(ty)))\n+        call::FnAbi::new_internal(cx, sig, extra_args, None, |ty, _| ArgAbi::new(cx.layout_of(ty)))\n     }\n \n     fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> Self {\n         let sig = instance.fn_sig_for_fn_abi(cx.tcx());\n \n-        call::FnAbi::new_internal(cx, sig, extra_args, |ty, arg_idx| {\n+        let caller_location = if instance.def.requires_caller_location(cx.tcx()) {\n+            Some(cx.tcx().caller_location_ty())\n+        } else {\n+            None\n+        };\n+\n+        call::FnAbi::new_internal(cx, sig, extra_args, caller_location, |ty, arg_idx| {\n             let mut layout = cx.layout_of(ty);\n             // Don't pass the vtable, it's not an argument of the virtual fn.\n             // Instead, pass just the data pointer, but give it the type `*const/mut dyn Trait`\n@@ -2512,6 +2519,7 @@ where\n         cx: &C,\n         sig: ty::PolyFnSig<'tcx>,\n         extra_args: &[Ty<'tcx>],\n+        caller_location: Option<Ty<'tcx>>,\n         mk_arg_type: impl Fn(Ty<'tcx>, Option<usize>) -> ArgAbi<'tcx, Ty<'tcx>>,\n     ) -> Self {\n         debug!(\"FnAbi::new_internal({:?}, {:?})\", sig, extra_args);\n@@ -2684,6 +2692,7 @@ where\n                 .iter()\n                 .cloned()\n                 .chain(extra_args)\n+                .chain(caller_location)\n                 .enumerate()\n                 .map(|(i, ty)| arg_of(ty, Some(i)))\n                 .collect(),"}]}