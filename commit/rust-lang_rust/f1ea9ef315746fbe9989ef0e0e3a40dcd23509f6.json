{"sha": "f1ea9ef315746fbe9989ef0e0e3a40dcd23509f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZWE5ZWYzMTU3NDZmYmU5OTg5ZWYwZTBlM2E0MGRjZDIzNTA5ZjY=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T09:21:23Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-05-24T18:49:38Z"}, "message": "Remove `ty_to_primitive`", "tree": {"sha": "01dc68178bf2ae1a15653a7a18bdf83b4a58256d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01dc68178bf2ae1a15653a7a18bdf83b4a58256d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ea9ef315746fbe9989ef0e0e3a40dcd23509f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ea9ef315746fbe9989ef0e0e3a40dcd23509f6", "html_url": "https://github.com/rust-lang/rust/commit/f1ea9ef315746fbe9989ef0e0e3a40dcd23509f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ea9ef315746fbe9989ef0e0e3a40dcd23509f6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "879d8f707056530b4b3054a3c089f9c21a72ee46", "url": "https://api.github.com/repos/rust-lang/rust/commits/879d8f707056530b4b3054a3c089f9c21a72ee46", "html_url": "https://github.com/rust-lang/rust/commit/879d8f707056530b4b3054a3c089f9c21a72ee46"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "983d777ef9b129fa2d7bc48b0eb7fa2401f2e1b3", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1ea9ef315746fbe9989ef0e0e3a40dcd23509f6/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ea9ef315746fbe9989ef0e0e3a40dcd23509f6/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=f1ea9ef315746fbe9989ef0e0e3a40dcd23509f6", "patch": "@@ -1265,13 +1265,6 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         }\n     }\n \n-    pub fn ty_to_primitive(&self, ty: Ty<'tcx>) -> EvalResult<'tcx, layout::Primitive> {\n-        match self.layout_of(ty)?.abi {\n-            layout::Abi::Scalar(ref scalar) => Ok(scalar.value),\n-            _ => err!(TypeNotPrimitive(ty)),\n-        }\n-    }\n-\n     fn ensure_valid_value(&self, val: Scalar, ty: Ty<'tcx>) -> EvalResult<'tcx> {\n         match ty.sty {\n             ty::TyBool => val.to_bool().map(|_| ()),"}, {"sha": "8a2a78daa357052ec896c71bf4b81a629b15c604", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f1ea9ef315746fbe9989ef0e0e3a40dcd23509f6/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ea9ef315746fbe9989ef0e0e3a40dcd23509f6/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=f1ea9ef315746fbe9989ef0e0e3a40dcd23509f6", "patch": "@@ -1,5 +1,5 @@\n use rustc::mir;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, layout};\n use syntax::ast::FloatTy;\n use rustc::ty::layout::LayoutOf;\n use rustc_apfloat::ieee::{Double, Single};\n@@ -68,8 +68,17 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     ) -> EvalResult<'tcx, (Scalar, bool)> {\n         use rustc::mir::BinOp::*;\n \n-        let left_kind = self.ty_to_primitive(left_ty)?;\n-        let right_kind = self.ty_to_primitive(right_ty)?;\n+        let left_layout = self.layout_of(left_ty)?;\n+        let right_layout = self.layout_of(right_ty)?;\n+\n+        let left_kind = match left_layout.abi {\n+            layout::Abi::Scalar(ref scalar) => scalar.value,\n+            _ => return err!(TypeNotPrimitive(left_ty)),\n+        };\n+        let right_kind = match right_layout.abi {\n+            layout::Abi::Scalar(ref scalar) => scalar.value,\n+            _ => return err!(TypeNotPrimitive(right_ty)),\n+        };\n         trace!(\"Running binary op {:?}: {:?} ({:?}), {:?} ({:?})\", bin_op, left, left_kind, right, right_kind);\n \n         // I: Handle operations that support pointers\n@@ -79,9 +88,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             }\n         }\n \n-        let left_layout = self.layout_of(left_ty)?;\n-        let right_layout = self.layout_of(right_ty)?;\n-\n         // II: From now on, everything must be bytes, no pointers\n         let l = left.to_bits(left_layout.size)?;\n         let r = right.to_bits(right_layout.size)?;"}]}