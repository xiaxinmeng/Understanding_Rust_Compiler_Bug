{"sha": "c7325bdd8e29d57e7bc971b86accfb352c4262bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MzI1YmRkOGUyOWQ1N2U3YmM5NzFiODZhY2NmYjM1MmM0MjYyYmM=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-04-14T03:22:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-16T02:45:00Z"}, "message": "Add a default impl for Set::is_superset\n\nI also deleted a bunch of documentation that was copy/pasted from the\ntrait definition.", "tree": {"sha": "320b3c23ef713d787533b24f71a3d617bd8882ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/320b3c23ef713d787533b24f71a3d617bd8882ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7325bdd8e29d57e7bc971b86accfb352c4262bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7325bdd8e29d57e7bc971b86accfb352c4262bc", "html_url": "https://github.com/rust-lang/rust/commit/c7325bdd8e29d57e7bc971b86accfb352c4262bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7325bdd8e29d57e7bc971b86accfb352c4262bc/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54ec04f1c12c7fb4dbe5f01fdeb73d1079fef53d", "url": "https://api.github.com/repos/rust-lang/rust/commits/54ec04f1c12c7fb4dbe5f01fdeb73d1079fef53d", "html_url": "https://github.com/rust-lang/rust/commit/54ec04f1c12c7fb4dbe5f01fdeb73d1079fef53d"}], "stats": {"total": 55, "additions": 11, "deletions": 44}, "files": [{"sha": "46b93242685e4380c3006e08c7a2bff7eda6ecee", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7325bdd8e29d57e7bc971b86accfb352c4262bc/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7325bdd8e29d57e7bc971b86accfb352c4262bc/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=c7325bdd8e29d57e7bc971b86accfb352c4262bc", "patch": "@@ -1424,43 +1424,28 @@ impl<T: TotalEq + Hash<S>, S, H: Hasher<S>> Eq for HashSet<T, H> {\n }\n \n impl<T: TotalEq + Hash<S>, S, H: Hasher<S>> Container for HashSet<T, H> {\n-    /// Return the number of elements in the set\n     fn len(&self) -> uint { self.map.len() }\n }\n \n impl<T: TotalEq + Hash<S>, S, H: Hasher<S>> Mutable for HashSet<T, H> {\n-    /// Clear the set, removing all values.\n     fn clear(&mut self) { self.map.clear() }\n }\n \n impl<T: TotalEq + Hash<S>, S, H: Hasher<S>> Set<T> for HashSet<T, H> {\n-    /// Return true if the set contains a value\n     fn contains(&self, value: &T) -> bool { self.map.search(value).is_some() }\n \n-    /// Return true if the set has no elements in common with `other`.\n-    /// This is equivalent to checking for an empty intersection.\n     fn is_disjoint(&self, other: &HashSet<T, H>) -> bool {\n         self.iter().all(|v| !other.contains(v))\n     }\n \n-    /// Return true if the set is a subset of another\n     fn is_subset(&self, other: &HashSet<T, H>) -> bool {\n         self.iter().all(|v| other.contains(v))\n     }\n-\n-    /// Return true if the set is a superset of another\n-    fn is_superset(&self, other: &HashSet<T, H>) -> bool {\n-        other.is_subset(self)\n-    }\n }\n \n impl<T: TotalEq + Hash<S>, S, H: Hasher<S>> MutableSet<T> for HashSet<T, H> {\n-    /// Add a value to the set. Return true if the value was not already\n-    /// present in the set.\n     fn insert(&mut self, value: T) -> bool { self.map.insert(value, ()) }\n \n-    /// Remove a value from the set. Return true if the value was\n-    /// present in the set.\n     fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n }\n "}, {"sha": "b14c5fd9f29599d51b4f6e1d75be67153aab81ff", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c7325bdd8e29d57e7bc971b86accfb352c4262bc/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7325bdd8e29d57e7bc971b86accfb352c4262bc/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=c7325bdd8e29d57e7bc971b86accfb352c4262bc", "patch": "@@ -573,74 +573,54 @@ impl<T: Ord + TotalOrd> Ord for TreeSet<T> {\n }\n \n impl<T: TotalOrd> Container for TreeSet<T> {\n-    /// Return the number of elements in the set\n     #[inline]\n     fn len(&self) -> uint { self.map.len() }\n-\n-    /// Return true if the set contains no elements\n-    #[inline]\n-    fn is_empty(&self) -> bool { self.map.is_empty() }\n }\n \n impl<T: TotalOrd> Mutable for TreeSet<T> {\n-    /// Clear the set, removing all values.\n     #[inline]\n     fn clear(&mut self) { self.map.clear() }\n }\n \n impl<T: TotalOrd> Set<T> for TreeSet<T> {\n-    /// Return true if the set contains a value\n     #[inline]\n     fn contains(&self, value: &T) -> bool {\n         self.map.contains_key(value)\n     }\n \n-    /// Return true if the set has no elements in common with `other`.\n-    /// This is equivalent to checking for an empty intersection.\n     fn is_disjoint(&self, other: &TreeSet<T>) -> bool {\n         self.intersection(other).next().is_none()\n     }\n \n-    /// Return true if the set is a subset of another\n-    #[inline]\n     fn is_subset(&self, other: &TreeSet<T>) -> bool {\n-        other.is_superset(self)\n-    }\n-\n-    /// Return true if the set is a superset of another\n-    fn is_superset(&self, other: &TreeSet<T>) -> bool {\n         let mut x = self.iter();\n         let mut y = other.iter();\n         let mut a = x.next();\n         let mut b = y.next();\n-        while b.is_some() {\n-            if a.is_none() {\n-                return false\n+        while a.is_some() {\n+            if b.is_none() {\n+                return false;\n             }\n \n             let a1 = a.unwrap();\n             let b1 = b.unwrap();\n \n-            match a1.cmp(b1) {\n-              Less => (),\n-              Greater => return false,\n-              Equal => b = y.next(),\n+            match b1.cmp(a1) {\n+                Less => (),\n+                Greater => return false,\n+                Equal => a = x.next(),\n             }\n \n-            a = x.next();\n+            b = y.next();\n         }\n         true\n     }\n }\n \n impl<T: TotalOrd> MutableSet<T> for TreeSet<T> {\n-    /// Add a value to the set. Return true if the value was not already\n-    /// present in the set.\n     #[inline]\n     fn insert(&mut self, value: T) -> bool { self.map.insert(value, ()) }\n \n-    /// Remove a value from the set. Return true if the value was\n-    /// present in the set.\n     #[inline]\n     fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n }"}, {"sha": "e8ee3792dcf2cdf423398ec3606003b594d9b192", "filename": "src/libstd/container.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7325bdd8e29d57e7bc971b86accfb352c4262bc/src%2Flibstd%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7325bdd8e29d57e7bc971b86accfb352c4262bc/src%2Flibstd%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcontainer.rs?ref=c7325bdd8e29d57e7bc971b86accfb352c4262bc", "patch": "@@ -88,7 +88,9 @@ pub trait Set<T>: Container {\n     fn is_subset(&self, other: &Self) -> bool;\n \n     /// Return true if the set is a superset of another\n-    fn is_superset(&self, other: &Self) -> bool;\n+    fn is_superset(&self, other: &Self) -> bool {\n+        other.is_subset(self)\n+    }\n \n     // FIXME #8154: Add difference, sym. difference, intersection and union iterators\n }"}]}