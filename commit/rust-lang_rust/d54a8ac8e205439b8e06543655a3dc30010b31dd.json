{"sha": "d54a8ac8e205439b8e06543655a3dc30010b31dd", "node_id": "C_kwDOAAsO6NoAKGQ1NGE4YWM4ZTIwNTQzOWI4ZTA2NTQzNjU1YTNkYzMwMDEwYjMxZGQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-12T18:56:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-12T18:56:24Z"}, "message": "Rollup merge of #110222 - lovelymono:rustc-expand-mbe-diagnostic, r=davidtwco\n\nImprove the error message when forwarding a matched fragment to another macro\n\nAdds a link to [Forwarding a matched fragment](https://doc.rust-lang.org/nightly/reference/macros-by-example.html#forwarding-a-matched-fragment) section of the Rust Reference, and suggests a possible fix (using `:tt` instead in the macro definition).\n\nAlso removes typos from the original message, it should be `:lifetime` instead of `$lifetime`.\n\n## Motivation\n\nWhen trying to write a macro which uses a literal in the matcher from the outer macro, like the following one, using a fragment specified that isn't one of `:ident`, `:lifetime`, or `:tt` currently results in a hard to understand message.\n\n```rs\nmacro_rules! make_t_for_all_tokens {\n    ($($name:literal as $variant:expr,)*) => {\n        macro_rules! t {\n            $(\n                ($name) => {\n                    $variant\n                };\n            )*\n        }\n    };\n}\n\nmake_t_for_all_tokens! {\n    \"fn\" as Token::Fn,\n    \"return\" as Token::Return,\n    \"let\" as Token::Let,\n}\n\n// This creates\n//\n// macro_rules! t {\n//     (\"fn\") => {\n//         Token::Fn\n//     };\n//     (\"return\") => {\n//         Token::Return\n//     };\n//     (\"let\") => {\n//         Token::Let\n//     };\n// }\n\nt![\"fn\"];\n```\n\n### Before\n\n```\nerror: no rules expected the token `\"fn\"`\n   --> src/main.rs:103:10\n    |\n32  |         macro_rules! t {\n    |         -------------- when calling this macro\n...\n103 |     t![\"fn\"];\n    |        ^^^^ no rules expected this token in macro call\n    |\nnote: while trying to match `\"fn\"`\n   --> src/main.rs:34:6\n    |\n34  |                   ($name) => {\n    |                    ^^^^^\n...\n58  | / make_t_for_all_tokens! {\n59  | |     \"fn\" as Token::Fn,\n60  | |     \"return\" as Token::Return,\n61  | |     \"let\" as Token::Let,\n62  | | }\n    | |_- in this macro invocation\n    = note: captured metavariables except for `$tt`, `$ident` and `$lifetime` cannot be compared to other tokens\n    = note: this error originates in the macro `make_t_for_all_tokens` (in Nightly builds, run with -Z macro-backtrace for more info)\n```\n\n### After\n\n```\nerror: no rules expected the token `\"fn\"`\n   --> src/main.rs:103:10\n    |\n32  |         macro_rules! t {\n    |         -------------- when calling this macro\n...\n103 |     t![\"fn\"];\n    |        ^^^^ no rules expected this token in macro call\n    |\nnote: while trying to match `\"fn\"`\n   --> src/main.rs:34:6\n    |\n34  |                   ($name) => {\n    |                    ^^^^^\n...\n58  | / make_t_for_all_tokens! {\n59  | |     \"fn\" as Token::Fn,\n60  | |     \"return\" as Token::Return,\n61  | |     \"let\" as Token::Let,\n62  | | }\n    | |_- in this macro invocation\n    = note: captured metavariables except for `:tt`, `:ident` and `:lifetime` cannot be compared to other tokens\n    = note: see https://doc.rust-lang.org/nightly/reference/macros-by-example.html#forwarding-a-matched-fragment for more information\n    = help: try using `:tt` instead in the macro definition\n    = note: this error originates in the macro `make_t_for_all_tokens` (in Nightly builds, run with -Z macro-backtrace for more info)\n```\n\n## Unresolved questions\n\n- Preferrably the suggestion should be attached to the `$name:literal` part of the outer macro, instead of being in the notes section at the end. But I'm not familiar with how the compiler works at all, and I have no idea how to approach this kind of solution.\n- `@Nilstrieb` raised a question that the suggestion of adding `:tt` isn't accurate when there's more than `tt` being matched, for example when the input is an `item`.", "tree": {"sha": "ba8be3a0a030c87172a217ff233c4c1dca039cfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba8be3a0a030c87172a217ff233c4c1dca039cfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d54a8ac8e205439b8e06543655a3dc30010b31dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkNv7YCRBK7hj4Ov3rIwAAD3MIAH3/6EasiaUgaOh0gIt75m5J\ntUf6mvg20AfCbwCBKcOeYUMmUpYUFCCHSgKsOlOP9uc1OpctUVMNTWh3if0Eqpx3\n5m7zXHez8Cb85DMbPiPArcZNtFSpqaMSnupvRyJB36SdJETlPJ2SRWy5cIM7ohWE\nVSY82b0gvQfiqolgNu1I/qGoCXw1blsrGxxaaE3n92WbFPSIt79qT/FjWbUfZFia\n0LSN4FUqyI79RkNe2xzlMd8ldCAPSiIdspOeJBC4BLH4MXsfkGRUmovXrLnObDo+\njyhQ30y9UK8xJx2IwRkHbsQXks7Ww4czjh2KxF9N39cs6rSS4+GRy/oSMG4aw4o=\n=pdff\n-----END PGP SIGNATURE-----\n", "payload": "tree ba8be3a0a030c87172a217ff233c4c1dca039cfb\nparent b53817df19fcfa770dd8be5a2f6ea24c691bbb1a\nparent 04f20d4ac8677b13c41e54fdde319c4e13b58330\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681325784 +0200\ncommitter GitHub <noreply@github.com> 1681325784 +0200\n\nRollup merge of #110222 - lovelymono:rustc-expand-mbe-diagnostic, r=davidtwco\n\nImprove the error message when forwarding a matched fragment to another macro\n\nAdds a link to [Forwarding a matched fragment](https://doc.rust-lang.org/nightly/reference/macros-by-example.html#forwarding-a-matched-fragment) section of the Rust Reference, and suggests a possible fix (using `:tt` instead in the macro definition).\n\nAlso removes typos from the original message, it should be `:lifetime` instead of `$lifetime`.\n\n## Motivation\n\nWhen trying to write a macro which uses a literal in the matcher from the outer macro, like the following one, using a fragment specified that isn't one of `:ident`, `:lifetime`, or `:tt` currently results in a hard to understand message.\n\n```rs\nmacro_rules! make_t_for_all_tokens {\n    ($($name:literal as $variant:expr,)*) => {\n        macro_rules! t {\n            $(\n                ($name) => {\n                    $variant\n                };\n            )*\n        }\n    };\n}\n\nmake_t_for_all_tokens! {\n    \"fn\" as Token::Fn,\n    \"return\" as Token::Return,\n    \"let\" as Token::Let,\n}\n\n// This creates\n//\n// macro_rules! t {\n//     (\"fn\") => {\n//         Token::Fn\n//     };\n//     (\"return\") => {\n//         Token::Return\n//     };\n//     (\"let\") => {\n//         Token::Let\n//     };\n// }\n\nt![\"fn\"];\n```\n\n### Before\n\n```\nerror: no rules expected the token `\"fn\"`\n   --> src/main.rs:103:10\n    |\n32  |         macro_rules! t {\n    |         -------------- when calling this macro\n...\n103 |     t![\"fn\"];\n    |        ^^^^ no rules expected this token in macro call\n    |\nnote: while trying to match `\"fn\"`\n   --> src/main.rs:34:6\n    |\n34  |                   ($name) => {\n    |                    ^^^^^\n...\n58  | / make_t_for_all_tokens! {\n59  | |     \"fn\" as Token::Fn,\n60  | |     \"return\" as Token::Return,\n61  | |     \"let\" as Token::Let,\n62  | | }\n    | |_- in this macro invocation\n    = note: captured metavariables except for `$tt`, `$ident` and `$lifetime` cannot be compared to other tokens\n    = note: this error originates in the macro `make_t_for_all_tokens` (in Nightly builds, run with -Z macro-backtrace for more info)\n```\n\n### After\n\n```\nerror: no rules expected the token `\"fn\"`\n   --> src/main.rs:103:10\n    |\n32  |         macro_rules! t {\n    |         -------------- when calling this macro\n...\n103 |     t![\"fn\"];\n    |        ^^^^ no rules expected this token in macro call\n    |\nnote: while trying to match `\"fn\"`\n   --> src/main.rs:34:6\n    |\n34  |                   ($name) => {\n    |                    ^^^^^\n...\n58  | / make_t_for_all_tokens! {\n59  | |     \"fn\" as Token::Fn,\n60  | |     \"return\" as Token::Return,\n61  | |     \"let\" as Token::Let,\n62  | | }\n    | |_- in this macro invocation\n    = note: captured metavariables except for `:tt`, `:ident` and `:lifetime` cannot be compared to other tokens\n    = note: see https://doc.rust-lang.org/nightly/reference/macros-by-example.html#forwarding-a-matched-fragment for more information\n    = help: try using `:tt` instead in the macro definition\n    = note: this error originates in the macro `make_t_for_all_tokens` (in Nightly builds, run with -Z macro-backtrace for more info)\n```\n\n## Unresolved questions\n\n- Preferrably the suggestion should be attached to the `$name:literal` part of the outer macro, instead of being in the notes section at the end. But I'm not familiar with how the compiler works at all, and I have no idea how to approach this kind of solution.\n- `@Nilstrieb` raised a question that the suggestion of adding `:tt` isn't accurate when there's more than `tt` being matched, for example when the input is an `item`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d54a8ac8e205439b8e06543655a3dc30010b31dd", "html_url": "https://github.com/rust-lang/rust/commit/d54a8ac8e205439b8e06543655a3dc30010b31dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d54a8ac8e205439b8e06543655a3dc30010b31dd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b53817df19fcfa770dd8be5a2f6ea24c691bbb1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b53817df19fcfa770dd8be5a2f6ea24c691bbb1a", "html_url": "https://github.com/rust-lang/rust/commit/b53817df19fcfa770dd8be5a2f6ea24c691bbb1a"}, {"sha": "04f20d4ac8677b13c41e54fdde319c4e13b58330", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f20d4ac8677b13c41e54fdde319c4e13b58330", "html_url": "https://github.com/rust-lang/rust/commit/04f20d4ac8677b13c41e54fdde319c4e13b58330"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "35572292271c4997962cdc801f2edf678639eb40", "filename": "compiler/rustc_expand/src/mbe/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d54a8ac8e205439b8e06543655a3dc30010b31dd/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d54a8ac8e205439b8e06543655a3dc30010b31dd/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs?ref=d54a8ac8e205439b8e06543655a3dc30010b31dd", "patch": "@@ -66,7 +66,12 @@ pub(super) fn failed_to_match_macro<'cx>(\n         && (matches!(expected_token.kind, TokenKind::Interpolated(_))\n             || matches!(token.kind, TokenKind::Interpolated(_)))\n     {\n-        err.note(\"captured metavariables except for `$tt`, `$ident` and `$lifetime` cannot be compared to other tokens\");\n+        err.note(\"captured metavariables except for `:tt`, `:ident` and `:lifetime` cannot be compared to other tokens\");\n+        err.note(\"see <https://doc.rust-lang.org/nightly/reference/macros-by-example.html#forwarding-a-matched-fragment> for more information\");\n+\n+        if !def_span.is_dummy() && !cx.source_map().is_imported(def_span) {\n+            err.help(\"try using `:tt` instead in the macro definition\");\n+        }\n     }\n \n     // Check whether there's a missing comma in this macro call, like `println!(\"{}\" a);`"}, {"sha": "c2b047022ed5a623c1b12e99dfa935258f05858f", "filename": "tests/ui/macros/nonterminal-matching.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d54a8ac8e205439b8e06543655a3dc30010b31dd/tests%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d54a8ac8e205439b8e06543655a3dc30010b31dd/tests%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fnonterminal-matching.stderr?ref=d54a8ac8e205439b8e06543655a3dc30010b31dd", "patch": "@@ -18,7 +18,9 @@ LL |     macro n(a $nt_item b) {\n ...\n LL | complex_nonterminal!(enum E {});\n    | ------------------------------- in this macro invocation\n-   = note: captured metavariables except for `$tt`, `$ident` and `$lifetime` cannot be compared to other tokens\n+   = note: captured metavariables except for `:tt`, `:ident` and `:lifetime` cannot be compared to other tokens\n+   = note: see <https://doc.rust-lang.org/nightly/reference/macros-by-example.html#forwarding-a-matched-fragment> for more information\n+   = help: try using `:tt` instead in the macro definition\n    = note: this error originates in the macro `complex_nonterminal` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}]}