{"sha": "0e6fb8e8da2f3256f9e2c2c079b8174acf80d94d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNmZiOGU4ZGEyZjMyNTZmOWUyYzJjMDc5YjgxNzRhY2Y4MGQ5NGQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-21T16:53:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-30T22:11:19Z"}, "message": "review comments", "tree": {"sha": "4ecc3d9189caca3b03e6f18212be9df5e0822fb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ecc3d9189caca3b03e6f18212be9df5e0822fb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e6fb8e8da2f3256f9e2c2c079b8174acf80d94d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e6fb8e8da2f3256f9e2c2c079b8174acf80d94d", "html_url": "https://github.com/rust-lang/rust/commit/0e6fb8e8da2f3256f9e2c2c079b8174acf80d94d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e6fb8e8da2f3256f9e2c2c079b8174acf80d94d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ae87ff59d1261d6295d82b0b29bc5440ada0b32", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae87ff59d1261d6295d82b0b29bc5440ada0b32", "html_url": "https://github.com/rust-lang/rust/commit/2ae87ff59d1261d6295d82b0b29bc5440ada0b32"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "efdcdf4e7d06fdd880b58d1ff3d226b3854cca0e", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0e6fb8e8da2f3256f9e2c2c079b8174acf80d94d/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e6fb8e8da2f3256f9e2c2c079b8174acf80d94d/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=0e6fb8e8da2f3256f9e2c2c079b8174acf80d94d", "patch": "@@ -192,20 +192,23 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             // All valid indexing looks like this; might encounter non-valid indexes at this point.\n             let base_ty = tables.expr_ty_adjusted_opt(&base).map(|t| &t.kind);\n             if base_ty.is_none() {\n+                // When encountering `return [0][0]` outside of a `fn` body we can encounter a base\n+                // that isn't in the type table. We assume more relevant errors have already been\n+                // emitted, so we delay an ICE if none have. (#64638)\n                 self.tcx().sess.delay_span_bug(e.span, &format!(\"bad base: `{:?}`\", base));\n-                return;\n             }\n             if let Some(ty::Ref(_, base_ty, _)) = base_ty {\n-                let index_ty = match tables.expr_ty_adjusted_opt(&index) {\n-                    Some(t) => t,\n-                    None => {\n-                        self.tcx().sess.delay_span_bug(\n-                            e.span,\n-                            &format!(\"bad index {:?} for base: `{:?}`\", index, base),\n-                        );\n-                        self.fcx.tcx.types.err\n-                    }\n-                };\n+                let index_ty = tables.expr_ty_adjusted_opt(&index).unwrap_or_else(|| {\n+                    // When encountering `return [0][0]` outside of a `fn` body we would attempt\n+                    // to access an unexistend index. We assume that more relevant errors will\n+                    // already have been emitted, so we only gate on this with an ICE if no\n+                    // error has been emitted. (#64638)\n+                    self.tcx().sess.delay_span_bug(\n+                        e.span,\n+                        &format!(\"bad index {:?} for base: `{:?}`\", index, base),\n+                    );\n+                    self.fcx.tcx.types.err\n+                });\n                 let index_ty = self.fcx.resolve_vars_if_possible(&index_ty);\n \n                 if base_ty.builtin_index().is_some() && index_ty == self.fcx.tcx.types.usize {"}]}