{"sha": "6184a963f71f934f43fb75ca7effd656b23cd9f8", "node_id": "C_kwDOAAsO6NoAKDYxODRhOTYzZjcxZjkzNGY0M2ZiNzVjYTdlZmZkNjU2YjIzY2Q5Zjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-08T00:02:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-08T00:02:45Z"}, "message": "Auto merge of #104013 - notriddle:notriddle/rustdoc-sizeof, r=GuillaumeGomez\n\nrustdoc: use `ThinVec` and `Box<str>` to shrink `clean::ItemKind`", "tree": {"sha": "e74fd6645b083ed0fef0a145832efee0a7207652", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e74fd6645b083ed0fef0a145832efee0a7207652"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6184a963f71f934f43fb75ca7effd656b23cd9f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6184a963f71f934f43fb75ca7effd656b23cd9f8", "html_url": "https://github.com/rust-lang/rust/commit/6184a963f71f934f43fb75ca7effd656b23cd9f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6184a963f71f934f43fb75ca7effd656b23cd9f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73c9eaf21454b718e7c549984d9eb6e1f75e995c", "url": "https://api.github.com/repos/rust-lang/rust/commits/73c9eaf21454b718e7c549984d9eb6e1f75e995c", "html_url": "https://github.com/rust-lang/rust/commit/73c9eaf21454b718e7c549984d9eb6e1f75e995c"}, {"sha": "e410cd25b2fc8180cd16b908c331363f8f81c803", "url": "https://api.github.com/repos/rust-lang/rust/commits/e410cd25b2fc8180cd16b908c331363f8f81c803", "html_url": "https://github.com/rust-lang/rust/commit/e410cd25b2fc8180cd16b908c331363f8f81c803"}], "stats": {"total": 50, "additions": 22, "deletions": 28}, "files": [{"sha": "3fc4aae923a60aa2cc0ed8794bb22eccbc89a0e9", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6184a963f71f934f43fb75ca7effd656b23cd9f8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6184a963f71f934f43fb75ca7effd656b23cd9f8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=6184a963f71f934f43fb75ca7effd656b23cd9f8", "patch": "@@ -3,7 +3,7 @@\n use std::iter::once;\n use std::sync::Arc;\n \n-use thin_vec::ThinVec;\n+use thin_vec::{thin_vec, ThinVec};\n \n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n@@ -605,7 +605,7 @@ fn build_module_items(\n                         clean::ImportSource {\n                             path: clean::Path {\n                                 res,\n-                                segments: vec![clean::PathSegment {\n+                                segments: thin_vec![clean::PathSegment {\n                                     name: prim_ty.as_sym(),\n                                     args: clean::GenericArgs::AngleBracketed {\n                                         args: Default::default(),"}, {"sha": "56a873e3e8236ba8440ed8ee211fd061097857c3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6184a963f71f934f43fb75ca7effd656b23cd9f8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6184a963f71f934f43fb75ca7effd656b23cd9f8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6184a963f71f934f43fb75ca7effd656b23cd9f8", "patch": "@@ -226,7 +226,7 @@ pub(crate) fn clean_middle_const<'tcx>(\n     // FIXME: instead of storing the stringified expression, store `self` directly instead.\n     Constant {\n         type_: clean_middle_ty(constant.ty(), cx, None),\n-        kind: ConstantKind::TyConst { expr: constant.to_string() },\n+        kind: ConstantKind::TyConst { expr: constant.to_string().into() },\n     }\n }\n \n@@ -1215,7 +1215,7 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n                         true\n                     }\n                     (GenericParamDefKind::Const { .. }, GenericArg::Const(c)) => match &c.kind {\n-                        ConstantKind::TyConst { expr } => expr == param.name.as_str(),\n+                        ConstantKind::TyConst { expr } => **expr == *param.name.as_str(),\n                         _ => false,\n                     },\n                     _ => false,\n@@ -1554,7 +1554,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n                 }\n             };\n \n-            Array(Box::new(clean_ty(ty, cx)), length)\n+            Array(Box::new(clean_ty(ty, cx)), length.into())\n         }\n         TyKind::Tup(tys) => Tuple(tys.iter().map(|ty| clean_ty(ty, cx)).collect()),\n         TyKind::OpaqueDef(item_id, _, _) => {\n@@ -1626,7 +1626,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n         ty::Array(ty, mut n) => {\n             n = n.eval(cx.tcx, ty::ParamEnv::reveal_all());\n             let n = print_const(cx, n);\n-            Array(Box::new(clean_middle_ty(ty, cx, None)), n)\n+            Array(Box::new(clean_middle_ty(ty, cx, None)), n.into())\n         }\n         ty::RawPtr(mt) => RawPointer(mt.mutbl, Box::new(clean_middle_ty(mt.ty, cx, None))),\n         ty::Ref(r, ty, mutbl) => BorrowedRef {"}, {"sha": "3d13f7463cbb09d5428251cf416e01ac1c1c3e3b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6184a963f71f934f43fb75ca7effd656b23cd9f8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6184a963f71f934f43fb75ca7effd656b23cd9f8/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6184a963f71f934f43fb75ca7effd656b23cd9f8", "patch": "@@ -1625,7 +1625,7 @@ pub(crate) enum Type {\n     /// An array type.\n     ///\n     /// The `String` field is a stringified version of the array's length parameter.\n-    Array(Box<Type>, String),\n+    Array(Box<Type>, Box<str>),\n     /// A raw pointer type: `*const i32`, `*mut i32`\n     RawPointer(Mutability, Box<Type>),\n     /// A reference type: `&i32`, `&'a mut Foo`\n@@ -2210,7 +2210,7 @@ impl Span {\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub(crate) struct Path {\n     pub(crate) res: Res,\n-    pub(crate) segments: Vec<PathSegment>,\n+    pub(crate) segments: ThinVec<PathSegment>,\n }\n \n impl Path {\n@@ -2360,7 +2360,7 @@ pub(crate) enum ConstantKind {\n     ///\n     /// Note that `ty::Const` includes generic parameters, and may not always be uniquely identified\n     /// by a DefId. So this field must be different from `Extern`.\n-    TyConst { expr: String },\n+    TyConst { expr: Box<str> },\n     /// A constant (expression) that's not an item or associated item. These are usually found\n     /// nested inside types (e.g., array lengths) or expressions (e.g., repeat counts), and also\n     /// used to define explicit discriminant values for enum variants.\n@@ -2388,7 +2388,7 @@ impl Constant {\n impl ConstantKind {\n     pub(crate) fn expr(&self, tcx: TyCtxt<'_>) -> String {\n         match *self {\n-            ConstantKind::TyConst { ref expr } => expr.clone(),\n+            ConstantKind::TyConst { ref expr } => expr.to_string(),\n             ConstantKind::Extern { def_id } => print_inlined_const(tcx, def_id),\n             ConstantKind::Local { body, .. } | ConstantKind::Anonymous { body } => {\n                 print_const_expr(tcx, body)\n@@ -2574,13 +2574,13 @@ mod size_asserts {\n     // tidy-alphabetical-start\n     static_assert_size!(Crate, 72); // frequently moved by-value\n     static_assert_size!(DocFragment, 32);\n-    static_assert_size!(GenericArg, 48);\n+    static_assert_size!(GenericArg, 32);\n     static_assert_size!(GenericArgs, 32);\n     static_assert_size!(GenericParamDef, 56);\n     static_assert_size!(Generics, 16);\n     static_assert_size!(Item, 56);\n-    static_assert_size!(ItemKind, 88);\n+    static_assert_size!(ItemKind, 64);\n     static_assert_size!(PathSegment, 40);\n-    static_assert_size!(Type, 48);\n+    static_assert_size!(Type, 32);\n     // tidy-alphabetical-end\n }"}, {"sha": "21f8fbe36f173fdf318079caa785f9d4116f9dca", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6184a963f71f934f43fb75ca7effd656b23cd9f8/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6184a963f71f934f43fb75ca7effd656b23cd9f8/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=6184a963f71f934f43fb75ca7effd656b23cd9f8", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::fmt::Write as _;\n use std::mem;\n-use thin_vec::ThinVec;\n+use thin_vec::{thin_vec, ThinVec};\n \n #[cfg(test)]\n mod tests;\n@@ -136,7 +136,7 @@ pub(super) fn external_path<'tcx>(\n     let name = cx.tcx.item_name(did);\n     Path {\n         res: Res::Def(def_kind, did),\n-        segments: vec![PathSegment {\n+        segments: thin_vec![PathSegment {\n             name,\n             args: external_generic_args(cx, did, has_self, bindings, substs),\n         }],\n@@ -242,19 +242,13 @@ pub(crate) fn print_const(cx: &DocContext<'_>, n: ty::Const<'_>) -> String {\n \n             s\n         }\n-        _ => {\n-            let mut s = n.to_string();\n-            // array lengths are obviously usize\n-            if s.ends_with(\"_usize\") {\n-                let n = s.len() - \"_usize\".len();\n-                s.truncate(n);\n-                if s.ends_with(\": \") {\n-                    let n = s.len() - \": \".len();\n-                    s.truncate(n);\n-                }\n-            }\n-            s\n+        // array lengths are obviously usize\n+        ty::ConstKind::Value(ty::ValTree::Leaf(scalar))\n+            if *n.ty().kind() == ty::Uint(ty::UintTy::Usize) =>\n+        {\n+            scalar.to_string()\n         }\n+        _ => n.to_string(),\n     }\n }\n "}, {"sha": "091a1ba70cab7d2a3691acb17dde6d8cd1c9220c", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6184a963f71f934f43fb75ca7effd656b23cd9f8/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6184a963f71f934f43fb75ca7effd656b23cd9f8/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=6184a963f71f934f43fb75ca7effd656b23cd9f8", "patch": "@@ -485,7 +485,7 @@ impl FromWithTcx<clean::Type> for Type {\n             BareFunction(f) => Type::FunctionPointer(Box::new((*f).into_tcx(tcx))),\n             Tuple(t) => Type::Tuple(t.into_tcx(tcx)),\n             Slice(t) => Type::Slice(Box::new((*t).into_tcx(tcx))),\n-            Array(t, s) => Type::Array { type_: Box::new((*t).into_tcx(tcx)), len: s },\n+            Array(t, s) => Type::Array { type_: Box::new((*t).into_tcx(tcx)), len: s.to_string() },\n             ImplTrait(g) => Type::ImplTrait(g.into_tcx(tcx)),\n             Infer => Type::Infer,\n             RawPointer(mutability, type_) => Type::RawPointer {"}]}