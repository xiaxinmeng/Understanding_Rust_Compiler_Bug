{"sha": "71c39dea4d18373e4da35838332071562ea44d33", "node_id": "C_kwDOAAsO6NoAKDcxYzM5ZGVhNGQxODM3M2U0ZGEzNTgzODMzMjA3MTU2MmVhNDRkMzM", "commit": {"author": {"name": "Andreas Molzer", "email": "andreas.molzer@nebumind.com", "date": "2022-10-21T12:05:45Z"}, "committer": {"name": "Andreas Molzer", "email": "andreas.molzer@nebumind.com", "date": "2022-10-21T12:46:14Z"}, "message": "Argument type for mutable with_metadata_of (#75091)\n\nThe method takes two pointer arguments: one `self` supplying the pointer\nvalue, and a second pointer supplying the metadata.\n\nThe new parameter type more clearly reflects the actual requirements.\nThe provenance of the metadata parameter is disregarded completely.\nUsing a mutable pointer in the call site can be coerced to a const\npointer while the reverse is not true.\n\nAn example of the current use:\n\n```rust\n// Manually taking an unsized object from a `ManuallyDrop` into another allocation.\nlet val: &core::mem::ManuallyDrop<T> = \u2026;\n\nlet ptr = val as *const _ as *mut T;\nlet ptr = uninit.as_ptr().with_metadata_of(ptr);\n```\n\nThis could then instead be simplified to:\n\n```rust\n// Manually taking an unsized object from a `ManuallyDrop` into another allocation.\nlet val: &core::mem::ManuallyDrop<T> = \u2026;\n\nlet ptr = uninit.as_ptr().with_metadata_of(&**val);\n```", "tree": {"sha": "e378e604bd197d7400cbaa52ed616769e964a6d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e378e604bd197d7400cbaa52ed616769e964a6d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71c39dea4d18373e4da35838332071562ea44d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71c39dea4d18373e4da35838332071562ea44d33", "html_url": "https://github.com/rust-lang/rust/commit/71c39dea4d18373e4da35838332071562ea44d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71c39dea4d18373e4da35838332071562ea44d33/comments", "author": null, "committer": null, "parents": [{"sha": "b1ab3b738ac718da74cd4aa0bb7f362d0adbdf84", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ab3b738ac718da74cd4aa0bb7f362d0adbdf84", "html_url": "https://github.com/rust-lang/rust/commit/b1ab3b738ac718da74cd4aa0bb7f362d0adbdf84"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "0bb2566fd4c98b32f91b5afc9a19cf2e127a0b24", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71c39dea4d18373e4da35838332071562ea44d33/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c39dea4d18373e4da35838332071562ea44d33/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=71c39dea4d18373e4da35838332071562ea44d33", "patch": "@@ -80,10 +80,14 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"set_ptr_value\", issue = \"75091\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n-    pub fn with_metadata_of<U>(self, mut val: *mut U) -> *mut U\n+    pub fn with_metadata_of<U>(self, val: *const U) -> *mut U\n     where\n         U: ?Sized,\n     {\n+        // Prepare in the type system that we will replace the pointer value with a mutable\n+        // pointer, taking the mutable provenance from the `self` pointer.\n+        let mut val = val as *mut U;\n+        // Pointer to the pointer value within the value.\n         let target = &mut val as *mut *mut U as *mut *mut u8;\n         // SAFETY: In case of a thin pointer, this operations is identical\n         // to a simple assignment. In case of a fat pointer, with the current"}]}