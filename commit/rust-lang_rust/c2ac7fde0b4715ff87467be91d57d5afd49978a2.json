{"sha": "c2ac7fde0b4715ff87467be91d57d5afd49978a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYWM3ZmRlMGI0NzE1ZmY4NzQ2N2JlOTFkNTdkNWFmZDQ5OTc4YTI=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-07-22T23:39:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-29T22:43:12Z"}, "message": "Add pretty=typed test support to compiletest and add a test for fixed size arrays.", "tree": {"sha": "5ef767b49840ae298274c6d3a21d2d15d36cd5ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ef767b49840ae298274c6d3a21d2d15d36cd5ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2ac7fde0b4715ff87467be91d57d5afd49978a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ac7fde0b4715ff87467be91d57d5afd49978a2", "html_url": "https://github.com/rust-lang/rust/commit/c2ac7fde0b4715ff87467be91d57d5afd49978a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2ac7fde0b4715ff87467be91d57d5afd49978a2/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "445340771d8ead72709bbbaffc0b576389985264", "url": "https://api.github.com/repos/rust-lang/rust/commits/445340771d8ead72709bbbaffc0b576389985264", "html_url": "https://github.com/rust-lang/rust/commit/445340771d8ead72709bbbaffc0b576389985264"}], "stats": {"total": 173, "additions": 172, "deletions": 1}, "files": [{"sha": "aa96f3e272712e87165309ab37f122e01f122dbf", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c2ac7fde0b4715ff87467be91d57d5afd49978a2/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ac7fde0b4715ff87467be91d57d5afd49978a2/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=c2ac7fde0b4715ff87467be91d57d5afd49978a2", "patch": "@@ -36,6 +36,10 @@ pub struct TestProps {\n     pub no_prefer_dynamic: bool,\n     // Don't run --pretty expanded when running pretty printing tests\n     pub no_pretty_expanded: bool,\n+    // Which pretty mode are we testing with, default to 'normal'\n+    pub pretty_mode: String,\n+    // Only compare pretty output and don't try compiling\n+    pub pretty_compare_only: bool,\n }\n \n // Load any test directives embedded in the file\n@@ -51,6 +55,8 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     let mut check_stdout = false;\n     let mut no_prefer_dynamic = false;\n     let mut no_pretty_expanded = false;\n+    let mut pretty_mode = None;\n+    let mut pretty_compare_only = false;\n     iter_header(testfile, |ln| {\n         match parse_error_pattern(ln) {\n           Some(ep) => error_patterns.push(ep),\n@@ -85,6 +91,14 @@ pub fn load_props(testfile: &Path) -> TestProps {\n             no_pretty_expanded = parse_no_pretty_expanded(ln);\n         }\n \n+        if pretty_mode.is_none() {\n+            pretty_mode = parse_pretty_mode(ln);\n+        }\n+\n+        if !pretty_compare_only {\n+            pretty_compare_only = parse_pretty_compare_only(ln);\n+        }\n+\n         match parse_aux_build(ln) {\n             Some(ab) => { aux_builds.push(ab); }\n             None => {}\n@@ -115,6 +129,8 @@ pub fn load_props(testfile: &Path) -> TestProps {\n         check_stdout: check_stdout,\n         no_prefer_dynamic: no_prefer_dynamic,\n         no_pretty_expanded: no_pretty_expanded,\n+        pretty_mode: pretty_mode.unwrap_or(\"normal\".to_string()),\n+        pretty_compare_only: pretty_compare_only\n     }\n }\n \n@@ -205,6 +221,14 @@ fn parse_no_pretty_expanded(line: &str) -> bool {\n     parse_name_directive(line, \"no-pretty-expanded\")\n }\n \n+fn parse_pretty_mode(line: &str) -> Option<String> {\n+    parse_name_value_directive(line, \"pretty-mode\")\n+}\n+\n+fn parse_pretty_compare_only(line: &str) -> bool {\n+    parse_name_directive(line, \"pretty-compare-only\")\n+}\n+\n fn parse_exec_env(line: &str) -> Option<(String, String)> {\n     parse_name_value_directive(line, \"exec-env\").map(|nv| {\n         // nv is either FOO or FOO=BAR"}, {"sha": "b8a55fb234dfa28696890833d5cd7ef6652c94a3", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2ac7fde0b4715ff87467be91d57d5afd49978a2/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ac7fde0b4715ff87467be91d57d5afd49978a2/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=c2ac7fde0b4715ff87467be91d57d5afd49978a2", "patch": "@@ -168,7 +168,7 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n                                     props,\n                                     testfile,\n                                     srcs[round].to_string(),\n-                                    \"normal\");\n+                                    props.pretty_mode.as_slice());\n \n         if !proc_res.status.success() {\n             fatal_proc_rec(format!(\"pretty-printing failed in round {}\",\n@@ -200,6 +200,9 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n     compare_source(expected.as_slice(), actual.as_slice());\n \n+    // If we're only making sure that the output matches then just stop here\n+    if props.pretty_compare_only { return; }\n+\n     // Finally, let's make sure it actually appears to remain valid code\n     let proc_res = typecheck_source(config, props, testfile, actual);\n "}, {"sha": "910e3ec5ff829d2bb124dea513437f51e27d9683", "filename": "src/test/pretty/issue-4264.pp", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/c2ac7fde0b4715ff87467be91d57d5afd49978a2/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/c2ac7fde0b4715ff87467be91d57d5afd49978a2/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=c2ac7fde0b4715ff87467be91d57d5afd49978a2", "patch": "@@ -0,0 +1,95 @@\n+#![feature(phase)]\n+#![no_std]\n+#![feature(globs)]\n+#[phase(plugin, link)]\n+extern crate std = \"std\";\n+extern crate native;\n+use std::prelude::*;\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pretty-compare-only\n+// pretty-mode:typed\n+// pp-exact:issue-4264.pp\n+\n+// #4264 fixed-length vector types\n+\n+pub fn foo(_: [int, ..(3 as uint)]) { }\n+\n+pub fn bar() {\n+    static FOO: uint = ((5u as uint) - (4u as uint) as uint);\n+    let _: [(), ..(FOO as uint)] = ([(() as ())] as [(), .. 1]);\n+\n+    let _: [(), ..(1u as uint)] = ([(() as ())] as [(), .. 1]);\n+\n+    let _ =\n+        (((&((([(1i as int), (2 as int), (3 as int)] as [int, .. 3])) as\n+                [int, .. 3]) as &[int, .. 3]) as *const _ as\n+             *const [int, .. 3]) as *const [int, ..(3u as uint)] as\n+            *const [int, .. 3]);\n+    (match (() as ()) {\n+         () => {\n+             #[inline]\n+             #[allow(dead_code)]\n+             static __STATIC_FMTSTR:\n+                    [::std::fmt::rt::Piece<'static>, ..(1u as uint)] =\n+                 ([((::std::fmt::rt::String as\n+                        fn(&'static str) -> core::fmt::rt::Piece<'static>)((\"test\"\n+                                                                               as\n+                                                                               &'static str))\n+                       as core::fmt::rt::Piece<'static>)] as\n+                     [core::fmt::rt::Piece<'static>, .. 1]);\n+             let __args_vec =\n+                 (&([] as &'static [core::fmt::Argument<'static>]) as\n+                     &'static [core::fmt::Argument<'static>]);\n+             let __args =\n+                 (unsafe {\n+                      ((::std::fmt::Arguments::new as\n+                           unsafe fn(&'static [core::fmt::rt::Piece<'static>], &'a [core::fmt::Argument<'a>]) -> core::fmt::Arguments<'a>)((__STATIC_FMTSTR\n+                                                                                                                                               as\n+                                                                                                                                               [core::fmt::rt::Piece<'static>, .. 1]),\n+                                                                                                                                           (__args_vec\n+                                                                                                                                               as\n+                                                                                                                                               &'static [core::fmt::Argument<'static>]))\n+                          as core::fmt::Arguments<'static>)\n+                  } as core::fmt::Arguments<'static>);\n+\n+\n+\n+\n+\n+\n+\n+\n+             ((::std::fmt::format as\n+                  fn(&core::fmt::Arguments<'_>) -> collections::string::String)((&(__args\n+                                                                                      as\n+                                                                                      core::fmt::Arguments<'static>)\n+                                                                                    as\n+                                                                                    &core::fmt::Arguments<'static>))\n+                 as collections::string::String)\n+         }\n+     } as collections::string::String);\n+}\n+pub type Foo = [int, ..(3u as uint)];\n+pub struct Bar {\n+    pub x: [int, ..(3u as uint)],\n+}\n+pub struct TupleBar([int, ..(4u as uint)]);\n+pub enum Baz { BazVariant([int, ..(5u as uint)]), }\n+pub fn id<T>(x: T) -> T { (x as T) }\n+pub fn use_id() {\n+    let _ =\n+        ((id::<[int, ..(3u as uint)]> as\n+             fn([int, .. 3]) -> [int, .. 3])(([(1 as int), (2 as int),\n+                                               (3 as int)] as [int, .. 3])) as\n+            [int, .. 3]);\n+}\n+fn main() { }"}, {"sha": "ad407f48a7ae313f84b5123a81c1ae307c0cc5ea", "filename": "src/test/pretty/issue-4264.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c2ac7fde0b4715ff87467be91d57d5afd49978a2/src%2Ftest%2Fpretty%2Fissue-4264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2ac7fde0b4715ff87467be91d57d5afd49978a2/src%2Ftest%2Fpretty%2Fissue-4264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.rs?ref=c2ac7fde0b4715ff87467be91d57d5afd49978a2", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pretty-compare-only\n+// pretty-mode:typed\n+// pp-exact:issue-4264.pp\n+\n+// #4264 fixed-length vector types\n+\n+pub fn foo(_: [int, ..3]) {}\n+\n+pub fn bar() {\n+    static FOO: uint = 5u - 4u;\n+    let _: [(), ..FOO] = [()];\n+\n+    let _ : [(), ..1u] = [()];\n+\n+    let _ = &([1i,2,3]) as *const _ as *const [int, ..3u];\n+\n+    format!(\"test\");\n+}\n+\n+pub type Foo = [int, ..3u];\n+\n+pub struct Bar {\n+    pub x: [int, ..3u]\n+}\n+\n+pub struct TupleBar([int, ..4u]);\n+\n+pub enum Baz {\n+    BazVariant([int, ..5u])\n+}\n+\n+pub fn id<T>(x: T) -> T { x }\n+\n+pub fn use_id() {\n+    let _ = id::<[int, ..3u]>([1,2,3]);\n+}\n+\n+\n+fn main() {}"}]}