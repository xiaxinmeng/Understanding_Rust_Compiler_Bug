{"sha": "be27a5a7756b25c958bc37932b3851a3cb38ed9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMjdhNWE3NzU2YjI1Yzk1OGJjMzc5MzJiMzg1MWEzY2IzOGVkOWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-08T20:58:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:49:24Z"}, "message": "make one `Canonicalize` impl for `QueryResult`\n\nThis lets us simplify a few type aliases.", "tree": {"sha": "1a3f078a6decde9550bc28d7a04f79f7bf6fdcf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a3f078a6decde9550bc28d7a04f79f7bf6fdcf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be27a5a7756b25c958bc37932b3851a3cb38ed9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be27a5a7756b25c958bc37932b3851a3cb38ed9e", "html_url": "https://github.com/rust-lang/rust/commit/be27a5a7756b25c958bc37932b3851a3cb38ed9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be27a5a7756b25c958bc37932b3851a3cb38ed9e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7358931a1c7ab6b81b702496ce4bb0c9dac6a70d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7358931a1c7ab6b81b702496ce4bb0c9dac6a70d", "html_url": "https://github.com/rust-lang/rust/commit/7358931a1c7ab6b81b702496ce4bb0c9dac6a70d"}], "stats": {"total": 86, "additions": 37, "deletions": 49}, "files": [{"sha": "f60ae20827a528746289e5ea410e9bfd2dabbbb0", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/be27a5a7756b25c958bc37932b3851a3cb38ed9e/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be27a5a7756b25c958bc37932b3851a3cb38ed9e/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=be27a5a7756b25c958bc37932b3851a3cb38ed9e", "patch": "@@ -32,15 +32,15 @@\n //! [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html\n \n use infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin};\n+use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc_data_structures::sync::Lrc;\n use serialize::UseSpecializedDecodable;\n use std::fmt::Debug;\n use std::ops::Index;\n use syntax::codemap::Span;\n-use ty::{self, CanonicalVar, Lift, Region, Slice, TyCtxt};\n-use ty::subst::Kind;\n use ty::fold::TypeFoldable;\n-\n-use rustc_data_structures::indexed_vec::IndexVec;\n+use ty::subst::Kind;\n+use ty::{self, CanonicalVar, Lift, Region, Slice, TyCtxt};\n \n mod canonicalizer;\n \n@@ -59,7 +59,7 @@ pub struct Canonical<'gcx, V> {\n \n pub type CanonicalVarInfos<'gcx> = &'gcx Slice<CanonicalVarInfo>;\n \n-impl<'gcx> UseSpecializedDecodable for CanonicalVarInfos<'gcx> { }\n+impl<'gcx> UseSpecializedDecodable for CanonicalVarInfos<'gcx> {}\n \n /// A set of values corresponding to the canonical variables from some\n /// `Canonical`. You can give these values to\n@@ -124,6 +124,9 @@ pub struct QueryResult<'tcx, R> {\n     pub value: R,\n }\n \n+pub type CanonicalizedQueryResult<'gcx, T> =\n+    Lrc<Canonical<'gcx, QueryResult<'gcx, <T as Lift<'gcx>>::Lifted>>>;\n+\n /// Indicates whether or not we were able to prove the query to be\n /// true.\n #[derive(Copy, Clone, Debug)]\n@@ -246,9 +249,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             CanonicalVarKind::Ty(ty_kind) => {\n                 let ty = match ty_kind {\n                     CanonicalTyVarKind::General => {\n-                        self.next_ty_var(\n-                            TypeVariableOrigin::MiscVariable(span),\n-                        )\n+                        self.next_ty_var(TypeVariableOrigin::MiscVariable(span))\n                     }\n \n                     CanonicalTyVarKind::Int => self.tcx.mk_int_var(self.next_int_var_id()),\n@@ -258,9 +259,9 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 ty.into()\n             }\n \n-            CanonicalVarKind::Region => {\n-                self.next_region_var(RegionVariableOrigin::MiscVariable(span)).into()\n-            }\n+            CanonicalVarKind::Region => self\n+                .next_region_var(RegionVariableOrigin::MiscVariable(span))\n+                .into(),\n         }\n     }\n }\n@@ -343,3 +344,19 @@ impl<'tcx> Index<CanonicalVar> for CanonicalVarValues<'tcx> {\n         &self.var_values[value]\n     }\n }\n+\n+impl<'gcx: 'tcx, 'tcx, T> Canonicalize<'gcx, 'tcx> for QueryResult<'tcx, T>\n+where\n+    T: TypeFoldable<'tcx> + Lift<'gcx>,\n+    T::Lifted: Debug,\n+{\n+    // we ought to intern this, but I'm too lazy just now\n+    type Canonicalized = Lrc<Canonical<'gcx, QueryResult<'gcx, T::Lifted>>>;\n+\n+    fn intern(\n+        _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n+        value: Canonical<'gcx, Self::Lifted>,\n+    ) -> Self::Canonicalized {\n+        Lrc::new(value)\n+    }\n+}"}, {"sha": "ab8fb519afd98b946d3e9b52dde3fd243ea0b133", "filename": "src/librustc/infer/canonical/query_result.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/be27a5a7756b25c958bc37932b3851a3cb38ed9e/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be27a5a7756b25c958bc37932b3851a3cb38ed9e/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs?ref=be27a5a7756b25c958bc37932b3851a3cb38ed9e", "patch": "@@ -19,24 +19,21 @@\n \n use infer::canonical::substitute::substitute_value;\n use infer::canonical::{\n-    Canonical, CanonicalVarValues, Canonicalize, Certainty, QueryRegionConstraint, QueryResult,\n+    Canonical, CanonicalVarValues, Canonicalize, CanonicalizedQueryResult, Certainty,\n+    QueryRegionConstraint, QueryResult,\n };\n use infer::region_constraints::{Constraint, RegionConstraintData};\n use infer::{InferCtxt, InferOk, InferResult, RegionObligation};\n use rustc_data_structures::indexed_vec::Idx;\n+use rustc_data_structures::indexed_vec::IndexVec;\n use std::fmt::Debug;\n use syntax::ast;\n use traits::query::NoSolution;\n use traits::{FulfillmentContext, TraitEngine};\n use traits::{Obligation, ObligationCause, PredicateObligation};\n use ty::fold::TypeFoldable;\n use ty::subst::{Kind, UnpackedKind};\n-use ty::{self, CanonicalVar, TyCtxt};\n-\n-use rustc_data_structures::indexed_vec::IndexVec;\n-\n-type CanonicalizedQueryResult<'gcx, 'tcx, T> =\n-    <QueryResult<'tcx, T> as Canonicalize<'gcx, 'tcx>>::Canonicalized;\n+use ty::{self, CanonicalVar, Lift, TyCtxt};\n \n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// This method is meant to be invoked as the final step of a canonical query\n@@ -63,10 +60,10 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         inference_vars: CanonicalVarValues<'tcx>,\n         answer: T,\n         fulfill_cx: &mut FulfillmentContext<'tcx>,\n-    ) -> Result<CanonicalizedQueryResult<'gcx, 'tcx, T>, NoSolution>\n+    ) -> Result<CanonicalizedQueryResult<'gcx, T>, NoSolution>\n     where\n-        T: Debug,\n-        QueryResult<'tcx, T>: Canonicalize<'gcx, 'tcx>,\n+        T: Debug + Lift<'gcx> + TypeFoldable<'tcx>,\n+        T::Lifted: Debug,\n     {\n         let query_result = self.make_query_result(inference_vars, answer, fulfill_cx)?;\n         let (canonical_result, _) = self.canonicalize_response(&query_result);"}, {"sha": "671809c059ad8d5d624ce9223fc00bb9441214a5", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be27a5a7756b25c958bc37932b3851a3cb38ed9e/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be27a5a7756b25c958bc37932b3851a3cb38ed9e/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=be27a5a7756b25c958bc37932b3851a3cb38ed9e", "patch": "@@ -9,13 +9,12 @@\n // except according to those terms.\n \n use infer::at::At;\n-use infer::canonical::{Canonical, Canonicalize, QueryResult};\n+use infer::canonical::{Canonical, Canonicalize};\n use infer::InferOk;\n use std::iter::FromIterator;\n use traits::query::CanonicalTyGoal;\n use ty::{self, Ty, TyCtxt};\n use ty::subst::Kind;\n-use rustc_data_structures::sync::Lrc;\n \n impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n     /// Given a type `ty` of some value being dropped, computes a set\n@@ -181,18 +180,6 @@ impl_stable_hash_for!(struct DropckOutlivesResult<'tcx> {\n     kinds, overflows\n });\n \n-impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for QueryResult<'tcx, DropckOutlivesResult<'tcx>> {\n-    // we ought to intern this, but I'm too lazy just now\n-    type Canonicalized = Lrc<Canonical<'gcx, QueryResult<'gcx, DropckOutlivesResult<'gcx>>>>;\n-\n-    fn intern(\n-        _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n-        value: Canonical<'gcx, Self::Lifted>,\n-    ) -> Self::Canonicalized {\n-        Lrc::new(value)\n-    }\n-}\n-\n impl_stable_hash_for!(struct DtorckConstraint<'tcx> {\n     outlives,\n     dtorck_types,"}, {"sha": "22b47458bceccf7de3bf9515e87f0681399040b5", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be27a5a7756b25c958bc37932b3851a3cb38ed9e/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be27a5a7756b25c958bc37932b3851a3cb38ed9e/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=be27a5a7756b25c958bc37932b3851a3cb38ed9e", "patch": "@@ -14,10 +14,9 @@\n \n use infer::{InferCtxt, InferOk};\n use infer::at::At;\n-use infer::canonical::{Canonical, Canonicalize, QueryResult};\n+use infer::canonical::{Canonical, Canonicalize};\n use middle::const_val::ConstVal;\n use mir::interpret::GlobalId;\n-use rustc_data_structures::sync::Lrc;\n use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use traits::query::CanonicalProjectionGoal;\n use traits::project::Normalized;\n@@ -262,18 +261,6 @@ impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for ty::ParamEnvAnd<'tcx, ty::Pr\n     }\n }\n \n-impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for QueryResult<'tcx, NormalizationResult<'tcx>> {\n-    // we ought to intern this, but I'm too lazy just now\n-    type Canonicalized = Lrc<Canonical<'gcx, QueryResult<'gcx, NormalizationResult<'gcx>>>>;\n-\n-    fn intern(\n-        _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n-        value: Canonical<'gcx, Self::Lifted>,\n-    ) -> Self::Canonicalized {\n-        Lrc::new(value)\n-    }\n-}\n-\n impl_stable_hash_for!(struct NormalizationResult<'tcx> {\n     normalized_ty\n });"}]}