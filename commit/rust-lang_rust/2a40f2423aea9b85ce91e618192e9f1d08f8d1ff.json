{"sha": "2a40f2423aea9b85ce91e618192e9f1d08f8d1ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNDBmMjQyM2FlYTliODVjZTkxZTYxODE5MmU5ZjFkMDhmOGQxZmY=", "commit": {"author": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2021-05-26T01:46:07Z"}, "committer": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2021-05-29T02:54:39Z"}, "message": "Add inherent unchecked_shl, unchecked_shr to integers", "tree": {"sha": "a7cb6049307abc42340f251b5bfc15bdca39a46a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7cb6049307abc42340f251b5bfc15bdca39a46a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a40f2423aea9b85ce91e618192e9f1d08f8d1ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a40f2423aea9b85ce91e618192e9f1d08f8d1ff", "html_url": "https://github.com/rust-lang/rust/commit/2a40f2423aea9b85ce91e618192e9f1d08f8d1ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a40f2423aea9b85ce91e618192e9f1d08f8d1ff/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e", "html_url": "https://github.com/rust-lang/rust/commit/f58631b4503b5cd34163cf9c3ff19dc3e0c8a09e"}], "stats": {"total": 166, "additions": 154, "deletions": 12}, "files": [{"sha": "a0efe681285b46b5256f08348e7f5739b7cb3381", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 77, "deletions": 6, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/2a40f2423aea9b85ce91e618192e9f1d08f8d1ff/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a40f2423aea9b85ce91e618192e9f1d08f8d1ff/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=2a40f2423aea9b85ce91e618192e9f1d08f8d1ff", "patch": "@@ -407,8 +407,15 @@ macro_rules! int_impl {\n         }\n \n         /// Unchecked integer addition. Computes `self + rhs`, assuming overflow\n-        /// cannot occur. This results in undefined behavior when\n-        #[doc = concat!(\"`self + rhs > \", stringify!($SelfT), \"::MAX` or `self + rhs < \", stringify!($SelfT), \"::MIN`.\")]\n+        /// cannot occur.\n+        ///\n+        /// # Safety\n+        ///\n+        /// This results in undefined behavior when\n+        #[doc = concat!(\"`self + rhs > \", stringify!($SelfT), \"::MAX` or `self + rhs < \", stringify!($SelfT), \"::MIN`,\")]\n+        /// i.e. when [`checked_add`] would return `None`.\n+        ///\n+        #[doc = concat!(\"[`checked_add`]: \", stringify!($SelfT), \"::checked_add\")]\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n@@ -446,8 +453,15 @@ macro_rules! int_impl {\n         }\n \n         /// Unchecked integer subtraction. Computes `self - rhs`, assuming overflow\n-        /// cannot occur. This results in undefined behavior when\n-        #[doc = concat!(\"`self - rhs > \", stringify!($SelfT), \"::MAX` or `self - rhs < \", stringify!($SelfT), \"::MIN`.\")]\n+        /// cannot occur.\n+        ///\n+        /// # Safety\n+        ///\n+        /// This results in undefined behavior when\n+        #[doc = concat!(\"`self - rhs > \", stringify!($SelfT), \"::MAX` or `self - rhs < \", stringify!($SelfT), \"::MIN`,\")]\n+        /// i.e. when [`checked_sub`] would return `None`.\n+        ///\n+        #[doc = concat!(\"[`checked_sub`]: \", stringify!($SelfT), \"::checked_sub\")]\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n@@ -485,8 +499,15 @@ macro_rules! int_impl {\n         }\n \n         /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow\n-        /// cannot occur. This results in undefined behavior when\n-        #[doc = concat!(\"`self * rhs > \", stringify!($SelfT), \"::MAX` or `self * rhs < \", stringify!($SelfT), \"::MIN`.\")]\n+        /// cannot occur.\n+        ///\n+        /// # Safety\n+        ///\n+        /// This results in undefined behavior when\n+        #[doc = concat!(\"`self * rhs > \", stringify!($SelfT), \"::MAX` or `self * rhs < \", stringify!($SelfT), \"::MIN`,\")]\n+        /// i.e. when [`checked_mul`] would return `None`.\n+        ///\n+        #[doc = concat!(\"[`checked_mul`]: \", stringify!($SelfT), \"::checked_mul\")]\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n@@ -645,6 +666,31 @@ macro_rules! int_impl {\n             if unlikely!(b) {None} else {Some(a)}\n         }\n \n+        /// Unchecked shift left. Computes `self << rhs`, assuming that\n+        /// `rhs` is less than the number of bits in `self`.\n+        ///\n+        /// # Safety\n+        ///\n+        /// This results in undefined behavior if `rhs` is larger than\n+        /// or equal to the number of bits in `self`,\n+        /// i.e. when [`checked_shl`] would return `None`.\n+        ///\n+        #[doc = concat!(\"[`checked_shl`]: \", stringify!($SelfT), \"::checked_shl\")]\n+        #[unstable(\n+            feature = \"unchecked_math\",\n+            reason = \"niche optimization path\",\n+            issue = \"85122\",\n+        )]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n+        #[inline(always)]\n+        pub const unsafe fn unchecked_shl(self, rhs: Self) -> Self {\n+            // SAFETY: the caller must uphold the safety contract for\n+            // `unchecked_shl`.\n+            unsafe { intrinsics::unchecked_shl(self, rhs) }\n+        }\n+\n         /// Checked shift right. Computes `self >> rhs`, returning `None` if `rhs` is\n         /// larger than or equal to the number of bits in `self`.\n         ///\n@@ -666,6 +712,31 @@ macro_rules! int_impl {\n             if unlikely!(b) {None} else {Some(a)}\n         }\n \n+        /// Unchecked shift right. Computes `self >> rhs`, assuming that\n+        /// `rhs` is less than the number of bits in `self`.\n+        ///\n+        /// # Safety\n+        ///\n+        /// This results in undefined behavior if `rhs` is larger than\n+        /// or equal to the number of bits in `self`,\n+        /// i.e. when [`checked_shr`] would return `None`.\n+        ///\n+        #[doc = concat!(\"[`checked_shr`]: \", stringify!($SelfT), \"::checked_shr\")]\n+        #[unstable(\n+            feature = \"unchecked_math\",\n+            reason = \"niche optimization path\",\n+            issue = \"85122\",\n+        )]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n+        #[inline(always)]\n+        pub const unsafe fn unchecked_shr(self, rhs: Self) -> Self {\n+            // SAFETY: the caller must uphold the safety contract for\n+            // `unchecked_shr`.\n+            unsafe { intrinsics::unchecked_shr(self, rhs) }\n+        }\n+\n         /// Checked absolute value. Computes `self.abs()`, returning `None` if\n         /// `self == MIN`.\n         ///"}, {"sha": "e512d90ef3735d31311073c7378c526a04467e2b", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 77, "deletions": 6, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/2a40f2423aea9b85ce91e618192e9f1d08f8d1ff/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a40f2423aea9b85ce91e618192e9f1d08f8d1ff/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=2a40f2423aea9b85ce91e618192e9f1d08f8d1ff", "patch": "@@ -417,8 +417,15 @@ macro_rules! uint_impl {\n         }\n \n         /// Unchecked integer addition. Computes `self + rhs`, assuming overflow\n-        /// cannot occur. This results in undefined behavior when\n-        #[doc = concat!(\"`self + rhs > \", stringify!($SelfT), \"::MAX` or `self + rhs < \", stringify!($SelfT), \"::MIN`.\")]\n+        /// cannot occur.\n+        ///\n+        /// # Safety\n+        ///\n+        /// This results in undefined behavior when\n+        #[doc = concat!(\"`self + rhs > \", stringify!($SelfT), \"::MAX` or `self + rhs < \", stringify!($SelfT), \"::MIN`,\")]\n+        /// i.e. when [`checked_add`] would return `None`.\n+        ///\n+        #[doc = concat!(\"[`checked_add`]: \", stringify!($SelfT), \"::checked_add\")]\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n@@ -456,8 +463,15 @@ macro_rules! uint_impl {\n         }\n \n         /// Unchecked integer subtraction. Computes `self - rhs`, assuming overflow\n-        /// cannot occur. This results in undefined behavior when\n-        #[doc = concat!(\"`self - rhs > \", stringify!($SelfT), \"::MAX` or `self - rhs < \", stringify!($SelfT), \"::MIN`.\")]\n+        /// cannot occur.\n+        ///\n+        /// # Safety\n+        ///\n+        /// This results in undefined behavior when\n+        #[doc = concat!(\"`self - rhs > \", stringify!($SelfT), \"::MAX` or `self - rhs < \", stringify!($SelfT), \"::MIN`,\")]\n+        /// i.e. when [`checked_sub`] would return `None`.\n+        ///\n+        #[doc = concat!(\"[`checked_sub`]: \", stringify!($SelfT), \"::checked_sub\")]\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n@@ -495,8 +509,15 @@ macro_rules! uint_impl {\n         }\n \n         /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow\n-        /// cannot occur. This results in undefined behavior when\n-        #[doc = concat!(\"`self * rhs > \", stringify!($SelfT), \"::MAX` or `self * rhs < \", stringify!($SelfT), \"::MIN`.\")]\n+        /// cannot occur.\n+        ///\n+        /// # Safety\n+        ///\n+        /// This results in undefined behavior when\n+        #[doc = concat!(\"`self * rhs > \", stringify!($SelfT), \"::MAX` or `self * rhs < \", stringify!($SelfT), \"::MIN`,\")]\n+        /// i.e. when [`checked_mul`] would return `None`.\n+        ///\n+        #[doc = concat!(\"[`checked_mul`]: \", stringify!($SelfT), \"::checked_mul\")]\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n@@ -655,6 +676,31 @@ macro_rules! uint_impl {\n             if unlikely!(b) {None} else {Some(a)}\n         }\n \n+        /// Unchecked shift left. Computes `self << rhs`, assuming that\n+        /// `rhs` is less than the number of bits in `self`.\n+        ///\n+        /// # Safety\n+        ///\n+        /// This results in undefined behavior if `rhs` is larger than\n+        /// or equal to the number of bits in `self`,\n+        /// i.e. when [`checked_shl`] would return `None`.\n+        ///\n+        #[doc = concat!(\"[`checked_shl`]: \", stringify!($SelfT), \"::checked_shl\")]\n+        #[unstable(\n+            feature = \"unchecked_math\",\n+            reason = \"niche optimization path\",\n+            issue = \"85122\",\n+        )]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n+        #[inline(always)]\n+        pub const unsafe fn unchecked_shl(self, rhs: Self) -> Self {\n+            // SAFETY: the caller must uphold the safety contract for\n+            // `unchecked_shl`.\n+            unsafe { intrinsics::unchecked_shl(self, rhs) }\n+        }\n+\n         /// Checked shift right. Computes `self >> rhs`, returning `None`\n         /// if `rhs` is larger than or equal to the number of bits in `self`.\n         ///\n@@ -676,6 +722,31 @@ macro_rules! uint_impl {\n             if unlikely!(b) {None} else {Some(a)}\n         }\n \n+        /// Unchecked shift right. Computes `self >> rhs`, assuming that\n+        /// `rhs` is less than the number of bits in `self`.\n+        ///\n+        /// # Safety\n+        ///\n+        /// This results in undefined behavior if `rhs` is larger than\n+        /// or equal to the number of bits in `self`,\n+        /// i.e. when [`checked_shr`] would return `None`.\n+        ///\n+        #[doc = concat!(\"[`checked_shr`]: \", stringify!($SelfT), \"::checked_shr\")]\n+        #[unstable(\n+            feature = \"unchecked_math\",\n+            reason = \"niche optimization path\",\n+            issue = \"85122\",\n+        )]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n+        #[inline(always)]\n+        pub const unsafe fn unchecked_shr(self, rhs: Self) -> Self {\n+            // SAFETY: the caller must uphold the safety contract for\n+            // `unchecked_shr`.\n+            unsafe { intrinsics::unchecked_shr(self, rhs) }\n+        }\n+\n         /// Checked exponentiation. Computes `self.pow(exp)`, returning `None` if\n         /// overflow occurred.\n         ///"}]}