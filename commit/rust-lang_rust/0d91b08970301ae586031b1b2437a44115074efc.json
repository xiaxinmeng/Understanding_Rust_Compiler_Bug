{"sha": "0d91b08970301ae586031b1b2437a44115074efc", "node_id": "C_kwDOAAsO6NoAKDBkOTFiMDg5NzAzMDFhZTU4NjAzMWIxYjI0MzdhNDQxMTUwNzRlZmM", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-07-12T10:25:43Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-07-12T10:25:43Z"}, "message": "std: fix issue with perma-locked mutexes on Fuchsia", "tree": {"sha": "493de6109c59ce716b3bffe4aef2f8604ef99613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/493de6109c59ce716b3bffe4aef2f8604ef99613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d91b08970301ae586031b1b2437a44115074efc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmLNTCcACgkQcE4BSbAZ\nSzxnUg//UY+mm/dt1XJxFMWj7NepmxYrJDgEroi1u+aGp8KIVcj0+hmCEy7Ent++\n4/epmTpKFC5lsD9MImyWIFRMDJcqovwaCZZ+M3MMqnUe1sSx9nqzr3ZeWger0vk8\nR80yhQUuTIfg8m+2aJZwhaMwzgowqcjW5ZFAgspkswGbmWAwgHSXHVvhL73bwcK8\nOFn1twe7z0oOJBoGPatPy3tOL+F0aPs9ilZEKn4n1oFiXMSuZjPyTw9zLRAIGFEN\n3JT1avk2vx3pWG/Ueo+VB6hxBB8hySgdoPJrrhQ17ua/awSmxMrByZ5jlVOFiBp7\njByxp5XCjMQgfb2iYibofpMdHZ/rwFm5+RFxtE73S4KL2l/78KCeaWvenONJohFn\nPznrykAyJJxNHl565FdljwC+tMRml9NOxSUnl7ncqd16NvfeC6XlNCxR1eSxR5HH\ndAy73JUI3qlS6bFSxUx2cROHC2fmvL7fp5v2lXfnYBJo/59kaWgTqN1aYm2vhqBa\nFaYkbBGKpYkm1RtJE0i98JD2+z1SbDBh8Tyf8vdVCYZeldmRg4fmDr3TSRZZ67zz\npc0PweIK9YV27TULgz6gsIPahtIIt75IxV/pedzUdU5Boh3ERCQXxMz77G/hP8Z6\nnn4u1FmZQZ5uftoam34WTXgvp4RpZdUiy21eiv8ETFCPC2WFBQU=\n=ls6z\n-----END PGP SIGNATURE-----", "payload": "tree 493de6109c59ce716b3bffe4aef2f8604ef99613\nparent f7ae92c6bd9b50e3d1cd7ce123ffa15d0e1ecd97\nauthor joboet <jonasboettiger@icloud.com> 1657621543 +0200\ncommitter joboet <jonasboettiger@icloud.com> 1657621543 +0200\n\nstd: fix issue with perma-locked mutexes on Fuchsia\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d91b08970301ae586031b1b2437a44115074efc", "html_url": "https://github.com/rust-lang/rust/commit/0d91b08970301ae586031b1b2437a44115074efc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d91b08970301ae586031b1b2437a44115074efc/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7ae92c6bd9b50e3d1cd7ce123ffa15d0e1ecd97", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ae92c6bd9b50e3d1cd7ce123ffa15d0e1ecd97", "html_url": "https://github.com/rust-lang/rust/commit/f7ae92c6bd9b50e3d1cd7ce123ffa15d0e1ecd97"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "96b07b510a777da2ffcbd40dfc6b2cb68a31a771", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d91b08970301ae586031b1b2437a44115074efc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d91b08970301ae586031b1b2437a44115074efc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=0d91b08970301ae586031b1b2437a44115074efc", "patch": "@@ -251,6 +251,9 @@ pub mod zircon {\n     pub const ZX_TIME_INFINITE: zx_time_t = zx_time_t::MAX;\n \n     pub const ZX_OK: zx_status_t = 0;\n+    pub const ZX_ERR_INVALID_ARGS: zx_status_t = -10;\n+    pub const ZX_ERR_BAD_HANDLE: zx_status_t = -11;\n+    pub const ZX_ERR_WRONG_TYPE: zx_status_t = -12;\n     pub const ZX_ERR_BAD_STATE: zx_status_t = -20;\n     pub const ZX_ERR_TIMED_OUT: zx_status_t = -21;\n \n@@ -264,6 +267,7 @@ pub mod zircon {\n         ) -> zx_status_t;\n         pub fn zx_futex_wake(value_ptr: *const zx_futex_t, wake_count: u32) -> zx_status_t;\n         pub fn zx_futex_wake_single_owner(value_ptr: *const zx_futex_t) -> zx_status_t;\n+        pub fn zx_nanosleep(deadline: zx_time_t) -> zx_status_t;\n         pub fn zx_thread_self() -> zx_handle_t;\n     }\n }"}, {"sha": "65d7c4eefd99ade0d7d088618e62642c7db37061", "filename": "library/std/src/sys/unix/locks/fuchsia_mutex.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0d91b08970301ae586031b1b2437a44115074efc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffuchsia_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d91b08970301ae586031b1b2437a44115074efc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffuchsia_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffuchsia_mutex.rs?ref=0d91b08970301ae586031b1b2437a44115074efc", "patch": "@@ -42,8 +42,9 @@ use crate::sync::atomic::{\n     Ordering::{Acquire, Relaxed, Release},\n };\n use crate::sys::futex::zircon::{\n-    zx_futex_wait, zx_futex_wake_single_owner, zx_handle_t, zx_thread_self, ZX_ERR_BAD_STATE,\n-    ZX_OK, ZX_TIME_INFINITE,\n+    zx_futex_wait, zx_futex_wake_single_owner, zx_handle_t, zx_nanosleep, zx_thread_self,\n+    ZX_ERR_BAD_HANDLE, ZX_ERR_BAD_STATE, ZX_ERR_INVALID_ARGS, ZX_ERR_TIMED_OUT, ZX_ERR_WRONG_TYPE,\n+    ZX_OK, ZX_TIME_INFINITE, ZX_TIME_INFINITE,\n };\n \n // The lowest two bits of a `zx_handle_t` are always set, so the lowest bit is used to mark the\n@@ -120,13 +121,19 @@ impl Mutex {\n                         to_owner(state),\n                         ZX_TIME_INFINITE,\n                     ) {\n-                        ZX_OK | ZX_ERR_BAD_STATE => (),\n-                        // Deadlock even in the case of reentrant locking, as leaking a guard\n-                        // could lead to the same condition if the thread id is reused, but\n-                        // panicking is not expected in that situation. This makes things\n-                        // quite a bit harder to debug, but encourages portable programming.\n-                        _ if to_owner(state) == thread_self => loop {},\n-                        error => panic!(\"futex operation failed with error code {error}\"),\n+                        ZX_OK | ZX_ERR_BAD_STATE | ZX_ERR_TIMED_OUT => (),\n+                        // Either the current thread is trying to lock a mutex it has already locked,\n+                        // or the previous owner did not unlock the mutex before exiting. Since it is\n+                        // not possible to reliably detect which is the case, the current thread is\n+                        // deadlocked. This makes debugging these cases quite a bit harder, but encourages\n+                        // portable programming, since all other platforms do the same.\n+                        //\n+                        // Note that if the thread handle is reused, an arbitrary thread's priority could\n+                        // be boosted by the wait, but there is currently no way to prevent that.\n+                        ZX_ERR_INVALID_ARGS | ZX_ERR_BAD_HANDLE | ZX_ERR_WRONG_TYPE => loop {\n+                            zx_nanosleep(ZX_TIME_INFINITE);\n+                        },\n+                        error => unreachable!(\"unexpected error code in futex wait: {error}\"),\n                     }\n                 }\n             }"}]}