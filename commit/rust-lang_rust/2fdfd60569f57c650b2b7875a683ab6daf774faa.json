{"sha": "2fdfd60569f57c650b2b7875a683ab6daf774faa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZGZkNjA1NjlmNTdjNjUwYjJiNzg3NWE2ODNhYjZkYWY3NzRmYWE=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-09-01T06:11:40Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-09-01T06:11:40Z"}, "message": "Fix `needless_lifetimes` false positive", "tree": {"sha": "d56f4a5a7937a02e1c14097b810aa8ac9fd3a94a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d56f4a5a7937a02e1c14097b810aa8ac9fd3a94a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fdfd60569f57c650b2b7875a683ab6daf774faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fdfd60569f57c650b2b7875a683ab6daf774faa", "html_url": "https://github.com/rust-lang/rust/commit/2fdfd60569f57c650b2b7875a683ab6daf774faa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fdfd60569f57c650b2b7875a683ab6daf774faa/comments", "author": null, "committer": null, "parents": [{"sha": "4458bef5d153e81ebd5f21c29a75e37e44f997f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4458bef5d153e81ebd5f21c29a75e37e44f997f1", "html_url": "https://github.com/rust-lang/rust/commit/4458bef5d153e81ebd5f21c29a75e37e44f997f1"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "e75e9c6541bea3f15034a32a996b209922e84dcc", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2fdfd60569f57c650b2b7875a683ab6daf774faa/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdfd60569f57c650b2b7875a683ab6daf774faa/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=2fdfd60569f57c650b2b7875a683ab6daf774faa", "patch": "@@ -60,15 +60,21 @@ declare_lint_pass!(Lifetimes => [NEEDLESS_LIFETIMES, EXTRA_UNUSED_LIFETIMES]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Lifetimes {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemKind::Fn(ref decl, _, ref generics, id) = item.node {\n-            check_fn_inner(cx, decl, Some(id), generics, item.span);\n+            check_fn_inner(cx, decl, Some(id), generics, item.span, true);\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         if let ImplItemKind::Method(ref sig, id) = item.node {\n-            if trait_ref_of_method(cx, item.hir_id).is_none() {\n-                check_fn_inner(cx, &sig.decl, Some(id), &item.generics, item.span);\n-            }\n+            let report_extra_lifetimes = trait_ref_of_method(cx, item.hir_id).is_none();\n+            check_fn_inner(\n+                cx,\n+                &sig.decl,\n+                Some(id),\n+                &item.generics,\n+                item.span,\n+                report_extra_lifetimes,\n+            );\n         }\n     }\n \n@@ -78,7 +84,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Lifetimes {\n                 TraitMethod::Required(_) => None,\n                 TraitMethod::Provided(id) => Some(id),\n             };\n-            check_fn_inner(cx, &sig.decl, body, &item.generics, item.span);\n+            check_fn_inner(cx, &sig.decl, body, &item.generics, item.span, true);\n         }\n     }\n }\n@@ -97,6 +103,7 @@ fn check_fn_inner<'a, 'tcx>(\n     body: Option<BodyId>,\n     generics: &'tcx Generics,\n     span: Span,\n+    report_extra_lifetimes: bool,\n ) {\n     if in_external_macro(cx.sess(), span) || has_where_lifetimes(cx, &generics.where_clause) {\n         return;\n@@ -146,7 +153,9 @@ fn check_fn_inner<'a, 'tcx>(\n              (or replaced with `'_` if needed by type declaration)\",\n         );\n     }\n-    report_extra_lifetimes(cx, decl, generics);\n+    if report_extra_lifetimes {\n+        self::report_extra_lifetimes(cx, decl, generics);\n+    }\n }\n \n fn could_use_elision<'a, 'tcx>("}, {"sha": "f3fdd48633f80ea29ad892d05607f4f71c4f4235", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2fdfd60569f57c650b2b7875a683ab6daf774faa/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdfd60569f57c650b2b7875a683ab6daf774faa/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=2fdfd60569f57c650b2b7875a683ab6daf774faa", "patch": "@@ -248,4 +248,15 @@ fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> {\n     unimplemented!()\n }\n \n+// Make sure we still warn on implementations\n+mod issue4291 {\n+    trait BadTrait {\n+        fn needless_lt<'a>(x: &'a u8) {}\n+    }\n+\n+    impl BadTrait for () {\n+        fn needless_lt<'a>(_x: &'a u8) {}\n+    }\n+}\n+\n fn main() {}"}, {"sha": "ad55fc5f750d005e16ba5148b4a18dabff2fcb09", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2fdfd60569f57c650b2b7875a683ab6daf774faa/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fdfd60569f57c650b2b7875a683ab6daf774faa/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=2fdfd60569f57c650b2b7875a683ab6daf774faa", "patch": "@@ -118,5 +118,17 @@ LL | |     unimplemented!()\n LL | | }\n    | |_^\n \n-error: aborting due to 15 previous errors\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:254:9\n+   |\n+LL |         fn needless_lt<'a>(x: &'a u8) {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:258:9\n+   |\n+LL |         fn needless_lt<'a>(_x: &'a u8) {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 17 previous errors\n "}]}