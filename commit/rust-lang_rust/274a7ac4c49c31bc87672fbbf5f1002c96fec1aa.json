{"sha": "274a7ac4c49c31bc87672fbbf5f1002c96fec1aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NGE3YWM0YzQ5YzMxYmM4NzY3MmZiYmY1ZjEwMDJjOTZmZWMxYWE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-05T22:03:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-05T22:03:06Z"}, "message": "Merge pull request #1145 from bjorn3/mingw_support\n\nSupport cross-compiling to Windows using MinGW", "tree": {"sha": "12fb297b2d3221774cdbaecbcfad74aca3bdcea1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12fb297b2d3221774cdbaecbcfad74aca3bdcea1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgQqqaCRBK7hj4Ov3rIwAAdHIIAForrSzvP2M3vt/8QSKa2iBJ\n1ObC6Cdk8DSuNCb+Q4kgq9SVnJioU+Tkz8sAJY1h/FBROEq09fcvayPbQGwLwB/3\nAHcx8HHQTQ8aLv5xPbBxv5s3OVOEC2ImhnXuF+0oxj/iO7Ewp5bn3IvBHmKsKCMn\nyEJy0gAcE6L2OXj+Tqzorq371QisT8hKpr4CJAkn6OC3hmDsEclOagPyb37/tZL/\n88gQQIP6Uo+pyRQtzLyj0DPRXBkbpxFJtFnipAT/GqDvqyXR1xxXk3qpaOlvRoh7\nxMchPpXhL/sE4le6HvOktQKbt6HQ7LSV4FvZt8uTlNUPr70SSXmyd7R+3Ijpz3k=\n=qJcq\n-----END PGP SIGNATURE-----\n", "payload": "tree 12fb297b2d3221774cdbaecbcfad74aca3bdcea1\nparent 9a0c32934ebe376128230aa8da3275697b2053e7\nparent 00f1cddb9c8ecd82ada4ea30430cb6cf178c50ba\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1614981786 +0100\ncommitter GitHub <noreply@github.com> 1614981786 +0100\n\nMerge pull request #1145 from bjorn3/mingw_support\n\nSupport cross-compiling to Windows using MinGW"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa", "html_url": "https://github.com/rust-lang/rust/commit/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a0c32934ebe376128230aa8da3275697b2053e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a0c32934ebe376128230aa8da3275697b2053e7", "html_url": "https://github.com/rust-lang/rust/commit/9a0c32934ebe376128230aa8da3275697b2053e7"}, {"sha": "00f1cddb9c8ecd82ada4ea30430cb6cf178c50ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/00f1cddb9c8ecd82ada4ea30430cb6cf178c50ba", "html_url": "https://github.com/rust-lang/rust/commit/00f1cddb9c8ecd82ada4ea30430cb6cf178c50ba"}], "stats": {"total": 212, "additions": 156, "deletions": 56}, "files": [{"sha": "e06a1fb88bad806b6e217ed17478296c809486d3", "filename": ".github/workflows/main.yml", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmain.yml?ref=274a7ac4c49c31bc87672fbbf5f1002c96fec1aa", "patch": "@@ -11,7 +11,13 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        os: [ubuntu-latest, macos-latest]\n+        include:\n+          - os: ubuntu-latest\n+          - os: macos-latest\n+          # cross-compile from Linux to Windows using mingw\n+          - os: ubuntu-latest\n+            env:\n+              TARGET_TRIPLE: x86_64-pc-windows-gnu\n \n     steps:\n     - uses: actions/checkout@v2\n@@ -36,13 +42,21 @@ jobs:\n         path: target\n         key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n \n+    - name: Install MinGW toolchain and wine\n+      if: matrix.os == 'ubuntu-latest' && matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n+      run: |\n+        sudo apt-get install -y gcc-mingw-w64-x86-64 wine-stable\n+        rustup target add x86_64-pc-windows-gnu\n+\n     - name: Prepare dependencies\n       run: |\n         git config --global user.email \"user@example.com\"\n         git config --global user.name \"User\"\n         ./prepare.sh\n \n     - name: Test\n+      env:\n+        TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}\n       run: |\n         # Enable backtraces for easier debugging\n         export RUST_BACKTRACE=1\n@@ -57,6 +71,7 @@ jobs:\n       run: tar cvfJ cg_clif.tar.xz build\n \n     - name: Upload prebuilt cg_clif\n+      if: matrix.env.TARGET_TRIPLE != 'x86_64-pc-windows-gnu'\n       uses: actions/upload-artifact@v2\n       with:\n         name: cg_clif-${{ runner.os }}"}, {"sha": "1ed186032ff204433e2ecef0f675db95e70afc00", "filename": "Cargo.lock", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=274a7ac4c49c31bc87672fbbf5f1002c96fec1aa", "patch": "@@ -39,16 +39,16 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.71.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#e41d88214455987751997b9d6173c5dee93204da\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.71.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#e41d88214455987751997b9d6173c5dee93204da\"\n dependencies = [\n  \"byteorder\",\n  \"cranelift-bforest\",\n@@ -65,27 +65,27 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.71.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#e41d88214455987751997b9d6173c5dee93204da\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.71.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#e41d88214455987751997b9d6173c5dee93204da\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.71.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#e41d88214455987751997b9d6173c5dee93204da\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.71.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#e41d88214455987751997b9d6173c5dee93204da\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -95,8 +95,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-jit\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.71.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#e41d88214455987751997b9d6173c5dee93204da\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -113,8 +113,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.71.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#e41d88214455987751997b9d6173c5dee93204da\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -125,17 +125,17 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.71.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#e41d88214455987751997b9d6173c5dee93204da\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"target-lexicon\",\n ]\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.71.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#e41d88214455987751997b9d6173c5dee93204da\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\","}, {"sha": "76bc1884334afe4ea539ca65be6b5f8c32f5203d", "filename": "build.sh", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=274a7ac4c49c31bc87672fbbf5f1002c96fec1aa", "patch": "@@ -55,6 +55,7 @@ ln target/$CHANNEL/*rustc_codegen_cranelift* \"$target_dir\"/lib\n ln rust-toolchain scripts/config.sh scripts/cargo.sh \"$target_dir\"\n \n mkdir -p \"$target_dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n+mkdir -p \"$target_dir/lib/rustlib/$HOST_TRIPLE/lib/\"\n if [[ \"$TARGET_TRIPLE\" == \"x86_64-pc-windows-gnu\" ]]; then\n     cp $(rustc --print sysroot)/lib/rustlib/$TARGET_TRIPLE/lib/*.o \"$target_dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n fi\n@@ -64,12 +65,18 @@ case \"$build_sysroot\" in\n         ;;\n     \"llvm\")\n         cp -r $(rustc --print sysroot)/lib/rustlib/$TARGET_TRIPLE/lib \"$target_dir/lib/rustlib/$TARGET_TRIPLE/\"\n+        if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n+            cp -r $(rustc --print sysroot)/lib/rustlib/$HOST_TRIPLE/lib \"$target_dir/lib/rustlib/$HOST_TRIPLE/\"\n+        fi\n         ;;\n     \"clif\")\n         echo \"[BUILD] sysroot\"\n         dir=$(pwd)\n         cd \"$target_dir\"\n         time \"$dir/build_sysroot/build_sysroot.sh\"\n+        if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n+            time TARGET_TRIPLE=\"$HOST_TRIPLE\" \"$dir/build_sysroot/build_sysroot.sh\"\n+        fi\n         cp lib/rustlib/*/lib/libstd-* lib/\n         ;;\n     *)"}, {"sha": "c4834c804087199822e4552a19874744235992ef", "filename": "example/mini_core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=274a7ac4c49c31bc87672fbbf5f1002c96fec1aa", "patch": "@@ -621,6 +621,7 @@ struct PanicLocation {\n }\n \n #[no_mangle]\n+#[cfg(not(windows))]\n pub fn get_tls() -> u8 {\n     #[thread_local]\n     static A: u8 = 42;"}, {"sha": "08ceaeb65443f96400f1ba2da03a47f343b70237", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=274a7ac4c49c31bc87672fbbf5f1002c96fec1aa", "patch": "@@ -239,7 +239,7 @@ fn main() {\n \n     assert_eq!(((|()| 42u8) as fn(()) -> u8)(()), 42);\n \n-    #[cfg(not(jit))]\n+    #[cfg(not(any(jit, windows)))]\n     {\n         extern {\n             #[linkage = \"extern_weak\"]\n@@ -292,7 +292,7 @@ fn main() {\n \n     from_decimal_string();\n \n-    #[cfg(not(jit))]\n+    #[cfg(not(any(jit, windows)))]\n     test_tls();\n \n     #[cfg(all(not(jit), target_os = \"linux\"))]"}, {"sha": "221b512e3bd4c63445fcafe3c92c5d327a04c6b9", "filename": "example/std_example.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=274a7ac4c49c31bc87672fbbf5f1002c96fec1aa", "patch": "@@ -16,7 +16,8 @@ fn main() {\n     let mut stderr = stderr.lock();\n \n     // FIXME support lazy jit when multi threading\n-    #[cfg(not(lazy_jit))]\n+    // FIXME support TLS on windows\n+    #[cfg(not(any(lazy_jit, windows)))]\n     std::thread::spawn(move || {\n         println!(\"Hello from another thread!\");\n     });"}, {"sha": "3afcea8f06bd6c257b6ec97077d17ee7496ed565", "filename": "scripts/tests.sh", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=274a7ac4c49c31bc87672fbbf5f1002c96fec1aa", "patch": "@@ -71,14 +71,20 @@ function base_sysroot_tests() {\n     echo \"[AOT] mod_bench\"\n     $MY_RUSTC example/mod_bench.rs --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/mod_bench\n+}\n \n+function extended_sysroot_tests() {\n     pushd rand\n-    rm -r ./target || true\n-    ../build/cargo.sh test --workspace\n+    cargo clean\n+    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n+        echo \"[TEST] rust-random/rand\"\n+        ../build/cargo.sh test --workspace\n+    else\n+        echo \"[AOT] rust-random/rand\"\n+        ../build/cargo.sh build --workspace --target $TARGET_TRIPLE --tests\n+    fi\n     popd\n-}\n \n-function extended_sysroot_tests() {\n     pushd simple-raytracer\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n@@ -92,27 +98,40 @@ function extended_sysroot_tests() {\n     else\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n         echo \"[COMPILE] ebobby/simple-raytracer\"\n-        ../cargo.sh build\n+        ../build/cargo.sh build --target $TARGET_TRIPLE\n         echo \"[BENCH RUN] ebobby/simple-raytracer (skipped)\"\n     fi\n     popd\n \n     pushd build_sysroot/sysroot_src/library/core/tests\n     echo \"[TEST] libcore\"\n-    rm -r ./target || true\n-    ../../../../../build/cargo.sh test\n+    cargo clean\n+    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n+        ../../../../../build/cargo.sh test\n+    else\n+        ../../../../../build/cargo.sh build --target $TARGET_TRIPLE --tests\n+    fi\n     popd\n \n     pushd regex\n     echo \"[TEST] rust-lang/regex example shootout-regex-dna\"\n-    ../build/cargo.sh clean\n+    cargo clean\n     # Make sure `[codegen mono items] start` doesn't poison the diff\n-    ../build/cargo.sh build --example shootout-regex-dna\n-    cat examples/regexdna-input.txt | ../build/cargo.sh run --example shootout-regex-dna | grep -v \"Spawned thread\" > res.txt\n-    diff -u res.txt examples/regexdna-output.txt\n+    ../build/cargo.sh build --example shootout-regex-dna --target $TARGET_TRIPLE\n+    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n+        cat examples/regexdna-input.txt \\\n+            | ../build/cargo.sh run --example shootout-regex-dna --target $TARGET_TRIPLE \\\n+            | grep -v \"Spawned thread\" > res.txt\n+        diff -u res.txt examples/regexdna-output.txt\n+    fi\n \n-    echo \"[TEST] rust-lang/regex tests\"\n-    ../build/cargo.sh test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n+    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n+        echo \"[TEST] rust-lang/regex tests\"\n+        ../build/cargo.sh test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n+    else\n+        echo \"[AOT] rust-lang/regex tests\"\n+        ../build/cargo.sh build --tests --target $TARGET_TRIPLE\n+    fi\n     popd\n }\n "}, {"sha": "ffe1922ab9056dc3c82a303e21d8d147b7243a2c", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 70, "deletions": 19, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=274a7ac4c49c31bc87672fbbf5f1002c96fec1aa", "patch": "@@ -32,18 +32,56 @@ pub(crate) fn maybe_codegen<'tcx>(\n         BinOp::Add | BinOp::Sub if !checked => None,\n         BinOp::Mul if !checked => {\n             let val_ty = if is_signed { fx.tcx.types.i128 } else { fx.tcx.types.u128 };\n-            Some(fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty))\n+            if fx.tcx.sess.target.is_like_windows {\n+                let ret_place = CPlace::new_stack_slot(fx, lhs.layout());\n+                let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);\n+                let (rhs_ptr, rhs_extra) = rhs.force_stack(fx);\n+                assert!(lhs_extra.is_none());\n+                assert!(rhs_extra.is_none());\n+                let args =\n+                    [ret_place.to_ptr().get_addr(fx), lhs_ptr.get_addr(fx), rhs_ptr.get_addr(fx)];\n+                fx.lib_call(\n+                    \"__multi3\",\n+                    vec![\n+                        AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n+                        AbiParam::new(pointer_ty(fx.tcx)),\n+                        AbiParam::new(pointer_ty(fx.tcx)),\n+                    ],\n+                    vec![],\n+                    &args,\n+                );\n+                Some(ret_place.to_cvalue(fx))\n+            } else {\n+                Some(fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty))\n+            }\n         }\n         BinOp::Add | BinOp::Sub | BinOp::Mul => {\n             assert!(checked);\n             let out_ty = fx.tcx.mk_tup([lhs.layout().ty, fx.tcx.types.bool].iter());\n             let out_place = CPlace::new_stack_slot(fx, fx.layout_of(out_ty));\n-            let param_types = vec![\n-                AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n-                AbiParam::new(types::I128),\n-                AbiParam::new(types::I128),\n-            ];\n-            let args = [out_place.to_ptr().get_addr(fx), lhs.load_scalar(fx), rhs.load_scalar(fx)];\n+            let (param_types, args) = if fx.tcx.sess.target.is_like_windows {\n+                let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);\n+                let (rhs_ptr, rhs_extra) = rhs.force_stack(fx);\n+                assert!(lhs_extra.is_none());\n+                assert!(rhs_extra.is_none());\n+                (\n+                    vec![\n+                        AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n+                        AbiParam::new(pointer_ty(fx.tcx)),\n+                        AbiParam::new(pointer_ty(fx.tcx)),\n+                    ],\n+                    [out_place.to_ptr().get_addr(fx), lhs_ptr.get_addr(fx), rhs_ptr.get_addr(fx)],\n+                )\n+            } else {\n+                (\n+                    vec![\n+                        AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n+                        AbiParam::new(types::I128),\n+                        AbiParam::new(types::I128),\n+                    ],\n+                    [out_place.to_ptr().get_addr(fx), lhs.load_scalar(fx), rhs.load_scalar(fx)],\n+                )\n+            };\n             let name = match (bin_op, is_signed) {\n                 (BinOp::Add, false) => \"__rust_u128_addo\",\n                 (BinOp::Add, true) => \"__rust_i128_addo\",\n@@ -57,20 +95,33 @@ pub(crate) fn maybe_codegen<'tcx>(\n             Some(out_place.to_cvalue(fx))\n         }\n         BinOp::Offset => unreachable!(\"offset should only be used on pointers, not 128bit ints\"),\n-        BinOp::Div => {\n+        BinOp::Div | BinOp::Rem => {\n             assert!(!checked);\n-            if is_signed {\n-                Some(fx.easy_call(\"__divti3\", &[lhs, rhs], fx.tcx.types.i128))\n-            } else {\n-                Some(fx.easy_call(\"__udivti3\", &[lhs, rhs], fx.tcx.types.u128))\n-            }\n-        }\n-        BinOp::Rem => {\n-            assert!(!checked);\n-            if is_signed {\n-                Some(fx.easy_call(\"__modti3\", &[lhs, rhs], fx.tcx.types.i128))\n+            let name = match (bin_op, is_signed) {\n+                (BinOp::Div, false) => \"__udivti3\",\n+                (BinOp::Div, true) => \"__divti3\",\n+                (BinOp::Rem, false) => \"__umodti3\",\n+                (BinOp::Rem, true) => \"__modti3\",\n+                _ => unreachable!(),\n+            };\n+            if fx.tcx.sess.target.is_like_windows {\n+                let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);\n+                let (rhs_ptr, rhs_extra) = rhs.force_stack(fx);\n+                assert!(lhs_extra.is_none());\n+                assert!(rhs_extra.is_none());\n+                let args = [lhs_ptr.get_addr(fx), rhs_ptr.get_addr(fx)];\n+                let ret = fx.lib_call(\n+                    name,\n+                    vec![AbiParam::new(pointer_ty(fx.tcx)), AbiParam::new(pointer_ty(fx.tcx))],\n+                    vec![AbiParam::new(types::I64X2)],\n+                    &args,\n+                )[0];\n+                // FIXME use bitcast instead of store to get from i64x2 to i128\n+                let ret_place = CPlace::new_stack_slot(fx, lhs.layout());\n+                ret_place.to_ptr().store(fx, ret, MemFlags::trusted());\n+                Some(ret_place.to_cvalue(fx))\n             } else {\n-                Some(fx.easy_call(\"__umodti3\", &[lhs, rhs], fx.tcx.types.u128))\n+                Some(fx.easy_call(name, &[lhs, rhs], lhs.layout().ty))\n             }\n         }\n         BinOp::Lt | BinOp::Le | BinOp::Eq | BinOp::Ge | BinOp::Gt | BinOp::Ne => {"}, {"sha": "33234f820aa8f2c9de47ed15ddfeec655d844133", "filename": "src/inline_asm.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=274a7ac4c49c31bc87672fbbf5f1002c96fec1aa", "patch": "@@ -20,6 +20,10 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n     if template.is_empty() {\n         // Black box\n         return;\n+    } else if template[0] == InlineAsmTemplatePiece::String(\"int $$0x29\".to_string()) {\n+        let true_ = fx.bcx.ins().iconst(types::I32, 1);\n+        fx.bcx.ins().trapnz(true_, TrapCode::User(1));\n+        return;\n     }\n \n     let mut slot_size = Size::from_bytes(0);"}, {"sha": "5db2499709a62d7aa5559f2c674b59303cca5999", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/274a7ac4c49c31bc87672fbbf5f1002c96fec1aa/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=274a7ac4c49c31bc87672fbbf5f1002c96fec1aa", "patch": "@@ -313,6 +313,8 @@ fn build_isa(sess: &Session) -> Box<dyn isa::TargetIsa + 'static> {\n \n     flags_builder.set(\"enable_simd\", \"true\").unwrap();\n \n+    flags_builder.set(\"enable_llvm_abi_extensions\", \"true\").unwrap();\n+\n     use rustc_session::config::OptLevel;\n     match sess.opts.optimize {\n         OptLevel::No => {"}]}