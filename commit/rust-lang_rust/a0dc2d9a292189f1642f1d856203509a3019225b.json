{"sha": "a0dc2d9a292189f1642f1d856203509a3019225b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZGMyZDlhMjkyMTg5ZjE2NDJmMWQ4NTYyMDM1MDlhMzAxOTIyNWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-09-09T18:23:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-01T14:37:19Z"}, "message": "Introduce semi-duplicate DefIds into DefLocal/DefUpvar to remove use\nof xxx_local.", "tree": {"sha": "9c8ba428132d493e39c8fceea132ba83864a8192", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c8ba428132d493e39c8fceea132ba83864a8192"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0dc2d9a292189f1642f1d856203509a3019225b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0dc2d9a292189f1642f1d856203509a3019225b", "html_url": "https://github.com/rust-lang/rust/commit/a0dc2d9a292189f1642f1d856203509a3019225b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0dc2d9a292189f1642f1d856203509a3019225b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b1399df2dbdcbe0e126e8b434536257ccf604e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1399df2dbdcbe0e126e8b434536257ccf604e1", "html_url": "https://github.com/rust-lang/rust/commit/3b1399df2dbdcbe0e126e8b434536257ccf604e1"}], "stats": {"total": 96, "additions": 51, "deletions": 45}, "files": [{"sha": "0b72b0d95420005e13757f6c7a54c438cb65c44c", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -461,7 +461,11 @@ impl tr for def::Def {\n           def::DefStatic(did, m) => { def::DefStatic(did.tr(dcx), m) }\n           def::DefConst(did) => { def::DefConst(did.tr(dcx)) }\n           def::DefAssociatedConst(did) => def::DefAssociatedConst(did.tr(dcx)),\n-          def::DefLocal(nid) => { def::DefLocal(dcx.tr_id(nid)) }\n+          def::DefLocal(_, nid) => {\n+              let nid = dcx.tr_id(nid);\n+              let did = dcx.tcx.map.local_def_id(nid);\n+              def::DefLocal(did, nid)\n+          }\n           def::DefVariant(e_did, v_did, is_s) => {\n             def::DefVariant(e_did.tr(dcx), v_did.tr(dcx), is_s)\n           },\n@@ -472,8 +476,11 @@ impl tr for def::Def {\n           def::DefPrimTy(p) => def::DefPrimTy(p),\n           def::DefTyParam(s, index, def_id, n) => def::DefTyParam(s, index, def_id.tr(dcx), n),\n           def::DefUse(did) => def::DefUse(did.tr(dcx)),\n-          def::DefUpvar(nid1, index, nid2) => {\n-            def::DefUpvar(dcx.tr_id(nid1), index, dcx.tr_id(nid2))\n+          def::DefUpvar(_, nid1, index, nid2) => {\n+              let nid1 = dcx.tr_id(nid1);\n+              let nid2 = dcx.tr_id(nid2);\n+              let did1 = dcx.tcx.map.local_def_id(nid1);\n+              def::DefUpvar(did1, nid1, index, nid2)\n           }\n           def::DefStruct(did) => def::DefStruct(did.tr(dcx)),\n           def::DefLabel(nid) => def::DefLabel(dcx.tr_id(nid))"}, {"sha": "15c56d23da203f6e995bbe888ff9f40410b3d279", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -659,7 +659,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n                                              doesn't point to a constant\");\n                     }\n                 }\n-                Some(def::DefLocal(_)) if v.mode == Mode::ConstFn => {\n+                Some(def::DefLocal(..)) if v.mode == Mode::ConstFn => {\n                     // Sadly, we can't determine whether the types are zero-sized.\n                     v.add_qualif(ConstQualif::NOT_CONST | ConstQualif::NON_ZERO_SIZED);\n                 }"}, {"sha": "283c6264717f035b029f14da69755157826273cc", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -245,7 +245,7 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat)\n                 let pat_ty = cx.tcx.pat_ty(p);\n                 if let ty::TyEnum(edef, _) = pat_ty.sty {\n                     let def = cx.tcx.def_map.borrow().get(&p.id).map(|d| d.full_def());\n-                    if let Some(DefLocal(_)) = def {\n+                    if let Some(DefLocal(..)) = def {\n                         if edef.variants.iter().any(|variant|\n                             variant.name == ident.node.name\n                                 && variant.kind() == VariantKind::Unit"}, {"sha": "3e8325b86121dbed515172b9c60f74c01f5677b4", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -29,15 +29,17 @@ pub enum Def {\n     DefStatic(DefId, bool /* is_mutbl */),\n     DefConst(DefId),\n     DefAssociatedConst(DefId),\n-    DefLocal(ast::NodeId),\n+    DefLocal(DefId, // def id of variable\n+             ast::NodeId), // node id of variable\n     DefVariant(DefId /* enum */, DefId /* variant */, bool /* is_structure */),\n     DefTy(DefId, bool /* is_enum */),\n     DefAssociatedTy(DefId /* trait */, DefId),\n     DefTrait(DefId),\n     DefPrimTy(hir::PrimTy),\n     DefTyParam(ParamSpace, u32, DefId, ast::Name),\n     DefUse(DefId),\n-    DefUpvar(ast::NodeId,  // id of closed over local\n+    DefUpvar(DefId,        // def id of closed over local\n+             ast::NodeId,  // node id of closed over local\n              usize,        // index in the freevars list of the closure\n              ast::NodeId), // expr node that creates the closure\n \n@@ -115,8 +117,8 @@ pub struct Export {\n impl Def {\n     pub fn var_id(&self) -> ast::NodeId {\n         match *self {\n-            DefLocal(id) |\n-            DefUpvar(id, _, _) => {\n+            DefLocal(_, id) |\n+            DefUpvar(_, id, _, _) => {\n                 id\n             }\n \n@@ -135,15 +137,11 @@ impl Def {\n             DefFn(id, _) | DefMod(id) | DefForeignMod(id) | DefStatic(id, _) |\n             DefVariant(_, id, _) | DefTy(id, _) | DefAssociatedTy(_, id) |\n             DefTyParam(_, _, id, _) | DefUse(id) | DefStruct(id) | DefTrait(id) |\n-            DefMethod(id) | DefConst(id) | DefAssociatedConst(id) => {\n+            DefMethod(id) | DefConst(id) | DefAssociatedConst(id) |\n+            DefLocal(id, _) | DefUpvar(id, _, _, _) => {\n                 id\n             }\n \n-            DefLocal(id) |\n-            DefUpvar(id, _, _) => {\n-                DefId::xxx_local(id) // TODO, clearly\n-            }\n-\n             DefLabel(..)  |\n             DefPrimTy(..) |\n             DefSelfTy(..) => {"}, {"sha": "512faa8f8b53465cdbc78411a8275ce3967cee93", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -280,11 +280,9 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                typer: &'t infer::InferCtxt<'a, 'tcx>)\n                -> ExprUseVisitor<'d,'t,'a,'tcx> where 'tcx:'a\n     {\n-        ExprUseVisitor {\n-            typer: typer,\n-            mc: mc::MemCategorizationContext::new(typer),\n-            delegate: delegate,\n-        }\n+        let mc: mc::MemCategorizationContext<'t, 'a, 'tcx> =\n+            mc::MemCategorizationContext::new(typer);\n+        ExprUseVisitor { typer: typer, mc: mc, delegate: delegate }\n     }\n \n     pub fn walk_fn(&mut self,"}, {"sha": "3b56597d353a308b7c0bf695d892ae137ed4724d", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -465,7 +465,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n         let mut call_caps = Vec::new();\n         ir.tcx.with_freevars(expr.id, |freevars| {\n             for fv in freevars {\n-                if let DefLocal(rv) = fv.def {\n+                if let DefLocal(_, rv) = fv.def {\n                     let fv_ln = ir.add_live_node(FreeVarNode(fv.span));\n                     call_caps.push(CaptureInfo {ln: fv_ln,\n                                                 var_nid: rv});\n@@ -1268,7 +1268,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn access_path(&mut self, expr: &Expr, succ: LiveNode, acc: u32)\n                    -> LiveNode {\n         match self.ir.tcx.def_map.borrow().get(&expr.id).unwrap().full_def() {\n-          DefLocal(nid) => {\n+          DefLocal(_, nid) => {\n             let ln = self.live_node(expr.id, expr.span);\n             if acc != 0 {\n                 self.init_from_succ(ln, succ);\n@@ -1517,9 +1517,9 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn check_lvalue(&mut self, expr: &Expr) {\n         match expr.node {\n             hir::ExprPath(..) => {\n-                if let DefLocal(nid) = self.ir.tcx.def_map.borrow().get(&expr.id)\n-                                                                   .unwrap()\n-                                                                   .full_def() {\n+                if let DefLocal(_, nid) = self.ir.tcx.def_map.borrow().get(&expr.id)\n+                                                                      .unwrap()\n+                                                                      .full_def() {\n                     // Assignment to an immutable variable or argument: only legal\n                     // if there is no later assignment. If this local is actually\n                     // mutable, then check for a reassignment to flag the mutability"}, {"sha": "555f864befbe08bdb7f7e642d5bc13fe99032f32", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -575,7 +575,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n               }))\n           }\n \n-          def::DefUpvar(var_id, _, fn_node_id) => {\n+          def::DefUpvar(_, var_id, _, fn_node_id) => {\n               let ty = try!(self.node_ty(fn_node_id));\n               match ty.sty {\n                   ty::TyClosure(closure_id, _) => {\n@@ -600,7 +600,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n               }\n           }\n \n-          def::DefLocal(vid) => {\n+          def::DefLocal(_, vid) => {\n             Ok(Rc::new(cmt_ {\n                 id: id,\n                 span: span,"}, {"sha": "91d1d398a0e548ea782b2c9c4be8fce78754a76e", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -274,7 +274,7 @@ impl LateLintPass for NonSnakeCase {\n     fn check_pat(&mut self, cx: &LateContext, p: &hir::Pat) {\n         if let &hir::PatIdent(_, ref path1, _) = &p.node {\n             let def = cx.tcx.def_map.borrow().get(&p.id).map(|d| d.full_def());\n-            if let Some(def::DefLocal(_)) = def {\n+            if let Some(def::DefLocal(..)) = def {\n                 self.check_snake_case(cx, \"variable\", &path1.node.name.as_str(), Some(p.span));\n             }\n         }"}, {"sha": "8c5c4cce1674ba37be2a69eb1b9a8949490f3839", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -248,7 +248,8 @@ impl LateLintPass for NonShorthandFieldPatterns {\n                     return false;\n                 }\n                 let def = def_map.get(&fieldpat.node.pat.id).map(|d| d.full_def());\n-                def == Some(def::DefLocal(fieldpat.node.pat.id))\n+                let def_id = cx.tcx.map.local_def_id(fieldpat.node.pat.id);\n+                def == Some(def::DefLocal(def_id, fieldpat.node.pat.id))\n             });\n             for fieldpat in field_pats {\n                 if let hir::PatIdent(_, ident, None) = fieldpat.node.pat.node {"}, {"sha": "97becd474b1fec2473bb3a947b29596b6327014e", "filename": "src/librustc_mir/tcx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -569,13 +569,13 @@ fn convert_var<'a,'tcx:'a>(cx: &mut Cx<'a,'tcx>,\n     let temp_lifetime = cx.tcx.region_maps.temporary_scope(expr.id);\n \n     match def {\n-        def::DefLocal(node_id) => {\n+        def::DefLocal(_, node_id) => {\n             ExprKind::VarRef {\n                 id: node_id,\n             }\n         }\n \n-        def::DefUpvar(id_var, index, closure_expr_id) => {\n+        def::DefUpvar(_, id_var, index, closure_expr_id) => {\n             debug!(\"convert_var(upvar({:?}, {:?}, {:?}))\", id_var, index, closure_expr_id);\n             let var_ty = cx.tcx.node_id_to_type(id_var);\n "}, {"sha": "40477d8698ebec8a61f8cf6291421fb05bde3e44", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -1982,19 +1982,20 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 self.session.span_bug(span,\n                     &format!(\"unexpected {:?} in bindings\", def))\n             }\n-            DefLocal(node_id) => {\n+            DefLocal(_, node_id) => {\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind => {\n                             // Nothing to do. Continue.\n                         }\n                         ClosureRibKind(function_id) => {\n                             let prev_def = def;\n+                            let node_def_id = self.ast_map.local_def_id(node_id);\n \n                             let mut seen = self.freevars_seen.borrow_mut();\n                             let seen = seen.entry(function_id).or_insert_with(|| NodeMap());\n                             if let Some(&index) = seen.get(&node_id) {\n-                                def = DefUpvar(node_id, index, function_id);\n+                                def = DefUpvar(node_def_id, node_id, index, function_id);\n                                 continue;\n                             }\n                             let mut freevars = self.freevars.borrow_mut();\n@@ -2003,7 +2004,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             let depth = vec.len();\n                             vec.push(Freevar { def: prev_def, span: span });\n \n-                            def = DefUpvar(node_id, depth, function_id);\n+                            def = DefUpvar(node_def_id, node_id, depth, function_id);\n                             seen.insert(node_id, depth);\n                         }\n                         ItemRibKind | MethodRibKind => {\n@@ -2817,7 +2818,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             debug!(\"(resolving pattern) binding `{}`\",\n                                    renamed);\n \n-                            let def = DefLocal(pattern.id);\n+                            let def_id = self.ast_map.local_def_id(pattern.id);\n+                            let def = DefLocal(def_id, pattern.id);\n \n                             // Record the definition so that later passes\n                             // will be able to distinguish variants from"}, {"sha": "dc0bdd8573d87f98adcede2202b0e7579d89a9e3", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -258,7 +258,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             def::DefStatic(_, _) |\n             def::DefConst(_) |\n             def::DefAssociatedConst(..) |\n-            def::DefLocal(_) |\n+            def::DefLocal(..) |\n             def::DefVariant(_, _, _) |\n             def::DefUpvar(..) => Some(recorder::VarRef),\n \n@@ -721,7 +721,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                     }\n                 }\n             }\n-            def::DefLocal(_) |\n+            def::DefLocal(..) |\n             def::DefStatic(_,_) |\n             def::DefConst(..) |\n             def::DefAssociatedConst(..) |\n@@ -1170,7 +1170,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n             }\n             let def = def_map.get(&id).unwrap().full_def();\n             match def {\n-                def::DefLocal(id) => {\n+                def::DefLocal(_, id) => {\n                     let value = if immut == ast::MutImmutable {\n                         self.span.snippet(p.span).to_string()\n                     } else {"}, {"sha": "1eb4a7a5e0c45533572c7c17c176e7ee91e1cde4", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -1432,19 +1432,19 @@ pub fn trans_match<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n fn is_discr_reassigned(bcx: Block, discr: &hir::Expr, body: &hir::Expr) -> bool {\n     let (vid, field) = match discr.node {\n         hir::ExprPath(..) => match bcx.def(discr.id) {\n-            def::DefLocal(vid) | def::DefUpvar(vid, _, _) => (vid, None),\n+            def::DefLocal(_, vid) | def::DefUpvar(_, vid, _, _) => (vid, None),\n             _ => return false\n         },\n         hir::ExprField(ref base, field) => {\n             let vid = match bcx.tcx().def_map.borrow().get(&base.id).map(|d| d.full_def()) {\n-                Some(def::DefLocal(vid)) | Some(def::DefUpvar(vid, _, _)) => vid,\n+                Some(def::DefLocal(_, vid)) | Some(def::DefUpvar(_, vid, _, _)) => vid,\n                 _ => return false\n             };\n             (vid, Some(mc::NamedField(field.node)))\n         },\n         hir::ExprTupField(ref base, field) => {\n             let vid = match bcx.tcx().def_map.borrow().get(&base.id).map(|d| d.full_def()) {\n-                Some(def::DefLocal(vid)) | Some(def::DefUpvar(vid, _, _)) => vid,\n+                Some(def::DefLocal(_, vid)) | Some(def::DefUpvar(_, vid, _, _)) => vid,\n                 _ => return false\n             };\n             (vid, Some(mc::PositionalField(field.node)))"}, {"sha": "6aa087cce56bdfcfc24dfb73d46da0ac69ec05bb", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -783,7 +783,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         hir::ExprPath(..) => {\n             let def = cx.tcx().def_map.borrow().get(&e.id).unwrap().full_def();\n             match def {\n-                def::DefLocal(id) => {\n+                def::DefLocal(_, id) => {\n                     if let Some(val) = fn_args.and_then(|args| args.get(&id).cloned()) {\n                         val\n                     } else {"}, {"sha": "476e05d50d20f1da312234893898c0e3232038b7", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -1358,7 +1358,7 @@ pub fn trans_local_var<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let _icx = push_ctxt(\"trans_local_var\");\n \n     match def {\n-        def::DefUpvar(nid, _, _) => {\n+        def::DefUpvar(_, nid, _, _) => {\n             // Can't move upvars, so this is never a ZeroMemLastUse.\n             let local_ty = node_id_type(bcx, nid);\n             let lval = Lvalue::new_with_hint(\"expr::trans_local_var (upvar)\",\n@@ -1372,7 +1372,7 @@ pub fn trans_local_var<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 }\n             }\n         }\n-        def::DefLocal(nid) => {\n+        def::DefLocal(_, nid) => {\n             let datum = match bcx.fcx.lllocals.borrow().get(&nid) {\n                 Some(&v) => v,\n                 None => {"}, {"sha": "98836f0e5cf4c742e47c70a75200cb14ef6c03e1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0dc2d9a292189f1642f1d856203509a3019225b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a0dc2d9a292189f1642f1d856203509a3019225b", "patch": "@@ -4300,7 +4300,7 @@ fn type_scheme_and_predicates_for_def<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                                 defn: def::Def)\n                                                 -> (TypeScheme<'tcx>, GenericPredicates<'tcx>) {\n     match defn {\n-        def::DefLocal(nid) | def::DefUpvar(nid, _, _) => {\n+        def::DefLocal(_, nid) | def::DefUpvar(_, nid, _, _) => {\n             let typ = fcx.local_ty(sp, nid);\n             (ty::TypeScheme { generics: ty::Generics::empty(), ty: typ },\n              ty::GenericPredicates::empty())"}]}