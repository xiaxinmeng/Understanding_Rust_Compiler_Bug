{"sha": "4a96800aef385a70d7ee083058413c293c2f34c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOTY4MDBhZWYzODVhNzBkN2VlMDgzMDU4NDEzYzI5M2MyZjM0YzI=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-05-21T19:22:47Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-07-15T20:37:16Z"}, "message": "Constify most non-trait `Duration` methods as described in #72440", "tree": {"sha": "4a3bf573a8214236108530807d27a2e032ca51c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a3bf573a8214236108530807d27a2e032ca51c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a96800aef385a70d7ee083058413c293c2f34c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a96800aef385a70d7ee083058413c293c2f34c2", "html_url": "https://github.com/rust-lang/rust/commit/4a96800aef385a70d7ee083058413c293c2f34c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a96800aef385a70d7ee083058413c293c2f34c2/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "html_url": "https://github.com/rust-lang/rust/commit/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149"}], "stats": {"total": 105, "additions": 86, "deletions": 19}, "files": [{"sha": "88991dea7d43eeef41c308f28119511e05b783b2", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a96800aef385a70d7ee083058413c293c2f34c2/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a96800aef385a70d7ee083058413c293c2f34c2/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=4a96800aef385a70d7ee083058413c293c2f34c2", "patch": "@@ -96,6 +96,7 @@\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]\n+#![feature(duration_consts_2)]\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(intrinsics)]"}, {"sha": "acaedbd135e7c3c7d7cdeef7a807a475096af0a0", "filename": "src/libcore/time.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4a96800aef385a70d7ee083058413c293c2f34c2/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a96800aef385a70d7ee083058413c293c2f34c2/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=4a96800aef385a70d7ee083058413c293c2f34c2", "patch": "@@ -130,10 +130,12 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n-    #[rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\")]\n-    pub fn new(secs: u64, nanos: u32) -> Duration {\n-        let secs =\n-            secs.checked_add((nanos / NANOS_PER_SEC) as u64).expect(\"overflow in Duration::new\");\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn new(secs: u64, nanos: u32) -> Duration {\n+        let secs = match secs.checked_add((nanos / NANOS_PER_SEC) as u64) {\n+            Some(secs) => secs,\n+            None => panic!(\"overflow in Duration::new\"),\n+        };\n         let nanos = nanos % NANOS_PER_SEC;\n         Duration { secs, nanos }\n     }\n@@ -433,7 +435,8 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n     #[inline]\n-    pub fn checked_add(self, rhs: Duration) -> Option<Duration> {\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn checked_add(self, rhs: Duration) -> Option<Duration> {\n         if let Some(mut secs) = self.secs.checked_add(rhs.secs) {\n             let mut nanos = self.nanos + rhs.nanos;\n             if nanos >= NANOS_PER_SEC {\n@@ -468,7 +471,8 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n     #[inline]\n-    pub fn checked_sub(self, rhs: Duration) -> Option<Duration> {\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn checked_sub(self, rhs: Duration) -> Option<Duration> {\n         if let Some(mut secs) = self.secs.checked_sub(rhs.secs) {\n             let nanos = if self.nanos >= rhs.nanos {\n                 self.nanos - rhs.nanos\n@@ -504,19 +508,19 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n     #[inline]\n-    pub fn checked_mul(self, rhs: u32) -> Option<Duration> {\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn checked_mul(self, rhs: u32) -> Option<Duration> {\n         // Multiply nanoseconds as u64, because it cannot overflow that way.\n         let total_nanos = self.nanos as u64 * rhs as u64;\n         let extra_secs = total_nanos / (NANOS_PER_SEC as u64);\n         let nanos = (total_nanos % (NANOS_PER_SEC as u64)) as u32;\n-        if let Some(secs) =\n-            self.secs.checked_mul(rhs as u64).and_then(|s| s.checked_add(extra_secs))\n-        {\n-            debug_assert!(nanos < NANOS_PER_SEC);\n-            Some(Duration { secs, nanos })\n-        } else {\n-            None\n+        if let Some(s) = self.secs.checked_mul(rhs as u64) {\n+            if let Some(secs) = s.checked_add(extra_secs) {\n+                debug_assert!(nanos < NANOS_PER_SEC);\n+                return Some(Duration { secs, nanos });\n+            }\n         }\n+        None\n     }\n \n     /// Checked `Duration` division. Computes `self / other`, returning [`None`]\n@@ -537,7 +541,8 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n     #[inline]\n-    pub fn checked_div(self, rhs: u32) -> Option<Duration> {\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn checked_div(self, rhs: u32) -> Option<Duration> {\n         if rhs != 0 {\n             let secs = self.secs / (rhs as u64);\n             let carry = self.secs - secs * (rhs as u64);\n@@ -563,7 +568,8 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n-    pub fn as_secs_f64(&self) -> f64 {\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn as_secs_f64(&self) -> f64 {\n         (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n     }\n \n@@ -580,7 +586,8 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n-    pub fn as_secs_f32(&self) -> f32 {\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn as_secs_f32(&self) -> f32 {\n         (self.secs as f32) + (self.nanos as f32) / (NANOS_PER_SEC as f32)\n     }\n \n@@ -747,7 +754,8 @@ impl Duration {\n     /// ```\n     #[unstable(feature = \"div_duration\", issue = \"63139\")]\n     #[inline]\n-    pub fn div_duration_f64(self, rhs: Duration) -> f64 {\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn div_duration_f64(self, rhs: Duration) -> f64 {\n         self.as_secs_f64() / rhs.as_secs_f64()\n     }\n \n@@ -764,7 +772,8 @@ impl Duration {\n     /// ```\n     #[unstable(feature = \"div_duration\", issue = \"63139\")]\n     #[inline]\n-    pub fn div_duration_f32(self, rhs: Duration) -> f32 {\n+    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    pub const fn div_duration_f32(self, rhs: Duration) -> f32 {\n         self.as_secs_f32() / rhs.as_secs_f32()\n     }\n }"}, {"sha": "c8b3939933126996195ac32316a90a129032e295", "filename": "src/test/ui/consts/duration-consts-2.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4a96800aef385a70d7ee083058413c293c2f34c2/src%2Ftest%2Fui%2Fconsts%2Fduration-consts-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a96800aef385a70d7ee083058413c293c2f34c2/src%2Ftest%2Fui%2Fconsts%2Fduration-consts-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fduration-consts-2.rs?ref=4a96800aef385a70d7ee083058413c293c2f34c2", "patch": "@@ -0,0 +1,57 @@\n+// run-pass\n+\n+#![feature(const_panic)]\n+#![feature(duration_consts_2)]\n+#![feature(div_duration)]\n+\n+use std::time::Duration;\n+\n+fn duration() {\n+    const ZERO : Duration = Duration::new(0, 0);\n+    assert_eq!(ZERO, Duration::from_secs(0));\n+\n+    const ONE : Duration = Duration::new(0, 1);\n+    assert_eq!(ONE, Duration::from_nanos(1));\n+\n+    const MAX : Duration = Duration::new(u64::MAX, 1_000_000_000 - 1);\n+\n+    const MAX_ADD_ZERO : Option<Duration> = MAX.checked_add(ZERO);\n+    assert_eq!(MAX_ADD_ZERO, Some(MAX));\n+\n+    const MAX_ADD_ONE : Option<Duration> = MAX.checked_add(ONE);\n+    assert_eq!(MAX_ADD_ONE, None);\n+\n+    const ONE_SUB_ONE : Option<Duration> = ONE.checked_sub(ONE);\n+    assert_eq!(ONE_SUB_ONE, Some(ZERO));\n+\n+    const ZERO_SUB_ONE : Option<Duration> = ZERO.checked_sub(ONE);\n+    assert_eq!(ZERO_SUB_ONE, None);\n+\n+    const ONE_MUL_ONE : Option<Duration> = ONE.checked_mul(1);\n+    assert_eq!(ONE_MUL_ONE, Some(ONE));\n+\n+    const MAX_MUL_TWO : Option<Duration> = MAX.checked_mul(2);\n+    assert_eq!(MAX_MUL_TWO, None);\n+\n+    const ONE_DIV_ONE : Option<Duration> = ONE.checked_div(1);\n+    assert_eq!(ONE_DIV_ONE, Some(ONE));\n+\n+    const ONE_DIV_ZERO : Option<Duration> = ONE.checked_div(0);\n+    assert_eq!(ONE_DIV_ZERO, None);\n+\n+    const MAX_AS_F32 : f32 = MAX.as_secs_f32();\n+    assert_eq!(MAX_AS_F32, 18446744000000000000.0_f32);\n+\n+    const MAX_AS_F64 : f64 = MAX.as_secs_f64();\n+    assert_eq!(MAX_AS_F64, 18446744073709552000.0_f64);\n+\n+    const ONE_AS_F32 : f32 = ONE.div_duration_f32(ONE);\n+    assert_eq!(ONE_AS_F32, 1.0_f32);\n+\n+    const ONE_AS_F64 : f64 = ONE.div_duration_f64(ONE);\n+    assert_eq!(ONE_AS_F64, 1.0_f64);\n+}\n+\n+fn main() {\n+    duration();\n+}"}]}