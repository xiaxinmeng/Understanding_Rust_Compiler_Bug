{"sha": "7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "node_id": "C_kwDOAAsO6NoAKDdhMmQ5MmUxZjI5Zjc3NGFjYjY0MGI4ZTQyNjJhZWQxYjhmN2Y5YTQ", "commit": {"author": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-11-27T15:12:51Z"}, "committer": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-11-27T15:12:51Z"}, "message": "Add allow-mixed-uninlined-format-args config\n\nImplement `allow-mixed-uninlined-format-args` config param to change the behavior of the `uninlined_format_args` lint. Now it is a part of `style`, and won't propose inlining in case of a mixed usage, e.g. `print!(\"{} {}\", var, 1+2)`. If the user sets allow-mixed-uninlined-format-args config param to `false`, then it would behave like before, proposing to inline args even in the mixed case.", "tree": {"sha": "9afa0926a9ec2aac17709062de9e76b0437f7d20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9afa0926a9ec2aac17709062de9e76b0437f7d20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "html_url": "https://github.com/rust-lang/rust/commit/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/comments", "author": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c55cadcfd9616c37d60d3be11c4ddc8dd1c25a4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c55cadcfd9616c37d60d3be11c4ddc8dd1c25a4c", "html_url": "https://github.com/rust-lang/rust/commit/c55cadcfd9616c37d60d3be11c4ddc8dd1c25a4c"}], "stats": {"total": 1380, "additions": 1359, "deletions": 21}, "files": [{"sha": "40a37d39ecf842786182310e1ec84a5140fd79a0", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::is_diag_trait_item;\n-use clippy_utils::macros::FormatParamKind::{Implicit, Named, Numbered, Starred};\n+use clippy_utils::macros::FormatParamKind::{Implicit, Named, NamedInline, Numbered, Starred};\n use clippy_utils::macros::{\n     is_format_macro, is_panic, root_macro_call, Count, FormatArg, FormatArgsExpn, FormatParam, FormatParamUsage,\n };\n@@ -106,19 +106,25 @@ declare_clippy_lint! {\n     /// format!(\"{var:.prec$}\");\n     /// ```\n     ///\n-    /// ### Known Problems\n-    ///\n-    /// There may be a false positive if the format string is expanded from certain proc macros:\n-    ///\n-    /// ```ignore\n-    /// println!(indoc!(\"{}\"), var);\n+    /// If allow-mixed-uninlined-format-args is set to false in clippy.toml,\n+    /// the following code will also trigger the lint:\n+    /// ```rust\n+    /// # let var = 42;\n+    /// format!(\"{} {}\", var, 1+2);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # let var = 42;\n+    /// format!(\"{var} {}\", 1+2);\n     /// ```\n     ///\n+    /// ### Known Problems\n+    ///\n     /// If a format string contains a numbered argument that cannot be inlined\n     /// nothing will be suggested, e.g. `println!(\"{0}={1}\", var, 1+2)`.\n     #[clippy::version = \"1.65.0\"]\n     pub UNINLINED_FORMAT_ARGS,\n-    pedantic,\n+    style,\n     \"using non-inlined variables in `format!` calls\"\n }\n \n@@ -162,12 +168,16 @@ impl_lint_pass!(FormatArgs => [\n \n pub struct FormatArgs {\n     msrv: Msrv,\n+    ignore_mixed: bool,\n }\n \n impl FormatArgs {\n     #[must_use]\n-    pub fn new(msrv: Msrv) -> Self {\n-        Self { msrv }\n+    pub fn new(msrv: Msrv, allow_mixed_uninlined_format_args: bool) -> Self {\n+        Self {\n+            msrv,\n+            ignore_mixed: allow_mixed_uninlined_format_args,\n+        }\n     }\n }\n \n@@ -192,7 +202,7 @@ impl<'tcx> LateLintPass<'tcx> for FormatArgs {\n                 check_to_string_in_format_args(cx, name, arg.param.value);\n             }\n             if self.msrv.meets(msrvs::FORMAT_ARGS_CAPTURE) {\n-                check_uninlined_args(cx, &format_args, outermost_expn_data.call_site, macro_def_id);\n+                check_uninlined_args(cx, &format_args, outermost_expn_data.call_site, macro_def_id, self.ignore_mixed);\n             }\n         }\n     }\n@@ -270,7 +280,13 @@ fn check_unused_format_specifier(cx: &LateContext<'_>, arg: &FormatArg<'_>) {\n     }\n }\n \n-fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_site: Span, def_id: DefId) {\n+fn check_uninlined_args(\n+    cx: &LateContext<'_>,\n+    args: &FormatArgsExpn<'_>,\n+    call_site: Span,\n+    def_id: DefId,\n+    ignore_mixed: bool,\n+) {\n     if args.format_string.span.from_expansion() {\n         return;\n     }\n@@ -285,7 +301,7 @@ fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_si\n     // we cannot remove any other arguments in the format string,\n     // because the index numbers might be wrong after inlining.\n     // Example of an un-inlinable format:  print!(\"{}{1}\", foo, 2)\n-    if !args.params().all(|p| check_one_arg(args, &p, &mut fixes)) || fixes.is_empty() {\n+    if !args.params().all(|p| check_one_arg(args, &p, &mut fixes, ignore_mixed)) || fixes.is_empty() {\n         return;\n     }\n \n@@ -305,11 +321,23 @@ fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_si\n                 Applicability::MachineApplicable,\n                 if multiline_fix { CompletelyHidden } else { ShowCode },\n             );\n+            if ignore_mixed {\n+                // Improve lint config discoverability\n+                diag.note_once(\n+                    \"this lint can also fix mixed format arg inlining if \\\n+                    `allow-mixed-uninlined-format-args = false` is set in the `clippy.toml` file\",\n+                );\n+            }\n         },\n     );\n }\n \n-fn check_one_arg(args: &FormatArgsExpn<'_>, param: &FormatParam<'_>, fixes: &mut Vec<(Span, String)>) -> bool {\n+fn check_one_arg(\n+    args: &FormatArgsExpn<'_>,\n+    param: &FormatParam<'_>,\n+    fixes: &mut Vec<(Span, String)>,\n+    ignore_mixed: bool,\n+) -> bool {\n     if matches!(param.kind, Implicit | Starred | Named(_) | Numbered)\n         && let ExprKind::Path(QPath::Resolved(None, path)) = param.value.kind\n         && let [segment] = path.segments\n@@ -324,8 +352,10 @@ fn check_one_arg(args: &FormatArgsExpn<'_>, param: &FormatParam<'_>, fixes: &mut\n         fixes.push((arg_span, String::new()));\n         true  // successful inlining, continue checking\n     } else {\n-        // if we can't inline a numbered argument, we can't continue\n-        param.kind != Numbered\n+        // Do not continue inlining (return false) in case\n+        // * if we can't inline a numbered argument, e.g. `print!(\"{0} ...\", foo.bar, ...)`\n+        // * if allow_mixed_uninlined_format_args is false and this arg hasn't been inlined already\n+        param.kind != Numbered && (!ignore_mixed || matches!(param.kind, NamedInline(_)))\n     }\n }\n "}, {"sha": "3fe39488ab82c480de3ef7bfe280ca92d66ff156", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "patch": "@@ -828,7 +828,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     store.register_late_pass(move |_| Box::new(undocumented_unsafe_blocks::UndocumentedUnsafeBlocks));\n-    store.register_late_pass(move |_| Box::new(format_args::FormatArgs::new(msrv())));\n+    let allow_mixed_uninlined = conf.allow_mixed_uninlined_format_args;\n+    store.register_late_pass(move |_| Box::new(format_args::FormatArgs::new(msrv(), allow_mixed_uninlined)));\n     store.register_late_pass(|_| Box::new(trailing_empty_array::TrailingEmptyArray));\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n     store.register_late_pass(|_| Box::new(needless_late_init::NeedlessLateInit));"}, {"sha": "b6dc8cd7ab1197e338e653a2fa3e1d5f20442877", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "patch": "@@ -402,6 +402,10 @@ define_Conf! {\n     /// A list of paths to types that should be treated like `Arc`, i.e. ignored but\n     /// for the generic parameters for determining interior mutability\n     (ignore_interior_mutability: Vec<String> = Vec::from([\"bytes::Bytes\".into()])),\n+    /// Lint: UNINLINED_FORMAT_ARGS.\n+    ///\n+    /// Whether to allow mixed uninlined format args, e.g. `format!(\"{} {}\", a, foo.bar)`\n+    (allow_mixed_uninlined_format_args: bool = true),\n }\n \n /// Search for the configuration file."}, {"sha": "8ea631f2bbd420fd20795fde30cf81e1bd939d80", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/auxiliary/proc_macro_with_span.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fauxiliary%2Fproc_macro_with_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fauxiliary%2Fproc_macro_with_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fauxiliary%2Fproc_macro_with_span.rs?ref=7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "patch": "@@ -0,0 +1,32 @@\n+// compile-flags: --emit=link\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{token_stream::IntoIter, Group, Span, TokenStream, TokenTree};\n+\n+#[proc_macro]\n+pub fn with_span(input: TokenStream) -> TokenStream {\n+    let mut iter = input.into_iter();\n+    let span = iter.next().unwrap().span();\n+    let mut res = TokenStream::new();\n+    write_with_span(span, iter, &mut res);\n+    res\n+}\n+\n+fn write_with_span(s: Span, input: IntoIter, out: &mut TokenStream) {\n+    for mut tt in input {\n+        if let TokenTree::Group(g) = tt {\n+            let mut stream = TokenStream::new();\n+            write_with_span(s, g.stream().into_iter(), &mut stream);\n+            let mut group = Group::new(g.delimiter(), stream);\n+            group.set_span(s);\n+            out.extend([TokenTree::Group(group)]);\n+        } else {\n+            tt.set_span(s);\n+            out.extend([tt]);\n+        }\n+    }\n+}"}, {"sha": "b95e806aae24fa347a6d5e9c63b96e6c4c87d6da", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Fclippy.toml?ref=7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "patch": "@@ -0,0 +1 @@\n+allow-mixed-uninlined-format-args = false"}, {"sha": "ca56c95c23f403f354212cf3dc789934b677de65", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/uninlined_format_args.fixed", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.fixed?ref=7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "patch": "@@ -0,0 +1,177 @@\n+// aux-build:proc_macro_with_span.rs\n+// run-rustfix\n+#![feature(custom_inner_attributes)]\n+#![warn(clippy::uninlined_format_args)]\n+#![allow(named_arguments_used_positionally, unused_imports, unused_macros, unused_variables)]\n+#![allow(clippy::eq_op, clippy::format_in_format_args, clippy::print_literal)]\n+\n+extern crate proc_macro_with_span;\n+use proc_macro_with_span::with_span;\n+\n+macro_rules! no_param_str {\n+    () => {\n+        \"{}\"\n+    };\n+}\n+\n+macro_rules! my_println {\n+   ($($args:tt),*) => {{\n+        println!($($args),*)\n+    }};\n+}\n+\n+macro_rules! my_println_args {\n+    ($($args:tt),*) => {{\n+        println!(\"foo: {}\", format_args!($($args),*))\n+    }};\n+}\n+\n+fn tester(fn_arg: i32) {\n+    let local_i32 = 1;\n+    let local_f64 = 2.0;\n+    let local_opt: Option<i32> = Some(3);\n+    let width = 4;\n+    let prec = 5;\n+    let val = 6;\n+\n+    // make sure this file hasn't been corrupted with tabs converted to spaces\n+    // let _ = '\t';  // <- this is a single tab character\n+    let _: &[u8; 3] = b\"\t \t\"; // <- <tab><space><tab>\n+\n+    println!(\"val='{local_i32}'\");\n+    println!(\"val='{local_i32}'\"); // 3 spaces\n+    println!(\"val='{local_i32}'\"); // tab\n+    println!(\"val='{local_i32}'\"); // space+tab\n+    println!(\"val='{local_i32}'\"); // tab+space\n+    println!(\n+        \"val='{local_i32}'\"\n+    );\n+    println!(\"{local_i32}\");\n+    println!(\"{fn_arg}\");\n+    println!(\"{local_i32:?}\");\n+    println!(\"{local_i32:#?}\");\n+    println!(\"{local_i32:4}\");\n+    println!(\"{local_i32:04}\");\n+    println!(\"{local_i32:<3}\");\n+    println!(\"{local_i32:#010x}\");\n+    println!(\"{local_f64:.1}\");\n+    println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n+    println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+    println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+    println!(\"{local_i32} {local_f64}\");\n+    println!(\"{local_i32}, {}\", local_opt.unwrap());\n+    println!(\"{val}\");\n+    println!(\"{val}\");\n+    println!(\"{} {1}\", local_i32, 42);\n+    println!(\"val='{local_i32}'\");\n+    println!(\"val='{local_i32}'\");\n+    println!(\"val='{local_i32}'\");\n+    println!(\"val='{fn_arg}'\");\n+    println!(\"{local_i32}\");\n+    println!(\"{local_i32:?}\");\n+    println!(\"{local_i32:#?}\");\n+    println!(\"{local_i32:04}\");\n+    println!(\"{local_i32:<3}\");\n+    println!(\"{local_i32:#010x}\");\n+    println!(\"{local_f64:.1}\");\n+    println!(\"{local_i32} {local_i32}\");\n+    println!(\"{local_f64} {local_i32} {local_i32} {local_f64}\");\n+    println!(\"{local_i32} {local_f64}\");\n+    println!(\"{local_f64} {local_i32}\");\n+    println!(\"{local_f64} {local_i32} {local_f64} {local_i32}\");\n+    println!(\"{1} {0}\", \"str\", local_i32);\n+    println!(\"{local_i32}\");\n+    println!(\"{local_i32:width$}\");\n+    println!(\"{local_i32:width$}\");\n+    println!(\"{local_i32:.prec$}\");\n+    println!(\"{local_i32:.prec$}\");\n+    println!(\"{val:val$}\");\n+    println!(\"{val:val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{val:val$.val$}\");\n+    println!(\"{width:width$}\");\n+    println!(\"{local_i32:width$}\");\n+    println!(\"{width:width$}\");\n+    println!(\"{local_i32:width$}\");\n+    println!(\"{prec:.prec$}\");\n+    println!(\"{local_i32:.prec$}\");\n+    println!(\"{prec:.prec$}\");\n+    println!(\"{local_i32:.prec$}\");\n+    println!(\"{width:width$.prec$}\");\n+    println!(\"{width:width$.prec$}\");\n+    println!(\"{local_f64:width$.prec$}\");\n+    println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n+    println!(\n+        \"{local_i32:width$.prec$} {local_i32:prec$.width$} {width:local_i32$.prec$} {width:prec$.local_i32$} {prec:local_i32$.width$} {prec:width$.local_i32$}\",\n+    );\n+    println!(\n+        \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$} {3}\",\n+        local_i32,\n+        width,\n+        prec,\n+        1 + 2\n+    );\n+    println!(\"Width = {local_i32}, value with width = {local_f64:local_i32$}\");\n+    println!(\"{local_i32:width$.prec$}\");\n+    println!(\"{width:width$.prec$}\");\n+    println!(\"{}\", format!(\"{local_i32}\"));\n+    my_println!(\"{}\", local_i32);\n+    my_println_args!(\"{}\", local_i32);\n+\n+    // these should NOT be modified by the lint\n+    println!(concat!(\"nope \", \"{}\"), local_i32);\n+    println!(\"val='{local_i32}'\");\n+    println!(\"val='{local_i32 }'\");\n+    println!(\"val='{local_i32\t}'\"); // with tab\n+    println!(\"val='{local_i32\\n}'\");\n+    println!(\"{}\", usize::MAX);\n+    println!(\"{}\", local_opt.unwrap());\n+    println!(\n+        \"val='{local_i32\n+    }'\"\n+    );\n+    println!(no_param_str!(), local_i32);\n+\n+    println!(\n+        \"{val}\",\n+    );\n+    println!(\"{val}\");\n+\n+    println!(with_span!(\"{0} {1}\" \"{1} {0}\"), local_i32, local_f64);\n+    println!(\"{}\", with_span!(span val));\n+\n+    if local_i32 > 0 {\n+        panic!(\"p1 {local_i32}\");\n+    }\n+    if local_i32 > 0 {\n+        panic!(\"p2 {local_i32}\");\n+    }\n+    if local_i32 > 0 {\n+        panic!(\"p3 {local_i32}\");\n+    }\n+    if local_i32 > 0 {\n+        panic!(\"p4 {local_i32}\");\n+    }\n+}\n+\n+fn main() {\n+    tester(42);\n+}\n+\n+fn _under_msrv() {\n+    #![clippy::msrv = \"1.57\"]\n+    let local_i32 = 1;\n+    println!(\"don't expand='{}'\", local_i32);\n+}\n+\n+fn _meets_msrv() {\n+    #![clippy::msrv = \"1.58\"]\n+    let local_i32 = 1;\n+    println!(\"expand='{local_i32}'\");\n+}"}, {"sha": "8e495ebd083a55e6eacae4ba91dbc7859c5d2ec6", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/uninlined_format_args.rs", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.rs?ref=7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "patch": "@@ -0,0 +1,182 @@\n+// aux-build:proc_macro_with_span.rs\n+// run-rustfix\n+#![feature(custom_inner_attributes)]\n+#![warn(clippy::uninlined_format_args)]\n+#![allow(named_arguments_used_positionally, unused_imports, unused_macros, unused_variables)]\n+#![allow(clippy::eq_op, clippy::format_in_format_args, clippy::print_literal)]\n+\n+extern crate proc_macro_with_span;\n+use proc_macro_with_span::with_span;\n+\n+macro_rules! no_param_str {\n+    () => {\n+        \"{}\"\n+    };\n+}\n+\n+macro_rules! my_println {\n+   ($($args:tt),*) => {{\n+        println!($($args),*)\n+    }};\n+}\n+\n+macro_rules! my_println_args {\n+    ($($args:tt),*) => {{\n+        println!(\"foo: {}\", format_args!($($args),*))\n+    }};\n+}\n+\n+fn tester(fn_arg: i32) {\n+    let local_i32 = 1;\n+    let local_f64 = 2.0;\n+    let local_opt: Option<i32> = Some(3);\n+    let width = 4;\n+    let prec = 5;\n+    let val = 6;\n+\n+    // make sure this file hasn't been corrupted with tabs converted to spaces\n+    // let _ = '\t';  // <- this is a single tab character\n+    let _: &[u8; 3] = b\"\t \t\"; // <- <tab><space><tab>\n+\n+    println!(\"val='{}'\", local_i32);\n+    println!(\"val='{   }'\", local_i32); // 3 spaces\n+    println!(\"val='{\t}'\", local_i32); // tab\n+    println!(\"val='{ \t}'\", local_i32); // space+tab\n+    println!(\"val='{\t }'\", local_i32); // tab+space\n+    println!(\n+        \"val='{\n+    }'\",\n+        local_i32\n+    );\n+    println!(\"{}\", local_i32);\n+    println!(\"{}\", fn_arg);\n+    println!(\"{:?}\", local_i32);\n+    println!(\"{:#?}\", local_i32);\n+    println!(\"{:4}\", local_i32);\n+    println!(\"{:04}\", local_i32);\n+    println!(\"{:<3}\", local_i32);\n+    println!(\"{:#010x}\", local_i32);\n+    println!(\"{:.1}\", local_f64);\n+    println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+    println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+    println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n+    println!(\"{} {}\", local_i32, local_f64);\n+    println!(\"{}, {}\", local_i32, local_opt.unwrap());\n+    println!(\"{}\", val);\n+    println!(\"{}\", v = val);\n+    println!(\"{} {1}\", local_i32, 42);\n+    println!(\"val='{\\t }'\", local_i32);\n+    println!(\"val='{\\n }'\", local_i32);\n+    println!(\"val='{local_i32}'\", local_i32 = local_i32);\n+    println!(\"val='{local_i32}'\", local_i32 = fn_arg);\n+    println!(\"{0}\", local_i32);\n+    println!(\"{0:?}\", local_i32);\n+    println!(\"{0:#?}\", local_i32);\n+    println!(\"{0:04}\", local_i32);\n+    println!(\"{0:<3}\", local_i32);\n+    println!(\"{0:#010x}\", local_i32);\n+    println!(\"{0:.1}\", local_f64);\n+    println!(\"{0} {0}\", local_i32);\n+    println!(\"{1} {} {0} {}\", local_i32, local_f64);\n+    println!(\"{0} {1}\", local_i32, local_f64);\n+    println!(\"{1} {0}\", local_i32, local_f64);\n+    println!(\"{1} {0} {1} {0}\", local_i32, local_f64);\n+    println!(\"{1} {0}\", \"str\", local_i32);\n+    println!(\"{v}\", v = local_i32);\n+    println!(\"{local_i32:0$}\", width);\n+    println!(\"{local_i32:w$}\", w = width);\n+    println!(\"{local_i32:.0$}\", prec);\n+    println!(\"{local_i32:.p$}\", p = prec);\n+    println!(\"{:0$}\", v = val);\n+    println!(\"{0:0$}\", v = val);\n+    println!(\"{:0$.0$}\", v = val);\n+    println!(\"{0:0$.0$}\", v = val);\n+    println!(\"{0:0$.v$}\", v = val);\n+    println!(\"{0:v$.0$}\", v = val);\n+    println!(\"{v:0$.0$}\", v = val);\n+    println!(\"{v:v$.0$}\", v = val);\n+    println!(\"{v:0$.v$}\", v = val);\n+    println!(\"{v:v$.v$}\", v = val);\n+    println!(\"{:0$}\", width);\n+    println!(\"{:1$}\", local_i32, width);\n+    println!(\"{:w$}\", w = width);\n+    println!(\"{:w$}\", local_i32, w = width);\n+    println!(\"{:.0$}\", prec);\n+    println!(\"{:.1$}\", local_i32, prec);\n+    println!(\"{:.p$}\", p = prec);\n+    println!(\"{:.p$}\", local_i32, p = prec);\n+    println!(\"{:0$.1$}\", width, prec);\n+    println!(\"{:0$.w$}\", width, w = prec);\n+    println!(\"{:1$.2$}\", local_f64, width, prec);\n+    println!(\"{:1$.2$} {0} {1} {2}\", local_f64, width, prec);\n+    println!(\n+        \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n+        local_i32, width, prec,\n+    );\n+    println!(\n+        \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$} {3}\",\n+        local_i32,\n+        width,\n+        prec,\n+        1 + 2\n+    );\n+    println!(\"Width = {}, value with width = {:0$}\", local_i32, local_f64);\n+    println!(\"{:w$.p$}\", local_i32, w = width, p = prec);\n+    println!(\"{:w$.p$}\", w = width, p = prec);\n+    println!(\"{}\", format!(\"{}\", local_i32));\n+    my_println!(\"{}\", local_i32);\n+    my_println_args!(\"{}\", local_i32);\n+\n+    // these should NOT be modified by the lint\n+    println!(concat!(\"nope \", \"{}\"), local_i32);\n+    println!(\"val='{local_i32}'\");\n+    println!(\"val='{local_i32 }'\");\n+    println!(\"val='{local_i32\t}'\"); // with tab\n+    println!(\"val='{local_i32\\n}'\");\n+    println!(\"{}\", usize::MAX);\n+    println!(\"{}\", local_opt.unwrap());\n+    println!(\n+        \"val='{local_i32\n+    }'\"\n+    );\n+    println!(no_param_str!(), local_i32);\n+\n+    println!(\n+        \"{}\",\n+        // comment with a comma , in it\n+        val,\n+    );\n+    println!(\"{}\", /* comment with a comma , in it */ val);\n+\n+    println!(with_span!(\"{0} {1}\" \"{1} {0}\"), local_i32, local_f64);\n+    println!(\"{}\", with_span!(span val));\n+\n+    if local_i32 > 0 {\n+        panic!(\"p1 {}\", local_i32);\n+    }\n+    if local_i32 > 0 {\n+        panic!(\"p2 {0}\", local_i32);\n+    }\n+    if local_i32 > 0 {\n+        panic!(\"p3 {local_i32}\", local_i32 = local_i32);\n+    }\n+    if local_i32 > 0 {\n+        panic!(\"p4 {local_i32}\");\n+    }\n+}\n+\n+fn main() {\n+    tester(42);\n+}\n+\n+fn _under_msrv() {\n+    #![clippy::msrv = \"1.57\"]\n+    let local_i32 = 1;\n+    println!(\"don't expand='{}'\", local_i32);\n+}\n+\n+fn _meets_msrv() {\n+    #![clippy::msrv = \"1.58\"]\n+    let local_i32 = 1;\n+    println!(\"expand='{}'\", local_i32);\n+}"}, {"sha": "1182d57ce9b7e066d0275e808d04d2364e08feaa", "filename": "tests/ui-toml/allow_mixed_uninlined_format_args/uninlined_format_args.stderr", "status": "added", "additions": 908, "deletions": 0, "changes": 908, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fallow_mixed_uninlined_format_args%2Funinlined_format_args.stderr?ref=7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "patch": "@@ -0,0 +1,908 @@\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:41:5\n+   |\n+LL |     println!(\"val='{}'\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::uninlined-format-args` implied by `-D warnings`\n+help: change this to\n+   |\n+LL -     println!(\"val='{}'\", local_i32);\n+LL +     println!(\"val='{local_i32}'\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:42:5\n+   |\n+LL |     println!(\"val='{   }'\", local_i32); // 3 spaces\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{   }'\", local_i32); // 3 spaces\n+LL +     println!(\"val='{local_i32}'\"); // 3 spaces\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:43:5\n+   |\n+LL |     println!(\"val='{    }'\", local_i32); // tab\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{    }'\", local_i32); // tab\n+LL +     println!(\"val='{local_i32}'\"); // tab\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:44:5\n+   |\n+LL |     println!(\"val='{     }'\", local_i32); // space+tab\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{     }'\", local_i32); // space+tab\n+LL +     println!(\"val='{local_i32}'\"); // space+tab\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:45:5\n+   |\n+LL |     println!(\"val='{     }'\", local_i32); // tab+space\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{     }'\", local_i32); // tab+space\n+LL +     println!(\"val='{local_i32}'\"); // tab+space\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:46:5\n+   |\n+LL | /     println!(\n+LL | |         \"val='{\n+LL | |     }'\",\n+LL | |         local_i32\n+LL | |     );\n+   | |_____^\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:51:5\n+   |\n+LL |     println!(\"{}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}\", local_i32);\n+LL +     println!(\"{local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:52:5\n+   |\n+LL |     println!(\"{}\", fn_arg);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}\", fn_arg);\n+LL +     println!(\"{fn_arg}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:53:5\n+   |\n+LL |     println!(\"{:?}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:?}\", local_i32);\n+LL +     println!(\"{local_i32:?}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:54:5\n+   |\n+LL |     println!(\"{:#?}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:#?}\", local_i32);\n+LL +     println!(\"{local_i32:#?}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:55:5\n+   |\n+LL |     println!(\"{:4}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:4}\", local_i32);\n+LL +     println!(\"{local_i32:4}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:56:5\n+   |\n+LL |     println!(\"{:04}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:04}\", local_i32);\n+LL +     println!(\"{local_i32:04}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:57:5\n+   |\n+LL |     println!(\"{:<3}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:<3}\", local_i32);\n+LL +     println!(\"{local_i32:<3}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:58:5\n+   |\n+LL |     println!(\"{:#010x}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:#010x}\", local_i32);\n+LL +     println!(\"{local_i32:#010x}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:59:5\n+   |\n+LL |     println!(\"{:.1}\", local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:.1}\", local_f64);\n+LL +     println!(\"{local_f64:.1}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:60:5\n+   |\n+LL |     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+LL +     println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:61:5\n+   |\n+LL |     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:62:5\n+   |\n+LL |     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n+LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:63:5\n+   |\n+LL |     println!(\"{} {}\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{} {}\", local_i32, local_f64);\n+LL +     println!(\"{local_i32} {local_f64}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:64:5\n+   |\n+LL |     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n+LL +     println!(\"{local_i32}, {}\", local_opt.unwrap());\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:65:5\n+   |\n+LL |     println!(\"{}\", val);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}\", val);\n+LL +     println!(\"{val}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:66:5\n+   |\n+LL |     println!(\"{}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}\", v = val);\n+LL +     println!(\"{val}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:68:5\n+   |\n+LL |     println!(\"val='{/t }'\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{/t }'\", local_i32);\n+LL +     println!(\"val='{local_i32}'\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:69:5\n+   |\n+LL |     println!(\"val='{/n }'\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{/n }'\", local_i32);\n+LL +     println!(\"val='{local_i32}'\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:70:5\n+   |\n+LL |     println!(\"val='{local_i32}'\", local_i32 = local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{local_i32}'\", local_i32 = local_i32);\n+LL +     println!(\"val='{local_i32}'\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:71:5\n+   |\n+LL |     println!(\"val='{local_i32}'\", local_i32 = fn_arg);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"val='{local_i32}'\", local_i32 = fn_arg);\n+LL +     println!(\"val='{fn_arg}'\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:72:5\n+   |\n+LL |     println!(\"{0}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0}\", local_i32);\n+LL +     println!(\"{local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:73:5\n+   |\n+LL |     println!(\"{0:?}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:?}\", local_i32);\n+LL +     println!(\"{local_i32:?}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:74:5\n+   |\n+LL |     println!(\"{0:#?}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:#?}\", local_i32);\n+LL +     println!(\"{local_i32:#?}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:75:5\n+   |\n+LL |     println!(\"{0:04}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:04}\", local_i32);\n+LL +     println!(\"{local_i32:04}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:76:5\n+   |\n+LL |     println!(\"{0:<3}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:<3}\", local_i32);\n+LL +     println!(\"{local_i32:<3}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:77:5\n+   |\n+LL |     println!(\"{0:#010x}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:#010x}\", local_i32);\n+LL +     println!(\"{local_i32:#010x}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:78:5\n+   |\n+LL |     println!(\"{0:.1}\", local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:.1}\", local_f64);\n+LL +     println!(\"{local_f64:.1}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:79:5\n+   |\n+LL |     println!(\"{0} {0}\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0} {0}\", local_i32);\n+LL +     println!(\"{local_i32} {local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:80:5\n+   |\n+LL |     println!(\"{1} {} {0} {}\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{1} {} {0} {}\", local_i32, local_f64);\n+LL +     println!(\"{local_f64} {local_i32} {local_i32} {local_f64}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:81:5\n+   |\n+LL |     println!(\"{0} {1}\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0} {1}\", local_i32, local_f64);\n+LL +     println!(\"{local_i32} {local_f64}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:82:5\n+   |\n+LL |     println!(\"{1} {0}\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{1} {0}\", local_i32, local_f64);\n+LL +     println!(\"{local_f64} {local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:83:5\n+   |\n+LL |     println!(\"{1} {0} {1} {0}\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{1} {0} {1} {0}\", local_i32, local_f64);\n+LL +     println!(\"{local_f64} {local_i32} {local_f64} {local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:85:5\n+   |\n+LL |     println!(\"{v}\", v = local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{v}\", v = local_i32);\n+LL +     println!(\"{local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:86:5\n+   |\n+LL |     println!(\"{local_i32:0$}\", width);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{local_i32:0$}\", width);\n+LL +     println!(\"{local_i32:width$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:87:5\n+   |\n+LL |     println!(\"{local_i32:w$}\", w = width);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{local_i32:w$}\", w = width);\n+LL +     println!(\"{local_i32:width$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:88:5\n+   |\n+LL |     println!(\"{local_i32:.0$}\", prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{local_i32:.0$}\", prec);\n+LL +     println!(\"{local_i32:.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:89:5\n+   |\n+LL |     println!(\"{local_i32:.p$}\", p = prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{local_i32:.p$}\", p = prec);\n+LL +     println!(\"{local_i32:.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:90:5\n+   |\n+LL |     println!(\"{:0$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:0$}\", v = val);\n+LL +     println!(\"{val:val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:91:5\n+   |\n+LL |     println!(\"{0:0$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:0$}\", v = val);\n+LL +     println!(\"{val:val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:92:5\n+   |\n+LL |     println!(\"{:0$.0$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:0$.0$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:93:5\n+   |\n+LL |     println!(\"{0:0$.0$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:0$.0$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:94:5\n+   |\n+LL |     println!(\"{0:0$.v$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:0$.v$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:95:5\n+   |\n+LL |     println!(\"{0:v$.0$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{0:v$.0$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:96:5\n+   |\n+LL |     println!(\"{v:0$.0$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{v:0$.0$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:97:5\n+   |\n+LL |     println!(\"{v:v$.0$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{v:v$.0$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:98:5\n+   |\n+LL |     println!(\"{v:0$.v$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{v:0$.v$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:99:5\n+   |\n+LL |     println!(\"{v:v$.v$}\", v = val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{v:v$.v$}\", v = val);\n+LL +     println!(\"{val:val$.val$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:100:5\n+   |\n+LL |     println!(\"{:0$}\", width);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:0$}\", width);\n+LL +     println!(\"{width:width$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:101:5\n+   |\n+LL |     println!(\"{:1$}\", local_i32, width);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:1$}\", local_i32, width);\n+LL +     println!(\"{local_i32:width$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:102:5\n+   |\n+LL |     println!(\"{:w$}\", w = width);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:w$}\", w = width);\n+LL +     println!(\"{width:width$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:103:5\n+   |\n+LL |     println!(\"{:w$}\", local_i32, w = width);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:w$}\", local_i32, w = width);\n+LL +     println!(\"{local_i32:width$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:104:5\n+   |\n+LL |     println!(\"{:.0$}\", prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:.0$}\", prec);\n+LL +     println!(\"{prec:.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:105:5\n+   |\n+LL |     println!(\"{:.1$}\", local_i32, prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:.1$}\", local_i32, prec);\n+LL +     println!(\"{local_i32:.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:106:5\n+   |\n+LL |     println!(\"{:.p$}\", p = prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:.p$}\", p = prec);\n+LL +     println!(\"{prec:.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:107:5\n+   |\n+LL |     println!(\"{:.p$}\", local_i32, p = prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:.p$}\", local_i32, p = prec);\n+LL +     println!(\"{local_i32:.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:108:5\n+   |\n+LL |     println!(\"{:0$.1$}\", width, prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:0$.1$}\", width, prec);\n+LL +     println!(\"{width:width$.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:109:5\n+   |\n+LL |     println!(\"{:0$.w$}\", width, w = prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:0$.w$}\", width, w = prec);\n+LL +     println!(\"{width:width$.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:110:5\n+   |\n+LL |     println!(\"{:1$.2$}\", local_f64, width, prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:1$.2$}\", local_f64, width, prec);\n+LL +     println!(\"{local_f64:width$.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:111:5\n+   |\n+LL |     println!(\"{:1$.2$} {0} {1} {2}\", local_f64, width, prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:1$.2$} {0} {1} {2}\", local_f64, width, prec);\n+LL +     println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:112:5\n+   |\n+LL | /     println!(\n+LL | |         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n+LL | |         local_i32, width, prec,\n+LL | |     );\n+   | |_____^\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:123:5\n+   |\n+LL |     println!(\"Width = {}, value with width = {:0$}\", local_i32, local_f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"Width = {}, value with width = {:0$}\", local_i32, local_f64);\n+LL +     println!(\"Width = {local_i32}, value with width = {local_f64:local_i32$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:124:5\n+   |\n+LL |     println!(\"{:w$.p$}\", local_i32, w = width, p = prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:w$.p$}\", local_i32, w = width, p = prec);\n+LL +     println!(\"{local_i32:width$.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:125:5\n+   |\n+LL |     println!(\"{:w$.p$}\", w = width, p = prec);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{:w$.p$}\", w = width, p = prec);\n+LL +     println!(\"{width:width$.prec$}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:126:20\n+   |\n+LL |     println!(\"{}\", format!(\"{}\", local_i32));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}\", format!(\"{}\", local_i32));\n+LL +     println!(\"{}\", format!(\"{local_i32}\"));\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:144:5\n+   |\n+LL | /     println!(\n+LL | |         \"{}\",\n+LL | |         // comment with a comma , in it\n+LL | |         val,\n+LL | |     );\n+   | |_____^\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:149:5\n+   |\n+LL |     println!(\"{}\", /* comment with a comma , in it */ val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}\", /* comment with a comma , in it */ val);\n+LL +     println!(\"{val}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:155:9\n+   |\n+LL |         panic!(\"p1 {}\", local_i32);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -         panic!(\"p1 {}\", local_i32);\n+LL +         panic!(\"p1 {local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:158:9\n+   |\n+LL |         panic!(\"p2 {0}\", local_i32);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -         panic!(\"p2 {0}\", local_i32);\n+LL +         panic!(\"p2 {local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:161:9\n+   |\n+LL |         panic!(\"p3 {local_i32}\", local_i32 = local_i32);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -         panic!(\"p3 {local_i32}\", local_i32 = local_i32);\n+LL +         panic!(\"p3 {local_i32}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:181:5\n+   |\n+LL |     println!(\"expand='{}'\", local_i32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"expand='{}'\", local_i32);\n+LL +     println!(\"expand='{local_i32}'\");\n+   |\n+\n+error: aborting due to 76 previous errors\n+"}, {"sha": "01a5e962c9491ea0d52cd89707f4c1d3c3ec4e74", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "patch": "@@ -1,6 +1,7 @@\n error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of\n            allow-dbg-in-tests\n            allow-expect-in-tests\n+           allow-mixed-uninlined-format-args\n            allow-print-in-tests\n            allow-unwrap-in-tests\n            allowed-scripts"}, {"sha": "9d08e80cf9a55717b7ccb7b3fd137d4a3b9b5178", "filename": "tests/ui/uninlined_format_args.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.fixed?ref=7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "patch": "@@ -54,11 +54,11 @@ fn tester(fn_arg: i32) {\n     println!(\"{local_i32:<3}\");\n     println!(\"{local_i32:#010x}\");\n     println!(\"{local_f64:.1}\");\n-    println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n-    println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n-    println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n+    println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n+    println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n+    println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n     println!(\"{local_i32} {local_f64}\");\n-    println!(\"{local_i32}, {}\", local_opt.unwrap());\n+    println!(\"{}, {}\", local_i32, local_opt.unwrap());\n     println!(\"{val}\");\n     println!(\"{val}\");\n     println!(\"{} {1}\", local_i32, 42);"}, {"sha": "1afdb4d0fbab4f7e1ae1aa92a8d06ace8ac2152b", "filename": "tests/ui/uninlined_format_args_panic.edition2018.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui%2Funinlined_format_args_panic.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui%2Funinlined_format_args_panic.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args_panic.edition2018.stderr?ref=7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "patch": "@@ -4,6 +4,7 @@ error: variables can be used directly in the `format!` string\n LL |     println!(\"val='{}'\", var);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: this lint can also fix mixed format arg inlining if `allow-mixed-uninlined-format-args = false` is set in the `clippy.toml` file\n    = note: `-D clippy::uninlined-format-args` implied by `-D warnings`\n help: change this to\n    |"}, {"sha": "a38ea4168bc9c09aa66e4028879baafde8a99726", "filename": "tests/ui/uninlined_format_args_panic.edition2021.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui%2Funinlined_format_args_panic.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4/tests%2Fui%2Funinlined_format_args_panic.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args_panic.edition2021.stderr?ref=7a2d92e1f29f774acb640b8e4262aed1b8f7f9a4", "patch": "@@ -4,6 +4,7 @@ error: variables can be used directly in the `format!` string\n LL |     println!(\"val='{}'\", var);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: this lint can also fix mixed format arg inlining if `allow-mixed-uninlined-format-args = false` is set in the `clippy.toml` file\n    = note: `-D clippy::uninlined-format-args` implied by `-D warnings`\n help: change this to\n    |"}]}