{"sha": "bd918776361ad94dcb483aef47b585d4c130001c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOTE4Nzc2MzYxYWQ5NGRjYjQ4M2FlZjQ3YjU4NWQ0YzEzMDAwMWM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-07-29T00:24:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-29T00:24:19Z"}, "message": "Rollup merge of #74814 - matklad:unwind-safe, r=KodrAus\n\nFix RefUnwindSafe & UnwinsSafe impls for lazy::SyncLazy\n\nI *think* we should implement those unconditionally with respect to `F`.\n\nThe user code can't observe the closure in any way, and we poison lazy if the closure itself panics.\n\nBut I've never fully wrapped my head around `UnwindSafe` traits, so :man_shrugging:", "tree": {"sha": "9cfafd52690f47dde36c15d50f18790992bc17e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cfafd52690f47dde36c15d50f18790992bc17e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd918776361ad94dcb483aef47b585d4c130001c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIMGzCRBK7hj4Ov3rIwAAdHIIABJOXFcAX0t0qP473xHN8faV\n2qngBIxm0lgHyGhEGtBMX+5nKQP98cVTvimy+zLS8bu9wc63v+aqJdeIfBj83DU0\nRkmwetqdFMwVuJXj+eOCs+IpqUkoL0QYMUNMthYadlIb7SH8fjcgQDuTwcPMGLrG\nFOFJe97HyEEnVrZjcRm6qa4I0Bt78yBj7HWN0S8EguwWrPv5V0NJ1m482pU0fWnL\nfndSuq/eD8Q7wCnVHD+ntAhg4Ptzp43xP7iK+QMcGjiLh/3R8XCQLg/lNAmF0Fr1\nDcZTHHmaj1sXlKpVe1Y1C7hkwRZAk2AnGEDlGbWppYoT1E/s2EcaTVhmsCeoYL0=\n=dXd3\n-----END PGP SIGNATURE-----\n", "payload": "tree 9cfafd52690f47dde36c15d50f18790992bc17e2\nparent 6968b75bd0524915d3fcf6b201b41827d4695603\nparent ed1439cea48144dcdfee84ccd8d7b0d0edb9f64e\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1595982259 +0900\ncommitter GitHub <noreply@github.com> 1595982259 +0900\n\nRollup merge of #74814 - matklad:unwind-safe, r=KodrAus\n\nFix RefUnwindSafe & UnwinsSafe impls for lazy::SyncLazy\n\nI *think* we should implement those unconditionally with respect to `F`.\n\nThe user code can't observe the closure in any way, and we poison lazy if the closure itself panics.\n\nBut I've never fully wrapped my head around `UnwindSafe` traits, so :man_shrugging:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd918776361ad94dcb483aef47b585d4c130001c", "html_url": "https://github.com/rust-lang/rust/commit/bd918776361ad94dcb483aef47b585d4c130001c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd918776361ad94dcb483aef47b585d4c130001c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6968b75bd0524915d3fcf6b201b41827d4695603", "url": "https://api.github.com/repos/rust-lang/rust/commits/6968b75bd0524915d3fcf6b201b41827d4695603", "html_url": "https://github.com/rust-lang/rust/commit/6968b75bd0524915d3fcf6b201b41827d4695603"}, {"sha": "ed1439cea48144dcdfee84ccd8d7b0d0edb9f64e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1439cea48144dcdfee84ccd8d7b0d0edb9f64e", "html_url": "https://github.com/rust-lang/rust/commit/ed1439cea48144dcdfee84ccd8d7b0d0edb9f64e"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "60eba96bcc0156f8f0357ce1dbb25fc304d5e95d", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd918776361ad94dcb483aef47b585d4c130001c/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd918776361ad94dcb483aef47b585d4c130001c/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=bd918776361ad94dcb483aef47b585d4c130001c", "patch": "@@ -451,7 +451,9 @@ unsafe impl<T, F: Send> Sync for SyncLazy<T, F> where SyncOnceCell<T>: Sync {}\n // auto-derived `Send` impl is OK.\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n-impl<T, F: RefUnwindSafe> RefUnwindSafe for SyncLazy<T, F> where SyncOnceCell<T>: RefUnwindSafe {}\n+impl<T, F: UnwindSafe> RefUnwindSafe for SyncLazy<T, F> where SyncOnceCell<T>: RefUnwindSafe {}\n+#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+impl<T, F: UnwindSafe> UnwindSafe for SyncLazy<T, F> where SyncOnceCell<T>: UnwindSafe {}\n \n impl<T, F> SyncLazy<T, F> {\n     /// Creates a new lazy value with the given initializing"}]}