{"sha": "8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhM2ExZmMxNDg5ZmIxZjMxM2ZkZDc1YWY0ZTczYTZhM2IyNzFjZTI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-15T21:51:43Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-20T22:08:18Z"}, "message": "convert ast::expr into a struct", "tree": {"sha": "3971b94fa8dea80685cce5c2894763b9f350a5d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3971b94fa8dea80685cce5c2894763b9f350a5d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "html_url": "https://github.com/rust-lang/rust/commit/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1280a64089358d679e010e48dcd18a3d6657d52e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1280a64089358d679e010e48dcd18a3d6657d52e", "html_url": "https://github.com/rust-lang/rust/commit/1280a64089358d679e010e48dcd18a3d6657d52e"}], "stats": {"total": 370, "additions": 222, "deletions": 148}, "files": [{"sha": "a30dade1f50e83c630feb41fc259fed905eddf82", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -76,7 +76,12 @@ fn find_rust_files(files: &mut ~[Path], path: &Path) {\n \n fn common_exprs() -> ~[ast::expr] {\n     fn dse(e: ast::expr_) -> ast::expr {\n-        { id: 0, callee_id: -1, node: e, span: ast_util::dummy_sp() }\n+        ast::expr {\n+            id: 0,\n+            callee_id: -1,\n+            node: e,\n+            span: ast_util::dummy_sp(),\n+        }\n     }\n \n     fn dsl(l: ast::lit_) -> ast::lit {"}, {"sha": "758c3199b827b8c75d224add76d565202cdad803", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 101, "deletions": 78, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -351,14 +351,19 @@ fn mk_test_desc_vec(cx: test_ctxt) -> @ast::expr {\n         descs.push(mk_test_desc_rec(cx, *test));\n     }\n \n-    let inner_expr = @{id: cx.sess.next_node_id(),\n-                       callee_id: cx.sess.next_node_id(),\n-                       node: ast::expr_vec(descs, ast::m_imm),\n-                       span: dummy_sp()};\n-    return @{id: cx.sess.next_node_id(),\n-          callee_id: cx.sess.next_node_id(),\n-          node: ast::expr_vstore(inner_expr, ast::expr_vstore_uniq),\n-          span: dummy_sp()};\n+    let inner_expr = @ast::expr {\n+        id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n+        node: ast::expr_vec(descs, ast::m_imm),\n+        span: dummy_sp(),\n+    };\n+\n+    @ast::expr {\n+        id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n+        node: ast::expr_vstore(inner_expr, ast::expr_vstore_uniq),\n+        span: dummy_sp(),\n+    }\n }\n \n fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n@@ -371,17 +376,20 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n     let name_lit: ast::lit =\n         nospan(ast::lit_str(@ast_util::path_name_i(\n             path, cx.sess.parse_sess.interner)));\n-    let name_expr_inner: @ast::expr =\n-        @{id: cx.sess.next_node_id(),\n-          callee_id: cx.sess.next_node_id(),\n-          node: ast::expr_lit(@name_lit),\n-          span: span};\n-    let name_expr = {id: cx.sess.next_node_id(),\n-                     callee_id: cx.sess.next_node_id(),\n-                     node: ast::expr_vstore(name_expr_inner,\n-                                            ast::expr_vstore_uniq),\n-                     span: dummy_sp()};\n \n+    let name_expr_inner = @ast::expr {\n+        id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n+        node: ast::expr_lit(@name_lit),\n+        span: span,\n+    };\n+\n+    let name_expr = ast::expr {\n+        id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n+        node: ast::expr_vstore(name_expr_inner, ast::expr_vstore_uniq),\n+        span: dummy_sp(),\n+    };\n \n     let name_field = nospan(ast::field_ {\n         mutbl: ast::m_imm,\n@@ -391,11 +399,12 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n \n     let fn_path = path_node_global(path);\n \n-    let fn_expr: ast::expr =\n-        {id: cx.sess.next_node_id(),\n-         callee_id: cx.sess.next_node_id(),\n-         node: ast::expr_path(fn_path),\n-         span: span};\n+    let fn_expr = ast::expr {\n+        id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n+        node: ast::expr_path(fn_path),\n+        span: span,\n+    };\n \n     let fn_wrapper_expr = mk_test_wrapper(cx, fn_expr, span);\n \n@@ -407,11 +416,12 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n \n     let ignore_lit: ast::lit = nospan(ast::lit_bool(test.ignore));\n \n-    let ignore_expr: ast::expr =\n-        {id: cx.sess.next_node_id(),\n-         callee_id: cx.sess.next_node_id(),\n-         node: ast::expr_lit(@ignore_lit),\n-         span: span};\n+    let ignore_expr = ast::expr {\n+        id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n+        node: ast::expr_lit(@ignore_lit),\n+        span: span,\n+    };\n \n     let ignore_field = nospan(ast::field_ {\n         mutbl: ast::m_imm,\n@@ -421,11 +431,12 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n \n     let fail_lit: ast::lit = nospan(ast::lit_bool(test.should_fail));\n \n-    let fail_expr: ast::expr =\n-        {id: cx.sess.next_node_id(),\n-         callee_id: cx.sess.next_node_id(),\n-         node: ast::expr_lit(@fail_lit),\n-         span: span};\n+    let fail_expr = ast::expr {\n+        id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n+        node: ast::expr_lit(@fail_lit),\n+        span: span,\n+    };\n \n     let fail_field = nospan(ast::field_ {\n         mutbl: ast::m_imm,\n@@ -437,14 +448,19 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n         mk_path(cx, ~[cx.sess.ident_of(~\"test\"),\n                       cx.sess.ident_of(~\"TestDesc\")]);\n \n-    let desc_rec_: ast::expr_ =\n-        ast::expr_struct(\n-            test_desc_path,\n-            ~[name_field, fn_field, ignore_field, fail_field],\n-            option::None);\n-    let desc_rec: ast::expr =\n-        {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n-         node: desc_rec_, span: span};\n+    let desc_rec_ = ast::expr_struct(\n+        test_desc_path,\n+        ~[name_field, fn_field, ignore_field, fail_field],\n+        option::None\n+    );\n+\n+    let desc_rec = ast::expr {\n+        id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n+        node: desc_rec_,\n+        span: span,\n+    };\n+\n     return @desc_rec;\n }\n \n@@ -454,11 +470,11 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n fn mk_test_wrapper(cx: test_ctxt,\n                    +fn_path_expr: ast::expr,\n                    span: span) -> @ast::expr {\n-    let call_expr: ast::expr = {\n+    let call_expr = ast::expr {\n         id: cx.sess.next_node_id(),\n         callee_id: cx.sess.next_node_id(),\n         node: ast::expr_call(@fn_path_expr, ~[], false),\n-        span: span\n+        span: span,\n     };\n \n     let call_stmt: ast::stmt = nospan(\n@@ -478,11 +494,10 @@ fn mk_test_wrapper(cx: test_ctxt,\n         rules: ast::default_blk\n     });\n \n-    let wrapper_expr: ast::expr = {\n+    let wrapper_expr = ast::expr  {\n         id: cx.sess.next_node_id(),\n         callee_id: cx.sess.next_node_id(),\n-        node: ast::expr_fn(ast::ProtoBare, wrapper_decl,\n-                           wrapper_body, @~[]),\n+        node: ast::expr_fn(ast::ProtoBare, wrapper_decl, wrapper_body, @~[]),\n         span: span\n     };\n \n@@ -525,51 +540,59 @@ fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n         cx.sess.ident_of(~\"args\")\n     ]);\n \n-    let args_path_expr_: ast::expr_ = ast::expr_path(args_path);\n-\n-    let args_path_expr: ast::expr =\n-        {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n-         node: args_path_expr_, span: dummy_sp()};\n-\n-    let args_call_expr_ = ast::expr_call(@args_path_expr, ~[], false);\n+    let args_path_expr = ast::expr {\n+        id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n+        node: ast::expr_path(args_path),\n+        span: dummy_sp(),\n+    };\n \n-    let args_call_expr: ast::expr =\n-        {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n-         node: args_call_expr_, span: dummy_sp()};\n+    let args_call_expr = ast::expr {\n+        id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n+        node: ast::expr_call(@args_path_expr, ~[], false),\n+        span: dummy_sp(),\n+    };\n \n     // Call __test::test to generate the vector of test_descs\n     let test_path = path_node(~[cx.sess.ident_of(~\"tests\")]);\n \n-    let test_path_expr_: ast::expr_ = ast::expr_path(test_path);\n-\n-    let test_path_expr: ast::expr =\n-        {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n-         node: test_path_expr_, span: dummy_sp()};\n-\n-    let test_call_expr_ = ast::expr_call(@test_path_expr, ~[], false);\n+    let test_path_expr = ast::expr {\n+        id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n+        node: ast::expr_path(test_path),\n+        span: dummy_sp(),\n+    };\n \n-    let test_call_expr: ast::expr =\n-        {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n-         node: test_call_expr_, span: dummy_sp()};\n+    let test_call_expr = ast::expr {\n+        id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n+        node: ast::expr_call(@test_path_expr, ~[], false),\n+        span: dummy_sp(),\n+    };\n \n     // Call std::test::test_main\n     let test_main_path =\n         mk_path(cx, ~[cx.sess.ident_of(~\"test\"),\n                       cx.sess.ident_of(~\"test_main\")]);\n \n-    let test_main_path_expr_: ast::expr_ = ast::expr_path(test_main_path);\n-\n-    let test_main_path_expr: ast::expr =\n-        {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n-         node: test_main_path_expr_, span: dummy_sp()};\n-\n-    let test_main_call_expr_: ast::expr_ =\n-        ast::expr_call(@test_main_path_expr,\n-                       ~[@args_call_expr, @test_call_expr], false);\n+    let test_main_path_expr = ast::expr {\n+        id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n+        node: ast::expr_path(test_main_path),\n+        span: dummy_sp(),\n+    };\n \n-    let test_main_call_expr: ast::expr =\n-        {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n-         node: test_main_call_expr_, span: dummy_sp()};\n+    let test_main_call_expr = ast::expr {\n+        id: cx.sess.next_node_id(),\n+        callee_id: cx.sess.next_node_id(),\n+        node: ast::expr_call(\n+            @test_main_path_expr,\n+            ~[@args_call_expr, @test_call_expr],\n+            false\n+        ),\n+        span: dummy_sp(),\n+    };\n \n     return @test_main_call_expr;\n }"}, {"sha": "c0a4a4ea48ca682ba9d440d51b2f2cf1cc059cf1", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -57,10 +57,11 @@ fn check_item(sess: Session, ast_map: ast_map::map,\n fn check_pat(p: @pat, &&_is_const: bool, v: visit::vt<bool>) {\n     fn is_str(e: @expr) -> bool {\n         match e.node {\n-          expr_vstore(@{node: expr_lit(@spanned { node: lit_str(_),\n-                                                  _}), _},\n-                      expr_vstore_uniq) => true,\n-          _ => false\n+            expr_vstore(\n+                @expr { node: expr_lit(@spanned { node: lit_str(_), _}), _ },\n+                expr_vstore_uniq\n+            ) => true,\n+            _ => false\n         }\n     }\n     match p.node {"}, {"sha": "8e7e43daa8f0b24e37a35db6ff08589d000b1361", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -38,7 +38,7 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n               expr_fn_block(_, ref b, _) => {\n                 (v.visit_block)((*b), {in_loop: false, can_ret: false}, v);\n               }\n-              expr_loop_body(@{node: expr_fn_block(_, ref b, _), _}) => {\n+              expr_loop_body(@expr {node: expr_fn_block(_, ref b, _), _}) => {\n                 let proto = ty::ty_fn_proto(ty::expr_ty(tcx, e));\n                 let blk = (proto == ProtoBorrowed);\n                 (v.visit_block)((*b), {in_loop: true, can_ret: blk}, v);"}, {"sha": "aff19a5c37d1175827b432d7ef541de4fcafe00c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -693,7 +693,7 @@ fn is_refutable(cx: @MatchCheckCtxt, pat: &pat) -> bool {\n         is_refutable(cx, sub)\n       }\n       pat_wild | pat_ident(_, _, None) => { false }\n-      pat_lit(@{node: expr_lit(@spanned { node: lit_nil, _}), _}) => {\n+      pat_lit(@expr {node: expr_lit(@spanned { node: lit_nil, _}), _}) => {\n         // \"()\"\n         false\n       }"}, {"sha": "b2fc59a7f443a90b9faded5faf6c87bb27844040", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -799,10 +799,10 @@ fn check_item_path_statement(cx: ty::ctxt, it: @ast::item) {\n         visit::mk_simple_visitor(@visit::SimpleVisitor {\n             visit_stmt: |s: @ast::stmt| {\n                 match s.node {\n-                    ast::stmt_semi(@{id: id,\n-                                     callee_id: _,\n-                                     node: ast::expr_path(_),\n-                                     span: _}, _) => {\n+                    ast::stmt_semi(\n+                        @ast::expr { id: id, node: ast::expr_path(_), _ },\n+                        _\n+                    ) => {\n                         cx.sess.span_lint(\n                             path_statement, id, it.id,\n                             s.span,"}, {"sha": "fc5c329274eefaf9b07aa0d59b979c785c5c0375", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -421,7 +421,7 @@ fn trans_call_inner(\n         let ret_in_loop = match /*bad*/copy args {\n           ArgExprs(args) => {\n             args.len() > 0u && match vec::last(args).node {\n-              ast::expr_loop_body(@{\n+              ast::expr_loop_body(@ast::expr {\n                 node: ast::expr_fn_block(_, ref body, _),\n                 _\n               }) =>  body_contains_ret((*body)),\n@@ -628,7 +628,7 @@ fn trans_arg_expr(bcx: block,\n             match arg_expr.node {\n                 ast::expr_loop_body(\n                     // XXX: Bad copy.\n-                    blk@@{\n+                    blk@@ast::expr {\n                         node: ast::expr_fn_block(copy decl, ref body, cap),\n                         _\n                     }) =>"}, {"sha": "4b3962efc7f79761fe89dbb6eadc55f6759ae344", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -696,8 +696,14 @@ impl blk_check_mode : cmp::Eq {\n \n #[auto_encode]\n #[auto_decode]\n-type expr = {id: node_id, callee_id: node_id, node: expr_, span: span};\n-// Extra node ID is only used for index, assign_op, unary, binary, method call\n+struct expr {\n+    id: node_id,\n+    // Extra node ID is only used for index, assign_op, unary, binary, method\n+    // call\n+    callee_id: node_id,\n+    node: expr_,\n+    span: span,\n+}\n \n #[auto_encode]\n #[auto_decode]"}, {"sha": "625c04a64634c2d4b27f9cb0226e5d62f0311354", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -263,8 +263,12 @@ priv impl ext_ctxt {\n     }\n \n     fn expr(span: span, node: ast::expr_) -> @ast::expr {\n-        @{id: self.next_id(), callee_id: self.next_id(),\n-          node: node, span: span}\n+        @ast::expr {\n+            id: self.next_id(),\n+            callee_id: self.next_id(),\n+            node: node,\n+            span: span,\n+        }\n     }\n \n     fn path(span: span, strs: ~[ast::ident]) -> @ast::path {"}, {"sha": "a4184bdfda719c658057d415b327a636deb7d48c", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -19,10 +19,13 @@ use ext::build;\n use core::dvec;\n use core::option;\n \n-fn mk_expr(cx: ext_ctxt, sp: codemap::span, expr: ast::expr_) ->\n+fn mk_expr(cx: ext_ctxt, sp: codemap::span, expr: ast::expr_) -> @ast::expr {\n     @ast::expr {\n-    return @{id: cx.next_id(), callee_id: cx.next_id(),\n-          node: expr, span: sp};\n+        id: cx.next_id(),\n+        callee_id: cx.next_id(),\n+        node: expr,\n+        span: sp,\n+    }\n }\n \n fn mk_lit(cx: ext_ctxt, sp: span, lit: ast::lit_) -> @ast::expr {"}, {"sha": "8e94ed1902149dcff88f118fe40ecefce557357f", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -34,13 +34,19 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n     }\n     let res = cx.parse_sess().interner.intern(@res_str);\n \n-    let e = @{id: cx.next_id(),\n-              callee_id: cx.next_id(),\n-              node: ast::expr_path(@ast::path { span: sp,\n-                                                global: false,\n-                                                idents: ~[res],\n-                                                rp: None,\n-                                                types: ~[] }),\n-              span: sp};\n+    let e = @ast::expr {\n+        id: cx.next_id(),\n+        callee_id: cx.next_id(),\n+        node: ast::expr_path(\n+            @ast::path {\n+                 span: sp,\n+                 global: false,\n+                 idents: ~[res],\n+                 rp: None,\n+                 types: ~[],\n+            }\n+        ),\n+        span: sp,\n+    };\n     mr_expr(e)\n }"}, {"sha": "5308f4c348609487ac3979f720b7e67118f47861", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -25,6 +25,10 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, tt: ~[ast::token_tree])\n         print::pprust::tt_to_str(ast::tt_delim(tt),cx.parse_sess().interner));\n \n     //trivial expression\n-    return mr_expr(@{id: cx.next_id(), callee_id: cx.next_id(),\n-                     node: ast::expr_rec(~[], option::None), span: sp});\n+    mr_expr(@ast::expr {\n+        id: cx.next_id(),\n+        callee_id: cx.next_id(),\n+        node: ast::expr_rec(~[], option::None),\n+        span: sp,\n+    })\n }"}, {"sha": "8472e61c1966f3bfc3a3f05afccbf97e8a93a173", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -122,17 +122,21 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n     }\n \n     fn block_expr(b: ast::blk) -> @ast::expr {\n-        @{id: self.next_id(),\n-          callee_id: self.next_id(),\n-          node: ast::expr_block(b),\n-          span: dummy_sp()}\n+        @expr {\n+            id: self.next_id(),\n+            callee_id: self.next_id(),\n+            node: ast::expr_block(b),\n+            span: dummy_sp(),\n+        }\n     }\n \n     fn move_expr(e: @ast::expr) -> @ast::expr {\n-        @{id: self.next_id(),\n-          callee_id: self.next_id(),\n-          node: ast::expr_unary_move(e),\n-          span: e.span}\n+        @expr {\n+            id: self.next_id(),\n+            callee_id: self.next_id(),\n+            node: ast::expr_unary_move(e),\n+            span: e.span,\n+        }\n     }\n \n     fn stmt_expr(e: @ast::expr) -> @ast::stmt {\n@@ -153,10 +157,12 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n     }\n \n     fn rec(+fields: ~[ast::field]) -> @ast::expr {\n-        @{id: self.next_id(),\n-          callee_id: self.next_id(),\n-          node: ast::expr_rec(fields, None),\n-          span: dummy_sp()}\n+        @expr {\n+            id: self.next_id(),\n+            callee_id: self.next_id(),\n+            node: ast::expr_rec(fields, None),\n+            span: dummy_sp(),\n+        }\n     }\n \n     fn ty_field_imm(name: ident, ty: @ast::Ty) -> ast::ty_field {"}, {"sha": "60430b51f0aab53576916e781d386359def1c30d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -761,10 +761,12 @@ impl ast_fold_fns: ast_fold {\n     }\n     fn fold_expr(&&x: @expr) -> @expr {\n         let (n, s) = (self.fold_expr)(x.node, x.span, self as ast_fold);\n-        return @{id: (self.new_id)(x.id),\n-              callee_id: (self.new_id)(x.callee_id),\n-              node: n,\n-              span: (self.new_span)(s)};\n+        @expr {\n+            id: (self.new_id)(x.id),\n+            callee_id: (self.new_id)(x.callee_id),\n+            node: n,\n+            span: (self.new_span)(s),\n+        }\n     }\n     fn fold_ty(&&x: @Ty) -> @Ty {\n         let (n, s) = (self.fold_ty)(x.node, x.span, self as ast_fold);"}, {"sha": "486ec56523b7fa44968ab6586f41982a516e0b87", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 38, "deletions": 24, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8a3a1fc1489fb1f313fdd75af4e73a6a3b271ce2", "patch": "@@ -888,24 +888,34 @@ impl Parser {\n     }\n \n     fn mk_expr(+lo: BytePos, +hi: BytePos, +node: expr_) -> @expr {\n-        return @{id: self.get_id(), callee_id: self.get_id(),\n-              node: node, span: mk_sp(lo, hi)};\n+        @expr {\n+            id: self.get_id(),\n+            callee_id: self.get_id(),\n+            node: node,\n+            span: mk_sp(lo, hi),\n+        }\n     }\n \n     fn mk_mac_expr(+lo: BytePos, +hi: BytePos, m: mac_) -> @expr {\n-        return @{id: self.get_id(),\n-              callee_id: self.get_id(),\n-              node: expr_mac(spanned {node: m, span: mk_sp(lo, hi)}),\n-              span: mk_sp(lo, hi)};\n+        @expr {\n+            id: self.get_id(),\n+            callee_id: self.get_id(),\n+            node: expr_mac(spanned {node: m, span: mk_sp(lo, hi)}),\n+            span: mk_sp(lo, hi),\n+        }\n     }\n \n     fn mk_lit_u32(i: u32) -> @expr {\n         let span = self.span;\n         let lv_lit = @spanned { node: lit_uint(i as u64, ty_u32),\n                                 span: span };\n \n-        return @{id: self.get_id(), callee_id: self.get_id(),\n-              node: expr_lit(lv_lit), span: span};\n+        @expr {\n+            id: self.get_id(),\n+            callee_id: self.get_id(),\n+            node: expr_lit(lv_lit),\n+            span: span,\n+        }\n     }\n \n     fn parse_bottom_expr() -> @expr {\n@@ -1625,23 +1635,21 @@ impl Parser {\n             let last_arg = self.mk_expr(block.span.lo, block.span.hi,\n                                     ctor(block));\n             let args = vec::append(args, ~[last_arg]);\n-            @{node: expr_call(f, args, true),\n-              .. *e}\n+            @expr {node: expr_call(f, args, true), .. *e}\n           }\n           expr_method_call(f, i, tps, args, false) => {\n             let block = self.parse_lambda_block_expr();\n             let last_arg = self.mk_expr(block.span.lo, block.span.hi,\n                                     ctor(block));\n             let args = vec::append(args, ~[last_arg]);\n-            @{node: expr_method_call(f, i, tps, args, true),\n-              .. *e}\n+            @expr {node: expr_method_call(f, i, tps, args, true), .. *e}\n           }\n           expr_field(f, i, tps) => {\n             let block = self.parse_lambda_block_expr();\n             let last_arg = self.mk_expr(block.span.lo, block.span.hi,\n                                     ctor(block));\n-            @{node: expr_method_call(f, i, tps, ~[last_arg], true),\n-              .. *e}\n+            @expr {node: expr_method_call(f, i, tps, ~[last_arg], true),\n+                   .. *e}\n           }\n           expr_path(*) | expr_call(*) | expr_method_call(*) |\n           expr_paren(*) => {\n@@ -1916,12 +1924,15 @@ impl Parser {\n             hi = sub.span.hi;\n             // HACK: parse @\"...\" as a literal of a vstore @str\n             pat = match sub.node {\n-              pat_lit(e@@{\n+              pat_lit(e@@expr {\n                 node: expr_lit(@spanned {node: lit_str(_), span: _}), _\n               }) => {\n-                let vst = @{id: self.get_id(), callee_id: self.get_id(),\n-                            node: expr_vstore(e, expr_vstore_box),\n-                            span: mk_sp(lo, hi)};\n+                let vst = @expr {\n+                    id: self.get_id(),\n+                    callee_id: self.get_id(),\n+                    node: expr_vstore(e, expr_vstore_box),\n+                    span: mk_sp(lo, hi),\n+                };\n                 pat_lit(vst)\n               }\n               _ => pat_box(sub)\n@@ -1933,12 +1944,15 @@ impl Parser {\n             hi = sub.span.hi;\n             // HACK: parse ~\"...\" as a literal of a vstore ~str\n             pat = match sub.node {\n-              pat_lit(e@@{\n+              pat_lit(e@@expr {\n                 node: expr_lit(@spanned {node: lit_str(_), span: _}), _\n               }) => {\n-                let vst = @{id: self.get_id(), callee_id: self.get_id(),\n-                            node: expr_vstore(e, expr_vstore_uniq),\n-                            span: mk_sp(lo, hi)};\n+                let vst = @expr {\n+                    id: self.get_id(),\n+                    callee_id: self.get_id(),\n+                    node: expr_vstore(e, expr_vstore_uniq),\n+                    span: mk_sp(lo, hi),\n+                };\n                 pat_lit(vst)\n               }\n               _ => pat_uniq(sub)\n@@ -1952,10 +1966,10 @@ impl Parser {\n               hi = sub.span.hi;\n               // HACK: parse &\"...\" as a literal of a borrowed str\n               pat = match sub.node {\n-                  pat_lit(e@@{\n+                  pat_lit(e@@expr {\n                       node: expr_lit(@spanned {node: lit_str(_), span: _}), _\n                   }) => {\n-                      let vst = @{\n+                      let vst = @expr {\n                           id: self.get_id(),\n                           callee_id: self.get_id(),\n                           node: expr_vstore(e, expr_vstore_slice),"}]}