{"sha": "9577734ff360235894db2904503a4d515dc89a29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1Nzc3MzRmZjM2MDIzNTg5NGRiMjkwNDUwM2E0ZDUxNWRjODlhMjk=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-18T22:24:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-18T22:24:37Z"}, "message": "Rollup merge of #55862 - zackmdavis:but_will_they_come_when_you_call_them, r=estebank\n\nin which the E0618 \"expected function\" diagnostic gets a makeover\n\nA woman of wisdom once told me, \"Better late than never.\" (Can't reopen the previously-closed pull request from six months ago [due to GitHub limitations](https://github.com/rust-lang/rust/pull/51098#issuecomment-437647157).)\n\nNow the main span focuses on the erroneous not-a-function callee, while showing the entire call expression is relegated to a secondary span. In the case where the erroneous callee is itself a call, we\npoint out the definition, and, if the call expression spans multiple lines, tentatively suggest a semicolon (because we suspect that the \"outer\" call is actually supposed to be a tuple).\n\n![not_a_fn_1](https://user-images.githubusercontent.com/1076988/48309935-96755000-e538-11e8-9390-02a048abb0c2.png)\n\n![not_a_fn_2](https://user-images.githubusercontent.com/1076988/48309936-98d7aa00-e538-11e8-8b9b-257bc77d6261.png)\n\nThe new `bug!` assertion is, in fact, safe (`confirm_builtin_call` is only called by `check_call`, which is only called with a first arg of kind `ExprKind::Call` in `check_expr_kind`).\n\nResolves #51055.\n\nr? @estebank", "tree": {"sha": "da0064e79d38af69284bca3e6847db2be9ad3903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da0064e79d38af69284bca3e6847db2be9ad3903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9577734ff360235894db2904503a4d515dc89a29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb8ealCRBK7hj4Ov3rIwAAdHIIAFQlE7WmSV6rslTbQCDC9S9g\nahteggzf81j6T7BqN+d2auUZ99YZAs/9qIKriqq7tjgI5eW6ay9Tvw3qoGW3px9y\nmF8vMuyru7UiecYX0hoKtOHH1BORdjsVzfPFmxVReUXFNtiRTkMtSnDp+RLo3nqQ\nSeeH0FyKEWI5QPmgPQ16sXwZFMMSmQDbcqSPJCFHcOTivFRWf9BaS2hWLnrfPVtl\njwfJBooAa0GpcrFkFzYAlvf+b4eoXJdfFG/5DVqPtNcDu4uHm5CA4b5OOa0rcUR0\nYuwkm6ZPbo7b3GC/TjuC7f48x0AK9AiKEyoeMEO2p6CRpfU7R8pzslDxF9BzFCg=\n=s/tv\n-----END PGP SIGNATURE-----\n", "payload": "tree da0064e79d38af69284bca3e6847db2be9ad3903\nparent 71309479185827af1451dab8330a4475fe441e86\nparent f3e9b1a703203be4f375dc5fa3950b642a156ec7\nauthor Pietro Albini <pietro@pietroalbini.org> 1542579877 +0100\ncommitter GitHub <noreply@github.com> 1542579877 +0100\n\nRollup merge of #55862 - zackmdavis:but_will_they_come_when_you_call_them, r=estebank\n\nin which the E0618 \"expected function\" diagnostic gets a makeover\n\nA woman of wisdom once told me, \"Better late than never.\" (Can't reopen the previously-closed pull request from six months ago [due to GitHub limitations](https://github.com/rust-lang/rust/pull/51098#issuecomment-437647157).)\n\nNow the main span focuses on the erroneous not-a-function callee, while showing the entire call expression is relegated to a secondary span. In the case where the erroneous callee is itself a call, we\npoint out the definition, and, if the call expression spans multiple lines, tentatively suggest a semicolon (because we suspect that the \"outer\" call is actually supposed to be a tuple).\n\n![not_a_fn_1](https://user-images.githubusercontent.com/1076988/48309935-96755000-e538-11e8-9390-02a048abb0c2.png)\n\n![not_a_fn_2](https://user-images.githubusercontent.com/1076988/48309936-98d7aa00-e538-11e8-8b9b-257bc77d6261.png)\n\nThe new `bug!` assertion is, in fact, safe (`confirm_builtin_call` is only called by `check_call`, which is only called with a first arg of kind `ExprKind::Call` in `check_expr_kind`).\n\nResolves #51055.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9577734ff360235894db2904503a4d515dc89a29", "html_url": "https://github.com/rust-lang/rust/commit/9577734ff360235894db2904503a4d515dc89a29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9577734ff360235894db2904503a4d515dc89a29/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71309479185827af1451dab8330a4475fe441e86", "url": "https://api.github.com/repos/rust-lang/rust/commits/71309479185827af1451dab8330a4475fe441e86", "html_url": "https://github.com/rust-lang/rust/commit/71309479185827af1451dab8330a4475fe441e86"}, {"sha": "f3e9b1a703203be4f375dc5fa3950b642a156ec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e9b1a703203be4f375dc5fa3950b642a156ec7", "html_url": "https://github.com/rust-lang/rust/commit/f3e9b1a703203be4f375dc5fa3950b642a156ec7"}], "stats": {"total": 220, "additions": 160, "deletions": 60}, "files": [{"sha": "7a71cf57a2f2784f3184feee8bdfaaed90d69441", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 63, "deletions": 32, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -219,35 +219,62 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n \n-                let mut err = type_error_struct!(\n-                    self.tcx.sess,\n-                    call_expr.span,\n-                    callee_ty,\n-                    E0618,\n-                    \"expected function, found {}\",\n-                    match unit_variant {\n-                        Some(ref path) => format!(\"enum variant `{}`\", path),\n-                        None => format!(\"`{}`\", callee_ty),\n-                    });\n-\n-                err.span_label(call_expr.span, \"not a function\");\n+                if let hir::ExprKind::Call(ref callee, _) = call_expr.node {\n+                    let mut err = type_error_struct!(\n+                        self.tcx.sess,\n+                        callee.span,\n+                        callee_ty,\n+                        E0618,\n+                        \"expected function, found {}\",\n+                        match unit_variant {\n+                            Some(ref path) => format!(\"enum variant `{}`\", path),\n+                            None => format!(\"`{}`\", callee_ty),\n+                        });\n \n-                if let Some(ref path) = unit_variant {\n-                    err.span_suggestion_with_applicability(\n-                        call_expr.span,\n-                        &format!(\"`{}` is a unit variant, you need to write it \\\n-                                  without the parenthesis\", path),\n-                        path.to_string(),\n-                        Applicability::MachineApplicable\n-                    );\n-                }\n+                    if let Some(ref path) = unit_variant {\n+                        err.span_suggestion_with_applicability(\n+                            call_expr.span,\n+                            &format!(\"`{}` is a unit variant, you need to write it \\\n+                                      without the parenthesis\", path),\n+                            path.to_string(),\n+                            Applicability::MachineApplicable\n+                        );\n+                    }\n \n-                if let hir::ExprKind::Call(ref expr, _) = call_expr.node {\n-                    let def = if let hir::ExprKind::Path(ref qpath) = expr.node {\n-                        self.tables.borrow().qpath_def(qpath, expr.hir_id)\n-                    } else {\n-                        Def::Err\n+                    let mut inner_callee_path = None;\n+                    let def = match callee.node {\n+                        hir::ExprKind::Path(ref qpath) => {\n+                            self.tables.borrow().qpath_def(qpath, callee.hir_id)\n+                        },\n+                        hir::ExprKind::Call(ref inner_callee, _) => {\n+                            // If the call spans more than one line and the callee kind is\n+                            // itself another `ExprCall`, that's a clue that we might just be\n+                            // missing a semicolon (Issue #51055)\n+                            let call_is_multiline = self.tcx.sess.source_map()\n+                                .is_multiline(call_expr.span);\n+                            if call_is_multiline {\n+                                let span = self.tcx.sess.source_map().next_point(callee.span);\n+                                err.span_suggestion_with_applicability(\n+                                    span,\n+                                    \"try adding a semicolon\",\n+                                    \";\".to_owned(),\n+                                    Applicability::MaybeIncorrect\n+                                );\n+                            }\n+                            if let hir::ExprKind::Path(ref inner_qpath) = inner_callee.node {\n+                                inner_callee_path = Some(inner_qpath);\n+                                self.tables.borrow().qpath_def(inner_qpath, inner_callee.hir_id)\n+                            } else {\n+                                Def::Err\n+                            }\n+                        },\n+                        _ => {\n+                            Def::Err\n+                        }\n                     };\n+\n+                    err.span_label(call_expr.span, \"call expression requires function\");\n+\n                     let def_span = match def {\n                         Def::Err => None,\n                         Def::Local(id) | Def::Upvar(id, ..) => {\n@@ -256,16 +283,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         _ => self.tcx.hir.span_if_local(def.def_id())\n                     };\n                     if let Some(span) = def_span {\n-                        let name = match unit_variant {\n-                            Some(path) => path,\n-                            None => callee_ty.to_string(),\n+                        let label = match (unit_variant, inner_callee_path) {\n+                            (Some(path), _) => format!(\"`{}` defined here\", path),\n+                            (_, Some(hir::QPath::Resolved(_, path))) => format!(\n+                                \"`{}` defined here returns `{}`\", path, callee_ty.to_string()\n+                            ),\n+                            _ => format!(\"`{}` defined here\", callee_ty.to_string()),\n                         };\n-                        err.span_label(span, format!(\"`{}` defined here\", name));\n+                        err.span_label(span, label);\n                     }\n+                    err.emit();\n+                } else {\n+                    bug!(\"call_expr.node should be an ExprKind::Call, got {:?}\", call_expr.node);\n                 }\n \n-                err.emit();\n-\n                 // This is the \"default\" function signature, used in case of error.\n                 // In that case, we check each argument against \"error\" in order to\n                 // set up all the node type bindings."}, {"sha": "194cfab8527c014a2a08d212364d6449f92d670e", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -12,8 +12,16 @@ LL |     |y| x + y\n error[E0618]: expected function, found `()`\n   --> $DIR/issue-20862.rs:17:13\n    |\n-LL |     let x = foo(5)(2);\n-   |             ^^^^^^^^^ not a function\n+LL | / fn foo(x: i32) {\n+LL | |     |y| x + y\n+LL | | //~^ ERROR: mismatched types\n+LL | | }\n+   | |_- `foo` defined here returns `()`\n+...\n+LL |       let x = foo(5)(2);\n+   |               ^^^^^^---\n+   |               |\n+   |               call expression requires function\n \n error: aborting due to 2 previous errors\n "}, {"sha": "360e0c6f107b2cc991c91925e8eae502660fe9d0", "filename": "src/test/ui/empty/empty-struct-unit-expr.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -5,7 +5,9 @@ LL | struct Empty2;\n    | -------------- `Empty2` defined here\n ...\n LL |     let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n-   |              ^^^^^^^^ not a function\n+   |              ^^^^^^--\n+   |              |\n+   |              call expression requires function\n \n error[E0618]: expected function, found enum variant `E::Empty4`\n   --> $DIR/empty-struct-unit-expr.rs:26:14\n@@ -14,7 +16,9 @@ LL |     Empty4\n    |     ------ `E::Empty4` defined here\n ...\n LL |     let e4 = E::Empty4();\n-   |              ^^^^^^^^^^^ not a function\n+   |              ^^^^^^^^^--\n+   |              |\n+   |              call expression requires function\n help: `E::Empty4` is a unit variant, you need to write it without the parenthesis\n    |\n LL |     let e4 = E::Empty4;\n@@ -24,13 +28,17 @@ error[E0618]: expected function, found `empty_struct::XEmpty2`\n   --> $DIR/empty-struct-unit-expr.rs:28:15\n    |\n LL |     let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n-   |               ^^^^^^^^^ not a function\n+   |               ^^^^^^^--\n+   |               |\n+   |               call expression requires function\n \n error[E0618]: expected function, found enum variant `XE::XEmpty4`\n   --> $DIR/empty-struct-unit-expr.rs:29:15\n    |\n LL |     let xe4 = XE::XEmpty4();\n-   |               ^^^^^^^^^^^^^ not a function\n+   |               ^^^^^^^^^^^--\n+   |               |\n+   |               call expression requires function\n help: `XE::XEmpty4` is a unit variant, you need to write it without the parenthesis\n    |\n LL |     let xe4 = XE::XEmpty4;"}, {"sha": "3bcc83e01c1f0f217c503630eca2cf59d6267f82", "filename": "src/test/ui/error-codes/E0618.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -5,7 +5,9 @@ LL |     Entry,\n    |     ----- `X::Entry` defined here\n ...\n LL |     X::Entry();\n-   |     ^^^^^^^^^^ not a function\n+   |     ^^^^^^^^--\n+   |     |\n+   |     call expression requires function\n help: `X::Entry` is a unit variant, you need to write it without the parenthesis\n    |\n LL |     X::Entry;\n@@ -17,7 +19,9 @@ error[E0618]: expected function, found `i32`\n LL |     let x = 0i32;\n    |         - `i32` defined here\n LL |     x();\n-   |     ^^^ not a function\n+   |     ^--\n+   |     |\n+   |     call expression requires function\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d04108ca39e24f782e0bfcef1920cd7830aff208", "filename": "src/test/ui/issues/issue-10969.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-10969.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-10969.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10969.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -4,15 +4,19 @@ error[E0618]: expected function, found `i32`\n LL | fn func(i: i32) {\n    |         - `i32` defined here\n LL |     i(); //~ERROR expected function, found `i32`\n-   |     ^^^ not a function\n+   |     ^--\n+   |     |\n+   |     call expression requires function\n \n error[E0618]: expected function, found `i32`\n   --> $DIR/issue-10969.rs:16:5\n    |\n LL |     let i = 0i32;\n    |         - `i32` defined here\n LL |     i(); //~ERROR expected function, found `i32`\n-   |     ^^^ not a function\n+   |     ^--\n+   |     |\n+   |     call expression requires function\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c297c20069ec235b09201f5d21f1c828a36f1819", "filename": "src/test/ui/issues/issue-18532.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-18532.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-18532.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18532.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -2,7 +2,9 @@ error[E0618]: expected function, found `!`\n   --> $DIR/issue-18532.rs:16:5\n    |\n LL |     (return)((),()); //~ ERROR expected function, found `!`\n-   |     ^^^^^^^^^^^^^^^ not a function\n+   |     ^^^^^^^^-------\n+   |     |\n+   |     call expression requires function\n \n error: aborting due to previous error\n "}, {"sha": "70a9736d2a2433131fcef7537c9ad6c2ed09ea8f", "filename": "src/test/ui/issues/issue-20714.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -5,7 +5,9 @@ LL | struct G;\n    | --------- `G` defined here\n ...\n LL |     let g = G(); //~ ERROR: expected function, found `G`\n-   |             ^^^ not a function\n+   |             ^--\n+   |             |\n+   |             call expression requires function\n \n error: aborting due to previous error\n "}, {"sha": "b94e0833a581072450ba76a828ac180c154ec8bc", "filename": "src/test/ui/issues/issue-21701.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -4,7 +4,9 @@ error[E0618]: expected function, found `U`\n LL | fn foo<U>(t: U) {\n    |           - `U` defined here\n LL |     let y = t();\n-   |             ^^^ not a function\n+   |             ^--\n+   |             |\n+   |             call expression requires function\n \n error[E0618]: expected function, found `Bar`\n   --> $DIR/issue-21701.rs:19:13\n@@ -13,7 +15,9 @@ LL | struct Bar;\n    | ----------- `Bar` defined here\n ...\n LL |     let f = Bar();\n-   |             ^^^^^ not a function\n+   |             ^^^--\n+   |             |\n+   |             call expression requires function\n \n error: aborting due to 2 previous errors\n "}, {"sha": "af32c0e20ce9d5499c15724891c208ad9e652ab8", "filename": "src/test/ui/issues/issue-22468.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-22468.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-22468.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22468.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -4,7 +4,9 @@ error[E0618]: expected function, found `&str`\n LL |     let foo = \"bar\";\n    |         --- `&str` defined here\n LL |     let x = foo(\"baz\");\n-   |             ^^^^^^^^^^ not a function\n+   |             ^^^-------\n+   |             |\n+   |             call expression requires function\n \n error: aborting due to previous error\n "}, {"sha": "ffffe6d3ab5db93dfeaacdcf9faaa9bde1b153b4", "filename": "src/test/ui/issues/issue-26237.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-26237.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-26237.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26237.rs?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -11,13 +11,12 @@\n macro_rules! macro_panic {\n     ($not_a_function:expr, $some_argument:ident) => {\n         $not_a_function($some_argument)\n-        //~^ ERROR expected function, found `{integer}`\n     }\n }\n \n fn main() {\n     let mut value_a = 0;\n     let mut value_b = 0;\n     macro_panic!(value_a, value_b);\n-    //~^ in this expansion of macro_panic!\n+    //~^ ERROR expected function, found `{integer}`\n }"}, {"sha": "7f481c230ba65329f090b739ef517d7fbb7c7d12", "filename": "src/test/ui/issues/issue-26237.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-26237.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-26237.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26237.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -1,14 +1,14 @@\n error[E0618]: expected function, found `{integer}`\n-  --> $DIR/issue-26237.rs:13:9\n+  --> $DIR/issue-26237.rs:20:18\n    |\n LL |         $not_a_function($some_argument)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a function\n+   |         ------------------------------- call expression requires function\n ...\n LL |     let mut value_a = 0;\n    |         ----------- `{integer}` defined here\n LL |     let mut value_b = 0;\n LL |     macro_panic!(value_a, value_b);\n-   |     ------------------------------- in this macro invocation\n+   |                  ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b7b5f76395a9dc4b3a4e94bd1ef28628b1da2025", "filename": "src/test/ui/issues/issue-45965.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-45965.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-45965.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45965.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -2,7 +2,9 @@ error[E0618]: expected function, found `{float}`\n   --> $DIR/issue-45965.rs:12:30\n    |\n LL |     let a = |r: f64| if r != 0.0(r != 0.0) { 1.0 } else { 0.0 };\n-   |                              ^^^^^^^^^^^^^ not a function\n+   |                              ^^^----------\n+   |                              |\n+   |                              call expression requires function\n \n error: aborting due to previous error\n "}, {"sha": "90adb3ed73f5696beb8332306e8b25fc49a68834", "filename": "src/test/ui/issues/issue-46771.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-46771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-46771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46771.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -4,7 +4,9 @@ error[E0618]: expected function, found `main::Foo`\n LL |     struct Foo;\n    |     ----------- `main::Foo` defined here\n LL |     (1 .. 2).find(|_| Foo(0) == 0); //~ ERROR expected function, found `main::Foo`\n-   |                       ^^^^^^ not a function\n+   |                       ^^^---\n+   |                       |\n+   |                       call expression requires function\n \n error: aborting due to previous error\n "}, {"sha": "305ee2f547145131cc913df95709f07beefaff16", "filename": "src/test/ui/issues/issue-5100.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -47,9 +47,9 @@ error[E0618]: expected function, found `(char, char)`\n   --> $DIR/issue-5100.rs:58:14\n    |\n LL |       let v = [('a', 'b')   //~ ERROR expected function, found `(char, char)`\n-   |  ______________^\n+   |  ______________-^^^^^^^^^\n LL | |              ('c', 'd'),\n-   | |_______________________^ not a function\n+   | |_______________________- call expression requires function\n \n error[E0308]: mismatched types\n   --> $DIR/issue-5100.rs:65:19"}, {"sha": "9c87806da9e5dd29c13411dd8dde22c2795236f0", "filename": "src/test/ui/parse-error-correct.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fparse-error-correct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fparse-error-correct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparse-error-correct.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -17,7 +17,9 @@ LL |     let y = 42;\n    |         - `{integer}` defined here\n LL |     let x = y.;  //~ ERROR unexpected token\n LL |     let x = y.();  //~ ERROR unexpected token\n-   |             ^^^^ not a function\n+   |             ^---\n+   |             |\n+   |             call expression requires function\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/parse-error-correct.rs:21:15"}, {"sha": "01e6488de5303ae387ae768a04f3bfb3edebcce7", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -171,7 +171,9 @@ LL |             Unit,\n    |             ---- `Z::Unit` defined here\n ...\n LL |         let _ = Z::Unit();\n-   |                 ^^^^^^^^^ not a function\n+   |                 ^^^^^^^--\n+   |                 |\n+   |                 call expression requires function\n help: `Z::Unit` is a unit variant, you need to write it without the parenthesis\n    |\n LL |         let _ = Z::Unit;\n@@ -193,7 +195,9 @@ LL |         Unit,\n    |         ---- `m::E::Unit` defined here\n ...\n LL |     let _: E = m::E::Unit();\n-   |                ^^^^^^^^^^^^ not a function\n+   |                ^^^^^^^^^^--\n+   |                |\n+   |                call expression requires function\n help: `m::E::Unit` is a unit variant, you need to write it without the parenthesis\n    |\n LL |     let _: E = m::E::Unit;\n@@ -215,7 +219,9 @@ LL |         Unit,\n    |         ---- `E::Unit` defined here\n ...\n LL |     let _: E = E::Unit();\n-   |                ^^^^^^^^^ not a function\n+   |                ^^^^^^^--\n+   |                |\n+   |                call expression requires function\n help: `E::Unit` is a unit variant, you need to write it without the parenthesis\n    |\n LL |     let _: E = E::Unit;"}, {"sha": "37f078285d695330d1c92697a2e42f049ad9be35", "filename": "src/test/ui/suggestions/issue-51055-missing-semicolon-between-call-and-tuple.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.rs?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -0,0 +1,8 @@\n+fn vindictive() -> bool { true }\n+\n+fn perfidy() -> (i32, i32) {\n+    vindictive() //~ ERROR expected function, found `bool`\n+    (1, 2)\n+}\n+\n+fn main() {}"}, {"sha": "40ddb5ec53c290ceb068e6a98524b8f56c390682", "filename": "src/test/ui/suggestions/issue-51055-missing-semicolon-between-call-and-tuple.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9577734ff360235894db2904503a4d515dc89a29/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-51055-missing-semicolon-between-call-and-tuple.stderr?ref=9577734ff360235894db2904503a4d515dc89a29", "patch": "@@ -0,0 +1,16 @@\n+error[E0618]: expected function, found `bool`\n+  --> $DIR/issue-51055-missing-semicolon-between-call-and-tuple.rs:4:5\n+   |\n+LL |   fn vindictive() -> bool { true }\n+   |   -------------------------------- `vindictive` defined here returns `bool`\n+...\n+LL |       vindictive() //~ ERROR expected function, found `bool`\n+   |       -^^^^^^^^^^^- help: try adding a semicolon: `;`\n+   |  _____|\n+   | |\n+LL | |     (1, 2)\n+   | |__________- call expression requires function\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0618`."}]}