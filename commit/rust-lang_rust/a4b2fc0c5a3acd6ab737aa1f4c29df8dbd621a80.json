{"sha": "a4b2fc0c5a3acd6ab737aa1f4c29df8dbd621a80", "node_id": "C_kwDOAAsO6NoAKGE0YjJmYzBjNWEzYWNkNmFiNzM3YWExZjRjMjlkZjhkYmQ2MjFhODA", "commit": {"author": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2021-12-06T21:50:14Z"}, "committer": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2021-12-06T21:50:14Z"}, "message": "Adjust pthread tests", "tree": {"sha": "037a76eb6d594da8311049cdab0fd1fbfc02d6e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/037a76eb6d594da8311049cdab0fd1fbfc02d6e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4b2fc0c5a3acd6ab737aa1f4c29df8dbd621a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b2fc0c5a3acd6ab737aa1f4c29df8dbd621a80", "html_url": "https://github.com/rust-lang/rust/commit/a4b2fc0c5a3acd6ab737aa1f4c29df8dbd621a80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4b2fc0c5a3acd6ab737aa1f4c29df8dbd621a80/comments", "author": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "committer": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0d915703ca8130367d6089cb79369f67888c9ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0d915703ca8130367d6089cb79369f67888c9ad", "html_url": "https://github.com/rust-lang/rust/commit/f0d915703ca8130367d6089cb79369f67888c9ad"}], "stats": {"total": 62, "additions": 24, "deletions": 38}, "files": [{"sha": "0e09ec9126a54ac6ed63f20ca896b1b6a736f022", "filename": "tests/run-pass/concurrency/libc_pthread_cond.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a4b2fc0c5a3acd6ab737aa1f4c29df8dbd621a80/tests%2Frun-pass%2Fconcurrency%2Flibc_pthread_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b2fc0c5a3acd6ab737aa1f4c29df8dbd621a80/tests%2Frun-pass%2Fconcurrency%2Flibc_pthread_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Flibc_pthread_cond.rs?ref=a4b2fc0c5a3acd6ab737aa1f4c29df8dbd621a80", "patch": "@@ -1,46 +1,47 @@\n // ignore-windows: No libc on Windows\n // ignore-macos: pthread_condattr_setclock is not supported on MacOS.\n-// compile-flags: -Zmiri-disable-isolation\n+// compile-flags: -Zmiri-disable-isolation -Zmiri-check-number-validity\n \n #![feature(rustc_private)]\n \n /// Test that conditional variable timeouts are working properly with both\n /// monotonic and system clocks.\n extern crate libc;\n \n-use std::mem;\n+use std::mem::MaybeUninit;\n use std::time::Instant;\n \n fn test_timed_wait_timeout(clock_id: i32) {\n     unsafe {\n-        let mut attr: libc::pthread_condattr_t = mem::zeroed();\n-        assert_eq!(libc::pthread_condattr_init(&mut attr as *mut _), 0);\n-        assert_eq!(libc::pthread_condattr_setclock(&mut attr as *mut _, clock_id), 0);\n+        let mut attr: MaybeUninit<libc::pthread_condattr_t> = MaybeUninit::uninit();\n+        assert_eq!(libc::pthread_condattr_init(attr.as_mut_ptr()), 0);\n+        assert_eq!(libc::pthread_condattr_setclock(attr.as_mut_ptr(), clock_id), 0);\n \n-        let mut cond: libc::pthread_cond_t = mem::zeroed();\n-        assert_eq!(libc::pthread_cond_init(&mut cond as *mut _, &attr as *const _), 0);\n-        assert_eq!(libc::pthread_condattr_destroy(&mut attr as *mut _), 0);\n+        let mut cond: MaybeUninit<libc::pthread_cond_t> = MaybeUninit::uninit();\n+        assert_eq!(libc::pthread_cond_init(cond.as_mut_ptr(), attr.as_ptr()), 0);\n+        assert_eq!(libc::pthread_condattr_destroy(attr.as_mut_ptr()), 0);\n \n-        let mut mutex: libc::pthread_mutex_t = mem::zeroed();\n+        let mut mutex: libc::pthread_mutex_t = libc::PTHREAD_MUTEX_INITIALIZER;\n \n-        let mut now: libc::timespec = mem::zeroed();\n-        assert_eq!(libc::clock_gettime(clock_id, &mut now), 0);\n+        let mut now_mu: MaybeUninit<libc::timespec> = MaybeUninit::uninit();\n+        assert_eq!(libc::clock_gettime(clock_id, now_mu.as_mut_ptr()), 0);\n+        let now = now_mu.assume_init();\n         // Waiting for a second... mostly because waiting less requires mich more tricky arithmetic.\n         // FIXME: wait less.\n         let timeout = libc::timespec { tv_sec: now.tv_sec + 1, tv_nsec: now.tv_nsec };\n \n         assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n         let current_time = Instant::now();\n         assert_eq!(\n-            libc::pthread_cond_timedwait(&mut cond as *mut _, &mut mutex as *mut _, &timeout),\n+            libc::pthread_cond_timedwait(cond.as_mut_ptr(), &mut mutex as *mut _, &timeout),\n             libc::ETIMEDOUT\n         );\n         let elapsed_time = current_time.elapsed().as_millis();\n         assert!(900 <= elapsed_time && elapsed_time <= 1300);\n \n         // Test calling `pthread_cond_timedwait` again with an already elapsed timeout.\n         assert_eq!(\n-            libc::pthread_cond_timedwait(&mut cond as *mut _, &mut mutex as *mut _, &timeout),\n+            libc::pthread_cond_timedwait(cond.as_mut_ptr(), &mut mutex as *mut _, &timeout),\n             libc::ETIMEDOUT\n         );\n \n@@ -49,7 +50,7 @@ fn test_timed_wait_timeout(clock_id: i32) {\n         let invalid_timeout_1 = libc::timespec { tv_sec: now.tv_sec + 1, tv_nsec: 1_000_000_000 };\n         assert_eq!(\n             libc::pthread_cond_timedwait(\n-                &mut cond as *mut _,\n+                cond.as_mut_ptr(),\n                 &mut mutex as *mut _,\n                 &invalid_timeout_1\n             ),\n@@ -58,7 +59,7 @@ fn test_timed_wait_timeout(clock_id: i32) {\n         let invalid_timeout_2 = libc::timespec { tv_sec: now.tv_sec + 1, tv_nsec: -1 };\n         assert_eq!(\n             libc::pthread_cond_timedwait(\n-                &mut cond as *mut _,\n+                cond.as_mut_ptr(),\n                 &mut mutex as *mut _,\n                 &invalid_timeout_2\n             ),\n@@ -68,7 +69,7 @@ fn test_timed_wait_timeout(clock_id: i32) {\n         let invalid_timeout_3 = libc::timespec { tv_sec: -1, tv_nsec: 0 };\n         assert_eq!(\n             libc::pthread_cond_timedwait(\n-                &mut cond as *mut _,\n+                cond.as_mut_ptr(),\n                 &mut mutex as *mut _,\n                 &invalid_timeout_3\n             ),\n@@ -77,7 +78,7 @@ fn test_timed_wait_timeout(clock_id: i32) {\n \n         assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n         assert_eq!(libc::pthread_mutex_destroy(&mut mutex as *mut _), 0);\n-        assert_eq!(libc::pthread_cond_destroy(&mut cond as *mut _), 0);\n+        assert_eq!(libc::pthread_cond_destroy(cond.as_mut_ptr()), 0);\n     }\n }\n "}, {"sha": "285c6014e2d930425576dd0be2f1bd1522660ef2", "filename": "tests/run-pass/concurrency/pthread_condattr_init.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0d915703ca8130367d6089cb79369f67888c9ad/tests%2Frun-pass%2Fconcurrency%2Fpthread_condattr_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0d915703ca8130367d6089cb79369f67888c9ad/tests%2Frun-pass%2Fconcurrency%2Fpthread_condattr_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fpthread_condattr_init.rs?ref=f0d915703ca8130367d6089cb79369f67888c9ad", "patch": "@@ -1,20 +0,0 @@\n-// ignore-windows: No libc on Windows\n-// compile-flags: -Zmiri-check-number-validity\n-\n-#![feature(rustc_private)]\n-\n-/// Test that pthread_condattr_destroy doesn't trigger a number validity error.\n-extern crate libc;\n-\n-fn main() {\n-    unsafe {\n-        use core::mem::MaybeUninit;\n-        let mut attr = MaybeUninit::<libc::pthread_condattr_t>::uninit();\n-\n-        let r = libc::pthread_condattr_init(attr.as_mut_ptr());\n-        assert_eq!(r, 0);\n-\n-        let r = libc::pthread_condattr_destroy(attr.as_mut_ptr());\n-        assert_eq!(r, 0);\n-    }\n-}"}, {"sha": "da6f6f25ec1cdfeaeb7faa1fcbfdeeafa356644c", "filename": "tests/run-pass/concurrency/sync.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4b2fc0c5a3acd6ab737aa1f4c29df8dbd621a80/tests%2Frun-pass%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b2fc0c5a3acd6ab737aa1f4c29df8dbd621a80/tests%2Frun-pass%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsync.rs?ref=a4b2fc0c5a3acd6ab737aa1f4c29df8dbd621a80", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation\n+// compile-flags: -Zmiri-disable-isolation -Zmiri-check-number-validity\n \n use std::sync::mpsc::{channel, sync_channel};\n use std::sync::{Arc, Barrier, Condvar, Mutex, Once, RwLock};\n@@ -340,6 +340,10 @@ fn park_unpark() {\n     assert!((200..1000).contains(&start.elapsed().as_millis()));\n }\n \n+fn check_condvar() {\n+    let _ = std::sync::Condvar::new();\n+}\n+\n fn main() {\n     check_barriers();\n     check_conditional_variables_notify_one();\n@@ -357,4 +361,5 @@ fn main() {\n     check_rwlock_unlock_bug2();\n     park_timeout();\n     park_unpark();\n+    check_condvar();\n }"}]}