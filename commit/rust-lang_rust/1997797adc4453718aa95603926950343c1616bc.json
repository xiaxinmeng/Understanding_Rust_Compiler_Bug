{"sha": "1997797adc4453718aa95603926950343c1616bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OTc3OTdhZGM0NDUzNzE4YWE5NTYwMzkyNjk1MDM0M2MxNjE2YmM=", "commit": {"author": {"name": "Jeff Muizelaar", "email": "jrmuizel@gmail.com", "date": "2019-02-03T20:06:59Z"}, "committer": {"name": "Jeff Muizelaar", "email": "jrmuizel@gmail.com", "date": "2019-02-04T00:43:35Z"}, "message": "Factor out rules parsing", "tree": {"sha": "5044b14314460b4884ad1e1470279c9cad75f751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5044b14314460b4884ad1e1470279c9cad75f751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1997797adc4453718aa95603926950343c1616bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1997797adc4453718aa95603926950343c1616bc", "html_url": "https://github.com/rust-lang/rust/commit/1997797adc4453718aa95603926950343c1616bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1997797adc4453718aa95603926950343c1616bc/comments", "author": {"login": "jrmuizel", "id": 332653, "node_id": "MDQ6VXNlcjMzMjY1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/332653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrmuizel", "html_url": "https://github.com/jrmuizel", "followers_url": "https://api.github.com/users/jrmuizel/followers", "following_url": "https://api.github.com/users/jrmuizel/following{/other_user}", "gists_url": "https://api.github.com/users/jrmuizel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrmuizel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrmuizel/subscriptions", "organizations_url": "https://api.github.com/users/jrmuizel/orgs", "repos_url": "https://api.github.com/users/jrmuizel/repos", "events_url": "https://api.github.com/users/jrmuizel/events{/privacy}", "received_events_url": "https://api.github.com/users/jrmuizel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jrmuizel", "id": 332653, "node_id": "MDQ6VXNlcjMzMjY1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/332653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrmuizel", "html_url": "https://github.com/jrmuizel", "followers_url": "https://api.github.com/users/jrmuizel/followers", "following_url": "https://api.github.com/users/jrmuizel/following{/other_user}", "gists_url": "https://api.github.com/users/jrmuizel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrmuizel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrmuizel/subscriptions", "organizations_url": "https://api.github.com/users/jrmuizel/orgs", "repos_url": "https://api.github.com/users/jrmuizel/repos", "events_url": "https://api.github.com/users/jrmuizel/events{/privacy}", "received_events_url": "https://api.github.com/users/jrmuizel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "998ed13d09992d1fe24a45cc725c55390d9a5ca7", "url": "https://api.github.com/repos/rust-lang/rust/commits/998ed13d09992d1fe24a45cc725c55390d9a5ca7", "html_url": "https://github.com/rust-lang/rust/commit/998ed13d09992d1fe24a45cc725c55390d9a5ca7"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "6b648e7afd8b5057955c9907c9e89de1d767c81e", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1997797adc4453718aa95603926950343c1616bc/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1997797adc4453718aa95603926950343c1616bc/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=1997797adc4453718aa95603926950343c1616bc", "patch": "@@ -161,6 +161,18 @@ impl_froms!(TokenTree: Leaf, Subtree);\n     )\n     }\n \n+    fn create_rules(macro_definition: &str) -> MacroRules {\n+        let source_file = ast::SourceFile::parse(macro_definition);\n+        let macro_definition = source_file\n+            .syntax()\n+            .descendants()\n+            .find_map(ast::MacroCall::cast)\n+            .unwrap();\n+\n+        let definition_tt = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n+        crate::MacroRules::parse(&definition_tt).unwrap()\n+    }\n+\n     fn assert_expansion(rules: &MacroRules, invocation: &str, expansion: &str) {\n         let source_file = ast::SourceFile::parse(invocation);\n         let macro_invocation = source_file\n@@ -177,7 +189,8 @@ impl_froms!(TokenTree: Leaf, Subtree);\n \n     #[test]\n     fn test_fail_match_pattern_by_first_token() {\n-        let macro_definition = r#\"\n+        let rules = create_rules(\n+            r#\"\n         macro_rules! foo {\n             ($ i:ident) => (\n                 mod $ i {}\n@@ -189,17 +202,8 @@ impl_froms!(TokenTree: Leaf, Subtree);\n                 struct $ i;\n             )\n         }\n-\"#;\n-\n-        let source_file = ast::SourceFile::parse(macro_definition);\n-        let macro_definition = source_file\n-            .syntax()\n-            .descendants()\n-            .find_map(ast::MacroCall::cast)\n-            .unwrap();\n-\n-        let definition_tt = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n-        let rules = crate::MacroRules::parse(&definition_tt).unwrap();\n+\"#,\n+        );\n \n         assert_expansion(&rules, \"foo! { foo }\", \"mod foo {}\");\n         assert_expansion(&rules, \"foo! { = bar }\", \"fn bar () {}\");\n@@ -208,7 +212,8 @@ impl_froms!(TokenTree: Leaf, Subtree);\n \n     #[test]\n     fn test_fail_match_pattern_by_last_token() {\n-        let macro_definition = r#\"\n+        let rules = create_rules(\n+            r#\"\n         macro_rules! foo {\n             ($ i:ident) => (\n                 mod $ i {}\n@@ -220,17 +225,8 @@ impl_froms!(TokenTree: Leaf, Subtree);\n                 struct $ i;\n             )\n         }\n-\"#;\n-\n-        let source_file = ast::SourceFile::parse(macro_definition);\n-        let macro_definition = source_file\n-            .syntax()\n-            .descendants()\n-            .find_map(ast::MacroCall::cast)\n-            .unwrap();\n-\n-        let definition_tt = ast_to_token_tree(macro_definition.token_tree().unwrap()).unwrap();\n-        let rules = crate::MacroRules::parse(&definition_tt).unwrap();\n+\"#,\n+        );\n \n         assert_expansion(&rules, \"foo! { foo }\", \"mod foo {}\");\n         assert_expansion(&rules, \"foo! { bar = }\", \"fn bar () {}\");"}]}