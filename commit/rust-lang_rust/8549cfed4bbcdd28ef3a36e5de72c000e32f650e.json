{"sha": "8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NDljZmVkNGJiY2RkMjhlZjNhMzZlNWRlNzJjMDAwZTMyZjY1MGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T12:40:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T12:40:36Z"}, "message": "Auto merge of #69649 - estebank:negative-impl-span, r=Centril\n\nTweak output for invalid negative impl errors\n\nFollow up to #69722. Tweak negative impl errors emitted in the HIR:\n\n```\nerror[E0192]: invalid negative impl\n  --> $DIR/E0192.rs:9:6\n   |\nLL | impl !Trait for Foo { }\n   |      ^^^^^^\n   |\n   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n```", "tree": {"sha": "8767b779bc071839adf90065d75c6d4484634190", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8767b779bc071839adf90065d75c6d4484634190"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "html_url": "https://github.com/rust-lang/rust/commit/8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "html_url": "https://github.com/rust-lang/rust/commit/5aa8f199c398644d9fc2bb9ac8cffd14f985686d"}, {"sha": "b8f98662577f5423e2a2c4ffdfafbad9e4526058", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8f98662577f5423e2a2c4ffdfafbad9e4526058", "html_url": "https://github.com/rust-lang/rust/commit/b8f98662577f5423e2a2c4ffdfafbad9e4526058"}], "stats": {"total": 145, "additions": 95, "deletions": 50}, "files": [{"sha": "740f62b41a5843cf945e5ab103a93bd901b992ba", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "patch": "@@ -402,10 +402,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         )\n                     });\n \n+                // `defaultness.has_value()` is never called for an `impl`, always `true` in order\n+                // to not cause an assertion failure inside the `lower_defaultness` function.\n+                let has_val = true;\n+                let (defaultness, defaultness_span) = self.lower_defaultness(defaultness, has_val);\n                 hir::ItemKind::Impl {\n                     unsafety: self.lower_unsafety(unsafety),\n                     polarity,\n-                    defaultness: self.lower_defaultness(defaultness, true /* [1] */),\n+                    defaultness,\n+                    defaultness_span,\n                     constness: self.lower_constness(constness),\n                     generics,\n                     of_trait: trait_ref,\n@@ -434,9 +439,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 panic!(\"`TyMac` should have been expanded by now\")\n             }\n         }\n-\n-        // [1] `defaultness.has_value()` is never called for an `impl`, always `true` in order to\n-        //     not cause an assertion failure inside the `lower_defaultness` function.\n     }\n \n     fn lower_const_item(\n@@ -867,27 +869,31 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::MacCall(..) => panic!(\"`TyMac` should have been expanded by now\"),\n         };\n \n+        // Since `default impl` is not yet implemented, this is always true in impls.\n+        let has_value = true;\n+        let (defaultness, _) = self.lower_defaultness(i.kind.defaultness(), has_value);\n         hir::ImplItem {\n             hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             generics,\n             vis: self.lower_visibility(&i.vis, None),\n-            defaultness: self.lower_defaultness(i.kind.defaultness(), true /* [1] */),\n+            defaultness,\n             kind,\n             span: i.span,\n         }\n-\n-        // [1] since `default impl` is not yet implemented, this is always true in impls\n     }\n \n     fn lower_impl_item_ref(&mut self, i: &AssocItem) -> hir::ImplItemRef<'hir> {\n+        // Since `default impl` is not yet implemented, this is always true in impls.\n+        let has_value = true;\n+        let (defaultness, _) = self.lower_defaultness(i.kind.defaultness(), has_value);\n         hir::ImplItemRef {\n             id: hir::ImplItemId { hir_id: self.lower_node_id(i.id) },\n             ident: i.ident,\n             span: i.span,\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n-            defaultness: self.lower_defaultness(i.kind.defaultness(), true /* [1] */),\n+            defaultness,\n             kind: match &i.kind {\n                 AssocItemKind::Const(..) => hir::AssocItemKind::Const,\n                 AssocItemKind::TyAlias(.., ty) => {\n@@ -902,8 +908,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 AssocItemKind::MacCall(..) => unimplemented!(),\n             },\n         }\n-\n-        // [1] since `default impl` is not yet implemented, this is always true in impls\n     }\n \n     /// If an `explicit_owner` is given, this method allocates the `HirId` in\n@@ -938,12 +942,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         respan(v.span, node)\n     }\n \n-    fn lower_defaultness(&self, d: Defaultness, has_value: bool) -> hir::Defaultness {\n+    fn lower_defaultness(\n+        &self,\n+        d: Defaultness,\n+        has_value: bool,\n+    ) -> (hir::Defaultness, Option<Span>) {\n         match d {\n-            Defaultness::Default(_) => hir::Defaultness::Default { has_value },\n+            Defaultness::Default(sp) => (hir::Defaultness::Default { has_value }, Some(sp)),\n             Defaultness::Final => {\n                 assert!(has_value);\n-                hir::Defaultness::Final\n+                (hir::Defaultness::Final, None)\n             }\n         }\n     }"}, {"sha": "bb864edc999696d8b14414f8ada27d6c96e42c8c", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "patch": "@@ -2153,7 +2153,7 @@ pub enum Defaultness {\n impl Defaultness {\n     pub fn has_value(&self) -> bool {\n         match *self {\n-            Defaultness::Default { has_value, .. } => has_value,\n+            Defaultness::Default { has_value } => has_value,\n             Defaultness::Final => true,\n         }\n     }\n@@ -2502,6 +2502,9 @@ pub enum ItemKind<'hir> {\n         unsafety: Unsafety,\n         polarity: ImplPolarity,\n         defaultness: Defaultness,\n+        // We do not put a `Span` in `Defaultness` because it breaks foreign crate metadata\n+        // decoding as `Span`s cannot be decoded when a `Session` is not available.\n+        defaultness_span: Option<Span>,\n         constness: Constness,\n         generics: Generics<'hir>,\n "}, {"sha": "11749cf996b4414def081097b9eb58dc301b9df4", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "patch": "@@ -590,6 +590,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             defaultness: _,\n             polarity: _,\n             constness: _,\n+            defaultness_span: _,\n             ref generics,\n             ref of_trait,\n             ref self_ty,"}, {"sha": "cd16e451f1db8b677b404c1b2005ec9ed913713c", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "patch": "@@ -632,6 +632,7 @@ impl<'a> State<'a> {\n                 polarity,\n                 defaultness,\n                 constness,\n+                defaultness_span: _,\n                 ref generics,\n                 ref of_trait,\n                 ref self_ty,"}, {"sha": "27be0faade82f26cd0ff5b294ac049f8e0f91b7d", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "patch": "@@ -98,34 +98,50 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n         //\n         // won't be allowed unless there's an *explicit* implementation of `Send`\n         // for `T`\n-        hir::ItemKind::Impl { defaultness, ref of_trait, ref self_ty, .. } => {\n+        hir::ItemKind::Impl {\n+            defaultness,\n+            defaultness_span,\n+            polarity,\n+            ref of_trait,\n+            ref self_ty,\n+            ..\n+        } => {\n             let is_auto = tcx\n                 .impl_trait_ref(tcx.hir().local_def_id(item.hir_id))\n                 .map_or(false, |trait_ref| tcx.trait_is_auto(trait_ref.def_id));\n-            let polarity = tcx.impl_polarity(def_id);\n             if let (hir::Defaultness::Default { .. }, true) = (defaultness, is_auto) {\n-                tcx.sess.span_err(item.span, \"impls of auto traits cannot be default\");\n+                let sp = of_trait.as_ref().map(|t| t.path.span).unwrap_or(item.span);\n+                let mut err =\n+                    tcx.sess.struct_span_err(sp, \"impls of auto traits cannot be default\");\n+                err.span_labels(defaultness_span, \"default because of this\");\n+                err.span_label(sp, \"auto trait\");\n+                err.emit();\n             }\n-            match polarity {\n-                ty::ImplPolarity::Positive => {\n+            // We match on both `ty::ImplPolarity` and `ast::ImplPolarity` just to get the `!` span.\n+            match (tcx.impl_polarity(def_id), polarity) {\n+                (ty::ImplPolarity::Positive, _) => {\n                     check_impl(tcx, item, self_ty, of_trait);\n                 }\n-                ty::ImplPolarity::Negative => {\n+                (ty::ImplPolarity::Negative, ast::ImplPolarity::Negative(span)) => {\n                     // FIXME(#27579): what amount of WF checking do we need for neg impls?\n-                    if of_trait.is_some() && !is_auto {\n+                    if let (Some(of_trait), false) = (of_trait, is_auto) {\n                         struct_span_err!(\n                             tcx.sess,\n-                            item.span,\n+                            span.to(of_trait.path.span),\n                             E0192,\n-                            \"negative impls are only allowed for \\\n-                                   auto traits (e.g., `Send` and `Sync`)\"\n+                            \"invalid negative impl\"\n+                        )\n+                        .note(\n+                            \"negative impls are only allowed for auto traits, like `Send` and \\\n+                             `Sync`\",\n                         )\n                         .emit()\n                     }\n                 }\n-                ty::ImplPolarity::Reservation => {\n+                (ty::ImplPolarity::Reservation, _) => {\n                     // FIXME: what amount of WF checking do we need for reservation impls?\n                 }\n+                _ => unreachable!(),\n             }\n         }\n         hir::ItemKind::Fn(..) => {"}, {"sha": "f1e6655e8fed8949039f7eeea50b41ac23d01019", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "patch": "@@ -1564,9 +1564,10 @@ fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ImplPolarity {\n     let is_rustc_reservation = tcx.has_attr(def_id, sym::rustc_reservation_impl);\n     let item = tcx.hir().expect_item(hir_id);\n     match &item.kind {\n-        hir::ItemKind::Impl { polarity: hir::ImplPolarity::Negative(_), .. } => {\n+        hir::ItemKind::Impl { polarity: hir::ImplPolarity::Negative(span), of_trait, .. } => {\n             if is_rustc_reservation {\n-                tcx.sess.span_err(item.span, \"reservation impls can't be negative\");\n+                let span = span.to(of_trait.as_ref().map(|t| t.path.span).unwrap_or(*span));\n+                tcx.sess.span_err(span, \"reservation impls can't be negative\");\n             }\n             ty::ImplPolarity::Negative\n         }"}, {"sha": "e49395c6fd4383c0667659f7afbcfcabfce16ac2", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "patch": "@@ -563,6 +563,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 polarity,\n                 defaultness,\n                 constness,\n+                defaultness_span: _,\n                 ref generics,\n                 ref of_trait,\n                 self_ty,"}, {"sha": "da706dea167f6d43f5842b4b196d6d607c98cd82", "filename": "src/test/ui/error-codes/E0192.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr?ref=8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "patch": "@@ -1,8 +1,10 @@\n-error[E0192]: negative impls are only allowed for auto traits (e.g., `Send` and `Sync`)\n-  --> $DIR/E0192.rs:9:1\n+error[E0192]: invalid negative impl\n+  --> $DIR/E0192.rs:9:6\n    |\n LL | impl !Trait for Foo { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^^^^^\n+   |\n+   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n \n error: aborting due to previous error\n "}, {"sha": "5b8a72104e31af64fb26243f381b40949f31153b", "filename": "src/test/ui/specialization/defaultimpl/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs?ref=8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "patch": "@@ -10,6 +10,6 @@ default unsafe impl Send for S {} //~ ERROR impls of auto traits cannot be defau\n default impl !Send for Z {} //~ ERROR impls of auto traits cannot be default\n \n trait Tr {}\n-default impl !Tr for S {} //~ ERROR negative impls are only allowed for auto traits\n+default impl !Tr for S {} //~ ERROR invalid negative impl\n \n fn main() {}"}, {"sha": "e03153f343b8ecfbd15790586b8938cf4aac6921", "filename": "src/test/ui/specialization/defaultimpl/validation.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr?ref=8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "patch": "@@ -9,22 +9,28 @@ LL | default impl S {}\n    = note: only trait implementations may be annotated with `default`\n \n error: impls of auto traits cannot be default\n-  --> $DIR/validation.rs:9:1\n+  --> $DIR/validation.rs:9:21\n    |\n LL | default unsafe impl Send for S {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | -------             ^^^^ auto trait\n+   | |\n+   | default because of this\n \n error: impls of auto traits cannot be default\n-  --> $DIR/validation.rs:10:1\n+  --> $DIR/validation.rs:10:15\n    |\n LL | default impl !Send for Z {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | -------       ^^^^ auto trait\n+   | |\n+   | default because of this\n \n-error[E0192]: negative impls are only allowed for auto traits (e.g., `Send` and `Sync`)\n-  --> $DIR/validation.rs:13:1\n+error[E0192]: invalid negative impl\n+  --> $DIR/validation.rs:13:14\n    |\n LL | default impl !Tr for S {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^\n+   |\n+   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "bfbe6394c16942b9c0408b32b4715dde78eb394d", "filename": "src/test/ui/syntax-trait-polarity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Ftest%2Fui%2Fsyntax-trait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Ftest%2Fui%2Fsyntax-trait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity.rs?ref=8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "patch": "@@ -12,7 +12,7 @@ trait TestTrait {}\n unsafe impl !Send for TestType {}\n //~^ ERROR negative impls cannot be unsafe\n impl !TestTrait for TestType {}\n-//~^ ERROR negative impls are only allowed for auto traits\n+//~^ ERROR invalid negative impl\n \n struct TestType2<T>(T);\n \n@@ -22,6 +22,6 @@ impl<T> !TestType2<T> {}\n unsafe impl<T> !Send for TestType2<T> {}\n //~^ ERROR negative impls cannot be unsafe\n impl<T> !TestTrait for TestType2<T> {}\n-//~^ ERROR negative impls are only allowed for auto traits\n+//~^ ERROR invalid negative impl\n \n fn main() {}"}, {"sha": "f70d67ec7dc98286803cab95b8e0913b1800a156", "filename": "src/test/ui/syntax-trait-polarity.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr?ref=8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "patch": "@@ -32,17 +32,21 @@ LL | unsafe impl<T> !Send for TestType2<T> {}\n    | |              negative because of this\n    | unsafe because of this\n \n-error[E0192]: negative impls are only allowed for auto traits (e.g., `Send` and `Sync`)\n-  --> $DIR/syntax-trait-polarity.rs:14:1\n+error[E0192]: invalid negative impl\n+  --> $DIR/syntax-trait-polarity.rs:14:6\n    |\n LL | impl !TestTrait for TestType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^^^^^^^^^\n+   |\n+   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n \n-error[E0192]: negative impls are only allowed for auto traits (e.g., `Send` and `Sync`)\n-  --> $DIR/syntax-trait-polarity.rs:24:1\n+error[E0192]: invalid negative impl\n+  --> $DIR/syntax-trait-polarity.rs:24:9\n    |\n LL | impl<T> !TestTrait for TestType2<T> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^\n+   |\n+   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "fef98977cc435f60002af2b5293008efb7372eb5", "filename": "src/test/ui/typeck/typeck-negative-impls-builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.rs?ref=8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "patch": "@@ -7,6 +7,6 @@ trait TestTrait {\n }\n \n impl !TestTrait for TestType {}\n-//~^ ERROR negative impls are only allowed for auto traits (e.g., `Send` and `Sync`)\n+//~^ ERROR invalid negative impl\n \n fn main() {}"}, {"sha": "c90655086acdac1d03623a5a89c0889d04b90d59", "filename": "src/test/ui/typeck/typeck-negative-impls-builtin.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8549cfed4bbcdd28ef3a36e5de72c000e32f650e/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.stderr?ref=8549cfed4bbcdd28ef3a36e5de72c000e32f650e", "patch": "@@ -1,8 +1,10 @@\n-error[E0192]: negative impls are only allowed for auto traits (e.g., `Send` and `Sync`)\n-  --> $DIR/typeck-negative-impls-builtin.rs:9:1\n+error[E0192]: invalid negative impl\n+  --> $DIR/typeck-negative-impls-builtin.rs:9:6\n    |\n LL | impl !TestTrait for TestType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^^^^^^^^^\n+   |\n+   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n \n error: aborting due to previous error\n "}]}