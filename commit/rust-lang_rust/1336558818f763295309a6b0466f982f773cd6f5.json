{"sha": "1336558818f763295309a6b0466f982f773cd6f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMzY1NTg4MThmNzYzMjk1MzA5YTZiMDQ2NmY5ODJmNzczY2Q2ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-20T18:29:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-20T18:29:00Z"}, "message": "Auto merge of #5493 - ebroto:unsafe_derive_deserialize, r=flip1995\n\nImplement unsafe_derive_deserialize lint\n\nAdded `unsafe_derive_deserialize` lint to check for cases when automatically deriving `serde::Deserialize` can be problematic, i.e. with types that have methods using `unsafe`.\n\nCloses #5471\n\nchangelog: Add lint [`unsafe_derive_deserialize`]", "tree": {"sha": "a42b5de4423b377c68940d92c9b52b3a7a0d985d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a42b5de4423b377c68940d92c9b52b3a7a0d985d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1336558818f763295309a6b0466f982f773cd6f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1336558818f763295309a6b0466f982f773cd6f5", "html_url": "https://github.com/rust-lang/rust/commit/1336558818f763295309a6b0466f982f773cd6f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1336558818f763295309a6b0466f982f773cd6f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dcc8d50381b561a87cdfb926c829434857e635f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dcc8d50381b561a87cdfb926c829434857e635f", "html_url": "https://github.com/rust-lang/rust/commit/6dcc8d50381b561a87cdfb926c829434857e635f"}, {"sha": "b7f85e8706b1cafa02868c853ed5c05550ef2ffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f85e8706b1cafa02868c853ed5c05550ef2ffe", "html_url": "https://github.com/rust-lang/rust/commit/b7f85e8706b1cafa02868c853ed5c05550ef2ffe"}], "stats": {"total": 252, "additions": 246, "deletions": 6}, "files": [{"sha": "b97452873a8046d5517f01938aed05b6ad38a885", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1336558818f763295309a6b0466f982f773cd6f5/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/1336558818f763295309a6b0466f982f773cd6f5/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=1336558818f763295309a6b0466f982f773cd6f5", "patch": "@@ -1524,6 +1524,7 @@ Released 2018-09-13\n [`unneeded_wildcard_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_wildcard_pattern\n [`unreachable`]: https://rust-lang.github.io/rust-clippy/master/index.html#unreachable\n [`unreadable_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal\n+[`unsafe_derive_deserialize`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_derive_deserialize\n [`unsafe_removed_from_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_removed_from_name\n [`unsafe_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_vector_initialization\n [`unseparated_literal_suffix`]: https://rust-lang.github.io/rust-clippy/master/index.html#unseparated_literal_suffix"}, {"sha": "16300db0974b3a244974711859ccf2c4241ed04b", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 134, "deletions": 4, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/1336558818f763295309a6b0466f982f773cd6f5/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336558818f763295309a6b0466f982f773cd6f5/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=1336558818f763295309a6b0466f982f773cd6f5", "patch": "@@ -1,8 +1,15 @@\n use crate::utils::paths;\n-use crate::utils::{is_automatically_derived, is_copy, match_path, span_lint_and_note, span_lint_and_then};\n+use crate::utils::{\n+    is_automatically_derived, is_copy, match_path, span_lint_and_help, span_lint_and_note, span_lint_and_then,\n+};\n use if_chain::if_chain;\n-use rustc_hir::{Item, ItemKind, TraitRef};\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::{\n+    BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Item, ItemKind, TraitRef, UnsafeSource, Unsafety,\n+};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -62,7 +69,41 @@ declare_clippy_lint! {\n     \"implementing `Clone` explicitly on `Copy` types\"\n }\n \n-declare_lint_pass!(Derive => [EXPL_IMPL_CLONE_ON_COPY, DERIVE_HASH_XOR_EQ]);\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for deriving `serde::Deserialize` on a type that\n+    /// has methods using `unsafe`.\n+    ///\n+    /// **Why is this bad?** Deriving `serde::Deserialize` will create a constructor\n+    /// that may violate invariants hold by another constructor.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// use serde::Deserialize;\n+    ///\n+    /// #[derive(Deserialize)]\n+    /// pub struct Foo {\n+    ///     // ..\n+    /// }\n+    ///\n+    /// impl Foo {\n+    ///     pub fn new() -> Self {\n+    ///         // setup here ..\n+    ///     }\n+    ///\n+    ///     pub unsafe fn parts() -> (&str, &str) {\n+    ///         // assumes invariants hold\n+    ///     }\n+    /// }\n+    /// ```\n+    pub UNSAFE_DERIVE_DESERIALIZE,\n+    pedantic,\n+    \"deriving `serde::Deserialize` on a type that has methods using `unsafe`\"\n+}\n+\n+declare_lint_pass!(Derive => [EXPL_IMPL_CLONE_ON_COPY, DERIVE_HASH_XOR_EQ, UNSAFE_DERIVE_DESERIALIZE]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n@@ -76,7 +117,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n \n-            if !is_automatically_derived {\n+            if is_automatically_derived {\n+                check_unsafe_derive_deserialize(cx, item, trait_ref, ty);\n+            } else {\n                 check_copy_clone(cx, item, trait_ref, ty);\n             }\n         }\n@@ -173,3 +216,90 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item<'_>, trait\n         );\n     }\n }\n+\n+/// Implementation of the `UNSAFE_DERIVE_DESERIALIZE` lint.\n+fn check_unsafe_derive_deserialize<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    item: &Item<'_>,\n+    trait_ref: &TraitRef<'_>,\n+    ty: Ty<'tcx>,\n+) {\n+    fn item_from_def_id<'tcx>(cx: &LateContext<'_, 'tcx>, def_id: DefId) -> &'tcx Item<'tcx> {\n+        let hir_id = cx.tcx.hir().as_local_hir_id(def_id).unwrap();\n+        cx.tcx.hir().expect_item(hir_id)\n+    }\n+\n+    fn has_unsafe<'tcx>(cx: &LateContext<'_, 'tcx>, item: &'tcx Item<'_>) -> bool {\n+        let mut visitor = UnsafeVisitor { cx, has_unsafe: false };\n+        walk_item(&mut visitor, item);\n+        visitor.has_unsafe\n+    }\n+\n+    if_chain! {\n+        if match_path(&trait_ref.path, &paths::SERDE_DESERIALIZE);\n+        if let ty::Adt(def, _) = ty.kind;\n+        if def.did.is_local();\n+        if cx.tcx.inherent_impls(def.did)\n+            .iter()\n+            .map(|imp_did| item_from_def_id(cx, *imp_did))\n+            .any(|imp| has_unsafe(cx, imp));\n+        then {\n+            span_lint_and_help(\n+                cx,\n+                UNSAFE_DERIVE_DESERIALIZE,\n+                item.span,\n+                \"you are deriving `serde::Deserialize` on a type that has methods using `unsafe`\",\n+                None,\n+                \"consider implementing `serde::Deserialize` manually. See https://serde.rs/impl-deserialize.html\"\n+            );\n+        }\n+    }\n+}\n+\n+struct UnsafeVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'a, 'tcx>,\n+    has_unsafe: bool,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_fn(&mut self, kind: FnKind<'tcx>, decl: &'tcx FnDecl<'_>, body_id: BodyId, span: Span, id: HirId) {\n+        if self.has_unsafe {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let Some(header) = kind.header();\n+            if let Unsafety::Unsafe = header.unsafety;\n+            then {\n+                self.has_unsafe = true;\n+            }\n+        }\n+\n+        walk_fn(self, kind, decl, body_id, span, id);\n+    }\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if self.has_unsafe {\n+            return;\n+        }\n+\n+        if let ExprKind::Block(block, _) = expr.kind {\n+            match block.rules {\n+                BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided)\n+                | BlockCheckMode::PushUnsafeBlock(UnsafeSource::UserProvided)\n+                | BlockCheckMode::PopUnsafeBlock(UnsafeSource::UserProvided) => {\n+                    self.has_unsafe = true;\n+                },\n+                _ => {},\n+            }\n+        }\n+\n+        walk_expr(self, expr);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.cx.tcx.hir())\n+    }\n+}"}, {"sha": "c04e0884b196a94a56125d4ca23abb1411932eaf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1336558818f763295309a6b0466f982f773cd6f5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336558818f763295309a6b0466f982f773cd6f5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1336558818f763295309a6b0466f982f773cd6f5", "patch": "@@ -520,6 +520,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &dereference::EXPLICIT_DEREF_METHODS,\n         &derive::DERIVE_HASH_XOR_EQ,\n         &derive::EXPL_IMPL_CLONE_ON_COPY,\n+        &derive::UNSAFE_DERIVE_DESERIALIZE,\n         &doc::DOC_MARKDOWN,\n         &doc::MISSING_ERRORS_DOC,\n         &doc::MISSING_SAFETY_DOC,\n@@ -1105,6 +1106,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&default_trait_access::DEFAULT_TRAIT_ACCESS),\n         LintId::of(&dereference::EXPLICIT_DEREF_METHODS),\n         LintId::of(&derive::EXPL_IMPL_CLONE_ON_COPY),\n+        LintId::of(&derive::UNSAFE_DERIVE_DESERIALIZE),\n         LintId::of(&doc::DOC_MARKDOWN),\n         LintId::of(&doc::MISSING_ERRORS_DOC),\n         LintId::of(&empty_enum::EMPTY_ENUM),"}, {"sha": "24a1bdf1883f6b86edbe53f755d8a26821ca4265", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1336558818f763295309a6b0466f982f773cd6f5/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336558818f763295309a6b0466f982f773cd6f5/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=1336558818f763295309a6b0466f982f773cd6f5", "patch": "@@ -49,7 +49,7 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n /// Use this if you want to provide some general help but\n /// can't provide a specific machine applicable suggestion.\n ///\n-/// The `help` message is not attached to any `Span`.\n+/// The `help` message can be optionally attached to a `Span`.\n ///\n /// # Example\n ///"}, {"sha": "a0543a8dcf9859235978ae9c2ef9a32416c6c387", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1336558818f763295309a6b0466f982f773cd6f5/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336558818f763295309a6b0466f982f773cd6f5/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=1336558818f763295309a6b0466f982f773cd6f5", "patch": "@@ -241,7 +241,7 @@ pub fn match_path(path: &Path<'_>, segments: &[&str]) -> bool {\n ///\n /// # Examples\n /// ```rust,ignore\n-/// match_qpath(path, &[\"std\", \"rt\", \"begin_unwind\"])\n+/// match_path_ast(path, &[\"std\", \"rt\", \"begin_unwind\"])\n /// ```\n pub fn match_path_ast(path: &ast::Path, segments: &[&str]) -> bool {\n     path.segments"}, {"sha": "f85845be56dccd109a78e24d3937e2e8a7679de1", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1336558818f763295309a6b0466f982f773cd6f5/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336558818f763295309a6b0466f982f773cd6f5/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=1336558818f763295309a6b0466f982f773cd6f5", "patch": "@@ -108,6 +108,7 @@ pub const RESULT_ERR: [&str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n pub const RESULT_OK: [&str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];\n pub const RWLOCK_READ_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockReadGuard\"];\n pub const RWLOCK_WRITE_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockWriteGuard\"];\n+pub const SERDE_DESERIALIZE: [&str; 2] = [\"_serde\", \"Deserialize\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const SLICE_INTO_VEC: [&str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n pub const SLICE_ITER: [&str; 3] = [\"core\", \"slice\", \"Iter\"];"}, {"sha": "9b3f0d7182bfb0963533461e73ece0c66ec48794", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1336558818f763295309a6b0466f982f773cd6f5/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336558818f763295309a6b0466f982f773cd6f5/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=1336558818f763295309a6b0466f982f773cd6f5", "patch": "@@ -2334,6 +2334,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"literal_representation\",\n     },\n+    Lint {\n+        name: \"unsafe_derive_deserialize\",\n+        group: \"pedantic\",\n+        desc: \"deriving `serde::Deserialize` on a type that has methods using `unsafe`\",\n+        deprecation: None,\n+        module: \"derive\",\n+    },\n     Lint {\n         name: \"unsafe_removed_from_name\",\n         group: \"style\","}, {"sha": "7bee9c499e1f32373090b85cdbd4dcf5755f832d", "filename": "tests/ui/unsafe_derive_deserialize.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1336558818f763295309a6b0466f982f773cd6f5/tests%2Fui%2Funsafe_derive_deserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336558818f763295309a6b0466f982f773cd6f5/tests%2Fui%2Funsafe_derive_deserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_derive_deserialize.rs?ref=1336558818f763295309a6b0466f982f773cd6f5", "patch": "@@ -0,0 +1,60 @@\n+#![warn(clippy::unsafe_derive_deserialize)]\n+#![allow(unused, clippy::missing_safety_doc)]\n+\n+extern crate serde;\n+\n+use serde::Deserialize;\n+\n+#[derive(Deserialize)]\n+pub struct A {}\n+impl A {\n+    pub unsafe fn new(_a: i32, _b: i32) -> Self {\n+        Self {}\n+    }\n+}\n+\n+#[derive(Deserialize)]\n+pub struct B {}\n+impl B {\n+    pub unsafe fn unsafe_method(&self) {}\n+}\n+\n+#[derive(Deserialize)]\n+pub struct C {}\n+impl C {\n+    pub fn unsafe_block(&self) {\n+        unsafe {}\n+    }\n+}\n+\n+#[derive(Deserialize)]\n+pub struct D {}\n+impl D {\n+    pub fn inner_unsafe_fn(&self) {\n+        unsafe fn inner() {}\n+    }\n+}\n+\n+// Does not derive `Deserialize`, should be ignored\n+pub struct E {}\n+impl E {\n+    pub unsafe fn new(_a: i32, _b: i32) -> Self {\n+        Self {}\n+    }\n+\n+    pub unsafe fn unsafe_method(&self) {}\n+\n+    pub fn unsafe_block(&self) {\n+        unsafe {}\n+    }\n+\n+    pub fn inner_unsafe_fn(&self) {\n+        unsafe fn inner() {}\n+    }\n+}\n+\n+// Does not have methods using `unsafe`, should be ignored\n+#[derive(Deserialize)]\n+pub struct F {}\n+\n+fn main() {}"}, {"sha": "1978bd95a67035f6b90403927757fd84dfa63cd3", "filename": "tests/ui/unsafe_derive_deserialize.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1336558818f763295309a6b0466f982f773cd6f5/tests%2Fui%2Funsafe_derive_deserialize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1336558818f763295309a6b0466f982f773cd6f5/tests%2Fui%2Funsafe_derive_deserialize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_derive_deserialize.stderr?ref=1336558818f763295309a6b0466f982f773cd6f5", "patch": "@@ -0,0 +1,39 @@\n+error: you are deriving `serde::Deserialize` on a type that has methods using `unsafe`\n+  --> $DIR/unsafe_derive_deserialize.rs:8:10\n+   |\n+LL | #[derive(Deserialize)]\n+   |          ^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unsafe-derive-deserialize` implied by `-D warnings`\n+   = help: consider implementing `serde::Deserialize` manually. See https://serde.rs/impl-deserialize.html\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: you are deriving `serde::Deserialize` on a type that has methods using `unsafe`\n+  --> $DIR/unsafe_derive_deserialize.rs:16:10\n+   |\n+LL | #[derive(Deserialize)]\n+   |          ^^^^^^^^^^^\n+   |\n+   = help: consider implementing `serde::Deserialize` manually. See https://serde.rs/impl-deserialize.html\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: you are deriving `serde::Deserialize` on a type that has methods using `unsafe`\n+  --> $DIR/unsafe_derive_deserialize.rs:22:10\n+   |\n+LL | #[derive(Deserialize)]\n+   |          ^^^^^^^^^^^\n+   |\n+   = help: consider implementing `serde::Deserialize` manually. See https://serde.rs/impl-deserialize.html\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: you are deriving `serde::Deserialize` on a type that has methods using `unsafe`\n+  --> $DIR/unsafe_derive_deserialize.rs:30:10\n+   |\n+LL | #[derive(Deserialize)]\n+   |          ^^^^^^^^^^^\n+   |\n+   = help: consider implementing `serde::Deserialize` manually. See https://serde.rs/impl-deserialize.html\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 4 previous errors\n+"}]}