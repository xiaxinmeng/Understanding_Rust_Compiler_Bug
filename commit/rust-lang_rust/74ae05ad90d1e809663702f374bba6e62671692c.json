{"sha": "74ae05ad90d1e809663702f374bba6e62671692c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YWUwNWFkOTBkMWU4MDk2NjM3MDJmMzc0YmJhNmU2MjY3MTY5MmM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-08-05T22:13:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-08-06T00:02:55Z"}, "message": "syntax: Handle \\r\\n in byte string literals\n\nThis ended up passing through the lexer but dying later on in parsing when it\nwasn't handled. The strategy taken was to copy the `str_lit` funciton, but adapt\nit for bytes.\n\nCloses #16278", "tree": {"sha": "a5348b2b49958d8e3be793c28582223e63984bae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5348b2b49958d8e3be793c28582223e63984bae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74ae05ad90d1e809663702f374bba6e62671692c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74ae05ad90d1e809663702f374bba6e62671692c", "html_url": "https://github.com/rust-lang/rust/commit/74ae05ad90d1e809663702f374bba6e62671692c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74ae05ad90d1e809663702f374bba6e62671692c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6da38890f1f734799dc06460edf26c560db59a8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6da38890f1f734799dc06460edf26c560db59a8e", "html_url": "https://github.com/rust-lang/rust/commit/6da38890f1f734799dc06460edf26c560db59a8e"}], "stats": {"total": 77, "additions": 59, "deletions": 18}, "files": [{"sha": "5b70ed609d98f05ff06ca31cb2901a57107a1796", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/74ae05ad90d1e809663702f374bba6e62671692c/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ae05ad90d1e809663702f374bba6e62671692c/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=74ae05ad90d1e809663702f374bba6e62671692c", "patch": "@@ -21,6 +21,7 @@ use std::gc::Gc;\n use std::io::File;\n use std::rc::Rc;\n use std::str;\n+use std::iter;\n \n pub mod lexer;\n pub mod parser;\n@@ -327,7 +328,7 @@ pub fn str_lit(lit: &str) -> String {\n     let error = |i| format!(\"lexer should have rejected {} at {}\", lit, i);\n \n     /// Eat everything up to a non-whitespace\n-    fn eat<'a>(it: &mut ::std::iter::Peekable<(uint, char), ::std::str::CharOffsets<'a>>) {\n+    fn eat<'a>(it: &mut iter::Peekable<(uint, char), str::CharOffsets<'a>>) {\n         loop {\n             match it.peek().map(|x| x.val1()) {\n                 Some(' ') | Some('\\n') | Some('\\r') | Some('\\t') => {\n@@ -471,35 +472,54 @@ pub fn binary_lit(lit: &str) -> Rc<Vec<u8>> {\n     // FIXME #8372: This could be a for-loop if it didn't borrow the iterator\n     let error = |i| format!(\"lexer should have rejected {} at {}\", lit, i);\n \n+    /// Eat everything up to a non-whitespace\n+    fn eat<'a, I: Iterator<(uint, u8)>>(it: &mut iter::Peekable<(uint, u8), I>) {\n+        loop {\n+            match it.peek().map(|x| x.val1()) {\n+                Some(b' ') | Some(b'\\n') | Some(b'\\r') | Some(b'\\t') => {\n+                    it.next();\n+                },\n+                _ => { break; }\n+            }\n+        }\n+    }\n+\n     // binary literals *must* be ASCII, but the escapes don't have to be\n-    let mut chars = lit.as_bytes().iter().enumerate().peekable();\n+    let mut chars = lit.bytes().enumerate().peekable();\n     loop {\n         match chars.next() {\n-            Some((i, &c)) => {\n-                if c == b'\\\\' {\n-                    if *chars.peek().expect(error(i).as_slice()).val1() == b'\\n' {\n-                        loop {\n-                            // eat everything up to a non-whitespace\n-                            match chars.peek().map(|x| *x.val1()) {\n-                                Some(b' ') | Some(b'\\n') | Some(b'\\r') | Some(b'\\t') => {\n-                                    chars.next();\n-                                },\n-                                _ => { break; }\n-                            }\n+            Some((i, b'\\\\')) => {\n+                let em = error(i);\n+                match chars.peek().expect(em.as_slice()).val1() {\n+                    b'\\n' => eat(&mut chars),\n+                    b'\\r' => {\n+                        chars.next();\n+                        if chars.peek().expect(em.as_slice()).val1() != b'\\n' {\n+                            fail!(\"lexer accepted bare CR\");\n                         }\n-                    } else {\n+                        eat(&mut chars);\n+                    }\n+                    _ => {\n                         // otherwise, a normal escape\n                         let (c, n) = byte_lit(lit.slice_from(i));\n-                        for _ in range(0, n - 1) { // we don't need to move past the first \\\n+                        // we don't need to move past the first \\\n+                        for _ in range(0, n - 1) {\n                             chars.next();\n                         }\n                         res.push(c);\n                     }\n-                } else {\n-                    res.push(c);\n                 }\n             },\n-            None => { break; }\n+            Some((i, b'\\r')) => {\n+                let em = error(i);\n+                if chars.peek().expect(em.as_slice()).val1() != b'\\n' {\n+                    fail!(\"lexer accepted bare CR\");\n+                }\n+                chars.next();\n+                res.push(b'\\n');\n+            }\n+            Some((_, c)) => res.push(c),\n+            None => break,\n         }\n     }\n "}, {"sha": "46db548a8c49799dc191fe556631f0aad566bc2a", "filename": "src/test/run-pass/.gitattributes", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74ae05ad90d1e809663702f374bba6e62671692c/src%2Ftest%2Frun-pass%2F.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/74ae05ad90d1e809663702f374bba6e62671692c/src%2Ftest%2Frun-pass%2F.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2F.gitattributes?ref=74ae05ad90d1e809663702f374bba6e62671692c", "patch": "@@ -1 +1,2 @@\n lexer-crlf-line-endings-string-literal-doc-comment.rs -text\n+issue-16278.rs -text"}, {"sha": "f92426d204c0df564cfa87399dc8c479b3b5004f", "filename": "src/test/run-pass/issue-16278.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/74ae05ad90d1e809663702f374bba6e62671692c/src%2Ftest%2Frun-pass%2Fissue-16278.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74ae05ad90d1e809663702f374bba6e62671692c/src%2Ftest%2Frun-pass%2Fissue-16278.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16278.rs?ref=74ae05ad90d1e809663702f374bba6e62671692c", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-cr\n+\n+// this file has some special \\r\\n endings (use xxd to see them)\n+\n+fn main() {assert_eq!(b\"\", b\"\\\r\n+                                   \");\n+assert_eq!(b\"\\n\", b\"\r\n+\");\n+}\n+"}]}