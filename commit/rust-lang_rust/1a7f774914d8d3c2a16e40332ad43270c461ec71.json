{"sha": "1a7f774914d8d3c2a16e40332ad43270c461ec71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhN2Y3NzQ5MTRkOGQzYzJhMTZlNDAzMzJhZDQzMjcwYzQ2MWVjNzE=", "commit": {"author": {"name": "tyler", "email": "tyler@brainiumstudios.com", "date": "2019-05-11T00:29:43Z"}, "committer": {"name": "tyler", "email": "tyler@brainiumstudios.com", "date": "2019-05-15T14:30:34Z"}, "message": "- remove unnecessary inlines\n- add comment explaining that the fast::Key data structure was carefully constructed for fast access on OSX\n- remove inline(never) from the initializer for types where `needs_drop::<T>()` is false", "tree": {"sha": "86f7883cd830bc7fc31f10f017c1f9e597419c1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f7883cd830bc7fc31f10f017c1f9e597419c1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a7f774914d8d3c2a16e40332ad43270c461ec71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7f774914d8d3c2a16e40332ad43270c461ec71", "html_url": "https://github.com/rust-lang/rust/commit/1a7f774914d8d3c2a16e40332ad43270c461ec71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a7f774914d8d3c2a16e40332ad43270c461ec71/comments", "author": {"login": "mtak-", "id": 6643140, "node_id": "MDQ6VXNlcjY2NDMxNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6643140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mtak-", "html_url": "https://github.com/mtak-", "followers_url": "https://api.github.com/users/mtak-/followers", "following_url": "https://api.github.com/users/mtak-/following{/other_user}", "gists_url": "https://api.github.com/users/mtak-/gists{/gist_id}", "starred_url": "https://api.github.com/users/mtak-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mtak-/subscriptions", "organizations_url": "https://api.github.com/users/mtak-/orgs", "repos_url": "https://api.github.com/users/mtak-/repos", "events_url": "https://api.github.com/users/mtak-/events{/privacy}", "received_events_url": "https://api.github.com/users/mtak-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mtak-", "id": 6643140, "node_id": "MDQ6VXNlcjY2NDMxNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6643140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mtak-", "html_url": "https://github.com/mtak-", "followers_url": "https://api.github.com/users/mtak-/followers", "following_url": "https://api.github.com/users/mtak-/following{/other_user}", "gists_url": "https://api.github.com/users/mtak-/gists{/gist_id}", "starred_url": "https://api.github.com/users/mtak-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mtak-/subscriptions", "organizations_url": "https://api.github.com/users/mtak-/orgs", "repos_url": "https://api.github.com/users/mtak-/repos", "events_url": "https://api.github.com/users/mtak-/events{/privacy}", "received_events_url": "https://api.github.com/users/mtak-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "060d8bb6b014f9e9c8b697c5ecd6d86159f122b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/060d8bb6b014f9e9c8b697c5ecd6d86159f122b9", "html_url": "https://github.com/rust-lang/rust/commit/060d8bb6b014f9e9c8b697c5ecd6d86159f122b9"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "e6f096a8da539bea76b1b2431c800262af18fb42", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1a7f774914d8d3c2a16e40332ad43270c461ec71/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7f774914d8d3c2a16e40332ad43270c461ec71/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=1a7f774914d8d3c2a16e40332ad43270c461ec71", "patch": "@@ -275,7 +275,6 @@ mod lazy {\n             }\n         }\n \n-        #[inline]\n         pub unsafe fn get(&self) -> Option<&'static T> {\n             (*self.inner.get()).as_ref()\n         }\n@@ -346,7 +345,6 @@ pub mod statik {\n             }\n         }\n \n-        #[inline]\n         pub unsafe fn get(&self, init: fn() -> T) -> Option<&'static T> {\n             let value = match self.inner.get() {\n                 Some(ref value) => value,\n@@ -373,6 +371,11 @@ pub mod fast {\n         RunningOrHasRun,\n     }\n \n+    // This data structure has been carefully constructed so that the fast path\n+    // only contains one branch on x86. That optimization is necessary to avoid\n+    // duplicated tls lookups on OSX.\n+    // \n+    // LLVM issue: https://bugs.llvm.org/show_bug.cgi?id=41722\n     pub struct Key<T> {\n         // If `LazyKeyInner::get` returns `None`, that indicates either:\n         //   * The value has never been initialized\n@@ -403,38 +406,32 @@ pub mod fast {\n             }\n         }\n \n-        #[inline]\n         pub unsafe fn get<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {\n             match self.inner.get() {\n                 Some(val) => Some(val),\n-                None => {\n-                    if mem::needs_drop::<T>() {\n-                        self.try_initialize_drop(init)\n-                    } else {\n-                        Some(self.try_initialize_nodrop(init))\n-                    }\n-                }\n+                None => self.try_initialize(init),\n             }\n         }\n \n-        // `try_initialize_nodrop` is only called once per fast thread local\n-        // variable, except in corner cases where it is being recursively\n-        // initialized.\n-        //\n-        // Macos: Inlining this function causes two `tlv_get_addr` calls to be\n-        // performed for every call to `Key::get`.\n-        // LLVM issue: https://bugs.llvm.org/show_bug.cgi?id=41722\n-        #[inline(never)]\n+        // `try_initialize` is only called once per fast thread local variable,\n+        // except in corner cases where it is being recursively initialized.\n         #[cold]\n-        unsafe fn try_initialize_nodrop<F: FnOnce() -> T>(&self, init: F) -> &'static T {\n-            self.inner.initialize(init)\n+        unsafe fn try_initialize<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {\n+            if mem::needs_drop::<T>() {\n+                self.try_initialize_drop(init)\n+            } else {\n+                Some(self.inner.initialize(init))\n+            }\n         }\n \n         // `try_initialize_drop` is only called once per fast thread local\n         // variable, except in corner cases where thread_local dtors reference\n         // other thread_local's, or it is being recursively initialized.\n+        //\n+        // Macos: Inlining this function causes two `tlv_get_addr` calls to be\n+        // performed for every call to `Key::get`.\n+        // LLVM issue: https://bugs.llvm.org/show_bug.cgi?id=41722\n         #[inline(never)]\n-        #[cold]\n         unsafe fn try_initialize_drop<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {\n             // We don't put a `needs_drop` check around this and call it a day\n             // because this function is not inlined. Unwrapping code gets"}]}