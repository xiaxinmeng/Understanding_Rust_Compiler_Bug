{"sha": "ef434f04e9629132f59d3f90fac0d4cc797166e8", "node_id": "C_kwDOAAsO6NoAKGVmNDM0ZjA0ZTk2MjkxMzJmNTlkM2Y5MGZhYzBkNGNjNzk3MTY2ZTg", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-27T12:54:11Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-27T12:54:11Z"}, "message": "Allow using `bool` for optional diagnostics", "tree": {"sha": "4db93097a3c4bb1e890d4fb764cf8c79888ed787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4db93097a3c4bb1e890d4fb764cf8c79888ed787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef434f04e9629132f59d3f90fac0d4cc797166e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef434f04e9629132f59d3f90fac0d4cc797166e8", "html_url": "https://github.com/rust-lang/rust/commit/ef434f04e9629132f59d3f90fac0d4cc797166e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef434f04e9629132f59d3f90fac0d4cc797166e8/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39", "html_url": "https://github.com/rust-lang/rust/commit/49b9cc5139dd4d11ef78dc08c1f9170de5b1ca39"}], "stats": {"total": 122, "additions": 77, "deletions": 45}, "files": [{"sha": "7fbe3bc2888c3ca768699c44f7a6f9f549ef4b81", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef434f04e9629132f59d3f90fac0d4cc797166e8/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef434f04e9629132f59d3f90fac0d4cc797166e8/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=ef434f04e9629132f59d3f90fac0d4cc797166e8", "patch": "@@ -6,8 +6,8 @@ use crate::diagnostics::error::{\n };\n use crate::diagnostics::utils::{\n     build_field_mapping, is_doc_comment, report_error_if_not_applied_to_span, report_type_error,\n-    should_generate_set_arg, type_is_unit, type_matches_path, FieldInfo, FieldInnerTy, FieldMap,\n-    HasFieldMap, SetOnce, SpannedOption, SubdiagnosticKind,\n+    should_generate_set_arg, type_is_bool, type_is_unit, type_matches_path, FieldInfo,\n+    FieldInnerTy, FieldMap, HasFieldMap, SetOnce, SpannedOption, SubdiagnosticKind,\n };\n use proc_macro2::{Ident, Span, TokenStream};\n use quote::{format_ident, quote};\n@@ -414,12 +414,15 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n                 Ok(self.add_spanned_subdiagnostic(binding, &fn_ident, slug))\n             }\n             SubdiagnosticKind::Note | SubdiagnosticKind::Help | SubdiagnosticKind::Warn => {\n-                if type_matches_path(info.ty.inner_type(), &[\"rustc_span\", \"Span\"]) {\n+                let inner = info.ty.inner_type();\n+                if type_matches_path(inner, &[\"rustc_span\", \"Span\"]) {\n                     Ok(self.add_spanned_subdiagnostic(binding, &fn_ident, slug))\n-                } else if type_is_unit(info.ty.inner_type()) {\n+                } else if type_is_unit(inner)\n+                    || (matches!(info.ty, FieldInnerTy::Plain(_)) && type_is_bool(inner))\n+                {\n                     Ok(self.add_subdiagnostic(&fn_ident, slug))\n                 } else {\n-                    report_type_error(attr, \"`Span` or `()`\")?\n+                    report_type_error(attr, \"`Span`, `bool` or `()`\")?\n                 }\n             }\n             SubdiagnosticKind::Suggestion {"}, {"sha": "65bb154d7f39d396a0e23bc611c043b9b9f891e1", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ef434f04e9629132f59d3f90fac0d4cc797166e8/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef434f04e9629132f59d3f90fac0d4cc797166e8/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=ef434f04e9629132f59d3f90fac0d4cc797166e8", "patch": "@@ -50,6 +50,11 @@ pub(crate) fn type_is_unit(ty: &Type) -> bool {\n     if let Type::Tuple(TypeTuple { elems, .. }) = ty { elems.is_empty() } else { false }\n }\n \n+/// Checks whether the type `ty` is `bool`.\n+pub(crate) fn type_is_bool(ty: &Type) -> bool {\n+    type_matches_path(ty, &[\"bool\"])\n+}\n+\n /// Reports a type error for field with `attr`.\n pub(crate) fn report_type_error(\n     attr: &Attribute,\n@@ -192,6 +197,11 @@ impl<'ty> FieldInnerTy<'ty> {\n                     #inner\n                 }\n             },\n+            FieldInnerTy::Plain(t) if type_is_bool(t) => quote! {\n+                if #binding {\n+                    #inner\n+                }\n+            },\n             FieldInnerTy::Plain(..) => quote! { #inner },\n         }\n     }"}, {"sha": "3151c712566af1077e8642e19f31f51e7cb6b7a3", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef434f04e9629132f59d3f90fac0d4cc797166e8/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef434f04e9629132f59d3f90fac0d4cc797166e8/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=ef434f04e9629132f59d3f90fac0d4cc797166e8", "patch": "@@ -513,6 +513,19 @@ struct OptUnitField {\n     bar: Option<()>,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(no_crate_example)]\n+struct BoolField {\n+    #[primary_span]\n+    spans: Span,\n+    #[help]\n+    foo: bool,\n+    #[help(no_crate_help)]\n+    //~^ ERROR the `#[help(...)]` attribute can only be applied to fields of type `Span`, `bool` or `()`\n+    // only allow plain 'bool' fields\n+    bar: Option<bool>,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(no_crate_example, code = \"E0123\")]\n struct LabelWithTrailingPath {"}, {"sha": "513b675e5dd41223409f71370e04cf1849a4d598", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 46, "deletions": 40, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/ef434f04e9629132f59d3f90fac0d4cc797166e8/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef434f04e9629132f59d3f90fac0d4cc797166e8/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=ef434f04e9629132f59d3f90fac0d4cc797166e8", "patch": "@@ -352,42 +352,48 @@ error: invalid applicability\n LL |     #[suggestion(no_crate_suggestion, code = \"...\", applicability = \"batman\")]\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: the `#[help(...)]` attribute can only be applied to fields of type `Span`, `bool` or `()`\n+  --> $DIR/diagnostic-derive.rs:523:5\n+   |\n+LL |     #[help(no_crate_help)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n error: `#[label(foo)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:519:29\n+  --> $DIR/diagnostic-derive.rs:532:29\n    |\n LL |     #[label(no_crate_label, foo)]\n    |                             ^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: `#[label(foo = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:527:29\n+  --> $DIR/diagnostic-derive.rs:540:29\n    |\n LL |     #[label(no_crate_label, foo = \"...\")]\n    |                             ^^^^^^^^^^^\n \n error: `#[label(foo(...))]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:535:29\n+  --> $DIR/diagnostic-derive.rs:548:29\n    |\n LL |     #[label(no_crate_label, foo(\"...\"))]\n    |                             ^^^^^^^^^^\n \n error: `#[primary_span]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:547:5\n+  --> $DIR/diagnostic-derive.rs:560:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: the `primary_span` field attribute is not valid for lint diagnostics\n \n error: `#[error(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:567:1\n+  --> $DIR/diagnostic-derive.rs:580:1\n    |\n LL | #[error(no_crate_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:567:1\n+  --> $DIR/diagnostic-derive.rs:580:1\n    |\n LL | / #[error(no_crate_example, code = \"E0123\")]\n LL | |\n@@ -399,13 +405,13 @@ LL | | struct ErrorAttribute {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[warn_(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:574:1\n+  --> $DIR/diagnostic-derive.rs:587:1\n    |\n LL | #[warn_(no_crate_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:574:1\n+  --> $DIR/diagnostic-derive.rs:587:1\n    |\n LL | / #[warn_(no_crate_example, code = \"E0123\")]\n LL | |\n@@ -417,13 +423,13 @@ LL | | struct WarnAttribute {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:581:1\n+  --> $DIR/diagnostic-derive.rs:594:1\n    |\n LL | #[lint(no_crate_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:581:1\n+  --> $DIR/diagnostic-derive.rs:594:1\n    |\n LL | / #[lint(no_crate_example, code = \"E0123\")]\n LL | |\n@@ -435,19 +441,19 @@ LL | | struct LintAttributeOnSessionDiag {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:588:1\n+  --> $DIR/diagnostic-derive.rs:601:1\n    |\n LL | #[lint(no_crate_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:588:1\n+  --> $DIR/diagnostic-derive.rs:601:1\n    |\n LL | #[lint(no_crate_example, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:588:1\n+  --> $DIR/diagnostic-derive.rs:601:1\n    |\n LL | / #[lint(no_crate_example, code = \"E0123\")]\n LL | |\n@@ -460,137 +466,137 @@ LL | | struct LintAttributeOnLintDiag {}\n    = help: specify the slug as the first argument to the attribute, such as `#[diag(compiletest_example)]`\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:598:53\n+  --> $DIR/diagnostic-derive.rs:611:53\n    |\n LL |     #[suggestion(no_crate_suggestion, code = \"...\", code = \",,,\")]\n    |                                                     ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:598:39\n+  --> $DIR/diagnostic-derive.rs:611:39\n    |\n LL |     #[suggestion(no_crate_suggestion, code = \"...\", code = \",,,\")]\n    |                                       ^^^^^^^^^^^^\n \n error: wrong types for suggestion\n-  --> $DIR/diagnostic-derive.rs:607:24\n+  --> $DIR/diagnostic-derive.rs:620:24\n    |\n LL |     suggestion: (Span, usize),\n    |                        ^^^^^\n    |\n    = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n \n error: wrong types for suggestion\n-  --> $DIR/diagnostic-derive.rs:615:17\n+  --> $DIR/diagnostic-derive.rs:628:17\n    |\n LL |     suggestion: (Span,),\n    |                 ^^^^^^^\n    |\n    = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:622:5\n+  --> $DIR/diagnostic-derive.rs:635:5\n    |\n LL |     #[suggestion(no_crate_suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:629:1\n+  --> $DIR/diagnostic-derive.rs:642:1\n    |\n LL | #[multipart_suggestion(no_crate_suggestion)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:632:1\n+  --> $DIR/diagnostic-derive.rs:645:1\n    |\n LL | #[multipart_suggestion()]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:636:5\n+  --> $DIR/diagnostic-derive.rs:649:5\n    |\n LL |     #[multipart_suggestion(no_crate_suggestion)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:644:1\n+  --> $DIR/diagnostic-derive.rs:657:1\n    |\n LL | #[suggestion(no_crate_suggestion, code = \"...\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[label]` and `#[suggestion]` can only be applied to fields\n \n error: `#[label]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:653:1\n+  --> $DIR/diagnostic-derive.rs:666:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n    |\n    = help: `#[label]` and `#[suggestion]` can only be applied to fields\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:687:5\n+  --> $DIR/diagnostic-derive.rs:700:5\n    |\n LL |     #[subdiagnostic(bad)]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:695:5\n+  --> $DIR/diagnostic-derive.rs:708:5\n    |\n LL |     #[subdiagnostic = \"bad\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:703:5\n+  --> $DIR/diagnostic-derive.rs:716:5\n    |\n LL |     #[subdiagnostic(bad, bad)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:711:5\n+  --> $DIR/diagnostic-derive.rs:724:5\n    |\n LL |     #[subdiagnostic(\"bad\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:719:5\n+  --> $DIR/diagnostic-derive.rs:732:5\n    |\n LL |     #[subdiagnostic(eager)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: eager subdiagnostics are not supported on lints\n \n error: expected at least one string literal for `code(...)`\n-  --> $DIR/diagnostic-derive.rs:777:18\n+  --> $DIR/diagnostic-derive.rs:790:18\n    |\n LL |     #[suggestion(code())]\n    |                  ^^^^^^\n \n error: `code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:785:23\n+  --> $DIR/diagnostic-derive.rs:798:23\n    |\n LL |     #[suggestion(code(foo))]\n    |                       ^^^\n \n error: `code = \"...\"`/`code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:793:18\n+  --> $DIR/diagnostic-derive.rs:806:18\n    |\n LL |     #[suggestion(code = 3)]\n    |                  ^^^^^^^^\n \n error: `#[suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:808:5\n+  --> $DIR/diagnostic-derive.rs:821:5\n    |\n LL |     #[suggestion(no_crate_suggestion, code = \"\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -612,43 +618,43 @@ LL |     #[nonsense]\n    |       ^^^^^^^^\n \n error: cannot find attribute `error` in this scope\n-  --> $DIR/diagnostic-derive.rs:567:3\n+  --> $DIR/diagnostic-derive.rs:580:3\n    |\n LL | #[error(no_crate_example, code = \"E0123\")]\n    |   ^^^^^\n \n error: cannot find attribute `warn_` in this scope\n-  --> $DIR/diagnostic-derive.rs:574:3\n+  --> $DIR/diagnostic-derive.rs:587:3\n    |\n LL | #[warn_(no_crate_example, code = \"E0123\")]\n    |   ^^^^^ help: a built-in attribute with a similar name exists: `warn`\n \n error: cannot find attribute `lint` in this scope\n-  --> $DIR/diagnostic-derive.rs:581:3\n+  --> $DIR/diagnostic-derive.rs:594:3\n    |\n LL | #[lint(no_crate_example, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `lint` in this scope\n-  --> $DIR/diagnostic-derive.rs:588:3\n+  --> $DIR/diagnostic-derive.rs:601:3\n    |\n LL | #[lint(no_crate_example, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:629:3\n+  --> $DIR/diagnostic-derive.rs:642:3\n    |\n LL | #[multipart_suggestion(no_crate_suggestion)]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:632:3\n+  --> $DIR/diagnostic-derive.rs:645:3\n    |\n LL | #[multipart_suggestion()]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:636:7\n+  --> $DIR/diagnostic-derive.rs:649:7\n    |\n LL |     #[multipart_suggestion(no_crate_suggestion)]\n    |       ^^^^^^^^^^^^^^^^^^^^\n@@ -670,7 +676,7 @@ note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n   --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:LL:CC\n    = note: this error originates in the derive macro `Diagnostic` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 84 previous errors\n+error: aborting due to 85 previous errors\n \n Some errors have detailed explanations: E0277, E0425.\n For more information about an error, try `rustc --explain E0277`."}]}