{"sha": "29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YTgzODZiYjNiN2ZmODQzNGY0YjFiNWJlMGZkNTFhNDhkOTNiYjM=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-01-10T18:42:59Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-01-10T18:43:47Z"}, "message": "use structured suggestion when casting a reference", "tree": {"sha": "45fc74e65dc17663a8cfebfbbf3f3fd64c09c39d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45fc74e65dc17663a8cfebfbbf3f3fd64c09c39d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlw3kn8WHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdOyJB/4yz+C2+BQZfe3YjWLMfvML6Y0R\nazewB2QaP5mqjZN+XMUWVK7olAr02arnYBL/NeFDcxlNur3Dagjgz+taf2eIDSUL\nsexK9bV17QP5Yyc8vEloKMPH+gM8Fddf99NXuQfQ1CmPI8fTEEMEhbetJZePpoWz\na1w7GWsE+Jl0sN+OOP1Jvj1Mc6kEC3OR76UwTS5LodH/0vIJC/ldHXMZX0XW5bce\nrXYL9gj6ueuiOGXxfTlVYUCJhPkImeN0/zbBSnFN4z8NqTRbZGgUqNtVKvysOUNY\n8JuM83np9oP8czVkJwuAVVRy7YqPjRIeSEqVHWHGZkz2ELB8yTOa8Fk5gmmK\n=61Pt\n-----END PGP SIGNATURE-----", "payload": "tree 45fc74e65dc17663a8cfebfbbf3f3fd64c09c39d\nparent 6ecad338381cc3b8d56e2df22e5971a598eddd6c\nauthor Andy Russell <arussell123@gmail.com> 1547145779 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1547145827 -0500\n\nuse structured suggestion when casting a reference\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3", "html_url": "https://github.com/rust-lang/rust/commit/29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ecad338381cc3b8d56e2df22e5971a598eddd6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecad338381cc3b8d56e2df22e5971a598eddd6c", "html_url": "https://github.com/rust-lang/rust/commit/6ecad338381cc3b8d56e2df22e5971a598eddd6c"}], "stats": {"total": 43, "additions": 20, "deletions": 23}, "files": [{"sha": "fbba89164e6db89a52ff18b1b8eb7b8946f7157d", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3", "patch": "@@ -213,8 +213,14 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                                        fcx.ty_to_string(self.expr_ty),\n                                        cast_ty));\n                 if let Ok(snippet) = fcx.sess().source_map().span_to_snippet(self.expr.span) {\n-                    err.span_help(self.expr.span,\n-                        &format!(\"did you mean `*{}`?\", snippet));\n+                    err.span_suggestion_with_applicability(\n+                        self.expr.span,\n+                        \"dereference the expression\",\n+                        format!(\"*{}\", snippet),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else {\n+                    err.span_help(self.expr.span, \"dereference the expression with `*`\");\n                 }\n                 err.emit();\n             }"}, {"sha": "89ec4896a2b4329b459efcc30c9fe5a41b9f60d9", "filename": "src/test/ui/error-codes/E0606.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3/src%2Ftest%2Fui%2Ferror-codes%2FE0606.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3/src%2Ftest%2Fui%2Ferror-codes%2FE0606.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0606.stderr?ref=29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3", "patch": "@@ -2,13 +2,10 @@ error[E0606]: casting `&u8` as `u8` is invalid\n   --> $DIR/E0606.rs:2:5\n    |\n LL |     &0u8 as u8; //~ ERROR E0606\n-   |     ^^^^^^^^^^ cannot cast `&u8` as `u8`\n-   |\n-help: did you mean `*&0u8`?\n-  --> $DIR/E0606.rs:2:5\n-   |\n-LL |     &0u8 as u8; //~ ERROR E0606\n-   |     ^^^^\n+   |     ----^^^^^^\n+   |     |\n+   |     cannot cast `&u8` as `u8`\n+   |     help: dereference the expression: `*&0u8`\n \n error: aborting due to previous error\n "}, {"sha": "ef7b49399bf3ab58e0250fcce40b1ff3e9a2c039", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3", "patch": "@@ -60,13 +60,10 @@ error[E0606]: casting `&u8` as `u32` is invalid\n   --> $DIR/error-festival.rs:37:18\n    |\n LL |     let y: u32 = x as u32;\n-   |                  ^^^^^^^^ cannot cast `&u8` as `u32`\n-   |\n-help: did you mean `*x`?\n-  --> $DIR/error-festival.rs:37:18\n-   |\n-LL |     let y: u32 = x as u32;\n-   |                  ^\n+   |                  -^^^^^^^\n+   |                  |\n+   |                  cannot cast `&u8` as `u32`\n+   |                  help: dereference the expression: `*x`\n \n error[E0607]: cannot cast thin pointer `*const u8` to fat pointer `*const [u8]`\n   --> $DIR/error-festival.rs:41:5"}, {"sha": "fbe5e6d409934fe0fc7a8251f02a3ef8de742e27", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=29a8386bb3b7ff8434f4b1b5be0fd51a48d93bb3", "patch": "@@ -240,13 +240,10 @@ error[E0606]: casting `&{float}` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:71:30\n    |\n LL |     vec![0.0].iter().map(|s| s as f32).collect::<Vec<f32>>(); //~ ERROR is invalid\n-   |                              ^^^^^^^^ cannot cast `&{float}` as `f32`\n-   |\n-help: did you mean `*s`?\n-  --> $DIR/cast-rfc0401.rs:71:30\n-   |\n-LL |     vec![0.0].iter().map(|s| s as f32).collect::<Vec<f32>>(); //~ ERROR is invalid\n-   |                              ^\n+   |                              -^^^^^^^\n+   |                              |\n+   |                              cannot cast `&{float}` as `f32`\n+   |                              help: dereference the expression: `*s`\n \n error: aborting due to 34 previous errors\n "}]}