{"sha": "9d178e5e8d7943da8f1b4b645911f300178f5070", "node_id": "C_kwDOAAsO6NoAKDlkMTc4ZTVlOGQ3OTQzZGE4ZjFiNGI2NDU5MTFmMzAwMTc4ZjUwNzA", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2022-01-20T22:47:26Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2022-01-20T23:53:08Z"}, "message": "rustdoc: fix overflow-wrap for table layouts\n\nFor all table layouts, set overflow-wrap: break-word.", "tree": {"sha": "63f1545058ae83e71f66a97882bbbbedc88da6ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63f1545058ae83e71f66a97882bbbbedc88da6ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d178e5e8d7943da8f1b4b645911f300178f5070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d178e5e8d7943da8f1b4b645911f300178f5070", "html_url": "https://github.com/rust-lang/rust/commit/9d178e5e8d7943da8f1b4b645911f300178f5070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d178e5e8d7943da8f1b4b645911f300178f5070/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74fbbefea8d13683cca5eee62e4740706cb3144a", "url": "https://api.github.com/repos/rust-lang/rust/commits/74fbbefea8d13683cca5eee62e4740706cb3144a", "html_url": "https://github.com/rust-lang/rust/commit/74fbbefea8d13683cca5eee62e4740706cb3144a"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "a6bc719d6a1bb51258c7336fa8453680fcc696c4", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9d178e5e8d7943da8f1b4b645911f300178f5070/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/9d178e5e8d7943da8f1b4b645911f300178f5070/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=9d178e5e8d7943da8f1b4b645911f300178f5070", "patch": "@@ -675,7 +675,6 @@ nav.sub {\n \tmargin: .5em 0;\n \twidth: calc(100% - 2px);\n \toverflow-x: auto;\n-\toverflow-wrap: normal;\n \tdisplay: block;\n }\n \n@@ -862,6 +861,31 @@ h2.small-section-header > .anchor {\n \n .block a.current.crate { font-weight: 500; }\n \n+/*  In most contexts we use `overflow-wrap: anywhere` to ensure that we can wrap\n+\tas much as needed on mobile (see\n+\tsrc/test/rustdoc-gui/type-declaration-overflow.goml for an example of why\n+\tthis matters). The `anywhere` value means:\n+\n+\t\"Soft wrap opportunities introduced by the word break are considered when\n+\t calculating min-content intrinsic sizes.\"\n+\n+\thttps://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap#values\n+\n+\tFor table layouts, that becomes a problem: the browser tries to make each\n+\tcolumn as narrow as possible, and `overflow-wrap: anywhere` means it can do\n+\tso by breaking words - even if some other column could be shrunk without\n+\tbreaking words! This shows up, for instance, in the `Structs` / `Modules` /\n+\t`Functions` (etcetera) sections of a module page, and when a docblock\n+\tcontains a table.\n+\n+\tSo, for table layouts, override the default with break-word, which does\n+\t_not_ affect min-content intrinsic sizes.\n+*/\n+table,\n+.item-table {\n+\toverflow-wrap: break-word;\n+}\n+\n .item-table {\n \tdisplay: table;\n }\n@@ -2040,10 +2064,6 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\toverflow-wrap: anywhere;\n \t}\n \n-\t.docblock table code {\n-\t\toverflow-wrap: normal;\n-\t}\n-\n \t.sub-container {\n \t\tflex-direction: column;\n \t}"}, {"sha": "73013c9778f640ac409d016f6154b873b1d89535", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9d178e5e8d7943da8f1b4b645911f300178f5070/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d178e5e8d7943da8f1b4b645911f300178f5070/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=9d178e5e8d7943da8f1b4b645911f300178f5070", "patch": "@@ -39,7 +39,6 @@ impl Trait for Foo {\n     const Y: u32 = 0;\n }\n \n-\n impl implementors::Whatever for Foo {\n     type Foo = u32;\n }\n@@ -58,8 +57,10 @@ pub mod sub_mod {\n pub mod long_trait {\n     use std::ops::DerefMut;\n \n-    pub trait ALongNameBecauseItHelpsTestingTheCurrentProblem: DerefMut<Target = u32>\n-        + From<u128> + Send + Sync + AsRef<str> + 'static {}\n+    pub trait ALongNameBecauseItHelpsTestingTheCurrentProblem:\n+        DerefMut<Target = u32> + From<u128> + Send + Sync + AsRef<str> + 'static\n+    {\n+    }\n }\n \n pub mod long_table {\n@@ -88,18 +89,28 @@ pub mod summary_table {\n }\n \n pub mod too_long {\n-pub type ReallyLongTypeNameLongLongLong = Option<unsafe extern \"C\" fn(a: *const u8, b: *const u8) -> *const u8>;\n-\n-pub const ReallyLongTypeNameLongLongLongConstBecauseWhyNotAConstRightGigaGigaSupraLong: u32 = 0;\n-\n-pub struct SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName {\n-    pub a: u32,\n-}\n+    pub type ReallyLongTypeNameLongLongLong =\n+        Option<unsafe extern \"C\" fn(a: *const u8, b: *const u8) -> *const u8>;\n+\n+    pub const ReallyLongTypeNameLongLongLongConstBecauseWhyNotAConstRightGigaGigaSupraLong: u32 = 0;\n+\n+    /// This also has a really long doccomment. Lorem ipsum dolor sit amet,\n+    /// consectetur adipiscing elit. Suspendisse id nibh malesuada, hendrerit\n+    /// massa vel, tincidunt est. Nulla interdum, sem ac efficitur ornare, arcu\n+    /// nunc dignissim nibh, at rutrum diam augue ac mauris. Fusce tincidunt et\n+    /// ligula sed viverra. Aenean sed facilisis dui, non volutpat felis. In\n+    /// vitae est dui. Donec felis nibh, blandit at nibh eu, tempor suscipit\n+    /// nisl. Vestibulum ornare porta libero, eu faucibus purus iaculis ut. Ut\n+    /// quis tincidunt nunc, in mollis purus. Nulla sed interdum quam. Nunc\n+    /// vitae cursus ex.\n+    pub struct SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName {\n+        pub a: u32,\n+    }\n \n-impl SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName {\n-    /// ```\n-    /// let x = SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName { a: 0 };\n-    /// ```\n+    impl SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName {\n+        /// ```\n+        /// let x = SuperIncrediblyLongLongLongLongLongLongLongGigaGigaGigaMegaLongLongLongStructName { a: 0 };\n+        /// ```\n         pub fn foo(&self) {}\n     }\n }"}, {"sha": "c35b38747dfaf087c94095046b994e79a97c4ba2", "filename": "src/test/rustdoc-gui/type-declation-overflow.goml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d178e5e8d7943da8f1b4b645911f300178f5070/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/9d178e5e8d7943da8f1b4b645911f300178f5070/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-declation-overflow.goml?ref=9d178e5e8d7943da8f1b4b645911f300178f5070", "patch": "@@ -7,6 +7,10 @@ assert-property: (\"body\", {\"scrollWidth\": \"1100\"})\n // However, since there is overflow in the type declaration, its scroll width is bigger.\n assert-property: (\".item-decl pre\", {\"scrollWidth\": \"1324\"})\n \n+// In the table-ish view on the module index, the name should not be wrapped more than necessary.\n+goto: file://|DOC_PATH|/lib2/too_long/index.html\n+assert-property: (\".item-table .struct\", {\"offsetWidth\": \"684\"})\n+\n // We now make the same check on type declaration...\n goto: file://|DOC_PATH|/lib2/too_long/type.ReallyLongTypeNameLongLongLong.html\n assert-property: (\"body\", {\"scrollWidth\": \"1100\"})"}]}