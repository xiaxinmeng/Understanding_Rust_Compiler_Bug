{"sha": "3779971dbb397ff8b1668c379812b903a6a907ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3Nzk5NzFkYmIzOTdmZjhiMTY2OGMzNzk4MTJiOTAzYTZhOTA3ZWM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-09-30T07:44:48Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-10-03T02:34:48Z"}, "message": "Optimize plug_leaks some more.\n\nThis commit avoids the `resolve_type_vars_if_possible` call in\n`plug_leaks` when `skol_map` is empty, which is the common case. It also\nchanges the signature of `plug_leaks` slightly to avoid the need for a\n`clone` of `value`. These changes give speed-ups of up a few percent on\nsome of the rustc-benchmarks.", "tree": {"sha": "5cfc9e9a5fb3d9f5251ef0b7555c5125c5b9cc33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cfc9e9a5fb3d9f5251ef0b7555c5125c5b9cc33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3779971dbb397ff8b1668c379812b903a6a907ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3779971dbb397ff8b1668c379812b903a6a907ec", "html_url": "https://github.com/rust-lang/rust/commit/3779971dbb397ff8b1668c379812b903a6a907ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3779971dbb397ff8b1668c379812b903a6a907ec/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fece3d84b41bf1d544e48b10823f3dade45a120", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fece3d84b41bf1d544e48b10823f3dade45a120", "html_url": "https://github.com/rust-lang/rust/commit/1fece3d84b41bf1d544e48b10823f3dade45a120"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "c1d9240ba0634fa2243db4b0d121a1a15390ce9f", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3779971dbb397ff8b1668c379812b903a6a907ec/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3779971dbb397ff8b1668c379812b903a6a907ec/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=3779971dbb397ff8b1668c379812b903a6a907ec", "patch": "@@ -749,15 +749,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn plug_leaks<T>(&self,\n                          skol_map: SkolemizationMap<'tcx>,\n                          snapshot: &CombinedSnapshot,\n-                         value: &T) -> T\n+                         value: T) -> T\n         where T : TypeFoldable<'tcx>\n     {\n         debug!(\"plug_leaks(skol_map={:?}, value={:?})\",\n                skol_map,\n                value);\n \n         if skol_map.is_empty() {\n-            return self.resolve_type_vars_if_possible(value);\n+            return value;\n         }\n \n         // Compute a mapping from the \"taint set\" of each skolemized\n@@ -779,7 +779,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         // Remove any instantiated type variables from `value`; those can hide\n         // references to regions from the `fold_regions` code below.\n-        let value = self.resolve_type_vars_if_possible(value);\n+        let value = self.resolve_type_vars_if_possible(&value);\n \n         // Map any skolemization byproducts back to a late-bound\n         // region. Put that late-bound region at whatever the outermost"}, {"sha": "ddabc53a89a8122a6821cd1371b05d3e618bd338", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3779971dbb397ff8b1668c379812b903a6a907ec/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3779971dbb397ff8b1668c379812b903a6a907ec/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=3779971dbb397ff8b1668c379812b903a6a907ec", "patch": "@@ -171,7 +171,7 @@ pub fn poly_project_and_unify_type<'cx, 'gcx, 'tcx>(\n             Ok(result) => {\n                 let span = obligation.cause.span;\n                 match infcx.leak_check(false, span, &skol_map, snapshot) {\n-                    Ok(()) => Ok(infcx.plug_leaks(skol_map, snapshot, &result)),\n+                    Ok(()) => Ok(infcx.plug_leaks(skol_map, snapshot, result)),\n                     Err(e) => Err(MismatchedProjectionTypes { err: e }),\n                 }\n             }"}, {"sha": "666311110971dccb35d8ac5c814b30e7c6d898d2", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3779971dbb397ff8b1668c379812b903a6a907ec/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3779971dbb397ff8b1668c379812b903a6a907ec/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=3779971dbb397ff8b1668c379812b903a6a907ec", "patch": "@@ -1980,7 +1980,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                                                   normalized_ty,\n                                                   &[]);\n                 obligations.push(skol_obligation);\n-                this.infcx().plug_leaks(skol_map, snapshot, &obligations)\n+                this.infcx().plug_leaks(skol_map, snapshot, obligations)\n             })\n         }).collect()\n     }\n@@ -2899,7 +2899,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     predicate: predicate.value\n                 }))\n         }).collect();\n-        self.infcx().plug_leaks(skol_map, snapshot, &predicates)\n+        self.infcx().plug_leaks(skol_map, snapshot, predicates)\n     }\n }\n "}]}