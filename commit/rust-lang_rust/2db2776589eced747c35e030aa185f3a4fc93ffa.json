{"sha": "2db2776589eced747c35e030aa185f3a4fc93ffa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYjI3NzY1ODllY2VkNzQ3YzM1ZTAzMGFhMTg1ZjNhNGZjOTNmZmE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-04-08T15:03:34Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-19T16:51:50Z"}, "message": "Wrap TyCtxt inside a QueryCtxt for queries.", "tree": {"sha": "2bebd6d88cde010752a82f7aa9160f1a2e3fd525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bebd6d88cde010752a82f7aa9160f1a2e3fd525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2db2776589eced747c35e030aa185f3a4fc93ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2db2776589eced747c35e030aa185f3a4fc93ffa", "html_url": "https://github.com/rust-lang/rust/commit/2db2776589eced747c35e030aa185f3a4fc93ffa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2db2776589eced747c35e030aa185f3a4fc93ffa/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dab9b89221472d36fb5375d0c474c794706d2ae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dab9b89221472d36fb5375d0c474c794706d2ae8", "html_url": "https://github.com/rust-lang/rust/commit/dab9b89221472d36fb5375d0c474c794706d2ae8"}], "stats": {"total": 131, "additions": 82, "deletions": 49}, "files": [{"sha": "1ac71824faf8b4a15ee1232ccd403d3ed1c32ca7", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=2db2776589eced747c35e030aa185f3a4fc93ffa", "patch": "@@ -354,9 +354,10 @@ fn add_query_description_impl(\n             quote! {\n                 #[inline]\n                 fn try_load_from_disk(\n-                    #tcx: TyCtxt<'tcx>,\n-                    #id: SerializedDepNodeIndex\n+                    tcx: QueryCtxt<'tcx>,\n+                    id: SerializedDepNodeIndex\n                 ) -> Option<Self::Value> {\n+                    let (#tcx, #id) = (*tcx, id);\n                     #block\n                 }\n             }\n@@ -365,10 +366,10 @@ fn add_query_description_impl(\n             quote! {\n                 #[inline]\n                 fn try_load_from_disk(\n-                    tcx: TyCtxt<'tcx>,\n+                    tcx: QueryCtxt<'tcx>,\n                     id: SerializedDepNodeIndex\n                 ) -> Option<Self::Value> {\n-                    tcx.on_disk_cache.as_ref()?.try_load_query_result(tcx, id)\n+                    tcx.on_disk_cache.as_ref()?.try_load_query_result(*tcx, id)\n                 }\n             }\n         };\n@@ -393,10 +394,11 @@ fn add_query_description_impl(\n             #[inline]\n             #[allow(unused_variables, unused_braces)]\n             fn cache_on_disk(\n-                #tcx: TyCtxt<'tcx>,\n-                #key: &Self::Key,\n-                #value: Option<&Self::Value>\n+                tcx: QueryCtxt<'tcx>,\n+                key: &Self::Key,\n+                value: Option<&Self::Value>\n             ) -> bool {\n+                let (#tcx, #key, #value) = (*tcx, key, value);\n                 #expr\n             }\n \n@@ -414,16 +416,14 @@ fn add_query_description_impl(\n \n     let desc = quote! {\n         #[allow(unused_variables)]\n-        fn describe(\n-            #tcx: TyCtxt<'tcx>,\n-            #key: #arg,\n-        ) -> String {\n-            ::rustc_middle::ty::print::with_no_trimmed_paths(|| format!(#desc))\n+        fn describe(tcx: QueryCtxt<'tcx>, key: #arg) -> String {\n+            let (#tcx, #key) = (*tcx, key);\n+            ::rustc_middle::ty::print::with_no_trimmed_paths(|| format!(#desc).into())\n         }\n     };\n \n     impls.extend(quote! {\n-        impl<'tcx> QueryDescription<TyCtxt<'tcx>> for queries::#name<'tcx> {\n+        impl<'tcx> QueryDescription<QueryCtxt<'tcx>> for queries::#name<'tcx> {\n             #desc\n             #cache\n         }"}, {"sha": "ea1376e41c98f8a6e75fa67f8c2614c21d6d1321", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=2db2776589eced747c35e030aa185f3a4fc93ffa", "patch": "@@ -55,6 +55,7 @@\n //!\n //! [dependency graph]: https://rustc-dev-guide.rust-lang.org/query.html\n \n+use crate::ty::query::QueryCtxt;\n use crate::ty::TyCtxt;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -261,7 +262,7 @@ pub mod dep_kind {\n \n                     if let Some(key) = recover(tcx, dep_node) {\n                         force_query::<queries::$variant<'_>, _>(\n-                            tcx,\n+                            QueryCtxt(tcx),\n                             key,\n                             DUMMY_SP,\n                             *dep_node\n@@ -287,7 +288,7 @@ pub mod dep_kind {\n                                      .unwrap_or(false));\n \n                     let key = recover(tcx, dep_node).unwrap_or_else(|| panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash));\n-                    if queries::$variant::cache_on_disk(tcx, &key, None) {\n+                    if queries::$variant::cache_on_disk(QueryCtxt(tcx), &key, None) {\n                         let _ = tcx.$variant(key);\n                     }\n                 }"}, {"sha": "0f7728d48d99d4cbff00d59f1edb4fe47c7a9d95", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=2db2776589eced747c35e030aa185f3a4fc93ffa", "patch": "@@ -7,6 +7,7 @@ use crate::traits::query::{\n     CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n };\n use crate::ty::query::queries;\n+use crate::ty::query::QueryCtxt;\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};"}, {"sha": "0ea8bcc9d9d5625fbf176ddb8332d8f2047b9c2f", "filename": "compiler/rustc_middle/src/ty/query/job.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fjob.rs?ref=2db2776589eced747c35e030aa185f3a4fc93ffa", "patch": "@@ -1,3 +1,4 @@\n+use crate::ty::query::QueryCtxt;\n use crate::ty::tls;\n \n use rustc_query_system::query::deadlock;\n@@ -20,7 +21,7 @@ pub unsafe fn handle_deadlock() {\n     thread::spawn(move || {\n         tls::enter_context(icx, |_| {\n             rustc_span::SESSION_GLOBALS\n-                .set(session_globals, || tls::with(|tcx| deadlock(tcx, &registry)))\n-        })\n+                .set(session_globals, || tls::with(|tcx| deadlock(QueryCtxt(tcx), &registry)))\n+        });\n     });\n }"}, {"sha": "88d1efffea7cfd2864e2bdcabd7f5d3efd5fca4e", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=2db2776589eced747c35e030aa185f3a4fc93ffa", "patch": "@@ -60,6 +60,7 @@ use std::sync::Arc;\n \n #[macro_use]\n mod plumbing;\n+pub use plumbing::QueryCtxt;\n pub(crate) use rustc_query_system::query::CycleError;\n use rustc_query_system::query::*;\n "}, {"sha": "5e862afae37d75fec348be5a5e3171376e0a3167", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=2db2776589eced747c35e030aa185f3a4fc93ffa", "patch": "@@ -3,6 +3,7 @@ use crate::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use crate::mir::{self, interpret};\n use crate::ty::codec::{RefDecodable, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n+use crate::ty::query::QueryCtxt;\n use crate::ty::{self, Ty};\n use rustc_data_structures::fingerprint::{Fingerprint, FingerprintDecoder, FingerprintEncoder};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n@@ -312,7 +313,7 @@ impl<'sess> OnDiskCache<'sess> {\n                     ($($query:ident,)*) => {\n                         $(\n                             encode_query_results::<ty::query::queries::$query<'_>>(\n-                                tcx,\n+                                QueryCtxt(tcx),\n                                 enc,\n                                 qri\n                             )?;\n@@ -1230,12 +1231,12 @@ impl<'a> Decodable<opaque::Decoder<'a>> for IntEncodedWithFixedSize {\n }\n \n fn encode_query_results<'a, 'tcx, Q>(\n-    tcx: TyCtxt<'tcx>,\n+    tcx: QueryCtxt<'tcx>,\n     encoder: &mut CacheEncoder<'a, 'tcx, FileEncoder>,\n     query_result_index: &mut EncodedQueryResultIndex,\n ) -> FileEncodeResult\n where\n-    Q: super::QueryDescription<TyCtxt<'tcx>> + super::QueryAccessors<TyCtxt<'tcx>>,\n+    Q: super::QueryDescription<QueryCtxt<'tcx>> + super::QueryAccessors<QueryCtxt<'tcx>>,\n     Q::Value: Encodable<CacheEncoder<'a, 'tcx, FileEncoder>>,\n {\n     let _timer = tcx"}, {"sha": "91a267e38d5aeb5b68de4ad777bf96d2d04c154c", "filename": "compiler/rustc_middle/src/ty/query/plumbing.rs", "status": "modified", "additions": 46, "deletions": 19, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fplumbing.rs?ref=2db2776589eced747c35e030aa185f3a4fc93ffa", "patch": "@@ -5,6 +5,7 @@\n use crate::ty::query::Query;\n use crate::ty::tls::{self, ImplicitCtxt};\n use crate::ty::{self, TyCtxt};\n+use rustc_query_system::dep_graph::HasDepContext;\n use rustc_query_system::query::QueryContext;\n use rustc_query_system::query::{CycleError, QueryJobId, QueryJobInfo};\n \n@@ -15,7 +16,29 @@ use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, Handler, Leve\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n \n-impl QueryContext for TyCtxt<'tcx> {\n+#[derive(Copy, Clone)]\n+pub struct QueryCtxt<'tcx>(pub TyCtxt<'tcx>);\n+\n+impl<'tcx> std::ops::Deref for QueryCtxt<'tcx> {\n+    type Target = TyCtxt<'tcx>;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+impl HasDepContext for QueryCtxt<'tcx> {\n+    type DepKind = crate::dep_graph::DepKind;\n+    type StableHashingContext = crate::ich::StableHashingContext<'tcx>;\n+    type DepContext = TyCtxt<'tcx>;\n+\n+    #[inline]\n+    fn dep_context(&self) -> &Self::DepContext {\n+        &self.0\n+    }\n+}\n+\n+impl QueryContext for QueryCtxt<'tcx> {\n     type Query = Query<'tcx>;\n \n     fn incremental_verify_ich(&self) -> bool {\n@@ -26,11 +49,11 @@ impl QueryContext for TyCtxt<'tcx> {\n     }\n \n     fn def_path_str(&self, def_id: DefId) -> String {\n-        TyCtxt::def_path_str(*self, def_id)\n+        self.0.def_path_str(def_id)\n     }\n \n     fn current_query_job(&self) -> Option<QueryJobId<Self::DepKind>> {\n-        tls::with_related_context(*self, |icx| icx.query)\n+        tls::with_related_context(**self, |icx| icx.query)\n     }\n \n     fn try_collect_active_jobs(\n@@ -53,10 +76,10 @@ impl QueryContext for TyCtxt<'tcx> {\n         // The `TyCtxt` stored in TLS has the same global interner lifetime\n         // as `self`, so we use `with_related_context` to relate the 'tcx lifetimes\n         // when accessing the `ImplicitCtxt`.\n-        tls::with_related_context(*self, move |current_icx| {\n+        tls::with_related_context(**self, move |current_icx| {\n             // Update the `ImplicitCtxt` to point to our new query job.\n             let new_icx = ImplicitCtxt {\n-                tcx: *self,\n+                tcx: **self,\n                 query: Some(token),\n                 diagnostics,\n                 layout_depth: current_icx.layout_depth,\n@@ -71,7 +94,7 @@ impl QueryContext for TyCtxt<'tcx> {\n     }\n }\n \n-impl<'tcx> TyCtxt<'tcx> {\n+impl<'tcx> QueryCtxt<'tcx> {\n     #[inline(never)]\n     #[cold]\n     pub(super) fn report_cycle(\n@@ -81,7 +104,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         assert!(!stack.is_empty());\n \n         let fix_span = |span: Span, query: &Query<'tcx>| {\n-            self.sess.source_map().guess_head_span(query.default_span(self, span))\n+            self.sess.source_map().guess_head_span(query.default_span(*self, span))\n         };\n \n         // Disable naming impls with types in this path, since that\n@@ -119,7 +142,9 @@ impl<'tcx> TyCtxt<'tcx> {\n             err\n         })\n     }\n+}\n \n+impl<'tcx> TyCtxt<'tcx> {\n     pub fn try_print_query_stack(handler: &Handler, num_frames: Option<usize>) {\n         eprintln!(\"query stack during panic:\");\n \n@@ -149,7 +174,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                             \"#{} [{}] {}\",\n                             i,\n                             query_info.info.query.name(),\n-                            query_info.info.query.describe(icx.tcx)\n+                            query_info.info.query.describe(QueryCtxt(icx.tcx))\n                         ),\n                     );\n                     diag.span =\n@@ -272,7 +297,7 @@ macro_rules! define_queries {\n                 }\n             }\n \n-            pub fn describe(&self, tcx: TyCtxt<$tcx>) -> String {\n+            pub(crate) fn describe(&self, tcx: QueryCtxt<$tcx>) -> String {\n                 let (r, name) = match *self {\n                     $(Query::$name(key) => {\n                         (queries::$name::describe(tcx, key), stringify!($name))\n@@ -362,35 +387,35 @@ macro_rules! define_queries {\n             const NAME: &'static str = stringify!($name);\n         }\n \n-        impl<$tcx> QueryAccessors<TyCtxt<$tcx>> for queries::$name<$tcx> {\n+        impl<$tcx> QueryAccessors<QueryCtxt<$tcx>> for queries::$name<$tcx> {\n             const ANON: bool = is_anon!([$($modifiers)*]);\n             const EVAL_ALWAYS: bool = is_eval_always!([$($modifiers)*]);\n             const DEP_KIND: dep_graph::DepKind = dep_graph::DepKind::$name;\n \n             type Cache = query_storage::$name<$tcx>;\n \n             #[inline(always)]\n-            fn query_state<'a>(tcx: TyCtxt<$tcx>) -> &'a QueryState<crate::dep_graph::DepKind, Query<$tcx>, Self::Key> {\n+            fn query_state<'a>(tcx: QueryCtxt<$tcx>) -> &'a QueryState<crate::dep_graph::DepKind, Query<$tcx>, Self::Key> {\n                 &tcx.queries.$name\n             }\n \n             #[inline(always)]\n-            fn query_cache<'a>(tcx: TyCtxt<$tcx>) -> &'a QueryCacheStore<Self::Cache>\n+            fn query_cache<'a>(tcx: QueryCtxt<$tcx>) -> &'a QueryCacheStore<Self::Cache>\n                 where 'tcx:'a\n             {\n                 &tcx.query_caches.$name\n             }\n \n             #[inline]\n-            fn compute(tcx: TyCtxt<'tcx>, key: Self::Key) -> Self::Value {\n+            fn compute(tcx: QueryCtxt<'tcx>, key: Self::Key) -> Self::Value {\n                 let provider = tcx.queries.providers.get(key.query_crate())\n                     // HACK(eddyb) it's possible crates may be loaded after\n                     // the query engine is created, and because crate loading\n                     // is not yet integrated with the query engine, such crates\n                     // would be missing appropriate entries in `providers`.\n                     .unwrap_or(&tcx.queries.fallback_extern_providers)\n                     .$name;\n-                provider(tcx, key)\n+                provider(*tcx, key)\n             }\n \n             fn hash_result(\n@@ -401,7 +426,7 @@ macro_rules! define_queries {\n             }\n \n             fn handle_cycle_error(\n-                tcx: TyCtxt<'tcx>,\n+                tcx: QueryCtxt<'tcx>,\n                 error: CycleError<Query<'tcx>>\n             ) -> Self::Value {\n                 handle_cycle_error!([$($modifiers)*][tcx, error])\n@@ -425,7 +450,8 @@ macro_rules! define_queries {\n                     Err(lookup) => lookup,\n                 };\n \n-                get_query::<queries::$name<'_>, _>(self.tcx, DUMMY_SP, key, lookup, QueryMode::Ensure);\n+                let qcx = QueryCtxt(self.tcx);\n+                get_query::<queries::$name<'_>, _>(qcx, DUMMY_SP, key, lookup, QueryMode::Ensure);\n             })*\n         }\n \n@@ -516,7 +542,8 @@ macro_rules! define_queries {\n                     Err(lookup) => lookup,\n                 };\n \n-                get_query::<queries::$name<'_>, _>(self.tcx, self.span, key, lookup, QueryMode::Get).unwrap()\n+                let qcx = QueryCtxt(self.tcx);\n+                get_query::<queries::$name<'_>, _>(qcx, self.span, key, lookup, QueryMode::Get).unwrap()\n             })*\n         }\n \n@@ -558,12 +585,12 @@ macro_rules! define_queries_struct {\n \n             pub(crate) fn try_collect_active_jobs(\n                 &self\n-            ) -> Option<FxHashMap<QueryJobId<crate::dep_graph::DepKind>, QueryJobInfo<crate::dep_graph::DepKind, <TyCtxt<$tcx> as QueryContext>::Query>>> {\n+            ) -> Option<FxHashMap<QueryJobId<crate::dep_graph::DepKind>, QueryJobInfo<crate::dep_graph::DepKind, Query<$tcx>>>> {\n                 let mut jobs = FxHashMap::default();\n \n                 $(\n                     self.$name.try_collect_active_jobs(\n-                        <queries::$name<'tcx> as QueryAccessors<TyCtxt<'tcx>>>::DEP_KIND,\n+                        <queries::$name<'tcx> as QueryAccessors<QueryCtxt<'tcx>>>::DEP_KIND,\n                         Query::$name,\n                         &mut jobs,\n                     )?;"}, {"sha": "47cbc7e43d2e13ce4352486b26b2f6ce1be67af1", "filename": "compiler/rustc_middle/src/ty/query/stats.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fstats.rs?ref=2db2776589eced747c35e030aa185f3a4fc93ffa", "patch": "@@ -1,7 +1,7 @@\n-use crate::ty::query::queries;\n+use crate::ty::query::query_storage;\n use crate::ty::TyCtxt;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc_query_system::query::{QueryAccessors, QueryCache, QueryCacheStore};\n+use rustc_query_system::query::{QueryCache, QueryCacheStore};\n \n use std::any::type_name;\n use std::mem;\n@@ -125,7 +125,7 @@ macro_rules! print_stats {\n \n             $(\n                 queries.push(stats::<\n-                    <queries::$name<'_> as QueryAccessors<TyCtxt<'_>>>::Cache,\n+                    query_storage::$name<'_>,\n                 >(\n                     stringify!($name),\n                     &tcx.query_caches.$name,"}, {"sha": "fa15395db4e9b98796e74f26bb91ded162f8b537", "filename": "compiler/rustc_middle/src/ty/query/values.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db2776589eced747c35e030aa185f3a4fc93ffa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fvalues.rs?ref=2db2776589eced747c35e030aa185f3a4fc93ffa", "patch": "@@ -1,38 +1,39 @@\n-use crate::ty::{self, AdtSizedConstraint, Ty, TyCtxt, TyS};\n+use crate::ty::query::QueryCtxt;\n+use crate::ty::{self, AdtSizedConstraint, Ty, TyS};\n \n pub(super) trait Value<'tcx>: Sized {\n-    fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self;\n+    fn from_cycle_error(tcx: QueryCtxt<'tcx>) -> Self;\n }\n \n impl<'tcx, T> Value<'tcx> for T {\n-    default fn from_cycle_error(tcx: TyCtxt<'tcx>) -> T {\n+    default fn from_cycle_error(tcx: QueryCtxt<'tcx>) -> T {\n         tcx.sess.abort_if_errors();\n         bug!(\"Value::from_cycle_error called without errors\");\n     }\n }\n \n impl<'tcx> Value<'tcx> for &'_ TyS<'_> {\n-    fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self {\n+    fn from_cycle_error(tcx: QueryCtxt<'tcx>) -> Self {\n         // SAFETY: This is never called when `Self` is not `Ty<'tcx>`.\n         // FIXME: Represent the above fact in the trait system somehow.\n         unsafe { std::mem::transmute::<Ty<'tcx>, Ty<'_>>(tcx.ty_error()) }\n     }\n }\n \n impl<'tcx> Value<'tcx> for ty::SymbolName<'_> {\n-    fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self {\n+    fn from_cycle_error(tcx: QueryCtxt<'tcx>) -> Self {\n         // SAFETY: This is never called when `Self` is not `SymbolName<'tcx>`.\n         // FIXME: Represent the above fact in the trait system somehow.\n         unsafe {\n             std::mem::transmute::<ty::SymbolName<'tcx>, ty::SymbolName<'_>>(ty::SymbolName::new(\n-                tcx, \"<error>\",\n+                *tcx, \"<error>\",\n             ))\n         }\n     }\n }\n \n impl<'tcx> Value<'tcx> for AdtSizedConstraint<'_> {\n-    fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self {\n+    fn from_cycle_error(tcx: QueryCtxt<'tcx>) -> Self {\n         // SAFETY: This is never called when `Self` is not `AdtSizedConstraint<'tcx>`.\n         // FIXME: Represent the above fact in the trait system somehow.\n         unsafe {"}]}