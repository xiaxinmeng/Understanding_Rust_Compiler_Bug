{"sha": "db17e06c2eec892ab807fd191bc11b15d8da42e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMTdlMDZjMmVlYzg5MmFiODA3ZmQxOTFiYzExYjE1ZDhkYTQyZTI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-30T20:45:35Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-30T20:45:35Z"}, "message": "Merge #711\n\n711: Rename FnScopes and move them below the expr module r=matklad a=flodiebold\n\nExtracted from #693 to reduce the diff and make rebasing easier for me :wink: \r\n\r\nThe scopes belong to a body, which could be that of a function, but also a constant, static or array size. So this moves them to a submodule of `expr`.\r\n\r\nAlso move the `expr_scopes` query from `query_definitions` to that module.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "18046068a9d7bb72747bbabfc22d1121fea1604a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18046068a9d7bb72747bbabfc22d1121fea1604a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db17e06c2eec892ab807fd191bc11b15d8da42e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db17e06c2eec892ab807fd191bc11b15d8da42e2", "html_url": "https://github.com/rust-lang/rust/commit/db17e06c2eec892ab807fd191bc11b15d8da42e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db17e06c2eec892ab807fd191bc11b15d8da42e2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "c65e6cdcb3d603ce7c0943785f7140662022c54a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c65e6cdcb3d603ce7c0943785f7140662022c54a", "html_url": "https://github.com/rust-lang/rust/commit/c65e6cdcb3d603ce7c0943785f7140662022c54a"}, {"sha": "1acff307fe2e20f0c2291fd24b08fba6fa39e5ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/1acff307fe2e20f0c2291fd24b08fba6fa39e5ee", "html_url": "https://github.com/rust-lang/rust/commit/1acff307fe2e20f0c2291fd24b08fba6fa39e5ee"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "9405aa8ad63b0123c2a6a46802bca64eafd80c82", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=db17e06c2eec892ab807fd191bc11b15d8da42e2", "patch": "@@ -396,7 +396,7 @@ pub struct Function {\n     pub(crate) id: FunctionId,\n }\n \n-pub use crate::code_model_impl::function::ScopeEntryWithSyntax;\n+pub use crate::expr::ScopeEntryWithSyntax;\n \n /// The declared signature of a function.\n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -447,7 +447,7 @@ impl Function {\n     }\n \n     pub fn scopes(&self, db: &impl HirDatabase) -> ScopesWithSyntaxMapping {\n-        let scopes = db.fn_scopes(*self);\n+        let scopes = db.expr_scopes(*self);\n         let syntax_mapping = db.body_syntax_mapping(*self);\n         ScopesWithSyntaxMapping {\n             scopes,"}, {"sha": "42264399610cdef8259cb27730ce9e034b01e6f9", "filename": "crates/ra_hir/src/code_model_impl/function.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction.rs?ref=db17e06c2eec892ab807fd191bc11b15d8da42e2", "patch": "@@ -1,5 +1,3 @@\n-mod scope;\n-\n use std::sync::Arc;\n \n use ra_syntax::ast::{self, NameOwner};\n@@ -11,8 +9,6 @@ use crate::{\n     impl_block::ImplBlock,\n };\n \n-pub use self::scope::{FnScopes, ScopesWithSyntaxMapping, ScopeEntryWithSyntax};\n-\n impl Function {\n     pub(crate) fn body(&self, db: &impl HirDatabase) -> Arc<Body> {\n         db.body_hir(*self)"}, {"sha": "189649841a7e4b583ff5452b52e85250a1de376e", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=db17e06c2eec892ab807fd191bc11b15d8da42e2", "patch": "@@ -7,7 +7,7 @@ use crate::{\n     MacroCallId, HirFileId,\n     SourceFileItems, SourceItemId, Crate, Module, HirInterner,\n     query_definitions,\n-    Function, FnSignature, FnScopes,\n+    Function, FnSignature, ExprScopes,\n     Struct, Enum, StructField,\n     macros::MacroExpansion,\n     module_tree::ModuleTree,\n@@ -27,8 +27,8 @@ pub trait HirDatabase: SourceDatabase + AsRef<HirInterner> {\n     #[salsa::invoke(crate::macros::expand_macro_invocation)]\n     fn expand_macro_invocation(&self, invoc: MacroCallId) -> Option<Arc<MacroExpansion>>;\n \n-    #[salsa::invoke(query_definitions::fn_scopes)]\n-    fn fn_scopes(&self, func: Function) -> Arc<FnScopes>;\n+    #[salsa::invoke(ExprScopes::expr_scopes_query)]\n+    fn expr_scopes(&self, func: Function) -> Arc<ExprScopes>;\n \n     #[salsa::invoke(crate::adt::StructData::struct_data_query)]\n     fn struct_data(&self, s: Struct) -> Arc<StructData>;"}, {"sha": "83e913e4ac26d687f06c5574b61c8e4d14fb53d2", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=db17e06c2eec892ab807fd191bc11b15d8da42e2", "patch": "@@ -16,6 +16,10 @@ use crate::{\n };\n use crate::ty::primitive::{UintTy, UncertainIntTy, UncertainFloatTy};\n \n+pub use self::scope::{ExprScopes, ScopesWithSyntaxMapping, ScopeEntryWithSyntax};\n+\n+mod scope;\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct ExprId(RawId);\n impl_arena_id!(ExprId);"}, {"sha": "f8b5ba581c43d17ecfd90cfcb7b17a5f66011c9f", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "renamed", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=db17e06c2eec892ab807fd191bc11b15d8da42e2", "patch": "@@ -9,14 +9,18 @@ use ra_syntax::{\n };\n use ra_arena::{Arena, RawId, impl_arena_id};\n \n-use crate::{Name, AsName, expr::{PatId, ExprId, Pat, Expr, Body, Statement, BodySyntaxMapping}};\n+use crate::{\n+    Name, AsName, Function,\n+    expr::{PatId, ExprId, Pat, Expr, Body, Statement, BodySyntaxMapping},\n+    db::HirDatabase,\n+};\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct ScopeId(RawId);\n impl_arena_id!(ScopeId);\n \n #[derive(Debug, PartialEq, Eq)]\n-pub struct FnScopes {\n+pub struct ExprScopes {\n     body: Arc<Body>,\n     scopes: Arena<ScopeId, ScopeData>,\n     scope_for: FxHashMap<ExprId, ScopeId>,\n@@ -34,9 +38,16 @@ pub struct ScopeData {\n     entries: Vec<ScopeEntry>,\n }\n \n-impl FnScopes {\n-    pub(crate) fn new(body: Arc<Body>) -> FnScopes {\n-        let mut scopes = FnScopes {\n+impl ExprScopes {\n+    // TODO: This should take something more general than Function\n+    pub(crate) fn expr_scopes_query(db: &impl HirDatabase, function: Function) -> Arc<ExprScopes> {\n+        let body = db.body_hir(function);\n+        let res = ExprScopes::new(body);\n+        Arc::new(res)\n+    }\n+\n+    fn new(body: Arc<Body>) -> ExprScopes {\n+        let mut scopes = ExprScopes {\n             body: body.clone(),\n             scopes: Arena::default(),\n             scope_for: FxHashMap::default(),\n@@ -119,7 +130,7 @@ impl FnScopes {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ScopesWithSyntaxMapping {\n     pub syntax_mapping: Arc<BodySyntaxMapping>,\n-    pub scopes: Arc<FnScopes>,\n+    pub scopes: Arc<ExprScopes>,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -249,7 +260,7 @@ fn compute_block_scopes(\n     statements: &[Statement],\n     tail: Option<ExprId>,\n     body: &Body,\n-    scopes: &mut FnScopes,\n+    scopes: &mut ExprScopes,\n     mut scope: ScopeId,\n ) {\n     for stmt in statements {\n@@ -275,7 +286,7 @@ fn compute_block_scopes(\n     }\n }\n \n-fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut FnScopes, scope: ScopeId) {\n+fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope: ScopeId) {\n     scopes.set_scope(expr, scope);\n     match &body[expr] {\n         Expr::Block { statements, tail } => {\n@@ -344,7 +355,7 @@ mod tests {\n         let marker: &ast::PathExpr = find_node_at_offset(file.syntax(), off).unwrap();\n         let fn_def: &ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n         let body_hir = expr::collect_fn_body_syntax(fn_def);\n-        let scopes = FnScopes::new(Arc::clone(body_hir.body()));\n+        let scopes = ExprScopes::new(Arc::clone(body_hir.body()));\n         let scopes = ScopesWithSyntaxMapping {\n             scopes: Arc::new(scopes),\n             syntax_mapping: Arc::new(body_hir),\n@@ -444,7 +455,7 @@ mod tests {\n         let name_ref: &ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n \n         let body_hir = expr::collect_fn_body_syntax(fn_def);\n-        let scopes = FnScopes::new(Arc::clone(body_hir.body()));\n+        let scopes = ExprScopes::new(Arc::clone(body_hir.body()));\n         let scopes = ScopesWithSyntaxMapping {\n             scopes: Arc::new(scopes),\n             syntax_mapping: Arc::new(body_hir),", "previous_filename": "crates/ra_hir/src/code_model_impl/function/scope.rs"}, {"sha": "0b9ee63bf16c2eb30692cb47d0889525da943d3f", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=db17e06c2eec892ab807fd191bc11b15d8da42e2", "patch": "@@ -57,9 +57,9 @@ pub use self::{\n     nameres::{ItemMap, PerNs, Namespace, Resolution},\n     ty::Ty,\n     impl_block::{ImplBlock, ImplItem},\n-    code_model_impl::function::{FnScopes, ScopesWithSyntaxMapping},\n     docs::{Docs, Documentation},\n     adt::AdtDef,\n+    expr::{ExprScopes, ScopesWithSyntaxMapping},\n };\n \n pub use self::code_model_api::{"}, {"sha": "734a982820a227edf1e7ec77e99f47beb564efae", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=db17e06c2eec892ab807fd191bc11b15d8da42e2", "patch": "@@ -1,19 +1,14 @@\n use std::sync::Arc;\n \n-use ra_syntax::{SyntaxNode, TreeArc};\n+use ra_syntax::{\n+    SyntaxNode, TreeArc,\n+};\n \n use crate::{\n     SourceFileItems, SourceItemId, HirFileId,\n-    Function, FnScopes,\n     db::HirDatabase,\n };\n \n-pub(super) fn fn_scopes(db: &impl HirDatabase, func: Function) -> Arc<FnScopes> {\n-    let body = db.body_hir(func);\n-    let res = FnScopes::new(body);\n-    Arc::new(res)\n-}\n-\n pub(super) fn file_items(db: &impl HirDatabase, file_id: HirFileId) -> Arc<SourceFileItems> {\n     let source_file = db.hir_parse(file_id);\n     let res = SourceFileItems::new(file_id, &source_file);"}, {"sha": "0472414a672db48514d957747a268b9c79c257a8", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db17e06c2eec892ab807fd191bc11b15d8da42e2/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=db17e06c2eec892ab807fd191bc11b15d8da42e2", "patch": "@@ -34,7 +34,7 @@ use test_utils::tested_by;\n \n use crate::{\n     Module, Function, Struct, StructField, Enum, EnumVariant, Path, Name, ImplBlock,\n-    FnSignature, FnScopes, ModuleDef, AdtDef,\n+    FnSignature, ExprScopes, ModuleDef, AdtDef,\n     db::HirDatabase,\n     type_ref::{TypeRef, Mutability},\n     name::KnownName,\n@@ -814,7 +814,7 @@ impl Index<PatId> for InferenceResult {\n struct InferenceContext<'a, D: HirDatabase> {\n     db: &'a D,\n     body: Arc<Body>,\n-    scopes: Arc<FnScopes>,\n+    scopes: Arc<ExprScopes>,\n     module: Module,\n     impl_block: Option<ImplBlock>,\n     var_unification_table: InPlaceUnificationTable<TypeVarId>,\n@@ -908,7 +908,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn new(\n         db: &'a D,\n         body: Arc<Body>,\n-        scopes: Arc<FnScopes>,\n+        scopes: Arc<ExprScopes>,\n         module: Module,\n         impl_block: Option<ImplBlock>,\n     ) -> Self {\n@@ -1720,7 +1720,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n pub fn infer(db: &impl HirDatabase, func: Function) -> Arc<InferenceResult> {\n     db.check_canceled();\n     let body = func.body(db);\n-    let scopes = db.fn_scopes(func);\n+    let scopes = db.expr_scopes(func);\n     let module = func.module(db);\n     let impl_block = func.impl_block(db);\n     let mut ctx = InferenceContext::new(db, body, scopes, module, impl_block);"}]}