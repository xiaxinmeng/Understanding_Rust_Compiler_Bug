{"sha": "9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYzI2Y2ZkZjQzYWRmZmU1MWFjZGM1ZWY5ODg2Y2I1ZTE4NDRkNDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-21T23:41:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-25T17:21:09Z"}, "message": "test: Clean out the test suite a bit\n\nThis updates a number of ignore-test tests, and removes a few completely\noutdated tests due to the feature being tested no longer being supported.\n\nThis brings a number of bench/shootout tests up to date so they're compiling\nagain. I make no claims to the performance of these benchmarks, it's just nice\nto not have bitrotted code.\n\nCloses #2604\nCloses #9407", "tree": {"sha": "bf77fffeeed015228b47e31eb9acb98fa1160207", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf77fffeeed015228b47e31eb9acb98fa1160207"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "html_url": "https://github.com/rust-lang/rust/commit/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34a224f4a1144c99cedbff9c0493d57037739d35", "url": "https://api.github.com/repos/rust-lang/rust/commits/34a224f4a1144c99cedbff9c0493d57037739d35", "html_url": "https://github.com/rust-lang/rust/commit/34a224f4a1144c99cedbff9c0493d57037739d35"}], "stats": {"total": 1621, "additions": 304, "deletions": 1317}, "files": [{"sha": "a128ee4a25027a8cf6881aebf81d781aefeadbba", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -1394,8 +1394,6 @@ mod test {\n         });\n     }\n \n-    // FIXME: #9407: ignore-test\n-    #[ignore]\n     #[test]\n     fn dont_starve_1() {\n         let mut pool = SchedPool::new(PoolConfig {"}, {"sha": "f711af43699b3bbc1b955de2d76e1f318f253648", "filename": "src/test/auxiliary/private_variant_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fauxiliary%2Fprivate_variant_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fauxiliary%2Fprivate_variant_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivate_variant_1.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -10,6 +10,6 @@\n \n mod super_sekrit {\n     pub enum sooper_sekrit {\n-        pub quux, priv baz\n+        quux, priv baz\n     }\n }"}, {"sha": "2f6370308024355434f74bc1d4b576155fb9a3cb", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 51, "deletions": 60, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,11 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test reading from os::args()[1] - bogus!\n-\n-use std::from_str::FromStr;\n use std::os;\n-use std::vec::MutableVector;\n use std::vec;\n \n fn max(a: i32, b: i32) -> i32 {\n@@ -23,7 +19,6 @@ fn max(a: i32, b: i32) -> i32 {\n     }\n }\n \n-#[inline(never)]\n fn fannkuch_redux(n: i32) -> i32 {\n     let mut perm = vec::from_elem(n as uint, 0i32);\n     let mut perm1 = vec::from_fn(n as uint, |i| i as i32);\n@@ -34,74 +29,70 @@ fn fannkuch_redux(n: i32) -> i32 {\n \n     let mut r = n;\n     loop {\n-        unsafe {\n-            while r != 1 {\n-                count.unsafe_set((r-1) as uint, r);\n-                r -= 1;\n-            }\n-\n-            for (perm_i, perm1_i) in perm.mut_iter().zip(perm1.iter()) {\n-                *perm_i = *perm1_i;\n-            }\n+        while r != 1 {\n+            count[r - 1] = r;\n+            r -= 1;\n+        }\n \n-            let mut flips_count: i32 = 0;\n-            let mut k: i32;\n-            loop {\n-                k = *perm.unsafe_ref(0);\n-                if k == 0 {\n-                    break;\n-                }\n+        for (perm_i, perm1_i) in perm.mut_iter().zip(perm1.iter()) {\n+            *perm_i = *perm1_i;\n+        }\n \n-                let k2 = (k+1) >> 1;\n-                for i in range(0i32, k2) {\n-                    let (perm_i, perm_k_i) = {\n-                        (*perm.unsafe_ref(i as uint),\n-                            *perm.unsafe_ref((k-i) as uint))\n-                    };\n-                    perm.unsafe_set(i as uint, perm_k_i);\n-                    perm.unsafe_set((k-i) as uint, perm_i);\n-                }\n-                flips_count += 1;\n+        let mut flips_count: i32 = 0;\n+        let mut k: i32;\n+        loop {\n+            k = perm[0];\n+            if k == 0 {\n+                break;\n             }\n \n-            max_flips_count = max(max_flips_count, flips_count);\n-            checksum += if perm_count % 2 == 0 {\n-                flips_count\n-            } else {\n-                -flips_count\n-            };\n+            let k2 = (k+1) >> 1;\n+            for i in range(0i32, k2) {\n+                perm.swap(i as uint, (k - i) as uint);\n+            }\n+            flips_count += 1;\n+        }\n \n-            // Use incremental change to generate another permutation.\n-            loop {\n-                if r == n {\n-                    println!(\"{}\", checksum);\n-                    return max_flips_count;\n-                }\n+        max_flips_count = max(max_flips_count, flips_count);\n+        checksum += if perm_count % 2 == 0 {\n+            flips_count\n+        } else {\n+            -flips_count\n+        };\n \n-                let perm0 = perm1[0];\n-                let mut i: i32 = 0;\n-                while i < r {\n-                    let j = i + 1;\n-                    let perm1_j = { *perm1.unsafe_ref(j as uint) };\n-                    perm1.unsafe_set(i as uint, perm1_j);\n-                    i = j;\n-                }\n-                perm1.unsafe_set(r as uint, perm0);\n+        // Use incremental change to generate another permutation.\n+        loop {\n+            if r == n {\n+                println!(\"{}\", checksum);\n+                return max_flips_count;\n+            }\n \n-                let count_r = { *count.unsafe_ref(r as uint) };\n-                count.unsafe_set(r as uint, count_r - 1);\n-                if *count.unsafe_ref(r as uint) > 0 {\n-                    break;\n-                }\n-                r += 1;\n+            let perm0 = perm1[0];\n+            let mut i: i32 = 0;\n+            while i < r {\n+                let j = i + 1;\n+                perm1[i] = perm1[j];\n+                i = j;\n             }\n+            perm1[r] = perm0;\n \n-            perm_count += 1;\n+            count[r] -= 1;\n+            if count[r] > 0 {\n+                break;\n+            }\n+            r += 1;\n         }\n+\n+        perm_count += 1;\n     }\n }\n \n fn main() {\n-    let n: i32 = FromStr::from_str(os::args()[1]).unwrap();\n+    let args = os::args();\n+    let n = if args.len() > 1 {\n+        from_str::<i32>(args[1]).unwrap()\n+    } else {\n+        2\n+    };\n     println!(\"Pfannkuchen({}) = {}\", n as int, fannkuch_redux(n) as int);\n }"}, {"sha": "f38acf0457d3cab7a1b87a70971deaf95dda155e", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 83, "deletions": 97, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,13 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test reading from os::args()[1] - bogus!\n-\n-use std::cast::transmute;\n-use std::from_str::FromStr;\n-use std::libc::{FILE, STDOUT_FILENO, c_int, fdopen, fputc, fputs, fwrite, size_t};\n+use std::cmp::min;\n+use std::io::{stdout, BufferedWriter, IoResult};\n use std::os;\n-use std::uint::min;\n use std::vec::bytes::copy_memory;\n use std::vec;\n \n@@ -37,10 +33,6 @@ static ALU: &'static str = \"GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTG\\\n \n static NULL_AMINO_ACID: AminoAcid = AminoAcid { c: ' ' as u8, p: 0.0 };\n \n-static MESSAGE_1: &'static str = \">ONE Homo sapiens alu\\n\";\n-static MESSAGE_2: &'static str = \">TWO IUB ambiguity codes\\n\";\n-static MESSAGE_3: &'static str = \">THREE Homo sapiens frequency\\n\";\n-\n static IUB: [AminoAcid, ..15] = [\n     AminoAcid { c: 'a' as u8, p: 0.27 },\n     AminoAcid { c: 'c' as u8, p: 0.12 },\n@@ -85,73 +77,68 @@ struct AminoAcid {\n     p: f32,\n }\n \n-struct RepeatFasta {\n+struct RepeatFasta<'a, W> {\n     alu: &'static str,\n-    stdout: *FILE,\n+    out: &'a mut W\n }\n \n-impl RepeatFasta {\n-    fn new(stdout: *FILE, alu: &'static str) -> RepeatFasta {\n-        RepeatFasta {\n-            alu: alu,\n-            stdout: stdout,\n-        }\n+impl<'a, W: Writer> RepeatFasta<'a, W> {\n+    fn new(alu: &'static str, w: &'a mut W) -> RepeatFasta<'a, W> {\n+        RepeatFasta { alu: alu, out: w }\n     }\n \n-    fn make(&mut self, n: uint) {\n-        unsafe {\n-            let stdout = self.stdout;\n-            let alu_len = self.alu.len();\n-            let mut buf = vec::from_elem(alu_len + LINE_LEN, 0u8);\n-            let alu: &[u8] = self.alu.as_bytes();\n-\n-            copy_memory(buf, alu);\n-            let buf_len = buf.len();\n-            copy_memory(buf.mut_slice(alu_len, buf_len),\n-                        alu.slice_to(LINE_LEN));\n-\n-            let mut pos = 0;\n-            let mut bytes;\n-            let mut n = n;\n-            while n > 0 {\n-                bytes = min(LINE_LEN, n);\n-                fwrite(transmute(&buf[pos]), bytes as size_t, 1, stdout);\n-                fputc('\\n' as c_int, stdout);\n-                pos += bytes;\n-                if pos > alu_len {\n-                    pos -= alu_len;\n-                }\n-                n -= bytes;\n+    fn make(&mut self, n: uint) -> IoResult<()> {\n+        let alu_len = self.alu.len();\n+        let mut buf = vec::from_elem(alu_len + LINE_LEN, 0u8);\n+        let alu: &[u8] = self.alu.as_bytes();\n+\n+        copy_memory(buf, alu);\n+        let buf_len = buf.len();\n+        copy_memory(buf.mut_slice(alu_len, buf_len),\n+                    alu.slice_to(LINE_LEN));\n+\n+        let mut pos = 0;\n+        let mut bytes;\n+        let mut n = n;\n+        while n > 0 {\n+            bytes = min(LINE_LEN, n);\n+            try!(self.out.write(buf.slice(pos, pos + bytes)));\n+            try!(self.out.write_u8('\\n' as u8));\n+            pos += bytes;\n+            if pos > alu_len {\n+                pos -= alu_len;\n             }\n+            n -= bytes;\n         }\n+        Ok(())\n     }\n }\n \n-struct RandomFasta {\n+fn make_lookup(a: &[AminoAcid]) -> [AminoAcid, ..LOOKUP_SIZE] {\n+    let mut lookup = [ NULL_AMINO_ACID, ..LOOKUP_SIZE ];\n+    let mut j = 0;\n+    for (i, slot) in lookup.mut_iter().enumerate() {\n+        while a[j].p < (i as f32) {\n+            j += 1;\n+        }\n+        *slot = a[j];\n+    }\n+    lookup\n+}\n+\n+struct RandomFasta<'a, W> {\n     seed: u32,\n-    stdout: *FILE,\n     lookup: [AminoAcid, ..LOOKUP_SIZE],\n+    out: &'a mut W,\n }\n \n-impl RandomFasta {\n-    fn new(stdout: *FILE, a: &[AminoAcid]) -> RandomFasta {\n+impl<'a, W: Writer> RandomFasta<'a, W> {\n+    fn new(w: &'a mut W, a: &[AminoAcid]) -> RandomFasta<'a, W> {\n         RandomFasta {\n             seed: 42,\n-            stdout: stdout,\n-            lookup: RandomFasta::make_lookup(a),\n-        }\n-    }\n-\n-    fn make_lookup(a: &[AminoAcid]) -> [AminoAcid, ..LOOKUP_SIZE] {\n-        let mut lookup = [ NULL_AMINO_ACID, ..LOOKUP_SIZE ];\n-        let mut j = 0;\n-        for (i, slot) in lookup.mut_iter().enumerate() {\n-            while a[j].p < (i as f32) {\n-                j += 1;\n-            }\n-            *slot = a[j];\n+            out: w,\n+            lookup: make_lookup(a),\n         }\n-        lookup\n     }\n \n     fn rng(&mut self, max: f32) -> f32 {\n@@ -169,51 +156,50 @@ impl RandomFasta {\n         0\n     }\n \n-    fn make(&mut self, n: uint) {\n-        unsafe {\n-            let lines = n / LINE_LEN;\n-            let chars_left = n % LINE_LEN;\n-            let mut buf = [0, ..LINE_LEN + 1];\n-\n-            for _ in range(0, lines) {\n-                for i in range(0u, LINE_LEN) {\n-                    buf[i] = self.nextc();\n-                }\n-                buf[LINE_LEN] = '\\n' as u8;\n-                fwrite(transmute(&buf[0]),\n-                       LINE_LEN as size_t + 1,\n-                       1,\n-                       self.stdout);\n-            }\n-            for i in range(0u, chars_left) {\n+    fn make(&mut self, n: uint) -> IoResult<()> {\n+        let lines = n / LINE_LEN;\n+        let chars_left = n % LINE_LEN;\n+        let mut buf = [0, ..LINE_LEN + 1];\n+\n+        for _ in range(0, lines) {\n+            for i in range(0u, LINE_LEN) {\n                 buf[i] = self.nextc();\n             }\n-            fwrite(transmute(&buf[0]), chars_left as size_t, 1, self.stdout);\n+            buf[LINE_LEN] = '\\n' as u8;\n+            try!(self.out.write(buf));\n+        }\n+        for i in range(0u, chars_left) {\n+            buf[i] = self.nextc();\n         }\n+        self.out.write(buf.slice_to(chars_left))\n     }\n }\n \n fn main() {\n-    let n: uint = FromStr::from_str(os::args()[1]).unwrap();\n-\n-    unsafe {\n-        let mode = \"w\";\n-        let stdout = fdopen(STDOUT_FILENO as c_int, transmute(&mode[0]));\n-\n-        fputs(transmute(&MESSAGE_1[0]), stdout);\n-        let mut repeat = RepeatFasta::new(stdout, ALU);\n-        repeat.make(n * 2);\n+    let args = os::args();\n+    let n = if args.len() > 1 {\n+        from_str::<uint>(args[1]).unwrap()\n+    } else {\n+        5\n+    };\n+\n+    let mut out = BufferedWriter::new(stdout());\n+\n+    out.write_line(\">ONE Homo sapiens alu\").unwrap();\n+    {\n+        let mut repeat = RepeatFasta::new(ALU, &mut out);\n+        repeat.make(n * 2).unwrap();\n+    }\n \n-        fputs(transmute(&MESSAGE_2[0]), stdout);\n-        let iub = sum_and_scale(IUB);\n-        let mut random = RandomFasta::new(stdout, iub);\n-        random.make(n * 3);\n+    out.write_line(\">TWO IUB ambiguity codes\").unwrap();\n+    let iub = sum_and_scale(IUB);\n+    let mut random = RandomFasta::new(&mut out, iub);\n+    random.make(n * 3).unwrap();\n \n-        fputs(transmute(&MESSAGE_3[0]), stdout);\n-        let homo_sapiens = sum_and_scale(HOMO_SAPIENS);\n-        random.lookup = RandomFasta::make_lookup(homo_sapiens);\n-        random.make(n * 5);\n+    random.out.write_line(\">THREE Homo sapiens frequency\").unwrap();\n+    let homo_sapiens = sum_and_scale(HOMO_SAPIENS);\n+    random.lookup = make_lookup(homo_sapiens);\n+    random.make(n * 5).unwrap();\n \n-        fputc('\\n' as c_int, stdout);\n-    }\n+    random.out.write_str(\"\\n\").unwrap();\n }"}, {"sha": "a8f3489cb8793b08a19f8704f1055f59e1fd3296", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 73, "deletions": 106, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,19 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n+// ignore-pretty\n \n-extern crate extra;\n+use std::str;\n+use std::vec;\n \n-use std::cast::transmute;\n-use std::i32::range;\n-use std::libc::{STDIN_FILENO, c_int, fdopen, fgets, fileno, fopen, fstat};\n-use std::libc::{stat, strlen};\n-use std::mem::init;\n-use std::ptr::null;\n-use std::vec::{reverse};\n-\n-static LINE_LEN: uint = 80;\n static TABLE: [u8, ..4] = [ 'A' as u8, 'C' as u8, 'G' as u8, 'T' as u8 ];\n static TABLE_SIZE: uint = 2 << 16;\n \n@@ -34,41 +26,37 @@ static OCCURRENCES: [&'static str, ..5] = [\n \n // Code implementation\n \n-#[deriving(Eq, Ord)]\n+#[deriving(Eq, TotalOrd, TotalEq)]\n struct Code(u64);\n \n impl Code {\n     fn hash(&self) -> u64 {\n-        **self\n+        let Code(ret) = *self;\n+        return ret;\n     }\n \n-    #[inline(always)]\n     fn push_char(&self, c: u8) -> Code {\n-        Code((**self << 2) + (pack_symbol(c) as u64))\n+        Code((self.hash() << 2) + (pack_symbol(c) as u64))\n     }\n \n     fn rotate(&self, c: u8, frame: i32) -> Code {\n-        Code(*self.push_char(c) & ((1u64 << (2 * (frame as u64))) - 1))\n+        Code(self.push_char(c).hash() & ((1u64 << (2 * (frame as u64))) - 1))\n     }\n \n     fn pack(string: &str) -> Code {\n-        let mut code = Code(0u64);\n-        for i in range(0u, string.len()) {\n-            code = code.push_char(string[i]);\n-        }\n-        code\n+        string.bytes().fold(Code(0u64), |a, b| a.push_char(b))\n     }\n \n     // FIXME: Inefficient.\n     fn unpack(&self, frame: i32) -> ~str {\n-        let mut key = **self;\n+        let mut key = self.hash();\n         let mut result = ~[];\n         for _ in range(0, frame) {\n             result.push(unpack_symbol((key as u8) & 3));\n             key >>= 2;\n         }\n \n-        reverse(result);\n+        result.reverse();\n         str::from_utf8_owned(result).unwrap()\n     }\n }\n@@ -91,7 +79,8 @@ struct PrintCallback(&'static str);\n \n impl TableCallback for PrintCallback {\n     fn f(&self, entry: &mut Entry) {\n-        println!(\"{}\\t{}\", entry.count as int, **self);\n+        let PrintCallback(s) = *self;\n+        println!(\"{}\\t{}\", entry.count as int, s);\n     }\n }\n \n@@ -103,14 +92,19 @@ struct Entry {\n \n struct Table {\n     count: i32,\n-    items: [Option<~Entry>, ..TABLE_SIZE]\n+    items: ~[Option<~Entry>]\n+}\n+\n+struct Items<'a> {\n+    cur: Option<&'a Entry>,\n+    items: vec::Items<'a, Option<~Entry>>,\n }\n \n impl Table {\n     fn new() -> Table {\n         Table {\n             count: 0,\n-            items: [ None, ..TABLE_SIZE ],\n+            items: vec::from_fn(TABLE_SIZE, |_| None),\n         }\n     }\n \n@@ -137,7 +131,7 @@ impl Table {\n     }\n \n     fn lookup<C:TableCallback>(&mut self, key: Code, c: C) {\n-        let index = *key % (TABLE_SIZE as u64);\n+        let index = key.hash() % (TABLE_SIZE as u64);\n \n         {\n             if self.items[index].is_none() {\n@@ -153,7 +147,7 @@ impl Table {\n         }\n \n         {\n-            let mut entry = &mut *self.items[index].get_mut_ref();\n+            let entry = &mut *self.items[index].get_mut_ref();\n             if entry.code == key {\n                 c.f(*entry);\n                 return;\n@@ -163,37 +157,45 @@ impl Table {\n         }\n     }\n \n-    fn each(&self, f: |entry: &Entry| -> bool) {\n-        for self.items.each |item| {\n-            match *item {\n-                None => {}\n-                Some(ref item) => {\n-                    let mut item: &Entry = *item;\n-                    loop {\n-                        if !f(item) {\n-                            return;\n-                        }\n-\n-                        match item.next {\n-                            None => break,\n-                            Some(ref next_item) => item = &**next_item,\n-                        }\n+    fn iter<'a>(&'a self) -> Items<'a> {\n+        Items { cur: None, items: self.items.iter() }\n+    }\n+}\n+\n+impl<'a> Iterator<&'a Entry> for Items<'a> {\n+    fn next(&mut self) -> Option<&'a Entry> {\n+        let ret = match self.cur {\n+            None => {\n+                let i;\n+                loop {\n+                    match self.items.next() {\n+                        None => return None,\n+                        Some(&None) => {}\n+                        Some(&Some(ref a)) => { i = &**a; break }\n                     }\n                 }\n-            };\n+                self.cur = Some(&*i);\n+                &*i\n+            }\n+            Some(c) => c\n+        };\n+        match ret.next {\n+            None => { self.cur = None; }\n+            Some(ref next) => { self.cur = Some(&**next); }\n         }\n+        return Some(ret);\n     }\n }\n \n // Main program\n \n fn pack_symbol(c: u8) -> u8 {\n-    match c {\n-        'a' as u8 | 'A' as u8 => 0,\n-        'c' as u8 | 'C' as u8 => 1,\n-        'g' as u8 | 'G' as u8 => 2,\n-        't' as u8 | 'T' as u8 => 3,\n-        _ => fail!(c.to_str())\n+    match c as char {\n+        'a' | 'A' => 0,\n+        'c' | 'C' => 1,\n+        'g' | 'G' => 2,\n+        't' | 'T' => 3,\n+        _ => fail!(\"{}\", c as char),\n     }\n }\n \n@@ -215,43 +217,6 @@ fn next_char<'a>(mut buf: &'a [u8]) -> &'a [u8] {\n     buf\n }\n \n-#[inline(never)]\n-fn read_stdin() -> ~[u8] {\n-    unsafe {\n-        let mode = \"r\";\n-        //let stdin = fdopen(STDIN_FILENO as c_int, transmute(&mode[0]));\n-        let path = \"knucleotide-input.txt\";\n-        let stdin = fopen(transmute(&path[0]), transmute(&mode[0]));\n-\n-        let mut st: stat = init();\n-        fstat(fileno(stdin), &mut st);\n-        let mut buf = vec::from_elem(st.st_size as uint, 0);\n-\n-        let header = \">THREE\".as_bytes();\n-\n-        {\n-            let mut window: &mut [u8] = buf;\n-            loop {\n-                fgets(transmute(&mut window[0]), LINE_LEN as c_int, stdin);\n-\n-                {\n-                    if window.slice(0, 6) == header {\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            while fgets(transmute(&mut window[0]),\n-                        LINE_LEN as c_int,\n-                        stdin) != null() {\n-                window = window.mut_slice(strlen(transmute(&window[0])) as uint, window.len());\n-            }\n-        }\n-\n-        buf\n-    }\n-}\n-\n fn generate_frequencies(frequencies: &mut Table,\n                         mut input: &[u8],\n                         frame: i32) {\n@@ -273,20 +238,20 @@ fn generate_frequencies(frequencies: &mut Table,\n \n fn print_frequencies(frequencies: &Table, frame: i32) {\n     let mut vector = ~[];\n-    for frequencies.each |entry| {\n+    for entry in frequencies.iter() {\n         vector.push((entry.code, entry.count));\n     }\n     vector.sort();\n \n     let mut total_count = 0;\n-    for vector.each |&(_, count)| {\n+    for &(_, count) in vector.iter() {\n         total_count += count;\n     }\n \n-    for vector.each |&(key, count)| {\n+    for &(key, count) in vector.iter() {\n         println!(\"{} {:.3f}\",\n                  key.unpack(frame),\n-                 (count as float * 100.0) / (total_count as float));\n+                 (count as f32 * 100.0) / (total_count as f32));\n     }\n }\n \n@@ -295,22 +260,24 @@ fn print_occurrences(frequencies: &mut Table, occurrence: &'static str) {\n }\n \n fn main() {\n-    let input = read_stdin();\n-\n-    let mut frequencies = ~Table::new();\n-    generate_frequencies(frequencies, input, 1);\n-    print_frequencies(frequencies, 1);\n-\n-    *frequencies = Table::new();\n-    generate_frequencies(frequencies, input, 2);\n-    print_frequencies(frequencies, 2);\n-\n-    for range(0, 5) |i| {\n-        let occurrence = OCCURRENCES[i];\n-        *frequencies = Table::new();\n-        generate_frequencies(frequencies,\n+    let input = include_str!(\"shootout-k-nucleotide.data\");\n+    let pos = input.find_str(\">THREE\").unwrap();\n+    let pos2 = pos + input.slice_from(pos).find_str(\"\\n\").unwrap();\n+    let input = input.slice_from(pos2 + 1).as_bytes();\n+\n+    let mut frequencies = Table::new();\n+    generate_frequencies(&mut frequencies, input, 1);\n+    print_frequencies(&frequencies, 1);\n+\n+    frequencies = Table::new();\n+    generate_frequencies(&mut frequencies, input, 2);\n+    print_frequencies(&frequencies, 2);\n+\n+    for occurrence in OCCURRENCES.iter() {\n+        frequencies = Table::new();\n+        generate_frequencies(&mut frequencies,\n                              input,\n                              occurrence.len() as i32);\n-        print_occurrences(frequencies, occurrence);\n+        print_occurrences(&mut frequencies, *occurrence);\n     }\n }"}, {"sha": "189a3ac74480ef09986ba1d796cfb7f7ad2c4876", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,103 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-pretty\n-// ignore-test linked failure\n-\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/**\n- * Test performance of killing many tasks in a taskgroup.\n- * Along the way, tests various edge cases of ancestor group management.\n- * In particular, this tries to get each grandchild task to hit the\n- * \"nobe_is_dead\" case in each_ancestor only during task exit, but not during\n- * task spawn. This makes sure that defunct ancestor groups are handled correctly\n- * w.r.t. possibly leaving stale *rust_tasks lying around.\n- */\n-\n-// Creates in the background 'num_tasks' tasks, all blocked forever.\n-// Doesn't return until all such tasks are ready, but doesn't block forever itself.\n-\n-use std::comm::{stream, Chan};\n-use std::os;\n-use std::result;\n-use std::task;\n-use std::uint;\n-\n-fn grandchild_group(num_tasks: uint) {\n-    let (po, ch) = stream();\n-    let ch = Chan::new(ch);\n-\n-    for _ in range(0, num_tasks) {\n-        let ch = ch.clone();\n-        let mut t = task::task();\n-        t.spawn(proc() { // linked\n-            ch.send(());\n-            let (p, _c) = stream::<()>();\n-            p.recv(); // block forever\n-        });\n-    }\n-    error!(\"Grandchild group getting started\");\n-    for _ in range(0, num_tasks) {\n-        // Make sure all above children are fully spawned; i.e., enlisted in\n-        // their ancestor groups.\n-        po.recv();\n-    }\n-    error!(\"Grandchild group ready to go.\");\n-    // Master grandchild task exits early.\n-}\n-\n-fn spawn_supervised_blocking(myname: &str, f: proc()) {\n-    let mut builder = task::task();\n-    let res = builder.future_result();\n-    builder.supervised();\n-    builder.spawn(f);\n-    error!(\"{} group waiting\", myname);\n-    let x = res.recv();\n-    assert!(x.is_ok());\n-}\n-\n-fn main() {\n-    let args = os::args();\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"100000\"]\n-    } else if args.len() <= 1u {\n-        ~[~\"\", ~\"100\"]\n-    } else {\n-        args.clone()\n-    };\n-\n-    let num_tasks = from_str::<uint>(args[1]).unwrap();\n-\n-    // Main group #0 waits for unsupervised group #1.\n-    // Grandparent group #1 waits for middle group #2, then fails, killing #3.\n-    // Middle group #2 creates grandchild_group #3, waits for it to be ready, exits.\n-    let x: result::Result<(), ~Any> = task::try(proc() { // unlinked\n-        spawn_supervised_blocking(\"grandparent\", proc() {\n-            spawn_supervised_blocking(\"middle\", proc() {\n-                grandchild_group(num_tasks);\n-            });\n-            // When grandchild group is ready to go, make the middle group exit.\n-            error!(\"Middle group wakes up and exits\");\n-        });\n-        // Grandparent group waits for middle group to be gone, then fails\n-        error!(\"Grandparent group wakes up and fails\");\n-        fail!();\n-    });\n-    assert!(x.is_err());\n-}"}, {"sha": "70e76b9fde11c7fb8c8236a0025d06b823b8311c", "filename": "src/test/compile-fail/dead-code-ret.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,24 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n-// ignored because the lint pass doesn't know to ignore standard library\n-// stuff.\n-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// error-pattern: unreachable statement\n \n #[deny(unreachable_code)];\n \n fn main() {\n     return;\n-    info!(\"Paul is dead\"); //~ ERROR: unreachable\n+    info!(\"Paul is dead\");\n }"}, {"sha": "cd5ee1cafecfbbb0dcb44bb54bbfb3413c4db0ea", "filename": "src/test/compile-fail/empty-linkname.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-linkname.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,10 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:empty #[link_name] not allowed; use #[nolink].\n-\n-// ignore-test\n-\n-#[link_name = \"\"]\n+#[link(name = \"\")] //~ ERROR: given with empty name\n extern {\n }"}, {"sha": "bf4d2b85ed07e06fe1c3a5dce9e129238856afa7", "filename": "src/test/compile-fail/empty-linkname2.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-linkname2.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-\n-// error-pattern:empty #[link_name] not allowed; use #[nolink].\n-// Issue #1326\n-\n-#[link_name = \"\"]\n-#[nolink]\n-extern {\n-}"}, {"sha": "846a51ca1287e8829f31e281117e4b82dec56c6c", "filename": "src/test/compile-fail/issue-2063.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,26 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed.\n-struct t(@t); //~ ERROR this type cannot be instantiated\n+struct t(~t); //~ ERROR this type cannot be instantiated\n \n trait to_str_2 {\n-    fn to_str() -> ~str;\n+    fn my_to_str() -> ~str;\n }\n \n // I use an impl here because it will cause\n // the compiler to attempt autoderef and then\n // try to resolve the method.\n impl to_str_2 for t {\n-    fn to_str() -> ~str { ~\"t\" }\n+    fn my_to_str() -> ~str { ~\"t\" }\n }\n \n fn new_t(x: t) {\n-    x.to_str();\n+    x.my_to_str(); //~ ERROR does not implement\n }\n \n fn main() {"}, {"sha": "414273b1bf3ed19de48d43a08d96f7787cdcf80b", "filename": "src/test/compile-fail/issue-2969.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fcompile-fail%2Fissue-2969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fcompile-fail%2Fissue-2969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2969.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-\n-fn main()\n-{\n-// See #2969 -- error message should be improved\n-   let mut x = [1, 2, 4];\n-   let v : &int = &x[2];\n-   x[2] = 6;\n-   assert_eq!(*v, 6);\n-}"}, {"sha": "ab90b7b253cd12d4f76f1566979651e2dc1a1684", "filename": "src/test/compile-fail/issue-3177-mutable-struct.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fcompile-fail%2Fissue-3177-mutable-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fcompile-fail%2Fissue-3177-mutable-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3177-mutable-struct.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-// error-pattern: instantiating a type parameter with an incompatible type\n-\n-struct S<T:Freeze> {\n-    s: T,\n-    cant_nest: ()\n-}\n-\n-fn main() {\n-    let a1  = ~S{ s: true, cant_nest: () };\n-    let _a2 = ~S{ s: a1, cant_nest: () };\n-}"}, {"sha": "c44336aeaf52b73bd934b7c08c887058ba9befda", "filename": "src/test/compile-fail/issue-3973.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -23,11 +23,11 @@ impl ToStr for Point { //~ ERROR implements a method not defined in the trait\n     }\n \n     fn to_str(&self) -> ~str {\n-        fmt!(\"(%f, %f)\", self.x, self.y)\n+        format!(\"({}, {})\", self.x, self.y)\n     }\n }\n \n fn main() {\n-    let p = Point::new(0.0f, 0.0f);\n+    let p = Point::new(0.0, 0.0);\n     println!(\"{}\", p.to_str());\n }"}, {"sha": "b9f0b6cc61289094c4d1736470c26c3450496ae6", "filename": "src/test/compile-fail/issue-4542.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fcompile-fail%2Fissue-4542.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fcompile-fail%2Fissue-4542.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4542.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-\n-fn main() {\n-    for os::args().each |arg| {\n-        match (*arg).clone() {\n-            s => { }\n-        }\n-    }\n-}"}, {"sha": "94110f077623b680d815c414a616cdc137a2383c", "filename": "src/test/compile-fail/issue-5035.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n trait I {}\n-type K = I;\n-impl K for int {}\n+type K = I; //~ ERROR: reference to trait\n+impl K for int {} //~ ERROR: `K` is not a trait\n fn main() {}"}, {"sha": "a80d4b721924efda0bde66f4e751c76700b6ff7d", "filename": "src/test/compile-fail/issue-6801.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6801.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n // Creating a stack closure which references an owned pointer and then\n // transferring ownership of the owned box before invoking the stack\n // closure results in a crash.\n@@ -26,6 +24,6 @@ fn main() {\n       let x  : ~uint         = ~9;\n       let sq : || -> uint =  || { *x * *x };\n \n-      twice(x);\n+      twice(x); //~ ERROR: cannot move out of\n       invoke(sq);\n }"}, {"sha": "2e131485301c6d75cbddc07e77144efe9f375536", "filename": "src/test/compile-fail/kindck-owned-trait-scoped.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,61 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-// ignored because to_foo() doesn't work.\n-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// A dummy trait/impl that work close over any type.  The trait will\n-// be parameterized by a region due to the &'a int constraint.\n-\n-trait foo {\n-    fn foo(&self, i: &'a int) -> int;\n-}\n-\n-impl<T:Clone> foo for T {\n-    fn foo(&self, i: &'a int) -> int {*i}\n-}\n-\n-fn to_foo<T:Clone>(t: T) {\n-    // This version is ok because, although T may contain references\n-    // it never escapes the fn body.  We know this because\n-    // the type of foo includes a region which will be resolved to\n-    // the fn body itself.\n-    let v = &3;\n-    struct F<T> { f: T }\n-    let x = @F {f:t} as @foo;\n-    assert_eq!(x.foo(v), 3);\n-}\n-\n-fn to_foo_2<T:Clone>(t: T) -> @foo {\n-    // Not OK---T may contain references and it is going to escape\n-    // as part of the returned foo value\n-    struct F<T> { f: T }\n-    @F {f:t} as @foo //~ ERROR value may contain references; add `'static` bound\n-}\n-\n-fn to_foo_3<T:Clone + 'static>(t: T) -> @foo {\n-    // OK---T may escape as part of the returned foo value, but it is\n-    // owned and hence does not contain references\n-    struct F<T> { f: T }\n-    @F {f:t} as @foo\n-}\n-\n-fn main() {\n-}"}, {"sha": "83c911d916e1e8c348101e061a6dee961db3e86c", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,21 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-// ignored because lint is messed up with the new visitor transition\n-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n #[deny(unused_variable)];\n #[deny(dead_assignment)];\n+#[allow(dead_code, non_camel_case_types)];\n \n fn f1(x: int) {\n     //~^ ERROR unused variable: `x`"}, {"sha": "79f0cc352e4e708b7e91bbf7d97532c1dd92e611", "filename": "src/test/compile-fail/pptypedef.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n-type foo = Option<int>;\n-\n-fn bar(_t: foo) {}\n+fn let_in<T>(x: T, f: |T|) {}\n \n fn main() {\n-    // we used to print foo<int>:\n-    bar(Some(3u)); //~ ERROR mismatched types: expected `foo`\n+    let_in(3u, |i| { assert!(i == 3i); });\n+    //~^ ERROR expected `uint` but found `int`\n+\n+    let_in(3i, |i| { assert!(i == 3u); });\n+    //~^ ERROR expected `int` but found `uint`\n }"}, {"sha": "fb80c31d4647c3ab835c7d09c4b7ad65c32421ee", "filename": "src/test/compile-fail/private-variant-xc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fprivate-variant-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fprivate-variant-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-xc.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n // aux-build:private_variant_xc.rs\n \n extern crate private_variant_xc;\n \n pub fn main() {\n     let _ = private_variant_xc::Bar;\n-    let _ = private_variant_xc::Baz;    //~ ERROR unresolved name\n+    let _ = private_variant_xc::Baz;    //~ ERROR variant `Baz` is private\n }"}, {"sha": "e4dd4b75fd4a8903ab0bfbf241406928ce8f20a4", "filename": "src/test/compile-fail/private_variant_2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fprivate_variant_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fprivate_variant_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate_variant_2.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n // aux-build:private_variant_1.rs\n \n extern crate private_variant_1;\n \n fn main() {\n-    let _x = private_variant_1::super_sekrit::baz; //~ ERROR baz is private\n+    let _x = private_variant_1::super_sekrit::baz; //~ ERROR is private\n }"}, {"sha": "0fe042b924a6e3e25dc7d151a3fad49fe7ce0032", "filename": "src/test/compile-fail/recursion.rs", "status": "renamed", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Frecursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Frecursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursion.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,20 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n enum Nil {Nil}\n struct Cons<T> {head:int, tail:T}\n-trait Dot {fn dot(other:self) -> int;}\n+trait Dot {fn dot(&self, other:Self) -> int;}\n impl Dot for Nil {\n-  fn dot(_:Nil) -> int {0}\n+  fn dot(&self, _:Nil) -> int {0}\n }\n impl<T:Dot> Dot for Cons<T> {\n-  fn dot(other:Cons<T>) -> int {\n+  fn dot(&self, other:Cons<T>) -> int {\n     self.head * other.head + self.tail.dot(other.tail)\n   }\n }\n fn test<T:Dot> (n:int, i:int, first:T, second:T) ->int {\n+    //~^ ERROR: overly deep expansion of inlined function\n   match n {\n     0 => {first.dot(second)}\n       // Error message should be here. It should be a type error", "previous_filename": "src/test/run-pass/recursion.rs"}, {"sha": "8edbeae1cc08b8a9c63cc51af5d82e08a489f6d5", "filename": "src/test/compile-fail/redundant-link-args.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-fast\n-// ignore-test\n-\n-// error-pattern:library 'm' already added: can't specify link_args.\n-\n-/* I think it should undefined to have multiple modules that link in the same\n-  library, but provide different link arguments. Unfortunately we don't track\n-  link_args by module -- they are just appended as discovered into the crate\n-  store -- but for now, it should be an error to provide link_args on a module\n-  that's already been included (with or without link_args). */\n-\n-#[link_name= \"m\"]\n-#[link_args=\"-foo\"]             // this could have been elided.\n-extern {\n-}\n-\n-#[link_name= \"m\"]\n-#[link_args=\"-bar\"]             // this is the actual error trigger.\n-extern {\n-}"}, {"sha": "b3b5993bf915bd06d51143ba57dec3fd1fa18cab", "filename": "src/test/compile-fail/regions-fn-bound.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -24,21 +24,23 @@\n fn of<T>() -> |T| { fail!(); }\n fn subtype<T>(x: |T|) { fail!(); }\n \n-fn test_fn<T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n+fn test_fn<'x, 'y, 'z, T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n     // Here, x, y, and z are free.  Other letters\n     // are bound.  Note that the arrangement\n     // subtype::<T1>(of::<T2>()) will typecheck\n     // iff T1 <: T2.\n \n     // should be the default:\n-    subtype::<'static ||>(of::<||>());\n-    subtype::<||>(of::<'static ||>());\n+    subtype::< ||:'static>(of::<||>());\n+    subtype::<||>(of::< ||:'static>());\n \n     //\n-    subtype::<'x ||>(of::<||>());    //~ ERROR mismatched types\n-    subtype::<'x ||>(of::<'y ||>());  //~ ERROR mismatched types\n+    subtype::< <'x> ||>(of::<||>());    //~ ERROR mismatched types\n+    subtype::< <'x> ||>(of::< <'y> ||>());  //~ ERROR mismatched types\n \n-    subtype::<'x ||>(of::<'static ||>()); //~ ERROR mismatched types\n-    subtype::<'static ||>(of::<'x ||>());\n+    subtype::< <'x> ||>(of::< ||:'static>()); //~ ERROR mismatched types\n+    subtype::< ||:'static>(of::< <'x> ||>());\n \n }\n+\n+fn main() {}"}, {"sha": "e65b1c0bf3afa61b7ebf6462f852f54f0bdcc85b", "filename": "src/test/compile-fail/syntax-extension-minor.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n // this now fails (correctly, I claim) because hygiene prevents\n // the assembled identifier from being a reference to the binding.\n \n pub fn main() {\n     let asdf_fdsa = ~\"<.<\";\n     assert_eq!(concat_idents!(asd, f_f, dsa), ~\"<.<\");\n+    //~^ ERROR: unresolved name `asdf_fdsa`\n \n     assert!(stringify!(use_mention_distinction) ==\n                 \"use_mention_distinction\");", "previous_filename": "src/test/run-pass/syntax-extension-minor.rs"}, {"sha": "29101158252b275c123c8de4aeb525eaa61415d1", "filename": "src/test/compile-fail/trait-inheritance-missing-requirement.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fcompile-fail%2Ftrait-inheritance-missing-requirement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Fcompile-fail%2Ftrait-inheritance-missing-requirement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-inheritance-missing-requirement.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-// error-pattern: what\n-\n-trait Foo {\n-    fn f();\n-}\n-\n-trait Bar : Foo {\n-    fn g();\n-}\n-\n-struct A {\n-    x: int\n-}\n-\n-// Can't implement Bar without an impl of Foo\n-impl Bar for A {\n-    fn g() { }\n-}\n-\n-fn main() {\n-}"}, {"sha": "49449be52af8f5a13981b8aabd13e24bc1850f04", "filename": "src/test/run-fail/issue-2061.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-fail%2Fissue-2061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-fail%2Fissue-2061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2061.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-test\n-// error-pattern: ran out of stack\n+// error-pattern: task '<main>' has overflowed its stack\n \n struct R {\n     b: int,"}, {"sha": "fb5fdffffeca544e0f73a7bb9b8cf55a392a7a45", "filename": "src/test/run-fail/linked-failure.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test linked failure\n-// error-pattern:1 == 2\n-\n-extern crate extra;\n-\n-use std::comm;\n-use std::task;\n-\n-fn child() { assert!((1 == 2)); }\n-\n-fn main() {\n-    let (p, _c) = comm::stream::<int>();\n-    task::spawn(|| child() );\n-    let x = p.recv();\n-}"}, {"sha": "8b9dd591f02ccaaa59bde058133b468e23dcbdbb", "filename": "src/test/run-fail/linked-failure2.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure2.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test linked failure\n-// error-pattern:fail\n-\n-use std::comm;\n-use std::task;\n-\n-fn child() { fail!(); }\n-\n-fn main() {\n-    let (p, _c) = comm::stream::<()>();\n-    task::spawn(|| child() );\n-    task::deschedule();\n-}"}, {"sha": "78119dd37a03477d1e38923b3644b685a67d8e1f", "filename": "src/test/run-fail/linked-failure3.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure3.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test linked failure\n-// error-pattern:fail\n-\n-use std::comm;\n-use std::task;\n-\n-fn grandchild() { fail!(\"grandchild dies\"); }\n-\n-fn child() {\n-    let (p, _c) = comm::stream::<int>();\n-    task::spawn(|| grandchild() );\n-    let x = p.recv();\n-}\n-\n-fn main() {\n-    let (p, _c) = comm::stream::<int>();\n-    task::spawn(|| child() );\n-    let x = p.recv();\n-}"}, {"sha": "fc47f470dd0ff521ba8946d3096c4f5e6e3491c8", "filename": "src/test/run-fail/linked-failure4.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-fail%2Flinked-failure4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-fail%2Flinked-failure4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure4.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test linked failure\n-// error-pattern:1 == 2\n-\n-use std::comm;\n-use std::task;\n-\n-fn child() { assert!((1 == 2)); }\n-\n-fn parent() {\n-    let (p, _c) = comm::stream::<int>();\n-    task::spawn(|| child() );\n-    let x = p.recv();\n-}\n-\n-// This task is not linked to the failure chain, but since the other\n-// tasks are going to fail the kernel, this one will fail too\n-fn sleeper() {\n-    let (p, _c) = comm::stream::<int>();\n-    let x = p.recv();\n-}\n-\n-fn main() {\n-    task::spawn(|| sleeper() );\n-    task::spawn(|| parent() );\n-}"}, {"sha": "01bc966e90ad2bc27b2a5e23512c8a22b873e124", "filename": "src/test/run-fail/spawnfail.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fspawnfail.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,24 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test linked failure\n-// error-pattern:explicit\n-\n-extern crate extra;\n-\n-use std::task;\n-\n-// We don't want to see any invalid reads\n-fn main() {\n-    fn f() {\n-        fail!();\n-    }\n-    task::spawn(|| f() );\n-}"}, {"sha": "2eaca95ce2ff3a2c0b3387fdbf255b05d565218e", "filename": "src/test/run-fail/task-comm-recv-block.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test linked failure\n-// error-pattern:goodfail\n-\n-use std::comm;\n-use std::task;\n-\n-fn goodfail() {\n-    task::deschedule();\n-    fail!(\"goodfail\");\n-}\n-\n-fn main() {\n-    task::spawn(|| goodfail() );\n-    let (po, _c) = comm::stream();\n-    // We shouldn't be able to get past this recv since there's no\n-    // message available\n-    let i: int = po.recv();\n-    fail!(\"badfail\");\n-}"}, {"sha": "1ce6c1b77dda7ffc86cb66c8fc6cf6849f163ed7", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -13,32 +13,32 @@\n \n #[feature(managed_boxes)];\n \n-extern crate extra;\n extern crate time;\n+extern crate serialize;\n \n // These tests used to be separate files, but I wanted to refactor all\n // the common code.\n \n use std::hashmap::{HashMap, HashSet};\n \n-use EBReader = extra::ebml::reader;\n-use EBWriter = extra::ebml::writer;\n+use EBReader = serialize::ebml::reader;\n+use EBWriter = serialize::ebml::writer;\n use std::cmp::Eq;\n use std::cmp;\n use std::io;\n use serialize::{Decodable, Encodable};\n \n-fn test_ebml<'a, A:\n+fn test_ebml<'a, 'b, A:\n     Eq +\n-    Encodable<EBWriter::Encoder> +\n-    Decodable<EBReader::Decoder<'a>>\n+    Encodable<EBWriter::Encoder<'a>> +\n+    Decodable<EBReader::Decoder<'b>>\n >(a1: &A) {\n     let mut wr = std::io::MemWriter::new();\n     let mut ebml_w = EBWriter::Encoder(&mut wr);\n     a1.encode(&mut ebml_w);\n     let bytes = wr.get_ref();\n \n-    let d: extra::ebml::Doc<'a> = EBReader::Doc(bytes);\n+    let d: serialize::ebml::Doc<'a> = EBReader::Doc(bytes);\n     let mut decoder: EBReader::Decoder<'a> = EBReader::Decoder(d);\n     let a2: A = Decodable::decode(&mut decoder);\n     assert!(*a1 == a2);"}, {"sha": "ac4101ae5b174465738a6c96f13dd3919da2e5b8", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -54,7 +54,7 @@ struct G<T> {\n     t: T\n }\n \n-fn roundtrip<'a, T: Rand + Eq + Encodable<Encoder> +\n+fn roundtrip<'a, T: Rand + Eq + Encodable<Encoder<'a>> +\n                     Decodable<Decoder<'a>>>() {\n     let obj: T = random();\n     let mut w = MemWriter::new();"}, {"sha": "fae67e9e3d9953694369f154ed448b121f7045b8", "filename": "src/test/run-pass/for-destruct.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Ffor-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Ffor-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-destruct.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,13 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test: #3511: does not currently compile, due to rvalue issues\n-\n-use std::vec;\n-\n struct Pair { x: int, y: int }\n+\n pub fn main() {\n-    for vec::each(~[Pair {x: 10, y: 20}, Pair {x: 30, y: 0}]) |elt| {\n+    for elt in (~[Pair {x: 10, y: 20}, Pair {x: 30, y: 0}]).iter() {\n         assert_eq!(elt.x + elt.y, 30);\n     }\n }"}, {"sha": "3ee43d00dee7cf4d50e1869561c75f3c8dc6b62e", "filename": "src/test/run-pass/foreign-lib-path.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-lib-path.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test FIXME I don't know how to test this (#2604)\n-// compile-flags:-L.\n-// The -L flag is also used for linking foreign libraries\n-\n-mod WHATGOESHERE {\n-    // FIXME: I want to name a mod that would not link successfully\n-    // wouthout providing a -L argument to the compiler, and that\n-    // will also be found successfully at runtime.\n-    extern {\n-        pub fn IDONTKNOW() -> u32;\n-    }\n-}\n-\n-pub fn main() {\n-    assert_eq!(IDONTKNOW(), 0x_BAD_DOOD_u32);\n-}"}, {"sha": "0e4114a3ad383a934bc97861d119b49997ced09b", "filename": "src/test/run-pass/foreign-mod.rc", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fforeign-mod.rc", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fforeign-mod.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod.rc?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test FIXME #7308\n-\n-native mod libc = target_libc {\n-  fn open(int name, int flags, int mode) -> int;\n-  fn close(int fd) -> int;\n-  fn read(int fd, int buf, int count) -> int;\n-  fn write(int fd, int buf, int count) -> int;\n-  fn malloc(int sz) -> int;\n-  fn free(int p) -> ();\n-}\n-\n-native \"cdecl\" mod rustrt {\n-  fn str_buf(str s) -> int;\n-}\n-\n-mod inner = \"native-mod-src/inner.rs\";"}, {"sha": "129db5d8d44337c217a081119112679f1313f3ea", "filename": "src/test/run-pass/foreign.rc", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fforeign.rc", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fforeign.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign.rc?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-\n-native \"cdecl\" mod rustrt {\n-  fn str_buf(str s) -> int;\n-}\n-\n-\n-native mod libc = target_libc {\n-  fn puts(int s) -> ();\n-}\n-\n-mod user = \"native-src/native.rs\";"}, {"sha": "a0c0275c193c89c89a823f2a6ade8342fc3cc06a", "filename": "src/test/run-pass/issue-1451.rs", "status": "renamed", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fissue-1451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fissue-1451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1451.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,22 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test linked failure\n+#[allow(unused_variable)];\n \n-extern crate extra;\n+struct T { f: extern \"Rust\" fn() }\n+struct S { f: extern \"Rust\" fn() }\n \n-use std::task;\n+fn fooS(t: S) {\n+}\n \n-fn die() {\n-    fail!();\n+fn fooT(t: T) {\n }\n \n-fn iloop() {\n-    task::spawn(|| die() );\n+fn bar() {\n }\n \n pub fn main() {\n-    for _ in range(0u, 100u) {\n-        task::spawn_unlinked(|| iloop() );\n-    }\n+    let x: extern \"Rust\" fn() = bar;\n+    fooS(S {f: x});\n+    fooS(S {f: bar});\n+\n+    let x: extern \"Rust\" fn() = bar;\n+    fooT(T {f: x});\n+    fooT(T {f: bar});\n }", "previous_filename": "src/test/run-pass/lots-a-fail.rs"}, {"sha": "a8e3584364d62cfc069e2c610e8805806ad4e9af", "filename": "src/test/run-pass/issue-2074.rs", "status": "renamed", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fissue-2074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fissue-2074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2074.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,13 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n-extern crate extra;\n-\n-use list = extra::oldmap::chained;\n-use extra::list;\n+#[allow(non_camel_case_types)];\n \n pub fn main() {\n-    let _x: list::T<int, int> = list::mk();\n+    let one: || -> uint = || {\n+        enum r { a };\n+        a as uint\n+    };\n+    let two: || -> uint = || {\n+        enum r { a };\n+        a as uint\n+    };\n+    one(); two();\n }", "previous_filename": "src/test/run-pass/duplicate-use.rs"}, {"sha": "0580dd89a3092c8fdff3e2a8d5bffaa7a670558c", "filename": "src/test/run-pass/issue-2190-1.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,18 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n+use std::task;\n \n static generations: uint = 1024+256+128+49;\n \n+fn spawn(f: proc()) {\n+    let mut t = task::task();\n+    t.opts.stack_size = Some(32 * 1024);\n+    t.spawn(f);\n+}\n+\n fn child_no(x: uint) -> proc() {\n-     || {\n+    proc() {\n         if x < generations {\n-            task::spawn(child_no(x+1));\n+            spawn(child_no(x+1));\n         }\n     }\n }\n \n pub fn main() {\n-    task::spawn(child_no(0));\n+    spawn(child_no(0));\n }"}, {"sha": "39a97b00b32da855b42da654de601e6e447ec6aa", "filename": "src/test/run-pass/issue-2190-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -17,13 +17,13 @@ mod a {\n }\n \n mod b {\n-    fn foo(f: Option<||>) { f.iter(|x|x()) }\n+    fn foo(f: Option<||>) { f.map(|x|x()); }\n     fn bar() {}\n     pub fn main() { foo(Some(bar)); }\n }\n \n mod c {\n-    fn foo(f: Option<||>) { f.iter(|x|x()) }\n+    fn foo(f: Option<||>) { f.map(|x|x()); }\n     fn bar() {}\n     pub fn main() { foo(Some(||bar())); }\n }"}, {"sha": "daea219ff7670a7e5a4b186ca75c9be9f008562f", "filename": "src/test/run-pass/issue-2190.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fissue-2190.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fissue-2190.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-\n-type t = {\n-    f: proc()\n-};\n-\n-pub fn main() {\n-    let _t: t = { f: {||()} };\n-}"}, {"sha": "34a855233a8ba1d10a721f6a546c198d2cc704d1", "filename": "src/test/run-pass/issue-3168.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3168.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test linked failure\n-// ignore-fast\n-\n-use std::comm;\n-use std::task;\n-\n-pub fn main() {\n-    let (p,c) = comm::stream();\n-    task::try(|| {\n-        let (p2,c2) = comm::stream();\n-        task::spawn(|| {\n-            p2.recv();\n-            error!(\"sibling fails\");\n-            fail!();\n-        });\n-        let (p3,c3) = comm::stream();\n-        c.send(c3);\n-        c2.send(());\n-        error!(\"child blocks\");\n-        p3.recv();\n-    });\n-    error!(\"parent tries\");\n-    assert!(!p.recv().try_send(()));\n-    error!(\"all done!\");\n-}"}, {"sha": "f2beda5973323c46f940bcc512c09867c39088f0", "filename": "src/test/run-pass/issue-3290.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3290.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test FIXME #3290\n pub fn main() {\n    let mut x = ~3;\n    x = x;"}, {"sha": "37cccf717d5d5d53cad829818a16e4a6f3bb6a3a", "filename": "src/test/run-pass/issue-3796.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fissue-3796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fissue-3796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3796.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test FIXME #3796\n-\n-#[deny(dead_assignment)];\n-pub fn main() {\n-    let mut x = 1;\n-    let f: || -> int = || { x + 20 };\n-    assert_eq!(f(), 21);\n-    x += 1;\n-    assert_eq!(f(), 22);\n-}"}, {"sha": "fe6521b4df9a630db170f438710038ac8c33faf0", "filename": "src/test/run-pass/issue-3904.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3904.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,30 +8,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n-type ErrPrinter = |&str, &str|;\n+type ErrPrinter<'a> = 'a |&str, &str|;\n \n fn example_err(prog: &str, arg: &str) {\n     println!(\"{}: {}\", prog, arg)\n }\n \n-fn exit(+print: ErrPrinter, prog: &str, arg: &str) {\n+fn exit(print: ErrPrinter, prog: &str, arg: &str) {\n     print(prog, arg);\n }\n \n-struct X {\n-    err: ErrPrinter\n+struct X<'a> {\n+    err: ErrPrinter<'a>\n }\n \n-impl X {\n-    pub fn boom() {\n+impl<'a> X<'a> {\n+    pub fn boom(self) {\n         exit(self.err, \"prog\", \"arg\");\n     }\n }\n \n pub fn main(){\n-    let val = &X{\n+    let val = X {\n         err: example_err,\n     };\n     val.boom();"}, {"sha": "f6c29658e6a31e7b56b3933c7bed5472a07a18cb", "filename": "src/test/run-pass/issue-4241.rs", "status": "removed", "additions": 0, "deletions": 130, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,130 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-fast\n-// ignore-test needs networking\n-\n-extern crate extra;\n-\n-use extra::net::tcp::TcpSocketBuf;\n-\n-use std::io;\n-use std::int;\n-\n-use std::io::{ReaderUtil,WriterUtil};\n-\n-enum Result {\n-  Nil,\n-  Int(int),\n-  Data(~[u8]),\n-  List(~[Result]),\n-  Error(~str),\n-  Status(~str)\n-}\n-\n-priv fn parse_data(len: uint, io: @io::Reader) -> Result {\n-  let res =\n-      if (len > 0) {\n-      let bytes = io.read_bytes(len as uint);\n-      assert_eq!(bytes.len(), len);\n-      Data(bytes)\n-  } else {\n-      Data(~[])\n-  };\n-  assert_eq!(io.read_char(), '\\r');\n-  assert_eq!(io.read_char(), '\\n');\n-  return res;\n-}\n-\n-priv fn parse_list(len: uint, io: @io::Reader) -> Result {\n-    let mut list: ~[Result] = ~[];\n-    for _ in range(0, len) {\n-        let v = match io.read_char() {\n-            '$' => parse_bulk(io),\n-            ':' => parse_int(io),\n-             _ => fail!()\n-        };\n-        list.push(v);\n-    }\n-    return List(list);\n-}\n-\n-priv fn chop(s: ~str) -> ~str {\n-  s.slice(0, s.len() - 1).to_owned()\n-}\n-\n-priv fn parse_bulk(io: @io::Reader) -> Result {\n-    match from_str::<int>(chop(io.read_line())) {\n-    None => fail!(),\n-    Some(-1) => Nil,\n-    Some(len) if len >= 0 => parse_data(len as uint, io),\n-    Some(_) => fail!()\n-    }\n-}\n-\n-priv fn parse_multi(io: @io::Reader) -> Result {\n-    match from_str::<int>(chop(io.read_line())) {\n-    None => fail!(),\n-    Some(-1) => Nil,\n-    Some(0) => List(~[]),\n-    Some(len) if len >= 0 => parse_list(len as uint, io),\n-    Some(_) => fail!()\n-    }\n-}\n-\n-priv fn parse_int(io: @io::Reader) -> Result {\n-    match from_str::<int>(chop(io.read_line())) {\n-    None => fail!(),\n-    Some(i) => Int(i)\n-    }\n-}\n-\n-priv fn parse_response(io: @io::Reader) -> Result {\n-    match io.read_char() {\n-    '$' => parse_bulk(io),\n-    '*' => parse_multi(io),\n-    '+' => Status(chop(io.read_line())),\n-    '-' => Error(chop(io.read_line())),\n-    ':' => parse_int(io),\n-    _ => fail!()\n-    }\n-}\n-\n-priv fn cmd_to_str(cmd: ~[~str]) -> ~str {\n-  let mut res = ~\"*\";\n-  res.push_str(cmd.len().to_str());\n-  res.push_str(\"\\r\\n\");\n-    for s in cmd.iter() {\n-    res.push_str([~\"$\", s.len().to_str(), ~\"\\r\\n\",\n-                  (*s).clone(), ~\"\\r\\n\"].concat() );\n-    }\n-  res\n-}\n-\n-fn query(cmd: ~[~str], sb: TcpSocketBuf) -> Result {\n-  let cmd = cmd_to_str(cmd);\n-  //println!(\"{}\", cmd);\n-  sb.write_str(cmd);\n-  let res = parse_response(@sb as @io::Reader);\n-  res\n-}\n-\n-fn query2(cmd: ~[~str]) -> Result {\n-  let _cmd = cmd_to_str(cmd);\n-    io::with_str_reader(~\"$3\\r\\nXXX\\r\\n\")(|sb| {\n-    let res = parse_response(@sb as @io::Reader);\n-    println!(\"{:?}\", res);\n-    res\n-    });\n-}\n-\n-\n-pub fn main() {\n-}"}, {"sha": "024ee8c6dfec3e9ffdf9bb3d3c775bd5a7a5290d", "filename": "src/test/run-pass/issue-4542.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fissue-4542.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fissue-4542.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4542.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -11,9 +11,8 @@\n use std::os;\n \n pub fn main() {\n-    let x = os::args();\n-    for arg in x.iter() {\n-        match arg.clone() {\n+    for arg in os::args().iter() {\n+        match (*arg).clone() {\n             _s => { }\n         }\n     }"}, {"sha": "a922201c41ae457234e0a6942e591c958d6f9359", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc26cfdf43adffe51acdc5ef9886cb5e1844d46/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=9cc26cfdf43adffe51acdc5ef9886cb5e1844d46", "patch": "@@ -8,19 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n-// ignored due to a bug in move detection for macros.\n-\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+#[feature(macro_rules)];\n \n use std::{option, cast};\n \n@@ -42,7 +30,7 @@ impl<T> E<T> {\n     }\n     fn get_ref<'r>(&'r self) -> (int, &'r T) {\n         match *self {\n-            Nothing(..) => fail!(\"E::get_ref(Nothing::<%s>)\",  stringify!($T)),\n+            Nothing(..) => fail!(\"E::get_ref(Nothing::<{}>)\",  stringify!(T)),\n             Thing(x, ref y) => (x, y)\n         }\n     }\n@@ -71,7 +59,7 @@ macro_rules! check_fancy {\n         let t_ = Thing::<$T>(23, e);\n         match t_.get_ref() {\n             (23, $v) => { $chk }\n-            _ => fail!(\"Thing::<%s>(23, %s).get_ref() != (23, _)\",\n+            _ => fail!(\"Thing::<{}>(23, {}).get_ref() != (23, _)\",\n                        stringify!($T), stringify!($e))\n         }\n     }}\n@@ -91,7 +79,7 @@ pub fn main() {\n     check_type!(~\"foo\": ~str);\n     check_type!(~[20, 22]: ~[int]);\n     let mint: uint = unsafe { cast::transmute(main) };\n-    check_type!(main: extern fn(), |pthing| {\n+    check_type!(main: fn(), |pthing| {\n         assert!(mint == unsafe { cast::transmute(*pthing) })\n     });\n }"}, {"sha": "5116dcb8dc8ebefd3df8a406a2bdf3d74178fe00", "filename": "src/test/run-pass/send-iloop.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Fsend-iloop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-iloop.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,39 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test linked failure\n-extern crate extra;\n-\n-use std::comm;\n-use std::task;\n-\n-fn die() {\n-    fail!();\n-}\n-\n-fn iloop() {\n-    task::spawn(|| die() );\n-    let (p, c) = comm::stream::<()>();\n-    loop {\n-        // Sending and receiving here because these actions deschedule,\n-        // at which point our child can kill us.\n-        c.send(());\n-        p.recv();\n-        // The above comment no longer makes sense but I'm\n-        // reluctant to remove a linked failure test case.\n-        task::deschedule();\n-    }\n-}\n-\n-pub fn main() {\n-    for _ in range(0u, 16u) {\n-        task::spawn_unlinked(|| iloop() );\n-    }\n-}"}, {"sha": "61af43ae1619f765b1977f9b5725838760b0372e", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "removed", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,87 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test linked failure\n-\n-// A port of task-killjoin to use a class with a dtor to manage\n-// the join.\n-\n-use std::cell::Cell;\n-use std::comm::*;\n-use std::ptr;\n-use std::task;\n-\n-struct notify {\n-    ch: Chan<bool>,\n-    v: @Cell<bool>,\n-}\n-\n-#[unsafe_destructor]\n-impl Drop for notify {\n-    fn drop(&mut self) {\n-        unsafe {\n-            error!(\"notify: task=%? v=%x unwinding=%b b=%b\",\n-                   0,\n-                   ptr::to_unsafe_ptr(&(*(self.v))) as uint,\n-                   task::failing(),\n-                   *(self.v));\n-            let b = *(self.v);\n-            self.ch.send(b);\n-        }\n-    }\n-}\n-\n-fn notify(ch: Chan<bool>, v: @Cell<bool>) -> notify {\n-    notify {\n-        ch: ch,\n-        v: v\n-    }\n-}\n-\n-fn joinable(f: proc()) -> Port<bool> {\n-    fn wrapper(c: Chan<bool>, f: ||) {\n-        let b = @Cell::new(false);\n-        error!(\"wrapper: task=%? allocated v=%x\",\n-               0,\n-               ptr::to_unsafe_ptr(&b) as uint);\n-        let _r = notify(c, b);\n-        f();\n-        *b = true;\n-    }\n-    let (p, c) = stream();\n-    task::spawn_unlinked(proc() {\n-        let ccc = c;\n-        wrapper(ccc, f)\n-    });\n-    p\n-}\n-\n-fn join(port: Port<bool>) -> bool {\n-    port.recv()\n-}\n-\n-fn supervised() {\n-    // Deschedule to make sure the supervisor joins before we\n-    // fail. This is currently not needed because the supervisor\n-    // runs first, but I can imagine that changing.\n-    error!(\"supervised task=%?\", 0);\n-    task::deschedule();\n-    fail!();\n-}\n-\n-fn supervisor() {\n-    error!(\"supervisor task=%?\", 0);\n-    let t = joinable(supervised);\n-    join(t);\n-}\n-\n-pub fn main() {\n-    join(joinable(supervisor));\n-}"}, {"sha": "3d4e091beee007f08fefcd4c7ba7f64c841f4ffc", "filename": "src/test/run-pass/task-killjoin.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a224f4a1144c99cedbff9c0493d57037739d35/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs?ref=34a224f4a1144c99cedbff9c0493d57037739d35", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test linked failure\n-\n-// Create a task that is supervised by another task, join the supervised task\n-// from the supervising task, then fail the supervised task. The supervised\n-// task will kill the supervising task, waking it up. The supervising task no\n-// longer needs to be wakened when the supervised task exits.\n-\n-use std::task;\n-\n-fn supervised() {\n-    // Deschedule to make sure the supervisor joins before we fail. This is\n-    // currently not needed because the supervisor runs first, but I can\n-    // imagine that changing.\n-    task::deschedule();\n-    fail!();\n-}\n-\n-fn supervisor() {\n-    // Unsupervise this task so the process doesn't return a failure status as\n-    // a result of the main task being killed.\n-    let f = supervised;\n-    task::try(supervised);\n-}\n-\n-pub fn main() {\n-    task::spawn_unlinked(supervisor)\n-}"}]}