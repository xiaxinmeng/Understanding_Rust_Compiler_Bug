{"sha": "74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NTYwZjNhYjM2YmI0ZjdmM2FlZjNjNjZhM2U5NzE3ZjllZTE5Nzg=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-04-15T17:09:37Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-04-15T17:09:37Z"}, "message": "include mode in unused binding suggestion span", "tree": {"sha": "b3439a51605f6be33380f96050b4d37ff532a157", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3439a51605f6be33380f96050b4d37ff532a157"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAly0uwUWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdKKPB/9rANtCBP4efDSjtWb/PjvUEQp/\nvTKG4E7iFAxfc3n9iuQG6lQhVqP7KssEZhGHQJGv7fyll0aYN4pyV4iTe/rZJMOL\nY0YpmB8oraSlU9MUXMC1lUs9eT6WoU/bdBButnmybG/8+DtZSv24eVnz0KuXwtVL\nVgW7MUkb5Y0O2txEzcVaoJv4XzEwixrqA8A29YPRM2h3X7g1T6uY+I4T9i+gqvL/\n+XjMUcvn3/ioxMdLvnbUiJepxYQOsJentfAP6C25nNogZIF2djPCX/zOad4AFdbW\njoawuEFL0ySRr4d+tn0WNoyzReirUtyXTQ7usnFJ/70UAoAUyMcsbz87T/yK\n=42d7\n-----END PGP SIGNATURE-----", "payload": "tree b3439a51605f6be33380f96050b4d37ff532a157\nparent 5b96425699476ccfc4c56185067d80cb792044a3\nauthor Andy Russell <arussell123@gmail.com> 1555348177 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1555348177 -0400\n\ninclude mode in unused binding suggestion span\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978", "html_url": "https://github.com/rust-lang/rust/commit/74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b96425699476ccfc4c56185067d80cb792044a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b96425699476ccfc4c56185067d80cb792044a3", "html_url": "https://github.com/rust-lang/rust/commit/5b96425699476ccfc4c56185067d80cb792044a3"}], "stats": {"total": 124, "additions": 119, "deletions": 5}, "files": [{"sha": "2fbe79ec8ebc5efcdef36b24cbeae445e322e998", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978", "patch": "@@ -1627,11 +1627,18 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                     );\n \n                     if self.ir.variable_is_shorthand(var) {\n-                        err.multipart_suggestion(\n-                            \"try ignoring the field\",\n-                            spans.iter().map(|span| (*span, format!(\"{}: _\", name))).collect(),\n-                            Applicability::MachineApplicable\n-                        );\n+                        if let Node::Binding(pat) = self.ir.tcx.hir().get_by_hir_id(hir_id) {\n+                            // Handle `ref` and `ref mut`.\n+                            let spans = spans.iter()\n+                                .map(|_span| (pat.span, format!(\"{}: _\", name)))\n+                                .collect();\n+\n+                            err.multipart_suggestion(\n+                                \"try ignoring the field\",\n+                                spans,\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n                     } else {\n                         err.multipart_suggestion(\n                             \"consider prefixing with an underscore\","}, {"sha": "1350b7ca6996cf25540de6906be07b14a801067e", "filename": "src/test/ui/lint/issue-54180-unused-ref-field.fixed", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.fixed?ref=74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978", "patch": "@@ -0,0 +1,34 @@\n+// run-rustfix\n+\n+#![deny(unused)]\n+\n+pub struct S {\n+    pub f1: i32,\n+}\n+\n+pub struct Point {\n+    pub x: i32,\n+    pub y: i32,\n+}\n+\n+pub enum E {\n+    Variant { field: String }\n+}\n+\n+pub fn foo(arg: &E) {\n+    match arg {\n+        E::Variant { field: _ } => (), //~ ERROR unused variable\n+    }\n+}\n+\n+fn main() {\n+    let s = S { f1: 123 };\n+    let S { f1: _ } = s; //~ ERROR unused variable\n+\n+    let points = vec![Point { x: 1, y: 2 }];\n+    let _: i32 = points.iter().map(|Point { x: _, y }| y).sum(); //~ ERROR unused variable\n+\n+    match (Point { x: 1, y: 2 }) {\n+        Point { y, x: _ } => y, //~ ERROR unused variable\n+    };\n+}"}, {"sha": "7b3392b609a0aa4630e8bea070dbbb4198e41814", "filename": "src/test/ui/lint/issue-54180-unused-ref-field.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.rs?ref=74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978", "patch": "@@ -0,0 +1,34 @@\n+// run-rustfix\n+\n+#![deny(unused)]\n+\n+pub struct S {\n+    pub f1: i32,\n+}\n+\n+pub struct Point {\n+    pub x: i32,\n+    pub y: i32,\n+}\n+\n+pub enum E {\n+    Variant { field: String }\n+}\n+\n+pub fn foo(arg: &E) {\n+    match arg {\n+        E::Variant { ref field } => (), //~ ERROR unused variable\n+    }\n+}\n+\n+fn main() {\n+    let s = S { f1: 123 };\n+    let S { ref f1 } = s; //~ ERROR unused variable\n+\n+    let points = vec![Point { x: 1, y: 2 }];\n+    let _: i32 = points.iter().map(|Point { x, y }| y).sum(); //~ ERROR unused variable\n+\n+    match (Point { x: 1, y: 2 }) {\n+        Point { y, ref mut x } => y, //~ ERROR unused variable\n+    };\n+}"}, {"sha": "9f47554a1a65e310f8f29741f0df7499ca814c75", "filename": "src/test/ui/lint/issue-54180-unused-ref-field.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54180-unused-ref-field.stderr?ref=74560f3ab36bb4f7f3aef3c66a3e9717f9ee1978", "patch": "@@ -0,0 +1,39 @@\n+error: unused variable: `field`\n+  --> $DIR/issue-54180-unused-ref-field.rs:20:26\n+   |\n+LL |         E::Variant { ref field } => (),\n+   |                      ----^^^^^\n+   |                      |\n+   |                      help: try ignoring the field: `field: _`\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-54180-unused-ref-field.rs:3:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: #[deny(unused_variables)] implied by #[deny(unused)]\n+\n+error: unused variable: `x`\n+  --> $DIR/issue-54180-unused-ref-field.rs:29:45\n+   |\n+LL |     let _: i32 = points.iter().map(|Point { x, y }| y).sum();\n+   |                                             ^ help: try ignoring the field: `x: _`\n+\n+error: unused variable: `f1`\n+  --> $DIR/issue-54180-unused-ref-field.rs:26:17\n+   |\n+LL |     let S { ref f1 } = s;\n+   |             ----^^\n+   |             |\n+   |             help: try ignoring the field: `f1: _`\n+\n+error: unused variable: `x`\n+  --> $DIR/issue-54180-unused-ref-field.rs:32:28\n+   |\n+LL |         Point { y, ref mut x } => y,\n+   |                    --------^\n+   |                    |\n+   |                    help: try ignoring the field: `x: _`\n+\n+error: aborting due to 4 previous errors\n+"}]}