{"sha": "1b79303f4996d76e75588705e3ddb64031009564", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNzkzMDNmNDk5NmQ3NmU3NTU4ODcwNWUzZGRiNjQwMzEwMDk1NjQ=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-10-29T17:59:04Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-10-29T22:56:22Z"}, "message": "Address review comments", "tree": {"sha": "15c4ea934108410dc97e3c6476d84b92a0e1815c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15c4ea934108410dc97e3c6476d84b92a0e1815c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b79303f4996d76e75588705e3ddb64031009564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b79303f4996d76e75588705e3ddb64031009564", "html_url": "https://github.com/rust-lang/rust/commit/1b79303f4996d76e75588705e3ddb64031009564", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b79303f4996d76e75588705e3ddb64031009564/comments", "author": null, "committer": null, "parents": [{"sha": "66fbe4c22c9743aff642f06549ce5f503668f722", "url": "https://api.github.com/repos/rust-lang/rust/commits/66fbe4c22c9743aff642f06549ce5f503668f722", "html_url": "https://github.com/rust-lang/rust/commit/66fbe4c22c9743aff642f06549ce5f503668f722"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "ff949a93e01b17bf81f78d0ebd65d245eba2e0bd", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b79303f4996d76e75588705e3ddb64031009564/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b79303f4996d76e75588705e3ddb64031009564/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1b79303f4996d76e75588705e3ddb64031009564", "patch": "@@ -3912,9 +3912,15 @@ pub fn type_err_to_str(cx: &ctxt, err: &type_err) -> String {\n                     trait_store_to_string(cx, (*values).found))\n         }\n         terr_sorts(values) => {\n-            format!(\"expected {}, found {}\",\n-                    ty_sort_string(cx, values.expected),\n-                    ty_sort_string(cx, values.found))\n+            // A naive approach to making sure that we're not reporting silly errors such as:\n+            // (expected closure, found closure).\n+            let expected_str = ty_sort_string(cx, values.expected);\n+            let found_str = ty_sort_string(cx, values.found);\n+            if expected_str == found_str {\n+                format!(\"expected {}, found a different {}\", expected_str, found_str)\n+            } else {\n+                format!(\"expected {}, found {}\", expected_str, found_str)\n+            }\n         }\n         terr_traits(values) => {\n             format!(\"expected trait `{}`, found trait `{}`\","}, {"sha": "e6c158ef9af2b39603da494031a7a38f79a107e4", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1b79303f4996d76e75588705e3ddb64031009564/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b79303f4996d76e75588705e3ddb64031009564/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=1b79303f4996d76e75588705e3ddb64031009564", "patch": "@@ -112,7 +112,7 @@ pub trait ErrorReporting {\n \n     fn values_str(&self, values: &ValuePairs) -> Option<String>;\n \n-    fn expected_found_str<T: UserString + Resolvable>(\n+    fn expected_found_str<T: UserString + Resolvable + HasRemainingTypeVariables>(\n         &self,\n         exp_found: &ty::expected_found<T>)\n         -> Option<String>;\n@@ -402,7 +402,7 @@ impl<'a, 'tcx> ErrorReporting for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn expected_found_str<T: UserString + Resolvable>(\n+    fn expected_found_str<T: UserString + Resolvable + HasRemainingTypeVariables>(\n         &self,\n         exp_found: &ty::expected_found<T>)\n         -> Option<String>\n@@ -1656,16 +1656,13 @@ impl<'a, 'tcx> ErrorReportingHelpers for InferCtxt<'a, 'tcx> {\n pub trait Resolvable {\n     fn resolve(&self, infcx: &InferCtxt) -> Self;\n     fn contains_error(&self) -> bool;\n+}\n+\n+pub trait HasRemainingTypeVariables {\n     fn remaining_type_variables(&self, tcx: &ty::ctxt) -> HashSet<ty::InferTy>;\n }\n \n-impl Resolvable for ty::t {\n-    fn resolve(&self, infcx: &InferCtxt) -> ty::t {\n-        infcx.resolve_type_vars_if_possible(*self)\n-    }\n-    fn contains_error(&self) -> bool {\n-        ty::type_is_error(*self)\n-    }\n+impl<T: TypeFoldable> HasRemainingTypeVariables for T {\n     fn remaining_type_variables(&self, tcx: &ty::ctxt) -> HashSet<ty::InferTy> {\n         let mut vars = HashSet::new();\n         {\n@@ -1684,16 +1681,22 @@ impl Resolvable for ty::t {\n     }\n }\n \n+impl Resolvable for ty::t {\n+    fn resolve(&self, infcx: &InferCtxt) -> ty::t {\n+        infcx.resolve_type_vars_if_possible(*self)\n+    }\n+    fn contains_error(&self) -> bool {\n+        ty::type_is_error(*self)\n+    }\n+}\n+\n impl Resolvable for Rc<ty::TraitRef> {\n     fn resolve(&self, infcx: &InferCtxt) -> Rc<ty::TraitRef> {\n         Rc::new(infcx.resolve_type_vars_in_trait_ref_if_possible(&**self))\n     }\n     fn contains_error(&self) -> bool {\n         ty::trait_ref_contains_error(&**self)\n     }\n-    fn remaining_type_variables(&self, _: &ty::ctxt) -> HashSet<ty::InferTy> {\n-        HashSet::new()\n-    }\n }\n \n fn lifetimes_in_scope(tcx: &ty::ctxt,"}, {"sha": "eb37f68154da20f53997b49c130bb858109497fa", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b79303f4996d76e75588705e3ddb64031009564/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b79303f4996d76e75588705e3ddb64031009564/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1b79303f4996d76e75588705e3ddb64031009564", "patch": "@@ -383,9 +383,9 @@ pub fn ty_to_string_with_var_ids(cx: &ctxt, typ: t, mut print_var_ids: bool) ->\n \n     fn infer_ty_to_string(ty: ty::InferTy, print_var_ids: bool) -> String {\n         match ty {\n-            ty::TyVar(ty::TyVid { index: vid })\n-              | ty::IntVar(ty::IntVid { index: vid })\n-              | ty::FloatVar(ty::FloatVid { index: vid }) => {\n+            ty::TyVar(ty::TyVid { index: vid }) |\n+            ty::IntVar(ty::IntVid { index: vid }) |\n+            ty::FloatVar(ty::FloatVid { index: vid }) => {\n                 match ty {\n                     ty::TyVar(_) if print_var_ids => format!(\"_#{}\", vid),\n                     ty::TyVar(_) => \"_\".to_string(),"}]}