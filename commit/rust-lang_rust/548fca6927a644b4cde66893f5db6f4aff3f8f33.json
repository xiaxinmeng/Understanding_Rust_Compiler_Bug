{"sha": "548fca6927a644b4cde66893f5db6f4aff3f8f33", "node_id": "C_kwDOAAsO6NoAKDU0OGZjYTY5MjdhNjQ0YjRjZGU2Njg5M2Y1ZGI2ZjRhZmYzZjhmMzM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-29T21:54:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-29T21:54:43Z"}, "message": "Rollup merge of #96562 - michaelwoerister:path-remapping-fixes, r=oli-obk\n\nFix duplicate directory separator in --remap-path-prefix.\n\nThe compiler will currently emit duplicate directory separators when `--remap-path-prefix` has an exact match of the working directory and it is invoked with a relative path to the main source file. For example\n\n```bash\nrustc src/main.rs -Cdebuginfo=2 --remap-path-prefix=\"$(pwd)=abc\"\n```\n\nwill produce the path `abc//src/main.rs` in debuginfo. This is because `some_path.join(\"\")` will append a directory separator to `some_path` and then LLVM does not check if the working directory already ends a directory separator before concatenating it with the relative path.", "tree": {"sha": "e8ccf5035b4e28eb52e7f8c09bb31b958c0f9338", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8ccf5035b4e28eb52e7f8c09bb31b958c0f9338"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/548fca6927a644b4cde66893f5db6f4aff3f8f33", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJibF6jCRBK7hj4Ov3rIwAAVlIIAHIlTT9t2TL/TOlebdDHe5xA\n69U334fS5qwqEsdJm5MJPO1ptkgQZdzf23w9BIyAh90c2QS9emK1hfdqcyA+oljS\nXyF/P530tylKMEEsdJfU5CSB0P057VDrDkCGOa7U+7sCoga72VDCgWa+9kqc28iV\nFIwIjGKsKPjHOspKGT0Q37I6fTy+n8y6OfxEF/eLrW1X1/t4A12O2q2NRVjQ5TCT\n5TWHF0vzm1jgqLXKApidH/tjDpzF+9hm24sUvTQo0I18QS+zcFT1Q5OcTiD5VF/Z\nZiFC1hFVZHPVo9q1ixovbKfpIw7oc98o2CU5XFIl63rmPYt6yROfMTLNqS0Tn84=\n=7csP\n-----END PGP SIGNATURE-----\n", "payload": "tree e8ccf5035b4e28eb52e7f8c09bb31b958c0f9338\nparent 2986bef53473d9c0692d3130d8289e234db0b2ea\nparent 3614bd3c45a8d0e5f27c0736e8966f6456a5cd75\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1651269283 +0200\ncommitter GitHub <noreply@github.com> 1651269283 +0200\n\nRollup merge of #96562 - michaelwoerister:path-remapping-fixes, r=oli-obk\n\nFix duplicate directory separator in --remap-path-prefix.\n\nThe compiler will currently emit duplicate directory separators when `--remap-path-prefix` has an exact match of the working directory and it is invoked with a relative path to the main source file. For example\n\n```bash\nrustc src/main.rs -Cdebuginfo=2 --remap-path-prefix=\"$(pwd)=abc\"\n```\n\nwill produce the path `abc//src/main.rs` in debuginfo. This is because `some_path.join(\"\")` will append a directory separator to `some_path` and then LLVM does not check if the working directory already ends a directory separator before concatenating it with the relative path.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/548fca6927a644b4cde66893f5db6f4aff3f8f33", "html_url": "https://github.com/rust-lang/rust/commit/548fca6927a644b4cde66893f5db6f4aff3f8f33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/548fca6927a644b4cde66893f5db6f4aff3f8f33/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2986bef53473d9c0692d3130d8289e234db0b2ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/2986bef53473d9c0692d3130d8289e234db0b2ea", "html_url": "https://github.com/rust-lang/rust/commit/2986bef53473d9c0692d3130d8289e234db0b2ea"}, {"sha": "3614bd3c45a8d0e5f27c0736e8966f6456a5cd75", "url": "https://api.github.com/repos/rust-lang/rust/commits/3614bd3c45a8d0e5f27c0736e8966f6456a5cd75", "html_url": "https://github.com/rust-lang/rust/commit/3614bd3c45a8d0e5f27c0736e8966f6456a5cd75"}], "stats": {"total": 96, "additions": 94, "deletions": 2}, "files": [{"sha": "460b5c18fc1b4838089ef11fe9d422e95ef44bf9", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/548fca6927a644b4cde66893f5db6f4aff3f8f33/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548fca6927a644b4cde66893f5db6f4aff3f8f33/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=548fca6927a644b4cde66893f5db6f4aff3f8f33", "patch": "@@ -1102,7 +1102,19 @@ impl FilePathMapping {\n         //       take precedence.\n         for &(ref from, ref to) in self.mapping.iter().rev() {\n             if let Ok(rest) = path.strip_prefix(from) {\n-                return (to.join(rest), true);\n+                let remapped = if rest.as_os_str().is_empty() {\n+                    // This is subtle, joining an empty path onto e.g. `foo/bar` will\n+                    // result in `foo/bar/`, that is, there'll be an additional directory\n+                    // separator at the end. This can lead to duplicated directory separators\n+                    // in remapped paths down the line.\n+                    // So, if we have an exact match, we just return that without a call\n+                    // to `Path::join()`.\n+                    to.clone()\n+                } else {\n+                    to.join(rest)\n+                };\n+\n+                return (remapped, true);\n             }\n         }\n "}, {"sha": "481e015c66c25ce3c6a8881974f93f2fc17cb1c2", "filename": "compiler/rustc_span/src/source_map/tests.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/548fca6927a644b4cde66893f5db6f4aff3f8f33/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548fca6927a644b4cde66893f5db6f4aff3f8f33/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs?ref=548fca6927a644b4cde66893f5db6f4aff3f8f33", "patch": "@@ -312,3 +312,83 @@ impl SourceMapExtension for SourceMap {\n         }\n     }\n }\n+\n+fn map_path_prefix(mapping: &FilePathMapping, path: &str) -> String {\n+    // It's important that we convert to a string here because that's what\n+    // later stages do too (e.g. in the backend), and comparing `Path` values\n+    // won't catch some differences at the string level, e.g. \"abc\" and \"abc/\"\n+    // compare as equal.\n+    mapping.map_prefix(path.into()).0.to_string_lossy().to_string()\n+}\n+\n+#[cfg(unix)]\n+#[test]\n+fn path_prefix_remapping() {\n+    // Relative to relative\n+    {\n+        let mapping = &FilePathMapping::new(vec![(\"abc/def\".into(), \"foo\".into())]);\n+\n+        assert_eq!(map_path_prefix(mapping, \"abc/def/src/main.rs\"), \"foo/src/main.rs\");\n+        assert_eq!(map_path_prefix(mapping, \"abc/def\"), \"foo\");\n+    }\n+\n+    // Relative to absolute\n+    {\n+        let mapping = &FilePathMapping::new(vec![(\"abc/def\".into(), \"/foo\".into())]);\n+\n+        assert_eq!(map_path_prefix(mapping, \"abc/def/src/main.rs\"), \"/foo/src/main.rs\");\n+        assert_eq!(map_path_prefix(mapping, \"abc/def\"), \"/foo\");\n+    }\n+\n+    // Absolute to relative\n+    {\n+        let mapping = &FilePathMapping::new(vec![(\"/abc/def\".into(), \"foo\".into())]);\n+\n+        assert_eq!(map_path_prefix(mapping, \"/abc/def/src/main.rs\"), \"foo/src/main.rs\");\n+        assert_eq!(map_path_prefix(mapping, \"/abc/def\"), \"foo\");\n+    }\n+\n+    // Absolute to absolute\n+    {\n+        let mapping = &FilePathMapping::new(vec![(\"/abc/def\".into(), \"/foo\".into())]);\n+\n+        assert_eq!(map_path_prefix(mapping, \"/abc/def/src/main.rs\"), \"/foo/src/main.rs\");\n+        assert_eq!(map_path_prefix(mapping, \"/abc/def\"), \"/foo\");\n+    }\n+}\n+\n+#[cfg(windows)]\n+#[test]\n+fn path_prefix_remapping_from_relative2() {\n+    // Relative to relative\n+    {\n+        let mapping = &FilePathMapping::new(vec![(\"abc\\\\def\".into(), \"foo\".into())]);\n+\n+        assert_eq!(map_path_prefix(mapping, \"abc\\\\def\\\\src\\\\main.rs\"), \"foo\\\\src\\\\main.rs\");\n+        assert_eq!(map_path_prefix(mapping, \"abc\\\\def\"), \"foo\");\n+    }\n+\n+    // Relative to absolute\n+    {\n+        let mapping = &FilePathMapping::new(vec![(\"abc\\\\def\".into(), \"X:\\\\foo\".into())]);\n+\n+        assert_eq!(map_path_prefix(mapping, \"abc\\\\def\\\\src\\\\main.rs\"), \"X:\\\\foo\\\\src\\\\main.rs\");\n+        assert_eq!(map_path_prefix(mapping, \"abc\\\\def\"), \"X:\\\\foo\");\n+    }\n+\n+    // Absolute to relative\n+    {\n+        let mapping = &FilePathMapping::new(vec![(\"X:\\\\abc\\\\def\".into(), \"foo\".into())]);\n+\n+        assert_eq!(map_path_prefix(mapping, \"X:\\\\abc\\\\def\\\\src\\\\main.rs\"), \"foo\\\\src\\\\main.rs\");\n+        assert_eq!(map_path_prefix(mapping, \"X:\\\\abc\\\\def\"), \"foo\");\n+    }\n+\n+    // Absolute to absolute\n+    {\n+        let mapping = &FilePathMapping::new(vec![(\"X:\\\\abc\\\\def\".into(), \"X:\\\\foo\".into())]);\n+\n+        assert_eq!(map_path_prefix(mapping, \"X:\\\\abc\\\\def\\\\src\\\\main.rs\"), \"X:\\\\foo\\\\src\\\\main.rs\");\n+        assert_eq!(map_path_prefix(mapping, \"X:\\\\abc\\\\def\"), \"X:\\\\foo\");\n+    }\n+}"}, {"sha": "b13d576295c605f968df697caaf99d9c48be21e4", "filename": "src/test/codegen/remap_path_prefix/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/548fca6927a644b4cde66893f5db6f4aff3f8f33/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548fca6927a644b4cde66893f5db6f4aff3f8f33/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fmain.rs?ref=548fca6927a644b4cde66893f5db6f4aff3f8f33", "patch": "@@ -22,7 +22,7 @@ fn main() {\n }\n \n // Here we check that local debuginfo is mapped correctly.\n-// CHECK: !DIFile(filename: \"/the/src/remap_path_prefix/main.rs\", directory: \"/the/cwd/\"\n+// CHECK: !DIFile(filename: \"/the/src/remap_path_prefix/main.rs\", directory: \"/the/cwd\"\n \n // And here that debuginfo from other crates are expanded to absolute paths.\n // CHECK: !DIFile(filename: \"/the/aux-src/remap_path_prefix_aux.rs\", directory: \"\""}]}