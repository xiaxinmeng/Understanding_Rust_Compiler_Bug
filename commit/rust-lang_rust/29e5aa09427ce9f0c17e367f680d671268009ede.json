{"sha": "29e5aa09427ce9f0c17e367f680d671268009ede", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZTVhYTA5NDI3Y2U5ZjBjMTdlMzY3ZjY4MGQ2NzEyNjgwMDllZGU=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-08T00:32:25Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-08T01:24:47Z"}, "message": "Remove some unnecessary closures", "tree": {"sha": "75276e5ddf092dcb213b081b06fe042e058cc215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75276e5ddf092dcb213b081b06fe042e058cc215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29e5aa09427ce9f0c17e367f680d671268009ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29e5aa09427ce9f0c17e367f680d671268009ede", "html_url": "https://github.com/rust-lang/rust/commit/29e5aa09427ce9f0c17e367f680d671268009ede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29e5aa09427ce9f0c17e367f680d671268009ede/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b65dc42b25c71a1f032a08a2d592a3687cbefe86", "url": "https://api.github.com/repos/rust-lang/rust/commits/b65dc42b25c71a1f032a08a2d592a3687cbefe86", "html_url": "https://github.com/rust-lang/rust/commit/b65dc42b25c71a1f032a08a2d592a3687cbefe86"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "b544b94d1c23e5e2cca2d6dad4b338c0cbf864fd", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/29e5aa09427ce9f0c17e367f680d671268009ede/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e5aa09427ce9f0c17e367f680d671268009ede/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=29e5aa09427ce9f0c17e367f680d671268009ede", "patch": "@@ -174,7 +174,7 @@ fn item_symbol(item: ebml::Doc) -> ~str {\n \n fn item_parent_item(d: ebml::Doc) -> Option<ast::def_id> {\n     for reader::tagged_docs(d, tag_items_data_parent_item) |did| {\n-        return Some(reader::with_doc_data(did, |d| parse_def_id(d)));\n+        return Some(reader::with_doc_data(did, parse_def_id));\n     }\n     None\n }\n@@ -195,8 +195,7 @@ fn item_reqd_and_translated_parent_item(cnum: ast::crate_num,\n \n fn item_def_id(d: ebml::Doc, cdata: cmd) -> ast::def_id {\n     let tagdoc = reader::get_doc(d, tag_def_id);\n-    return translate_def_id(cdata, reader::with_doc_data(tagdoc,\n-                                                    |d| parse_def_id(d)));\n+    return translate_def_id(cdata, reader::with_doc_data(tagdoc, parse_def_id));\n }\n \n fn each_reexport(d: ebml::Doc, f: &fn(ebml::Doc) -> bool) -> bool {\n@@ -282,7 +281,7 @@ fn enum_variant_ids(item: ebml::Doc, cdata: cmd) -> ~[ast::def_id] {\n     let mut ids: ~[ast::def_id] = ~[];\n     let v = tag_items_data_item_variant;\n     for reader::tagged_docs(item, v) |p| {\n-        let ext = reader::with_doc_data(p, |d| parse_def_id(d));\n+        let ext = reader::with_doc_data(p, parse_def_id);\n         ids.push(ast::def_id { crate: cdata.cnum, node: ext.node });\n     };\n     return ids;\n@@ -424,7 +423,7 @@ pub fn get_impl_method(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n     let mut found = None;\n     for reader::tagged_docs(find_item(id, items), tag_item_impl_method)\n         |mid| {\n-            let m_did = reader::with_doc_data(mid, |d| parse_def_id(d));\n+            let m_did = reader::with_doc_data(mid, parse_def_id);\n             if item_name(intr, find_item(m_did.node, items)) == name {\n                 found = Some(translate_def_id(cdata, m_did));\n             }\n@@ -662,7 +661,7 @@ fn item_impl_methods(intr: @ident_interner, cdata: cmd, item: ebml::Doc,\n                      base_tps: uint) -> ~[@resolve::MethodInfo] {\n     let mut rslt = ~[];\n     for reader::tagged_docs(item, tag_item_impl_method) |doc| {\n-        let m_did = reader::with_doc_data(doc, |d| parse_def_id(d));\n+        let m_did = reader::with_doc_data(doc, parse_def_id);\n         let mth_item = lookup_item(m_did.node, cdata.data);\n         let explicit_self = get_explicit_self(mth_item);\n         rslt.push(@resolve::MethodInfo {\n@@ -684,7 +683,7 @@ pub fn get_impls_for_mod(intr: @ident_interner,\n     let mod_item = lookup_item(m_id, data);\n     let mut result = ~[];\n     for reader::tagged_docs(mod_item, tag_mod_impl) |doc| {\n-        let did = reader::with_doc_data(doc, |d| parse_def_id(d));\n+        let did = reader::with_doc_data(doc, parse_def_id);\n         let local_did = translate_def_id(cdata, did);\n         debug!(\"(get impls for mod) getting did %? for '%?'\",\n                local_did, name);"}]}