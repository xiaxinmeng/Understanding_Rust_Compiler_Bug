{"sha": "f1fe797ee2b4f1e9d47eb468212b742960dafb87", "node_id": "C_kwDOAAsO6NoAKGYxZmU3OTdlZTJiNGYxZTlkNDdlYjQ2ODIxMmI3NDI5NjBkYWZiODc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-01T03:25:26Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-02T03:07:30Z"}, "message": "Change representation of `UsageMap::used_map`.\n\nIt currently uses ranges, which index into `UsageMap::used_items`. This\ncommit changes it to just use `Vec`, which is much simpler to construct\nand use. This change does result in more allocations, but it is few\nenough that the perf impact is negligible.", "tree": {"sha": "1aea600a11913ca11b18653cd91b1d40316f8371", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aea600a11913ca11b18653cd91b1d40316f8371"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1fe797ee2b4f1e9d47eb468212b742960dafb87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1fe797ee2b4f1e9d47eb468212b742960dafb87", "html_url": "https://github.com/rust-lang/rust/commit/f1fe797ee2b4f1e9d47eb468212b742960dafb87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1fe797ee2b4f1e9d47eb468212b742960dafb87/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b0c56b333a9ebf87ce183327f84d8a76c5a8524", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0c56b333a9ebf87ce183327f84d8a76c5a8524", "html_url": "https://github.com/rust-lang/rust/commit/5b0c56b333a9ebf87ce183327f84d8a76c5a8524"}], "stats": {"total": 41, "additions": 12, "deletions": 29}, "files": [{"sha": "f4ee7b7587587b8587ae8b05e279d2eda9dec220", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 12, "deletions": 29, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f1fe797ee2b4f1e9d47eb468212b742960dafb87/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1fe797ee2b4f1e9d47eb468212b742960dafb87/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=f1fe797ee2b4f1e9d47eb468212b742960dafb87", "patch": "@@ -195,7 +195,6 @@ use rustc_session::lint::builtin::LARGE_ASSIGNMENTS;\n use rustc_session::Limit;\n use rustc_span::source_map::{dummy_spanned, respan, Span, Spanned, DUMMY_SP};\n use rustc_target::abi::Size;\n-use std::ops::Range;\n use std::path::PathBuf;\n \n use crate::errors::{\n@@ -209,27 +208,18 @@ pub enum MonoItemCollectionMode {\n }\n \n pub struct UsageMap<'tcx> {\n-    // Maps every mono item to the mono items used by it. Those mono items\n-    // are represented as a range, which indexes into `used_items`.\n-    used_map: FxHashMap<MonoItem<'tcx>, Range<usize>>,\n+    // Maps every mono item to the mono items used by it.\n+    used_map: FxHashMap<MonoItem<'tcx>, Vec<MonoItem<'tcx>>>,\n \n     // Maps every mono item to the mono items that use it.\n     user_map: FxHashMap<MonoItem<'tcx>, Vec<MonoItem<'tcx>>>,\n-\n-    // A mono item that is used by N different other mono items will appear\n-    // here N times. Indexed into by the ranges in `used_map`.\n-    used_items: Vec<MonoItem<'tcx>>,\n }\n \n type MonoItems<'tcx> = Vec<Spanned<MonoItem<'tcx>>>;\n \n impl<'tcx> UsageMap<'tcx> {\n     fn new() -> UsageMap<'tcx> {\n-        UsageMap {\n-            used_map: FxHashMap::default(),\n-            user_map: FxHashMap::default(),\n-            used_items: Vec::new(),\n-        }\n+        UsageMap { used_map: FxHashMap::default(), user_map: FxHashMap::default() }\n     }\n \n     fn record_used<'a>(\n@@ -239,18 +229,12 @@ impl<'tcx> UsageMap<'tcx> {\n     ) where\n         'tcx: 'a,\n     {\n-        let old_len = self.used_items.len();\n-        let new_len = old_len + used_items.len();\n-        let new_items_range = old_len..new_len;\n-\n-        self.used_items.reserve(used_items.len());\n-\n-        for Spanned { node: used_item, .. } in used_items.into_iter() {\n-            self.used_items.push(*used_item);\n-            self.user_map.entry(*used_item).or_default().push(user_item);\n+        let used_items: Vec<_> = used_items.iter().map(|item| item.node).collect();\n+        for &used_item in used_items.iter() {\n+            self.user_map.entry(used_item).or_default().push(user_item);\n         }\n \n-        assert!(self.used_map.insert(user_item, new_items_range).is_none());\n+        assert!(self.used_map.insert(user_item, used_items).is_none());\n     }\n \n     pub fn get_user_items(&self, item: MonoItem<'tcx>) -> Option<&[MonoItem<'tcx>]> {\n@@ -262,12 +246,11 @@ impl<'tcx> UsageMap<'tcx> {\n     where\n         F: FnMut(MonoItem<'tcx>),\n     {\n-        if let Some(range) = self.used_map.get(&item) {\n-            for used_item in self.used_items[range.clone()].iter() {\n-                let is_inlined = used_item.instantiation_mode(tcx) == InstantiationMode::LocalCopy;\n-                if is_inlined {\n-                    f(*used_item);\n-                }\n+        let used_items = self.used_map.get(&item).unwrap();\n+        for used_item in used_items.iter() {\n+            let is_inlined = used_item.instantiation_mode(tcx) == InstantiationMode::LocalCopy;\n+            if is_inlined {\n+                f(*used_item);\n             }\n         }\n     }"}]}