{"sha": "6b44662669cf1680fe097e593eae20ca5dbed2ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNDQ2NjI2NjljZjE2ODBmZTA5N2U1OTNlYWUyMGNhNWRiZWQyZWU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-20T20:25:42Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-20T20:25:42Z"}, "message": "Parse the format string for the panic_fmt lint for better warnings.", "tree": {"sha": "7adf9caad63fe6c221ee6e97ff9adf9b3ce3a929", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7adf9caad63fe6c221ee6e97ff9adf9b3ce3a929"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b44662669cf1680fe097e593eae20ca5dbed2ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b44662669cf1680fe097e593eae20ca5dbed2ee", "html_url": "https://github.com/rust-lang/rust/commit/6b44662669cf1680fe097e593eae20ca5dbed2ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b44662669cf1680fe097e593eae20ca5dbed2ee/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d", "html_url": "https://github.com/rust-lang/rust/commit/0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "4c84e7bd8c9f1a2725d0487eed8aee54c8e05628", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b44662669cf1680fe097e593eae20ca5dbed2ee/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6b44662669cf1680fe097e593eae20ca5dbed2ee/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6b44662669cf1680fe097e593eae20ca5dbed2ee", "patch": "@@ -3831,6 +3831,7 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_middle\",\n+ \"rustc_parse_format\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\","}, {"sha": "c56eb09b63471ad96408bae68f8f65eda0c084d1", "filename": "compiler/rustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b44662669cf1680fe097e593eae20ca5dbed2ee/compiler%2Frustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6b44662669cf1680fe097e593eae20ca5dbed2ee/compiler%2Frustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2FCargo.toml?ref=6b44662669cf1680fe097e593eae20ca5dbed2ee", "patch": "@@ -20,3 +20,4 @@ rustc_feature = { path = \"../rustc_feature\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n+rustc_parse_format = { path = \"../rustc_parse_format\" }"}, {"sha": "cff50ff9912afb82ce21bc88859485e08122dbbc", "filename": "compiler/rustc_lint/src/panic_fmt.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6b44662669cf1680fe097e593eae20ca5dbed2ee/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b44662669cf1680fe097e593eae20ca5dbed2ee/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs?ref=6b44662669cf1680fe097e593eae20ca5dbed2ee", "patch": "@@ -3,6 +3,7 @@ use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_middle::ty;\n+use rustc_parse_format::{ParseMode, Parser, Piece};\n use rustc_span::sym;\n \n declare_lint! {\n@@ -52,13 +53,28 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                 if cx.tcx.is_diagnostic_item(sym::std_panic_macro, id)\n                     || cx.tcx.is_diagnostic_item(sym::core_panic_macro, id)\n                 {\n-                    let s = sym.as_str();\n-                    if !s.contains(&['{', '}'][..]) {\n+                    let fmt = sym.as_str();\n+                    if !fmt.contains(&['{', '}'][..]) {\n                         return;\n                     }\n-                    let s = s.replace(\"{{\", \"\").replace(\"}}\", \"\");\n-                    let looks_like_placeholder =\n-                        s.find('{').map_or(false, |i| s[i + 1..].contains('}'));\n+\n+                    let fmt_span = arg.span.source_callsite();\n+\n+                    let (snippet, style) =\n+                        match cx.sess().parse_sess.source_map().span_to_snippet(fmt_span) {\n+                            Ok(snippet) => {\n+                                // Count the number of `#`s between the `r` and `\"`.\n+                                let style = snippet.strip_prefix('r').and_then(|s| s.find('\"'));\n+                                (Some(snippet), style)\n+                            }\n+                            Err(_) => (None, None),\n+                        };\n+\n+                    let mut fmt_parser =\n+                        Parser::new(fmt.as_ref(), style, snippet, false, ParseMode::Format);\n+                    let n_arguments =\n+                        (&mut fmt_parser).filter(|a| matches!(a, Piece::NextArgument(_))).count();\n+\n                     // Unwrap another level of macro expansion if this panic!()\n                     // was expanded from assert!() or debug_assert!().\n                     for &assert in &[sym::assert_macro, sym::debug_assert_macro] {\n@@ -70,15 +86,23 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                             expn = parent;\n                         }\n                     }\n-                    if looks_like_placeholder {\n-                        cx.struct_span_lint(PANIC_FMT, arg.span.source_callsite(), |lint| {\n-                            let mut l = lint.build(\"panic message contains an unused formatting placeholder\");\n+\n+                    if n_arguments > 0 && fmt_parser.errors.is_empty() {\n+                        let arg_spans: Vec<_> = match &fmt_parser.arg_places[..] {\n+                            [] => vec![fmt_span],\n+                            v => v.iter().map(|span| fmt_span.from_inner(*span)).collect(),\n+                        };\n+                        cx.struct_span_lint(PANIC_FMT, arg_spans, |lint| {\n+                            let mut l = lint.build(match n_arguments {\n+                                1 => \"panic message contains an unused formatting placeholder\",\n+                                _ => \"panic message contains unused formatting placeholders\",\n+                            });\n                             l.note(\"this message is not used as a format string when given without arguments, but will be in a future Rust version\");\n                             if expn.call_site.contains(arg.span) {\n                                 l.span_suggestion(\n                                     arg.span.shrink_to_hi(),\n                                     \"add the missing argument(s)\",\n-                                    \", argument\".into(),\n+                                    \", ...\".into(),\n                                     Applicability::HasPlaceholders,\n                                 );\n                                 l.span_suggestion("}, {"sha": "e74b6ad96c2c0af8aea10d51c15361ace73cb7b6", "filename": "src/test/ui/panic-brace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b44662669cf1680fe097e593eae20ca5dbed2ee/src%2Ftest%2Fui%2Fpanic-brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b44662669cf1680fe097e593eae20ca5dbed2ee/src%2Ftest%2Fui%2Fpanic-brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-brace.rs?ref=6b44662669cf1680fe097e593eae20ca5dbed2ee", "patch": "@@ -5,6 +5,6 @@ fn main() {\n     panic!(\"here's a brace: {\"); //~ WARN panic message contains a brace\n     std::panic!(\"another one: }\"); //~ WARN panic message contains a brace\n     core::panic!(\"Hello {}\"); //~ WARN panic message contains an unused formatting placeholder\n-    assert!(false, \"{:03x} bla\"); //~ WARN panic message contains an unused formatting placeholder\n+    assert!(false, \"{:03x} {test} bla\"); //~ WARN panic message contains unused formatting placeholders\n     debug_assert!(false, \"{{}} bla\"); //~ WARN panic message contains a brace\n }"}, {"sha": "23ae31d00ebd2cfdf3ae6007cc1288cc80ccb566", "filename": "src/test/ui/panic-brace.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6b44662669cf1680fe097e593eae20ca5dbed2ee/src%2Ftest%2Fui%2Fpanic-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b44662669cf1680fe097e593eae20ca5dbed2ee/src%2Ftest%2Fui%2Fpanic-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-brace.stderr?ref=6b44662669cf1680fe097e593eae20ca5dbed2ee", "patch": "@@ -24,35 +24,35 @@ LL |     std::panic!(\"{}\", \"another one: }\");\n    |                 ^^^^^\n \n warning: panic message contains an unused formatting placeholder\n-  --> $DIR/panic-brace.rs:7:18\n+  --> $DIR/panic-brace.rs:7:25\n    |\n LL |     core::panic!(\"Hello {}\");\n-   |                  ^^^^^^^^^^\n+   |                         ^^\n    |\n    = note: this message is not used as a format string when given without arguments, but will be in a future Rust version\n help: add the missing argument(s)\n    |\n-LL |     core::panic!(\"Hello {}\", argument);\n-   |                            ^^^^^^^^^^\n+LL |     core::panic!(\"Hello {}\", ...);\n+   |                            ^^^^^\n help: or add a \"{}\" format string to use the message literally\n    |\n LL |     core::panic!(\"{}\", \"Hello {}\");\n    |                  ^^^^^\n \n-warning: panic message contains an unused formatting placeholder\n-  --> $DIR/panic-brace.rs:8:20\n+warning: panic message contains unused formatting placeholders\n+  --> $DIR/panic-brace.rs:8:21\n    |\n-LL |     assert!(false, \"{:03x} bla\");\n-   |                    ^^^^^^^^^^^^\n+LL |     assert!(false, \"{:03x} {test} bla\");\n+   |                     ^^^^^^ ^^^^^^\n    |\n    = note: this message is not used as a format string when given without arguments, but will be in a future Rust version\n help: add the missing argument(s)\n    |\n-LL |     assert!(false, \"{:03x} bla\", argument);\n-   |                                ^^^^^^^^^^\n+LL |     assert!(false, \"{:03x} {test} bla\", ...);\n+   |                                       ^^^^^\n help: or add a \"{}\" format string to use the message literally\n    |\n-LL |     assert!(false, \"{}\", \"{:03x} bla\");\n+LL |     assert!(false, \"{}\", \"{:03x} {test} bla\");\n    |                    ^^^^^\n \n warning: panic message contains a brace"}]}