{"sha": "21bec4f11bd66f9ff7e74eb878efe3d487057329", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYmVjNGYxMWJkNjZmOWZmN2U3NGViODc4ZWZlM2Q0ODcwNTczMjk=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-12-18T17:26:19Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-12-18T20:21:34Z"}, "message": "rustdoc: thread through the context for rendering\n\nThis partially reverts 8b5a317.", "tree": {"sha": "15504b229ab42e55ecaafdf9a90b0e83b4c45e50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15504b229ab42e55ecaafdf9a90b0e83b4c45e50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21bec4f11bd66f9ff7e74eb878efe3d487057329", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21bec4f11bd66f9ff7e74eb878efe3d487057329", "html_url": "https://github.com/rust-lang/rust/commit/21bec4f11bd66f9ff7e74eb878efe3d487057329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21bec4f11bd66f9ff7e74eb878efe3d487057329/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d45170b02fc3055f9a80d06f7ab1f508c8de98f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d45170b02fc3055f9a80d06f7ab1f508c8de98f", "html_url": "https://github.com/rust-lang/rust/commit/5d45170b02fc3055f9a80d06f7ab1f508c8de98f"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "c84caf8acdd3a861bd02602ad2605c1350e32ad1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21bec4f11bd66f9ff7e74eb878efe3d487057329/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bec4f11bd66f9ff7e74eb878efe3d487057329/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=21bec4f11bd66f9ff7e74eb878efe3d487057329", "patch": "@@ -678,15 +678,21 @@ impl Context {\n         // using a rwarc makes this parallelizable in the future\n         local_data::set(cache_key, Arc::new(cache));\n \n-        self.item(item);\n+        let mut work = ~[(self, item)];\n+        while work.len() > 0 {\n+            let (mut cx, item) = work.pop();\n+            cx.item(item, |cx, item| {\n+                work.push((cx.clone(), item));\n+            })\n+        }\n     }\n \n     /// Non-parellelized version of rendering an item. This will take the input\n     /// item, render its contents, and then invoke the specified closure with\n     /// all sub-items which need to be rendered.\n     ///\n     /// The rendering driver uses this closure to queue up more work.\n-    fn item(&mut self, item: clean::Item) {\n+    fn item(&mut self, item: clean::Item, f: |&mut Context, clean::Item|) {\n         fn render(w: io::File, cx: &mut Context, it: &clean::Item,\n                   pushname: bool) {\n             info!(\"Rendering an item to {}\", w.path().display());\n@@ -733,7 +739,7 @@ impl Context {\n                     };\n                     this.sidebar = build_sidebar(&m);\n                     for item in m.items.move_iter() {\n-                        this.item(item);\n+                        f(this,item);\n                     }\n                 })\n             }"}]}