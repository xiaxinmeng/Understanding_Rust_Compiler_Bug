{"sha": "00904cb100f9f9d3291f98a3434f7aba9301b8de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwOTA0Y2IxMDBmOWY5ZDMyOTFmOThhMzQzNGY3YWJhOTMwMWI4ZGU=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-02-04T19:19:20Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-02-04T21:54:42Z"}, "message": "Manage macros case + move to MaybeIncorrect when binding values", "tree": {"sha": "4c078b4caea743048e10c0ecddefe455eb0842a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c078b4caea743048e10c0ecddefe455eb0842a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00904cb100f9f9d3291f98a3434f7aba9301b8de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00904cb100f9f9d3291f98a3434f7aba9301b8de", "html_url": "https://github.com/rust-lang/rust/commit/00904cb100f9f9d3291f98a3434f7aba9301b8de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00904cb100f9f9d3291f98a3434f7aba9301b8de/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53094de08efea5f4f4ff2d5e8e7381bf8aede625", "url": "https://api.github.com/repos/rust-lang/rust/commits/53094de08efea5f4f4ff2d5e8e7381bf8aede625", "html_url": "https://github.com/rust-lang/rust/commit/53094de08efea5f4f4ff2d5e8e7381bf8aede625"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "1d8c5ec9038dc460fe58ea979ec897f595096811", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/00904cb100f9f9d3291f98a3434f7aba9301b8de/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00904cb100f9f9d3291f98a3434f7aba9301b8de/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=00904cb100f9f9d3291f98a3434f7aba9301b8de", "patch": "@@ -285,7 +285,8 @@ declare_clippy_lint! {\n     ///\n     /// **Why is this bad?** Readability and needless complexity.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:**  Suggested replacements may be incorrect when `match`\n+    /// is actually binding temporary value, bringing a 'dropped while borrowed' error.\n     ///\n     /// **Example:**\n     /// ```rust\n@@ -835,23 +836,22 @@ fn check_match_single_binding(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[A\n     };\n \n     // Do we need to add ';' to suggestion ?\n-    if_chain! {\n-        if let ExprKind::Block(block, _) = &arms[0].body.kind;\n-        if block.stmts.len() == 1;\n-        if let StmtKind::Semi(s) = block.stmts.get(0).unwrap().kind;\n-        then {\n-            match s.kind {\n-                ExprKind::Block(_, _) => (),\n-                _ => {\n-                    // expr_ty(body) == ()\n-                    if cx.tables.expr_ty(&arms[0].body).is_unit() {\n-                        snippet_body.push(';');\n-                    }\n-                }\n+    match match_body.kind {\n+        ExprKind::Block(block, _) => {\n+            // macro + expr_ty(body) == ()\n+            if block.span.from_expansion() && cx.tables.expr_ty(&match_body).is_unit() {\n+                snippet_body.push(';');\n             }\n-        }\n+        },\n+        _ => {\n+            // expr_ty(body) == ()\n+            if cx.tables.expr_ty(&match_body).is_unit() {\n+                snippet_body.push(';');\n+            }\n+        },\n     }\n \n+    let mut applicability = Applicability::MaybeIncorrect;\n     match arms[0].pat.kind {\n         PatKind::Binding(..) | PatKind::Tuple(_, _) | PatKind::Struct(..) => {\n             span_lint_and_sugg(\n@@ -862,11 +862,11 @@ fn check_match_single_binding(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[A\n                 \"consider using `let` statement\",\n                 format!(\n                     \"let {} = {};\\n{}\",\n-                    snippet(cx, bind_names, \"..\"),\n-                    snippet(cx, matched_vars, \"..\"),\n+                    snippet_with_applicability(cx, bind_names, \"..\", &mut applicability),\n+                    snippet_with_applicability(cx, matched_vars, \"..\", &mut applicability),\n                     snippet_body\n                 ),\n-                Applicability::MachineApplicable,\n+                applicability,\n             );\n         },\n         PatKind::Wild => {"}]}