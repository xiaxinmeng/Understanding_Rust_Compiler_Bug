{"sha": "9878eea61c7a715d798640e932d9752043599ee3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NzhlZWE2MWM3YTcxNWQ3OTg2NDBlOTMyZDk3NTIwNDM1OTllZTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-25T09:22:48Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-30T18:22:35Z"}, "message": "Implement indexing for slices", "tree": {"sha": "f547cda0953a26abebf48790d377d578f3b1dffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f547cda0953a26abebf48790d377d578f3b1dffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9878eea61c7a715d798640e932d9752043599ee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9878eea61c7a715d798640e932d9752043599ee3", "html_url": "https://github.com/rust-lang/rust/commit/9878eea61c7a715d798640e932d9752043599ee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9878eea61c7a715d798640e932d9752043599ee3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa4a37759be06c2b96c133cfc0f85b7cf2ce00b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4a37759be06c2b96c133cfc0f85b7cf2ce00b4", "html_url": "https://github.com/rust-lang/rust/commit/fa4a37759be06c2b96c133cfc0f85b7cf2ce00b4"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "5df8e69efd3e9191cb7b5c6f73a4d98ed8885d84", "filename": "examples/example.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9878eea61c7a715d798640e932d9752043599ee3/examples%2Fexample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9878eea61c7a715d798640e932d9752043599ee3/examples%2Fexample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fexample.rs?ref=9878eea61c7a715d798640e932d9752043599ee3", "patch": "@@ -180,3 +180,7 @@ fn make_array() -> [u8; 3] {\n fn some_promoted_tuple() -> &'static (&'static str, &'static str) {\n     &(\"abc\", \"some\")\n }\n+\n+fn index_slice(s: &[u8]) -> u8 {\n+    s[2]\n+}"}, {"sha": "2eb2e95025654e65f0e0609153e07ed0df694dce", "filename": "examples/mini_core.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9878eea61c7a715d798640e932d9752043599ee3/examples%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9878eea61c7a715d798640e932d9752043599ee3/examples%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core.rs?ref=9878eea61c7a715d798640e932d9752043599ee3", "patch": "@@ -207,3 +207,11 @@ impl<T> Index<usize> for [T; 3] {\n         &self[index]\n     }\n }\n+\n+impl<T> Index<usize> for [T] {\n+    type Output = T;\n+\n+    fn index(&self, index: usize) -> &Self::Output {\n+        &self[index]\n+    }\n+}"}, {"sha": "fd98d83221a93648dcc338b78c59b9a6b2cb60fa", "filename": "src/common.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9878eea61c7a715d798640e932d9752043599ee3/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9878eea61c7a715d798640e932d9752043599ee3/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=9878eea61c7a715d798640e932d9752043599ee3", "patch": "@@ -433,21 +433,24 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n         index: Value,\n     ) -> CPlace<'tcx> {\n-        match self.layout().ty.sty {\n-            ty::Array(elem_ty, _) => {\n-                let elem_layout = fx.layout_of(elem_ty);\n+        let (elem_layout, addr) = match self.layout().ty.sty {\n+            ty::Array(elem_ty, _) => (fx.layout_of(elem_ty), self.expect_addr()),\n+            ty::Slice(elem_ty) => (\n+                fx.layout_of(elem_ty),\n+                match self {\n+                    CPlace::Addr(addr, _, _) => addr,\n+                    CPlace::Var(_, _) => bug!(\"Expected CPlace::Addr found CPlace::Var\"),\n+                },\n+            ),\n+            _ => bug!(\"place_index({:?})\", self.layout().ty),\n+        };\n \n-                let offset = fx\n-                    .bcx\n-                    .ins()\n-                    .imul_imm(index, elem_layout.size.bytes() as i64);\n+        let offset = fx\n+            .bcx\n+            .ins()\n+            .imul_imm(index, elem_layout.size.bytes() as i64);\n \n-                let addr = self.expect_addr();\n-                CPlace::Addr(fx.bcx.ins().iadd(addr, offset), None, elem_layout)\n-            }\n-            ty::Slice(_elem_ty) => unimpl!(\"place_index(TySlice)\"),\n-            _ => bug!(\"place_index({:?})\", self.layout().ty),\n-        }\n+        CPlace::Addr(fx.bcx.ins().iadd(addr, offset), None, elem_layout)\n     }\n \n     pub fn place_deref(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> CPlace<'tcx> {"}]}