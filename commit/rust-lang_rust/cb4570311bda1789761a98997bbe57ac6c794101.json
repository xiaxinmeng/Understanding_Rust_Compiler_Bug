{"sha": "cb4570311bda1789761a98997bbe57ac6c794101", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNDU3MDMxMWJkYTE3ODk3NjFhOTg5OTdiYmU1N2FjNmM3OTQxMDE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-02-28T21:55:50Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-04-03T12:48:04Z"}, "message": "Move get_extern_fn and get_res_dtor out of base\n\nThese functions have only a single use and functionally belong to foreign and glue respectively\nanyway", "tree": {"sha": "55dd5596bae7927bcf4d1674da05a32df0bbf310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55dd5596bae7927bcf4d1674da05a32df0bbf310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb4570311bda1789761a98997bbe57ac6c794101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4570311bda1789761a98997bbe57ac6c794101", "html_url": "https://github.com/rust-lang/rust/commit/cb4570311bda1789761a98997bbe57ac6c794101", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb4570311bda1789761a98997bbe57ac6c794101/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c71970eea2954b40b2b9f195507bc56d2507c5ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c71970eea2954b40b2b9f195507bc56d2507c5ac", "html_url": "https://github.com/rust-lang/rust/commit/c71970eea2954b40b2b9f195507bc56d2507c5ac"}], "stats": {"total": 137, "additions": 68, "deletions": 69}, "files": [{"sha": "5dfa84c15d0400dfc3cec60561e9e01864a8f51d", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 59, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/cb4570311bda1789761a98997bbe57ac6c794101/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4570311bda1789761a98997bbe57ac6c794101/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=cb4570311bda1789761a98997bbe57ac6c794101", "patch": "@@ -54,7 +54,7 @@ use trans::cleanup;\n use trans::closure;\n use trans::common::{Block, C_bool, C_bytes_in_context, C_i32, C_int, C_integral};\n use trans::common::{C_null, C_struct_in_context, C_u64, C_u8, C_undef};\n-use trans::common::{CrateContext, ExternMap, FunctionContext};\n+use trans::common::{CrateContext, FunctionContext};\n use trans::common::{Result, NodeIdAndSpan};\n use trans::common::{node_id_type, return_type_is_void};\n use trans::common::{type_is_immediate, type_is_zero_size, val_ty};\n@@ -67,7 +67,6 @@ use trans::debuginfo::{self, DebugLoc, ToDebugLoc};\n use trans::expr;\n use trans::foreign;\n use trans::glue;\n-use trans::inline;\n use trans::intrinsic;\n use trans::machine;\n use trans::machine::{llsize_of, llsize_of_real};\n@@ -84,7 +83,7 @@ use util::sha2::Sha256;\n use util::nodemap::NodeMap;\n \n use arena::TypedArena;\n-use libc::{c_uint, uint64_t};\n+use libc::c_uint;\n use std::ffi::{CStr, CString};\n use std::cell::{Cell, RefCell};\n use std::collections::HashSet;\n@@ -218,23 +217,6 @@ pub fn decl_cdecl_fn(ccx: &CrateContext,\n     decl_fn(ccx, name, llvm::CCallConv, ty, ty::FnConverging(output))\n }\n \n-// only use this for foreign function ABIs and glue, use `get_extern_rust_fn` for Rust functions\n-pub fn get_extern_fn(ccx: &CrateContext,\n-                     externs: &mut ExternMap,\n-                     name: &str,\n-                     cc: llvm::CallConv,\n-                     ty: Type,\n-                     output: Ty)\n-                     -> ValueRef {\n-    match externs.get(name) {\n-        Some(n) => return *n,\n-        None => {}\n-    }\n-    let f = decl_fn(ccx, name, cc, ty, ty::FnConverging(output));\n-    externs.insert(name.to_string(), f);\n-    f\n-}\n-\n fn get_extern_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_ty: Ty<'tcx>,\n                                 name: &str, did: ast::DefId) -> ValueRef {\n     match ccx.externs().borrow().get(name) {\n@@ -400,45 +382,6 @@ pub fn note_unique_llvm_symbol(ccx: &CrateContext, sym: String) {\n     ccx.all_llvm_symbols().borrow_mut().insert(sym);\n }\n \n-\n-pub fn get_res_dtor<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                              did: ast::DefId,\n-                              t: Ty<'tcx>,\n-                              parent_id: ast::DefId,\n-                              substs: &Substs<'tcx>)\n-                              -> ValueRef {\n-    let _icx = push_ctxt(\"trans_res_dtor\");\n-    let did = inline::maybe_instantiate_inline(ccx, did);\n-\n-    if !substs.types.is_empty() {\n-        assert_eq!(did.krate, ast::LOCAL_CRATE);\n-\n-        // Since we're in trans we don't care for any region parameters\n-        let substs = ccx.tcx().mk_substs(Substs::erased(substs.types.clone()));\n-\n-        let (val, _, _) = monomorphize::monomorphic_fn(ccx, did, substs, None);\n-\n-        val\n-    } else if did.krate == ast::LOCAL_CRATE {\n-        get_item_val(ccx, did.node)\n-    } else {\n-        let tcx = ccx.tcx();\n-        let name = csearch::get_symbol(&ccx.sess().cstore, did);\n-        let class_ty = ty::lookup_item_type(tcx, parent_id).ty.subst(tcx, substs);\n-        let llty = type_of_dtor(ccx, class_ty);\n-        let dtor_ty = ty::mk_ctor_fn(ccx.tcx(),\n-                                     did,\n-                                     &[glue::get_drop_glue_type(ccx, t)],\n-                                     ty::mk_nil(ccx.tcx()));\n-        get_extern_fn(ccx,\n-                      &mut *ccx.externs().borrow_mut(),\n-                      &name[..],\n-                      llvm::CCallConv,\n-                      llty,\n-                      dtor_ty)\n-    }\n-}\n-\n pub fn bin_op_to_icmp_predicate(ccx: &CrateContext, op: ast::BinOp_, signed: bool)\n                                 -> llvm::IntPredicate {\n     match op {"}, {"sha": "e0299ba63f5261eb1ab262e1b714ecf8b7ce9d6b", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cb4570311bda1789761a98997bbe57ac6c794101/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4570311bda1789761a98997bbe57ac6c794101/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=cb4570311bda1789761a98997bbe57ac6c794101", "patch": "@@ -165,6 +165,23 @@ pub fn register_static(ccx: &CrateContext,\n     }\n }\n \n+// only use this for foreign function ABIs and glue, use `get_extern_rust_fn` for Rust functions\n+pub fn get_extern_fn(ccx: &CrateContext,\n+                     externs: &mut ExternMap,\n+                     name: &str,\n+                     cc: llvm::CallConv,\n+                     ty: Type,\n+                     output: Ty)\n+                     -> ValueRef {\n+    match externs.get(name) {\n+        Some(n) => return *n,\n+        None => {}\n+    }\n+    let f = base::decl_fn(ccx, name, cc, ty, ty::FnConverging(output));\n+    externs.insert(name.to_string(), f);\n+    f\n+}\n+\n /// Registers a foreign function found in a library. Just adds a LLVM global.\n pub fn register_foreign_item_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                           abi: Abi, fty: Ty<'tcx>,\n@@ -190,12 +207,7 @@ pub fn register_foreign_item_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // Create the LLVM value for the C extern fn\n     let llfn_ty = lltype_for_fn_from_foreign_types(ccx, &tys);\n \n-    let llfn = base::get_extern_fn(ccx,\n-                                   &mut *ccx.externs().borrow_mut(),\n-                                   name,\n-                                   cc,\n-                                   llfn_ty,\n-                                   fty);\n+    let llfn = get_extern_fn(ccx, &mut *ccx.externs().borrow_mut(), name, cc, llfn_ty, fty);\n     add_argument_attributes(&tys, llfn);\n \n     llfn"}, {"sha": "898d4216e5a6b6addef3209163d538c38880a5e9", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cb4570311bda1789761a98997bbe57ac6c794101/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4570311bda1789761a98997bbe57ac6c794101/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=cb4570311bda1789761a98997bbe57ac6c794101", "patch": "@@ -15,11 +15,13 @@\n \n use back::abi;\n use back::link::*;\n-use llvm::{ValueRef, get_param};\n use llvm;\n+use llvm::{ValueRef, get_param};\n+use metadata::csearch;\n use middle::lang_items::ExchangeFreeFnLangItem;\n use middle::subst;\n use middle::subst::{Subst, Substs};\n+use middle::ty::{self, Ty};\n use trans::adt;\n use trans::adt::GetDtorType; // for tcx.dtor_type()\n use trans::base::*;\n@@ -28,15 +30,19 @@ use trans::callee;\n use trans::cleanup;\n use trans::cleanup::CleanupMethods;\n use trans::common::*;\n+use trans::consts;\n use trans::datum;\n use trans::debuginfo::DebugLoc;\n use trans::expr;\n+use trans::foreign;\n+use trans::inline;\n use trans::machine::*;\n-use trans::type_::Type;\n+use trans::monomorphize;\n+use trans::tvec;\n use trans::type_of::{type_of, sizing_type_of, align_of};\n-use middle::ty::{self, Ty};\n-use util::ppaux::{ty_to_short_str, Repr};\n+use trans::type_::Type;\n use util::ppaux;\n+use util::ppaux::{ty_to_short_str, Repr};\n \n use arena::TypedArena;\n use libc::c_uint;\n@@ -259,6 +265,44 @@ fn trans_struct_drop_flag<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n }\n \n+pub fn get_res_dtor<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+                              did: ast::DefId,\n+                              t: Ty<'tcx>,\n+                              parent_id: ast::DefId,\n+                              substs: &Substs<'tcx>)\n+                              -> ValueRef {\n+    let _icx = push_ctxt(\"trans_res_dtor\");\n+    let did = inline::maybe_instantiate_inline(ccx, did);\n+\n+    if !substs.types.is_empty() {\n+        assert_eq!(did.krate, ast::LOCAL_CRATE);\n+\n+        // Since we're in trans we don't care for any region parameters\n+        let substs = ccx.tcx().mk_substs(Substs::erased(substs.types.clone()));\n+\n+        let (val, _, _) = monomorphize::monomorphic_fn(ccx, did, substs, None);\n+\n+        val\n+    } else if did.krate == ast::LOCAL_CRATE {\n+        get_item_val(ccx, did.node)\n+    } else {\n+        let tcx = ccx.tcx();\n+        let name = csearch::get_symbol(&ccx.sess().cstore, did);\n+        let class_ty = ty::lookup_item_type(tcx, parent_id).ty.subst(tcx, substs);\n+        let llty = type_of_dtor(ccx, class_ty);\n+        let dtor_ty = ty::mk_ctor_fn(ccx.tcx(),\n+                                     did,\n+                                     &[get_drop_glue_type(ccx, t)],\n+                                     ty::mk_nil(ccx.tcx()));\n+        foreign::get_extern_fn(ccx,\n+                      &mut *ccx.externs().borrow_mut(),\n+                      &name[..],\n+                      llvm::CCallConv,\n+                      llty,\n+                      dtor_ty)\n+    }\n+}\n+\n fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                  t: Ty<'tcx>,\n                                  v0: ValueRef,"}]}