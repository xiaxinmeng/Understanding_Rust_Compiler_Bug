{"sha": "87c375fa625526d6ef93b12c0cf19ba3453a2ea5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YzM3NWZhNjI1NTI2ZDZlZjkzYjEyYzBjZjE5YmEzNDUzYTJlYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-31T13:36:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-31T13:36:20Z"}, "message": "Auto merge of #7605 - xordi:issue-7548-fix, r=giraffate\n\nIssue 7548 fix\n\nClose #7548\n\nchangelog: [`bool_assert_comparison`] fixes should be emitted only in case they are comparing a value of a type that implements the `Not` trait with an output of type `bool` against a boolean literal.", "tree": {"sha": "55797b9666b3346da96ef0f42742ee0c7b152683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55797b9666b3346da96ef0f42742ee0c7b152683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87c375fa625526d6ef93b12c0cf19ba3453a2ea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87c375fa625526d6ef93b12c0cf19ba3453a2ea5", "html_url": "https://github.com/rust-lang/rust/commit/87c375fa625526d6ef93b12c0cf19ba3453a2ea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87c375fa625526d6ef93b12c0cf19ba3453a2ea5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd30241281333d73d504355b2f4d0ecd94f27b0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd30241281333d73d504355b2f4d0ecd94f27b0e", "html_url": "https://github.com/rust-lang/rust/commit/fd30241281333d73d504355b2f4d0ecd94f27b0e"}, {"sha": "83f1454ade1bfa9a797b4bdccd8bd2432c110641", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f1454ade1bfa9a797b4bdccd8bd2432c110641", "html_url": "https://github.com/rust-lang/rust/commit/83f1454ade1bfa9a797b4bdccd8bd2432c110641"}], "stats": {"total": 217, "additions": 169, "deletions": 48}, "files": [{"sha": "cdc192a47e48abebb325f95437ce48a1ee00dee6", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 62, "deletions": 28, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/87c375fa625526d6ef93b12c0cf19ba3453a2ea5/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c375fa625526d6ef93b12c0cf19ba3453a2ea5/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=87c375fa625526d6ef93b12c0cf19ba3453a2ea5", "patch": "@@ -1,9 +1,11 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::{ast_utils, is_direct_expn_of};\n-use rustc_ast::ast::{Expr, ExprKind, Lit, LitKind};\n+use clippy_utils::{diagnostics::span_lint_and_sugg, higher, is_direct_expn_of, ty::implements_trait};\n+use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_hir::{Expr, ExprKind, Lit};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::Ident;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -28,45 +30,77 @@ declare_clippy_lint! {\n \n declare_lint_pass!(BoolAssertComparison => [BOOL_ASSERT_COMPARISON]);\n \n-fn is_bool_lit(e: &Expr) -> bool {\n+fn is_bool_lit(e: &Expr<'_>) -> bool {\n     matches!(\n         e.kind,\n         ExprKind::Lit(Lit {\n-            kind: LitKind::Bool(_),\n+            node: LitKind::Bool(_),\n             ..\n         })\n     ) && !e.span.from_expansion()\n }\n \n-impl EarlyLintPass for BoolAssertComparison {\n-    fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &Expr) {\n+fn is_impl_not_trait_with_bool_out(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> bool {\n+    let ty = cx.typeck_results().expr_ty(e);\n+\n+    cx.tcx\n+        .lang_items()\n+        .not_trait()\n+        .filter(|trait_id| implements_trait(cx, ty, *trait_id, &[]))\n+        .and_then(|trait_id| {\n+            cx.tcx.associated_items(trait_id).find_by_name_and_kind(\n+                cx.tcx,\n+                Ident::from_str(\"Output\"),\n+                ty::AssocKind::Type,\n+                trait_id,\n+            )\n+        })\n+        .map_or(false, |assoc_item| {\n+            let proj = cx.tcx.mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(ty, &[]));\n+            let nty = cx.tcx.normalize_erasing_regions(cx.param_env, proj);\n+\n+            nty.is_bool()\n+        })\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for BoolAssertComparison {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         let macros = [\"assert_eq\", \"debug_assert_eq\"];\n         let inverted_macros = [\"assert_ne\", \"debug_assert_ne\"];\n \n         for mac in macros.iter().chain(inverted_macros.iter()) {\n-            if let Some(span) = is_direct_expn_of(e.span, mac) {\n-                if let Some([a, b]) = ast_utils::extract_assert_macro_args(e) {\n-                    let nb_bool_args = is_bool_lit(a) as usize + is_bool_lit(b) as usize;\n+            if let Some(span) = is_direct_expn_of(expr.span, mac) {\n+                if let Some(args) = higher::extract_assert_macro_args(expr) {\n+                    if let [a, b, ..] = args[..] {\n+                        let nb_bool_args = is_bool_lit(a) as usize + is_bool_lit(b) as usize;\n+\n+                        if nb_bool_args != 1 {\n+                            // If there are two boolean arguments, we definitely don't understand\n+                            // what's going on, so better leave things as is...\n+                            //\n+                            // Or there is simply no boolean and then we can leave things as is!\n+                            return;\n+                        }\n \n-                    if nb_bool_args != 1 {\n-                        // If there are two boolean arguments, we definitely don't understand\n-                        // what's going on, so better leave things as is...\n-                        //\n-                        // Or there is simply no boolean and then we can leave things as is!\n+                        if !is_impl_not_trait_with_bool_out(cx, a) || !is_impl_not_trait_with_bool_out(cx, b) {\n+                            // At this point the expression which is not a boolean\n+                            // literal does not implement Not trait with a bool output,\n+                            // so we cannot suggest to rewrite our code\n+                            return;\n+                        }\n+\n+                        let non_eq_mac = &mac[..mac.len() - 3];\n+                        span_lint_and_sugg(\n+                            cx,\n+                            BOOL_ASSERT_COMPARISON,\n+                            span,\n+                            &format!(\"used `{}!` with a literal bool\", mac),\n+                            \"replace it with\",\n+                            format!(\"{}!(..)\", non_eq_mac),\n+                            Applicability::MaybeIncorrect,\n+                        );\n                         return;\n                     }\n-\n-                    let non_eq_mac = &mac[..mac.len() - 3];\n-                    span_lint_and_sugg(\n-                        cx,\n-                        BOOL_ASSERT_COMPARISON,\n-                        span,\n-                        &format!(\"used `{}!` with a literal bool\", mac),\n-                        \"replace it with\",\n-                        format!(\"{}!(..)\", non_eq_mac),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                    return;\n                 }\n             }\n         }"}, {"sha": "5987f9e5b0cb8ab992c861aa4738f5ff8eb09174", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c375fa625526d6ef93b12c0cf19ba3453a2ea5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c375fa625526d6ef93b12c0cf19ba3453a2ea5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=87c375fa625526d6ef93b12c0cf19ba3453a2ea5", "patch": "@@ -2115,7 +2115,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box from_str_radix_10::FromStrRadix10);\n     store.register_late_pass(|| box manual_map::ManualMap);\n     store.register_late_pass(move || box if_then_some_else_none::IfThenSomeElseNone::new(msrv));\n-    store.register_early_pass(|| box bool_assert_comparison::BoolAssertComparison);\n+    store.register_late_pass(|| box bool_assert_comparison::BoolAssertComparison);\n     store.register_early_pass(move || box module_style::ModStyle);\n     store.register_late_pass(|| box unused_async::UnusedAsync);\n     let disallowed_types = conf.disallowed_types.iter().cloned().collect::<FxHashSet<_>>();"}, {"sha": "ec4d6f3ff840113829343f89f7ff45f2d9e45f8b", "filename": "tests/ui/bool_assert_comparison.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/87c375fa625526d6ef93b12c0cf19ba3453a2ea5/tests%2Fui%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c375fa625526d6ef93b12c0cf19ba3453a2ea5/tests%2Fui%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.rs?ref=87c375fa625526d6ef93b12c0cf19ba3453a2ea5", "patch": "@@ -1,5 +1,7 @@\n #![warn(clippy::bool_assert_comparison)]\n \n+use std::ops::Not;\n+\n macro_rules! a {\n     () => {\n         true\n@@ -11,14 +13,67 @@ macro_rules! b {\n     };\n }\n \n+// Implements the Not trait but with an output type\n+// that's not bool. Should not suggest a rewrite\n+#[derive(Debug)]\n+enum ImplNotTraitWithoutBool {\n+    VariantX(bool),\n+    VariantY(u32),\n+}\n+\n+impl PartialEq<bool> for ImplNotTraitWithoutBool {\n+    fn eq(&self, other: &bool) -> bool {\n+        match *self {\n+            ImplNotTraitWithoutBool::VariantX(b) => b == *other,\n+            _ => false,\n+        }\n+    }\n+}\n+\n+impl Not for ImplNotTraitWithoutBool {\n+    type Output = Self;\n+\n+    fn not(self) -> Self::Output {\n+        match self {\n+            ImplNotTraitWithoutBool::VariantX(b) => ImplNotTraitWithoutBool::VariantX(!b),\n+            ImplNotTraitWithoutBool::VariantY(0) => ImplNotTraitWithoutBool::VariantY(1),\n+            ImplNotTraitWithoutBool::VariantY(_) => ImplNotTraitWithoutBool::VariantY(0),\n+        }\n+    }\n+}\n+\n+// This type implements the Not trait with an Output of\n+// type bool. Using assert!(..) must be suggested\n+#[derive(Debug)]\n+struct ImplNotTraitWithBool;\n+\n+impl PartialEq<bool> for ImplNotTraitWithBool {\n+    fn eq(&self, other: &bool) -> bool {\n+        false\n+    }\n+}\n+\n+impl Not for ImplNotTraitWithBool {\n+    type Output = bool;\n+\n+    fn not(self) -> Self::Output {\n+        true\n+    }\n+}\n+\n fn main() {\n+    let a = ImplNotTraitWithoutBool::VariantX(true);\n+    let b = ImplNotTraitWithBool;\n+\n     assert_eq!(\"a\".len(), 1);\n     assert_eq!(\"a\".is_empty(), false);\n     assert_eq!(\"\".is_empty(), true);\n     assert_eq!(true, \"\".is_empty());\n     assert_eq!(a!(), b!());\n     assert_eq!(a!(), \"\".is_empty());\n     assert_eq!(\"\".is_empty(), b!());\n+    assert_eq!(a, true);\n+    assert_eq!(b, true);\n \n     assert_ne!(\"a\".len(), 1);\n     assert_ne!(\"a\".is_empty(), false);\n@@ -27,6 +82,8 @@ fn main() {\n     assert_ne!(a!(), b!());\n     assert_ne!(a!(), \"\".is_empty());\n     assert_ne!(\"\".is_empty(), b!());\n+    assert_ne!(a, true);\n+    assert_ne!(b, true);\n \n     debug_assert_eq!(\"a\".len(), 1);\n     debug_assert_eq!(\"a\".is_empty(), false);\n@@ -35,6 +92,8 @@ fn main() {\n     debug_assert_eq!(a!(), b!());\n     debug_assert_eq!(a!(), \"\".is_empty());\n     debug_assert_eq!(\"\".is_empty(), b!());\n+    debug_assert_eq!(a, true);\n+    debug_assert_eq!(b, true);\n \n     debug_assert_ne!(\"a\".len(), 1);\n     debug_assert_ne!(\"a\".is_empty(), false);\n@@ -43,17 +102,21 @@ fn main() {\n     debug_assert_ne!(a!(), b!());\n     debug_assert_ne!(a!(), \"\".is_empty());\n     debug_assert_ne!(\"\".is_empty(), b!());\n+    debug_assert_ne!(a, true);\n+    debug_assert_ne!(b, true);\n \n     // assert with error messages\n     assert_eq!(\"a\".len(), 1, \"tadam {}\", 1);\n     assert_eq!(\"a\".len(), 1, \"tadam {}\", true);\n     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n     assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n+    assert_eq!(a, true, \"tadam {}\", false);\n \n     debug_assert_eq!(\"a\".len(), 1, \"tadam {}\", 1);\n     debug_assert_eq!(\"a\".len(), 1, \"tadam {}\", true);\n     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n+    debug_assert_eq!(a, true, \"tadam {}\", false);\n }"}, {"sha": "da9b56aa7795d4e9c2396dabf655764996fab801", "filename": "tests/ui/bool_assert_comparison.stderr", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/87c375fa625526d6ef93b12c0cf19ba3453a2ea5/tests%2Fui%2Fbool_assert_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87c375fa625526d6ef93b12c0cf19ba3453a2ea5/tests%2Fui%2Fbool_assert_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.stderr?ref=87c375fa625526d6ef93b12c0cf19ba3453a2ea5", "patch": "@@ -1,112 +1,136 @@\n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:16:5\n+  --> $DIR/bool_assert_comparison.rs:69:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n    |\n    = note: `-D clippy::bool-assert-comparison` implied by `-D warnings`\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:17:5\n+  --> $DIR/bool_assert_comparison.rs:70:5\n    |\n LL |     assert_eq!(\"\".is_empty(), true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:18:5\n+  --> $DIR/bool_assert_comparison.rs:71:5\n    |\n LL |     assert_eq!(true, \"\".is_empty());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n+error: used `assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:76:5\n+   |\n+LL |     assert_eq!(b, true);\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+\n error: used `assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:24:5\n+  --> $DIR/bool_assert_comparison.rs:79:5\n    |\n LL |     assert_ne!(\"a\".is_empty(), false);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:25:5\n+  --> $DIR/bool_assert_comparison.rs:80:5\n    |\n LL |     assert_ne!(\"\".is_empty(), true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:26:5\n+  --> $DIR/bool_assert_comparison.rs:81:5\n    |\n LL |     assert_ne!(true, \"\".is_empty());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n+error: used `assert_ne!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:86:5\n+   |\n+LL |     assert_ne!(b, true);\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+\n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:32:5\n+  --> $DIR/bool_assert_comparison.rs:89:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:33:5\n+  --> $DIR/bool_assert_comparison.rs:90:5\n    |\n LL |     debug_assert_eq!(\"\".is_empty(), true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:34:5\n+  --> $DIR/bool_assert_comparison.rs:91:5\n    |\n LL |     debug_assert_eq!(true, \"\".is_empty());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n+error: used `debug_assert_eq!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:96:5\n+   |\n+LL |     debug_assert_eq!(b, true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+\n error: used `debug_assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:40:5\n+  --> $DIR/bool_assert_comparison.rs:99:5\n    |\n LL |     debug_assert_ne!(\"a\".is_empty(), false);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:41:5\n+  --> $DIR/bool_assert_comparison.rs:100:5\n    |\n LL |     debug_assert_ne!(\"\".is_empty(), true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_ne!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:42:5\n+  --> $DIR/bool_assert_comparison.rs:101:5\n    |\n LL |     debug_assert_ne!(true, \"\".is_empty());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n+error: used `debug_assert_ne!` with a literal bool\n+  --> $DIR/bool_assert_comparison.rs:106:5\n+   |\n+LL |     debug_assert_ne!(b, true);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+\n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:50:5\n+  --> $DIR/bool_assert_comparison.rs:111:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:51:5\n+  --> $DIR/bool_assert_comparison.rs:112:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:52:5\n+  --> $DIR/bool_assert_comparison.rs:113:5\n    |\n LL |     assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:56:5\n+  --> $DIR/bool_assert_comparison.rs:118:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:57:5\n+  --> $DIR/bool_assert_comparison.rs:119:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n-  --> $DIR/bool_assert_comparison.rs:58:5\n+  --> $DIR/bool_assert_comparison.rs:120:5\n    |\n LL |     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 22 previous errors\n "}]}