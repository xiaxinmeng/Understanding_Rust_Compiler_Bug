{"sha": "1081d0aee9fc0b942a90cff5b88c08f17454f763", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwODFkMGFlZTlmYzBiOTQyYTkwY2ZmNWI4OGMwOGYxNzQ1NGY3NjM=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-22T20:41:32Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-22T20:41:32Z"}, "message": "rustc: Some refactoring of rustc.rs", "tree": {"sha": "3386b6e3b511aeb04d6453cbffbf80c9bf525720", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3386b6e3b511aeb04d6453cbffbf80c9bf525720"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1081d0aee9fc0b942a90cff5b88c08f17454f763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1081d0aee9fc0b942a90cff5b88c08f17454f763", "html_url": "https://github.com/rust-lang/rust/commit/1081d0aee9fc0b942a90cff5b88c08f17454f763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1081d0aee9fc0b942a90cff5b88c08f17454f763/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "837dff9226a5c6cf5d0626e2c53f3a0bf637a072", "url": "https://api.github.com/repos/rust-lang/rust/commits/837dff9226a5c6cf5d0626e2c53f3a0bf637a072", "html_url": "https://github.com/rust-lang/rust/commit/837dff9226a5c6cf5d0626e2c53f3a0bf637a072"}], "stats": {"total": 109, "additions": 63, "deletions": 46}, "files": [{"sha": "eeb99603441a7c6c735bfa9255f4776ec9e29c42", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 63, "deletions": 46, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/1081d0aee9fc0b942a90cff5b88c08f17454f763/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1081d0aee9fc0b942a90cff5b88c08f17454f763/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=1081d0aee9fc0b942a90cff5b88c08f17454f763", "patch": "@@ -56,8 +56,8 @@ fn default_environment(session::session sess,\n }\n \n fn parse_input(session::session sess,\n-                      parser::parser p,\n-                      str input) -> @ast::crate {\n+               parser::parser p,\n+               str input) -> @ast::crate {\n     if (str::ends_with(input, \".rc\")) {\n         ret parser::parse_crate_from_crate_file(p);\n     } else if (str::ends_with(input, \".rs\")) {\n@@ -207,8 +207,7 @@ fn get_default_sysroot(str binary) -> str {\n     ret dirname;\n }\n \n-fn main(vec[str] args) {\n-\n+fn build_target_config() -> @session::config {\n     let str triple =\n         std::str::rustrt::str_from_cstr(llvm::llvm::LLVMRustGetHostTriple());\n \n@@ -219,45 +218,12 @@ fn main(vec[str] args) {\n              uint_type = common::ty_u32,\n              float_type = common::ty_f64);\n \n-    auto opts = [optflag(\"h\"), optflag(\"help\"),\n-                    optflag(\"v\"), optflag(\"version\"),\n-                    optflag(\"glue\"), optflag(\"emit-llvm\"),\n-                    optflag(\"pretty\"), optflag(\"typed-pretty\"),\n-                    optflag(\"ls\"), optflag(\"parse-only\"),\n-                    optflag(\"O\"), optopt(\"OptLevel\"),\n-                    optflag(\"shared\"), optmulti(\"L\"),\n-                    optflag(\"S\"), optflag(\"c\"), optopt(\"o\"), optflag(\"g\"),\n-                    optflag(\"save-temps\"), optopt(\"sysroot\"),\n-                    optflag(\"stats\"),\n-                    optflag(\"time-passes\"), optflag(\"time-llvm-passes\"),\n-                    optflag(\"no-typestate\"), optflag(\"noverify\")];\n-    auto binary = vec::shift[str](args);\n-    auto match;\n-    alt (getopts::getopts(args, opts)) {\n-        case (getopts::failure(?f)) {\n-            log_err #fmt(\"error: %s\", getopts::fail_str(f));\n-            fail;\n-        }\n-        case (getopts::success(?m)) { match = m; }\n-    }\n-    if (opt_present(match, \"h\") ||\n-        opt_present(match, \"help\")) {\n-        usage(binary);\n-        ret;\n-    }\n-\n-    if (opt_present(match, \"v\") ||\n-        opt_present(match, \"version\")) {\n-        version(binary);\n-        ret;\n-    }\n+    ret target_cfg;\n+}\n \n-    auto pretty = opt_present(match, \"pretty\");\n-    auto typed_pretty = opt_present(match, \"typed-pretty\");\n-    auto ls = opt_present(match, \"ls\");\n-    auto glue = opt_present(match, \"glue\");\n+fn build_session_options(str binary, getopts::match match)\n+    -> @session::options {\n     auto shared = opt_present(match, \"shared\");\n-    auto output_file = getopts::opt_maybe_str(match, \"o\");\n     auto library_search_paths = getopts::opt_strs(match, \"L\");\n \n     auto output_type = link::output_type_exe;\n@@ -331,15 +297,63 @@ fn main(vec[str] args) {\n              library_search_paths = library_search_paths,\n              sysroot = sysroot);\n \n+    ret sopts;\n+}\n+\n+fn build_session(@session::options sopts) -> session::session {\n+    auto target_cfg = build_target_config();\n     auto crate_cache = common::new_int_hash[session::crate_metadata]();\n     auto target_crate_num = 0;\n     let vec[@ast::meta_item] md = [];\n     auto sess =\n         session::session(target_crate_num, target_cfg, sopts,\n-                        crate_cache, md, front::codemap::new_codemap());\n+                         crate_cache, md, front::codemap::new_codemap());\n+    ret sess;\n+}\n+\n+fn main(vec[str] args) {\n+\n+    auto opts = [optflag(\"h\"), optflag(\"help\"),\n+                 optflag(\"v\"), optflag(\"version\"),\n+                 optflag(\"glue\"), optflag(\"emit-llvm\"),\n+                 optflag(\"pretty\"), optflag(\"typed-pretty\"),\n+                 optflag(\"ls\"), optflag(\"parse-only\"),\n+                 optflag(\"O\"), optopt(\"OptLevel\"),\n+                 optflag(\"shared\"), optmulti(\"L\"),\n+                 optflag(\"S\"), optflag(\"c\"), optopt(\"o\"), optflag(\"g\"),\n+                 optflag(\"save-temps\"), optopt(\"sysroot\"),\n+                 optflag(\"stats\"),\n+                 optflag(\"time-passes\"), optflag(\"time-llvm-passes\"),\n+                 optflag(\"no-typestate\"), optflag(\"noverify\")];\n+\n+    auto binary = vec::shift[str](args);\n+    auto match = alt (getopts::getopts(args, opts)) {\n+        case (getopts::success(?m)) { m }\n+        case (getopts::failure(?f)) {\n+            log_err #fmt(\"error: %s\", getopts::fail_str(f));\n+            fail\n+        }\n+    };\n+\n+    if (opt_present(match, \"h\") ||\n+        opt_present(match, \"help\")) {\n+        usage(binary);\n+        ret;\n+    }\n+\n+    if (opt_present(match, \"v\") ||\n+        opt_present(match, \"version\")) {\n+        version(binary);\n+        ret;\n+    }\n+\n+    auto sopts = build_session_options(binary, match);\n+    auto sess = build_session(sopts);\n \n     auto n_inputs = vec::len[str](match.free);\n \n+    auto output_file = getopts::opt_maybe_str(match, \"o\");\n+    auto glue = opt_present(match, \"glue\");\n     if (glue) {\n         if (n_inputs > 0u) {\n             sess.err(\"No input files allowed with --glue.\");\n@@ -357,7 +371,10 @@ fn main(vec[str] args) {\n \n     auto ifile = match.free.(0);\n     let str saved_out_filename = \"\";\n-    auto env = default_environment(sess, args.(0), ifile);\n+    auto env = default_environment(sess, binary, ifile);\n+    auto pretty = opt_present(match, \"pretty\");\n+    auto typed_pretty = opt_present(match, \"typed-pretty\");\n+    auto ls = opt_present(match, \"ls\");\n     if (pretty || typed_pretty) {\n         pretty_print_input(sess, env, ifile, typed_pretty);\n     } else if (ls) {\n@@ -368,7 +385,7 @@ fn main(vec[str] args) {\n                 let vec[str] parts = str::split(ifile, '.' as u8);\n                 vec::pop[str](parts);\n                 saved_out_filename = parts.(0);\n-                alt (output_type) {\n+                alt (sopts.output_type) {\n                     case (link::output_type_none) { parts += [\"pp\"]; }\n                     case (link::output_type_bitcode) { parts += [\"bc\"]; }\n                     case (link::output_type_assembly) { parts += [\"s\"]; }\n@@ -389,7 +406,7 @@ fn main(vec[str] args) {\n \n     // If the user wants an exe generated we need to invoke\n     // gcc to link the object file with some libs\n-    if (output_type == link::output_type_exe) {\n+    if (sopts.output_type == link::output_type_exe) {\n \n         //FIXME: Should we make the 'stage3's variable here?\n         let str glu = \"stage3/glue.o\";\n@@ -438,7 +455,7 @@ fn main(vec[str] args) {\n         }\n \n         // Remove the temporary object file if we aren't saving temps\n-        if (!save_temps) {\n+        if (!sopts.save_temps) {\n             run::run_program(\"rm\", [saved_out_filename + \".o\"]);\n         }\n     }"}]}