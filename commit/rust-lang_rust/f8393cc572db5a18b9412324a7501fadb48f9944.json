{"sha": "f8393cc572db5a18b9412324a7501fadb48f9944", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MzkzY2M1NzJkYjVhMThiOTQxMjMyNGE3NTAxZmFkYjQ4Zjk5NDQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-03-28T18:46:31Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-31T14:41:40Z"}, "message": "Add effect field to ast.ty_fn.\n\nStill not used, except by the pretty-printer.", "tree": {"sha": "9ed9d5ce650bc6685b26b7ecec0be14589fd3515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ed9d5ce650bc6685b26b7ecec0be14589fd3515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8393cc572db5a18b9412324a7501fadb48f9944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8393cc572db5a18b9412324a7501fadb48f9944", "html_url": "https://github.com/rust-lang/rust/commit/f8393cc572db5a18b9412324a7501fadb48f9944", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8393cc572db5a18b9412324a7501fadb48f9944/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7e6f396d888574e7184119818ac3300f10aacbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e6f396d888574e7184119818ac3300f10aacbf", "html_url": "https://github.com/rust-lang/rust/commit/e7e6f396d888574e7184119818ac3300f10aacbf"}], "stats": {"total": 66, "additions": 35, "deletions": 31}, "files": [{"sha": "450cc9331511d7302982edb686b538e7793f3400", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8393cc572db5a18b9412324a7501fadb48f9944/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8393cc572db5a18b9412324a7501fadb48f9944/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=f8393cc572db5a18b9412324a7501fadb48f9944", "patch": "@@ -305,8 +305,7 @@ tag lit_ {\n type mt = rec(@ty ty, mutability mut);\n type ty_field = rec(ident ident, mt mt);\n type ty_arg = rec(mode mode, @ty ty);\n-// TODO: effect\n-type ty_method = rec(proto proto, ident ident,\n+type ty_method = rec(effect effect, proto proto, ident ident,\n                      vec[ty_arg] inputs, @ty output);\n type ty = spanned[ty_];\n tag ty_ {\n@@ -324,7 +323,7 @@ tag ty_ {\n     ty_chan(@ty);\n     ty_tup(vec[mt]);\n     ty_rec(vec[ty_field]);\n-    ty_fn(proto, vec[ty_arg], @ty);        // TODO: effect\n+    ty_fn(effect, proto, vec[ty_arg], @ty);\n     ty_obj(vec[ty_method]);\n     ty_path(path, option.t[def]);\n     ty_type;"}, {"sha": "3ee73576965742631981ac25cc5a71e2c9d185da", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f8393cc572db5a18b9412324a7501fadb48f9944/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8393cc572db5a18b9412324a7501fadb48f9944/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=f8393cc572db5a18b9412324a7501fadb48f9944", "patch": "@@ -184,7 +184,7 @@ impure fn parse_str_lit_or_env_ident(parser p) -> ast.ident {\n }\n \n \n-impure fn parse_ty_fn(ast.proto proto, parser p,\n+impure fn parse_ty_fn(ast.effect eff, ast.proto proto, parser p,\n                       ast.span lo) -> ast.ty_ {\n     impure fn parse_fn_input_ty(parser p) -> rec(ast.mode mode, @ast.ty ty) {\n         auto mode;\n@@ -228,7 +228,7 @@ impure fn parse_ty_fn(ast.proto proto, parser p,\n         output = @spanned(lo, inputs.span, ast.ty_nil);\n     }\n \n-    ret ast.ty_fn(proto, inputs.node, output);\n+    ret ast.ty_fn(eff, proto, inputs.node, output);\n }\n \n impure fn parse_proto(parser p) -> ast.proto {\n@@ -245,15 +245,14 @@ impure fn parse_ty_obj(parser p, &mutable ast.span hi) -> ast.ty_ {\n     impure fn parse_method_sig(parser p) -> ast.ty_method {\n         auto flo = p.get_span();\n \n-        // FIXME: do something with this, currently it's dropped on the floor.\n         let ast.effect eff = parse_effect(p);\n         let ast.proto proto = parse_proto(p);\n         auto ident = parse_ident(p);\n-        auto f = parse_ty_fn(proto, p, flo);\n+        auto f = parse_ty_fn(eff, proto, p, flo);\n         expect(p, token.SEMI);\n         alt (f) {\n-            case (ast.ty_fn(?proto, ?inputs, ?output)) {\n-                ret rec(proto=proto, ident=ident,\n+            case (ast.ty_fn(?eff, ?proto, ?inputs, ?output)) {\n+                ret rec(effect=eff, proto=proto, ident=ident,\n                         inputs=inputs, output=output);\n             }\n         }\n@@ -342,9 +341,9 @@ impure fn parse_ty(parser p) -> @ast.ty {\n     auto hi = lo;\n     let ast.ty_ t;\n \n-    // FIXME: do something with these; currently they're\n-    // dropped on the floor.\n+    // FIXME: make sure these are only used when valid\n     let ast.effect eff = parse_effect(p);\n+    // FIXME: do something with this\n     let ast.layer lyr = parse_layer(p);\n \n     alt (p.peek()) {\n@@ -412,9 +411,9 @@ impure fn parse_ty(parser p) -> @ast.ty {\n         case (token.FN) {\n             auto flo = p.get_span();\n             p.bump();\n-            t = parse_ty_fn(ast.proto_fn, p, flo);\n+            t = parse_ty_fn(eff, ast.proto_fn, p, flo);\n             alt (t) {\n-                case (ast.ty_fn(_, _, ?out)) {\n+                case (ast.ty_fn(_, _, _, ?out)) {\n                     hi = out.span;\n                 }\n             }\n@@ -423,9 +422,9 @@ impure fn parse_ty(parser p) -> @ast.ty {\n         case (token.ITER) {\n             auto flo = p.get_span();\n             p.bump();\n-            t = parse_ty_fn(ast.proto_iter, p, flo);\n+            t = parse_ty_fn(eff, ast.proto_iter, p, flo);\n             alt (t) {\n-                case (ast.ty_fn(_, _, ?out)) {\n+                case (ast.ty_fn(_, _, _, ?out)) {\n                     hi = out.span;\n                 }\n             }"}, {"sha": "66176d790699eba0a8051fc3a15640a97d7d5ee9", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f8393cc572db5a18b9412324a7501fadb48f9944/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8393cc572db5a18b9412324a7501fadb48f9944/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=f8393cc572db5a18b9412324a7501fadb48f9944", "patch": "@@ -60,6 +60,7 @@ type ast_fold[ENV] =\n          vec[ast.ty_method] meths) -> @ty)        fold_ty_obj,\n \n      (fn(&ENV e, &span sp,\n+         ast.effect eff,\n          ast.proto proto,\n          vec[rec(ast.mode mode, @ty ty)] inputs,\n          @ty output) -> @ty)                      fold_ty_fn,\n@@ -388,13 +389,13 @@ fn fold_ty[ENV](&ENV env, ast_fold[ENV] fld, @ty t) -> @ty {\n         case (ast.ty_obj(?meths)) {\n             let vec[ast.ty_method] meths_ = vec();\n             for (ast.ty_method m in meths) {\n-                auto tfn = fold_ty_fn(env_, fld, t.span, m.proto,\n+                auto tfn = fold_ty_fn(env_, fld, t.span, m.effect, m.proto,\n                                       m.inputs, m.output);\n                 alt (tfn.node) {\n-                    case (ast.ty_fn(?p, ?ins, ?out)) {\n+                    case (ast.ty_fn(?eff, ?p, ?ins, ?out)) {\n                         _vec.push[ast.ty_method]\n-                            (meths_, rec(proto=p, inputs=ins, output=out\n-                                         with m));\n+                            (meths_, rec(effect=eff, proto=p, inputs=ins,\n+                                         output=out with m));\n                     }\n                 }\n             }\n@@ -406,8 +407,8 @@ fn fold_ty[ENV](&ENV env, ast_fold[ENV] fld, @ty t) -> @ty {\n             ret fld.fold_ty_path(env_, t.span, pth_, ref_opt);\n         }\n \n-        case (ast.ty_fn(?proto, ?inputs, ?output)) {\n-            ret fold_ty_fn(env_, fld, t.span, proto, inputs, output);\n+        case (ast.ty_fn(?eff, ?proto, ?inputs, ?output)) {\n+            ret fold_ty_fn(env_, fld, t.span, eff, proto, inputs, output);\n         }\n \n         case (ast.ty_chan(?ty)) {\n@@ -423,7 +424,7 @@ fn fold_ty[ENV](&ENV env, ast_fold[ENV] fld, @ty t) -> @ty {\n }\n \n fn fold_ty_fn[ENV](&ENV env, ast_fold[ENV] fld, &span sp,\n-                   ast.proto proto,\n+                   ast.effect eff, ast.proto proto,\n                    vec[rec(ast.mode mode, @ty ty)] inputs,\n                    @ty output) -> @ty {\n     auto output_ = fold_ty(env, fld, output);\n@@ -433,7 +434,7 @@ fn fold_ty_fn[ENV](&ENV env, ast_fold[ENV] fld, &span sp,\n         auto input_ = rec(ty=ty_ with input);\n         inputs_ += vec(input_);\n     }\n-    ret fld.fold_ty_fn(env, sp, proto, inputs_, output_);\n+    ret fld.fold_ty_fn(env, sp, eff, proto, inputs_, output_);\n }\n \n fn fold_decl[ENV](&ENV env, ast_fold[ENV] fld, @decl d) -> @decl {\n@@ -1131,10 +1132,10 @@ fn identity_fold_ty_obj[ENV](&ENV env, &span sp,\n }\n \n fn identity_fold_ty_fn[ENV](&ENV env, &span sp,\n-                            ast.proto proto,\n+                            ast.effect eff, ast.proto proto,\n                             vec[rec(ast.mode mode, @ty ty)] inputs,\n                             @ty output) -> @ty {\n-    ret @respan(sp, ast.ty_fn(proto, inputs, output));\n+    ret @respan(sp, ast.ty_fn(eff, proto, inputs, output));\n }\n \n fn identity_fold_ty_path[ENV](&ENV env, &span sp, ast.path p,\n@@ -1569,7 +1570,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_ty_tup     = bind identity_fold_ty_tup[ENV](_,_,_),\n          fold_ty_rec     = bind identity_fold_ty_rec[ENV](_,_,_),\n          fold_ty_obj     = bind identity_fold_ty_obj[ENV](_,_,_),\n-         fold_ty_fn      = bind identity_fold_ty_fn[ENV](_,_,_,_,_),\n+         fold_ty_fn      = bind identity_fold_ty_fn[ENV](_,_,_,_,_,_),\n          fold_ty_path    = bind identity_fold_ty_path[ENV](_,_,_,_),\n          fold_ty_chan    = bind identity_fold_ty_chan[ENV](_,_,_),\n          fold_ty_port    = bind identity_fold_ty_port[ENV](_,_,_),"}, {"sha": "ff13ad930130149df54cc95e3c72eb3a0538a712", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8393cc572db5a18b9412324a7501fadb48f9944/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8393cc572db5a18b9412324a7501fadb48f9944/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=f8393cc572db5a18b9412324a7501fadb48f9944", "patch": "@@ -337,7 +337,7 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty.t {\n             sty = ty.ty_rec(flds);\n         }\n \n-        case (ast.ty_fn(?proto, ?inputs, ?output)) {\n+        case (ast.ty_fn(_, ?proto, ?inputs, ?output)) {\n             auto f = bind ast_arg_to_arg(getter, _);\n             auto i = _vec.map[ast.ty_arg, arg](f, inputs);\n             sty = ty.ty_fn(proto, i, ast_ty_to_ty(getter, output));"}, {"sha": "e7e2746cf280d6a6ef47b3677d341e2f0534cf82", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8393cc572db5a18b9412324a7501fadb48f9944/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8393cc572db5a18b9412324a7501fadb48f9944/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=f8393cc572db5a18b9412324a7501fadb48f9944", "patch": "@@ -127,16 +127,16 @@ impure fn print_type(ps s, &@ast.ty ty) {\n             bopen(s);\n             for (ast.ty_method m in methods) {\n                 hbox(s);\n-                print_ty_fn(s, m.proto, option.some[str](m.ident),\n+                print_ty_fn(s, m.effect, m.proto, option.some[str](m.ident),\n                             m.inputs, m.output);\n                 wrd(s.s, \";\");\n                 end(s.s);\n                 line(s.s);\n             }\n             bclose_c(s, ty.span);\n         }\n-        case (ast.ty_fn(?proto,?inputs,?output)) {\n-            print_ty_fn(s, proto, option.none[str], inputs, output);\n+        case (ast.ty_fn(?eff, ?proto,?inputs,?output)) {\n+            print_ty_fn(s, eff, proto, option.none[str], inputs, output);\n         }\n         case (ast.ty_path(?path,_)) {\n             print_path(s, path);\n@@ -843,8 +843,13 @@ impure fn print_string(ps s, str st) {\n     wrd(s.s, \"\\\"\"); wrd(s.s, escape_str(st, '\"')); wrd(s.s, \"\\\"\");\n }\n \n-impure fn print_ty_fn(ps s, ast.proto proto, option.t[str] id,\n+impure fn print_ty_fn(ps s, ast.effect eff, ast.proto proto, option.t[str] id,\n                       vec[ast.ty_arg] inputs, @ast.ty output) {\n+    alt (eff) {\n+        case (ast.eff_impure) {wrd1(s, \"impure\");}\n+        case (ast.eff_unsafe) {wrd1(s, \"unsafe\");}\n+        case (_) {}\n+    }\n     if (proto == ast.proto_fn) {wrd(s.s, \"fn\");}\n     else {wrd(s.s, \"iter\");}\n     alt (id) {"}]}