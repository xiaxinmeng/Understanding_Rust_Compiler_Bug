{"sha": "d3322e277311033bd6dd646b1ad7f2604db0c946", "node_id": "C_kwDOAAsO6NoAKGQzMzIyZTI3NzMxMTAzM2JkNmRkNjQ2YjFhZDdmMjYwNGRiMGM5NDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-23T01:05:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-23T01:05:56Z"}, "message": "Auto merge of #106981 - joboet:std_remove_box_syntax, r=thomcc\n\nDo not use box syntax in `std`\n\nSee #94970 and #49733. About half of the `box` instances in `std` do not even need to allocate, the other half can simply be replaced with `Box::new`.\n\n`@rustbot` label +T-libs\nr? rust-lang/libs", "tree": {"sha": "b4c8ebe7210f7ef44b419d2c80ad9b2358c76957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4c8ebe7210f7ef44b419d2c80ad9b2358c76957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3322e277311033bd6dd646b1ad7f2604db0c946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3322e277311033bd6dd646b1ad7f2604db0c946", "html_url": "https://github.com/rust-lang/rust/commit/d3322e277311033bd6dd646b1ad7f2604db0c946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3322e277311033bd6dd646b1ad7f2604db0c946/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5fa99eed20a46a88c0c85eed6552a94b6656634", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5fa99eed20a46a88c0c85eed6552a94b6656634", "html_url": "https://github.com/rust-lang/rust/commit/a5fa99eed20a46a88c0c85eed6552a94b6656634"}, {"sha": "7f2cf191917e4e562ee49ab51a324714bbb36412", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2cf191917e4e562ee49ab51a324714bbb36412", "html_url": "https://github.com/rust-lang/rust/commit/7f2cf191917e4e562ee49ab51a324714bbb36412"}], "stats": {"total": 94, "additions": 35, "deletions": 59}, "files": [{"sha": "99cc01863104850f21f1aba37334021cc8cba5f6", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=d3322e277311033bd6dd646b1ad7f2604db0c946", "patch": "@@ -238,7 +238,6 @@\n #![feature(allocator_internals)]\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n-#![feature(box_syntax)]\n #![feature(c_unwind)]\n #![feature(cfg_target_thread_local)]\n #![feature(concat_idents)]"}, {"sha": "2507f70695173396f81d8356b97ad1e24ec8f1f2", "filename": "library/std/src/sys/hermit/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread.rs?ref=d3322e277311033bd6dd646b1ad7f2604db0c946", "patch": "@@ -27,10 +27,10 @@ impl Thread {\n         p: Box<dyn FnOnce()>,\n         core_id: isize,\n     ) -> io::Result<Thread> {\n-        let p = Box::into_raw(box p);\n+        let p = Box::into_raw(Box::new(p));\n         let tid = abi::spawn2(\n             thread_start,\n-            p as usize,\n+            p.expose_addr(),\n             abi::Priority::into(abi::NORMAL_PRIO),\n             stack,\n             core_id,"}, {"sha": "613266b9530a800d47560ebb3d5f018b17732387", "filename": "library/std/src/sys/hermit/thread_local_dtor.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fthread_local_dtor.rs?ref=d3322e277311033bd6dd646b1ad7f2604db0c946", "patch": "@@ -5,32 +5,23 @@\n // The this solution works like the implementation of macOS and\n // doesn't additional OS support\n \n-use crate::cell::Cell;\n-use crate::ptr;\n+use crate::mem;\n \n #[thread_local]\n-static DTORS: Cell<*mut List> = Cell::new(ptr::null_mut());\n-\n-type List = Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))>;\n+static mut DTORS: Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))> = Vec::new();\n \n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n-    if DTORS.get().is_null() {\n-        let v: Box<List> = box Vec::new();\n-        DTORS.set(Box::into_raw(v));\n-    }\n-\n-    let list: &mut List = &mut *DTORS.get();\n+    let list = &mut DTORS;\n     list.push((t, dtor));\n }\n \n // every thread call this function to run through all possible destructors\n pub unsafe fn run_dtors() {\n-    let mut ptr = DTORS.replace(ptr::null_mut());\n-    while !ptr.is_null() {\n-        let list = Box::from_raw(ptr);\n-        for (ptr, dtor) in list.into_iter() {\n+    let mut list = mem::take(&mut DTORS);\n+    while !list.is_empty() {\n+        for (ptr, dtor) in list {\n             dtor(ptr);\n         }\n-        ptr = DTORS.replace(ptr::null_mut());\n+        list = mem::take(&mut DTORS);\n     }\n }"}, {"sha": "bad14bb37f720e50707898944ca5e88212e358c9", "filename": "library/std/src/sys/solid/thread_local_dtor.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fthread_local_dtor.rs?ref=d3322e277311033bd6dd646b1ad7f2604db0c946", "patch": "@@ -5,43 +5,35 @@\n \n use super::{abi, itron::task};\n use crate::cell::Cell;\n-use crate::ptr;\n+use crate::mem;\n \n #[thread_local]\n-static DTORS: Cell<*mut List> = Cell::new(ptr::null_mut());\n+static REGISTERED: Cell<bool> = Cell::new(false);\n \n-type List = Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))>;\n+#[thread_local]\n+static mut DTORS: Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))> = Vec::new();\n \n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n-    if DTORS.get().is_null() {\n+    if !REGISTERED.get() {\n         let tid = task::current_task_id_aborting();\n-        let v: Box<List> = box Vec::new();\n-        DTORS.set(Box::into_raw(v));\n-\n         // Register `tls_dtor` to make sure the TLS destructors are called\n         // for tasks created by other means than `std::thread`\n         unsafe { abi::SOLID_TLS_AddDestructor(tid as i32, tls_dtor) };\n+        REGISTERED.set(true);\n     }\n \n-    let list: &mut List = unsafe { &mut *DTORS.get() };\n+    let list = unsafe { &mut DTORS };\n     list.push((t, dtor));\n }\n \n pub unsafe fn run_dtors() {\n-    let ptr = DTORS.get();\n-    if !ptr.is_null() {\n-        // Swap the destructor list, call all registered destructors,\n-        // and repeat this until the list becomes permanently empty.\n-        while let Some(list) = Some(crate::mem::replace(unsafe { &mut *ptr }, Vec::new()))\n-            .filter(|list| !list.is_empty())\n-        {\n-            for (ptr, dtor) in list.into_iter() {\n-                unsafe { dtor(ptr) };\n-            }\n+    let mut list = mem::take(unsafe { &mut DTORS });\n+    while !list.is_empty() {\n+        for (ptr, dtor) in list {\n+            unsafe { dtor(ptr) };\n         }\n \n-        // Drop the destructor list\n-        unsafe { Box::from_raw(DTORS.replace(ptr::null_mut())) };\n+        list = mem::take(unsafe { &mut DTORS });\n     }\n }\n "}, {"sha": "cc0e5929569729ef17de83334958ca55eddad79f", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=d3322e277311033bd6dd646b1ad7f2604db0c946", "patch": "@@ -49,7 +49,7 @@ unsafe impl Sync for Thread {}\n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n     pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n-        let p = Box::into_raw(box p);\n+        let p = Box::into_raw(Box::new(p));\n         let mut native: libc::pthread_t = mem::zeroed();\n         let mut attr: libc::pthread_attr_t = mem::zeroed();\n         assert_eq!(libc::pthread_attr_init(&mut attr), 0);"}, {"sha": "c31fb3a48dabb474bda286a79d59a9fcfe9cc119", "filename": "library/std/src/sys/unix/thread_local_dtor.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs?ref=d3322e277311033bd6dd646b1ad7f2604db0c946", "patch": "@@ -57,39 +57,34 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n #[cfg(target_os = \"macos\")]\n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n     use crate::cell::Cell;\n+    use crate::mem;\n     use crate::ptr;\n \n     #[thread_local]\n     static REGISTERED: Cell<bool> = Cell::new(false);\n+\n+    #[thread_local]\n+    static mut DTORS: Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))> = Vec::new();\n+\n     if !REGISTERED.get() {\n         _tlv_atexit(run_dtors, ptr::null_mut());\n         REGISTERED.set(true);\n     }\n \n-    type List = Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))>;\n-\n-    #[thread_local]\n-    static DTORS: Cell<*mut List> = Cell::new(ptr::null_mut());\n-    if DTORS.get().is_null() {\n-        let v: Box<List> = box Vec::new();\n-        DTORS.set(Box::into_raw(v));\n-    }\n-\n     extern \"C\" {\n         fn _tlv_atexit(dtor: unsafe extern \"C\" fn(*mut u8), arg: *mut u8);\n     }\n \n-    let list: &mut List = &mut *DTORS.get();\n+    let list = &mut DTORS;\n     list.push((t, dtor));\n \n     unsafe extern \"C\" fn run_dtors(_: *mut u8) {\n-        let mut ptr = DTORS.replace(ptr::null_mut());\n-        while !ptr.is_null() {\n-            let list = Box::from_raw(ptr);\n-            for (ptr, dtor) in list.into_iter() {\n+        let mut list = mem::take(&mut DTORS);\n+        while !list.is_empty() {\n+            for (ptr, dtor) in list {\n                 dtor(ptr);\n             }\n-            ptr = DTORS.replace(ptr::null_mut());\n+            list = mem::take(&mut DTORS);\n         }\n     }\n }"}, {"sha": "ed58c47e0907bb5aab534b92f2e6a6d4e6ca4733", "filename": "library/std/src/sys/windows/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs?ref=d3322e277311033bd6dd646b1ad7f2604db0c946", "patch": "@@ -22,7 +22,7 @@ pub struct Thread {\n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n     pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n-        let p = Box::into_raw(box p);\n+        let p = Box::into_raw(Box::new(p));\n \n         // FIXME On UNIX, we guard against stack sizes that are too small but\n         // that's because pthreads enforces that stacks are at least"}, {"sha": "844946eda031f792603f0e363f597a4006047948", "filename": "library/std/src/sys_common/thread_local_dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_dtor.rs?ref=d3322e277311033bd6dd646b1ad7f2604db0c946", "patch": "@@ -30,7 +30,7 @@ pub unsafe fn register_dtor_fallback(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut\n     static DTORS: StaticKey = StaticKey::new(Some(run_dtors));\n     type List = Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))>;\n     if DTORS.get().is_null() {\n-        let v: Box<List> = box Vec::new();\n+        let v: Box<List> = Box::new(Vec::new());\n         DTORS.set(Box::into_raw(v) as *mut u8);\n     }\n     let list: &mut List = &mut *(DTORS.get() as *mut List);"}, {"sha": "cf7c2e05a2e9df94c60d536b97ba27e5fa48d7f9", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3322e277311033bd6dd646b1ad7f2604db0c946/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=d3322e277311033bd6dd646b1ad7f2604db0c946", "patch": "@@ -1110,8 +1110,7 @@ pub mod os {\n             let ptr = if ptr.is_null() {\n                 // If the lookup returned null, we haven't initialized our own\n                 // local copy, so do that now.\n-                let ptr: Box<Value<T>> = box Value { inner: LazyKeyInner::new(), key: self };\n-                let ptr = Box::into_raw(ptr);\n+                let ptr = Box::into_raw(Box::new(Value { inner: LazyKeyInner::new(), key: self }));\n                 // SAFETY: At this point we are sure there is no value inside\n                 // ptr so setting it will not affect anyone else.\n                 unsafe {"}]}