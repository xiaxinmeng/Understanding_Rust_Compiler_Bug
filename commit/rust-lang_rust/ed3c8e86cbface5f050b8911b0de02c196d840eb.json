{"sha": "ed3c8e86cbface5f050b8911b0de02c196d840eb", "node_id": "C_kwDOAAsO6NoAKGVkM2M4ZTg2Y2JmYWNlNWYwNTBiODkxMWIwZGUwMmMxOTZkODQwZWI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-09T17:44:55Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-09T17:44:55Z"}, "message": "Hash during lowering.", "tree": {"sha": "38b34ffb2e5ef94189f54e65eea3849a60d36b7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38b34ffb2e5ef94189f54e65eea3849a60d36b7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed3c8e86cbface5f050b8911b0de02c196d840eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3c8e86cbface5f050b8911b0de02c196d840eb", "html_url": "https://github.com/rust-lang/rust/commit/ed3c8e86cbface5f050b8911b0de02c196d840eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed3c8e86cbface5f050b8911b0de02c196d840eb/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "457de0848777473ddafda998ab9384cbfbf4b87a", "url": "https://api.github.com/repos/rust-lang/rust/commits/457de0848777473ddafda998ab9384cbfbf4b87a", "html_url": "https://github.com/rust-lang/rust/commit/457de0848777473ddafda998ab9384cbfbf4b87a"}], "stats": {"total": 63, "additions": 35, "deletions": 28}, "files": [{"sha": "f95ad9f3a9bd6e1f47c611db36648754d091ee3e", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ed3c8e86cbface5f050b8911b0de02c196d840eb/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3c8e86cbface5f050b8911b0de02c196d840eb/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ed3c8e86cbface5f050b8911b0de02c196d840eb", "patch": "@@ -41,7 +41,9 @@ use rustc_ast::visit;\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::captures::Captures;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n@@ -467,7 +469,30 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n         }\n \n-        hir::OwnerInfo { node, attrs, bodies, trait_map }\n+        let (hash, node_hash) = self.hash_body(node, &bodies);\n+\n+        hir::OwnerInfo { hash, node_hash, node, attrs, bodies, trait_map }\n+    }\n+\n+    /// Hash the HIR node twice, one deep and one shallow hash.  This allows to differentiate\n+    /// queries which depend on the full HIR tree and those which only depend on the item signature.\n+    fn hash_body(\n+        &mut self,\n+        node: hir::OwnerNode<'hir>,\n+        bodies: &IndexVec<hir::ItemLocalId, Option<&'hir hir::Body<'hir>>>,\n+    ) -> (Fingerprint, Fingerprint) {\n+        let mut hcx = self.resolver.create_stable_hashing_context();\n+        let mut stable_hasher = StableHasher::new();\n+        hcx.with_hir_bodies(true, node.def_id(), bodies, |hcx| {\n+            node.hash_stable(hcx, &mut stable_hasher)\n+        });\n+        let full_hash = stable_hasher.finish();\n+        let mut stable_hasher = StableHasher::new();\n+        hcx.with_hir_bodies(false, node.def_id(), bodies, |hcx| {\n+            node.hash_stable(hcx, &mut stable_hasher)\n+        });\n+        let node_hash = stable_hasher.finish();\n+        (full_hash, node_hash)\n     }\n \n     /// This method allocates a new `HirId` for the given `NodeId` and stores it in"}, {"sha": "44652d0198fadc592de3b37b285b3636df3be417", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed3c8e86cbface5f050b8911b0de02c196d840eb/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3c8e86cbface5f050b8911b0de02c196d840eb/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=ed3c8e86cbface5f050b8911b0de02c196d840eb", "patch": "@@ -9,6 +9,7 @@ use rustc_ast::{Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, TraitObject\n pub use rustc_ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable_Generic;\n@@ -670,6 +671,10 @@ pub struct OwnerInfo<'hir> {\n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n     pub trait_map: FxHashMap<ItemLocalId, Box<[TraitCandidate]>>,\n+    /// Pre-computed hash of the full HIR.\n+    pub hash: Fingerprint,\n+    /// Pre-computed hash of the top node.\n+    pub node_hash: Fingerprint,\n }\n \n /// The top-level data structure that stores the entire contents of"}, {"sha": "2499ef8bc60d1e5a0a50b4ad5c7ca56ccf8c34e5", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ed3c8e86cbface5f050b8911b0de02c196d840eb/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3c8e86cbface5f050b8911b0de02c196d840eb/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=ed3c8e86cbface5f050b8911b0de02c196d840eb", "patch": "@@ -1,17 +1,14 @@\n use crate::arena::Arena;\n use crate::hir::map::Map;\n use crate::hir::{IndexedHir, OwnerNodes, ParentedNode};\n-use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::def_id::CRATE_DEF_ID;\n use rustc_hir::definitions;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_query_system::ich::StableHashingContext;\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{Span, DUMMY_SP};\n@@ -37,8 +34,6 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     current_dep_node_owner: LocalDefId,\n \n     definitions: &'a definitions::Definitions,\n-\n-    hcx: StableHashingContext<'a>,\n }\n \n fn insert_vec_map<K: Idx, V: Clone>(map: &mut IndexVec<K, Option<V>>, k: K, v: V) {\n@@ -51,27 +46,12 @@ fn insert_vec_map<K: Idx, V: Clone>(map: &mut IndexVec<K, Option<V>>, k: K, v: V\n     map[k] = Some(v);\n }\n \n-fn hash_body<'s, 'hir: 's>(\n-    hcx: &mut StableHashingContext<'s>,\n-    item_like: impl for<'a> HashStable<StableHashingContext<'a>>,\n-    hash_bodies: bool,\n-    owner: LocalDefId,\n-    bodies: &'hir IndexVec<ItemLocalId, Option<&'hir Body<'hir>>>,\n-) -> Fingerprint {\n-    let mut stable_hasher = StableHasher::new();\n-    hcx.with_hir_bodies(hash_bodies, owner, bodies, |hcx| {\n-        item_like.hash_stable(hcx, &mut stable_hasher)\n-    });\n-    stable_hasher.finish()\n-}\n-\n impl<'a, 'hir: 'a> NodeCollector<'a, 'hir> {\n     pub(super) fn root(\n         sess: &'a Session,\n         arena: &'hir Arena<'hir>,\n         krate: &'hir Crate<'hir>,\n         definitions: &'a definitions::Definitions,\n-        hcx: StableHashingContext<'a>,\n     ) -> NodeCollector<'a, 'hir> {\n         let mut collector = NodeCollector {\n             arena,\n@@ -80,7 +60,6 @@ impl<'a, 'hir: 'a> NodeCollector<'a, 'hir> {\n             parent_node: hir::CRATE_HIR_ID,\n             current_dep_node_owner: CRATE_DEF_ID,\n             definitions,\n-            hcx,\n             map: IndexVec::from_fn_n(|_| None, definitions.def_index_count()),\n             parenting: FxHashMap::default(),\n         };\n@@ -97,10 +76,10 @@ impl<'a, 'hir: 'a> NodeCollector<'a, 'hir> {\n         let mut nodes = IndexVec::new();\n         nodes.push(Some(ParentedNode { parent: ItemLocalId::new(0), node: node.into() }));\n \n-        let bodies = &self.krate.owners[owner].as_ref().unwrap().bodies;\n-\n-        let hash = hash_body(&mut self.hcx, node, true, owner, bodies);\n-        let node_hash = hash_body(&mut self.hcx, node, false, owner, bodies);\n+        let info = self.krate.owners[owner].as_ref().unwrap();\n+        let hash = info.hash;\n+        let node_hash = info.node_hash;\n+        let bodies = &info.bodies;\n \n         debug_assert!(self.map[owner].is_none());\n         self.map[owner] = Some(self.arena.alloc(OwnerNodes { hash, node_hash, nodes, bodies }));"}, {"sha": "89f4ec4d9f61f30cda867c1377215013f9c175c7", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed3c8e86cbface5f050b8911b0de02c196d840eb/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3c8e86cbface5f050b8911b0de02c196d840eb/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=ed3c8e86cbface5f050b8911b0de02c196d840eb", "patch": "@@ -1071,13 +1071,11 @@ pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> &'tcx IndexedHir<'tc\n     let _prof_timer = tcx.sess.prof.generic_activity(\"build_hir_map\");\n \n     // We can access untracked state since we are an eval_always query.\n-    let hcx = tcx.create_stable_hashing_context();\n     let mut collector = NodeCollector::root(\n         tcx.sess,\n         &**tcx.arena,\n         tcx.untracked_crate,\n         &tcx.untracked_resolutions.definitions,\n-        hcx,\n     );\n     let top_mod = tcx.untracked_crate.module();\n     collector.visit_mod(top_mod, top_mod.inner, CRATE_HIR_ID);"}]}