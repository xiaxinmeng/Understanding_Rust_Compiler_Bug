{"sha": "d5f1f5bc2596f9f6c2726b04189275ac6adc7133", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZjFmNWJjMjU5NmY5ZjZjMjcyNmIwNDE4OTI3NWFjNmFkYzcxMzM=", "commit": {"author": {"name": "djzin", "email": "noreply@github.com", "date": "2016-12-24T23:10:00Z"}, "committer": {"name": "djzin", "email": "noreply@github.com", "date": "2017-01-14T16:51:51Z"}, "message": "use rangeargument for range_mut", "tree": {"sha": "c6487016b17c6a9597841aaae3b876bcc44f53a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6487016b17c6a9597841aaae3b876bcc44f53a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5f1f5bc2596f9f6c2726b04189275ac6adc7133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f1f5bc2596f9f6c2726b04189275ac6adc7133", "html_url": "https://github.com/rust-lang/rust/commit/d5f1f5bc2596f9f6c2726b04189275ac6adc7133", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5f1f5bc2596f9f6c2726b04189275ac6adc7133/comments", "author": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f2f00aaad6c3aff1cf6b8ed015544c709a9fbfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f2f00aaad6c3aff1cf6b8ed015544c709a9fbfb", "html_url": "https://github.com/rust-lang/rust/commit/9f2f00aaad6c3aff1cf6b8ed015544c709a9fbfb"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "87465190a690cf31d531c4a8a4c49803a272e50a", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d5f1f5bc2596f9f6c2726b04189275ac6adc7133/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5f1f5bc2596f9f6c2726b04189275ac6adc7133/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=d5f1f5bc2596f9f6c2726b04189275ac6adc7133", "patch": "@@ -17,7 +17,7 @@ use core::ops::Index;\n use core::{fmt, intrinsics, mem, ptr};\n \n use borrow::Borrow;\n-use Bound::{self, Excluded, Included, Unbounded};\n+use Bound::{Excluded, Included, Unbounded};\n use range::RangeArgument;\n \n use super::node::{self, Handle, NodeRef, marker};\n@@ -763,7 +763,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// let mut map: BTreeMap<&str, i32> = [\"Alice\", \"Bob\", \"Carol\", \"Cheryl\"].iter()\n     ///                                                                       .map(|&s| (s, 0))\n     ///                                                                       .collect();\n-    /// for (_, balance) in map.range_mut(Included(\"B\"), Excluded(\"Cheryl\")) {\n+    /// for (_, balance) in map.range_mut((Included(\"B\"), Excluded(\"Cheryl\"))) {\n     ///     *balance += 100;\n     /// }\n     /// for (name, balance) in &map {\n@@ -773,12 +773,11 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     #[unstable(feature = \"btree_range\",\n                reason = \"matches collection reform specification, waiting for dust to settle\",\n                issue = \"27787\")]\n-    pub fn range_mut<Min: ?Sized + Ord, Max: ?Sized + Ord>(&mut self,\n-                                                           min: Bound<&Min>,\n-                                                           max: Bound<&Max>)\n-                                                           -> RangeMut<K, V>\n-        where K: Borrow<Min> + Borrow<Max>\n+    pub fn range_mut<T: ?Sized, R>(&mut self, range: R) -> RangeMut<K, V>\n+        where T: Ord, K: Borrow<T>, R: RangeArgument<T>\n     {\n+        let min = range.start();\n+        let max = range.end();\n         let root1 = self.root.as_mut();\n         let root2 = unsafe { ptr::read(&root1) };\n "}]}