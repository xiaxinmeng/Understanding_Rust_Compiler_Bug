{"sha": "f9f3ba5920ddb2b8bae5047eea556081e0da159d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZjNiYTU5MjBkZGIyYjhiYWU1MDQ3ZWVhNTU2MDgxZTBkYTE1OWQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-16T03:48:15Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-29T22:27:12Z"}, "message": "rustc: move infer::coercion to rustc_typeck.", "tree": {"sha": "1ca9765eb7499b1dbd4072d92b3164e7c4f42fb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ca9765eb7499b1dbd4072d92b3164e7c4f42fb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9f3ba5920ddb2b8bae5047eea556081e0da159d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f3ba5920ddb2b8bae5047eea556081e0da159d", "html_url": "https://github.com/rust-lang/rust/commit/f9f3ba5920ddb2b8bae5047eea556081e0da159d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9f3ba5920ddb2b8bae5047eea556081e0da159d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "265a23320dbeaeca45b889cfea684d71dec1b8e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/265a23320dbeaeca45b889cfea684d71dec1b8e6", "html_url": "https://github.com/rust-lang/rust/commit/265a23320dbeaeca45b889cfea684d71dec1b8e6"}], "stats": {"total": 103, "additions": 43, "deletions": 60}, "files": [{"sha": "1665966a5e5f519099389f6de3a654cd1768d73e", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 13, "deletions": 30, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3ba5920ddb2b8bae5047eea556081e0da159d/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3ba5920ddb2b8bae5047eea556081e0da159d/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=f9f3ba5920ddb2b8bae5047eea556081e0da159d", "patch": "@@ -33,12 +33,10 @@ use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap;\n use syntax::codemap::Span;\n-use util::common::indent;\n use util::nodemap::FnvHashMap;\n use util::ppaux::{ty_to_string};\n use util::ppaux::{Repr, UserString};\n \n-use self::coercion::Coerce;\n use self::combine::{Combine, Combineable, CombineFields};\n use self::region_inference::{RegionVarBindings, RegionSnapshot};\n use self::equate::Equate;\n@@ -47,7 +45,6 @@ use self::lub::Lub;\n use self::unify::{UnificationTable, InferCtxtMethodsForSimplyUnifiableTypes};\n use self::error_reporting::ErrorReporting;\n \n-pub mod coercion;\n pub mod combine;\n pub mod doc;\n pub mod equate;\n@@ -68,7 +65,6 @@ pub type Bound<T> = Option<T>;\n pub type cres<'tcx, T> = Result<T,ty::type_err<'tcx>>; // \"combine result\"\n pub type ures<'tcx> = cres<'tcx, ()>; // \"unify result\"\n pub type fres<T> = Result<T, fixup_err>; // \"fixup result\"\n-pub type CoerceResult<'tcx> = cres<'tcx, Option<ty::AutoAdjustment<'tcx>>>;\n \n pub struct InferCtxt<'a, 'tcx: 'a> {\n     pub tcx: &'a ty::ctxt<'tcx>,\n@@ -409,24 +405,6 @@ fn expected_found<T>(a_is_expected: bool,\n     }\n }\n \n-pub fn mk_coercety<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,\n-                             a_is_expected: bool,\n-                             origin: TypeOrigin,\n-                             a: Ty<'tcx>,\n-                             b: Ty<'tcx>)\n-                             -> CoerceResult<'tcx> {\n-    debug!(\"mk_coercety({} -> {})\", a.repr(cx.tcx), b.repr(cx.tcx));\n-    indent(|| {\n-        cx.commit_if_ok(|| {\n-            let trace = TypeTrace {\n-                origin: origin,\n-                values: Types(expected_found(a_is_expected, a, b))\n-            };\n-            Coerce(cx.combine_fields(a_is_expected, trace)).tys(a, b)\n-        })\n-    })\n-}\n-\n trait then<'tcx> {\n     fn then<T, F>(&self, f: F) -> Result<T, ty::type_err<'tcx>> where\n         T: Clone,\n@@ -689,10 +667,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     {\n         debug!(\"sub_types({} <: {})\", a.repr(self.tcx), b.repr(self.tcx));\n         self.commit_if_ok(|| {\n-            let trace = TypeTrace {\n-                origin: origin,\n-                values: Types(expected_found(a_is_expected, a, b))\n-            };\n+            let trace = TypeTrace::types(origin, a_is_expected, a, b);\n             self.sub(a_is_expected, trace).tys(a, b).to_ures()\n         })\n     }\n@@ -705,10 +680,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     -> ures<'tcx>\n     {\n         self.commit_if_ok(|| {\n-            let trace = TypeTrace {\n-                origin: origin,\n-                values: Types(expected_found(a_is_expected, a, b))\n-            };\n+            let trace = TypeTrace::types(origin, a_is_expected, a, b);\n             self.equate(a_is_expected, trace).tys(a, b).to_ures()\n         })\n     }\n@@ -1118,6 +1090,17 @@ impl<'tcx> TypeTrace<'tcx> {\n         self.origin.span()\n     }\n \n+    pub fn types(origin: TypeOrigin,\n+                 a_is_expected: bool,\n+                 a: Ty<'tcx>,\n+                 b: Ty<'tcx>)\n+                 -> TypeTrace<'tcx> {\n+        TypeTrace {\n+            origin: origin,\n+            values: Types(expected_found(a_is_expected, a, b))\n+        }\n+    }\n+\n     pub fn dummy(tcx: &ty::ctxt<'tcx>) -> TypeTrace<'tcx> {\n         TypeTrace {\n             origin: Misc(codemap::DUMMY_SP),"}, {"sha": "e375647bc2839fd6e4264be35b14066434899565", "filename": "src/librustc_typeck/check/coercion.rs", "status": "renamed", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3ba5920ddb2b8bae5047eea556081e0da159d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3ba5920ddb2b8bae5047eea556081e0da159d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=f9f3ba5920ddb2b8bae5047eea556081e0da159d", "patch": "@@ -60,14 +60,15 @@\n //! sort of a minor point so I've opted to leave it for later---after all\n //! we may want to adjust precisely when coercions occur.\n \n-use super::{CoerceResult, Coercion};\n-use super::combine::{CombineFields, Combine};\n-use super::sub::Sub;\n+use middle::infer::{cres, Coercion, InferCtxt, TypeOrigin, TypeTrace};\n+use middle::infer::combine::{CombineFields, Combine};\n+use middle::infer::sub::Sub;\n \n use middle::subst;\n use middle::ty::{AutoPtr, AutoDerefRef, AdjustDerefRef, AutoUnsize, AutoUnsafe};\n use middle::ty::{mt};\n use middle::ty::{self, Ty};\n+use util::common::indent;\n use util::ppaux;\n use util::ppaux::Repr;\n \n@@ -472,24 +473,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         }\n     }\n \n-    pub fn coerce_borrowed_fn(&self,\n-                              a: Ty<'tcx>,\n-                              b: Ty<'tcx>)\n-                              -> CoerceResult<'tcx> {\n-        debug!(\"coerce_borrowed_fn(a={}, b={})\",\n-               a.repr(self.tcx()),\n-               b.repr(self.tcx()));\n-\n-        match a.sty {\n-            ty::ty_bare_fn(Some(a_def_id), f) => {\n-                self.coerce_from_fn_item(a, a_def_id, f, b)\n-            }\n-            _ => {\n-                self.subtype(a, b)\n-            }\n-        }\n-    }\n-\n     fn coerce_from_fn_item(&self,\n                            a: Ty<'tcx>,\n                            fn_def_id_a: ast::DefId,\n@@ -551,6 +534,23 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n     }\n }\n \n+pub type CoerceResult<'tcx> = cres<'tcx, Option<ty::AutoAdjustment<'tcx>>>;\n+\n+pub fn mk_coercety<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,\n+                             a_is_expected: bool,\n+                             origin: TypeOrigin,\n+                             a: Ty<'tcx>,\n+                             b: Ty<'tcx>)\n+                             -> CoerceResult<'tcx> {\n+    debug!(\"mk_coercety({} -> {})\", a.repr(cx.tcx), b.repr(cx.tcx));\n+    indent(|| {\n+        cx.commit_if_ok(|| {\n+            let trace = TypeTrace::types(origin, a_is_expected, a, b);\n+            Coerce(cx.combine_fields(a_is_expected, trace)).tys(a, b)\n+        })\n+    })\n+}\n+\n fn can_coerce_mutbls(from_mutbl: ast::Mutability,\n                      to_mutbl: ast::Mutability)\n                      -> bool {", "previous_filename": "src/librustc/middle/infer/coercion.rs"}, {"sha": "799c7a355b786adc44589dcbb417b244a7dc928e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3ba5920ddb2b8bae5047eea556081e0da159d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3ba5920ddb2b8bae5047eea556081e0da159d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f9f3ba5920ddb2b8bae5047eea556081e0da159d", "patch": "@@ -132,6 +132,7 @@ pub mod vtable;\n pub mod writeback;\n pub mod regionmanip;\n pub mod regionck;\n+pub mod coercion;\n pub mod demand;\n pub mod method;\n mod upvar;\n@@ -1730,18 +1731,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                        sub: Ty<'tcx>,\n                        sup: Ty<'tcx>)\n                        -> Result<(), ty::type_err<'tcx>> {\n-        match infer::mk_coercety(self.infcx(),\n-                                 false,\n-                                 infer::ExprAssignable(expr.span),\n-                                 sub,\n-                                 sup) {\n-            Ok(None) => Ok(()),\n-            Err(ref e) => Err((*e)),\n-            Ok(Some(adjustment)) => {\n+        match try!(coercion::mk_coercety(self.infcx(),\n+                                         false,\n+                                         infer::ExprAssignable(expr.span),\n+                                         sub,\n+                                         sup)) {\n+            None => {}\n+            Some(adjustment) => {\n                 self.write_adjustment(expr.id, expr.span, adjustment);\n-                Ok(())\n             }\n         }\n+        Ok(())\n     }\n \n     pub fn mk_eqty(&self,"}]}