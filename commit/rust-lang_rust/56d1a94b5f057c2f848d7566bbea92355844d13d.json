{"sha": "56d1a94b5f057c2f848d7566bbea92355844d13d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZDFhOTRiNWYwNTdjMmY4NDhkNzU2NmJiZWE5MjM1NTg0NGQxM2Q=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-09-24T02:07:39Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-09-24T02:07:39Z"}, "message": "Merge pull request #357 from scyptnex/match-comma-retention\n\nfix for #355 and test cases", "tree": {"sha": "d14a2af0a3c10e99417743162e48c5bb59dd5a67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d14a2af0a3c10e99417743162e48c5bb59dd5a67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d1a94b5f057c2f848d7566bbea92355844d13d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d1a94b5f057c2f848d7566bbea92355844d13d", "html_url": "https://github.com/rust-lang/rust/commit/56d1a94b5f057c2f848d7566bbea92355844d13d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d1a94b5f057c2f848d7566bbea92355844d13d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e176dc97febb860a5947aea6d0625b8a123b3484", "url": "https://api.github.com/repos/rust-lang/rust/commits/e176dc97febb860a5947aea6d0625b8a123b3484", "html_url": "https://github.com/rust-lang/rust/commit/e176dc97febb860a5947aea6d0625b8a123b3484"}, {"sha": "f1dfab5a29bb86690ae56ce07c928104b59ae2d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1dfab5a29bb86690ae56ce07c928104b59ae2d0", "html_url": "https://github.com/rust-lang/rust/commit/f1dfab5a29bb86690ae56ce07c928104b59ae2d0"}], "stats": {"total": 114, "additions": 113, "deletions": 1}, "files": [{"sha": "e38476df6fd5ebcbdd39a19451a2f3cc91a2ddd1", "filename": "src/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56d1a94b5f057c2f848d7566bbea92355844d13d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d1a94b5f057c2f848d7566bbea92355844d13d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=56d1a94b5f057c2f848d7566bbea92355844d13d", "patch": "@@ -151,7 +151,11 @@ impl Rewrite for ast::Expr {\n                 rewrite_chain(self, context, width, offset)\n             }\n             ast::Expr_::ExprMac(ref mac) => {\n-                rewrite_macro(mac, context, width, offset)\n+                // Failure to rewrite a marco should not imply failure to rewrite the Expr\n+                rewrite_macro(mac, context, width, offset).or(wrap_str(context.snippet(self.span),\n+                                                                       context.config.max_width,\n+                                                                       width,\n+                                                                       offset))\n             }\n             // We do not format these expressions yet, but they should still\n             // satisfy our width restrictions."}, {"sha": "61acdafd7b047ceb9d20cff3140a9eb409233e48", "filename": "tests/source/expr.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/56d1a94b5f057c2f848d7566bbea92355844d13d/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d1a94b5f057c2f848d7566bbea92355844d13d/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=56d1a94b5f057c2f848d7566bbea92355844d13d", "patch": "@@ -198,6 +198,57 @@ fn issue339() {\n     }\n }\n \n+fn issue355() {\n+    match mac {\n+        a => println!(\"a\", b),\n+        b => vec!(1, 2),\n+        c => vec!(3; 4),\n+        d => {\n+            println!(\"a\", b)\n+        }\n+        e => {\n+            vec!(1, 2)\n+        }\n+        f => {\n+            vec!(3; 4)\n+        }\n+        h => println!(\"a\", b), // h comment\n+        i => vec!(1, 2), // i comment\n+        j => vec!(3; 4), // j comment\n+        // k comment\n+        k => println!(\"a\", b),\n+        // l comment\n+        l => vec!(1, 2),\n+        // m comment\n+        m => vec!(3; 4),\n+        // Rewrite splits macro\n+        nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn => println!(\"a\", b),\n+        // Rewrite splits macro\n+        oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo => vec!(1, 2),\n+        // Macro support fails to recognise this macro as splitable\n+        // We push the whole expr to a new line, TODO split this macro as well\n+        pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp => vec!(3; 4),\n+        // q, r and s: Rewrite splits match arm\n+        qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq => println!(\"a\", b),\n+        rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr => vec!(1, 2),\n+        ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss => vec!(3; 4),\n+        // Funky bracketing styles\n+        t =>      println!{\"a\", b},\n+        u => vec!{1, 2},\n+        v => vec!{3; 4},\n+        w => println![\"a\", b],\n+        x =>      vec![1, 2],\n+        y =>vec![3; 4],\n+        // Brackets with comments\n+        tc => println!{\"a\", b}, // comment\n+        uc => vec!{1, 2}, // comment\n+        vc =>vec!{3; 4}, // comment\n+        wc =>println![\"a\", b], // comment\n+        xc => vec![1,2], // comment\n+        yc =>        vec![3; 4], // comment\n+    }\n+}\n+\n fn arrays() {\n     let x = [0,\n          1,"}, {"sha": "ec00c8a0285a35a9879b1b0955eae3c586745a9b", "filename": "tests/target/expr.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/56d1a94b5f057c2f848d7566bbea92355844d13d/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d1a94b5f057c2f848d7566bbea92355844d13d/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=56d1a94b5f057c2f848d7566bbea92355844d13d", "patch": "@@ -225,6 +225,63 @@ fn issue339() {\n     }\n }\n \n+fn issue355() {\n+    match mac {\n+        a => println!(\"a\", b),\n+        b => vec!(1, 2),\n+        c => vec!(3; 4),\n+        d => {\n+            println!(\"a\", b)\n+        }\n+        e => {\n+            vec!(1, 2)\n+        }\n+        f => {\n+            vec!(3; 4)\n+        }\n+        h => println!(\"a\", b), // h comment\n+        i => vec!(1, 2), // i comment\n+        j => vec!(3; 4), // j comment\n+        // k comment\n+        k => println!(\"a\", b),\n+        // l comment\n+        l => vec!(1, 2),\n+        // m comment\n+        m => vec!(3; 4),\n+        // Rewrite splits macro\n+        nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn => println!(\"a\",\n+                                                                                             b),\n+        // Rewrite splits macro\n+        oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo => vec!(1,\n+                                                                                               2),\n+        // Macro support fails to recognise this macro as splitable\n+        // We push the whole expr to a new line, TODO split this macro as well\n+        pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp =>\n+            vec!(3; 4),\n+        // q, r and s: Rewrite splits match arm\n+        qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq =>\n+            println!(\"a\", b),\n+        rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr =>\n+            vec!(1, 2),\n+        ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss =>\n+            vec!(3; 4),\n+        // Funky bracketing styles\n+        t => println!{\"a\", b},\n+        u => vec!{1, 2},\n+        v => vec!{3; 4},\n+        w => println![\"a\", b],\n+        x => vec![1, 2],\n+        y => vec![3; 4],\n+        // Brackets with comments\n+        tc => println!{\"a\", b}, // comment\n+        uc => vec!{1, 2}, // comment\n+        vc => vec!{3; 4}, // comment\n+        wc => println![\"a\", b], // comment\n+        xc => vec![1, 2], // comment\n+        yc => vec![3; 4], // comment\n+    }\n+}\n+\n fn arrays() {\n     let x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 7, 8, 9, 0, 1, 2, 3, 4,\n              5, 6, 7, 8, 9, 0];"}]}