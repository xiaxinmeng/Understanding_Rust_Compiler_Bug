{"sha": "d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MTI5ZjU2MGQ0YTQ3ZDk1YTBiMmY4NGViZjNiMTVhOWI5Zjc5YzY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-01T15:25:15Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-08T16:00:37Z"}, "message": "Lint types with `fn new() -> Self` and no `Default` impl", "tree": {"sha": "0bc10faa77c7552e9de34367bd2c937c284bd851", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bc10faa77c7552e9de34367bd2c937c284bd851"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6", "html_url": "https://github.com/rust-lang/rust/commit/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "204c12c99ea1d3266bf067700351e8e6468a35d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/204c12c99ea1d3266bf067700351e8e6468a35d2", "html_url": "https://github.com/rust-lang/rust/commit/204c12c99ea1d3266bf067700351e8e6468a35d2"}], "stats": {"total": 161, "additions": 132, "deletions": 29}, "files": [{"sha": "9f3c30d39b3f35d8a04e0f238aaa258127ecd84c", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6", "patch": "@@ -8,7 +8,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 132 lints included in this crate:\n+There are 133 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -83,6 +83,7 @@ name\n [needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                                   | warn    | using a return statement like `return expr;` where an expression would suffice\n [needless_update](https://github.com/Manishearth/rust-clippy/wiki#needless_update)                                   | warn    | using `{ ..base }` when there are no missing fields\n [new_ret_no_self](https://github.com/Manishearth/rust-clippy/wiki#new_ret_no_self)                                   | warn    | not returning `Self` in a `new` method\n+[new_without_default](https://github.com/Manishearth/rust-clippy/wiki#new_without_default)                           | warn    | `fn new() -> Self` method without `Default` implementation\n [no_effect](https://github.com/Manishearth/rust-clippy/wiki#no_effect)                                               | warn    | statements with no effect\n [non_ascii_literal](https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal)                               | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n [nonsensical_open_options](https://github.com/Manishearth/rust-clippy/wiki#nonsensical_open_options)                 | warn    | nonsensical combination of options for opening a file"}, {"sha": "8c619a1eaf72c546c22161619a24240c7947a043", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6", "patch": "@@ -77,6 +77,7 @@ pub mod mutex_atomic;\n pub mod needless_bool;\n pub mod needless_features;\n pub mod needless_update;\n+pub mod new_without_default;\n pub mod no_effect;\n pub mod open_options;\n pub mod overflow_check_conditional;\n@@ -177,6 +178,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_early_lint_pass(box if_not_else::IfNotElse);\n     reg.register_late_lint_pass(box overflow_check_conditional::OverflowCheckConditional);\n     reg.register_late_lint_pass(box unused_label::UnusedLabel);\n+    reg.register_late_lint_pass(box new_without_default::NewWithoutDefault);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         enum_glob_use::ENUM_GLOB_USE,\n@@ -285,6 +287,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         needless_features::UNSTABLE_AS_MUT_SLICE,\n         needless_features::UNSTABLE_AS_SLICE,\n         needless_update::NEEDLESS_UPDATE,\n+        new_without_default::NEW_WITHOUT_DEFAULT,\n         no_effect::NO_EFFECT,\n         open_options::NONSENSICAL_OPEN_OPTIONS,\n         overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,"}, {"sha": "663c7dd1bc4b2dd259c5f49c3ac57b9eb3482fe3", "filename": "src/methods.rs", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6", "patch": "@@ -10,8 +10,8 @@ use std::{fmt, iter};\n use syntax::codemap::Span;\n use syntax::ptr::P;\n use utils::{get_trait_def_id, implements_trait, in_external_macro, in_macro, match_path, match_trait_method,\n-            match_type, method_chain_args, snippet, snippet_opt, span_lint, span_lint_and_then, span_note_and_lint,\n-            walk_ptrs_ty, walk_ptrs_ty_depth};\n+            match_type, method_chain_args, returns_self, snippet, snippet_opt, span_lint,\n+            span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth};\n use utils::{BTREEMAP_ENTRY_PATH, DEFAULT_TRAIT_PATH, HASHMAP_ENTRY_PATH, OPTION_PATH, RESULT_PATH, STRING_PATH,\n             VEC_PATH};\n use utils::MethodArgs;\n@@ -431,26 +431,11 @@ impl LateLintPass for MethodsPass {\n                         }\n                     }\n \n-                    if &name.as_str() == &\"new\" {\n-                        let returns_self = if let FunctionRetTy::Return(ref ret_ty) = sig.decl.output {\n-                            let ast_ty_to_ty_cache = cx.tcx.ast_ty_to_ty_cache.borrow();\n-                            let ret_ty = ast_ty_to_ty_cache.get(&ret_ty.id);\n-\n-                            if let Some(&ret_ty) = ret_ty {\n-                                ret_ty.walk().any(|t| t == ty)\n-                            } else {\n-                                false\n-                            }\n-                        } else {\n-                            false\n-                        };\n-\n-                        if !returns_self {\n-                            span_lint(cx,\n-                                      NEW_RET_NO_SELF,\n-                                      sig.explicit_self.span,\n-                                      \"methods called `new` usually return `Self`\");\n-                        }\n+                    if &name.as_str() == &\"new\" && !returns_self(cx, &sig.decl.output, ty)  {\n+                        span_lint(cx,\n+                                  NEW_RET_NO_SELF,\n+                                  sig.explicit_self.span,\n+                                  \"methods called `new` usually return `Self`\");\n                     }\n                 }\n             }\n@@ -485,7 +470,7 @@ fn lint_or_fun_call(cx: &LateContext, expr: &Expr, name: &str, args: &[P<Expr>])\n                         return false;\n                     };\n \n-                    if implements_trait(cx, arg_ty, default_trait_id, None) {\n+                    if implements_trait(cx, arg_ty, default_trait_id, Vec::new()) {\n                         span_lint(cx,\n                                   OR_FUN_CALL,\n                                   span,\n@@ -869,7 +854,7 @@ fn get_error_type<'a>(cx: &LateContext, ty: ty::Ty<'a>) -> Option<ty::Ty<'a>> {\n /// This checks whether a given type is known to implement Debug.\n fn has_debug_impl<'a, 'b>(ty: ty::Ty<'a>, cx: &LateContext<'b, 'a>) -> bool {\n     match cx.tcx.lang_items.debug_trait() {\n-        Some(debug) => implements_trait(cx, ty, debug, Some(vec![])),\n+        Some(debug) => implements_trait(cx, ty, debug, Vec::new()),\n         None => false,\n     }\n }"}, {"sha": "c7aeb7f9a2f606e0abb36f02f77b394f4f3ee84b", "filename": "src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6", "patch": "@@ -253,7 +253,7 @@ fn check_to_owned(cx: &LateContext, expr: &Expr, other: &Expr, left: bool, op: S\n         None => return,\n     };\n \n-    if !implements_trait(cx, arg_ty, partial_eq_trait_id, Some(vec![other_ty])) {\n+    if !implements_trait(cx, arg_ty, partial_eq_trait_id, vec![other_ty]) {\n         return;\n     }\n "}, {"sha": "4666336495c653ad23311dacf1c5d968903e2f0f", "filename": "src/new_without_default.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/src%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/src%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnew_without_default.rs?ref=d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6", "patch": "@@ -0,0 +1,63 @@\n+use rustc::lint::*;\n+use rustc_front::hir;\n+use rustc_front::intravisit::FnKind;\n+use syntax::ast;\n+use syntax::codemap::Span;\n+use utils::{get_trait_def_id, implements_trait, in_external_macro, returns_self, span_lint, DEFAULT_TRAIT_PATH};\n+\n+/// **What it does:** This lints about type with a `fn new() -> Self` method and no `Default`\n+/// implementation.\n+///\n+/// **Why is this bad?** User might expect to be able to use `Default` is the type can be\n+/// constructed without arguments.\n+///\n+/// **Known problems:** Hopefully none.\n+///\n+/// **Example:**\n+///\n+/// ```rust,ignore\n+/// struct Foo;\n+///\n+/// impl Foo {\n+///     fn new() -> Self {\n+///         Foo\n+///     }\n+/// }\n+/// ```\n+declare_lint! {\n+    pub NEW_WITHOUT_DEFAULT,\n+    Warn,\n+    \"`fn new() -> Self` method without `Default` implementation\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct NewWithoutDefault;\n+\n+impl LintPass for NewWithoutDefault {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(NEW_WITHOUT_DEFAULT)\n+    }\n+}\n+\n+impl LateLintPass for NewWithoutDefault {\n+    fn check_fn(&mut self, cx: &LateContext, kind: FnKind, decl: &hir::FnDecl, _: &hir::Block, span: Span, id: ast::NodeId) {\n+        if in_external_macro(cx, span) {\n+            return;\n+        }\n+\n+        if let FnKind::Method(name, _, _) = kind {\n+            if decl.inputs.is_empty() && name.as_str() == \"new\" {\n+                let ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(cx.tcx.map.get_parent(id))).ty;\n+\n+                if  returns_self(cx, &decl.output, ty) {\n+                    if let Some(default_trait_id) = get_trait_def_id(cx, &DEFAULT_TRAIT_PATH) {\n+                        if !implements_trait(cx, ty, default_trait_id, Vec::new()) {\n+                            span_lint(cx, NEW_WITHOUT_DEFAULT, span,\n+                                      &format!(\"you should consider adding a `Default` implementation for `{}`\", ty));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "46feafb1de40ed9f9ac80f7fe5fee8ba9de285b9", "filename": "src/utils/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6", "patch": "@@ -264,7 +264,7 @@ pub fn get_trait_def_id(cx: &LateContext, path: &[&str]) -> Option<DefId> {\n /// Check whether a type implements a trait.\n /// See also `get_trait_def_id`.\n pub fn implements_trait<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>, trait_id: DefId,\n-                                  ty_params: Option<Vec<ty::Ty<'tcx>>>)\n+                                  ty_params: Vec<ty::Ty<'tcx>>)\n                                   -> bool {\n     cx.tcx.populate_implementations_for_trait_if_necessary(trait_id);\n \n@@ -274,7 +274,7 @@ pub fn implements_trait<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>,\n                                                      trait_id,\n                                                      0,\n                                                      ty,\n-                                                     ty_params.unwrap_or_default());\n+                                                     ty_params);\n \n     traits::SelectionContext::new(&infcx).evaluate_obligation_conservatively(&obligation)\n }\n@@ -731,3 +731,19 @@ pub fn unsugar_range(expr: &Expr) -> Option<UnsugaredRange> {\n         None\n     }\n }\n+\n+/// Return whether a method returns `Self`.\n+pub fn returns_self(cx: &LateContext, ret: &FunctionRetTy, ty: ty::Ty) -> bool {\n+    if let FunctionRetTy::Return(ref ret_ty) = *ret {\n+        let ast_ty_to_ty_cache = cx.tcx.ast_ty_to_ty_cache.borrow();\n+        let ret_ty = ast_ty_to_ty_cache.get(&ret_ty.id);\n+\n+        if let Some(&ret_ty) = ret_ty {\n+            ret_ty.walk().any(|t| t == ty)\n+        } else {\n+            false\n+        }\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "0acab8be4fb84cbd2d5b6de7a478daa0bb409c99", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(clippy, clippy_pedantic)]\n-#![allow(unused, print_stdout, non_ascii_literal)]\n+#![allow(unused, print_stdout, non_ascii_literal, new_without_default)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "5f00179a9a204cf94a88dcb365157f35565fc7bc", "filename": "tests/compile-fail/new_without_default.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/tests%2Fcompile-fail%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6/tests%2Fcompile-fail%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnew_without_default.rs?ref=d7129f560d4a47d95a0b2f84ebf3b15a9b9f79c6", "patch": "@@ -0,0 +1,35 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(dead_code)]\n+#![deny(new_without_default)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn new() -> Foo { Foo } //~ERROR: you should consider adding a `Default` implementation for `Foo`\n+}\n+\n+struct Bar;\n+\n+impl Bar {\n+    fn new() -> Self { Bar } //~ERROR: you should consider adding a `Default` implementation for `Bar`\n+}\n+\n+struct Ok;\n+\n+impl Ok {\n+    fn new() -> Self { Ok }\n+}\n+\n+impl Default for Ok {\n+    fn default() -> Self { Ok }\n+}\n+\n+struct Params;\n+\n+impl Params {\n+    fn new(_: u32) -> Self { Params }\n+}\n+\n+fn main() {}"}]}