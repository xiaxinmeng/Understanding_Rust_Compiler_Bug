{"sha": "094d31f5e40d086a3f1aeb4ff7ea93f59a755d4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NGQzMWY1ZTQwZDA4NmEzZjFhZWI0ZmY3ZWE5M2Y1OWE3NTVkNGU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-08T14:48:17Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-08T23:05:18Z"}, "message": "Make lexer buffer the whole file\n\nThis way, it won't have to go through a bunch of calls for each\nbyte fetched.", "tree": {"sha": "703dec3bdbb9df9309f8d7ea198254063170237e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/703dec3bdbb9df9309f8d7ea198254063170237e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/094d31f5e40d086a3f1aeb4ff7ea93f59a755d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/094d31f5e40d086a3f1aeb4ff7ea93f59a755d4e", "html_url": "https://github.com/rust-lang/rust/commit/094d31f5e40d086a3f1aeb4ff7ea93f59a755d4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/094d31f5e40d086a3f1aeb4ff7ea93f59a755d4e/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae703c0b1fabbc6ed3f6501198778d18a110fc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae703c0b1fabbc6ed3f6501198778d18a110fc2", "html_url": "https://github.com/rust-lang/rust/commit/cae703c0b1fabbc6ed3f6501198778d18a110fc2"}], "stats": {"total": 133, "additions": 74, "deletions": 59}, "files": [{"sha": "fb3a7e2706af43067f21589afafd7dc0a782f95d", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 66, "deletions": 59, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/094d31f5e40d086a3f1aeb4ff7ea93f59a755d4e/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094d31f5e40d086a3f1aeb4ff7ea93f59a755d4e/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=094d31f5e40d086a3f1aeb4ff7ea93f59a755d4e", "patch": "@@ -11,88 +11,95 @@ import util.common;\n import util.common.new_str_hash;\n \n state type reader = state obj {\n-                          fn is_eof() -> bool;\n-                          fn curr() -> char;\n-                          fn next() -> char;\n-                          impure fn bump();\n-                          fn mark();\n-                          fn get_filename() -> str;\n-                          fn get_mark_pos() -> common.pos;\n-                          fn get_curr_pos() -> common.pos;\n-                          fn get_keywords() -> hashmap[str,token.token];\n-                          fn get_reserved() -> hashmap[str,()];\n+    fn is_eof() -> bool;\n+    fn curr() -> char;\n+    fn next() -> char;\n+    impure fn init();\n+    impure fn bump();\n+    fn mark();\n+    fn get_filename() -> str;\n+    fn get_mark_pos() -> common.pos;\n+    fn get_curr_pos() -> common.pos;\n+    fn get_keywords() -> hashmap[str,token.token];\n+    fn get_reserved() -> hashmap[str,()];\n };\n \n impure fn new_reader(io.reader rdr, str filename) -> reader\n {\n-    state obj reader(io.reader rdr,\n+    state obj reader(str file,\n                      str filename,\n-                     mutable char c,\n-                     mutable char n,\n+                     uint len,\n+                     mutable uint pos,\n+                     mutable char ch,\n                      mutable uint mark_line,\n                      mutable uint mark_col,\n                      mutable uint line,\n                      mutable uint col,\n                      hashmap[str,token.token] keywords,\n                      hashmap[str,()] reserved) {\n \n-            fn is_eof() -> bool {\n-                ret c == (-1) as char;\n-            }\n+        fn is_eof() -> bool {\n+            ret ch == -1 as char;\n+        }\n \n-            fn get_curr_pos() -> common.pos {\n-                ret rec(line=line, col=col);\n-            }\n+        fn get_curr_pos() -> common.pos {\n+            ret rec(line=line, col=col);\n+        }\n \n-            fn get_mark_pos() -> common.pos {\n-                ret rec(line=mark_line, col=mark_col);\n-            }\n+        fn get_mark_pos() -> common.pos {\n+            ret rec(line=mark_line, col=mark_col);\n+        }\n \n-            fn get_filename() -> str {\n-                ret filename;\n-            }\n+        fn get_filename() -> str {\n+            ret filename;\n+        }\n \n-            fn curr() -> char {\n-                ret c;\n-            }\n+        fn curr() -> char {\n+            ret ch;\n+        }\n \n-            fn next() -> char {\n-                ret n;\n+        fn next() -> char {\n+            if (pos < len) {ret _str.char_at(file, pos);}\n+            else {ret -1 as char;}\n+        }\n+            \n+        impure fn init() {\n+            if (pos < len) {\n+                auto next = _str.char_range_at(file, pos);\n+                pos = next._1;\n+                ch = next._0;\n             }\n+        }\n \n-            impure fn bump() {\n-\n-                let char prev = c;\n-\n-                c = n;\n-\n-                if (c == (-1) as char) {\n-                    ret;\n-                }\n-\n-                if (prev == '\\n') {\n+        impure fn bump() {\n+            if (pos < len) {\n+                if (ch == '\\n') {\n                     line += 1u;\n                     col = 0u;\n                 } else {\n                     col += 1u;\n                 }\n-\n-                n = rdr.read_char();\n+                auto next = _str.char_range_at(file, pos);\n+                pos = next._1;\n+                ch = next._0;\n+            } else {\n+                ch = -1 as char;\n             }\n+        }\n \n-            fn mark() {\n-                mark_line = line;\n-                mark_col = col;\n-            }\n+        fn mark() {\n+            mark_line = line;\n+            mark_col = col;\n+        }\n \n-            fn get_keywords() -> hashmap[str,token.token] {\n-                ret keywords;\n-            }\n+        fn get_keywords() -> hashmap[str,token.token] {\n+            ret keywords;\n+        }\n \n-            fn get_reserved() -> hashmap[str,()] {\n-                ret reserved;\n-            }\n+        fn get_reserved() -> hashmap[str,()] {\n+            ret reserved;\n         }\n+    }\n \n     auto keywords = new_str_hash[token.token]();\n \n@@ -208,13 +215,14 @@ impure fn new_reader(io.reader rdr, str filename) -> reader\n     reserved.insert(\"m128\", ()); // IEEE 754-2008 'decimal128'\n     reserved.insert(\"dec\", ());  // One of m32, m64, m128\n \n-    ret reader(rdr, filename, rdr.read_char(),\n-               rdr.read_char(), 1u, 0u, 1u, 0u, keywords, reserved);\n+    auto file = _str.unsafe_from_bytes(rdr.read_whole_stream());\n+    auto rd = reader(file, filename, _str.byte_len(file), 0u, -1 as char,\n+                     1u, 0u, 1u, 0u, keywords, reserved);\n+    rd.init();\n+    ret rd;\n }\n \n \n-\n-\n fn in_range(char c, char lo, char hi) -> bool {\n     ret lo <= c && c <= hi;\n }\n@@ -689,7 +697,6 @@ impure fn next_token(reader rdr) -> token.token {\n \n         case ('\"') {\n             rdr.bump();\n-            // FIXME: general utf8-consumption support.\n             while (rdr.curr() != '\"') {\n                 alt (rdr.curr()) {\n                     case ('\\\\') {\n@@ -850,7 +857,7 @@ impure fn read_block_comment(reader rdr) -> cmnt {\n \n impure fn gather_comments(str path) -> vec[cmnt] {\n     auto srdr = io.file_reader(path);\n-    auto rdr = lexer.new_reader(srdr, path);\n+    auto rdr = new_reader(srdr, path);\n     let vec[cmnt] comments = vec();\n     while (!rdr.is_eof()) {\n         while (true) {"}, {"sha": "61f067954447ab1e91386de0a74566c52a67e4d0", "filename": "src/lib/io.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/094d31f5e40d086a3f1aeb4ff7ea93f59a755d4e/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094d31f5e40d086a3f1aeb4ff7ea93f59a755d4e/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=094d31f5e40d086a3f1aeb4ff7ea93f59a755d4e", "patch": "@@ -41,6 +41,7 @@ type reader =\n           impure fn read_le_uint(uint size) -> uint;\n           impure fn read_le_int(uint size) -> int;\n           impure fn read_be_uint(uint size) -> uint;\n+          impure fn read_whole_stream() -> vec[u8];\n \n           impure fn seek(int offset, seek_style whence);\n           impure fn tell() -> uint; // FIXME: eventually u64\n@@ -170,6 +171,13 @@ state obj new_reader(buf_reader rdr) {\n         }\n         ret val;\n     }\n+    impure fn read_whole_stream() -> vec[u8] {\n+        let vec[u8] buf = vec();\n+        while (!rdr.eof()) {\n+            buf += rdr.read(2048u);\n+        }\n+        ret buf;\n+    }\n     impure fn seek(int offset, seek_style whence) {\n         ret rdr.seek(offset, whence);\n     }"}]}