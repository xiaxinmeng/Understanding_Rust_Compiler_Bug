{"sha": "68f94e94ed3d80d768d0d107049f02fb99716dbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4Zjk0ZTk0ZWQzZDgwZDc2OGQwZDEwNzA0OWYwMmZiOTk3MTZkYmU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-18T22:49:20Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-19T16:25:20Z"}, "message": "resolve: Centralize some error reporting for unexpected macro resolutions", "tree": {"sha": "6762abfbf8b4355855072aeb25e6bdab73f150eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6762abfbf8b4355855072aeb25e6bdab73f150eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68f94e94ed3d80d768d0d107049f02fb99716dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68f94e94ed3d80d768d0d107049f02fb99716dbe", "html_url": "https://github.com/rust-lang/rust/commit/68f94e94ed3d80d768d0d107049f02fb99716dbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68f94e94ed3d80d768d0d107049f02fb99716dbe/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69894ce9ac337e51730519e071c94a4bb9c926f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/69894ce9ac337e51730519e071c94a4bb9c926f2", "html_url": "https://github.com/rust-lang/rust/commit/69894ce9ac337e51730519e071c94a4bb9c926f2"}], "stats": {"total": 531, "additions": 278, "deletions": 253}, "files": [{"sha": "d4a83b80990587ec403678814dd0cbb555f0b92a", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/68f94e94ed3d80d768d0d107049f02fb99716dbe/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f94e94ed3d80d768d0d107049f02fb99716dbe/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=68f94e94ed3d80d768d0d107049f02fb99716dbe", "patch": "@@ -209,6 +209,28 @@ impl AstFragmentKind {\n         self.make_from(DummyResult::any(span)).expect(\"couldn't create a dummy AST fragment\")\n     }\n \n+    /// Fragment supports macro expansion and not just inert attributes, `cfg` and `cfg_attr`.\n+    pub fn supports_macro_expansion(self) -> bool {\n+        match self {\n+            AstFragmentKind::OptExpr\n+            | AstFragmentKind::Expr\n+            | AstFragmentKind::Pat\n+            | AstFragmentKind::Ty\n+            | AstFragmentKind::Stmts\n+            | AstFragmentKind::Items\n+            | AstFragmentKind::TraitItems\n+            | AstFragmentKind::ImplItems\n+            | AstFragmentKind::ForeignItems => true,\n+            AstFragmentKind::Arms\n+            | AstFragmentKind::Fields\n+            | AstFragmentKind::FieldPats\n+            | AstFragmentKind::GenericParams\n+            | AstFragmentKind::Params\n+            | AstFragmentKind::StructFields\n+            | AstFragmentKind::Variants => false,\n+        }\n+    }\n+\n     fn expect_from_annotatables<I: IntoIterator<Item = Annotatable>>(\n         self,\n         items: I,\n@@ -1014,30 +1036,15 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         attrs: &mut Vec<ast::Attribute>,\n         after_derive: &mut bool,\n     ) -> Option<ast::Attribute> {\n-        let attr = attrs\n+        attrs\n             .iter()\n             .position(|a| {\n                 if a.has_name(sym::derive) {\n                     *after_derive = true;\n                 }\n                 !self.cx.sess.is_attr_known(a) && !is_builtin_attr(a)\n             })\n-            .map(|i| attrs.remove(i));\n-        if let Some(attr) = &attr {\n-            if !self.cx.ecfg.custom_inner_attributes()\n-                && attr.style == ast::AttrStyle::Inner\n-                && !attr.has_name(sym::test)\n-            {\n-                feature_err(\n-                    &self.cx.sess.parse_sess,\n-                    sym::custom_inner_attributes,\n-                    attr.span,\n-                    \"non-builtin inner attributes are unstable\",\n-                )\n-                .emit();\n-            }\n-        }\n-        attr\n+            .map(|i| attrs.remove(i))\n     }\n \n     /// If `item` is an attr invocation, remove and return the macro attribute and derive traits."}, {"sha": "b1ea2d73786aefb714e940d7845c6bf86c999a64", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 58, "deletions": 40, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/68f94e94ed3d80d768d0d107049f02fb99716dbe/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f94e94ed3d80d768d0d107049f02fb99716dbe/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=68f94e94ed3d80d768d0d107049f02fb99716dbe", "patch": "@@ -12,24 +12,24 @@ use rustc_ast_pretty::pprust;\n use rustc_attr::StabilityLevel;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::ptr_key::PtrKey;\n+use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n use rustc_expand::base::{Indeterminate, InvocationRes, ResolverExpand, SyntaxExtension};\n use rustc_expand::compile_declarative_macro;\n-use rustc_expand::expand::{AstFragment, AstFragmentKind, Invocation, InvocationKind};\n+use rustc_expand::expand::{AstFragment, Invocation, InvocationKind};\n use rustc_feature::is_builtin_attr_name;\n use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id;\n use rustc_middle::middle::stability;\n use rustc_middle::ty;\n use rustc_session::lint::builtin::UNUSED_MACROS;\n+use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{self, ExpnData, ExpnId, ExpnKind};\n+use rustc_span::hygiene::{AstPass, MacroKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-\n-use rustc_data_structures::sync::Lrc;\n-use rustc_span::hygiene::{AstPass, MacroKind};\n use std::cell::Cell;\n use std::{mem, ptr};\n \n@@ -241,15 +241,20 @@ impl<'a> ResolverExpand for Resolver<'a> {\n             }\n         };\n \n-        let (path, kind, derives, after_derive) = match invoc.kind {\n+        let (path, kind, inner_attr, derives, after_derive) = match invoc.kind {\n             InvocationKind::Attr { ref attr, ref derives, after_derive, .. } => (\n                 &attr.get_normal_item().path,\n                 MacroKind::Attr,\n+                attr.style == ast::AttrStyle::Inner,\n                 self.arenas.alloc_ast_paths(derives),\n                 after_derive,\n             ),\n-            InvocationKind::Bang { ref mac, .. } => (&mac.path, MacroKind::Bang, &[][..], false),\n-            InvocationKind::Derive { ref path, .. } => (path, MacroKind::Derive, &[][..], false),\n+            InvocationKind::Bang { ref mac, .. } => {\n+                (&mac.path, MacroKind::Bang, false, &[][..], false)\n+            }\n+            InvocationKind::Derive { ref path, .. } => {\n+                (path, MacroKind::Derive, false, &[][..], false)\n+            }\n             InvocationKind::DeriveContainer { ref derives, .. } => {\n                 // Block expansion of the container until we resolve all derives in it.\n                 // This is required for two reasons:\n@@ -299,8 +304,17 @@ impl<'a> ResolverExpand for Resolver<'a> {\n \n         // Derives are not included when `invocations` are collected, so we have to add them here.\n         let parent_scope = &ParentScope { derives, ..parent_scope };\n+        let require_inert = !invoc.fragment_kind.supports_macro_expansion();\n         let node_id = self.lint_node_id(eager_expansion_root);\n-        let (ext, res) = self.smart_resolve_macro_path(path, kind, parent_scope, node_id, force)?;\n+        let (ext, res) = self.smart_resolve_macro_path(\n+            path,\n+            kind,\n+            require_inert,\n+            inner_attr,\n+            parent_scope,\n+            node_id,\n+            force,\n+        )?;\n \n         let span = invoc.span();\n         invoc_id.set_expn_data(ext.expn_data(\n@@ -318,29 +332,6 @@ impl<'a> ResolverExpand for Resolver<'a> {\n             self.definitions.add_parent_module_of_macro_def(invoc_id, normal_module_def_id);\n         }\n \n-        match invoc.fragment_kind {\n-            AstFragmentKind::Arms\n-            | AstFragmentKind::Fields\n-            | AstFragmentKind::FieldPats\n-            | AstFragmentKind::GenericParams\n-            | AstFragmentKind::Params\n-            | AstFragmentKind::StructFields\n-            | AstFragmentKind::Variants => {\n-                if let Res::Def(..) = res {\n-                    self.session.span_err(\n-                        span,\n-                        &format!(\n-                            \"expected an inert attribute, found {} {}\",\n-                            res.article(),\n-                            res.descr()\n-                        ),\n-                    );\n-                    return Ok(InvocationRes::Single(self.dummy_ext(kind)));\n-                }\n-            }\n-            _ => {}\n-        }\n-\n         Ok(InvocationRes::Single(ext))\n     }\n \n@@ -403,18 +394,21 @@ impl<'a> ResolverExpand for Resolver<'a> {\n \n impl<'a> Resolver<'a> {\n     /// Resolve macro path with error reporting and recovery.\n+    /// Uses dummy syntax extensions for unresolved macros or macros with unexpected resolutions\n+    /// for better error recovery.\n     fn smart_resolve_macro_path(\n         &mut self,\n         path: &ast::Path,\n         kind: MacroKind,\n+        require_inert: bool,\n+        inner_attr: bool,\n         parent_scope: &ParentScope<'a>,\n         node_id: NodeId,\n         force: bool,\n     ) -> Result<(Lrc<SyntaxExtension>, Res), Indeterminate> {\n         let (ext, res) = match self.resolve_macro_path(path, Some(kind), parent_scope, true, force)\n         {\n             Ok((Some(ext), res)) => (ext, res),\n-            // Use dummy syntax extensions for unresolved macros for better recovery.\n             Ok((None, res)) => (self.dummy_ext(kind), res),\n             Err(Determinacy::Determined) => (self.dummy_ext(kind), Res::Err),\n             Err(Determinacy::Undetermined) => return Err(Indeterminate),\n@@ -451,19 +445,43 @@ impl<'a> Resolver<'a> {\n \n         self.check_stability_and_deprecation(&ext, path, node_id);\n \n-        Ok(if ext.macro_kind() != kind {\n-            let expected = kind.descr_expected();\n+        let unexpected_res = if ext.macro_kind() != kind {\n+            Some((kind.article(), kind.descr_expected()))\n+        } else if require_inert && matches!(res, Res::Def(..)) {\n+            Some((\"a\", \"non-macro attribute\"))\n+        } else {\n+            None\n+        };\n+        if let Some((article, expected)) = unexpected_res {\n             let path_str = pprust::path_to_string(path);\n             let msg = format!(\"expected {}, found {} `{}`\", expected, res.descr(), path_str);\n             self.session\n                 .struct_span_err(path.span, &msg)\n-                .span_label(path.span, format!(\"not {} {}\", kind.article(), expected))\n+                .span_label(path.span, format!(\"not {} {}\", article, expected))\n                 .emit();\n-            // Use dummy syntax extensions for unexpected macro kinds for better recovery.\n-            (self.dummy_ext(kind), Res::Err)\n-        } else {\n-            (ext, res)\n-        })\n+            return Ok((self.dummy_ext(kind), Res::Err));\n+        }\n+\n+        // We are trying to avoid reporting this error if other related errors were reported.\n+        if inner_attr\n+            && !self.session.features_untracked().custom_inner_attributes\n+            && path != &sym::test\n+            && res != Res::Err\n+        {\n+            feature_err(\n+                &self.session.parse_sess,\n+                sym::custom_inner_attributes,\n+                path.span,\n+                match res {\n+                    Res::Def(..) => \"inner macro attributes are unstable\",\n+                    Res::NonMacroAttr(..) => \"custom inner attributes are unstable\",\n+                    _ => unreachable!(),\n+                },\n+            )\n+            .emit();\n+        }\n+\n+        Ok((ext, res))\n     }\n \n     pub fn resolve_macro_path("}, {"sha": "8770fb1ded8eba4214175209601c9a9e18494e40", "filename": "src/test/ui/attrs-resolution-errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fattrs-resolution-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fattrs-resolution-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-resolution-errors.rs?ref=68f94e94ed3d80d768d0d107049f02fb99716dbe", "patch": "@@ -1,12 +1,12 @@\n enum FooEnum {\n     #[test]\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n     Bar(i32),\n }\n \n struct FooStruct {\n     #[test]\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n     bar: i32,\n }\n \n@@ -21,20 +21,20 @@ fn main() {\n     match foo_struct {\n         FooStruct {\n             #[test] bar\n-            //~^ ERROR expected an inert attribute, found an attribute macro\n+            //~^ ERROR expected non-macro attribute, found attribute macro\n         } => {}\n     }\n \n     match 1 {\n         0 => {}\n         #[test]\n-        //~^ ERROR expected an inert attribute, found an attribute macro\n+        //~^ ERROR expected non-macro attribute, found attribute macro\n         _ => {}\n     }\n \n     let _another_foo_strunct = FooStruct {\n         #[test]\n-        //~^ ERROR expected an inert attribute, found an attribute macro\n+        //~^ ERROR expected non-macro attribute, found attribute macro\n         bar: 1,\n     };\n }"}, {"sha": "883f96e5c193163ac2311d5bfbf1e41be3ad8729", "filename": "src/test/ui/attrs-resolution-errors.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fattrs-resolution-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fattrs-resolution-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattrs-resolution-errors.stderr?ref=68f94e94ed3d80d768d0d107049f02fb99716dbe", "patch": "@@ -1,32 +1,32 @@\n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/attrs-resolution-errors.rs:2:5\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/attrs-resolution-errors.rs:2:7\n    |\n LL |     #[test]\n-   |     ^^^^^^^\n+   |       ^^^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/attrs-resolution-errors.rs:8:5\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/attrs-resolution-errors.rs:8:7\n    |\n LL |     #[test]\n-   |     ^^^^^^^\n+   |       ^^^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/attrs-resolution-errors.rs:23:13\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/attrs-resolution-errors.rs:23:15\n    |\n LL |             #[test] bar\n-   |             ^^^^^^^\n+   |               ^^^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/attrs-resolution-errors.rs:30:9\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/attrs-resolution-errors.rs:30:11\n    |\n LL |         #[test]\n-   |         ^^^^^^^\n+   |           ^^^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/attrs-resolution-errors.rs:36:9\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/attrs-resolution-errors.rs:36:11\n    |\n LL |         #[test]\n-   |         ^^^^^^^\n+   |           ^^^^ not a non-macro attribute\n \n error: aborting due to 5 previous errors\n "}, {"sha": "4c72ecbfc03a8b109178df6439fba627802ecab4", "filename": "src/test/ui/proc-macro/proc-macro-gates.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.rs?ref=68f94e94ed3d80d768d0d107049f02fb99716dbe", "patch": "@@ -7,11 +7,11 @@\n extern crate test_macros;\n \n fn _test_inner() {\n-    #![empty_attr] //~ ERROR: non-builtin inner attributes are unstable\n+    #![empty_attr] //~ ERROR: inner macro attributes are unstable\n }\n \n mod _test2_inner {\n-    #![empty_attr] //~ ERROR: non-builtin inner attributes are unstable\n+    #![empty_attr] //~ ERROR: inner macro attributes are unstable\n }\n \n #[empty_attr = \"y\"] //~ ERROR: key-value macro attributes are not supported"}, {"sha": "33a808037eea56d1fff6ad1c97bcf2914cce7ee2", "filename": "src/test/ui/proc-macro/proc-macro-gates.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates.stderr?ref=68f94e94ed3d80d768d0d107049f02fb99716dbe", "patch": "@@ -1,17 +1,17 @@\n-error[E0658]: non-builtin inner attributes are unstable\n-  --> $DIR/proc-macro-gates.rs:10:5\n+error[E0658]: inner macro attributes are unstable\n+  --> $DIR/proc-macro-gates.rs:10:8\n    |\n LL |     #![empty_attr]\n-   |     ^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^\n    |\n    = note: see issue #54726 <https://github.com/rust-lang/rust/issues/54726> for more information\n    = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable\n \n-error[E0658]: non-builtin inner attributes are unstable\n-  --> $DIR/proc-macro-gates.rs:14:5\n+error[E0658]: inner macro attributes are unstable\n+  --> $DIR/proc-macro-gates.rs:14:8\n    |\n LL |     #![empty_attr]\n-   |     ^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^\n    |\n    = note: see issue #54726 <https://github.com/rust-lang/rust/issues/54726> for more information\n    = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable"}, {"sha": "38fbd4733d5cbe8a59935fc003fe3d6d750af12b", "filename": "src/test/ui/proc-macro/proc-macro-gates2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.rs?ref=68f94e94ed3d80d768d0d107049f02fb99716dbe", "patch": "@@ -10,11 +10,11 @@ extern crate test_macros;\n // should either require a feature gate or not be allowed on stable.\n \n fn _test6<#[empty_attr] T>() {}\n-//~^ ERROR: expected an inert attribute, found an attribute macro\n+//~^ ERROR: expected non-macro attribute, found attribute macro\n \n fn _test7() {\n     match 1 {\n-        #[empty_attr] //~ ERROR: expected an inert attribute, found an attribute macro\n+        #[empty_attr] //~ ERROR: expected non-macro attribute, found attribute macro\n         0 => {}\n         _ => {}\n     }"}, {"sha": "64df34e7ce390b1a581beaa1f7c75c18cca3f0eb", "filename": "src/test/ui/proc-macro/proc-macro-gates2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fproc-macro-gates2.stderr?ref=68f94e94ed3d80d768d0d107049f02fb99716dbe", "patch": "@@ -1,14 +1,14 @@\n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-gates2.rs:12:11\n+error: expected non-macro attribute, found attribute macro `empty_attr`\n+  --> $DIR/proc-macro-gates2.rs:12:13\n    |\n LL | fn _test6<#[empty_attr] T>() {}\n-   |           ^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-gates2.rs:17:9\n+error: expected non-macro attribute, found attribute macro `empty_attr`\n+  --> $DIR/proc-macro-gates2.rs:17:11\n    |\n LL |         #[empty_attr]\n-   |         ^^^^^^^^^^^^^\n+   |           ^^^^^^^^^^ not a non-macro attribute\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6403b3f55c40ccf714e927b592ae41bd44dfbe12", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs?ref=68f94e94ed3d80d768d0d107049f02fb99716dbe", "patch": "@@ -3,7 +3,7 @@ extern \"C\" {\n         /// Foo\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR expected an inert attribute, found an attribute macro\n+        //~^ ERROR expected non-macro attribute, found attribute macro\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -19,7 +19,7 @@ type FnType = fn(\n     /// Foo\n     //~^ ERROR documentation comments cannot be applied to function\n     #[test] a: u32,\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n     /// Bar\n     //~^ ERROR documentation comments cannot be applied to function\n     #[must_use]\n@@ -34,7 +34,7 @@ pub fn foo(\n     /// Foo\n     //~^ ERROR documentation comments cannot be applied to function\n     #[test] a: u32,\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n     /// Bar\n     //~^ ERROR documentation comments cannot be applied to function\n     #[must_use]\n@@ -54,7 +54,7 @@ impl SelfStruct {\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR expected an inert attribute, found an attribute macro\n+        //~^ ERROR expected non-macro attribute, found attribute macro\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -69,7 +69,7 @@ impl SelfStruct {\n         /// Foo\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR expected an inert attribute, found an attribute macro\n+        //~^ ERROR expected non-macro attribute, found attribute macro\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -90,7 +90,7 @@ impl RefStruct {\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR expected an inert attribute, found an attribute macro\n+        //~^ ERROR expected non-macro attribute, found attribute macro\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -109,7 +109,7 @@ trait RefTrait {\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR expected an inert attribute, found an attribute macro\n+        //~^ ERROR expected non-macro attribute, found attribute macro\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -124,7 +124,7 @@ trait RefTrait {\n         /// Foo\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR expected an inert attribute, found an attribute macro\n+        //~^ ERROR expected non-macro attribute, found attribute macro\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -144,7 +144,7 @@ impl RefTrait for RefStruct {\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: i32,\n-        //~^ ERROR expected an inert attribute, found an attribute macro\n+        //~^ ERROR expected non-macro attribute, found attribute macro\n         /// Baz\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]\n@@ -161,7 +161,7 @@ fn main() {\n         /// Foo\n         //~^ ERROR documentation comments cannot be applied to function\n         #[test] a: u32,\n-        //~^ ERROR expected an inert attribute, found an attribute macro\n+        //~^ ERROR expected non-macro attribute, found attribute macro\n         /// Bar\n         //~^ ERROR documentation comments cannot be applied to function\n         #[must_use]"}, {"sha": "edca8cea68d72a9cc7c8d56d27a8d26b6f5891fe", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr?ref=68f94e94ed3d80d768d0d107049f02fb99716dbe", "patch": "@@ -1,62 +1,62 @@\n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:5:9\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/param-attrs-builtin-attrs.rs:5:11\n    |\n LL |         #[test] a: i32,\n-   |         ^^^^^^^\n+   |           ^^^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:21:5\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/param-attrs-builtin-attrs.rs:21:7\n    |\n LL |     #[test] a: u32,\n-   |     ^^^^^^^\n+   |       ^^^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:36:5\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/param-attrs-builtin-attrs.rs:36:7\n    |\n LL |     #[test] a: u32,\n-   |     ^^^^^^^\n+   |       ^^^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:56:9\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/param-attrs-builtin-attrs.rs:56:11\n    |\n LL |         #[test] a: i32,\n-   |         ^^^^^^^\n+   |           ^^^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:71:9\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/param-attrs-builtin-attrs.rs:71:11\n    |\n LL |         #[test] a: i32,\n-   |         ^^^^^^^\n+   |           ^^^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:92:9\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/param-attrs-builtin-attrs.rs:92:11\n    |\n LL |         #[test] a: i32,\n-   |         ^^^^^^^\n+   |           ^^^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:111:9\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/param-attrs-builtin-attrs.rs:111:11\n    |\n LL |         #[test] a: i32,\n-   |         ^^^^^^^\n+   |           ^^^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:126:9\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/param-attrs-builtin-attrs.rs:126:11\n    |\n LL |         #[test] a: i32,\n-   |         ^^^^^^^\n+   |           ^^^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:146:9\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/param-attrs-builtin-attrs.rs:146:11\n    |\n LL |         #[test] a: i32,\n-   |         ^^^^^^^\n+   |           ^^^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:163:9\n+error: expected non-macro attribute, found attribute macro `test`\n+  --> $DIR/param-attrs-builtin-attrs.rs:163:11\n    |\n LL |         #[test] a: u32,\n-   |         ^^^^^^^\n+   |           ^^^^ not a non-macro attribute\n \n error: documentation comments cannot be applied to function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:3:9"}, {"sha": "fcfa610ec8554e438e833c0589c15c810a08cc60", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs?ref=68f94e94ed3d80d768d0d107049f02fb99716dbe", "patch": "@@ -8,58 +8,58 @@ use ident_mac::id;\n struct W(u8);\n \n extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n-//~^ ERROR expected an inert attribute, found an attribute macro\n-//~| ERROR expected an inert attribute, found an attribute macro\n+//~^ ERROR expected non-macro attribute, found attribute macro\n+//~| ERROR expected non-macro attribute, found attribute macro\n \n unsafe extern \"C\" fn cvar(arg1: i32, #[id] mut args: ...) {}\n-//~^ ERROR expected an inert attribute, found an attribute macro\n+//~^ ERROR expected non-macro attribute, found attribute macro\n \n type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n-    //~| ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n+    //~| ERROR expected non-macro attribute, found attribute macro\n \n fn free(#[id] arg1: u8) {\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n     let lam = |#[id] W(x), #[id] y: usize| ();\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n-    //~| ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n+    //~| ERROR expected non-macro attribute, found attribute macro\n }\n \n impl W {\n     fn inherent1(#[id] self, #[id] arg1: u8) {}\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n-    //~| ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n+    //~| ERROR expected non-macro attribute, found attribute macro\n     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n-    //~| ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n+    //~| ERROR expected non-macro attribute, found attribute macro\n     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n-    //~| ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n+    //~| ERROR expected non-macro attribute, found attribute macro\n     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n-    //~| ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n+    //~| ERROR expected non-macro attribute, found attribute macro\n     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8) {}\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n-    //~| ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n+    //~| ERROR expected non-macro attribute, found attribute macro\n }\n \n trait A {\n     fn trait1(#[id] self, #[id] arg1: u8);\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n-    //~| ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n+    //~| ERROR expected non-macro attribute, found attribute macro\n     fn trait2(#[id] &self, #[id] arg1: u8);\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n-    //~| ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n+    //~| ERROR expected non-macro attribute, found attribute macro\n     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n-    //~| ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n+    //~| ERROR expected non-macro attribute, found attribute macro\n     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n-    //~| ERROR expected an inert attribute, found an attribute macro\n-    //~| ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n+    //~| ERROR expected non-macro attribute, found attribute macro\n+    //~| ERROR expected non-macro attribute, found attribute macro\n     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8);\n-    //~^ ERROR expected an inert attribute, found an attribute macro\n-    //~| ERROR expected an inert attribute, found an attribute macro\n+    //~^ ERROR expected non-macro attribute, found attribute macro\n+    //~| ERROR expected non-macro attribute, found attribute macro\n }\n \n fn main() {}"}, {"sha": "38c5050f3428dd932e2cd9e30bdf6b3c3573e121", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.stderr", "status": "modified", "additions": 87, "deletions": 87, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr?ref=68f94e94ed3d80d768d0d107049f02fb99716dbe", "patch": "@@ -1,176 +1,176 @@\n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:10:21\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:10:23\n    |\n LL | extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n-   |                     ^^^^^\n+   |                       ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:10:38\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:10:40\n    |\n LL | extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n-   |                                      ^^^^^\n+   |                                        ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:14:38\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:14:40\n    |\n LL | unsafe extern \"C\" fn cvar(arg1: i32, #[id] mut args: ...) {}\n-   |                                      ^^^^^\n+   |                                        ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:17:28\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:17:30\n    |\n LL | type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n-   |                            ^^^^^\n+   |                              ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:17:38\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:17:40\n    |\n LL | type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n-   |                                      ^^^^^\n+   |                                        ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:21:9\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:21:11\n    |\n LL | fn free(#[id] arg1: u8) {\n-   |         ^^^^^\n+   |           ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:23:16\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:23:18\n    |\n LL |     let lam = |#[id] W(x), #[id] y: usize| ();\n-   |                ^^^^^\n+   |                  ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:23:28\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:23:30\n    |\n LL |     let lam = |#[id] W(x), #[id] y: usize| ();\n-   |                            ^^^^^\n+   |                              ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:29:18\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:29:20\n    |\n LL |     fn inherent1(#[id] self, #[id] arg1: u8) {}\n-   |                  ^^^^^\n+   |                    ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:29:30\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:29:32\n    |\n LL |     fn inherent1(#[id] self, #[id] arg1: u8) {}\n-   |                              ^^^^^\n+   |                                ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:32:18\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:32:20\n    |\n LL |     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n-   |                  ^^^^^\n+   |                    ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:32:31\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:32:33\n    |\n LL |     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n-   |                               ^^^^^\n+   |                                 ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:35:22\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:35:24\n    |\n LL |     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n-   |                      ^^^^^\n+   |                        ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:35:42\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:35:44\n    |\n LL |     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n-   |                                          ^^^^^\n+   |                                            ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:38:22\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:38:24\n    |\n LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n-   |                      ^^^^^\n+   |                        ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:38:45\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:38:47\n    |\n LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n-   |                                             ^^^^^\n+   |                                               ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:41:38\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:41:40\n    |\n LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8) {}\n-   |                                      ^^^^^\n+   |                                        ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:41:54\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:41:56\n    |\n LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8) {}\n-   |                                                      ^^^^^\n+   |                                                        ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:47:15\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:47:17\n    |\n LL |     fn trait1(#[id] self, #[id] arg1: u8);\n-   |               ^^^^^\n+   |                 ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:47:27\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:47:29\n    |\n LL |     fn trait1(#[id] self, #[id] arg1: u8);\n-   |                           ^^^^^\n+   |                             ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:50:15\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:50:17\n    |\n LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n-   |               ^^^^^\n+   |                 ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:50:28\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:50:30\n    |\n LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n-   |                            ^^^^^\n+   |                              ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:53:19\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:53:21\n    |\n LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n-   |                   ^^^^^\n+   |                     ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:53:39\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:53:41\n    |\n LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n-   |                                       ^^^^^\n+   |                                         ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:56:19\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:56:21\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n-   |                   ^^^^^\n+   |                     ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:56:42\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:56:44\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n-   |                                          ^^^^^\n+   |                                            ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:56:58\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:56:60\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n-   |                                                          ^^^^^\n+   |                                                            ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:60:38\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:60:40\n    |\n LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8);\n-   |                                      ^^^^^\n+   |                                        ^^ not a non-macro attribute\n \n-error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:60:54\n+error: expected non-macro attribute, found attribute macro `id`\n+  --> $DIR/proc-macro-cannot-be-used.rs:60:56\n    |\n LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8);\n-   |                                                      ^^^^^\n+   |                                                        ^^ not a non-macro attribute\n \n error: aborting due to 29 previous errors\n "}, {"sha": "70e04bf7ee6e81216918bf504e5925ef0596fb1d", "filename": "src/test/ui/span/issue-36530.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs?ref=68f94e94ed3d80d768d0d107049f02fb99716dbe", "patch": "@@ -6,7 +6,7 @@\n \n #[foo]\n mod foo {\n-    #![foo] //~ ERROR non-builtin inner attributes are unstable\n+    #![foo] //~ ERROR custom inner attributes are unstable\n }\n \n fn main() {}"}, {"sha": "a998d7217a13f563322a74698f5f29addd1c408c", "filename": "src/test/ui/span/issue-36530.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68f94e94ed3d80d768d0d107049f02fb99716dbe/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr?ref=68f94e94ed3d80d768d0d107049f02fb99716dbe", "patch": "@@ -1,8 +1,8 @@\n-error[E0658]: non-builtin inner attributes are unstable\n-  --> $DIR/issue-36530.rs:9:5\n+error[E0658]: custom inner attributes are unstable\n+  --> $DIR/issue-36530.rs:9:8\n    |\n LL |     #![foo]\n-   |     ^^^^^^^\n+   |        ^^^\n    |\n    = note: see issue #54726 <https://github.com/rust-lang/rust/issues/54726> for more information\n    = help: add `#![feature(custom_inner_attributes)]` to the crate attributes to enable"}]}