{"sha": "f43c336e7453ff8216671f44328841d9a3828d2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0M2MzMzZlNzQ1M2ZmODIxNjY3MWY0NDMyODg0MWQ5YTM4MjhkMmI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-25T16:30:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-25T16:30:28Z"}, "message": "Rollup merge of #40642 - frewsxcv:io-bufread-doc-examples, r=GuillaumeGomez\n\nRewrite `io::BufRead` doc examples to better demonstrate behaviors.\n\nPrior to this commit, most of the `BufRead` examples used `StdinLock` to\ndemonstrate how certain `BufRead` methods worked. Using `StdinLock` is\nnot ideal since:\n\n* Relying on run-time data means we can't show concrete examples of how\n  these methods work up-front. The user is required to run them in order\n  to see how they behave.\n* If the user tries to run an example in the playpen, it won't work\n  because the playpen doesn't support user input to stdin.", "tree": {"sha": "9fc8724c36c4972e9e5dc727fc97cf997b08077b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fc8724c36c4972e9e5dc727fc97cf997b08077b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f43c336e7453ff8216671f44328841d9a3828d2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f43c336e7453ff8216671f44328841d9a3828d2b", "html_url": "https://github.com/rust-lang/rust/commit/f43c336e7453ff8216671f44328841d9a3828d2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f43c336e7453ff8216671f44328841d9a3828d2b/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49c67bd632e961a57863805e5d0a400f97da9b93", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c67bd632e961a57863805e5d0a400f97da9b93", "html_url": "https://github.com/rust-lang/rust/commit/49c67bd632e961a57863805e5d0a400f97da9b93"}, {"sha": "8fba638b08eb85cda1bd2a4e855f7f76727dfc52", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fba638b08eb85cda1bd2a4e855f7f76727dfc52", "html_url": "https://github.com/rust-lang/rust/commit/8fba638b08eb85cda1bd2a4e855f7f76727dfc52"}], "stats": {"total": 137, "additions": 84, "deletions": 53}, "files": [{"sha": "5b628d51d1513986eb31cbc17d2ff19756553849", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 84, "deletions": 53, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/f43c336e7453ff8216671f44328841d9a3828d2b/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43c336e7453ff8216671f44328841d9a3828d2b/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=f43c336e7453ff8216671f44328841d9a3828d2b", "patch": "@@ -1290,28 +1290,42 @@ pub trait BufRead: Read {\n     /// If an I/O error is encountered then all bytes read so far will be\n     /// present in `buf` and its length will have been adjusted appropriately.\n     ///\n-    /// # Examples\n-    ///\n-    /// A locked standard input implements `BufRead`. In this example, we'll\n-    /// read from standard input until we see an `a` byte.\n-    ///\n     /// [`fill_buf`]: #tymethod.fill_buf\n     /// [`ErrorKind::Interrupted`]: enum.ErrorKind.html#variant.Interrupted\n     ///\n-    /// ```\n-    /// use std::io;\n-    /// use std::io::prelude::*;\n+    /// # Examples\n     ///\n-    /// fn foo() -> io::Result<()> {\n-    /// let stdin = io::stdin();\n-    /// let mut stdin = stdin.lock();\n-    /// let mut buffer = Vec::new();\n+    /// [`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\n+    /// this example, we use [`Cursor`] to read all the bytes in a byte slice\n+    /// in hyphen delimited segments:\n     ///\n-    /// stdin.read_until(b'a', &mut buffer)?;\n+    /// [`Cursor`]: struct.Cursor.html\n     ///\n-    /// println!(\"{:?}\", buffer);\n-    /// # Ok(())\n-    /// # }\n+    /// ```\n+    /// use std::io::{self, BufRead};\n+    ///\n+    /// let mut cursor = io::Cursor::new(b\"lorem-ipsum\");\n+    /// let mut buf = vec![];\n+    ///\n+    /// // cursor is at 'l'\n+    /// let num_bytes = cursor.read_until(b'-', &mut buf)\n+    ///     .expect(\"reading from cursor won't fail\");\n+    /// assert_eq!(num_bytes, 6);\n+    /// assert_eq!(buf, b\"lorem-\");\n+    /// buf.clear();\n+    ///\n+    /// // cursor is at 'i'\n+    /// let num_bytes = cursor.read_until(b'-', &mut buf)\n+    ///     .expect(\"reading from cursor won't fail\");\n+    /// assert_eq!(num_bytes, 5);\n+    /// assert_eq!(buf, b\"ipsum\");\n+    /// buf.clear();\n+    ///\n+    /// // cursor is at EOF\n+    /// let num_bytes = cursor.read_until(b'-', &mut buf)\n+    ///     .expect(\"reading from cursor won't fail\");\n+    /// assert_eq!(num_bytes, 0);\n+    /// assert_eq!(buf, b\"\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> Result<usize> {\n@@ -1337,28 +1351,36 @@ pub trait BufRead: Read {\n     ///\n     /// # Examples\n     ///\n-    /// A locked standard input implements `BufRead`. In this example, we'll\n-    /// read all of the lines from standard input. If we were to do this in\n-    /// an actual project, the [`lines`] method would be easier, of\n-    /// course.\n+    /// [`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\n+    /// this example, we use [`Cursor`] to read all the lines in a byte slice:\n     ///\n-    /// [`lines`]: #method.lines\n-    /// [`read_until`]: #method.read_until\n+    /// [`Cursor`]: struct.Cursor.html\n     ///\n     /// ```\n-    /// use std::io;\n-    /// use std::io::prelude::*;\n-    ///\n-    /// let stdin = io::stdin();\n-    /// let mut stdin = stdin.lock();\n-    /// let mut buffer = String::new();\n-    ///\n-    /// while stdin.read_line(&mut buffer).unwrap() > 0 {\n-    ///     // work with buffer\n-    ///     println!(\"{:?}\", buffer);\n-    ///\n-    ///     buffer.clear();\n-    /// }\n+    /// use std::io::{self, BufRead};\n+    ///\n+    /// let mut cursor = io::Cursor::new(b\"foo\\nbar\");\n+    /// let mut buf = String::new();\n+    ///\n+    /// // cursor is at 'f'\n+    /// let num_bytes = cursor.read_line(&mut buf)\n+    ///     .expect(\"reading from cursor won't fail\");\n+    /// assert_eq!(num_bytes, 4);\n+    /// assert_eq!(buf, \"foo\\n\");\n+    /// buf.clear();\n+    ///\n+    /// // cursor is at 'b'\n+    /// let num_bytes = cursor.read_line(&mut buf)\n+    ///     .expect(\"reading from cursor won't fail\");\n+    /// assert_eq!(num_bytes, 3);\n+    /// assert_eq!(buf, \"bar\");\n+    /// buf.clear();\n+    ///\n+    /// // cursor is at EOF\n+    /// let num_bytes = cursor.read_line(&mut buf)\n+    ///     .expect(\"reading from cursor won't fail\");\n+    /// assert_eq!(num_bytes, 0);\n+    /// assert_eq!(buf, \"\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn read_line(&mut self, buf: &mut String) -> Result<usize> {\n@@ -1378,24 +1400,28 @@ pub trait BufRead: Read {\n     /// This function will yield errors whenever [`read_until`] would have\n     /// also yielded an error.\n     ///\n-    /// # Examples\n-    ///\n-    /// A locked standard input implements `BufRead`. In this example, we'll\n-    /// read some input from standard input, splitting on commas.\n-    ///\n     /// [`io::Result`]: type.Result.html\n     /// [`Vec<u8>`]: ../vec/struct.Vec.html\n     /// [`read_until`]: #method.read_until\n     ///\n+    /// # Examples\n+    ///\n+    /// [`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\n+    /// this example, we use [`Cursor`] to iterate over all hyphen delimited\n+    /// segments in a byte slice\n+    ///\n+    /// [`Cursor`]: struct.Cursor.html\n+    ///\n     /// ```\n-    /// use std::io;\n-    /// use std::io::prelude::*;\n+    /// use std::io::{self, BufRead};\n     ///\n-    /// let stdin = io::stdin();\n+    /// let cursor = io::Cursor::new(b\"lorem-ipsum-dolor\");\n     ///\n-    /// for content in stdin.lock().split(b',') {\n-    ///     println!(\"{:?}\", content.unwrap());\n-    /// }\n+    /// let mut split_iter = cursor.split(b'-').map(|l| l.unwrap());\n+    /// assert_eq!(split_iter.next(), Some(b\"lorem\".to_vec()));\n+    /// assert_eq!(split_iter.next(), Some(b\"ipsum\".to_vec()));\n+    /// assert_eq!(split_iter.next(), Some(b\"dolor\".to_vec()));\n+    /// assert_eq!(split_iter.next(), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn split(self, byte: u8) -> Split<Self> where Self: Sized {\n@@ -1413,17 +1439,22 @@ pub trait BufRead: Read {\n     ///\n     /// # Examples\n     ///\n-    /// A locked standard input implements `BufRead`:\n+    /// [`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\n+    /// this example, we use [`Cursor`] to iterate over all the lines in a byte\n+    /// slice.\n+    ///\n+    /// [`Cursor`]: struct.Cursor.html\n     ///\n     /// ```\n-    /// use std::io;\n-    /// use std::io::prelude::*;\n+    /// use std::io::{self, BufRead};\n     ///\n-    /// let stdin = io::stdin();\n+    /// let cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");\n     ///\n-    /// for line in stdin.lock().lines() {\n-    ///     println!(\"{}\", line.unwrap());\n-    /// }\n+    /// let mut lines_iter = cursor.lines().map(|l| l.unwrap());\n+    /// assert_eq!(lines_iter.next(), Some(String::from(\"lorem\")));\n+    /// assert_eq!(lines_iter.next(), Some(String::from(\"ipsum\")));\n+    /// assert_eq!(lines_iter.next(), Some(String::from(\"dolor\")));\n+    /// assert_eq!(lines_iter.next(), None);\n     /// ```\n     ///\n     /// # Errors"}]}