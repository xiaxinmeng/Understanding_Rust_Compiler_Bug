{"sha": "ab71c183b9120db520abaf162da8095249f64b02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNzFjMTgzYjkxMjBkYjUyMGFiYWYxNjJkYTgwOTUyNDlmNjRiMDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-09T00:19:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-09T01:19:26Z"}, "message": "rustdoc: Update for new impl syntax", "tree": {"sha": "59a7221bb64917258ef1baee75ba8f00aeac84cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59a7221bb64917258ef1baee75ba8f00aeac84cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab71c183b9120db520abaf162da8095249f64b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab71c183b9120db520abaf162da8095249f64b02", "html_url": "https://github.com/rust-lang/rust/commit/ab71c183b9120db520abaf162da8095249f64b02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab71c183b9120db520abaf162da8095249f64b02/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99a571585c47dd90badb44d366c9ff4d2c43b296", "url": "https://api.github.com/repos/rust-lang/rust/commits/99a571585c47dd90badb44d366c9ff4d2c43b296", "html_url": "https://github.com/rust-lang/rust/commit/99a571585c47dd90badb44d366c9ff4d2c43b296"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "ba737a725bff050491f6d2ebcbf82ace7b3b3084", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=ab71c183b9120db520abaf162da8095249f64b02", "patch": "@@ -271,14 +271,14 @@ fn fold_impl(\n #[test]\n fn should_extract_impl_docs() {\n     let doc = test::mk_doc(\n-        ~\"#[doc = \\\"whatever\\\"] impl i for int { fn a() { } }\");\n+        ~\"#[doc = \\\"whatever\\\"] impl int { fn a() { } }\");\n     assert doc.cratemod().impls()[0].desc() == some(~\"whatever\");\n }\n \n #[test]\n fn should_extract_impl_method_docs() {\n     let doc = test::mk_doc(\n-        ~\"impl i for int {\\\n+        ~\"impl int {\\\n          #[doc = \\\"desc\\\"]\\\n          fn f(a: bool) -> bool { }\\\n          }\");"}, {"sha": "c8ec7e7f40c8e282ad71f5f2b4595878483e04e0", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=ab71c183b9120db520abaf162da8095249f64b02", "patch": "@@ -77,7 +77,7 @@ fn should_promote_trait_method_desc() {\n #[test]\n fn should_promote_impl_method_desc() {\n     let doc = test::mk_doc(\n-        ~\"impl i for int { #[doc = \\\"desc\\\"] fn a() { } }\");\n+        ~\"impl int { #[doc = \\\"desc\\\"] fn a() { } }\");\n     assert doc.cratemod().impls()[0].methods[0].brief == some(~\"desc\");\n }\n "}, {"sha": "9fd4cea4bfdd16d54cc60e00a0f099e728541bcb", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=ab71c183b9120db520abaf162da8095249f64b02", "patch": "@@ -248,21 +248,9 @@ fn impldoc_from_impl(\n     }\n }\n \n-#[test]\n-fn should_extract_impls_with_names() {\n-    let doc = test::mk_doc(~\"impl i for int { fn a() { } }\");\n-    assert doc.cratemod().impls()[0].name() == ~\"i\";\n-}\n-\n-#[test]\n-fn should_extract_impls_without_names() {\n-    let doc = test::mk_doc(~\"impl of i for int { fn a() { } }\");\n-    assert doc.cratemod().impls()[0].name() == ~\"i\";\n-}\n-\n #[test]\n fn should_extract_impl_methods() {\n-    let doc = test::mk_doc(~\"impl i for int { fn f() { } }\");\n+    let doc = test::mk_doc(~\"impl int { fn f() { } }\");\n     assert doc.cratemod().impls()[0].methods[0].name == ~\"f\";\n }\n "}, {"sha": "4ac2646f1a096cca2b7fd76b0a6faa205fef64c2", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=ab71c183b9120db520abaf162da8095249f64b02", "patch": "@@ -241,7 +241,21 @@ fn header_name(doc: doc::itemtag) -> ~str {\n }\n \n fn header_text(doc: doc::itemtag) -> ~str {\n-    header_text_(header_kind(doc), header_name(doc))\n+    match doc {\n+      doc::impltag(impldoc) => {\n+        let header_kind = header_kind(doc);\n+        let desc = if impldoc.trait_types.is_empty() {\n+            fmt!{\"for `%s`\", impldoc.self_ty.get()}\n+        } else {\n+            fmt!{\"of `%s` for `%s`\", impldoc.trait_types[0],\n+                 impldoc.self_ty.get()}\n+        };\n+        fmt!{\"%s %s\", header_kind, desc}\n+      }\n+      _ => {\n+        header_text_(header_kind(doc), header_name(doc))\n+      }\n+    }\n }\n \n fn header_text_(kind: ~str, name: ~str) -> ~str {\n@@ -697,34 +711,34 @@ fn write_impl(ctxt: ctxt, doc: doc::impldoc) {\n \n #[test]\n fn should_write_impl_header() {\n-    let markdown = test::render(~\"impl i for int { fn a() { } }\");\n-    assert str::contains(markdown, ~\"## Implementation `i for int`\");\n+    let markdown = test::render(~\"impl int { fn a() { } }\");\n+    assert str::contains(markdown, ~\"## Implementation for `int`\");\n }\n \n #[test]\n fn should_write_impl_header_with_trait() {\n-    let markdown = test::render(~\"impl i of j for int { fn a() { } }\");\n-    assert str::contains(markdown, ~\"## Implementation `i of j for int`\");\n+    let markdown = test::render(~\"impl int: j { fn a() { } }\");\n+    assert str::contains(markdown, ~\"## Implementation of `j` for `int`\");\n }\n \n #[test]\n fn should_write_impl_desc() {\n     let markdown = test::render(\n-        ~\"#[doc = \\\"desc\\\"] impl i for int { fn a() { } }\");\n+        ~\"#[doc = \\\"desc\\\"] impl int { fn a() { } }\");\n     assert str::contains(markdown, ~\"desc\");\n }\n \n #[test]\n fn should_write_impl_method_header() {\n     let markdown = test::render(\n-        ~\"impl i for int { fn a() { } }\");\n+        ~\"impl int { fn a() { } }\");\n     assert str::contains(markdown, ~\"### Method `a`\");\n }\n \n #[test]\n fn should_write_impl_method_signature() {\n     let markdown = test::render(\n-        ~\"impl i for int { fn a() { } }\");\n+        ~\"impl int { fn a() { } }\");\n     assert str::contains(markdown, ~\"\\n    fn a()\");\n }\n "}, {"sha": "1bc155f5d9e81ce231cc807927807134bcf8ff89", "filename": "src/rustdoc/sectionalize_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsectionalize_pass.rs?ref=ab71c183b9120db520abaf162da8095249f64b02", "patch": "@@ -217,7 +217,7 @@ fn should_sectionalize_trait_methods() {\n #[test]\n fn should_sectionalize_impl_methods() {\n     let doc = test::mk_doc(\n-        ~\"impl i for bool {\n+        ~\"impl bool {\n          #[doc = \\\"\\\n          # Header\\n\\\n          Body\\\"]\\"}, {"sha": "1ea88f01dbb78601c57d26d35db3befbc21fdc15", "filename": "src/rustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_item_type_pass.rs?ref=ab71c183b9120db520abaf162da8095249f64b02", "patch": "@@ -34,7 +34,7 @@ fn test() {\n          fn ifn() { } \\\n          enum ienum { ivar } \\\n          trait itrait { fn a(); } \\\n-         impl iimpl for int { fn a() { } } \\\n+         impl int { fn a() { } } \\\n          type itype = int;\";\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv, ~\"\");\n@@ -43,7 +43,7 @@ fn test() {\n         assert doc.cratemod().items[1].name() == ~\"itype\";\n         assert doc.cratemod().items[2].name() == ~\"ienum\";\n         assert doc.cratemod().items[3].name() == ~\"itrait\";\n-        assert doc.cratemod().items[4].name() == ~\"iimpl\";\n+        assert doc.cratemod().items[4].name() == ~\"__extensions__\";\n         assert doc.cratemod().items[5].name() == ~\"ifn\";\n         assert doc.cratemod().items[6].name() == ~\"imod\";\n         assert doc.cratemod().items[7].name() == ~\"inmod\";"}, {"sha": "e9a90455968e276396bbbda01dcb867f506ff135", "filename": "src/rustdoc/text_pass.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftext_pass.rs?ref=ab71c183b9120db520abaf162da8095249f64b02", "patch": "@@ -145,28 +145,28 @@ fn should_execute_op_on_trait_method_desc() {\n #[test]\n fn should_execute_op_on_impl_brief() {\n     let doc = test::mk_doc(\n-        ~\"#[doc = \\\" a \\\"] impl i for int { fn a() { } }\");\n+        ~\"#[doc = \\\" a \\\"] impl int { fn a() { } }\");\n     assert doc.cratemod().impls()[0].brief() == some(~\"a\");\n }\n \n #[test]\n fn should_execute_op_on_impl_desc() {\n     let doc = test::mk_doc(\n-        ~\"#[doc = \\\" a \\\"] impl i for int { fn a() { } }\");\n+        ~\"#[doc = \\\" a \\\"] impl int { fn a() { } }\");\n     assert doc.cratemod().impls()[0].desc() == some(~\"a\");\n }\n \n #[test]\n fn should_execute_op_on_impl_method_brief() {\n     let doc = test::mk_doc(\n-        ~\"impl i for int { #[doc = \\\" a \\\"] fn a() { } }\");\n+        ~\"impl int { #[doc = \\\" a \\\"] fn a() { } }\");\n     assert doc.cratemod().impls()[0].methods[0].brief == some(~\"a\");\n }\n \n #[test]\n fn should_execute_op_on_impl_method_desc() {\n     let doc = test::mk_doc(\n-        ~\"impl i for int { #[doc = \\\" a \\\"] fn a() { } }\");\n+        ~\"impl int { #[doc = \\\" a \\\"] fn a() { } }\");\n     assert doc.cratemod().impls()[0].methods[0].desc == some(~\"a\");\n }\n \n@@ -230,7 +230,7 @@ fn should_execute_on_trait_method_section_bodies() {\n #[test]\n fn should_execute_on_impl_method_section_headers() {\n     let doc = test::mk_doc(\n-        ~\"impl i for bool {\n+        ~\"impl bool {\n          #[doc = \\\"\\\n          # Header   \\n\\\n          Body\\\"]\\\n@@ -242,7 +242,7 @@ fn should_execute_on_impl_method_section_headers() {\n #[test]\n fn should_execute_on_impl_method_section_bodies() {\n     let doc = test::mk_doc(\n-        ~\"impl i for bool {\n+        ~\"impl bool {\n          #[doc = \\\"\\\n          # Header\\n\\\n          Body    \\\"]\\"}, {"sha": "6c89f0dc769262a10f362fe2e166c960a68f427b", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab71c183b9120db520abaf162da8095249f64b02/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=ab71c183b9120db520abaf162da8095249f64b02", "patch": "@@ -254,25 +254,25 @@ fn fold_impl(\n \n #[test]\n fn should_add_impl_trait_types() {\n-    let doc = test::mk_doc(~\"impl i of j for int { fn a<T>() { } }\");\n+    let doc = test::mk_doc(~\"impl int: j { fn a<T>() { } }\");\n     assert doc.cratemod().impls()[0].trait_types[0] == ~\"j\";\n }\n \n #[test]\n fn should_not_add_impl_trait_types_if_none() {\n-    let doc = test::mk_doc(~\"impl i for int { fn a() { } }\");\n+    let doc = test::mk_doc(~\"impl int { fn a() { } }\");\n     assert vec::len(doc.cratemod().impls()[0].trait_types) == 0;\n }\n \n #[test]\n fn should_add_impl_self_ty() {\n-    let doc = test::mk_doc(~\"impl i for int { fn a() { } }\");\n+    let doc = test::mk_doc(~\"impl int { fn a() { } }\");\n     assert doc.cratemod().impls()[0].self_ty == some(~\"int\");\n }\n \n #[test]\n fn should_add_impl_method_sigs() {\n-    let doc = test::mk_doc(~\"impl i for int { fn a<T>() -> int { fail } }\");\n+    let doc = test::mk_doc(~\"impl int { fn a<T>() -> int { fail } }\");\n     assert doc.cratemod().impls()[0].methods[0].sig\n         == some(~\"fn a<T>() -> int\");\n }"}]}