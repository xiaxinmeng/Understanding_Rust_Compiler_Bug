{"sha": "c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YjIzZjlhODZmY2RmMzI4ZWJiMzQ5ZDlhNWFkNGU0YzdkZmU2Y2U=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-01-25T08:53:17Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-01-25T08:53:17Z"}, "message": "Replacing str::unsafe_from_bytes with str::from_bytes (part 1)", "tree": {"sha": "96ba7443233c718f89e2ebaa5a673882ca7c2c33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96ba7443233c718f89e2ebaa5a673882ca7c2c33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce", "html_url": "https://github.com/rust-lang/rust/commit/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9750e83a17a8f9f865eae757dcdccf374b1c82b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9750e83a17a8f9f865eae757dcdccf374b1c82b7", "html_url": "https://github.com/rust-lang/rust/commit/9750e83a17a8f9f865eae757dcdccf374b1c82b7"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "a06e01f491e769702424c9b34ee737e7fbe2c274", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce", "patch": "@@ -440,6 +440,7 @@ mod rt {\n             let head = s[0];\n             if head == '+' as u8 || head == '-' as u8 || head == ' ' as u8 {\n                 let headstr = str::unsafe_from_bytes([head]);\n+                // FIXME: not UTF-8 safe\n                 let bytelen = str::byte_len(s);\n                 let numpart = str::substr(s, 1u, bytelen - 1u);\n                 ret headstr + padstr + numpart;"}, {"sha": "89aad5d7777856e632d2715c8b742a9a69a4f0d1", "filename": "src/libstd/freebsd_os.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibstd%2Ffreebsd_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibstd%2Ffreebsd_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffreebsd_os.rs?ref=c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce", "patch": "@@ -129,7 +129,8 @@ fn dylib_filename(base: str) -> str { ret \"lib\" + base + \".so\"; }\n /// followed by a path separator\n fn get_exe_path() -> option::t<fs::path> unsafe {\n     let bufsize = 1023u;\n-    let path = str::unsafe_from_bytes(vec::init_elt(bufsize, 0u8));\n+    // FIXME: path \"strings\" will likely need fixing...\n+    let path = str::from_bytes(vec::init_elt(bufsize, 0u8));\n     let mib = [libc_constants::CTL_KERN,\n                libc_constants::KERN_PROC,\n                libc_constants::KERN_PROC_PATHNAME, -1i32];"}, {"sha": "934352e7788445897651ede08f0d401426f52b35", "filename": "src/libstd/generic_os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibstd%2Fgeneric_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibstd%2Fgeneric_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgeneric_os.rs?ref=c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce", "patch": "@@ -75,7 +75,7 @@ fn getenv(n: str) -> option::t<str> {\n             unsafe {\n                 vec::unsafe::set_len(v, res);\n             }\n-            ret option::some(str::unsafe_from_bytes(v));\n+            ret option::some(str::from_bytes(v)); // UTF-8 or fail\n         } else { nsize = res; }\n     }\n     fail;"}, {"sha": "82b1197a51fbd226d96aaa9fe4a1c5a959ac9a39", "filename": "src/libstd/linux_os.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibstd%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibstd%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flinux_os.rs?ref=c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce", "patch": "@@ -125,7 +125,8 @@ fn dylib_filename(base: str) -> str { ret \"lib\" + base + \".so\"; }\n /// followed by a path separator\n fn get_exe_path() -> option::t<fs::path> {\n     let bufsize = 1023u;\n-    let path = str::unsafe_from_bytes(vec::init_elt(bufsize, 0u8));\n+    // FIXME: path \"strings\" will likely need fixing...\n+    let path = str::from_bytes(vec::init_elt(bufsize, 0u8));\n     ret str::as_buf(\"/proc/self/exe\", { |proc_self_buf|\n         str::as_buf(path, { |path_buf|\n             if libc::readlink(proc_self_buf, path_buf, bufsize) != -1 {"}, {"sha": "cd984870781cb0cab0f32ab3eb91f358646f5dcb", "filename": "src/libstd/macos_os.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibstd%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibstd%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacos_os.rs?ref=c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce", "patch": "@@ -133,8 +133,9 @@ fn dylib_filename(base: str) -> str { ret \"lib\" + base + \".dylib\"; }\n \n fn get_exe_path() -> option::t<fs::path> {\n     // FIXME: This doesn't handle the case where the buffer is too small\n+    // FIXME: path \"strings\" will likely need fixing...\n     let bufsize = 1023u32;\n-    let path = str::unsafe_from_bytes(vec::init_elt(bufsize as uint, 0u8));\n+    let path = str::from_bytes(vec::init_elt(bufsize as uint, 0u8));\n     ret str::as_buf(path, { |path_buf|\n         if mac_libc::_NSGetExecutablePath(path_buf,\n                                           ptr::mut_addr_of(bufsize)) == 0i32 {"}, {"sha": "5b2de1e57d0c880358f8cb54c606babdcd82744f", "filename": "src/libstd/run_program.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibstd%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibstd%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun_program.rs?ref=c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce", "patch": "@@ -216,7 +216,7 @@ fn read_all(rd: io::reader) -> str {\n     let buf = \"\";\n     while !rd.eof() {\n         let bytes = rd.read_bytes(4096u);\n-        buf += str::unsafe_from_bytes(bytes);\n+        buf += str::from_bytes(bytes);\n     }\n     ret buf;\n }\n@@ -347,7 +347,7 @@ mod tests {\n             let buf = \"\";\n             while !reader.eof() {\n                 let bytes = reader.read_bytes(4096u);\n-                buf += str::unsafe_from_bytes(bytes);\n+                buf += str::from_bytes(bytes);\n             }\n             os::fclose(file);\n             ret buf;"}, {"sha": "d92a42d2c5ee400eef22c9a1e4a611b150a2e583", "filename": "src/libstd/uvtmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibstd%2Fuvtmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibstd%2Fuvtmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuvtmp.rs?ref=c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce", "patch": "@@ -131,7 +131,7 @@ fn test_http() {\n                     unsafe {\n                         log(error, len);\n                         let buf = vec::unsafe::from_buf(buf, len as uint);\n-                        let str = str::unsafe_from_bytes(buf);\n+                        let str = str::from_bytes(buf);\n                         #error(\"read something\");\n                         io::println(str);\n                     }\n@@ -146,4 +146,4 @@ fn test_http() {\n     }\n     join_thread(thread);\n     delete_thread(thread);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "83306c757a4dd9bbad46fcfbc77be85449915223", "filename": "src/libstd/win32_os.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibstd%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Flibstd%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fwin32_os.rs?ref=c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce", "patch": "@@ -113,8 +113,9 @@ fn getcwd() -> str { ret rustrt::rust_getcwd(); }\n \n fn get_exe_path() -> option::t<fs::path> {\n     // FIXME: This doesn't handle the case where the buffer is too small\n+    // FIXME: path \"strings\" will likely need fixing...\n     let bufsize = 1023u;\n-    let path = str::unsafe_from_bytes(vec::init_elt(bufsize, 0u8));\n+    let path = str::from_bytes(vec::init_elt(bufsize, 0u8));\n     ret str::as_buf(path, { |path_buf|\n         if kernel32::GetModuleFileNameA(0u, path_buf,\n                                         bufsize as u32) != 0u32 {"}, {"sha": "8be28fabd79435fc9209911e0cfada3e96b1c785", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce", "patch": "@@ -32,7 +32,7 @@ import comm::recv;\n import comm::send;\n \n fn map(&&filename: [u8], emit: map_reduce::putter<[u8], int>) {\n-    let f = io::file_reader(str::unsafe_from_bytes(filename));\n+    let f = io::file_reader(str::from_bytes(filename));\n \n     while true {\n         alt read_word(f) {"}, {"sha": "9301d93874ebed0e4ed623a7f007df05e3b04fb8", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=c7b23f9a86fcdf328ebb349d9a5ad4e4c7dfe6ce", "patch": "@@ -81,7 +81,7 @@ mod map_reduce {\n               mapper_done { num_mappers -= 1; }\n               find_reducer(k, cc) {\n                 let c;\n-                alt reducers.find(str::unsafe_from_bytes(k)) {\n+                alt reducers.find(str::from_bytes(k)) {\n                   some(_c) { c = _c; }\n                   none { c = 0; }\n                 }"}]}