{"sha": "c1f239424534af38fd1dfab861fab6813c1c9c97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZjIzOTQyNDUzNGFmMzhmZDFkZmFiODYxZmFiNjgxM2MxYzljOTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-23T22:45:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-23T23:29:21Z"}, "message": "Zero locals with initializers that may break or terminate. Closes #787", "tree": {"sha": "4ef0582d03eb62bfd2ced02b2d2b491d72391306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ef0582d03eb62bfd2ced02b2d2b491d72391306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1f239424534af38fd1dfab861fab6813c1c9c97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f239424534af38fd1dfab861fab6813c1c9c97", "html_url": "https://github.com/rust-lang/rust/commit/c1f239424534af38fd1dfab861fab6813c1c9c97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1f239424534af38fd1dfab861fab6813c1c9c97/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0", "html_url": "https://github.com/rust-lang/rust/commit/c011f131446d3e2cbbb9266bfefc9fd9637f9bd0"}], "stats": {"total": 93, "additions": 92, "deletions": 1}, "files": [{"sha": "de05fd265e2e02fc9135c9f1bfeaa62c154a4175", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c1f239424534af38fd1dfab861fab6813c1c9c97/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f239424534af38fd1dfab861fab6813c1c9c97/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c1f239424534af38fd1dfab861fab6813c1c9c97", "patch": "@@ -4758,6 +4758,11 @@ fn init_local(bcx: @block_ctxt, local: &@ast::local) -> result {\n     let llptr = bcx.fcx.lllocals.get(local.node.id);\n     // Make a note to drop this slot on the way out.\n     add_clean(bcx, llptr, ty);\n+\n+    if (must_zero(local)) {\n+        bcx = zero_alloca(bcx, llptr, ty).bcx;\n+    }\n+\n     alt local.node.init {\n       some(init) {\n         alt init.op {\n@@ -4775,12 +4780,47 @@ fn init_local(bcx: @block_ctxt, local: &@ast::local) -> result {\n           }\n         }\n       }\n-      _ { bcx = zero_alloca(bcx, llptr, ty).bcx; }\n+      _ { }\n     }\n     bcx =\n         trans_alt::bind_irrefutable_pat(bcx, local.node.pat, llptr,\n                                         bcx.fcx.lllocals, false);\n     ret rslt(bcx, llptr);\n+\n+    fn must_zero(local: &@ast::local) -> bool {\n+        alt local.node.init {\n+          some(init) {\n+            might_not_init(init.expr)\n+          }\n+          none. { true }\n+        }\n+    }\n+\n+    fn might_not_init(expr: &@ast::expr) -> bool {\n+        type env = @mutable bool;\n+        let e = @mutable false;\n+        let visitor = visit::mk_vt(@{\n+            visit_expr: fn(ex: &@ast::expr, e: &env, v: &vt<env>) {\n+                // FIXME: Probably also need to account for expressions that\n+                // fail but since we don't unwind yet, it doesn't seem to be a\n+                // problem\n+                let might_not_init = alt ex.node {\n+                  ast::expr_ret(_) { true }\n+                  ast::expr_break. { true }\n+                  ast::expr_cont. { true }\n+                  _ { false }\n+                };\n+                if might_not_init {\n+                    *e = true;\n+                } else {\n+                    visit::visit_expr(ex, e, v);\n+                }\n+            }\n+            with *visit::default_visitor()\n+        });\n+        visitor.visit_expr(expr, e, visitor);\n+        ret *e;\n+    }\n }\n \n fn zero_alloca(cx: &@block_ctxt, llptr: ValueRef, t: ty::t) -> result {"}, {"sha": "4e6bda36845577c72322a330dd8a4e5a7100ed14", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c1f239424534af38fd1dfab861fab6813c1c9c97/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f239424534af38fd1dfab861fab6813c1c9c97/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=c1f239424534af38fd1dfab861fab6813c1c9c97", "patch": "@@ -0,0 +1,51 @@\n+// Issue #787\n+// Don't try to clean up uninitizaed locals\n+\n+use std;\n+\n+fn test_break() {\n+    while true {\n+        let x: @int = break;\n+    }\n+}\n+\n+fn test_cont() {\n+    let i = 0;\n+    while i < 1 {\n+        i += 1;\n+        let x: @int = cont;\n+    }\n+}\n+\n+fn test_ret() {\n+    let x: @int = ret;\n+}\n+\n+fn test_fail() {\n+    fn f() {\n+        std::task::unsupervise();\n+        let x: @int = fail;\n+    }\n+    let g = f;\n+    std::task::spawn(g);\n+}\n+\n+fn test_fail_indirect() {\n+    fn f() -> ! {\n+        fail;\n+    }\n+    fn g() {\n+        std::task::unsupervise();\n+        let x: @int = f();\n+    }\n+    let h = g;\n+    std::task::spawn(h);\n+}\n+\n+fn main() {\n+    test_break();\n+    test_cont();\n+    test_ret();\n+    test_fail();\n+    test_fail_indirect();\n+}\n\\ No newline at end of file"}]}