{"sha": "3a2df84d89e2d16d925663ee0ce9227a87b49bc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMmRmODRkODllMmQxNmQ5MjU2NjNlZTBjZTkyMjdhODdiNDliYzk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-14T21:02:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-15T01:19:08Z"}, "message": "core: Rename str::from_cstr et. al to from_buf", "tree": {"sha": "5fe5778ee845b37f241e8d750fa1a2937000f3ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fe5778ee845b37f241e8d750fa1a2937000f3ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a2df84d89e2d16d925663ee0ce9227a87b49bc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a2df84d89e2d16d925663ee0ce9227a87b49bc9", "html_url": "https://github.com/rust-lang/rust/commit/3a2df84d89e2d16d925663ee0ce9227a87b49bc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a2df84d89e2d16d925663ee0ce9227a87b49bc9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e480708a2c66d49be20edbaac719db47918c239", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e480708a2c66d49be20edbaac719db47918c239", "html_url": "https://github.com/rust-lang/rust/commit/9e480708a2c66d49be20edbaac719db47918c239"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "f30348f9e85b1913b88e72a348d9003a6ab91c16", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a2df84d89e2d16d925663ee0ce9227a87b49bc9/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2df84d89e2d16d925663ee0ce9227a87b49bc9/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=3a2df84d89e2d16d925663ee0ce9227a87b49bc9", "patch": "@@ -66,7 +66,7 @@ fn fill_charp_buf(f: fn(*mutable c_char, size_t) -> bool)\n     let buf = vec::to_mut(vec::from_elem(tmpbuf_sz, 0u8 as c_char));\n     vec::as_mut_buf(buf) { |b|\n         if f(b, tmpbuf_sz as size_t) {\n-            some(str::from_cstr(b as *u8))\n+            some(str::from_buf(b as *u8))\n         } else {\n             none\n         }\n@@ -125,7 +125,7 @@ fn getenv(n: str) -> option<str> unsafe {\n             option::none::<str>\n         } else {\n             let s = unsafe::reinterpret_cast(s);\n-            option::some::<str>(str::from_cstr(s))\n+            option::some::<str>(str::from_buf(s))\n         };\n }\n "}, {"sha": "4fea35638a4f56ae8e7fc30973f1e4d4c15684c6", "filename": "src/libcore/str.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3a2df84d89e2d16d925663ee0ce9227a87b49bc9/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2df84d89e2d16d925663ee0ce9227a87b49bc9/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=3a2df84d89e2d16d925663ee0ce9227a87b49bc9", "patch": "@@ -14,8 +14,8 @@ export\n    push_char,\n    from_char,\n    from_chars,\n-   from_cstr,\n-   from_cstr_len,\n+   from_buf,\n+   from_buf_len,\n    concat,\n    connect,\n \n@@ -182,27 +182,27 @@ fn from_chars(chs: [char]) -> str {\n     ret buf;\n }\n \n-#[doc = \"Create a Rust string from a null-terminated C string\"]\n-fn from_cstr(cstr: *u8) -> str unsafe {\n-    let mut curr = cstr, i = 0u;\n+#[doc = \"Create a Rust string from a null-terminated *u8 buffer\"]\n+fn from_buf(buf: *u8) -> str unsafe {\n+    let mut curr = buf, i = 0u;\n     while *curr != 0u8 {\n         i += 1u;\n-        curr = ptr::offset(cstr, i);\n+        curr = ptr::offset(buf, i);\n     }\n-    ret from_cstr_len(cstr, i);\n+    ret from_buf_len(buf, i);\n }\n \n-#[doc = \"Create a Rust string from a C string of the given length\"]\n-fn from_cstr_len(cstr: *u8, len: uint) -> str unsafe {\n-    let mut buf: [u8] = [];\n-    vec::reserve(buf, len + 1u);\n-    vec::as_buf(buf) {|b| ptr::memcpy(b, cstr, len); }\n-    vec::unsafe::set_len(buf, len);\n-    buf += [0u8];\n+#[doc = \"Create a Rust string from a *u8 buffer of the given length\"]\n+fn from_buf_len(buf: *u8, len: uint) -> str unsafe {\n+    let mut v: [u8] = [];\n+    vec::reserve(v, len + 1u);\n+    vec::as_buf(v) {|b| ptr::memcpy(b, buf, len); }\n+    vec::unsafe::set_len(v, len);\n+    v += [0u8];\n \n-    assert is_utf8(buf);\n-    let s: str = ::unsafe::reinterpret_cast(buf);\n-    ::unsafe::leak(buf);\n+    assert is_utf8(v);\n+    let s: str = ::unsafe::reinterpret_cast(v);\n+    ::unsafe::leak(v);\n     ret s;\n }\n \n@@ -1946,18 +1946,18 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_from_cstr() unsafe {\n+    fn test_from_buf() unsafe {\n         let a = [65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n         let b = vec::unsafe::to_ptr(a);\n-        let c = from_cstr(b);\n+        let c = from_buf(b);\n         assert (c == \"AAAAAAA\");\n     }\n \n     #[test]\n-    fn test_from_cstr_len() unsafe {\n+    fn test_from_buf_len() unsafe {\n         let a = [65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n         let b = vec::unsafe::to_ptr(a);\n-        let c = from_cstr_len(b, 3u);\n+        let c = from_buf_len(b, 3u);\n         assert (c == \"AAA\");\n     }\n \n@@ -1979,7 +1979,7 @@ mod tests {\n     fn test_as_buf2() unsafe {\n         let s = \"hello\";\n         let sb = as_buf(s, {|b| b });\n-        let s_cstr = from_cstr(sb);\n+        let s_cstr = from_buf(sb);\n         assert (eq(s_cstr, s));\n     }\n "}, {"sha": "b676a108be6e4c48cdf9e093dfe3d161540d33a7", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2df84d89e2d16d925663ee0ce9227a87b49bc9/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2df84d89e2d16d925663ee0ce9227a87b49bc9/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=3a2df84d89e2d16d925663ee0ce9227a87b49bc9", "patch": "@@ -27,7 +27,7 @@ fn llvm_err(sess: session, msg: str) -> ! unsafe {\n     let buf = llvm::LLVMRustGetLastError();\n     if buf == ptr::null() {\n         sess.fatal(msg);\n-    } else { sess.fatal(msg + \": \" + str::from_cstr(buf)); }\n+    } else { sess.fatal(msg + \": \" + str::from_buf(buf)); }\n }\n \n fn load_intrinsics_bc(sess: session) -> option<ModuleRef> {"}, {"sha": "124e148da74655228f94a6393882e11d72bed93b", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a2df84d89e2d16d925663ee0ce9227a87b49bc9/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2df84d89e2d16d925663ee0ce9227a87b49bc9/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=3a2df84d89e2d16d925663ee0ce9227a87b49bc9", "patch": "@@ -216,7 +216,7 @@ fn get_metadata_section(sess: session::session,\n     let si = mk_section_iter(of.llof);\n     while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n         let name_buf = llvm::LLVMGetSectionName(si.llsi);\n-        let name = unsafe { str::from_cstr(name_buf) };\n+        let name = unsafe { str::from_buf(name_buf) };\n         if str::eq(name, sess.targ_cfg.target_strs.meta_sect_name) {\n             let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n             let csz = llvm::LLVMGetSectionSize(si.llsi) as uint;"}]}