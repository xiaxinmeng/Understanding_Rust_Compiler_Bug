{"sha": "3ad6feda56d4033a498e20c2d385147fe411678f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZDZmZWRhNTZkNDAzM2E0OThlMjBjMmQzODUxNDdmZTQxMTY3OGY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-07-31T23:02:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-31T23:02:12Z"}, "message": "Rollup merge of #74991 - JulianKnodt:74199, r=lcnr\n\nFix Const-Generic Cycle ICE #74199\n\nThis PR intends to fix the bug in Issue #74199 by following the suggestion provided of ignoring the error that causes the ICE.\n\nThis does not fix the underlying cycle detection issue, but fixes the ICE.\nAlso adds a test to check that it doesn't causes an ICE but returns a valid error for now.\n\nr? @lcnr\n\nEdit: Also it's funny how this PR number is an anagram of the issue number", "tree": {"sha": "26942eb99a26384da18915d2efee52b3eea548a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26942eb99a26384da18915d2efee52b3eea548a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ad6feda56d4033a498e20c2d385147fe411678f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJKL1CRBK7hj4Ov3rIwAAdHIIAEjwMzDpEAAiCsQ2KzqLXzUU\niXy9q/f38XlT/uU0zDCJX8plZZ9rbf2QCJrcSpGjo3gjZk7DTJRqhxwSjY74wqqI\nBSM0Fo3MovinspqozTeCsNqFahyA8eCAG9NbY9ndzKmgOxaFqq4P9qiOQF0qx9fE\nWsNMJlZby3004bQ8f4J6eofd5Pehmbj0VHK8pcPFqijqKXJwrpTWR7TbVDr7lSbm\n0e7p4p5u06bzJHRTdX+fELjcH2z3Iy0t4CJaCbQmAEl3tVqf2Akz25908gzDVcR3\nU/dZxzO9j4axd0mY5jHyosT/NKic9FhDcrkq/lmlFuC2W5vkr96M97hDYatUHJ8=\n=sRXw\n-----END PGP SIGNATURE-----\n", "payload": "tree 26942eb99a26384da18915d2efee52b3eea548a1\nparent ff5ccc82eb58d76f5f4335dad4642becd1c69539\nparent 96b5dee9ab3b4b0c8f5086011b7a15b7c4aed48c\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1596236532 +0900\ncommitter GitHub <noreply@github.com> 1596236532 +0900\n\nRollup merge of #74991 - JulianKnodt:74199, r=lcnr\n\nFix Const-Generic Cycle ICE #74199\n\nThis PR intends to fix the bug in Issue #74199 by following the suggestion provided of ignoring the error that causes the ICE.\n\nThis does not fix the underlying cycle detection issue, but fixes the ICE.\nAlso adds a test to check that it doesn't causes an ICE but returns a valid error for now.\n\nr? @lcnr\n\nEdit: Also it's funny how this PR number is an anagram of the issue number\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad6feda56d4033a498e20c2d385147fe411678f", "html_url": "https://github.com/rust-lang/rust/commit/3ad6feda56d4033a498e20c2d385147fe411678f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ad6feda56d4033a498e20c2d385147fe411678f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff5ccc82eb58d76f5f4335dad4642becd1c69539", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5ccc82eb58d76f5f4335dad4642becd1c69539", "html_url": "https://github.com/rust-lang/rust/commit/ff5ccc82eb58d76f5f4335dad4642becd1c69539"}, {"sha": "96b5dee9ab3b4b0c8f5086011b7a15b7c4aed48c", "url": "https://api.github.com/repos/rust-lang/rust/commits/96b5dee9ab3b4b0c8f5086011b7a15b7c4aed48c", "html_url": "https://github.com/rust-lang/rust/commit/96b5dee9ab3b4b0c8f5086011b7a15b7c4aed48c"}], "stats": {"total": 178, "additions": 178, "deletions": 0}, "files": [{"sha": "b810c9824ce66eb5379362cbd49857f29b7037ca", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ad6feda56d4033a498e20c2d385147fe411678f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad6feda56d4033a498e20c2d385147fe411678f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=3ad6feda56d4033a498e20c2d385147fe411678f", "patch": "@@ -161,6 +161,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_sig(current_item, tcx.fn_sig(def_id), self.covariant);\n             }\n \n+            ty::Error(_) => {}\n             _ => {\n                 span_bug!(\n                     tcx.def_span(def_id),"}, {"sha": "12ea850c8f686f79a3c39950df8f10e19874f9b6", "filename": "src/test/ui/const-generics/nested-type.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3ad6feda56d4033a498e20c2d385147fe411678f/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad6feda56d4033a498e20c2d385147fe411678f/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs?ref=3ad6feda56d4033a498e20c2d385147fe411678f", "patch": "@@ -0,0 +1,18 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: [u8; {\n+//~^ ERROR cycle detected\n+//~| ERROR cycle detected\n+    struct Foo<const N: usize>;\n+\n+    impl<const N: usize> Foo<N> {\n+        fn value() -> usize {\n+            N\n+        }\n+    }\n+\n+    Foo::<17>::value()\n+}]>;\n+\n+fn main() {}"}, {"sha": "da0e8032404fc53c4c70d28e49821f30b65c9593", "filename": "src/test/ui/const-generics/nested-type.stderr", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/3ad6feda56d4033a498e20c2d385147fe411678f/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ad6feda56d4033a498e20c2d385147fe411678f/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.stderr?ref=3ad6feda56d4033a498e20c2d385147fe411678f", "patch": "@@ -0,0 +1,159 @@\n+error[E0391]: cycle detected when computing type of `Foo`\n+  --> $DIR/nested-type.rs:4:1\n+   |\n+LL | struct Foo<const N: [u8; {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...which requires computing type of `Foo::N`...\n+  --> $DIR/nested-type.rs:4:18\n+   |\n+LL | struct Foo<const N: [u8; {\n+   |                  ^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires type-checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires computing the variances of `Foo::{{constant}}#0::Foo`...\n+  --> $DIR/nested-type.rs:7:5\n+   |\n+LL |     struct Foo<const N: usize>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which requires computing the variances for items in this crate...\n+   = note: ...which again requires computing type of `Foo`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/nested-type.rs:1:1\n+   |\n+LL | / #![feature(const_generics)]\n+LL | | #![allow(incomplete_features)]\n+LL | |\n+LL | | struct Foo<const N: [u8; {\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n+\n+error[E0391]: cycle detected when computing type of `Foo`\n+  --> $DIR/nested-type.rs:4:1\n+   |\n+LL | struct Foo<const N: [u8; {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...which requires computing type of `Foo::N`...\n+  --> $DIR/nested-type.rs:4:18\n+   |\n+LL | struct Foo<const N: [u8; {\n+   |                  ^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating + checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires const-evaluating `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires type-checking `Foo::{{constant}}#0`...\n+  --> $DIR/nested-type.rs:4:26\n+   |\n+LL |   struct Foo<const N: [u8; {\n+   |  __________________________^\n+LL | |\n+LL | |\n+LL | |     struct Foo<const N: usize>;\n+...  |\n+LL | |     Foo::<17>::value()\n+LL | | }]>;\n+   | |_^\n+note: ...which requires computing the variances of `Foo::{{constant}}#0::Foo`...\n+  --> $DIR/nested-type.rs:7:5\n+   |\n+LL |     struct Foo<const N: usize>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which requires computing the variances for items in this crate...\n+   = note: ...which again requires computing type of `Foo`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/nested-type.rs:1:1\n+   |\n+LL | / #![feature(const_generics)]\n+LL | | #![allow(incomplete_features)]\n+LL | |\n+LL | | struct Foo<const N: [u8; {\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0391`."}]}