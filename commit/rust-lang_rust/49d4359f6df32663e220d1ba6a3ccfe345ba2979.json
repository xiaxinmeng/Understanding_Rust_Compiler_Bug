{"sha": "49d4359f6df32663e220d1ba6a3ccfe345ba2979", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZDQzNTlmNmRmMzI2NjNlMjIwZDFiYTZhM2NjZmUzNDViYTI5Nzk=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-02T20:54:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-02T20:54:27Z"}, "message": "Rollup merge of #54269 - PramodBisht:issue/53840, r=estebank\n\n#53840: Consolidate pattern check errors\n\n#53840  on this PR we are aggregating `cannot bind by-move and by-ref in the same pattern` message present on the different lines into one diagnostic message. Here we are first gathering those `spans` on `vector` then we are throwing them with the help of `MultiSpan`\nr? @estebank\n\nAddresses: #53480", "tree": {"sha": "42d01dcafa3a5e35eebb5c4aa9122d686f7c08ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42d01dcafa3a5e35eebb5c4aa9122d686f7c08ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49d4359f6df32663e220d1ba6a3ccfe345ba2979", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbs9sDCRBK7hj4Ov3rIwAAdHIIAFYDUwKAfrhTyjDh4UZUORZv\n8XmZWMCDJU+tITFc9KOOKVoL6W0oJg4VaNkHzhf0eCvWUwjeMGwpvFL/CFWlTRjQ\n33pmy+tnPwmCT4W2VW18MIC909dPj3MVvl6jDRj7/zL/SD7tio1cxmdYYKA7CuAd\neIaTJ2/JUcIfpcDXn2jQLZmFq5hSw3NlUIQUkV60TxWIkqU1pccWmtft/A2ergVS\naA+Ko/2w3frXS7VYwShcK6S5BtQVlRehTCmegi+SyKFzEKde2cRZ9gDOSZ3DMaXT\nWnAbeDwrnfTdYBdavuaSSu72MEAlid39fM7VuwwJWlkeKfae+yvqqSHOWNqX84U=\n=MmgN\n-----END PGP SIGNATURE-----\n", "payload": "tree 42d01dcafa3a5e35eebb5c4aa9122d686f7c08ad\nparent 1c5e9c68ea6c76fe400528de17ebe03e338bac68\nparent e536e64702a12898ba7156c66de40b652ac21db1\nauthor Pietro Albini <pietro@pietroalbini.org> 1538513667 +0200\ncommitter GitHub <noreply@github.com> 1538513667 +0200\n\nRollup merge of #54269 - PramodBisht:issue/53840, r=estebank\n\n#53840: Consolidate pattern check errors\n\n#53840  on this PR we are aggregating `cannot bind by-move and by-ref in the same pattern` message present on the different lines into one diagnostic message. Here we are first gathering those `spans` on `vector` then we are throwing them with the help of `MultiSpan`\nr? @estebank\n\nAddresses: #53480\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49d4359f6df32663e220d1ba6a3ccfe345ba2979", "html_url": "https://github.com/rust-lang/rust/commit/49d4359f6df32663e220d1ba6a3ccfe345ba2979", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49d4359f6df32663e220d1ba6a3ccfe345ba2979/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c5e9c68ea6c76fe400528de17ebe03e338bac68", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5e9c68ea6c76fe400528de17ebe03e338bac68", "html_url": "https://github.com/rust-lang/rust/commit/1c5e9c68ea6c76fe400528de17ebe03e338bac68"}, {"sha": "e536e64702a12898ba7156c66de40b652ac21db1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e536e64702a12898ba7156c66de40b652ac21db1", "html_url": "https://github.com/rust-lang/rust/commit/e536e64702a12898ba7156c66de40b652ac21db1"}], "stats": {"total": 81, "additions": 67, "deletions": 14}, "files": [{"sha": "f2ae5774da875f8eb014635cbcef5e05ba42f894", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/49d4359f6df32663e220d1ba6a3ccfe345ba2979/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d4359f6df32663e220d1ba6a3ccfe345ba2979/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=49d4359f6df32663e220d1ba6a3ccfe345ba2979", "patch": "@@ -35,7 +35,7 @@ use std::slice;\n \n use syntax::ast;\n use syntax::ptr::P;\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n struct OuterVisitor<'a, 'tcx: 'a> { tcx: TyCtxt<'a, 'tcx, 'tcx> }\n \n@@ -527,8 +527,8 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n             }\n         })\n     }\n-\n-    let check_move = |p: &Pat, sub: Option<&Pat>| {\n+    let span_vec = &mut Vec::new();\n+    let check_move = |p: &Pat, sub: Option<&Pat>, span_vec: &mut Vec<Span>| {\n         // check legality of moving out of the enum\n \n         // x @ Foo(..) is legal, but x @ Foo(y) isn't.\n@@ -546,16 +546,8 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n                           crate attributes to enable\");\n             }\n             err.emit();\n-        } else if let Some(by_ref_span) = by_ref_span {\n-            struct_span_err!(\n-                cx.tcx.sess,\n-                p.span,\n-                E0009,\n-                \"cannot bind by-move and by-ref in the same pattern\",\n-            )\n-            .span_label(p.span, \"by-move pattern here\")\n-            .span_label(by_ref_span, \"both by-ref and by-move used\")\n-            .emit();\n+        } else if let Some(_by_ref_span) = by_ref_span {\n+            span_vec.push(p.span);\n         }\n     };\n \n@@ -567,7 +559,7 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n                         ty::BindByValue(..) => {\n                             let pat_ty = cx.tables.node_id_to_type(p.hir_id);\n                             if pat_ty.moves_by_default(cx.tcx, cx.param_env, pat.span) {\n-                                check_move(p, sub.as_ref().map(|p| &**p));\n+                                check_move(p, sub.as_ref().map(|p| &**p), span_vec);\n                             }\n                         }\n                         _ => {}\n@@ -579,6 +571,20 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor,\n             true\n         });\n     }\n+    if !span_vec.is_empty(){\n+        let span = MultiSpan::from_spans(span_vec.clone());\n+        let mut err = struct_span_err!(\n+            cx.tcx.sess,\n+            span,\n+            E0009,\n+            \"cannot bind by-move and by-ref in the same pattern\",\n+        );\n+        err.span_label(by_ref_span.unwrap(), \"both by-ref and by-move used\");\n+        for span in span_vec.iter(){\n+            err.span_label(*span, \"by-move pattern here\");\n+        }\n+        err.emit();\n+    }\n }\n \n /// Ensures that a pattern guard doesn't borrow by mutable reference or"}, {"sha": "ece3caf78e21845dbd89f16139d60d3abc07407c", "filename": "src/test/ui/issue-53840.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/49d4359f6df32663e220d1ba6a3ccfe345ba2979/src%2Ftest%2Fui%2Fissue-53840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d4359f6df32663e220d1ba6a3ccfe345ba2979/src%2Ftest%2Fui%2Fissue-53840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-53840.rs?ref=49d4359f6df32663e220d1ba6a3ccfe345ba2979", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+enum E {\n+    Foo(String, String, String),\n+}\n+\n+struct Bar {\n+    a: String,\n+    b: String,\n+}\n+\n+fn main() {\n+    let bar = Bar { a: \"1\".to_string(), b: \"2\".to_string() };\n+    match E::Foo(\"\".into(), \"\".into(), \"\".into()) {\n+        E::Foo(a, b, ref c) => {}\n+    }\n+    match bar {\n+        Bar {a, ref b} => {}\n+    }\n+}"}, {"sha": "961e4c0ff6286ab907d0b02d901b7e76105ff757", "filename": "src/test/ui/issue-53840.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/49d4359f6df32663e220d1ba6a3ccfe345ba2979/src%2Ftest%2Fui%2Fissue-53840.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49d4359f6df32663e220d1ba6a3ccfe345ba2979/src%2Ftest%2Fui%2Fissue-53840.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-53840.stderr?ref=49d4359f6df32663e220d1ba6a3ccfe345ba2979", "patch": "@@ -0,0 +1,20 @@\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/issue-53840.rs:22:16\n+   |\n+LL |         E::Foo(a, b, ref c) => {}\n+   |                ^  ^  ----- both by-ref and by-move used\n+   |                |  |\n+   |                |  by-move pattern here\n+   |                by-move pattern here\n+\n+error[E0009]: cannot bind by-move and by-ref in the same pattern\n+  --> $DIR/issue-53840.rs:25:14\n+   |\n+LL |         Bar {a, ref b} => {}\n+   |              ^  ----- both by-ref and by-move used\n+   |              |\n+   |              by-move pattern here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0009`."}]}