{"sha": "2be0596810bd34e4d50ecda5ad2b71f8370d7e00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZTA1OTY4MTBiZDM0ZTRkNTBlY2RhNWFkMmI3MWY4MzcwZDdlMDA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-27T09:59:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-27T09:59:09Z"}, "message": "Use with_no_trimmed_paths\n\nFixes compilation without -Ztrim-diagnostic-paths=no", "tree": {"sha": "598d08945aa5b3563d8ddafb6ed327c9ea7c499f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/598d08945aa5b3563d8ddafb6ed327c9ea7c499f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2be0596810bd34e4d50ecda5ad2b71f8370d7e00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2be0596810bd34e4d50ecda5ad2b71f8370d7e00", "html_url": "https://github.com/rust-lang/rust/commit/2be0596810bd34e4d50ecda5ad2b71f8370d7e00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2be0596810bd34e4d50ecda5ad2b71f8370d7e00/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "793d26047f994e23415f8f6bb5686ff25d3dda92", "url": "https://api.github.com/repos/rust-lang/rust/commits/793d26047f994e23415f8f6bb5686ff25d3dda92", "html_url": "https://github.com/rust-lang/rust/commit/793d26047f994e23415f8f6bb5686ff25d3dda92"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "9a661dcbcc5d69f0b41bd903e611b763e1ec3ad3", "filename": "src/bin/cg_clif.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2be0596810bd34e4d50ecda5ad2b71f8370d7e00/src%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be0596810bd34e4d50ecda5ad2b71f8370d7e00/src%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif.rs?ref=2be0596810bd34e4d50ecda5ad2b71f8370d7e00", "patch": "@@ -24,9 +24,6 @@ impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n         self.time_passes = config.opts.prints.is_empty()\n             && (config.opts.debugging_opts.time_passes || config.opts.debugging_opts.time);\n \n-        // FIXME workaround for an ICE\n-        config.opts.debugging_opts.trim_diagnostic_paths = false;\n-\n         config.opts.cg.panic = Some(PanicStrategy::Abort);\n         config.opts.debugging_opts.panic_abort_tests = true;\n         config.opts.maybe_sysroot = Some("}, {"sha": "165d33dcfb50919a625fd0d60cdf51052a82ca1f", "filename": "src/bin/cg_clif_build_sysroot.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2be0596810bd34e4d50ecda5ad2b71f8370d7e00/src%2Fbin%2Fcg_clif_build_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be0596810bd34e4d50ecda5ad2b71f8370d7e00/src%2Fbin%2Fcg_clif_build_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif_build_sysroot.rs?ref=2be0596810bd34e4d50ecda5ad2b71f8370d7e00", "patch": "@@ -44,9 +44,6 @@ impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n             return;\n         }\n \n-        // FIXME workaround for an ICE\n-        config.opts.debugging_opts.trim_diagnostic_paths = false;\n-\n         config.opts.cg.panic = Some(PanicStrategy::Abort);\n         config.opts.debugging_opts.panic_abort_tests = true;\n         config.opts.maybe_sysroot = Some("}, {"sha": "074fba6b5c33a7a762889065f9bc47770f3f11cb", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2be0596810bd34e4d50ecda5ad2b71f8370d7e00/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be0596810bd34e4d50ecda5ad2b71f8370d7e00/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=2be0596810bd34e4d50ecda5ad2b71f8370d7e00", "patch": "@@ -9,6 +9,7 @@ pub(crate) use cpuid::codegen_cpuid_call;\n pub(crate) use llvm::codegen_llvm_intrinsic_call;\n \n use crate::prelude::*;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n \n macro intrinsic_pat {\n     (_) => {\n@@ -819,29 +820,29 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         assert_inhabited | assert_zero_valid | assert_uninit_valid, <T> () {\n             let layout = fx.layout_of(T);\n             if layout.abi.is_uninhabited() {\n-                crate::base::codegen_panic(\n+                with_no_trimmed_paths(|| crate::base::codegen_panic(\n                     fx,\n                     &format!(\"attempted to instantiate uninhabited type `{}`\", T),\n                     span,\n-                );\n+                ));\n                 return;\n             }\n \n             if intrinsic == \"assert_zero_valid\" && !layout.might_permit_raw_init(fx, /*zero:*/ true).unwrap() {\n-                crate::base::codegen_panic(\n+                with_no_trimmed_paths(|| crate::base::codegen_panic(\n                     fx,\n                     &format!(\"attempted to zero-initialize type `{}`, which is invalid\", T),\n                     span,\n-                );\n+                ));\n                 return;\n             }\n \n             if intrinsic == \"assert_uninit_valid\" && !layout.might_permit_raw_init(fx, /*zero:*/ false).unwrap() {\n-                crate::base::codegen_panic(\n+                with_no_trimmed_paths(|| crate::base::codegen_panic(\n                     fx,\n                     &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", T),\n                     span,\n-                );\n+                ));\n                 return;\n             }\n         };"}, {"sha": "690d96764a8f588d1e8ed0e5827c71aec89c0d05", "filename": "src/trap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2be0596810bd34e4d50ecda5ad2b71f8370d7e00/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be0596810bd34e4d50ecda5ad2b71f8370d7e00/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=2be0596810bd34e4d50ecda5ad2b71f8370d7e00", "patch": "@@ -67,4 +67,3 @@ pub(crate) fn trap_unimplemented(fx: &mut FunctionCx<'_, '_, impl Module>, msg:\n     let true_ = fx.bcx.ins().iconst(types::I32, 1);\n     fx.bcx.ins().trapnz(true_, TrapCode::User(!0));\n }\n-"}]}