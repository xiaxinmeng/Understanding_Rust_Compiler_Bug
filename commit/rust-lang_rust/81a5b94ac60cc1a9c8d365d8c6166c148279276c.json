{"sha": "81a5b94ac60cc1a9c8d365d8c6166c148279276c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYTViOTRhYzYwY2MxYTljOGQzNjVkOGM2MTY2YzE0ODI3OTI3NmM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-01-10T13:46:28Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-01-15T12:43:09Z"}, "message": "formatting", "tree": {"sha": "5afd3ea8af6fd2b99b68e7b153daf66ab9eb99a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5afd3ea8af6fd2b99b68e7b153daf66ab9eb99a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81a5b94ac60cc1a9c8d365d8c6166c148279276c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81a5b94ac60cc1a9c8d365d8c6166c148279276c", "html_url": "https://github.com/rust-lang/rust/commit/81a5b94ac60cc1a9c8d365d8c6166c148279276c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81a5b94ac60cc1a9c8d365d8c6166c148279276c/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd4a88f3098ab1b20267716102d49c8a43d151d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd4a88f3098ab1b20267716102d49c8a43d151d8", "html_url": "https://github.com/rust-lang/rust/commit/fd4a88f3098ab1b20267716102d49c8a43d151d8"}], "stats": {"total": 77, "additions": 28, "deletions": 49}, "files": [{"sha": "e54e716e042febf9da6468dcaf21c09847fb4308", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81a5b94ac60cc1a9c8d365d8c6166c148279276c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a5b94ac60cc1a9c8d365d8c6166c148279276c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=81a5b94ac60cc1a9c8d365d8c6166c148279276c", "patch": "@@ -284,11 +284,9 @@ fn build_type_alias_type(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type>\n \n pub fn build_ty(cx: &DocContext, did: DefId) -> Option<clean::Type> {\n     match cx.tcx.def_kind(did)? {\n-        DefKind::Struct |\n-        DefKind::Union |\n-        DefKind::Enum |\n-        DefKind::Const |\n-        DefKind::Static => Some(cx.tcx.type_of(did).clean(cx)),\n+        DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::Const | DefKind::Static => {\n+            Some(cx.tcx.type_of(did).clean(cx))\n+        }\n         DefKind::TyAlias => build_type_alias_type(cx, did),\n         _ => None,\n     }"}, {"sha": "027975a6d3288a59e9e740cbfa37b1ffe85c9799", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81a5b94ac60cc1a9c8d365d8c6166c148279276c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a5b94ac60cc1a9c8d365d8c6166c148279276c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=81a5b94ac60cc1a9c8d365d8c6166c148279276c", "patch": "@@ -1124,14 +1124,7 @@ impl Clean<Item> for hir::ImplItem<'_> {\n             hir::ImplItemKind::TyAlias(ref ty) => {\n                 let type_ = ty.clean(cx);\n                 let item_type = type_.def_id().and_then(|did| inline::build_ty(cx, did));\n-                TypedefItem(\n-                    Typedef {\n-                        type_,\n-                        generics: Generics::default(),\n-                        item_type,\n-                    },\n-                    true,\n-                )\n+                TypedefItem(Typedef { type_, generics: Generics::default(), item_type }, true)\n             }\n             hir::ImplItemKind::OpaqueTy(ref bounds) => OpaqueTyItem(\n                 OpaqueTy { bounds: bounds.clean(cx), generics: Generics::default() },\n@@ -2011,14 +2004,7 @@ impl Clean<Item> for doctree::Typedef<'_> {\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n             deprecation: cx.deprecation(self.id).clean(cx),\n-            inner: TypedefItem(\n-                Typedef {\n-                    type_,\n-                    generics: self.gen.clean(cx),\n-                    item_type,\n-                },\n-                false,\n-            ),\n+            inner: TypedefItem(Typedef { type_, generics: self.gen.clean(cx), item_type }, false),\n         }\n     }\n }"}, {"sha": "86d59a0cccd9a2c5812e2fd4aba5d0f89ef7d6b1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/81a5b94ac60cc1a9c8d365d8c6166c148279276c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a5b94ac60cc1a9c8d365d8c6166c148279276c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=81a5b94ac60cc1a9c8d365d8c6166c148279276c", "patch": "@@ -3474,12 +3474,10 @@ fn render_deref_methods(\n         .items\n         .iter()\n         .filter_map(|item| match item.inner {\n-            clean::TypedefItem(ref t, true) => {\n-                Some(match *t {\n-                    clean::Typedef { item_type: Some(ref type_), .. } => (&t.type_, type_),\n-                    _ => (&t.type_, &t.type_),\n-                })\n-            }\n+            clean::TypedefItem(ref t, true) => Some(match *t {\n+                clean::Typedef { item_type: Some(ref type_), .. } => (&t.type_, type_),\n+                _ => (&t.type_, &t.type_),\n+            }),\n             _ => None,\n         })\n         .next()\n@@ -4133,12 +4131,10 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                     .items\n                     .iter()\n                     .filter_map(|item| match item.inner {\n-                        clean::TypedefItem(ref t, true) => {\n-                            Some(match *t {\n-                                clean::Typedef { item_type: Some(ref type_), .. } => (&t.type_, type_),\n-                                _ => (&t.type_, &t.type_),\n-                            })\n-                        }\n+                        clean::TypedefItem(ref t, true) => Some(match *t {\n+                            clean::Typedef { item_type: Some(ref type_), .. } => (&t.type_, type_),\n+                            _ => (&t.type_, &t.type_),\n+                        }),\n                         _ => None,\n                     })\n                     .next()"}, {"sha": "fd9c47d0c4a44623ad8ecaf6cab81a117dbd63a2", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/81a5b94ac60cc1a9c8d365d8c6166c148279276c/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81a5b94ac60cc1a9c8d365d8c6166c148279276c/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=81a5b94ac60cc1a9c8d365d8c6166c148279276c", "patch": "@@ -574,7 +574,8 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n     // has since been learned.\n     for &(did, ref item) in orphan_impl_items {\n         if let Some(&(ref fqp, _)) = paths.get(&did) {\n-            if item.name.is_none() { // this is most likely from a typedef\n+            if item.name.is_none() {\n+                // this is most likely from a typedef\n                 continue;\n             }\n             search_index.push(IndexItem {\n@@ -596,22 +597,20 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n \n     for item in search_index {\n         item.parent_idx = match item.parent {\n-            Some(nodeid) => {\n-                Some(if nodeid_to_pathid.contains_key(&nodeid) {\n-                    *nodeid_to_pathid.get(&nodeid).expect(\"no pathid\")\n-                } else {\n-                    let pathid = lastpathid;\n-                    nodeid_to_pathid.insert(nodeid, pathid);\n-                    lastpathid += 1;\n+            Some(nodeid) => Some(if nodeid_to_pathid.contains_key(&nodeid) {\n+                *nodeid_to_pathid.get(&nodeid).expect(\"no pathid\")\n+            } else {\n+                let pathid = lastpathid;\n+                nodeid_to_pathid.insert(nodeid, pathid);\n+                lastpathid += 1;\n \n-                    if let Some(&(ref fqp, short)) = paths.get(&nodeid) {\n-                        crate_paths.push((short, fqp.last().expect(\"no fqp\").clone()));\n-                    } else {\n-                        continue\n-                    }\n-                    pathid\n-                })\n-            }\n+                if let Some(&(ref fqp, short)) = paths.get(&nodeid) {\n+                    crate_paths.push((short, fqp.last().expect(\"no fqp\").clone()));\n+                } else {\n+                    continue;\n+                }\n+                pathid\n+            }),\n             None => None,\n         };\n "}]}