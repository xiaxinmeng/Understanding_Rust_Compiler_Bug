{"sha": "304c790fc28182d266ad7532b637975b3fb1d67f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNGM3OTBmYzI4MTgyZDI2NmFkNzUzMmI2Mzc5NzViM2ZiMWQ2N2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-24T04:42:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-24T04:42:09Z"}, "message": "Auto merge of #31778 - aturon:snapshot, r=alexcrichton\n\nr? @alexcrichton", "tree": {"sha": "f7bbbc9bc37618bf6569f4e8ff4e805aa90a2883", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7bbbc9bc37618bf6569f4e8ff4e805aa90a2883"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/304c790fc28182d266ad7532b637975b3fb1d67f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/304c790fc28182d266ad7532b637975b3fb1d67f", "html_url": "https://github.com/rust-lang/rust/commit/304c790fc28182d266ad7532b637975b3fb1d67f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/304c790fc28182d266ad7532b637975b3fb1d67f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4574bd4a5e92400ef700cf69cab420b490b377a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4574bd4a5e92400ef700cf69cab420b490b377a", "html_url": "https://github.com/rust-lang/rust/commit/a4574bd4a5e92400ef700cf69cab420b490b377a"}, {"sha": "a92ee0f664c84545c3cba70644472ec3df23c1ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a92ee0f664c84545c3cba70644472ec3df23c1ee", "html_url": "https://github.com/rust-lang/rust/commit/a92ee0f664c84545c3cba70644472ec3df23c1ee"}], "stats": {"total": 120, "additions": 39, "deletions": 81}, "files": [{"sha": "ce20a25d13af38ac38f8402669e6f4d5582f2ef4", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -95,12 +95,12 @@ pub enum Cow<'a, B: ?Sized + 'a>\n {\n     /// Borrowed data.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Borrowed(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a B),\n+    Borrowed(#[stable(feature = \"rust1\", since = \"1.0.0\")] &'a B),\n \n     /// Owned data.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Owned(\n-        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] <B as ToOwned>::Owned\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")] <B as ToOwned>::Owned\n     ),\n }\n "}, {"sha": "2a950ce0ab72d58404aa0981513ceb1fa9effbee", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -238,13 +238,13 @@ pub enum Entry<'a, K: 'a, V: 'a> {\n     /// A vacant Entry\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Vacant(\n-        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] VacantEntry<'a, K, V>\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")] VacantEntry<'a, K, V>\n     ),\n \n     /// An occupied Entry\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Occupied(\n-        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] OccupiedEntry<'a, K, V>\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")] OccupiedEntry<'a, K, V>\n     ),\n }\n "}, {"sha": "b0dcb0d539989ed90557518790e24bfb440ddd28", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -586,8 +586,5 @@ extern \"rust-intrinsic\" {\n     /// platforms this is a `*mut *mut T` which is filled in by the compiler and\n     /// on MSVC it's `*mut [usize; 2]`. For more information see the compiler's\n     /// source as well as std's catch implementation.\n-    #[cfg(not(stage0))]\n     pub fn try(f: fn(*mut u8), data: *mut u8, local_ptr: *mut u8) -> i32;\n-    #[cfg(stage0)]\n-    pub fn try(f: fn(*mut u8), data: *mut u8) -> *mut u8;\n }"}, {"sha": "e38cf9af010b9f9953fff8c59a0def8c0c36283e", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -169,7 +169,7 @@ pub enum Option<T> {\n     None,\n     /// Some value `T`\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Some(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] T)\n+    Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T)\n }\n \n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "f6703d16ad997e988e347bb45720356985b5c572", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -250,11 +250,11 @@ use option::Option::{self, None, Some};\n pub enum Result<T, E> {\n     /// Contains the success value\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Ok(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] T),\n+    Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n \n     /// Contains the error value\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Err(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] E)\n+    Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E)\n }\n \n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "051829fbafb01933104037a36f8851a8cff3e2d0", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -1402,13 +1402,13 @@ pub enum Entry<'a, K: 'a, V: 'a> {\n     /// An occupied Entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Occupied(\n-        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] OccupiedEntry<'a, K, V>\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")] OccupiedEntry<'a, K, V>\n     ),\n \n     /// A vacant Entry.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Vacant(\n-        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] VacantEntry<'a, K, V>\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")] VacantEntry<'a, K, V>\n     ),\n }\n "}, {"sha": "aa6a6d548b31a0026d6962eb8e585f74f65bb3b5", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -218,7 +218,7 @@ pub enum VarError {\n     /// valid unicode data. The found data is returned as a payload of this\n     /// variant.\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    NotUnicode(#[cfg_attr(not(stage0), stable(feature = \"env\", since = \"1.0.0\"))] OsString),\n+    NotUnicode(#[stable(feature = \"env\", since = \"1.0.0\")] OsString),\n }\n \n #[stable(feature = \"env\", since = \"1.0.0\")]"}, {"sha": "6bdfdcd364aa703435c5e55b9444c9efc034a2f2", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -1175,23 +1175,23 @@ pub trait Seek {\n pub enum SeekFrom {\n     /// Set the offset to the provided number of bytes.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Start(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] u64),\n+    Start(#[stable(feature = \"rust1\", since = \"1.0.0\")] u64),\n \n     /// Set the offset to the size of this object plus the specified number of\n     /// bytes.\n     ///\n     /// It is possible to seek beyond the end of an object, but it's an error to\n     /// seek before byte 0.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    End(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] i64),\n+    End(#[stable(feature = \"rust1\", since = \"1.0.0\")] i64),\n \n     /// Set the offset to the current position plus the specified number of\n     /// bytes.\n     ///\n     /// It is possible to seek beyond the end of an object, but it's an error to\n     /// seek before byte 0.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Current(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] i64),\n+    Current(#[stable(feature = \"rust1\", since = \"1.0.0\")] i64),\n }\n \n fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)"}, {"sha": "6ce6777d11eff54d8c5dbe8f247363250f3c9117", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -32,10 +32,10 @@ use slice;\n pub enum SocketAddr {\n     /// An IPv4 socket address which is a (ip, port) combination.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    V4(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] SocketAddrV4),\n+    V4(#[stable(feature = \"rust1\", since = \"1.0.0\")] SocketAddrV4),\n     /// An IPv6 socket address\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    V6(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] SocketAddrV6),\n+    V6(#[stable(feature = \"rust1\", since = \"1.0.0\")] SocketAddrV6),\n }\n \n /// An IPv4 socket address which is a (ip, port) combination."}, {"sha": "68075af61cf5e8e0e570b61bd3bf07484997883d", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -27,10 +27,10 @@ use sys_common::{AsInner, FromInner};\n pub enum IpAddr {\n     /// Representation of an IPv4 address.\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n-    V4(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.7.0\"))] Ipv4Addr),\n+    V4(#[stable(feature = \"ip_addr\", since = \"1.7.0\")] Ipv4Addr),\n     /// Representation of an IPv6 address.\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n-    V6(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.7.0\"))] Ipv6Addr),\n+    V6(#[stable(feature = \"ip_addr\", since = \"1.7.0\")] Ipv6Addr),\n }\n \n /// Representation of an IPv4 address."}, {"sha": "35118bde96bb9a6af078d88858ee45170a1b1bda", "filename": "src/libstd/path.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -268,33 +268,33 @@ mod platform {\n pub enum Prefix<'a> {\n     /// Prefix `\\\\?\\`, together with the given component immediately following it.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Verbatim(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a OsStr),\n+    Verbatim(#[stable(feature = \"rust1\", since = \"1.0.0\")] &'a OsStr),\n \n     /// Prefix `\\\\?\\UNC\\`, with the \"server\" and \"share\" components following it.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     VerbatimUNC(\n-        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a OsStr,\n-        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a OsStr,\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")] &'a OsStr,\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")] &'a OsStr,\n     ),\n \n     /// Prefix like `\\\\?\\C:\\`, for the given drive letter\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    VerbatimDisk(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] u8),\n+    VerbatimDisk(#[stable(feature = \"rust1\", since = \"1.0.0\")] u8),\n \n     /// Prefix `\\\\.\\`, together with the given component immediately following it.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    DeviceNS(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a OsStr),\n+    DeviceNS(#[stable(feature = \"rust1\", since = \"1.0.0\")] &'a OsStr),\n \n     /// Prefix `\\\\server\\share`, with the given \"server\" and \"share\" components.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     UNC(\n-        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a OsStr,\n-        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a OsStr,\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")] &'a OsStr,\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")] &'a OsStr,\n     ),\n \n     /// Prefix `C:` for the given disk drive.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Disk(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] u8),\n+    Disk(#[stable(feature = \"rust1\", since = \"1.0.0\")] u8),\n }\n \n impl<'a> Prefix<'a> {\n@@ -537,7 +537,7 @@ pub enum Component<'a> {\n     /// Does not occur on Unix.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Prefix(\n-        #[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] PrefixComponent<'a>\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")] PrefixComponent<'a>\n     ),\n \n     /// The root directory component, appears after any prefix and before anything else\n@@ -554,7 +554,7 @@ pub enum Component<'a> {\n \n     /// A normal component, i.e. `a` and `b` in `a/b`\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Normal(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] &'a OsStr),\n+    Normal(#[stable(feature = \"rust1\", since = \"1.0.0\")] &'a OsStr),\n }\n \n impl<'a> Component<'a> {"}, {"sha": "fadca390986ceb3f7f5a87751a627cb64f9ac2f7", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -385,12 +385,12 @@ pub enum TrySendError<T> {\n     /// this is not a buffered channel, then there is no receiver available to\n     /// acquire the data.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Full(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] T),\n+    Full(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n \n     /// This channel's receiving half has disconnected, so the data could not be\n     /// sent. The data is returned back to the callee in this case.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Disconnected(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] T),\n+    Disconnected(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n }\n \n enum Flavor<T> {"}, {"sha": "83780a31cceb121437729e00d5d0917b50794013", "filename": "src/libstd/sys/common/poison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fpoison.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -71,7 +71,7 @@ pub enum TryLockError<T> {\n     /// The lock could not be acquired because another thread failed while holding\n     /// the lock.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Poisoned(#[cfg_attr(not(stage0), stable(feature = \"rust1\", since = \"1.0.0\"))] PoisonError<T>),\n+    Poisoned(#[stable(feature = \"rust1\", since = \"1.0.0\")] PoisonError<T>),\n     /// The lock could not be acquired at this time because the operation would\n     /// otherwise block.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ff6a11951dc5e57f59615394758c2cdedd8fe5bc", "filename": "src/libstd/sys/common/unwind/gcc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -41,7 +41,6 @@ pub unsafe fn panic(data: Box<Any + Send + 'static>) -> ! {\n     }\n }\n \n-#[cfg(not(stage0))]\n pub fn payload() -> *mut u8 {\n     0 as *mut u8\n }"}, {"sha": "527c2e63030d59bc9ddf0a82bba19112e6da53a9", "filename": "src/libstd/sys/common/unwind/mod.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -128,7 +128,6 @@ pub unsafe fn try<F: FnOnce()>(f: F) -> Result<(), Box<Any + Send>> {\n     }\n }\n \n-#[cfg(not(stage0))]\n unsafe fn inner_try(f: fn(*mut u8), data: *mut u8)\n                     -> Result<(), Box<Any + Send>> {\n     PANIC_COUNT.with(|s| {\n@@ -156,22 +155,6 @@ unsafe fn inner_try(f: fn(*mut u8), data: *mut u8)\n     })\n }\n \n-#[cfg(stage0)]\n-unsafe fn inner_try(f: fn(*mut u8), data: *mut u8)\n-                    -> Result<(), Box<Any + Send>> {\n-    PANIC_COUNT.with(|s| {\n-        let prev = s.get();\n-        s.set(0);\n-        let ep = intrinsics::try(f, data);\n-        s.set(prev);\n-        if ep.is_null() {\n-            Ok(())\n-        } else {\n-            Err(imp::cleanup(ep))\n-        }\n-    })\n-}\n-\n /// Determines whether the current thread is unwinding because of panic.\n pub fn panicking() -> bool {\n     PANIC_COUNT.with(|s| s.get() != 0)"}, {"sha": "94da42f0092f5092a984f71b5b24368c1df83330", "filename": "src/libstd/sys/common/unwind/seh.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -65,35 +65,6 @@ const RUST_PANIC: c::DWORD = 0x00525354;\n \n pub use self::imp::*;\n \n-#[cfg(stage0)]\n-mod imp {\n-    use prelude::v1::*;\n-    use any::Any;\n-\n-    pub unsafe fn panic(_data: Box<Any + Send + 'static>) -> ! {\n-        rtabort!(\"cannot unwind SEH in stage0\")\n-    }\n-\n-    pub unsafe fn cleanup(_ptr: *mut u8) -> Box<Any + Send + 'static> {\n-        rtabort!(\"can't cleanup SEH in stage0\")\n-    }\n-\n-    #[lang = \"msvc_try_filter\"]\n-    #[linkage = \"external\"]\n-    unsafe extern fn __rust_try_filter() -> i32 {\n-        0\n-    }\n-\n-    #[lang = \"eh_unwind_resume\"]\n-    #[unwind]\n-    unsafe extern fn rust_eh_unwind_resume(_ptr: *mut u8) -> ! {\n-        rtabort!(\"can't resume unwind SEH in stage0\")\n-    }\n-    #[lang = \"eh_personality_catch\"]\n-    unsafe extern fn rust_eh_personality_catch() {}\n-}\n-\n-#[cfg(not(stage0))]\n mod imp {\n     use prelude::v1::*;\n "}, {"sha": "57281d67ebb406ecd6ca27382de2db8bd3d71f7e", "filename": "src/libstd/sys/common/unwind/seh64_gnu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh64_gnu.rs?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -50,7 +50,6 @@ pub unsafe fn panic(data: Box<Any + Send + 'static>) -> ! {\n     rtabort!(\"could not unwind stack\");\n }\n \n-#[cfg(not(stage0))]\n pub fn payload() -> *mut u8 {\n     0 as *mut u8\n }"}, {"sha": "9b3390d7747285eec0784bf04860f863efb4bce3", "filename": "src/snapshots.txt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/304c790fc28182d266ad7532b637975b3fb1d67f/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=304c790fc28182d266ad7532b637975b3fb1d67f", "patch": "@@ -1,3 +1,12 @@\n+S 2016-02-17 4d3eebf\n+  linux-i386 5f194aa7628c0703f0fd48adc4ec7f3cc64b98c7\n+  linux-x86_64 d29b7607d13d64078b6324aec82926fb493f59ba\n+  macos-i386 4c8e42dd649e247f3576bf9dfa273327b4907f9c\n+  macos-x86_64 411a41363f922d1d93fa62ff2fedf5c35e9cccb2\n+  winnt-i386 0c336d794a65f8e285c121866c7d59aa2dd0d1e1\n+  winnt-x86_64 27e75b1bf99770b3564bcebd7f3230be01135a92\n+  openbsd-x86_64 ac957c6b84de2bd67f01df085d9ea515f96e22f3\n+\n S 2015-12-18 3391630\n   bitrig-x86_64 6476e1562df02389b55553b4c88b1f4fd121cd40\n   freebsd-i386 7e624c50494402e1feb14c743d659fbd71b448f5"}]}