{"sha": "94301c405c5382c482a4bc5fc2561257418f9323", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MzAxYzQwNWM1MzgyYzQ4MmE0YmM1ZmMyNTYxMjU3NDE4ZjkzMjM=", "commit": {"author": {"name": "Lance Roy", "email": "ldr709@gmail.com", "date": "2017-09-04T09:29:16Z"}, "committer": {"name": "Lance Roy", "email": "ldr709@gmail.com", "date": "2017-09-04T09:29:16Z"}, "message": "Additional traits for std::mem::ManuallyDrop\n\nAdd pass-through implementations for all of the derivable traits. These\ncannot be derived since ManuallyDrop is a union.", "tree": {"sha": "bd6d17070280f26b68506b9e67bf6e39621368a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd6d17070280f26b68506b9e67bf6e39621368a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94301c405c5382c482a4bc5fc2561257418f9323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94301c405c5382c482a4bc5fc2561257418f9323", "html_url": "https://github.com/rust-lang/rust/commit/94301c405c5382c482a4bc5fc2561257418f9323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94301c405c5382c482a4bc5fc2561257418f9323/comments", "author": {"login": "ldr709", "id": 8682972, "node_id": "MDQ6VXNlcjg2ODI5NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/8682972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldr709", "html_url": "https://github.com/ldr709", "followers_url": "https://api.github.com/users/ldr709/followers", "following_url": "https://api.github.com/users/ldr709/following{/other_user}", "gists_url": "https://api.github.com/users/ldr709/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldr709/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldr709/subscriptions", "organizations_url": "https://api.github.com/users/ldr709/orgs", "repos_url": "https://api.github.com/users/ldr709/repos", "events_url": "https://api.github.com/users/ldr709/events{/privacy}", "received_events_url": "https://api.github.com/users/ldr709/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldr709", "id": 8682972, "node_id": "MDQ6VXNlcjg2ODI5NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/8682972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldr709", "html_url": "https://github.com/ldr709", "followers_url": "https://api.github.com/users/ldr709/followers", "following_url": "https://api.github.com/users/ldr709/following{/other_user}", "gists_url": "https://api.github.com/users/ldr709/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldr709/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldr709/subscriptions", "organizations_url": "https://api.github.com/users/ldr709/orgs", "repos_url": "https://api.github.com/users/ldr709/repos", "events_url": "https://api.github.com/users/ldr709/events{/privacy}", "received_events_url": "https://api.github.com/users/ldr709/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6276dbd9533e05bd577f408047ea1d0e97293217", "url": "https://api.github.com/repos/rust-lang/rust/commits/6276dbd9533e05bd577f408047ea1d0e97293217", "html_url": "https://github.com/rust-lang/rust/commit/6276dbd9533e05bd577f408047ea1d0e97293217"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "af2f876a2f35906010bad6e63e94c1d8c4ceeca6", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 61, "deletions": 4, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/94301c405c5382c482a4bc5fc2561257418f9323/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94301c405c5382c482a4bc5fc2561257418f9323/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=94301c405c5382c482a4bc5fc2561257418f9323", "patch": "@@ -22,6 +22,7 @@ use hash;\n use intrinsics;\n use marker::{Copy, PhantomData, Sized};\n use ptr;\n+use ops::{Deref, DerefMut};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use intrinsics::transmute;\n@@ -871,7 +872,7 @@ impl<T> ManuallyDrop<T> {\n }\n \n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n-impl<T> ::ops::Deref for ManuallyDrop<T> {\n+impl<T> Deref for ManuallyDrop<T> {\n     type Target = T;\n     #[inline]\n     fn deref(&self) -> &Self::Target {\n@@ -882,7 +883,7 @@ impl<T> ::ops::Deref for ManuallyDrop<T> {\n }\n \n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n-impl<T> ::ops::DerefMut for ManuallyDrop<T> {\n+impl<T> DerefMut for ManuallyDrop<T> {\n     #[inline]\n     fn deref_mut(&mut self) -> &mut Self::Target {\n         unsafe {\n@@ -903,16 +904,72 @@ impl<T: ::fmt::Debug> ::fmt::Debug for ManuallyDrop<T> {\n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n impl<T: Clone> Clone for ManuallyDrop<T> {\n     fn clone(&self) -> Self {\n-        use ::ops::Deref;\n         ManuallyDrop::new(self.deref().clone())\n     }\n \n     fn clone_from(&mut self, source: &Self) {\n-        use ::ops::DerefMut;\n         self.deref_mut().clone_from(source);\n     }\n }\n \n+#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+impl<T: Default> Default for ManuallyDrop<T> {\n+    fn default() -> Self {\n+        ManuallyDrop::new(Default::default())\n+    }\n+}\n+\n+#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+impl<T: PartialEq> PartialEq for ManuallyDrop<T> {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.deref().eq(other)\n+    }\n+\n+    fn ne(&self, other: &Self) -> bool {\n+        self.deref().ne(other)\n+    }\n+}\n+\n+#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+impl<T: Eq> Eq for ManuallyDrop<T> {}\n+\n+#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+impl<T: PartialOrd> PartialOrd for ManuallyDrop<T> {\n+    fn partial_cmp(&self, other: &Self) -> Option<::cmp::Ordering> {\n+        self.deref().partial_cmp(other)\n+    }\n+\n+    fn lt(&self, other: &Self) -> bool {\n+        self.deref().lt(other)\n+    }\n+\n+    fn le(&self, other: &Self) -> bool {\n+        self.deref().le(other)\n+    }\n+\n+    fn gt(&self, other: &Self) -> bool {\n+        self.deref().gt(other)\n+    }\n+\n+    fn ge(&self, other: &Self) -> bool {\n+        self.deref().ge(other)\n+    }\n+}\n+\n+#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+impl<T: Ord> Ord for ManuallyDrop<T> {\n+    fn cmp(&self, other: &Self) -> ::cmp::Ordering {\n+        self.deref().cmp(other)\n+    }\n+}\n+\n+#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+impl<T: ::hash::Hash> ::hash::Hash for ManuallyDrop<T> {\n+    fn hash<H: ::hash::Hasher>(&self, state: &mut H) {\n+        self.deref().hash(state);\n+    }\n+}\n+\n /// Tells LLVM that this point in the code is not reachable, enabling further\n /// optimizations.\n ///"}]}