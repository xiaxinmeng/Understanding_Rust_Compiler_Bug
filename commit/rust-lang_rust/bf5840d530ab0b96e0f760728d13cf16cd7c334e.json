{"sha": "bf5840d530ab0b96e0f760728d13cf16cd7c334e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNTg0MGQ1MzBhYjBiOTZlMGY3NjA3MjhkMTNjZjE2Y2Q3YzMzNGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-14T18:54:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-14T21:03:38Z"}, "message": "rustc: Do a dynamic alloca for generic interior vectors; fix data pointer calculation when spilling vectors", "tree": {"sha": "d1e05f0e629bba29eb776d4b11c4fd40378bb565", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1e05f0e629bba29eb776d4b11c4fd40378bb565"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf5840d530ab0b96e0f760728d13cf16cd7c334e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf5840d530ab0b96e0f760728d13cf16cd7c334e", "html_url": "https://github.com/rust-lang/rust/commit/bf5840d530ab0b96e0f760728d13cf16cd7c334e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf5840d530ab0b96e0f760728d13cf16cd7c334e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "206429e075d94f101cf566638f00cce54d0c8731", "url": "https://api.github.com/repos/rust-lang/rust/commits/206429e075d94f101cf566638f00cce54d0c8731", "html_url": "https://github.com/rust-lang/rust/commit/206429e075d94f101cf566638f00cce54d0c8731"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "e1fb2f00d914f0e2b570fff0ba55d668456ef5d1", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf5840d530ab0b96e0f760728d13cf16cd7c334e/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5840d530ab0b96e0f760728d13cf16cd7c334e/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=bf5840d530ab0b96e0f760728d13cf16cd7c334e", "patch": "@@ -66,7 +66,6 @@ const int closure_elt_target = 1;\n const int closure_elt_bindings = 2;\n const int closure_elt_ty_params = 3;\n \n-const uint ivec_default_size = 64u;\n const uint ivec_default_length = 8u;\n \n const uint ivec_elt_len = 0u;"}, {"sha": "21097d5addca2f940ee3eb6c2b63fc9ee37904b5", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bf5840d530ab0b96e0f760728d13cf16cd7c334e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5840d530ab0b96e0f760728d13cf16cd7c334e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=bf5840d530ab0b96e0f760728d13cf16cd7c334e", "patch": "@@ -581,7 +581,7 @@ fn T_ivec(TypeRef t) -> TypeRef {\n fn T_opaque_ivec() -> TypeRef {\n     ret T_struct([T_int(),          // Length (\"fill\"; if zero, heapified)\n                   T_int(),          // Alloc\n-                  T_array(T_i8(), abi::ivec_default_size)]); // Body elements\n+                  T_array(T_i8(), 0u)]);    // Body elements\n }\n \n fn T_ivec_heap_part(TypeRef t) -> TypeRef {\n@@ -3728,16 +3728,16 @@ fn reserve_ivec_space(&@block_ctxt cx, TypeRef llunitty, ValueRef v,\n                                                                 C_int(0)]);\n     auto heap_len = on_heap_cx.build.Load(heap_len_ptr);\n     auto new_heap_len = on_heap_cx.build.Add(heap_len, len_needed);\n-    auto heap_no_resize_needed = on_heap_cx.build.ICmp(lib::llvm::LLVMIntULT,\n+    auto heap_len_unscaled = on_heap_cx.build.UDiv(heap_len,\n+                                                   llsize_of(llunitty));\n+    auto heap_no_resize_needed = on_heap_cx.build.ICmp(lib::llvm::LLVMIntULE,\n                                                        new_heap_len, alen);\n     auto heap_no_resize_cx = new_sub_block_ctxt(cx, \"heap_no_resize\");\n     auto heap_resize_cx = new_sub_block_ctxt(cx, \"heap_resize\");\n     on_heap_cx.build.CondBr(heap_no_resize_needed, heap_no_resize_cx.llbb,\n                             heap_resize_cx.llbb);\n \n     // Case (1): We're on the heap and don't need to resize.\n-    auto heap_len_unscaled = heap_no_resize_cx.build.UDiv(heap_len,\n-        llsize_of(llunitty));\n     auto heap_data_no_resize = heap_no_resize_cx.build.InBoundsGEP(heap_ptr,\n         [C_int(0), C_uint(abi::ivec_heap_elt_elems), heap_len_unscaled]);\n     heap_no_resize_cx.build.Br(next_cx.llbb);\n@@ -3754,21 +3754,21 @@ fn reserve_ivec_space(&@block_ctxt cx, TypeRef llunitty, ValueRef v,\n         heap_resize_cx.build.InBoundsGEP(stub_ptr,\n             [C_int(0), C_uint(abi::ivec_heap_stub_elt_ptr)]));\n     auto heap_data_resize = heap_resize_cx.build.InBoundsGEP(heap_ptr_resize,\n-        [C_int(0), C_uint(abi::ivec_heap_elt_elems), C_int(0)]);\n+        [C_int(0), C_uint(abi::ivec_heap_elt_elems), heap_len_unscaled]);\n     heap_resize_cx.build.Br(next_cx.llbb);\n \n     // We're on the stack. Check whether we need to spill to the heap.\n     auto new_stack_len = on_stack_cx.build.Add(stack_len, len_needed);\n-    auto stack_no_spill_needed = on_stack_cx.build.ICmp(lib::llvm::LLVMIntULT,\n+    auto stack_no_spill_needed = on_stack_cx.build.ICmp(lib::llvm::LLVMIntULE,\n                                                         new_stack_len, alen);\n+    auto stack_len_unscaled = on_stack_cx.build.UDiv(stack_len,\n+                                                     llsize_of(llunitty));\n     auto stack_no_spill_cx = new_sub_block_ctxt(cx, \"stack_no_spill\");\n     auto stack_spill_cx = new_sub_block_ctxt(cx, \"stack_spill\");\n     on_stack_cx.build.CondBr(stack_no_spill_needed, stack_no_spill_cx.llbb,\n                              stack_spill_cx.llbb);\n \n     // Case (3): We're on the stack and don't need to spill.\n-    auto stack_len_unscaled = stack_no_spill_cx.build.UDiv(stack_len,\n-        llsize_of(llunitty));\n     auto stack_data_no_spill = stack_no_spill_cx.build.InBoundsGEP(v,\n         [C_int(0), C_uint(abi::ivec_elt_elems), stack_len_unscaled]);\n     stack_no_spill_cx.build.Br(next_cx.llbb);\n@@ -3789,7 +3789,7 @@ fn reserve_ivec_space(&@block_ctxt cx, TypeRef llunitty, ValueRef v,\n     auto heap_len_ptr_spill = stack_spill_cx.build.InBoundsGEP(heap_ptr_spill,\n         [C_int(0), C_uint(abi::ivec_heap_elt_len)]);\n     auto heap_data_spill = stack_spill_cx.build.InBoundsGEP(heap_ptr_spill,\n-        [C_int(0), C_uint(abi::ivec_heap_elt_elems), C_int(0)]);\n+        [C_int(0), C_uint(abi::ivec_heap_elt_elems), stack_len_unscaled]);\n \n     stack_spill_cx.build.Br(next_cx.llbb);\n \n@@ -5840,10 +5840,14 @@ fn trans_ivec(@block_ctxt bcx, &vec[@ast::expr] args, &ast::ann ann)\n     auto unit_align = rslt.val;\n     bcx = rslt.bcx;\n \n+    auto llalen = bcx.build.Mul(unit_align, C_uint(abi::ivec_default_length));\n+\n     auto llunitty = type_of_or_i8(bcx, unit_ty);\n     auto llvecptr;\n     if (ty::type_has_dynamic_size(bcx.fcx.lcx.ccx.tcx, unit_ty)) {\n-        llvecptr = alloca(bcx, T_opaque_ivec());\n+        auto array_size = bcx.build.Add(llsize_of(T_opaque_ivec()), llalen);\n+        llvecptr = array_alloca(bcx, T_i8(), array_size);\n+        llvecptr = bcx.build.PointerCast(llvecptr, T_ptr(T_opaque_ivec()));\n     } else {\n         llvecptr = alloca(bcx, T_ivec(llunitty));\n     }\n@@ -5852,12 +5856,11 @@ fn trans_ivec(@block_ctxt bcx, &vec[@ast::expr] args, &ast::ann ann)\n \n     // Allocate the vector pieces and store length and allocated length.\n     auto llfirsteltptr;\n-    if (vec::len(args) > 0u && vec::len(args) < abi::ivec_default_size) {\n+    if (vec::len(args) > 0u && vec::len(args) < abi::ivec_default_length) {\n         // Interior case.\n         bcx.build.Store(lllen, bcx.build.InBoundsGEP(llvecptr,\n             [C_int(0), C_uint(abi::ivec_elt_len)]));\n-        bcx.build.Store(C_uint(abi::ivec_default_size),\n-            bcx.build.InBoundsGEP(llvecptr,\n+        bcx.build.Store(llalen, bcx.build.InBoundsGEP(llvecptr,\n                 [C_int(0), C_uint(abi::ivec_elt_alen)]));\n         llfirsteltptr = bcx.build.InBoundsGEP(llvecptr,\n             [C_int(0), C_uint(abi::ivec_elt_elems), C_int(0)]);"}]}