{"sha": "3dd68c1ba3e72a0959bcdaa46e730a7ae4d9ed4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZDY4YzFiYTNlNzJhMDk1OWJjZGFhNDZlNzMwYTdhZTRkOWVkNGM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-17T23:53:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T18:28:27Z"}, "message": "Implement client-side of SnippetTextEdit", "tree": {"sha": "e7794cbdea1ffb7f45d2d87330b6e15c16c3942b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7794cbdea1ffb7f45d2d87330b6e15c16c3942b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dd68c1ba3e72a0959bcdaa46e730a7ae4d9ed4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd68c1ba3e72a0959bcdaa46e730a7ae4d9ed4c", "html_url": "https://github.com/rust-lang/rust/commit/3dd68c1ba3e72a0959bcdaa46e730a7ae4d9ed4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dd68c1ba3e72a0959bcdaa46e730a7ae4d9ed4c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8", "html_url": "https://github.com/rust-lang/rust/commit/2bf6b16a7f174ea3f581f26f642b4febff0b9ce8"}], "stats": {"total": 83, "additions": 81, "deletions": 2}, "files": [{"sha": "fac1a0be3180231a52c9f43995b280dac6c3e477", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3dd68c1ba3e72a0959bcdaa46e730a7ae4d9ed4c/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3dd68c1ba3e72a0959bcdaa46e730a7ae4d9ed4c/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=3dd68c1ba3e72a0959bcdaa46e730a7ae4d9ed4c", "patch": "@@ -31,7 +31,39 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n                 const res = await next(document, token);\n                 if (res === undefined) throw new Error('busy');\n                 return res;\n+            },\n+            async provideCodeActions(document: vscode.TextDocument, range: vscode.Range, context: vscode.CodeActionContext, token: vscode.CancellationToken, _next: lc.ProvideCodeActionsSignature) {\n+                const params: lc.CodeActionParams = {\n+                    textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n+                    range: client.code2ProtocolConverter.asRange(range),\n+                    context: client.code2ProtocolConverter.asCodeActionContext(context)\n+                };\n+                return client.sendRequest(lc.CodeActionRequest.type, params, token).then((values) => {\n+                    if (values === null) return undefined;\n+                    const result: (vscode.CodeAction | vscode.Command)[] = [];\n+                    for (const item of values) {\n+                        if (lc.CodeAction.is(item)) {\n+                            const action = client.protocol2CodeConverter.asCodeAction(item);\n+                            if (isSnippetEdit(item)) {\n+                                action.command = {\n+                                    command: \"rust-analyzer.applySnippetWorkspaceEdit\",\n+                                    title: \"\",\n+                                    arguments: [action.edit],\n+                                };\n+                                action.edit = undefined;\n+                            }\n+                            result.push(action);\n+                        } else {\n+                            const command = client.protocol2CodeConverter.asCommand(item);\n+                            result.push(command);\n+                        }\n+                    }\n+                    return result;\n+                },\n+                    (_error) => undefined\n+                );\n             }\n+\n         } as any\n     };\n \n@@ -42,7 +74,7 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n         clientOptions,\n     );\n \n-    // To turn on all proposed features use: res.registerProposedFeatures();\n+    // To turn on all proposed features use: client.registerProposedFeatures();\n     // Here we want to enable CallHierarchyFeature and SemanticTokensFeature\n     // since they are available on stable.\n     // Note that while these features are stable in vscode their LSP protocol\n@@ -58,8 +90,20 @@ class SnippetTextEditFeature implements lc.StaticFeature {\n     fillClientCapabilities(capabilities: lc.ClientCapabilities): void {\n         const caps: any = capabilities.experimental ?? {};\n         caps.snippetTextEdit = true;\n-        capabilities.experimental = caps\n+        capabilities.experimental = caps;\n     }\n     initialize(_capabilities: lc.ServerCapabilities<any>, _documentSelector: lc.DocumentSelector | undefined): void {\n     }\n }\n+\n+function isSnippetEdit(action: lc.CodeAction): boolean {\n+    const documentChanges = action.edit?.documentChanges ?? [];\n+    for (const edit of documentChanges) {\n+        if (lc.TextDocumentEdit.is(edit)) {\n+            if (edit.edits.some((indel) => (indel as any).insertTextFormat === lc.InsertTextFormat.Snippet)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}"}, {"sha": "770d11bd36fafadfbbda578484d8bb50cb402667", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3dd68c1ba3e72a0959bcdaa46e730a7ae4d9ed4c/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3dd68c1ba3e72a0959bcdaa46e730a7ae4d9ed4c/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=3dd68c1ba3e72a0959bcdaa46e730a7ae4d9ed4c", "patch": "@@ -4,6 +4,7 @@ import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n import * as sourceChange from '../source_change';\n+import { assert } from '../util';\n \n export * from './analyzer_status';\n export * from './matching_brace';\n@@ -51,3 +52,36 @@ export function selectAndApplySourceChange(ctx: Ctx): Cmd {\n         }\n     };\n }\n+\n+export function applySnippetWorkspaceEdit(_ctx: Ctx): Cmd {\n+    return async (edit: vscode.WorkspaceEdit) => {\n+        assert(edit.entries().length === 1, `bad ws edit: ${JSON.stringify(edit)}`);\n+        const [uri, edits] = edit.entries()[0];\n+\n+        const editor = vscode.window.visibleTextEditors.find((it) => it.document.uri.toString() === uri.toString());\n+        if (!editor) return;\n+\n+        let editWithSnippet: vscode.TextEdit | undefined = undefined;\n+        let lineDelta = 0;\n+        await editor.edit((builder) => {\n+            for (const indel of edits) {\n+                if (indel.newText.indexOf('$0') !== -1) {\n+                    editWithSnippet = indel;\n+                } else {\n+                    if (!editWithSnippet) {\n+                        lineDelta = (indel.newText.match(/\\n/g) || []).length - (indel.range.end.line - indel.range.start.line);\n+                    }\n+                    builder.replace(indel.range, indel.newText);\n+                }\n+            }\n+        });\n+        if (editWithSnippet) {\n+            const snip = editWithSnippet as vscode.TextEdit;\n+            const range = snip.range.with(\n+                snip.range.start.with(snip.range.start.line + lineDelta),\n+                snip.range.end.with(snip.range.end.line + lineDelta),\n+            );\n+            await editor.insertSnippet(new vscode.SnippetString(snip.newText), range);\n+        }\n+    };\n+}"}, {"sha": "ac3bb365e2f0b5cb94b5a970ace34fcac66a73b4", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3dd68c1ba3e72a0959bcdaa46e730a7ae4d9ed4c/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3dd68c1ba3e72a0959bcdaa46e730a7ae4d9ed4c/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=3dd68c1ba3e72a0959bcdaa46e730a7ae4d9ed4c", "patch": "@@ -91,6 +91,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('debugSingle', commands.debugSingle);\n     ctx.registerCommand('showReferences', commands.showReferences);\n     ctx.registerCommand('applySourceChange', commands.applySourceChange);\n+    ctx.registerCommand('applySnippetWorkspaceEdit', commands.applySnippetWorkspaceEdit);\n     ctx.registerCommand('selectAndApplySourceChange', commands.selectAndApplySourceChange);\n \n     ctx.pushCleanup(activateTaskProvider(workspaceFolder));"}]}