{"sha": "ea7aa76911b6b896d503a812b26bfd6227fa90d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhN2FhNzY5MTFiNmI4OTZkNTAzYTgxMmIyNmJmZDYyMjdmYTkwZDk=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2019-05-19T03:25:15Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2019-05-19T03:25:24Z"}, "message": "Document BinaryHeap time complexity\n\nI went into some detail on the time complexity of `push` because it is\nrelevant for using BinaryHeap efficiently -- specifically that you\nshould avoid pushing many elements in ascending order when possible.", "tree": {"sha": "a2ab35803e173441ffdc60ea22b94dcdb513ddcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2ab35803e173441ffdc60ea22b94dcdb513ddcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea7aa76911b6b896d503a812b26bfd6227fa90d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAlzgz9IACgkQ+boUO5X/\nbYIFkw//a89lj+jBwx2dF+OZapZIhafQDzHtKcXZtK3+bTlYmRaadoaFVQWDuHR3\n/J4ft8rWNCa36FJiahc53bSIkYISDVVpqpmZ7fKqoDpMA//rvC84bYWJq3f1u0SP\nYe/a4Y8kzG72rzmsKoW7KV7Ygr1gZprjgY2uW5kjV5cMDKYVdtfJo844OXazEJpI\niGVV6W+SHIoOIrO3uBCJHQquv7w0WHGAFr2J0mhJcjorBGWDhRRLpB7EAG72/F3B\nabbfbv2lxOrQHneW6eRwoPwYg1e4cVLthBYvFdNTrk6Y3LhXAfrX6aY3/2ppkq7Y\neuafQqt3GqO/+B2FZK48bHW7U/hHc5VQ1LSlzduEVYP7Av341QNT4/FqCeGxDh+n\nnd6uzt3/WnMqPUYJ75qEql9Axb92dxDwtsI+gQh7AGMzXver+RX+v9me/TZpmcHb\ngqcZ52GLdfiaQQ4rjA0a6Utw49gBOfVaNLD62hW0NRxiLgjRsDpfNn0qZvPzYJCm\nVkLVtcICbmqOsE2nJN5kJcR46ybtIF1pXIljk5YwzH3WEuSBrG7bIlcPDP0LVwiS\naFxAP1ZyFJGkuUItBsrsDAYQp9ajMKaBk2SFZKvoCRKRk0KyWoeWoCSGtmZH8lXx\np+9DYncESnSSa7f4LdJ0ZoBxS/hc9sv2Vb1Qq3TQ8UweESvAIo0=\n=g1SY\n-----END PGP SIGNATURE-----", "payload": "tree a2ab35803e173441ffdc60ea22b94dcdb513ddcf\nparent 963184bbb670c1ffa97fc28a98cd5e8473118859\nauthor David Tolnay <dtolnay@gmail.com> 1558236315 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1558236324 -0700\n\nDocument BinaryHeap time complexity\n\nI went into some detail on the time complexity of `push` because it is\nrelevant for using BinaryHeap efficiently -- specifically that you\nshould avoid pushing many elements in ascending order when possible.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7aa76911b6b896d503a812b26bfd6227fa90d9", "html_url": "https://github.com/rust-lang/rust/commit/ea7aa76911b6b896d503a812b26bfd6227fa90d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea7aa76911b6b896d503a812b26bfd6227fa90d9/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "963184bbb670c1ffa97fc28a98cd5e8473118859", "url": "https://api.github.com/repos/rust-lang/rust/commits/963184bbb670c1ffa97fc28a98cd5e8473118859", "html_url": "https://github.com/rust-lang/rust/commit/963184bbb670c1ffa97fc28a98cd5e8473118859"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "c5a0b6e877b65f124f61e925ab8989c5e02547e1", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ea7aa76911b6b896d503a812b26bfd6227fa90d9/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7aa76911b6b896d503a812b26bfd6227fa90d9/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=ea7aa76911b6b896d503a812b26bfd6227fa90d9", "patch": "@@ -231,6 +231,20 @@ use super::SpecExtend;\n /// assert_eq!(heap.pop(), Some(Reverse(5)));\n /// assert_eq!(heap.pop(), None);\n /// ```\n+///\n+/// # Time complexity\n+///\n+/// | [push] | [pop]    | [peek]/[peek\\_mut] |\n+/// |--------|----------|--------------------|\n+/// | O(1)~  | O(log n) | O(1)               |\n+///\n+/// The value for `push` is an expected cost; the method documentation gives a\n+/// more detailed analysis.\n+///\n+/// [push]: #method.push\n+/// [pop]: #method.pop\n+/// [peek]: #method.peek\n+/// [peek\\_mut]: #method.peek_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BinaryHeap<T> {\n     data: Vec<T>,\n@@ -384,6 +398,10 @@ impl<T: Ord> BinaryHeap<T> {\n     /// }\n     /// assert_eq!(heap.peek(), Some(&2));\n     /// ```\n+    ///\n+    /// # Time complexity\n+    ///\n+    /// Cost is O(1) in the worst case.\n     #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n     pub fn peek_mut(&mut self) -> Option<PeekMut<'_, T>> {\n         if self.is_empty() {\n@@ -411,6 +429,11 @@ impl<T: Ord> BinaryHeap<T> {\n     /// assert_eq!(heap.pop(), Some(1));\n     /// assert_eq!(heap.pop(), None);\n     /// ```\n+    ///\n+    /// # Time complexity\n+    ///\n+    /// The worst case cost of `pop` on a heap containing *n* elements is O(log\n+    /// n).\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pop(&mut self) -> Option<T> {\n         self.data.pop().map(|mut item| {\n@@ -438,6 +461,22 @@ impl<T: Ord> BinaryHeap<T> {\n     /// assert_eq!(heap.len(), 3);\n     /// assert_eq!(heap.peek(), Some(&5));\n     /// ```\n+    ///\n+    /// # Time complexity\n+    ///\n+    /// The expected cost of `push`, averaged over every possible ordering of\n+    /// the elements being pushed, and over a sufficiently large number of\n+    /// pushes, is O(1). This is the most meaningful cost metric when pushing\n+    /// elements that are *not* already in any sorted pattern.\n+    ///\n+    /// The time complexity degrades if elements are pushed in predominantly\n+    /// ascending order. In the worst case, elements are pushed in ascending\n+    /// sorted order and the amortized cost per push is O(log n) against a heap\n+    /// containing *n* elements.\n+    ///\n+    /// The worst case cost of a *single* call to `push` is O(n). The worst case\n+    /// occurs when capacity is exhausted and needs a resize. The resize cost\n+    /// has been amortized in the previous figures.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push(&mut self, item: T) {\n         let old_len = self.len();\n@@ -650,6 +689,10 @@ impl<T> BinaryHeap<T> {\n     /// assert_eq!(heap.peek(), Some(&5));\n     ///\n     /// ```\n+    ///\n+    /// # Time complexity\n+    ///\n+    /// Cost is O(1) in the worst case.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn peek(&self) -> Option<&T> {\n         self.data.get(0)"}]}