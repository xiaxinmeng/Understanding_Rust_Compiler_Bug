{"sha": "1e1bd519a176f5e518c51814958dc64e8e7c1758", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMWJkNTE5YTE3NmY1ZTUxOGM1MTgxNDk1OGRjNjRlOGU3YzE3NTg=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-04-08T13:50:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-08T13:50:17Z"}, "message": "Rollup merge of #5410 - dtolnay:trivially, r=flip1995\n\nDowngrade trivially_copy_pass_by_ref to pedantic\n\nThe rationale for this lint is documented as:\n\n> In many calling conventions instances of structs will be passed through registers if they fit into two or less general purpose registers.\n\nI think the purported performance benefits of clippy's recommendation are overstated. This isn't worth asking people to sprinkle code with more `*`\u200b`*`\u200b`&`\u200b`*`\u200b`&` to chase the alleged performance.\n\nThis should be a pedantic lint that is disabled by default and opted in if some specific performance sensitive codebase determines that it is worthwhile.\n\nAs a reminder, a typical place that a reference to a primitive would come up is if the function is used as a filter. Triggering a performance-oriented lint on this type of code is the definition of pedantic.\n\n```rust\nfn filter(_n: &i32) -> bool {\n    true\n}\n\nfn main() {\n    let v = vec![1, 2, 3];\n    v.iter().copied().filter(filter).for_each(drop);\n}\n```\n\n```console\nwarning: this argument (4 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)\n --> src/main.rs:1:15\n  |\n1 | fn filter(_n: &i32) -> bool {\n  |               ^^^^ help: consider passing by value instead: `i32`\n```\n\nchangelog: Remove trivially_copy_pass_by_ref from default set of enabled lints", "tree": {"sha": "1612307bb9ebc31d57d900367d804decb4b456dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1612307bb9ebc31d57d900367d804decb4b456dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e1bd519a176f5e518c51814958dc64e8e7c1758", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJejdaZCRBK7hj4Ov3rIwAAdHIIADrMw7vaLznISBRHdiuQR22a\nk/td4OIuB1vfkstvkBuoOXiAkh7IhVKMf+b9uj4rxZvTkklkQHOhrz0UhTmF+Q16\nmXr5oCJHtvwSv4sLDLnQH6AZfPMURaGUbIU1F59uNC0tKVz0X9NXOLKnyibZ/+pu\nrIHjFylxnEQ1PE+0DzpjhPX7OjT3QnyERS9WCSf9obQWjx6IJ0XRSqoB5PrySheM\n9mED3bCGsyY3gkf8uBpJi4NbE6DvPWVkbdIPqxCTAXQZOtIMkb7TLn3+Tl1vYHXx\nnUjt1mg3/x2T+jZWWZFVfayYE0TSlLPxdfbMZpo7GbP9j7VY9kxU77s5by4sBIU=\n=4f6+\n-----END PGP SIGNATURE-----\n", "payload": "tree 1612307bb9ebc31d57d900367d804decb4b456dc\nparent 935b45db61e9906c8371718af3fca101dc3ce376\nparent 94154cad20d4687461fcbb4901a1252576329d13\nauthor Philipp Krones <hello@philkrones.com> 1586353817 +0200\ncommitter GitHub <noreply@github.com> 1586353817 +0200\n\nRollup merge of #5410 - dtolnay:trivially, r=flip1995\n\nDowngrade trivially_copy_pass_by_ref to pedantic\n\nThe rationale for this lint is documented as:\n\n> In many calling conventions instances of structs will be passed through registers if they fit into two or less general purpose registers.\n\nI think the purported performance benefits of clippy's recommendation are overstated. This isn't worth asking people to sprinkle code with more `*`\u200b`*`\u200b`&`\u200b`*`\u200b`&` to chase the alleged performance.\n\nThis should be a pedantic lint that is disabled by default and opted in if some specific performance sensitive codebase determines that it is worthwhile.\n\nAs a reminder, a typical place that a reference to a primitive would come up is if the function is used as a filter. Triggering a performance-oriented lint on this type of code is the definition of pedantic.\n\n```rust\nfn filter(_n: &i32) -> bool {\n    true\n}\n\nfn main() {\n    let v = vec![1, 2, 3];\n    v.iter().copied().filter(filter).for_each(drop);\n}\n```\n\n```console\nwarning: this argument (4 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)\n --> src/main.rs:1:15\n  |\n1 | fn filter(_n: &i32) -> bool {\n  |               ^^^^ help: consider passing by value instead: `i32`\n```\n\nchangelog: Remove trivially_copy_pass_by_ref from default set of enabled lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1bd519a176f5e518c51814958dc64e8e7c1758", "html_url": "https://github.com/rust-lang/rust/commit/1e1bd519a176f5e518c51814958dc64e8e7c1758", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e1bd519a176f5e518c51814958dc64e8e7c1758/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "935b45db61e9906c8371718af3fca101dc3ce376", "url": "https://api.github.com/repos/rust-lang/rust/commits/935b45db61e9906c8371718af3fca101dc3ce376", "html_url": "https://github.com/rust-lang/rust/commit/935b45db61e9906c8371718af3fca101dc3ce376"}, {"sha": "94154cad20d4687461fcbb4901a1252576329d13", "url": "https://api.github.com/repos/rust-lang/rust/commits/94154cad20d4687461fcbb4901a1252576329d13", "html_url": "https://github.com/rust-lang/rust/commit/94154cad20d4687461fcbb4901a1252576329d13"}], "stats": {"total": 274, "additions": 135, "deletions": 139}, "files": [{"sha": "fc7a3d8e0213cb5ced758f48b86dfe7b977d9e54", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1125,6 +1125,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&shadow::SHADOW_UNRELATED),\n         LintId::of(&strings::STRING_ADD_ASSIGN),\n         LintId::of(&trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n+        LintId::of(&trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF),\n         LintId::of(&types::CAST_LOSSLESS),\n         LintId::of(&types::CAST_POSSIBLE_TRUNCATION),\n         LintId::of(&types::CAST_POSSIBLE_WRAP),\n@@ -1372,7 +1373,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&transmute::UNSOUND_COLLECTION_TRANSMUTE),\n         LintId::of(&transmute::WRONG_TRANSMUTE),\n         LintId::of(&transmuting_null::TRANSMUTING_NULL),\n-        LintId::of(&trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF),\n         LintId::of(&try_err::TRY_ERR),\n         LintId::of(&types::ABSURD_EXTREME_COMPARISONS),\n         LintId::of(&types::BORROWED_BOX),\n@@ -1665,7 +1665,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&mutex_atomic::MUTEX_ATOMIC),\n         LintId::of(&redundant_clone::REDUNDANT_CLONE),\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n-        LintId::of(&trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF),\n         LintId::of(&types::BOX_VEC),\n         LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&vec::USELESS_VEC),"}, {"sha": "2c101220c5d6897f943b0799d615993283d2194e", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -49,7 +49,7 @@ declare_clippy_lint! {\n     /// fn foo(v: u32) {}\n     /// ```\n     pub TRIVIALLY_COPY_PASS_BY_REF,\n-    perf,\n+    pedantic,\n     \"functions taking small copyable arguments by reference\"\n }\n "}, {"sha": "d7dab78fbe4f1214d08a9644b41e441d26600f5c", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -2161,7 +2161,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"trivially_copy_pass_by_ref\",\n-        group: \"perf\",\n+        group: \"pedantic\",\n         desc: \"functions taking small copyable arguments by reference\",\n         deprecation: None,\n         module: \"trivially_copy_pass_by_ref\","}, {"sha": "19019a2541631767abf56555c0411d03465af1af", "filename": "tests/ui-toml/toml_trivially_copy/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,6 +1,7 @@\n // normalize-stderr-test \"\\(\\d+ byte\\)\" -> \"(N byte)\"\n // normalize-stderr-test \"\\(limit: \\d+ byte\\)\" -> \"(limit: N byte)\"\n \n+#![deny(clippy::trivially_copy_pass_by_ref)]\n #![allow(clippy::many_single_char_names)]\n \n #[derive(Copy, Clone)]"}, {"sha": "912761a8f009c2dfd2e856d7e62d12ad5113e94c", "filename": "tests/ui-toml/toml_trivially_copy/test.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,13 +1,17 @@\n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/test.rs:14:11\n+  --> $DIR/test.rs:15:11\n    |\n LL | fn bad(x: &u16, y: &Foo) {}\n    |           ^^^^ help: consider passing by value instead: `u16`\n    |\n-   = note: `-D clippy::trivially-copy-pass-by-ref` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/test.rs:4:9\n+   |\n+LL | #![deny(clippy::trivially_copy_pass_by_ref)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/test.rs:14:20\n+  --> $DIR/test.rs:15:20\n    |\n LL | fn bad(x: &u16, y: &Foo) {}\n    |                    ^^^^ help: consider passing by value instead: `Foo`"}, {"sha": "5bfa256623b6bbcd5b56bb93421b655e417f0d68", "filename": "tests/ui/clone_on_copy_mut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fclone_on_copy_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fclone_on_copy_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy_mut.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -5,7 +5,6 @@ pub fn dec_read_dec(i: &mut i32) -> i32 {\n     ret\n }\n \n-#[allow(clippy::trivially_copy_pass_by_ref)]\n pub fn minus_1(i: &i32) -> i32 {\n     dec_read_dec(&mut i.clone())\n }"}, {"sha": "b061fff6b9e9dfb775f5cab14783c01678d802cc", "filename": "tests/ui/debug_assert_with_mut_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fdebug_assert_with_mut_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fdebug_assert_with_mut_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdebug_assert_with_mut_call.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -2,7 +2,7 @@\n #![feature(custom_inner_attributes)]\n #![rustfmt::skip]\n #![warn(clippy::debug_assert_with_mut_call)]\n-#![allow(clippy::trivially_copy_pass_by_ref, clippy::cognitive_complexity, clippy::redundant_closure_call)]\n+#![allow(clippy::cognitive_complexity, clippy::redundant_closure_call)]\n \n struct S;\n "}, {"sha": "1b34c2f74eba1cf41055c0fe3436fea25f79a541", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -6,8 +6,7 @@\n     clippy::redundant_closure_call,\n     clippy::many_single_char_names,\n     clippy::needless_pass_by_value,\n-    clippy::option_map_unit_fn,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::option_map_unit_fn\n )]\n #![warn(\n     clippy::redundant_closure,"}, {"sha": "4f050bd8479ae90e7784ffc33bd44698c17724df", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -6,8 +6,7 @@\n     clippy::redundant_closure_call,\n     clippy::many_single_char_names,\n     clippy::needless_pass_by_value,\n-    clippy::option_map_unit_fn,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::option_map_unit_fn\n )]\n #![warn(\n     clippy::redundant_closure,"}, {"sha": "c4713ca8083dd1f1afb28d0dafe2c7fc793d5da3", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,77 +1,77 @@\n error: redundant closure found\n-  --> $DIR/eta.rs:21:27\n+  --> $DIR/eta.rs:20:27\n    |\n LL |     let a = Some(1u8).map(|a| foo(a));\n    |                           ^^^^^^^^^^ help: remove closure as shown: `foo`\n    |\n    = note: `-D clippy::redundant-closure` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:22:10\n+  --> $DIR/eta.rs:21:10\n    |\n LL |     meta(|a| foo(a));\n    |          ^^^^^^^^^^ help: remove closure as shown: `foo`\n \n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/eta.rs:25:21\n+  --> $DIR/eta.rs:24:21\n    |\n LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n    |                     ^^^ help: change this to: `&2`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:32:27\n+  --> $DIR/eta.rs:31:27\n    |\n LL |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `generic`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:75:51\n+  --> $DIR/eta.rs:74:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n    |                                                   ^^^^^^^^^^^ help: remove closure as shown: `TestStruct::foo`\n    |\n    = note: `-D clippy::redundant-closure-for-method-calls` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:77:51\n+  --> $DIR/eta.rs:76:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n    |                                                   ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `TestTrait::trait_foo`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:80:42\n+  --> $DIR/eta.rs:79:42\n    |\n LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n    |                                          ^^^^^^^^^^^^^ help: remove closure as shown: `std::vec::Vec::clear`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:85:29\n+  --> $DIR/eta.rs:84:29\n    |\n LL |     let e = Some(\"str\").map(|s| s.to_string());\n    |                             ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `std::string::ToString::to_string`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:87:27\n+  --> $DIR/eta.rs:86:27\n    |\n LL |     let e = Some('a').map(|s| s.to_uppercase());\n    |                           ^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:90:65\n+  --> $DIR/eta.rs:89:65\n    |\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:173:27\n+  --> $DIR/eta.rs:172:27\n    |\n LL |     let a = Some(1u8).map(|a| foo_ptr(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `foo_ptr`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:178:27\n+  --> $DIR/eta.rs:177:27\n    |\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `closure`"}, {"sha": "26df71ddcb0f9e0ac7e855fa6327b727fb067190", "filename": "tests/ui/extra_unused_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fextra_unused_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fextra_unused_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -2,8 +2,7 @@\n     unused,\n     dead_code,\n     clippy::needless_lifetimes,\n-    clippy::needless_pass_by_value,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::needless_pass_by_value\n )]\n #![warn(clippy::extra_unused_lifetimes)]\n "}, {"sha": "e997951346f793f8c9107d18a61d71379a34c0ee", "filename": "tests/ui/extra_unused_lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fextra_unused_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fextra_unused_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.stderr?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,25 +1,25 @@\n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:14:14\n+  --> $DIR/extra_unused_lifetimes.rs:13:14\n    |\n LL | fn unused_lt<'a>(x: u8) {}\n    |              ^^\n    |\n    = note: `-D clippy::extra-unused-lifetimes` implied by `-D warnings`\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:16:25\n+  --> $DIR/extra_unused_lifetimes.rs:15:25\n    |\n LL | fn unused_lt_transitive<'a, 'b: 'a>(x: &'b u8) {\n    |                         ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:41:10\n+  --> $DIR/extra_unused_lifetimes.rs:40:10\n    |\n LL |     fn x<'a>(&self) {}\n    |          ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:67:22\n+  --> $DIR/extra_unused_lifetimes.rs:66:22\n    |\n LL |         fn unused_lt<'a>(x: u8) {}\n    |                      ^^"}, {"sha": "60fa7569eb9dd5f14fb0292608534a72d1b1bc20", "filename": "tests/ui/float_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Ffloat_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Ffloat_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_arithmetic.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -5,8 +5,7 @@\n     clippy::shadow_unrelated,\n     clippy::no_effect,\n     clippy::unnecessary_operation,\n-    clippy::op_ref,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::op_ref\n )]\n \n #[rustfmt::skip]"}, {"sha": "1ceffb35beede707299d01555ee718c7ad3bb1ea", "filename": "tests/ui/float_arithmetic.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Ffloat_arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Ffloat_arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_arithmetic.stderr?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,103 +1,103 @@\n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:16:5\n+  --> $DIR/float_arithmetic.rs:15:5\n    |\n LL |     f * 2.0;\n    |     ^^^^^^^\n    |\n    = note: `-D clippy::float-arithmetic` implied by `-D warnings`\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:18:5\n+  --> $DIR/float_arithmetic.rs:17:5\n    |\n LL |     1.0 + f;\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:19:5\n+  --> $DIR/float_arithmetic.rs:18:5\n    |\n LL |     f * 2.0;\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:20:5\n+  --> $DIR/float_arithmetic.rs:19:5\n    |\n LL |     f / 2.0;\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:21:5\n+  --> $DIR/float_arithmetic.rs:20:5\n    |\n LL |     f - 2.0 * 4.2;\n    |     ^^^^^^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:22:5\n+  --> $DIR/float_arithmetic.rs:21:5\n    |\n LL |     -f;\n    |     ^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:24:5\n+  --> $DIR/float_arithmetic.rs:23:5\n    |\n LL |     f += 1.0;\n    |     ^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:25:5\n+  --> $DIR/float_arithmetic.rs:24:5\n    |\n LL |     f -= 1.0;\n    |     ^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:26:5\n+  --> $DIR/float_arithmetic.rs:25:5\n    |\n LL |     f *= 2.0;\n    |     ^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:27:5\n+  --> $DIR/float_arithmetic.rs:26:5\n    |\n LL |     f /= 2.0;\n    |     ^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:33:5\n+  --> $DIR/float_arithmetic.rs:32:5\n    |\n LL |     3.1_f32 + &1.2_f32;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:34:5\n+  --> $DIR/float_arithmetic.rs:33:5\n    |\n LL |     &3.4_f32 + 1.5_f32;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:35:5\n+  --> $DIR/float_arithmetic.rs:34:5\n    |\n LL |     &3.5_f32 + &1.3_f32;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:40:5\n+  --> $DIR/float_arithmetic.rs:39:5\n    |\n LL |     a + f\n    |     ^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:44:5\n+  --> $DIR/float_arithmetic.rs:43:5\n    |\n LL |     f1 + f2\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:48:5\n+  --> $DIR/float_arithmetic.rs:47:5\n    |\n LL |     f1 + f2\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:52:5\n+  --> $DIR/float_arithmetic.rs:51:5\n    |\n LL |     (&f1 + &f2)\n    |     ^^^^^^^^^^^"}, {"sha": "1fe688977659d962c5535b4127df8cf546c4852a", "filename": "tests/ui/infinite_iter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,5 +1,4 @@\n use std::iter::repeat;\n-#[allow(clippy::trivially_copy_pass_by_ref)]\n fn square_is_lower_64(x: &u32) -> bool {\n     x * x < 64\n }"}, {"sha": "5f5e7ac9f253a0e0589dec0a662495f5747d2bb4", "filename": "tests/ui/infinite_iter.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Finfinite_iter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Finfinite_iter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.stderr?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,29 +1,29 @@\n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:10:5\n+  --> $DIR/infinite_iter.rs:9:5\n    |\n LL |     repeat(0_u8).collect::<Vec<_>>(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/infinite_iter.rs:8:8\n+  --> $DIR/infinite_iter.rs:7:8\n    |\n LL | #[deny(clippy::infinite_iter)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:11:5\n+  --> $DIR/infinite_iter.rs:10:5\n    |\n LL |     (0..8_u32).take_while(square_is_lower_64).cycle().count(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:12:5\n+  --> $DIR/infinite_iter.rs:11:5\n    |\n LL |     (0..8_u64).chain(0..).max(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:17:5\n+  --> $DIR/infinite_iter.rs:16:5\n    |\n LL | /     (0..8_u32)\n LL | |         .rev()\n@@ -33,37 +33,37 @@ LL | |         .for_each(|x| println!(\"{}\", x)); // infinite iter\n    | |________________________________________^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:23:5\n+  --> $DIR/infinite_iter.rs:22:5\n    |\n LL |     (0_usize..).flat_map(|x| 0..x).product::<usize>(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:24:5\n+  --> $DIR/infinite_iter.rs:23:5\n    |\n LL |     (0_u64..).filter(|x| x % 2 == 0).last(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:31:5\n+  --> $DIR/infinite_iter.rs:30:5\n    |\n LL |     (0..).zip((0..).take_while(square_is_lower_64)).count(); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/infinite_iter.rs:29:8\n+  --> $DIR/infinite_iter.rs:28:8\n    |\n LL | #[deny(clippy::maybe_infinite_iter)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:32:5\n+  --> $DIR/infinite_iter.rs:31:5\n    |\n LL |     repeat(42).take_while(|x| *x == 42).chain(0..42).max(); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:33:5\n+  --> $DIR/infinite_iter.rs:32:5\n    |\n LL | /     (1..)\n LL | |         .scan(0, |state, x| {\n@@ -74,31 +74,31 @@ LL | |         .min(); // maybe infinite iter\n    | |______________^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:39:5\n+  --> $DIR/infinite_iter.rs:38:5\n    |\n LL |     (0..).find(|x| *x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:40:5\n+  --> $DIR/infinite_iter.rs:39:5\n    |\n LL |     (0..).position(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:41:5\n+  --> $DIR/infinite_iter.rs:40:5\n    |\n LL |     (0..).any(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:42:5\n+  --> $DIR/infinite_iter.rs:41:5\n    |\n LL |     (0..).all(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:65:31\n+  --> $DIR/infinite_iter.rs:64:31\n    |\n LL |         let _: HashSet<i32> = (0..).collect(); // Infinite iter\n    |                               ^^^^^^^^^^^^^^^"}, {"sha": "72591f12baf852811efbc511a1ee7cf965929fe7", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,5 +1,3 @@\n-#![allow(clippy::trivially_copy_pass_by_ref)]\n-\n fn fn_val(i: i32) -> i32 {\n     unimplemented!()\n }"}, {"sha": "1fcb29eff18e41c05d34873d57bfe2ab77dd7f48", "filename": "tests/ui/infinite_loop.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,5 +1,5 @@\n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:23:11\n+  --> $DIR/infinite_loop.rs:21:11\n    |\n LL |     while y < 10 {\n    |           ^^^^^^\n@@ -8,71 +8,71 @@ LL |     while y < 10 {\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:28:11\n+  --> $DIR/infinite_loop.rs:26:11\n    |\n LL |     while y < 10 && x < 3 {\n    |           ^^^^^^^^^^^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:35:11\n+  --> $DIR/infinite_loop.rs:33:11\n    |\n LL |     while !cond {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:79:11\n+  --> $DIR/infinite_loop.rs:77:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:84:11\n+  --> $DIR/infinite_loop.rs:82:11\n    |\n LL |     while i < 3 && j > 0 {\n    |           ^^^^^^^^^^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:88:11\n+  --> $DIR/infinite_loop.rs:86:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:103:11\n+  --> $DIR/infinite_loop.rs:101:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:108:11\n+  --> $DIR/infinite_loop.rs:106:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:174:15\n+  --> $DIR/infinite_loop.rs:172:15\n    |\n LL |         while self.count < n {\n    |               ^^^^^^^^^^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:182:11\n+  --> $DIR/infinite_loop.rs:180:11\n    |\n LL |     while y < 10 {\n    |           ^^^^^^\n@@ -82,7 +82,7 @@ LL |     while y < 10 {\n    = help: rewrite it as `if cond { loop { } }`\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:189:11\n+  --> $DIR/infinite_loop.rs:187:11\n    |\n LL |     while y < 10 {\n    |           ^^^^^^"}, {"sha": "2fe32c6ace875c8790f8e302d44d6401cd1a8d79", "filename": "tests/ui/integer_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Finteger_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Finteger_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_arithmetic.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -5,8 +5,7 @@\n     clippy::shadow_unrelated,\n     clippy::no_effect,\n     clippy::unnecessary_operation,\n-    clippy::op_ref,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::op_ref\n )]\n \n #[rustfmt::skip]"}, {"sha": "64c44d7ecc7b06bfa3e3d321c8304726a11f3c5b", "filename": "tests/ui/integer_arithmetic.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Finteger_arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Finteger_arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_arithmetic.stderr?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,104 +1,104 @@\n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:15:5\n+  --> $DIR/integer_arithmetic.rs:14:5\n    |\n LL |     1 + i;\n    |     ^^^^^\n    |\n    = note: `-D clippy::integer-arithmetic` implied by `-D warnings`\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:16:5\n+  --> $DIR/integer_arithmetic.rs:15:5\n    |\n LL |     i * 2;\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:17:5\n+  --> $DIR/integer_arithmetic.rs:16:5\n    |\n LL | /     1 %\n LL | |     i / 2; // no error, this is part of the expression in the preceding line\n    | |_________^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:19:5\n+  --> $DIR/integer_arithmetic.rs:18:5\n    |\n LL |     i - 2 + 2 - i;\n    |     ^^^^^^^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:20:5\n+  --> $DIR/integer_arithmetic.rs:19:5\n    |\n LL |     -i;\n    |     ^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:32:5\n+  --> $DIR/integer_arithmetic.rs:31:5\n    |\n LL |     i += 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:33:5\n+  --> $DIR/integer_arithmetic.rs:32:5\n    |\n LL |     i -= 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:34:5\n+  --> $DIR/integer_arithmetic.rs:33:5\n    |\n LL |     i *= 2;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:35:5\n+  --> $DIR/integer_arithmetic.rs:34:5\n    |\n LL |     i /= 2;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:36:5\n+  --> $DIR/integer_arithmetic.rs:35:5\n    |\n LL |     i %= 2;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:82:5\n+  --> $DIR/integer_arithmetic.rs:81:5\n    |\n LL |     3 + &1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:83:5\n+  --> $DIR/integer_arithmetic.rs:82:5\n    |\n LL |     &3 + 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:84:5\n+  --> $DIR/integer_arithmetic.rs:83:5\n    |\n LL |     &3 + &1;\n    |     ^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:89:5\n+  --> $DIR/integer_arithmetic.rs:88:5\n    |\n LL |     a + x\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:93:5\n+  --> $DIR/integer_arithmetic.rs:92:5\n    |\n LL |     x + y\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:97:5\n+  --> $DIR/integer_arithmetic.rs:96:5\n    |\n LL |     x + y\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:101:5\n+  --> $DIR/integer_arithmetic.rs:100:5\n    |\n LL |     (&x + &y)\n    |     ^^^^^^^^^"}, {"sha": "a9a04c8f56b945ca7c0e94b35a211119f7799a2d", "filename": "tests/ui/mut_from_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused, clippy::trivially_copy_pass_by_ref)]\n+#![allow(unused)]\n #![warn(clippy::mut_from_ref)]\n \n struct Foo;"}, {"sha": "73906121c402efba40d6f13c9cc696d7f669c628", "filename": "tests/ui/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused_variables, clippy::trivially_copy_pass_by_ref)]\n+#![allow(unused_variables)]\n \n fn takes_an_immutable_reference(a: &i32) {}\n fn takes_a_mutable_reference(a: &mut i32) {}"}, {"sha": "5ae4a0e79b99d39a9ca852111c09ed7ed313fa51", "filename": "tests/ui/needless_borrow.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.fixed?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(clippy::needless_borrowed_reference)]\n \n-#[allow(clippy::trivially_copy_pass_by_ref)]\n fn x(y: &i32) -> i32 {\n     *y\n }"}, {"sha": "1e281316c8a39c10e053d2d529896c93b19b1400", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(clippy::needless_borrowed_reference)]\n \n-#[allow(clippy::trivially_copy_pass_by_ref)]\n fn x(y: &i32) -> i32 {\n     *y\n }"}, {"sha": "0bfeda7914db70182e39f4eef6d960251d208a8c", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,25 +1,25 @@\n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:15:15\n+  --> $DIR/needless_borrow.rs:14:15\n    |\n LL |     let c = x(&&a);\n    |               ^^^ help: change this to: `&a`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow.rs:22:17\n+  --> $DIR/needless_borrow.rs:21:17\n    |\n LL |     if let Some(ref cake) = Some(&5) {}\n    |                 ^^^^^^^^ help: change this to: `cake`\n \n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:29:15\n+  --> $DIR/needless_borrow.rs:28:15\n    |\n LL |         46 => &&a,\n    |               ^^^ help: change this to: `&a`\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow.rs:52:31\n+  --> $DIR/needless_borrow.rs:51:31\n    |\n LL |     let _ = v.iter().filter(|&ref a| a.is_empty());\n    |                               ^^^^^ help: change this to: `a`"}, {"sha": "913cd004f19f4bd70941f49127930ec902573669", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::needless_lifetimes)]\n-#![allow(dead_code, clippy::needless_pass_by_value, clippy::trivially_copy_pass_by_ref)]\n+#![allow(dead_code, clippy::needless_pass_by_value)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n "}, {"sha": "35aaecc9ac42372ff23bb38e17837ed659351ecb", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::new_ret_no_self)]\n-#![allow(dead_code, clippy::trivially_copy_pass_by_ref)]\n+#![allow(dead_code)]\n \n fn main() {}\n "}, {"sha": "316426f1cf181788dbc48dba7e69f244f4908531", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,6 +1,7 @@\n // normalize-stderr-test \"\\(\\d+ byte\\)\" -> \"(N byte)\"\n // normalize-stderr-test \"\\(limit: \\d+ byte\\)\" -> \"(limit: N byte)\"\n \n+#![deny(clippy::trivially_copy_pass_by_ref)]\n #![allow(\n     clippy::many_single_char_names,\n     clippy::blacklisted_name,"}, {"sha": "be0914e4a7947f7197002ee591009b0c79fa8abd", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,91 +1,95 @@\n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:11\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:11\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |           ^^^^ help: consider passing by value instead: `u32`\n    |\n-   = note: `-D clippy::trivially-copy-pass-by-ref` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/trivially_copy_pass_by_ref.rs:4:9\n+   |\n+LL | #![deny(clippy::trivially_copy_pass_by_ref)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:20\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:20\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |                    ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:29\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:29\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |                             ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:12\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:12\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |            ^^^^^ help: consider passing by value instead: `self`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:22\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:22\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                      ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:31\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:31\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                               ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:40\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:40\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                                        ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:71:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:72:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:71:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:72:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:71:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:72:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:75:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:76:34\n    |\n LL |     fn trait_method(&self, _foo: &Foo);\n    |                                  ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:79:37\n+  --> $DIR/trivially_copy_pass_by_ref.rs:80:37\n    |\n LL |     fn trait_method2(&self, _color: &Color);\n    |                                     ^^^^^^ help: consider passing by value instead: `Color`"}, {"sha": "e356f13d087b1fcdeffbb7a3c4f15d52b55b183e", "filename": "tests/ui/useless_asref.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fuseless_asref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fuseless_asref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.fixed?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n \n #![deny(clippy::useless_asref)]\n-#![allow(clippy::trivially_copy_pass_by_ref)]\n \n use std::fmt::Debug;\n "}, {"sha": "2a80291f5d837b4614de012ac60f9fb1d2b9b256", "filename": "tests/ui/useless_asref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fuseless_asref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fuseless_asref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n \n #![deny(clippy::useless_asref)]\n-#![allow(clippy::trivially_copy_pass_by_ref)]\n \n use std::fmt::Debug;\n "}, {"sha": "5876b54aca8f0e8347995ae6c6ead836768b6a7c", "filename": "tests/ui/useless_asref.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fuseless_asref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fuseless_asref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.stderr?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,5 +1,5 @@\n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:44:18\n+  --> $DIR/useless_asref.rs:43:18\n    |\n LL |         foo_rstr(rstr.as_ref());\n    |                  ^^^^^^^^^^^^^ help: try this: `rstr`\n@@ -11,61 +11,61 @@ LL | #![deny(clippy::useless_asref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:46:20\n+  --> $DIR/useless_asref.rs:45:20\n    |\n LL |         foo_rslice(rslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^ help: try this: `rslice`\n \n error: this call to `as_mut` does nothing\n-  --> $DIR/useless_asref.rs:50:21\n+  --> $DIR/useless_asref.rs:49:21\n    |\n LL |         foo_mrslice(mrslice.as_mut());\n    |                     ^^^^^^^^^^^^^^^^ help: try this: `mrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:52:20\n+  --> $DIR/useless_asref.rs:51:20\n    |\n LL |         foo_rslice(mrslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^^ help: try this: `mrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:59:20\n+  --> $DIR/useless_asref.rs:58:20\n    |\n LL |         foo_rslice(rrrrrslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^^^^^ help: try this: `rrrrrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:61:18\n+  --> $DIR/useless_asref.rs:60:18\n    |\n LL |         foo_rstr(rrrrrstr.as_ref());\n    |                  ^^^^^^^^^^^^^^^^^ help: try this: `rrrrrstr`\n \n error: this call to `as_mut` does nothing\n-  --> $DIR/useless_asref.rs:66:21\n+  --> $DIR/useless_asref.rs:65:21\n    |\n LL |         foo_mrslice(mrrrrrslice.as_mut());\n    |                     ^^^^^^^^^^^^^^^^^^^^ help: try this: `mrrrrrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:68:20\n+  --> $DIR/useless_asref.rs:67:20\n    |\n LL |         foo_rslice(mrrrrrslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^^^^^^ help: try this: `mrrrrrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:72:16\n+  --> $DIR/useless_asref.rs:71:16\n    |\n LL |     foo_rrrrmr((&&&&MoreRef).as_ref());\n    |                ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&&&&MoreRef)`\n \n error: this call to `as_mut` does nothing\n-  --> $DIR/useless_asref.rs:122:13\n+  --> $DIR/useless_asref.rs:121:13\n    |\n LL |     foo_mrt(mrt.as_mut());\n    |             ^^^^^^^^^^^^ help: try this: `mrt`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:124:12\n+  --> $DIR/useless_asref.rs:123:12\n    |\n LL |     foo_rt(mrt.as_ref());\n    |            ^^^^^^^^^^^^ help: try this: `mrt`"}, {"sha": "99652ca4470c2a47530812a3b78f0e2381f68ec3", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e1bd519a176f5e518c51814958dc64e8e7c1758/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=1e1bd519a176f5e518c51814958dc64e8e7c1758", "patch": "@@ -1,6 +1,6 @@\n #![warn(clippy::wrong_self_convention)]\n #![warn(clippy::wrong_pub_self_convention)]\n-#![allow(dead_code, clippy::trivially_copy_pass_by_ref)]\n+#![allow(dead_code)]\n \n fn main() {}\n "}]}