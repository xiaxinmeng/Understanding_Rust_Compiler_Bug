{"sha": "7eaca60f3b3b783ffa1e80ccf91e820f9436b3a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYWNhNjBmM2IzYjc4M2ZmYTFlODBjY2Y5MWU4MjBmOTQzNmIzYTM=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-05-21T12:03:49Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-05-21T12:03:49Z"}, "message": "Return a correct size_hint for degenerate inclusive ranges\n\nFixes https://github.com/rust-lang/rust/issues/42135\n\nFound while fixing run-pass/range_inclusive test failure.", "tree": {"sha": "5fd4eb1b9d221dea54890af1cfd75a547bace52d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd4eb1b9d221dea54890af1cfd75a547bace52d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eaca60f3b3b783ffa1e80ccf91e820f9436b3a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eaca60f3b3b783ffa1e80ccf91e820f9436b3a3", "html_url": "https://github.com/rust-lang/rust/commit/7eaca60f3b3b783ffa1e80ccf91e820f9436b3a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eaca60f3b3b783ffa1e80ccf91e820f9436b3a3/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f166bd9857dac3c66e812ba6bc33e59494c3fef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f166bd9857dac3c66e812ba6bc33e59494c3fef2", "html_url": "https://github.com/rust-lang/rust/commit/f166bd9857dac3c66e812ba6bc33e59494c3fef2"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "02d38ccea44eadcb2b95caee0450fbecd7d8d279", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7eaca60f3b3b783ffa1e80ccf91e820f9436b3a3/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eaca60f3b3b783ffa1e80ccf91e820f9436b3a3/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=7eaca60f3b3b783ffa1e80ccf91e820f9436b3a3", "patch": "@@ -575,6 +575,10 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> where\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n+        if !(self.start <= self.end) {\n+            return (0, Some(0));\n+        }\n+\n         match Step::steps_between_by_one(&self.start, &self.end) {\n             Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),\n             None => (0, None),"}, {"sha": "b81b3878c9d6e1d4c82a117f46107a17cf170b0b", "filename": "src/libcore/tests/ops.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7eaca60f3b3b783ffa1e80ccf91e820f9436b3a3/src%2Flibcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eaca60f3b3b783ffa1e80ccf91e820f9436b3a3/src%2Flibcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fops.rs?ref=7eaca60f3b3b783ffa1e80ccf91e820f9436b3a3", "patch": "@@ -62,4 +62,9 @@ fn test_range_inclusive() {\n     r = RangeInclusive { start: -128i8, end: -128 };\n     assert_eq!(r.next_back(), Some(-128));\n     assert_eq!(r.next_back(), None);\n+\n+    // degenerate\n+    r = RangeInclusive { start: 1, end: -1 };\n+    assert_eq!(r.size_hint(), (0, Some(0)));\n+    assert_eq!(r.next(), None);\n }\n\\ No newline at end of file"}, {"sha": "372d4a8b732acfb44151cd560e3d489653ffd179", "filename": "src/test/run-pass/range_inclusive.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7eaca60f3b3b783ffa1e80ccf91e820f9436b3a3/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eaca60f3b3b783ffa1e80ccf91e820f9436b3a3/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange_inclusive.rs?ref=7eaca60f3b3b783ffa1e80ccf91e820f9436b3a3", "patch": "@@ -82,7 +82,7 @@ pub fn main() {\n     short.next();\n     assert_eq!(long.size_hint(), (255, Some(255)));\n     assert_eq!(short.size_hint(), (0, Some(0)));\n-    assert_eq!(short, RangeInclusive::Empty { at: 42 });\n+    assert_eq!(short, 1...0);\n \n     assert_eq!(long.len(), 255);\n     assert_eq!(short.len(), 0);\n@@ -97,28 +97,28 @@ pub fn main() {\n     for i in 3...251 {\n         assert_eq!(long.next(), Some(i));\n     }\n-    assert_eq!(long, RangeInclusive::Empty { at: 251 });\n+    assert_eq!(long, 1...0);\n \n     // check underflow\n     let mut narrow = 1...0;\n     assert_eq!(narrow.next_back(), None);\n-    assert_eq!(narrow, RangeInclusive::Empty { at: 0 });\n+    assert_eq!(narrow, 1...0);\n     let mut zero = 0u8...0;\n     assert_eq!(zero.next_back(), Some(0));\n     assert_eq!(zero.next_back(), None);\n-    assert_eq!(zero, RangeInclusive::Empty { at: 0 });\n+    assert_eq!(zero, 1...0);\n     let mut high = 255u8...255;\n     assert_eq!(high.next_back(), Some(255));\n     assert_eq!(high.next_back(), None);\n-    assert_eq!(high, RangeInclusive::Empty { at: 255 });\n+    assert_eq!(high, 1...0);\n \n     // what happens if you have a nonsense range?\n     let mut nonsense = 10...5;\n     assert_eq!(nonsense.next(), None);\n-    assert_eq!(nonsense, RangeInclusive::Empty { at: 10 });\n+    assert_eq!(nonsense, 10...5);\n \n     // output\n     assert_eq!(format!(\"{:?}\", 0...10), \"0...10\");\n     assert_eq!(format!(\"{:?}\", ...10), \"...10\");\n-    assert_eq!(format!(\"{:?}\", long), \"[empty range @ 251]\");\n+    assert_eq!(format!(\"{:?}\", long), \"1...0\");\n }"}]}