{"sha": "733e95444fea30235c18076736d26b0f57adda9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczM2U5NTQ0NGZlYTMwMjM1YzE4MDc2NzM2ZDI2YjBmNTdhZGRhOWU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-07T17:12:01Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-10T15:46:31Z"}, "message": "clean up reassignment duplicate error prevention", "tree": {"sha": "73d7826afd516590f6550fdf29990a5bc9ff68cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73d7826afd516590f6550fdf29990a5bc9ff68cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/733e95444fea30235c18076736d26b0f57adda9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/733e95444fea30235c18076736d26b0f57adda9e", "html_url": "https://github.com/rust-lang/rust/commit/733e95444fea30235c18076736d26b0f57adda9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/733e95444fea30235c18076736d26b0f57adda9e/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a3f7cdcc7ff5074c9a83346b221f04023572d4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3f7cdcc7ff5074c9a83346b221f04023572d4d", "html_url": "https://github.com/rust-lang/rust/commit/5a3f7cdcc7ff5074c9a83346b221f04023572d4d"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "149b40046d2161156fae0df39f03369909da8e8b", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/733e95444fea30235c18076736d26b0f57adda9e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/733e95444fea30235c18076736d26b0f57adda9e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=733e95444fea30235c18076736d26b0f57adda9e", "patch": "@@ -610,6 +610,12 @@ enum LocalMutationIsAllowed {\n     No\n }\n \n+struct AccessErrorsReported {\n+    mutability_error: bool,\n+    #[allow(dead_code)]\n+    conflict_error: bool\n+}\n+\n #[derive(Copy, Clone)]\n enum InitializationRequiringAction {\n     Update,\n@@ -652,7 +658,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         kind: (ShallowOrDeep, ReadOrWrite),\n         is_local_mutation_allowed: LocalMutationIsAllowed,\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n-    ) {\n+    ) -> AccessErrorsReported {\n         let (sd, rw) = kind;\n \n         let storage_dead_or_drop_local = match (place_span.0, rw) {\n@@ -663,14 +669,38 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         // Check if error has already been reported to stop duplicate reporting.\n         if let Some(local) = storage_dead_or_drop_local {\n             if self.storage_dead_or_drop_error_reported.contains(&local) {\n-                return;\n+                return AccessErrorsReported {\n+                    mutability_error: false,\n+                    conflict_error: true\n+                };\n             }\n         }\n \n-        // Check permissions\n-        let mut error_reported =\n+        let mutability_error =\n             self.check_access_permissions(place_span, rw, is_local_mutation_allowed);\n+        let conflict_error =\n+            self.check_access_for_conflict(context, place_span, sd, rw, flow_state);\n \n+        // A conflict with a storagedead/drop is a \"borrow does not live long enough\"\n+        // error. Avoid reporting such an error multiple times for the same local.\n+        if conflict_error {\n+            if let Some(local) = storage_dead_or_drop_local {\n+                self.storage_dead_or_drop_error_reported.insert(local);\n+            }\n+        }\n+\n+        AccessErrorsReported { mutability_error, conflict_error }\n+    }\n+\n+    fn check_access_for_conflict(\n+        &mut self,\n+        context: Context,\n+        place_span: (&Place<'tcx>, Span),\n+        sd: ShallowOrDeep,\n+        rw: ReadOrWrite,\n+        flow_state: &Flows<'cx, 'gcx, 'tcx>,\n+    ) -> bool {\n+        let mut error_reported = false;\n         self.each_borrow_involving_path(\n             context,\n             (sd, place_span.0),\n@@ -742,11 +772,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             },\n         );\n \n-        if error_reported {\n-            if let Some(local) = storage_dead_or_drop_local {\n-                self.storage_dead_or_drop_error_reported.insert(local);\n-            }\n-        }\n+        error_reported\n     }\n \n     fn mutate_place(\n@@ -772,16 +798,18 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n         }\n \n-        self.access_place(\n+        let errors_reported = self.access_place(\n             context,\n             place_span,\n             (kind, Write(WriteKind::Mutate)),\n             LocalMutationIsAllowed::Yes,\n             flow_state,\n         );\n \n-        // check for reassignments to immutable local variables\n-        self.check_if_reassignment_to_immutable_state(context, place_span, flow_state);\n+        if !errors_reported.mutability_error {\n+            // check for reassignments to immutable local variables\n+            self.check_if_reassignment_to_immutable_state(context, place_span, flow_state);\n+        }\n     }\n \n     fn consume_rvalue(\n@@ -988,10 +1016,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             return;\n         }\n \n-        if let Err(_) = self.is_mutable(place, LocalMutationIsAllowed::Yes) {\n-            return;\n-        }\n-\n         match self.move_path_closest_to(place) {\n             Ok(mpi) => for ii in &move_data.init_path_map[mpi] {\n                 if flow_state.ever_inits.contains(ii) {"}]}