{"sha": "f455dc1976c2eeea3c840cfbcf7be8d9490e4113", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NTVkYzE5NzZjMmVlZWEzYzg0MGNmYmNmN2JlOGQ5NDkwZTQxMTM=", "commit": {"author": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2012-02-25T03:26:42Z"}, "committer": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2012-02-25T03:26:42Z"}, "message": "Improve the cycle-collector fuzzer", "tree": {"sha": "0f60e0a9c148b470bd1c829c9b36b4ab904db752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f60e0a9c148b470bd1c829c9b36b4ab904db752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f455dc1976c2eeea3c840cfbcf7be8d9490e4113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f455dc1976c2eeea3c840cfbcf7be8d9490e4113", "html_url": "https://github.com/rust-lang/rust/commit/f455dc1976c2eeea3c840cfbcf7be8d9490e4113", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f455dc1976c2eeea3c840cfbcf7be8d9490e4113/comments", "author": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c00a7b08ebc2c1453015f5937f63492b4dc163d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c00a7b08ebc2c1453015f5937f63492b4dc163d8", "html_url": "https://github.com/rust-lang/rust/commit/c00a7b08ebc2c1453015f5937f63492b4dc163d8"}], "stats": {"total": 86, "additions": 59, "deletions": 27}, "files": [{"sha": "494121aaa2c63d3edb137cb965b4bb3d19be2e79", "filename": "src/fuzzer/cycles.rs", "status": "modified", "additions": 59, "deletions": 27, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/f455dc1976c2eeea3c840cfbcf7be8d9490e4113/src%2Ffuzzer%2Fcycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f455dc1976c2eeea3c840cfbcf7be8d9490e4113/src%2Ffuzzer%2Fcycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fcycles.rs?ref=f455dc1976c2eeea3c840cfbcf7be8d9490e4113", "patch": "@@ -1,59 +1,91 @@\n use std;\n-import vec;\n import std::rand;\n-import option;\n+import uint::range;\n \n // random uint less than n\n fn under(r : rand::rng, n : uint) -> uint { assert n != 0u; r.next() as uint % n }\n \n // random choice from a vec\n-fn choice<T: copy>(r : rand::rng, v : [T]) -> T { assert vec::len(v) != 0u; v[under(r, vec::len(v))] }\n+fn choice<T: copy>(r : rand::rng, v : [const T]) -> T { assert vec::len(v) != 0u; v[under(r, vec::len(v))] }\n \n-// 1 in n chance of being true\n-fn unlikely(r : rand::rng, n : uint) -> bool { under(r, n) == 0u }\n+// k in n chance of being true\n+fn likelihood(r : rand::rng, k : uint, n : uint) -> bool { under(r, n) < k }\n+\n+\n+const iters : uint = 1000u;\n+const vlen  : uint = 100u;\n \n enum maybe_pointy {\n-  no_pointy,\n-  yes_pointy(@pointy),\n+    none,\n+    p(@pointy)\n }\n \n type pointy = {\n-  mutable x : maybe_pointy,\n-  mutable y : maybe_pointy,\n-  mutable z : fn@()->()\n+    mut a : maybe_pointy,\n+    mut b : ~maybe_pointy,\n+    mut c : @maybe_pointy,\n+\n+    mut f : fn@()->(),\n+    mut g : fn~()->(),\n+\n+    mut m : [maybe_pointy],\n+    mut n : [mut maybe_pointy],\n+    mut o : {x : int, y : maybe_pointy}\n };\n+// To add: objects; ifaces; anything type-parameterized?\n+\n+fn empty_pointy() -> @pointy {\n+    ret @{\n+        mut a : none,\n+        mut b : ~none,\n+        mut c : @none,\n \n-fn allunder(n: uint, it: block(uint)) {\n-    let i: uint = 0u;\n-    while i < n { it(i); i += 1u; }\n+        mut f : fn@()->(){},\n+        mut g : fn~()->(){},\n+\n+        mut m : [],\n+        mut n : [mut],\n+        mut o : {x : 0, y : none}\n+    }\n }\n \n-fn nopT(_x : @pointy) { }\n-fn nop() { }\n+fn nopP(_x : @pointy) { }\n+fn nop<T>(_x: T) { }\n \n-fn test_cycles(r : rand::rng)\n+fn test_cycles(r : rand::rng, k: uint, n: uint)\n {\n-    const max : uint = 10u;\n+    let v : [mut @pointy] = [mut];\n \n-    let v : [mutable @pointy] = [mutable];\n-    allunder(max) {|_i|\n-        v += [mutable @{ mutable x : no_pointy, mutable y : no_pointy, mutable z: bind nop() }];\n+    // Create a graph with no edges\n+    range(0u, vlen) {|_i|\n+        v += [mut empty_pointy()];\n     }\n \n-    allunder(max) {|i|\n-        v[i].x = yes_pointy(v[under(r, max)]);\n-        v[i].y = yes_pointy(v[under(r, max)]);\n-        v[i].z = bind nopT(v[under(r, max)]);\n+    // Fill in the graph with random edges, with density k/n\n+    range(0u, vlen) {|i|\n+        if (likelihood(r, k, n)) { v[i].a = p(choice(r, v)); }\n+        if (likelihood(r, k, n)) { v[i].b = ~p(choice(r, v)); }\n+        if (likelihood(r, k, n)) { v[i].c = @p(choice(r, v)); }\n+\n+        if (likelihood(r, k, n)) { v[i].f = bind nopP(choice(r, v)); }\n+        if (false)               { v[i].g = bind (fn~(_x: @pointy) { })(choice(r, v)); }\n+          // https://github.com/mozilla/rust/issues/1899\n+\n+        if (likelihood(r, k, n)) { v[i].m = [p(choice(r, v))]; }\n+        if (likelihood(r, k, n)) { v[i].n += [mut p(choice(r, v))]; }\n+        if (likelihood(r, k, n)) { v[i].o = {x: 0, y: p(choice(r, v))}; }\n     }\n \n     // Drop refs one at a time\n-    allunder(max) {|i|\n-        v[i] = @{ mutable x : no_pointy, mutable y : no_pointy, mutable z: bind nop() };\n+    range(0u, vlen) {|i|\n+        v[i] = empty_pointy()\n     }\n }\n \n fn main()\n {\n     let r = rand::mk_rng();\n-    test_cycles(r);\n+    range(0u, iters) {|i|\n+        test_cycles(r, i, iters);\n+    }\n }"}]}