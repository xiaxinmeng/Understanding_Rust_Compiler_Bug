{"sha": "168d9e77456b09d062f84d808c0f42336c03acb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2OGQ5ZTc3NDU2YjA5ZDA2MmY4NGQ4MDhjMGY0MjMzNmMwM2FjYjE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-08T08:26:33Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-08T08:26:33Z"}, "message": "don't use `type_is_immediate` for finding fat ptr casts", "tree": {"sha": "9461ff6cd264fb71a8f94b144a40acbcaac651d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9461ff6cd264fb71a8f94b144a40acbcaac651d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/168d9e77456b09d062f84d808c0f42336c03acb1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX0SC5AAoJEFbW7qD8Z6xGWw4QAJaPTjYqzWskQOXJVqle0ZXC\nL9mFGQtx3Ot114rcFDqfpQ240tDyGcdw9tt6G0+wW84RW0wgY2yQyfrAorrmqjT/\nKt1axOMJV+KeOjvLgo3/vRsPyvrodwiHeE12UrohfKtLrWxg0Lp3YFsSJKxfTLp2\nLxoJJP9eF7o2EX5OxwiGrxoKFno/1Ejf093SNJ9D3WPIHM1ippWCj7GXFoIEh066\nv5KPEnqxQxCiancFeZEg5nZOEPhgYeiUudD4K8xJEI4Pp9XjizKu1euubpAfBQsX\nUIh3NWsoLmUiKxp0OPmlZlMT6/rtZnYRoYU3PQhZ7kZtN6rFt1/IakF2D2kCkkdT\nDvheFT7wsQLprZnCEFAiy9AjqJLFKszZ5Aa70MxEDSZp12KtUXgUKXZBvzATuUHn\nbocpfawVoEtpoNekpD+6EG6Z4Wh2l/PuTDzz1wLCpVK+SW2r7OKH9khUFZvHTYjj\n0k4dnRm6bAbHjzSX3XtdBjBDn+l/AlKJz+CRzIWDXeYwdBf3PS5rYsvxh1w5MBuy\nHkNuYUsBzmgX3m3T5yTzn8yL10Ro7l74Mlza3YThjfXELiznG45KHpzA1Kly9LPV\nr1sYWGwUFvH/IM56WRyoDeH/Tc91fTMtEtTHF0kaqUnNsmO3NIAVTzoxna0ZS29h\nMkfyAwvhjIL/rpZLVrbI\n=BsV4\n-----END PGP SIGNATURE-----", "payload": "tree 9461ff6cd264fb71a8f94b144a40acbcaac651d0\nparent d627cc749f9d504751e0636da3be620f01520088\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1473323193 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1473323193 +0200\n\ndon't use `type_is_immediate` for finding fat ptr casts"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/168d9e77456b09d062f84d808c0f42336c03acb1", "html_url": "https://github.com/rust-lang/rust/commit/168d9e77456b09d062f84d808c0f42336c03acb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/168d9e77456b09d062f84d808c0f42336c03acb1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d627cc749f9d504751e0636da3be620f01520088", "url": "https://api.github.com/repos/rust-lang/rust/commits/d627cc749f9d504751e0636da3be620f01520088", "html_url": "https://github.com/rust-lang/rust/commit/d627cc749f9d504751e0636da3be620f01520088"}], "stats": {"total": 37, "additions": 7, "deletions": 30}, "files": [{"sha": "e77ec942bbf556c3f4f3d3e6249ccad525b79d35", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/168d9e77456b09d062f84d808c0f42336c03acb1/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168d9e77456b09d062f84d808c0f42336c03acb1/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=168d9e77456b09d062f84d808c0f42336c03acb1", "patch": "@@ -604,16 +604,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Misc => {\n                         let src = self.eval_operand(operand)?;\n                         let src_ty = self.operand_ty(operand);\n-                        if self.type_is_immediate(src_ty) {\n-                            // FIXME: dest_ty should already be monomorphized\n-                            let dest_ty = self.monomorphize(dest_ty, self.substs());\n-                            assert!(self.type_is_immediate(dest_ty));\n-                            let src_val = self.read_primval(src, src_ty)?;\n-                            let dest_val = self.cast_primval(src_val, dest_ty)?;\n-                            self.memory.write_primval(dest, dest_val)?;\n-                        } else {\n-                            // Casts from a fat-ptr.\n-                            assert!(self.type_is_fat_ptr(src_ty));\n+                        if self.type_is_fat_ptr(src_ty) {\n                             let (data_ptr, _meta_ptr) = self.get_fat_ptr(src);\n                             let ptr_size = self.memory.pointer_size();\n                             let dest_ty = self.monomorphize(dest_ty, self.substs());\n@@ -626,6 +617,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 // pointer-cast of that pointer to desired pointer type.\n                                 self.memory.copy(data_ptr, dest, ptr_size, ptr_size)?;\n                             }\n+                        } else {\n+                            // FIXME: dest_ty should already be monomorphized\n+                            let dest_ty = self.monomorphize(dest_ty, self.substs());\n+                            let src_val = self.read_primval(src, src_ty)?;\n+                            let dest_val = self.cast_primval(src_val, dest_ty)?;\n+                            self.memory.write_primval(dest, dest_val)?;\n                         }\n                     }\n \n@@ -656,26 +653,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(())\n     }\n \n-    /// equivalent to rustc_trans::common::type_is_immediate\n-    fn type_is_immediate(&self, ty: Ty<'tcx>) -> bool {\n-        let simple = ty.is_scalar() ||\n-            ty.is_unique() || ty.is_region_ptr() ||\n-            ty.is_simd();\n-        if simple && !self.type_is_fat_ptr(ty) {\n-            return true;\n-        }\n-        if !self.type_is_sized(ty) {\n-            return false;\n-        }\n-        match ty.sty {\n-            ty::TyStruct(..) | ty::TyEnum(..) | ty::TyTuple(..) | ty::TyArray(_, _) |\n-            ty::TyClosure(..) => {\n-                self.type_size(ty) < self.memory.pointer_size()\n-            }\n-            _ => self.type_size(ty) == 0\n-        }\n-    }\n-\n     fn type_is_fat_ptr(&self, ty: Ty<'tcx>) -> bool {\n         match ty.sty {\n             ty::TyRawPtr(ty::TypeAndMut{ty, ..}) |"}]}