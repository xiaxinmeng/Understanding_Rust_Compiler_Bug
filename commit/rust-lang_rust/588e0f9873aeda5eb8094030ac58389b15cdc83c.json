{"sha": "588e0f9873aeda5eb8094030ac58389b15cdc83c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4OGUwZjk4NzNhZWRhNWViODA5NDAzMGFjNTgzODliMTVjZGM4M2M=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-01-08T23:34:05Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-27T03:26:28Z"}, "message": "Remove the implicit binder from `VecPerParamSpace`", "tree": {"sha": "6dacf305ea5a06b971c4575efd14f152133ab7ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dacf305ea5a06b971c4575efd14f152133ab7ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/588e0f9873aeda5eb8094030ac58389b15cdc83c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/588e0f9873aeda5eb8094030ac58389b15cdc83c", "html_url": "https://github.com/rust-lang/rust/commit/588e0f9873aeda5eb8094030ac58389b15cdc83c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/588e0f9873aeda5eb8094030ac58389b15cdc83c/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5a91e69582b63f19192ad860df0f7a9a8530f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a91e69582b63f19192ad860df0f7a9a8530f56", "html_url": "https://github.com/rust-lang/rust/commit/d5a91e69582b63f19192ad860df0f7a9a8530f56"}], "stats": {"total": 91, "additions": 23, "deletions": 68}, "files": [{"sha": "54223e16e17c5e0355605e81d1581bfb888f8002", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/588e0f9873aeda5eb8094030ac58389b15cdc83c/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588e0f9873aeda5eb8094030ac58389b15cdc83c/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=588e0f9873aeda5eb8094030ac58389b15cdc83c", "patch": "@@ -116,21 +116,9 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n pub trait TypeFolder<'tcx> : Sized {\n     fn tcx<'a>(&'a self) -> &'a TyCtxt<'tcx>;\n \n-    /// Invoked by the `super_*` routines when we enter a region\n-    /// binding level (for example, when entering a function\n-    /// signature). This is used by clients that want to track the\n-    /// Debruijn index nesting level.\n-    fn enter_region_binder(&mut self) { }\n-\n-    /// Invoked by the `super_*` routines when we exit a region\n-    /// binding level. This is used by clients that want to\n-    /// track the Debruijn index nesting level.\n-    fn exit_region_binder(&mut self) { }\n-\n     fn fold_binder<T>(&mut self, t: &Binder<T>) -> Binder<T>\n         where T : TypeFoldable<'tcx>\n     {\n-        // FIXME(#20526) this should replace `enter_region_binder`/`exit_region_binder`.\n         t.super_fold_with(self)\n     }\n \n@@ -197,8 +185,9 @@ pub trait TypeFolder<'tcx> : Sized {\n }\n \n pub trait TypeVisitor<'tcx> : Sized {\n-    fn enter_region_binder(&mut self) { }\n-    fn exit_region_binder(&mut self) { }\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n+        t.super_visit_with(self)\n+    }\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n         t.super_visit_with(self)\n@@ -296,12 +285,11 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx>\n {\n     fn tcx(&self) -> &TyCtxt<'tcx> { self.tcx }\n \n-    fn enter_region_binder(&mut self) {\n+    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T> {\n         self.current_depth += 1;\n-    }\n-\n-    fn exit_region_binder(&mut self) {\n+        let t = t.super_fold_with(self);\n         self.current_depth -= 1;\n+        t\n     }\n \n     fn fold_region(&mut self, r: ty::Region) -> ty::Region {\n@@ -438,12 +426,11 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionReplacer<'a, 'tcx>\n {\n     fn tcx(&self) -> &TyCtxt<'tcx> { self.tcx }\n \n-    fn enter_region_binder(&mut self) {\n+    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T> {\n         self.current_depth += 1;\n-    }\n-\n-    fn exit_region_binder(&mut self) {\n+        let t = t.super_fold_with(self);\n         self.current_depth -= 1;\n+        t\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n@@ -596,12 +583,11 @@ struct HasEscapingRegionsVisitor {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for HasEscapingRegionsVisitor {\n-    fn enter_region_binder(&mut self) {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n         self.depth += 1;\n-    }\n-\n-    fn exit_region_binder(&mut self) {\n+        let result = t.super_visit_with(self);\n         self.depth -= 1;\n+        result\n     }\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {"}, {"sha": "82cc9e7f2e3db91c3a52c7b46b846d93ae8780d5", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 8, "deletions": 38, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/588e0f9873aeda5eb8094030ac58389b15cdc83c/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588e0f9873aeda5eb8094030ac58389b15cdc83c/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=588e0f9873aeda5eb8094030ac58389b15cdc83c", "patch": "@@ -190,21 +190,19 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n \n impl<'tcx, T:TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-        folder.enter_region_binder();\n-        let result = ty::Binder(self.0.fold_with(folder));\n-        folder.exit_region_binder();\n-        result\n+        ty::Binder(self.0.fold_with(folder))\n     }\n \n     fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         folder.fold_binder(self)\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        visitor.enter_region_binder();\n-        if self.0.visit_with(visitor) { return true }\n-        visitor.exit_region_binder();\n-        false\n+        self.0.visit_with(visitor)\n+    }\n+\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        visitor.visit_binder(self)\n     }\n }\n \n@@ -220,39 +218,11 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for P<[T]> {\n \n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for VecPerParamSpace<T> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n-\n-        // Things in the Fn space take place under an additional level\n-        // of region binding relative to the other spaces. This is\n-        // because those entries are attached to a method, and methods\n-        // always introduce a level of region binding.\n-\n-        let result = self.map_enumerated(|(space, index, elem)| {\n-            if space == subst::FnSpace && index == 0 {\n-                // enter new level when/if we reach the first thing in fn space\n-                folder.enter_region_binder();\n-            }\n-            elem.fold_with(folder)\n-        });\n-        if result.len(subst::FnSpace) > 0 {\n-            // if there was anything in fn space, exit the region binding level\n-            folder.exit_region_binder();\n-        }\n-        result\n+        self.map(|elem| elem.fold_with(folder))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        let mut entered_region_binder = false;\n-        let result = self.iter_enumerated().any(|(space, index, t)| {\n-            if space == subst::FnSpace && index == 0 {\n-                visitor.enter_region_binder();\n-                entered_region_binder = true;\n-            }\n-            t.visit_with(visitor)\n-        });\n-        if entered_region_binder {\n-            visitor.exit_region_binder();\n-        }\n-        result\n+        self.iter().any(|elem| elem.visit_with(visitor))\n     }\n }\n "}, {"sha": "c3ab817c27e87ef17afd8008e880b1ca8b5a0f1e", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/588e0f9873aeda5eb8094030ac58389b15cdc83c/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/588e0f9873aeda5eb8094030ac58389b15cdc83c/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=588e0f9873aeda5eb8094030ac58389b15cdc83c", "patch": "@@ -582,12 +582,11 @@ struct SubstFolder<'a, 'tcx: 'a> {\n impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n     fn tcx(&self) -> &TyCtxt<'tcx> { self.tcx }\n \n-    fn enter_region_binder(&mut self) {\n+    fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T> {\n         self.region_binders_passed += 1;\n-    }\n-\n-    fn exit_region_binder(&mut self) {\n+        let t = t.super_fold_with(self);\n         self.region_binders_passed -= 1;\n+        t\n     }\n \n     fn fold_region(&mut self, r: ty::Region) -> ty::Region {"}]}