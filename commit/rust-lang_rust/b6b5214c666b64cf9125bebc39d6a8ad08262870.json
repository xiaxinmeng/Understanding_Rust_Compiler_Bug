{"sha": "b6b5214c666b64cf9125bebc39d6a8ad08262870", "node_id": "C_kwDOAAsO6NoAKGI2YjUyMTRjNjY2YjY0Y2Y5MTI1YmViYzM5ZDZhOGFkMDgyNjI4NzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-22T14:42:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-22T14:42:25Z"}, "message": "Auto merge of #12053 - willcrichton:master, r=jonas-schievink\n\nExport lc.LanguageClient from VSCode extension\n\nAs described in [this Zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Use.20Rust.20Analyzer.20in.20another.20VSCode.20extension), I would like to experiment with using Rust Analyzer's language server inside another VSCode extension, [Flowistry](https://github.com/willcrichton/flowistry). My current use case is to use one of Rust Analyzer's assists (extract function).\n\nThis PR would enable that experimentation by exporting the `lc.LanguageClient` from the `activate` function, which [allows other extensions to access it](https://code.visualstudio.com/api/references/vscode-api#extensions). This PR does **not** commit RA to any stability guarantees about the language client, similar to how rustc exports an unstable API.", "tree": {"sha": "8457b2b26355314199cafa40473d2fad5c56f7fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8457b2b26355314199cafa40473d2fad5c56f7fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6b5214c666b64cf9125bebc39d6a8ad08262870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6b5214c666b64cf9125bebc39d6a8ad08262870", "html_url": "https://github.com/rust-lang/rust/commit/b6b5214c666b64cf9125bebc39d6a8ad08262870", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6b5214c666b64cf9125bebc39d6a8ad08262870/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1db66b96c897f45f67e24081dbe726ddc536388c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1db66b96c897f45f67e24081dbe726ddc536388c", "html_url": "https://github.com/rust-lang/rust/commit/1db66b96c897f45f67e24081dbe726ddc536388c"}, {"sha": "d607c1b558b434d60846ce3052da0058e761a530", "url": "https://api.github.com/repos/rust-lang/rust/commits/d607c1b558b434d60846ce3052da0058e761a530", "html_url": "https://github.com/rust-lang/rust/commit/d607c1b558b434d60846ce3052da0058e761a530"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "7591865390bf2085bcf54238572a415218ddb77b", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b6b5214c666b64cf9125bebc39d6a8ad08262870/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b6b5214c666b64cf9125bebc39d6a8ad08262870/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=b6b5214c666b64cf9125bebc39d6a8ad08262870", "patch": "@@ -1,4 +1,5 @@\n import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient/node';\n import * as os from \"os\";\n \n import * as commands from './commands';\n@@ -14,16 +15,20 @@ let ctx: Ctx | undefined;\n \n const RUST_PROJECT_CONTEXT_NAME = \"inRustProject\";\n \n-export async function activate(context: vscode.ExtensionContext) {\n+export interface RustAnalyzerExtensionApi {\n+    client: lc.LanguageClient;\n+}\n+\n+export async function activate(context: vscode.ExtensionContext): Promise<RustAnalyzerExtensionApi> {\n     // VS Code doesn't show a notification when an extension fails to activate\n     // so we do it ourselves.\n-    await tryActivate(context).catch(err => {\n+    return await tryActivate(context).catch(err => {\n         void vscode.window.showErrorMessage(`Cannot activate rust-analyzer: ${err.message}`);\n         throw err;\n     });\n }\n \n-async function tryActivate(context: vscode.ExtensionContext) {\n+async function tryActivate(context: vscode.ExtensionContext): Promise<RustAnalyzerExtensionApi> {\n     const config = new Config(context);\n     const state = new PersistentState(context.globalState);\n     const serverPath = await bootstrap(context, config, state).catch(err => {\n@@ -62,6 +67,10 @@ async function tryActivate(context: vscode.ExtensionContext) {\n         null,\n         ctx.subscriptions,\n     );\n+\n+    return {\n+        client: ctx.client\n+    };\n }\n \n async function initCommonContext(context: vscode.ExtensionContext, ctx: Ctx) {"}]}