{"sha": "5ac973426eb1f6b3dd9b883daedbfe71f27da704", "node_id": "C_kwDOAAsO6NoAKDVhYzk3MzQyNmViMWY2YjNkZDliODgzZGFlZGJmZTcxZjI3ZGE3MDQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-23T09:06:29Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-20T09:49:29Z"}, "message": "rewrite `ensure_drop_params_and_item_params_correspond`", "tree": {"sha": "4e9543400f0b74d623163dae2129bd53fe040cb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e9543400f0b74d623163dae2129bd53fe040cb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ac973426eb1f6b3dd9b883daedbfe71f27da704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac973426eb1f6b3dd9b883daedbfe71f27da704", "html_url": "https://github.com/rust-lang/rust/commit/5ac973426eb1f6b3dd9b883daedbfe71f27da704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ac973426eb1f6b3dd9b883daedbfe71f27da704/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3f68324cc0eddf115270a71147738eb94cbcad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3f68324cc0eddf115270a71147738eb94cbcad0", "html_url": "https://github.com/rust-lang/rust/commit/f3f68324cc0eddf115270a71147738eb94cbcad0"}], "stats": {"total": 199, "additions": 72, "deletions": 127}, "files": [{"sha": "0b0f7a085fcba4347e467dd3af4226733deb50df", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 28, "deletions": 73, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/5ac973426eb1f6b3dd9b883daedbfe71f27da704/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac973426eb1f6b3dd9b883daedbfe71f27da704/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=5ac973426eb1f6b3dd9b883daedbfe71f27da704", "patch": "@@ -2,17 +2,13 @@ use crate::check::regionck::RegionCtxt;\n use crate::hir;\n use crate::hir::def_id::{DefId, LocalDefId};\n use rustc_errors::{struct_span_err, ErrorGuaranteed};\n-use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n-use rustc_infer::infer::{InferOk, RegionckMode, TyCtxtInferExt};\n-use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, EarlyBinder, Predicate, Ty, TyCtxt};\n+use rustc_middle::ty::subst::SubstsRef;\n+use rustc_middle::ty::{self, Predicate, Ty, TyCtxt};\n use rustc_span::Span;\n-use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::query::dropck_outlives::AtExt;\n-use rustc_trait_selection::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n+use rustc_trait_selection::traits::ObligationCause;\n \n /// This function confirms that the `Drop` implementation identified by\n /// `drop_impl_did` is not any more specialized than the type it is\n@@ -39,8 +35,8 @@ pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), Erro\n             ensure_drop_params_and_item_params_correspond(\n                 tcx,\n                 drop_impl_did.expect_local(),\n-                dtor_self_type,\n                 adt_def.did(),\n+                self_to_impl_substs,\n             )?;\n \n             ensure_drop_predicates_are_implied_by_item_defn(\n@@ -67,75 +63,34 @@ pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), Erro\n fn ensure_drop_params_and_item_params_correspond<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     drop_impl_did: LocalDefId,\n-    drop_impl_ty: Ty<'tcx>,\n     self_type_did: DefId,\n+    drop_impl_substs: SubstsRef<'tcx>,\n ) -> Result<(), ErrorGuaranteed> {\n-    let drop_impl_hir_id = tcx.hir().local_def_id_to_hir_id(drop_impl_did);\n-\n-    // check that the impl type can be made to match the trait type.\n-\n-    tcx.infer_ctxt().enter(|ref infcx| {\n-        let impl_param_env = tcx.param_env(self_type_did);\n-        let tcx = infcx.tcx;\n-        let mut fulfillment_cx = <dyn TraitEngine<'_>>::new(tcx);\n-\n-        let named_type = tcx.type_of(self_type_did);\n-\n-        let drop_impl_span = tcx.def_span(drop_impl_did);\n-        let fresh_impl_substs =\n-            infcx.fresh_substs_for_item(drop_impl_span, drop_impl_did.to_def_id());\n-        let fresh_impl_self_ty = EarlyBinder(drop_impl_ty).subst(tcx, fresh_impl_substs);\n-\n-        let cause = &ObligationCause::misc(drop_impl_span, drop_impl_hir_id);\n-        match infcx.at(cause, impl_param_env).eq(named_type, fresh_impl_self_ty) {\n-            Ok(InferOk { obligations, .. }) => {\n-                fulfillment_cx.register_predicate_obligations(infcx, obligations);\n-            }\n-            Err(_) => {\n-                let item_span = tcx.def_span(self_type_did);\n-                let self_descr = tcx.def_kind(self_type_did).descr(self_type_did);\n-                let reported = struct_span_err!(\n-                    tcx.sess,\n-                    drop_impl_span,\n-                    E0366,\n-                    \"`Drop` impls cannot be specialized\"\n-                )\n-                .span_note(\n-                    item_span,\n-                    &format!(\n-                        \"use the same sequence of generic type, lifetime and const parameters \\\n-                        as the {self_descr} definition\",\n-                    ),\n-                )\n-                .emit();\n-                return Err(reported);\n-            }\n+    let Err(arg) = tcx.uses_unique_generic_params(drop_impl_substs, false) else {\n+        return Ok(())\n+    };\n+\n+    let drop_impl_span = tcx.def_span(drop_impl_did);\n+    let item_span = tcx.def_span(self_type_did);\n+    let self_descr = tcx.def_kind(self_type_did).descr(self_type_did);\n+    let mut err =\n+        struct_span_err!(tcx.sess, drop_impl_span, E0366, \"`Drop` impls cannot be specialized\");\n+    match arg {\n+        ty::util::NotUniqueParam::DuplicateParam(arg) => {\n+            err.note(&format!(\"`{arg}` is mentioned multiple times\"))\n         }\n-\n-        let errors = fulfillment_cx.select_all_or_error(&infcx);\n-        if !errors.is_empty() {\n-            // this could be reached when we get lazy normalization\n-            let reported = infcx.report_fulfillment_errors(&errors, None, false);\n-            return Err(reported);\n+        ty::util::NotUniqueParam::NotParam(arg) => {\n+            err.note(&format!(\"`{arg}` is not a generic parameter\"))\n         }\n-\n-        // NB. It seems a bit... suspicious to use an empty param-env\n-        // here. The correct thing, I imagine, would be\n-        // `OutlivesEnvironment::new(impl_param_env)`, which would\n-        // allow region solving to take any `a: 'b` relations on the\n-        // impl into account. But I could not create a test case where\n-        // it did the wrong thing, so I chose to preserve existing\n-        // behavior, since it ought to be simply more\n-        // conservative. -nmatsakis\n-        let outlives_env = OutlivesEnvironment::new(ty::ParamEnv::empty());\n-\n-        infcx.resolve_regions_and_report_errors(\n-            drop_impl_did.to_def_id(),\n-            &outlives_env,\n-            RegionckMode::default(),\n-        );\n-        Ok(())\n-    })\n+    };\n+    err.span_note(\n+        item_span,\n+        &format!(\n+            \"use the same sequence of generic type, lifetime and const parameters \\\n+                     as the {self_descr} definition\",\n+        ),\n+    );\n+    Err(err.emit())\n }\n \n /// Confirms that every predicate imposed by dtor_predicates is"}, {"sha": "f8b3f1ac3df3277a2001c385cd58ab24d6de2488", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5ac973426eb1f6b3dd9b883daedbfe71f27da704/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac973426eb1f6b3dd9b883daedbfe71f27da704/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=5ac973426eb1f6b3dd9b883daedbfe71f27da704", "patch": "@@ -383,20 +383,13 @@ fn lint_auto_trait_impls(tcx: TyCtxt<'_>, trait_def_id: DefId, impls: &[LocalDef\n             tcx.hir().local_def_id_to_hir_id(impl_def_id),\n             tcx.def_span(impl_def_id),\n             |err| {\n+                let item_span = tcx.def_span(self_type_did);\n+                let self_descr = tcx.def_kind(self_type_did).descr(self_type_did);\n                 let mut err = err.build(&format!(\n                     \"cross-crate traits with a default impl, like `{}`, \\\n                          should not be specialized\",\n                     tcx.def_path_str(trait_def_id),\n                 ));\n-                let item_span = tcx.def_span(self_type_did);\n-                let self_descr = tcx.def_kind(self_type_did).descr(self_type_did);\n-                err.span_note(\n-                    item_span,\n-                    &format!(\n-                        \"try using the same sequence of generic parameters as the {} definition\",\n-                        self_descr,\n-                    ),\n-                );\n                 match arg {\n                     ty::util::NotUniqueParam::DuplicateParam(arg) => {\n                         err.note(&format!(\"`{}` is mentioned multiple times\", arg));\n@@ -405,6 +398,13 @@ fn lint_auto_trait_impls(tcx: TyCtxt<'_>, trait_def_id: DefId, impls: &[LocalDef\n                         err.note(&format!(\"`{}` is not a generic parameter\", arg));\n                     }\n                 }\n+                err.span_note(\n+                    item_span,\n+                    &format!(\n+                        \"try using the same sequence of generic parameters as the {} definition\",\n+                        self_descr,\n+                    ),\n+                );\n                 err.emit();\n             },\n         );"}, {"sha": "03460b28dcd5a4e155768ead2e1baf39901f99a1", "filename": "src/test/ui/auto-traits/suspicious-impls-lint.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ac973426eb1f6b3dd9b883daedbfe71f27da704/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ac973426eb1f6b3dd9b883daedbfe71f27da704/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fsuspicious-impls-lint.stderr?ref=5ac973426eb1f6b3dd9b883daedbfe71f27da704", "patch": "@@ -11,12 +11,12 @@ LL | #![deny(suspicious_auto_trait_impls)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this will change its meaning in a future release!\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `&T` is not a generic parameter\n note: try using the same sequence of generic parameters as the struct definition\n   --> $DIR/suspicious-impls-lint.rs:8:1\n    |\n LL | struct MayImplementSendErr<T>(T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: `&T` is not a generic parameter\n \n error: cross-crate traits with a default impl, like `Send`, should not be specialized\n   --> $DIR/suspicious-impls-lint.rs:21:1\n@@ -26,12 +26,12 @@ LL | unsafe impl Send for ContainsVec<i32> {}\n    |\n    = warning: this will change its meaning in a future release!\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `i32` is not a generic parameter\n note: try using the same sequence of generic parameters as the struct definition\n   --> $DIR/suspicious-impls-lint.rs:20:1\n    |\n LL | struct ContainsVec<T>(Vec<T>);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: `i32` is not a generic parameter\n \n error: cross-crate traits with a default impl, like `Send`, should not be specialized\n   --> $DIR/suspicious-impls-lint.rs:32:1\n@@ -41,12 +41,12 @@ LL | unsafe impl<T: Send> Send for TwoParamsSame<T, T> {}\n    |\n    = warning: this will change its meaning in a future release!\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `T` is mentioned multiple times\n note: try using the same sequence of generic parameters as the struct definition\n   --> $DIR/suspicious-impls-lint.rs:31:1\n    |\n LL | struct TwoParamsSame<T, U>(T, U);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: `T` is mentioned multiple times\n \n error: cross-crate traits with a default impl, like `Send`, should not be specialized\n   --> $DIR/suspicious-impls-lint.rs:40:1\n@@ -56,12 +56,12 @@ LL | unsafe impl<T> Send for WithPhantomDataSend<*const T, i8> {}\n    |\n    = warning: this will change its meaning in a future release!\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `*const T` is not a generic parameter\n note: try using the same sequence of generic parameters as the struct definition\n   --> $DIR/suspicious-impls-lint.rs:39:1\n    |\n LL | pub struct WithPhantomDataSend<T, U>(PhantomData<T>, U);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: `*const T` is not a generic parameter\n \n error: cross-crate traits with a default impl, like `Sync`, should not be specialized\n   --> $DIR/suspicious-impls-lint.rs:46:1\n@@ -71,12 +71,12 @@ LL | unsafe impl<T> Sync for WithLifetime<'static, Vec<T>> {}\n    |\n    = warning: this will change its meaning in a future release!\n    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>\n+   = note: `Vec<T>` is not a generic parameter\n note: try using the same sequence of generic parameters as the struct definition\n   --> $DIR/suspicious-impls-lint.rs:44:1\n    |\n LL | pub struct WithLifetime<'a, T>(&'a (), T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: `Vec<T>` is not a generic parameter\n \n error: aborting due to 5 previous errors\n "}, {"sha": "f369b74cf55159994e049994cc42ecdc21b8ac82", "filename": "src/test/ui/dropck/issue-38868.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ac973426eb1f6b3dd9b883daedbfe71f27da704/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ac973426eb1f6b3dd9b883daedbfe71f27da704/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fissue-38868.stderr?ref=5ac973426eb1f6b3dd9b883daedbfe71f27da704", "patch": "@@ -8,6 +8,7 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n+   = note: `i32` is not a generic parameter\n note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n   --> $DIR/issue-38868.rs:1:1\n    |"}, {"sha": "7a3bbe7cb093282ec5322ca820e4151acf2e7632", "filename": "src/test/ui/dropck/reject-specialized-drops-8142.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ac973426eb1f6b3dd9b883daedbfe71f27da704/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac973426eb1f6b3dd9b883daedbfe71f27da704/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.rs?ref=5ac973426eb1f6b3dd9b883daedbfe71f27da704", "patch": "@@ -32,9 +32,7 @@ impl<'al,'adds_bnd>     Drop for L<'al,'adds_bnd> where 'adds_bnd:'al {    // RE\n impl<'ml>               Drop for M<'ml>         { fn drop(&mut self) { } } // ACCEPT\n \n impl                    Drop for N<'static>     { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR mismatched types\n-//~| expected struct `N<'n>`\n-//~|    found struct `N<'static>`\n+//~^ ERROR `Drop` impls cannot be specialized\n \n impl<COkNoBound> Drop for O<COkNoBound> { fn drop(&mut self) { } } // ACCEPT\n \n@@ -57,7 +55,7 @@ impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n //~^ ERROR `Drop` impls cannot be specialized\n \n impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR cannot infer an appropriate lifetime for lifetime parameter `'lw`\n+//~^ ERROR `Drop` impls cannot be specialized\n \n impl              Drop for X<3>           { fn drop(&mut self) { } } // REJECT\n //~^ ERROR `Drop` impls cannot be specialized"}, {"sha": "82e95ea075dec5dd70a9ccadf2c455429eb93bb2", "filename": "src/test/ui/dropck/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 27, "deletions": 36, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5ac973426eb1f6b3dd9b883daedbfe71f27da704/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ac973426eb1f6b3dd9b883daedbfe71f27da704/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Freject-specialized-drops-8142.stderr?ref=5ac973426eb1f6b3dd9b883daedbfe71f27da704", "patch": "@@ -22,35 +22,34 @@ note: the implementor must specify the same requirement\n LL | struct L<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0308]: mismatched types\n+error[E0366]: `Drop` impls cannot be specialized\n   --> $DIR/reject-specialized-drops-8142.rs:34:1\n    |\n LL | impl                    Drop for N<'static>     { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected struct `N<'n>`\n-              found struct `N<'static>`\n-note: the lifetime `'n` as defined here...\n-  --> $DIR/reject-specialized-drops-8142.rs:7:10\n+   = note: `'static` is not a generic parameter\n+note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n+  --> $DIR/reject-specialized-drops-8142.rs:7:1\n    |\n LL | struct N<'n> { x: &'n i8 }\n-   |          ^^\n-   = note: ...does not necessarily outlive the static lifetime\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0366]: `Drop` impls cannot be specialized\n-  --> $DIR/reject-specialized-drops-8142.rs:41:1\n+  --> $DIR/reject-specialized-drops-8142.rs:39:1\n    |\n LL | impl              Drop for P<i8>          { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: `i8` is not a generic parameter\n note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:9:1\n    |\n LL | struct P<Tp> { x: *const Tp }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the struct it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:44:14\n+  --> $DIR/reject-specialized-drops-8142.rs:42:14\n    |\n LL | impl<AddsBnd:Bound> Drop for Q<AddsBnd> { fn drop(&mut self) { } } // REJECT\n    |              ^^^^^\n@@ -62,7 +61,7 @@ LL | struct Q<Tq> { x: *const Tq }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsRBnd: 'rbnd` but the struct it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:47:21\n+  --> $DIR/reject-specialized-drops-8142.rs:45:21\n    |\n LL | impl<'rbnd,AddsRBnd:'rbnd> Drop for R<AddsRBnd> { fn drop(&mut self) { } } // REJECT\n    |                     ^^^^^\n@@ -74,67 +73,59 @@ LL | struct R<Tr> { x: *const Tr }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0366]: `Drop` impls cannot be specialized\n-  --> $DIR/reject-specialized-drops-8142.rs:56:1\n+  --> $DIR/reject-specialized-drops-8142.rs:54:1\n    |\n LL | impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: `One` is mentioned multiple times\n note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:15:1\n    |\n LL | struct V<Tva, Tvb> { x: *const Tva, y: *const Tvb }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'lw` due to conflicting requirements\n-  --> $DIR/reject-specialized-drops-8142.rs:59:1\n+error[E0366]: `Drop` impls cannot be specialized\n+  --> $DIR/reject-specialized-drops-8142.rs:57:1\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'l1` as defined here...\n-  --> $DIR/reject-specialized-drops-8142.rs:16:10\n-   |\n-LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n-   |          ^^^\n-note: ...but the lifetime must also be valid for the lifetime `'l2` as defined here...\n-  --> $DIR/reject-specialized-drops-8142.rs:16:15\n+   = note: `'lw` is mentioned multiple times\n+note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n+  --> $DIR/reject-specialized-drops-8142.rs:16:1\n    |\n LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n-   |               ^^^\n-note: ...so that the types are compatible\n-  --> $DIR/reject-specialized-drops-8142.rs:59:1\n-   |\n-LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `W<'l1, 'l2>`\n-              found `W<'_, '_>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0366]: `Drop` impls cannot be specialized\n-  --> $DIR/reject-specialized-drops-8142.rs:62:1\n+  --> $DIR/reject-specialized-drops-8142.rs:60:1\n    |\n LL | impl              Drop for X<3>           { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: `3_usize` is not a generic parameter\n note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:17:1\n    |\n LL | struct X<const Ca: usize>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0366]: `Drop` impls cannot be specialized\n-  --> $DIR/reject-specialized-drops-8142.rs:65:1\n+  --> $DIR/reject-specialized-drops-8142.rs:63:1\n    |\n LL | impl<const Ca: usize> Drop for Y<Ca, Ca>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+   = note: `Ca` is mentioned multiple times\n note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:18:1\n    |\n LL | struct Y<const Ca: usize, const Cb: usize>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the enum it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:68:14\n+  --> $DIR/reject-specialized-drops-8142.rs:66:14\n    |\n LL | impl<AddsBnd:Bound> Drop for Enum<AddsBnd> { fn drop(&mut self) { } } // REJECT\n    |              ^^^^^\n@@ -146,7 +137,7 @@ LL | enum Enum<T> { Variant(T) }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the struct it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:71:14\n+  --> $DIR/reject-specialized-drops-8142.rs:69:14\n    |\n LL | impl<AddsBnd:Bound> Drop for TupleStruct<AddsBnd> { fn drop(&mut self) { } } // REJECT\n    |              ^^^^^\n@@ -158,7 +149,7 @@ LL | struct TupleStruct<T>(T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the union it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:74:21\n+  --> $DIR/reject-specialized-drops-8142.rs:72:21\n    |\n LL | impl<AddsBnd:Copy + Bound> Drop for Union<AddsBnd> { fn drop(&mut self) { } } // REJECT\n    |                     ^^^^^\n@@ -171,5 +162,5 @@ LL | union Union<T: Copy> { f: T }\n \n error: aborting due to 13 previous errors\n \n-Some errors have detailed explanations: E0308, E0366, E0367, E0495.\n-For more information about an error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0366, E0367.\n+For more information about an error, try `rustc --explain E0366`."}]}