{"sha": "b54f593cffc40e9d07650b36629e60c48da6b11d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NGY1OTNjZmZjNDBlOWQwNzY1MGIzNjYyOWU2MGM0OGRhNmIxMWQ=", "commit": {"author": {"name": "Michael Gattozzi", "email": "mgattozzi@gmail.com", "date": "2017-01-14T20:25:33Z"}, "committer": {"name": "Michael Gattozzi", "email": "mgattozzi@gmail.com", "date": "2017-01-28T22:26:27Z"}, "message": "Add clearer error message using `&str + &str`\n\nThis is the first part of #39018. One of the common things for new users\ncoming from more dynamic languages like JavaScript, Python or Ruby is to\nuse `+` to concatenate strings. However, this doesn't work that way in\nRust unless the first type is a `String`. This commit adds a check for\nthis use case and outputs a new error as well as a suggestion to guide\nthe user towards the desired behavior. It also adds a new test case to\ntest the output of the error.", "tree": {"sha": "ea53cd7052a5368be161eff34c03ff6abb496e5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea53cd7052a5368be161eff34c03ff6abb496e5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b54f593cffc40e9d07650b36629e60c48da6b11d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEES2CRK8GBWlt1Y3CEFuL+izhnL2YFAliNGpMACgkQFuL+izhn\nL2apLw//Z8PmCVFCARxLCFcP8aYBCLoaxBJAzUJzbdmOxQaHfz87J2p69Y8Vu52E\nmosc+2Y0xLpn0TWKU2fKhEXU5ZLNjvrOzHL396+rwF7PYZBCU/E+MbtQoKQuv8r8\nrFrhXLdCGDZKz+ONXR4h41KqS7C8qtxuU6smw3IA3hVPOl4Dyo5RDQaiKBrn0z24\n5K4iKGp3vs6wXTD8rzQRaHi3s8dEQEBSJ6ViZom5Pb+NUPCLvxvTFpGUY4a9kjvc\nb/Jt+q1iG4MAgLoBfUJ0XqIH6JNQ7MWY4wivz1fBOv8WKbdqMM1HGo2wO5M0j9Ly\nAkp3qocLolOf+SRIpKogCs4v4RJT/TIRZfDEcjGtfOoHVpPz/s1zWXTb+Nceq1oP\n8Di0qv8AGwmjXkWL6B4CTJUy2ue62oV1QesFfmJTWQmKp8KTIbS3AQfXbaH1py+9\nEoS1y9BWk+rieDTt7CdpJGOcorJc5leh+Fd4hDuy50m4RBjZd9zvAhZ+GO1Eptyc\ns/kE1t89vGRppj6Mu3fMweaKf0D+gqvZNl5J2529J7tZPjPXIjbldz1RjdAxE4+S\nDlRf4OB1Z6JjqrA4NuL+0BpEa+jnDjZkx9NizRSbDI9cbiMTpdIYVBJrnzW3lFtn\nqohSksIx1iU8bcW49rMNwJwFUzJJdQ2TprpgNpbzZ/6O3eQEBWc=\n=3Gca\n-----END PGP SIGNATURE-----", "payload": "tree ea53cd7052a5368be161eff34c03ff6abb496e5f\nparent 0f8a296475d8bc27dfa48ec1053cec8fa2f73673\nauthor Michael Gattozzi <mgattozzi@gmail.com> 1484425533 -0500\ncommitter Michael Gattozzi <mgattozzi@gmail.com> 1485642387 -0500\n\nAdd clearer error message using `&str + &str`\n\nThis is the first part of #39018. One of the common things for new users\ncoming from more dynamic languages like JavaScript, Python or Ruby is to\nuse `+` to concatenate strings. However, this doesn't work that way in\nRust unless the first type is a `String`. This commit adds a check for\nthis use case and outputs a new error as well as a suggestion to guide\nthe user towards the desired behavior. It also adds a new test case to\ntest the output of the error.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b54f593cffc40e9d07650b36629e60c48da6b11d", "html_url": "https://github.com/rust-lang/rust/commit/b54f593cffc40e9d07650b36629e60c48da6b11d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b54f593cffc40e9d07650b36629e60c48da6b11d/comments", "author": {"login": "mgattozzi", "id": 3514399, "node_id": "MDQ6VXNlcjM1MTQzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3514399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgattozzi", "html_url": "https://github.com/mgattozzi", "followers_url": "https://api.github.com/users/mgattozzi/followers", "following_url": "https://api.github.com/users/mgattozzi/following{/other_user}", "gists_url": "https://api.github.com/users/mgattozzi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgattozzi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgattozzi/subscriptions", "organizations_url": "https://api.github.com/users/mgattozzi/orgs", "repos_url": "https://api.github.com/users/mgattozzi/repos", "events_url": "https://api.github.com/users/mgattozzi/events{/privacy}", "received_events_url": "https://api.github.com/users/mgattozzi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgattozzi", "id": 3514399, "node_id": "MDQ6VXNlcjM1MTQzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3514399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgattozzi", "html_url": "https://github.com/mgattozzi", "followers_url": "https://api.github.com/users/mgattozzi/followers", "following_url": "https://api.github.com/users/mgattozzi/following{/other_user}", "gists_url": "https://api.github.com/users/mgattozzi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgattozzi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgattozzi/subscriptions", "organizations_url": "https://api.github.com/users/mgattozzi/orgs", "repos_url": "https://api.github.com/users/mgattozzi/repos", "events_url": "https://api.github.com/users/mgattozzi/events{/privacy}", "received_events_url": "https://api.github.com/users/mgattozzi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f8a296475d8bc27dfa48ec1053cec8fa2f73673", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f8a296475d8bc27dfa48ec1053cec8fa2f73673", "html_url": "https://github.com/rust-lang/rust/commit/0f8a296475d8bc27dfa48ec1053cec8fa2f73673"}], "stats": {"total": 136, "additions": 133, "deletions": 3}, "files": [{"sha": "0dcdab07e6fc8a259727e571ae5f37f87a30f11c", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b54f593cffc40e9d07650b36629e60c48da6b11d/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54f593cffc40e9d07650b36629e60c48da6b11d/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=b54f593cffc40e9d07650b36629e60c48da6b11d", "patch": "@@ -13,7 +13,9 @@\n use super::FnCtxt;\n use hir::def_id::DefId;\n use rustc::ty::{Ty, TypeFoldable, PreferMutLvalue, TypeVariants};\n+use rustc::ty::TypeVariants::{TyStr, TyRef};\n use rustc::infer::type_variable::TypeVariableOrigin;\n+use errors;\n use syntax::ast;\n use syntax::symbol::Symbol;\n use rustc::hir;\n@@ -237,9 +239,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         };\n \n                         if let Some(missing_trait) = missing_trait {\n-                            span_note!(&mut err, lhs_expr.span,\n-                                       \"an implementation of `{}` might be missing for `{}`\",\n-                                        missing_trait, lhs_ty);\n+                            if missing_trait == \"std::ops::Add\" &&\n+                                self.check_str_addition(expr, lhs_expr, lhs_ty,\n+                                                         rhs_expr, rhs_ty_var, &mut err) {\n+                                // This has nothing here because it means we did string\n+                                // concatenation (e.g. \"Hello \" + \"World!\"). This means\n+                                // we don't want the span in the else clause to be emmitted\n+                            } else {\n+                                span_note!(&mut err, lhs_expr.span,\n+                                            \"an implementation of `{}` might be missing for `{}`\",\n+                                            missing_trait, lhs_ty);\n+                            }\n                         }\n                         err.emit();\n                     }\n@@ -254,6 +264,47 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         (rhs_ty_var, return_ty)\n     }\n \n+    fn check_str_addition(&self,\n+                          expr: &'gcx hir::Expr,\n+                          lhs_expr: &'gcx hir::Expr,\n+                          lhs_ty: Ty<'tcx>,\n+                          rhs_expr: &'gcx hir::Expr,\n+                          rhs_ty_var: Ty<'tcx>,\n+                          mut err: &mut errors::DiagnosticBuilder) -> bool {\n+        // If this function returns false it means we use it to make sure we print\n+        // out the an \"implementation of span_note!\" above where this function is\n+        // called and if true we don't.\n+        let mut is_string_addition = false;\n+        let rhs_ty = self.check_expr_coercable_to_type(rhs_expr, rhs_ty_var);\n+        if let TyRef(_, l_ty) = lhs_ty.sty {\n+            if let TyRef(_, r_ty) = rhs_ty.sty {\n+                if l_ty.ty.sty == TyStr && r_ty.ty.sty == TyStr {\n+                    span_note!(&mut err, lhs_expr.span,\n+                            \"`+` can't be used to concatenate two `&str` strings\");\n+                    let codemap = self.tcx.sess.codemap();\n+                    let suggestion =\n+                        match (codemap.span_to_snippet(lhs_expr.span),\n+                                codemap.span_to_snippet(rhs_expr.span)) {\n+                            (Ok(lstring), Ok(rstring)) =>\n+                                format!(\"{}.to_owned() + {}\", lstring, rstring),\n+                            _ => format!(\"<expression>\")\n+                        };\n+                    err.span_suggestion(expr.span,\n+                        &format!(\"to_owned() can be used to create an owned `String` \\\n+                                  from a string reference. String concatenation \\\n+                                  appends the string on the right to the string \\\n+                                  on the left and may require reallocation. This \\\n+                                  requires ownership of the string on the left.\"), suggestion);\n+                    is_string_addition = true;\n+                }\n+\n+            }\n+\n+        }\n+\n+        is_string_addition\n+    }\n+\n     pub fn check_user_unop(&self,\n                            op_str: &str,\n                            mname: &str,"}, {"sha": "ee1a32c4c16cf775cb7b897aea2ee79f74780a7e", "filename": "src/test/parse-fail/issue-39018.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b54f593cffc40e9d07650b36629e60c48da6b11d/src%2Ftest%2Fparse-fail%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b54f593cffc40e9d07650b36629e60c48da6b11d/src%2Ftest%2Fparse-fail%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-39018.stderr?ref=b54f593cffc40e9d07650b36629e60c48da6b11d", "patch": "@@ -0,0 +1,28 @@\n+error[E0369]: binary operation `+` cannot be applied to type `&'static str`\n+ --> src/test/ui/span/issue-39018.rs:2:13\n+  |\n+2 |     let x = \"Hello \" + \"World!\";\n+  |             ^^^^^^^^\n+  |\n+note: `+` can't be used to concatenate two `&str` strings\n+ --> src/test/ui/span/issue-39018.rs:2:13\n+  |\n+2 |     let x = \"Hello \" + \"World!\";\n+  |             ^^^^^^^^\n+help: to_owned() can be used to create an owned `String` from a string reference. This allows concatenation since the `String` is owned.\n+  |     let x = \"Hello \".to_owned() + \"World!\";\n+\n+error[E0369]: binary operation `+` cannot be applied to type `World`\n+ --> src/test/ui/span/issue-39018.rs:7:13\n+  |\n+7 |     let y = World::Hello + World::Goodbye;\n+  |             ^^^^^^^^^^^^\n+  |\n+note: an implementation of `std::ops::Add` might be missing for `World`\n+ --> src/test/ui/span/issue-39018.rs:7:13\n+  |\n+7 |     let y = World::Hello + World::Goodbye;\n+  |             ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1cbc5ff1d2ab5e6cdcf96ff6fb9a30a0455da486", "filename": "src/test/ui/span/issue-39018.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b54f593cffc40e9d07650b36629e60c48da6b11d/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54f593cffc40e9d07650b36629e60c48da6b11d/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs?ref=b54f593cffc40e9d07650b36629e60c48da6b11d", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    let x = \"Hello \" + \"World!\";\n+\n+    // Make sure that the span outputs a warning\n+    // for not having an implementation for std::ops::Add\n+    // that won't output for the above string concatenation\n+    let y = World::Hello + World::Goodbye;\n+}\n+\n+enum World {\n+    Hello,\n+    Goodbye,\n+}"}, {"sha": "a8cc74056ca2cfd5aaf0207f74ca021c68d482b5", "filename": "src/test/ui/span/issue-39018.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b54f593cffc40e9d07650b36629e60c48da6b11d/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b54f593cffc40e9d07650b36629e60c48da6b11d/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=b54f593cffc40e9d07650b36629e60c48da6b11d", "patch": "@@ -0,0 +1,28 @@\n+error[E0369]: binary operation `+` cannot be applied to type `&'static str`\n+  --> $DIR/issue-39018.rs:12:13\n+   |\n+12 |     let x = \"Hello \" + \"World!\";\n+   |             ^^^^^^^^\n+   |\n+note: `+` can't be used to concatenate two `&str` strings\n+  --> $DIR/issue-39018.rs:12:13\n+   |\n+12 |     let x = \"Hello \" + \"World!\";\n+   |             ^^^^^^^^\n+help: to_owned() can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left.\n+   |     let x = \"Hello \".to_owned() + \"World!\";\n+\n+error[E0369]: binary operation `+` cannot be applied to type `World`\n+  --> $DIR/issue-39018.rs:17:13\n+   |\n+17 |     let y = World::Hello + World::Goodbye;\n+   |             ^^^^^^^^^^^^\n+   |\n+note: an implementation of `std::ops::Add` might be missing for `World`\n+  --> $DIR/issue-39018.rs:17:13\n+   |\n+17 |     let y = World::Hello + World::Goodbye;\n+   |             ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}