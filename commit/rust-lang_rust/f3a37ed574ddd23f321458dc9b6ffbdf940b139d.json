{"sha": "f3a37ed574ddd23f321458dc9b6ffbdf940b139d", "node_id": "C_kwDOAAsO6NoAKGYzYTM3ZWQ1NzRkZGQyM2YzMjE0NThkYzliNmZmYmRmOTQwYjEzOWQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-29T22:10:40Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-13T17:18:24Z"}, "message": "Shrink some visibilities.", "tree": {"sha": "bb1217bc9f73c7813620b406521331c122616611", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb1217bc9f73c7813620b406521331c122616611"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3a37ed574ddd23f321458dc9b6ffbdf940b139d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a37ed574ddd23f321458dc9b6ffbdf940b139d", "html_url": "https://github.com/rust-lang/rust/commit/f3a37ed574ddd23f321458dc9b6ffbdf940b139d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3a37ed574ddd23f321458dc9b6ffbdf940b139d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af128b0144aa64bce28ca8d85a27fdaa9c5f47d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/af128b0144aa64bce28ca8d85a27fdaa9c5f47d7", "html_url": "https://github.com/rust-lang/rust/commit/af128b0144aa64bce28ca8d85a27fdaa9c5f47d7"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "3ef1b263ffd655d73ef4effe8f78741657b3b138", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f3a37ed574ddd23f321458dc9b6ffbdf940b139d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a37ed574ddd23f321458dc9b6ffbdf940b139d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=f3a37ed574ddd23f321458dc9b6ffbdf940b139d", "patch": "@@ -66,11 +66,11 @@ struct Cx<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     thir: Thir<'tcx>,\n \n-    pub(crate) param_env: ty::ParamEnv<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n \n-    pub(crate) region_scope_tree: &'tcx region::ScopeTree,\n-    pub(crate) typeck_results: &'tcx ty::TypeckResults<'tcx>,\n-    pub(crate) rvalue_scopes: &'tcx RvalueScopes,\n+    region_scope_tree: &'tcx region::ScopeTree,\n+    typeck_results: &'tcx ty::TypeckResults<'tcx>,\n+    rvalue_scopes: &'tcx RvalueScopes,\n \n     /// When applying adjustments to the expression\n     /// with the given `HirId`, use the given `Span`,\n@@ -100,7 +100,7 @@ impl<'tcx> Cx<'tcx> {\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n-    pub(crate) fn pattern_from_hir(&mut self, p: &hir::Pat<'_>) -> Box<Pat<'tcx>> {\n+    fn pattern_from_hir(&mut self, p: &hir::Pat<'_>) -> Box<Pat<'tcx>> {\n         let p = match self.tcx.hir().get(p.hir_id) {\n             Node::Pat(p) => p,\n             node => bug!(\"pattern became {:?}\", node),"}, {"sha": "2c131a26d3a41d5f4bf9c715059d31cd120c2c2b", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f3a37ed574ddd23f321458dc9b6ffbdf940b139d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a37ed574ddd23f321458dc9b6ffbdf940b139d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=f3a37ed574ddd23f321458dc9b6ffbdf940b139d", "patch": "@@ -29,22 +29,22 @@ use rustc_span::{Span, Symbol};\n use std::cmp::Ordering;\n \n #[derive(Clone, Debug)]\n-pub(crate) enum PatternError {\n+enum PatternError {\n     AssocConstInPattern(Span),\n     ConstParamInPattern(Span),\n     StaticInPattern(Span),\n     NonConstPath(Span),\n }\n \n-pub(crate) struct PatCtxt<'a, 'tcx> {\n-    pub(crate) tcx: TyCtxt<'tcx>,\n-    pub(crate) param_env: ty::ParamEnv<'tcx>,\n-    pub(crate) typeck_results: &'a ty::TypeckResults<'tcx>,\n-    pub(crate) errors: Vec<PatternError>,\n+struct PatCtxt<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    typeck_results: &'a ty::TypeckResults<'tcx>,\n+    errors: Vec<PatternError>,\n     include_lint_checks: bool,\n }\n \n-pub(crate) fn pat_from_hir<'a, 'tcx>(\n+pub(super) fn pat_from_hir<'a, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     typeck_results: &'a ty::TypeckResults<'tcx>,\n@@ -61,20 +61,20 @@ pub(crate) fn pat_from_hir<'a, 'tcx>(\n }\n \n impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n-    pub(crate) fn new(\n+    fn new(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         typeck_results: &'a ty::TypeckResults<'tcx>,\n     ) -> Self {\n         PatCtxt { tcx, param_env, typeck_results, errors: vec![], include_lint_checks: false }\n     }\n \n-    pub(crate) fn include_lint_checks(&mut self) -> &mut Self {\n+    fn include_lint_checks(&mut self) -> &mut Self {\n         self.include_lint_checks = true;\n         self\n     }\n \n-    pub(crate) fn lower_pattern(&mut self, pat: &'tcx hir::Pat<'tcx>) -> Box<Pat<'tcx>> {\n+    fn lower_pattern(&mut self, pat: &'tcx hir::Pat<'tcx>) -> Box<Pat<'tcx>> {\n         // When implicit dereferences have been inserted in this pattern, the unadjusted lowered\n         // pattern has the type that results *after* dereferencing. For example, in this code:\n         //\n@@ -627,15 +627,15 @@ impl<'tcx> UserAnnotatedTyHelpers<'tcx> for PatCtxt<'_, 'tcx> {\n     }\n }\n \n-pub(crate) trait PatternFoldable<'tcx>: Sized {\n+trait PatternFoldable<'tcx>: Sized {\n     fn fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         self.super_fold_with(folder)\n     }\n \n     fn super_fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self;\n }\n \n-pub(crate) trait PatternFolder<'tcx>: Sized {\n+trait PatternFolder<'tcx>: Sized {\n     fn fold_pattern(&mut self, pattern: &Pat<'tcx>) -> Pat<'tcx> {\n         pattern.super_fold_with(self)\n     }"}]}