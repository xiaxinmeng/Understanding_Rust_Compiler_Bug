{"sha": "2d7fc4dd498ed47595709fdb7e5ec6045de44f93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkN2ZjNGRkNDk4ZWQ0NzU5NTcwOWZkYjdlNWVjNjA0NWRlNDRmOTM=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-07-12T01:09:27Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-08-12T22:03:44Z"}, "message": "Reduce genericity in TakeWhile", "tree": {"sha": "fe7b45c6899e1ce8cb417c39b5d5c930087fa60c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe7b45c6899e1ce8cb417c39b5d5c930087fa60c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d7fc4dd498ed47595709fdb7e5ec6045de44f93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d7fc4dd498ed47595709fdb7e5ec6045de44f93", "html_url": "https://github.com/rust-lang/rust/commit/2d7fc4dd498ed47595709fdb7e5ec6045de44f93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d7fc4dd498ed47595709fdb7e5ec6045de44f93/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5902522c04e78b85d0b958679718b001dd00781b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5902522c04e78b85d0b958679718b001dd00781b", "html_url": "https://github.com/rust-lang/rust/commit/5902522c04e78b85d0b958679718b001dd00781b"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "1dd9149ceda04733d9ac3d91b33cdf8210a7e4a5", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2d7fc4dd498ed47595709fdb7e5ec6045de44f93/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d7fc4dd498ed47595709fdb7e5ec6045de44f93/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=2d7fc4dd498ed47595709fdb7e5ec6045de44f93", "patch": "@@ -1495,14 +1495,13 @@ impl<I: Iterator, P> Iterator for TakeWhile<I, P>\n         if self.flag {\n             None\n         } else {\n-            self.iter.next().and_then(|x| {\n-                if (self.predicate)(&x) {\n-                    Some(x)\n-                } else {\n-                    self.flag = true;\n-                    None\n-                }\n-            })\n+            let x = self.iter.next()?;\n+            if (self.predicate)(&x) {\n+                Some(x)\n+            } else {\n+                self.flag = true;\n+                None\n+            }\n         }\n     }\n \n@@ -1517,22 +1516,30 @@ impl<I: Iterator, P> Iterator for TakeWhile<I, P>\n     }\n \n     #[inline]\n-    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, mut fold: Fold) -> R where\n+    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n         Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n     {\n-        if self.flag {\n-            Try::from_ok(init)\n-        } else {\n-            let flag = &mut self.flag;\n-            let p = &mut self.predicate;\n-            self.iter.try_fold(init, move |acc, x|{\n+        fn check<'a, T, Acc, R: Try<Ok = Acc>>(\n+            flag: &'a mut bool,\n+            p: &'a mut impl FnMut(&T) -> bool,\n+            mut fold: impl FnMut(Acc, T) -> R + 'a,\n+        ) -> impl FnMut(Acc, T) -> LoopState<Acc, R> + 'a {\n+            move |acc, x| {\n                 if p(&x) {\n                     LoopState::from_try(fold(acc, x))\n                 } else {\n                     *flag = true;\n                     LoopState::Break(Try::from_ok(acc))\n                 }\n-            }).into_try()\n+            }\n+        }\n+\n+        if self.flag {\n+            Try::from_ok(init)\n+        } else {\n+            let flag = &mut self.flag;\n+            let p = &mut self.predicate;\n+            self.iter.try_fold(init, check(flag, p, fold)).into_try()\n         }\n     }\n }"}]}