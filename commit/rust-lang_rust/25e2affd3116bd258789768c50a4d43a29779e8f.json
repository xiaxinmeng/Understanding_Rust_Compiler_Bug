{"sha": "25e2affd3116bd258789768c50a4d43a29779e8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZTJhZmZkMzExNmJkMjU4Nzg5NzY4YzUwYTRkNDNhMjk3NzllOGY=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-04-11T05:58:50Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-04-11T06:23:43Z"}, "message": "UI test cleanup: Extract iter_nth tests", "tree": {"sha": "49bed2116ec8aca81a9de47a0dd6b660703e3c75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49bed2116ec8aca81a9de47a0dd6b660703e3c75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25e2affd3116bd258789768c50a4d43a29779e8f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAlyu3XEQHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5raREACTxhYpN6XUckEc/jFAgcFSbnUlN/9gP0OL\ny8BJhWgvKvWiUxaGWWFkq6GrNLY2elyyTiqKtEAzmHk4DfWPFtL68770jdNaq5Jn\njy0HNst9kjM6WQnhBx145LhLE7ZrmXOWddcItG3Q4kMTZHsN/k6fQavzjNHhuBzo\nCAdBI7YvyrI1ZIFC9pVyQs5RjSinBJjUkNtE8/KhHepxqAEs4sLPGU2MJhaeB2VL\nzGfvZALcfiFoP9Dmahq3XmZz0tdrLqdK3VrgvXsk022pbYgnkB4GjTaQL7ZSJl9E\n4MsKNsWmNSFoiMG+G0t4E9gFqCITkRtnN+KgxlqQHHi5tZs9cW2a/a+jYS7eamnZ\nGmzWcCcbroSJTStgq1rE3juUV1gXySoBsrM0qrmPB5nANKd4Sdh1AGZGkpB6uO9u\nA50Ii17rcY/ST7r+s1bzg5sSL/Iv8CBKLstBgV6Rm47BfofPdLzB3Bhp0mMxR2BW\nKZcvh4v2wxzxDTrtKYPYaL0JzVrHk9r1A2MHHn8aApikK4Qiv13Wl87jG+aIWnXo\n4neNkvZhbHwjTxDiUhQRUz2XzC0ezJw1dmd2L0XObd/WmGXm9Phc1HHzsiQajWft\nqLU9IGVM6NjPmYK7k9R61RNaQDGHIIQgLNH++WEN6d6kA7791TSj0U4BmR/xRf5g\nFq+lCf18Hw==\n=snls\n-----END PGP SIGNATURE-----", "payload": "tree 49bed2116ec8aca81a9de47a0dd6b660703e3c75\nparent fdc2255e8189819fe58e1aa191e81ad28049edf2\nauthor Philipp Hansch <dev@phansch.net> 1554962330 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1554963823 +0200\n\nUI test cleanup: Extract iter_nth tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25e2affd3116bd258789768c50a4d43a29779e8f", "html_url": "https://github.com/rust-lang/rust/commit/25e2affd3116bd258789768c50a4d43a29779e8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25e2affd3116bd258789768c50a4d43a29779e8f/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdc2255e8189819fe58e1aa191e81ad28049edf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdc2255e8189819fe58e1aa191e81ad28049edf2", "html_url": "https://github.com/rust-lang/rust/commit/fdc2255e8189819fe58e1aa191e81ad28049edf2"}], "stats": {"total": 211, "additions": 112, "deletions": 99}, "files": [{"sha": "9c21dd82ee45efe0a70c1f0b08b2b0688502fa13", "filename": "tests/ui/iter_nth.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/25e2affd3116bd258789768c50a4d43a29779e8f/tests%2Fui%2Fiter_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e2affd3116bd258789768c50a4d43a29779e8f/tests%2Fui%2Fiter_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth.rs?ref=25e2affd3116bd258789768c50a4d43a29779e8f", "patch": "@@ -0,0 +1,56 @@\n+// aux-build:option_helpers.rs\n+\n+#![warn(clippy::iter_nth)]\n+\n+#[macro_use]\n+extern crate option_helpers;\n+\n+use option_helpers::IteratorFalsePositives;\n+use std::collections::VecDeque;\n+\n+/// Struct to generate false positives for things with `.iter()`.\n+#[derive(Copy, Clone)]\n+struct HasIter;\n+\n+impl HasIter {\n+    fn iter(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+\n+    fn iter_mut(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+}\n+\n+/// Checks implementation of `ITER_NTH` lint.\n+fn iter_nth() {\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let mut some_vec_deque: VecDeque<_> = some_vec.iter().cloned().collect();\n+\n+    {\n+        // Make sure we lint `.iter()` for relevant types.\n+        let bad_vec = some_vec.iter().nth(3);\n+        let bad_slice = &some_vec[..].iter().nth(3);\n+        let bad_boxed_slice = boxed_slice.iter().nth(3);\n+        let bad_vec_deque = some_vec_deque.iter().nth(3);\n+    }\n+\n+    {\n+        // Make sure we lint `.iter_mut()` for relevant types.\n+        let bad_vec = some_vec.iter_mut().nth(3);\n+    }\n+    {\n+        let bad_slice = &some_vec[..].iter_mut().nth(3);\n+    }\n+    {\n+        let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+    }\n+\n+    // Make sure we don't lint for non-relevant types.\n+    let false_positive = HasIter;\n+    let ok = false_positive.iter().nth(3);\n+    let ok_mut = false_positive.iter_mut().nth(3);\n+}\n+\n+fn main() {}"}, {"sha": "70412f784040a47f62330da2766420cb8caf9398", "filename": "tests/ui/iter_nth.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/25e2affd3116bd258789768c50a4d43a29779e8f/tests%2Fui%2Fiter_nth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25e2affd3116bd258789768c50a4d43a29779e8f/tests%2Fui%2Fiter_nth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth.stderr?ref=25e2affd3116bd258789768c50a4d43a29779e8f", "patch": "@@ -0,0 +1,46 @@\n+error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n+  --> $DIR/iter_nth.rs:33:23\n+   |\n+LL |         let bad_vec = some_vec.iter().nth(3);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::iter-nth` implied by `-D warnings`\n+\n+error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+  --> $DIR/iter_nth.rs:34:26\n+   |\n+LL |         let bad_slice = &some_vec[..].iter().nth(3);\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+  --> $DIR/iter_nth.rs:35:31\n+   |\n+LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n+  --> $DIR/iter_nth.rs:36:29\n+   |\n+LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n+  --> $DIR/iter_nth.rs:41:23\n+   |\n+LL |         let bad_vec = some_vec.iter_mut().nth(3);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n+  --> $DIR/iter_nth.rs:44:26\n+   |\n+LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n+  --> $DIR/iter_nth.rs:47:29\n+   |\n+LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "673176911a9a87304df382eb9ca19e0ab3bfcb56", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/25e2affd3116bd258789768c50a4d43a29779e8f/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e2affd3116bd258789768c50a4d43a29779e8f/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=25e2affd3116bd258789768c50a4d43a29779e8f", "patch": "@@ -215,20 +215,6 @@ fn option_methods() {\n                 );\n }\n \n-/// Struct to generate false positives for things with `.iter()`.\n-#[derive(Copy, Clone)]\n-struct HasIter;\n-\n-impl HasIter {\n-    fn iter(self) -> IteratorFalsePositives {\n-        IteratorFalsePositives { foo: 0 }\n-    }\n-\n-    fn iter_mut(self) -> IteratorFalsePositives {\n-        IteratorFalsePositives { foo: 0 }\n-    }\n-}\n-\n /// Checks implementation of `FILTER_NEXT` lint.\n #[rustfmt::skip]\n fn filter_next() {\n@@ -287,37 +273,6 @@ fn search_is_some() {\n     let _ = foo.rposition().is_some();\n }\n \n-/// Checks implementation of `ITER_NTH` lint.\n-fn iter_nth() {\n-    let mut some_vec = vec![0, 1, 2, 3];\n-    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n-    let mut some_vec_deque: VecDeque<_> = some_vec.iter().cloned().collect();\n-\n-    {\n-        // Make sure we lint `.iter()` for relevant types.\n-        let bad_vec = some_vec.iter().nth(3);\n-        let bad_slice = &some_vec[..].iter().nth(3);\n-        let bad_boxed_slice = boxed_slice.iter().nth(3);\n-        let bad_vec_deque = some_vec_deque.iter().nth(3);\n-    }\n-\n-    {\n-        // Make sure we lint `.iter_mut()` for relevant types.\n-        let bad_vec = some_vec.iter_mut().nth(3);\n-    }\n-    {\n-        let bad_slice = &some_vec[..].iter_mut().nth(3);\n-    }\n-    {\n-        let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n-    }\n-\n-    // Make sure we don't lint for non-relevant types.\n-    let false_positive = HasIter;\n-    let ok = false_positive.iter().nth(3);\n-    let ok_mut = false_positive.iter_mut().nth(3);\n-}\n-\n #[allow(clippy::similar_names)]\n fn main() {\n     let opt = Some(0);"}, {"sha": "b86220f5dc26ad5ab539fab7fbcdb5ed474888d1", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 10, "deletions": 54, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/25e2affd3116bd258789768c50a4d43a29779e8f/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25e2affd3116bd258789768c50a4d43a29779e8f/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=25e2affd3116bd258789768c50a4d43a29779e8f", "patch": "@@ -154,7 +154,7 @@ LL |                        });\n    |\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:238:13\n+  --> $DIR/methods.rs:224:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -163,7 +163,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:241:13\n+  --> $DIR/methods.rs:227:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -173,7 +173,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:257:13\n+  --> $DIR/methods.rs:243:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -182,7 +182,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:260:13\n+  --> $DIR/methods.rs:246:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -192,15 +192,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:266:13\n+  --> $DIR/methods.rs:252:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:269:13\n+  --> $DIR/methods.rs:255:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -210,15 +210,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:275:13\n+  --> $DIR/methods.rs:261:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:278:13\n+  --> $DIR/methods.rs:264:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -227,57 +227,13 @@ LL | |                                }\n LL | |                    ).is_some();\n    | |______________________________^\n \n-error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:298:23\n-   |\n-LL |         let bad_vec = some_vec.iter().nth(3);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::iter-nth` implied by `-D warnings`\n-\n-error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:299:26\n-   |\n-LL |         let bad_slice = &some_vec[..].iter().nth(3);\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:300:31\n-   |\n-LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:301:29\n-   |\n-LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:306:23\n-   |\n-LL |         let bad_vec = some_vec.iter_mut().nth(3);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:309:26\n-   |\n-LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:312:29\n-   |\n-LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:324:13\n+  --> $DIR/methods.rs:279:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 32 previous errors\n+error: aborting due to 25 previous errors\n "}]}