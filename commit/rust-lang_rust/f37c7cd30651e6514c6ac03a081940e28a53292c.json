{"sha": "f37c7cd30651e6514c6ac03a081940e28a53292c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzN2M3Y2QzMDY1MWU2NTE0YzZhYzAzYTA4MTk0MGUyOGE1MzI5MmM=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-23T23:28:53Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-25T03:07:51Z"}, "message": "Fix vtable resolution for self to search supertraits. Closes #7661.", "tree": {"sha": "ebb72958bd1404220e617161e7c4393d17eafee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebb72958bd1404220e617161e7c4393d17eafee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f37c7cd30651e6514c6ac03a081940e28a53292c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f37c7cd30651e6514c6ac03a081940e28a53292c", "html_url": "https://github.com/rust-lang/rust/commit/f37c7cd30651e6514c6ac03a081940e28a53292c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f37c7cd30651e6514c6ac03a081940e28a53292c/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17e30d6b4ef5c6fb4d6257323903cba1213cae8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/17e30d6b4ef5c6fb4d6257323903cba1213cae8f", "html_url": "https://github.com/rust-lang/rust/commit/17e30d6b4ef5c6fb4d6257323903cba1213cae8f"}], "stats": {"total": 116, "additions": 85, "deletions": 31}, "files": [{"sha": "50f7f18b0a6d603c9c66652737385a546c662576", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 49, "deletions": 31, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/f37c7cd30651e6514c6ac03a081940e28a53292c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37c7cd30651e6514c6ac03a081940e28a53292c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=f37c7cd30651e6514c6ac03a081940e28a53292c", "patch": "@@ -18,7 +18,7 @@ use middle::typeck::infer::{resolve_and_force_all_but_regions, resolve_type};\n use middle::typeck::infer;\n use middle::typeck::{CrateCtxt, vtable_origin, vtable_res, vtable_param_res};\n use middle::typeck::{vtable_static, vtable_param, impl_res};\n-use middle::typeck::{param_numbered, param_self};\n+use middle::typeck::{param_numbered, param_self, param_index};\n use middle::subst::Subst;\n use util::common::indenter;\n use util::ppaux;\n@@ -244,51 +244,69 @@ fn lookup_vtable(vcx: &VtableContext,\n         }\n     };\n \n-    match ty::get(ty).sty {\n+    // If the type is self or a param, we look at the trait/supertrait\n+    // bounds to see if they include the trait we are looking for.\n+    let vtable_opt = match ty::get(ty).sty {\n         ty::ty_param(param_ty {idx: n, def_id: did}) => {\n-            let mut n_bound = 0;\n             let type_param_def = tcx.ty_param_defs.get(&did.node);\n-            for ty::each_bound_trait_and_supertraits(\n-                tcx, type_param_def.bounds.trait_bounds) |bound_trait_ref|\n-            {\n-                debug!(\"checking bounds trait %s\", bound_trait_ref.repr(vcx.tcx()));\n-\n-                if bound_trait_ref.def_id == trait_ref.def_id {\n-                    relate_trait_refs(vcx,\n-                                      location_info,\n-                                      bound_trait_ref,\n-                                      trait_ref);\n-                    let vtable = vtable_param(param_numbered(n), n_bound);\n-                    debug!(\"found param vtable: %?\",\n-                           vtable);\n-                    return Some(vtable);\n-                }\n-\n-                n_bound += 1;\n-            }\n+            lookup_vtable_from_bounds(vcx, location_info,\n+                                      type_param_def.bounds.trait_bounds,\n+                                      param_numbered(n),\n+                                      trait_ref)\n         }\n \n         ty::ty_self(trait_id) => {\n-            debug!(\"trying to find %? vtable for type %?\",\n-                   trait_ref.def_id, trait_id);\n-\n-            if trait_id == trait_ref.def_id {\n-                let vtable = vtable_param(param_self, 0);\n-                debug!(\"found self vtable: %?\", vtable);\n-                return Some(vtable);\n-            }\n+            let self_trait_ref = ty::lookup_trait_def(tcx, trait_id).trait_ref;\n+            lookup_vtable_from_bounds(vcx, location_info,\n+                                      &[self_trait_ref],\n+                                      param_self,\n+                                      trait_ref)\n         }\n \n         // Default case just falls through\n-        _ => { }\n-    }\n+        _ => None\n+    };\n+\n+    if vtable_opt.is_some() { return vtable_opt; }\n \n     // If we aren't a self type or param, or it was, but we didn't find it,\n     // do a search.\n     return search_for_vtable(vcx, location_info,\n                              ty, trait_ref, is_early)\n }\n \n+// Given a list of bounds on a type, search those bounds to see if any\n+// of them are the vtable we are looking for.\n+fn lookup_vtable_from_bounds(vcx: &VtableContext,\n+                             location_info: &LocationInfo,\n+                             bounds: &[@ty::TraitRef],\n+                             param: param_index,\n+                             trait_ref: @ty::TraitRef)\n+    -> Option<vtable_origin> {\n+    let tcx = vcx.tcx();\n+\n+    let mut n_bound = 0;\n+    for ty::each_bound_trait_and_supertraits(tcx, bounds) |bound_trait_ref| {\n+        debug!(\"checking bounds trait %s\",\n+               bound_trait_ref.repr(vcx.tcx()));\n+\n+        if bound_trait_ref.def_id == trait_ref.def_id {\n+            relate_trait_refs(vcx,\n+                              location_info,\n+                              bound_trait_ref,\n+                              trait_ref);\n+            let vtable = vtable_param(param, n_bound);\n+            debug!(\"found param vtable: %?\",\n+                   vtable);\n+            return Some(vtable);\n+        }\n+\n+        n_bound += 1;\n+    }\n+\n+    return None;\n+}\n+\n fn search_for_vtable(vcx: &VtableContext,\n                      location_info: &LocationInfo,\n                      ty: ty::t,"}, {"sha": "90a2b914021244aef585368d528161f9a5b5f42e", "filename": "src/test/run-pass/default-method-supertrait-vtable.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f37c7cd30651e6514c6ac03a081940e28a53292c/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f37c7cd30651e6514c6ac03a081940e28a53292c/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs?ref=f37c7cd30651e6514c6ac03a081940e28a53292c", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// Tests that we can call a function bounded over a supertrait from\n+// a default method\n+\n+fn require_y<T: Y>(x: T) -> int { x.y() }\n+\n+trait Y {\n+    fn y(self) -> int;\n+}\n+\n+\n+trait Z: Y {\n+    fn x(self) -> int {\n+        require_y(self)\n+    }\n+}\n+\n+impl Y for int {\n+    fn y(self) -> int { self }\n+}\n+\n+impl Z for int;\n+\n+fn main() {\n+    assert_eq!(12.x(), 12);\n+}"}]}