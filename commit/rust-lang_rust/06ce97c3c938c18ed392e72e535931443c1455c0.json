{"sha": "06ce97c3c938c18ed392e72e535931443c1455c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2Y2U5N2MzYzkzOGMxOGVkMzkyZTcyZTUzNTkzMTQ0M2MxNDU1YzA=", "commit": {"author": {"name": "J. Ryan Stinnett", "email": "jryans@gmail.com", "date": "2020-12-31T02:45:15Z"}, "committer": {"name": "J. Ryan Stinnett", "email": "jryans@gmail.com", "date": "2021-01-08T07:15:03Z"}, "message": "Use target in `Deref` method section IDs\n\nThere can now be multiple `Deref` method sections, so this adds the target type\nto the section ID to ensure they are unique.", "tree": {"sha": "7de2bc07ea38d18a4d30cb8520de6f450bb2e8ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7de2bc07ea38d18a4d30cb8520de6f450bb2e8ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06ce97c3c938c18ed392e72e535931443c1455c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06ce97c3c938c18ed392e72e535931443c1455c0", "html_url": "https://github.com/rust-lang/rust/commit/06ce97c3c938c18ed392e72e535931443c1455c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06ce97c3c938c18ed392e72e535931443c1455c0/comments", "author": {"login": "jryans", "id": 279572, "node_id": "MDQ6VXNlcjI3OTU3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/279572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jryans", "html_url": "https://github.com/jryans", "followers_url": "https://api.github.com/users/jryans/followers", "following_url": "https://api.github.com/users/jryans/following{/other_user}", "gists_url": "https://api.github.com/users/jryans/gists{/gist_id}", "starred_url": "https://api.github.com/users/jryans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jryans/subscriptions", "organizations_url": "https://api.github.com/users/jryans/orgs", "repos_url": "https://api.github.com/users/jryans/repos", "events_url": "https://api.github.com/users/jryans/events{/privacy}", "received_events_url": "https://api.github.com/users/jryans/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jryans", "id": 279572, "node_id": "MDQ6VXNlcjI3OTU3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/279572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jryans", "html_url": "https://github.com/jryans", "followers_url": "https://api.github.com/users/jryans/followers", "following_url": "https://api.github.com/users/jryans/following{/other_user}", "gists_url": "https://api.github.com/users/jryans/gists{/gist_id}", "starred_url": "https://api.github.com/users/jryans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jryans/subscriptions", "organizations_url": "https://api.github.com/users/jryans/orgs", "repos_url": "https://api.github.com/users/jryans/repos", "events_url": "https://api.github.com/users/jryans/events{/privacy}", "received_events_url": "https://api.github.com/users/jryans/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd0ad03902402d5bc23f9d04307388f3d6235961", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd0ad03902402d5bc23f9d04307388f3d6235961", "html_url": "https://github.com/rust-lang/rust/commit/fd0ad03902402d5bc23f9d04307388f3d6235961"}], "stats": {"total": 108, "additions": 61, "deletions": 47}, "files": [{"sha": "33639055b59efdea3e7662d81c2111b4b284b28d", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06ce97c3c938c18ed392e72e535931443c1455c0/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ce97c3c938c18ed392e72e535931443c1455c0/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=06ce97c3c938c18ed392e72e535931443c1455c0", "patch": "@@ -1322,7 +1322,6 @@ fn init_id_map() -> FxHashMap<String, usize> {\n     map.insert(\"trait-implementations\".to_owned(), 1);\n     map.insert(\"synthetic-implementations\".to_owned(), 1);\n     map.insert(\"blanket-implementations\".to_owned(), 1);\n-    map.insert(\"deref-methods\".to_owned(), 1);\n     map\n }\n "}, {"sha": "754c954c3a72c77282fff0f4b1eb18cd4a32ff89", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 51, "deletions": 40, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/06ce97c3c938c18ed392e72e535931443c1455c0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ce97c3c938c18ed392e72e535931443c1455c0/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=06ce97c3c938c18ed392e72e535931443c1455c0", "patch": "@@ -115,6 +115,9 @@ crate struct Context<'tcx> {\n     crate render_redirect_pages: bool,\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     id_map: Rc<RefCell<IdMap>>,\n+    /// Tracks section IDs for `Deref` targets so they match in both the main\n+    /// body and the sidebar.\n+    deref_id_map: Rc<RefCell<FxHashMap<DefId, String>>>,\n     crate shared: Arc<SharedContext<'tcx>>,\n     all: Rc<RefCell<AllTypes>>,\n     /// Storage for the errors produced while generating documentation so they\n@@ -372,7 +375,6 @@ crate fn initial_ids() -> Vec<String> {\n         \"implementors-list\",\n         \"synthetic-implementors-list\",\n         \"methods\",\n-        \"deref-methods\",\n         \"implementations\",\n     ]\n     .iter()\n@@ -506,6 +508,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             dst,\n             render_redirect_pages: false,\n             id_map: Rc::new(RefCell::new(id_map)),\n+            deref_id_map: Rc::new(RefCell::new(FxHashMap::default())),\n             shared: Arc::new(scx),\n             all: Rc::new(RefCell::new(AllTypes::new())),\n             errors: Rc::new(receiver),\n@@ -3517,14 +3520,18 @@ fn render_assoc_items(\n                 RenderMode::Normal\n             }\n             AssocItemRender::DerefFor { trait_, type_, deref_mut_ } => {\n+                let id =\n+                    cx.derive_id(small_url_encode(&format!(\"deref-methods-{:#}\", type_.print())));\n+                cx.deref_id_map.borrow_mut().insert(type_.def_id().unwrap(), id.clone());\n                 write!(\n                     w,\n-                    \"<h2 id=\\\"deref-methods\\\" class=\\\"small-section-header\\\">\\\n-                         Methods from {}&lt;Target = {}&gt;\\\n-                         <a href=\\\"#deref-methods\\\" class=\\\"anchor\\\"></a>\\\n+                    \"<h2 id=\\\"{id}\\\" class=\\\"small-section-header\\\">\\\n+                         Methods from {trait_}&lt;Target = {type_}&gt;\\\n+                         <a href=\\\"#{id}\\\" class=\\\"anchor\\\"></a>\\\n                      </h2>\",\n-                    trait_.print(),\n-                    type_.print()\n+                    id = id,\n+                    trait_ = trait_.print(),\n+                    type_ = type_.print(),\n                 );\n                 RenderMode::ForDeref { mut_: deref_mut_ }\n             }\n@@ -4175,14 +4182,14 @@ fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer, cache:\n         );\n     }\n     match *it.kind {\n-        clean::StructItem(ref s) => sidebar_struct(buffer, it, s),\n-        clean::TraitItem(ref t) => sidebar_trait(buffer, it, t),\n-        clean::PrimitiveItem(_) => sidebar_primitive(buffer, it),\n-        clean::UnionItem(ref u) => sidebar_union(buffer, it, u),\n-        clean::EnumItem(ref e) => sidebar_enum(buffer, it, e),\n-        clean::TypedefItem(_, _) => sidebar_typedef(buffer, it),\n+        clean::StructItem(ref s) => sidebar_struct(cx, buffer, it, s),\n+        clean::TraitItem(ref t) => sidebar_trait(cx, buffer, it, t),\n+        clean::PrimitiveItem(_) => sidebar_primitive(cx, buffer, it),\n+        clean::UnionItem(ref u) => sidebar_union(cx, buffer, it, u),\n+        clean::EnumItem(ref e) => sidebar_enum(cx, buffer, it, e),\n+        clean::TypedefItem(_, _) => sidebar_typedef(cx, buffer, it),\n         clean::ModuleItem(ref m) => sidebar_module(buffer, &m.items),\n-        clean::ForeignTypeItem => sidebar_foreign_type(buffer, it),\n+        clean::ForeignTypeItem => sidebar_foreign_type(cx, buffer, it),\n         _ => (),\n     }\n \n@@ -4283,7 +4290,7 @@ fn small_url_encode(s: &str) -> String {\n         .replace(\"\\\"\", \"%22\")\n }\n \n-fn sidebar_assoc_items(it: &clean::Item) -> String {\n+fn sidebar_assoc_items(cx: &Context<'_>, it: &clean::Item) -> String {\n     let mut out = String::new();\n     let c = cache();\n     if let Some(v) = c.impls.get(&it.def_id) {\n@@ -4313,7 +4320,7 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                 .filter(|i| i.inner_impl().trait_.is_some())\n                 .find(|i| i.inner_impl().trait_.def_id() == c.deref_trait_did)\n             {\n-                out.push_str(&sidebar_deref_methods(impl_, v));\n+                out.push_str(&sidebar_deref_methods(cx, impl_, v));\n             }\n             let format_impls = |impls: Vec<&Impl>| {\n                 let mut links = FxHashSet::default();\n@@ -4381,7 +4388,7 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n     out\n }\n \n-fn sidebar_deref_methods(impl_: &Impl, v: &Vec<Impl>) -> String {\n+fn sidebar_deref_methods(cx: &Context<'_>, impl_: &Impl, v: &Vec<Impl>) -> String {\n     let mut out = String::new();\n     let c = cache();\n \n@@ -4408,22 +4415,26 @@ fn sidebar_deref_methods(impl_: &Impl, v: &Vec<Impl>) -> String {\n             .and_then(|did| c.impls.get(&did));\n         if let Some(impls) = inner_impl {\n             debug!(\"found inner_impl: {:?}\", impls);\n-            out.push_str(\"<a class=\\\"sidebar-title\\\" href=\\\"#deref-methods\\\">\");\n-            out.push_str(&format!(\n-                \"Methods from {}&lt;Target={}&gt;\",\n-                Escape(&format!(\"{:#}\", impl_.inner_impl().trait_.as_ref().unwrap().print())),\n-                Escape(&format!(\"{:#}\", real_target.print()))\n-            ));\n-            out.push_str(\"</a>\");\n             let mut used_links = FxHashSet::default();\n             let mut ret = impls\n                 .iter()\n                 .filter(|i| i.inner_impl().trait_.is_none())\n                 .flat_map(|i| get_methods(i.inner_impl(), true, &mut used_links, deref_mut))\n                 .collect::<Vec<_>>();\n-            // We want links' order to be reproducible so we don't use unstable sort.\n-            ret.sort();\n             if !ret.is_empty() {\n+                let deref_id_map = cx.deref_id_map.borrow();\n+                let id = deref_id_map\n+                    .get(&real_target.def_id().unwrap())\n+                    .expect(\"Deref section without derived id\");\n+                out.push_str(&format!(\"<a class=\\\"sidebar-title\\\" href=\\\"#{}\\\">\", id));\n+                out.push_str(&format!(\n+                    \"Methods from {}&lt;Target={}&gt;\",\n+                    Escape(&format!(\"{:#}\", impl_.inner_impl().trait_.as_ref().unwrap().print())),\n+                    Escape(&format!(\"{:#}\", real_target.print()))\n+                ));\n+                out.push_str(\"</a>\");\n+                // We want links' order to be reproducible so we don't use unstable sort.\n+                ret.sort();\n                 out.push_str(&format!(\"<div class=\\\"sidebar-links\\\">{}</div>\", ret.join(\"\")));\n             }\n         }\n@@ -4443,7 +4454,7 @@ fn sidebar_deref_methods(impl_: &Impl, v: &Vec<Impl>) -> String {\n                             return out;\n                         }\n                     }\n-                    out.push_str(&sidebar_deref_methods(target_deref_impl, target_impls));\n+                    out.push_str(&sidebar_deref_methods(cx, target_deref_impl, target_impls));\n                 }\n             }\n         }\n@@ -4452,7 +4463,7 @@ fn sidebar_deref_methods(impl_: &Impl, v: &Vec<Impl>) -> String {\n     out\n }\n \n-fn sidebar_struct(buf: &mut Buffer, it: &clean::Item, s: &clean::Struct) {\n+fn sidebar_struct(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, s: &clean::Struct) {\n     let mut sidebar = String::new();\n     let fields = get_struct_fields_name(&s.fields);\n \n@@ -4466,7 +4477,7 @@ fn sidebar_struct(buf: &mut Buffer, it: &clean::Item, s: &clean::Struct) {\n         }\n     }\n \n-    sidebar.push_str(&sidebar_assoc_items(it));\n+    sidebar.push_str(&sidebar_assoc_items(cx, it));\n \n     if !sidebar.is_empty() {\n         write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar);\n@@ -4497,7 +4508,7 @@ fn is_negative_impl(i: &clean::Impl) -> bool {\n     i.polarity == Some(clean::ImplPolarity::Negative)\n }\n \n-fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n+fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n     let mut sidebar = String::new();\n \n     let mut types = t\n@@ -4597,7 +4608,7 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n         }\n     }\n \n-    sidebar.push_str(&sidebar_assoc_items(it));\n+    sidebar.push_str(&sidebar_assoc_items(cx, it));\n \n     sidebar.push_str(\"<a class=\\\"sidebar-title\\\" href=\\\"#implementors\\\">Implementors</a>\");\n     if t.is_auto {\n@@ -4610,16 +4621,16 @@ fn sidebar_trait(buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n     write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar)\n }\n \n-fn sidebar_primitive(buf: &mut Buffer, it: &clean::Item) {\n-    let sidebar = sidebar_assoc_items(it);\n+fn sidebar_primitive(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n+    let sidebar = sidebar_assoc_items(cx, it);\n \n     if !sidebar.is_empty() {\n         write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar);\n     }\n }\n \n-fn sidebar_typedef(buf: &mut Buffer, it: &clean::Item) {\n-    let sidebar = sidebar_assoc_items(it);\n+fn sidebar_typedef(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n+    let sidebar = sidebar_assoc_items(cx, it);\n \n     if !sidebar.is_empty() {\n         write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar);\n@@ -4641,7 +4652,7 @@ fn get_struct_fields_name(fields: &[clean::Item]) -> String {\n     fields.join(\"\")\n }\n \n-fn sidebar_union(buf: &mut Buffer, it: &clean::Item, u: &clean::Union) {\n+fn sidebar_union(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, u: &clean::Union) {\n     let mut sidebar = String::new();\n     let fields = get_struct_fields_name(&u.fields);\n \n@@ -4653,14 +4664,14 @@ fn sidebar_union(buf: &mut Buffer, it: &clean::Item, u: &clean::Union) {\n         ));\n     }\n \n-    sidebar.push_str(&sidebar_assoc_items(it));\n+    sidebar.push_str(&sidebar_assoc_items(cx, it));\n \n     if !sidebar.is_empty() {\n         write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar);\n     }\n }\n \n-fn sidebar_enum(buf: &mut Buffer, it: &clean::Item, e: &clean::Enum) {\n+fn sidebar_enum(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, e: &clean::Enum) {\n     let mut sidebar = String::new();\n \n     let mut variants = e\n@@ -4680,7 +4691,7 @@ fn sidebar_enum(buf: &mut Buffer, it: &clean::Item, e: &clean::Enum) {\n         ));\n     }\n \n-    sidebar.push_str(&sidebar_assoc_items(it));\n+    sidebar.push_str(&sidebar_assoc_items(cx, it));\n \n     if !sidebar.is_empty() {\n         write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar);\n@@ -4769,8 +4780,8 @@ fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n     }\n }\n \n-fn sidebar_foreign_type(buf: &mut Buffer, it: &clean::Item) {\n-    let sidebar = sidebar_assoc_items(it);\n+fn sidebar_foreign_type(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n+    let sidebar = sidebar_assoc_items(cx, it);\n     if !sidebar.is_empty() {\n         write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar);\n     }"}, {"sha": "5aef87c38cd276e724de6956cdd9cf2399767dc1", "filename": "src/test/rustdoc/deref-recursive.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06ce97c3c938c18ed392e72e535931443c1455c0/src%2Ftest%2Frustdoc%2Fderef-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ce97c3c938c18ed392e72e535931443c1455c0/src%2Ftest%2Frustdoc%2Fderef-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-recursive.rs?ref=06ce97c3c938c18ed392e72e535931443c1455c0", "patch": "@@ -1,14 +1,16 @@\n+// ignore-tidy-linelength\n+\n // #26207: Show all methods reachable via Deref impls, recursing through multiple dereferencing\n // levels if needed.\n \n // @has 'foo/struct.Foo.html'\n-// @has '-' '//*[@id=\"deref-methods\"]' 'Methods from Deref<Target = Bar>'\n+// @has '-' '//*[@id=\"deref-methods-Bar\"]' 'Methods from Deref<Target = Bar>'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.bar\"]' 'pub fn bar(&self)'\n-// @has '-' '//*[@id=\"deref-methods\"]' 'Methods from Deref<Target = Baz>'\n+// @has '-' '//*[@id=\"deref-methods-Baz\"]' 'Methods from Deref<Target = Baz>'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.baz\"]' 'pub fn baz(&self)'\n-// @has '-' '//*[@class=\"sidebar-title\"]' 'Methods from Deref<Target=Bar>'\n+// @has '-' '//*[@class=\"sidebar-title\"][@href=\"#deref-methods-Bar\"]' 'Methods from Deref<Target=Bar>'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.bar\"]' 'bar'\n-// @has '-' '//*[@class=\"sidebar-title\"]' 'Methods from Deref<Target=Baz>'\n+// @has '-' '//*[@class=\"sidebar-title\"][@href=\"#deref-methods-Baz\"]' 'Methods from Deref<Target=Baz>'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.baz\"]' 'baz'\n \n #![crate_name = \"foo\"]"}, {"sha": "589f133b975a509046fa9c0cda4e3430fd63d8d2", "filename": "src/test/rustdoc/deref-typedef.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06ce97c3c938c18ed392e72e535931443c1455c0/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06ce97c3c938c18ed392e72e535931443c1455c0/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-typedef.rs?ref=06ce97c3c938c18ed392e72e535931443c1455c0", "patch": "@@ -1,12 +1,14 @@\n+// ignore-tidy-linelength\n+\n #![crate_name = \"foo\"]\n \n // @has 'foo/struct.Bar.html'\n-// @has '-' '//*[@id=\"deref-methods\"]' 'Methods from Deref<Target = FooJ>'\n+// @has '-' '//*[@id=\"deref-methods-FooJ\"]' 'Methods from Deref<Target = FooJ>'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_a\"]' 'pub fn foo_a(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_b\"]' 'pub fn foo_b(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_c\"]' 'pub fn foo_c(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_j\"]' 'pub fn foo_j(&self)'\n-// @has '-' '//*[@class=\"sidebar-title\"]' 'Methods from Deref<Target=FooJ>'\n+// @has '-' '//*[@class=\"sidebar-title\"][@href=\"#deref-methods-FooJ\"]' 'Methods from Deref<Target=FooJ>'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_a\"]' 'foo_a'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_b\"]' 'foo_b'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_c\"]' 'foo_c'"}]}