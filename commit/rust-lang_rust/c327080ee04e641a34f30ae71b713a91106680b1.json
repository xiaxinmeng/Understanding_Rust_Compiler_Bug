{"sha": "c327080ee04e641a34f30ae71b713a91106680b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMjcwODBlZTA0ZTY0MWEzNGYzMGFlNzFiNzEzYTkxMTA2NjgwYjE=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-05-19T21:57:24Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-05-23T06:01:47Z"}, "message": "rustc: add a lint for large enum variants\n\nIt can be easy to accidentally bloat the size of an enum by making one variant\nlarger than the others. When this happens, it usually goes unnoticed. This\ncommit adds a lint that can warn when the largest variant in an enum is more\nthan 3 times larger than the second-largest variant. This requires a little\nbit of rejiggering, because size information is only available in trans, but\nlint levels are only available in the lint context.\n\nIt is allow by default because it's pretty noisy, and isn't really *that*\nundesirable.\n\nCloses #10362", "tree": {"sha": "317ee37ca57fcec6e16d6c69fdd20c4494957d4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/317ee37ca57fcec6e16d6c69fdd20c4494957d4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c327080ee04e641a34f30ae71b713a91106680b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c327080ee04e641a34f30ae71b713a91106680b1", "html_url": "https://github.com/rust-lang/rust/commit/c327080ee04e641a34f30ae71b713a91106680b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c327080ee04e641a34f30ae71b713a91106680b1/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f122ad08a57d3e250f0c8c5036327eaa320dd4eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f122ad08a57d3e250f0c8c5036327eaa320dd4eb", "html_url": "https://github.com/rust-lang/rust/commit/f122ad08a57d3e250f0c8c5036327eaa320dd4eb"}], "stats": {"total": 222, "additions": 181, "deletions": 41}, "files": [{"sha": "7dc3db0a5d1ab977c5ee882b15febecd81043780", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 80, "deletions": 38, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/c327080ee04e641a34f30ae71b713a91106680b1/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c327080ee04e641a34f30ae71b713a91106680b1/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=c327080ee04e641a34f30ae71b713a91106680b1", "patch": "@@ -72,7 +72,7 @@ use syntax::parse::token;\n use syntax::visit::Visitor;\n use syntax::{ast, ast_util, visit};\n \n-#[deriving(Clone, Eq, Ord, TotalEq, TotalOrd)]\n+#[deriving(Clone, Show, Eq, Ord, TotalEq, TotalOrd)]\n pub enum Lint {\n     CTypes,\n     UnusedImports,\n@@ -93,6 +93,7 @@ pub enum Lint {\n     UnknownFeatures,\n     UnknownCrateType,\n     UnsignedNegate,\n+    VariantSizeDifference,\n \n     ManagedHeapMemory,\n     OwnedHeapMemory,\n@@ -146,8 +147,9 @@ pub struct LintSpec {\n \n pub type LintDict = HashMap<&'static str, LintSpec>;\n \n+// this is public for the lints that run in trans\n #[deriving(Eq)]\n-enum LintSource {\n+pub enum LintSource {\n     Node(Span),\n     Default,\n     CommandLine\n@@ -399,6 +401,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: Warn\n     }),\n \n+    (\"variant_size_difference\",\n+    LintSpec {\n+        lint: VariantSizeDifference,\n+        desc: \"detects enums with widely varying variant sizes\",\n+        default: Allow,\n+    }),\n+\n     (\"unused_must_use\",\n     LintSpec {\n         lint: UnusedMustUse,\n@@ -461,6 +470,54 @@ struct Context<'a> {\n \n     /// Ids of structs/enums which have been checked for raw_pointer_deriving\n     checked_raw_pointers: NodeSet,\n+\n+    /// Level of EnumSizeVariance lint for each enum, stored here because the\n+    /// body of the lint needs to run in trans.\n+    enum_levels: HashMap<ast::NodeId, (Level, LintSource)>,\n+}\n+\n+pub fn emit_lint(level: Level, src: LintSource, msg: &str, span: Span,\n+                 lint_str: &str, tcx: &ty::ctxt) {\n+    if level == Allow { return }\n+\n+    let mut note = None;\n+    let msg = match src {\n+        Default => {\n+            format!(\"{}, \\\\#[{}({})] on by default\", msg,\n+                level_to_str(level), lint_str)\n+        },\n+        CommandLine => {\n+            format!(\"{} [-{} {}]\", msg,\n+                match level {\n+                    Warn => 'W', Deny => 'D', Forbid => 'F',\n+                    Allow => fail!()\n+                }, lint_str.replace(\"_\", \"-\"))\n+        },\n+        Node(src) => {\n+            note = Some(src);\n+            msg.to_str()\n+        }\n+    };\n+\n+    match level {\n+        Warn =>          { tcx.sess.span_warn(span, msg.as_slice()); }\n+        Deny | Forbid => { tcx.sess.span_err(span, msg.as_slice());  }\n+        Allow => fail!(),\n+    }\n+\n+    for &span in note.iter() {\n+        tcx.sess.span_note(span, \"lint level defined here\");\n+    }\n+}\n+\n+pub fn lint_to_str(lint: Lint) -> &'static str {\n+    for &(name, lspec) in lint_table.iter() {\n+        if lspec.lint == lint {\n+            return name;\n+        }\n+    }\n+\n+    fail!(\"unrecognized lint: {}\", lint);\n }\n \n impl<'a> Context<'a> {\n@@ -492,7 +549,7 @@ impl<'a> Context<'a> {\n                 return *k;\n             }\n         }\n-        fail!(\"unregistered lint {:?}\", lint);\n+        fail!(\"unregistered lint {}\", lint);\n     }\n \n     fn span_lint(&self, lint: Lint, span: Span, msg: &str) {\n@@ -501,37 +558,8 @@ impl<'a> Context<'a> {\n             Some(&(Warn, src)) => (self.get_level(Warnings), src),\n             Some(&pair) => pair,\n         };\n-        if level == Allow { return }\n-\n-        let mut note = None;\n-        let msg = match src {\n-            Default => {\n-                format_strbuf!(\"{}, \\\\#[{}({})] on by default\",\n-                               msg,\n-                               level_to_str(level),\n-                               self.lint_to_str(lint))\n-            },\n-            CommandLine => {\n-                format!(\"{} [-{} {}]\", msg,\n-                    match level {\n-                        Warn => 'W', Deny => 'D', Forbid => 'F',\n-                        Allow => fail!()\n-                    }, self.lint_to_str(lint).replace(\"_\", \"-\"))\n-            },\n-            Node(src) => {\n-                note = Some(src);\n-                msg.to_str()\n-            }\n-        };\n-        match level {\n-            Warn => self.tcx.sess.span_warn(span, msg.as_slice()),\n-            Deny | Forbid => self.tcx.sess.span_err(span, msg.as_slice()),\n-            Allow => fail!(),\n-        }\n \n-        for &span in note.iter() {\n-            self.tcx.sess.span_note(span, \"lint level defined here\");\n-        }\n+        emit_lint(level, src, msg, span, self.lint_to_str(lint), self.tcx);\n     }\n \n     /**\n@@ -1685,9 +1713,24 @@ fn check_stability(cx: &Context, e: &ast::Expr) {\n     cx.span_lint(lint, e.span, msg.as_slice());\n }\n \n+fn check_enum_variant_sizes(cx: &mut Context, it: &ast::Item) {\n+    match it.node {\n+        ast::ItemEnum(..) => {\n+            match cx.cur.find(&(VariantSizeDifference as uint)) {\n+                Some(&(lvl, src)) if lvl != Allow => {\n+                    cx.node_levels.insert((it.id, VariantSizeDifference), (lvl, src));\n+                },\n+                _ => { }\n+            }\n+        },\n+        _ => { }\n+    }\n+}\n+\n impl<'a> Visitor<()> for Context<'a> {\n     fn visit_item(&mut self, it: &ast::Item, _: ()) {\n         self.with_lint_attrs(it.attrs.as_slice(), |cx| {\n+            check_enum_variant_sizes(cx, it);\n             check_item_ctypes(cx, it);\n             check_item_non_camel_case_types(cx, it);\n             check_item_non_uppercase_statics(cx, it);\n@@ -1878,6 +1921,7 @@ pub fn check_crate(tcx: &ty::ctxt,\n         lint_stack: Vec::new(),\n         negated_expr_id: -1,\n         checked_raw_pointers: NodeSet::new(),\n+        enum_levels: HashMap::new(),\n     };\n \n     // Install default lint levels, followed by the command line levels, and\n@@ -1913,13 +1957,11 @@ pub fn check_crate(tcx: &ty::ctxt,\n     // in the iteration code.\n     for (id, v) in tcx.sess.lints.borrow().iter() {\n         for &(lint, span, ref msg) in v.iter() {\n-            tcx.sess.span_bug(span,\n-                              format!(\"unprocessed lint {:?} at {}: {}\",\n-                                      lint,\n-                                      tcx.map.node_to_str(*id),\n-                                      *msg).as_slice())\n+            tcx.sess.span_bug(span, format!(\"unprocessed lint {} at {}: {}\",\n+                                            lint, tcx.map.node_to_str(*id), *msg).as_slice())\n         }\n     }\n \n     tcx.sess.abort_if_errors();\n+    *tcx.enum_lint_levels.borrow_mut() = cx.enum_levels;\n }"}, {"sha": "5f708b2b8bfc24b6281a40f96704af2123444b9e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c327080ee04e641a34f30ae71b713a91106680b1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c327080ee04e641a34f30ae71b713a91106680b1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c327080ee04e641a34f30ae71b713a91106680b1", "patch": "@@ -36,6 +36,7 @@ use lib::llvm::{ModuleRef, ValueRef, BasicBlockRef};\n use lib::llvm::{llvm, Vector};\n use lib;\n use metadata::{csearch, encoder};\n+use middle::lint;\n use middle::astencode;\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::weak_lang_items;\n@@ -57,7 +58,7 @@ use middle::trans::foreign;\n use middle::trans::glue;\n use middle::trans::inline;\n use middle::trans::machine;\n-use middle::trans::machine::{llalign_of_min, llsize_of};\n+use middle::trans::machine::{llalign_of_min, llsize_of, llsize_of_real};\n use middle::trans::meth;\n use middle::trans::monomorphize;\n use middle::trans::tvec;\n@@ -1539,7 +1540,7 @@ fn trans_enum_variant_or_tuple_like_struct(ccx: &CrateContext,\n }\n \n fn trans_enum_def(ccx: &CrateContext, enum_definition: &ast::EnumDef,\n-                  id: ast::NodeId, vi: &[Rc<ty::VariantInfo>],\n+                  sp: Span, id: ast::NodeId, vi: &[Rc<ty::VariantInfo>],\n                   i: &mut uint) {\n     for &variant in enum_definition.variants.iter() {\n         let disr_val = vi[*i].disr_val;\n@@ -1559,6 +1560,57 @@ fn trans_enum_def(ccx: &CrateContext, enum_definition: &ast::EnumDef,\n             }\n         }\n     }\n+\n+    enum_variant_size_lint(ccx, enum_definition, sp, id);\n+}\n+\n+fn enum_variant_size_lint(ccx: &CrateContext, enum_def: &ast::EnumDef, sp: Span, id: ast::NodeId) {\n+    let mut sizes = Vec::new(); // does no allocation if no pushes, thankfully\n+\n+    let (lvl, src) = ccx.tcx.node_lint_levels.borrow()\n+                        .find(&(id, lint::VariantSizeDifference))\n+                        .map_or((lint::Allow, lint::Default), |&(lvl,src)| (lvl, src));\n+\n+    if lvl != lint::Allow {\n+        let avar = adt::represent_type(ccx, ty::node_id_to_type(ccx.tcx(), id));\n+        match *avar {\n+            adt::General(_, ref variants) => {\n+                for var in variants.iter() {\n+                    let mut size = 0;\n+                    for field in var.fields.iter().skip(1) {\n+                        // skip the dicriminant\n+                        size += llsize_of_real(ccx, sizing_type_of(ccx, *field));\n+                    }\n+                    sizes.push(size);\n+                }\n+            },\n+            _ => { /* its size is either constant or unimportant */ }\n+        }\n+\n+        let (largest, slargest, largest_index) = sizes.iter().enumerate().fold((0, 0, 0),\n+            |(l, s, li), (idx, &size)|\n+                if size > l {\n+                    (size, l, idx)\n+                } else if size > s {\n+                    (l, size, li)\n+                } else {\n+                    (l, s, li)\n+                }\n+        );\n+\n+        // we only warn if the largest variant is at least thrice as large as\n+        // the second-largest.\n+        if largest > slargest * 3 && slargest > 0 {\n+            lint::emit_lint(lvl, src,\n+                            format!(\"enum variant is more than three times larger \\\n+                                    ({} bytes) than the next largest (ignoring padding)\",\n+                                    largest).as_slice(),\n+                            sp, lint::lint_to_str(lint::VariantSizeDifference), ccx.tcx());\n+\n+            ccx.sess().span_note(enum_def.variants.get(largest_index).span,\n+                                 \"this variant is the largest\");\n+        }\n+    }\n }\n \n pub struct TransItemVisitor<'a> {\n@@ -1605,7 +1657,7 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n         if !generics.is_type_parameterized() {\n             let vi = ty::enum_variants(ccx.tcx(), local_def(item.id));\n             let mut i = 0;\n-            trans_enum_def(ccx, enum_definition, item.id, vi.as_slice(), &mut i);\n+            trans_enum_def(ccx, enum_definition, item.span, item.id, vi.as_slice(), &mut i);\n         }\n       }\n       ast::ItemStatic(_, m, expr) => {"}, {"sha": "1ce1eb0a82a6ccffdbf5ab5758f12caef31e03e4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c327080ee04e641a34f30ae71b713a91106680b1/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c327080ee04e641a34f30ae71b713a91106680b1/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c327080ee04e641a34f30ae71b713a91106680b1", "patch": "@@ -14,6 +14,7 @@ use back::svh::Svh;\n use driver::session::Session;\n use metadata::csearch;\n use mc = middle::mem_categorization;\n+use middle::lint;\n use middle::const_eval;\n use middle::dependency_format;\n use middle::lang_items::{ExchangeHeapLangItem, OpaqueStructLangItem};\n@@ -352,6 +353,8 @@ pub struct ctxt {\n     pub vtable_map: typeck::vtable_map,\n \n     pub dependency_formats: RefCell<dependency_format::Dependencies>,\n+\n+    pub enum_lint_levels: RefCell<HashMap<ast::NodeId, (lint::Level, lint::LintSource)>>,\n }\n \n pub enum tbox_flag {\n@@ -1134,6 +1137,7 @@ pub fn mk_ctxt(s: Session,\n         method_map: RefCell::new(FnvHashMap::new()),\n         vtable_map: RefCell::new(FnvHashMap::new()),\n         dependency_formats: RefCell::new(HashMap::new()),\n+        enum_lint_levels: RefCell::new(HashMap::new()),\n     }\n }\n "}, {"sha": "39ab8316958a65b653ce9a83b157d791027d7a1a", "filename": "src/test/run-pass/enum-size-variance.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c327080ee04e641a34f30ae71b713a91106680b1/src%2Ftest%2Frun-pass%2Fenum-size-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c327080ee04e641a34f30ae71b713a91106680b1/src%2Ftest%2Frun-pass%2Fenum-size-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-size-variance.rs?ref=c327080ee04e641a34f30ae71b713a91106680b1", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// ignore-pretty\n+\n+#![deny(enum_size_variance)]\n+#![allow(dead_code)]\n+\n+enum Enum1 { }\n+\n+enum Enum2 { A, B, C }\n+\n+enum Enum3 { D(int), E, F }\n+\n+enum Enum4 { H(int), I(int), J }\n+\n+enum Enum5 { //~ ERROR three times larger\n+    L(int, int, int, int), //~ NOTE this variant is the largest\n+    M(int),\n+    N\n+}\n+\n+enum Enum6<T, U> {\n+    O(T),\n+    P(U),\n+    Q(int)\n+}\n+\n+#[allow(enum_size_variance)]\n+enum Enum7 {\n+    R(int, int, int, int),\n+    S(int),\n+    T\n+}\n+pub fn main() { }"}]}