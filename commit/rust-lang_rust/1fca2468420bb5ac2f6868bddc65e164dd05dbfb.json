{"sha": "1fca2468420bb5ac2f6868bddc65e164dd05dbfb", "node_id": "C_kwDOAAsO6NoAKDFmY2EyNDY4NDIwYmI1YWMyZjY4NjhiZGRjNjVlMTY0ZGQwNWRiZmI", "commit": {"author": {"name": "Daniel Paoliello", "email": "danpao@microsoft.com", "date": "2022-06-23T20:05:42Z"}, "committer": {"name": "Daniel Paoliello", "email": "danpao@microsoft.com", "date": "2022-06-27T18:46:57Z"}, "message": "Ensure that `static_crt` is set in the bootstrapper whenever using `cc` to get a compiler command line.\n\nWhen attempting to build rustc with LLVM on Windows, I noticed that the CRT flag provided to the C and C++ Compilers was inconsistent:\n\n```\n\"-DCMAKE_C_FLAGS=-nologo -MT -Brepro\" \"-DCMAKE_CXX_FLAGS=-nologo -MD -Brepro\"\n```\n\nSince the bootstrapper also sets the various `LLVM_USE_CRT` variables, this resulted in cl.exe reporting a bunch of warnings:\n\n```\ncl : Command line warning D9025 : overriding '/MD' with '/MT'\n```\n\nThe root cause for this is that `cc_detect::find` was creating a `cc::Build` twice, but didn't set `static_crt` the second time.\n\nIt's possible that this what is also causing #81381", "tree": {"sha": "3f837af8e171839ebc38fd4842fcc5587848eaef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f837af8e171839ebc38fd4842fcc5587848eaef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fca2468420bb5ac2f6868bddc65e164dd05dbfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fca2468420bb5ac2f6868bddc65e164dd05dbfb", "html_url": "https://github.com/rust-lang/rust/commit/1fca2468420bb5ac2f6868bddc65e164dd05dbfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fca2468420bb5ac2f6868bddc65e164dd05dbfb/comments", "author": {"login": "dpaoliello", "id": 10580822, "node_id": "MDQ6VXNlcjEwNTgwODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10580822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpaoliello", "html_url": "https://github.com/dpaoliello", "followers_url": "https://api.github.com/users/dpaoliello/followers", "following_url": "https://api.github.com/users/dpaoliello/following{/other_user}", "gists_url": "https://api.github.com/users/dpaoliello/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpaoliello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpaoliello/subscriptions", "organizations_url": "https://api.github.com/users/dpaoliello/orgs", "repos_url": "https://api.github.com/users/dpaoliello/repos", "events_url": "https://api.github.com/users/dpaoliello/events{/privacy}", "received_events_url": "https://api.github.com/users/dpaoliello/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dpaoliello", "id": 10580822, "node_id": "MDQ6VXNlcjEwNTgwODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10580822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpaoliello", "html_url": "https://github.com/dpaoliello", "followers_url": "https://api.github.com/users/dpaoliello/followers", "following_url": "https://api.github.com/users/dpaoliello/following{/other_user}", "gists_url": "https://api.github.com/users/dpaoliello/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpaoliello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpaoliello/subscriptions", "organizations_url": "https://api.github.com/users/dpaoliello/orgs", "repos_url": "https://api.github.com/users/dpaoliello/repos", "events_url": "https://api.github.com/users/dpaoliello/events{/privacy}", "received_events_url": "https://api.github.com/users/dpaoliello/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f4ce324baf7cfb7ce2b2096662b82b79204944", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f4ce324baf7cfb7ce2b2096662b82b79204944", "html_url": "https://github.com/rust-lang/rust/commit/10f4ce324baf7cfb7ce2b2096662b82b79204944"}], "stats": {"total": 57, "additions": 27, "deletions": 30}, "files": [{"sha": "759a99c330c279d1aec9714b7eaae757908a315b", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1fca2468420bb5ac2f6868bddc65e164dd05dbfb/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fca2468420bb5ac2f6868bddc65e164dd05dbfb/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=1fca2468420bb5ac2f6868bddc65e164dd05dbfb", "patch": "@@ -61,6 +61,30 @@ fn cc2ar(cc: &Path, target: TargetSelection) -> Option<PathBuf> {\n     }\n }\n \n+fn new_cc_build(build: &Build, target: TargetSelection) -> cc::Build {\n+    let mut cfg = cc::Build::new();\n+    cfg.cargo_metadata(false)\n+        .opt_level(2)\n+        .warnings(false)\n+        .debug(false)\n+        .target(&target.triple)\n+        .host(&build.build.triple);\n+    match build.crt_static(target) {\n+        Some(a) => {\n+            cfg.static_crt(a);\n+        }\n+        None => {\n+            if target.contains(\"msvc\") {\n+                cfg.static_crt(true);\n+            }\n+            if target.contains(\"musl\") {\n+                cfg.static_flag(true);\n+            }\n+        }\n+    }\n+    cfg\n+}\n+\n pub fn find(build: &mut Build) {\n     // For all targets we're going to need a C compiler for building some shims\n     // and such as well as for being a linker for Rust code.\n@@ -72,27 +96,7 @@ pub fn find(build: &mut Build) {\n         .chain(iter::once(build.build))\n         .collect::<HashSet<_>>();\n     for target in targets.into_iter() {\n-        let mut cfg = cc::Build::new();\n-        cfg.cargo_metadata(false)\n-            .opt_level(2)\n-            .warnings(false)\n-            .debug(false)\n-            .target(&target.triple)\n-            .host(&build.build.triple);\n-        match build.crt_static(target) {\n-            Some(a) => {\n-                cfg.static_crt(a);\n-            }\n-            None => {\n-                if target.contains(\"msvc\") {\n-                    cfg.static_crt(true);\n-                }\n-                if target.contains(\"musl\") {\n-                    cfg.static_flag(true);\n-                }\n-            }\n-        }\n-\n+        let mut cfg = new_cc_build(build, target);\n         let config = build.config.target_config.get(&target);\n         if let Some(cc) = config.and_then(|c| c.cc.as_ref()) {\n             cfg.compiler(cc);\n@@ -112,15 +116,8 @@ pub fn find(build: &mut Build) {\n \n         // If we use llvm-libunwind, we will need a C++ compiler as well for all targets\n         // We'll need one anyways if the target triple is also a host triple\n-        let mut cfg = cc::Build::new();\n-        cfg.cargo_metadata(false)\n-            .opt_level(2)\n-            .warnings(false)\n-            .debug(false)\n-            .cpp(true)\n-            .target(&target.triple)\n-            .host(&build.build.triple);\n-\n+        let mut cfg = new_cc_build(build, target);\n+        cfg.cpp(true);\n         let cxx_configured = if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {\n             cfg.compiler(cxx);\n             true"}]}