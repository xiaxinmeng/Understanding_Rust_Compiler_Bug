{"sha": "927ef0ce7ed557187738e6a2f99e22f0e4628d1c", "node_id": "C_kwDOAAsO6NoAKDkyN2VmMGNlN2VkNTU3MTg3NzM4ZTZhMmY5OWUyMmYwZTQ2MjhkMWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-12T11:05:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-12T11:05:21Z"}, "message": "Auto merge of #12215 - listochkin:Support-variable-substitution-in-vscode-settings, r=Veykril\n\nfeat: Support variable substitution in VSCode settings\n\nCurrently support a subset of [variables provided by VSCode](https://code.visualstudio.com/docs/editor/variables-reference) in `server.extraEnv` section of Rust-Analyzer settings:\n\n  * `workspaceFolder`\n  * `workspaceFolderBasename`\n  * `cwd`\n  * `execPath`\n  * `pathSeparator`\n\nAlso, this PR adds support for general environment variables resolution. You can declare environment variables and reference them from other variables like this:\n\n```JSON\n\"rust-analyzer.server.extraEnv\": {\n    \"RUSTFLAGS\": \"-L${env:OPEN_XR_SDK_PATH}\",\n    \"OPEN_XR_SDK_PATH\": \"${workspaceFolder}\\\\..\\\\OpenXR-SDK\\\\build\\\\src\\\\loader\\\\Release\"\n},\n```\nThe order of variable declaration doesn't matter, you can reference variables before defining them. If the variable is not present in `extraEnv` section, VSCode will search for them in your environment. Missing variables will be replaced with empty string. Circular references won't be resolved and will be passed to rust-analyzer server process as is.\n\nCloses #9626, but doesn't address use cases where people want to use values provided by `rustc` or `cargo`, such as `${targetTriple}` proposal #11649", "tree": {"sha": "f7fcda01eb6ac8d92575a1704f4b75ecbcbbfd92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7fcda01eb6ac8d92575a1704f4b75ecbcbbfd92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/927ef0ce7ed557187738e6a2f99e22f0e4628d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/927ef0ce7ed557187738e6a2f99e22f0e4628d1c", "html_url": "https://github.com/rust-lang/rust/commit/927ef0ce7ed557187738e6a2f99e22f0e4628d1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a55863c3dfda75dd51d2940b737818ba2fa2fcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a55863c3dfda75dd51d2940b737818ba2fa2fcc", "html_url": "https://github.com/rust-lang/rust/commit/7a55863c3dfda75dd51d2940b737818ba2fa2fcc"}, {"sha": "33d2c8a3f9530d193bb3563ae9d11d329e8a4c62", "url": "https://api.github.com/repos/rust-lang/rust/commits/33d2c8a3f9530d193bb3563ae9d11d329e8a4c62", "html_url": "https://github.com/rust-lang/rust/commit/33d2c8a3f9530d193bb3563ae9d11d329e8a4c62"}], "stats": {"total": 234, "additions": 225, "deletions": 9}, "files": [{"sha": "74cda037d8bcf9ae64c279539243c0596da64573", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=927ef0ce7ed557187738e6a2f99e22f0e4628d1c", "patch": "@@ -19,6 +19,7 @@\n                 \"@typescript-eslint/eslint-plugin\": \"^5.16.0\",\n                 \"@typescript-eslint/parser\": \"^5.16.0\",\n                 \"@vscode/test-electron\": \"^2.1.3\",\n+                \"cross-env\": \"^7.0.3\",\n                 \"esbuild\": \"^0.14.27\",\n                 \"eslint\": \"^8.11.0\",\n                 \"tslib\": \"^2.3.0\",\n@@ -27,7 +28,7 @@\n                 \"vsce\": \"^2.7.0\"\n             },\n             \"engines\": {\n-                \"vscode\": \"^1.65.0\"\n+                \"vscode\": \"^1.66.0\"\n             }\n         },\n         \"node_modules/@eslint/eslintrc\": {\n@@ -790,6 +791,24 @@\n             \"integrity\": \"sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==\",\n             \"dev\": true\n         },\n+        \"node_modules/cross-env\": {\n+            \"version\": \"7.0.3\",\n+            \"resolved\": \"https://registry.npmjs.org/cross-env/-/cross-env-7.0.3.tgz\",\n+            \"integrity\": \"sha512-+/HKd6EgcQCJGh2PSjZuUitQBQynKor4wrFbRg4DtAgS1aWO+gU52xpH7M9ScGgXSYmAVS9bIJ8EzuaGw0oNAw==\",\n+            \"dev\": true,\n+            \"dependencies\": {\n+                \"cross-spawn\": \"^7.0.1\"\n+            },\n+            \"bin\": {\n+                \"cross-env\": \"src/bin/cross-env.js\",\n+                \"cross-env-shell\": \"src/bin/cross-env-shell.js\"\n+            },\n+            \"engines\": {\n+                \"node\": \">=10.14\",\n+                \"npm\": \">=6\",\n+                \"yarn\": \">=1\"\n+            }\n+        },\n         \"node_modules/cross-spawn\": {\n             \"version\": \"7.0.3\",\n             \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz\",\n@@ -4663,6 +4682,15 @@\n             \"integrity\": \"sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==\",\n             \"dev\": true\n         },\n+        \"cross-env\": {\n+            \"version\": \"7.0.3\",\n+            \"resolved\": \"https://registry.npmjs.org/cross-env/-/cross-env-7.0.3.tgz\",\n+            \"integrity\": \"sha512-+/HKd6EgcQCJGh2PSjZuUitQBQynKor4wrFbRg4DtAgS1aWO+gU52xpH7M9ScGgXSYmAVS9bIJ8EzuaGw0oNAw==\",\n+            \"dev\": true,\n+            \"requires\": {\n+                \"cross-spawn\": \"^7.0.1\"\n+            }\n+        },\n         \"cross-spawn\": {\n             \"version\": \"7.0.3\",\n             \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz\","}, {"sha": "c6f4bc6ce30f7e708490e11fb843bf14f3f30e51", "filename": "editors/code/package.json", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=927ef0ce7ed557187738e6a2f99e22f0e4628d1c", "patch": "@@ -33,19 +33,20 @@\n         \"lint\": \"tsfmt --verify && eslint -c .eslintrc.js --ext ts ./src ./tests\",\n         \"fix\": \" tsfmt -r       && eslint -c .eslintrc.js --ext ts ./src ./tests --fix\",\n         \"pretest\": \"tsc && npm run build\",\n-        \"test\": \"node ./out/tests/runTests.js\"\n+        \"test\": \"cross-env TEST_VARIABLE=test node ./out/tests/runTests.js\"\n     },\n     \"dependencies\": {\n-        \"vscode-languageclient\": \"8.0.0-next.14\",\n         \"d3\": \"^7.3.0\",\n-        \"d3-graphviz\": \"^4.1.0\"\n+        \"d3-graphviz\": \"^4.1.0\",\n+        \"vscode-languageclient\": \"8.0.0-next.14\"\n     },\n     \"devDependencies\": {\n         \"@types/node\": \"~14.17.5\",\n         \"@types/vscode\": \"~1.66.0\",\n         \"@typescript-eslint/eslint-plugin\": \"^5.16.0\",\n         \"@typescript-eslint/parser\": \"^5.16.0\",\n         \"@vscode/test-electron\": \"^2.1.3\",\n+        \"cross-env\": \"^7.0.3\",\n         \"esbuild\": \"^0.14.27\",\n         \"eslint\": \"^8.11.0\",\n         \"tslib\": \"^2.3.0\","}, {"sha": "d28c20aa08f02a385e80490023500a5cbd61ebb7", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=927ef0ce7ed557187738e6a2f99e22f0e4628d1c", "patch": "@@ -6,6 +6,7 @@ import { assert } from './util';\n import { WorkspaceEdit } from 'vscode';\n import { Workspace } from './ctx';\n import { updateConfig } from './config';\n+import { substituteVariablesInEnv } from './config';\n \n export interface Env {\n     [name: string]: string;\n@@ -30,9 +31,9 @@ export async function createClient(serverPath: string, workspace: Workspace, ext\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file.\n \n-    const newEnv = Object.assign({}, process.env);\n-    Object.assign(newEnv, extraEnv);\n-\n+    const newEnv = substituteVariablesInEnv(Object.assign(\n+        {}, process.env, extraEnv\n+    ));\n     const run: lc.Executable = {\n         command: serverPath,\n         options: { env: newEnv },"}, {"sha": "bf4572fcf61536ae7335772c39ac3ac7c54cd25a", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=927ef0ce7ed557187738e6a2f99e22f0e4628d1c", "patch": "@@ -1,3 +1,4 @@\n+import path = require('path');\n import * as vscode from 'vscode';\n import { Env } from './client';\n import { log } from \"./util\";\n@@ -210,3 +211,125 @@ export async function updateConfig(config: vscode.WorkspaceConfiguration) {\n         }\n     }\n }\n+\n+export function substituteVariablesInEnv(env: Env): Env {\n+    const missingDeps = new Set<string>();\n+    // vscode uses `env:ENV_NAME` for env vars resolution, and it's easier\n+    // to follow the same convention for our dependency tracking\n+    const definedEnvKeys = new Set(Object.keys(env).map(key => `env:${key}`));\n+    const envWithDeps = Object.fromEntries(Object.entries(env).map(([key, value]) => {\n+        const deps = new Set<string>();\n+        const depRe = new RegExp(/\\${(?<depName>.+?)}/g);\n+        let match = undefined;\n+        while ((match = depRe.exec(value))) {\n+            const depName = match.groups!.depName;\n+            deps.add(depName);\n+            // `depName` at this point can have a form of `expression` or\n+            // `prefix:expression`\n+            if (!definedEnvKeys.has(depName)) {\n+                missingDeps.add(depName);\n+            }\n+        }\n+        return [`env:${key}`, { deps: [...deps], value }];\n+    }));\n+\n+    const resolved = new Set<string>();\n+    for (const dep of missingDeps) {\n+        const match = /(?<prefix>.*?):(?<body>.+)/.exec(dep);\n+        if (match) {\n+            const { prefix, body } = match.groups!;\n+            if (prefix === 'env') {\n+                const envName = body;\n+                envWithDeps[dep] = {\n+                    value: process.env[envName] ?? '',\n+                    deps: []\n+                };\n+                resolved.add(dep);\n+            } else {\n+                // we can't handle other prefixes at the moment\n+                // leave values as is, but still mark them as resolved\n+                envWithDeps[dep] = {\n+                    value: '${' + dep + '}',\n+                    deps: []\n+                };\n+                resolved.add(dep);\n+            }\n+        } else {\n+            envWithDeps[dep] = {\n+                value: computeVscodeVar(dep),\n+                deps: []\n+            };\n+        }\n+    }\n+    const toResolve = new Set(Object.keys(envWithDeps));\n+\n+    let leftToResolveSize;\n+    do {\n+        leftToResolveSize = toResolve.size;\n+        for (const key of toResolve) {\n+            if (envWithDeps[key].deps.every(dep => resolved.has(dep))) {\n+                envWithDeps[key].value = envWithDeps[key].value.replace(\n+                    /\\${(?<depName>.+?)}/g, (_wholeMatch, depName) => {\n+                        return envWithDeps[depName].value;\n+                    });\n+                resolved.add(key);\n+                toResolve.delete(key);\n+            }\n+        }\n+    } while (toResolve.size > 0 && toResolve.size < leftToResolveSize);\n+\n+    const resolvedEnv: Env = {};\n+    for (const key of Object.keys(env)) {\n+        resolvedEnv[key] = envWithDeps[`env:${key}`].value;\n+    }\n+    return resolvedEnv;\n+}\n+\n+function computeVscodeVar(varName: string): string {\n+    // https://code.visualstudio.com/docs/editor/variables-reference\n+    const supportedVariables: { [k: string]: () => string } = {\n+        workspaceFolder: () => {\n+            const folders = vscode.workspace.workspaceFolders ?? [];\n+            if (folders.length === 1) {\n+                // TODO: support for remote workspaces?\n+                return folders[0].uri.fsPath;\n+            } else if (folders.length > 1) {\n+                // could use currently opened document to detect the correct\n+                // workspace. However, that would be determined by the document\n+                // user has opened on Editor startup. Could lead to\n+                // unpredictable workspace selection in practice.\n+                // It's better to pick the first one\n+                return folders[0].uri.fsPath;\n+            } else {\n+                // no workspace opened\n+                return '';\n+            }\n+        },\n+\n+        workspaceFolderBasename: () => {\n+            const workspaceFolder = computeVscodeVar('workspaceFolder');\n+            if (workspaceFolder) {\n+                return path.basename(workspaceFolder);\n+            } else {\n+                return '';\n+            }\n+        },\n+\n+        cwd: () => process.cwd(),\n+\n+        // see\n+        // https://github.com/microsoft/vscode/blob/08ac1bb67ca2459496b272d8f4a908757f24f56f/src/vs/workbench/api/common/extHostVariableResolverService.ts#L81\n+        // or\n+        // https://github.com/microsoft/vscode/blob/29eb316bb9f154b7870eb5204ec7f2e7cf649bec/src/vs/server/node/remoteTerminalChannel.ts#L56\n+        execPath: () => process.env.VSCODE_EXEC_PATH ?? process.execPath,\n+\n+        pathSeparator: () => path.sep\n+    };\n+\n+    if (varName in supportedVariables) {\n+        return supportedVariables[varName]();\n+    } else {\n+        // can't resolve, keep the expression as is\n+        return '${' + varName + '}';\n+    }\n+}"}, {"sha": "6172cc7d5f96d5f19a3ddf7e6955a5e8f9c1e42a", "filename": "editors/code/tests/runTests.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/editors%2Fcode%2Ftests%2FrunTests.ts", "raw_url": "https://github.com/rust-lang/rust/raw/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/editors%2Fcode%2Ftests%2FrunTests.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2FrunTests.ts?ref=927ef0ce7ed557187738e6a2f99e22f0e4628d1c", "patch": "@@ -14,7 +14,7 @@ async function main() {\n     let minimalVersion: string = json.engines.vscode;\n     if (minimalVersion.startsWith('^')) minimalVersion = minimalVersion.slice(1);\n \n-    const launchArgs = [\"--disable-extensions\"];\n+    const launchArgs = [\"--disable-extensions\", extensionDevelopmentPath];\n \n     // All test suites (either unit tests or integration tests) should be in subfolders.\n     const extensionTestsPath = path.resolve(__dirname, './unit/index');"}, {"sha": "288bd60326c60e5c72790fca46dc20ffd6ecfc4f", "filename": "editors/code/tests/unit/index.ts", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/editors%2Fcode%2Ftests%2Funit%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/editors%2Fcode%2Ftests%2Funit%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Findex.ts?ref=927ef0ce7ed557187738e6a2f99e22f0e4628d1c", "patch": "@@ -1,3 +1,4 @@\n+import { readdir } from 'fs/promises';\n import * as path from 'path';\n \n class Test {\n@@ -57,7 +58,8 @@ export class Context {\n \n export async function run(): Promise<void> {\n     const context = new Context();\n-    const testFiles = [\"launch_config.test.js\", \"runnable_env.test.js\"];\n+\n+    const testFiles = (await readdir(path.resolve(__dirname))).filter(name => name.endsWith('.test.js'));\n     for (const testFile of testFiles) {\n         try {\n             const testModule = require(path.resolve(__dirname, testFile));"}, {"sha": "dca4e38d1381e1c358f0d66d566a4ae1075df9d7", "filename": "editors/code/tests/unit/settings.test.ts", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/editors%2Fcode%2Ftests%2Funit%2Fsettings.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/927ef0ce7ed557187738e6a2f99e22f0e4628d1c/editors%2Fcode%2Ftests%2Funit%2Fsettings.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Fsettings.test.ts?ref=927ef0ce7ed557187738e6a2f99e22f0e4628d1c", "patch": "@@ -0,0 +1,61 @@\n+import * as assert from 'assert';\n+import { Context } from '.';\n+import { substituteVariablesInEnv } from '../../src/config';\n+\n+export async function getTests(ctx: Context) {\n+    await ctx.suite('Server Env Settings', suite => {\n+        suite.addTest('Replacing Env Variables', async () => {\n+            const envJson = {\n+                USING_MY_VAR: \"${env:MY_VAR} test ${env:MY_VAR}\",\n+                MY_VAR: \"test\"\n+            };\n+            const expectedEnv = {\n+                USING_MY_VAR: \"test test test\",\n+                MY_VAR: \"test\"\n+            };\n+            const actualEnv = await substituteVariablesInEnv(envJson);\n+            assert.deepStrictEqual(actualEnv, expectedEnv);\n+        });\n+\n+        suite.addTest('Circular dependencies remain as is', async () => {\n+            const envJson = {\n+                A_USES_B: \"${env:B_USES_A}\",\n+                B_USES_A: \"${env:A_USES_B}\",\n+                C_USES_ITSELF: \"${env:C_USES_ITSELF}\",\n+                D_USES_C: \"${env:C_USES_ITSELF}\",\n+                E_IS_ISOLATED: \"test\",\n+                F_USES_E: \"${env:E_IS_ISOLATED}\"\n+            };\n+            const expectedEnv = {\n+                A_USES_B: \"${env:B_USES_A}\",\n+                B_USES_A: \"${env:A_USES_B}\",\n+                C_USES_ITSELF: \"${env:C_USES_ITSELF}\",\n+                D_USES_C: \"${env:C_USES_ITSELF}\",\n+                E_IS_ISOLATED: \"test\",\n+                F_USES_E: \"test\"\n+            };\n+            const actualEnv = await substituteVariablesInEnv(envJson);\n+            assert.deepStrictEqual(actualEnv, expectedEnv);\n+        });\n+\n+        suite.addTest('Should support external variables', async () => {\n+            const envJson = {\n+                USING_EXTERNAL_VAR: \"${env:TEST_VARIABLE} test ${env:TEST_VARIABLE}\"\n+            };\n+            const expectedEnv = {\n+                USING_EXTERNAL_VAR: \"test test test\"\n+            };\n+\n+            const actualEnv = await substituteVariablesInEnv(envJson);\n+            assert.deepStrictEqual(actualEnv, expectedEnv);\n+        });\n+\n+        suite.addTest('should support VSCode variables', async () => {\n+            const envJson = {\n+                USING_VSCODE_VAR: \"${workspaceFolderBasename}\"\n+            };\n+            const actualEnv = await substituteVariablesInEnv(envJson);\n+            assert.deepStrictEqual(actualEnv.USING_VSCODE_VAR, 'code');\n+        });\n+    });\n+}"}]}