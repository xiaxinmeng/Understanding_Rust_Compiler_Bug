{"sha": "beb755caa2b1d7265da7d3367af3b49039dfe00e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYjc1NWNhYTJiMWQ3MjY1ZGE3ZDMzNjdhZjNiNDkwMzlkZmUwMGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-10T22:29:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-10T22:29:04Z"}, "message": "Merge #3937\n\n3937: Forward compat r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c7f96c8f170c43d4a65451e089783ba6550ca020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7f96c8f170c43d4a65451e089783ba6550ca020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beb755caa2b1d7265da7d3367af3b49039dfe00e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJekPMwCRBK7hj4Ov3rIwAAdHIIAFTYi5EAgQa4z7sfJBaNDuz1\n7AsjfipkYFwqxi33P27hZ7SZVk2ykBY9JAhJk6hjc0RisZ0f+cPzkkq/NZtMXDmp\n68zIVEu+wNhI8s5HXmhMbtuS+SExU1BF5YB/+3YW698LQAk38HYQTmCLvJ0i/GCq\ne4GS2iqjWTis7njMuu4MxbVp27oe6bP99CFjNz5BaaCIY1TuZ+x/3X4HnyZ7WHBP\nzmi568orLxmn5h1ie8tv3RtVWNxRQIM02Gj6U5p7BuMrYr/+zD/5z173AGO9+ZpQ\nmfT2NDFuzp8PSSr5y/Tp1VY39XjKGQ5ctBTKybfCthUTll66MYUxL8SNqe1BtBI=\n=fkWJ\n-----END PGP SIGNATURE-----\n", "payload": "tree c7f96c8f170c43d4a65451e089783ba6550ca020\nparent ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276\nparent c1244c853c6bdc42bf91a77768963c0d287093ff\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1586557744 +0000\ncommitter GitHub <noreply@github.com> 1586557744 +0000\n\nMerge #3937\n\n3937: Forward compat r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beb755caa2b1d7265da7d3367af3b49039dfe00e", "html_url": "https://github.com/rust-lang/rust/commit/beb755caa2b1d7265da7d3367af3b49039dfe00e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beb755caa2b1d7265da7d3367af3b49039dfe00e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276", "html_url": "https://github.com/rust-lang/rust/commit/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276"}, {"sha": "c1244c853c6bdc42bf91a77768963c0d287093ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1244c853c6bdc42bf91a77768963c0d287093ff", "html_url": "https://github.com/rust-lang/rust/commit/c1244c853c6bdc42bf91a77768963c0d287093ff"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "e09996c6f87635f386938c186358b466d72fc123", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=beb755caa2b1d7265da7d3367af3b49039dfe00e", "patch": "@@ -236,7 +236,7 @@ impl Index<PatId> for Body {\n \n impl BodySourceMap {\n     pub fn expr_syntax(&self, expr: ExprId) -> Result<ExprSource, SyntheticSyntax> {\n-        self.expr_map_back[expr]\n+        self.expr_map_back[expr].clone()\n     }\n \n     pub fn node_expr(&self, node: InFile<&ast::Expr>) -> Option<ExprId> {\n@@ -255,7 +255,7 @@ impl BodySourceMap {\n     }\n \n     pub fn pat_syntax(&self, pat: PatId) -> Result<PatSource, SyntheticSyntax> {\n-        self.pat_map_back[pat]\n+        self.pat_map_back[pat].clone()\n     }\n \n     pub fn node_pat(&self, node: InFile<&ast::Pat>) -> Option<PatId> {\n@@ -264,6 +264,6 @@ impl BodySourceMap {\n     }\n \n     pub fn field_syntax(&self, expr: ExprId, field: usize) -> AstPtr<ast::RecordField> {\n-        self.field_map[&(expr, field)]\n+        self.field_map[&(expr, field)].clone()\n     }\n }"}, {"sha": "9d6ee095ef366e048e88bfecd76291bf2bd4d171", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=beb755caa2b1d7265da7d3367af3b49039dfe00e", "patch": "@@ -106,7 +106,7 @@ impl ExprCollector<'_> {\n     fn alloc_expr(&mut self, expr: Expr, ptr: AstPtr<ast::Expr>) -> ExprId {\n         let ptr = Either::Left(ptr);\n         let src = self.expander.to_source(ptr);\n-        let id = self.make_expr(expr, Ok(src));\n+        let id = self.make_expr(expr, Ok(src.clone()));\n         self.source_map.expr_map.insert(src, id);\n         id\n     }\n@@ -118,7 +118,7 @@ impl ExprCollector<'_> {\n     fn alloc_expr_field_shorthand(&mut self, expr: Expr, ptr: AstPtr<ast::RecordField>) -> ExprId {\n         let ptr = Either::Right(ptr);\n         let src = self.expander.to_source(ptr);\n-        let id = self.make_expr(expr, Ok(src));\n+        let id = self.make_expr(expr, Ok(src.clone()));\n         self.source_map.expr_map.insert(src, id);\n         id\n     }\n@@ -136,7 +136,7 @@ impl ExprCollector<'_> {\n \n     fn alloc_pat(&mut self, pat: Pat, ptr: PatPtr) -> PatId {\n         let src = self.expander.to_source(ptr);\n-        let id = self.make_pat(pat, Ok(src));\n+        let id = self.make_pat(pat, Ok(src.clone()));\n         self.source_map.pat_map.insert(src, id);\n         id\n     }"}, {"sha": "cfa0f2f76f4cd563c4ab754bc3059fe428e8d7ed", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=beb755caa2b1d7265da7d3367af3b49039dfe00e", "patch": "@@ -20,7 +20,7 @@ impl Diagnostic for UnresolvedModule {\n         \"unresolved module\".to_string()\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.decl.into() }\n+        InFile { file_id: self.file, value: self.decl.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self"}, {"sha": "a3ca302c2efa8feb195a32feb7108c900bef23e7", "filename": "crates/ra_hir_expand/src/ast_id_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs?ref=beb755caa2b1d7265da7d3367af3b49039dfe00e", "patch": "@@ -90,7 +90,7 @@ impl AstIdMap {\n     }\n \n     pub(crate) fn get<N: AstNode>(&self, id: FileAstId<N>) -> AstPtr<N> {\n-        self.arena[id.raw].cast::<N>().unwrap()\n+        self.arena[id.raw].clone().cast::<N>().unwrap()\n     }\n \n     fn alloc(&mut self, item: &SyntaxNode) -> ErasedFileAstId {"}, {"sha": "927896d6f7b83a090ef12dc4db88cf773713feea", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=beb755caa2b1d7265da7d3367af3b49039dfe00e", "patch": "@@ -21,7 +21,7 @@ impl Diagnostic for NoSuchField {\n     }\n \n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.field.into() }\n+        InFile { file_id: self.file, value: self.field.clone().into() }\n     }\n \n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n@@ -45,7 +45,7 @@ impl Diagnostic for MissingFields {\n         buf\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.field_list.into() }\n+        InFile { file_id: self.file, value: self.field_list.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n@@ -78,7 +78,7 @@ impl Diagnostic for MissingPatFields {\n         buf\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.field_list.into() }\n+        InFile { file_id: self.file, value: self.field_list.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n@@ -97,7 +97,7 @@ impl Diagnostic for MissingMatchArms {\n         String::from(\"Missing match arm\")\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.match_expr.into() }\n+        InFile { file_id: self.file, value: self.match_expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n@@ -115,7 +115,7 @@ impl Diagnostic for MissingOkInTailExpr {\n         \"wrap return expression in Ok\".to_string()\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.expr.into() }\n+        InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self"}, {"sha": "827b687de1760244632af65b44eaa246d31f7b69", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=beb755caa2b1d7265da7d3367af3b49039dfe00e", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         let (_, source_map) = db.body_with_source_map(self.func.into());\n \n         if let Ok(source_ptr) = source_map.expr_syntax(id) {\n-            if let Some(expr) = source_ptr.value.left() {\n+            if let Some(expr) = source_ptr.value.as_ref().left() {\n                 let root = source_ptr.file_syntax(db.upcast());\n                 if let ast::Expr::RecordLit(record_lit) = expr.to_node(&root) {\n                     if let Some(field_list) = record_lit.record_field_list() {\n@@ -120,7 +120,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         let (_, source_map) = db.body_with_source_map(self.func.into());\n \n         if let Ok(source_ptr) = source_map.pat_syntax(id) {\n-            if let Some(expr) = source_ptr.value.left() {\n+            if let Some(expr) = source_ptr.value.as_ref().left() {\n                 let root = source_ptr.file_syntax(db.upcast());\n                 if let ast::Pat::RecordPat(record_pat) = expr.to_node(&root) {\n                     if let Some(field_list) = record_pat.record_field_pat_list() {\n@@ -205,7 +205,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         }\n \n         if let Ok(source_ptr) = source_map.expr_syntax(id) {\n-            if let Some(expr) = source_ptr.value.left() {\n+            if let Some(expr) = source_ptr.value.as_ref().left() {\n                 let root = source_ptr.file_syntax(db.upcast());\n                 if let ast::Expr::MatchExpr(match_expr) = expr.to_node(&root) {\n                     if let (Some(match_expr), Some(arms)) ="}, {"sha": "54e31602fb16190fc7bb7d824a2e2120ee5f0e44", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=beb755caa2b1d7265da7d3367af3b49039dfe00e", "patch": "@@ -87,7 +87,7 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n                 }\n                 Err(SyntheticSyntax) => continue,\n             };\n-            types.push((syntax_ptr, ty));\n+            types.push((syntax_ptr.clone(), ty));\n             if let Some(mismatch) = inference_result.type_mismatch_for_expr(expr) {\n                 mismatches.push((syntax_ptr, mismatch));\n             }"}, {"sha": "bc48a2e71434b220c96417b58d12d306b0e6ac12", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb755caa2b1d7265da7d3367af3b49039dfe00e/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=beb755caa2b1d7265da7d3367af3b49039dfe00e", "patch": "@@ -10,7 +10,7 @@ use crate::{AstNode, SyntaxKind, SyntaxNode, TextRange};\n \n /// A pointer to a syntax node inside a file. It can be used to remember a\n /// specific node across reparses of the same file.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct SyntaxNodePtr {\n     pub(crate) range: TextRange,\n     kind: SyntaxKind,\n@@ -21,7 +21,7 @@ impl SyntaxNodePtr {\n         SyntaxNodePtr { range: node.text_range(), kind: node.kind() }\n     }\n \n-    pub fn to_node(self, root: &SyntaxNode) -> SyntaxNode {\n+    pub fn to_node(&self, root: &SyntaxNode) -> SyntaxNode {\n         assert!(root.parent().is_none());\n         successors(Some(root.clone()), |node| {\n             node.children().find(|it| self.range.is_subrange(&it.text_range()))\n@@ -30,11 +30,11 @@ impl SyntaxNodePtr {\n         .unwrap_or_else(|| panic!(\"can't resolve local ptr to SyntaxNode: {:?}\", self))\n     }\n \n-    pub fn range(self) -> TextRange {\n+    pub fn range(&self) -> TextRange {\n         self.range\n     }\n \n-    pub fn kind(self) -> SyntaxKind {\n+    pub fn kind(&self) -> SyntaxKind {\n         self.kind\n     }\n \n@@ -53,10 +53,9 @@ pub struct AstPtr<N: AstNode> {\n     _ty: PhantomData<fn() -> N>,\n }\n \n-impl<N: AstNode> Copy for AstPtr<N> {}\n impl<N: AstNode> Clone for AstPtr<N> {\n     fn clone(&self) -> AstPtr<N> {\n-        *self\n+        AstPtr { raw: self.raw.clone(), _ty: PhantomData }\n     }\n }\n \n@@ -79,13 +78,13 @@ impl<N: AstNode> AstPtr<N> {\n         AstPtr { raw: SyntaxNodePtr::new(node.syntax()), _ty: PhantomData }\n     }\n \n-    pub fn to_node(self, root: &SyntaxNode) -> N {\n+    pub fn to_node(&self, root: &SyntaxNode) -> N {\n         let syntax_node = self.raw.to_node(root);\n         N::cast(syntax_node).unwrap()\n     }\n \n-    pub fn syntax_node_ptr(self) -> SyntaxNodePtr {\n-        self.raw\n+    pub fn syntax_node_ptr(&self) -> SyntaxNodePtr {\n+        self.raw.clone()\n     }\n \n     pub fn cast<U: AstNode>(self) -> Option<AstPtr<U>> {"}]}