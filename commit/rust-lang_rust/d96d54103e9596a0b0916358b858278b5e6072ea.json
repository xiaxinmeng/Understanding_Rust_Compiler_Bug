{"sha": "d96d54103e9596a0b0916358b858278b5e6072ea", "node_id": "C_kwDOAAsO6NoAKGQ5NmQ1NDEwM2U5NTk2YTBiMDkxNjM1OGI4NTgyNzhiNWU2MDcyZWE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-07T14:16:35Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-07-07T14:16:35Z"}, "message": "Replace boolean argument for print_where_clause with an enum to make code more clear", "tree": {"sha": "68f747f83b0e38bce2299802a33c9f7d5b9d731d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68f747f83b0e38bce2299802a33c9f7d5b9d731d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d96d54103e9596a0b0916358b858278b5e6072ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d96d54103e9596a0b0916358b858278b5e6072ea", "html_url": "https://github.com/rust-lang/rust/commit/d96d54103e9596a0b0916358b858278b5e6072ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d96d54103e9596a0b0916358b858278b5e6072ea/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7", "html_url": "https://github.com/rust-lang/rust/commit/5b8cf49c51833ee5d27ae2e8e179337dbb9f14d7"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "84ab8d988bdb43303d595c587dac0bc86e8e1c24", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d96d54103e9596a0b0916358b858278b5e6072ea/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96d54103e9596a0b0916358b858278b5e6072ea/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=d96d54103e9596a0b0916358b858278b5e6072ea", "patch": "@@ -268,14 +268,20 @@ impl clean::Generics {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq)]\n+pub(crate) enum Ending {\n+    Newline,\n+    NoNewline,\n+}\n+\n /// * The Generics from which to emit a where-clause.\n /// * The number of spaces to indent each line with.\n /// * Whether the where-clause needs to add a comma and newline after the last bound.\n pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n     gens: &'a clean::Generics,\n     cx: &'a Context<'tcx>,\n     indent: usize,\n-    end_newline: bool,\n+    ending: Ending,\n ) -> impl fmt::Display + 'a + Captures<'tcx> {\n     use fmt::Write;\n \n@@ -342,7 +348,7 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n \n         let where_preds = comma_sep(where_predicates, false);\n         let clause = if f.alternate() {\n-            if end_newline {\n+            if ending == Ending::Newline {\n                 // add a space so stripping <br> tags and breaking spaces still renders properly\n                 format!(\" where{where_preds}, \")\n             } else {\n@@ -356,7 +362,7 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n             }\n             let where_preds = where_preds.to_string().replace(\"<br>\", &br_with_padding);\n \n-            if end_newline {\n+            if ending == Ending::Newline {\n                 let mut clause = \"&nbsp;\".repeat(indent.saturating_sub(1));\n                 // add a space so stripping <br> tags and breaking spaces still renders properly\n                 write!(\n@@ -1167,7 +1173,7 @@ impl clean::Impl {\n                 fmt_type(&self.for_, f, use_absolute, cx)?;\n             }\n \n-            fmt::Display::fmt(&print_where_clause(&self.generics, cx, 0, true), f)?;\n+            fmt::Display::fmt(&print_where_clause(&self.generics, cx, 0, Ending::Newline), f)?;\n             Ok(())\n         })\n     }"}, {"sha": "3828b671e3b5f88a6c694993ac56caf8574d1127", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d96d54103e9596a0b0916358b858278b5e6072ea/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96d54103e9596a0b0916358b858278b5e6072ea/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=d96d54103e9596a0b0916358b858278b5e6072ea", "patch": "@@ -70,7 +70,7 @@ use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{\n     href, join_with_double_colon, print_abi_with_space, print_constness_with_space,\n-    print_default_space, print_generic_bounds, print_where_clause, Buffer, HrefError,\n+    print_default_space, print_generic_bounds, print_where_clause, Buffer, Ending, HrefError,\n     PrintWithSpace,\n };\n use crate::html::highlight;\n@@ -748,7 +748,7 @@ fn assoc_type(\n     if !bounds.is_empty() {\n         write!(w, \": {}\", print_generic_bounds(bounds, cx))\n     }\n-    write!(w, \"{}\", print_where_clause(generics, cx, indent, false));\n+    write!(w, \"{}\", print_where_clause(generics, cx, indent, Ending::NoNewline));\n     if let Some(default) = default {\n         write!(w, \" = {}\", default.print(cx))\n     }\n@@ -797,10 +797,10 @@ fn assoc_method(\n         header_len += 4;\n         let indent_str = \"    \";\n         render_attributes_in_pre(w, meth, indent_str);\n-        (4, indent_str, false)\n+        (4, indent_str, Ending::NoNewline)\n     } else {\n         render_attributes_in_code(w, meth);\n-        (0, \"\", true)\n+        (0, \"\", Ending::Newline)\n     };\n     w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fnname\\\">{\".len() + \"</a>\".len());\n     write!("}, {"sha": "421765e78603f8595f0aba913f47b6c6e087d879", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d96d54103e9596a0b0916358b858278b5e6072ea/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96d54103e9596a0b0916358b858278b5e6072ea/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=d96d54103e9596a0b0916358b858278b5e6072ea", "patch": "@@ -29,7 +29,7 @@ use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{\n     join_with_double_colon, print_abi_with_space, print_constness_with_space, print_where_clause,\n-    Buffer, PrintWithSpace,\n+    Buffer, Ending, PrintWithSpace,\n };\n use crate::html::highlight;\n use crate::html::layout::Page;\n@@ -69,7 +69,7 @@ fn print_where_clause_and_check<'a, 'tcx: 'a>(\n     cx: &'a Context<'tcx>,\n ) -> bool {\n     let len_before = buffer.len();\n-    write!(buffer, \"{}\", print_where_clause(gens, cx, 0, true));\n+    write!(buffer, \"{}\", print_where_clause(gens, cx, 0, Ending::Newline));\n     len_before != buffer.len()\n }\n \n@@ -519,7 +519,7 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n                 abi = abi,\n                 name = name,\n                 generics = f.generics.print(cx),\n-                where_clause = print_where_clause(&f.generics, cx, 0, true),\n+                where_clause = print_where_clause(&f.generics, cx, 0, Ending::Newline),\n                 decl = f.decl.full_print(header_len, 0, header.asyncness, cx),\n                 notable_traits = notable_traits_decl(&f.decl, cx),\n             );\n@@ -556,7 +556,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n             );\n \n             if !t.generics.where_predicates.is_empty() {\n-                write!(w, \"{}\", print_where_clause(&t.generics, cx, 0, true));\n+                write!(w, \"{}\", print_where_clause(&t.generics, cx, 0, Ending::Newline));\n             } else {\n                 w.write_str(\" \");\n             }\n@@ -1026,7 +1026,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &\n                 \"trait {}{}{} = {};\",\n                 it.name.unwrap(),\n                 t.generics.print(cx),\n-                print_where_clause(&t.generics, cx, 0, true),\n+                print_where_clause(&t.generics, cx, 0, Ending::Newline),\n                 bounds(&t.bounds, true, cx)\n             );\n         });\n@@ -1050,7 +1050,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &cl\n                 \"type {}{}{where_clause} = impl {bounds};\",\n                 it.name.unwrap(),\n                 t.generics.print(cx),\n-                where_clause = print_where_clause(&t.generics, cx, 0, true),\n+                where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n                 bounds = bounds(&t.bounds, false, cx),\n             );\n         });\n@@ -1075,7 +1075,7 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n                 \"type {}{}{where_clause} = {type_};\",\n                 it.name.unwrap(),\n                 t.generics.print(cx),\n-                where_clause = print_where_clause(&t.generics, cx, 0, true),\n+                where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n                 type_ = t.type_.print(cx),\n             );\n         });\n@@ -1786,7 +1786,7 @@ fn render_struct(\n             }\n             w.write_str(\")\");\n             if let Some(g) = g {\n-                write!(w, \"{}\", print_where_clause(g, cx, 0, false));\n+                write!(w, \"{}\", print_where_clause(g, cx, 0, Ending::NoNewline));\n             }\n             // We only want a \";\" when we are displaying a tuple struct, not a variant tuple struct.\n             if structhead {\n@@ -1796,7 +1796,7 @@ fn render_struct(\n         CtorKind::Const => {\n             // Needed for PhantomData.\n             if let Some(g) = g {\n-                write!(w, \"{}\", print_where_clause(g, cx, 0, false));\n+                write!(w, \"{}\", print_where_clause(g, cx, 0, Ending::NoNewline));\n             }\n             w.write_str(\";\");\n         }"}]}