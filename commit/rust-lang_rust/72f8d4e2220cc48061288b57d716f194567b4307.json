{"sha": "72f8d4e2220cc48061288b57d716f194567b4307", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZjhkNGUyMjIwY2M0ODA2MTI4OGI1N2Q3MTZmMTk0NTY3YjQzMDc=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-20T15:06:09Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-20T15:06:09Z"}, "message": "Add no_hash to query macro and move some queries over", "tree": {"sha": "38f878a2922f4563d004158d4eeff160c353fa1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38f878a2922f4563d004158d4eeff160c353fa1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72f8d4e2220cc48061288b57d716f194567b4307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72f8d4e2220cc48061288b57d716f194567b4307", "html_url": "https://github.com/rust-lang/rust/commit/72f8d4e2220cc48061288b57d716f194567b4307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72f8d4e2220cc48061288b57d716f194567b4307/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c8700b9d50a1e3d31f7b6c0956df555279ac441", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8700b9d50a1e3d31f7b6c0956df555279ac441", "html_url": "https://github.com/rust-lang/rust/commit/0c8700b9d50a1e3d31f7b6c0956df555279ac441"}], "stats": {"total": 476, "additions": 241, "deletions": 235}, "files": [{"sha": "12fbd2f69f13ce35a63d527ce878a6d24d8dc4bc", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -2811,6 +2811,7 @@ dependencies = [\n name = \"rustc_macros\"\n version = \"0.1.0\"\n dependencies = [\n+ \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc-macro2 0.4.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 0.15.22 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "ab9c9b247189abd475c5e0c1eadeada1ba21b126", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -461,11 +461,6 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n \n     // Represents the MIR for a fn; also used as the task node for\n     // things read/modify that MIR.\n-    [] MirConstQualif(DefId),\n-    [] MirBuilt(DefId),\n-    [] MirConst(DefId),\n-    [] MirValidated(DefId),\n-    [] MirOptimized(DefId),\n     [] MirShim { instance_def: InstanceDef<'tcx> },\n \n     [] BorrowCheckKrate,\n@@ -485,7 +480,6 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] CollectModItemTypes(DefId),\n \n     [] Reachability,\n-    [] MirKeys,\n     [eval_always] CrateVariances,\n \n     // Nodes representing bits of computed IR in the tcx. Each shared"}, {"sha": "b99bffd3bd3baa2f3208d855411c756f8aee6e71", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -63,4 +63,47 @@ rustc_queries! {\n             desc { \"checking if the crate is_panic_runtime\" }\n         }\n     }\n+\n+    Codegen {\n+        /// Set of all the `DefId`s in this crate that have MIR associated with\n+        /// them. This includes all the body owners, but also things like struct\n+        /// constructors.\n+        query mir_keys(_: CrateNum) -> Lrc<DefIdSet> {\n+            desc { \"getting a list of all mir_keys\" }\n+        }\n+\n+        /// Maps DefId's that have an associated Mir to the result\n+        /// of the MIR qualify_consts pass. The actual meaning of\n+        /// the value isn't known except to the pass itself.\n+        query mir_const_qualif(key: DefId) -> (u8, Lrc<BitSet<mir::Local>>) {\n+            cache { key.is_local() }\n+        }\n+\n+        /// Fetch the MIR for a given `DefId` right after it's built - this includes\n+        /// unreachable code.\n+        query mir_built(_: DefId) -> &'tcx Steal<mir::Mir<'tcx>> {}\n+\n+        /// Fetch the MIR for a given `DefId` up till the point where it is\n+        /// ready for const evaluation.\n+        ///\n+        /// See the README for the `mir` module for details.\n+        query mir_const(_: DefId) -> &'tcx Steal<mir::Mir<'tcx>> {\n+            no_hash\n+        }\n+\n+        query mir_validated(_: DefId) -> &'tcx Steal<mir::Mir<'tcx>> {\n+            no_hash\n+        }\n+\n+        /// MIR after our optimization passes have run. This is MIR that is ready\n+        /// for codegen. This is also the only query that can fetch non-local MIR, at present.\n+        query optimized_mir(key: DefId) -> &'tcx mir::Mir<'tcx> {\n+            cache { key.is_local() }\n+            load_cached(tcx, id) {\n+                let mir: Option<crate::mir::Mir<'tcx>> = tcx.queries.on_disk_cache\n+                                                            .try_load_query_result(tcx, id);\n+                mir.map(|x| tcx.alloc_mir(x))\n+            }\n+        }\n+    }\n }"}, {"sha": "4e07f400f82d2c4aacc646a2c700b97662f99885", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -431,12 +431,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::const_eval_raw<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::mir_keys<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n-        \"getting a list of all mir_keys\".into()\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::symbol_name<'tcx> {\n     fn describe(_tcx: TyCtxt<'_, '_, '_>, instance: ty::Instance<'tcx>) -> Cow<'static, str> {\n         format!(\"computing the symbol for `{}`\", instance).into()\n@@ -898,21 +892,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::typeck_tables_of<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::optimized_mir<'tcx> {\n-    #[inline]\n-    fn cache_on_disk(_: TyCtxt<'_, 'tcx, 'tcx>, def_id: Self::Key) -> bool {\n-        def_id.is_local()\n-    }\n-\n-    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                              id: SerializedDepNodeIndex)\n-                              -> Option<Self::Value> {\n-        let mir: Option<crate::mir::Mir<'tcx>> = tcx.queries.on_disk_cache\n-                                               .try_load_query_result(tcx, id);\n-        mir.map(|x| tcx.alloc_mir(x))\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::substitute_normalize_and_test_predicates<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, key: (DefId, SubstsRef<'tcx>)) -> Cow<'static, str> {\n         format!(\"testing substituted normalized predicates:`{}`\", tcx.def_path_str(key.0)).into()\n@@ -997,7 +976,6 @@ impl_disk_cacheable_query!(mir_borrowck, |tcx, def_id| {\n \n impl_disk_cacheable_query!(unsafety_check_result, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(borrowck, |_, def_id| def_id.is_local());\n-impl_disk_cacheable_query!(mir_const_qualif, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(check_match, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(def_symbol_name, |_, _| true);\n impl_disk_cacheable_query!(predicates_of, |_, def_id| def_id.is_local());"}, {"sha": "1038401244f2cd52b7e5f2c40ee4b1b518624022", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -205,34 +205,6 @@ rustc_query_append! { [define_queries!][ <'tcx>\n         [] fn inherent_impls: InherentImpls(DefId) -> Lrc<Vec<DefId>>,\n     },\n \n-    Codegen {\n-        /// Set of all the `DefId`s in this crate that have MIR associated with\n-        /// them. This includes all the body owners, but also things like struct\n-        /// constructors.\n-        [] fn mir_keys: mir_keys(CrateNum) -> Lrc<DefIdSet>,\n-\n-        /// Maps DefId's that have an associated Mir to the result\n-        /// of the MIR qualify_consts pass. The actual meaning of\n-        /// the value isn't known except to the pass itself.\n-        [] fn mir_const_qualif: MirConstQualif(DefId) -> (u8, Lrc<BitSet<mir::Local>>),\n-\n-        /// Fetch the MIR for a given `DefId` right after it's built - this includes\n-        /// unreachable code.\n-        [] fn mir_built: MirBuilt(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n-\n-        /// Fetch the MIR for a given `DefId` up till the point where it is\n-        /// ready for const evaluation.\n-        ///\n-        /// See the README for the `mir` module for details.\n-        [no_hash] fn mir_const: MirConst(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n-\n-        [no_hash] fn mir_validated: MirValidated(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n-\n-        /// MIR after our optimization passes have run. This is MIR that is ready\n-        /// for codegen. This is also the only query that can fetch non-local MIR, at present.\n-        [] fn optimized_mir: MirOptimized(DefId) -> &'tcx mir::Mir<'tcx>,\n-    },\n-\n     TypeChecking {\n         /// The result of unsafety-checking this `DefId`.\n         [] fn unsafety_check_result: UnsafetyCheckResult(DefId) -> mir::UnsafetyCheckResult,\n@@ -796,10 +768,6 @@ fn const_eval_raw_dep_node<'tcx>(param_env: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>\n     DepConstructor::ConstEvalRaw { param_env }\n }\n \n-fn mir_keys<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n-    DepConstructor::MirKeys\n-}\n-\n fn crate_variances<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::CrateVariances\n }"}, {"sha": "9b4341e63552fbedacdfcbe6264c213a4ea114dc", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -1262,11 +1262,6 @@ pub fn force_from_dep_node<'tcx>(\n         },\n         DepKind::PrivacyAccessLevels => { force!(privacy_access_levels, LOCAL_CRATE); }\n         DepKind::CheckPrivateInPublic => { force!(check_private_in_public, LOCAL_CRATE); }\n-        DepKind::MirBuilt => { force!(mir_built, def_id!()); }\n-        DepKind::MirConstQualif => { force!(mir_const_qualif, def_id!()); }\n-        DepKind::MirConst => { force!(mir_const, def_id!()); }\n-        DepKind::MirValidated => { force!(mir_validated, def_id!()); }\n-        DepKind::MirOptimized => { force!(optimized_mir, def_id!()); }\n \n         DepKind::BorrowCheck => { force!(borrowck, def_id!()); }\n         DepKind::MirBorrowCheck => { force!(mir_borrowck, def_id!()); }\n@@ -1282,7 +1277,6 @@ pub fn force_from_dep_node<'tcx>(\n         DepKind::CheckModImplWf => { force!(check_mod_impl_wf, def_id!()); }\n         DepKind::CollectModItemTypes => { force!(collect_mod_item_types, def_id!()); }\n         DepKind::Reachability => { force!(reachable_set, LOCAL_CRATE); }\n-        DepKind::MirKeys => { force!(mir_keys, LOCAL_CRATE); }\n         DepKind::CrateVariances => { force!(crate_variances, LOCAL_CRATE); }\n         DepKind::AssociatedItems => { force!(associated_item, def_id!()); }\n         DepKind::PredicatesDefinedOnItem => { force!(predicates_defined_on, def_id!()); }\n@@ -1491,11 +1485,11 @@ macro_rules! impl_load_from_cache {\n \n impl_load_from_cache!(\n     TypeckTables => typeck_tables_of,\n-    MirOptimized => optimized_mir,\n+    optimized_mir => optimized_mir,\n     UnsafetyCheckResult => unsafety_check_result,\n     BorrowCheck => borrowck,\n     MirBorrowCheck => mir_borrowck,\n-    MirConstQualif => mir_const_qualif,\n+    mir_const_qualif => mir_const_qualif,\n     SymbolName => def_symbol_name,\n     ConstIsRvaluePromotableToStatic => const_is_rvalue_promotable_to_static,\n     CheckMatch => check_match,"}, {"sha": "ac76ed8cb93cfac9f6bb517c3344f46bacdd0846", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -66,11 +66,11 @@ const BASE_IMPL: &[&str] = &[\n     label_strs::ImplTraitRef,\n ];\n \n-/// DepNodes for MirBuilt/Optimized, which is relevant in \"executable\"\n+/// DepNodes for mir_built/Optimized, which is relevant in \"executable\"\n /// code, i.e., functions+methods\n const BASE_MIR: &[&str] = &[\n-    label_strs::MirOptimized,\n-    label_strs::MirBuilt,\n+    label_strs::optimized_mir,\n+    label_strs::mir_built,\n ];\n \n /// Struct, Enum and Union DepNodes"}, {"sha": "6e32a53c364a6502eb20fda0763111a78f7d63ef", "filename": "src/librustc_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2FCargo.toml?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -12,3 +12,4 @@ synstructure = \"0.10.1\"\n syn = { version = \"0.15.22\", features = [\"full\"] }\n proc-macro2 = \"0.4.24\"\n quote = \"0.6.10\"\n+itertools = \"0.8\""}, {"sha": "c7d164d3297884c9690bc3009cb77d224f464709", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -8,6 +8,7 @@ use syn::parse::{Result, Parse, ParseStream};\n use syn::punctuated::Punctuated;\n use syn;\n use quote::quote;\n+use itertools::Itertools;\n \n #[allow(non_camel_case_types)]\n mod kw {\n@@ -41,6 +42,9 @@ enum QueryModifier {\n \n     /// A cycle error for this query aborting the compilation with a fatal error.\n     FatalCycle,\n+\n+    /// Don't hash the result, instead just mark a query red if it runs\n+    NoHash,\n }\n \n impl Parse for QueryModifier {\n@@ -88,6 +92,8 @@ impl Parse for QueryModifier {\n             Ok(QueryModifier::LoadCached(tcx, id, block))\n         } else if modifier == \"fatal_cycle\" {\n             Ok(QueryModifier::FatalCycle)\n+        } else if modifier == \"no_hash\" {\n+            Ok(QueryModifier::NoHash)\n         } else {\n             Err(Error::new(modifier.span(), \"unknown query modifier\"))\n         }\n@@ -185,6 +191,9 @@ struct QueryModifiers {\n \n     /// A cycle error for this query aborting the compilation with a fatal error.\n     fatal_cycle: bool,\n+\n+    /// Don't hash the result, instead just mark a query red if it runs\n+    no_hash: bool,\n }\n \n /// Process query modifiers into a struct, erroring on duplicates\n@@ -193,6 +202,7 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n     let mut cache = None;\n     let mut desc = None;\n     let mut fatal_cycle = false;\n+    let mut no_hash = false;\n     for modifier in query.modifiers.0.drain(..) {\n         match modifier {\n             QueryModifier::LoadCached(tcx, id, block) => {\n@@ -219,13 +229,20 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n                 }\n                 fatal_cycle = true;\n             }\n+            QueryModifier::NoHash => {\n+                if no_hash {\n+                    panic!(\"duplicate modifier `no_hash` for query `{}`\", query.name);\n+                }\n+                no_hash = true;\n+            }\n         }\n     }\n     QueryModifiers {\n         load_cached,\n         cache,\n         desc,\n         fatal_cycle,\n+        no_hash,\n     }\n }\n \n@@ -325,16 +342,26 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n                 _ => quote! { #result_full },\n             };\n \n+            let mut attributes = Vec::new();\n+\n             // Pass on the fatal_cycle modifier\n-            let fatal_cycle = if modifiers.fatal_cycle {\n-                quote! { fatal_cycle }\n-            } else {\n-                quote! {}\n+            if modifiers.fatal_cycle {\n+                attributes.push(quote! { fatal_cycle });\n+            };\n+            // Pass on the no_hash modifier\n+            if modifiers.no_hash {\n+                attributes.push(quote! { no_hash });\n             };\n \n+            let mut attribute_stream = quote! {};\n+            \n+            for e in attributes.into_iter().intersperse(quote! {,}) {\n+                attribute_stream.extend(e);\n+            }\n+\n             // Add the query to the group\n             group_stream.extend(quote! {\n-                [#fatal_cycle] fn #name: #name(#arg) #result,\n+                [#attribute_stream] fn #name: #name(#arg) #result,\n             });\n \n             add_query_description_impl(&query, modifiers, &mut query_description_stream);"}, {"sha": "05cc945bbaf0098175fe0d03b29be69126b46acc", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -25,7 +25,7 @@ pub fn change_callee_function() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_callee_function() {\n     callee2(1, 2)\n@@ -40,7 +40,7 @@ pub fn change_argument_function() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_function() {\n     callee1(1, 3)\n@@ -81,7 +81,7 @@ pub fn change_callee_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_callee_method() {\n     let s = Struct;\n@@ -98,7 +98,7 @@ pub fn change_argument_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_method() {\n     let s = Struct;\n@@ -115,7 +115,7 @@ pub fn change_ufcs_callee_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_ufcs_callee_method() {\n     let s = Struct;\n@@ -132,7 +132,7 @@ pub fn change_argument_method_ufcs() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_method_ufcs() {\n     let s = Struct;\n@@ -149,7 +149,7 @@ pub fn change_to_ufcs() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n // One might think this would be expanded in the HirBody/Mir, but it actually\n // results in slightly different Hir/Mir.\n@@ -171,7 +171,7 @@ pub mod change_ufcs_callee_indirectly {\n     #[cfg(not(cfail1))]\n     use super::Struct2 as Struct;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n \n "}, {"sha": "b8e84173ec06ce03da0ea4b7831c3d77990bb74d", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -37,7 +37,7 @@ pub fn add_parameter() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_parameter() {\n     let x = 0u32;\n@@ -53,7 +53,7 @@ pub fn change_parameter_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_parameter_pattern() {\n     let _ = |&x: &u32| x;\n@@ -84,7 +84,7 @@ pub fn add_type_ascription_to_parameter() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_type_ascription_to_parameter() {\n     let closure = |x: u32| x + 1u32;\n@@ -101,7 +101,7 @@ pub fn change_parameter_type() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_parameter_type() {\n     let closure = |x: u16| (x as u64) + 1;"}, {"sha": "d3f96c9947b89379aa58625e614c3daf8212a820", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -34,7 +34,7 @@ pub fn change_field_value_struct_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_struct_like() -> Enum {\n     Enum::Struct {\n@@ -96,7 +96,7 @@ pub fn change_constructor_path_struct_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_struct_like() {\n     let _ = Enum2::Struct {\n@@ -119,7 +119,7 @@ pub fn change_constructor_variant_struct_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_struct_like() {\n     let _ = Enum2::Struct2 {\n@@ -139,7 +139,7 @@ pub mod change_constructor_path_indirectly_struct_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"FnSignature,Hir,HirBody,MirOptimized,MirBuilt,\\\n+        except=\"FnSignature,Hir,HirBody,optimized_mir,mir_built,\\\n                 TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -161,7 +161,7 @@ pub mod change_constructor_variant_indirectly_struct_like {\n     #[cfg(not(cfail1))]\n     use super::Enum2::Struct2 as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Enum2 {\n         Variant {\n@@ -180,7 +180,7 @@ pub fn change_field_value_tuple_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_tuple_like() -> Enum {\n     Enum::Tuple(0, 1, 3)\n@@ -197,7 +197,7 @@ pub fn change_constructor_path_tuple_like() {\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg=\"cfail2\",\n-    except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\"\n+    except=\"HirBody,optimized_mir,mir_built,TypeckTables\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_tuple_like() {\n@@ -215,7 +215,7 @@ pub fn change_constructor_variant_tuple_like() {\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg=\"cfail2\",\n-    except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\"\n+    except=\"HirBody,optimized_mir,mir_built,TypeckTables\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_tuple_like() {\n@@ -232,7 +232,7 @@ pub mod change_constructor_path_indirectly_tuple_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"FnSignature,Hir,HirBody,MirOptimized,MirBuilt,\\\n+        except=\"FnSignature,Hir,HirBody,optimized_mir,mir_built,\\\n                 TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -251,7 +251,7 @@ pub mod change_constructor_variant_indirectly_tuple_like {\n     #[cfg(not(cfail1))]\n     use super::Enum2::Tuple2 as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Enum2 {\n         Variant(0, 1, 2)\n@@ -278,7 +278,7 @@ pub fn change_constructor_path_c_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_c_like() {\n     let _ = Clike2::B;\n@@ -293,7 +293,7 @@ pub fn change_constructor_variant_c_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_c_like() {\n     let _ = Clike::C;\n@@ -309,7 +309,7 @@ pub mod change_constructor_path_indirectly_c_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"FnSignature,Hir,HirBody,MirOptimized,MirBuilt,\\\n+        except=\"FnSignature,Hir,HirBody,optimized_mir,mir_built,\\\n                 TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -328,7 +328,7 @@ pub mod change_constructor_variant_indirectly_c_like {\n     #[cfg(not(cfail1))]\n     use super::Clike::B as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Clike {\n         Variant"}, {"sha": "dc919abc02d44311bf190811f1fd5242f18b1dc4", "filename": "src/test/incremental/hashes/exported_vs_not.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -16,7 +16,7 @@ pub fn body_not_exported_to_metadata() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn body_not_exported_to_metadata() -> u32 {\n     2\n@@ -35,7 +35,7 @@ pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[inline]\n pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n@@ -55,7 +55,7 @@ pub fn body_exported_to_metadata_because_of_generic() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[inline]\n pub fn body_exported_to_metadata_because_of_generic() -> u32 {"}, {"sha": "91abca3312bc27ad6381c66d8a022415840d0f47", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_iteration_variable_name() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iteration_variable_name() {\n     let mut _x = 0;\n@@ -71,7 +71,7 @@ pub fn change_iteration_variable_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iteration_variable_pattern() {\n     let mut _x = 0;\n@@ -94,7 +94,7 @@ pub fn change_iterable() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iterable() {\n     let mut _x = 0;\n@@ -116,7 +116,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -187,7 +187,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -237,7 +237,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -262,7 +262,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "db8fa9ced113ce05c0bd669275d30a126b1f3309", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -24,7 +24,7 @@ pub fn add_parameter() {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, MirBuilt, MirOptimized, TypeckTables, FnSignature\")]\n+              except = \"Hir, HirBody, mir_built, optimized_mir, TypeckTables, FnSignature\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn add_parameter(p: i32) {}\n \n@@ -47,7 +47,7 @@ pub fn type_of_parameter(p: i32) {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, MirBuilt, MirOptimized, TypeckTables, FnSignature\")]\n+              except = \"Hir, HirBody, mir_built, optimized_mir, TypeckTables, FnSignature\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_of_parameter(p: i64) {}\n \n@@ -59,7 +59,7 @@ pub fn type_of_parameter_ref(p: &i32) {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, MirBuilt, MirOptimized, TypeckTables, FnSignature\")]\n+              except = \"Hir, HirBody, mir_built, optimized_mir, TypeckTables, FnSignature\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_of_parameter_ref(p: &mut i32) {}\n \n@@ -71,7 +71,7 @@ pub fn order_of_parameters(p1: i32, p2: i64) {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, MirBuilt, MirOptimized, TypeckTables, FnSignature\")]\n+              except = \"Hir, HirBody, mir_built, optimized_mir, TypeckTables, FnSignature\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn order_of_parameters(p2: i64, p1: i32) {}\n \n@@ -83,7 +83,7 @@ pub fn make_unsafe() {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, MirBuilt, MirOptimized, TypeckTables, FnSignature\")]\n+              except = \"Hir, HirBody, mir_built, optimized_mir, TypeckTables, FnSignature\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub unsafe fn make_unsafe() {}\n \n@@ -94,7 +94,7 @@ pub unsafe fn make_unsafe() {}\n pub fn make_extern() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, MirBuilt, TypeckTables, FnSignature\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, mir_built, TypeckTables, FnSignature\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub extern \"C\" fn make_extern() {}\n \n@@ -292,7 +292,7 @@ pub mod change_return_type_indirectly {\n     use super::ReferencedType2 as ReturnType;\n \n     #[rustc_clean(cfg = \"cfail2\",\n-                  except = \"Hir, HirBody, MirBuilt, MirOptimized, TypeckTables, FnSignature\")]\n+                  except = \"Hir, HirBody, mir_built, optimized_mir, TypeckTables, FnSignature\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_return_type() -> ReturnType {\n         ReturnType {}\n@@ -309,7 +309,7 @@ pub mod change_parameter_type_indirectly {\n     use super::ReferencedType2 as ParameterType;\n \n     #[rustc_clean(cfg = \"cfail2\",\n-                  except = \"Hir, HirBody, MirBuilt, MirOptimized, TypeckTables, FnSignature\")]\n+                  except = \"Hir, HirBody, mir_built, optimized_mir, TypeckTables, FnSignature\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_parameter_type(p: ParameterType) {}\n }"}, {"sha": "32a0c8b6b7e797d2a3ae1050e864cc52ba250457", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -25,7 +25,7 @@ pub fn change_condition(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_condition(x: bool) -> u32 {\n     if !x {\n@@ -46,7 +46,7 @@ pub fn change_then_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_then_branch(x: bool) -> u32 {\n     if x {\n@@ -69,7 +69,7 @@ pub fn change_else_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_else_branch(x: bool) -> u32 {\n     if x {\n@@ -120,7 +120,7 @@ pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n     if let Some(_) = x {\n@@ -143,7 +143,7 @@ pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n@@ -166,7 +166,7 @@ pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {"}, {"sha": "1b6b41ce05b789baeac7750a7e0083b8dab71445", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -42,7 +42,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_body() {\n         println!(\"Hello, world!\");\n@@ -63,7 +63,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[inline]\n     pub fn method_body_inlined() {\n@@ -114,7 +114,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirBuilt\"\n+        except=\"Hir,HirBody,FnSignature,TypeckTables,optimized_mir,mir_built\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_selfmutness(&mut self) { }\n@@ -154,7 +154,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirBuilt\"\n+        except=\"Hir,HirBody,FnSignature,TypeckTables,optimized_mir,mir_built\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_method_parameter(&self, _: i32) { }\n@@ -172,7 +172,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_name(&self, b: i64) { }\n }\n@@ -191,7 +191,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,FnSignature,MirOptimized,MirBuilt,TypeckTables\")]\n+        except=\"Hir,HirBody,FnSignature,optimized_mir,mir_built,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_return_type(&self) -> u8 { 0 }\n }\n@@ -226,7 +226,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_order(&self, b: i64, a: i64) { }\n }\n@@ -245,7 +245,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirBuilt\"\n+        except=\"Hir,HirBody,FnSignature,TypeckTables,optimized_mir,mir_built\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub unsafe fn make_method_unsafe(&self) { }\n@@ -263,7 +263,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,MirBuilt,FnSignature,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,mir_built,FnSignature,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub extern fn make_method_extern(&self) { }\n }\n@@ -447,7 +447,7 @@ impl Bar<u32> {\n impl<T> Bar<T> {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"generics_of,FnSignature,TypeckTables,type_of,MirOptimized,MirBuilt\"\n+        except=\"generics_of,FnSignature,TypeckTables,type_of,optimized_mir,mir_built\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_impl(&self) { }\n@@ -465,7 +465,7 @@ impl Bar<u32> {\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Bar<u64> {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"FnSignature,MirOptimized,MirBuilt,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"FnSignature,optimized_mir,mir_built,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_impl_self_type(&self) { }\n }"}, {"sha": "53e77a370a334ab99c5d78122c3cf1dd01037e16", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -33,7 +33,7 @@ pub fn change_template(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_template(a: i32) -> i32 {\n@@ -69,7 +69,7 @@ pub fn change_output(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_output(a: i32) -> i32 {\n@@ -105,7 +105,7 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n@@ -140,7 +140,7 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n@@ -175,7 +175,7 @@ pub fn change_clobber(_a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_clobber(_a: i32) -> i32 {\n@@ -210,7 +210,7 @@ pub fn change_options(_a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_options(_a: i32) -> i32 {"}, {"sha": "76be2ccbf608c8db23f49f175f47a41abf5e0d99", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -22,7 +22,7 @@ pub fn change_name() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name() {\n     let _y = 2u64;\n@@ -38,7 +38,7 @@ pub fn add_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_type() {\n     let _x: u32 = 2u32;\n@@ -54,7 +54,7 @@ pub fn change_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_type() {\n     let _x: u8 = 2;\n@@ -70,7 +70,7 @@ pub fn change_mutability_of_reference_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_reference_type() {\n     let _x: &mut u64;\n@@ -86,7 +86,7 @@ pub fn change_mutability_of_slot() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_slot() {\n     let _x: u64 = 0;\n@@ -102,7 +102,7 @@ pub fn change_simple_binding_to_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_simple_binding_to_pattern() {\n     let (_a, _b) = (0u8, 'x');\n@@ -118,7 +118,7 @@ pub fn change_name_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_in_pattern() {\n     let (_a, _c) = (1u8, 'y');\n@@ -134,7 +134,7 @@ pub fn add_ref_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_ref_in_pattern() {\n     let (ref _a, _b) = (1u8, 'y');\n@@ -150,7 +150,7 @@ pub fn add_amp_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_amp_in_pattern() {\n     let (&_a, _b) = (&1u8, 'y');\n@@ -166,7 +166,7 @@ pub fn change_mutability_of_binding_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_binding_in_pattern() {\n     let (mut _a, _b) = (99u8, 'q');\n@@ -182,7 +182,7 @@ pub fn add_initializer() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,TypeckTables,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_initializer() {\n     let _x: i16 = 3i16;\n@@ -198,7 +198,7 @@ pub fn change_initializer() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_initializer() {\n     let _x = 5u16;"}, {"sha": "63cf1e9d5e826819e30416c9cf31e4485e5bc571", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -47,7 +47,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -118,7 +118,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -168,7 +168,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -193,7 +193,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "37f6aa9ee9bdc86d328e2acc020ef9b5fdd1496e", "filename": "src/test/incremental/hashes/match_expressions.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -26,7 +26,7 @@ pub fn add_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_arm(x: u32) -> u32 {\n     match x {\n@@ -51,7 +51,7 @@ pub fn change_order_of_arms(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_order_of_arms(x: u32) -> u32 {\n     match x {\n@@ -75,7 +75,7 @@ pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n@@ -99,7 +99,7 @@ pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n@@ -123,7 +123,7 @@ pub fn add_at_binding(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_at_binding(x: u32) -> u32 {\n     match x {\n@@ -147,7 +147,7 @@ pub fn change_name_of_at_binding(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_of_at_binding(x: u32) -> u32 {\n     match x {\n@@ -170,7 +170,7 @@ pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -193,7 +193,7 @@ pub fn change_name_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -216,7 +216,7 @@ pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -238,7 +238,7 @@ pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -260,7 +260,7 @@ pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n     match (&x, x & 1) {\n@@ -283,7 +283,7 @@ pub fn change_rhs_of_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized\")]\n+    except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_rhs_of_arm(x: u32) -> u32 {\n     match x {\n@@ -307,7 +307,7 @@ pub fn add_alternative_to_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,MirBuilt,MirOptimized,TypeckTables\")]\n+    except=\"HirBody,mir_built,optimized_mir,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_alternative_to_arm(x: u32) -> u32 {\n     match x {"}, {"sha": "0803f4e01d63b1775f5e37f01dfb0462876b5d5c", "filename": "src/test/incremental/hashes/panic_exprs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -18,7 +18,7 @@\n \n \n // Indexing expression ---------------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn indexing(slice: &[u8]) -> u8 {\n     #[cfg(cfail1)]\n@@ -33,7 +33,7 @@ pub fn indexing(slice: &[u8]) -> u8 {\n \n \n // Arithmetic overflow plus ----------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -48,7 +48,7 @@ pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n \n \n // Arithmetic overflow minus ----------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -63,7 +63,7 @@ pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n \n \n // Arithmetic overflow mult ----------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -78,7 +78,7 @@ pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n \n \n // Arithmetic overflow negation ------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -93,7 +93,7 @@ pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n \n \n // Division by zero ------------------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn division_by_zero(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -107,7 +107,7 @@ pub fn division_by_zero(val: i32) -> i32 {\n }\n \n // Division by zero ------------------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn mod_by_zero(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -122,7 +122,7 @@ pub fn mod_by_zero(val: i32) -> i32 {\n \n \n // shift left ------------------------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_left(val: i32, shift: usize) -> i32 {\n     #[cfg(cfail1)]\n@@ -137,7 +137,7 @@ pub fn shift_left(val: i32, shift: usize) -> i32 {\n \n \n // shift right ------------------------------------------------------------------\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirBuilt,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_right(val: i32, shift: usize) -> i32 {\n     #[cfg(cfail1)]"}, {"sha": "3190f65a8173130a50506164231aa1136327d646", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -31,7 +31,7 @@ pub fn change_field_value_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_regular_struct() -> RegularStruct {\n     RegularStruct {\n@@ -82,7 +82,7 @@ pub fn add_field_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_field_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n@@ -117,7 +117,7 @@ pub fn change_field_label_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_label_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n@@ -152,7 +152,7 @@ pub fn change_constructor_path_regular_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct2 {\n@@ -173,7 +173,7 @@ pub mod change_constructor_path_indirectly_regular_struct {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"FnSignature,Hir,HirBody,MirOptimized,MirBuilt,TypeckTables\"\n+        except=\"FnSignature,Hir,HirBody,optimized_mir,mir_built,TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Struct {\n@@ -196,7 +196,7 @@ pub fn change_field_value_tuple_struct() -> TupleStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_tuple_struct() -> TupleStruct {\n     TupleStruct(0, 1, 3)\n@@ -213,7 +213,7 @@ pub fn change_constructor_path_tuple_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct2(0, 1, 2);\n@@ -230,7 +230,7 @@ pub mod change_constructor_path_indirectly_tuple_struct {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"FnSignature,Hir,HirBody,MirOptimized,MirBuilt,TypeckTables\"\n+        except=\"FnSignature,Hir,HirBody,optimized_mir,mir_built,TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Struct {"}, {"sha": "f3331ec61cb6a4cc6379b4e33614a755bae201a1", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -21,7 +21,7 @@ pub fn const_negation() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn const_negation() -> i32 {\n     -1\n@@ -36,7 +36,7 @@ pub fn const_bitwise_not() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn const_bitwise_not() -> i32 {\n     !99\n@@ -51,7 +51,7 @@ pub fn var_negation(x: i32, y: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_negation(x: i32, y: i32) -> i32 {\n     -y\n@@ -66,7 +66,7 @@ pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n     !y\n@@ -81,7 +81,7 @@ pub fn var_deref(x: &i32, y: &i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built,TypeckTables\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_deref(x: &i32, y: &i32) -> i32 {\n     *y\n@@ -96,7 +96,7 @@ pub fn first_const_add() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn first_const_add() -> i32 {\n     2 + 3\n@@ -111,7 +111,7 @@ pub fn second_const_add() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn second_const_add() -> i32 {\n     1 + 3\n@@ -126,7 +126,7 @@ pub fn first_var_add(a: i32, b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn first_var_add(a: i32, b: i32) -> i32 {\n     b + 2\n@@ -141,7 +141,7 @@ pub fn second_var_add(a: i32, b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn second_var_add(a: i32, b: i32) -> i32 {\n     1 + b\n@@ -156,7 +156,7 @@ pub fn plus_to_minus(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_minus(a: i32) -> i32 {\n     1 - a\n@@ -171,7 +171,7 @@ pub fn plus_to_mult(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_mult(a: i32) -> i32 {\n     1 * a\n@@ -186,7 +186,7 @@ pub fn plus_to_div(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_div(a: i32) -> i32 {\n     1 / a\n@@ -201,7 +201,7 @@ pub fn plus_to_mod(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_mod(a: i32) -> i32 {\n     1 % a\n@@ -216,7 +216,7 @@ pub fn and_to_or(a: bool, b: bool) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn and_to_or(a: bool, b: bool) -> bool {\n     a || b\n@@ -231,7 +231,7 @@ pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n     1 | a\n@@ -246,7 +246,7 @@ pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n     1 ^ a\n@@ -261,7 +261,7 @@ pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n     a << 1\n@@ -276,7 +276,7 @@ pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n     a >> 1\n@@ -291,7 +291,7 @@ pub fn eq_to_uneq(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_uneq(a: i32) -> bool {\n     a != 1\n@@ -306,7 +306,7 @@ pub fn eq_to_lt(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_lt(a: i32) -> bool {\n     a < 1\n@@ -321,7 +321,7 @@ pub fn eq_to_gt(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_gt(a: i32) -> bool {\n     a > 1\n@@ -336,7 +336,7 @@ pub fn eq_to_le(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_le(a: i32) -> bool {\n     a <= 1\n@@ -351,7 +351,7 @@ pub fn eq_to_ge(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_ge(a: i32) -> bool {\n     a >= 1\n@@ -368,7 +368,7 @@ pub fn type_cast(a: u8) -> u64 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt,TypeckTables\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built,TypeckTables\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn type_cast(a: u8) -> u64 {\n     let b = a as u32;\n@@ -385,7 +385,7 @@ pub fn value_cast(a: u32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn value_cast(a: u32) -> i32 {\n     2 as i32\n@@ -403,7 +403,7 @@ pub fn place() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn place() -> i32 {\n     let mut x = 10;\n@@ -423,7 +423,7 @@ pub fn rvalue() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn rvalue() -> i32 {\n     let mut x = 10;\n@@ -440,7 +440,7 @@ pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,MirOptimized,MirBuilt\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n     s[j]"}, {"sha": "7e866ae925ed90cb67adda376472450a7ab11581", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_loop_condition() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -70,7 +70,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -141,7 +141,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -191,7 +191,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -216,7 +216,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "cbd1341fdd4fb1fc68d9dc9d228da2df600138d0", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_loop_condition() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -70,7 +70,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized, TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -141,7 +141,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -191,7 +191,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -216,7 +216,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, MirBuilt, MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "2574ef5199c867785e6cb6b5dbcacbf01d27f9b7", "filename": "src/test/incremental/spans_significant_w_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -13,7 +13,7 @@ pub fn main() {\n }\n \n #[cfg(rpass2)]\n-#[rustc_dirty(label=\"MirOptimized\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"optimized_mir\", cfg=\"rpass2\")]\n pub fn main() {\n     let _ = 0u8 + 1;\n }"}, {"sha": "db2660bb66129ce8540e9b783ee1ae789842f175", "filename": "src/test/incremental/string_constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f8d4e2220cc48061288b57d716f194567b4307/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=72f8d4e2220cc48061288b57d716f194567b4307", "patch": "@@ -19,7 +19,7 @@ pub mod x {\n \n     #[cfg(cfail2)]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"MirOptimized\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"optimized_mir\", cfg=\"cfail2\")]\n     pub fn x() {\n         println!(\"{}\", \"2\");\n     }\n@@ -29,7 +29,7 @@ pub mod y {\n     use x;\n \n     #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"MirOptimized\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"optimized_mir\", cfg=\"cfail2\")]\n     pub fn y() {\n         x::x();\n     }\n@@ -39,7 +39,7 @@ pub mod z {\n     use y;\n \n     #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"MirOptimized\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"optimized_mir\", cfg=\"cfail2\")]\n     pub fn z() {\n         y::y();\n     }"}]}