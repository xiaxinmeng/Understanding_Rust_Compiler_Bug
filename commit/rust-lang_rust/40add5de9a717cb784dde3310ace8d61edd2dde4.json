{"sha": "40add5de9a717cb784dde3310ace8d61edd2dde4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYWRkNWRlOWE3MTdjYjc4NGRkZTMzMTBhY2U4ZDYxZWRkMmRkZTQ=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-21T15:51:41Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-21T15:55:14Z"}, "message": "Fix join_lines not adding a comma after join_single_expr_block in match arm\n\nWe will also remove optional whitespace between the expression and the comma.\n\ne.g.\n\n```rust\nfn foo() {\n    let x = (<|>{\n       4\n    }   ,); // NOTE: whitespace\n}\n```\n\nbecomes\n\n```rust\nfn foo() {\n    let x = (<|>4,);\n}\n```", "tree": {"sha": "f4e6fc99f8ee9ec2576d41942aa3fd114e32feea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4e6fc99f8ee9ec2576d41942aa3fd114e32feea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40add5de9a717cb784dde3310ace8d61edd2dde4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40add5de9a717cb784dde3310ace8d61edd2dde4", "html_url": "https://github.com/rust-lang/rust/commit/40add5de9a717cb784dde3310ace8d61edd2dde4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40add5de9a717cb784dde3310ace8d61edd2dde4/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cacdfcb3c666161dc41f59228eaaca5cfe8fc27", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cacdfcb3c666161dc41f59228eaaca5cfe8fc27", "html_url": "https://github.com/rust-lang/rust/commit/5cacdfcb3c666161dc41f59228eaaca5cfe8fc27"}], "stats": {"total": 149, "additions": 147, "deletions": 2}, "files": [{"sha": "9f59fbd437b5992d1f7bc3ebbaec1e95055038c0", "filename": "crates/ra_ide_api_light/src/join_lines.rs", "status": "modified", "additions": 147, "deletions": 2, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/40add5de9a717cb784dde3310ace8d61edd2dde4/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40add5de9a717cb784dde3310ace8d61edd2dde4/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs?ref=40add5de9a717cb784dde3310ace8d61edd2dde4", "patch": "@@ -120,11 +120,47 @@ fn remove_newline(\n     }\n }\n \n+/// fixes a comma after the given expression and optionally inserts a new trailing comma\n+/// if no comma was found and `comma_offset` is provided\n+fn fix_comma_after(edit: &mut TextEditBuilder, node: &SyntaxNode, comma_offset: Option<TextUnit>) {\n+    let next = node.next_sibling();\n+    let nnext = node.next_sibling().and_then(|n| n.next_sibling());\n+\n+    match (next, nnext) {\n+        // Whitespace followed by a comma\n+        // remove the whitespace\n+        (Some(ws), Some(comma)) if ws.kind() == WHITESPACE && comma.kind() == COMMA => {\n+            edit.delete(ws.range());\n+        }\n+\n+        // if we are not a comma and if comma_offset was provided,\n+        // insert trailing comma after the block\n+        (Some(n), _) if n.kind() != COMMA => {\n+            if let Some(comma_offset) = comma_offset {\n+                edit.insert(comma_offset, \",\".to_owned());\n+            }\n+        }\n+\n+        _ => {}\n+    }\n+}\n+\n fn join_single_expr_block(edit: &mut TextEditBuilder, node: &SyntaxNode) -> Option<()> {\n     let block = ast::Block::cast(node.parent()?)?;\n     let block_expr = ast::BlockExpr::cast(block.syntax().parent()?)?;\n     let expr = extract_trivial_expression(block)?;\n-    edit.replace(block_expr.syntax().range(), expr.syntax().text().to_string());\n+\n+    let block_range = block_expr.syntax().range();\n+    edit.replace(block_range, expr.syntax().text().to_string());\n+\n+    // Match block needs to have a comma after the block\n+    // otherwise we'll maintain a comma after the block if such existed\n+    // but we remove excess whitespace between the expression and the comma.\n+    if let Some(match_arm) = block_expr.syntax().parent().and_then(ast::MatchArm::cast) {\n+        fix_comma_after(edit, match_arm.syntax(), Some(block_range.end()));\n+    } else {\n+        fix_comma_after(edit, block_expr.syntax(), None);\n+    }\n     Some(())\n }\n \n@@ -208,7 +244,6 @@ fn foo() {\n     }\n \n     #[test]\n-    #[ignore] // FIXME: https://github.com/rust-analyzer/rust-analyzer/issues/868\n     fn join_lines_adds_comma_for_block_in_match_arm() {\n         check_join_lines(\n             r\"\n@@ -230,6 +265,116 @@ fn foo(e: Result<U, V>) {\n         );\n     }\n \n+    #[test]\n+    fn join_lines_keeps_comma_for_block_in_match_arm() {\n+        // We already have a comma\n+        check_join_lines(\n+            r\"\n+fn foo(e: Result<U, V>) {\n+    match e {\n+        Ok(u) => <|>{\n+            u.foo()\n+        },\n+        Err(v) => v,\n+    }\n+}\",\n+            r\"\n+fn foo(e: Result<U, V>) {\n+    match e {\n+        Ok(u) => <|>u.foo(),\n+        Err(v) => v,\n+    }\n+}\",\n+        );\n+\n+        // comma with whitespace between brace and ,\n+        check_join_lines(\n+            r\"\n+fn foo(e: Result<U, V>) {\n+    match e {\n+        Ok(u) => <|>{\n+            u.foo()\n+        }    ,\n+        Err(v) => v,\n+    }\n+}\",\n+            r\"\n+fn foo(e: Result<U, V>) {\n+    match e {\n+        Ok(u) => <|>u.foo(),\n+        Err(v) => v,\n+    }\n+}\",\n+        );\n+\n+        // comma with newline between brace and ,\n+        check_join_lines(\n+            r\"\n+fn foo(e: Result<U, V>) {\n+    match e {\n+        Ok(u) => <|>{\n+            u.foo()\n+        }\n+        ,\n+        Err(v) => v,\n+    }\n+}\",\n+            r\"\n+fn foo(e: Result<U, V>) {\n+    match e {\n+        Ok(u) => <|>u.foo(),\n+        Err(v) => v,\n+    }\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn join_lines_keeps_comma_with_single_arg_tuple() {\n+        // A single arg tuple\n+        check_join_lines(\n+            r\"\n+fn foo() {\n+    let x = (<|>{\n+       4\n+    },);\n+}\",\n+            r\"\n+fn foo() {\n+    let x = (<|>4,);\n+}\",\n+        );\n+\n+        // single arg tuple with whitespace between brace and comma\n+        check_join_lines(\n+            r\"\n+fn foo() {\n+    let x = (<|>{\n+       4\n+    }   ,);\n+}\",\n+            r\"\n+fn foo() {\n+    let x = (<|>4,);\n+}\",\n+        );\n+\n+        // single arg tuple with newline between brace and comma\n+        check_join_lines(\n+            r\"\n+fn foo() {\n+    let x = (<|>{\n+       4\n+    }\n+    ,);\n+}\",\n+            r\"\n+fn foo() {\n+    let x = (<|>4,);\n+}\",\n+        );\n+    }\n+\n     #[test]\n     fn test_join_lines_use_items_left() {\n         // No space after the '{'"}]}