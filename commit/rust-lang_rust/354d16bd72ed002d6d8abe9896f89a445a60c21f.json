{"sha": "354d16bd72ed002d6d8abe9896f89a445a60c21f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NGQxNmJkNzJlZDAwMmQ2ZDhhYmU5ODk2Zjg5YTQ0NWE2MGMyMWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-02T09:55:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-02T09:55:13Z"}, "message": "Auto merge of #25027 - Manishearth:deriving_attr, r=huonw\n\nAdds an `attrs` field to `FieldInfo` which lets one check the attributes on\na field whilst expanding.\n\nThis lets deriving plugins be more robust, for example providing the ability to\n\"ignore\" a field for the purpose of deriving, or perhaps handle the field a\ndifferent way.\n\n\nr? @huonw", "tree": {"sha": "5054a0d9e455188615b17afd9b57f12342226202", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5054a0d9e455188615b17afd9b57f12342226202"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/354d16bd72ed002d6d8abe9896f89a445a60c21f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/354d16bd72ed002d6d8abe9896f89a445a60c21f", "html_url": "https://github.com/rust-lang/rust/commit/354d16bd72ed002d6d8abe9896f89a445a60c21f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/354d16bd72ed002d6d8abe9896f89a445a60c21f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82158c9d1cc97d03b7e3a48fda0ff8c1e9209041", "url": "https://api.github.com/repos/rust-lang/rust/commits/82158c9d1cc97d03b7e3a48fda0ff8c1e9209041", "html_url": "https://github.com/rust-lang/rust/commit/82158c9d1cc97d03b7e3a48fda0ff8c1e9209041"}, {"sha": "5892b40859b65dd520ae92f7570069adaf313a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5892b40859b65dd520ae92f7570069adaf313a8f", "html_url": "https://github.com/rust-lang/rust/commit/5892b40859b65dd520ae92f7570069adaf313a8f"}], "stats": {"total": 232, "additions": 200, "deletions": 32}, "files": [{"sha": "354a0bff74998bbcc3c21d93f7d379d0db0f41d3", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/354d16bd72ed002d6d8abe9896f89a445a60c21f/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354d16bd72ed002d6d8abe9896f89a445a60c21f/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=354d16bd72ed002d6d8abe9896f89a445a60c21f", "patch": "@@ -146,7 +146,7 @@ pub trait AstBuilder {\n     fn expr_lit(&self, sp: Span, lit: ast::Lit_) -> P<ast::Expr>;\n \n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr>;\n-    fn expr_int(&self, sp: Span, i: isize) -> P<ast::Expr>;\n+    fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr>;\n     fn expr_u8(&self, sp: Span, u: u8) -> P<ast::Expr>;\n     fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr>;\n     fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr>;\n@@ -698,7 +698,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> {\n         self.expr_lit(span, ast::LitInt(i as u64, ast::UnsignedIntLit(ast::TyUs)))\n     }\n-    fn expr_int(&self, sp: Span, i: isize) -> P<ast::Expr> {\n+    fn expr_isize(&self, sp: Span, i: isize) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitInt(i as u64, ast::SignedIntLit(ast::TyIs,\n                                                                   ast::Sign::new(i))))\n     }"}, {"sha": "339e535cdcd9f9de9b41b0aa25a29b31c591db48", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/354d16bd72ed002d6d8abe9896f89a445a60c21f/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354d16bd72ed002d6d8abe9896f89a445a60c21f/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=354d16bd72ed002d6d8abe9896f89a445a60c21f", "patch": "@@ -270,7 +270,7 @@ pub struct Substructure<'a> {\n }\n \n /// Summary of the relevant parts of a struct/enum field.\n-pub struct FieldInfo {\n+pub struct FieldInfo<'a> {\n     pub span: Span,\n     /// None for tuple structs/normal enum variants, Some for normal\n     /// structs/struct enum variants.\n@@ -281,6 +281,8 @@ pub struct FieldInfo {\n     /// The expressions corresponding to references to this field in\n     /// the other `Self` arguments.\n     pub other: Vec<P<Expr>>,\n+    /// The attributes on the field\n+    pub attrs: &'a [ast::Attribute],\n }\n \n /// Fields for a static method\n@@ -293,11 +295,11 @@ pub enum StaticFields {\n \n /// A summary of the possible sets of fields.\n pub enum SubstructureFields<'a> {\n-    Struct(Vec<FieldInfo>),\n+    Struct(Vec<FieldInfo<'a>>),\n     /// Matching variants of the enum: variant index, ast::Variant,\n     /// fields: the field name is only non-`None` in the case of a struct\n     /// variant.\n-    EnumMatching(usize, &'a ast::Variant, Vec<FieldInfo>),\n+    EnumMatching(usize, &'a ast::Variant, Vec<FieldInfo<'a>>),\n \n     /// Non-matching variants of the enum, but with all state hidden from\n     /// the consequent code.  The first component holds `Ident`s for all of\n@@ -378,7 +380,7 @@ impl<'a> TraitDef<'a> {\n     pub fn expand(&self,\n                   cx: &mut ExtCtxt,\n                   mitem: &ast::MetaItem,\n-                  item: &ast::Item,\n+                  item: &'a ast::Item,\n                   push: &mut FnMut(P<ast::Item>))\n     {\n         let newitem = match item.node {\n@@ -609,7 +611,7 @@ impl<'a> TraitDef<'a> {\n \n     fn expand_struct_def(&self,\n                          cx: &mut ExtCtxt,\n-                         struct_def: &StructDef,\n+                         struct_def: &'a StructDef,\n                          type_ident: Ident,\n                          generics: &Generics) -> P<ast::Item> {\n         let field_tys: Vec<P<ast::Ty>> = struct_def.fields.iter()\n@@ -653,7 +655,7 @@ impl<'a> TraitDef<'a> {\n \n     fn expand_enum_def(&self,\n                        cx: &mut ExtCtxt,\n-                       enum_def: &EnumDef,\n+                       enum_def: &'a EnumDef,\n                        type_attrs: &[ast::Attribute],\n                        type_ident: Ident,\n                        generics: &Generics) -> P<ast::Item> {\n@@ -885,10 +887,10 @@ impl<'a> MethodDef<'a> {\n     ///     }\n     /// }\n     /// ```\n-    fn expand_struct_method_body(&self,\n+    fn expand_struct_method_body<'b>(&self,\n                                  cx: &mut ExtCtxt,\n-                                 trait_: &TraitDef,\n-                                 struct_def: &StructDef,\n+                                 trait_: &TraitDef<'b>,\n+                                 struct_def: &'b StructDef,\n                                  type_ident: Ident,\n                                  self_args: &[P<Expr>],\n                                  nonself_args: &[P<Expr>])\n@@ -914,18 +916,19 @@ impl<'a> MethodDef<'a> {\n         let fields = if !raw_fields.is_empty() {\n             let mut raw_fields = raw_fields.into_iter().map(|v| v.into_iter());\n             let first_field = raw_fields.next().unwrap();\n-            let mut other_fields: Vec<vec::IntoIter<(Span, Option<Ident>, P<Expr>)>>\n+            let mut other_fields: Vec<vec::IntoIter<_>>\n                 = raw_fields.collect();\n-            first_field.map(|(span, opt_id, field)| {\n+            first_field.map(|(span, opt_id, field, attrs)| {\n                 FieldInfo {\n                     span: span,\n                     name: opt_id,\n                     self_: field,\n                     other: other_fields.iter_mut().map(|l| {\n                         match l.next().unwrap() {\n-                            (_, _, ex) => ex\n+                            (_, _, ex, _) => ex\n                         }\n-                    }).collect()\n+                    }).collect(),\n+                    attrs: attrs,\n                 }\n             }).collect()\n         } else {\n@@ -999,10 +1002,10 @@ impl<'a> MethodDef<'a> {\n     /// `PartialEq`, and those subcomputations will hopefully be removed\n     /// as their results are unused.  The point of `__self_vi` and\n     /// `__arg_1_vi` is for `PartialOrd`; see #15503.)\n-    fn expand_enum_method_body(&self,\n+    fn expand_enum_method_body<'b>(&self,\n                                cx: &mut ExtCtxt,\n-                               trait_: &TraitDef,\n-                               enum_def: &EnumDef,\n+                               trait_: &TraitDef<'b>,\n+                               enum_def: &'b EnumDef,\n                                type_attrs: &[ast::Attribute],\n                                type_ident: Ident,\n                                self_args: Vec<P<Expr>>,\n@@ -1038,11 +1041,11 @@ impl<'a> MethodDef<'a> {\n     ///   }\n     /// }\n     /// ```\n-    fn build_enum_match_tuple(\n+    fn build_enum_match_tuple<'b>(\n         &self,\n         cx: &mut ExtCtxt,\n-        trait_: &TraitDef,\n-        enum_def: &EnumDef,\n+        trait_: &TraitDef<'b>,\n+        enum_def: &'b EnumDef,\n         type_attrs: &[ast::Attribute],\n         type_ident: Ident,\n         self_args: Vec<P<Expr>>,\n@@ -1125,15 +1128,15 @@ impl<'a> MethodDef<'a> {\n                 // arg fields of the variant for the first self pat.\n                 let field_tuples = first_self_pat_idents.into_iter().enumerate()\n                     // For each arg field of self, pull out its getter expr ...\n-                    .map(|(field_index, (sp, opt_ident, self_getter_expr))| {\n+                    .map(|(field_index, (sp, opt_ident, self_getter_expr, attrs))| {\n                         // ... but FieldInfo also wants getter expr\n                         // for matching other arguments of Self type;\n                         // so walk across the *other* self_pats_idents\n                         // and pull out getter for same field in each\n                         // of them (using `field_index` tracked above).\n                         // That is the heart of the transposition.\n                         let others = self_pats_idents.iter().map(|fields| {\n-                            let (_, _opt_ident, ref other_getter_expr) =\n+                            let (_, _opt_ident, ref other_getter_expr, _) =\n                                 fields[field_index];\n \n                             // All Self args have same variant, so\n@@ -1149,6 +1152,7 @@ impl<'a> MethodDef<'a> {\n                                     name: opt_ident,\n                                     self_: self_getter_expr,\n                                     other: others,\n+                                    attrs: attrs,\n                         }\n                     }).collect::<Vec<FieldInfo>>();\n \n@@ -1400,10 +1404,12 @@ impl<'a> TraitDef<'a> {\n     fn create_struct_pattern(&self,\n                              cx: &mut ExtCtxt,\n                              struct_path: ast::Path,\n-                             struct_def: &StructDef,\n+                             struct_def: &'a StructDef,\n                              prefix: &str,\n                              mutbl: ast::Mutability)\n-                             -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>)>) {\n+                             -> (P<ast::Pat>, Vec<(Span, Option<Ident>,\n+                                                   P<Expr>,\n+                                                   &'a [ast::Attribute])>) {\n         if struct_def.fields.is_empty() {\n             return (cx.pat_enum(self.span, struct_path, vec![]), vec![]);\n         }\n@@ -1433,15 +1439,16 @@ impl<'a> TraitDef<'a> {\n             paths.push(codemap::Spanned{span: sp, node: ident});\n             let val = cx.expr(\n                 sp, ast::ExprParen(cx.expr_deref(sp, cx.expr_path(cx.path_ident(sp,ident)))));\n-            ident_expr.push((sp, opt_id, val));\n+            ident_expr.push((sp, opt_id, val, &struct_field.node.attrs[..]));\n         }\n \n         let subpats = self.create_subpatterns(cx, paths, mutbl);\n \n         // struct_type is definitely not Unknown, since struct_def.fields\n         // must be nonempty to reach here\n         let pattern = if struct_type == Record {\n-            let field_pats = subpats.into_iter().zip(ident_expr.iter()).map(|(pat, &(_, id, _))| {\n+            let field_pats = subpats.into_iter().zip(ident_expr.iter())\n+                                    .map(|(pat, &(_, id, _, _))| {\n                 // id is guaranteed to be Some\n                 codemap::Spanned {\n                     span: pat.span,\n@@ -1459,10 +1466,10 @@ impl<'a> TraitDef<'a> {\n     fn create_enum_variant_pattern(&self,\n                                    cx: &mut ExtCtxt,\n                                    enum_ident: ast::Ident,\n-                                   variant: &ast::Variant,\n+                                   variant: &'a ast::Variant,\n                                    prefix: &str,\n                                    mutbl: ast::Mutability)\n-        -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>)>) {\n+        -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>, &'a [ast::Attribute])>) {\n         let variant_ident = variant.node.name;\n         let variant_path = cx.path(variant.span, vec![enum_ident, variant_ident]);\n         match variant.node.kind {\n@@ -1472,15 +1479,15 @@ impl<'a> TraitDef<'a> {\n                 }\n \n                 let mut paths = Vec::new();\n-                let mut ident_expr = Vec::new();\n+                let mut ident_expr: Vec<(_, _, _, &'a [ast::Attribute])> = Vec::new();\n                 for (i, va) in variant_args.iter().enumerate() {\n                     let sp = self.set_expn_info(cx, va.ty.span);\n                     let ident = cx.ident_of(&format!(\"{}_{}\", prefix, i));\n                     let path1 = codemap::Spanned{span: sp, node: ident};\n                     paths.push(path1);\n                     let expr_path = cx.expr_path(cx.path_ident(sp, ident));\n                     let val = cx.expr(sp, ast::ExprParen(cx.expr_deref(sp, expr_path)));\n-                    ident_expr.push((sp, None, val));\n+                    ident_expr.push((sp, None, val, &[]));\n                 }\n \n                 let subpats = self.create_subpatterns(cx, paths, mutbl);"}, {"sha": "78381395dc92c0963e3782082a24fc47469ecaab", "filename": "src/test/auxiliary/custom_derive_plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/354d16bd72ed002d6d8abe9896f89a445a60c21f/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354d16bd72ed002d6d8abe9896f89a445a60c21f/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs?ref=354d16bd72ed002d6d8abe9896f89a445a60c21f", "patch": "@@ -55,7 +55,7 @@ fn expand(cx: &mut ExtCtxt,\n                 ret_ty: Literal(Path::new_local(\"isize\")),\n                 attributes: vec![],\n                 combine_substructure: combine_substructure(box |cx, span, substr| {\n-                    let zero = cx.expr_int(span, 0);\n+                    let zero = cx.expr_isize(span, 0);\n                     cs_fold(false,\n                             |cx, span, subexpr, field, _| {\n                                 cx.expr_binary(span, ast::BiAdd, subexpr,"}, {"sha": "445aa743a77feb7f3f40fa5850ef42846feec4ad", "filename": "src/test/auxiliary/custom_derive_plugin_attr.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/354d16bd72ed002d6d8abe9896f89a445a60c21f/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354d16bd72ed002d6d8abe9896f89a445a60c21f/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs?ref=354d16bd72ed002d6d8abe9896f89a445a60c21f", "patch": "@@ -0,0 +1,87 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+\n+#![feature(plugin_registrar)]\n+#![feature(box_syntax)]\n+#![feature(rustc_private)]\n+\n+extern crate syntax;\n+extern crate rustc;\n+\n+use syntax::ast;\n+use syntax::attr::AttrMetaMethods;\n+use syntax::codemap::Span;\n+use syntax::ext::base::{Decorator, ExtCtxt};\n+use syntax::ext::build::AstBuilder;\n+use syntax::ext::deriving::generic::{cs_fold, TraitDef, MethodDef, combine_substructure};\n+use syntax::ext::deriving::generic::{Substructure, Struct, EnumMatching};\n+use syntax::ext::deriving::generic::ty::{Literal, LifetimeBounds, Path, borrowed_explicit_self};\n+use syntax::parse::token;\n+use syntax::ptr::P;\n+use rustc::plugin::Registry;\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_syntax_extension(\n+        token::intern(\"derive_TotalSum\"),\n+        Decorator(box expand));\n+}\n+\n+fn expand(cx: &mut ExtCtxt,\n+          span: Span,\n+          mitem: &ast::MetaItem,\n+          item: &ast::Item,\n+          push: &mut FnMut(P<ast::Item>)) {\n+    let trait_def = TraitDef {\n+        span: span,\n+        attributes: vec![],\n+        path: Path::new(vec![\"TotalSum\"]),\n+        additional_bounds: vec![],\n+        generics: LifetimeBounds::empty(),\n+        associated_types: vec![],\n+        methods: vec![\n+            MethodDef {\n+                name: \"total_sum\",\n+                generics: LifetimeBounds::empty(),\n+                explicit_self: borrowed_explicit_self(),\n+                args: vec![],\n+                ret_ty: Literal(Path::new_local(\"isize\")),\n+                attributes: vec![],\n+                combine_substructure: combine_substructure(Box::new(totalsum_substructure)),\n+            },\n+        ],\n+    };\n+\n+    trait_def.expand(cx, mitem, item, push)\n+}\n+\n+// Mostly copied from syntax::ext::deriving::hash\n+/// Defines how the implementation for `trace()` is to be generated\n+fn totalsum_substructure(cx: &mut ExtCtxt, trait_span: Span,\n+                         substr: &Substructure) -> P<ast::Expr> {\n+    let fields = match *substr.fields {\n+        Struct(ref fs) | EnumMatching(_, _, ref fs) => fs,\n+        _ => cx.span_bug(trait_span, \"impossible substructure\")\n+    };\n+\n+    fields.iter().fold(cx.expr_isize(trait_span, 0), |acc, ref item| {\n+        if item.attrs.iter().find(|a| a.check_name(\"ignore\")).is_some() {\n+            acc\n+        } else {\n+            cx.expr_binary(item.span, ast::BiAdd, acc,\n+                           cx.expr_method_call(item.span,\n+                                               item.self_.clone(),\n+                                               substr.method_ident,\n+                                               Vec::new()))\n+        }\n+    })\n+}"}, {"sha": "ef5198b9ae03802d6dfdab2e05a6cc655d779b42", "filename": "src/test/run-pass-fulldeps/derive-totalsum-attr.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/354d16bd72ed002d6d8abe9896f89a445a60c21f/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/354d16bd72ed002d6d8abe9896f89a445a60c21f/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum-attr.rs?ref=354d16bd72ed002d6d8abe9896f89a445a60c21f", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:custom_derive_plugin_attr.rs\n+// ignore-stage1\n+\n+#![feature(plugin, custom_derive, custom_attribute)]\n+#![plugin(custom_derive_plugin_attr)]\n+\n+trait TotalSum {\n+    fn total_sum(&self) -> isize;\n+}\n+\n+impl TotalSum for isize {\n+    fn total_sum(&self) -> isize {\n+        *self\n+    }\n+}\n+\n+struct Seven;\n+\n+impl TotalSum for Seven {\n+    fn total_sum(&self) -> isize {\n+        7\n+    }\n+}\n+\n+#[derive(TotalSum)]\n+struct Foo {\n+    seven: Seven,\n+    bar: Bar,\n+    baz: isize,\n+    #[ignore]\n+    nan: NaN,\n+}\n+\n+#[derive(TotalSum)]\n+struct Bar {\n+    quux: isize,\n+    bleh: isize,\n+    #[ignore]\n+    nan: NaN2\n+}\n+\n+struct NaN;\n+\n+impl TotalSum for NaN {\n+    fn total_sum(&self) -> isize {\n+        panic!();\n+    }\n+}\n+\n+struct NaN2;\n+\n+pub fn main() {\n+    let v = Foo {\n+        seven: Seven,\n+        bar: Bar {\n+            quux: 9,\n+            bleh: 3,\n+            nan: NaN2\n+        },\n+        baz: 80,\n+        nan: NaN\n+    };\n+    assert_eq!(v.total_sum(), 99);\n+}"}]}