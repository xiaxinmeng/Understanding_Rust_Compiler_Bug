{"sha": "39f0719a25de12045d76a809e5c3b43d179f77b9", "node_id": "C_kwDOAAsO6NoAKDM5ZjA3MTlhMjVkZTEyMDQ1ZDc2YTgwOWU1YzNiNDNkMTc5Zjc3Yjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-09T11:27:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-09T11:27:15Z"}, "message": "Auto merge of #9840 - c410-f3r:arith-2, r=Alexendoo\n\n[`arithmetic-side-effects`]: Consider user-provided pairs\n\nDepends on https://github.com/rust-lang/rust-clippy/pull/9592.\n\nBecause of https://github.com/rust-lang/rust-clippy/pull/9559#discussion_r985293523, r? `@Alexendoo`\n\n```\nchangelog: [`arithmetic-side-effects`]: Consider user-provided pairs\n```", "tree": {"sha": "db0cf46dce9da06baab13067cda899bf42987323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db0cf46dce9da06baab13067cda899bf42987323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39f0719a25de12045d76a809e5c3b43d179f77b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39f0719a25de12045d76a809e5c3b43d179f77b9", "html_url": "https://github.com/rust-lang/rust/commit/39f0719a25de12045d76a809e5c3b43d179f77b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39f0719a25de12045d76a809e5c3b43d179f77b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "911864df46dc5d4fae2f809126f4e6f090434e8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/911864df46dc5d4fae2f809126f4e6f090434e8f", "html_url": "https://github.com/rust-lang/rust/commit/911864df46dc5d4fae2f809126f4e6f090434e8f"}, {"sha": "1f92f97e5acb3e400af406b17639cfae3926dd3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f92f97e5acb3e400af406b17639cfae3926dd3b", "html_url": "https://github.com/rust-lang/rust/commit/1f92f97e5acb3e400af406b17639cfae3926dd3b"}], "stats": {"total": 352, "additions": 286, "deletions": 66}, "files": [{"sha": "e20621c96ebec0256f4120aeb097a8524ebb7e34", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/39f0719a25de12045d76a809e5c3b43d179f77b9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f0719a25de12045d76a809e5c3b43d179f77b9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=39f0719a25de12045d76a809e5c3b43d179f77b9", "patch": "@@ -507,9 +507,20 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     }\n \n     let arithmetic_side_effects_allowed = conf.arithmetic_side_effects_allowed.clone();\n+    let arithmetic_side_effects_allowed_binary = conf.arithmetic_side_effects_allowed_binary.clone();\n+    let arithmetic_side_effects_allowed_unary = conf.arithmetic_side_effects_allowed_unary.clone();\n     store.register_late_pass(move |_| {\n         Box::new(operators::arithmetic_side_effects::ArithmeticSideEffects::new(\n-            arithmetic_side_effects_allowed.clone(),\n+            arithmetic_side_effects_allowed\n+                .iter()\n+                .flat_map(|el| [[el.clone(), \"*\".to_string()], [\"*\".to_string(), el.clone()]])\n+                .chain(arithmetic_side_effects_allowed_binary.clone())\n+                .collect(),\n+            arithmetic_side_effects_allowed\n+                .iter()\n+                .chain(arithmetic_side_effects_allowed_unary.iter())\n+                .cloned()\n+                .collect(),\n         ))\n     });\n     store.register_late_pass(|_| Box::new(utils::dump_hir::DumpHir));"}, {"sha": "4fbc8398e373443d5cc80c80eb2214933bfe786d", "filename": "clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/39f0719a25de12045d76a809e5c3b43d179f77b9/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f0719a25de12045d76a809e5c3b43d179f77b9/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=39f0719a25de12045d76a809e5c3b43d179f77b9", "patch": "@@ -5,25 +5,26 @@ use clippy_utils::{\n     peel_hir_expr_refs,\n };\n use rustc_ast as ast;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::Ty;\n use rustc_session::impl_lint_pass;\n use rustc_span::source_map::{Span, Spanned};\n \n-const HARD_CODED_ALLOWED: &[&str] = &[\n-    \"&str\",\n-    \"f32\",\n-    \"f64\",\n-    \"std::num::Saturating\",\n-    \"std::num::Wrapping\",\n-    \"std::string::String\",\n+const HARD_CODED_ALLOWED_BINARY: &[[&str; 2]] = &[\n+    [\"f32\", \"f32\"],\n+    [\"f64\", \"f64\"],\n+    [\"std::num::Saturating\", \"std::num::Saturating\"],\n+    [\"std::num::Wrapping\", \"std::num::Wrapping\"],\n+    [\"std::string::String\", \"&str\"],\n ];\n+const HARD_CODED_ALLOWED_UNARY: &[&str] = &[\"f32\", \"f64\", \"std::num::Saturating\", \"std::num::Wrapping\"];\n \n #[derive(Debug)]\n pub struct ArithmeticSideEffects {\n-    allowed: FxHashSet<String>,\n+    allowed_binary: FxHashMap<String, FxHashSet<String>>,\n+    allowed_unary: FxHashSet<String>,\n     // Used to check whether expressions are constants, such as in enum discriminants and consts\n     const_span: Option<Span>,\n     expr_span: Option<Span>,\n@@ -33,19 +34,55 @@ impl_lint_pass!(ArithmeticSideEffects => [ARITHMETIC_SIDE_EFFECTS]);\n \n impl ArithmeticSideEffects {\n     #[must_use]\n-    pub fn new(mut allowed: FxHashSet<String>) -> Self {\n-        allowed.extend(HARD_CODED_ALLOWED.iter().copied().map(String::from));\n+    pub fn new(user_allowed_binary: Vec<[String; 2]>, user_allowed_unary: Vec<String>) -> Self {\n+        let mut allowed_binary: FxHashMap<String, FxHashSet<String>> = <_>::default();\n+        for [lhs, rhs] in user_allowed_binary.into_iter().chain(\n+            HARD_CODED_ALLOWED_BINARY\n+                .iter()\n+                .copied()\n+                .map(|[lhs, rhs]| [lhs.to_string(), rhs.to_string()]),\n+        ) {\n+            allowed_binary.entry(lhs).or_default().insert(rhs);\n+        }\n+        let allowed_unary = user_allowed_unary\n+            .into_iter()\n+            .chain(HARD_CODED_ALLOWED_UNARY.iter().copied().map(String::from))\n+            .collect();\n         Self {\n-            allowed,\n+            allowed_binary,\n+            allowed_unary,\n             const_span: None,\n             expr_span: None,\n         }\n     }\n \n-    /// Checks if the given `expr` has any of the inner `allowed` elements.\n-    fn is_allowed_ty(&self, ty: Ty<'_>) -> bool {\n-        self.allowed\n-            .contains(ty.to_string().split('<').next().unwrap_or_default())\n+    /// Checks if the lhs and the rhs types of a binary operation like \"addition\" or\n+    /// \"multiplication\" are present in the inner set of allowed types.\n+    fn has_allowed_binary(&self, lhs_ty: Ty<'_>, rhs_ty: Ty<'_>) -> bool {\n+        let lhs_ty_string = lhs_ty.to_string();\n+        let lhs_ty_string_elem = lhs_ty_string.split('<').next().unwrap_or_default();\n+        let rhs_ty_string = rhs_ty.to_string();\n+        let rhs_ty_string_elem = rhs_ty_string.split('<').next().unwrap_or_default();\n+        if let Some(rhs_from_specific) = self.allowed_binary.get(lhs_ty_string_elem)\n+            && {\n+                let rhs_has_allowed_ty = rhs_from_specific.contains(rhs_ty_string_elem);\n+                rhs_has_allowed_ty || rhs_from_specific.contains(\"*\")\n+            }\n+        {\n+           true\n+        } else if let Some(rhs_from_glob) = self.allowed_binary.get(\"*\") {\n+            rhs_from_glob.contains(rhs_ty_string_elem)\n+        } else {\n+            false\n+        }\n+    }\n+\n+    /// Checks if the type of an unary operation like \"negation\" is present in the inner set of\n+    /// allowed types.\n+    fn has_allowed_unary(&self, ty: Ty<'_>) -> bool {\n+        let ty_string = ty.to_string();\n+        let ty_string_elem = ty_string.split('<').next().unwrap_or_default();\n+        self.allowed_unary.contains(ty_string_elem)\n     }\n \n     // For example, 8i32 or &i64::MAX.\n@@ -97,8 +134,7 @@ impl ArithmeticSideEffects {\n         };\n         let lhs_ty = cx.typeck_results().expr_ty(lhs);\n         let rhs_ty = cx.typeck_results().expr_ty(rhs);\n-        let lhs_and_rhs_have_the_same_ty = lhs_ty == rhs_ty;\n-        if lhs_and_rhs_have_the_same_ty && self.is_allowed_ty(lhs_ty) && self.is_allowed_ty(rhs_ty) {\n+        if self.has_allowed_binary(lhs_ty, rhs_ty) {\n             return;\n         }\n         let has_valid_op = if Self::is_integral(lhs_ty) && Self::is_integral(rhs_ty) {\n@@ -137,7 +173,7 @@ impl ArithmeticSideEffects {\n             return;\n         }\n         let ty = cx.typeck_results().expr_ty(expr).peel_refs();\n-        if self.is_allowed_ty(ty) {\n+        if self.has_allowed_unary(ty) {\n             return;\n         }\n         let actual_un_expr = peel_hir_expr_refs(un_expr).0;"}, {"sha": "eba230da6c39b772bb90e600f07d9f2df3fcc9b5", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39f0719a25de12045d76a809e5c3b43d179f77b9/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f0719a25de12045d76a809e5c3b43d179f77b9/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=39f0719a25de12045d76a809e5c3b43d179f77b9", "patch": "@@ -90,9 +90,6 @@ declare_clippy_lint! {\n     /// use rust_decimal::Decimal;\n     /// let _n = Decimal::MAX + Decimal::MAX;\n     /// ```\n-    ///\n-    /// ### Allowed types\n-    /// Custom allowed types can be specified through the \"arithmetic-side-effects-allowed\" filter.\n     #[clippy::version = \"1.64.0\"]\n     pub ARITHMETIC_SIDE_EFFECTS,\n     restriction,"}, {"sha": "3e7d0028c0fbd97df2a73e40300db80ac39606fe", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/39f0719a25de12045d76a809e5c3b43d179f77b9/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f0719a25de12045d76a809e5c3b43d179f77b9/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=39f0719a25de12045d76a809e5c3b43d179f77b9", "patch": "@@ -205,10 +205,49 @@ macro_rules! define_Conf {\n }\n \n define_Conf! {\n-    /// Lint: Arithmetic.\n+    /// Lint: ARITHMETIC_SIDE_EFFECTS.\n     ///\n-    /// Suppress checking of the passed type names.\n+    /// Suppress checking of the passed type names in all types of operations.\n+    ///\n+    /// If a specific operation is desired, consider using `arithmetic_side_effects_allowed_binary` or `arithmetic_side_effects_allowed_unary` instead.\n+    ///\n+    /// #### Example\n+    ///\n+    /// ```toml\n+    /// arithmetic-side-effects-allowed = [\"SomeType\", \"AnotherType\"]\n+    /// ```\n+    ///\n+    /// #### Noteworthy\n+    ///\n+    /// A type, say `SomeType`, listed in this configuration has the same behavior of `[\"SomeType\" , \"*\"], [\"*\", \"SomeType\"]` in `arithmetic_side_effects_allowed_binary`.\n     (arithmetic_side_effects_allowed: rustc_data_structures::fx::FxHashSet<String> = <_>::default()),\n+    /// Lint: ARITHMETIC_SIDE_EFFECTS.\n+    ///\n+    /// Suppress checking of the passed type pair names in binary operations like addition or\n+    /// multiplication.\n+    ///\n+    /// Supports the \"*\" wildcard to indicate that a certain type won't trigger the lint regardless\n+    /// of the involved counterpart. For example, `[\"SomeType\", \"*\"]` or `[\"*\", \"AnotherType\"]`.\n+    ///\n+    /// Pairs are asymmetric, which means that `[\"SomeType\", \"AnotherType\"]` is not the same as\n+    /// `[\"AnotherType\", \"SomeType\"]`.\n+    ///\n+    /// #### Example\n+    ///\n+    /// ```toml\n+    /// arithmetic-side-effects-allowed-binary = [[\"SomeType\" , \"f32\"], [\"AnotherType\", \"*\"]]\n+    /// ```\n+    (arithmetic_side_effects_allowed_binary: Vec<[String; 2]> = <_>::default()),\n+    /// Lint: ARITHMETIC_SIDE_EFFECTS.\n+    ///\n+    /// Suppress checking of the passed type names in unary operations like \"negation\" (`-`).\n+    ///\n+    /// #### Example\n+    ///\n+    /// ```toml\n+    /// arithmetic-side-effects-allowed-unary = [\"SomeType\", \"AnotherType\"]\n+    /// ```\n+    (arithmetic_side_effects_allowed_unary: rustc_data_structures::fx::FxHashSet<String> = <_>::default()),\n     /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UNUSED_SELF, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION, BOX_COLLECTION, REDUNDANT_ALLOCATION, RC_BUFFER, VEC_BOX, OPTION_OPTION, LINKEDLIST, RC_MUTEX.\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates."}, {"sha": "36db9e54a228854ac09f5953faedbc07e6ee90ec", "filename": "tests/ui-toml/arithmetic_side_effects_allowed/arithmetic_side_effects_allowed.rs", "status": "modified", "additions": 104, "deletions": 19, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/39f0719a25de12045d76a809e5c3b43d179f77b9/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f0719a25de12045d76a809e5c3b43d179f77b9/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.rs?ref=39f0719a25de12045d76a809e5c3b43d179f77b9", "patch": "@@ -2,32 +2,117 @@\n \n use core::ops::{Add, Neg};\n \n-#[derive(Clone, Copy)]\n-struct Point {\n-    x: i32,\n-    y: i32,\n+macro_rules! create {\n+    ($name:ident) => {\n+        #[allow(clippy::arithmetic_side_effects)]\n+        #[derive(Clone, Copy)]\n+        struct $name;\n+\n+        impl Add<$name> for $name {\n+            type Output = $name;\n+            fn add(self, other: $name) -> Self::Output {\n+                todo!()\n+            }\n+        }\n+\n+        impl Add<i32> for $name {\n+            type Output = $name;\n+            fn add(self, other: i32) -> Self::Output {\n+                todo!()\n+            }\n+        }\n+\n+        impl Add<$name> for i32 {\n+            type Output = $name;\n+            fn add(self, other: $name) -> Self::Output {\n+                todo!()\n+            }\n+        }\n+\n+        impl Add<i64> for $name {\n+            type Output = $name;\n+            fn add(self, other: i64) -> Self::Output {\n+                todo!()\n+            }\n+        }\n+\n+        impl Add<$name> for i64 {\n+            type Output = $name;\n+            fn add(self, other: $name) -> Self::Output {\n+                todo!()\n+            }\n+        }\n+\n+        impl Neg for $name {\n+            type Output = $name;\n+            fn neg(self) -> Self::Output {\n+                todo!()\n+            }\n+        }\n+    };\n }\n \n-impl Add for Point {\n-    type Output = Self;\n+create!(Foo);\n+create!(Bar);\n+create!(Baz);\n+create!(OutOfNames);\n \n-    fn add(self, other: Self) -> Self {\n-        todo!()\n-    }\n+fn lhs_and_rhs_are_equal() {\n+    // is explicitly on the list\n+    let _ = OutOfNames + OutOfNames;\n+    // is explicitly on the list\n+    let _ = Foo + Foo;\n+    // is implicitly on the list\n+    let _ = Bar + Bar;\n+    // not on the list\n+    let _ = Baz + Baz;\n }\n \n-impl Neg for Point {\n-    type Output = Self;\n+fn lhs_is_different() {\n+    // is explicitly on the list\n+    let _ = 1i32 + OutOfNames;\n+    // is explicitly on the list\n+    let _ = 1i32 + Foo;\n+    // is implicitly on the list\n+    let _ = 1i32 + Bar;\n+    // not on the list\n+    let _ = 1i32 + Baz;\n \n-    fn neg(self) -> Self::Output {\n-        todo!()\n-    }\n+    // not on the list\n+    let _ = 1i64 + Foo;\n+    // is implicitly on the list\n+    let _ = 1i64 + Bar;\n+    // not on the list\n+    let _ = 1i64 + Baz;\n }\n \n-fn main() {\n-    let _ = Point { x: 1, y: 0 } + Point { x: 2, y: 3 };\n+fn rhs_is_different() {\n+    // is explicitly on the list\n+    let _ = OutOfNames + 1i32;\n+    // is explicitly on the list\n+    let _ = Foo + 1i32;\n+    // is implicitly on the list\n+    let _ = Bar + 1i32;\n+    // not on the list\n+    let _ = Baz + 1i32;\n+\n+    // not on the list\n+    let _ = Foo + 1i64;\n+    // is implicitly on the list\n+    let _ = Bar + 1i64;\n+    // not on the list\n+    let _ = Baz + 1i64;\n+}\n \n-    let point: Point = Point { x: 1, y: 0 };\n-    let _ = point + point;\n-    let _ = -point;\n+fn unary() {\n+    // is explicitly on the list\n+    let _ = -OutOfNames;\n+    // is specifically on the list\n+    let _ = -Foo;\n+    // not on the list\n+    let _ = -Bar;\n+    // not on the list\n+    let _ = -Baz;\n }\n+\n+fn main() {}"}, {"sha": "ad89534aa1b042c808de5d69622e32c466c288e7", "filename": "tests/ui-toml/arithmetic_side_effects_allowed/arithmetic_side_effects_allowed.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/39f0719a25de12045d76a809e5c3b43d179f77b9/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f0719a25de12045d76a809e5c3b43d179f77b9/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.stderr?ref=39f0719a25de12045d76a809e5c3b43d179f77b9", "patch": "@@ -0,0 +1,58 @@\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:68:13\n+   |\n+LL |     let _ = Baz + Baz;\n+   |             ^^^^^^^^^\n+   |\n+   = note: `-D clippy::arithmetic-side-effects` implied by `-D warnings`\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:79:13\n+   |\n+LL |     let _ = 1i32 + Baz;\n+   |             ^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:82:13\n+   |\n+LL |     let _ = 1i64 + Foo;\n+   |             ^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:86:13\n+   |\n+LL |     let _ = 1i64 + Baz;\n+   |             ^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:97:13\n+   |\n+LL |     let _ = Baz + 1i32;\n+   |             ^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:100:13\n+   |\n+LL |     let _ = Foo + 1i64;\n+   |             ^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:104:13\n+   |\n+LL |     let _ = Baz + 1i64;\n+   |             ^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:113:13\n+   |\n+LL |     let _ = -Bar;\n+   |             ^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects_allowed.rs:115:13\n+   |\n+LL |     let _ = -Baz;\n+   |             ^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "89cbea7ecfe4728a7660a497312179bdafea4311", "filename": "tests/ui-toml/arithmetic_side_effects_allowed/clippy.toml", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39f0719a25de12045d76a809e5c3b43d179f77b9/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/39f0719a25de12045d76a809e5c3b43d179f77b9/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Farithmetic_side_effects_allowed%2Fclippy.toml?ref=39f0719a25de12045d76a809e5c3b43d179f77b9", "patch": "@@ -1 +1,11 @@\n-arithmetic-side-effects-allowed = [\"Point\"]\n+arithmetic-side-effects-allowed = [\n+    \"OutOfNames\"\n+]\n+arithmetic-side-effects-allowed-binary = [\n+    [\"Foo\", \"Foo\"],\n+    [\"Foo\", \"i32\"],\n+    [\"i32\", \"Foo\"],\n+    [\"Bar\", \"*\"],\n+    [\"*\", \"Bar\"],\n+]\n+arithmetic-side-effects-allowed-unary = [\"Foo\"]"}, {"sha": "a22c6a5a0607d9ede572bdfd9ed7997237675717", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39f0719a25de12045d76a809e5c3b43d179f77b9/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f0719a25de12045d76a809e5c3b43d179f77b9/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=39f0719a25de12045d76a809e5c3b43d179f77b9", "patch": "@@ -6,6 +6,8 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            allow-unwrap-in-tests\n            allowed-scripts\n            arithmetic-side-effects-allowed\n+           arithmetic-side-effects-allowed-binary\n+           arithmetic-side-effects-allowed-unary\n            array-size-threshold\n            avoid-breaking-exported-api\n            await-holding-invalid-types"}, {"sha": "9fe4b7cf28d8d3fc4ee574fa194d060adc6f3d8f", "filename": "tests/ui/arithmetic_side_effects.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39f0719a25de12045d76a809e5c3b43d179f77b9/tests%2Fui%2Farithmetic_side_effects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f0719a25de12045d76a809e5c3b43d179f77b9/tests%2Fui%2Farithmetic_side_effects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic_side_effects.stderr?ref=39f0719a25de12045d76a809e5c3b43d179f77b9", "patch": "@@ -1,28 +1,10 @@\n-error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:78:13\n-   |\n-LL |     let _ = String::new() + \"\";\n-   |             ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::arithmetic-side-effects` implied by `-D warnings`\n-\n-error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:86:27\n-   |\n-LL |     let inferred_string = string + \"\";\n-   |                           ^^^^^^^^^^^\n-\n-error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:90:13\n-   |\n-LL |     let _ = inferred_string + \"\";\n-   |             ^^^^^^^^^^^^^^^^^^^^\n-\n error: arithmetic operation that can potentially result in unexpected side-effects\n   --> $DIR/arithmetic_side_effects.rs:165:5\n    |\n LL |     _n += 1;\n    |     ^^^^^^^\n+   |\n+   = note: `-D clippy::arithmetic-side-effects` implied by `-D warnings`\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n   --> $DIR/arithmetic_side_effects.rs:166:5\n@@ -348,5 +330,5 @@ error: arithmetic operation that can potentially result in unexpected side-effec\n LL |     _n = -&_n;\n    |          ^^^^\n \n-error: aborting due to 58 previous errors\n+error: aborting due to 55 previous errors\n "}]}