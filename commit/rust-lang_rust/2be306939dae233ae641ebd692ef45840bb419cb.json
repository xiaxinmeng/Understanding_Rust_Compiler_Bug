{"sha": "2be306939dae233ae641ebd692ef45840bb419cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZTMwNjkzOWRhZTIzM2FlNjQxZWJkNjkyZWY0NTg0MGJiNDE5Y2I=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-01T17:20:57Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-10-01T22:35:15Z"}, "message": "Improve mutability error suggestions.\n\nThis commit improves mutability error suggestions by suggesting the\nremoval of `&mut` where a mutable borrow is being taken of a `&mut self`\nor a `self: &mut Self`.", "tree": {"sha": "8c880476d12eaf47c4fd5ca31a9b242c95eef539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c880476d12eaf47c4fd5ca31a9b242c95eef539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2be306939dae233ae641ebd692ef45840bb419cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAluyoSMACgkQAXYLT59T\n8VTb8g/9H67Hd7cUz0ZidryxUnv3H9NENIIwAJSR33fQBbz8Qc4L0XgmFsAXrYSN\nhQ99aPib+5rlxu8y9QFTg0J8XM4tFZjDmTKg0fUjetInm9Sdab9JBfZ6zHQt9Ibq\nqcMJ2ivkmkTutMW22ZgNbOnZVAr3JSFDLuIQUK1vApUeYZiBxKnTugXjTdBBTDfu\nJtmaIau6Exlxjf7s8yR/UDsZC2WitA2gis987O3cTF1Pol3t4lb+wjr5/J5tHvJi\nw0fy81+JFWNMzBu2092B6dtqIE9mMIIkVwVwJkXO3aT15VuZjhZKnG0Ou67XyNTt\nB9udZLEDtHy2uKHoywJKv2nAHuGJO9Q//7vCDr/bsCDJpERmLuoUSMMWUpv32Hnu\nTxDuh5EWqm9I95O9UxyD/O5RwGaUjZ1SPNgqEoXgBnnx3CkKUzvs/gu8eCs2aIC0\nPPMk9jv8fyB3E5nJDcpRRy5Rw5ZknrOfJjn6OvnMF+iGpjNbLULIhQPixOy688oV\nkeeVaBDeB1RoDwD70NzQlP0nS520A0LHv7myaLYFiqawHKHBgL8uoaG9xxMB4aGt\nta6Ly9NpL1upzIyXSPvyncg89D/j5eBrzL96Ei3veJ6ncykotJ9SMYH3gm9jhr2T\nnaS6RwTlQVroUBCX59cUQSVKx8mr2z1oG77IQUNsSUwotRl0duE=\n=Eb85\n-----END PGP SIGNATURE-----", "payload": "tree 8c880476d12eaf47c4fd5ca31a9b242c95eef539\nparent 43b5d725d0b458e317c52ef200d323998fa0c20f\nauthor David Wood <david@davidtw.co> 1538414457 +0200\ncommitter David Wood <david@davidtw.co> 1538433315 +0200\n\nImprove mutability error suggestions.\n\nThis commit improves mutability error suggestions by suggesting the\nremoval of `&mut` where a mutable borrow is being taken of a `&mut self`\nor a `self: &mut Self`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2be306939dae233ae641ebd692ef45840bb419cb", "html_url": "https://github.com/rust-lang/rust/commit/2be306939dae233ae641ebd692ef45840bb419cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2be306939dae233ae641ebd692ef45840bb419cb/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43b5d725d0b458e317c52ef200d323998fa0c20f", "url": "https://api.github.com/repos/rust-lang/rust/commits/43b5d725d0b458e317c52ef200d323998fa0c20f", "html_url": "https://github.com/rust-lang/rust/commit/43b5d725d0b458e317c52ef200d323998fa0c20f"}], "stats": {"total": 86, "additions": 67, "deletions": 19}, "files": [{"sha": "ba625fb08c82c6865d9103cc000c06f9f40c2e45", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2be306939dae233ae641ebd692ef45840bb419cb/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be306939dae233ae641ebd692ef45840bb419cb/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=2be306939dae233ae641ebd692ef45840bb419cb", "patch": "@@ -16,6 +16,7 @@ use rustc::mir::TerminatorKind;\n use rustc::ty::{self, Const, DefIdTree, TyS, TyKind, TyCtxt};\n use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n+use syntax_pos::symbol::keywords;\n \n use dataflow::move_paths::InitLocation;\n use borrow_check::MirBorrowckCtxt;\n@@ -217,6 +218,40 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"report_mutability_error: act={:?}, acted_on={:?}\", act, acted_on);\n \n         match the_place_err {\n+            // Suggest removing a `&mut` from the use of a mutable reference.\n+            Place::Local(local)\n+                if {\n+                    self.mir.local_decls.get(*local).map(|local_decl| {\n+                        if let ClearCrossCrate::Set(\n+                            mir::BindingForm::ImplicitSelf(kind)\n+                        ) = local_decl.is_user_variable.as_ref().unwrap() {\n+                            // Check if the user variable is a `&mut self` and we can therefore\n+                            // suggest removing the `&mut`.\n+                            //\n+                            // Deliberately fall into this case for all implicit self types,\n+                            // so that we don't fall in to the next case with them.\n+                            *kind == mir::ImplicitSelfKind::MutRef\n+                        } else if Some(keywords::SelfValue.name()) == local_decl.name {\n+                            // Otherwise, check if the name is the self kewyord - in which case\n+                            // we have an explicit self. Do the same thing in this case and check\n+                            // for a `self: &mut Self` to suggest removing the `&mut`.\n+                            if let ty::TyKind::Ref(\n+                                _, _, hir::Mutability::MutMutable\n+                            ) = local_decl.ty.sty {\n+                                true\n+                            } else {\n+                                false\n+                            }\n+                        } else {\n+                            false\n+                        }\n+                    }).unwrap_or(false)\n+                } =>\n+            {\n+                err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n+                err.span_label(span, \"try removing `&mut` here\");\n+            },\n+\n             // We want to suggest users use `let mut` for local (user\n             // variable) mutations...\n             Place::Local(local) if self.mir.local_decls[*local].can_be_made_mutable() => {"}, {"sha": "15139e4e8ae36a986fe131be1bf80895df3d9ca0", "filename": "src/test/ui/did_you_mean/issue-31424.nll.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2be306939dae233ae641ebd692ef45840bb419cb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2be306939dae233ae641ebd692ef45840bb419cb/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr?ref=2be306939dae233ae641ebd692ef45840bb419cb", "patch": "@@ -2,15 +2,19 @@ error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-31424.rs:17:9\n    |\n LL |         (&mut self).bar(); //~ ERROR cannot borrow\n-   |         ^^^^^^^^^^^ cannot borrow as mutable\n+   |         ^^^^^^^^^^^\n+   |         |\n+   |         cannot borrow as mutable\n+   |         try removing `&mut` here\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-31424.rs:23:9\n    |\n-LL |     fn bar(self: &mut Self) {\n-   |            ---- help: consider changing this to be mutable: `mut self`\n LL |         (&mut self).bar(); //~ ERROR cannot borrow\n-   |         ^^^^^^^^^^^ cannot borrow as mutable\n+   |         ^^^^^^^^^^^\n+   |         |\n+   |         cannot borrow as mutable\n+   |         try removing `&mut` here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "87ec3e5df0b81b7b9ade8464a296934d28559158", "filename": "src/test/ui/nll/issue-51191.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2be306939dae233ae641ebd692ef45840bb419cb/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be306939dae233ae641ebd692ef45840bb419cb/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.rs?ref=2be306939dae233ae641ebd692ef45840bb419cb", "patch": "@@ -14,23 +14,28 @@ struct Struct;\n \n impl Struct {\n     fn bar(self: &mut Self) {\n-        (&mut self).bar(); //~ ERROR cannot borrow\n+        (&mut self).bar();\n+        //~^ ERROR cannot borrow `self` as mutable, as it is not declared as mutable [E0596]\n     }\n \n     fn imm(self) {\n-        (&mut self).bar(); //~ ERROR cannot borrow\n+        (&mut self).bar();\n+        //~^ ERROR cannot borrow `self` as mutable, as it is not declared as mutable [E0596]\n     }\n \n     fn mtbl(mut self) {\n         (&mut self).bar();\n     }\n \n     fn immref(&self) {\n-        (&mut self).bar(); //~ ERROR cannot borrow\n+        (&mut self).bar();\n+        //~^ ERROR cannot borrow `self` as mutable, as it is not declared as mutable [E0596]\n+        //~^^ ERROR cannot borrow data in a `&` reference as mutable [E0596]\n     }\n \n     fn mtblref(&mut self) {\n         (&mut self).bar();\n+        //~^ ERROR cannot borrow `self` as mutable, as it is not declared as mutable [E0596]\n     }\n }\n "}, {"sha": "c5b5218f173ac1634eb365698f88558c23c710fb", "filename": "src/test/ui/nll/issue-51191.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2be306939dae233ae641ebd692ef45840bb419cb/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2be306939dae233ae641ebd692ef45840bb419cb/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr?ref=2be306939dae233ae641ebd692ef45840bb419cb", "patch": "@@ -1,36 +1,40 @@\n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-51191.rs:17:9\n    |\n-LL |     fn bar(self: &mut Self) {\n-   |            ---- help: consider changing this to be mutable: `mut self`\n-LL |         (&mut self).bar(); //~ ERROR cannot borrow\n-   |         ^^^^^^^^^^^ cannot borrow as mutable\n+LL |         (&mut self).bar();\n+   |         ^^^^^^^^^^^\n+   |         |\n+   |         cannot borrow as mutable\n+   |         try removing `&mut` here\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:21:9\n+  --> $DIR/issue-51191.rs:22:9\n    |\n LL |     fn imm(self) {\n    |            ---- help: consider changing this to be mutable: `mut self`\n-LL |         (&mut self).bar(); //~ ERROR cannot borrow\n+LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:29:9\n+  --> $DIR/issue-51191.rs:31:9\n    |\n-LL |         (&mut self).bar(); //~ ERROR cannot borrow\n+LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/issue-51191.rs:29:9\n+  --> $DIR/issue-51191.rs:31:9\n    |\n-LL |         (&mut self).bar(); //~ ERROR cannot borrow\n+LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-51191.rs:33:9\n+  --> $DIR/issue-51191.rs:37:9\n    |\n LL |         (&mut self).bar();\n-   |         ^^^^^^^^^^^ cannot borrow as mutable\n+   |         ^^^^^^^^^^^\n+   |         |\n+   |         cannot borrow as mutable\n+   |         try removing `&mut` here\n \n error: aborting due to 5 previous errors\n "}]}