{"sha": "871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b", "node_id": "C_kwDOAAsO6NoAKDg3MWNmMmJjOWU0MjIxZWMxZGZkY2ZkYjNmOGQ2NmFiNDJkNjIwMWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-08T10:08:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-08T10:08:57Z"}, "message": "Rollup merge of #91272 - FabianWolff:issue-90870-const-fn-eq, r=wesleywiser\n\nPrint a suggestion when comparing references to primitive types in `const fn`\n\nFixes #90870.", "tree": {"sha": "4fa59bf40f2861bed6eb5a82497fda254b714e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fa59bf40f2861bed6eb5a82497fda254b714e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhsIQ5CRBK7hj4Ov3rIwAAbcwIACZ8FvSkyeBkblXAHFtZMFqj\nhf6SB7dq9qQ6AlB40R9kj8sussxUhS1T1LkSVNva3RxbudXYj10HnLqFOrvGRWdh\nOfxlRIP557P1lYB16dOM0ynXsQbFDSlD7SLIEGqFsHi6U7WY/HLo3IU2OxKzP8YA\npywdJyj9lkWSRSgdJV66ZAhNUwbbOGUaulHC7kMjMzOpuTFUb/TOOcoqvbeJWccQ\nE750M+MuDiZWUkigQgFafGXUM8kqxn4OVCNiGm2Xfjf6Aa5XYGKL289Bj2lHrjVd\ngzwq6gQ8PljplmBAAGrb4fYQecrhCdVft+aD+tIZATuSva3Niom9p9ULPAgb1ZU=\n=SkCS\n-----END PGP SIGNATURE-----\n", "payload": "tree 4fa59bf40f2861bed6eb5a82497fda254b714e17\nparent c104236f820df5223d77f01f4f651808eb397720\nparent b38a54049ed89f00f0519b37d10ae2ae1e69b173\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638958137 +0100\ncommitter GitHub <noreply@github.com> 1638958137 +0100\n\nRollup merge of #91272 - FabianWolff:issue-90870-const-fn-eq, r=wesleywiser\n\nPrint a suggestion when comparing references to primitive types in `const fn`\n\nFixes #90870.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b", "html_url": "https://github.com/rust-lang/rust/commit/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c104236f820df5223d77f01f4f651808eb397720", "url": "https://api.github.com/repos/rust-lang/rust/commits/c104236f820df5223d77f01f4f651808eb397720", "html_url": "https://github.com/rust-lang/rust/commit/c104236f820df5223d77f01f4f651808eb397720"}, {"sha": "b38a54049ed89f00f0519b37d10ae2ae1e69b173", "url": "https://api.github.com/repos/rust-lang/rust/commits/b38a54049ed89f00f0519b37d10ae2ae1e69b173", "html_url": "https://github.com/rust-lang/rust/commit/b38a54049ed89f00f0519b37d10ae2ae1e69b173"}], "stats": {"total": 180, "additions": 170, "deletions": 10}, "files": [{"sha": "4a02e0595376b7f1bd1bbe0718f689ade9e114d3", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b", "patch": "@@ -801,7 +801,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                 if let Some(trait_id) = tcx.trait_of_item(callee) {\n                     trace!(\"attempting to call a trait method\");\n                     if !self.tcx.features().const_trait_impl {\n-                        self.check_op(ops::FnCallNonConst);\n+                        self.check_op(ops::FnCallNonConst(Some((callee, substs))));\n                         return;\n                     }\n \n@@ -857,7 +857,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                             }\n \n                             if !nonconst_call_permission {\n-                                self.check_op(ops::FnCallNonConst);\n+                                self.check_op(ops::FnCallNonConst(None));\n                                 return;\n                             }\n                         }\n@@ -926,7 +926,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                     }\n \n                     if !nonconst_call_permission {\n-                        self.check_op(ops::FnCallNonConst);\n+                        self.check_op(ops::FnCallNonConst(None));\n                         return;\n                     }\n                 }"}, {"sha": "421c559474a97d642b1720367355187aa556d5cd", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 63, "deletions": 7, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b", "patch": "@@ -1,12 +1,14 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n-use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::mir;\n+use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n+use rustc_middle::{mir, ty::AssocKind};\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n-use rustc_span::{Span, Symbol};\n+use rustc_span::{symbol::Ident, Span, Symbol};\n+use rustc_span::{BytePos, Pos};\n \n use super::ConstCx;\n \n@@ -72,17 +74,71 @@ impl NonConstOp for FnCallIndirect {\n \n /// A function call where the callee is not marked as `const`.\n #[derive(Debug)]\n-pub struct FnCallNonConst;\n-impl NonConstOp for FnCallNonConst {\n+pub struct FnCallNonConst<'tcx>(pub Option<(DefId, SubstsRef<'tcx>)>);\n+impl<'a> NonConstOp for FnCallNonConst<'a> {\n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        struct_span_err!(\n+        let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n             E0015,\n             \"calls in {}s are limited to constant functions, \\\n              tuple structs and tuple variants\",\n             ccx.const_kind(),\n-        )\n+        );\n+\n+        if let FnCallNonConst(Some((callee, substs))) = *self {\n+            if let Some(trait_def_id) = ccx.tcx.lang_items().eq_trait() {\n+                if let Some(eq_item) = ccx.tcx.associated_items(trait_def_id).find_by_name_and_kind(\n+                    ccx.tcx,\n+                    Ident::with_dummy_span(sym::eq),\n+                    AssocKind::Fn,\n+                    trait_def_id,\n+                ) {\n+                    if callee == eq_item.def_id && substs.len() == 2 {\n+                        match (substs[0].unpack(), substs[1].unpack()) {\n+                            (GenericArgKind::Type(self_ty), GenericArgKind::Type(rhs_ty))\n+                                if self_ty == rhs_ty\n+                                    && self_ty.is_ref()\n+                                    && self_ty.peel_refs().is_primitive() =>\n+                            {\n+                                let mut num_refs = 0;\n+                                let mut tmp_ty = self_ty;\n+                                while let rustc_middle::ty::Ref(_, inner_ty, _) = tmp_ty.kind() {\n+                                    num_refs += 1;\n+                                    tmp_ty = inner_ty;\n+                                }\n+                                let deref = \"*\".repeat(num_refs);\n+\n+                                if let Ok(call_str) =\n+                                    ccx.tcx.sess.source_map().span_to_snippet(span)\n+                                {\n+                                    if let Some(eq_idx) = call_str.find(\"==\") {\n+                                        if let Some(rhs_idx) = call_str[(eq_idx + 2)..]\n+                                            .find(|c: char| !c.is_whitespace())\n+                                        {\n+                                            let rhs_pos = span.lo()\n+                                                + BytePos::from_usize(eq_idx + 2 + rhs_idx);\n+                                            let rhs_span = span.with_lo(rhs_pos).with_hi(rhs_pos);\n+                                            err.multipart_suggestion(\n+                                                \"consider dereferencing here\",\n+                                                vec![\n+                                                    (span.shrink_to_lo(), deref.clone()),\n+                                                    (rhs_span, deref),\n+                                                ],\n+                                                Applicability::MachineApplicable,\n+                                            );\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                            _ => {}\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        err\n     }\n }\n "}, {"sha": "e767effcdd06f459d971aa143c0ba0f52d15d96e", "filename": "src/test/ui/consts/issue-90870.fixed", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.fixed?ref=871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b", "patch": "@@ -0,0 +1,34 @@\n+// Regression test for issue #90870.\n+\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+const fn f(a: &u8, b: &u8) -> bool {\n+    *a == *b\n+    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+    //~| HELP: consider dereferencing here\n+}\n+\n+const fn g(a: &&&&i64, b: &&&&i64) -> bool {\n+    ****a == ****b\n+    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+    //~| HELP: consider dereferencing here\n+}\n+\n+const fn h(mut a: &[u8], mut b: &[u8]) -> bool {\n+    while let ([l, at @ ..], [r, bt @ ..]) = (a, b) {\n+        if *l == *r {\n+        //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+        //~| HELP: consider dereferencing here\n+            a = at;\n+            b = bt;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    a.is_empty() && b.is_empty()\n+}\n+\n+fn main() {}"}, {"sha": "35b3c8242aa0c7ff5011b93b07946b5094dee049", "filename": "src/test/ui/consts/issue-90870.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.rs?ref=871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b", "patch": "@@ -0,0 +1,34 @@\n+// Regression test for issue #90870.\n+\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+const fn f(a: &u8, b: &u8) -> bool {\n+    a == b\n+    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+    //~| HELP: consider dereferencing here\n+}\n+\n+const fn g(a: &&&&i64, b: &&&&i64) -> bool {\n+    a == b\n+    //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+    //~| HELP: consider dereferencing here\n+}\n+\n+const fn h(mut a: &[u8], mut b: &[u8]) -> bool {\n+    while let ([l, at @ ..], [r, bt @ ..]) = (a, b) {\n+        if l == r {\n+        //~^ ERROR: calls in constant functions are limited to constant functions, tuple structs and tuple variants [E0015]\n+        //~| HELP: consider dereferencing here\n+            a = at;\n+            b = bt;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    a.is_empty() && b.is_empty()\n+}\n+\n+fn main() {}"}, {"sha": "0e33e6ebe5a5963adfccd3322ad6847ad4e89431", "filename": "src/test/ui/consts/issue-90870.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90870.stderr?ref=871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b", "patch": "@@ -0,0 +1,36 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-90870.rs:8:5\n+   |\n+LL |     a == b\n+   |     ^^^^^^\n+   |\n+help: consider dereferencing here\n+   |\n+LL |     *a == *b\n+   |     +     +\n+\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-90870.rs:14:5\n+   |\n+LL |     a == b\n+   |     ^^^^^^\n+   |\n+help: consider dereferencing here\n+   |\n+LL |     ****a == ****b\n+   |     ++++     ++++\n+\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-90870.rs:21:12\n+   |\n+LL |         if l == r {\n+   |            ^^^^^^\n+   |\n+help: consider dereferencing here\n+   |\n+LL |         if *l == *r {\n+   |            +     +\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0015`."}]}