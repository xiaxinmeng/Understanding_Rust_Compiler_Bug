{"sha": "9ed5b94b28e758996db395d472e0345d0ffe612d", "node_id": "C_kwDOAAsO6NoAKDllZDViOTRiMjhlNzU4OTk2ZGIzOTVkNDcyZTAzNDVkMGZmZTYxMmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-29T12:21:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-29T12:21:09Z"}, "message": "Auto merge of #90373 - tmiasko:union-qualification, r=oli-obk\n\nUse type based qualification for unions\n\nUnion field access is currently qualified based on the qualification of\na value previously assigned to the union. At the same time, every union\naccess transmutes the content of the union, which might result in a\ndifferent qualification.\n\nFor example, consider constants A and B as defined below, under the\ncurrent rules neither contains interior mutability, since a value used\nin the initial assignment did not contain `UnsafeCell` constructor.\n\n```rust\n#![feature(untagged_unions)]\n\nunion U { i: u32, c: std::cell::Cell<u32> }\nconst A: U = U { i: 0 };\nconst B: std::cell::Cell<u32> = unsafe { U { i: 0 }.c };\n```\n\nTo avoid the issue, the changes here propose to consider the content of\na union as opaque and use type based qualification for union types.\n\nFixes #90268.\n\n`@rust-lang/wg-const-eval`", "tree": {"sha": "1ad7db17a867c13471425e8578737298ad440099", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ad7db17a867c13471425e8578737298ad440099"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ed5b94b28e758996db395d472e0345d0ffe612d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed5b94b28e758996db395d472e0345d0ffe612d", "html_url": "https://github.com/rust-lang/rust/commit/9ed5b94b28e758996db395d472e0345d0ffe612d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ed5b94b28e758996db395d472e0345d0ffe612d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37f70a0e1e04086aee7ae57fbefd6d4071953506", "url": "https://api.github.com/repos/rust-lang/rust/commits/37f70a0e1e04086aee7ae57fbefd6d4071953506", "html_url": "https://github.com/rust-lang/rust/commit/37f70a0e1e04086aee7ae57fbefd6d4071953506"}, {"sha": "3f778f31b6b285d41973a36ee1f4a2291d5f6a03", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f778f31b6b285d41973a36ee1f4a2291d5f6a03", "html_url": "https://github.com/rust-lang/rust/commit/3f778f31b6b285d41973a36ee1f4a2291d5f6a03"}], "stats": {"total": 104, "additions": 103, "deletions": 1}, "files": [{"sha": "0fdb772c262dddbbe774fa948551a5c1a5e9e565", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ed5b94b28e758996db395d472e0345d0ffe612d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed5b94b28e758996db395d472e0345d0ffe612d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=9ed5b94b28e758996db395d472e0345d0ffe612d", "patch": "@@ -258,6 +258,9 @@ where\n                 if Q::in_adt_inherently(cx, def, substs) {\n                     return true;\n                 }\n+                if def.is_union() && Q::in_any_value_of_ty(cx, rvalue.ty(cx.body, cx.tcx)) {\n+                    return true;\n+                }\n             }\n \n             // Otherwise, proceed structurally..."}, {"sha": "38576230883cd8b87f514312c4fbab2bea021b0b", "filename": "compiler/rustc_const_eval/src/transform/check_consts/resolver.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ed5b94b28e758996db395d472e0345d0ffe612d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed5b94b28e758996db395d472e0345d0ffe612d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=9ed5b94b28e758996db395d472e0345d0ffe612d", "patch": "@@ -47,9 +47,19 @@ where\n         }\n     }\n \n-    fn assign_qualif_direct(&mut self, place: &mir::Place<'tcx>, value: bool) {\n+    fn assign_qualif_direct(&mut self, place: &mir::Place<'tcx>, mut value: bool) {\n         debug_assert!(!place.is_indirect());\n \n+        if !value {\n+            for (base, _elem) in place.iter_projections() {\n+                let base_ty = base.ty(self.ccx.body, self.ccx.tcx);\n+                if base_ty.ty.is_union() && Q::in_any_value_of_ty(self.ccx, base_ty.ty) {\n+                    value = true;\n+                    break;\n+                }\n+            }\n+        }\n+\n         match (value, place.as_ref()) {\n             (true, mir::PlaceRef { local, .. }) => {\n                 self.state.qualif.insert(local);"}, {"sha": "2054b5b89ed6e92975ce512b91705912e0946c2b", "filename": "src/test/ui/consts/qualif-union.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9ed5b94b28e758996db395d472e0345d0ffe612d/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed5b94b28e758996db395d472e0345d0ffe612d/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.rs?ref=9ed5b94b28e758996db395d472e0345d0ffe612d", "patch": "@@ -0,0 +1,32 @@\n+// Checks that unions use type based qualification. Regression test for issue #90268.\n+#![feature(untagged_unions)]\n+use std::cell::Cell;\n+\n+union U { i: u32, c: Cell<u32> }\n+\n+const C1: Cell<u32> = {\n+    unsafe { U { c: Cell::new(0) }.c }\n+};\n+\n+const C2: Cell<u32> = {\n+    unsafe { U { i : 0 }.c }\n+};\n+\n+const C3: Cell<u32> = {\n+    let mut u = U { i: 0 };\n+    u.i = 1;\n+    unsafe { u.c }\n+};\n+\n+const C4: U = U { i: 0 };\n+\n+const C5: [U; 1] = [U {i : 0}; 1];\n+\n+fn main() {\n+    // Interior mutability should prevent promotion.\n+    let _: &'static _ = &C1; //~ ERROR temporary value dropped while borrowed\n+    let _: &'static _ = &C2; //~ ERROR temporary value dropped while borrowed\n+    let _: &'static _ = &C3; //~ ERROR temporary value dropped while borrowed\n+    let _: &'static _ = &C4; //~ ERROR temporary value dropped while borrowed\n+    let _: &'static _ = &C5; //~ ERROR temporary value dropped while borrowed\n+}"}, {"sha": "fda8ad4a3bc819e8ee1fa5787b52a52bdcc6a289", "filename": "src/test/ui/consts/qualif-union.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9ed5b94b28e758996db395d472e0345d0ffe612d/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ed5b94b28e758996db395d472e0345d0ffe612d/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif-union.stderr?ref=9ed5b94b28e758996db395d472e0345d0ffe612d", "patch": "@@ -0,0 +1,57 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/qualif-union.rs:27:26\n+   |\n+LL |     let _: &'static _ = &C1;\n+   |            ----------    ^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/qualif-union.rs:28:26\n+   |\n+LL |     let _: &'static _ = &C2;\n+   |            ----------    ^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/qualif-union.rs:29:26\n+   |\n+LL |     let _: &'static _ = &C3;\n+   |            ----------    ^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/qualif-union.rs:30:26\n+   |\n+LL |     let _: &'static _ = &C4;\n+   |            ----------    ^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL |     let _: &'static _ = &C5;\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/qualif-union.rs:31:26\n+   |\n+LL |     let _: &'static _ = &C5;\n+   |            ----------    ^^ creates a temporary which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}]}