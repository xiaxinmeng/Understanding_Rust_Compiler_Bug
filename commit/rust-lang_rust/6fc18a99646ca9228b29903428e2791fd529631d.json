{"sha": "6fc18a99646ca9228b29903428e2791fd529631d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYzE4YTk5NjQ2Y2E5MjI4YjI5OTAzNDI4ZTI3OTFmZDUyOTYzMWQ=", "commit": {"author": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-06-04T05:25:20Z"}, "committer": {"name": "Jonas Platte", "email": "jplatte+git@posteo.de", "date": "2019-11-14T00:33:45Z"}, "message": "Centralize panic macro documentation", "tree": {"sha": "a5dd4c50f38bfd6d1d2b3a472ab09bc5665394be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5dd4c50f38bfd6d1d2b3a472ab09bc5665394be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fc18a99646ca9228b29903428e2791fd529631d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIwEABYIADQWIQSDGkJBzFPeoiYaT9p9Jh13HZFTeAUCXcyg6RYcanBsYXR0ZStn\naXRAcG9zdGVvLmRlAAoJEH0mHXcdkVN46m0A/iy2PxlYSZE/duMaPc4U2y3qJHSW\nycQBuJ37wL8HU5v9AP4yx64q7RBjOIVHNVUK2KRr8uXNnLjecZlbJgIK6QRODw==\n=8Nmb\n-----END PGP SIGNATURE-----", "payload": "tree a5dd4c50f38bfd6d1d2b3a472ab09bc5665394be\nparent ded5ee0013f6126f885baf5e072c20ba8b86ee6a\nauthor Chris Gregory <czipperz@gmail.com> 1559625920 -0700\ncommitter Jonas Platte <jplatte+git@posteo.de> 1573691625 +0100\n\nCentralize panic macro documentation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc18a99646ca9228b29903428e2791fd529631d", "html_url": "https://github.com/rust-lang/rust/commit/6fc18a99646ca9228b29903428e2791fd529631d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fc18a99646ca9228b29903428e2791fd529631d/comments", "author": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jplatte", "id": 951129, "node_id": "MDQ6VXNlcjk1MTEyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/951129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jplatte", "html_url": "https://github.com/jplatte", "followers_url": "https://api.github.com/users/jplatte/followers", "following_url": "https://api.github.com/users/jplatte/following{/other_user}", "gists_url": "https://api.github.com/users/jplatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/jplatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jplatte/subscriptions", "organizations_url": "https://api.github.com/users/jplatte/orgs", "repos_url": "https://api.github.com/users/jplatte/repos", "events_url": "https://api.github.com/users/jplatte/events{/privacy}", "received_events_url": "https://api.github.com/users/jplatte/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ded5ee0013f6126f885baf5e072c20ba8b86ee6a", "html_url": "https://github.com/rust-lang/rust/commit/ded5ee0013f6126f885baf5e072c20ba8b86ee6a"}], "stats": {"total": 99, "additions": 49, "deletions": 50}, "files": [{"sha": "7f27e62fb159836b3984ccdf1b635592d78f7939", "filename": "src/libcore/macros/mod.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fc18a99646ca9228b29903428e2791fd529631d/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fc18a99646ca9228b29903428e2791fd529631d/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=6fc18a99646ca9228b29903428e2791fd529631d", "patch": "@@ -1,6 +1,4 @@\n-/// Panics the current thread.\n-///\n-/// For details, see `std::macros`.\n+#[doc(include = \"panic.md\")]\n #[macro_export]\n #[allow_internal_unstable(core_panic,\n     // FIXME(anp, eddyb) `core_intrinsics` is used here to allow calling", "previous_filename": "src/libcore/macros.rs"}, {"sha": "3ecfc43be049b534478bb5bdaf58dfac63f31a94", "filename": "src/libcore/macros/panic.md", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6fc18a99646ca9228b29903428e2791fd529631d/src%2Flibcore%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fc18a99646ca9228b29903428e2791fd529631d/src%2Flibcore%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fpanic.md?ref=6fc18a99646ca9228b29903428e2791fd529631d", "patch": "@@ -0,0 +1,47 @@\n+Panics the current thread.\n+\n+This allows a program to terminate immediately and provide feedback\n+to the caller of the program. `panic!` should be used when a program reaches\n+an unrecoverable state.\n+\n+This macro is the perfect way to assert conditions in example code and in\n+tests. `panic!` is closely tied with the `unwrap` method of both [`Option`]\n+and [`Result`][runwrap] enums. Both implementations call `panic!` when they are set\n+to None or Err variants.\n+\n+This macro is used to inject panic into a Rust thread, causing the thread to\n+panic entirely. Each thread's panic can be reaped as the `Box<Any>` type,\n+and the single-argument form of the `panic!` macro will be the value which\n+is transmitted.\n+\n+[`Result`] enum is often a better solution for recovering from errors than\n+using the `panic!` macro. This macro should be used to avoid proceeding using\n+incorrect values, such as from external sources. Detailed information about\n+error handling is found in the [book].\n+\n+The multi-argument form of this macro panics with a string and has the\n+[`format!`] syntax for building a string.\n+\n+See also the macro [`compile_error!`], for raising errors during compilation.\n+\n+[runwrap]: ../std/result/enum.Result.html#method.unwrap\n+[`Option`]: ../std/option/enum.Option.html#method.unwrap\n+[`Result`]: ../std/result/enum.Result.html\n+[`format!`]: ../std/macro.format.html\n+[`compile_error!`]: ../std/macro.compile_error.html\n+[book]: ../book/ch09-00-error-handling.html\n+\n+# Current implementation\n+\n+If the main thread panics it will terminate all your threads and end your\n+program with code `101`.\n+\n+# Examples\n+\n+```should_panic\n+# #![allow(unreachable_code)]\n+panic!();\n+panic!(\"this is a terrible mistake!\");\n+panic!(4); // panic with the value of 4 to be collected elsewhere\n+panic!(\"this is a {} {message}\", \"fancy\", message = \"message\");\n+```"}, {"sha": "2df79ee97fbacec9c271972fb6eaf15ac76c291a", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 47, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6fc18a99646ca9228b29903428e2791fd529631d/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fc18a99646ca9228b29903428e2791fd529631d/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=6fc18a99646ca9228b29903428e2791fd529631d", "patch": "@@ -4,53 +4,7 @@\n //! library. Each macro is available for use when linking against the standard\n //! library.\n \n-/// Panics the current thread.\n-///\n-/// This allows a program to terminate immediately and provide feedback\n-/// to the caller of the program. `panic!` should be used when a program reaches\n-/// an unrecoverable state.\n-///\n-/// This macro is the perfect way to assert conditions in example code and in\n-/// tests. `panic!` is closely tied with the `unwrap` method of both [`Option`]\n-/// and [`Result`][runwrap] enums. Both implementations call `panic!` when they are set\n-/// to None or Err variants.\n-///\n-/// This macro is used to inject panic into a Rust thread, causing the thread to\n-/// panic entirely. Each thread's panic can be reaped as the `Box<Any>` type,\n-/// and the single-argument form of the `panic!` macro will be the value which\n-/// is transmitted.\n-///\n-/// [`Result`] enum is often a better solution for recovering from errors than\n-/// using the `panic!` macro. This macro should be used to avoid proceeding using\n-/// incorrect values, such as from external sources. Detailed information about\n-/// error handling is found in the [book].\n-///\n-/// The multi-argument form of this macro panics with a string and has the\n-/// [`format!`] syntax for building a string.\n-///\n-/// See also the macro [`compile_error!`], for raising errors during compilation.\n-///\n-/// [runwrap]: ../std/result/enum.Result.html#method.unwrap\n-/// [`Option`]: ../std/option/enum.Option.html#method.unwrap\n-/// [`Result`]: ../std/result/enum.Result.html\n-/// [`format!`]: ../std/macro.format.html\n-/// [`compile_error!`]: ../std/macro.compile_error.html\n-/// [book]: ../book/ch09-00-error-handling.html\n-///\n-/// # Current implementation\n-///\n-/// If the main thread panics it will terminate all your threads and end your\n-/// program with code `101`.\n-///\n-/// # Examples\n-///\n-/// ```should_panic\n-/// # #![allow(unreachable_code)]\n-/// panic!();\n-/// panic!(\"this is a terrible mistake!\");\n-/// panic!(4); // panic with the value of 4 to be collected elsewhere\n-/// panic!(\"this is a {} {message}\", \"fancy\", message = \"message\");\n-/// ```\n+#[doc(include = \"../libcore/macros/panic.md\")]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(libstd_sys_internals)]"}]}