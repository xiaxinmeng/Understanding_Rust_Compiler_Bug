{"sha": "e62e926a8a6e2446a1bb0908942247a63580f0a1", "node_id": "C_kwDOAAsO6NoAKGU2MmU5MjZhOGE2ZTI0NDZhMWJiMDkwODk0MjI0N2E2MzU4MGYwYTE", "commit": {"author": {"name": "Tianyi Song", "email": "42670338+tysg@users.noreply.github.com", "date": "2022-01-28T08:15:23Z"}, "committer": {"name": "Tianyi Song", "email": "42670338+tysg@users.noreply.github.com", "date": "2022-02-11T06:17:12Z"}, "message": "Use text range of name after macro expansion", "tree": {"sha": "a3369b746702bbb8a6595ecf80158eeafffc87c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3369b746702bbb8a6595ecf80158eeafffc87c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e62e926a8a6e2446a1bb0908942247a63580f0a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e62e926a8a6e2446a1bb0908942247a63580f0a1", "html_url": "https://github.com/rust-lang/rust/commit/e62e926a8a6e2446a1bb0908942247a63580f0a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e62e926a8a6e2446a1bb0908942247a63580f0a1/comments", "author": {"login": "tysg", "id": 42670338, "node_id": "MDQ6VXNlcjQyNjcwMzM4", "avatar_url": "https://avatars.githubusercontent.com/u/42670338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tysg", "html_url": "https://github.com/tysg", "followers_url": "https://api.github.com/users/tysg/followers", "following_url": "https://api.github.com/users/tysg/following{/other_user}", "gists_url": "https://api.github.com/users/tysg/gists{/gist_id}", "starred_url": "https://api.github.com/users/tysg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tysg/subscriptions", "organizations_url": "https://api.github.com/users/tysg/orgs", "repos_url": "https://api.github.com/users/tysg/repos", "events_url": "https://api.github.com/users/tysg/events{/privacy}", "received_events_url": "https://api.github.com/users/tysg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tysg", "id": 42670338, "node_id": "MDQ6VXNlcjQyNjcwMzM4", "avatar_url": "https://avatars.githubusercontent.com/u/42670338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tysg", "html_url": "https://github.com/tysg", "followers_url": "https://api.github.com/users/tysg/followers", "following_url": "https://api.github.com/users/tysg/following{/other_user}", "gists_url": "https://api.github.com/users/tysg/gists{/gist_id}", "starred_url": "https://api.github.com/users/tysg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tysg/subscriptions", "organizations_url": "https://api.github.com/users/tysg/orgs", "repos_url": "https://api.github.com/users/tysg/repos", "events_url": "https://api.github.com/users/tysg/events{/privacy}", "received_events_url": "https://api.github.com/users/tysg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08348d79fa3ccb2aeeea87e758dcd5f1614c7ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/08348d79fa3ccb2aeeea87e758dcd5f1614c7ad8", "html_url": "https://github.com/rust-lang/rust/commit/08348d79fa3ccb2aeeea87e758dcd5f1614c7ad8"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "daba317e427883861c4851ebdfde37f315d4d3d6", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e62e926a8a6e2446a1bb0908942247a63580f0a1/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62e926a8a6e2446a1bb0908942247a63580f0a1/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=e62e926a8a6e2446a1bb0908942247a63580f0a1", "patch": "@@ -1133,6 +1133,34 @@ pub mod foo$0;\n         )\n     }\n \n+    #[test]\n+    fn test_rename_mod_in_macro() {\n+        check(\n+            \"bar\",\n+            r#\"\n+//- /foo.rs\n+\n+//- /lib.rs\n+macro_rules! submodule {\n+    ($name:ident) => {\n+        mod $name;\n+    };\n+}\n+\n+submodule!($0foo);\n+\"#,\n+            r#\"\n+macro_rules! submodule {\n+    ($name:ident) => {\n+        mod $name;\n+    };\n+}\n+\n+submodule!(bar);\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn test_enum_variant_from_module_1() {\n         cov_mark::check!(rename_non_local);"}, {"sha": "cf511feb1550e85ce35a3ec17b56381f0d6d774c", "filename": "crates/ide_db/src/rename.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e62e926a8a6e2446a1bb0908942247a63580f0a1/crates%2Fide_db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e62e926a8a6e2446a1bb0908942247a63580f0a1/crates%2Fide_db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Frename.rs?ref=e62e926a8a6e2446a1bb0908942247a63580f0a1", "patch": "@@ -25,7 +25,6 @@ use std::fmt;\n use base_db::{AnchoredPathBuf, FileId, FileRange};\n use either::Either;\n use hir::{AsAssocItem, FieldSource, HasSource, InFile, ModuleSource, Semantics};\n-use stdx::never;\n use syntax::{\n     ast::{self, HasName},\n     AstNode, SyntaxKind, TextRange, T,\n@@ -188,16 +187,16 @@ fn rename_mod(\n         source_change.push_file_system_edit(move_file);\n     }\n \n-    if let Some(InFile { file_id, value: decl_source }) = module.declaration_source(sema.db) {\n+    if let Some(InFile { file_id, value: _ }) = module.declaration_source(sema.db) {\n         let file_id = file_id.original_file(sema.db);\n-        match decl_source.name() {\n-            Some(name) => source_change.insert_source_edit(\n+        if let Some(file_range) = Definition::Module(module).range_for_rename(sema) {\n+            source_change.insert_source_edit(\n                 file_id,\n-                TextEdit::replace(name.syntax().text_range(), new_name.to_string()),\n-            ),\n-            _ => never!(\"Module source node is missing a name\"),\n+                TextEdit::replace(file_range.range, new_name.to_string()),\n+            )\n         }\n     }\n+\n     let def = Definition::Module(module);\n     let usages = def.usages(sema).all();\n     let ref_edits = usages.iter().map(|(&file_id, references)| {"}]}