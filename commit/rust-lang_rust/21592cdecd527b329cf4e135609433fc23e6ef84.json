{"sha": "21592cdecd527b329cf4e135609433fc23e6ef84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNTkyY2RlY2Q1MjdiMzI5Y2Y0ZTEzNTYwOTQzM2ZjMjNlNmVmODQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-08T21:38:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:49:24Z"}, "message": "move `Debug` bounds onto `Lift`\n\nJust for convenience.", "tree": {"sha": "73a0d7f8367604adaf61e4e0ee2be969f32d47fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a0d7f8367604adaf61e4e0ee2be969f32d47fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21592cdecd527b329cf4e135609433fc23e6ef84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21592cdecd527b329cf4e135609433fc23e6ef84", "html_url": "https://github.com/rust-lang/rust/commit/21592cdecd527b329cf4e135609433fc23e6ef84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21592cdecd527b329cf4e135609433fc23e6ef84/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be27a5a7756b25c958bc37932b3851a3cb38ed9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/be27a5a7756b25c958bc37932b3851a3cb38ed9e", "html_url": "https://github.com/rust-lang/rust/commit/be27a5a7756b25c958bc37932b3851a3cb38ed9e"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "6af8fee6631592e19269cc0f32c4ce90c2bb3915", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21592cdecd527b329cf4e135609433fc23e6ef84/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21592cdecd527b329cf4e135609433fc23e6ef84/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=21592cdecd527b329cf4e135609433fc23e6ef84", "patch": "@@ -348,7 +348,6 @@ impl<'tcx> Index<CanonicalVar> for CanonicalVarValues<'tcx> {\n impl<'gcx: 'tcx, 'tcx, T> Canonicalize<'gcx, 'tcx> for QueryResult<'tcx, T>\n where\n     T: TypeFoldable<'tcx> + Lift<'gcx>,\n-    T::Lifted: Debug,\n {\n     // we ought to intern this, but I'm too lazy just now\n     type Canonicalized = Lrc<Canonical<'gcx, QueryResult<'gcx, T::Lifted>>>;"}, {"sha": "d61434daf9934b7761c3dee650792eeb1b2ed933", "filename": "src/librustc/infer/canonical/query_result.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21592cdecd527b329cf4e135609433fc23e6ef84/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21592cdecd527b329cf4e135609433fc23e6ef84/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs?ref=21592cdecd527b329cf4e135609433fc23e6ef84", "patch": "@@ -63,7 +63,6 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     ) -> Result<CanonicalizedQueryResult<'gcx, T>, NoSolution>\n     where\n         T: Debug + Lift<'gcx> + TypeFoldable<'tcx>,\n-        T::Lifted: Debug,\n     {\n         let query_result = self.make_query_result(inference_vars, answer, fulfill_cx)?;\n         let (canonical_result, _) = self.canonicalize_response(&query_result);"}, {"sha": "111167cfc1090a3d08d01db444238f7dcf4edbc4", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21592cdecd527b329cf4e135609433fc23e6ef84/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21592cdecd527b329cf4e135609433fc23e6ef84/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=21592cdecd527b329cf4e135609433fc23e6ef84", "patch": "@@ -64,6 +64,7 @@ use std::borrow::Borrow;\n use std::cmp::Ordering;\n use std::collections::hash_map::{self, Entry};\n use std::hash::{Hash, Hasher};\n+use std::fmt::Debug;\n use std::mem;\n use std::ops::Deref;\n use std::iter;\n@@ -1503,8 +1504,8 @@ impl<'gcx: 'tcx, 'tcx> GlobalCtxt<'gcx> {\n /// contain the TypeVariants key or if the address of the interned\n /// pointer differs. The latter case is possible if a primitive type,\n /// e.g. `()` or `u8`, was interned in a different context.\n-pub trait Lift<'tcx> {\n-    type Lifted: 'tcx;\n+pub trait Lift<'tcx>: Debug {\n+    type Lifted: Debug + 'tcx;\n     fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Self::Lifted>;\n }\n "}]}