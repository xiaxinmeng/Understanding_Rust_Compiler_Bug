{"sha": "fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZTIyYWZkYmU0ZDFiNjEyYmE3MjI1NTFiYTFjMDk5ZTdmM2UwYjA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T18:10:53Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T19:57:28Z"}, "message": "librustdoc: Remove `pure` from fuzzer and rustdoc.", "tree": {"sha": "0118c47a5d40d1cde310a38f576185a48427aae7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0118c47a5d40d1cde310a38f576185a48427aae7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "html_url": "https://github.com/rust-lang/rust/commit/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c60c141b6f499ba551b53bc562925269d2f187", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c60c141b6f499ba551b53bc562925269d2f187", "html_url": "https://github.com/rust-lang/rust/commit/e7c60c141b6f499ba551b53bc562925269d2f187"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "fc4d1e387dd86a75ac7a162fdd9f30d48e8ef880", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "patch": "@@ -525,7 +525,7 @@ pub fn split_no_trailing(s: &str, sepfn: &fn(char) -> bool) -> ~[~str] {\n     split_inner(s, sepfn, len(s), true, false)\n }\n \n-pure fn split_inner(s: &str, sepfn: &fn(cc: char) -> bool, count: uint,\n+fn split_inner(s: &str, sepfn: &fn(cc: char) -> bool, count: uint,\n                allow_empty: bool, allow_trailing_empty: bool) -> ~[~str] {\n     let l = len(s);\n     let mut result = ~[], i = 0u, start = 0u, done = 0u;"}, {"sha": "eedd3bebedfc42bdee89e1d14963579fa6cb780b", "filename": "src/libfuzzer/ast_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibfuzzer%2Fast_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibfuzzer%2Fast_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Fast_match.rs?ref=fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "patch": "@@ -25,8 +25,8 @@ fn vec_equal<T>(v: ~[T],\n     return true;\n }\n \n-pure fn builtin_equal<T>(&&a: T, &&b: T) -> bool { return a == b; }\n-pure fn builtin_equal_int(&&a: int, &&b: int) -> bool { return a == b; }\n+fn builtin_equal<T>(&&a: T, &&b: T) -> bool { return a == b; }\n+fn builtin_equal_int(&&a: int, &&b: int) -> bool { return a == b; }\n \n fn main() {\n     fail_unless!((builtin_equal(5, 5)));"}, {"sha": "71f7072fa7f9641989dd121807ad4d0bb431c5da", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "patch": "@@ -95,11 +95,11 @@ pub fn common_exprs() -> ~[ast::expr] {\n     ]\n }\n \n-pub pure fn safe_to_steal_expr(e: @ast::expr, tm: test_mode) -> bool {\n+pub fn safe_to_steal_expr(e: @ast::expr, tm: test_mode) -> bool {\n     safe_to_use_expr(*e, tm)\n }\n \n-pub pure fn safe_to_use_expr(e: ast::expr, tm: test_mode) -> bool {\n+pub fn safe_to_use_expr(e: ast::expr, tm: test_mode) -> bool {\n     match tm {\n       tm_converge => {\n         match e.node {"}, {"sha": "84f2f5191f31a000831391013ac4ddacef20a7f6", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "patch": "@@ -29,10 +29,10 @@ pub enum OutputFormat {\n }\n \n impl cmp::Eq for OutputFormat {\n-    pure fn eq(&self, other: &OutputFormat) -> bool {\n+    fn eq(&self, other: &OutputFormat) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }\n-    pure fn ne(&self, other: &OutputFormat) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &OutputFormat) -> bool { !(*self).eq(other) }\n }\n \n /// How to organize the output\n@@ -44,10 +44,10 @@ pub enum OutputStyle {\n }\n \n impl cmp::Eq for OutputStyle {\n-    pure fn eq(&self, other: &OutputStyle) -> bool {\n+    fn eq(&self, other: &OutputStyle) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n     }\n-    pure fn ne(&self, other: &OutputStyle) -> bool { !(*self).eq(other) }\n+    fn ne(&self, other: &OutputStyle) -> bool { !(*self).eq(other) }\n }\n \n /// The configuration for a rustdoc session"}, {"sha": "4ed510c353b5542dfa8bd83899c61c18143e2a94", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "patch": "@@ -358,11 +358,11 @@ impl PageUtils for ~[Page] {\n }\n \n pub trait Item {\n-    pure fn item(&self) -> ItemDoc;\n+    fn item(&self) -> ItemDoc;\n }\n \n impl Item for ItemTag {\n-    pure fn item(&self) -> ItemDoc {\n+    fn item(&self) -> ItemDoc {\n         match self {\n           &doc::ModTag(ref doc) => copy doc.item,\n           &doc::NmodTag(ref doc) => copy doc.item,\n@@ -378,64 +378,64 @@ impl Item for ItemTag {\n }\n \n impl Item for SimpleItemDoc {\n-    pure fn item(&self) -> ItemDoc { copy self.item }\n+    fn item(&self) -> ItemDoc { copy self.item }\n }\n \n impl Item for ModDoc {\n-    pure fn item(&self) -> ItemDoc { copy self.item }\n+    fn item(&self) -> ItemDoc { copy self.item }\n }\n \n impl Item for NmodDoc {\n-    pure fn item(&self) -> ItemDoc { copy self.item }\n+    fn item(&self) -> ItemDoc { copy self.item }\n }\n \n impl Item for EnumDoc {\n-    pure fn item(&self) -> ItemDoc { copy self.item }\n+    fn item(&self) -> ItemDoc { copy self.item }\n }\n \n impl Item for TraitDoc {\n-    pure fn item(&self) -> ItemDoc { copy self.item }\n+    fn item(&self) -> ItemDoc { copy self.item }\n }\n \n impl Item for ImplDoc {\n-    pure fn item(&self) -> ItemDoc { copy self.item }\n+    fn item(&self) -> ItemDoc { copy self.item }\n }\n \n impl Item for StructDoc {\n-    pure fn item(&self) -> ItemDoc { copy self.item }\n+    fn item(&self) -> ItemDoc { copy self.item }\n }\n \n pub trait ItemUtils {\n-    pure fn id(&self) -> AstId;\n-    pure fn name(&self) -> ~str;\n-    pure fn path(&self) -> ~[~str];\n-    pure fn brief(&self) -> Option<~str>;\n-    pure fn desc(&self) -> Option<~str>;\n-    pure fn sections(&self) -> ~[Section];\n+    fn id(&self) -> AstId;\n+    fn name(&self) -> ~str;\n+    fn path(&self) -> ~[~str];\n+    fn brief(&self) -> Option<~str>;\n+    fn desc(&self) -> Option<~str>;\n+    fn sections(&self) -> ~[Section];\n }\n \n impl<A:Item> ItemUtils for A {\n-    pure fn id(&self) -> AstId {\n+    fn id(&self) -> AstId {\n         self.item().id\n     }\n \n-    pure fn name(&self) -> ~str {\n+    fn name(&self) -> ~str {\n         copy self.item().name\n     }\n \n-    pure fn path(&self) -> ~[~str] {\n+    fn path(&self) -> ~[~str] {\n         copy self.item().path\n     }\n \n-    pure fn brief(&self) -> Option<~str> {\n+    fn brief(&self) -> Option<~str> {\n         copy self.item().brief\n     }\n \n-    pure fn desc(&self) -> Option<~str> {\n+    fn desc(&self) -> Option<~str> {\n         copy self.item().desc\n     }\n \n-    pure fn sections(&self) -> ~[Section] {\n+    fn sections(&self) -> ~[Section] {\n         copy self.item().sections\n     }\n }"}, {"sha": "227eb25aa81fefe2e07efea550e0d21d1baaa7d1", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "patch": "@@ -45,8 +45,8 @@ fn run(\n     writer_factory: WriterFactory\n ) -> doc::Doc {\n \n-    pure fn mods_last(item1: &doc::ItemTag, item2: &doc::ItemTag) -> bool {\n-        pure fn is_mod(item: &doc::ItemTag) -> bool {\n+    fn mods_last(item1: &doc::ItemTag, item2: &doc::ItemTag) -> bool {\n+        fn is_mod(item: &doc::ItemTag) -> bool {\n             match *item {\n               doc::ModTag(_) => true,\n               _ => false"}, {"sha": "b3fb874cdb26031e79bfaf49a25058ba1ce6d742", "filename": "src/librustdoc/sort_item_name_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_name_pass.rs?ref=fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "patch": "@@ -16,7 +16,7 @@ use pass::Pass;\n use sort_pass;\n \n pub fn mk_pass() -> Pass {\n-    pure fn by_item_name(item1: &doc::ItemTag, item2: &doc::ItemTag) -> bool {\n+    fn by_item_name(item1: &doc::ItemTag, item2: &doc::ItemTag) -> bool {\n         (*item1).name() <= (*item2).name()\n     }\n     sort_pass::mk_pass(~\"sort_item_name\", by_item_name)"}, {"sha": "96727f6386d237d5ed2311ee754497d09922a789", "filename": "src/librustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_type_pass.rs?ref=fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "patch": "@@ -15,8 +15,8 @@ use pass::Pass;\n use sort_pass;\n \n pub fn mk_pass() -> Pass {\n-    pure fn by_score(item1: &doc::ItemTag, item2: &doc::ItemTag) -> bool {\n-        pure fn score(item: &doc::ItemTag) -> int {\n+    fn by_score(item1: &doc::ItemTag, item2: &doc::ItemTag) -> bool {\n+        fn score(item: &doc::ItemTag) -> int {\n             match *item {\n               doc::ConstTag(_) => 0,\n               doc::TyTag(_) => 1,"}, {"sha": "e66eb3c0fae308f93747cde1e65fdf8503bdc8a8", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=fbe22afdbe4d1b612ba722551ba1c099e7f3e0b0", "patch": "@@ -21,7 +21,7 @@ use util::NominalOp;\n \n use std::sort;\n \n-pub type ItemLtEqOp = @pure fn(v1: &doc::ItemTag, v2:  &doc::ItemTag) -> bool;\n+pub type ItemLtEqOp = @fn(v1: &doc::ItemTag, v2:  &doc::ItemTag) -> bool;\n \n type ItemLtEq = NominalOp<ItemLtEqOp>;\n \n@@ -59,7 +59,7 @@ fn fold_mod(\n \n #[test]\n fn test() {\n-    pure fn name_lteq(item1: &doc::ItemTag, item2: &doc::ItemTag) -> bool {\n+    fn name_lteq(item1: &doc::ItemTag, item2: &doc::ItemTag) -> bool {\n         (*item1).name() <= (*item2).name()\n     }\n \n@@ -76,7 +76,7 @@ fn test() {\n \n #[test]\n fn should_be_stable() {\n-    pure fn always_eq(_item1: &doc::ItemTag, _item2: &doc::ItemTag) -> bool {\n+    fn always_eq(_item1: &doc::ItemTag, _item2: &doc::ItemTag) -> bool {\n         true\n     }\n "}]}