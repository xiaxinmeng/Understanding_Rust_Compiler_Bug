{"sha": "4dfda64b39cc47ac75280461f46e121958990fca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZmRhNjRiMzljYzQ3YWM3NTI4MDQ2MWY0NmUxMjE5NTg5OTBmY2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-13T16:38:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-13T16:38:26Z"}, "message": "Cleanup workspace loading a tiny bit", "tree": {"sha": "d6baa54c962334f627d143837b52183cea829bff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6baa54c962334f627d143837b52183cea829bff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dfda64b39cc47ac75280461f46e121958990fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dfda64b39cc47ac75280461f46e121958990fca", "html_url": "https://github.com/rust-lang/rust/commit/4dfda64b39cc47ac75280461f46e121958990fca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dfda64b39cc47ac75280461f46e121958990fca/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeda30e301d74e40fc1eb992fad581afb627126f", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeda30e301d74e40fc1eb992fad581afb627126f", "html_url": "https://github.com/rust-lang/rust/commit/aeda30e301d74e40fc1eb992fad581afb627126f"}], "stats": {"total": 86, "additions": 40, "deletions": 46}, "files": [{"sha": "540b57ae4c8b45e393562a21754648b9530e99f2", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4dfda64b39cc47ac75280461f46e121958990fca/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfda64b39cc47ac75280461f46e121958990fca/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=4dfda64b39cc47ac75280461f46e121958990fca", "patch": "@@ -65,6 +65,10 @@ pub struct CargoConfig {\n     /// rustc target\n     pub target: Option<String>,\n \n+    /// Don't load sysroot crates (`std`, `core` & friends). Might be useful\n+    /// when debugging isolated issues.\n+    pub no_sysroot: bool,\n+\n     /// rustc private crate source\n     pub rustc_source: Option<AbsPathBuf>,\n }\n@@ -140,27 +144,27 @@ impl PackageData {\n impl CargoWorkspace {\n     pub fn from_cargo_metadata(\n         cargo_toml: &AbsPath,\n-        cargo_features: &CargoConfig,\n+        config: &CargoConfig,\n     ) -> Result<CargoWorkspace> {\n         let mut meta = MetadataCommand::new();\n         meta.cargo_path(toolchain::cargo());\n         meta.manifest_path(cargo_toml.to_path_buf());\n-        if cargo_features.all_features {\n+        if config.all_features {\n             meta.features(CargoOpt::AllFeatures);\n         } else {\n-            if cargo_features.no_default_features {\n+            if config.no_default_features {\n                 // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n                 // https://github.com/oli-obk/cargo_metadata/issues/79\n                 meta.features(CargoOpt::NoDefaultFeatures);\n             }\n-            if !cargo_features.features.is_empty() {\n-                meta.features(CargoOpt::SomeFeatures(cargo_features.features.clone()));\n+            if !config.features.is_empty() {\n+                meta.features(CargoOpt::SomeFeatures(config.features.clone()));\n             }\n         }\n         if let Some(parent) = cargo_toml.parent() {\n             meta.current_dir(parent.to_path_buf());\n         }\n-        if let Some(target) = cargo_features.target.as_ref() {\n+        if let Some(target) = config.target.as_ref() {\n             meta.other_options(vec![String::from(\"--filter-platform\"), target.clone()]);\n         }\n         let mut meta = meta.exec().with_context(|| {\n@@ -170,8 +174,8 @@ impl CargoWorkspace {\n         let mut out_dir_by_id = FxHashMap::default();\n         let mut cfgs = FxHashMap::default();\n         let mut proc_macro_dylib_paths = FxHashMap::default();\n-        if cargo_features.load_out_dirs_from_check {\n-            let resources = load_extern_resources(cargo_toml, cargo_features)?;\n+        if config.load_out_dirs_from_check {\n+            let resources = load_extern_resources(cargo_toml, config)?;\n             out_dir_by_id = resources.out_dirs;\n             cfgs = resources.cfgs;\n             proc_macro_dylib_paths = resources.proc_dylib_paths;"}, {"sha": "8a1a60e0eef68163d3781050d6eb0bb03077c30e", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4dfda64b39cc47ac75280461f46e121958990fca/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfda64b39cc47ac75280461f46e121958990fca/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=4dfda64b39cc47ac75280461f46e121958990fca", "patch": "@@ -1,3 +1,7 @@\n+//! Handles lowering of build-system specific workspace information (`cargo\n+//! metadata` or `rust-project.json`) into representation stored in the salsa\n+//! database -- `CrateGraph`.\n+\n use std::{fmt, fs, path::Component, process::Command};\n \n use anyhow::{Context, Result};\n@@ -56,11 +60,7 @@ impl fmt::Debug for ProjectWorkspace {\n }\n \n impl ProjectWorkspace {\n-    pub fn load(\n-        manifest: ProjectManifest,\n-        cargo_config: &CargoConfig,\n-        with_sysroot: bool,\n-    ) -> Result<ProjectWorkspace> {\n+    pub fn load(manifest: ProjectManifest, config: &CargoConfig) -> Result<ProjectWorkspace> {\n         let res = match manifest {\n             ProjectManifest::ProjectJson(project_json) => {\n                 let file = fs::read_to_string(&project_json).with_context(|| {\n@@ -84,32 +84,30 @@ impl ProjectWorkspace {\n                     cmd\n                 })?;\n \n-                let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml, cargo_config)\n-                    .with_context(|| {\n+                let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml, config).with_context(\n+                    || {\n                         format!(\n                             \"Failed to read Cargo metadata from Cargo.toml file {}, {}\",\n                             cargo_toml.display(),\n                             cargo_version\n                         )\n-                    })?;\n-                let sysroot = if with_sysroot {\n+                    },\n+                )?;\n+                let sysroot = if config.no_sysroot {\n+                    Sysroot::default()\n+                } else {\n                     Sysroot::discover(&cargo_toml).with_context(|| {\n                         format!(\n                             \"Failed to find sysroot for Cargo.toml file {}. Is rust-src installed?\",\n                             cargo_toml.display()\n                         )\n                     })?\n-                } else {\n-                    Sysroot::default()\n                 };\n \n-                let rustc = if let Some(rustc_dir) = &cargo_config.rustc_source {\n-                    Some(\n-                        CargoWorkspace::from_cargo_metadata(&rustc_dir, cargo_config)\n-                            .with_context(|| {\n-                                format!(\"Failed to read Cargo metadata for Rust sources\")\n-                            })?,\n-                    )\n+                let rustc = if let Some(rustc_dir) = &config.rustc_source {\n+                    Some(CargoWorkspace::from_cargo_metadata(&rustc_dir, config).with_context(\n+                        || format!(\"Failed to read Cargo metadata for Rust sources\"),\n+                    )?)\n                 } else {\n                     None\n                 };"}, {"sha": "76526c66c038a4eb224327e063e198b65b8948d1", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dfda64b39cc47ac75280461f46e121958990fca/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfda64b39cc47ac75280461f46e121958990fca/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=4dfda64b39cc47ac75280461f46e121958990fca", "patch": "@@ -21,7 +21,6 @@ pub fn load_cargo(\n     let ws = ProjectWorkspace::load(\n         root,\n         &CargoConfig { load_out_dirs_from_check, ..Default::default() },\n-        true,\n     )?;\n \n     let (sender, receiver) = unbounded();"}, {"sha": "d16796590087947737db0eb0e231d1b4dba43d07", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dfda64b39cc47ac75280461f46e121958990fca/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfda64b39cc47ac75280461f46e121958990fca/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=4dfda64b39cc47ac75280461f46e121958990fca", "patch": "@@ -49,7 +49,6 @@ pub struct Config {\n     pub hover: HoverConfig,\n     pub semantic_tokens_refresh: bool,\n \n-    pub with_sysroot: bool,\n     pub linked_projects: Vec<LinkedProject>,\n     pub root_path: AbsPathBuf,\n }\n@@ -155,7 +154,6 @@ impl Config {\n         Config {\n             client_caps: ClientCapsConfig::default(),\n \n-            with_sysroot: true,\n             publish_diagnostics: true,\n             diagnostics: DiagnosticsConfig::default(),\n             diagnostics_map: DiagnosticsMapConfig::default(),\n@@ -209,7 +207,6 @@ impl Config {\n \n         let data = ConfigData::from_json(json);\n \n-        self.with_sysroot = data.withSysroot;\n         self.publish_diagnostics = data.diagnostics_enable;\n         self.diagnostics = DiagnosticsConfig {\n             disable_experimental: !data.diagnostics_enableExperimental,\n@@ -246,6 +243,7 @@ impl Config {\n             load_out_dirs_from_check: data.cargo_loadOutDirsFromCheck,\n             target: data.cargo_target.clone(),\n             rustc_source: rustc_source,\n+            no_sysroot: data.cargo_noSysroot,\n         };\n         self.runnables = RunnablesConfig {\n             override_cargo: data.runnables_overrideCargo,\n@@ -492,6 +490,7 @@ config_data! {\n         cargo_loadOutDirsFromCheck: bool = false,\n         cargo_noDefaultFeatures: bool    = false,\n         cargo_target: Option<String>     = None,\n+        cargo_noSysroot: bool            = false,\n \n         checkOnSave_enable: bool                         = true,\n         checkOnSave_allFeatures: Option<bool>            = None,\n@@ -544,7 +543,6 @@ config_data! {\n         rustfmt_extraArgs: Vec<String>               = Vec::new(),\n         rustfmt_overrideCommand: Option<Vec<String>> = None,\n \n-        withSysroot: bool = true,\n         rustcSource : Option<String> = None,\n     }\n }"}, {"sha": "fa6e09f42bda25b4d89999dae8888b004e225fc1", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4dfda64b39cc47ac75280461f46e121958990fca/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfda64b39cc47ac75280461f46e121958990fca/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=4dfda64b39cc47ac75280461f46e121958990fca", "patch": "@@ -96,17 +96,12 @@ impl GlobalState {\n         self.task_pool.handle.spawn({\n             let linked_projects = self.config.linked_projects.clone();\n             let cargo_config = self.config.cargo.clone();\n-            let with_sysroot = self.config.with_sysroot.clone();\n             move || {\n                 let workspaces = linked_projects\n                     .iter()\n                     .map(|project| match project {\n                         LinkedProject::ProjectManifest(manifest) => {\n-                            project_model::ProjectWorkspace::load(\n-                                manifest.clone(),\n-                                &cargo_config,\n-                                with_sysroot,\n-                            )\n+                            project_model::ProjectWorkspace::load(manifest.clone(), &cargo_config)\n                         }\n                         LinkedProject::InlineJsonProject(it) => {\n                             project_model::ProjectWorkspace::load_inline(it.clone())"}, {"sha": "b210b98f0d5cf598f77733f3068f66d27fee3518", "filename": "crates/rust-analyzer/tests/rust-analyzer/support.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4dfda64b39cc47ac75280461f46e121958990fca/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dfda64b39cc47ac75280461f46e121958990fca/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs?ref=4dfda64b39cc47ac75280461f46e121958990fca", "patch": "@@ -12,7 +12,7 @@ use lsp_types::{\n     notification::Exit, request::Shutdown, TextDocumentIdentifier, Url, WorkDoneProgress,\n };\n use lsp_types::{ProgressParams, ProgressParamsValue};\n-use project_model::ProjectManifest;\n+use project_model::{CargoConfig, ProjectManifest};\n use rust_analyzer::{\n     config::{ClientCapsConfig, Config, FilesConfig, FilesWatcher, LinkedProject},\n     main_loop,\n@@ -47,8 +47,8 @@ impl<'a> Project<'a> {\n         self\n     }\n \n-    pub(crate) fn with_sysroot(mut self, sysroot: bool) -> Project<'a> {\n-        self.with_sysroot = sysroot;\n+    pub(crate) fn with_sysroot(mut self, yes: bool) -> Project<'a> {\n+        self.with_sysroot = yes;\n         self\n     }\n \n@@ -90,7 +90,7 @@ impl<'a> Project<'a> {\n                 work_done_progress: true,\n                 ..Default::default()\n             },\n-            with_sysroot: self.with_sysroot,\n+            cargo: CargoConfig { no_sysroot: !self.with_sysroot, ..Default::default() },\n             linked_projects,\n             files: FilesConfig { watcher: FilesWatcher::Client, exclude: Vec::new() },\n             ..Config::new(tmp_dir_path)"}, {"sha": "220d44abc8f6e77d386d0da71b8420b71a9ef347", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4dfda64b39cc47ac75280461f46e121958990fca/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/4dfda64b39cc47ac75280461f46e121958990fca/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=4dfda64b39cc47ac75280461f46e121958990fca", "patch": "@@ -283,6 +283,11 @@\n                     \"default\": null,\n                     \"description\": \"Specify the compilation target\"\n                 },\n+                \"rust-analyzer.noSysroot\": {\n+                    \"markdownDescription\": \"Internal config for debugging, disables loading of sysroot crates\",\n+                    \"type\": \"boolean\",\n+                    \"default\": false\n+                },\n                 \"rust-analyzer.rustfmt.extraArgs\": {\n                     \"type\": \"array\",\n                     \"items\": {\n@@ -605,11 +610,6 @@\n                     },\n                     \"default\": null\n                 },\n-                \"rust-analyzer.withSysroot\": {\n-                    \"markdownDescription\": \"Internal config for debugging, disables loading of sysroot crates\",\n-                    \"type\": \"boolean\",\n-                    \"default\": true\n-                },\n                 \"rust-analyzer.diagnostics.enable\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,"}]}