{"sha": "8cf092d5de113fc218b84421a2db4449a370ccb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZjA5MmQ1ZGUxMTNmYzIxOGI4NDQyMWEyZGI0NDQ5YTM3MGNjYjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T12:16:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T12:16:50Z"}, "message": ":arrow_up salsa", "tree": {"sha": "8fe4173465c56a0ce4dc68ee4b43ef8f7c1293de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fe4173465c56a0ce4dc68ee4b43ef8f7c1293de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cf092d5de113fc218b84421a2db4449a370ccb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf092d5de113fc218b84421a2db4449a370ccb6", "html_url": "https://github.com/rust-lang/rust/commit/8cf092d5de113fc218b84421a2db4449a370ccb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cf092d5de113fc218b84421a2db4449a370ccb6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae97cd59ff086e7efb6409f14c2f8ae8861596e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae97cd59ff086e7efb6409f14c2f8ae8861596e4", "html_url": "https://github.com/rust-lang/rust/commit/ae97cd59ff086e7efb6409f14c2f8ae8861596e4"}], "stats": {"total": 237, "additions": 79, "deletions": 158}, "files": [{"sha": "bfa0bf2edbb68dfcf886805939029ad93dc2b91c", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8cf092d5de113fc218b84421a2db4449a370ccb6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8cf092d5de113fc218b84421a2db4449a370ccb6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8cf092d5de113fc218b84421a2db4449a370ccb6", "patch": "@@ -726,7 +726,7 @@ dependencies = [\n  \"ra_syntax 0.1.0\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"salsa 0.10.0-alpha1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"salsa 0.10.0-alpha3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n ]\n \n@@ -746,6 +746,7 @@ dependencies = [\n  \"ra_syntax 0.1.0\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"salsa 0.10.0-alpha3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n ]\n \n@@ -766,6 +767,7 @@ dependencies = [\n  \"rayon 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"salsa 0.10.0-alpha3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n  \"unicase 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1088,7 +1090,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"salsa\"\n-version = \"0.10.0-alpha1\"\n+version = \"0.10.0-alpha3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"derive-new 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1097,13 +1099,13 @@ dependencies = [\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"salsa-macros 0.10.0-alpha1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"salsa-macros 0.10.0-alpha3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"salsa-macros\"\n-version = \"0.10.0-alpha1\"\n+version = \"0.10.0-alpha3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1694,8 +1696,8 @@ dependencies = [\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n \"checksum rusty-fork 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9591f190d2852720b679c21f66ad929f9f1d7bb09d1193c26167586029d8489c\"\n \"checksum ryu 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb9e9b8cde282a9fe6a42dd4681319bfb63f121b8a8ee9439c6f4107e58a46f7\"\n-\"checksum salsa 0.10.0-alpha1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4cc048429df53bf0720b93cfa5fa8c3fc3dc7dd65ab41b3f754a8870e7b5c834\"\n-\"checksum salsa-macros 0.10.0-alpha1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d5a1aeb618da4b1a00d2885d045154ac30deb04109f3ce73c1fd789caba4fb1\"\n+\"checksum salsa 0.10.0-alpha3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"135c0977b23f8a9dc16744dd5495989110e3763ba5ea41e386741c7f8901e285\"\n+\"checksum salsa-macros 0.10.0-alpha3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c9c93b5efed7281334c4bed8470b278076d1ccd6a60da59a15cd0d57792afff8\"\n \"checksum same-file 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8f20c4be53a8a1ff4c1f1b2bd14570d2f634628709752f0702ecdd2b3f9a5267\"\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\""}, {"sha": "3568da905a89ded429067a01cb0507952267b50f", "filename": "crates/ra_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2FCargo.toml?ref=8cf092d5de113fc218b84421a2db4449a370ccb6", "patch": "@@ -6,7 +6,7 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n \n [dependencies]\n relative-path = \"0.4.0\"\n-salsa = \"0.10.0-alpha1\"\n+salsa = \"0.10.0-alpha3\"\n rustc-hash = \"1.0\"\n parking_lot = \"0.7.0\"\n ra_arena = { path = \"../ra_arena\" }"}, {"sha": "275894252dddf88c16461fb3a480224922ce036f", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=8cf092d5de113fc218b84421a2db4449a370ccb6", "patch": "@@ -5,11 +5,8 @@\n /// Note that neither this module, nor any other part of the analyzer's core do\n /// actual IO. See `vfs` and `project_model` in the `ra_lsp_server` crate for how\n /// actual IO is done and lowered to input.\n-use std::sync::Arc;\n-\n use relative_path::RelativePathBuf;\n use rustc_hash::FxHashMap;\n-use salsa;\n \n use ra_syntax::SmolStr;\n use rustc_hash::FxHashSet;\n@@ -146,45 +143,6 @@ impl CrateGraph {\n     }\n }\n \n-#[salsa::query_group]\n-pub trait FilesDatabase: salsa::Database {\n-    /// Text of the file.\n-    #[salsa::input]\n-    fn file_text(&self, file_id: FileId) -> Arc<String>;\n-    /// Path to a file, relative to the root of its source root.\n-    #[salsa::input]\n-    fn file_relative_path(&self, file_id: FileId) -> RelativePathBuf;\n-    /// Source root of the file.\n-    #[salsa::input]\n-    fn file_source_root(&self, file_id: FileId) -> SourceRootId;\n-    /// Contents of the source root.\n-    #[salsa::input]\n-    fn source_root(&self, id: SourceRootId) -> Arc<SourceRoot>;\n-    fn source_root_crates(&self, id: SourceRootId) -> Arc<Vec<CrateId>>;\n-    /// The set of \"local\" (that is, from the current workspace) roots.\n-    /// Files in local roots are assumed to change frequently.\n-    #[salsa::input]\n-    fn local_roots(&self) -> Arc<Vec<SourceRootId>>;\n-    /// The set of roots for crates.io libraries.\n-    /// Files in libraries are assumed to never change.\n-    #[salsa::input]\n-    fn library_roots(&self) -> Arc<Vec<SourceRootId>>;\n-    /// The crate graph.\n-    #[salsa::input]\n-    fn crate_graph(&self) -> Arc<CrateGraph>;\n-}\n-\n-fn source_root_crates(db: &impl FilesDatabase, id: SourceRootId) -> Arc<Vec<CrateId>> {\n-    let root = db.source_root(id);\n-    let graph = db.crate_graph();\n-    let res = root\n-        .files\n-        .values()\n-        .filter_map(|&it| graph.crate_id_for_crate_root(it))\n-        .collect::<Vec<_>>();\n-    Arc::new(res)\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::{CrateGraph, FileId, SmolStr};"}, {"sha": "7e13f70bc0bbe15de4ccc5b0c7a22b08042579df", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 54, "deletions": 14, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=8cf092d5de113fc218b84421a2db4449a370ccb6", "patch": "@@ -4,17 +4,18 @@ mod input;\n mod loc2id;\n pub mod mock;\n \n-use std::panic;\n+use std::{\n+    panic, sync::Arc,\n+};\n \n use ra_syntax::{TextUnit, TextRange, SourceFile, TreeArc};\n+use relative_path::RelativePathBuf;\n \n pub use ::salsa as salsa;\n pub use crate::{\n     cancellation::Canceled,\n     input::{\n-        FilesDatabase, FileId, CrateId, SourceRoot, SourceRootId, CrateGraph, Dependency,\n-        FileTextQuery, FileSourceRootQuery, SourceRootQuery, SourceRootCratesQuery, LocalRootsQuery, LibraryRootsQuery, CrateGraphQuery,\n-        FileRelativePathQuery\n+        FileId, CrateId, SourceRoot, SourceRootId, CrateGraph, Dependency,\n     },\n     loc2id::LocationIntener,\n };\n@@ -50,16 +51,6 @@ pub trait BaseDatabase: salsa::Database + panic::RefUnwindSafe {\n     }\n }\n \n-#[salsa::query_group]\n-pub trait SyntaxDatabase: crate::input::FilesDatabase + BaseDatabase {\n-    fn source_file(&self, file_id: FileId) -> TreeArc<SourceFile>;\n-}\n-\n-fn source_file(db: &impl SyntaxDatabase, file_id: FileId) -> TreeArc<SourceFile> {\n-    let text = db.file_text(file_id);\n-    SourceFile::parse(&*text)\n-}\n-\n #[derive(Clone, Copy, Debug)]\n pub struct FilePosition {\n     pub file_id: FileId,\n@@ -71,3 +62,52 @@ pub struct FileRange {\n     pub file_id: FileId,\n     pub range: TextRange,\n }\n+\n+#[salsa::query_group]\n+pub trait FilesDatabase: salsa::Database {\n+    /// Text of the file.\n+    #[salsa::input]\n+    fn file_text(&self, file_id: FileId) -> Arc<String>;\n+    /// Path to a file, relative to the root of its source root.\n+    #[salsa::input]\n+    fn file_relative_path(&self, file_id: FileId) -> RelativePathBuf;\n+    /// Source root of the file.\n+    #[salsa::input]\n+    fn file_source_root(&self, file_id: FileId) -> SourceRootId;\n+    /// Contents of the source root.\n+    #[salsa::input]\n+    fn source_root(&self, id: SourceRootId) -> Arc<SourceRoot>;\n+    fn source_root_crates(&self, id: SourceRootId) -> Arc<Vec<CrateId>>;\n+    /// The set of \"local\" (that is, from the current workspace) roots.\n+    /// Files in local roots are assumed to change frequently.\n+    #[salsa::input]\n+    fn local_roots(&self) -> Arc<Vec<SourceRootId>>;\n+    /// The set of roots for crates.io libraries.\n+    /// Files in libraries are assumed to never change.\n+    #[salsa::input]\n+    fn library_roots(&self) -> Arc<Vec<SourceRootId>>;\n+    /// The crate graph.\n+    #[salsa::input]\n+    fn crate_graph(&self) -> Arc<CrateGraph>;\n+}\n+\n+fn source_root_crates(db: &impl FilesDatabase, id: SourceRootId) -> Arc<Vec<CrateId>> {\n+    let root = db.source_root(id);\n+    let graph = db.crate_graph();\n+    let res = root\n+        .files\n+        .values()\n+        .filter_map(|&it| graph.crate_id_for_crate_root(it))\n+        .collect::<Vec<_>>();\n+    Arc::new(res)\n+}\n+\n+#[salsa::query_group]\n+pub trait SyntaxDatabase: FilesDatabase + BaseDatabase {\n+    fn source_file(&self, file_id: FileId) -> TreeArc<SourceFile>;\n+}\n+\n+fn source_file(db: &impl SyntaxDatabase, file_id: FileId) -> TreeArc<SourceFile> {\n+    let text = db.file_text(file_id);\n+    SourceFile::parse(&*text)\n+}"}, {"sha": "3d802ade4f3e5222691010a40793abc2573383bd", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=8cf092d5de113fc218b84421a2db4449a370ccb6", "patch": "@@ -12,6 +12,8 @@ rustc-hash = \"1.0\"\n parking_lot = \"0.7.0\"\n ena = \"0.11\"\n join_to_string = \"0.1.3\"\n+salsa = \"0.10.0-alpha3\"\n+\n ra_syntax = { path = \"../ra_syntax\" }\n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }"}, {"sha": "aa54336b8867170103f96ac565957302fc22c818", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 5, "deletions": 45, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=8cf092d5de113fc218b84421a2db4449a370ccb6", "patch": "@@ -12,6 +12,7 @@ use crate::{db, HirInterner};\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n \n+#[salsa::database(ra_db::FilesDatabase, ra_db::SyntaxDatabase, db::HirDatabase)]\n #[derive(Debug)]\n pub(crate) struct MockDatabase {\n     events: Mutex<Option<Vec<salsa::Event<MockDatabase>>>>,\n@@ -181,8 +182,7 @@ impl MockDatabase {\n     pub(crate) fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event<MockDatabase>> {\n         *self.events.lock() = Some(Vec::new());\n         f();\n-        let events = self.events.lock().take().unwrap();\n-        events\n+        self.events.lock().take().unwrap()\n     }\n \n     pub(crate) fn log_executed(&self, f: impl FnOnce()) -> Vec<String> {\n@@ -192,51 +192,11 @@ impl MockDatabase {\n             .filter_map(|e| match e.kind {\n                 // This pretty horrible, but `Debug` is the only way to inspect\n                 // QueryDescriptor at the moment.\n-                salsa::EventKind::WillExecute { descriptor } => Some(format!(\"{:?}\", descriptor)),\n+                salsa::EventKind::WillExecute { database_key } => {\n+                    Some(format!(\"{:?}\", database_key))\n+                }\n                 _ => None,\n             })\n             .collect()\n     }\n }\n-\n-salsa::database_storage! {\n-    pub(crate) struct MockDatabaseStorage for MockDatabase {\n-        impl ra_db::FilesDatabase {\n-            fn file_text() for ra_db::FileTextQuery;\n-            fn file_relative_path() for ra_db::FileRelativePathQuery;\n-            fn file_source_root() for ra_db::FileSourceRootQuery;\n-            fn source_root() for ra_db::SourceRootQuery;\n-            fn source_root_crates() for ra_db::SourceRootCratesQuery;\n-            fn local_roots() for ra_db::LocalRootsQuery;\n-            fn library_roots() for ra_db::LibraryRootsQuery;\n-            fn crate_graph() for ra_db::CrateGraphQuery;\n-        }\n-        impl ra_db::SyntaxDatabase {\n-            fn source_file() for ra_db::SourceFileQuery;\n-        }\n-        impl db::HirDatabase {\n-            fn hir_source_file() for db::HirSourceFileQuery;\n-            fn expand_macro_invocation() for db::ExpandMacroInvocationQuery;\n-            fn module_tree() for db::ModuleTreeQuery;\n-            fn fn_scopes() for db::FnScopesQuery;\n-            fn file_items() for db::FileItemsQuery;\n-            fn file_item() for db::FileItemQuery;\n-            fn lower_module() for db::LowerModuleQuery;\n-            fn lower_module_module() for db::LowerModuleModuleQuery;\n-            fn lower_module_source_map() for db::LowerModuleSourceMapQuery;\n-            fn item_map() for db::ItemMapQuery;\n-            fn submodules() for db::SubmodulesQuery;\n-            fn infer() for db::InferQuery;\n-            fn type_for_def() for db::TypeForDefQuery;\n-            fn type_for_field() for db::TypeForFieldQuery;\n-            fn struct_data() for db::StructDataQuery;\n-            fn enum_data() for db::EnumDataQuery;\n-            fn impls_in_module() for db::ImplsInModuleQuery;\n-            fn impls_in_crate() for db::ImplsInCrateQuery;\n-            fn body_hir() for db::BodyHirQuery;\n-            fn body_syntax_mapping() for db::BodySyntaxMappingQuery;\n-            fn fn_signature() for db::FnSignatureQuery;\n-            fn generic_params() for db::GenericParamsQuery;\n-        }\n-    }\n-}"}, {"sha": "61942bbbb3b1b3c174b9b5b9e07351d6303c6415", "filename": "crates/ra_ide_api/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_ide_api%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_ide_api%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2FCargo.toml?ref=8cf092d5de113fc218b84421a2db4449a370ccb6", "patch": "@@ -13,6 +13,7 @@ fst = \"0.3.1\"\n rustc-hash = \"1.0\"\n parking_lot = \"0.7.0\"\n unicase = \"2.2.0\"\n+salsa = \"0.10.0-alpha3\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_ide_api_light = { path = \"../ra_ide_api_light\" }"}, {"sha": "f0190ae514fe843938de3feb6a3398729aec1f4d", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 7, "deletions": 49, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=8cf092d5de113fc218b84421a2db4449a370ccb6", "patch": "@@ -7,6 +7,13 @@ use ra_db::{\n \n use crate::{symbol_index, LineIndex};\n \n+#[salsa::database(\n+    ra_db::FilesDatabase,\n+    ra_db::SyntaxDatabase,\n+    LineIndexDatabase,\n+    symbol_index::SymbolsDatabase,\n+    hir::db::HirDatabase\n+)]\n #[derive(Debug)]\n pub(crate) struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n@@ -64,52 +71,3 @@ fn line_index(db: &impl ra_db::FilesDatabase, file_id: FileId) -> Arc<LineIndex>\n     let text = db.file_text(file_id);\n     Arc::new(LineIndex::new(&*text))\n }\n-\n-salsa::database_storage! {\n-    pub(crate) struct RootDatabaseStorage for RootDatabase {\n-        impl ra_db::FilesDatabase {\n-            fn file_text() for ra_db::FileTextQuery;\n-            fn file_relative_path() for ra_db::FileRelativePathQuery;\n-            fn file_source_root() for ra_db::FileSourceRootQuery;\n-            fn source_root() for ra_db::SourceRootQuery;\n-            fn source_root_crates() for ra_db::SourceRootCratesQuery;\n-            fn local_roots() for ra_db::LocalRootsQuery;\n-            fn library_roots() for ra_db::LibraryRootsQuery;\n-            fn crate_graph() for ra_db::CrateGraphQuery;\n-        }\n-        impl ra_db::SyntaxDatabase {\n-            fn source_file() for ra_db::SourceFileQuery;\n-        }\n-        impl LineIndexDatabase {\n-            fn line_index() for LineIndexQuery;\n-        }\n-        impl symbol_index::SymbolsDatabase {\n-            fn file_symbols() for symbol_index::FileSymbolsQuery;\n-            fn library_symbols() for symbol_index::LibrarySymbolsQuery;\n-        }\n-        impl hir::db::HirDatabase {\n-            fn hir_source_file() for hir::db::HirSourceFileQuery;\n-            fn expand_macro_invocation() for hir::db::ExpandMacroInvocationQuery;\n-            fn module_tree() for hir::db::ModuleTreeQuery;\n-            fn fn_scopes() for hir::db::FnScopesQuery;\n-            fn file_items() for hir::db::FileItemsQuery;\n-            fn file_item() for hir::db::FileItemQuery;\n-            fn lower_module() for hir::db::LowerModuleQuery;\n-            fn lower_module_module() for hir::db::LowerModuleModuleQuery;\n-            fn lower_module_source_map() for hir::db::LowerModuleSourceMapQuery;\n-            fn item_map() for hir::db::ItemMapQuery;\n-            fn submodules() for hir::db::SubmodulesQuery;\n-            fn infer() for hir::db::InferQuery;\n-            fn type_for_def() for hir::db::TypeForDefQuery;\n-            fn type_for_field() for hir::db::TypeForFieldQuery;\n-            fn struct_data() for hir::db::StructDataQuery;\n-            fn enum_data() for hir::db::EnumDataQuery;\n-            fn impls_in_module() for hir::db::ImplsInModuleQuery;\n-            fn impls_in_crate() for hir::db::ImplsInCrateQuery;\n-            fn body_hir() for hir::db::BodyHirQuery;\n-            fn body_syntax_mapping() for hir::db::BodySyntaxMappingQuery;\n-            fn fn_signature() for hir::db::FnSignatureQuery;\n-            fn generic_params() for hir::db::GenericParamsQuery;\n-        }\n-    }\n-}"}, {"sha": "d499dd878dcfe29d684c28a2f706214153d30278", "filename": "crates/ra_ide_api/src/status.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf092d5de113fc218b84421a2db4449a370ccb6/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs?ref=8cf092d5de113fc218b84421a2db4449a370ccb6", "patch": "@@ -6,7 +6,7 @@ use ra_db::{\n use crate::db::RootDatabase;\n \n pub(crate) fn status(db: &RootDatabase) -> String {\n-    let n_parsed_files = db.query(SourceFileQuery).keys::<Vec<_>>().len();\n+    let n_parsed_files = db.query(SourceFileQuery).entries::<Vec<_>>().len();\n     let n_defs = {\n         let interner: &hir::HirInterner = db.as_ref();\n         interner.len()"}]}