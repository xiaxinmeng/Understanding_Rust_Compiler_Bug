{"sha": "78f7e3745fe59db1e6309b1e42ea25df3317ee36", "node_id": "C_kwDOAAsO6NoAKDc4ZjdlMzc0NWZlNTlkYjFlNjMwOWIxZTQyZWEyNWRmMzMxN2VlMzY", "commit": {"author": {"name": "Evan Typanski", "email": "evan.typanski@microfocus.com", "date": "2022-05-24T15:50:12Z"}, "committer": {"name": "Evan Typanski", "email": "evan.typanski@microfocus.com", "date": "2022-05-24T15:50:12Z"}, "message": "Fix `manual_range_contains` with equal precedence", "tree": {"sha": "5ce53d4900c03d360c5d1a6b1f1fe67acc9fee42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ce53d4900c03d360c5d1a6b1f1fe67acc9fee42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78f7e3745fe59db1e6309b1e42ea25df3317ee36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78f7e3745fe59db1e6309b1e42ea25df3317ee36", "html_url": "https://github.com/rust-lang/rust/commit/78f7e3745fe59db1e6309b1e42ea25df3317ee36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78f7e3745fe59db1e6309b1e42ea25df3317ee36/comments", "author": null, "committer": null, "parents": [{"sha": "050cdd6689254db96b47ff86732e286839a67584", "url": "https://api.github.com/repos/rust-lang/rust/commits/050cdd6689254db96b47ff86732e286839a67584", "html_url": "https://github.com/rust-lang/rust/commit/050cdd6689254db96b47ff86732e286839a67584"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "416d6de55c8b51492f7e32aab1d25b1fe5a8891a", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/78f7e3745fe59db1e6309b1e42ea25df3317ee36/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f7e3745fe59db1e6309b1e42ea25df3317ee36/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=78f7e3745fe59db1e6309b1e42ea25df3317ee36", "patch": "@@ -194,7 +194,7 @@ impl<'tcx> LateLintPass<'tcx> for Ranges {\n             },\n             ExprKind::Binary(ref op, l, r) => {\n                 if meets_msrv(self.msrv, msrvs::RANGE_CONTAINS) {\n-                    check_possible_range_contains(cx, op.node, l, r, expr);\n+                    check_possible_range_contains(cx, op.node, l, r, expr, expr.span);\n                 }\n             },\n             _ => {},\n@@ -213,12 +213,12 @@ fn check_possible_range_contains(\n     left: &Expr<'_>,\n     right: &Expr<'_>,\n     expr: &Expr<'_>,\n+    span: Span,\n ) {\n     if in_constant(cx, expr.hir_id) {\n         return;\n     }\n \n-    let span = expr.span;\n     let combine_and = match op {\n         BinOpKind::And | BinOpKind::BitAnd => true,\n         BinOpKind::Or | BinOpKind::BitOr => false,\n@@ -294,6 +294,15 @@ fn check_possible_range_contains(\n             );\n         }\n     }\n+\n+    // If the LHS is the same operator, we have to recurse to get the \"real\" RHS, since they have\n+    // the same operator precedence.\n+    if let ExprKind::Binary(ref lhs_op, _left, new_lhs) = left.kind {\n+        if op == lhs_op.node {\n+            let new_span = Span::new(new_lhs.span.lo(), right.span.hi(), expr.span.ctxt(), expr.span.parent());\n+            check_possible_range_contains(cx, op, new_lhs, right, expr, new_span);\n+        }\n+    }\n }\n \n struct RangeBounds<'a> {"}, {"sha": "fd4dcf39f2f253d865b953cbd16e0c0a92e7ceb7", "filename": "tests/ui/range_contains.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78f7e3745fe59db1e6309b1e42ea25df3317ee36/tests%2Fui%2Frange_contains.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/78f7e3745fe59db1e6309b1e42ea25df3317ee36/tests%2Fui%2Frange_contains.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.fixed?ref=78f7e3745fe59db1e6309b1e42ea25df3317ee36", "patch": "@@ -49,6 +49,11 @@ fn main() {\n     x >= 10 && x <= -10;\n     (-3. ..=3.).contains(&y);\n     y >= 3. && y <= -3.;\n+\n+    // Fix #8745\n+    let z = 42;\n+    (0..=10).contains(&x) && (0..=10).contains(&z);\n+    !(0..10).contains(&x) || !(0..10).contains(&z);\n }\n \n // Fix #6373"}, {"sha": "b848e2e1671224ebb87cd7ec65b159dd82a21264", "filename": "tests/ui/range_contains.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78f7e3745fe59db1e6309b1e42ea25df3317ee36/tests%2Fui%2Frange_contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f7e3745fe59db1e6309b1e42ea25df3317ee36/tests%2Fui%2Frange_contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.rs?ref=78f7e3745fe59db1e6309b1e42ea25df3317ee36", "patch": "@@ -49,6 +49,11 @@ fn main() {\n     x >= 10 && x <= -10;\n     y >= -3. && y <= 3.;\n     y >= 3. && y <= -3.;\n+\n+    // Fix #8745\n+    let z = 42;\n+    (x >= 0) && (x <= 10) && (z >= 0) && (z <= 10);\n+    (x < 0) || (x >= 10) || (z < 0) || (z >= 10);\n }\n \n // Fix #6373"}, {"sha": "936859db5a1260ba217bcb91b31ef91e90fa9a2c", "filename": "tests/ui/range_contains.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/78f7e3745fe59db1e6309b1e42ea25df3317ee36/tests%2Fui%2Frange_contains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78f7e3745fe59db1e6309b1e42ea25df3317ee36/tests%2Fui%2Frange_contains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange_contains.stderr?ref=78f7e3745fe59db1e6309b1e42ea25df3317ee36", "patch": "@@ -96,5 +96,29 @@ error: manual `RangeInclusive::contains` implementation\n LL |     y >= -3. && y <= 3.;\n    |     ^^^^^^^^^^^^^^^^^^^ help: use: `(-3. ..=3.).contains(&y)`\n \n-error: aborting due to 16 previous errors\n+error: manual `RangeInclusive::contains` implementation\n+  --> $DIR/range_contains.rs:55:30\n+   |\n+LL |     (x >= 0) && (x <= 10) && (z >= 0) && (z <= 10);\n+   |                              ^^^^^^^^^^^^^^^^^^^^^ help: use: `(0..=10).contains(&z)`\n+\n+error: manual `RangeInclusive::contains` implementation\n+  --> $DIR/range_contains.rs:55:5\n+   |\n+LL |     (x >= 0) && (x <= 10) && (z >= 0) && (z <= 10);\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: use: `(0..=10).contains(&x)`\n+\n+error: manual `!Range::contains` implementation\n+  --> $DIR/range_contains.rs:56:29\n+   |\n+LL |     (x < 0) || (x >= 10) || (z < 0) || (z >= 10);\n+   |                             ^^^^^^^^^^^^^^^^^^^^ help: use: `!(0..10).contains(&z)`\n+\n+error: manual `!Range::contains` implementation\n+  --> $DIR/range_contains.rs:56:5\n+   |\n+LL |     (x < 0) || (x >= 10) || (z < 0) || (z >= 10);\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: use: `!(0..10).contains(&x)`\n+\n+error: aborting due to 20 previous errors\n "}]}