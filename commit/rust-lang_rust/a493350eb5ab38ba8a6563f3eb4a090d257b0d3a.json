{"sha": "a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0OTMzNTBlYjVhYjM4YmE4YTY1NjNmM2ViNGEwOTBkMjU3YjBkM2E=", "commit": {"author": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-09-10T08:21:29Z"}, "committer": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-09-10T21:38:31Z"}, "message": "Cleanup, refactoring, and some runtime tests.", "tree": {"sha": "dc984eaa28a55de9f05db0b961a0e67f80ca35ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc984eaa28a55de9f05db0b961a0e67f80ca35ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "html_url": "https://github.com/rust-lang/rust/commit/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/comments", "author": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f985fded3ede8a7677ca6c9c77817d27bc9ae492", "url": "https://api.github.com/repos/rust-lang/rust/commits/f985fded3ede8a7677ca6c9c77817d27bc9ae492", "html_url": "https://github.com/rust-lang/rust/commit/f985fded3ede8a7677ca6c9c77817d27bc9ae492"}], "stats": {"total": 408, "additions": 279, "deletions": 129}, "files": [{"sha": "a524739a4a16467a70aca6f3a56cdb24117343d7", "filename": "src/Makefile", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -257,6 +257,7 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/rust_comm.cpp \\\n               rt/rust_dom.cpp \\\n               rt/rust_task.cpp \\\n+              rt/rust_task_list.cpp \\\n               rt/rust_proxy.cpp \\\n               rt/rust_chan.cpp \\\n               rt/rust_port.cpp \\\n@@ -270,6 +271,7 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/rust_kernel.cpp \\\n               rt/memory_region.cpp \\\n               rt/test/rust_test_harness.cpp \\\n+              rt/test/rust_test_runtime.cpp \\\n               rt/test/rust_test_util.cpp\n \n RUNTIME_HDR := rt/globals.h \\\n@@ -281,6 +283,7 @@ RUNTIME_HDR := rt/globals.h \\\n                rt/rust_port.h \\\n                rt/rust_dom.h \\\n                rt/rust_task.h \\\n+               rt/rust_task_list.h \\\n                rt/rust_proxy.h \\\n                rt/rust_log.h \\\n                rt/rust_message.h \\\n@@ -297,6 +300,7 @@ RUNTIME_HDR := rt/globals.h \\\n                rt/memory_region.h \\\n                rt/memory.h \\\n                rt/test/rust_test_harness.h \\\n+               rt/test/rust_test_runtime.h \\\n                rt/test/rust_test_util.h\n \n RUNTIME_INCS := -Irt/isaac -Irt/uthash"}, {"sha": "d3b5d2cee89d62b1bd0da78d3eeed1184defd12d", "filename": "src/rt/rust_dom.cpp", "status": "modified", "additions": 28, "deletions": 65, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_dom.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_dom.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.cpp?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -2,8 +2,6 @@\n #include <stdarg.h>\n #include \"rust_internal.h\"\n \n-template class ptr_vec<rust_task>;\n-\n rust_dom::rust_dom(rust_kernel *kernel,\n     rust_message_queue *message_queue, rust_srv *srv,\n     rust_crate const *root_crate, const char *name) :\n@@ -14,9 +12,10 @@ rust_dom::rust_dom(rust_kernel *kernel,\n     local_region(&srv->local_region),\n     synchronized_region(&srv->synchronized_region),\n     name(name),\n-    running_tasks(this),\n-    blocked_tasks(this),\n-    dead_tasks(this),\n+    newborn_tasks(this, \"newborn\"),\n+    running_tasks(this, \"running\"),\n+    blocked_tasks(this, \"blocked\"),\n+    dead_tasks(this, \"dead\"),\n     caches(this),\n     root_task(NULL),\n     curr_task(NULL),\n@@ -31,28 +30,16 @@ rust_dom::rust_dom(rust_kernel *kernel,\n     pthread_attr_setstacksize(&attr, 1024 * 1024);\n     pthread_attr_setdetachstate(&attr, true);\n #endif\n-    root_task = new (this) rust_task(this, NULL, name);\n-}\n-\n-static void\n-del_all_tasks(rust_dom *dom, ptr_vec<rust_task> *v) {\n-    I(dom, v);\n-    while (v->length()) {\n-        dom->log(rust_log::TASK, \"deleting task 0x%\" PRIdPTR,\n-                 v->length() - 1);\n-        delete v->pop();\n-    }\n+    root_task = create_task(NULL, name);\n }\n \n rust_dom::~rust_dom() {\n     log(rust_log::MEM | rust_log::DOM,\n         \"~rust_dom %s @0x%\" PRIxPTR, name, (uintptr_t)this);\n-    log(rust_log::TASK, \"deleting all running tasks\");\n-    del_all_tasks(this, &running_tasks);\n-    log(rust_log::TASK, \"deleting all blocked tasks\");\n-    del_all_tasks(this, &blocked_tasks);\n-    log(rust_log::TASK, \"deleting all dead tasks\");\n-    del_all_tasks(this, &dead_tasks);\n+    newborn_tasks.delete_all();\n+    running_tasks.delete_all();\n+    blocked_tasks.delete_all();\n+    dead_tasks.delete_all();\n #ifndef __WIN32__\n     pthread_attr_destroy(&attr);\n #endif\n@@ -198,42 +185,10 @@ rust_dom::win32_require(LPCTSTR fn, BOOL ok) {\n #endif\n \n size_t\n-rust_dom::n_live_tasks()\n-{\n+rust_dom::number_of_live_tasks() {\n     return running_tasks.length() + blocked_tasks.length();\n }\n \n-void\n-rust_dom::add_task_to_state_vec(ptr_vec<rust_task> *v, rust_task *task)\n-{\n-    log(rust_log::MEM|rust_log::TASK,\n-        \"adding task %s @0x%\" PRIxPTR \" in state '%s' to vec 0x%\" PRIxPTR,\n-        task->name, (uintptr_t)task, state_vec_name(v), (uintptr_t)v);\n-    v->push(task);\n-}\n-\n-\n-void\n-rust_dom::remove_task_from_state_vec(ptr_vec<rust_task> *v, rust_task *task)\n-{\n-    log(rust_log::MEM|rust_log::TASK,\n-        \"removing task %s @0x%\" PRIxPTR \" in state '%s' from vec 0x%\" PRIxPTR,\n-        task->name, (uintptr_t)task, state_vec_name(v), (uintptr_t)v);\n-    I(this, (*v)[task->idx] == task);\n-    v->swap_delete(task);\n-}\n-\n-const char *\n-rust_dom::state_vec_name(ptr_vec<rust_task> *v)\n-{\n-    if (v == &running_tasks)\n-        return \"running\";\n-    if (v == &blocked_tasks)\n-        return \"blocked\";\n-    I(this, v == &dead_tasks);\n-    return \"dead\";\n-}\n-\n /**\n  * Delete any dead tasks.\n  */\n@@ -243,7 +198,7 @@ rust_dom::reap_dead_tasks() {\n         rust_task *task = dead_tasks[i];\n         if (task->ref_count == 0) {\n             I(this, task->tasks_waiting_to_join.is_empty());\n-            dead_tasks.swap_delete(task);\n+            dead_tasks.remove(task);\n             log(rust_log::TASK,\n                 \"deleting unreferenced dead task %s @0x%\" PRIxPTR,\n                 task->name, task);\n@@ -288,7 +243,6 @@ rust_dom::schedule_task() {\n             return (rust_task *)running_tasks[i];\n         }\n     }\n-    // log(rust_log::DOM|rust_log::TASK, \"no schedulable tasks\");\n     return NULL;\n }\n \n@@ -334,16 +288,16 @@ rust_dom::log_state() {\n  * drop to zero.\n  */\n int\n-rust_dom::start_main_loop()\n-{\n+rust_dom::start_main_loop() {\n     // Make sure someone is watching, to pull us out of infinite loops.\n     rust_timer timer(this);\n \n-    log(rust_log::DOM, \"running main-loop on domain %s @0x%\" PRIxPTR,\n-        name, this);\n-    logptr(\"exit-task glue\", root_crate->get_exit_task_glue());\n+    log(rust_log::DOM, \"started domain loop\");\n+    log(rust_log::DOM | rust_log::MEM,\n+        \"activate glue: \" PTR \", exit glue: \" PTR,\n+        root_crate->get_activate_glue(), root_crate->get_exit_task_glue());\n \n-    while (n_live_tasks() > 0) {\n+    while (number_of_live_tasks() > 0) {\n         A(this, kernel->is_deadlocked() == false, \"deadlock\");\n \n         drain_incoming_message_queue(true);\n@@ -377,7 +331,7 @@ rust_dom::start_main_loop()\n             (uintptr_t)scheduled_task,\n             scheduled_task->rust_sp,\n             scheduled_task->ref_count,\n-            scheduled_task->state_str());\n+            scheduled_task->state->name);\n \n         interrupt_flag = 0;\n \n@@ -388,7 +342,7 @@ rust_dom::start_main_loop()\n                  \" in state '%s', sp=0x%\" PRIxPTR,\n                  scheduled_task->name,\n                  (uintptr_t)scheduled_task,\n-                 state_vec_name(scheduled_task->state),\n+                 scheduled_task->state->name,\n                  scheduled_task->rust_sp);\n \n         I(this, scheduled_task->rust_sp >=\n@@ -443,6 +397,15 @@ rust_dom::get_cache(rust_crate const *crate) {\n     return cache;\n }\n \n+rust_task *\n+rust_dom::create_task(rust_task *spawner, const char *name) {\n+    rust_task *task =\n+        new (this) rust_task (this, &newborn_tasks, spawner, name);\n+    log(rust_log::TASK, \"created task: \" PTR \", spawner: %s, name: %s\",\n+                        task, spawner ? spawner->name : \"null\", name);\n+    newborn_tasks.append(task);\n+    return task;\n+}\n \n //\n // Local Variables:"}, {"sha": "8aa241927479850ae43eb45a4e518fbf6c462968", "filename": "src/rt/rust_dom.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_dom.h", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_dom.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.h?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -18,10 +18,14 @@ struct rust_dom : public kernel_owned<rust_dom>, rc_base<rust_dom>\n     memory_region local_region;\n     memory_region synchronized_region;\n     const char *const name;\n-    ptr_vec<rust_task> running_tasks;\n-    ptr_vec<rust_task> blocked_tasks;\n-    ptr_vec<rust_task> dead_tasks;\n+\n+    rust_task_list newborn_tasks;\n+    rust_task_list running_tasks;\n+    rust_task_list blocked_tasks;\n+    rust_task_list dead_tasks;\n+\n     ptr_vec<rust_crate_cache> caches;\n+\n     randctx rctx;\n     rust_task *root_task;\n     rust_task *curr_task;\n@@ -71,10 +75,7 @@ struct rust_dom : public kernel_owned<rust_dom>, rc_base<rust_dom>\n #endif\n \n     rust_crate_cache *get_cache(rust_crate const *crate);\n-    size_t n_live_tasks();\n-    void add_task_to_state_vec(ptr_vec<rust_task> *v, rust_task *task);\n-    void remove_task_from_state_vec(ptr_vec<rust_task> *v, rust_task *task);\n-    const char *state_vec_name(ptr_vec<rust_task> *v);\n+    size_t number_of_live_tasks();\n \n     void reap_dead_tasks();\n     rust_task *schedule_task();\n@@ -83,6 +84,8 @@ struct rust_dom : public kernel_owned<rust_dom>, rc_base<rust_dom>\n \n     void log_state();\n     static void log_all_state();\n+\n+    rust_task *create_task(rust_task *spawner, const char *name);\n };\n \n //"}, {"sha": "d1eec48bc3bef6205e0d127cf9702e3f84367a8d", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -124,6 +124,8 @@ template <typename T> struct region_owned {\n     }\n };\n \n+#include \"rust_task_list.h\"\n+\n // A cond(ition) is something we can block on. This can be a channel\n // (writing), a port (reading) or a task (waiting).\n \n@@ -203,9 +205,7 @@ crate_rel(rust_crate const *crate, T const *t) {\n \n typedef void CDECL (*activate_glue_ty)(rust_task *);\n \n-class\n-rust_crate\n-{\n+class rust_crate {\n     // The following fields are emitted by the compiler for the static\n     // rust_crate object inside each compiled crate.\n \n@@ -563,6 +563,7 @@ struct gc_alloc {\n \n #include \"test/rust_test_harness.h\"\n #include \"test/rust_test_util.h\"\n+#include \"test/rust_test_runtime.h\"\n \n //\n // Local Variables:"}, {"sha": "ef4220f91293e4c6b31f0437ef1ff2aded7d36fa", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -4,9 +4,7 @@ rust_kernel::rust_kernel(rust_srv *srv) :\n     _region(&srv->local_region),\n     _log(srv, NULL),\n     _srv(srv),\n-    _interrupt_kernel_loop(FALSE),\n-    domains(&srv->local_region),\n-    message_queues(&srv->local_region) {\n+    _interrupt_kernel_loop(FALSE) {\n     // Nop.\n }\n \n@@ -22,6 +20,9 @@ rust_kernel::create_domain(const rust_crate *crate, const char *name) {\n     message_queue->associate(handle);\n     domains.append(dom);\n     message_queues.append(message_queue);\n+    log(rust_log::KERN | rust_log::TASK,\n+        \"created domain: \" PTR \", name: %s, index: %d, domains %d\",\n+        dom, name, dom->list_index, domains.length());\n     _kernel_lock.signal_all();\n     _kernel_lock.unlock();\n     return handle;\n@@ -30,8 +31,9 @@ rust_kernel::create_domain(const rust_crate *crate, const char *name) {\n void\n rust_kernel::destroy_domain(rust_dom *dom) {\n     _kernel_lock.lock();\n-    log(rust_log::KERN, \"deleting domain: \" PTR \", index: %d, domains %d\",\n-        dom, dom->list_index, domains.length());\n+    log(rust_log::KERN,\n+        \"deleting domain: \" PTR \", name: %s, index: %d, domains %d\",\n+        dom, dom->name, dom->list_index, domains.length());\n     domains.remove(dom);\n     dom->message_queue->disassociate();\n     rust_srv *srv = dom->srv;"}, {"sha": "3bc41b935ca4466f684ebf209c5aa61147a9a55b", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -9,6 +9,7 @@\n // FIXME (issue #151): This should be 0x300; the change here is for\n // practicality's sake until stack growth is working.\n static size_t const min_stk_bytes = 0x300000;\n+// static size_t const min_stk_bytes = 0x10000;\n \n // Task stack segments. Heap allocated and chained together.\n \n@@ -54,7 +55,8 @@ align_down(uintptr_t sp)\n }\n \n \n-rust_task::rust_task(rust_dom *dom, rust_task *spawner, const char *name) :\n+rust_task::rust_task(rust_dom *dom, rust_task_list *state,\n+                     rust_task *spawner, const char *name) :\n     maybe_proxy<rust_task>(this),\n     stk(new_stk(dom, 0)),\n     runtime_sp(0),\n@@ -63,11 +65,11 @@ rust_task::rust_task(rust_dom *dom, rust_task *spawner, const char *name) :\n     dom(dom),\n     cache(NULL),\n     name(name),\n-    state(&dom->running_tasks),\n+    state(state),\n     cond(NULL),\n     cond_name(\"none\"),\n     supervisor(spawner),\n-    idx(0),\n+    list_index(-1),\n     rendezvous_ptr(0),\n     alarm(this),\n     handle(NULL)\n@@ -197,7 +199,7 @@ rust_task::start(uintptr_t exit_task_glue,\n     // Back up one, we overshot where sp should be.\n     rust_sp = (uintptr_t) (spp+1);\n \n-    dom->add_task_to_state_vec(&dom->running_tasks, this);\n+    transition(&dom->newborn_tasks, &dom->running_tasks);\n }\n \n void\n@@ -544,23 +546,14 @@ rust_task::free(void *p, bool is_gc)\n     }\n }\n \n-const char *\n-rust_task::state_str() {\n-    return dom->state_vec_name(state);\n-}\n-\n void\n-rust_task::transition(ptr_vec<rust_task> *src, ptr_vec<rust_task> *dst)\n-{\n+rust_task::transition(rust_task_list *src, rust_task_list *dst) {\n     I(dom, state == src);\n     dom->log(rust_log::TASK,\n-             \"task %s @0x%\" PRIxPTR \" state change '%s' -> '%s'\",\n-             name,\n-             (uintptr_t)this,\n-             dom->state_vec_name(src),\n-             dom->state_vec_name(dst));\n-    dom->remove_task_from_state_vec(src, this);\n-    dom->add_task_to_state_vec(dst, this);\n+             \"task %s \" PTR \" state change '%s' -> '%s'\",\n+             name, (uintptr_t)this, src->name, dst->name);\n+    src->remove(this);\n+    dst->append(this);\n     state = dst;\n }\n \n@@ -577,8 +570,7 @@ rust_task::block(rust_cond *on, const char* name) {\n }\n \n void\n-rust_task::wakeup(rust_cond *from)\n-{\n+rust_task::wakeup(rust_cond *from) {\n     A(dom, cond != NULL, \"Cannot wake up unblocked task.\");\n     log(rust_log::TASK, \"Blocked on 0x%\" PRIxPTR \" woken up on 0x%\" PRIxPTR,\n                         (uintptr_t) cond, (uintptr_t) from);\n@@ -591,14 +583,12 @@ rust_task::wakeup(rust_cond *from)\n }\n \n void\n-rust_task::die()\n-{\n+rust_task::die() {\n     transition(&dom->running_tasks, &dom->dead_tasks);\n }\n \n void\n-rust_task::unblock()\n-{\n+rust_task::unblock() {\n     if (blocked())\n         wakeup(cond);\n }"}, {"sha": "26ba872dbf293d78502f2d84a70fb024cb1e87f3", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -7,7 +7,6 @@\n \n #include \"util/array_list.h\"\n \n-\n struct\n rust_task : public maybe_proxy<rust_task>,\n             public dom_owned<rust_task>\n@@ -22,11 +21,11 @@ rust_task : public maybe_proxy<rust_task>,\n \n     // Fields known only to the runtime.\n     const char *const name;\n-    ptr_vec<rust_task> *state;\n+    rust_task_list *state;\n     rust_cond *cond;\n     const char *cond_name;\n     rust_task *supervisor;     // Parent-link for failure propagation.\n-    size_t idx;\n+    int32_t list_index;\n     size_t gc_alloc_thresh;\n     size_t gc_alloc_accum;\n \n@@ -50,6 +49,7 @@ rust_task : public maybe_proxy<rust_task>,\n \n     // Only a pointer to 'name' is kept, so it must live as long as this task.\n     rust_task(rust_dom *dom,\n+              rust_task_list *state,\n               rust_task *spawner,\n               const char *name);\n \n@@ -71,8 +71,7 @@ rust_task : public maybe_proxy<rust_task>,\n     void *realloc(void *data, size_t sz, bool gc_mem=false);\n     void free(void *p, bool gc_mem=false);\n \n-    const char *state_str();\n-    void transition(ptr_vec<rust_task> *svec, ptr_vec<rust_task> *dvec);\n+    void transition(rust_task_list *src, rust_task_list *dst);\n \n     void block(rust_cond *on, const char* name);\n     void wakeup(rust_cond *from);"}, {"sha": "635ee13667d82c5d996106ba80013bff361c5091", "filename": "src/rt/rust_task_list.cpp", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_task_list.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_task_list.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_list.cpp?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -0,0 +1,16 @@\n+#include \"rust_internal.h\"\n+\n+rust_task_list::rust_task_list (rust_dom *dom, const char* name) :\n+    dom(dom), name(name) {\n+    // Nop;\n+}\n+\n+void\n+rust_task_list::delete_all() {\n+    dom->log(rust_log::TASK, \"deleting all %s tasks\", name);\n+    while (is_empty() == false) {\n+        rust_task *task = pop_value();\n+        dom->log(rust_log::TASK, \"deleting task \" PTR, task);\n+        delete task;\n+    }\n+}"}, {"sha": "b1fba75029d457e4295d87156c1c612e7ff2fff4", "filename": "src/rt/rust_task_list.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_task_list.h", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_task_list.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_list.h?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -0,0 +1,16 @@\n+#ifndef RUST_TASK_LIST_H\n+#define RUST_TASK_LIST_H\n+\n+/**\n+ * Used to indicate the state of a rust task.\n+ */\n+class rust_task_list : public indexed_list<rust_task>,\n+                       public dom_owned<rust_task_list> {\n+public:\n+    rust_dom *dom;\n+    const char* name;\n+    rust_task_list (rust_dom *dom, const char* name);\n+    void delete_all();\n+};\n+\n+#endif /* RUST_TASK_LIST_H */"}, {"sha": "9a5e73f8daa3256b76a807f5b8cfab7d73c032ac", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -542,12 +542,8 @@ upcall_get_type_desc(rust_task *task,\n extern \"C\" CDECL rust_task *\n upcall_new_task(rust_task *spawner, const char *name) {\n     LOG_UPCALL_ENTRY(spawner);\n-\n     rust_dom *dom = spawner->dom;\n-    rust_task *task = new (dom) rust_task(dom, spawner, name);\n-    dom->log(rust_log::UPCALL | rust_log::MEM | rust_log::TASK,\n-             \"upcall new_task(spawner %s @0x%\" PRIxPTR \", %s) = 0x%\" PRIxPTR,\n-             spawner->name, spawner, name, task);\n+    rust_task *task = dom->create_task(spawner, name);\n     return task;\n }\n "}, {"sha": "be874a115f0ec7f70120898366fe054dea570fd7", "filename": "src/rt/sync/sync.cpp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Fsync%2Fsync.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Fsync%2Fsync.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Fsync.cpp?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -11,6 +11,18 @@ void sync::yield() {\n #endif\n }\n \n+void sync::sleep(size_t timeout_in_ms) {\n+#ifdef __WIN32__\n+    Sleep(timeout_in_ms);\n+#else\n+    usleep(timeout_in_ms * 1000);\n+#endif\n+}\n+\n+void sync::random_sleep(size_t max_timeout_in_ms) {\n+    sleep(rand() % max_timeout_in_ms);\n+}\n+\n rust_thread::rust_thread() : _is_running(false), thread(0) {\n     // Nop.\n }"}, {"sha": "bd755e1f9fe270a12953aafdb18f4a264cc38192", "filename": "src/rt/sync/sync.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Fsync%2Fsync.h", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Fsync%2Fsync.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Fsync.h?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -4,6 +4,8 @@\n class sync {\n public:\n     static void yield();\n+    static void sleep(size_t timeout_in_ms);\n+    static void random_sleep(size_t max_timeout_in_ms);\n     template <class T>\n     static bool compare_and_swap(T *address,\n         T oldValue, T newValue) {"}, {"sha": "e6fe36888932353cf7544af5f2315ce8eb0d919e", "filename": "src/rt/sync/timer.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Fsync%2Ftimer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Fsync%2Ftimer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Ftimer.cpp?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -25,6 +25,11 @@ timer::get_elapsed_time() {\n     return get_time() - _start;\n }\n \n+double\n+timer::get_elapsed_time_in_ms() {\n+    return (double) get_elapsed_time() / 1000.0;\n+}\n+\n int64_t\n timer::get_timeout() {\n     return _timeout - get_elapsed_time();"}, {"sha": "aae098a1119bc21825902b4d8da0ecf784f5f0d3", "filename": "src/rt/sync/timer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Fsync%2Ftimer.h", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Fsync%2Ftimer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Ftimer.h?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -17,6 +17,7 @@ class timer {\n     timer();\n     void reset(uint64_t timeout);\n     uint64_t get_elapsed_time();\n+    double get_elapsed_time_in_ms();\n     int64_t get_timeout();\n     bool has_timed_out();\n     virtual ~timer();"}, {"sha": "41000a6dbc67bdb72734eaa2f2985ac102a7bdb5", "filename": "src/rt/test/rust_test_harness.cpp", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Ftest%2Frust_test_harness.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Ftest%2Frust_test_harness.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_harness.cpp?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -10,7 +10,9 @@ rust_test::name() {\n     return \"untitled\";\n }\n \n-rust_test_suite::rust_test_suite() {\n+rust_test_suite::rust_test_suite(rust_crate *crate) : crate(crate) {\n+    tests.append(new rust_domain_test());\n+    tests.append(new rust_task_test(this));\n     tests.append(new rust_array_list_test());\n     tests.append(new rust_synchronized_indexed_list_test());\n }\n@@ -25,11 +27,12 @@ rust_test_suite::run() {\n     for (size_t i = 0; i < tests.size(); i++) {\n         rust_test *test = tests[i];\n         printf(\"test: %s running ... \\n\", test->name());\n-        if (tests[i]->run() == false) {\n-            printf(\"test: %s FAILED\\n\", test->name());\n+        timer timer;\n+        bool result = tests[i]->run();\n+        printf(\"test: %s %s %.2f ms\\n\", test->name(),\n+               result ? \"PASSED\" : \"FAILE\", timer.get_elapsed_time_in_ms());\n+        if (result == false) {\n             pass = false;\n-        } else {\n-            printf(\"test: %s PASSED\\n\", test->name());\n         }\n     }\n     return pass;"}, {"sha": "8dd8baaadc2c79d1ce2760b5884c2821d0374949", "filename": "src/rt/test/rust_test_harness.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Ftest%2Frust_test_harness.h", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Ftest%2Frust_test_harness.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_harness.h?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -13,8 +13,9 @@ class rust_test {\n \n class rust_test_suite : public rust_test {\n public:\n+    rust_crate *crate;\n     array_list<rust_test*> tests;\n-    rust_test_suite();\n+    rust_test_suite(rust_crate *crate);\n     virtual ~rust_test_suite();\n     bool run();\n };"}, {"sha": "b10be5edf400109666150b5ac04029cc46e00453", "filename": "src/rt/test/rust_test_runtime.cpp", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Ftest%2Frust_test_runtime.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.cpp?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -0,0 +1,77 @@\n+#include \"rust_test_runtime.h\"\n+\n+rust_test_runtime::rust_test_runtime() {\n+    // TODO Auto-generated constructor stub\n+}\n+\n+rust_test_runtime::~rust_test_runtime() {\n+    // TODO Auto-generated destructor stub\n+}\n+\n+#define DOMAINS 32\n+#define TASKS 32\n+\n+void\n+rust_domain_test::worker::run() {\n+    rust_handle<rust_dom> *handle = kernel->create_domain(NULL, \"test\");\n+    for (int i = 0; i < TASKS; i++) {\n+        handle->referent()->create_task(NULL, \"child\");\n+    }\n+    sync::random_sleep(1000);\n+    kernel->destroy_domain(handle->_referent);\n+}\n+\n+bool\n+rust_domain_test::run() {\n+    rust_srv srv;\n+    rust_kernel kernel(&srv);\n+\n+    array_list<worker *> workers;\n+    for (int i = 0; i < DOMAINS; i++) {\n+        worker *worker = new rust_domain_test::worker (&kernel);\n+        workers.append(worker);\n+        worker->start();\n+    }\n+\n+    // We don't join the worker threads here in order to simulate ad-hoc\n+    // termination of domains. If we join_all_domains before all domains\n+    // are actually spawned, this could crash, thus the reason for the\n+    // sleep below.\n+\n+    sync::sleep(100);\n+    kernel.join_all_domains();\n+    return true;\n+}\n+\n+void task_entry() {\n+    printf(\"task entry\\n\");\n+}\n+\n+void\n+rust_task_test::worker::run() {\n+    rust_crate *crate = parent->suite->crate;\n+    rust_handle<rust_dom> *handle =\n+        kernel->create_domain(crate, \"test\");\n+    rust_dom *domain = handle->referent();\n+    domain->root_task->start(crate->get_exit_task_glue(),\n+                             (uintptr_t)&task_entry, NULL, 0);\n+    domain->start_main_loop();\n+    kernel->destroy_domain(domain);\n+}\n+\n+bool\n+rust_task_test::run() {\n+    rust_srv srv;\n+    rust_kernel kernel(&srv);\n+\n+    array_list<worker *> workers;\n+    for (int i = 0; i < DOMAINS; i++) {\n+        worker *worker = new rust_task_test::worker (&kernel, this);\n+        workers.append(worker);\n+        worker->start();\n+    }\n+\n+    sync::random_sleep(1000);\n+    kernel.join_all_domains();\n+    return true;\n+}"}, {"sha": "8d4f38ecb79f5d22a01f12ddbd51128547b7e1a8", "filename": "src/rt/test/rust_test_runtime.h", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Ftest%2Frust_test_runtime.h", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Ftest%2Frust_test_runtime.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_runtime.h?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -0,0 +1,51 @@\n+#include \"../rust_internal.h\"\n+\n+#ifndef RUST_TEST_RUNTIME_H\n+#define RUST_TEST_RUNTIME_H\n+\n+class rust_test_runtime {\n+public:\n+    rust_test_runtime();\n+    virtual ~rust_test_runtime();\n+};\n+\n+\n+class rust_domain_test : public rust_test {\n+public:\n+    class worker : public rust_thread {\n+        public:\n+        rust_kernel *kernel;\n+        worker(rust_kernel *kernel) : kernel(kernel) {\n+            // Nop.\n+        }\n+        void run();\n+    };\n+    bool run();\n+    const char *name() {\n+        return \"rust_domain_test\";\n+    }\n+};\n+\n+class rust_task_test : public rust_test {\n+public:\n+    rust_test_suite *suite;\n+    rust_task_test(rust_test_suite *suite) : suite(suite) {\n+        // Nop.\n+    }\n+    class worker : public rust_thread {\n+        public:\n+        rust_kernel *kernel;\n+        rust_task_test *parent;\n+        worker(rust_kernel *kernel, rust_task_test *parent) :\n+            kernel(kernel), parent(parent) {\n+            // Nop.\n+        }\n+        void run();\n+    };\n+    bool run();\n+    const char *name() {\n+        return \"rust_task_test\";\n+    }\n+};\n+\n+#endif /* RUST_TEST_RUNTIME_H */"}, {"sha": "2e9d764f69b664b54b3b90b224f7d8c8b5ac47b5", "filename": "src/rt/test/rust_test_util.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Ftest%2Frust_test_util.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Ftest%2Frust_test_util.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_util.cpp?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -1,7 +1,7 @@\n #include \"../rust_internal.h\"\n \n #define COUNT 1000\n-#define LARGE_COUNT 100000\n+#define LARGE_COUNT 10000\n #define THREADS 10\n \n bool"}, {"sha": "41c3579043a15d372f73885eeaaabffc28da35a2", "filename": "src/rt/test/rust_test_util.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Ftest%2Frust_test_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Ftest%2Frust_test_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_util.h?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -18,11 +18,9 @@ class rust_array_list_test : public rust_test {\n class rust_synchronized_indexed_list_test : public rust_test {\n public:\n     rust_srv srv;\n-    memory_region region;\n     synchronized_indexed_list<indexed_list_element<int> > list;\n \n-    rust_synchronized_indexed_list_test() :\n-        region(&srv, false), list(&region) {\n+    rust_synchronized_indexed_list_test() {\n         // Nop.\n     }\n "}, {"sha": "df8871228017c418b27ff90c1690595c199daecb", "filename": "src/rt/util/indexed_list.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Futil%2Findexed_list.h", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Futil%2Findexed_list.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Futil%2Findexed_list.h?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -3,7 +3,6 @@\n \n #include <assert.h>\n #include \"array_list.h\"\n-#include \"../memory_region.h\"\n \n class indexed_list_object {\n public:\n@@ -28,12 +27,14 @@ class indexed_list_element : public indexed_list_object {\n  * object inserted in this list must define a \"int32_t list_index\" member.\n  */\n template<typename T> class indexed_list {\n-    memory_region *region;\n     array_list<T*> list;\n public:\n-    indexed_list(memory_region *region) : region(region) {}\n     virtual int32_t append(T *value);\n     virtual bool pop(T **value);\n+    /**\n+     * Same as pop(), except that it returns NULL if the list is empty.\n+     */\n+    virtual T* pop_value();\n     virtual size_t length() {\n         return list.size();\n     }\n@@ -76,6 +77,15 @@ indexed_list<T>::pop(T **value) {\n     return list.pop(value);\n }\n \n+template<typename T> T*\n+indexed_list<T>::pop_value() {\n+    T *value = NULL;\n+    if (list.pop(&value)) {\n+        return value;\n+    }\n+    return NULL;\n+}\n+\n template <typename T> T *\n indexed_list<T>::operator[](int32_t index) {\n     T *value = list[index];"}, {"sha": "52fabe0596081028b12d39cec663915f6fddbb62", "filename": "src/rt/util/synchronized_indexed_list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Futil%2Fsynchronized_indexed_list.h", "raw_url": "https://github.com/rust-lang/rust/raw/a493350eb5ab38ba8a6563f3eb4a090d257b0d3a/src%2Frt%2Futil%2Fsynchronized_indexed_list.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Futil%2Fsynchronized_indexed_list.h?ref=a493350eb5ab38ba8a6563f3eb4a090d257b0d3a", "patch": "@@ -2,14 +2,14 @@\n #define SYNCHRONIZED_INDEXED_LIST_H\n \n #include \"indexed_list.h\"\n+#include \"../sync/lock_and_signal.h\"\n \n template<typename T> class synchronized_indexed_list :\n     public indexed_list<T> {\n     lock_and_signal _lock;\n \n public:\n-    synchronized_indexed_list(memory_region *region) :\n-        indexed_list<T>(region) {\n+    synchronized_indexed_list() {\n         // Nop.\n     }\n "}]}