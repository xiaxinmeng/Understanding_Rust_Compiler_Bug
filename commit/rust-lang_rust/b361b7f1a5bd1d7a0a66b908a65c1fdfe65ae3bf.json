{"sha": "b361b7f1a5bd1d7a0a66b908a65c1fdfe65ae3bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNjFiN2YxYTViZDFkN2EwYTY2YjkwOGE2NWMxZmRmZTY1YWUzYmY=", "commit": {"author": {"name": "Daniel Campbell", "email": "campbelldj@hotmail.com", "date": "2016-02-03T07:44:53Z"}, "committer": {"name": "Daniel Campbell", "email": "campbelldj@hotmail.com", "date": "2016-02-03T07:44:53Z"}, "message": "Changed macro spans in CSVs to point to the macro name, bugfixed nested spans", "tree": {"sha": "c9b9d6d55661f6cd4df31d4cbb6fd518bd0d596d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9b9d6d55661f6cd4df31d4cbb6fd518bd0d596d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b361b7f1a5bd1d7a0a66b908a65c1fdfe65ae3bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b361b7f1a5bd1d7a0a66b908a65c1fdfe65ae3bf", "html_url": "https://github.com/rust-lang/rust/commit/b361b7f1a5bd1d7a0a66b908a65c1fdfe65ae3bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b361b7f1a5bd1d7a0a66b908a65c1fdfe65ae3bf/comments", "author": {"login": "DanielJCampbell", "id": 5915731, "node_id": "MDQ6VXNlcjU5MTU3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5915731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanielJCampbell", "html_url": "https://github.com/DanielJCampbell", "followers_url": "https://api.github.com/users/DanielJCampbell/followers", "following_url": "https://api.github.com/users/DanielJCampbell/following{/other_user}", "gists_url": "https://api.github.com/users/DanielJCampbell/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanielJCampbell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanielJCampbell/subscriptions", "organizations_url": "https://api.github.com/users/DanielJCampbell/orgs", "repos_url": "https://api.github.com/users/DanielJCampbell/repos", "events_url": "https://api.github.com/users/DanielJCampbell/events{/privacy}", "received_events_url": "https://api.github.com/users/DanielJCampbell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DanielJCampbell", "id": 5915731, "node_id": "MDQ6VXNlcjU5MTU3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/5915731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanielJCampbell", "html_url": "https://github.com/DanielJCampbell", "followers_url": "https://api.github.com/users/DanielJCampbell/followers", "following_url": "https://api.github.com/users/DanielJCampbell/following{/other_user}", "gists_url": "https://api.github.com/users/DanielJCampbell/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanielJCampbell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanielJCampbell/subscriptions", "organizations_url": "https://api.github.com/users/DanielJCampbell/orgs", "repos_url": "https://api.github.com/users/DanielJCampbell/repos", "events_url": "https://api.github.com/users/DanielJCampbell/events{/privacy}", "received_events_url": "https://api.github.com/users/DanielJCampbell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50df6b9dc5144df09ef6b8519afd3657abdab03f", "url": "https://api.github.com/repos/rust-lang/rust/commits/50df6b9dc5144df09ef6b8519afd3657abdab03f", "html_url": "https://github.com/rust-lang/rust/commit/50df6b9dc5144df09ef6b8519afd3657abdab03f"}], "stats": {"total": 59, "additions": 51, "deletions": 8}, "files": [{"sha": "25c30f2476d1a6cb6f744cc1694a19be87bb1053", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b361b7f1a5bd1d7a0a66b908a65c1fdfe65ae3bf/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b361b7f1a5bd1d7a0a66b908a65c1fdfe65ae3bf/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=b361b7f1a5bd1d7a0a66b908a65c1fdfe65ae3bf", "patch": "@@ -847,13 +847,17 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         if !self.mac_defs.contains(&data.callee_span)\n             && !data.imported {\n             self.mac_defs.insert(data.callee_span);\n-            self.fmt.macro_str(data.callee_span, data.callee_span,\n-                               data.name.clone(), qualname.clone());\n+            if let Some(sub_span) = self.span.span_for_macro_def_name(data.callee_span) {\n+                self.fmt.macro_str(data.callee_span, sub_span,\n+                                   data.name.clone(), qualname.clone());\n+            }\n         }\n         if !self.mac_uses.contains(&data.span) {\n-             self.mac_uses.insert(data.span);\n-             self.fmt.macro_use_str(data.span, data.span, data.name,\n-                                   qualname, data.scope);\n+            self.mac_uses.insert(data.span);\n+            if let Some(sub_span) = self.span.span_for_macro_use_name(data.span) {\n+                self.fmt.macro_use_str(data.span, sub_span, data.name,\n+                                       qualname, data.scope);\n+            }\n         }\n     }\n }"}, {"sha": "2a5c61f4e9d2a5f1f23d5e11dcd5642f3c6a3534", "filename": "src/librustc_trans/save/span_utils.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b361b7f1a5bd1d7a0a66b908a65c1fdfe65ae3bf/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b361b7f1a5bd1d7a0a66b908a65c1fdfe65ae3bf/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs?ref=b361b7f1a5bd1d7a0a66b908a65c1fdfe65ae3bf", "patch": "@@ -378,8 +378,8 @@ impl<'a> SpanUtils<'a> {\n         }\n     }\n \n-    // Given a macro_rules definition span, return the span of the macro's name.\n-    pub fn span_for_macro_name(&self, span: Span) -> Option<Span> {\n+    // Return the name for a macro definition (identifier after first `!`)\n+    pub fn span_for_macro_def_name(&self, span: Span) -> Option<Span> {\n         let mut toks = self.retokenise_span(span);\n         loop {\n             let ts = toks.real_token();\n@@ -397,6 +397,26 @@ impl<'a> SpanUtils<'a> {\n         }\n     }\n \n+    // Return the name for a macro use (identifier before first `!`).\n+    pub fn span_for_macro_use_name(&self, span:Span) -> Option<Span> {\n+        let mut toks = self.retokenise_span(span);\n+        let mut prev = toks.real_token();\n+        loop {\n+            if prev.tok == token::Eof {\n+                return None;\n+            }\n+            let ts = toks.real_token();\n+            if ts.tok == token::Not {\n+                if prev.tok.is_ident() {\n+                    return self.make_sub_span(span, Some(prev.sp));\n+                } else {\n+                    return None;\n+                }\n+            }\n+            prev = ts;\n+        }\n+    }\n+\n     /// Return true if the span is generated code, and\n     /// it is not a subspan of the root callsite.\n     ///"}, {"sha": "74302e2f6a0fdb7b0f32cfaa9fe5bd0ebadfccdb", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b361b7f1a5bd1d7a0a66b908a65c1fdfe65ae3bf/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b361b7f1a5bd1d7a0a66b908a65c1fdfe65ae3bf/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=b361b7f1a5bd1d7a0a66b908a65c1fdfe65ae3bf", "patch": "@@ -1052,9 +1052,18 @@ impl CodeMap {\n     /// the macro callsite that expanded to it.\n     pub fn source_callsite(&self, sp: Span) -> Span {\n         let mut span = sp;\n+        // Special case - if a macro is parsed as an argument to another macro, the source\n+        // callsite is the first callsite, which is also source-equivalent to the span.\n+        let mut first = true;\n         while span.expn_id != NO_EXPANSION && span.expn_id != COMMAND_LINE_EXPN {\n             if let Some(callsite) = self.with_expn_info(span.expn_id,\n                                                |ei| ei.map(|ei| ei.call_site.clone())) {\n+                if first && span.source_equal(&callsite) {\n+                    if self.lookup_char_pos(span.lo).file.is_real_file() {\n+                        return Span { expn_id: NO_EXPANSION, .. span };\n+                    }\n+                }\n+                first = false;\n                 span = callsite;\n             }\n             else {\n@@ -1071,10 +1080,20 @@ impl CodeMap {\n     /// corresponding to the source callsite.\n     pub fn source_callee(&self, sp: Span) -> Option<NameAndSpan> {\n         let mut span = sp;\n+        // Special case - if a macro is parsed as an argument to another macro, the source\n+        // callsite is source-equivalent to the span, and the source callee is the first callee.\n+        let mut first = true;\n         while let Some(callsite) = self.with_expn_info(span.expn_id,\n                                             |ei| ei.map(|ei| ei.call_site.clone())) {\n+            if first && span.source_equal(&callsite) {\n+                if self.lookup_char_pos(span.lo).file.is_real_file() {\n+                    return self.with_expn_info(span.expn_id,\n+                                               |ei| ei.map(|ei| ei.callee.clone()));\n+                }\n+            }\n+            first = false;\n             if let Some(_) = self.with_expn_info(callsite.expn_id,\n-                                                |ei| ei.map(|ei| ei.call_site.clone())) {\n+                                                 |ei| ei.map(|ei| ei.call_site.clone())) {\n                 span = callsite;\n             }\n             else {"}]}