{"sha": "281f9d868fee8e4f9750fc12289dc10522f587ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MWY5ZDg2OGZlZThlNGY5NzUwZmMxMjI4OWRjMTA1MjJmNTg3ZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-23T20:08:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-23T20:08:54Z"}, "message": "Auto merge of #30614 - arcnmx:cstr-bytes, r=alexcrichton\n\nI'm a bit iffy on the return type, but `Result` would also be a bit weird... The two error cases are `Unterminated` and `InteriorNul(usize)`.\n\nI considered `from_chars(&[c_char])` but this meshes better with `as_bytes_with_nul()` and Rust code in general.\n\nShould there also be a corresponding unsafe `from_bytes_unchecked` variant?", "tree": {"sha": "6e76209ba9cbc6bd089d6edf6b3224e542c448c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e76209ba9cbc6bd089d6edf6b3224e542c448c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/281f9d868fee8e4f9750fc12289dc10522f587ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/281f9d868fee8e4f9750fc12289dc10522f587ea", "html_url": "https://github.com/rust-lang/rust/commit/281f9d868fee8e4f9750fc12289dc10522f587ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/281f9d868fee8e4f9750fc12289dc10522f587ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43ddfbdfb2cfc63646db395751f108617f0e39b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/43ddfbdfb2cfc63646db395751f108617f0e39b4", "html_url": "https://github.com/rust-lang/rust/commit/43ddfbdfb2cfc63646db395751f108617f0e39b4"}, {"sha": "71f29cd83704b39a2aefd609eab645decd3bce92", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f29cd83704b39a2aefd609eab645decd3bce92", "html_url": "https://github.com/rust-lang/rust/commit/71f29cd83704b39a2aefd609eab645decd3bce92"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "1db45764552392a494217ee3b9d010527b834e58", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/281f9d868fee8e4f9750fc12289dc10522f587ea/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/281f9d868fee8e4f9750fc12289dc10522f587ea/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=281f9d868fee8e4f9750fc12289dc10522f587ea", "patch": "@@ -436,6 +436,57 @@ impl CStr {\n         mem::transmute(slice::from_raw_parts(ptr, len as usize + 1))\n     }\n \n+    /// Creates a C string wrapper from a byte slice.\n+    ///\n+    /// This function will cast the provided `bytes` to a `CStr` wrapper after\n+    /// ensuring that it is null terminated and does not contain any interior\n+    /// nul bytes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(cstr_from_bytes)]\n+    /// use std::ffi::CStr;\n+    ///\n+    /// # fn main() {\n+    /// let cstr = CStr::from_bytes_with_nul(b\"hello\\0\");\n+    /// assert!(cstr.is_some());\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"cstr_from_bytes\", reason = \"recently added\", issue = \"31190\")]\n+    pub fn from_bytes_with_nul(bytes: &[u8]) -> Option<&CStr> {\n+        if bytes.is_empty() || memchr::memchr(0, &bytes) != Some(bytes.len() - 1) {\n+            None\n+        } else {\n+            Some(unsafe { Self::from_bytes_with_nul_unchecked(bytes) })\n+        }\n+    }\n+\n+    /// Unsafely creates a C string wrapper from a byte slice.\n+    ///\n+    /// This function will cast the provided `bytes` to a `CStr` wrapper without\n+    /// performing any sanity checks. The provided slice must be null terminated\n+    /// and not contain any interior nul bytes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(cstr_from_bytes)]\n+    /// use std::ffi::{CStr, CString};\n+    ///\n+    /// # fn main() {\n+    /// unsafe {\n+    ///     let cstring = CString::new(\"hello\").unwrap();\n+    ///     let cstr = CStr::from_bytes_with_nul_unchecked(cstring.to_bytes_with_nul());\n+    ///     assert_eq!(cstr, &*cstring);\n+    /// }\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"cstr_from_bytes\", reason = \"recently added\", issue = \"31190\")]\n+    pub unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n+        mem::transmute(bytes)\n+    }\n+\n     /// Returns the inner pointer to this C string.\n     ///\n     /// The returned pointer will be valid for as long as `self` is and points\n@@ -670,4 +721,31 @@ mod tests {\n \n         assert_eq!(cstr_hash, cstring_hash);\n     }\n+\n+    #[test]\n+    fn from_bytes_with_nul() {\n+        let data = b\"123\\0\";\n+        let cstr = CStr::from_bytes_with_nul(data);\n+        assert_eq!(cstr.map(CStr::to_bytes), Some(&b\"123\"[..]));\n+        assert_eq!(cstr.map(CStr::to_bytes_with_nul), Some(&b\"123\\0\"[..]));\n+\n+        unsafe {\n+            let cstr_unchecked = CStr::from_bytes_with_nul_unchecked(data);\n+            assert_eq!(cstr, Some(cstr_unchecked));\n+        }\n+    }\n+\n+    #[test]\n+    fn from_bytes_with_nul_unterminated() {\n+        let data = b\"123\";\n+        let cstr = CStr::from_bytes_with_nul(data);\n+        assert!(cstr.is_none());\n+    }\n+\n+    #[test]\n+    fn from_bytes_with_nul_interior() {\n+        let data = b\"1\\023\\0\";\n+        let cstr = CStr::from_bytes_with_nul(data);\n+        assert!(cstr.is_none());\n+    }\n }"}]}