{"sha": "56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NTA2Y2ZhMjVhOGY0YzQ3YjFlMDkzY2RjNTc2YTYyYjFlYjA4YTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-09T15:56:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-24T17:27:38Z"}, "message": "support user-given types in adts", "tree": {"sha": "7812bedfbd3924ef3221e1dc8cbd0d2c94c45d31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7812bedfbd3924ef3221e1dc8cbd0d2c94c45d31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "html_url": "https://github.com/rust-lang/rust/commit/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d1d3fef6205276e0123dea96cc346d1da7df6d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1d3fef6205276e0123dea96cc346d1da7df6d0", "html_url": "https://github.com/rust-lang/rust/commit/2d1d3fef6205276e0123dea96cc346d1da7df6d0"}], "stats": {"total": 726, "additions": 686, "deletions": 40}, "files": [{"sha": "1c9387d02d5a34ffbc3de811e20e9e365b7c8cca", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -479,10 +479,11 @@ for mir::AggregateKind<'gcx> {\n             mir::AggregateKind::Array(t) => {\n                 t.hash_stable(hcx, hasher);\n             }\n-            mir::AggregateKind::Adt(adt_def, idx, substs, active_field) => {\n+            mir::AggregateKind::Adt(adt_def, idx, substs, user_substs, active_field) => {\n                 adt_def.hash_stable(hcx, hasher);\n                 idx.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n+                user_substs.hash_stable(hcx, hasher);\n                 active_field.hash_stable(hcx, hasher);\n             }\n             mir::AggregateKind::Closure(def_id, ref substs) => {"}, {"sha": "7f292f6167f3a9e6944576de2db81f41b3b6f5b9", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -2009,7 +2009,7 @@ pub enum AggregateKind<'tcx> {\n     /// active field number and is present only for union expressions\n     /// -- e.g. for a union expression `SomeUnion { c: .. }`, the\n     /// active field index would identity the field `c`\n-    Adt(&'tcx AdtDef, usize, &'tcx Substs<'tcx>, Option<usize>),\n+    Adt(&'tcx AdtDef, usize, &'tcx Substs<'tcx>, Option<CanonicalTy<'tcx>>, Option<usize>),\n \n     Closure(DefId, ClosureSubsts<'tcx>),\n     Generator(DefId, GeneratorSubsts<'tcx>, hir::GeneratorMovability),\n@@ -2135,7 +2135,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         _ => fmt_tuple(fmt, places),\n                     },\n \n-                    AggregateKind::Adt(adt_def, variant, substs, _) => {\n+                    AggregateKind::Adt(adt_def, variant, substs, _user_ty, _) => {\n                         let variant_def = &adt_def.variants[variant];\n \n                         ppaux::parameterized(fmt, substs, variant_def.did, &[])?;\n@@ -2813,8 +2813,14 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                 let kind = box match **kind {\n                     AggregateKind::Array(ty) => AggregateKind::Array(ty.fold_with(folder)),\n                     AggregateKind::Tuple => AggregateKind::Tuple,\n-                    AggregateKind::Adt(def, v, substs, n) => {\n-                        AggregateKind::Adt(def, v, substs.fold_with(folder), n)\n+                    AggregateKind::Adt(def, v, substs, user_ty, n) => {\n+                        AggregateKind::Adt(\n+                            def,\n+                            v,\n+                            substs.fold_with(folder),\n+                            user_ty.fold_with(folder),\n+                            n,\n+                        )\n                     }\n                     AggregateKind::Closure(id, substs) => {\n                         AggregateKind::Closure(id, substs.fold_with(folder))\n@@ -2846,7 +2852,8 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                 (match **kind {\n                     AggregateKind::Array(ty) => ty.visit_with(visitor),\n                     AggregateKind::Tuple => false,\n-                    AggregateKind::Adt(_, _, substs, _) => substs.visit_with(visitor),\n+                    AggregateKind::Adt(_, _, substs, user_ty, _) =>\n+                        substs.visit_with(visitor) || user_ty.visit_with(visitor),\n                     AggregateKind::Closure(_, substs) => substs.visit_with(visitor),\n                     AggregateKind::Generator(_, substs, _) => substs.visit_with(visitor),\n                 }) || fields.visit_with(visitor)"}, {"sha": "c928be4f9df78aa351698ece504e7a22b40b9a80", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -216,7 +216,7 @@ impl<'tcx> Rvalue<'tcx> {\n                     AggregateKind::Tuple => {\n                         tcx.mk_tup(ops.iter().map(|op| op.ty(local_decls, tcx)))\n                     }\n-                    AggregateKind::Adt(def, _, substs, _) => {\n+                    AggregateKind::Adt(def, _, substs, _, _) => {\n                         tcx.type_of(def.did).subst(tcx, substs)\n                     }\n                     AggregateKind::Closure(did, substs) => {"}, {"sha": "c7723fdf1913710de4b8f742fa93dd756f92e681", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -589,6 +589,7 @@ macro_rules! make_mir_visitor {\n                             AggregateKind::Adt(_adt_def,\n                                                _variant_index,\n                                                ref $($mutability)* substs,\n+                                               _user_substs,\n                                                _active_field_index) => {\n                                 self.visit_substs(substs, location);\n                             }"}, {"sha": "e301e5ae70be8a9723634bf56220f1d88badc838", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -148,7 +148,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n \n             mir::Rvalue::Aggregate(ref kind, ref operands) => {\n                 let (dest, active_field_index) = match **kind {\n-                    mir::AggregateKind::Adt(adt_def, variant_index, _, active_field_index) => {\n+                    mir::AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n                         dest.codegen_set_discr(&bx, variant_index);\n                         if adt_def.is_enum() {\n                             (dest.project_downcast(&bx, variant_index), active_field_index)"}, {"sha": "1393045e75d04bff011427d2202c5cf5b546b319", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -917,6 +917,20 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         terr\n                     );\n                 }\n+\n+                if let Some(user_ty) = self.rvalue_user_ty(rv) {\n+                    if let Err(terr) = self.eq_canonical_type_and_type(user_ty, rv_ty, location.boring()) {\n+                        span_mirbug!(\n+                            self,\n+                            stmt,\n+                            \"bad user type on rvalue ({:?} = {:?}): {:?}\",\n+                            user_ty,\n+                            rv_ty,\n+                            terr\n+                        );\n+                    }\n+                }\n+\n                 self.check_rvalue(mir, rv, location);\n                 if !self.tcx().features().unsized_locals {\n                     let trait_ref = ty::TraitRef {\n@@ -1391,7 +1405,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         let tcx = self.tcx();\n \n         match *ak {\n-            AggregateKind::Adt(def, variant_index, substs, active_field_index) => {\n+            AggregateKind::Adt(def, variant_index, substs, _, active_field_index) => {\n                 let variant = &def.variants[variant_index];\n                 let adj_field_index = active_field_index.unwrap_or(field_index);\n                 if let Some(field) = variant.fields.get(adj_field_index) {\n@@ -1557,6 +1571,36 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// If this rvalue supports a user-given type annotation, then\n+    /// extract and return it. This represents the final type of the\n+    /// rvalue and will be unified with the inferred type.\n+    fn rvalue_user_ty(\n+        &self,\n+        rvalue: &Rvalue<'tcx>,\n+    ) -> Option<CanonicalTy<'tcx>> {\n+        match rvalue {\n+            Rvalue::Use(_) |\n+            Rvalue::Repeat(..) |\n+            Rvalue::Ref(..) |\n+            Rvalue::Len(..) |\n+            Rvalue::Cast(..) |\n+            Rvalue::BinaryOp(..) |\n+            Rvalue::CheckedBinaryOp(..) |\n+            Rvalue::NullaryOp(..) |\n+            Rvalue::UnaryOp(..) |\n+            Rvalue::Discriminant(..) =>\n+                None,\n+\n+            Rvalue::Aggregate(aggregate, _) => match **aggregate {\n+                AggregateKind::Adt(_, _, _, user_ty, _) => user_ty,\n+                AggregateKind::Array(_) => None,\n+                AggregateKind::Tuple => None,\n+                AggregateKind::Closure(_, _) => None,\n+                AggregateKind::Generator(_, _, _) => None,\n+            }\n+        }\n+    }\n+\n     fn check_aggregate_rvalue(\n         &mut self,\n         mir: &Mir<'tcx>,\n@@ -1750,7 +1794,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         );\n \n         let instantiated_predicates = match aggregate_kind {\n-            AggregateKind::Adt(def, _, substs, _) => {\n+            AggregateKind::Adt(def, _, substs, _, _) => {\n                 tcx.predicates_of(def.did).instantiate(tcx, substs)\n             }\n "}, {"sha": "ad3862aca353f45e2e8fe6556873688a0df1fc71", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -255,7 +255,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 block.and(Rvalue::Aggregate(result, operands))\n             }\n             ExprKind::Adt {\n-                adt_def, variant_index, substs, fields, base\n+                adt_def, variant_index, substs, user_ty, fields, base\n             } => { // see (*) above\n                 let is_union = adt_def.is_union();\n                 let active_field_index = if is_union { Some(fields[0].name.index()) } else { None };\n@@ -286,7 +286,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 };\n \n                 let adt =\n-                    box AggregateKind::Adt(adt_def, variant_index, substs, active_field_index);\n+                    box AggregateKind::Adt(adt_def, variant_index, substs, user_ty, active_field_index);\n                 block.and(Rvalue::Aggregate(adt, fields))\n             }\n             ExprKind::Assign { .. } |"}, {"sha": "7153a388467a245b621de722c226588defe01bf7", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -256,6 +256,16 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 };\n                 if let Some((adt_def, index)) = adt_data {\n                     let substs = cx.tables().node_substs(fun.hir_id);\n+\n+                    let user_ty = cx.tables().user_substs(fun.hir_id)\n+                        .map(|user_substs| {\n+                            user_substs.unchecked_map(|user_substs| {\n+                                // Here, we just pair an `AdtDef` with the\n+                                // `user_substs`, so no new types etc are introduced.\n+                                cx.tcx().mk_adt(adt_def, user_substs)\n+                            })\n+                        });\n+\n                     let field_refs = args.iter()\n                         .enumerate()\n                         .map(|(idx, e)| {\n@@ -265,12 +275,12 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                             }\n                         })\n                         .collect();\n-                    // FIXME(#47184) -- user given type annot on ADTs\n                     ExprKind::Adt {\n                         adt_def,\n                         substs,\n                         variant_index: index,\n                         fields: field_refs,\n+                        user_ty,\n                         base: None,\n                     }\n                 } else {\n@@ -424,11 +434,11 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 ty::Adt(adt, substs) => {\n                     match adt.adt_kind() {\n                         AdtKind::Struct | AdtKind::Union => {\n-                            // FIXME(#47184) -- user given type annot on ADTs\n                             ExprKind::Adt {\n                                 adt_def: adt,\n                                 variant_index: 0,\n                                 substs,\n+                                user_ty: user_annotated_ty_for_adt(cx, expr.hir_id, adt),\n                                 fields: field_refs(cx, fields),\n                                 base: base.as_ref().map(|base| {\n                                     FruInfo {\n@@ -450,11 +460,11 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                     assert!(base.is_none());\n \n                                     let index = adt.variant_index_with_id(variant_id);\n-                                    // FIXME(#47184) -- user given type annot on ADTs\n                                     ExprKind::Adt {\n                                         adt_def: adt,\n                                         variant_index: index,\n                                         substs,\n+                                        user_ty: user_annotated_ty_for_adt(cx, expr.hir_id, adt),\n                                         fields: field_refs(cx, fields),\n                                         base: None,\n                                     }\n@@ -694,20 +704,19 @@ fn user_annotated_ty_for_def(\n     hir_id: hir::HirId,\n     def: &Def,\n ) -> Option<CanonicalTy<'tcx>> {\n-    let user_substs = cx.tables().user_substs(hir_id)?;\n-    Some(match def {\n+    match def {\n         // A reference to something callable -- e.g., a fn, method, or\n         // a tuple-struct or tuple-variant. This has the type of a\n         // `Fn` but with the user-given substitutions.\n         Def::Fn(_) |\n         Def::Method(_) |\n         Def::StructCtor(_, CtorKind::Fn) |\n         Def::VariantCtor(_, CtorKind::Fn) =>\n-            user_substs.unchecked_map(|user_substs| {\n+            Some(cx.tables().user_substs(hir_id)?.unchecked_map(|user_substs| {\n                 // Here, we just pair a `DefId` with the\n                 // `user_substs`, so no new types etc are introduced.\n                 cx.tcx().mk_fn_def(def.def_id(), user_substs)\n-            }),\n+            })),\n \n         Def::Const(_def_id) |\n         Def::AssociatedConst(_def_id) =>\n@@ -720,18 +729,26 @@ fn user_annotated_ty_for_def(\n         Def::StructCtor(_def_id, CtorKind::Const) |\n         Def::VariantCtor(_def_id, CtorKind::Const) =>\n             match &cx.tables().node_id_to_type(hir_id).sty {\n-                ty::TyAdt(adt_def, _) =>\n-                    user_substs.unchecked_map(|user_substs| {\n-                        // Here, we just pair an `AdtDef` with the\n-                        // `user_substs`, so no new types etc are introduced.\n-                        cx.tcx().mk_adt(adt_def, user_substs)\n-                    }),\n+                ty::Adt(adt_def, _) => user_annotated_ty_for_adt(cx, hir_id, adt_def),\n                 sty => bug!(\"unexpected sty: {:?}\", sty),\n             },\n \n         _ =>\n             bug!(\"user_annotated_ty_for_def: unexpected def {:?} at {:?}\", def, hir_id)\n-    })\n+    }\n+}\n+\n+fn user_annotated_ty_for_adt(\n+    cx: &mut Cx<'a, 'gcx, 'tcx>,\n+    hir_id: hir::HirId,\n+    adt_def: &'tcx AdtDef,\n+) -> Option<CanonicalTy<'tcx>> {\n+    let user_substs = cx.tables().user_substs(hir_id)?;\n+    Some(user_substs.unchecked_map(|user_substs| {\n+        // Here, we just pair an `AdtDef` with the\n+        // `user_substs`, so no new types etc are introduced.\n+        cx.tcx().mk_adt(adt_def, user_substs)\n+    }))\n }\n \n fn method_callee<'a, 'gcx, 'tcx>(\n@@ -835,7 +852,6 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n         Def::StructCtor(def_id, CtorKind::Const) |\n         Def::VariantCtor(def_id, CtorKind::Const) => {\n-            // FIXME(#47184) -- user given type annot on ADTs\n             match cx.tables().node_id_to_type(expr.hir_id).sty {\n                 // A unit struct/variant which is used as a value.\n                 // We return a completely different ExprKind here to account for this special case.\n@@ -844,6 +860,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         adt_def,\n                         variant_index: adt_def.variant_index_with_id(def_id),\n                         substs,\n+                        user_ty: user_annotated_ty_for_adt(cx, expr.hir_id, adt_def),\n                         fields: vec![],\n                         base: None,\n                     }"}, {"sha": "d6037adb53bb7a8a5161e626846df7491b38cde0", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -261,6 +261,11 @@ pub enum ExprKind<'tcx> {\n         adt_def: &'tcx AdtDef,\n         variant_index: usize,\n         substs: &'tcx Substs<'tcx>,\n+\n+        /// Optional user-given substs: for something like `let x =\n+        /// Bar::<T> { ... }`.\n+        user_ty: Option<CanonicalTy<'tcx>>,\n+\n         fields: Vec<FieldExprRef<'tcx>>,\n         base: Option<FruInfo<'tcx>>\n     },"}, {"sha": "db556db241773beff77a2cac748d13034af835bb", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -208,7 +208,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n \n             Aggregate(ref kind, ref operands) => {\n                 let (dest, active_field_index) = match **kind {\n-                    mir::AggregateKind::Adt(adt_def, variant_index, _, active_field_index) => {\n+                    mir::AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n                         self.write_discriminant_value(variant_index, dest)?;\n                         if adt_def.is_enum() {\n                             (self.place_downcast(dest, variant_index)?, active_field_index)"}, {"sha": "7e7e7cfade6238f2e12100e6e06b4c7ddfdb0db6", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -850,7 +850,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n             kind: StatementKind::Assign(\n                 Place::Local(RETURN_PLACE),\n                 Rvalue::Aggregate(\n-                    box AggregateKind::Adt(adt_def, variant_no, substs, None),\n+                    box AggregateKind::Adt(adt_def, variant_no, substs, None, None),\n                     (1..sig.inputs().len()+1).map(|i| {\n                         Operand::Move(Place::Local(Local::new(i)))\n                     }).collect()"}, {"sha": "cff098c7b73d594e6a8dd9f1e2dc5e9fc83a1ad1", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -48,7 +48,7 @@ impl MirPass for Deaggregator {\n \n                 let mut set_discriminant = None;\n                 let active_field_index = match *kind {\n-                    AggregateKind::Adt(adt_def, variant_index, _, active_field_index) => {\n+                    AggregateKind::Adt(adt_def, variant_index, _, _, active_field_index) => {\n                         if adt_def.is_enum() {\n                             set_discriminant = Some(Statement {\n                                 kind: StatementKind::SetDiscriminant {"}, {"sha": "db588884d8e6183e056230e7ce4a24accbc4fcd2", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -157,7 +157,7 @@ struct TransformVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> TransformVisitor<'a, 'tcx> {\n     // Make a GeneratorState rvalue\n     fn make_state(&self, idx: usize, val: Operand<'tcx>) -> Rvalue<'tcx> {\n-        let adt = AggregateKind::Adt(self.state_adt_ref, idx, self.state_substs, None);\n+        let adt = AggregateKind::Adt(self.state_adt_ref, idx, self.state_substs, None, None);\n         Rvalue::Aggregate(box adt, vec![val])\n     }\n "}, {"sha": "37f4f22cb02c5dadcb297de33dc3324500e183d2", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -1367,7 +1367,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                      -> Ty<'tcx> {\n         let tcx = self.tcx();\n \n-        debug!(\"base_def_to_ty(def={:?}, opt_self_ty={:?}, path_segments={:?})\",\n+        debug!(\"def_to_ty(def={:?}, opt_self_ty={:?}, path_segments={:?})\",\n                path.def, opt_self_ty, path.segments);\n \n         let span = path.span;"}, {"sha": "54acdd8c55296343e1be73eee53086a6a0ae6b16", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -2113,16 +2113,31 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn write_user_substs(&self, node_id: hir::HirId, substs: CanonicalSubsts<'tcx>) {\n+    /// Given the substs that we just converted from the HIR, try to\n+    /// canonicalize them and store them as user-given substitutions\n+    /// (i.e., substitutions that must be respected by the NLL check).\n+    ///\n+    /// This should be invoked **before any unifications have\n+    /// occurred**, so that annotations like `Vec<_>` are preserved\n+    /// properly.\n+    pub fn write_user_substs_from_substs(&self, hir_id: hir::HirId, substs: &'tcx Substs<'tcx>) {\n+        if !substs.is_noop() {\n+            let user_substs = self.infcx.canonicalize_response(&substs);\n+            debug!(\"instantiate_value_path: user_substs = {:?}\", user_substs);\n+            self.write_user_substs(hir_id, user_substs);\n+        }\n+    }\n+\n+    pub fn write_user_substs(&self, hir_id: hir::HirId, substs: CanonicalSubsts<'tcx>) {\n         debug!(\n             \"write_user_substs({:?}, {:?}) in fcx {}\",\n-            node_id,\n+            hir_id,\n             substs,\n             self.tag(),\n         );\n \n         if !substs.is_identity() {\n-            self.tables.borrow_mut().user_substs_mut().insert(node_id, substs);\n+            self.tables.borrow_mut().user_substs_mut().insert(hir_id, substs);\n         } else {\n             debug!(\"write_user_substs: skipping identity substs\");\n         }\n@@ -3596,6 +3611,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         if let Some((variant, did, substs)) = variant {\n+            debug!(\"check_struct_path: did={:?} substs={:?}\", did, substs);\n+            let hir_id = self.tcx.hir.node_to_hir_id(node_id);\n+            self.write_user_substs_from_substs(hir_id, substs);\n+\n             // Check bounds on type arguments used in the path.\n             let bounds = self.instantiate_bounds(path_span, did, substs);\n             let cause = traits::ObligationCause::new(path_span, self.body_id,\n@@ -5138,11 +5157,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let hir_id = self.tcx.hir.node_to_hir_id(node_id);\n         self.write_substs(hir_id, substs);\n \n-        if !substs.is_noop() {\n-            let user_substs = self.infcx.canonicalize_response(&substs);\n-            debug!(\"instantiate_value_path: user_substs = {:?}\", user_substs);\n-            self.write_user_substs(hir_id, user_substs);\n-        }\n+        self.write_user_substs_from_substs(hir_id, substs);\n \n         ty_substituted\n     }"}, {"sha": "4465be414bc2ce01f51a3bed435e3ea5a71c3d87", "filename": "src/test/ui/nll/user-annotations/adt-brace-enums.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Unit test for the \"user substitutions\" that are annotated on each\n+// node.\n+\n+#![feature(nll)]\n+\n+enum SomeEnum<T> {\n+    SomeVariant { t: T }\n+}\n+\n+fn no_annot() {\n+    let c = 66;\n+    SomeEnum::SomeVariant { t: &c };\n+}\n+\n+fn annot_underscore() {\n+    let c = 66;\n+    SomeEnum::SomeVariant::<_> { t: &c };\n+}\n+\n+fn annot_reference_any_lifetime() {\n+    let c = 66;\n+    SomeEnum::SomeVariant::<&u32> { t: &c };\n+}\n+\n+fn annot_reference_static_lifetime() {\n+    let c = 66;\n+    SomeEnum::SomeVariant::<&'static u32> { t: &c }; //~ ERROR\n+}\n+\n+fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+    let c = 66;\n+    SomeEnum::SomeVariant::<&'a u32> { t: &c }; //~ ERROR\n+}\n+\n+fn annot_reference_named_lifetime_ok<'a>(c: &'a u32) {\n+    SomeEnum::SomeVariant::<&'a u32> { t: c };\n+}\n+\n+fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+    let _closure = || {\n+        let c = 66;\n+        SomeEnum::SomeVariant::<&'a u32> { t: &c }; //~ ERROR\n+    };\n+}\n+\n+fn annot_reference_named_lifetime_in_closure_ok<'a>(c: &'a u32) {\n+    let _closure = || {\n+        SomeEnum::SomeVariant::<&'a u32> { t: c };\n+    };\n+}\n+\n+fn main() { }"}, {"sha": "842bb622bc323b360563eb0d02deedb2dd7fd562", "filename": "src/test/ui/nll/user-annotations/adt-brace-enums.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -0,0 +1,41 @@\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-brace-enums.rs:37:48\n+   |\n+LL |     SomeEnum::SomeVariant::<&'static u32> { t: &c }; //~ ERROR\n+   |                                                ^^ borrowed value does not live long enough\n+LL | }\n+   | - `c` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-brace-enums.rs:42:43\n+   |\n+LL |     SomeEnum::SomeVariant::<&'a u32> { t: &c }; //~ ERROR\n+   |                                           ^^ borrowed value does not live long enough\n+LL | }\n+   | - `c` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 40:35...\n+  --> $DIR/adt-brace-enums.rs:40:35\n+   |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   ^^\n+\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-brace-enums.rs:52:47\n+   |\n+LL |         SomeEnum::SomeVariant::<&'a u32> { t: &c }; //~ ERROR\n+   |                                               ^^ borrowed value does not live long enough\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 49:46...\n+  --> $DIR/adt-brace-enums.rs:49:46\n+   |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              ^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "c479e05056447a3bb0c8fd9feea6633df7001cb2", "filename": "src/test/ui/nll/user-annotations/adt-brace-structs.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Unit test for the \"user substitutions\" that are annotated on each\n+// node.\n+\n+#![feature(nll)]\n+\n+struct SomeStruct<T> { t: T }\n+\n+fn no_annot() {\n+    let c = 66;\n+    SomeStruct { t: &c };\n+}\n+\n+fn annot_underscore() {\n+    let c = 66;\n+    SomeStruct::<_> { t: &c };\n+}\n+\n+fn annot_reference_any_lifetime() {\n+    let c = 66;\n+    SomeStruct::<&u32> { t: &c };\n+}\n+\n+fn annot_reference_static_lifetime() {\n+    let c = 66;\n+    SomeStruct::<&'static u32> { t: &c }; //~ ERROR\n+}\n+\n+fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+    let c = 66;\n+    SomeStruct::<&'a u32> { t: &c }; //~ ERROR\n+}\n+\n+fn annot_reference_named_lifetime_ok<'a>(c: &'a u32) {\n+    SomeStruct::<&'a u32> { t: c };\n+}\n+\n+fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+    let _closure = || {\n+        let c = 66;\n+        SomeStruct::<&'a u32> { t: &c }; //~ ERROR\n+    };\n+}\n+\n+fn annot_reference_named_lifetime_in_closure_ok<'a>(c: &'a u32) {\n+    let _closure = || {\n+        SomeStruct::<&'a u32> { t: c };\n+    };\n+}\n+\n+fn main() { }"}, {"sha": "7ba76212dc5204b058904235c83dba9183deba9d", "filename": "src/test/ui/nll/user-annotations/adt-brace-structs.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -0,0 +1,41 @@\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-brace-structs.rs:35:37\n+   |\n+LL |     SomeStruct::<&'static u32> { t: &c }; //~ ERROR\n+   |                                     ^^ borrowed value does not live long enough\n+LL | }\n+   | - `c` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-brace-structs.rs:40:32\n+   |\n+LL |     SomeStruct::<&'a u32> { t: &c }; //~ ERROR\n+   |                                ^^ borrowed value does not live long enough\n+LL | }\n+   | - `c` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 38:35...\n+  --> $DIR/adt-brace-structs.rs:38:35\n+   |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   ^^\n+\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-brace-structs.rs:50:36\n+   |\n+LL |         SomeStruct::<&'a u32> { t: &c }; //~ ERROR\n+   |                                    ^^ borrowed value does not live long enough\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 47:46...\n+  --> $DIR/adt-brace-structs.rs:47:46\n+   |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              ^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "d4ffba10cb62ec5fe648ac7b29a106d38e516464", "filename": "src/test/ui/nll/user-annotations/adt-nullary-enums.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Unit test for the \"user substitutions\" that are annotated on each\n+// node.\n+\n+#![feature(nll)]\n+#![allow(warnings)]\n+\n+use std::cell::Cell;\n+\n+enum SomeEnum<T> {\n+    SomeVariant(T),\n+    SomeOtherVariant,\n+}\n+\n+fn combine<T>(_: T, _: T) { }\n+\n+fn no_annot() {\n+    let c = 66;\n+    combine(SomeEnum::SomeVariant(Cell::new(&c)), SomeEnum::SomeOtherVariant);\n+}\n+\n+fn annot_underscore() {\n+    let c = 66;\n+    combine(SomeEnum::SomeVariant(Cell::new(&c)), SomeEnum::SomeOtherVariant::<Cell<_>>);\n+}\n+\n+fn annot_reference_any_lifetime() {\n+    let c = 66;\n+    combine(SomeEnum::SomeVariant(Cell::new(&c)), SomeEnum::SomeOtherVariant::<Cell<&u32>>);\n+}\n+\n+fn annot_reference_static_lifetime() {\n+    let c = 66;\n+    combine(SomeEnum::SomeVariant(Cell::new(&c)), SomeEnum::SomeOtherVariant::<Cell<&'static u32>>); //~ ERROR\n+}\n+\n+fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+    let c = 66;\n+    combine(SomeEnum::SomeVariant(Cell::new(&c)), SomeEnum::SomeOtherVariant::<Cell<&'a u32>>); //~ ERROR\n+}\n+\n+fn annot_reference_named_lifetime_ok<'a>(c: &'a u32) {\n+    combine(SomeEnum::SomeVariant(Cell::new(c)), SomeEnum::SomeOtherVariant::<Cell<&'a u32>>);\n+}\n+\n+fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+    let _closure = || {\n+        let c = 66;\n+        combine(SomeEnum::SomeVariant(Cell::new(&c)), SomeEnum::SomeOtherVariant::<Cell<&'a u32>>); //~ ERROR\n+    };\n+}\n+\n+fn annot_reference_named_lifetime_in_closure_ok<'a>(c: &'a u32) {\n+    let _closure = || {\n+        combine(SomeEnum::SomeVariant(Cell::new(c)), SomeEnum::SomeOtherVariant::<Cell<&'a u32>>);\n+    };\n+}\n+\n+fn main() { }"}, {"sha": "b120d6c4e5d44035a39578a0b7c488428376ded7", "filename": "src/test/ui/nll/user-annotations/adt-nullary-enums.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -0,0 +1,41 @@\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-nullary-enums.rs:43:45\n+   |\n+LL |     combine(SomeEnum::SomeVariant(Cell::new(&c)), SomeEnum::SomeOtherVariant::<Cell<&'static u32>>); //~ ERROR\n+   |                                             ^^ borrowed value does not live long enough\n+LL | }\n+   | - `c` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-nullary-enums.rs:48:45\n+   |\n+LL |     combine(SomeEnum::SomeVariant(Cell::new(&c)), SomeEnum::SomeOtherVariant::<Cell<&'a u32>>); //~ ERROR\n+   |                                             ^^ borrowed value does not live long enough\n+LL | }\n+   | - `c` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 46:35...\n+  --> $DIR/adt-nullary-enums.rs:46:35\n+   |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   ^^\n+\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-nullary-enums.rs:58:49\n+   |\n+LL |         combine(SomeEnum::SomeVariant(Cell::new(&c)), SomeEnum::SomeOtherVariant::<Cell<&'a u32>>); //~ ERROR\n+   |                                                 ^^ borrowed value does not live long enough\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 55:46...\n+  --> $DIR/adt-nullary-enums.rs:55:46\n+   |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              ^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "ae75a54f649900ba3d5ed73cdf7539117ffb02d8", "filename": "src/test/ui/nll/user-annotations/adt-tuple-enums.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Unit test for the \"user substitutions\" that are annotated on each\n+// node.\n+\n+#![feature(nll)]\n+#![allow(warnings)]\n+\n+enum SomeEnum<T> {\n+    SomeVariant(T),\n+    SomeOtherVariant,\n+}\n+\n+fn no_annot() {\n+    let c = 66;\n+    SomeEnum::SomeVariant(&c);\n+}\n+\n+fn annot_underscore() {\n+    let c = 66;\n+    SomeEnum::SomeVariant::<_>(&c);\n+}\n+\n+fn annot_reference_any_lifetime() {\n+    let c = 66;\n+    SomeEnum::SomeVariant::<&u32>(&c);\n+}\n+\n+fn annot_reference_static_lifetime() {\n+    let c = 66;\n+    SomeEnum::SomeVariant::<&'static u32>(&c); //~ ERROR\n+}\n+\n+fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+    let c = 66;\n+    SomeEnum::SomeVariant::<&'a u32>(&c); //~ ERROR\n+}\n+\n+fn annot_reference_named_lifetime_ok<'a>(c: &'a u32) {\n+    SomeEnum::SomeVariant::<&'a u32>(c);\n+}\n+\n+fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+    let _closure = || {\n+        let c = 66;\n+        SomeEnum::SomeVariant::<&'a u32>(&c); //~ ERROR\n+    };\n+}\n+\n+fn annot_reference_named_lifetime_in_closure_ok<'a>(c: &'a u32) {\n+    let _closure = || {\n+        SomeEnum::SomeVariant::<&'a u32>(c);\n+    };\n+}\n+\n+fn main() { }"}, {"sha": "18d1cc7e087937290196f3ab111cf227308145f1", "filename": "src/test/ui/nll/user-annotations/adt-tuple-enums.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -0,0 +1,41 @@\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-tuple-enums.rs:39:43\n+   |\n+LL |     SomeEnum::SomeVariant::<&'static u32>(&c); //~ ERROR\n+   |                                           ^^ borrowed value does not live long enough\n+LL | }\n+   | - `c` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-tuple-enums.rs:44:38\n+   |\n+LL |     SomeEnum::SomeVariant::<&'a u32>(&c); //~ ERROR\n+   |                                      ^^ borrowed value does not live long enough\n+LL | }\n+   | - `c` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 42:35...\n+  --> $DIR/adt-tuple-enums.rs:42:35\n+   |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   ^^\n+\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-tuple-enums.rs:54:42\n+   |\n+LL |         SomeEnum::SomeVariant::<&'a u32>(&c); //~ ERROR\n+   |                                          ^^ borrowed value does not live long enough\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 51:46...\n+  --> $DIR/adt-tuple-enums.rs:51:46\n+   |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              ^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "401a71c1fe5aabe675c2a768f359d850d56bc9c8", "filename": "src/test/ui/nll/user-annotations/adt-tuple-struct.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Unit test for the \"user substitutions\" that are annotated on each\n+// node.\n+\n+#![feature(nll)]\n+\n+struct SomeStruct<T>(T);\n+\n+fn no_annot() {\n+    let c = 66;\n+    SomeStruct(&c);\n+}\n+\n+fn annot_underscore() {\n+    let c = 66;\n+    SomeStruct::<_>(&c);\n+}\n+\n+fn annot_reference_any_lifetime() {\n+    let c = 66;\n+    SomeStruct::<&u32>(&c);\n+}\n+\n+fn annot_reference_static_lifetime() {\n+    let c = 66;\n+    SomeStruct::<&'static u32>(&c); //~ ERROR\n+}\n+\n+fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+    let c = 66;\n+    SomeStruct::<&'a u32>(&c); //~ ERROR\n+}\n+\n+fn annot_reference_named_lifetime_ok<'a>(c: &'a u32) {\n+    SomeStruct::<&'a u32>(c);\n+}\n+\n+fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+    let _closure = || {\n+        let c = 66;\n+        SomeStruct::<&'a u32>(&c); //~ ERROR\n+    };\n+}\n+\n+fn annot_reference_named_lifetime_in_closure_ok<'a>(c: &'a u32) {\n+    let _closure = || {\n+        SomeStruct::<&'a u32>(c);\n+    };\n+}\n+\n+fn main() { }"}, {"sha": "397016e52d0f7e72f854c637a66d0a3e675b8883", "filename": "src/test/ui/nll/user-annotations/adt-tuple-struct.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -0,0 +1,41 @@\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-tuple-struct.rs:35:32\n+   |\n+LL |     SomeStruct::<&'static u32>(&c); //~ ERROR\n+   |                                ^^ borrowed value does not live long enough\n+LL | }\n+   | - `c` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-tuple-struct.rs:40:27\n+   |\n+LL |     SomeStruct::<&'a u32>(&c); //~ ERROR\n+   |                           ^^ borrowed value does not live long enough\n+LL | }\n+   | - `c` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 38:35...\n+  --> $DIR/adt-tuple-struct.rs:38:35\n+   |\n+LL | fn annot_reference_named_lifetime<'a>(_d: &'a u32) {\n+   |                                   ^^\n+\n+error[E0597]: `c` does not live long enough\n+  --> $DIR/adt-tuple-struct.rs:50:31\n+   |\n+LL |         SomeStruct::<&'a u32>(&c); //~ ERROR\n+   |                               ^^ borrowed value does not live long enough\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 47:46...\n+  --> $DIR/adt-tuple-struct.rs:47:46\n+   |\n+LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n+   |                                              ^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "970fbf98af4ac4d8f1676dc32b883144266a87f7", "filename": "src/test/ui/nll/user-annotations/dump-adt-brace-struct.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.rs?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Unit test for the \"user substitutions\" that are annotated on each\n+// node.\n+\n+// compile-flags:-Zverbose\n+\n+#![allow(warnings)]\n+#![feature(nll)]\n+#![feature(rustc_attrs)]\n+\n+struct SomeStruct<T> { t: T }\n+\n+#[rustc_dump_user_substs]\n+fn main() {\n+    SomeStruct { t: 22 }; // Nothing given, no annotation.\n+\n+    SomeStruct::<_> { t: 22 }; // Nothing interesting given, no annotation.\n+\n+    SomeStruct::<u32> { t: 22 }; //~ ERROR [u32]\n+}"}, {"sha": "2b0e5039d8d4ed4bdb1c71d7376939676c4f0318", "filename": "src/test/ui/nll/user-annotations/dump-adt-brace-struct.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56506cfa25a8f4c47b1e093cdc576a62b1eb08a5/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr?ref=56506cfa25a8f4c47b1e093cdc576a62b1eb08a5", "patch": "@@ -0,0 +1,8 @@\n+error: user substs: Canonical { variables: [], value: [u32] }\n+  --> $DIR/dump-adt-brace-struct.rs:28:5\n+   |\n+LL |     SomeStruct::<u32> { t: 22 }; //~ ERROR [u32]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}