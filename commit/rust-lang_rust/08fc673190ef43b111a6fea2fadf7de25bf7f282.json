{"sha": "08fc673190ef43b111a6fea2fadf7de25bf7f282", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZmM2NzMxOTBlZjQzYjExMWE2ZmVhMmZhZGY3ZGUyNWJmN2YyODI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-28T14:21:58Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-25T10:28:24Z"}, "message": "Handle SIMD vectors in CPlace::place_field", "tree": {"sha": "884379f06ea492bbc2b43f7df30be4e3422a73ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/884379f06ea492bbc2b43f7df30be4e3422a73ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08fc673190ef43b111a6fea2fadf7de25bf7f282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08fc673190ef43b111a6fea2fadf7de25bf7f282", "html_url": "https://github.com/rust-lang/rust/commit/08fc673190ef43b111a6fea2fadf7de25bf7f282", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08fc673190ef43b111a6fea2fadf7de25bf7f282/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abc99c62595831127e8ac4dfd6ccacd7ccbf9942", "url": "https://api.github.com/repos/rust-lang/rust/commits/abc99c62595831127e8ac4dfd6ccacd7ccbf9942", "html_url": "https://github.com/rust-lang/rust/commit/abc99c62595831127e8ac4dfd6ccacd7ccbf9942"}], "stats": {"total": 72, "additions": 56, "deletions": 16}, "files": [{"sha": "357c28c832a956f1996f6528ed35d751bbe4f3e7", "filename": "src/abi/comments.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08fc673190ef43b111a6fea2fadf7de25bf7f282/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fc673190ef43b111a6fea2fadf7de25bf7f282/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=08fc673190ef43b111a6fea2fadf7de25bf7f282", "patch": "@@ -82,6 +82,7 @@ pub(super) fn add_local_place_comments<'tcx>(\n             assert_eq!(local, place_local);\n             (\"ssa\", Cow::Owned(format!(\",var=({}, {})\", var1.index(), var2.index())))\n         }\n+        CPlaceInner::VarLane(_local, _var, _lane) => unreachable!(),\n         CPlaceInner::Addr(ptr, meta) => {\n             let meta = if let Some(meta) = meta {\n                 Cow::Owned(format!(\",meta={}\", meta))"}, {"sha": "2c92fd0e47cc30018376216d43a4d93f90d2778a", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/08fc673190ef43b111a6fea2fadf7de25bf7f282/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fc673190ef43b111a6fea2fadf7de25bf7f282/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=08fc673190ef43b111a6fea2fadf7de25bf7f282", "patch": "@@ -411,6 +411,11 @@ fn place_location<'tcx>(\n \n             AttributeValue::Exprloc(Expression::new())\n         }\n+        CPlaceInner::VarLane(_, _, _) => {\n+            // FIXME implement this\n+\n+            AttributeValue::Exprloc(Expression::new())\n+        }\n         CPlaceInner::Addr(_, _) => {\n             // FIXME implement this (used by arguments and returns)\n "}, {"sha": "d0e8a4b0c9f24ed395bee58ee5030af4eca86cd7", "filename": "src/value_and_place.rs", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/08fc673190ef43b111a6fea2fadf7de25bf7f282/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08fc673190ef43b111a6fea2fadf7de25bf7f282/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=08fc673190ef43b111a6fea2fadf7de25bf7f282", "patch": "@@ -272,6 +272,7 @@ pub(crate) struct CPlace<'tcx> {\n pub(crate) enum CPlaceInner {\n     Var(Local, Variable),\n     VarPair(Local, Variable, Variable),\n+    VarLane(Local, Variable, u8),\n     Addr(Pointer, Option<Value>),\n }\n \n@@ -374,6 +375,12 @@ impl<'tcx> CPlace<'tcx> {\n                 fx.bcx.set_val_label(val2, cranelift_codegen::ir::ValueLabel::new(var2.index()));\n                 CValue::by_val_pair(val1, val2, layout)\n             }\n+            CPlaceInner::VarLane(_local, var, lane) => {\n+                let val = fx.bcx.use_var(var);\n+                fx.bcx.set_val_label(val, cranelift_codegen::ir::ValueLabel::new(var.index()));\n+                let val = fx.bcx.ins().extractlane(val, lane);\n+                CValue::by_val(val, layout)\n+            }\n             CPlaceInner::Addr(ptr, extra) => {\n                 if let Some(extra) = extra {\n                     CValue::by_ref_unsized(ptr, extra, layout)\n@@ -395,7 +402,8 @@ impl<'tcx> CPlace<'tcx> {\n         match self.inner {\n             CPlaceInner::Addr(ptr, extra) => (ptr, extra),\n             CPlaceInner::Var(_, _)\n-            | CPlaceInner::VarPair(_, _, _) => bug!(\"Expected CPlace::Addr, found {:?}\", self),\n+            | CPlaceInner::VarPair(_, _, _)\n+            | CPlaceInner::VarLane(_, _, _) => bug!(\"Expected CPlace::Addr, found {:?}\", self),\n         }\n     }\n \n@@ -527,6 +535,22 @@ impl<'tcx> CPlace<'tcx> {\n                 transmute_value(fx, var2, data2, dst_ty2);\n                 return;\n             }\n+            CPlaceInner::VarLane(_local, var, lane) => {\n+                let data = from.load_scalar(fx);\n+\n+                // First get the old vector\n+                let vector = fx.bcx.use_var(var);\n+                fx.bcx.set_val_label(vector, cranelift_codegen::ir::ValueLabel::new(var.index()));\n+\n+                // Next insert the written lane into the vector\n+                let vector = fx.bcx.ins().insertlane(vector, data, lane);\n+\n+                // Finally write the new vector\n+                fx.bcx.set_val_label(vector, cranelift_codegen::ir::ValueLabel::new(var.index()));\n+                fx.bcx.def_var(var, vector);\n+\n+                return;\n+            }\n             CPlaceInner::Addr(ptr, None) => {\n                 if dst_layout.size == Size::ZERO || dst_layout.abi == Abi::Uninhabited {\n                     return;\n@@ -589,23 +613,33 @@ impl<'tcx> CPlace<'tcx> {\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         field: mir::Field,\n     ) -> CPlace<'tcx> {\n-        // FIXME handle simd values\n-\n         let layout = self.layout();\n-        if let CPlaceInner::VarPair(local, var1, var2) = self.inner {\n-            let layout = layout.field(&*fx, field.index());\n-\n-            match field.as_u32() {\n-                0 => return CPlace {\n-                    inner: CPlaceInner::Var(local, var1),\n-                    layout,\n-                },\n-                1 => return CPlace {\n-                    inner: CPlaceInner::Var(local, var2),\n-                    layout,\n-                },\n-                _ => unreachable!(\"field should be 0 or 1\"),\n+\n+        match self.inner {\n+            CPlaceInner::Var(local, var) => {\n+                if let Abi::Vector { .. } = layout.abi {\n+                    return CPlace {\n+                        inner: CPlaceInner::VarLane(local, var, field.as_u32().try_into().unwrap()),\n+                        layout: layout.field(fx, field.as_u32().try_into().unwrap()),\n+                    };\n+                }\n+            }\n+            CPlaceInner::VarPair(local, var1, var2) => {\n+                let layout = layout.field(&*fx, field.index());\n+\n+                match field.as_u32() {\n+                    0 => return CPlace {\n+                        inner: CPlaceInner::Var(local, var1),\n+                        layout,\n+                    },\n+                    1 => return CPlace {\n+                        inner: CPlaceInner::Var(local, var2),\n+                        layout,\n+                    },\n+                    _ => unreachable!(\"field should be 0 or 1\"),\n+                }\n             }\n+            _ => {}\n         }\n \n         let (base, extra) = self.to_ptr_maybe_unsized();"}]}