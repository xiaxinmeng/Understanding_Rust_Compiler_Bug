{"sha": "190b4a71528a1eb83d43119db6877d7051cf8add", "node_id": "C_kwDOAAsO6NoAKDE5MGI0YTcxNTI4YTFlYjgzZDQzMTE5ZGI2ODc3ZDcwNTFjZjhhZGQ", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-31T17:54:30Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-05-31T17:55:49Z"}, "message": "Add itctx: ImplTraitContext arg to add_implicit_generics", "tree": {"sha": "2872870fb8b999c1c027f36e51f2e96a785c6cf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2872870fb8b999c1c027f36e51f2e96a785c6cf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/190b4a71528a1eb83d43119db6877d7051cf8add", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmKWVqcACgkQgTGiTgx5\n768WTQ//QYP2eN82etqBl+91/lvPs4hpCJqKqM4MBPgSfK5UlJE1rZj0UJfUpqGu\naXg7agEjGROMZc4LR0Q15ytOWM1gQnlm8eRg8UTYjkZLHfM/TdRo9NLLsuzZgfOb\n+vBHRGQtDfJzvdMuBFycvPU4muBLAByb2ojjDIvx3yOKx945k5bU8QDa6ef5xBGs\nKmr2wZS7DWlqx9ARfRVO9e3OF14fgRU26zbZIB7GxccZEretXktTnMcc80tvo+Ra\nphOEEHsoNm24Q17w3q7U9mMjof5QgWFMRKuV8KWJ7f2h6Gxo1brJkKQsOizx/YJp\nmcGhjhGdRSJuMkpMtSwXMugTRfWPc0G5jiIS4UquIIbivAqAhPYu+HbluW3W3Qwp\nbA5wHbJJpmMWIy193r4JMe98bd6RUZWRpk/RTmVvUTuDPEW5QEVHpv/I36cB48Vw\niDK8ezplv2lZ0JZtnDFO1sKz8crP4R8adGpMWkqVhgN+/bih/QKHeC29p5Bfc3r/\nABPFPN6GpTzwWmrGnioSF0dBGqZJBWbf1NnQpc1mrGTTIL0Nlj2hpm96Cfgo4sq1\nsBZVepUi2XXtRWr+bZbv65STlxW+/KFjG+OLwLDwvqI4khLvpeUCW0/VQc0Z7gkq\nVYqy1B6I1bgRlXqpOVR9SlfJsooITPbqiV+VHPq4cjeXSofKoVQ=\n=ZV6F\n-----END PGP SIGNATURE-----", "payload": "tree 2872870fb8b999c1c027f36e51f2e96a785c6cf7\nparent 1a71103c93424da73d893d53dec2a30e3b2af2cd\nauthor Santiago Pastorino <spastorino@gmail.com> 1654019670 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1654019749 -0300\n\nAdd itctx: ImplTraitContext arg to add_implicit_generics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/190b4a71528a1eb83d43119db6877d7051cf8add", "html_url": "https://github.com/rust-lang/rust/commit/190b4a71528a1eb83d43119db6877d7051cf8add", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/190b4a71528a1eb83d43119db6877d7051cf8add/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a71103c93424da73d893d53dec2a30e3b2af2cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a71103c93424da73d893d53dec2a30e3b2af2cd", "html_url": "https://github.com/rust-lang/rust/commit/1a71103c93424da73d893d53dec2a30e3b2af2cd"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "f05a739a949fb5dbf1c2214447825e321425199f", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/190b4a71528a1eb83d43119db6877d7051cf8add/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190b4a71528a1eb83d43119db6877d7051cf8add/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=190b4a71528a1eb83d43119db6877d7051cf8add", "patch": "@@ -266,10 +266,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let body_id =\n                         this.lower_maybe_async_body(span, &decl, asyncness, body.as_deref());\n \n-                    let (generics, decl) = this.add_implicit_generics(generics, id, |this| {\n-                        let ret_id = asyncness.opt_return_id();\n-                        this.lower_fn_decl(&decl, Some(id), FnDeclKind::Fn, ret_id)\n-                    });\n+                    let itctx = ImplTraitContext::Universal(this.current_hir_id_owner);\n+                    let (generics, decl) =\n+                        this.add_implicit_generics(generics, id, itctx, |this| {\n+                            let ret_id = asyncness.opt_return_id();\n+                            this.lower_fn_decl(&decl, Some(id), FnDeclKind::Fn, ret_id)\n+                        });\n                     let sig = hir::FnSig {\n                         decl,\n                         header: this.lower_fn_header(header),\n@@ -382,8 +384,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // method, it will not be considered an in-band\n                 // lifetime to be added, but rather a reference to a\n                 // parent lifetime.\n+                let itctx = ImplTraitContext::Universal(self.current_hir_id_owner);\n                 let (generics, (trait_ref, lowered_ty)) =\n-                    self.add_implicit_generics(ast_generics, id, |this| {\n+                    self.add_implicit_generics(ast_generics, id, itctx, |this| {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n                             this.lower_trait_ref(\n                                 trait_ref,\n@@ -647,8 +650,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             kind: match i.kind {\n                 ForeignItemKind::Fn(box Fn { ref sig, ref generics, .. }) => {\n                     let fdec = &sig.decl;\n+                    let itctx = ImplTraitContext::Universal(self.current_hir_id_owner);\n                     let (generics, (fn_dec, fn_args)) =\n-                        self.add_implicit_generics(generics, i.id, |this| {\n+                        self.add_implicit_generics(generics, i.id, itctx, |this| {\n                             (\n                                 // Disallow `impl Trait` in foreign items.\n                                 this.lower_fn_decl(fdec, None, FnDeclKind::ExternFn, None),\n@@ -1227,7 +1231,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         is_async: Option<NodeId>,\n     ) -> (&'hir hir::Generics<'hir>, hir::FnSig<'hir>) {\n         let header = self.lower_fn_header(sig.header);\n-        let (generics, decl) = self.add_implicit_generics(generics, id, |this| {\n+        let itctx = ImplTraitContext::Universal(self.current_hir_id_owner);\n+        let (generics, decl) = self.add_implicit_generics(generics, id, itctx, |this| {\n             this.lower_fn_decl(&sig.decl, Some(id), kind, is_async)\n         });\n         (generics, hir::FnSig { header, decl, span: self.lower_span(sig.span) })"}, {"sha": "2752a201ab9d2af1325c343466decbdcb1d338f0", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/190b4a71528a1eb83d43119db6877d7051cf8add/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190b4a71528a1eb83d43119db6877d7051cf8add/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=190b4a71528a1eb83d43119db6877d7051cf8add", "patch": "@@ -710,10 +710,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         generics: &Generics,\n         parent_node_id: NodeId,\n+        itctx: ImplTraitContext,\n         f: impl FnOnce(&mut Self) -> T,\n     ) -> (&'hir hir::Generics<'hir>, T) {\n-        let mut lowered_generics = self\n-            .lower_generics_mut(generics, ImplTraitContext::Universal(self.current_hir_id_owner));\n+        match itctx {\n+            ImplTraitContext::Universal(..) => {}\n+            _ => {\n+                debug_assert!(self.impl_trait_defs.is_empty());\n+                debug_assert!(self.impl_trait_bounds.is_empty());\n+            }\n+        }\n+\n+        let mut lowered_generics = self.lower_generics_mut(generics, itctx);\n         let res = f(self);\n \n         let extra_lifetimes = self.resolver.take_extra_lifetime_params(parent_node_id);"}]}