{"sha": "406931381b154a9d939078d482af94dae63ab366", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNjkzMTM4MWIxNTRhOWQ5MzkwNzhkNDgyYWY5NGRhZTYzYWIzNjY=", "commit": {"author": {"name": "Paul Florence", "email": "florencepaul@hotmail.fr", "date": "2017-10-20T12:41:24Z"}, "committer": {"name": "Paul Florence", "email": "florencepaul@hotmail.fr", "date": "2017-10-20T14:17:41Z"}, "message": "Fixed some code in clippy to pass the new, removed formatting changes.", "tree": {"sha": "8e2f68a752a914f48941c63cd0ab3edea64235ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e2f68a752a914f48941c63cd0ab3edea64235ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/406931381b154a9d939078d482af94dae63ab366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/406931381b154a9d939078d482af94dae63ab366", "html_url": "https://github.com/rust-lang/rust/commit/406931381b154a9d939078d482af94dae63ab366", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/406931381b154a9d939078d482af94dae63ab366/comments", "author": {"login": "gbip", "id": 15819864, "node_id": "MDQ6VXNlcjE1ODE5ODY0", "avatar_url": "https://avatars.githubusercontent.com/u/15819864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gbip", "html_url": "https://github.com/gbip", "followers_url": "https://api.github.com/users/gbip/followers", "following_url": "https://api.github.com/users/gbip/following{/other_user}", "gists_url": "https://api.github.com/users/gbip/gists{/gist_id}", "starred_url": "https://api.github.com/users/gbip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gbip/subscriptions", "organizations_url": "https://api.github.com/users/gbip/orgs", "repos_url": "https://api.github.com/users/gbip/repos", "events_url": "https://api.github.com/users/gbip/events{/privacy}", "received_events_url": "https://api.github.com/users/gbip/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gbip", "id": 15819864, "node_id": "MDQ6VXNlcjE1ODE5ODY0", "avatar_url": "https://avatars.githubusercontent.com/u/15819864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gbip", "html_url": "https://github.com/gbip", "followers_url": "https://api.github.com/users/gbip/followers", "following_url": "https://api.github.com/users/gbip/following{/other_user}", "gists_url": "https://api.github.com/users/gbip/gists{/gist_id}", "starred_url": "https://api.github.com/users/gbip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gbip/subscriptions", "organizations_url": "https://api.github.com/users/gbip/orgs", "repos_url": "https://api.github.com/users/gbip/repos", "events_url": "https://api.github.com/users/gbip/events{/privacy}", "received_events_url": "https://api.github.com/users/gbip/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "322effe4158cd3f2c48eba83af86383cd8d5612f", "url": "https://api.github.com/repos/rust-lang/rust/commits/322effe4158cd3f2c48eba83af86383cd8d5612f", "html_url": "https://github.com/rust-lang/rust/commit/322effe4158cd3f2c48eba83af86383cd8d5612f"}], "stats": {"total": 210, "additions": 105, "deletions": 105}, "files": [{"sha": "36f3579e548b977f152ab8ec66deabb1a92647f1", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=406931381b154a9d939078d482af94dae63ab366", "patch": "@@ -33,7 +33,7 @@ declare_lint! {\n }\n \n // Tuples are of the form (constant, name, min_digits)\n-const KNOWN_CONSTS: &'static [(f64, &'static str, usize)] = &[\n+const KNOWN_CONSTS: &[(f64, &str, usize)] = &[\n     (f64::E, \"E\", 4),\n     (f64::FRAC_1_PI, \"FRAC_1_PI\", 4),\n     (f64::FRAC_1_SQRT_2, \"FRAC_1_SQRT_2\", 5),"}, {"sha": "af99b77163b6248b16ed9202290b6dd53f5437e0", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=406931381b154a9d939078d482af94dae63ab366", "patch": "@@ -71,8 +71,8 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n     }\n }\n \n-const BRACED_EXPR_MESSAGE: &'static str = \"omit braces around single expression condition\";\n-const COMPLEX_BLOCK_MESSAGE: &'static str = \"in an 'if' condition, avoid complex blocks or closures with blocks; \\\n+const BRACED_EXPR_MESSAGE: &str = \"omit braces around single expression condition\";\n+const COMPLEX_BLOCK_MESSAGE: &str = \"in an 'if' condition, avoid complex blocks or closures with blocks; \\\n                                              instead, move the block or closure higher and bind it with a 'let'\";\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {"}, {"sha": "a56e73e2c50d2b735b1ec019ca433dd71cca2f66", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=406931381b154a9d939078d482af94dae63ab366", "patch": "@@ -63,7 +63,7 @@ impl StaticConst {\n                 self.visit_type(&*borrow_type.ty, cx);\n             },\n             TyKind::Slice(ref ty) => {\n-                self.visit_type(&ty, cx);\n+                self.visit_type(ty, cx);\n             },\n             _ => {},\n         }"}, {"sha": "abe9897ba4d4281e76cfa87762afbb0892119e87", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=406931381b154a9d939078d482af94dae63ab366", "patch": "@@ -88,7 +88,7 @@ impl<'a> Iterator for Parser<'a> {\n #[allow(cast_possible_truncation)]\n pub fn strip_doc_comment_decoration(comment: &str, span: Span) -> (String, Vec<(usize, Span)>) {\n     // one-line comments lose their prefix\n-    const ONELINERS: &'static [&'static str] = &[\"///!\", \"///\", \"//!\", \"//\"];\n+    const ONELINERS: &[&str] = &[\"///!\", \"///\", \"//!\", \"//\"];\n     for prefix in ONELINERS {\n         if comment.starts_with(*prefix) {\n             let doc = &comment[prefix.len()..];"}, {"sha": "849f0024415b0c4070d92bbe13186ce2742ba1cc", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=406931381b154a9d939078d482af94dae63ab366", "patch": "@@ -1531,7 +1531,7 @@ enum Convention {\n }\n \n #[cfg_attr(rustfmt, rustfmt_skip)]\n-const CONVENTIONS: [(Convention, &'static [SelfKind]); 6] = [\n+const CONVENTIONS: [(Convention, &[SelfKind]); 6] = [\n     (Convention::Eq(\"new\"), &[SelfKind::No]),\n     (Convention::StartsWith(\"as_\"), &[SelfKind::Ref, SelfKind::RefMut]),\n     (Convention::StartsWith(\"from_\"), &[SelfKind::No]),\n@@ -1541,7 +1541,7 @@ const CONVENTIONS: [(Convention, &'static [SelfKind]); 6] = [\n ];\n \n #[cfg_attr(rustfmt, rustfmt_skip)]\n-const TRAIT_METHODS: [(&'static str, usize, SelfKind, OutType, &'static str); 30] = [\n+const TRAIT_METHODS: [(&str, usize, SelfKind, OutType, &str); 30] = [\n     (\"add\", 2, SelfKind::Value, OutType::Any, \"std::ops::Add\"),\n     (\"as_mut\", 1, SelfKind::RefMut, OutType::Ref, \"std::convert::AsMut\"),\n     (\"as_ref\", 1, SelfKind::Ref, OutType::Ref, \"std::convert::AsRef\"),\n@@ -1575,7 +1575,7 @@ const TRAIT_METHODS: [(&'static str, usize, SelfKind, OutType, &'static str); 30\n ];\n \n #[cfg_attr(rustfmt, rustfmt_skip)]\n-const PATTERN_METHODS: [(&'static str, usize); 17] = [\n+const PATTERN_METHODS: [(&str, usize); 17] = [\n     (\"contains\", 1),\n     (\"starts_with\", 1),\n     (\"ends_with\", 1),"}, {"sha": "00d7a945595fafdbde77f88ffbfaddb48b3712ed", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=406931381b154a9d939078d482af94dae63ab366", "patch": "@@ -252,15 +252,15 @@ struct LintData<'a> {\n     block_stmts: &'a [ast::Stmt],\n }\n \n-const MSG_REDUNDANT_ELSE_BLOCK: &'static str = \"This else block is redundant.\\n\";\n+const MSG_REDUNDANT_ELSE_BLOCK: &str = \"This else block is redundant.\\n\";\n \n-const MSG_ELSE_BLOCK_NOT_NEEDED: &'static str = \"There is no need for an explicit `else` block for this `if` \\\n+const MSG_ELSE_BLOCK_NOT_NEEDED: &str = \"There is no need for an explicit `else` block for this `if` \\\n                                                  expression\\n\";\n \n-const DROP_ELSE_BLOCK_AND_MERGE_MSG: &'static str = \"Consider dropping the else clause and merging the code that \\\n+const DROP_ELSE_BLOCK_AND_MERGE_MSG: &str = \"Consider dropping the else clause and merging the code that \\\n                                                      follows (in the loop) with the if block, like so:\\n\";\n \n-const DROP_ELSE_BLOCK_MSG: &'static str = \"Consider dropping the else clause, and moving out the code in the else \\\n+const DROP_ELSE_BLOCK_MSG: &str = \"Consider dropping the else clause, and moving out the code in the else \\\n                                            block, like so:\\n\";\n \n "}, {"sha": "478b4c3e0eb6d62c74201a693571abeb4a55bd92", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=406931381b154a9d939078d482af94dae63ab366", "patch": "@@ -69,7 +69,7 @@ struct SimilarNamesLocalVisitor<'a, 'tcx: 'a> {\n // this list contains lists of names that are allowed to be similar\n // the assumption is that no name is ever contained in multiple lists.\n #[cfg_attr(rustfmt, rustfmt_skip)]\n-const WHITELIST: &'static [&'static [&'static str]] = &[\n+const WHITELIST: &[&[&str]] = &[\n     &[\"parsed\", \"parser\"],\n     &[\"lhs\", \"rhs\"],\n     &[\"tx\", \"rx\"],"}, {"sha": "83413ae8b48fc3d7003f2696ce758e48c3cff384", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=406931381b154a9d939078d482af94dae63ab366", "patch": "@@ -182,7 +182,7 @@ define_Conf! {\n /// Search for the configuration file.\n pub fn lookup_conf_file() -> io::Result<Option<path::PathBuf>> {\n     /// Possible filename to search for.\n-    const CONFIG_FILE_NAMES: [&'static str; 2] = [\".clippy.toml\", \"clippy.toml\"];\n+    const CONFIG_FILE_NAMES: [&str; 2] = [\".clippy.toml\", \"clippy.toml\"];\n \n     let mut current = try!(env::current_dir());\n "}, {"sha": "f59716268a064cd57704c242f37380b5cff1a605", "filename": "clippy_lints/src/utils/constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Futils%2Fconstants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Futils%2Fconstants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconstants.rs?ref=406931381b154a9d939078d482af94dae63ab366", "patch": "@@ -7,7 +7,7 @@\n /// See also [the reference][reference-types] for a list of such types.\n ///\n /// [reference-types]: https://doc.rust-lang.org/reference.html#types\n-pub const BUILTIN_TYPES: &'static [&'static str] = &[\n+pub const BUILTIN_TYPES: &[&str] = &[\n     \"i8\",\n     \"u8\",\n     \"i16\","}, {"sha": "cf3bf41a925f8433da4098271128277950fb6038", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=406931381b154a9d939078d482af94dae63ab366", "patch": "@@ -169,7 +169,7 @@ pub fn match_def_path(tcx: TyCtxt, def_id: DefId, path: &[&str]) -> bool {\n \n     impl ty::item_path::ItemPathBuffer for AbsolutePathBuffer {\n         fn root_mode(&self) -> &ty::item_path::RootMode {\n-            const ABSOLUTE: &'static ty::item_path::RootMode = &ty::item_path::RootMode::Absolute;\n+            const ABSOLUTE: &ty::item_path::RootMode = &ty::item_path::RootMode::Absolute;\n             ABSOLUTE\n         }\n "}, {"sha": "c198ad64b0fa35de09ccc318722a869af4bbbaca", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 89, "deletions": 89, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406931381b154a9d939078d482af94dae63ab366/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=406931381b154a9d939078d482af94dae63ab366", "patch": "@@ -1,93 +1,93 @@\n //! This module contains paths to types and functions Clippy needs to know\n //! about.\n \n-pub const ANY_TRAIT: [&'static str; 3] = [\"std\", \"any\", \"Any\"];\n-pub const ARC: [&'static str; 3] = [\"alloc\", \"arc\", \"Arc\"];\n-pub const ASMUT_TRAIT: [&'static str; 3] = [\"core\", \"convert\", \"AsMut\"];\n-pub const ASREF_TRAIT: [&'static str; 3] = [\"core\", \"convert\", \"AsRef\"];\n-pub const BEGIN_PANIC: [&'static str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n-pub const BINARY_HEAP: [&'static str; 3] = [\"alloc\", \"binary_heap\", \"BinaryHeap\"];\n-pub const BORROW_TRAIT: [&'static str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n-pub const BOX: [&'static str; 3] = [\"std\", \"boxed\", \"Box\"];\n-pub const BOX_NEW: [&'static str; 4] = [\"std\", \"boxed\", \"Box\", \"new\"];\n-pub const BTREEMAP: [&'static str; 4] = [\"alloc\", \"btree\", \"map\", \"BTreeMap\"];\n-pub const BTREEMAP_ENTRY: [&'static str; 4] = [\"alloc\", \"btree\", \"map\", \"Entry\"];\n-pub const BTREESET: [&'static str; 4] = [\"alloc\", \"btree\", \"set\", \"BTreeSet\"];\n-pub const CLONE: [&'static str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n-pub const CLONE_TRAIT: [&'static str; 3] = [\"core\", \"clone\", \"Clone\"];\n-pub const CMP_MAX: [&'static str; 3] = [\"core\", \"cmp\", \"max\"];\n-pub const CMP_MIN: [&'static str; 3] = [\"core\", \"cmp\", \"min\"];\n-pub const COW: [&'static str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n-pub const CSTRING_NEW: [&'static str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"new\"];\n-pub const DEBUG_FMT_METHOD: [&'static str; 4] = [\"core\", \"fmt\", \"Debug\", \"fmt\"];\n-pub const DEFAULT_TRAIT: [&'static str; 3] = [\"core\", \"default\", \"Default\"];\n-pub const DISPLAY_FMT_METHOD: [&'static str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n-pub const DOUBLE_ENDED_ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n-pub const DROP: [&'static str; 3] = [\"core\", \"mem\", \"drop\"];\n-pub const FMT_ARGUMENTS_NEWV1: [&'static str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n-pub const FMT_ARGUMENTV1_NEW: [&'static str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];\n-pub const FROM_FROM: [&'static str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n-pub const HASH: [&'static str; 2] = [\"hash\", \"Hash\"];\n-pub const HASHMAP: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n-pub const HASHMAP_ENTRY: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n-pub const HASHSET: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n-pub const INIT: [&'static str; 4] = [\"core\", \"intrinsics\", \"\", \"init\"];\n-pub const INTO: [&'static str; 3] = [\"core\", \"convert\", \"Into\"];\n-pub const INTO_ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"traits\", \"IntoIterator\"];\n-pub const IO_PRINT: [&'static str; 4] = [\"std\", \"io\", \"stdio\", \"_print\"];\n-pub const IO_READ: [&'static str; 3] = [\"std\", \"io\", \"Read\"];\n-pub const IO_WRITE: [&'static str; 3] = [\"std\", \"io\", \"Write\"];\n-pub const ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"iterator\", \"Iterator\"];\n-pub const LINKED_LIST: [&'static str; 3] = [\"alloc\", \"linked_list\", \"LinkedList\"];\n-pub const LINT: [&'static str; 3] = [\"rustc\", \"lint\", \"Lint\"];\n-pub const LINT_ARRAY: [&'static str; 3] = [\"rustc\", \"lint\", \"LintArray\"];\n-pub const MEM_FORGET: [&'static str; 3] = [\"core\", \"mem\", \"forget\"];\n-pub const MEM_UNINIT: [&'static str; 3] = [\"core\", \"mem\", \"uninitialized\"];\n-pub const MEM_ZEROED: [&'static str; 3] = [\"core\", \"mem\", \"zeroed\"];\n-pub const MUTEX: [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n-pub const OPEN_OPTIONS: [&'static str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n-pub const OPS_MODULE: [&'static str; 2] = [\"core\", \"ops\"];\n-pub const OPTION: [&'static str; 3] = [\"core\", \"option\", \"Option\"];\n-pub const OPTION_NONE: [&'static str; 4] = [\"core\", \"option\", \"Option\", \"None\"];\n-pub const OPTION_SOME: [&'static str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n-pub const PTR_NULL: [&'static str; 2] = [\"ptr\", \"null\"];\n-pub const PTR_NULL_MUT: [&'static str; 2] = [\"ptr\", \"null_mut\"];\n-pub const RANGE: [&'static str; 3] = [\"core\", \"ops\", \"Range\"];\n-pub const RANGE_FROM: [&'static str; 3] = [\"core\", \"ops\", \"RangeFrom\"];\n-pub const RANGE_FROM_STD: [&'static str; 3] = [\"std\", \"ops\", \"RangeFrom\"];\n-pub const RANGE_FULL: [&'static str; 3] = [\"core\", \"ops\", \"RangeFull\"];\n-pub const RANGE_FULL_STD: [&'static str; 3] = [\"std\", \"ops\", \"RangeFull\"];\n-pub const RANGE_INCLUSIVE: [&'static str; 3] = [\"core\", \"ops\", \"RangeInclusive\"];\n-pub const RANGE_INCLUSIVE_STD: [&'static str; 3] = [\"std\", \"ops\", \"RangeInclusive\"];\n-pub const RANGE_STD: [&'static str; 3] = [\"std\", \"ops\", \"Range\"];\n-pub const RANGE_TO: [&'static str; 3] = [\"core\", \"ops\", \"RangeTo\"];\n-pub const RANGE_TO_INCLUSIVE: [&'static str; 3] = [\"core\", \"ops\", \"RangeToInclusive\"];\n-pub const RANGE_TO_INCLUSIVE_STD: [&'static str; 3] = [\"std\", \"ops\", \"RangeToInclusive\"];\n-pub const RANGE_TO_STD: [&'static str; 3] = [\"std\", \"ops\", \"RangeTo\"];\n-pub const RC: [&'static str; 3] = [\"alloc\", \"rc\", \"Rc\"];\n-pub const REGEX: [&'static str; 3] = [\"regex\", \"re_unicode\", \"Regex\"];\n-pub const REGEX_BUILDER_NEW: [&'static str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];\n-pub const REGEX_BYTES: [&'static str; 3] = [\"regex\", \"re_bytes\", \"Regex\"];\n-pub const REGEX_BYTES_BUILDER_NEW: [&'static str; 5] = [\"regex\", \"re_builder\", \"bytes\", \"RegexBuilder\", \"new\"];\n-pub const REGEX_BYTES_NEW: [&'static str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];\n-pub const REGEX_BYTES_SET_NEW: [&'static str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];\n-pub const REGEX_NEW: [&'static str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];\n-pub const REGEX_SET_NEW: [&'static str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\", \"new\"];\n-pub const REPEAT: [&'static str; 3] = [\"core\", \"iter\", \"repeat\"];\n-pub const RESULT: [&'static str; 3] = [\"core\", \"result\", \"Result\"];\n-pub const RESULT_ERR: [&'static str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n-pub const RESULT_OK: [&'static str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];\n-pub const SERDE_DE_VISITOR: [&'static str; 3] = [\"serde\", \"de\", \"Visitor\"];\n-pub const SLICE_INTO_VEC: [&'static str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n+pub const ANY_TRAIT: [&str; 3] = [\"std\", \"any\", \"Any\"];\n+pub const ARC: [&str; 3] = [\"alloc\", \"arc\", \"Arc\"];\n+pub const ASMUT_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsMut\"];\n+pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n+pub const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n+pub const BINARY_HEAP: [&str; 3] = [\"alloc\", \"binary_heap\", \"BinaryHeap\"];\n+pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n+pub const BOX: [&str; 3] = [\"std\", \"boxed\", \"Box\"];\n+pub const BOX_NEW: [&str; 4] = [\"std\", \"boxed\", \"Box\", \"new\"];\n+pub const BTREEMAP: [&str; 4] = [\"alloc\", \"btree\", \"map\", \"BTreeMap\"];\n+pub const BTREEMAP_ENTRY: [&str; 4] = [\"alloc\", \"btree\", \"map\", \"Entry\"];\n+pub const BTREESET: [&str; 4] = [\"alloc\", \"btree\", \"set\", \"BTreeSet\"];\n+pub const CLONE: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n+pub const CLONE_TRAIT: [&str; 3] = [\"core\", \"clone\", \"Clone\"];\n+pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n+pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n+pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n+pub const CSTRING_NEW: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"new\"];\n+pub const DEBUG_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Debug\", \"fmt\"];\n+pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n+pub const DISPLAY_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n+pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n+pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n+pub const FMT_ARGUMENTS_NEWV1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n+pub const FMT_ARGUMENTV1_NEW: [&str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];\n+pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n+pub const HASH: [&str; 2] = [\"hash\", \"Hash\"];\n+pub const HASHMAP: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n+pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n+pub const HASHSET: [&str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n+pub const INIT: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"init\"];\n+pub const INTO: [&str; 3] = [\"core\", \"convert\", \"Into\"];\n+pub const INTO_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"IntoIterator\"];\n+pub const IO_PRINT: [&str; 4] = [\"std\", \"io\", \"stdio\", \"_print\"];\n+pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n+pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n+pub const ITERATOR: [&str; 4] = [\"core\", \"iter\", \"iterator\", \"Iterator\"];\n+pub const LINKED_LIST: [&str; 3] = [\"alloc\", \"linked_list\", \"LinkedList\"];\n+pub const LINT: [&str; 3] = [\"rustc\", \"lint\", \"Lint\"];\n+pub const LINT_ARRAY: [&str; 3] = [\"rustc\", \"lint\", \"LintArray\"];\n+pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n+pub const MEM_UNINIT: [&str; 3] = [\"core\", \"mem\", \"uninitialized\"];\n+pub const MEM_ZEROED: [&str; 3] = [\"core\", \"mem\", \"zeroed\"];\n+pub const MUTEX: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n+pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n+pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];\n+pub const OPTION: [&str; 3] = [\"core\", \"option\", \"Option\"];\n+pub const OPTION_NONE: [&str; 4] = [\"core\", \"option\", \"Option\", \"None\"];\n+pub const OPTION_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n+pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n+pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n+pub const RANGE: [&str; 3] = [\"core\", \"ops\", \"Range\"];\n+pub const RANGE_FROM: [&str; 3] = [\"core\", \"ops\", \"RangeFrom\"];\n+pub const RANGE_FROM_STD: [&str; 3] = [\"std\", \"ops\", \"RangeFrom\"];\n+pub const RANGE_FULL: [&str; 3] = [\"core\", \"ops\", \"RangeFull\"];\n+pub const RANGE_FULL_STD: [&str; 3] = [\"std\", \"ops\", \"RangeFull\"];\n+pub const RANGE_INCLUSIVE: [&str; 3] = [\"core\", \"ops\", \"RangeInclusive\"];\n+pub const RANGE_INCLUSIVE_STD: [&str; 3] = [\"std\", \"ops\", \"RangeInclusive\"];\n+pub const RANGE_STD: [&str; 3] = [\"std\", \"ops\", \"Range\"];\n+pub const RANGE_TO: [&str; 3] = [\"core\", \"ops\", \"RangeTo\"];\n+pub const RANGE_TO_INCLUSIVE: [&str; 3] = [\"core\", \"ops\", \"RangeToInclusive\"];\n+pub const RANGE_TO_INCLUSIVE_STD: [&str; 3] = [\"std\", \"ops\", \"RangeToInclusive\"];\n+pub const RANGE_TO_STD: [&str; 3] = [\"std\", \"ops\", \"RangeTo\"];\n+pub const RC: [&str; 3] = [\"alloc\", \"rc\", \"Rc\"];\n+pub const REGEX: [&str; 3] = [\"regex\", \"re_unicode\", \"Regex\"];\n+pub const REGEX_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];\n+pub const REGEX_BYTES: [&str; 3] = [\"regex\", \"re_bytes\", \"Regex\"];\n+pub const REGEX_BYTES_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"bytes\", \"RegexBuilder\", \"new\"];\n+pub const REGEX_BYTES_NEW: [&str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];\n+pub const REGEX_BYTES_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];\n+pub const REGEX_NEW: [&str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];\n+pub const REGEX_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\", \"new\"];\n+pub const REPEAT: [&str; 3] = [\"core\", \"iter\", \"repeat\"];\n+pub const RESULT: [&str; 3] = [\"core\", \"result\", \"Result\"];\n+pub const RESULT_ERR: [&str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n+pub const RESULT_OK: [&str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];\n+pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n+pub const SLICE_INTO_VEC: [&str; 4] = [\"alloc\", \"slice\", \"<impl [T]>\", \"into_vec\"];\n pub const SLICE_ITER: [&str; 3] = [\"core\", \"slice\", \"Iter\"];\n-pub const STRING: [&'static str; 3] = [\"alloc\", \"string\", \"String\"];\n-pub const TO_OWNED: [&'static str; 3] = [\"alloc\", \"borrow\", \"ToOwned\"];\n-pub const TO_STRING: [&'static str; 3] = [\"alloc\", \"string\", \"ToString\"];\n-pub const TRANSMUTE: [&'static str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n-pub const TRY_INTO_RESULT: [&'static str; 4] = [\"std\", \"ops\", \"Try\", \"into_result\"];\n-pub const UNINIT: [&'static str; 4] = [\"core\", \"intrinsics\", \"\", \"uninit\"];\n-pub const VEC: [&'static str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n-pub const VEC_DEQUE: [&'static str; 3] = [\"alloc\", \"vec_deque\", \"VecDeque\"];\n-pub const VEC_FROM_ELEM: [&'static str; 3] = [\"alloc\", \"vec\", \"from_elem\"];\n-pub const WEAK_ARC: [&'static str; 3] = [\"alloc\", \"arc\", \"Weak\"];\n-pub const WEAK_RC: [&'static str; 3] = [\"alloc\", \"rc\", \"Weak\"];\n+pub const STRING: [&str; 3] = [\"alloc\", \"string\", \"String\"];\n+pub const TO_OWNED: [&str; 3] = [\"alloc\", \"borrow\", \"ToOwned\"];\n+pub const TO_STRING: [&str; 3] = [\"alloc\", \"string\", \"ToString\"];\n+pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n+pub const TRY_INTO_RESULT: [&str; 4] = [\"std\", \"ops\", \"Try\", \"into_result\"];\n+pub const UNINIT: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"uninit\"];\n+pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n+pub const VEC_DEQUE: [&str; 3] = [\"alloc\", \"vec_deque\", \"VecDeque\"];\n+pub const VEC_FROM_ELEM: [&str; 3] = [\"alloc\", \"vec\", \"from_elem\"];\n+pub const WEAK_ARC: [&str; 3] = [\"alloc\", \"arc\", \"Weak\"];\n+pub const WEAK_RC: [&str; 3] = [\"alloc\", \"rc\", \"Weak\"];"}]}