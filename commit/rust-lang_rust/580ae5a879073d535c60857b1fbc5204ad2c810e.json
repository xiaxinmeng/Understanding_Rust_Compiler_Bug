{"sha": "580ae5a879073d535c60857b1fbc5204ad2c810e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MGFlNWE4NzkwNzNkNTM1YzYwODU3YjFmYmM1MjA0YWQyYzgxMGU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-29T17:47:51Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-01T15:12:48Z"}, "message": "Use `span_suggestion` in `FLOAT_CMP`", "tree": {"sha": "e60aacb24153ff5f24aa984994f13938a1658e86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e60aacb24153ff5f24aa984994f13938a1658e86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/580ae5a879073d535c60857b1fbc5204ad2c810e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXdohwAAoJEF5CfHlMukXoynoQAJa6rSyO2XAB8zG8mE2GUyZd\nnqwLmUKQNKUfKZzwXjmo+tkPuiCmgL6f4smuZp+g11MzsZWMMv50GCCeKmfNuXD1\n8Drlv0GJvgGG6lBb2BCIRZhZE6uZuvYP0Zbz/MDRbnTIgAekspIlGOYUaf5m75is\n7y6kZR7fDy5vt6JsEEyQaJzyngPNVxIOKKzNMlqMMKyE3KcnZkzJknHp5uwMgNn9\nEBG1cG7poIVhq78BvXu8n0FljFFG5UXyWdd6CkVOfbf8mGTIZmAjiWT9thAvd6nH\nGupclKMV2fPXAozq4ZWNEQPgPmX+mn3Tohn5A+83ISF0QPMgUn2bmH7odIdr5R0N\npbU8sCexSYywh1Bh7qe685xjPzxQ+7QtA4IZHC+rOUaWITfbiVeFRMUQbVszx2B9\n2fvCbtJKjagRLux+o6yzjBpalYaKmtbHGqxoubJhGRcmD0uyKzET0Kjjw5PBujeL\nIqpAntxigitNrUdd1y5pnb4YFOGghZE81CdfrAIyKe/IT3C7N9RX8r5sR3VRQ3vd\n+tGn/xJzX/ufVnXKURKzLhBIOoS6bINi0lGfSdZf6mE6eeiVzEK4Q4bfEqf1g6ZJ\n3woMzGQZxQ3U8lC3yMIJroeG+uo5C2HDv+SNyb+6gNoV3CVqtns9/R/iK9JTpTjd\ntDJFI1Wh/VlbD8vyBn3B\n=YHjU\n-----END PGP SIGNATURE-----", "payload": "tree e60aacb24153ff5f24aa984994f13938a1658e86\nparent d6e3fa8f4947b6b0a93f098c277731a42d452d7e\nauthor mcarton <cartonmartin+git@gmail.com> 1467222471 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467385968 +0200\n\nUse `span_suggestion` in `FLOAT_CMP`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/580ae5a879073d535c60857b1fbc5204ad2c810e", "html_url": "https://github.com/rust-lang/rust/commit/580ae5a879073d535c60857b1fbc5204ad2c810e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/580ae5a879073d535c60857b1fbc5204ad2c810e/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6e3fa8f4947b6b0a93f098c277731a42d452d7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6e3fa8f4947b6b0a93f098c277731a42d452d7e", "html_url": "https://github.com/rust-lang/rust/commit/d6e3fa8f4947b6b0a93f098c277731a42d452d7e"}], "stats": {"total": 65, "additions": 46, "deletions": 19}, "files": [{"sha": "e57cd50899efb7fb6fb189f400c1d8355543ff39", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/580ae5a879073d535c60857b1fbc5204ad2c810e/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580ae5a879073d535c60857b1fbc5204ad2c810e/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=580ae5a879073d535c60857b1fbc5204ad2c810e", "patch": "@@ -164,15 +164,18 @@ impl LateLintPass for FloatCmp {\n                         return;\n                     }\n                 }\n-                span_lint(cx,\n-                          FLOAT_CMP,\n-                          expr.span,\n-                          &format!(\"{}-comparison of f32 or f64 detected. Consider changing this to `({} - {}).abs() < \\\n-                                    epsilon` for some suitable value of epsilon. \\\n-                                    std::f32::EPSILON and std::f64::EPSILON are available.\",\n-                                   op.as_str(),\n-                                   snippet(cx, left.span, \"..\"),\n-                                   snippet(cx, right.span, \"..\")));\n+                span_lint_and_then(cx,\n+                                   FLOAT_CMP,\n+                                   expr.span,\n+                                   \"strict comparison of f32 or f64\",\n+                                   |db| {\n+                    db.span_suggestion(expr.span,\n+                                       \"consider comparing them within some error\",\n+                                       format!(\"({} - {}).abs() < error\",\n+                                               snippet(cx, left.span, \"..\"),\n+                                               snippet(cx, right.span, \"..\")));\n+                    db.span_note(expr.span, \"std::f32::EPSILON and std::f64::EPSILON are available.\");\n+                });\n             }\n         }\n     }"}, {"sha": "cf8cefb3af3e0be41be6a32d1fcd44167d0f8688", "filename": "tests/compile-fail/float_cmp.rs", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/580ae5a879073d535c60857b1fbc5204ad2c810e/tests%2Fcompile-fail%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580ae5a879073d535c60857b1fbc5204ad2c810e/tests%2Fcompile-fail%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffloat_cmp.rs?ref=580ae5a879073d535c60857b1fbc5204ad2c810e", "patch": "@@ -40,23 +40,47 @@ fn main() {\n     ZERO == 0.0; //no error, comparison with zero is ok\n     ZERO + ZERO != 1.0; //no error, comparison with zero is ok\n \n-    ONE == 1f32; //~ERROR ==-comparison of f32 or f64\n-    ONE == (1.0 + 0.0); //~ERROR ==-comparison of f32 or f64\n-\n-    ONE + ONE == (ZERO + ONE + ONE); //~ERROR ==-comparison of f32 or f64\n-\n-    ONE != 2.0; //~ERROR !=-comparison of f32 or f64\n+    ONE == 1f32;\n+    //~^ ERROR strict comparison of f32 or f64\n+    //~| HELP within some error\n+    //~| SUGGESTION (ONE - 1f32).abs() < error\n+    ONE == (1.0 + 0.0);\n+    //~^ ERROR strict comparison of f32 or f64\n+    //~| HELP within some error\n+    //~| SUGGESTION (ONE - (1.0 + 0.0)).abs() < error\n+\n+    ONE + ONE == (ZERO + ONE + ONE);\n+    //~^ ERROR strict comparison of f32 or f64\n+    //~| HELP within some error\n+    //~| SUGGESTION (ONE + ONE - (ZERO + ONE + ONE)).abs() < error\n+\n+    ONE != 2.0;\n+    //~^ ERROR strict comparison of f32 or f64\n+    //~| HELP within some error\n+    //~| SUGGESTION (ONE - 2.0).abs() < error\n     ONE != 0.0; // no error, comparison with zero is ok\n-    twice(ONE) != ONE; //~ERROR !=-comparison of f32 or f64\n-    ONE as f64 != 2.0; //~ERROR !=-comparison of f32 or f64\n+    twice(ONE) != ONE;\n+    //~^ ERROR strict comparison of f32 or f64\n+    //~| HELP within some error\n+    //~| SUGGESTION (twice(ONE) - ONE).abs() < error\n+    ONE as f64 != 2.0;\n+    //~^ ERROR strict comparison of f32 or f64\n+    //~| HELP within some error\n+    //~| SUGGESTION (ONE as f64 - 2.0).abs() < error\n     ONE as f64 != 0.0; // no error, comparison with zero is ok\n \n     let x : f64 = 1.0;\n \n-    x == 1.0; //~ERROR ==-comparison of f32 or f64\n+    x == 1.0;\n+    //~^ ERROR strict comparison of f32 or f64\n+    //~| HELP within some error\n+    //~| SUGGESTION (x - 1.0).abs() < error\n     x != 0f64; // no error, comparison with zero is ok\n \n-    twice(x) != twice(ONE as f64); //~ERROR !=-comparison of f32 or f64\n+    twice(x) != twice(ONE as f64);\n+    //~^ ERROR strict comparison of f32 or f64\n+    //~| HELP within some error\n+    //~| SUGGESTION (twice(x) - twice(ONE as f64)).abs() < error\n \n \n     x < 0.0; // no errors, lower or greater comparisons need no fuzzyness"}]}