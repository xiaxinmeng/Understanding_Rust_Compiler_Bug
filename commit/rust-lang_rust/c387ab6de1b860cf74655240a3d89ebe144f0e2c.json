{"sha": "c387ab6de1b860cf74655240a3d89ebe144f0e2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzODdhYjZkZTFiODYwY2Y3NDY1NTI0MGEzZDg5ZWJlMTQ0ZjBlMmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-17T21:44:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-17T21:44:44Z"}, "message": "Merge #9320\n\n9320: internal: retire famous_defs_fixture r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5e7294a0239837c227b64575257bc4bb94ae0084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7294a0239837c227b64575257bc4bb94ae0084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c387ab6de1b860cf74655240a3d89ebe144f0e2c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgy8JMCRBK7hj4Ov3rIwAAEaIIAFaXzITHV4nsbY65BcNqWHHw\n0GAnGkODOGhJB88E20T/LWhKeZKXXv8vdadDATDw0gHopqPcaQD7TTeWt2C3ejoE\nz26KPC/DQxf/MGVL9fs2dc6znHUY9Hcml8e6N8QYbVjP1jHKhL2dKuToTIvPf2vF\nQmPMUrPx6ZHARlRCdjOVQKm74qkOx5RP5Y7sMx4Av8vlOUlbNCAa2Gi0rJF/obd2\nqeBXMDqjLhTetSr/dkIYJ+2sG7wzA3jbl1LeV+u+fsHf5MEEh9mdgGx4wrtD30RP\nm83ZLPNQMcv4T4Xq3w30oRfiWofUGQvjHLWj2zkprFF+1v1BfIzAY8kvwHvDnj0=\n=IOf/\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e7294a0239837c227b64575257bc4bb94ae0084\nparent 916384a1ea50323e8d44d8024ede1d39244fbb7c\nparent 66673eae2b3d3185607d29ee341d2db8a81a46e0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623966284 +0000\ncommitter GitHub <noreply@github.com> 1623966284 +0000\n\nMerge #9320\n\n9320: internal: retire famous_defs_fixture r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c387ab6de1b860cf74655240a3d89ebe144f0e2c", "html_url": "https://github.com/rust-lang/rust/commit/c387ab6de1b860cf74655240a3d89ebe144f0e2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c387ab6de1b860cf74655240a3d89ebe144f0e2c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "916384a1ea50323e8d44d8024ede1d39244fbb7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/916384a1ea50323e8d44d8024ede1d39244fbb7c", "html_url": "https://github.com/rust-lang/rust/commit/916384a1ea50323e8d44d8024ede1d39244fbb7c"}, {"sha": "66673eae2b3d3185607d29ee341d2db8a81a46e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/66673eae2b3d3185607d29ee341d2db8a81a46e0", "html_url": "https://github.com/rust-lang/rust/commit/66673eae2b3d3185607d29ee341d2db8a81a46e0"}], "stats": {"total": 89, "additions": 36, "deletions": 53}, "files": [{"sha": "409f81ca09f6669f546ef372b73bfaab2d96128f", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c387ab6de1b860cf74655240a3d89ebe144f0e2c/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c387ab6de1b860cf74655240a3d89ebe144f0e2c/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c387ab6de1b860cf74655240a3d89ebe144f0e2c", "patch": "@@ -568,8 +568,6 @@ mod tests {\n \n     use crate::fixture;\n \n-    use super::*;\n-\n     fn check_hover_no_result(ra_fixture: &str) {\n         let (analysis, position) = fixture::position(ra_fixture);\n         assert!(analysis.hover(position, true, true).unwrap().is_none());\n@@ -3813,11 +3811,14 @@ use foo::bar::{self$0};\n \n     #[test]\n     fn hover_keyword() {\n-        let ra_fixture = r#\"//- /main.rs crate:main deps:std\n-fn f() { retur$0n; }\"#;\n-        let fixture = format!(\"{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n         check(\n-            &fixture,\n+            r#\"\n+//- /main.rs crate:main deps:std\n+fn f() { retur$0n; }\n+//- /libstd.rs crate:std\n+/// Docs for return_keyword\n+mod return_keyword {}\n+\"#,\n             expect![[r#\"\n                 *return*\n \n@@ -3834,11 +3835,15 @@ fn f() { retur$0n; }\"#;\n \n     #[test]\n     fn hover_builtin() {\n-        let ra_fixture = r#\"//- /main.rs crate:main deps:std\n-cosnt _: &str$0 = \"\"; }\"#;\n-        let fixture = format!(\"{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n         check(\n-            &fixture,\n+            r#\"\n+//- /main.rs crate:main deps:std\n+cosnt _: &str$0 = \"\"; }\n+\n+//- /libstd.rs crate:std\n+/// Docs for prim_str\n+mod prim_str {}\n+\"#,\n             expect![[r#\"\n                 *str*\n "}, {"sha": "6c6ff16c25bc5ddd63b65d0c53c74a8ecf788d79", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c387ab6de1b860cf74655240a3d89ebe144f0e2c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c387ab6de1b860cf74655240a3d89ebe144f0e2c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=c387ab6de1b860cf74655240a3d89ebe144f0e2c", "patch": "@@ -48,6 +48,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n     let variant_name = variant.name()?;\n     let variant_hir = ctx.sema.to_def(&variant)?;\n     if existing_definition(ctx.db(), &variant_name, &variant_hir) {\n+        cov_mark::hit!(test_extract_enum_not_applicable_if_struct_exists);\n         return None;\n     }\n \n@@ -300,18 +301,10 @@ fn reference_to_node(\n \n #[cfg(test)]\n mod tests {\n-    use ide_db::helpers::FamousDefs;\n-\n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n \n-    fn check_not_applicable(ra_fixture: &str) {\n-        let fixture =\n-            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n-        check_assist_not_applicable(extract_struct_from_enum_variant, &fixture)\n-    }\n-\n     #[test]\n     fn test_extract_struct_several_fields_tuple() {\n         check_assist(\n@@ -699,29 +692,33 @@ fn foo() {\n \n     #[test]\n     fn test_extract_enum_not_applicable_for_element_with_no_fields() {\n-        check_not_applicable(\"enum A { $0One }\");\n+        check_assist_not_applicable(extract_struct_from_enum_variant, r#\"enum A { $0One }\"#);\n     }\n \n     #[test]\n     fn test_extract_enum_not_applicable_if_struct_exists() {\n-        check_not_applicable(\n-            r#\"struct One;\n-        enum A { $0One(u8, u32) }\"#,\n+        cov_mark::check!(test_extract_enum_not_applicable_if_struct_exists);\n+        check_assist_not_applicable(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+struct One;\n+enum A { $0One(u8, u32) }\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_extract_not_applicable_one_field() {\n-        check_not_applicable(r\"enum A { $0One(u32) }\");\n+        check_assist_not_applicable(extract_struct_from_enum_variant, r\"enum A { $0One(u32) }\");\n     }\n \n     #[test]\n     fn test_extract_not_applicable_no_field_tuple() {\n-        check_not_applicable(r\"enum A { $0None() }\");\n+        check_assist_not_applicable(extract_struct_from_enum_variant, r\"enum A { $0None() }\");\n     }\n \n     #[test]\n     fn test_extract_not_applicable_no_field_named() {\n-        check_not_applicable(r\"enum A { $0None {} }\");\n+        check_assist_not_applicable(extract_struct_from_enum_variant, r\"enum A { $0None {} }\");\n     }\n }"}, {"sha": "d96028cbcdf0da380f5cae364503c24f35654041", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c387ab6de1b860cf74655240a3d89ebe144f0e2c/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c387ab6de1b860cf74655240a3d89ebe144f0e2c/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=c387ab6de1b860cf74655240a3d89ebe144f0e2c", "patch": "@@ -74,12 +74,19 @@ pub fn visit_file_defs(\n /// somewhat similar to the known paths infra inside hir, but it different; We\n /// want to make sure that IDE specific paths don't become interesting inside\n /// the compiler itself as well.\n+///\n+/// Note that, by default, rust-analyzer tests **do not** include core or std\n+/// libraries. If you are writing tests for functionality using [`FamousDefs`],\n+/// you'd want to include [minicore](test_utils::MiniCore) declaration at the\n+/// start of your tests:\n+///\n+/// ```\n+/// //- minicore: iterator, ord, derive\n+/// ```\n pub struct FamousDefs<'a, 'b>(pub &'a Semantics<'b, RootDatabase>, pub Option<Crate>);\n \n #[allow(non_snake_case)]\n impl FamousDefs<'_, '_> {\n-    pub const FIXTURE: &'static str = include_str!(\"helpers/famous_defs_fixture.rs\");\n-\n     pub fn std(&self) -> Option<Crate> {\n         self.find_crate(\"std\")\n     }"}, {"sha": "6310fc0e1bfdba1c28a8bd98174ea367b874b707", "filename": "crates/ide_db/src/helpers/famous_defs_fixture.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/916384a1ea50323e8d44d8024ede1d39244fbb7c/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916384a1ea50323e8d44d8024ede1d39244fbb7c/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs?ref=916384a1ea50323e8d44d8024ede1d39244fbb7c", "patch": "@@ -1,26 +0,0 @@\n-//- /libcore.rs crate:core\n-//! Signatures of traits, types and functions from the core lib for use in tests.\n-pub mod prelude {\n-    pub mod rust_2018 {\n-        pub use crate::{\n-            cmp::Ord,\n-            convert::{From, Into},\n-            default::Default,\n-            iter::{IntoIterator, Iterator},\n-            ops::{Fn, FnMut, FnOnce},\n-            option::Option::{self, *},\n-        };\n-    }\n-}\n-#[prelude_import]\n-pub use prelude::rust_2018::*;\n-//- /libstd.rs crate:std deps:core\n-//! Signatures of traits, types and functions from the std lib for use in tests.\n-\n-/// Docs for return_keyword\n-mod return_keyword {}\n-\n-/// Docs for prim_str\n-mod prim_str {}\n-\n-pub use core::ops;"}]}