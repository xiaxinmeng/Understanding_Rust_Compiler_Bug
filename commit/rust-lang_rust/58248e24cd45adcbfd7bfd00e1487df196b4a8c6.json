{"sha": "58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MjQ4ZTI0Y2Q0NWFkY2JmZDdiZmQwMGUxNDg3ZGYxOTZiNGE4YzY=", "commit": {"author": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-12T03:14:39Z"}, "committer": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-12T03:14:39Z"}, "message": "Switch from Vec<InlayKind> to object with props\n\n- Instead of a single object type, use several individual nested types\n  to allow toggling from the settings GUI\n- Remove unused struct definitions\n- Install and test that the toggles work", "tree": {"sha": "7221dea8daa9dcede6ffaede88c890de17586c51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7221dea8daa9dcede6ffaede88c890de17586c51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "html_url": "https://github.com/rust-lang/rust/commit/58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/comments", "author": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "974ed7155acccb5da0c2aeac09d7052c4f75902d", "url": "https://api.github.com/repos/rust-lang/rust/commits/974ed7155acccb5da0c2aeac09d7052c4f75902d", "html_url": "https://github.com/rust-lang/rust/commit/974ed7155acccb5da0c2aeac09d7052c4f75902d"}], "stats": {"total": 126, "additions": 41, "deletions": 85}, "files": [{"sha": "59922e14c4dafe95c7ebf7aaad26b6cfcccc0189", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "patch": "@@ -12,13 +12,14 @@ use crate::{FileId, FunctionSignature};\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct InlayConfig {\n-    pub display_type: Vec<InlayKind>,\n+    pub type_hints: bool,\n+    pub parameter_hints: bool,\n     pub max_length: Option<usize>,\n }\n \n impl Default for InlayConfig {\n     fn default() -> Self {\n-        Self { display_type: vec![InlayKind::TypeHint, InlayKind::ParameterHint], max_length: None }\n+        Self { type_hints: true, parameter_hints: true, max_length: None }\n     }\n }\n \n@@ -64,7 +65,7 @@ fn get_param_name_hints(\n     inlay_hint_opts: &InlayConfig,\n     expr: ast::Expr,\n ) -> Option<()> {\n-    if !inlay_hint_opts.display_type.contains(&InlayKind::ParameterHint) {\n+    if !inlay_hint_opts.parameter_hints {\n         return None;\n     }\n \n@@ -104,7 +105,7 @@ fn get_bind_pat_hints(\n     inlay_hint_opts: &InlayConfig,\n     pat: ast::BindPat,\n ) -> Option<()> {\n-    if !inlay_hint_opts.display_type.contains(&InlayKind::TypeHint) {\n+    if !inlay_hint_opts.type_hints {\n         return None;\n     }\n \n@@ -223,7 +224,7 @@ fn get_fn_signature(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<\n \n #[cfg(test)]\n mod tests {\n-    use crate::inlay_hints::{InlayConfig, InlayKind};\n+    use crate::inlay_hints::InlayConfig;\n     use insta::assert_debug_snapshot;\n \n     use crate::mock_analysis::single_file;\n@@ -237,7 +238,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ display_type: vec![InlayKind::ParameterHint], max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ parameter_hints: true, type_hints: false, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [106; 107),\n@@ -261,7 +262,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ display_type: vec![], max_length: None}).unwrap(), @r###\"[]\"###);\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ type_hints: false, parameter_hints: false, max_length: None}).unwrap(), @r###\"[]\"###);\n     }\n \n     #[test]\n@@ -273,7 +274,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ display_type: vec![InlayKind::TypeHint], max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ type_hints: true, parameter_hints: false, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [97; 99),\n@@ -810,7 +811,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { display_type: vec![InlayKind::TypeHint, InlayKind::ParameterHint], max_length: Some(8) }).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [74; 75),\n@@ -1020,7 +1021,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { display_type: vec![InlayKind::TypeHint, InlayKind::ParameterHint], max_length: Some(8) }).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         []\n         \"###\n         );\n@@ -1046,7 +1047,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { display_type: vec![InlayKind::TypeHint, InlayKind::ParameterHint], max_length: Some(8) }).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         []\n         \"###\n         );"}, {"sha": "37845ca56f93404453f5e2534571414fbbd31587", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "patch": "@@ -16,7 +16,6 @@ use anyhow::{bail, Context, Result};\n use ra_cfg::CfgOptions;\n use ra_db::{CrateGraph, CrateName, Edition, Env, FileId};\n use rustc_hash::FxHashMap;\n-use serde::Deserialize;\n use serde_json::from_reader;\n \n pub use crate::{\n@@ -25,28 +24,6 @@ pub use crate::{\n     sysroot::Sysroot,\n };\n \n-#[derive(Deserialize, Clone, Debug, PartialEq, Eq)]\n-#[serde(rename_all = \"lowercase\")]\n-pub enum InlayHintDisplayType {\n-    Off,\n-    TypeHints,\n-    ParameterHints,\n-    Full,\n-}\n-\n-#[derive(Deserialize, Clone, Debug, PartialEq, Eq)]\n-#[serde(rename_all = \"camelCase\", default)]\n-pub struct InlayHintOptions {\n-    pub display_type: InlayHintDisplayType,\n-    pub max_length: Option<usize>,\n-}\n-\n-impl Default for InlayHintOptions {\n-    fn default() -> Self {\n-        Self { display_type: InlayHintDisplayType::Full, max_length: None }\n-    }\n-}\n-\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct CargoTomlNotFoundError {\n     pub searched_at: PathBuf,"}, {"sha": "3a6cfbe7b8f58c6442b527eb6c599c249f4d6a2f", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "patch": "@@ -33,7 +33,7 @@ pub struct ServerConfig {\n     pub lru_capacity: Option<usize>,\n \n     #[serde(with = \"InlayConfigDef\")]\n-    pub inlay_hint_opts: InlayConfig,\n+    pub inlay_hints: InlayConfig,\n \n     pub cargo_watch_enable: bool,\n     pub cargo_watch_args: Vec<String>,\n@@ -60,7 +60,7 @@ impl Default for ServerConfig {\n             exclude_globs: Vec::new(),\n             use_client_watching: false,\n             lru_capacity: None,\n-            inlay_hint_opts: Default::default(),\n+            inlay_hints: Default::default(),\n             cargo_watch_enable: true,\n             cargo_watch_args: Vec::new(),\n             cargo_watch_command: \"check\".to_string(),"}, {"sha": "b6d1f28d8dd7c2845ea11572a9debbf515b0800f", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "patch": "@@ -177,7 +177,7 @@ pub fn main_loop(\n                     .and_then(|it| it.folding_range.as_ref())\n                     .and_then(|it| it.line_folding_only)\n                     .unwrap_or(false),\n-                inlay_hint_opts: config.inlay_hint_opts,\n+                inlay_hints: config.inlay_hints,\n                 cargo_watch: CheckOptions {\n                     enable: config.cargo_watch_enable,\n                     args: config.cargo_watch_args,"}, {"sha": "921990da030dcb05dcb5d0ca86964c6fd26cc8f0", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "patch": "@@ -997,7 +997,7 @@ pub fn handle_inlay_hints(\n     let analysis = world.analysis();\n     let line_index = analysis.file_line_index(file_id)?;\n     Ok(analysis\n-        .inlay_hints(file_id, &world.options.inlay_hint_opts)?\n+        .inlay_hints(file_id, &world.options.inlay_hints)?\n         .into_iter()\n         .map(|api_type| InlayHint {\n             label: api_type.label.to_string(),"}, {"sha": "1dcab2703e7b4ea7d3e2042eb6f8e989e1bc0f90", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "patch": "@@ -2,7 +2,7 @@\n \n use lsp_types::{Location, Position, Range, TextDocumentIdentifier, Url};\n use rustc_hash::FxHashMap;\n-use serde::{Deserialize, Deserializer, Serialize};\n+use serde::{Deserialize, Serialize};\n \n use ra_ide::{InlayConfig, InlayKind};\n \n@@ -204,24 +204,11 @@ pub enum InlayKindDef {\n     ParameterHint,\n }\n \n-// Work-around until better serde support is added\n-// https://github.com/serde-rs/serde/issues/723#issuecomment-382501277\n-fn vec_inlay_kind<'de, D>(deserializer: D) -> Result<Vec<InlayKind>, D::Error>\n-where\n-    D: Deserializer<'de>,\n-{\n-    #[derive(Deserialize)]\n-    struct Wrapper(#[serde(with = \"InlayKindDef\")] InlayKind);\n-\n-    let v = Vec::deserialize(deserializer)?;\n-    Ok(v.into_iter().map(|Wrapper(a)| a).collect())\n-}\n-\n #[derive(Deserialize)]\n-#[serde(remote = \"InlayConfig\")]\n+#[serde(remote = \"InlayConfig\", rename_all = \"camelCase\")]\n pub struct InlayConfigDef {\n-    #[serde(deserialize_with = \"vec_inlay_kind\")]\n-    pub display_type: Vec<InlayKind>,\n+    pub type_hints: bool,\n+    pub parameter_hints: bool,\n     pub max_length: Option<usize>,\n }\n "}, {"sha": "004803b00eecd4a1dc256815281aec8af495646b", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "patch": "@@ -33,7 +33,7 @@ pub struct Options {\n     pub publish_decorations: bool,\n     pub supports_location_link: bool,\n     pub line_folding_only: bool,\n-    pub inlay_hint_opts: InlayConfig,\n+    pub inlay_hints: InlayConfig,\n     pub rustfmt_args: Vec<String>,\n     pub cargo_watch: CheckOptions,\n }"}, {"sha": "296d6fe8e5a241284afdc2546834885255bbc421", "filename": "editors/code/package.json", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "patch": "@@ -307,28 +307,18 @@\n                     \"exclusiveMinimum\": true,\n                     \"description\": \"Number of syntax trees rust-analyzer keeps in memory\"\n                 },\n-                \"rust-analyzer.inlayHintOpts.displayType\": {\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"off\",\n-                        \"typeHints\",\n-                        \"parameterHints\",\n-                        \"full\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"No type inlay hints\",\n-                        \"Type inlays hints only\",\n-                        \"Parameter inlays hints only\",\n-                        \"All inlay hints types\"\n-                    ],\n-                    \"default\": \"full\",\n-                    \"description\": \"Display additional type and parameter information in the editor\"\n+                \"rust-analyzer.inlayHints.typeHints\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"description\": \"Whether to show inlay type hints\"\n                 },\n-                \"rust-analyzer.inlayHintOpts.maxLength\": {\n-                    \"type\": [\n-                        \"null\",\n-                        \"integer\"\n-                    ],\n+                \"rust-analyzer.inlayHints.parameterHints\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": true,\n+                    \"description\": \"Whether to show function parameter name inlay hints at the call site\"\n+                },\n+                \"rust-analyzer.inlayHints.maxLength\": {\n+                    \"type\": \"integer\",\n                     \"default\": 20,\n                     \"minimum\": 0,\n                     \"exclusiveMinimum\": true,"}, {"sha": "3b8ea6f77edb8f76a44a29db0797561b92693930", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "patch": "@@ -29,7 +29,7 @@ export async function createClient(config: Config, serverPath: string): Promise<\n         initializationOptions: {\n             publishDecorations: !config.highlightingSemanticTokens,\n             lruCapacity: config.lruCapacity,\n-            inlayHintOpts: config.inlayHintOpts,\n+            inlayHints: config.inlayHints,\n             cargoWatchEnable: cargoWatchOpts.enable,\n             cargoWatchArgs: cargoWatchOpts.arguments,\n             cargoWatchCommand: cargoWatchOpts.command,"}, {"sha": "2668c9640b116a3bd8eaf9894360a49f0685f42d", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "patch": "@@ -6,7 +6,8 @@ import { log } from \"./util\";\n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n \n export interface InlayHintOptions {\n-    displayType: string;\n+    typeHints: boolean;\n+    parameterHints: boolean;\n     maxLength: number;\n }\n \n@@ -28,8 +29,7 @@ export class Config {\n         \"cargoFeatures\",\n         \"cargo-watch\",\n         \"highlighting.semanticTokens\",\n-        \"inlayHintOpts.maxLength\",\n-        \"inlayHintOpts.displayType\",\n+        \"inlayHints\",\n     ]\n         .map(opt => `${Config.rootSection}.${opt}`);\n \n@@ -156,10 +156,11 @@ export class Config {\n     get highlightingOn() { return this.cfg.get(\"highlightingOn\") as boolean; }\n     get rainbowHighlightingOn() { return this.cfg.get(\"rainbowHighlightingOn\") as boolean; }\n     get lruCapacity() { return this.cfg.get(\"lruCapacity\") as null | number; }\n-    get inlayHintOpts(): InlayHintOptions {\n+    get inlayHints(): InlayHintOptions {\n         return {\n-            displayType: this.cfg.get(\"inlayHintOpts.displayType\") as string,\n-            maxLength: this.cfg.get(\"inlayHintOpts.maxLength\") as number,\n+            typeHints: this.cfg.get(\"inlayHints.typeHints\") as boolean,\n+            parameterHints: this.cfg.get(\"inlayHints.parameterHints\") as boolean,\n+            maxLength: this.cfg.get(\"inlayHints.maxLength\") as number,\n         };\n     }\n     get excludeGlobs() { return this.cfg.get(\"excludeGlobs\") as string[]; }"}, {"sha": "b19b09ad5619ac8dd1094de9e7914e56efa0e7a2", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/58248e24cd45adcbfd7bfd00e1487df196b4a8c6/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=58248e24cd45adcbfd7bfd00e1487df196b4a8c6", "patch": "@@ -10,7 +10,7 @@ export function activateInlayHints(ctx: Ctx) {\n     const maybeUpdater = {\n         updater: null as null | HintsUpdater,\n         onConfigChange() {\n-            if (ctx.config.inlayHintOpts.displayType === 'off') {\n+            if (!ctx.config.inlayHints.typeHints && !ctx.config.inlayHints.parameterHints) {\n                 return this.dispose();\n             }\n             if (!this.updater) this.updater = new HintsUpdater(ctx);"}]}