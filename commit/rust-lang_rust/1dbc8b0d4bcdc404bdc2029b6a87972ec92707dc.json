{"sha": "1dbc8b0d4bcdc404bdc2029b6a87972ec92707dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYmM4YjBkNGJjZGM0MDRiZGMyMDI5YjZhODc5NzJlYzkyNzA3ZGM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-04T10:20:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-04T10:20:05Z"}, "message": "Rollup merge of #53523 - phungleson:fix-impl-from-for-std-error, r=GuillaumeGomez\n\nAdd doc for impl From for Std Error\n\nAs part of issue #51430 (cc @skade).\n\nI am not sure if it is going to a correct direction so put up here so that people can comment.", "tree": {"sha": "29d091039b5cafbe90f03ba554f3e72c07dcd7fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29d091039b5cafbe90f03ba554f3e72c07dcd7fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dbc8b0d4bcdc404bdc2029b6a87972ec92707dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbtelWCRBK7hj4Ov3rIwAAdHIIABG+9Ae8aFb6dUItpbxcvfzC\nKIpp74d4Kk9MyLar3L52Spx3XjsM5z6kN3GB5/ugqJH0gsogj15GD+IG0PJ0beXF\nR8GLOvNEwD7X6A61lXOeRFdRtZ0Qh/OhLDvj3+qkmVXgbmkKIEwx8aj7EQ8sTXt2\njb9/A3vJWYNzfZZZAgSzKCYK445gtfZZnlPlJI7tZa3xAqAz1/mufr1VkY9gQgaf\nCm8cootwLb2X+hsJJdhWQ5picW67NgU3UIjKtHjzZW7ZQ2ZHz8FVWeBclETkKYEq\nEvtx3RaizJUv2ngsbQkQ0UPD9cg9K+IA6Rp+CNhKqbtnbnIW3ltzpgF4I1yT6IE=\n=s4Ss\n-----END PGP SIGNATURE-----\n", "payload": "tree 29d091039b5cafbe90f03ba554f3e72c07dcd7fa\nparent 088fc7384c1ac3f7670d66880c7dcc0ec9160c79\nparent 30f2e96ab1d3f36d115249d932f7e5291e18b911\nauthor Pietro Albini <pietro@pietroalbini.org> 1538648405 +0200\ncommitter GitHub <noreply@github.com> 1538648405 +0200\n\nRollup merge of #53523 - phungleson:fix-impl-from-for-std-error, r=GuillaumeGomez\n\nAdd doc for impl From for Std Error\n\nAs part of issue #51430 (cc @skade).\n\nI am not sure if it is going to a correct direction so put up here so that people can comment.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dbc8b0d4bcdc404bdc2029b6a87972ec92707dc", "html_url": "https://github.com/rust-lang/rust/commit/1dbc8b0d4bcdc404bdc2029b6a87972ec92707dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dbc8b0d4bcdc404bdc2029b6a87972ec92707dc/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "088fc7384c1ac3f7670d66880c7dcc0ec9160c79", "url": "https://api.github.com/repos/rust-lang/rust/commits/088fc7384c1ac3f7670d66880c7dcc0ec9160c79", "html_url": "https://github.com/rust-lang/rust/commit/088fc7384c1ac3f7670d66880c7dcc0ec9160c79"}, {"sha": "30f2e96ab1d3f36d115249d932f7e5291e18b911", "url": "https://api.github.com/repos/rust-lang/rust/commits/30f2e96ab1d3f36d115249d932f7e5291e18b911", "html_url": "https://github.com/rust-lang/rust/commit/30f2e96ab1d3f36d115249d932f7e5291e18b911"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "7a5353bb60ff634c68c58cb65811abcaea1beda4", "filename": "src/libstd/error.rs", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/1dbc8b0d4bcdc404bdc2029b6a87972ec92707dc/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbc8b0d4bcdc404bdc2029b6a87972ec92707dc/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=1dbc8b0d4bcdc404bdc2029b6a87972ec92707dc", "patch": "@@ -217,20 +217,97 @@ pub trait Error: Debug + Display {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n+    /// Converts a type of [`Error`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    /// use std::mem;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct AnError;\n+    ///\n+    /// impl fmt::Display for AnError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f , \"An error\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for AnError {\n+    ///     fn description(&self) -> &str {\n+    ///         \"Description of an error\"\n+    ///     }\n+    /// }\n+    ///\n+    /// let an_error = AnError;\n+    /// assert!(0 == mem::size_of_val(&an_error));\n+    /// let a_boxed_error = Box::<Error>::from(an_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(err: E) -> Box<dyn Error + 'a> {\n         Box::new(err)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync + 'a> {\n+    /// Converts a type of [`Error`] + [`Send`] + [`Sync`] into a box of dyn [`Error`] +\n+    /// [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    /// use std::mem;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct AnError;\n+    ///\n+    /// impl fmt::Display for AnError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f , \"An error\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for AnError {\n+    ///     fn description(&self) -> &str {\n+    ///         \"Description of an error\"\n+    ///     }\n+    /// }\n+    ///\n+    /// unsafe impl Send for AnError {}\n+    ///\n+    /// unsafe impl Sync for AnError {}\n+    ///\n+    /// let an_error = AnError;\n+    /// assert!(0 == mem::size_of_val(&an_error));\n+    /// let a_boxed_error = Box::<Error + Send + Sync>::from(an_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(err: E) -> Box<dyn Error + Send + Sync + 'a> {\n         Box::new(err)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<String> for Box<dyn Error + Send + Sync> {\n+    /// Converts a [`String`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// let a_string_error = \"a string error\".to_string();\n+    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_string_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(err: String) -> Box<dyn Error + Send + Sync> {\n         #[derive(Debug)]\n         struct StringError(String);\n@@ -251,6 +328,18 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n \n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n impl From<String> for Box<dyn Error> {\n+    /// Converts a [`String`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// let a_string_error = \"a string error\".to_string();\n+    /// let a_boxed_error = Box::<Error>::from(a_string_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(str_err: String) -> Box<dyn Error> {\n         let err1: Box<dyn Error + Send + Sync> = From::from(str_err);\n         let err2: Box<dyn Error> = err1;\n@@ -260,27 +349,79 @@ impl From<String> for Box<dyn Error> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, 'b> From<&'b str> for Box<dyn Error + Send + Sync + 'a> {\n+    /// Converts a [`str`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// let a_str_error = \"a str error\";\n+    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_str_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(err: &'b str) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n     }\n }\n \n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n impl<'a> From<&'a str> for Box<dyn Error> {\n+    /// Converts a [`str`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// let a_str_error = \"a str error\";\n+    /// let a_boxed_error = Box::<Error>::from(a_str_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(err: &'a str) -> Box<dyn Error> {\n         From::from(String::from(err))\n     }\n }\n \n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n+    /// Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    /// use std::borrow::Cow;\n+    ///\n+    /// let a_cow_str_error = Cow::from(\"a str error\");\n+    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_cow_str_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(err: Cow<'b, str>) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n     }\n }\n \n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n+    /// Converts a [`Cow`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    /// use std::borrow::Cow;\n+    ///\n+    /// let a_cow_str_error = Cow::from(\"a str error\");\n+    /// let a_boxed_error = Box::<Error>::from(a_cow_str_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(err: Cow<'a, str>) -> Box<dyn Error> {\n         From::from(String::from(err))\n     }"}]}