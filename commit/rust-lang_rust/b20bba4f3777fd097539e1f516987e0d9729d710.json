{"sha": "b20bba4f3777fd097539e1f516987e0d9729d710", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMGJiYTRmMzc3N2ZkMDk3NTM5ZTFmNTE2OTg3ZTBkOTcyOWQ3MTA=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-15T10:04:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T10:04:28Z"}, "message": "Rollup merge of #55211 - fintelia:bufwriter-buffer, r=shepmaster\n\nAdd BufWriter::buffer method\n\nCC #45323", "tree": {"sha": "10a0833d02fc39658fdd300df8a88f552b571518", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10a0833d02fc39658fdd300df8a88f552b571518"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b20bba4f3777fd097539e1f516987e0d9729d710", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb7UStCRBK7hj4Ov3rIwAAdHIIADzpvilzHkZwK7zRjDUh3EC3\nHasaVrDLlylXxPLNnLsT5UUllACtggw+8LLhecd3GbkByXswLPwoueNWkDAWvxLw\nk5sXtD2xZvmyq0B60e9cv5HPc242WKvXSruko+mwlEn7xieFVbRV+zjU4lhTRk/H\n/ruG2S070gzzpLuFf5HijV8meN9t+LGroEH3HdSR1TH02JYVB1gUqb1XrVCGHsMY\nN1nzgOcZh4hePxQGokBmjegB7wI8fG9nN3tye7Y7fXE3/r0Jfwddf59MvLNPyu9f\nPz+on/WBaCuIDYKb7D4A+vHAr/Os+H2Q5TwlYL5Ot7oZaZ9qaoTstwIYVwjXQ+4=\n=FvfU\n-----END PGP SIGNATURE-----\n", "payload": "tree 10a0833d02fc39658fdd300df8a88f552b571518\nparent f4ecc1f521e83c30d0c6beb3ccb9307cfa12ae9c\nparent 59a030916b8f1173c99f874365533574fa6314a9\nauthor Pietro Albini <pietro@pietroalbini.org> 1542276268 +0100\ncommitter GitHub <noreply@github.com> 1542276268 +0100\n\nRollup merge of #55211 - fintelia:bufwriter-buffer, r=shepmaster\n\nAdd BufWriter::buffer method\n\nCC #45323\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b20bba4f3777fd097539e1f516987e0d9729d710", "html_url": "https://github.com/rust-lang/rust/commit/b20bba4f3777fd097539e1f516987e0d9729d710", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b20bba4f3777fd097539e1f516987e0d9729d710/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ecc1f521e83c30d0c6beb3ccb9307cfa12ae9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ecc1f521e83c30d0c6beb3ccb9307cfa12ae9c", "html_url": "https://github.com/rust-lang/rust/commit/f4ecc1f521e83c30d0c6beb3ccb9307cfa12ae9c"}, {"sha": "59a030916b8f1173c99f874365533574fa6314a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/59a030916b8f1173c99f874365533574fa6314a9", "html_url": "https://github.com/rust-lang/rust/commit/59a030916b8f1173c99f874365533574fa6314a9"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "476ee3f71caf042045750dffc0fb7fecf55dc898", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b20bba4f3777fd097539e1f516987e0d9729d710/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20bba4f3777fd097539e1f516987e0d9729d710/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b20bba4f3777fd097539e1f516987e0d9729d710", "patch": "@@ -525,6 +525,25 @@ impl<W: Write> BufWriter<W> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut W { self.inner.as_mut().unwrap() }\n \n+    /// Returns a reference to the internally buffered data.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// # #![feature(bufreader_buffer)]\n+    /// use std::io::BufWriter;\n+    /// use std::net::TcpStream;\n+    ///\n+    /// let buf_writer = BufWriter::new(TcpStream::connect(\"127.0.0.1:34254\").unwrap());\n+    ///\n+    /// // See how many bytes are currently buffered\n+    /// let bytes_buffered = buf_writer.buffer().len();\n+    /// ```\n+    #[unstable(feature = \"bufreader_buffer\", issue = \"45323\")]\n+    pub fn buffer(&self) -> &[u8] {\n+        &self.buf\n+    }\n+\n     /// Unwraps this `BufWriter`, returning the underlying writer.\n     ///\n     /// The buffer is written out before returning the writer.\n@@ -965,31 +984,31 @@ mod tests {\n         let mut buf = [0, 0, 0];\n         let nread = reader.read(&mut buf);\n         assert_eq!(nread.unwrap(), 3);\n-        let b: &[_] = &[5, 6, 7];\n-        assert_eq!(buf, b);\n+        assert_eq!(buf, [5, 6, 7]);\n+        assert_eq!(reader.buffer(), []);\n \n         let mut buf = [0, 0];\n         let nread = reader.read(&mut buf);\n         assert_eq!(nread.unwrap(), 2);\n-        let b: &[_] = &[0, 1];\n-        assert_eq!(buf, b);\n+        assert_eq!(buf, [0, 1]);\n+        assert_eq!(reader.buffer(), []);\n \n         let mut buf = [0];\n         let nread = reader.read(&mut buf);\n         assert_eq!(nread.unwrap(), 1);\n-        let b: &[_] = &[2];\n-        assert_eq!(buf, b);\n+        assert_eq!(buf, [2]);\n+        assert_eq!(reader.buffer(), [3]);\n \n         let mut buf = [0, 0, 0];\n         let nread = reader.read(&mut buf);\n         assert_eq!(nread.unwrap(), 1);\n-        let b: &[_] = &[3, 0, 0];\n-        assert_eq!(buf, b);\n+        assert_eq!(buf, [3, 0, 0]);\n+        assert_eq!(reader.buffer(), []);\n \n         let nread = reader.read(&mut buf);\n         assert_eq!(nread.unwrap(), 1);\n-        let b: &[_] = &[4, 0, 0];\n-        assert_eq!(buf, b);\n+        assert_eq!(buf, [4, 0, 0]);\n+        assert_eq!(reader.buffer(), []);\n \n         assert_eq!(reader.read(&mut buf).unwrap(), 0);\n     }\n@@ -1078,31 +1097,40 @@ mod tests {\n         let mut writer = BufWriter::with_capacity(2, inner);\n \n         writer.write(&[0, 1]).unwrap();\n+        assert_eq!(writer.buffer(), []);\n         assert_eq!(*writer.get_ref(), [0, 1]);\n \n         writer.write(&[2]).unwrap();\n+        assert_eq!(writer.buffer(), [2]);\n         assert_eq!(*writer.get_ref(), [0, 1]);\n \n         writer.write(&[3]).unwrap();\n+        assert_eq!(writer.buffer(), [2, 3]);\n         assert_eq!(*writer.get_ref(), [0, 1]);\n \n         writer.flush().unwrap();\n+        assert_eq!(writer.buffer(), []);\n         assert_eq!(*writer.get_ref(), [0, 1, 2, 3]);\n \n         writer.write(&[4]).unwrap();\n         writer.write(&[5]).unwrap();\n+        assert_eq!(writer.buffer(), [4, 5]);\n         assert_eq!(*writer.get_ref(), [0, 1, 2, 3]);\n \n         writer.write(&[6]).unwrap();\n+        assert_eq!(writer.buffer(), [6]);\n         assert_eq!(*writer.get_ref(), [0, 1, 2, 3, 4, 5]);\n \n         writer.write(&[7, 8]).unwrap();\n+        assert_eq!(writer.buffer(), []);\n         assert_eq!(*writer.get_ref(), [0, 1, 2, 3, 4, 5, 6, 7, 8]);\n \n         writer.write(&[9, 10, 11]).unwrap();\n+        assert_eq!(writer.buffer(), []);\n         assert_eq!(*writer.get_ref(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\n \n         writer.flush().unwrap();\n+        assert_eq!(writer.buffer(), []);\n         assert_eq!(*writer.get_ref(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\n     }\n "}]}