{"sha": "a2571cfc8b6f5cf5d8d2e7075ac4809aceae9541", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNTcxY2ZjOGI2ZjVjZjVkOGQyZTcwNzVhYzQ4MDlhY2VhZTk1NDE=", "commit": {"author": {"name": "Josh Cotton", "email": "jcotton42@outlook.com", "date": "2021-03-05T16:27:58Z"}, "committer": {"name": "Josh Cotton", "email": "jcotton42@outlook.com", "date": "2021-03-05T16:27:58Z"}, "message": "Implement String::remove_matches", "tree": {"sha": "f314d496a14b03b818e2594831771d1c35a1b191", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f314d496a14b03b818e2594831771d1c35a1b191"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2571cfc8b6f5cf5d8d2e7075ac4809aceae9541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2571cfc8b6f5cf5d8d2e7075ac4809aceae9541", "html_url": "https://github.com/rust-lang/rust/commit/a2571cfc8b6f5cf5d8d2e7075ac4809aceae9541", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2571cfc8b6f5cf5d8d2e7075ac4809aceae9541/comments", "author": {"login": "jcotton42", "id": 5257450, "node_id": "MDQ6VXNlcjUyNTc0NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5257450?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcotton42", "html_url": "https://github.com/jcotton42", "followers_url": "https://api.github.com/users/jcotton42/followers", "following_url": "https://api.github.com/users/jcotton42/following{/other_user}", "gists_url": "https://api.github.com/users/jcotton42/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcotton42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcotton42/subscriptions", "organizations_url": "https://api.github.com/users/jcotton42/orgs", "repos_url": "https://api.github.com/users/jcotton42/repos", "events_url": "https://api.github.com/users/jcotton42/events{/privacy}", "received_events_url": "https://api.github.com/users/jcotton42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcotton42", "id": 5257450, "node_id": "MDQ6VXNlcjUyNTc0NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5257450?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcotton42", "html_url": "https://github.com/jcotton42", "followers_url": "https://api.github.com/users/jcotton42/followers", "following_url": "https://api.github.com/users/jcotton42/following{/other_user}", "gists_url": "https://api.github.com/users/jcotton42/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcotton42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcotton42/subscriptions", "organizations_url": "https://api.github.com/users/jcotton42/orgs", "repos_url": "https://api.github.com/users/jcotton42/repos", "events_url": "https://api.github.com/users/jcotton42/events{/privacy}", "received_events_url": "https://api.github.com/users/jcotton42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ccc89bc312caa65ca46b55b47492abdd5b6910a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccc89bc312caa65ca46b55b47492abdd5b6910a", "html_url": "https://github.com/rust-lang/rust/commit/8ccc89bc312caa65ca46b55b47492abdd5b6910a"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "45adebf77cbf6acb50ad8c69f1cb62f3b5a82679", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a2571cfc8b6f5cf5d8d2e7075ac4809aceae9541/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2571cfc8b6f5cf5d8d2e7075ac4809aceae9541/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=a2571cfc8b6f5cf5d8d2e7075ac4809aceae9541", "patch": "@@ -1202,6 +1202,62 @@ impl String {\n         ch\n     }\n \n+    /// Remove all matches of pattern `pat` in the `String`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(string_remove_matches)]\n+    /// let mut s = String::from(\"Trees are not green, the sky is not blue.\");\n+    /// s.remove_matches(\"not \");\n+    /// assert_eq!(\"Trees are green, the sky is blue.\", s);\n+    /// ```\n+    ///\n+    /// Matches will be detected and removed iteratively, so in cases where\n+    /// patterns overlap, only the first pattern will be removed:\n+    ///\n+    /// ```\n+    /// #![feature(string_remove_matches)]\n+    /// let mut s = String::from(\"banana\");\n+    /// s.remove_matches(\"ana\");\n+    /// assert_eq!(\"bna\", s);\n+    /// ```\n+    #[unstable(feature = \"string_remove_matches\", reason = \"new API\", issue = \"72826\")]\n+    pub fn remove_matches<'a, P>(&'a mut self, pat: P)\n+    where\n+        P: for<'x> Pattern<'x>,\n+    {\n+        use core::str::pattern::Searcher;\n+\n+        let matches = {\n+            let mut searcher = pat.into_searcher(self);\n+            let mut matches = Vec::new();\n+\n+            while let Some(m) = searcher.next_match() {\n+                matches.push(m);\n+            }\n+\n+            matches\n+        };\n+\n+        let len = self.len();\n+        let mut shrunk_by = 0;\n+\n+        // SAFETY: start and end will be on utf8 byte boundaries per\n+        // the Searcher docs\n+        unsafe {\n+            for (start, end) in matches {\n+                ptr::copy(\n+                    self.vec.as_mut_ptr().add(end - shrunk_by),\n+                    self.vec.as_mut_ptr().add(start - shrunk_by),\n+                    len - end,\n+                );\n+                shrunk_by += end - start;\n+            }\n+            self.vec.set_len(len - shrunk_by);\n+        }\n+    }\n+\n     /// Retains only the characters specified by the predicate.\n     ///\n     /// In other words, remove all characters `c` such that `f(c)` returns `false`."}, {"sha": "feeb17e87da8bc4cc1dcdb7ca4bc70ac1aa8c27a", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a2571cfc8b6f5cf5d8d2e7075ac4809aceae9541/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2571cfc8b6f5cf5d8d2e7075ac4809aceae9541/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=a2571cfc8b6f5cf5d8d2e7075ac4809aceae9541", "patch": "@@ -21,6 +21,7 @@\n #![feature(slice_group_by)]\n #![feature(vec_extend_from_within)]\n #![feature(vec_spare_capacity)]\n+#![feature(string_remove_matches)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "9ec0ee97ab9261153da35bf64199c07a40148a73", "filename": "library/alloc/tests/string.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a2571cfc8b6f5cf5d8d2e7075ac4809aceae9541/library%2Falloc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2571cfc8b6f5cf5d8d2e7075ac4809aceae9541/library%2Falloc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstring.rs?ref=a2571cfc8b6f5cf5d8d2e7075ac4809aceae9541", "patch": "@@ -365,6 +365,33 @@ fn remove_bad() {\n     \"\u0e28\".to_string().remove(1);\n }\n \n+#[test]\n+fn test_remove_matches() {\n+    let mut s = \"abc\".to_string();\n+\n+    s.remove_matches('b');\n+    assert_eq!(s, \"ac\");\n+    s.remove_matches('b');\n+    assert_eq!(s, \"ac\");\n+\n+    let mut s = \"abcb\".to_string();\n+\n+    s.remove_matches('b');\n+    assert_eq!(s, \"ac\");\n+\n+    let mut s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; foobar\u0e28\".to_string();\n+    s.remove_matches('\u0e28');\n+    assert_eq!(s, \"\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; foobar\");\n+\n+    let mut s = \"\".to_string();\n+    s.remove_matches(\"\");\n+    assert_eq!(s, \"\");\n+\n+    let mut s = \"aaaaa\".to_string();\n+    s.remove_matches('a');\n+    assert_eq!(s, \"\");\n+}\n+\n #[test]\n fn test_retain() {\n     let mut s = String::from(\"\u03b1_\u03b2_\u03b3\");"}]}