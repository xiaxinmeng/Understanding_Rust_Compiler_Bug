{"sha": "fe71be7f340160a9aedf66d3cfa78bb4c6e43374", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNzFiZTdmMzQwMTYwYTlhZWRmNjZkM2NmYTc4YmI0YzZlNDMzNzQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-16T21:37:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-16T21:37:29Z"}, "message": "Rollup merge of #88011 - jyn514:check-all-targets, r=Mark-Simulacrum\n\nEnable `--all-targets` for `x.py check` unconditionally\n\nNow that Cargo deduplicates diagnostics from different targets, this doesn't flood the console with\nduplicate errors.\n\nNote that this doesn't add `--all-targets` in `Builder::cargo` directly because `impl Step for Std`\nactually wants to omit `--all-targets` the first time while it's still building libtest.\n\nWhen passed `--all-targets`, this warns that the option isn't needed, but still continues to compile.\n\nFixes https://github.com/rust-lang/rust/issues/87846.\nr? ``@Mark-Simulacrum``", "tree": {"sha": "8b88f698830af7e145c8b4e824500fc8f0bfb2c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b88f698830af7e145c8b4e824500fc8f0bfb2c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe71be7f340160a9aedf66d3cfa78bb4c6e43374", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhGtqZCRBK7hj4Ov3rIwAABs8IADVLN+GHLojP5iQYBBHjqYfT\nhEJ7k1W8dX4E86lDs299E5FYjMvv9o8smmZYBWUh6OB+QWzi1Hzr7bCr/k0fZ93W\nAP39f5VOpch5TdUeNT9l7iz2Nru24tobyUmAAJscvRO/W6cJQiL8sq0GZUlO7EK5\nI0nVKohb/UezF6bpZdkcSE3AX40LbIIUJS6oNNBPH/gWZkfpZgjGlqnYCRC4BfCx\nIURbipgeVImlmIA3pIaRo/qyC+ynJ0QJxsHWX+vdnAfqPMhi0l45wgfp98n+6x+9\nm7g0ZAV4HB6w9vzuM1OWrTMYiZJyMNwmGo6klg9bU9whOWmqlSxdRs4i+64xjRI=\n=0E23\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b88f698830af7e145c8b4e824500fc8f0bfb2c0\nparent beeff0440ff977228be9ea4f38b76daaccfbe4ea\nparent c6f4eed45c940ed214cc377505aea9bb7d9f8df2\nauthor Mara Bos <m-ou.se@m-ou.se> 1629149849 +0200\ncommitter GitHub <noreply@github.com> 1629149849 +0200\n\nRollup merge of #88011 - jyn514:check-all-targets, r=Mark-Simulacrum\n\nEnable `--all-targets` for `x.py check` unconditionally\n\nNow that Cargo deduplicates diagnostics from different targets, this doesn't flood the console with\nduplicate errors.\n\nNote that this doesn't add `--all-targets` in `Builder::cargo` directly because `impl Step for Std`\nactually wants to omit `--all-targets` the first time while it's still building libtest.\n\nWhen passed `--all-targets`, this warns that the option isn't needed, but still continues to compile.\n\nFixes https://github.com/rust-lang/rust/issues/87846.\nr? ``@Mark-Simulacrum``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe71be7f340160a9aedf66d3cfa78bb4c6e43374", "html_url": "https://github.com/rust-lang/rust/commit/fe71be7f340160a9aedf66d3cfa78bb4c6e43374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe71be7f340160a9aedf66d3cfa78bb4c6e43374/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beeff0440ff977228be9ea4f38b76daaccfbe4ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/beeff0440ff977228be9ea4f38b76daaccfbe4ea", "html_url": "https://github.com/rust-lang/rust/commit/beeff0440ff977228be9ea4f38b76daaccfbe4ea"}, {"sha": "c6f4eed45c940ed214cc377505aea9bb7d9f8df2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f4eed45c940ed214cc377505aea9bb7d9f8df2", "html_url": "https://github.com/rust-lang/rust/commit/c6f4eed45c940ed214cc377505aea9bb7d9f8df2"}], "stats": {"total": 78, "additions": 36, "deletions": 42}, "files": [{"sha": "e2f348261112e077f1fa4691b47e8fd629a28b58", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe71be7f340160a9aedf66d3cfa78bb4c6e43374/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe71be7f340160a9aedf66d3cfa78bb4c6e43374/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=fe71be7f340160a9aedf66d3cfa78bb4c6e43374", "patch": "@@ -578,7 +578,7 @@ impl<'a> Builder<'a> {\n     pub fn new(build: &Build) -> Builder<'_> {\n         let (kind, paths) = match build.config.cmd {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n-            Subcommand::Check { ref paths, all_targets: _ } => (Kind::Check, &paths[..]),\n+            Subcommand::Check { ref paths } => (Kind::Check, &paths[..]),\n             Subcommand::Clippy { ref paths, .. } => (Kind::Clippy, &paths[..]),\n             Subcommand::Fix { ref paths } => (Kind::Fix, &paths[..]),\n             Subcommand::Doc { ref paths, .. } => (Kind::Doc, &paths[..]),"}, {"sha": "4eb335979b983b004efb2a1358a094947f917a64", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/fe71be7f340160a9aedf66d3cfa78bb4c6e43374/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe71be7f340160a9aedf66d3cfa78bb4c6e43374/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=fe71be7f340160a9aedf66d3cfa78bb4c6e43374", "patch": "@@ -113,38 +113,35 @@ impl Step for Std {\n         // since we initialize with an empty sysroot.\n         //\n         // Currently only the \"libtest\" tree of crates does this.\n+        let mut cargo = builder.cargo(\n+            compiler,\n+            Mode::Std,\n+            SourceType::InTree,\n+            target,\n+            cargo_subcommand(builder.kind),\n+        );\n+        cargo.arg(\"--all-targets\");\n+        std_cargo(builder, target, compiler.stage, &mut cargo);\n \n-        if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n-            let mut cargo = builder.cargo(\n-                compiler,\n-                Mode::Std,\n-                SourceType::InTree,\n-                target,\n-                cargo_subcommand(builder.kind),\n-            );\n-            std_cargo(builder, target, compiler.stage, &mut cargo);\n-            cargo.arg(\"--all-targets\");\n-\n-            // Explicitly pass -p for all dependencies krates -- this will force cargo\n-            // to also check the tests/benches/examples for these crates, rather\n-            // than just the leaf crate.\n-            for krate in builder.in_tree_crates(\"test\", Some(target)) {\n-                cargo.arg(\"-p\").arg(krate.name);\n-            }\n-\n-            builder.info(&format!(\n-                \"Checking stage{} std test/bench/example targets ({} -> {})\",\n-                builder.top_stage, &compiler.host, target\n-            ));\n-            run_cargo(\n-                builder,\n-                cargo,\n-                args(builder),\n-                &libstd_test_stamp(builder, compiler, target),\n-                vec![],\n-                true,\n-            );\n+        // Explicitly pass -p for all dependencies krates -- this will force cargo\n+        // to also check the tests/benches/examples for these crates, rather\n+        // than just the leaf crate.\n+        for krate in builder.in_tree_crates(\"test\", Some(target)) {\n+            cargo.arg(\"-p\").arg(krate.name);\n         }\n+\n+        builder.info(&format!(\n+            \"Checking stage{} std test/bench/example targets ({} -> {})\",\n+            builder.top_stage, &compiler.host, target\n+        ));\n+        run_cargo(\n+            builder,\n+            cargo,\n+            args(builder),\n+            &libstd_test_stamp(builder, compiler, target),\n+            vec![],\n+            true,\n+        );\n     }\n }\n \n@@ -195,9 +192,7 @@ impl Step for Rustc {\n             cargo_subcommand(builder.kind),\n         );\n         rustc_cargo(builder, &mut cargo, target);\n-        if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n-            cargo.arg(\"--all-targets\");\n-        }\n+        cargo.arg(\"--all-targets\");\n \n         // Explicitly pass -p for all compiler krates -- this will force cargo\n         // to also check the tests/benches/examples for these crates, rather\n@@ -318,10 +313,7 @@ macro_rules! tool_check_step {\n                     $source_type,\n                     &[],\n                 );\n-\n-                if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n-                    cargo.arg(\"--all-targets\");\n-                }\n+                cargo.arg(\"--all-targets\");\n \n                 // Enable internal lints for clippy and rustdoc\n                 // NOTE: this doesn't enable lints for any other tools unless they explicitly add `#![warn(rustc::internal)]`"}, {"sha": "80c33fa4d7c9700de0323e21598589e4179bfd84", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe71be7f340160a9aedf66d3cfa78bb4c6e43374/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe71be7f340160a9aedf66d3cfa78bb4c6e43374/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=fe71be7f340160a9aedf66d3cfa78bb4c6e43374", "patch": "@@ -78,9 +78,6 @@ pub enum Subcommand {\n         paths: Vec<PathBuf>,\n     },\n     Check {\n-        // Whether to run checking over all targets (e.g., unit / integration\n-        // tests).\n-        all_targets: bool,\n         paths: Vec<PathBuf>,\n     },\n     Clippy {\n@@ -553,7 +550,12 @@ Arguments:\n         let cmd = match subcommand.as_str() {\n             \"build\" | \"b\" => Subcommand::Build { paths },\n             \"check\" | \"c\" => {\n-                Subcommand::Check { paths, all_targets: matches.opt_present(\"all-targets\") }\n+                if matches.opt_present(\"all-targets\") {\n+                    eprintln!(\n+                        \"Warning: --all-targets is now on by default and does not need to be passed explicitly.\"\n+                    );\n+                }\n+                Subcommand::Check { paths }\n             }\n             \"clippy\" => Subcommand::Clippy { paths, fix: matches.opt_present(\"fix\") },\n             \"fix\" => Subcommand::Fix { paths },"}]}