{"sha": "89bbd2c8b75f31f06496158e8e309557cfeaeed5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YmJkMmM4Yjc1ZjMxZjA2NDk2MTU4ZThlMzA5NTU3Y2ZlYWVlZDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-14T13:57:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-14T14:05:51Z"}, "message": "Be a bit more constrained in our early check\n\nDo not require the target type to be fully known,\neither. This allows code like `let x: *const () = 0 as _` to work\n(see regression test).", "tree": {"sha": "2af1ec22d0feb907b8f2fe8a57179c7413374ea0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2af1ec22d0feb907b8f2fe8a57179c7413374ea0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89bbd2c8b75f31f06496158e8e309557cfeaeed5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89bbd2c8b75f31f06496158e8e309557cfeaeed5", "html_url": "https://github.com/rust-lang/rust/commit/89bbd2c8b75f31f06496158e8e309557cfeaeed5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89bbd2c8b75f31f06496158e8e309557cfeaeed5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c9dfafa572272a758357d6bd5d51c0b22a9fdd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c9dfafa572272a758357d6bd5d51c0b22a9fdd3", "html_url": "https://github.com/rust-lang/rust/commit/2c9dfafa572272a758357d6bd5d51c0b22a9fdd3"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "922c411ce8cd84002e7c9946b76ce8c900672511", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/89bbd2c8b75f31f06496158e8e309557cfeaeed5/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89bbd2c8b75f31f06496158e8e309557cfeaeed5/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=89bbd2c8b75f31f06496158e8e309557cfeaeed5", "patch": "@@ -128,15 +128,18 @@ impl<'tcx> CastCheck<'tcx> {\n             span: span,\n         };\n \n-        // For better error messages, we try to check whether the\n-        // target type is known to be sized now (we will also check\n-        // later, once inference is more complete done).\n-        if !fcx.type_is_known_to_be_sized(cast_ty, span) {\n-            check.report_cast_to_unsized_type(fcx);\n-            return Err(ErrorReported);\n+        // For better error messages, check for some obviously unsized\n+        // cases now. We do a more thorough check at the end, once\n+        // inference is more completely known.\n+        match cast_ty.sty {\n+            ty::TyTrait(..) | ty::TySlice(..) => {\n+                check.report_cast_to_unsized_type(fcx);\n+                Err(ErrorReported)\n+            }\n+            _ => {\n+                Ok(check)\n+            }\n         }\n-\n-        Ok(check)\n     }\n \n     fn report_cast_error<'a>(&self,"}, {"sha": "74ccd44891d26e9cd25b565e5e8ca73ea89abbb9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89bbd2c8b75f31f06496158e8e309557cfeaeed5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89bbd2c8b75f31f06496158e8e309557cfeaeed5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=89bbd2c8b75f31f06496158e8e309557cfeaeed5", "patch": "@@ -3518,7 +3518,7 @@ fn check_expr_with_expectation_and_lvalue_pref<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         // Find the type of `e`. Supply hints based on the type we are casting to,\n         // if appropriate.\n         let t_cast = fcx.to_ty(t);\n-        let t_cast = structurally_resolved_type(fcx, expr.span, t_cast);\n+        let t_cast = fcx.infcx().resolve_type_vars_if_possible(&t_cast);\n         check_expr_with_expectation(fcx, e, ExpectCastableToType(t_cast));\n         let t_expr = fcx.expr_ty(e);\n         let t_cast = fcx.infcx().resolve_type_vars_if_possible(&t_cast);"}, {"sha": "2aa0d9c62fb4111e1c7b63f55cee9ece34e3eafc", "filename": "src/test/run-pass/cast-to-infer-ty.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/89bbd2c8b75f31f06496158e8e309557cfeaeed5/src%2Ftest%2Frun-pass%2Fcast-to-infer-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89bbd2c8b75f31f06496158e8e309557cfeaeed5/src%2Ftest%2Frun-pass%2Fcast-to-infer-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-to-infer-ty.rs?ref=89bbd2c8b75f31f06496158e8e309557cfeaeed5", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we allow a cast to `_` so long as the target type can be\n+// inferred elsewhere.\n+\n+pub fn main() {\n+    let i: *const i32 = 0 as _;\n+    assert!(i.is_null());\n+}"}]}