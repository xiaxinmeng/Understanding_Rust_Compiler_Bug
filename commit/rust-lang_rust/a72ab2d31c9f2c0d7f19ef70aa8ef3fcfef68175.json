{"sha": "a72ab2d31c9f2c0d7f19ef70aa8ef3fcfef68175", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MmFiMmQzMWM5ZjJjMGQ3ZjE5ZWY3MGFhOGVmM2ZjZmVmNjgxNzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-01T23:46:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-01T23:46:25Z"}, "message": "auto merge of #11840 : cmr/rust/cstr, r=kballard", "tree": {"sha": "58f43bb92ab8b4d3a313b1b37772c6d03ebc5d76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58f43bb92ab8b4d3a313b1b37772c6d03ebc5d76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a72ab2d31c9f2c0d7f19ef70aa8ef3fcfef68175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a72ab2d31c9f2c0d7f19ef70aa8ef3fcfef68175", "html_url": "https://github.com/rust-lang/rust/commit/a72ab2d31c9f2c0d7f19ef70aa8ef3fcfef68175", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a72ab2d31c9f2c0d7f19ef70aa8ef3fcfef68175/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bcd951749b67402ccaa31f1bb0349656f880fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bcd951749b67402ccaa31f1bb0349656f880fe2", "html_url": "https://github.com/rust-lang/rust/commit/2bcd951749b67402ccaa31f1bb0349656f880fe2"}, {"sha": "a7f0ecf5626aefc3a269f32d70316654f5b4773f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f0ecf5626aefc3a269f32d70316654f5b4773f", "html_url": "https://github.com/rust-lang/rust/commit/a7f0ecf5626aefc3a269f32d70316654f5b4773f"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "7e79ad97df08355b892d72536ead372e65635fc7", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 72, "deletions": 4, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a72ab2d31c9f2c0d7f19ef70aa8ef3fcfef68175/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72ab2d31c9f2c0d7f19ef70aa8ef3fcfef68175/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=a72ab2d31c9f2c0d7f19ef70aa8ef3fcfef68175", "patch": "@@ -68,6 +68,8 @@ use iter::{Iterator, range};\n use libc;\n use kinds::marker;\n use ops::Drop;\n+use cmp::Eq;\n+use clone::Clone;\n use option::{Option, Some, None};\n use ptr::RawPtr;\n use ptr;\n@@ -76,6 +78,7 @@ use str;\n use vec::{CloneableVector, ImmutableVector, MutableVector};\n use vec;\n use unstable::intrinsics;\n+use rt::global_heap::malloc_raw;\n \n /// Resolution options for the `null_byte` condition\n pub enum NullByteResolution {\n@@ -99,6 +102,36 @@ pub struct CString {\n     priv owns_buffer_: bool,\n }\n \n+impl Clone for CString {\n+    /// Clone this CString into a new, uniquely owned CString. For safety\n+    /// reasons, this is always a deep clone, rather than the usual shallow\n+    /// clone.\n+    fn clone(&self) -> CString {\n+        if self.buf.is_null() {\n+            CString { buf: self.buf, owns_buffer_: self.owns_buffer_ }\n+        } else {\n+            let len = self.len() + 1;\n+            let buf = unsafe { malloc_raw(len) } as *mut libc::c_char;\n+            unsafe { ptr::copy_nonoverlapping_memory(buf, self.buf, len); }\n+            CString { buf: buf as *libc::c_char, owns_buffer_: true }\n+        }\n+    }\n+}\n+\n+impl Eq for CString {\n+    fn eq(&self, other: &CString) -> bool {\n+        if self.buf as uint == other.buf as uint {\n+            true\n+        } else if self.buf.is_null() || other.buf.is_null() {\n+            false\n+        } else {\n+            unsafe {\n+                libc::strcmp(self.buf, other.buf) == 0\n+            }\n+        }\n+    }\n+}\n+\n impl CString {\n     /// Create a C String from a pointer.\n     pub unsafe fn new(buf: *libc::c_char, owns_buffer: bool) -> CString {\n@@ -287,10 +320,7 @@ impl<'a> ToCStr for &'a [u8] {\n \n     unsafe fn to_c_str_unchecked(&self) -> CString {\n         let self_len = self.len();\n-        let buf = libc::malloc(self_len as libc::size_t + 1) as *mut u8;\n-        if buf.is_null() {\n-            fail!(\"failed to allocate memory!\");\n-        }\n+        let buf = malloc_raw(self_len + 1);\n \n         ptr::copy_memory(buf, self.as_ptr(), self_len);\n         *ptr::mut_offset(buf, self_len as int) = 0;\n@@ -598,6 +628,44 @@ mod tests {\n         let c_str = unsafe { CString::new(ptr::null(), false) };\n         c_str.iter();\n     }\n+\n+    #[test]\n+    fn test_clone() {\n+        let a = \"hello\".to_c_str();\n+        let b = a.clone();\n+        assert!(a == b);\n+    }\n+\n+    #[test]\n+    fn test_clone_noleak() {\n+        fn foo(f: |c: &CString|) {\n+            let s = ~\"test\";\n+            let c = s.to_c_str();\n+            // give the closure a non-owned CString\n+            let mut c_ = c.with_ref(|c| unsafe { CString::new(c, false) } );\n+            f(&c_);\n+            // muck with the buffer for later printing\n+            c_.with_mut_ref(|c| unsafe { *c = 'X' as libc::c_char } );\n+        }\n+\n+        let mut c_: Option<CString> = None;\n+        foo(|c| {\n+            c_ = Some(c.clone());\n+            c.clone();\n+            // force a copy, reading the memory\n+            c.as_bytes().to_owned();\n+        });\n+        let c_ = c_.unwrap();\n+        // force a copy, reading the memory\n+        c_.as_bytes().to_owned();\n+    }\n+\n+    #[test]\n+    fn test_clone_eq_null() {\n+        let x = unsafe { CString::new(ptr::null(), false) };\n+        let y = x.clone();\n+        assert!(x == y);\n+    }\n }\n \n #[cfg(test)]"}]}