{"sha": "b96c4329dbe2812c6bd3a11bd3fde38a68fa6b58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NmM0MzI5ZGJlMjgxMmM2YmQzYTExYmQzZmRlMzhhNjhmYTZiNTg=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-02-22T05:49:17Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-02-22T05:49:17Z"}, "message": "Add `#[rustfmt::skip]` to methods tests\n\nMany people run rustfmt automatically on save. Format-dependent tests\nshould be marked with `#[rustfmt::skip]` to prevent accidental\nreformatting from this. As a bonus the rest of the code can the formatted.", "tree": {"sha": "cc8c8050e4cf31bfeecff40cf5294bc2330ae174", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc8c8050e4cf31bfeecff40cf5294bc2330ae174"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b96c4329dbe2812c6bd3a11bd3fde38a68fa6b58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b96c4329dbe2812c6bd3a11bd3fde38a68fa6b58", "html_url": "https://github.com/rust-lang/rust/commit/b96c4329dbe2812c6bd3a11bd3fde38a68fa6b58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b96c4329dbe2812c6bd3a11bd3fde38a68fa6b58/comments", "author": null, "committer": null, "parents": [{"sha": "027dde92e22b9058c2bd6efa4b3e47b78d991dc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/027dde92e22b9058c2bd6efa4b3e47b78d991dc7", "html_url": "https://github.com/rust-lang/rust/commit/027dde92e22b9058c2bd6efa4b3e47b78d991dc7"}], "stats": {"total": 81, "additions": 42, "deletions": 39}, "files": [{"sha": "9a85e68a1239d0d752d6e4aaa32ddaa42d6e6f23", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b96c4329dbe2812c6bd3a11bd3fde38a68fa6b58/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96c4329dbe2812c6bd3a11bd3fde38a68fa6b58/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=b96c4329dbe2812c6bd3a11bd3fde38a68fa6b58", "patch": "@@ -103,6 +103,7 @@ impl Mul<T> for T {\n /// * `OPTION_MAP_UNWRAP_OR`\n /// * `OPTION_MAP_UNWRAP_OR_ELSE`\n /// * `OPTION_MAP_OR_NONE`\n+#[rustfmt::skip]\n fn option_methods() {\n     let opt = Some(1);\n \n@@ -175,6 +176,7 @@ impl HasIter {\n }\n \n /// Checks implementation of `FILTER_NEXT` lint\n+#[rustfmt::skip]\n fn filter_next() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n \n@@ -193,6 +195,7 @@ fn filter_next() {\n }\n \n /// Checks implementation of `SEARCH_IS_SOME` lint\n+#[rustfmt::skip]\n fn search_is_some() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n "}, {"sha": "3d981f9dab4743285595a5793be5ce35c5c28e0f", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b96c4329dbe2812c6bd3a11bd3fde38a68fa6b58/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b96c4329dbe2812c6bd3a11bd3fde38a68fa6b58/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=b96c4329dbe2812c6bd3a11bd3fde38a68fa6b58", "patch": "@@ -27,7 +27,7 @@ LL |     fn new(self) -> Self { unimplemented!(); }\n    |            ^^^^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:111:13\n+  --> $DIR/methods.rs:112:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -39,7 +39,7 @@ LL | |                .unwrap_or(0); // should lint even though this call is on\n    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:115:13\n+  --> $DIR/methods.rs:116:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -49,7 +49,7 @@ LL | |               ).unwrap_or(0);\n    | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:119:13\n+  --> $DIR/methods.rs:120:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -59,15 +59,15 @@ LL | |                 });\n    | |__________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:124:13\n+  --> $DIR/methods.rs:125:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:126:13\n+  --> $DIR/methods.rs:127:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -77,7 +77,7 @@ LL | |     ).unwrap_or(None);\n    | |_____________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:130:13\n+  --> $DIR/methods.rs:131:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -88,7 +88,7 @@ LL | |         .unwrap_or(None);\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:138:13\n+  --> $DIR/methods.rs:139:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -100,7 +100,7 @@ LL | |                .unwrap_or_else(|| 0); // should lint even though this cal\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:142:13\n+  --> $DIR/methods.rs:143:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -110,7 +110,7 @@ LL | |               ).unwrap_or_else(|| 0);\n    | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:146:13\n+  --> $DIR/methods.rs:147:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -120,15 +120,15 @@ LL | |                 );\n    | |_________________^\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:155:13\n+  --> $DIR/methods.rs:156:13\n    |\n LL |     let _ = opt.map_or(None, |x| Some(x + 1));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using and_then instead: `opt.and_then(|x| Some(x + 1))`\n    |\n    = note: `-D clippy::option-map-or-none` implied by `-D warnings`\n \n error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:157:13\n+  --> $DIR/methods.rs:158:13\n    |\n LL |       let _ = opt.map_or(None, |x| {\n    |  _____________^\n@@ -144,7 +144,7 @@ LL |                        });\n    |\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:182:13\n+  --> $DIR/methods.rs:184:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -153,7 +153,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:185:13\n+  --> $DIR/methods.rs:187:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -163,7 +163,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:200:13\n+  --> $DIR/methods.rs:203:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -172,7 +172,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:203:13\n+  --> $DIR/methods.rs:206:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -182,15 +182,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:209:13\n+  --> $DIR/methods.rs:212:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:212:13\n+  --> $DIR/methods.rs:215:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -200,15 +200,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:218:13\n+  --> $DIR/methods.rs:221:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:221:13\n+  --> $DIR/methods.rs:224:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -218,125 +218,125 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:256:22\n+  --> $DIR/methods.rs:259:22\n    |\n LL |     with_constructor.unwrap_or(make());\n    |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n    |\n    = note: `-D clippy::or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/methods.rs:259:5\n+  --> $DIR/methods.rs:262:5\n    |\n LL |     with_new.unwrap_or(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:262:21\n+  --> $DIR/methods.rs:265:21\n    |\n LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:265:14\n+  --> $DIR/methods.rs:268:14\n    |\n LL |     with_err.unwrap_or(make());\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:268:19\n+  --> $DIR/methods.rs:271:19\n    |\n LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:271:5\n+  --> $DIR/methods.rs:274:5\n    |\n LL |     with_default_trait.unwrap_or(Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:274:5\n+  --> $DIR/methods.rs:277:5\n    |\n LL |     with_default_type.unwrap_or(u64::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:277:14\n+  --> $DIR/methods.rs:280:14\n    |\n LL |     with_vec.unwrap_or(vec![]);\n    |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:282:21\n+  --> $DIR/methods.rs:285:21\n    |\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:285:19\n+  --> $DIR/methods.rs:288:19\n    |\n LL |     map.entry(42).or_insert(String::new());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:288:21\n+  --> $DIR/methods.rs:291:21\n    |\n LL |     btree.entry(42).or_insert(String::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:291:21\n+  --> $DIR/methods.rs:294:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:302:23\n+  --> $DIR/methods.rs:305:23\n    |\n LL |         let bad_vec = some_vec.iter().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:303:26\n+  --> $DIR/methods.rs:306:26\n    |\n LL |         let bad_slice = &some_vec[..].iter().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:304:31\n+  --> $DIR/methods.rs:307:31\n    |\n LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:305:29\n+  --> $DIR/methods.rs:308:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:310:23\n+  --> $DIR/methods.rs:313:23\n    |\n LL |         let bad_vec = some_vec.iter_mut().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:313:26\n+  --> $DIR/methods.rs:316:26\n    |\n LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:316:29\n+  --> $DIR/methods.rs:319:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:328:13\n+  --> $DIR/methods.rs:331:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^"}]}