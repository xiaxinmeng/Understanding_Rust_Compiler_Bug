{"sha": "1314d31fb5974e8c32aa8d695a02d37c4ab4bd7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMTRkMzFmYjU5NzRlOGMzMmFhOGQ2OTVhMDJkMzdjNGFiNGJkN2U=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-19T15:08:35Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-19T15:08:35Z"}, "message": "Rewrite extract_version_range", "tree": {"sha": "98120eb253a9997734abae256498c77bf76c7709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98120eb253a9997734abae256498c77bf76c7709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1314d31fb5974e8c32aa8d695a02d37c4ab4bd7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1314d31fb5974e8c32aa8d695a02d37c4ab4bd7e", "html_url": "https://github.com/rust-lang/rust/commit/1314d31fb5974e8c32aa8d695a02d37c4ab4bd7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1314d31fb5974e8c32aa8d695a02d37c4ab4bd7e/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60fac34c2048fe5e4fdb5c4516987b948d9f5192", "url": "https://api.github.com/repos/rust-lang/rust/commits/60fac34c2048fe5e4fdb5c4516987b948d9f5192", "html_url": "https://github.com/rust-lang/rust/commit/60fac34c2048fe5e4fdb5c4516987b948d9f5192"}], "stats": {"total": 69, "additions": 46, "deletions": 23}, "files": [{"sha": "2ab764eb9207c4fc96680aa20e99a1caac67e39d", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1314d31fb5974e8c32aa8d695a02d37c4ab4bd7e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1314d31fb5974e8c32aa8d695a02d37c4ab4bd7e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=1314d31fb5974e8c32aa8d695a02d37c4ab4bd7e", "patch": "@@ -133,7 +133,10 @@ impl EarlyProps {\n         fn ignore_gdb(config: &Config, line: &str) -> bool {\n             if let Some(actual_version) = config.gdb_version {\n                 if let Some(rest) = line.strip_prefix(\"min-gdb-version:\").map(str::trim) {\n-                    let (start_ver, end_ver) = extract_version_range(rest, extract_gdb_version);\n+                    let (start_ver, end_ver) = extract_version_range(rest, extract_gdb_version)\n+                        .unwrap_or_else(|| {\n+                            panic!(\"couldn't parse version range: {:?}\", rest);\n+                        });\n \n                     if start_ver != end_ver {\n                         panic!(\"Expected single GDB version\")\n@@ -143,7 +146,9 @@ impl EarlyProps {\n                     return actual_version < start_ver;\n                 } else if let Some(rest) = line.strip_prefix(\"ignore-gdb-version:\").map(str::trim) {\n                     let (min_version, max_version) =\n-                        extract_version_range(rest, extract_gdb_version);\n+                        extract_version_range(rest, extract_gdb_version).unwrap_or_else(|| {\n+                            panic!(\"couldn't parse version range: {:?}\", rest);\n+                        });\n \n                     if max_version < min_version {\n                         panic!(\"Malformed GDB version range: max < min\")\n@@ -197,7 +202,10 @@ impl EarlyProps {\n                 } else if let Some(rest) = line.strip_prefix(\"ignore-llvm-version:\").map(str::trim)\n                 {\n                     // Syntax is: \"ignore-llvm-version: <version1> [- <version2>]\"\n-                    let (v_min, v_max) = extract_version_range(rest, extract_llvm_version);\n+                    let (v_min, v_max) = extract_version_range(rest, extract_llvm_version)\n+                        .unwrap_or_else(|| {\n+                            panic!(\"couldn't parse version range: {:?}\", rest);\n+                        });\n                     if v_max < v_min {\n                         panic!(\"Malformed LLVM version range: max < min\")\n                     }\n@@ -940,28 +948,28 @@ pub fn extract_llvm_version(version: &str) -> Option<u32> {\n // tuple: (<version1> as u32, <version2> as u32)\n // If the <version2> part is omitted, the second component of the tuple\n // is the same as <version1>.\n-fn extract_version_range<F>(line: &str, parse: F) -> (u32, u32)\n+fn extract_version_range<F>(line: &str, parse: F) -> Option<(u32, u32)>\n where\n     F: Fn(&str) -> Option<u32>,\n {\n-    let range_components = line\n-        .split(&[' ', '-'][..])\n-        .filter(|word| !word.is_empty())\n-        .map(parse)\n-        .skip_while(Option::is_none)\n-        .take(3) // 3 or more = invalid, so take at most 3.\n-        .collect::<Vec<Option<u32>>>();\n-\n-    match *range_components {\n-        [v] => {\n-            let v = v.unwrap();\n-            (v, v)\n-        }\n-        [min, max] => {\n-            let v_min = min.unwrap();\n-            let v_max = max.expect(\"Malformed version directive\");\n-            (v_min, v_max)\n-        }\n-        _ => panic!(\"Malformed version directive\"),\n+    let mut splits = line.splitn(2, \"- \").map(str::trim);\n+    let min = splits.next().unwrap();\n+    if min.ends_with('-') {\n+        return None;\n+    }\n+\n+    let max = splits.next();\n+\n+    if min.is_empty() {\n+        return None;\n     }\n+\n+    let min = parse(min)?;\n+    let max = match max {\n+        Some(max) if max.is_empty() => return None,\n+        Some(max) => parse(max)?,\n+        _ => min,\n+    };\n+\n+    Some((min, max))\n }"}, {"sha": "1f82b137ee6cf1fb312375882c9fbc4e64678157", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1314d31fb5974e8c32aa8d695a02d37c4ab4bd7e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1314d31fb5974e8c32aa8d695a02d37c4ab4bd7e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=1314d31fb5974e8c32aa8d695a02d37c4ab4bd7e", "patch": "@@ -220,3 +220,18 @@ fn sanitizers() {\n     assert!(parse_rs(&config, \"// needs-sanitizer-memory\").ignore);\n     assert!(parse_rs(&config, \"// needs-sanitizer-thread\").ignore);\n }\n+\n+#[test]\n+fn test_extract_version_range() {\n+    use super::{extract_llvm_version, extract_version_range};\n+\n+    assert_eq!(extract_version_range(\"1.2.3 - 4.5.6\", extract_llvm_version), Some((10203, 40506)));\n+    assert_eq!(extract_version_range(\"0   - 4.5.6\", extract_llvm_version), Some((0, 40506)));\n+    assert_eq!(extract_version_range(\"1.2.3 -\", extract_llvm_version), None);\n+    assert_eq!(extract_version_range(\"1.2.3 - \", extract_llvm_version), None);\n+    assert_eq!(extract_version_range(\"- 4.5.6\", extract_llvm_version), None);\n+    assert_eq!(extract_version_range(\"-\", extract_llvm_version), None);\n+    assert_eq!(extract_version_range(\" - 4.5.6\", extract_llvm_version), None);\n+    assert_eq!(extract_version_range(\"   - 4.5.6\", extract_llvm_version), None);\n+    assert_eq!(extract_version_range(\"0  -\", extract_llvm_version), None);\n+}"}]}