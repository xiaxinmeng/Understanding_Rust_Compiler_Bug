{"sha": "585141b219e18f7c4c5817347241f597b59035a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NTE0MWIyMTllMThmN2M0YzU4MTczNDcyNDFmNTk3YjU5MDM1YTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-23T10:03:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-23T10:37:16Z"}, "message": "support creating mutable allocations from byte slices", "tree": {"sha": "3d37056f9f70d570c00ccb4f8a7b1d3192b620da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d37056f9f70d570c00ccb4f8a7b1d3192b620da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/585141b219e18f7c4c5817347241f597b59035a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/585141b219e18f7c4c5817347241f597b59035a5", "html_url": "https://github.com/rust-lang/rust/commit/585141b219e18f7c4c5817347241f597b59035a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/585141b219e18f7c4c5817347241f597b59035a5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3005e85da65fa62347cfd1cfcc756952521807d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3005e85da65fa62347cfd1cfcc756952521807d", "html_url": "https://github.com/rust-lang/rust/commit/c3005e85da65fa62347cfd1cfcc756952521807d"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "cf832ee0f7a30baa04101dfcc51a9580a7ab5ca5", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=585141b219e18f7c4c5817347241f597b59035a5", "patch": "@@ -100,21 +100,25 @@ impl AllocRange {\n // The constructors are all without extra; the extra gets added by a machine hook later.\n impl<Tag> Allocation<Tag> {\n     /// Creates a read-only allocation initialized by the given bytes\n-    pub fn from_bytes<'a>(slice: impl Into<Cow<'a, [u8]>>, align: Align) -> Self {\n+    pub fn from_bytes<'a>(\n+        slice: impl Into<Cow<'a, [u8]>>,\n+        align: Align,\n+        mutability: Mutability,\n+    ) -> Self {\n         let bytes = slice.into().into_owned();\n         let size = Size::from_bytes(bytes.len());\n         Self {\n             bytes,\n             relocations: Relocations::new(),\n             init_mask: InitMask::new(size, true),\n             align,\n-            mutability: Mutability::Not,\n+            mutability,\n             extra: (),\n         }\n     }\n \n-    pub fn from_byte_aligned_bytes<'a>(slice: impl Into<Cow<'a, [u8]>>) -> Self {\n-        Allocation::from_bytes(slice, Align::ONE)\n+    pub fn from_bytes_byte_aligned_immutable<'a>(slice: impl Into<Cow<'a, [u8]>>) -> Self {\n+        Allocation::from_bytes(slice, Align::ONE, Mutability::Not)\n     }\n \n     pub fn uninit(size: Size, align: Align) -> Self {"}, {"sha": "790463d6fc6d256b673b8d1e29f030d7bbc429e6", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=585141b219e18f7c4c5817347241f597b59035a5", "patch": "@@ -1072,7 +1072,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Allocates a read-only byte or string literal for `mir::interpret`.\n     pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {\n         // Create an allocation that just contains these bytes.\n-        let alloc = interpret::Allocation::from_byte_aligned_bytes(bytes);\n+        let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);\n         let alloc = self.intern_const_alloc(alloc);\n         self.create_memory_alloc(alloc)\n     }"}, {"sha": "a12185393de3e8c59a84a7e54f0cd5f3fa6a2548", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=585141b219e18f7c4c5817347241f597b59035a5", "patch": "@@ -169,8 +169,9 @@ pub(super) fn op_to_const<'tcx>(\n                         (ecx.tcx.global_alloc(ptr.alloc_id).unwrap_memory(), ptr.offset.bytes())\n                     }\n                     Scalar::Int { .. } => (\n-                        ecx.tcx\n-                            .intern_const_alloc(Allocation::from_byte_aligned_bytes(b\"\" as &[u8])),\n+                        ecx.tcx.intern_const_alloc(Allocation::from_bytes_byte_aligned_immutable(\n+                            b\"\" as &[u8],\n+                        )),\n                         0,\n                     ),\n                 };"}, {"sha": "792a4749108be02132524a554174b025fcebba97", "filename": "compiler/rustc_mir/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=585141b219e18f7c4c5817347241f597b59035a5", "patch": "@@ -1,5 +1,6 @@\n use std::convert::TryFrom;\n \n+use rustc_ast::Mutability;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir::TerminatorKind;\n use rustc_middle::ty::subst::Subst;\n@@ -79,7 +80,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         line: u32,\n         col: u32,\n     ) -> MPlaceTy<'tcx, M::PointerTag> {\n-        let file = self.allocate_str(&filename.as_str(), MemoryKind::CallerLocation);\n+        let file =\n+            self.allocate_str(&filename.as_str(), MemoryKind::CallerLocation, Mutability::Not);\n         let line = Scalar::from_u32(line);\n         let col = Scalar::from_u32(col);\n "}, {"sha": "4978cc3606dd69f09ce5ff7fb1336089ba64d453", "filename": "compiler/rustc_mir/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=585141b219e18f7c4c5817347241f597b59035a5", "patch": "@@ -197,6 +197,6 @@ impl Write for AbsolutePathPrinter<'_> {\n /// Directly returns an `Allocation` containing an absolute path representation of the given type.\n crate fn alloc_type_name<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> &'tcx Allocation {\n     let path = AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path;\n-    let alloc = Allocation::from_byte_aligned_bytes(path.into_bytes());\n+    let alloc = Allocation::from_bytes_byte_aligned_immutable(path.into_bytes());\n     tcx.intern_const_alloc(alloc)\n }"}, {"sha": "77de19ac674c22c205e4d48f270bf93c9144c2ff", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=585141b219e18f7c4c5817347241f597b59035a5", "patch": "@@ -219,9 +219,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     pub fn allocate_bytes(\n         &mut self,\n         bytes: &[u8],\n+        align: Align,\n         kind: MemoryKind<M::MemoryKind>,\n+        mutability: Mutability,\n     ) -> Pointer<M::PointerTag> {\n-        let alloc = Allocation::from_byte_aligned_bytes(bytes);\n+        let alloc = Allocation::from_bytes(bytes, align, mutability);\n         self.allocate_with(alloc, kind)\n     }\n "}, {"sha": "79aaff1c5eb34f60cc8bef308c7b20be03e96a9a", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=585141b219e18f7c4c5817347241f597b59035a5", "patch": "@@ -6,6 +6,7 @@ use std::convert::TryFrom;\n use std::fmt::Debug;\n use std::hash::Hash;\n \n+use rustc_ast::Mutability;\n use rustc_macros::HashStable;\n use rustc_middle::mir;\n use rustc_middle::ty::layout::{PrimitiveExt, TyAndLayout};\n@@ -1024,18 +1025,23 @@ where\n         MPlaceTy::from_aligned_ptr(ptr, layout)\n     }\n \n-    /// Returns a wide MPlace.\n+    /// Returns a wide MPlace of type `&'static [mut] str` to a new 1-aligned allocation.\n     pub fn allocate_str(\n         &mut self,\n         str: &str,\n         kind: MemoryKind<M::MemoryKind>,\n+        mutbl: Mutability,\n     ) -> MPlaceTy<'tcx, M::PointerTag> {\n-        let ptr = self.memory.allocate_bytes(str.as_bytes(), kind);\n+        let ptr = self.memory.allocate_bytes(str.as_bytes(), Align::ONE, kind, mutbl);\n         let meta = Scalar::from_machine_usize(u64::try_from(str.len()).unwrap(), self);\n         let mplace =\n             MemPlace { ptr: ptr.into(), align: Align::ONE, meta: MemPlaceMeta::Meta(meta) };\n \n-        let layout = self.layout_of(self.tcx.mk_static_str()).unwrap();\n+        let ty = self.tcx.mk_ref(\n+            self.tcx.lifetimes.re_static,\n+            ty::TypeAndMut { ty: self.tcx.types.str_, mutbl },\n+        );\n+        let layout = self.layout_of(ty).unwrap();\n         MPlaceTy { mplace, layout }\n     }\n "}, {"sha": "d62fd161e2f86e0f84d7272faca42c0b52cbd6b3", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585141b219e18f7c4c5817347241f597b59035a5/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=585141b219e18f7c4c5817347241f597b59035a5", "patch": "@@ -25,14 +25,14 @@ crate fn lit_to_const<'tcx>(\n     let lit = match (lit, &ty.kind()) {\n         (ast::LitKind::Str(s, _), ty::Ref(_, inner_ty, _)) if inner_ty.is_str() => {\n             let s = s.as_str();\n-            let allocation = Allocation::from_byte_aligned_bytes(s.as_bytes());\n+            let allocation = Allocation::from_bytes_byte_aligned_immutable(s.as_bytes());\n             let allocation = tcx.intern_const_alloc(allocation);\n             ConstValue::Slice { data: allocation, start: 0, end: s.len() }\n         }\n         (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _))\n             if matches!(inner_ty.kind(), ty::Slice(_)) =>\n         {\n-            let allocation = Allocation::from_byte_aligned_bytes(data as &[u8]);\n+            let allocation = Allocation::from_bytes_byte_aligned_immutable(data as &[u8]);\n             let allocation = tcx.intern_const_alloc(allocation);\n             ConstValue::Slice { data: allocation, start: 0, end: data.len() }\n         }"}]}