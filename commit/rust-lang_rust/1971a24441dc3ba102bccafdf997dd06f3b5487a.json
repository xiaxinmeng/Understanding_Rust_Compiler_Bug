{"sha": "1971a24441dc3ba102bccafdf997dd06f3b5487a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NzFhMjQ0NDFkYzNiYTEwMmJjY2FmZGY5OTdkZDA2ZjNiNTQ4N2E=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-02T03:33:39Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T14:34:04Z"}, "message": "std: fix fallout", "tree": {"sha": "c4d7f5dca99c2f935a9010accbe86976decd657c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4d7f5dca99c2f935a9010accbe86976decd657c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1971a24441dc3ba102bccafdf997dd06f3b5487a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1971a24441dc3ba102bccafdf997dd06f3b5487a", "html_url": "https://github.com/rust-lang/rust/commit/1971a24441dc3ba102bccafdf997dd06f3b5487a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1971a24441dc3ba102bccafdf997dd06f3b5487a/comments", "author": null, "committer": null, "parents": [{"sha": "6b116bedafe29b7876b95575451c92452a1ec72b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b116bedafe29b7876b95575451c92452a1ec72b", "html_url": "https://github.com/rust-lang/rust/commit/6b116bedafe29b7876b95575451c92452a1ec72b"}], "stats": {"total": 130, "additions": 93, "deletions": 37}, "files": [{"sha": "834a9f082d03a5bd24be835120bf53f45231a467", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=1971a24441dc3ba102bccafdf997dd06f3b5487a", "patch": "@@ -504,7 +504,9 @@ pub struct CChars<'a> {\n     marker: marker::ContravariantLifetime<'a>,\n }\n \n-impl<'a> Iterator<libc::c_char> for CChars<'a> {\n+impl<'a> Iterator for CChars<'a> {\n+    type Item = libc::c_char;\n+\n     fn next(&mut self) -> Option<libc::c_char> {\n         let ch = unsafe { *self.ptr };\n         if ch == 0 {"}, {"sha": "6450b149d0242a961a5f66192986eca818aecce9", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=1971a24441dc3ba102bccafdf997dd06f3b5487a", "patch": "@@ -1423,37 +1423,49 @@ enum VacantEntryState<K, V, M> {\n }\n \n #[stable]\n-impl<'a, K, V> Iterator<(&'a K, &'a V)> for Iter<'a, K, V> {\n+impl<'a, K, V> Iterator for Iter<'a, K, V> {\n+    type Item = (&'a K, &'a V);\n+\n     #[inline] fn next(&mut self) -> Option<(&'a K, &'a V)> { self.inner.next() }\n     #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n \n #[stable]\n-impl<'a, K, V> Iterator<(&'a K, &'a mut V)> for IterMut<'a, K, V> {\n+impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n+    type Item = (&'a K, &'a mut V);\n+\n     #[inline] fn next(&mut self) -> Option<(&'a K, &'a mut V)> { self.inner.next() }\n     #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n \n #[stable]\n-impl<K, V> Iterator<(K, V)> for IntoIter<K, V> {\n+impl<K, V> Iterator for IntoIter<K, V> {\n+    type Item = (K, V);\n+\n     #[inline] fn next(&mut self) -> Option<(K, V)> { self.inner.next() }\n     #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n \n #[stable]\n-impl<'a, K, V> Iterator<&'a K> for Keys<'a, K, V> {\n+impl<'a, K, V> Iterator for Keys<'a, K, V> {\n+    type Item = &'a K;\n+\n     #[inline] fn next(&mut self) -> Option<(&'a K)> { self.inner.next() }\n     #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n \n #[stable]\n-impl<'a, K, V> Iterator<&'a V> for Values<'a, K, V> {\n+impl<'a, K, V> Iterator for Values<'a, K, V> {\n+    type Item = &'a V;\n+\n     #[inline] fn next(&mut self) -> Option<(&'a V)> { self.inner.next() }\n     #[inline] fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n \n #[stable]\n-impl<'a, K: 'a, V: 'a> Iterator<(K, V)> for Drain<'a, K, V> {\n+impl<'a, K: 'a, V: 'a> Iterator for Drain<'a, K, V> {\n+    type Item = (K, V);\n+\n     #[inline]\n     fn next(&mut self) -> Option<(K, V)> {\n         self.inner.next()\n@@ -1511,7 +1523,7 @@ impl<'a, K, V> VacantEntry<'a, K, V> {\n \n #[stable]\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> FromIterator<(K, V)> for HashMap<K, V, H> {\n-    fn from_iter<T: Iterator<(K, V)>>(iter: T) -> HashMap<K, V, H> {\n+    fn from_iter<T: Iterator<Item=(K, V)>>(iter: T) -> HashMap<K, V, H> {\n         let lower = iter.size_hint().0;\n         let mut map = HashMap::with_capacity_and_hasher(lower, Default::default());\n         map.extend(iter);\n@@ -1521,7 +1533,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> FromIterator<(K, V)> for Has\n \n #[stable]\n impl<K: Eq + Hash<S>, V, S, H: Hasher<S> + Default> Extend<(K, V)> for HashMap<K, V, H> {\n-    fn extend<T: Iterator<(K, V)>>(&mut self, mut iter: T) {\n+    fn extend<T: Iterator<Item=(K, V)>>(&mut self, mut iter: T) {\n         for (k, v) in iter {\n             self.insert(k, v);\n         }"}, {"sha": "ea8298c48c83f11231b2485a9368f6d0dd003a96", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=1971a24441dc3ba102bccafdf997dd06f3b5487a", "patch": "@@ -603,7 +603,7 @@ impl<T: Eq + Hash<S> + fmt::Show, S, H: Hasher<S>> fmt::Show for HashSet<T, H> {\n \n #[stable]\n impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> FromIterator<T> for HashSet<T, H> {\n-    fn from_iter<I: Iterator<T>>(iter: I) -> HashSet<T, H> {\n+    fn from_iter<I: Iterator<Item=T>>(iter: I) -> HashSet<T, H> {\n         let lower = iter.size_hint().0;\n         let mut set = HashSet::with_capacity_and_hasher(lower, Default::default());\n         set.extend(iter);\n@@ -613,7 +613,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> FromIterator<T> for HashSet<T,\n \n #[stable]\n impl<T: Eq + Hash<S>, S, H: Hasher<S> + Default> Extend<T> for HashSet<T, H> {\n-    fn extend<I: Iterator<T>>(&mut self, mut iter: I) {\n+    fn extend<I: Iterator<Item=T>>(&mut self, mut iter: I) {\n         for k in iter {\n             self.insert(k);\n         }\n@@ -789,27 +789,35 @@ pub struct Union<'a, T: 'a, H: 'a> {\n }\n \n #[stable]\n-impl<'a, K> Iterator<&'a K> for Iter<'a, K> {\n+impl<'a, K> Iterator for Iter<'a, K> {\n+    type Item = &'a K;\n+\n     fn next(&mut self) -> Option<&'a K> { self.iter.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n #[stable]\n-impl<K> Iterator<K> for IntoIter<K> {\n+impl<K> Iterator for IntoIter<K> {\n+    type Item = K;\n+\n     fn next(&mut self) -> Option<K> { self.iter.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n #[stable]\n-impl<'a, K: 'a> Iterator<K> for Drain<'a, K> {\n+impl<'a, K: 'a> Iterator for Drain<'a, K> {\n+    type Item = K;\n+\n     fn next(&mut self) -> Option<K> { self.iter.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n #[stable]\n-impl<'a, T, S, H> Iterator<&'a T> for Intersection<'a, T, H>\n+impl<'a, T, S, H> Iterator for Intersection<'a, T, H>\n     where T: Eq + Hash<S>, H: Hasher<S>\n {\n+    type Item = &'a T;\n+\n     fn next(&mut self) -> Option<&'a T> {\n         loop {\n             match self.iter.next() {\n@@ -828,9 +836,11 @@ impl<'a, T, S, H> Iterator<&'a T> for Intersection<'a, T, H>\n }\n \n #[stable]\n-impl<'a, T, S, H> Iterator<&'a T> for Difference<'a, T, H>\n+impl<'a, T, S, H> Iterator for Difference<'a, T, H>\n     where T: Eq + Hash<S>, H: Hasher<S>\n {\n+    type Item = &'a T;\n+\n     fn next(&mut self) -> Option<&'a T> {\n         loop {\n             match self.iter.next() {\n@@ -849,17 +859,21 @@ impl<'a, T, S, H> Iterator<&'a T> for Difference<'a, T, H>\n }\n \n #[stable]\n-impl<'a, T, S, H> Iterator<&'a T> for SymmetricDifference<'a, T, H>\n+impl<'a, T, S, H> Iterator for SymmetricDifference<'a, T, H>\n     where T: Eq + Hash<S>, H: Hasher<S>\n {\n+    type Item = &'a T;\n+\n     fn next(&mut self) -> Option<&'a T> { self.iter.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n #[stable]\n-impl<'a, T, S, H> Iterator<&'a T> for Union<'a, T, H>\n+impl<'a, T, S, H> Iterator for Union<'a, T, H>\n     where T: Eq + Hash<S>, H: Hasher<S>\n {\n+    type Item = &'a T;\n+\n     fn next(&mut self) -> Option<&'a T> { self.iter.next() }\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }"}, {"sha": "2b999d83a98c284e5d492aab06ec2a89e8ffe52a", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=1971a24441dc3ba102bccafdf997dd06f3b5487a", "patch": "@@ -730,7 +730,9 @@ impl<'a, K, V> Clone for RawBuckets<'a, K, V> {\n }\n \n \n-impl<'a, K, V> Iterator<RawBucket<K, V>> for RawBuckets<'a, K, V> {\n+impl<'a, K, V> Iterator for RawBuckets<'a, K, V> {\n+    type Item = RawBucket<K, V>;\n+\n     fn next(&mut self) -> Option<RawBucket<K, V>> {\n         while self.raw.hash != self.hashes_end {\n             unsafe {\n@@ -757,7 +759,9 @@ struct RevMoveBuckets<'a, K, V> {\n     marker: marker::ContravariantLifetime<'a>,\n }\n \n-impl<'a, K, V> Iterator<(K, V)> for RevMoveBuckets<'a, K, V> {\n+impl<'a, K, V> Iterator for RevMoveBuckets<'a, K, V> {\n+    type Item = (K, V);\n+\n     fn next(&mut self) -> Option<(K, V)> {\n         if self.elems_left == 0 {\n             return None;\n@@ -816,7 +820,9 @@ pub struct Drain<'a, K: 'a, V: 'a> {\n     iter: RawBuckets<'static, K, V>,\n }\n \n-impl<'a, K, V> Iterator<(&'a K, &'a V)> for Iter<'a, K, V> {\n+impl<'a, K, V> Iterator for Iter<'a, K, V> {\n+    type Item = (&'a K, &'a V);\n+\n     fn next(&mut self) -> Option<(&'a K, &'a V)> {\n         self.iter.next().map(|bucket| {\n             self.elems_left -= 1;\n@@ -832,7 +838,9 @@ impl<'a, K, V> Iterator<(&'a K, &'a V)> for Iter<'a, K, V> {\n     }\n }\n \n-impl<'a, K, V> Iterator<(&'a K, &'a mut V)> for IterMut<'a, K, V> {\n+impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n+    type Item = (&'a K, &'a mut V);\n+\n     fn next(&mut self) -> Option<(&'a K, &'a mut V)> {\n         self.iter.next().map(|bucket| {\n             self.elems_left -= 1;\n@@ -848,7 +856,9 @@ impl<'a, K, V> Iterator<(&'a K, &'a mut V)> for IterMut<'a, K, V> {\n     }\n }\n \n-impl<K, V> Iterator<(SafeHash, K, V)> for IntoIter<K, V> {\n+impl<K, V> Iterator for IntoIter<K, V> {\n+    type Item = (SafeHash, K, V);\n+\n     fn next(&mut self) -> Option<(SafeHash, K, V)> {\n         self.iter.next().map(|bucket| {\n             self.table.size -= 1;\n@@ -870,7 +880,9 @@ impl<K, V> Iterator<(SafeHash, K, V)> for IntoIter<K, V> {\n     }\n }\n \n-impl<'a, K: 'a, V: 'a> Iterator<(SafeHash, K, V)> for Drain<'a, K, V> {\n+impl<'a, K: 'a, V: 'a> Iterator for Drain<'a, K, V> {\n+    type Item = (SafeHash, K, V);\n+\n     #[inline]\n     fn next(&mut self) -> Option<(SafeHash, K, V)> {\n         self.iter.next().map(|bucket| {"}, {"sha": "8c097a65db7bd45d51aa739567dc22812c982d30", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=1971a24441dc3ba102bccafdf997dd06f3b5487a", "patch": "@@ -52,7 +52,9 @@ impl<'r, R: Reader> Bytes<'r, R> {\n     }\n }\n \n-impl<'r, R: Reader> Iterator<IoResult<u8>> for Bytes<'r, R> {\n+impl<'r, R: Reader> Iterator for Bytes<'r, R> {\n+    type Item = IoResult<u8>;\n+\n     #[inline]\n     fn next(&mut self) -> Option<IoResult<u8>> {\n         match self.reader.read_byte() {"}, {"sha": "1ff54fcb4843201f471da952e485debd793c13c4", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=1971a24441dc3ba102bccafdf997dd06f3b5487a", "patch": "@@ -563,7 +563,9 @@ pub struct Directories {\n     stack: Vec<Path>,\n }\n \n-impl Iterator<Path> for Directories {\n+impl Iterator for Directories {\n+    type Item = Path;\n+\n     fn next(&mut self) -> Option<Path> {\n         match self.stack.pop() {\n             Some(path) => {"}, {"sha": "4c9c7beb475017fbb5b5600a643a9d9feda2b22d", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1971a24441dc3ba102bccafdf997dd06f3b5487a", "patch": "@@ -1371,7 +1371,9 @@ pub struct Lines<'r, T:'r> {\n     buffer: &'r mut T,\n }\n \n-impl<'r, T: Buffer> Iterator<IoResult<String>> for Lines<'r, T> {\n+impl<'r, T: Buffer> Iterator for Lines<'r, T> {\n+    type Item = IoResult<String>;\n+\n     fn next(&mut self) -> Option<IoResult<String>> {\n         match self.buffer.read_line() {\n             Ok(x) => Some(Ok(x)),\n@@ -1398,7 +1400,9 @@ pub struct Chars<'r, T:'r> {\n     buffer: &'r mut T\n }\n \n-impl<'r, T: Buffer> Iterator<IoResult<char>> for Chars<'r, T> {\n+impl<'r, T: Buffer> Iterator for Chars<'r, T> {\n+    type Item = IoResult<char>;\n+\n     fn next(&mut self) -> Option<IoResult<char>> {\n         match self.buffer.read_char() {\n             Ok(x) => Some(Ok(x)),\n@@ -1649,14 +1653,18 @@ pub struct IncomingConnections<'a, Sized? A:'a> {\n }\n \n #[cfg(stage0)]\n-impl<'a, T, A: Acceptor<T>> Iterator<IoResult<T>> for IncomingConnections<'a, A> {\n+impl<'a, T, A: Acceptor<T>> Iterator for IncomingConnections<'a, A> {\n+    type Item = IoResult<T>;\n+\n     fn next(&mut self) -> Option<IoResult<T>> {\n         Some(self.inc.accept())\n     }\n }\n \n #[cfg(not(stage0))]\n-impl<'a, T, Sized? A: Acceptor<T>> Iterator<IoResult<T>> for IncomingConnections<'a, A> {\n+impl<'a, T, Sized? A: Acceptor<T>> Iterator for IncomingConnections<'a, A> {\n+    type Item = IoResult<T>;\n+\n     fn next(&mut self) -> Option<IoResult<T>> {\n         Some(self.inc.accept())\n     }"}, {"sha": "51d1bacf63b9f28b2a0a61fb2b2ee230835b862f", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=1971a24441dc3ba102bccafdf997dd06f3b5487a", "patch": "@@ -169,15 +169,15 @@ pub struct ChainedReader<I, R> {\n     cur_reader: Option<R>,\n }\n \n-impl<R: Reader, I: Iterator<R>> ChainedReader<I, R> {\n+impl<R: Reader, I: Iterator<Item=R>> ChainedReader<I, R> {\n     /// Creates a new `ChainedReader`\n     pub fn new(mut readers: I) -> ChainedReader<I, R> {\n         let r = readers.next();\n         ChainedReader { readers: readers, cur_reader: r }\n     }\n }\n \n-impl<R: Reader, I: Iterator<R>> Reader for ChainedReader<I, R> {\n+impl<R: Reader, I: Iterator<Item=R>> Reader for ChainedReader<I, R> {\n     fn read(&mut self, buf: &mut [u8]) -> io::IoResult<uint> {\n         loop {\n             let err = match self.cur_reader {\n@@ -252,15 +252,15 @@ pub struct IterReader<T> {\n     iter: T,\n }\n \n-impl<T: Iterator<u8>> IterReader<T> {\n+impl<T: Iterator<Item=u8>> IterReader<T> {\n     /// Creates a new `IterReader` which will read from the specified\n     /// `Iterator`.\n     pub fn new(iter: T) -> IterReader<T> {\n         IterReader { iter: iter }\n     }\n }\n \n-impl<T: Iterator<u8>> Reader for IterReader<T> {\n+impl<T: Iterator<Item=u8>> Reader for IterReader<T> {\n     #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::IoResult<uint> {\n         let mut len = 0;"}, {"sha": "208e4f9e566f42ec74f4ced40517519e91338ed2", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=1971a24441dc3ba102bccafdf997dd06f3b5487a", "patch": "@@ -404,7 +404,7 @@ pub fn random<T: Rand>() -> T {\n /// let sample = sample(&mut rng, range(1i, 100), 5);\n /// println!(\"{}\", sample);\n /// ```\n-pub fn sample<T, I: Iterator<T>, R: Rng>(rng: &mut R,\n+pub fn sample<T, I: Iterator<Item=T>, R: Rng>(rng: &mut R,\n                                          mut iter: I,\n                                          amount: uint) -> Vec<T> {\n     let mut reservoir: Vec<T> = iter.by_ref().take(amount).collect();"}, {"sha": "e9dc3d986ba115940a9b4a521a37f772cddb2885", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=1971a24441dc3ba102bccafdf997dd06f3b5487a", "patch": "@@ -936,7 +936,9 @@ impl<T: Send> select::Packet for Receiver<T> {\n }\n \n #[unstable]\n-impl<'a, T: Send> Iterator<T> for Iter<'a, T> {\n+impl<'a, T: Send> Iterator for Iter<'a, T> {\n+    type Item = T;\n+\n     fn next(&mut self) -> Option<T> { self.rx.recv().ok() }\n }\n "}, {"sha": "3d9dca7e21cb3d499b0903fe9416e27d1932e303", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1971a24441dc3ba102bccafdf997dd06f3b5487a/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=1971a24441dc3ba102bccafdf997dd06f3b5487a", "patch": "@@ -319,7 +319,9 @@ impl<'rx, T: Send> Drop for Handle<'rx, T> {\n     }\n }\n \n-impl Iterator<*mut Handle<'static, ()>> for Packets {\n+impl Iterator for Packets {\n+    type Item = *mut Handle<'static, ()>;\n+\n     fn next(&mut self) -> Option<*mut Handle<'static, ()>> {\n         if self.cur.is_null() {\n             None"}]}