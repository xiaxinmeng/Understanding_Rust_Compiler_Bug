{"sha": "e02b0f4a5540ed22053f18f917b9a18291280bc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMmIwZjRhNTU0MGVkMjIwNTNmMThmOTE3YjlhMTgyOTEyODBiYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-07T21:33:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-07T21:33:57Z"}, "message": "Auto merge of #80709 - lzutao:target-enumerate, r=petrochenkov\n\nLimit target endian to an enum instead of free string\n\nThis is #77604 revived.", "tree": {"sha": "44eb866985f3e72de9f03efb0248585d9d405930", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44eb866985f3e72de9f03efb0248585d9d405930"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e02b0f4a5540ed22053f18f917b9a18291280bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e02b0f4a5540ed22053f18f917b9a18291280bc5", "html_url": "https://github.com/rust-lang/rust/commit/e02b0f4a5540ed22053f18f917b9a18291280bc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e02b0f4a5540ed22053f18f917b9a18291280bc5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "html_url": "https://github.com/rust-lang/rust/commit/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9"}, {"sha": "8ee804dc2b54c690dbbc429e77e8d47e86cbf5ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee804dc2b54c690dbbc429e77e8d47e86cbf5ce", "html_url": "https://github.com/rust-lang/rust/commit/8ee804dc2b54c690dbbc429e77e8d47e86cbf5ce"}], "stats": {"total": 155, "additions": 102, "deletions": 53}, "files": [{"sha": "07fde27b5a3148a149da0f33db1f4267f47a931d", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -9,7 +9,7 @@ use rustc_codegen_ssa::{\n };\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::Ty;\n-use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size};\n+use rustc_target::abi::{Align, Endian, HasDataLayout, LayoutOf, Size};\n \n fn round_pointer_up_to_alignment(\n     bx: &mut Builder<'a, 'll, 'tcx>,\n@@ -52,7 +52,7 @@ fn emit_direct_ptr_va_arg(\n     let next = bx.inbounds_gep(addr, &[full_direct_size]);\n     bx.store(next, va_list_addr, bx.tcx().data_layout.pointer_align.abi);\n \n-    if size.bytes() < slot_size.bytes() && &*bx.tcx().sess.target.endian == \"big\" {\n+    if size.bytes() < slot_size.bytes() && bx.tcx().sess.target.endian == Endian::Big {\n         let adjusted_size = bx.cx().const_i32((slot_size.bytes() - size.bytes()) as i32);\n         let adjusted = bx.inbounds_gep(addr, &[adjusted_size]);\n         (bx.bitcast(adjusted, bx.cx().type_ptr_to(llty)), addr_align)\n@@ -105,7 +105,7 @@ fn emit_aapcs_va_arg(\n     let mut end = bx.build_sibling_block(\"va_arg.end\");\n     let zero = bx.const_i32(0);\n     let offset_align = Align::from_bytes(4).unwrap();\n-    assert!(&*bx.tcx().sess.target.endian == \"little\");\n+    assert_eq!(bx.tcx().sess.target.endian, Endian::Little);\n \n     let gr_type = target_ty.is_any_ptr() || target_ty.is_integral();\n     let (reg_off, reg_top_index, slot_size) = if gr_type {"}, {"sha": "6074aac4032c47269d0325a1a31f4dcecf0cce7c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -819,7 +819,7 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n         }\n     }\n     ret.insert((sym::target_arch, Some(Symbol::intern(arch))));\n-    ret.insert((sym::target_endian, Some(Symbol::intern(end))));\n+    ret.insert((sym::target_endian, Some(Symbol::intern(end.as_str()))));\n     ret.insert((sym::target_pointer_width, Some(Symbol::intern(&wordsz))));\n     ret.insert((sym::target_env, Some(Symbol::intern(env))));\n     ret.insert((sym::target_vendor, Some(Symbol::intern(vendor))));"}, {"sha": "61bfd58533a91866913a10e5b53c96bbe67a7156", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -4,11 +4,14 @@ pub use Primitive::*;\n use crate::spec::Target;\n \n use std::convert::{TryFrom, TryInto};\n+use std::fmt;\n use std::num::NonZeroUsize;\n use std::ops::{Add, AddAssign, Deref, Mul, Range, RangeInclusive, Sub};\n+use std::str::FromStr;\n \n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable_Generic;\n+use rustc_serialize::json::{Json, ToJson};\n use rustc_span::Span;\n \n pub mod call;\n@@ -152,22 +155,19 @@ impl TargetDataLayout {\n         }\n \n         // Perform consistency checks against the Target information.\n-        let endian_str = match dl.endian {\n-            Endian::Little => \"little\",\n-            Endian::Big => \"big\",\n-        };\n-        if endian_str != target.endian {\n+        if dl.endian != target.endian {\n             return Err(format!(\n                 \"inconsistent target specification: \\\"data-layout\\\" claims \\\n-                                architecture is {}-endian, while \\\"target-endian\\\" is `{}`\",\n-                endian_str, target.endian\n+                 architecture is {}-endian, while \\\"target-endian\\\" is `{}`\",\n+                dl.endian.as_str(),\n+                target.endian.as_str(),\n             ));\n         }\n \n         if dl.pointer_size.bits() != target.pointer_width.into() {\n             return Err(format!(\n                 \"inconsistent target specification: \\\"data-layout\\\" claims \\\n-                                pointers are {}-bit, while \\\"target-pointer-width\\\" is `{}`\",\n+                 pointers are {}-bit, while \\\"target-pointer-width\\\" is `{}`\",\n                 dl.pointer_size.bits(),\n                 target.pointer_width\n             ));\n@@ -234,6 +234,39 @@ pub enum Endian {\n     Big,\n }\n \n+impl Endian {\n+    pub fn as_str(&self) -> &'static str {\n+        match self {\n+            Self::Little => \"little\",\n+            Self::Big => \"big\",\n+        }\n+    }\n+}\n+\n+impl fmt::Debug for Endian {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(self.as_str())\n+    }\n+}\n+\n+impl FromStr for Endian {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"little\" => Ok(Self::Little),\n+            \"big\" => Ok(Self::Big),\n+            _ => Err(format!(r#\"unknown endian: \"{}\"\"#, s)),\n+        }\n+    }\n+}\n+\n+impl ToJson for Endian {\n+    fn to_json(&self) -> Json {\n+        self.as_str().to_json()\n+    }\n+}\n+\n /// Size of a type in bytes.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n #[derive(HashStable_Generic)]"}, {"sha": "255740cb9c045e9293086afc6454dfc7ca875b92", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,5 +1,6 @@\n // Targets the Big endian Cortex-R4/R5 processor (ARMv7-R)\n \n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n use crate::spec::{Target, TargetOptions};\n \n@@ -11,7 +12,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            endian: \"big\".to_string(),\n+            endian: Endian::Big,\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "eb82e4d17b0ef1ea8cf81a2751715161c4408210", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,5 +1,6 @@\n // Targets the Cortex-R4F/R5F processor (ARMv7-R)\n \n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n use crate::spec::{Target, TargetOptions};\n \n@@ -11,7 +12,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            endian: \"big\".to_string(),\n+            endian: Endian::Big,\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "53398539ac20f86019266c45276a8ebc3a1ef9e9", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -7,7 +8,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n         options: TargetOptions {\n-            endian: \"big\".to_string(),\n+            endian: Endian::Big,\n             // NOTE(mips64r2) matches C toolchain\n             cpu: \"mips64r2\".to_string(),\n             features: \"+mips64r2\".to_string(),"}, {"sha": "329fbd22721770d0b62560d7b4f6f0f5167f114d", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_muslabi64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -11,6 +12,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n-        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "b41b28cbc87c2d8e896b2bed0c2384912a035869", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -7,7 +8,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n         options: TargetOptions {\n-            endian: \"big\".to_string(),\n+            endian: Endian::Big,\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+fpxx,+nooddspreg\".to_string(),\n             max_atomic_width: Some(32),"}, {"sha": "3713af43d73607415ade8f8f17d6621d9f90ce88", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -11,6 +12,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "042ec9140fac0a31baa85ef1171da235d99c9472", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_uclibc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -7,7 +8,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n         options: TargetOptions {\n-            endian: \"big\".to_string(),\n+            endian: Endian::Big,\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),\n             max_atomic_width: Some(32),"}, {"sha": "a81c90fe0cdecb3578814a85a1d34c248c418417", "filename": "compiler/rustc_target/src/spec/mipsisa32r6_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -7,7 +8,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n         options: TargetOptions {\n-            endian: \"big\".to_string(),\n+            endian: Endian::Big,\n             cpu: \"mips32r6\".to_string(),\n             features: \"+mips32r6\".to_string(),\n             max_atomic_width: Some(32),"}, {"sha": "3bf837fbb411eff6e11ba5ad036753b865b72184", "filename": "compiler/rustc_target/src/spec/mipsisa64r6_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -7,7 +8,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n         options: TargetOptions {\n-            endian: \"big\".to_string(),\n+            endian: Endian::Big,\n             // NOTE(mips64r6) matches C toolchain\n             cpu: \"mips64r6\".to_string(),\n             features: \"+mips64r6\".to_string(),"}, {"sha": "abc96eb3322ec528a5301d44cb1d0eb354a94752", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -34,6 +34,7 @@\n //! the target's settings, though `target-feature` and `link-args` will *add*\n //! to the list specified by the target, rather than replace.\n \n+use crate::abi::Endian;\n use crate::spec::abi::{lookup as lookup_abi, Abi};\n use crate::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_serialize::json::{Json, ToJson};\n@@ -705,8 +706,8 @@ pub struct TargetOptions {\n     /// Whether the target is built-in or loaded from a custom target specification.\n     pub is_builtin: bool,\n \n-    /// String to use as the `target_endian` `cfg` variable. Defaults to \"little\".\n-    pub endian: String,\n+    /// Used as the `target_endian` `cfg` variable. Defaults to little endian.\n+    pub endian: Endian,\n     /// Width of c_int type. Defaults to \"32\".\n     pub c_int_width: String,\n     /// OS name to use for conditional compilation (`target_os`). Defaults to \"none\".\n@@ -1010,7 +1011,7 @@ impl Default for TargetOptions {\n     fn default() -> TargetOptions {\n         TargetOptions {\n             is_builtin: false,\n-            endian: \"little\".to_string(),\n+            endian: Endian::Little,\n             c_int_width: \"32\".to_string(),\n             os: \"none\".to_string(),\n             env: String::new(),\n@@ -1439,8 +1440,10 @@ impl Target {\n             } );\n         }\n \n+        if let Some(s) = obj.find(\"target-endian\").and_then(Json::as_string) {\n+            base.endian = s.parse()?;\n+        }\n         key!(is_builtin, bool);\n-        key!(endian = \"target-endian\");\n         key!(c_int_width = \"target-c-int-width\");\n         key!(os);\n         key!(env);"}, {"sha": "3dddeb1129cbe04cc24a2dbff8a3007a6a8b7a55", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -11,6 +12,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "751022c124baad93b53c94df545aa32bb37822a5", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, RelroLevel, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -15,6 +16,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "546dfbab6c70128b2dde0519a5f08a3332682664", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -11,6 +12,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "bb55872109c33573d58f8fbe005a4bd100a1d933", "filename": "compiler/rustc_target/src/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -11,6 +12,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { endian: \"big\".to_string(), ..base },\n+        options: TargetOptions { endian: Endian::Big, ..base },\n     }\n }"}, {"sha": "70dd0b2aee6915ead9473e714fe465fb0b9d2fd6", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -10,6 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "66118b74955ec805afb0b853abf49e6fe2f884d3", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnuspe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -10,6 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "679a3a2f6aacbf44fd2a0755214773aa330ae446", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -10,6 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { endian: Endian::Big, mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "1245098329aee407b05e843d291639fbeb41d993", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -10,10 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        options: TargetOptions {\n-            endian: \"big\".to_string(),\n-            mcount: \"__mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: Endian::Big, mcount: \"__mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "bb943a8825c6c794d10a6422c8b205ace60c0709", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -11,10 +12,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        options: TargetOptions {\n-            endian: \"big\".to_string(),\n-            features: \"+secure-plt\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: Endian::Big, features: \"+secure-plt\".to_string(), ..base },\n     }\n }"}, {"sha": "4b4f118ba49bd4731f7b89f70460061cf39f11fa", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks_spe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -12,7 +13,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n         options: TargetOptions {\n-            endian: \"big\".to_string(),\n+            endian: Endian::Big,\n             // feature msync would disable instruction 'fsync' which is not supported by fsl_p1p2\n             features: \"+secure-plt,+msync\".to_string(),\n             ..base"}, {"sha": "4eeea9bedfb505390c3e9b3c91835fdd9ef09b37", "filename": "compiler/rustc_target/src/spec/s390x_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,8 +1,9 @@\n+use crate::abi::Endian;\n use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.endian = \"big\".to_string();\n+    base.endian = Endian::Big;\n     // z10 is the oldest CPU supported by LLVM\n     base.cpu = \"z10\".to_string();\n     // FIXME: The data_layout string below and the ABI implementation in"}, {"sha": "e1aa48872b9065e5c278965bb63d045cb42a9bff", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,8 +1,9 @@\n+use crate::abi::Endian;\n use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.endian = \"big\".to_string();\n+    base.endian = Endian::Big;\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n "}, {"sha": "7d685c83100d3a40d462a19377c257ea94bdcee2", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,3 +1,4 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n@@ -11,10 +12,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n         arch: \"sparc64\".to_string(),\n-        options: TargetOptions {\n-            endian: \"big\".to_string(),\n-            mcount: \"__mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: Endian::Big, mcount: \"__mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "63b13fad4f7f6c816b72daf69cde9ee6315264ce", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_openbsd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,8 +1,9 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n-    base.endian = \"big\".to_string();\n+    base.endian = Endian::Big;\n     base.cpu = \"v9\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);"}, {"sha": "9e8fbff81c5380b979e4903d6ec9047b966b55cc", "filename": "compiler/rustc_target/src/spec/sparc_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,8 +1,9 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.endian = \"big\".to_string();\n+    base.endian = Endian::Big;\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mv8plus\".to_string());"}, {"sha": "9ac56cae9168a2c48ce41664b498d51ea97dfbae", "filename": "compiler/rustc_target/src/spec/sparcv9_sun_solaris.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02b0f4a5540ed22053f18f917b9a18291280bc5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs?ref=e02b0f4a5540ed22053f18f917b9a18291280bc5", "patch": "@@ -1,8 +1,9 @@\n+use crate::abi::Endian;\n use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n-    base.endian = \"big\".to_string();\n+    base.endian = Endian::Big;\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     // llvm calls this \"v9\"\n     base.cpu = \"v9\".to_string();"}]}