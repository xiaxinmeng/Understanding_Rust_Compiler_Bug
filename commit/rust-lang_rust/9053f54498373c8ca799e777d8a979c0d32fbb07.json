{"sha": "9053f54498373c8ca799e777d8a979c0d32fbb07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNTNmNTQ0OTgzNzNjOGNhNzk5ZTc3N2Q4YTk3OWMwZDMyZmJiMDc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-04-23T11:42:15Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-04-23T13:18:19Z"}, "message": "Move map iface over to more `for`-friendly iteration methods", "tree": {"sha": "b52b29a04aed6a3112f51179d0efd50617c97122", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b52b29a04aed6a3112f51179d0efd50617c97122"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9053f54498373c8ca799e777d8a979c0d32fbb07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9053f54498373c8ca799e777d8a979c0d32fbb07", "html_url": "https://github.com/rust-lang/rust/commit/9053f54498373c8ca799e777d8a979c0d32fbb07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9053f54498373c8ca799e777d8a979c0d32fbb07/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a872a99bfe400f794171a58fc47025133ce08155", "url": "https://api.github.com/repos/rust-lang/rust/commits/a872a99bfe400f794171a58fc47025133ce08155", "html_url": "https://github.com/rust-lang/rust/commit/a872a99bfe400f794171a58fc47025133ce08155"}], "stats": {"total": 157, "additions": 74, "deletions": 83}, "files": [{"sha": "290d2180c8683e169b5cf4c2ca4eea1f222edc19", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -222,7 +222,7 @@ fn try_parse_sources(filename: str, sources: map::hashmap<str, source>) {\n     let c = io::read_whole_file_str(filename);\n     alt json::from_str(result::get(c)) {\n         ok(json::dict(j)) {\n-            j.items { |k, v|\n+            for j.each { |k, v|\n                 sources.insert(k, parse_source(k, v));\n                 #debug(\"source: %s\", k);\n             }\n@@ -404,11 +404,11 @@ fn configure(opts: options) -> cargo {\n     need_dir(c.libdir);\n     need_dir(c.bindir);\n \n-    sources.keys { |k|\n+    for sources.each_key { |k|\n         let mut s = sources.get(k);\n         load_source_packages(c, s);\n         sources.insert(k, s);\n-    };\n+    }\n \n     if c.pgp {\n         pgp::init(c.root);\n@@ -422,11 +422,11 @@ fn configure(opts: options) -> cargo {\n }\n \n fn for_each_package(c: cargo, b: fn(source, package)) {\n-    c.sources.values({ |v|\n+    for c.sources.each_value {|v|\n         for vec::each(copy v.packages) {|p|\n             b(v, p);\n         }\n-    })\n+    }\n }\n \n // Runs all programs in directory <buildpath>\n@@ -592,7 +592,7 @@ fn cargo_suggestion(c: cargo, syncing: bool, fallback: fn())\n     }\n     if !syncing {\n         let mut npkg = 0u;\n-        c.sources.values({ |v| npkg += vec::len(v.packages) });\n+        for c.sources.each_value { |v| npkg += vec::len(v.packages) }\n         if npkg == 0u {\n             error(\"No packages known. You may wish to run \" +\n                   \"\\\"cargo sync\\\".\");\n@@ -776,7 +776,7 @@ fn cmd_sync(c: cargo) {\n         sync_one(c, c.opts.free[2], c.sources.get(c.opts.free[2]));\n     } else {\n         cargo_suggestion(c, true, { || } );\n-        c.sources.items { |k, v|\n+        for c.sources.each { |k, v|\n             sync_one(c, k, v);\n         }\n     }"}, {"sha": "f3d6b542d10e2797dd077180c01a14f83ce75476", "filename": "src/librustsyntax/ext/simplext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Flibrustsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Flibrustsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fsimplext.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -167,7 +167,7 @@ fn use_selectors_to_bind(b: binders, e: @expr) -> option<bindings> {\n         alt sel(match_expr(e)) { none { ret none; } _ { } }\n     }\n     let mut never_mind: bool = false;\n-    b.real_binders.items {|key, val|\n+    for b.real_binders.each {|key, val|\n         alt val(match_expr(e)) {\n           none { never_mind = true; }\n           some(mtc) { res.insert(key, mtc); }\n@@ -251,7 +251,7 @@ fn free_vars(b: bindings, e: @expr, it: fn(ident)) {\n             with *default_ast_fold()};\n     let f = make_fold(f_pre);\n     f.fold_expr(e); // ignore result\n-    idents.keys {|x| it(x); };\n+    for idents.each_key {|x| it(x); };\n }\n \n "}, {"sha": "b31cca12e942d927d4fc4a5ab4b2d4557394eecd", "filename": "src/librustsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Flibrustsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Flibrustsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Ftoken.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -217,7 +217,7 @@ nonetheless valid as identifiers becasue they are unambiguous.\n \"]\n fn keyword_table() -> hashmap<str, ()> {\n     let keywords = str_hash();\n-    bad_expr_word_table().keys() {|word|\n+    for bad_expr_word_table().each_key {|word|\n         keywords.insert(word, ());\n     }\n     let other_keywords = ["}, {"sha": "82a8b5d9e8af856ee3b28ef66de17dfbd049416f", "filename": "src/libstd/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -85,7 +85,7 @@ fn to_writer(wr: io::writer, j: json) {\n \n         wr.write_str(\"{ \");\n         let mut first = true;\n-        d.items { |key, value|\n+        for d.each { |key, value|\n             if !first {\n                 wr.write_str(\", \");\n             }\n@@ -481,7 +481,7 @@ fn eq(value0: json, value1: json) -> bool {\n       (dict(d0), dict(d1)) {\n           if d0.size() == d1.size() {\n               let mut equal = true;\n-              d0.items { |k, v0|\n+              for d0.each { |k, v0|\n                   alt d1.find(k) {\n                     some(v1) {\n                         if !eq(v0, v1) { equal = false; } }"}, {"sha": "353d78fabd3801f5495dd8ef3fe4bf5baf4afb8a", "filename": "src/libstd/map.rs", "status": "modified", "additions": 29, "deletions": 38, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -56,13 +56,13 @@ iface map<K: copy, V: copy> {\n     fn remove(K) -> option<V>;\n \n     #[doc = \"Iterate over all the key/value pairs in the map\"]\n-    fn items(fn(K, V));\n+    fn each(fn(K, V) -> bool);\n \n     #[doc = \"Iterate over all the keys in the map\"]\n-    fn keys(fn(K));\n+    fn each_key(fn(K) -> bool);\n \n     #[doc = \"Iterate over all the values in the map\"]\n-    fn values(fn(V));\n+    fn each_value(fn(V) -> bool);\n }\n \n // FIXME: package this up and export it as a datatype usable for\n@@ -207,49 +207,40 @@ mod chained {\n         ret vec::to_mut(vec::from_elem(nchains, absent));\n     }\n \n-    fn foreach_entry<K: copy, V: copy>(chain0: chain<K,V>,\n-                                     blk: fn(@entry<K,V>)) {\n-        let mut chain = chain0;\n-        loop {\n-            alt chain {\n-              absent { ret; }\n-              present(entry) {\n-                let next = entry.next;\n-                blk(entry); // may modify entry.next!\n-                chain = next;\n-              }\n-            }\n-        }\n-    }\n-\n-    fn foreach_chain<K: copy, V: copy>(chains: [const chain<K,V>],\n-                                     blk: fn(@entry<K,V>)) {\n-        let mut i = 0u;\n-        let n = vec::len(chains);\n+    fn each_entry<K: copy, V: copy>(tbl: t<K, V>,\n+                                    blk: fn(@entry<K,V>) -> bool) {\n+        let mut i = 0u, n = vec::len(tbl.chains);\n         while i < n {\n-            foreach_entry(chains[i], blk);\n+            let mut chain = tbl.chains[i];\n+            loop {\n+                alt chain {\n+                  absent { break; }\n+                  present(entry) {\n+                    let next = entry.next;\n+                    if !blk(entry) { ret; }\n+                    chain = next;\n+                  }\n+                }\n+            }\n             i += 1u;\n         }\n     }\n \n     fn rehash<K: copy, V: copy>(tbl: t<K,V>) {\n-        let old_chains = tbl.chains;\n-        let n_old_chains = vec::len(old_chains);\n+        let n_old_chains = vec::len(tbl.chains);\n         let n_new_chains: uint = uint::next_power_of_two(n_old_chains + 1u);\n-        tbl.chains = chains(n_new_chains);\n-        foreach_chain(old_chains) { |entry|\n+        let new_chains = chains(n_new_chains);\n+        for each_entry(tbl) {|entry|\n             let idx = entry.hash % n_new_chains;\n-            entry.next = tbl.chains[idx];\n-            tbl.chains[idx] = present(entry);\n+            entry.next = new_chains[idx];\n+            new_chains[idx] = present(entry);\n         }\n+        tbl.chains = new_chains;\n     }\n \n-    fn items<K: copy, V: copy>(tbl: t<K,V>, blk: fn(K,V)) {\n-        let tbl_chains = tbl.chains;  // Satisfy alias checker.\n-        foreach_chain(tbl_chains) { |entry|\n-            let key = entry.key;\n-            let value = entry.value;\n-            blk(key, value);\n+    fn each<K: copy, V: copy>(tbl: t<K,V>, blk: fn(K,V) -> bool) {\n+        for each_entry(tbl) {|entry|\n+            if !blk(copy entry.key, copy entry.value) { break; }\n         }\n     }\n \n@@ -277,11 +268,11 @@ mod chained {\n \n         fn remove(k: K) -> option<V> { remove(self, k) }\n \n-        fn items(blk: fn(K, V)) { items(self, blk); }\n+        fn each(blk: fn(K, V) -> bool) { each(self, blk); }\n \n-        fn keys(blk: fn(K)) { items(self) { |k, _v| blk(k) } }\n+        fn each_key(blk: fn(K) -> bool) { each(self) { |k, _v| blk(k)} }\n \n-        fn values(blk: fn(V)) { items(self) { |_k, v| blk(v) } }\n+        fn each_value(blk: fn(V) -> bool) { each(self) { |_k, v| blk(v)} }\n     }\n \n     fn mk<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>) -> t<K,V> {"}, {"sha": "fe481c5c47ecb6ee91c8b84a7a0054bf3caefb1d", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -89,27 +89,27 @@ impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n     fn get(&&key: uint) -> V { get(self, key) }\n     fn find(&&key: uint) -> option<V> { find(self, key) }\n     fn rehash() { fail }\n-    fn items(it: fn(&&uint, V)) {\n+    fn each(it: fn(&&uint, V) -> bool) {\n         let mut idx = 0u, l = self.v.len();\n         while idx < l {\n             alt self.v[idx] {\n               some(elt) {\n-                it(idx, copy elt);\n+                if !it(idx, copy elt) { break; }\n               }\n               none { }\n             }\n             idx += 1u;\n         }\n     }\n-    fn keys(it: fn(&&uint)) {\n+    fn each_key(it: fn(&&uint) -> bool) {\n         let mut idx = 0u, l = self.v.len();\n         while idx < l {\n-            if self.v[idx] != none { it(idx); }\n+            if self.v[idx] != none && !it(idx) { ret; }\n             idx += 1u;\n         }\n     }\n-    fn values(it: fn(V)) {\n-        self.items({|_i, v| it(v)});\n+    fn each_value(it: fn(V) -> bool) {\n+        self.each {|_i, v| it(v)}\n     }\n }\n "}, {"sha": "b3907d84f480777b8226f14b91d0e90424eac9c9", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -106,7 +106,7 @@ fn have_crate_data(cstore: cstore, cnum: ast::crate_num) -> bool {\n }\n \n fn iter_crate_data(cstore: cstore, i: fn(ast::crate_num, crate_metadata)) {\n-    p(cstore).metas.items {|k,v| i(k, v);};\n+    for p(cstore).metas.each {|k,v| i(k, v);};\n }\n \n fn add_used_crate_file(cstore: cstore, lib: str) {\n@@ -155,7 +155,7 @@ fn get_dep_hashes(cstore: cstore) -> [str] {\n     type crate_hash = {name: str, hash: str};\n     let mut result = [];\n \n-    p(cstore).use_crate_map.values {|cnum|\n+    for p(cstore).use_crate_map.each_value {|cnum|\n         let cdata = cstore::get_crate_data(cstore, cnum);\n         let hash = decoder::get_crate_hash(cdata.data);\n         #debug(\"Add hash[%s]: %s\", cdata.name, hash);"}, {"sha": "8fd8adae04a36a27360b7f733c5141fe07f09d29", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -206,7 +206,7 @@ fn encode_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt, crate: @crate)\n fn encode_reexport_paths(ebml_w: ebml::writer,\n                          ecx: @encode_ctxt, &index: [entry<str>]) {\n     let tcx = ecx.ccx.tcx;\n-    ecx.ccx.exp_map.items {|exp_id, defs|\n+    for ecx.ccx.exp_map.each {|exp_id, defs|\n         for defs.each {|def|\n             if !def.reexp { cont; }\n             let path = alt check tcx.items.get(exp_id) {"}, {"sha": "d7e09cce27180cc93f4d0a8371fb6f820d10feaa", "filename": "src/rustc/middle/capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcapture.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -129,6 +129,6 @@ fn compute_capture_vars(tcx: ty::ctxt,\n     }\n \n     let mut result = [];\n-    cap_map.values { |cap_var| result += [cap_var]; }\n+    for cap_map.each_value { |cap_var| result += [cap_var]; }\n     ret result;\n }"}, {"sha": "083274c8db5bf72a9ea45db29d4bc84c334f5c42", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -70,7 +70,7 @@ fn find_last_uses(c: @crate, def_map: resolve::def_map,\n               mut blocks: nil};\n     visit::visit_crate(*c, cx, v);\n     let mini_table = std::map::int_hash();\n-    cx.last_uses.items {|key, val|\n+    for cx.last_uses.each {|key, val|\n         if val {\n             alt key {\n               path(id) {"}, {"sha": "d1bf8a65ff80e005cecc370008d03d8df900fccd", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -172,7 +172,7 @@ fn time(do_it: bool, what: str, thunk: fn()) {\n \n fn check_item(cx: ctxt, i: @ast::item) {\n     cx.with_warn_attrs(i.attrs) {|cx|\n-        cx.curr.items {|lint, level|\n+        for cx.curr.each {|lint, level|\n             alt lint {\n               ctypes { check_item_ctypes(cx, level, i); }\n               unused_imports { check_item_unused_imports(cx, level, i); }\n@@ -265,7 +265,7 @@ fn check_crate(tcx: ty::ctxt, crate: @ast::crate,\n                tcx: tcx};\n \n     // Install defaults.\n-    cx.dict.items {|_k, spec| cx.set_level(spec.lint, spec.default); }\n+    for cx.dict.each {|_k, spec| cx.set_level(spec.lint, spec.default); }\n \n     // Install command-line options, overriding defaults.\n     for lint_opts.each {|pair|"}, {"sha": "076bb7705ca37c27b00cd8bf9f655da09c430d63", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -352,7 +352,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n \n fn resolve_imports(e: env) {\n     e.used_imports.track = true;\n-    e.imports.items {|id, v|\n+    for e.imports.each {|id, v|\n         alt check v {\n           todo(name, path, span, scopes) {\n             resolve_import(e, id, name, *path, span, scopes);\n@@ -368,7 +368,7 @@ fn resolve_imports(e: env) {\n // using lint-specific control flags presently but resolve-specific data\n // structures. Should use the general lint framework (with scopes, attrs).\n fn check_unused_imports(e: @env, level: lint::level) {\n-    e.imports.items {|k, v|\n+    for e.imports.each {|k, v|\n         alt v {\n             resolved(_, _, _, _, name, sp) {\n               if !vec::contains(e.used_imports.data, k) {\n@@ -1673,8 +1673,8 @@ fn lookup_external(e: env, cnum: int, ids: [ident], ns: namespace) ->\n fn check_for_collisions(e: @env, c: ast::crate) {\n     // Module indices make checking those relatively simple -- just check each\n     // name for multiple entities in the same namespace.\n-    e.mod_map.values {|val|\n-        val.index.items {|k, v| check_mod_name(*e, k, v); };\n+    for e.mod_map.each_value {|val|\n+        for val.index.each {|k, v| check_mod_name(*e, k, v); };\n     };\n     // Other scopes have to be checked the hard way.\n     let v =\n@@ -1912,7 +1912,7 @@ fn check_exports(e: @env) {\n             assert mid.crate == ast::local_crate;\n             let ixm = e.mod_map.get(mid.node);\n \n-            ixm.index.items() {|ident, mies|\n+            for ixm.index.each {|ident, mies|\n                 list::iter(mies) {|mie|\n                     alt mie {\n                       mie_item(item) {\n@@ -2055,7 +2055,7 @@ fn check_exports(e: @env) {\n         }\n     }\n \n-    e.mod_map.values {|_mod|\n+    for e.mod_map.each_value {|_mod|\n         alt _mod.m {\n           some(m) {\n             let glob_is_re_exported = int_hash();"}, {"sha": "d79fb51e804f80acd58df93abe21c0b598461158", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -365,7 +365,7 @@ fn compile_submatch(bcx: block, m: match, vals: [ValueRef],\n           some(e) {\n             // Temporarily set bindings. They'll be rewritten to PHI nodes\n             // for the actual arm block.\n-            data.id_map.items {|key, val|\n+            for data.id_map.each {|key, val|\n                 let loc = local_mem(option::get(assoc(key, m[0].bound)));\n                 bcx.fcx.lllocals.insert(val, loc);\n             };\n@@ -565,7 +565,7 @@ fn make_phi_bindings(bcx: block, map: [exit_node],\n     let _icx = bcx.insn_ctxt(\"alt::make_phi_bindings\");\n     let our_block = bcx.llbb as uint;\n     let mut success = true, bcx = bcx;\n-    ids.items {|name, node_id|\n+    for ids.each {|name, node_id|\n         let mut llbbs = [];\n         let mut vals = [];\n         for vec::each(map) {|ex|\n@@ -583,7 +583,7 @@ fn make_phi_bindings(bcx: block, map: [exit_node],\n     };\n     if success {\n         // Copy references that the alias analysis considered unsafe\n-        ids.values {|node_id|\n+        for ids.each_value {|node_id|\n             if bcx.ccx().maps.copy_map.contains_key(node_id) {\n                 let local = alt bcx.fcx.lllocals.find(node_id) {\n                   some(local_mem(x)) { x }"}, {"sha": "0e183382bb1fdfe1fa3806e6580d52f1206fc11d", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -526,7 +526,7 @@ fn make_generic_glue(ccx: @crate_ctxt, t: ty::t, llfn: ValueRef,\n \n fn emit_tydescs(ccx: @crate_ctxt) {\n     let _icx = ccx.insn_ctxt(\"emit_tydescs\");\n-    ccx.tydescs.items {|key, val|\n+    for ccx.tydescs.each {|key, val|\n         let glue_fn_ty = T_ptr(T_glue_fn(ccx));\n         let ti = val;\n         let take_glue =\n@@ -4871,7 +4871,7 @@ fn create_module_map(ccx: @crate_ctxt) -> ValueRef {\n     });\n     lib::llvm::SetLinkage(map, lib::llvm::InternalLinkage);\n     let mut elts: [ValueRef] = [];\n-    ccx.module_data.items {|key, val|\n+    for ccx.module_data.each {|key, val|\n         let elt = C_struct([p2i(ccx, C_cstr(ccx, key)),\n                             p2i(ccx, val)]);\n         elts += [elt];\n@@ -5091,7 +5091,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n     }\n \n     if ccx.sess.opts.count_llvm_insns {\n-        ccx.stats.llvm_insns.items() { |k, v|\n+        for ccx.stats.llvm_insns.each { |k, v|\n             io::println(#fmt(\"%-7u %s\", v, k));\n         }\n     }"}, {"sha": "6cd5072667c25f707cae1a3e72857f412897a753", "filename": "src/rustc/middle/tstate/auxiliary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -555,7 +555,7 @@ fn norm_a_constraint(id: def_id, c: constraint) -> [norm_constraint] {\n // non-exhaustive match in trans.\n fn constraints(fcx: fn_ctxt) -> [norm_constraint] {\n     let mut rslt: [norm_constraint] = [];\n-    fcx.enclosing.constrs.items {|key, val|\n+    for fcx.enclosing.constrs.each {|key, val|\n         rslt += norm_a_constraint(key, val);\n     };\n     ret rslt;\n@@ -875,7 +875,7 @@ fn copy_in_poststate_two(fcx: fn_ctxt, src_post: poststate,\n     }\n \n \n-    fcx.enclosing.constrs.values {|val|\n+    for fcx.enclosing.constrs.each_value {|val|\n         // replace any occurrences of the src def_id with the\n         // dest def_id\n         let insts = find_instances(fcx, subst, val);"}, {"sha": "2b4ed05e3e54d0171290acc0c4529706a655adf6", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -47,7 +47,7 @@ fn to_assoc_list<K:copy, V:copy>(\n ) -> [(K, V)] {\n \n     let mut vec = [];\n-    map.items {|k, v|\n+    for map.each {|k, v|\n         vec += [(k, v)];\n     }\n     ret vec;\n@@ -81,7 +81,7 @@ fn from_str_assoc_list<V:copy>(\n fn build_reexport_def_set(srv: astsrv::srv) -> def_set {\n     let assoc_list = astsrv::exec(srv) {|ctxt|\n         let def_set = common::new_def_hash();\n-        ctxt.exp_map.items {|_id, defs|\n+        for ctxt.exp_map.each {|_id, defs|\n             for defs.each {|def|\n                 if def.reexp {\n                     def_set.insert(def.id, ());\n@@ -172,7 +172,7 @@ fn build_reexport_path_map(srv: astsrv::srv, -def_map: def_map) -> path_map {\n         let def_map = from_def_assoc_list(def_assoc_list);\n         let path_map = map::str_hash::<[(str,doc::itemtag)]>();\n \n-        ctxt.exp_map.items {|exp_id, defs|\n+        for ctxt.exp_map.each {|exp_id, defs|\n             let path = alt check ctxt.ast_map.get(exp_id) {\n               ast_map::node_export(_, path) { path }\n             };"}, {"sha": "2cce73209bf52f50e28d1504f97adb6efeba784a", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -93,7 +93,7 @@ mod map_reduce {\n \n         map(input, bind emit(intermediates, ctrl, _, _));\n \n-        intermediates.values {|v| send(v, release); }\n+        for intermediates.each_value {|v| send(v, release); }\n \n         send(ctrl, mapper_done);\n     }\n@@ -172,7 +172,7 @@ mod map_reduce {\n             }\n         }\n \n-        reducers.values {|v| send(v, done); }\n+        for reducers.each_value {|v| send(v, done); }\n \n         for results.each {|r| future::get(r); }\n     }"}, {"sha": "e166a2e7f0f8f90202c40ab6545565ba738afd4e", "filename": "src/test/compile-fail/for-loop-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9053f54498373c8ca799e777d8a979c0d32fbb07/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs?ref=9053f54498373c8ca799e777d8a979c0d32fbb07", "patch": "@@ -10,7 +10,7 @@ fn bitv_to_str(enclosing: fn_info, v: bitv::bitv) -> str {\n     let s = \"\";\n \n     // error is that the value type in the hash map is var_info, not a box\n-    enclosing.vars.values {|val|\n+    for enclosing.vars.each_value {|val|\n         if bitv::get(v, val) { s += \"foo\"; }\n     }\n     ret s;"}]}