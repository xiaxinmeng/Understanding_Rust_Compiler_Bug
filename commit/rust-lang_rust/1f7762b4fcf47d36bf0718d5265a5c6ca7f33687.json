{"sha": "1f7762b4fcf47d36bf0718d5265a5c6ca7f33687", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNzc2MmI0ZmNmNDdkMzZiZjA3MThkNTI2NWE1YzZjYTdmMzM2ODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-14T13:45:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-14T13:45:38Z"}, "message": "Auto merge of #80024 - GuillaumeGomez:rollup-rqd46ko, r=GuillaumeGomez\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #79918 (doc(array,vec): add notes about side effects when empty-initializing)\n - #79936 (Fix item name display on mobile)\n - #80013 (Refactor test_lang_string_parse to make it clearer)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d62c2792d701d2dd603262a81f2ecab49baf2e25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d62c2792d701d2dd603262a81f2ecab49baf2e25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f7762b4fcf47d36bf0718d5265a5c6ca7f33687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7762b4fcf47d36bf0718d5265a5c6ca7f33687", "html_url": "https://github.com/rust-lang/rust/commit/1f7762b4fcf47d36bf0718d5265a5c6ca7f33687", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f7762b4fcf47d36bf0718d5265a5c6ca7f33687/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c45bff23dfbb13d9d28afe5dba57c028ba156da", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c45bff23dfbb13d9d28afe5dba57c028ba156da", "html_url": "https://github.com/rust-lang/rust/commit/3c45bff23dfbb13d9d28afe5dba57c028ba156da"}, {"sha": "2169094ab8209c563756c478603b0c8637348aa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2169094ab8209c563756c478603b0c8637348aa9", "html_url": "https://github.com/rust-lang/rust/commit/2169094ab8209c563756c478603b0c8637348aa9"}], "stats": {"total": 157, "additions": 82, "deletions": 75}, "files": [{"sha": "7d4eff6185dbe440aef85fa35315461f5ae662ae", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7762b4fcf47d36bf0718d5265a5c6ca7f33687/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7762b4fcf47d36bf0718d5265a5c6ca7f33687/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=1f7762b4fcf47d36bf0718d5265a5c6ca7f33687", "patch": "@@ -29,6 +29,10 @@\n /// to the same boxed integer value, not five references pointing to independently\n /// boxed integers.\n ///\n+/// Also, note that `vec![expr; 0]` is allowed, and produces an empty vector.\n+/// This will still evaluate `expr`, however, and immediately drop the resulting value, so\n+/// be mindful of side effects.\n+///\n /// [`Vec`]: crate::vec::Vec\n #[cfg(not(test))]\n #[macro_export]"}, {"sha": "7aca5451ebc2084d37cd0f6c8cfee39cddc7b9aa", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f7762b4fcf47d36bf0718d5265a5c6ca7f33687/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7762b4fcf47d36bf0718d5265a5c6ca7f33687/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=1f7762b4fcf47d36bf0718d5265a5c6ca7f33687", "patch": "@@ -489,6 +489,10 @@ mod prim_pointer {}\n /// * A repeat expression `[x; N]`, which produces an array with `N` copies of `x`.\n ///   The type of `x` must be [`Copy`].\n ///\n+/// Note that `[expr; 0]` is allowed, and produces an empty array.\n+/// This will still evaluate `expr`, however, and immediately drop the resulting value, so\n+/// be mindful of side effects.\n+///\n /// Arrays of *any* size implement the following traits if the element type allows it:\n ///\n /// - [`Copy`]"}, {"sha": "75ff3c5af2fd2ba83927e9d1ada6e82d04b622d8", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 69, "deletions": 74, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/1f7762b4fcf47d36bf0718d5265a5c6ca7f33687/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7762b4fcf47d36bf0718d5265a5c6ca7f33687/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=1f7762b4fcf47d36bf0718d5265a5c6ca7f33687", "patch": "@@ -51,82 +51,77 @@ fn test_unique_id() {\n \n #[test]\n fn test_lang_string_parse() {\n-    fn t(\n-        s: &str,\n-        should_panic: bool,\n-        no_run: bool,\n-        ignore: Ignore,\n-        rust: bool,\n-        test_harness: bool,\n-        compile_fail: bool,\n-        allow_fail: bool,\n-        error_codes: Vec<String>,\n-        edition: Option<Edition>,\n-    ) {\n-        assert_eq!(\n-            LangString::parse(s, ErrorCodes::Yes, true, None),\n-            LangString {\n-                should_panic,\n-                no_run,\n-                ignore,\n-                rust,\n-                test_harness,\n-                compile_fail,\n-                error_codes,\n-                original: s.to_owned(),\n-                allow_fail,\n-                edition,\n-            }\n-        )\n+    fn t(lg: LangString) {\n+        let s = &lg.original;\n+        assert_eq!(LangString::parse(s, ErrorCodes::Yes, true, None), lg)\n     }\n-    let ignore_foo = Ignore::Some(vec![\"foo\".to_string()]);\n \n-    fn v() -> Vec<String> {\n-        Vec::new()\n-    }\n-\n-    // marker                | should_panic | no_run | ignore | rust | test_harness\n-    //                       | compile_fail | allow_fail | error_codes | edition\n-    t(\"\", false, false, Ignore::None, true, false, false, false, v(), None);\n-    t(\"rust\", false, false, Ignore::None, true, false, false, false, v(), None);\n-    t(\"sh\", false, false, Ignore::None, false, false, false, false, v(), None);\n-    t(\"ignore\", false, false, Ignore::All, true, false, false, false, v(), None);\n-    t(\"ignore-foo\", false, false, ignore_foo, true, false, false, false, v(), None);\n-    t(\"should_panic\", true, false, Ignore::None, true, false, false, false, v(), None);\n-    t(\"no_run\", false, true, Ignore::None, true, false, false, false, v(), None);\n-    t(\"test_harness\", false, false, Ignore::None, true, true, false, false, v(), None);\n-    t(\"compile_fail\", false, true, Ignore::None, true, false, true, false, v(), None);\n-    t(\"allow_fail\", false, false, Ignore::None, true, false, false, true, v(), None);\n-    t(\"{.no_run .example}\", false, true, Ignore::None, true, false, false, false, v(), None);\n-    t(\"{.sh .should_panic}\", true, false, Ignore::None, false, false, false, false, v(), None);\n-    t(\"{.example .rust}\", false, false, Ignore::None, true, false, false, false, v(), None);\n-    t(\"{.test_harness .rust}\", false, false, Ignore::None, true, true, false, false, v(), None);\n-    t(\"text, no_run\", false, true, Ignore::None, false, false, false, false, v(), None);\n-    t(\"text,no_run\", false, true, Ignore::None, false, false, false, false, v(), None);\n-    t(\n-        \"edition2015\",\n-        false,\n-        false,\n-        Ignore::None,\n-        true,\n-        false,\n-        false,\n-        false,\n-        v(),\n-        Some(Edition::Edition2015),\n-    );\n-    t(\n-        \"edition2018\",\n-        false,\n-        false,\n-        Ignore::None,\n-        true,\n-        false,\n-        false,\n-        false,\n-        v(),\n-        Some(Edition::Edition2018),\n-    );\n+    t(LangString::all_false());\n+    t(LangString { original: \"rust\".into(), ..LangString::all_false() });\n+    t(LangString { original: \"sh\".into(), rust: false, ..LangString::all_false() });\n+    t(LangString { original: \"ignore\".into(), ignore: Ignore::All, ..LangString::all_false() });\n+    t(LangString {\n+        original: \"ignore-foo\".into(),\n+        ignore: Ignore::Some(vec![\"foo\".to_string()]),\n+        ..LangString::all_false()\n+    });\n+    t(LangString {\n+        original: \"should_panic\".into(),\n+        should_panic: true,\n+        ..LangString::all_false()\n+    });\n+    t(LangString { original: \"no_run\".into(), no_run: true, ..LangString::all_false() });\n+    t(LangString {\n+        original: \"test_harness\".into(),\n+        test_harness: true,\n+        ..LangString::all_false()\n+    });\n+    t(LangString {\n+        original: \"compile_fail\".into(),\n+        no_run: true,\n+        compile_fail: true,\n+        ..LangString::all_false()\n+    });\n+    t(LangString { original: \"allow_fail\".into(), allow_fail: true, ..LangString::all_false() });\n+    t(LangString {\n+        original: \"{.no_run .example}\".into(),\n+        no_run: true,\n+        ..LangString::all_false()\n+    });\n+    t(LangString {\n+        original: \"{.sh .should_panic}\".into(),\n+        should_panic: true,\n+        rust: false,\n+        ..LangString::all_false()\n+    });\n+    t(LangString { original: \"{.example .rust}\".into(), ..LangString::all_false() });\n+    t(LangString {\n+        original: \"{.test_harness .rust}\".into(),\n+        test_harness: true,\n+        ..LangString::all_false()\n+    });\n+    t(LangString {\n+        original: \"text, no_run\".into(),\n+        no_run: true,\n+        rust: false,\n+        ..LangString::all_false()\n+    });\n+    t(LangString {\n+        original: \"text,no_run\".into(),\n+        no_run: true,\n+        rust: false,\n+        ..LangString::all_false()\n+    });\n+    t(LangString {\n+        original: \"edition2015\".into(),\n+        edition: Some(Edition::Edition2015),\n+        ..LangString::all_false()\n+    });\n+    t(LangString {\n+        original: \"edition2018\".into(),\n+        edition: Some(Edition::Edition2018),\n+        ..LangString::all_false()\n+    });\n }\n \n #[test]"}, {"sha": "42e4fa051527169212c2094e346cfcb8c4cfc482", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f7762b4fcf47d36bf0718d5265a5c6ca7f33687/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/1f7762b4fcf47d36bf0718d5265a5c6ca7f33687/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=1f7762b4fcf47d36bf0718d5265a5c6ca7f33687", "patch": "@@ -1570,9 +1570,13 @@ h4 > .notable-traits {\n \t\theight: 73px;\n \t}\n \n+\t#main {\n+\t\tmargin-top: 100px;\n+\t}\n+\n \t#main > table:not(.table-display) td {\n \t\tword-break: break-word;\n-\t\tmin-width: 10%;\n+\t\twidth: 50%;\n \t}\n \n \t.search-container > div {"}]}