{"sha": "ba43c228b55d9620d3d480246ee2d9295484a336", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNDNjMjI4YjU1ZDk2MjBkM2Q0ODAyNDZlZTJkOTI5NTQ4NGEzMzY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-30T04:18:09Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-10-08T22:53:42Z"}, "message": "Some cleanup of no longer used AST things", "tree": {"sha": "794e3e29dac2049cd6f5ad5412a1cedd33ccad09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/794e3e29dac2049cd6f5ad5412a1cedd33ccad09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba43c228b55d9620d3d480246ee2d9295484a336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba43c228b55d9620d3d480246ee2d9295484a336", "html_url": "https://github.com/rust-lang/rust/commit/ba43c228b55d9620d3d480246ee2d9295484a336", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba43c228b55d9620d3d480246ee2d9295484a336/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21205f4f9e61469b55a853cf6be478cd6bc7a073", "url": "https://api.github.com/repos/rust-lang/rust/commits/21205f4f9e61469b55a853cf6be478cd6bc7a073", "html_url": "https://github.com/rust-lang/rust/commit/21205f4f9e61469b55a853cf6be478cd6bc7a073"}], "stats": {"total": 87, "additions": 19, "deletions": 68}, "files": [{"sha": "546b298a92b72dd11c21c14ba0bc089d466f8b51", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=ba43c228b55d9620d3d480246ee2d9295484a336", "patch": "@@ -955,8 +955,8 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                 // might be `if let`.\n                 ExprIf(ref cond, ref blk, ref else_opt) => {\n                     let else_opt = else_opt.as_ref().map(|els| match els.node {\n-                        let _old_cached = CachedIdSetter::new(lctx, e.id);\n                         ExprIfLet(..) => {\n+                            let _old_cached = CachedIdSetter::new(lctx, e.id);\n                             // wrap the if-let expr in a block\n                             let span = els.span;\n                             let blk = P(hir::Block {\n@@ -984,10 +984,10 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                     hir::ExprLoop(lower_block(lctx, body),\n                             opt_ident)\n                 }\n-                ExprMatch(ref expr, ref arms, ref source) => {\n+                ExprMatch(ref expr, ref arms) => {\n                     hir::ExprMatch(lower_expr(lctx, expr),\n                             arms.iter().map(|x| lower_arm(lctx, x)).collect(),\n-                            lower_match_source(lctx, source))\n+                            hir::MatchSource::Normal)\n                 }\n                 ExprClosure(capture_clause, ref decl, ref body) => {\n                     hir::ExprClosure(lower_capture_clause(lctx, capture_clause),\n@@ -1310,17 +1310,6 @@ pub fn lower_stmt(_lctx: &LoweringContext, s: &Stmt) -> P<hir::Stmt> {\n     }\n }\n \n-pub fn lower_match_source(_lctx: &LoweringContext, m: &MatchSource) -> hir::MatchSource {\n-    match *m {\n-        MatchSource::Normal => hir::MatchSource::Normal,\n-        MatchSource::IfLetDesugar { contains_else_clause } => {\n-            hir::MatchSource::IfLetDesugar { contains_else_clause: contains_else_clause }\n-        }\n-        MatchSource::WhileLetDesugar => hir::MatchSource::WhileLetDesugar,\n-        MatchSource::ForLoopDesugar => hir::MatchSource::ForLoopDesugar,\n-    }\n-}\n-\n pub fn lower_capture_clause(_lctx: &LoweringContext, c: CaptureClause) -> hir::CaptureClause {\n     match c {\n         CaptureByValue => hir::CaptureByValue,"}, {"sha": "6eee6872be21f1a2bf67bceba23630f78f3b2710", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=ba43c228b55d9620d3d480246ee2d9295484a336", "patch": "@@ -366,7 +366,7 @@ impl EarlyLintPass for UnusedParens {\n             ast::ExprIfLet(_, ref cond, _, _) => (cond, \"`if let` head expression\", true),\n             ast::ExprWhileLet(_, ref cond, _, _) => (cond, \"`while let` head expression\", true),\n             ast::ExprForLoop(_, ref cond, _, _) => (cond, \"`for` head expression\", true),\n-            ast::ExprMatch(ref head, _, _) => (head, \"`match` head expression\", true),\n+            ast::ExprMatch(ref head, _) => (head, \"`match` head expression\", true),\n             ast::ExprRet(Some(ref value)) => (value, \"`return` value\", false),\n             ast::ExprAssign(_, ref value) => (value, \"assigned value\", false),\n             ast::ExprAssignOp(_, _, ref value) => (value, \"assigned value\", false),"}, {"sha": "2ab4e6b929932996669ba99982bb005c8df3de68", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ba43c228b55d9620d3d480246ee2d9295484a336", "patch": "@@ -135,8 +135,7 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n \n     let krate = driver::assign_node_ids(&sess, krate);\n     // Lower ast -> hir.\n-    let foo = &42;\n-    let lcx = LoweringContext::new(foo, &sess, &krate);\n+    let lcx = LoweringContext::new(&sess, &krate);\n     let mut hir_forest = hir_map::Forest::new(lower_crate(&lcx, &krate));\n     let arenas = ty::CtxtArenas::new();\n     let hir_map = driver::make_map(&sess, &mut hir_forest);"}, {"sha": "0dafc89a798d5878ac29b5997fb155de18c07316", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=ba43c228b55d9620d3d480246ee2d9295484a336", "patch": "@@ -83,8 +83,7 @@ pub fn run(input: &str,\n                                                      \"rustdoc-test\", None)\n         .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n     let krate = driver::assign_node_ids(&sess, krate);\n-    let foo = &42;\n-    let lcx = LoweringContext::new(foo, &sess, &krate);\n+    let lcx = LoweringContext::new(&sess, &krate);\n     let krate = lower_crate(&lcx, &krate);\n \n     let opts = scrape_test_config(&krate);"}, {"sha": "34b99ab8cce1c062a2e604554f8f72e0ac6d6c35", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ba43c228b55d9620d3d480246ee2d9295484a336", "patch": "@@ -855,9 +855,8 @@ pub enum Expr_ {\n     ///\n     /// `'label: loop { block }`\n     ExprLoop(P<Block>, Option<Ident>),\n-    /// A `match` block, with a source that indicates whether or not it is\n-    /// the result of a desugaring, and if so, which kind.\n-    ExprMatch(P<Expr>, Vec<Arm>, MatchSource),\n+    /// A `match` block.\n+    ExprMatch(P<Expr>, Vec<Arm>),\n     /// A closure (for example, `move |a, b, c| {a + b + c}`)\n     ExprClosure(CaptureClause, P<FnDecl>, P<Block>),\n     /// A block (`{ ... }`)\n@@ -936,14 +935,6 @@ pub struct QSelf {\n     pub position: usize\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum MatchSource {\n-    Normal,\n-    IfLetDesugar { contains_else_clause: bool },\n-    WhileLetDesugar,\n-    ForLoopDesugar,\n-}\n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum CaptureClause {\n     CaptureByValue,"}, {"sha": "a73fd4534c96cc142398d9f0bda62e1e62b517fb", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=ba43c228b55d9620d3d480246ee2d9295484a336", "patch": "@@ -29,7 +29,6 @@ use std::io::{self, Read};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n-use parse::token::intern;\n use ast::Name;\n \n // _____________________________________________________________________________\n@@ -269,28 +268,8 @@ pub enum ExpnFormat {\n     MacroAttribute(Name),\n     /// e.g. `format!()`\n     MacroBang(Name),\n-    /// Syntax sugar expansion performed by the compiler (libsyntax::expand).\n-    CompilerExpansion(CompilerExpansionFormat),\n }\n \n-#[derive(Clone, Copy, Hash, Debug, PartialEq, Eq)]\n-pub enum CompilerExpansionFormat {\n-    IfLet,\n-    PlacementIn,\n-    WhileLet,\n-    ForLoop,\n-}\n-\n-impl CompilerExpansionFormat {\n-    pub fn name(self) -> &'static str {\n-        match self {\n-            CompilerExpansionFormat::IfLet => \"if let expansion\",\n-            CompilerExpansionFormat::PlacementIn => \"placement-in expansion\",\n-            CompilerExpansionFormat::WhileLet => \"while let expansion\",\n-            CompilerExpansionFormat::ForLoop => \"for loop expansion\",\n-        }\n-    }\n-}\n #[derive(Clone, Hash, Debug)]\n pub struct NameAndSpan {\n     /// The format with which the macro was invoked.\n@@ -310,7 +289,6 @@ impl NameAndSpan {\n         match self.format {\n             ExpnFormat::MacroAttribute(s) => s,\n             ExpnFormat::MacroBang(s) => s,\n-            ExpnFormat::CompilerExpansion(ce) => intern(ce.name()),\n         }\n     }\n }"}, {"sha": "2d266be3242a57c3743157f413f0fe17a867148d", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=ba43c228b55d9620d3d480246ee2d9295484a336", "patch": "@@ -225,10 +225,10 @@ fn fold_expr<F>(cx: &mut Context<F>, expr: P<ast::Expr>) -> P<ast::Expr> where\n         fold::noop_fold_expr(ast::Expr {\n             id: id,\n             node: match node {\n-                ast::ExprMatch(m, arms, source) => {\n+                ast::ExprMatch(m, arms) => {\n                     ast::ExprMatch(m, arms.into_iter()\n                                         .filter(|a| (cx.in_cfg)(&a.attrs))\n-                                        .collect(), source)\n+                                        .collect())\n                 }\n                 _ => node\n             },"}, {"sha": "2a8cdf138b0e6fad127e06180fe12e87c85387d4", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=ba43c228b55d9620d3d480246ee2d9295484a336", "patch": "@@ -737,7 +737,6 @@ impl EmitterWriter {\n                         let (pre, post) = match ei.callee.format {\n                             codemap::MacroAttribute(..) => (\"#[\", \"]\"),\n                             codemap::MacroBang(..) => (\"\", \"!\"),\n-                            codemap::CompilerExpansion(..) => (\"\", \"\"),\n                         };\n                         // Don't print recursive invocations\n                         if ei.call_site != last_span {"}, {"sha": "a3df77275984224efd4999d8696c008a57adcc48", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=ba43c228b55d9620d3d480246ee2d9295484a336", "patch": "@@ -13,7 +13,7 @@ pub use self::SyntaxExtension::*;\n use ast;\n use ast::Name;\n use codemap;\n-use codemap::{CodeMap, Span, ExpnId, ExpnInfo, NO_EXPANSION, CompilerExpansion};\n+use codemap::{CodeMap, Span, ExpnId, ExpnInfo, NO_EXPANSION};\n use ext;\n use ext::expand;\n use ext::tt::macro_rules;\n@@ -651,10 +651,7 @@ impl<'a> ExtCtxt<'a> {\n                         return None;\n                     }\n                     expn_id = i.call_site.expn_id;\n-                    match i.callee.format {\n-                        CompilerExpansion(..) => (),\n-                        _ => last_macro = Some(i.call_site),\n-                    }\n+                    last_macro = Some(i.call_site);\n                     return Some(());\n                 })\n             }).is_none() {"}, {"sha": "efea85f916252e3ba7679e3d0bb78d4e65b90ad0", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=ba43c228b55d9620d3d480246ee2d9295484a336", "patch": "@@ -868,7 +868,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn expr_match(&self, span: Span, arg: P<ast::Expr>, arms: Vec<ast::Arm>) -> P<Expr> {\n-        self.expr(span, ast::ExprMatch(arg, arms, ast::MatchSource::Normal))\n+        self.expr(span, ast::ExprMatch(arg, arms))\n     }\n \n     fn expr_if(&self, span: Span, cond: P<ast::Expr>,"}, {"sha": "3c1aa992a3c16aa77fda64e1982cd8f4c5c58a48", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=ba43c228b55d9620d3d480246ee2d9295484a336", "patch": "@@ -1256,10 +1256,9 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                 ExprLoop(folder.fold_block(body),\n                         opt_ident.map(|i| folder.fold_ident(i)))\n             }\n-            ExprMatch(expr, arms, source) => {\n+            ExprMatch(expr, arms) => {\n                 ExprMatch(folder.fold_expr(expr),\n-                        arms.move_map(|x| folder.fold_arm(x)),\n-                        source)\n+                          arms.move_map(|x| folder.fold_arm(x)))\n             }\n             ExprClosure(capture_clause, decl, body) => {\n                 ExprClosure(capture_clause,"}, {"sha": "443cea696b682150af3e30ed48b7fc90db1f02ed", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ba43c228b55d9620d3d480246ee2d9295484a336", "patch": "@@ -37,7 +37,7 @@ use ast::{LifetimeDef, Lit, Lit_};\n use ast::{LitBool, LitChar, LitByte, LitByteStr};\n use ast::{LitStr, LitInt, Local};\n use ast::{MacStmtWithBraces, MacStmtWithSemicolon, MacStmtWithoutBraces};\n-use ast::{MutImmutable, MutMutable, Mac_, MatchSource};\n+use ast::{MutImmutable, MutMutable, Mac_};\n use ast::{MutTy, BiMul, Mutability};\n use ast::{MethodImplItem, NamedField, UnNeg, NoReturn, UnNot};\n use ast::{Pat, PatBox, PatEnum, PatIdent, PatLit, PatQPath, PatMac, PatRange};\n@@ -2927,7 +2927,7 @@ impl<'a> Parser<'a> {\n         }\n         let hi = self.span.hi;\n         try!(self.bump());\n-        return Ok(self.mk_expr(lo, hi, ExprMatch(discriminant, arms, MatchSource::Normal)));\n+        return Ok(self.mk_expr(lo, hi, ExprMatch(discriminant, arms)));\n     }\n \n     pub fn parse_arm_nopanic(&mut self) -> PResult<Arm> {"}, {"sha": "f5f3907a4e6c874decdd62d738e7bd4fc49f6eb3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ba43c228b55d9620d3d480246ee2d9295484a336", "patch": "@@ -2045,7 +2045,7 @@ impl<'a> State<'a> {\n                 try!(space(&mut self.s));\n                 try!(self.print_block(&**blk));\n             }\n-            ast::ExprMatch(ref expr, ref arms, _) => {\n+            ast::ExprMatch(ref expr, ref arms) => {\n                 try!(self.cbox(indent_unit));\n                 try!(self.ibox(4));\n                 try!(self.word_nbsp(\"match\"));"}, {"sha": "091580b9bd837c1318a4d9d6b46e75ca93c852ed", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba43c228b55d9620d3d480246ee2d9295484a336/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=ba43c228b55d9620d3d480246ee2d9295484a336", "patch": "@@ -731,7 +731,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_block(block);\n             walk_opt_ident(visitor, expression.span, opt_ident)\n         }\n-        ExprMatch(ref subexpression, ref arms, _) => {\n+        ExprMatch(ref subexpression, ref arms) => {\n             visitor.visit_expr(subexpression);\n             walk_list!(visitor, visit_arm, arms);\n         }"}]}