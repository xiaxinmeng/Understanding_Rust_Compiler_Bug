{"sha": "02b844e9fbc351a53d56398e269e5861ed1ad5c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYjg0NGU5ZmJjMzUxYTUzZDU2Mzk4ZTI2OWU1ODYxZWQxYWQ1YzE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-13T16:52:56Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-13T16:58:37Z"}, "message": "Adhere to style guidelines in import_assets", "tree": {"sha": "95c385c95658f71d12059434e03e97b6aecafead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95c385c95658f71d12059434e03e97b6aecafead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02b844e9fbc351a53d56398e269e5861ed1ad5c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02b844e9fbc351a53d56398e269e5861ed1ad5c1", "html_url": "https://github.com/rust-lang/rust/commit/02b844e9fbc351a53d56398e269e5861ed1ad5c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02b844e9fbc351a53d56398e269e5861ed1ad5c1/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "256104d78e3ba720a7d1a609ed3257f114d457b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/256104d78e3ba720a7d1a609ed3257f114d457b5", "html_url": "https://github.com/rust-lang/rust/commit/256104d78e3ba720a7d1a609ed3257f114d457b5"}], "stats": {"total": 88, "additions": 45, "deletions": 43}, "files": [{"sha": "7182a2a5d617bf4fa69d1585ae771ee7b7de50ab", "filename": "crates/assists/src/handlers/auto_import.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/02b844e9fbc351a53d56398e269e5861ed1ad5c1/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b844e9fbc351a53d56398e269e5861ed1ad5c1/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=02b844e9fbc351a53d56398e269e5861ed1ad5c1", "patch": "@@ -1,3 +1,5 @@\n+use syntax::ast;\n+\n use crate::{\n     utils::import_assets::{ImportAssets, ImportCandidate},\n     utils::{insert_use, mod_path_to_ast, ImportScope},\n@@ -24,16 +26,24 @@ use crate::{\n // # pub mod std { pub mod collections { pub struct HashMap { } } }\n // ```\n pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let auto_import_assets = ImportAssets::new(&ctx)?;\n-    let proposed_imports = auto_import_assets.search_for_imports(&ctx.sema, &ctx.config.insert_use);\n+    let import_assets =\n+        if let Some(path_under_caret) = ctx.find_node_at_offset_with_descend::<ast::Path>() {\n+            ImportAssets::for_regular_path(path_under_caret, &ctx.sema)\n+        } else if let Some(method_under_caret) =\n+            ctx.find_node_at_offset_with_descend::<ast::MethodCallExpr>()\n+        {\n+            ImportAssets::for_method_call(method_under_caret, &ctx.sema)\n+        } else {\n+            None\n+        }?;\n+    let proposed_imports = import_assets.search_for_imports(&ctx.sema, &ctx.config.insert_use);\n     if proposed_imports.is_empty() {\n         return None;\n     }\n \n-    let range = ctx.sema.original_range(auto_import_assets.syntax_under_caret()).range;\n-    let group = import_group_message(auto_import_assets.import_candidate());\n-    let scope =\n-        ImportScope::find_insert_use_container(auto_import_assets.syntax_under_caret(), ctx)?;\n+    let range = ctx.sema.original_range(import_assets.syntax_under_caret()).range;\n+    let group = import_group_message(import_assets.import_candidate());\n+    let scope = ImportScope::find_insert_use_container(import_assets.syntax_under_caret(), ctx)?;\n     let syntax = scope.as_syntax_node();\n     for import in proposed_imports {\n         acc.add_group("}, {"sha": "b816edc82162e17e4e1458be917e20c81f8c60c3", "filename": "crates/assists/src/utils/import_assets.rs", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/02b844e9fbc351a53d56398e269e5861ed1ad5c1/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b844e9fbc351a53d56398e269e5861ed1ad5c1/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Fimport_assets.rs?ref=02b844e9fbc351a53d56398e269e5861ed1ad5c1", "patch": "@@ -9,6 +9,23 @@ use syntax::{ast, AstNode, SyntaxNode};\n \n use crate::assist_config::InsertUseConfig;\n \n+#[derive(Debug)]\n+pub(crate) enum ImportCandidate {\n+    /// Simple name like 'HashMap'\n+    UnqualifiedName(String),\n+    /// First part of the qualified name.\n+    /// For 'std::collections::HashMap', that will be 'std'.\n+    QualifierStart(String),\n+    /// A trait associated function (with no self parameter) or associated constant.\n+    /// For 'test_mod::TestEnum::test_function', `Type` is the `test_mod::TestEnum` expression type\n+    /// and `String` is the `test_function`\n+    TraitAssocItem(hir::Type, String),\n+    /// A trait method with self parameter.\n+    /// For 'test_enum.test_method()', `Type` is the `test_enum` expression type\n+    /// and `String` is the `test_method`\n+    TraitMethod(hir::Type, String),\n+}\n+\n #[derive(Debug)]\n pub(crate) struct ImportAssets {\n     import_candidate: ImportCandidate,\n@@ -17,23 +34,7 @@ pub(crate) struct ImportAssets {\n }\n \n impl ImportAssets {\n-    pub(crate) fn new(ctx: &crate::assist_context::AssistContext) -> Option<Self> {\n-        if let Some(path_under_caret) = ctx.find_node_at_offset_with_descend::<ast::Path>() {\n-            Self::for_regular_path(path_under_caret, &ctx.sema)\n-        } else {\n-            Self::for_method_call(ctx.find_node_at_offset_with_descend()?, &ctx.sema)\n-        }\n-    }\n-\n-    pub(crate) fn syntax_under_caret(&self) -> &SyntaxNode {\n-        &self.syntax_under_caret\n-    }\n-\n-    pub(crate) fn import_candidate(&self) -> &ImportCandidate {\n-        &self.import_candidate\n-    }\n-\n-    fn for_method_call(\n+    pub(crate) fn for_method_call(\n         method_call: ast::MethodCallExpr,\n         sema: &Semantics<RootDatabase>,\n     ) -> Option<Self> {\n@@ -46,7 +47,7 @@ impl ImportAssets {\n         })\n     }\n \n-    fn for_regular_path(\n+    pub(crate) fn for_regular_path(\n         path_under_caret: ast::Path,\n         sema: &Semantics<RootDatabase>,\n     ) -> Option<Self> {\n@@ -63,6 +64,14 @@ impl ImportAssets {\n         })\n     }\n \n+    pub(crate) fn syntax_under_caret(&self) -> &SyntaxNode {\n+        &self.syntax_under_caret\n+    }\n+\n+    pub(crate) fn import_candidate(&self) -> &ImportCandidate {\n+        &self.import_candidate\n+    }\n+\n     fn get_search_query(&self) -> &str {\n         match &self.import_candidate {\n             ImportCandidate::UnqualifiedName(name) => name,\n@@ -182,25 +191,8 @@ impl ImportAssets {\n     }\n }\n \n-#[derive(Debug)]\n-pub(crate) enum ImportCandidate {\n-    /// Simple name like 'HashMap'\n-    UnqualifiedName(String),\n-    /// First part of the qualified name.\n-    /// For 'std::collections::HashMap', that will be 'std'.\n-    QualifierStart(String),\n-    /// A trait associated function (with no self parameter) or associated constant.\n-    /// For 'test_mod::TestEnum::test_function', `Type` is the `test_mod::TestEnum` expression type\n-    /// and `String` is the `test_function`\n-    TraitAssocItem(hir::Type, String),\n-    /// A trait method with self parameter.\n-    /// For 'test_enum.test_method()', `Type` is the `test_enum` expression type\n-    /// and `String` is the `test_method`\n-    TraitMethod(hir::Type, String),\n-}\n-\n impl ImportCandidate {\n-    pub(crate) fn for_method_call(\n+    fn for_method_call(\n         sema: &Semantics<RootDatabase>,\n         method_call: &ast::MethodCallExpr,\n     ) -> Option<Self> {\n@@ -213,7 +205,7 @@ impl ImportCandidate {\n         ))\n     }\n \n-    pub(crate) fn for_regular_path(\n+    fn for_regular_path(\n         sema: &Semantics<RootDatabase>,\n         path_under_caret: &ast::Path,\n     ) -> Option<Self> {"}]}