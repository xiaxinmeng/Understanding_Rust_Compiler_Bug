{"sha": "7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNDhlNTNjMWU4YzE0MjdjYmIyZTgyN2E5ZDQzYmZhMzY4NDdkNjU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-04T10:12:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-04T20:23:03Z"}, "message": "syntax: remove obsolete mutability from ExprVec and ExprRepeat.", "tree": {"sha": "e7ac834d6d422838ea3683609546b24bcbad2df9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7ac834d6d422838ea3683609546b24bcbad2df9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "html_url": "https://github.com/rust-lang/rust/commit/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b236f45e35554f89d490e7b5634354cde15d0126", "url": "https://api.github.com/repos/rust-lang/rust/commits/b236f45e35554f89d490e7b5634354cde15d0126", "html_url": "https://github.com/rust-lang/rust/commit/b236f45e35554f89d490e7b5634354cde15d0126"}], "stats": {"total": 121, "additions": 54, "deletions": 67}, "files": [{"sha": "86d2e039505f186f1a3e51435773e69e887fb07d", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -404,21 +404,17 @@ fn is_test_crate(krate: &ast::Crate) -> bool {\n }\n \n fn mk_test_descs(cx: &TestCtxt) -> @ast::Expr {\n-    let mut descs = Vec::new();\n     debug!(\"building test vector from {} tests\", cx.testfns.borrow().len());\n-    for test in cx.testfns.borrow().iter() {\n-        descs.push(mk_test_desc_and_fn_rec(cx, test));\n-    }\n-\n-    let inner_expr = @ast::Expr {\n-        id: ast::DUMMY_NODE_ID,\n-        node: ast::ExprVec(descs, ast::MutImmutable),\n-        span: DUMMY_SP,\n-    };\n \n     @ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n-        node: ast::ExprVstore(inner_expr, ast::ExprVstoreSlice),\n+        node: ast::ExprVstore(@ast::Expr {\n+            id: ast::DUMMY_NODE_ID,\n+            node: ast::ExprVec(cx.testfns.borrow().iter().map(|test| {\n+                mk_test_desc_and_fn_rec(cx, test)\n+            }).collect()),\n+            span: DUMMY_SP,\n+        }, ast::ExprVstoreSlice),\n         span: DUMMY_SP,\n     }\n }"}, {"sha": "d631340fc4e31c974c1ed4bc287b2b5ed3157a7e", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -347,7 +347,7 @@ impl<'a> CFGBuilder<'a> {\n                 self.add_node(expr.id, [])\n             }\n \n-            ast::ExprVec(ref elems, _) => {\n+            ast::ExprVec(ref elems) => {\n                 self.straightline(expr, pred, elems.as_slice())\n             }\n \n@@ -379,7 +379,7 @@ impl<'a> CFGBuilder<'a> {\n                 self.straightline(expr, base_exit, field_exprs.as_slice())\n             }\n \n-            ast::ExprRepeat(elem, count, _) => {\n+            ast::ExprRepeat(elem, count) => {\n                 self.straightline(expr, pred, [elem, count])\n             }\n "}, {"sha": "e3a0a6a9782290bb52979d75afcbfcfb21190b4f", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -157,7 +157,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &Expr, is_const: bool) {\n           }\n           ExprVstore(_, ExprVstoreMutSlice) |\n           ExprVstore(_, ExprVstoreSlice) |\n-          ExprVec(_, MutImmutable) |\n+          ExprVec(_) |\n           ExprAddrOf(MutImmutable, _) |\n           ExprParen(..) |\n           ExprField(..) |"}, {"sha": "aca8367f0b83720665710acb88abcb1f69d8e318", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -213,7 +213,7 @@ impl<'a> ConstEvalVisitor<'a> {\n                 join(self.classify(a), self.classify(b)),\n \n             ast::ExprTup(ref es) |\n-            ast::ExprVec(ref es, ast::MutImmutable) =>\n+            ast::ExprVec(ref es) =>\n                 join_all(es.iter().map(|e| self.classify(*e))),\n \n             ast::ExprVstore(e, vstore) => {"}, {"sha": "2ef1adba771dc17669ff530888524b0546c39910", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -538,11 +538,11 @@ impl<'a, 'b, O:DataFlowOperator> PropagationContext<'a, 'b, O> {\n                 self.walk_expr(l, in_out, loop_scopes);\n             }\n \n-            ast::ExprVec(ref exprs, _) => {\n+            ast::ExprVec(ref exprs) => {\n                 self.walk_exprs(exprs.as_slice(), in_out, loop_scopes)\n             }\n \n-            ast::ExprRepeat(l, r, _) => {\n+            ast::ExprRepeat(l, r) => {\n                 self.walk_expr(l, in_out, loop_scopes);\n                 self.walk_expr(r, in_out, loop_scopes);\n             }"}, {"sha": "09f396e932ff2a1d1cd67212bb1bd36f6658d195", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -309,7 +309,7 @@ pub fn check_expr(cx: &mut Context, e: &Expr) {\n             let target_ty = ty::expr_ty(cx.tcx, e);\n             check_trait_cast(cx, source_ty, target_ty, source.span);\n         }\n-        ExprRepeat(element, count_expr, _) => {\n+        ExprRepeat(element, count_expr) => {\n             let count = ty::eval_repeat_count(cx.tcx, count_expr);\n             if count > 1 {\n                 let element_ty = ty::expr_ty(cx.tcx, element);"}, {"sha": "046103c439db993277a6922c7155a431697d35a1", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -1109,11 +1109,11 @@ impl<'a> Liveness<'a> {\n             self.propagate_through_expr(expr, succ)\n           }\n \n-          ExprVec(ref exprs, _) => {\n+          ExprVec(ref exprs) => {\n             self.propagate_through_exprs(exprs.as_slice(), succ)\n           }\n \n-          ExprRepeat(element, count, _) => {\n+          ExprRepeat(element, count) => {\n             let succ = self.propagate_through_expr(count, succ);\n             self.propagate_through_expr(element, succ)\n           }"}, {"sha": "dbc28f9fdd5626c1003f59b7eadd01c9ada8abca", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -473,7 +473,7 @@ impl<'a> VisitContext<'a> {\n                 self.use_expr(base, expr_mode);\n             }\n \n-            ExprVec(ref exprs, _) => {\n+            ExprVec(ref exprs) => {\n                 self.consume_exprs(exprs.as_slice());\n             }\n \n@@ -539,7 +539,7 @@ impl<'a> VisitContext<'a> {\n                 // }\n             }\n \n-            ExprRepeat(base, count, _) => {\n+            ExprRepeat(base, count) => {\n                 self.consume_expr(base);\n                 self.consume_expr(count);\n             }"}, {"sha": "8a5e0d3df1711d9cc3fd756c777aa7dd79b60f76", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -724,7 +724,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor,\n                 visitor.region_maps.record_rvalue_scope(subexpr.id, blk_id);\n                 record_rvalue_scope_if_borrow_expr(visitor, subexpr, blk_id);\n             }\n-            ast::ExprVec(ref subexprs, _) |\n+            ast::ExprVec(ref subexprs) |\n             ast::ExprTup(ref subexprs) => {\n                 for &subexpr in subexprs.iter() {\n                     record_rvalue_scope_if_borrow_expr("}, {"sha": "a2b46b1f2a1d091367d060f09b047c7c6c330058", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -557,7 +557,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n                    inlineable.iter().fold(true, |a, &b| a && b))\n               })\n           }\n-          ast::ExprVec(ref es, ast::MutImmutable) => {\n+          ast::ExprVec(ref es) => {\n             let (v, _, inlineable) = const_vec(cx,\n                                                e,\n                                                es.as_slice(),\n@@ -573,7 +573,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n                     _ => { cx.sess().span_bug(e.span, \"bad const-slice lit\") }\n                 }\n               }\n-              ast::ExprVec(ref es, ast::MutImmutable) => {\n+              ast::ExprVec(ref es) => {\n                 let (cv, llunitty, _) = const_vec(cx,\n                                                   e,\n                                                   es.as_slice(),\n@@ -592,7 +592,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n               _ => cx.sess().span_bug(e.span, \"bad const-slice expr\")\n             }\n           }\n-          ast::ExprRepeat(elem, count, _) => {\n+          ast::ExprRepeat(elem, count) => {\n             let vec_ty = ty::expr_ty(cx.tcx(), e);\n             let unit_ty = ty::sequence_element_type(cx.tcx(), vec_ty);\n             let llunitty = type_of::type_of(cx, unit_ty);"}, {"sha": "0a610538f316fcf4a6b7d5bb02c9700d41fd517b", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -2619,15 +2619,15 @@ fn populate_scope_map(cx: &CrateContext,\n                 walk_expr(cx, rhs, scope_stack, scope_map);\n             }\n \n-            ast::ExprVec(ref init_expressions, _) |\n-            ast::ExprTup(ref init_expressions)    => {\n+            ast::ExprVec(ref init_expressions) |\n+            ast::ExprTup(ref init_expressions) => {\n                 for ie in init_expressions.iter() {\n                     walk_expr(cx, *ie, scope_stack, scope_map);\n                 }\n             }\n \n-            ast::ExprAssign(sub_exp1, sub_exp2)    |\n-            ast::ExprRepeat(sub_exp1, sub_exp2, _) => {\n+            ast::ExprAssign(sub_exp1, sub_exp2) |\n+            ast::ExprRepeat(sub_exp1, sub_exp2) => {\n                 walk_expr(cx, sub_exp1, scope_stack, scope_map);\n                 walk_expr(cx, sub_exp2, scope_stack, scope_map);\n             }"}, {"sha": "b47f509aeeec759a99198f37c2025f5705be2ad4", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -392,7 +392,7 @@ pub fn write_content<'a>(\n                 }\n             }\n         }\n-        ast::ExprVec(ref elements, _) => {\n+        ast::ExprVec(ref elements) => {\n             match dest {\n                 Ignore => {\n                     for element in elements.iter() {\n@@ -418,7 +418,7 @@ pub fn write_content<'a>(\n             }\n             return bcx;\n         }\n-        ast::ExprRepeat(element, count_expr, _) => {\n+        ast::ExprRepeat(element, count_expr) => {\n             match dest {\n                 Ignore => {\n                     return expr::trans_into(bcx, element, Ignore);\n@@ -486,8 +486,8 @@ pub fn elements_required(bcx: &Block, content_expr: &ast::Expr) -> uint {\n                 }\n             }\n         },\n-        ast::ExprVec(ref es, _) => es.len(),\n-        ast::ExprRepeat(_, count_expr, _) => {\n+        ast::ExprVec(ref es) => es.len(),\n+        ast::ExprRepeat(_, count_expr) => {\n             ty::eval_repeat_count(bcx.tcx(), count_expr)\n         }\n         _ => bcx.tcx().sess.span_bug(content_expr.span,"}, {"sha": "a1e878b592ea6efdd41bbebbc2e16f204cfb5704", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -2482,13 +2482,13 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, vst);\n             ty::mk_str(tcx, tt)\n           }\n-          ast::ExprVec(ref args, mutbl) => {\n+          ast::ExprVec(ref args) => {\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, vst);\n             let mut any_error = false;\n             let mut any_bot = false;\n             let mutability = match vst {\n                 ast::ExprVstoreMutSlice => ast::MutMutable,\n-                _ => mutbl,\n+                _ => ast::MutImmutable,\n             };\n             let t: ty::t = fcx.infcx().next_ty_var();\n             for e in args.iter() {\n@@ -2509,13 +2509,13 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                 ty::mk_vec(tcx, ty::mt {ty: t, mutbl: mutability}, tt)\n             }\n           }\n-          ast::ExprRepeat(element, count_expr, mutbl) => {\n+          ast::ExprRepeat(element, count_expr) => {\n             check_expr_with_hint(fcx, count_expr, ty::mk_uint());\n             let _ = ty::eval_repeat_count(fcx, count_expr);\n             let tt = ast_expr_vstore_to_vstore(fcx, ev, vst);\n             let mutability = match vst {\n                 ast::ExprVstoreMutSlice => ast::MutMutable,\n-                _ => mutbl,\n+                _ => ast::MutImmutable,\n             };\n             let t: ty::t = fcx.infcx().next_ty_var();\n             check_expr_has_type(fcx, element, t);\n@@ -3017,16 +3017,16 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             fcx.write_ty(id, t_1);\n         }\n       }\n-      ast::ExprVec(ref args, mutbl) => {\n+      ast::ExprVec(ref args) => {\n         let t: ty::t = fcx.infcx().next_ty_var();\n         for e in args.iter() {\n             check_expr_has_type(fcx, *e, t);\n         }\n-        let typ = ty::mk_vec(tcx, ty::mt {ty: t, mutbl: mutbl},\n+        let typ = ty::mk_vec(tcx, ty::mt {ty: t, mutbl: ast::MutImmutable},\n                              ty::vstore_fixed(args.len()));\n         fcx.write_ty(id, typ);\n       }\n-      ast::ExprRepeat(element, count_expr, mutbl) => {\n+      ast::ExprRepeat(element, count_expr) => {\n         check_expr_with_hint(fcx, count_expr, ty::mk_uint());\n         let count = ty::eval_repeat_count(fcx, count_expr);\n         let t: ty::t = fcx.infcx().next_ty_var();\n@@ -3039,7 +3039,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             fcx.write_bot(id);\n         }\n         else {\n-            let t = ty::mk_vec(tcx, ty::mt {ty: t, mutbl: mutbl},\n+            let t = ty::mk_vec(tcx, ty::mt {ty: t, mutbl: ast::MutImmutable},\n                                ty::vstore_fixed(count));\n             fcx.write_ty(id, t);\n         }\n@@ -3864,7 +3864,7 @@ pub fn ast_expr_vstore_to_vstore(fcx: &FnCtxt,\n                     // string literals and *empty slices* live in static memory\n                     ty::vstore_slice(ty::ReStatic)\n                 }\n-                ast::ExprVec(ref elements, _) if elements.len() == 0 => {\n+                ast::ExprVec(ref elements) if elements.len() == 0 => {\n                     // string literals and *empty slices* live in static memory\n                     ty::vstore_slice(ty::ReStatic)\n                 }"}, {"sha": "6a5acff3fe04e42d293b2ca954d8fdc0708be276", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -493,7 +493,7 @@ pub enum Expr_ {\n     ExprVstore(@Expr, ExprVstore),\n     // First expr is the place; second expr is the value.\n     ExprBox(@Expr, @Expr),\n-    ExprVec(Vec<@Expr>, Mutability),\n+    ExprVec(Vec<@Expr>),\n     ExprCall(@Expr, Vec<@Expr>),\n     ExprMethodCall(Ident, Vec<P<Ty>>, Vec<@Expr>),\n     ExprTup(Vec<@Expr>),\n@@ -536,7 +536,7 @@ pub enum Expr_ {\n     ExprStruct(Path, Vec<Field> , Option<@Expr> /* base */),\n \n     // A vector literal constructed from one repeated element.\n-    ExprRepeat(@Expr /* element */, @Expr /* count */, Mutability),\n+    ExprRepeat(@Expr /* element */, @Expr /* count */),\n \n     // No-op: used solely so we can pretty-print faithfully\n     ExprParen(@Expr)"}, {"sha": "b7c12cd4fdcae29cfb31889b8df0edb5a5717c54", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -579,7 +579,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(sp, ast::ExprVstore(expr, vst))\n     }\n     fn expr_vec(&self, sp: Span, exprs: Vec<@ast::Expr> ) -> @ast::Expr {\n-        self.expr(sp, ast::ExprVec(exprs, ast::MutImmutable))\n+        self.expr(sp, ast::ExprVec(exprs))\n     }\n     fn expr_vec_ng(&self, sp: Span) -> @ast::Expr {\n         self.expr_call_global(sp,"}, {"sha": "e21f14e4a9622af3698e370281e2c08295be21ca", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -740,11 +740,11 @@ pub fn noop_fold_expr<T: Folder>(e: @Expr, folder: &mut T) -> @Expr {\n         ExprBox(p, e) => {\n             ExprBox(folder.fold_expr(p), folder.fold_expr(e))\n         }\n-        ExprVec(ref exprs, mutt) => {\n-            ExprVec(exprs.iter().map(|&x| folder.fold_expr(x)).collect(), mutt)\n+        ExprVec(ref exprs) => {\n+            ExprVec(exprs.iter().map(|&x| folder.fold_expr(x)).collect())\n         }\n-        ExprRepeat(expr, count, mutt) => {\n-            ExprRepeat(folder.fold_expr(expr), folder.fold_expr(count), mutt)\n+        ExprRepeat(expr, count) => {\n+            ExprRepeat(folder.fold_expr(expr), folder.fold_expr(count))\n         }\n         ExprTup(ref elts) => ExprTup(elts.iter().map(|x| folder.fold_expr(*x)).collect()),\n         ExprCall(f, ref args) => {"}, {"sha": "94f5458ba535e6fc63b7406ea1bfcf7cb46ed123", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -1819,12 +1819,11 @@ impl<'a> Parser<'a> {\n             return self.parse_block_expr(lo, UnsafeBlock(ast::UserProvided));\n         } else if self.token == token::LBRACKET {\n             self.bump();\n-            let mutbl = MutImmutable;\n \n             if self.token == token::RBRACKET {\n                 // Empty vector.\n                 self.bump();\n-                ex = ExprVec(Vec::new(), mutbl);\n+                ex = ExprVec(Vec::new());\n             } else {\n                 // Nonempty vector.\n                 let first_expr = self.parse_expr();\n@@ -1835,7 +1834,7 @@ impl<'a> Parser<'a> {\n                     self.bump();\n                     let count = self.parse_expr();\n                     self.expect(&token::RBRACKET);\n-                    ex = ExprRepeat(first_expr, count, mutbl);\n+                    ex = ExprRepeat(first_expr, count);\n                 } else if self.token == token::COMMA {\n                     // Vector with two or more elements.\n                     self.bump();\n@@ -1846,11 +1845,11 @@ impl<'a> Parser<'a> {\n                     );\n                     let mut exprs = vec!(first_expr);\n                     exprs.push_all_move(remaining_exprs);\n-                    ex = ExprVec(exprs, mutbl);\n+                    ex = ExprVec(exprs);\n                 } else {\n                     // Vector with one element.\n                     self.expect(&token::RBRACKET);\n-                    ex = ExprVec(vec!(first_expr), mutbl);\n+                    ex = ExprVec(vec!(first_expr));\n                 }\n             }\n             hi = self.last_span.hi;"}, {"sha": "7972852a3f458a63e72a166b6755c8401d3fc232", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -1110,25 +1110,17 @@ impl<'a> State<'a> {\n                 try!(self.word_space(\")\"));\n                 try!(self.print_expr(e));\n             }\n-            ast::ExprVec(ref exprs, mutbl) => {\n+            ast::ExprVec(ref exprs) => {\n                 try!(self.ibox(indent_unit));\n                 try!(word(&mut self.s, \"[\"));\n-                if mutbl == ast::MutMutable {\n-                    try!(word(&mut self.s, \"mut\"));\n-                    if exprs.len() > 0u { try!(self.nbsp()); }\n-                }\n                 try!(self.commasep_exprs(Inconsistent, exprs.as_slice()));\n                 try!(word(&mut self.s, \"]\"));\n                 try!(self.end());\n             }\n \n-            ast::ExprRepeat(element, count, mutbl) => {\n+            ast::ExprRepeat(element, count) => {\n                 try!(self.ibox(indent_unit));\n                 try!(word(&mut self.s, \"[\"));\n-                if mutbl == ast::MutMutable {\n-                    try!(word(&mut self.s, \"mut\"));\n-                    try!(self.nbsp());\n-                }\n                 try!(self.print_expr(element));\n                 try!(word(&mut self.s, \",\"));\n                 try!(word(&mut self.s, \"..\"));"}, {"sha": "81e5e2280275f0f946b9636b602bf2cde4c2ad0c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c48e53c1e8c1427cbb2e827a9d43bfa36847d65/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7c48e53c1e8c1427cbb2e827a9d43bfa36847d65", "patch": "@@ -635,10 +635,10 @@ pub fn walk_expr<E: Clone, V: Visitor<E>>(visitor: &mut V, expression: &Expr, en\n             visitor.visit_expr(place, env.clone());\n             visitor.visit_expr(subexpression, env.clone())\n         }\n-        ExprVec(ref subexpressions, _) => {\n+        ExprVec(ref subexpressions) => {\n             walk_exprs(visitor, subexpressions.as_slice(), env.clone())\n         }\n-        ExprRepeat(element, count, _) => {\n+        ExprRepeat(element, count) => {\n             visitor.visit_expr(element, env.clone());\n             visitor.visit_expr(count, env.clone())\n         }"}]}