{"sha": "2b7776094492bcdb9ecf62f5333b719f30ffce1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNzc3NjA5NDQ5MmJjZGI5ZWNmNjJmNTMzM2I3MTlmMzBmZmNlMWY=", "commit": {"author": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-17T00:16:08Z"}, "committer": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-17T00:20:08Z"}, "message": "Fill in suggestions Applicability according to @estebank\n\nAlso fix some formatting along the way.", "tree": {"sha": "6d1cae430c70c79ed8aa945f5faf6cf786506e3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d1cae430c70c79ed8aa945f5faf6cf786506e3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b7776094492bcdb9ecf62f5333b719f30ffce1f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABEIAB0WIQQzEHnM5f9ubG8rMBnAlyIdbgPfaAUCW57zOAAKCRDAlyIdbgPf\naBcYAP0XE8dlR7wHu0k1Qe4VdPr3TMywM7r9uGrRwD57AYyneAEAqS6mtWuTVzKt\nJWggMB1M/cD8tpZLrY2Uz6Da9hGagYM=\n=S3Ao\n-----END PGP SIGNATURE-----", "payload": "tree 6d1cae430c70c79ed8aa945f5faf6cf786506e3b\nparent c61f4a71448f817848059e5c0942d14d14c929b6\nauthor Vitaly _Vi Shukela <vi0oss@gmail.com> 1537143368 +0300\ncommitter Vitaly _Vi Shukela <vi0oss@gmail.com> 1537143608 +0300\n\nFill in suggestions Applicability according to @estebank\n\nAlso fix some formatting along the way.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b7776094492bcdb9ecf62f5333b719f30ffce1f", "html_url": "https://github.com/rust-lang/rust/commit/2b7776094492bcdb9ecf62f5333b719f30ffce1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b7776094492bcdb9ecf62f5333b719f30ffce1f/comments", "author": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c61f4a71448f817848059e5c0942d14d14c929b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c61f4a71448f817848059e5c0942d14d14c929b6", "html_url": "https://github.com/rust-lang/rust/commit/c61f4a71448f817848059e5c0942d14d14c929b6"}], "stats": {"total": 115, "additions": 69, "deletions": 46}, "files": [{"sha": "ed84e9a64f53ddfc2b5901a278381be5135160cf", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -1250,6 +1250,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                 let_span,\n                                 \"use a mutable reference instead\",\n                                 replace_str,\n+                                // I believe this can be machine applicable,\n+                                // but if there are multiple attempted uses of an immutable\n+                                // reference, I don't know how rustfix handles it, it might\n+                                // attempt fixing them multiple times.\n+                                //                              @estebank\n                                 Applicability::Unspecified,\n                             );\n                         }\n@@ -1308,7 +1313,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         \"consider removing the `&mut`, as it is an \\\n                         immutable binding to a mutable reference\",\n                         snippet,\n-                        Applicability::Unspecified,\n+                        Applicability::MachineApplicable,\n                     );\n                 } else {\n                     db.span_suggestion_with_applicability(\n@@ -1345,7 +1350,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                    use the `move` keyword\",\n                                                    cmt_path_or_string),\n                                          suggestion,\n-                                         Applicability::Unspecified,\n+                                         Applicability::MachineApplicable,\n             )\n             .emit();\n         self.signal_error();"}, {"sha": "52d051ebe7ba0cf13ce648519b26b13ef9c0e97c", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -426,7 +426,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 span,\n                 &format!(\"consider removing the `{}`\", to_remove),\n                 suggestion,\n-                Applicability::Unspecified,\n+                Applicability::MachineApplicable,\n             );\n         }\n     }"}, {"sha": "a078aa59a7d5b4bf37624ba5eaa2735d1c69b253", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -232,7 +232,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     local_decl.source_info.span,\n                     \"consider changing this to be mutable\",\n                     format!(\"mut {}\", local_decl.name.unwrap()),\n-                    Applicability::Unspecified,\n+                    Applicability::MachineApplicable,\n                 );\n             }\n \n@@ -263,7 +263,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                             upvar_ident.span,\n                             \"consider changing this to be mutable\",\n                             format!(\"mut {}\", upvar_ident.name),\n-                            Applicability::Unspecified,\n+                            Applicability::MachineApplicable,\n                         );\n                     }\n                 }\n@@ -358,7 +358,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         err_help_span,\n                         &format!(\"consider changing this to be a mutable {}\", pointer_desc),\n                         suggested_code,\n-                        Applicability::Unspecified,\n+                        Applicability::MachineApplicable,\n                     );\n                 }\n "}, {"sha": "f6ace57f5e0fb52b36a93ac795cdc23426f2a53a", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -184,7 +184,7 @@ impl<'a> AstValidator<'a> {\n             if let Ok(snippet) = self.session.source_map().span_to_snippet(span) {\n                 err.span_suggestion_with_applicability(\n                     span, \"consider adding parentheses\", format!(\"({})\", snippet),\n-                    Applicability::Unspecified,\n+                    Applicability::MachineApplicable,\n                 );\n             }\n "}, {"sha": "677345396c128cff0aa51b1ca96ba8fbb71d04d9", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                                                            without a value inside this `{}` loop\",\n                                                           kind.name()),\n                                                  \"break\".to_string(),\n-                                                 Applicability::Unspecified,\n+                                                 Applicability::MaybeIncorrect,\n                                 )\n                                 .emit();\n                         }"}, {"sha": "6820fd727dbed334b983f6e0ea2ed597de5ddd44", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -3303,7 +3303,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                                       sp,\n                                                       \"did you mean to use `;` here instead?\",\n                                                       \";\".to_string(),\n-                                                      Applicability::Unspecified,\n+                                                      Applicability::MaybeIncorrect,\n                                                       );\n                         }\n                         break;"}, {"sha": "7fa50fd4f487e8e571a4a154b19cda815f755036", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -332,7 +332,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                             err.span_suggestion_with_applicability(self.cast_span,\n                                                 \"try casting to a reference instead\",\n                                                 format!(\"&{}{}\", mtstr, s),\n-                                                Applicability::Unspecified,\n+                                                Applicability::MachineApplicable,\n                                                 );\n                         }\n                         Err(_) => {\n@@ -353,7 +353,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                         err.span_suggestion_with_applicability(self.cast_span,\n                                             \"try casting to a `Box` instead\",\n                                             format!(\"Box<{}>\", s),\n-                                            Applicability::Unspecified,\n+                                            Applicability::MachineApplicable,\n                                             );\n                     }\n                     Err(_) => span_help!(err, self.cast_span, \"did you mean `Box<{}>`?\", tstr),"}, {"sha": "a192068d28f202c5fa4f321d83f0e455cfdc9836", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -326,7 +326,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             impl_err_span,\n                             \"consider change the type to match the mutability in trait\",\n                             format!(\"{}\", trait_err_str),\n-                            Applicability::Unspecified,\n+                            Applicability::MachineApplicable,\n                         );\n                     }\n                 }\n@@ -811,7 +811,7 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 // of the generics, but it works for the common case\n                                 (generics_span, new_generics),\n                             ],\n-                            Applicability::Unspecified,\n+                            Applicability::MaybeIncorrect,\n                         );\n                         Some(())\n                     })();\n@@ -881,7 +881,7 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 // replace param usage with `impl Trait`\n                                 (span, format!(\"impl {}\", bounds)),\n                             ],\n-                            Applicability::Unspecified,\n+                            Applicability::MaybeIncorrect,\n                         );\n                         Some(())\n                     })();"}, {"sha": "5348312637cca5158c88e4880dba158248d6f0b7", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 err.span_suggestions_with_applicability(expr.span,\n                                      \"try using a variant of the expected type\",\n                                      suggestions,\n-                                     Applicability::Unspecified,\n+                                     Applicability::MaybeIncorrect,\n                                      );\n             }\n         }"}, {"sha": "2e878956edef6c4df23eb2c474484650b5b95e16", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -258,7 +258,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                     format!(\"{}_{}\",\n                                                             snippet,\n                                                             concrete_type),\n-                                                    Applicability::Unspecified,\n+                                                    Applicability::MaybeIncorrect,\n                                                     );\n                             }\n                             hir::ExprKind::Path(ref qpath) => {  // local binding\n@@ -290,7 +290,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                         .unwrap_or(span)),\n                                                     &msg,\n                                                     format!(\"{}: {}\", snippet, concrete_type),\n-                                                    Applicability::Unspecified,\n+                                                    Applicability::MaybeIncorrect,\n                                                 );\n                                             }\n                                             _ => {\n@@ -519,8 +519,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 format!(\"use {};\\n{}\", self.tcx.item_path_str(*did), additional_newline)\n             }).collect();\n \n-            err.span_suggestions_with_applicability(span, &msg, path_strings,\n-                                                    Applicability::Unspecified);\n+            err.span_suggestions_with_applicability(\n+                                                    span,\n+                                                    &msg,\n+                                                    path_strings,\n+                                                    Applicability::MaybeIncorrect,\n+                                                    );\n         } else {\n             let limit = if candidates.len() == 5 { 5 } else { 4 };\n             for (i, trait_did) in candidates.iter().take(limit).enumerate() {"}, {"sha": "dcec21c9eef3d1ed654fccd9f9d9c35fe3a92163", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -3348,8 +3348,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let base = self.tcx.hir.node_to_pretty_string(base.id);\n                         let msg = format!(\"`{}` is a native pointer; try dereferencing it\", base);\n                         let suggestion = format!(\"(*{}).{}\", base, field);\n-                        err.span_suggestion_with_applicability(field.span, &msg, suggestion,\n-                                                               Applicability::Unspecified);\n+                        err.span_suggestion_with_applicability(\n+                                                               field.span,\n+                                                               &msg,\n+                                                               suggestion,\n+                                                               Applicability::MaybeIncorrect,\n+                                                               );\n                     }\n                     _ => {}\n                 }\n@@ -4717,8 +4721,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         found: Ty<'tcx>,\n     ) {\n         if let Some((sp, msg, suggestion)) = self.check_ref(expr, found, expected) {\n-            err.span_suggestion_with_applicability(sp, msg, suggestion,\n-                                                   Applicability::Unspecified);\n+            err.span_suggestion_with_applicability(\n+                                                   sp,\n+                                                   msg,\n+                                                   suggestion,\n+                                                   Applicability::MachineApplicable,\n+                                                   );\n         } else if !self.check_for_cast(err, expr, found, expected) {\n             let methods = self.get_conversion_methods(expr.span, expected, found);\n             if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n@@ -4748,10 +4756,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }) .collect::<Vec<_>>();\n                 if !suggestions.is_empty() {\n-                    err.span_suggestions_with_applicability(expr.span,\n+                    err.span_suggestions_with_applicability(\n+                                                            expr.span,\n                                                             \"try using a conversion method\",\n                                                             suggestions,\n-                                                            Applicability::Unspecified,\n+                                                            Applicability::MaybeIncorrect,\n                                                             );\n                 }\n             }"}, {"sha": "6ebb1676bf61f1af6eb127155a558076aa240081", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -444,10 +444,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     err.span_label(expr.span,\n                                    \"`+` can't be used to concatenate two `&str` strings\");\n                     match source_map.span_to_snippet(lhs_expr.span) {\n-                        Ok(lstring) => err.span_suggestion_with_applicability(lhs_expr.span,\n+                        Ok(lstring) => err.span_suggestion_with_applicability(\n+                                                           lhs_expr.span,\n                                                            msg,\n                                                            format!(\"{}.to_owned()\", lstring),\n-                                                           Applicability::Unspecified,\n+                                                           Applicability::MachineApplicable,\n                                                            ),\n                         _ => err.help(msg),\n                     };\n@@ -464,11 +465,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     is_assign,\n                 ) {\n                     (Ok(l), Ok(r), false) => {\n-                        err.multipart_suggestion_with_applicability(msg, vec![\n-                            (lhs_expr.span, format!(\"{}.to_owned()\", l)),\n-                            (rhs_expr.span, format!(\"&{}\", r)),\n-                        ],\n-                        Applicability::Unspecified,\n+                        err.multipart_suggestion_with_applicability(\n+                                        msg,\n+                                        vec![\n+                                            (lhs_expr.span, format!(\"{}.to_owned()\", l)),\n+                                            (rhs_expr.span, format!(\"&{}\", r)),\n+                                        ],\n+                                        Applicability::MachineApplicable,\n                         );\n                     }\n                     _ => {"}, {"sha": "63e719a0d4ef4d43fff57e33812812e2d744ee78", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -124,10 +124,11 @@ impl<'a> StripUnconfigured<'a> {\n             let error = |span, msg, suggestion: &str| {\n                 let mut err = self.sess.span_diagnostic.struct_span_err(span, msg);\n                 if !suggestion.is_empty() {\n-                    err.span_suggestion_with_applicability(span,\n+                    err.span_suggestion_with_applicability(\n+                                                           span,\n                                                            \"expected syntax is\",\n                                                            suggestion.into(),\n-                                                           Applicability::Unspecified,\n+                                                           Applicability::MaybeIncorrect,\n                                                            );\n                 }\n                 err.emit();"}, {"sha": "bbe49d409ea288e79c8746a8ef6d7cd99f9cfc88", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -189,10 +189,10 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                         err.note(\"you might be missing a comma\");\n                     } else {\n                         err.span_suggestion_short_with_applicability(\n-                            comma_span,\n-                            \"missing comma here\",\n-                            \", \".to_string(),\n-                            Applicability::Unspecified,\n+                                                comma_span,\n+                                                \"missing comma here\",\n+                                                \", \".to_string(),\n+                                                Applicability::MachineApplicable,\n                         );\n                     }\n                 }"}, {"sha": "18287189539019e979b8e3c06066f795981ccae7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -3882,11 +3882,12 @@ impl<'a> Parser<'a> {\n                 if self.token == token::CloseDelim(token::Brace) {\n                     // If the struct looks otherwise well formed, recover and continue.\n                     if let Some(sp) = comma_sp {\n-                        err.span_suggestion_short_with_applicability(sp,\n-                                                                     \"remove this comma\",\n-                                                                     String::new(),\n-                                                                     Applicability::Unspecified,\n-                                                                     );\n+                        err.span_suggestion_short_with_applicability(\n+                                                                 sp,\n+                                                                 \"remove this comma\",\n+                                                                 String::new(),\n+                                                                 Applicability::MachineApplicable,\n+                                                                 );\n                     }\n                     err.emit();\n                     break;"}, {"sha": "1adbbbe2446d50ac3b586a5058b6ecdc02b089bc", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b7776094492bcdb9ecf62f5333b719f30ffce1f/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=2b7776094492bcdb9ecf62f5333b719f30ffce1f", "patch": "@@ -997,9 +997,9 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                     }\n                     if suggestions.len() > 0 {\n                         diag.multipart_suggestion_with_applicability(\n-                            \"format specifiers use curly braces\",\n-                            suggestions,\n-                            Applicability::Unspecified,\n+                                                    \"format specifiers use curly braces\",\n+                                                    suggestions,\n+                                                    Applicability::MachineApplicable,\n                         );\n                     }\n                 }};"}]}