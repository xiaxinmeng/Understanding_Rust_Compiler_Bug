{"sha": "93db1f9923d23c905c5cd8e7c50c5927c7c72a24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZGIxZjk5MjNkMjNjOTA1YzVjZDhlN2M1MGM1OTI3YzdjNzJhMjQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-07-31T14:42:42Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-07-31T15:09:02Z"}, "message": "trans::mir::constant - fix assignment error recovery\n\nWe used to not store anything when the RHS of an assignment returned an\nerror, which caused ICEs downstream.\n\nFixes #43197.", "tree": {"sha": "651e02dcc73387ded54fc1c44f23bcbbacd74eda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/651e02dcc73387ded54fc1c44f23bcbbacd74eda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93db1f9923d23c905c5cd8e7c50c5927c7c72a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93db1f9923d23c905c5cd8e7c50c5927c7c72a24", "html_url": "https://github.com/rust-lang/rust/commit/93db1f9923d23c905c5cd8e7c50c5927c7c72a24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93db1f9923d23c905c5cd8e7c50c5927c7c72a24/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1057a728f5a39458fae34295222197e68d4db8c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1057a728f5a39458fae34295222197e68d4db8c9", "html_url": "https://github.com/rust-lang/rust/commit/1057a728f5a39458fae34295222197e68d4db8c9"}], "stats": {"total": 111, "additions": 84, "deletions": 27}, "files": [{"sha": "393fa9c0c8e0e8291072d856ccf90f70cbe05e6d", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/93db1f9923d23c905c5cd8e7c50c5927c7c72a24/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93db1f9923d23c905c5cd8e7c50c5927c7c72a24/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=93db1f9923d23c905c5cd8e7c50c5927c7c72a24", "patch": "@@ -222,15 +222,24 @@ struct MirConstContext<'a, 'tcx: 'a> {\n     substs: &'tcx Substs<'tcx>,\n \n     /// Values of locals in a constant or const fn.\n-    locals: IndexVec<mir::Local, Option<Const<'tcx>>>\n+    locals: IndexVec<mir::Local, Option<Result<Const<'tcx>, ConstEvalErr<'tcx>>>>\n }\n \n+fn add_err<'tcx, U, V>(failure: &mut Result<U, ConstEvalErr<'tcx>>,\n+                       value: &Result<V, ConstEvalErr<'tcx>>)\n+{\n+    if let &Err(ref err) = value {\n+        if failure.is_ok() {\n+            *failure = Err(err.clone());\n+        }\n+    }\n+}\n \n impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n     fn new(ccx: &'a CrateContext<'a, 'tcx>,\n            mir: &'a mir::Mir<'tcx>,\n            substs: &'tcx Substs<'tcx>,\n-           args: IndexVec<mir::Local, Const<'tcx>>)\n+           args: IndexVec<mir::Local, Result<Const<'tcx>, ConstEvalErr<'tcx>>>)\n            -> MirConstContext<'a, 'tcx> {\n         let mut context = MirConstContext {\n             ccx: ccx,\n@@ -249,7 +258,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n     fn trans_def(ccx: &'a CrateContext<'a, 'tcx>,\n                  def_id: DefId,\n                  substs: &'tcx Substs<'tcx>,\n-                 args: IndexVec<mir::Local, Const<'tcx>>)\n+                 args: IndexVec<mir::Local, Result<Const<'tcx>, ConstEvalErr<'tcx>>>)\n                  -> Result<Const<'tcx>, ConstEvalErr<'tcx>> {\n         let instance = monomorphize::resolve(ccx.shared(), def_id, substs);\n         let mir = ccx.tcx().instance_mir(instance.def);\n@@ -278,10 +287,9 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                     mir::StatementKind::Assign(ref dest, ref rvalue) => {\n                         let ty = dest.ty(self.mir, tcx);\n                         let ty = self.monomorphize(&ty).to_ty(tcx);\n-                        match self.const_rvalue(rvalue, ty, span) {\n-                            Ok(value) => self.store(dest, value, span),\n-                            Err(err) => if failure.is_ok() { failure = Err(err); }\n-                        }\n+                        let value = self.const_rvalue(rvalue, ty, span);\n+                        add_err(&mut failure, &value);\n+                        self.store(dest, value, span);\n                     }\n                     mir::StatementKind::StorageLive(_) |\n                     mir::StatementKind::StorageDead(_) |\n@@ -301,9 +309,9 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 mir::TerminatorKind::Goto { target } => target,\n                 mir::TerminatorKind::Return => {\n                     failure?;\n-                    return Ok(self.locals[mir::RETURN_POINTER].unwrap_or_else(|| {\n+                    return self.locals[mir::RETURN_POINTER].clone().unwrap_or_else(|| {\n                         span_bug!(span, \"no returned value in constant\");\n-                    }));\n+                    });\n                 }\n \n                 mir::TerminatorKind::Assert { ref cond, expected, ref msg, target, .. } => {\n@@ -342,33 +350,30 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n \n                     let mut arg_vals = IndexVec::with_capacity(args.len());\n                     for arg in args {\n-                        match self.const_operand(arg, span) {\n-                            Ok(arg) => { arg_vals.push(arg); },\n-                            Err(err) => if failure.is_ok() { failure = Err(err); }\n-                        }\n+                        let arg_val = self.const_operand(arg, span);\n+                        add_err(&mut failure, &arg_val);\n+                        arg_vals.push(arg_val);\n                     }\n                     if let Some((ref dest, target)) = *destination {\n-                        if fn_ty.fn_sig(tcx).abi() == Abi::RustIntrinsic {\n-                            let value = match &tcx.item_name(def_id).as_str()[..] {\n+                        let result = if fn_ty.fn_sig(tcx).abi() == Abi::RustIntrinsic {\n+                            match &tcx.item_name(def_id).as_str()[..] {\n                                 \"size_of\" => {\n                                     let llval = C_uint(self.ccx,\n                                         self.ccx.size_of(substs.type_at(0)));\n-                                    Const::new(llval, tcx.types.usize)\n+                                    Ok(Const::new(llval, tcx.types.usize))\n                                 }\n                                 \"min_align_of\" => {\n                                     let llval = C_uint(self.ccx,\n                                         self.ccx.align_of(substs.type_at(0)));\n-                                    Const::new(llval, tcx.types.usize)\n+                                    Ok(Const::new(llval, tcx.types.usize))\n                                 }\n                                 _ => span_bug!(span, \"{:?} in constant\", terminator.kind)\n-                            };\n-                            self.store(dest, value, span);\n-                        } else {\n-                            match MirConstContext::trans_def(self.ccx, def_id, substs, arg_vals) {\n-                                Ok(value) => self.store(dest, value, span),\n-                                Err(err) => if failure.is_ok() { failure = Err(err); }\n                             }\n-                        }\n+                        } else {\n+                            MirConstContext::trans_def(self.ccx, def_id, substs, arg_vals)\n+                        };\n+                        add_err(&mut failure, &result);\n+                        self.store(dest, result, span);\n                         target\n                     } else {\n                         span_bug!(span, \"diverging {:?} in constant\", terminator.kind);\n@@ -379,7 +384,10 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n         }\n     }\n \n-    fn store(&mut self, dest: &mir::Lvalue<'tcx>, value: Const<'tcx>, span: Span) {\n+    fn store(&mut self,\n+             dest: &mir::Lvalue<'tcx>,\n+             value: Result<Const<'tcx>, ConstEvalErr<'tcx>>,\n+             span: Span) {\n         if let mir::Lvalue::Local(index) = *dest {\n             self.locals[index] = Some(value);\n         } else {\n@@ -392,9 +400,9 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n         let tcx = self.ccx.tcx();\n \n         if let mir::Lvalue::Local(index) = *lvalue {\n-            return Ok(self.locals[index].unwrap_or_else(|| {\n+            return self.locals[index].clone().unwrap_or_else(|| {\n                 span_bug!(span, \"{:?} not initialized\", lvalue)\n-            }).as_lvalue());\n+            }).map(|v| v.as_lvalue());\n         }\n \n         let lvalue = match *lvalue {"}, {"sha": "1d4ded6e7123a8dfb1e4465ee23d43518b0dcc8f", "filename": "src/test/ui/const-eval/issue-43197.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/93db1f9923d23c905c5cd8e7c50c5927c7c72a24/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93db1f9923d23c905c5cd8e7c50c5927c7c72a24/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.rs?ref=93db1f9923d23c905c5cd8e7c50c5927c7c72a24", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+\n+const fn foo(x: u32) -> u32 {\n+    x\n+}\n+\n+fn main() {\n+    const X: u32 = 0-1;\n+    const Y: u32 = foo(0-1);\n+    println!(\"{} {}\", X, Y);\n+}"}, {"sha": "5ff80060eac7af476547f5ad47a14d344042321e", "filename": "src/test/ui/const-eval/issue-43197.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/93db1f9923d23c905c5cd8e7c50c5927c7c72a24/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93db1f9923d23c905c5cd8e7c50c5927c7c72a24/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.stderr?ref=93db1f9923d23c905c5cd8e7c50c5927c7c72a24", "patch": "@@ -0,0 +1,28 @@\n+warning: constant evaluation error: attempt to subtract with overflow. This will become a HARD ERROR in the future\n+  --> $DIR/issue-43197.rs:18:20\n+   |\n+18 |     const X: u32 = 0-1;\n+   |                    ^^^\n+   |\n+   = note: #[warn(const_err)] on by default\n+\n+warning: constant evaluation error: attempt to subtract with overflow. This will become a HARD ERROR in the future\n+  --> $DIR/issue-43197.rs:19:20\n+   |\n+19 |     const Y: u32 = foo(0-1);\n+   |                    ^^^^^^^^\n+\n+error[E0080]: constant evaluation error\n+  --> $DIR/issue-43197.rs:18:20\n+   |\n+18 |     const X: u32 = 0-1;\n+   |                    ^^^ attempt to subtract with overflow\n+\n+error[E0080]: constant evaluation error\n+  --> $DIR/issue-43197.rs:19:24\n+   |\n+19 |     const Y: u32 = foo(0-1);\n+   |                        ^^^ attempt to subtract with overflow\n+\n+error: aborting due to 2 previous errors\n+"}]}