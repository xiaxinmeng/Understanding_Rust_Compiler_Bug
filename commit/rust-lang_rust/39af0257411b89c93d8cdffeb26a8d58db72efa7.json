{"sha": "39af0257411b89c93d8cdffeb26a8d58db72efa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YWYwMjU3NDExYjg5YzkzZDhjZGZmZWIyNmE4ZDU4ZGI3MmVmYTc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-20T19:36:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-20T19:36:57Z"}, "message": "Rollup merge of #81991 - osa1:issue81839, r=estebank\n\nFix panic in 'remove semicolon' when types are not local\n\nIt's not possible to check if removing a semicolon fixes the type error\nwhen checking match arms and one or both of the last arm's and the\ncurrent arm's return types are imported \"opaque\" types. In these cases\nwe don't generate a \"consider removing semicolon\" suggestions.\n\nFixes #81839\n\n---\n\nI'm not sure how to add a test for this. I think the test would need at least two crates. Do we have any existing tests that do this so that I can take a look?", "tree": {"sha": "3b324a493d0109463dee035c1e3ac65758d5720c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b324a493d0109463dee035c1e3ac65758d5720c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39af0257411b89c93d8cdffeb26a8d58db72efa7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgMWTaCRBK7hj4Ov3rIwAAdHIIAEC+ZXvlawwvXzFO6BOJLonv\n2tN+lci5CWkOJbaJoOyLryUpq/zLiLToEvLDyLu/jomDil5E8TJsxlHgQhCcQ1fx\n6gm/56SDROiI9FGvtsWZf2r1X840sI+ZDkYICgKXJYy+U2KayloQCeFFyL3yUdVj\npO4UCHARGgG2ZX79itiLRI9/fPJYAujUCMbzmu6oe79hu3NgAef5hKxIU7MHSd0X\nNZcLHmhjMq7fMCHsZ99eoT3bkZmpepRtZYMc2YeGiukxzO7Gjbmf4uF9BDzRv5Bz\n6cNp2jr8xlpLCC+nnRFfnYQaU+rwnZ7T1DQ28ltvAceBYdOHQ/gJd4yGP3jMylQ=\n=ldqY\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b324a493d0109463dee035c1e3ac65758d5720c\nparent d38f6e82a4c1aac312b30b2566827bd19a0fb412\nparent 9ef67e09a4c2fdfd528ac174e3aec2fe0e97f347\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1613849817 +0100\ncommitter GitHub <noreply@github.com> 1613849817 +0100\n\nRollup merge of #81991 - osa1:issue81839, r=estebank\n\nFix panic in 'remove semicolon' when types are not local\n\nIt's not possible to check if removing a semicolon fixes the type error\nwhen checking match arms and one or both of the last arm's and the\ncurrent arm's return types are imported \"opaque\" types. In these cases\nwe don't generate a \"consider removing semicolon\" suggestions.\n\nFixes #81839\n\n---\n\nI'm not sure how to add a test for this. I think the test would need at least two crates. Do we have any existing tests that do this so that I can take a look?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39af0257411b89c93d8cdffeb26a8d58db72efa7", "html_url": "https://github.com/rust-lang/rust/commit/39af0257411b89c93d8cdffeb26a8d58db72efa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39af0257411b89c93d8cdffeb26a8d58db72efa7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d38f6e82a4c1aac312b30b2566827bd19a0fb412", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38f6e82a4c1aac312b30b2566827bd19a0fb412", "html_url": "https://github.com/rust-lang/rust/commit/d38f6e82a4c1aac312b30b2566827bd19a0fb412"}, {"sha": "9ef67e09a4c2fdfd528ac174e3aec2fe0e97f347", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef67e09a4c2fdfd528ac174e3aec2fe0e97f347", "html_url": "https://github.com/rust-lang/rust/commit/9ef67e09a4c2fdfd528ac174e3aec2fe0e97f347"}], "stats": {"total": 79, "additions": 71, "deletions": 8}, "files": [{"sha": "f5e9cc1efcc45d9dbc544f0dd1a9e41a41293261", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39af0257411b89c93d8cdffeb26a8d58db72efa7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39af0257411b89c93d8cdffeb26a8d58db72efa7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=39af0257411b89c93d8cdffeb26a8d58db72efa7", "patch": "@@ -1074,13 +1074,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n         let last_expr_ty = self.node_ty(last_expr.hir_id);\n         let needs_box = match (last_expr_ty.kind(), expected_ty.kind()) {\n+            (ty::Opaque(last_def_id, _), ty::Opaque(exp_def_id, _))\n+                if last_def_id == exp_def_id =>\n+            {\n+                StatementAsExpression::CorrectType\n+            }\n             (ty::Opaque(last_def_id, last_bounds), ty::Opaque(exp_def_id, exp_bounds)) => {\n                 debug!(\n                     \"both opaque, likely future {:?} {:?} {:?} {:?}\",\n                     last_def_id, last_bounds, exp_def_id, exp_bounds\n                 );\n-                let last_hir_id = self.tcx.hir().local_def_id_to_hir_id(last_def_id.expect_local());\n-                let exp_hir_id = self.tcx.hir().local_def_id_to_hir_id(exp_def_id.expect_local());\n+\n+                let (last_local_id, exp_local_id) =\n+                    match (last_def_id.as_local(), exp_def_id.as_local()) {\n+                        (Some(last_hir_id), Some(exp_hir_id)) => (last_hir_id, exp_hir_id),\n+                        (_, _) => return None,\n+                    };\n+\n+                let last_hir_id = self.tcx.hir().local_def_id_to_hir_id(last_local_id);\n+                let exp_hir_id = self.tcx.hir().local_def_id_to_hir_id(exp_local_id);\n+\n                 match (\n                     &self.tcx.hir().expect_item(last_hir_id).kind,\n                     &self.tcx.hir().expect_item(exp_hir_id).kind,"}, {"sha": "5683c45adf26d0c07c1b54e042e6cf228bd4ea6a", "filename": "src/test/ui/suggestions/auxiliary/issue-81839.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39af0257411b89c93d8cdffeb26a8d58db72efa7/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-81839.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39af0257411b89c93d8cdffeb26a8d58db72efa7/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-81839.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fissue-81839.rs?ref=39af0257411b89c93d8cdffeb26a8d58db72efa7", "patch": "@@ -0,0 +1,9 @@\n+// edition:2018\n+\n+pub struct Test {}\n+\n+impl Test {\n+    pub async fn answer_str(&self, _s: &str) -> Test {\n+        Test {}\n+    }\n+}"}, {"sha": "0b9b7aefe735dd123727de92e2503756812ca259", "filename": "src/test/ui/suggestions/issue-81839.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39af0257411b89c93d8cdffeb26a8d58db72efa7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39af0257411b89c93d8cdffeb26a8d58db72efa7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.rs?ref=39af0257411b89c93d8cdffeb26a8d58db72efa7", "patch": "@@ -0,0 +1,17 @@\n+// aux-build:issue-81839.rs\n+// edition:2018\n+\n+extern crate issue_81839;\n+\n+async fn test(ans: &str, num: i32, cx: &issue_81839::Test) -> u32 {\n+    match num {\n+        1 => {\n+            cx.answer_str(\"hi\");\n+        }\n+        _ => cx.answer_str(\"hi\"), //~ `match` arms have incompatible types\n+    }\n+\n+    1\n+}\n+\n+fn main() {}"}, {"sha": "1a289d39e446786d16a0f254c4ca7754d3d91fee", "filename": "src/test/ui/suggestions/issue-81839.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39af0257411b89c93d8cdffeb26a8d58db72efa7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39af0257411b89c93d8cdffeb26a8d58db72efa7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr?ref=39af0257411b89c93d8cdffeb26a8d58db72efa7", "patch": "@@ -0,0 +1,27 @@\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/issue-81839.rs:11:14\n+   |\n+LL | /     match num {\n+LL | |         1 => {\n+LL | |             cx.answer_str(\"hi\");\n+   | |             --------------------\n+   | |             |                  |\n+   | |             |                  help: consider removing this semicolon\n+   | |             this is found to be of type `()`\n+LL | |         }\n+LL | |         _ => cx.answer_str(\"hi\"),\n+   | |              ^^^^^^^^^^^^^^^^^^^ expected `()`, found opaque type\n+LL | |     }\n+   | |_____- `match` arms have incompatible types\n+   | \n+  ::: $DIR/auxiliary/issue-81839.rs:6:49\n+   |\n+LL |       pub async fn answer_str(&self, _s: &str) -> Test {\n+   |                                                   ---- the `Output` of this `async fn`'s found opaque type\n+   |\n+   = note:     expected type `()`\n+           found opaque type `impl Future`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "fae0c498b440a0e57d3a7621dac8f7d5194447b5", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39af0257411b89c93d8cdffeb26a8d58db72efa7/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39af0257411b89c93d8cdffeb26a8d58db72efa7/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=39af0257411b89c93d8cdffeb26a8d58db72efa7", "patch": "@@ -24,13 +24,10 @@ help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy().await,\n    |                               ^^^^^^\n-help: consider removing this semicolon and boxing the expressions\n-   |\n-LL |             Box::new(async_dummy())\n-LL |\n-LL |         }\n-LL |         false => Box::new(async_dummy()),\n+help: consider removing this semicolon\n    |\n+LL |             async_dummy()\n+   |                         --\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-prev-arm-needing-semi.rs:39:18"}]}