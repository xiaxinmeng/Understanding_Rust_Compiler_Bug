{"sha": "284483b347d15bee3a7bf293d33e5f19a9740102", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NDQ4M2IzNDdkMTViZWUzYTdiZjI5M2QzM2U1ZjE5YTk3NDAxMDI=", "commit": {"author": {"name": "Jamie Cunliffe", "email": "Jamie.Cunliffe@outlook.com", "date": "2021-05-30T13:52:19Z"}, "committer": {"name": "Jamie Cunliffe", "email": "Jamie.Cunliffe@outlook.com", "date": "2021-06-21T16:47:00Z"}, "message": "Improve completion of cfg attributes\n\nThe completion of cfg will look at the enabled cfg keys when\nperforming completion.\n\nIt will also look crate features when completing a feature cfg\noption. A fixed list of known values for some cfg options are\nprovided.\n\nFor unknown keys it will look at the enabled values for that cfg key,\nwhich means that completion will only show enabled options for those.", "tree": {"sha": "e582a7ecdef30511b8982529f11889f1aab3ca5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e582a7ecdef30511b8982529f11889f1aab3ca5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/284483b347d15bee3a7bf293d33e5f19a9740102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/284483b347d15bee3a7bf293d33e5f19a9740102", "html_url": "https://github.com/rust-lang/rust/commit/284483b347d15bee3a7bf293d33e5f19a9740102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/284483b347d15bee3a7bf293d33e5f19a9740102/comments", "author": {"login": "JamieCunliffe", "id": 29557119, "node_id": "MDQ6VXNlcjI5NTU3MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/29557119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JamieCunliffe", "html_url": "https://github.com/JamieCunliffe", "followers_url": "https://api.github.com/users/JamieCunliffe/followers", "following_url": "https://api.github.com/users/JamieCunliffe/following{/other_user}", "gists_url": "https://api.github.com/users/JamieCunliffe/gists{/gist_id}", "starred_url": "https://api.github.com/users/JamieCunliffe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JamieCunliffe/subscriptions", "organizations_url": "https://api.github.com/users/JamieCunliffe/orgs", "repos_url": "https://api.github.com/users/JamieCunliffe/repos", "events_url": "https://api.github.com/users/JamieCunliffe/events{/privacy}", "received_events_url": "https://api.github.com/users/JamieCunliffe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JamieCunliffe", "id": 29557119, "node_id": "MDQ6VXNlcjI5NTU3MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/29557119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JamieCunliffe", "html_url": "https://github.com/JamieCunliffe", "followers_url": "https://api.github.com/users/JamieCunliffe/followers", "following_url": "https://api.github.com/users/JamieCunliffe/following{/other_user}", "gists_url": "https://api.github.com/users/JamieCunliffe/gists{/gist_id}", "starred_url": "https://api.github.com/users/JamieCunliffe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JamieCunliffe/subscriptions", "organizations_url": "https://api.github.com/users/JamieCunliffe/orgs", "repos_url": "https://api.github.com/users/JamieCunliffe/repos", "events_url": "https://api.github.com/users/JamieCunliffe/events{/privacy}", "received_events_url": "https://api.github.com/users/JamieCunliffe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b05dbba39d5a4d46f321dc962df99038cddbf21", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b05dbba39d5a4d46f321dc962df99038cddbf21", "html_url": "https://github.com/rust-lang/rust/commit/1b05dbba39d5a4d46f321dc962df99038cddbf21"}], "stats": {"total": 185, "additions": 185, "deletions": 0}, "files": [{"sha": "6d3b1266e6fd99b2b97d301d77947fb80d52a9fd", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=284483b347d15bee3a7bf293d33e5f19a9740102", "patch": "@@ -131,6 +131,7 @@ impl ChangeFixture {\n                     meta.cfg,\n                     meta.env,\n                     Default::default(),\n+                    Default::default(),\n                 );\n                 let prev = crates.insert(crate_name.clone(), crate_id);\n                 assert!(prev.is_none());\n@@ -160,6 +161,7 @@ impl ChangeFixture {\n                 default_cfg,\n                 Env::default(),\n                 Default::default(),\n+                Default::default(),\n             );\n         } else {\n             for (from, to) in crate_deps {"}, {"sha": "d99388f71632ca473e88c5c1b6000264bd235a1d", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=284483b347d15bee3a7bf293d33e5f19a9740102", "patch": "@@ -192,6 +192,7 @@ pub struct CrateData {\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n     pub proc_macro: Vec<ProcMacro>,\n+    pub features: FxHashMap<String, Vec<String>>,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -221,6 +222,7 @@ impl CrateGraph {\n         cfg_options: CfgOptions,\n         env: Env,\n         proc_macro: Vec<ProcMacro>,\n+        features: FxHashMap<String, Vec<String>>,\n     ) -> CrateId {\n         let data = CrateData {\n             root_file_id: file_id,\n@@ -230,6 +232,7 @@ impl CrateGraph {\n             env,\n             proc_macro,\n             dependencies: Vec::new(),\n+            features,\n         };\n         let crate_id = CrateId(self.arena.len() as u32);\n         let prev = self.arena.insert(crate_id, data);\n@@ -506,6 +509,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -514,6 +518,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n@@ -522,6 +527,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n@@ -538,6 +544,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -546,6 +553,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate2\").unwrap(), crate2).is_err());\n@@ -561,6 +569,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -569,6 +578,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n@@ -577,6 +587,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n@@ -592,6 +603,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -600,6 +612,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         assert!(graph\n             .add_dep(crate1, CrateName::normalize_dashes(\"crate-name-with-dashes\"), crate2)"}, {"sha": "9a4baa636949009beaa02bc41cf7ee3302d534fa", "filename": "crates/cfg/src/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fcfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fcfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Flib.rs?ref=284483b347d15bee3a7bf293d33e5f19a9740102", "patch": "@@ -50,6 +50,26 @@ impl CfgOptions {\n             self.enabled.remove(&atom);\n         }\n     }\n+\n+    pub fn get_cfg_keys(&self) -> Vec<&SmolStr> {\n+        self.enabled\n+            .iter()\n+            .map(|x| match x {\n+                CfgAtom::Flag(key) => key,\n+                CfgAtom::KeyValue { key, .. } => key,\n+            })\n+            .collect()\n+    }\n+\n+    pub fn get_cfg_values(&self, cfg_key: &str) -> Vec<&SmolStr> {\n+        self.enabled\n+            .iter()\n+            .filter_map(|x| match x {\n+                CfgAtom::KeyValue { key, value } if cfg_key == key => Some(value),\n+                _ => None,\n+            })\n+            .collect()\n+    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]"}, {"sha": "2b2aaec940b5b913a86d9114e7662864b6474f37", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=284483b347d15bee3a7bf293d33e5f19a9740102", "patch": "@@ -233,6 +233,10 @@ impl Crate {\n     pub fn cfg(&self, db: &dyn HirDatabase) -> CfgOptions {\n         db.crate_graph()[self.id].cfg_options.clone()\n     }\n+\n+    pub fn features(&self, db: &dyn HirDatabase) -> Vec<String> {\n+        db.crate_graph()[self.id].features.iter().map(|(feat, _)| feat.clone()).collect()\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "0693869a208a670e1ff8462b435867e9c0b80f1c", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=284483b347d15bee3a7bf293d33e5f19a9740102", "patch": "@@ -220,6 +220,7 @@ impl Analysis {\n             cfg_options,\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         change.change_file(file_id, Some(Arc::new(text)));\n         change.set_crate_graph(crate_graph);"}, {"sha": "cc4f4b2af728e973af0fcae689eddde843574fbb", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=284483b347d15bee3a7bf293d33e5f19a9740102", "patch": "@@ -15,6 +15,7 @@ use crate::{\n     Completions,\n };\n \n+mod cfg;\n mod derive;\n mod lint;\n mod repr;\n@@ -30,6 +31,9 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n                 lint::complete_lint(acc, ctx, token_tree.clone(), DEFAULT_LINTS);\n                 lint::complete_lint(acc, ctx, token_tree, CLIPPY_LINTS);\n             }\n+            \"cfg\" => {\n+                cfg::complete_cfg(acc, ctx);\n+            }\n             _ => (),\n         },\n         (None, Some(_)) => (),\n@@ -852,4 +856,15 @@ mod tests {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_cfg() {\n+        check(\n+            r#\"#[cfg(target_endian = $0\"#,\n+            expect![[r#\"\n+                at little\n+                at big\n+\"#]],\n+        );\n+    }\n }"}, {"sha": "71e659563cbf35afcfe751f4495850a8dfadcdd8", "filename": "crates/ide_completion/src/completions/attribute/cfg.rs", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs?ref=284483b347d15bee3a7bf293d33e5f19a9740102", "patch": "@@ -0,0 +1,126 @@\n+//! Completion for cfg\n+\n+use std::iter;\n+\n+use syntax::SyntaxKind;\n+\n+use crate::{\n+    completions::Completions, context::CompletionContext, item::CompletionKind, CompletionItem,\n+    CompletionItemKind,\n+};\n+\n+pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n+    let add_completion = |item: &&str| {\n+        let mut completion =\n+            CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), *item);\n+        completion.insert_text(format!(r#\"\"{}\"\"#, item));\n+        completion.kind(CompletionItemKind::Attribute);\n+        acc.add(completion.build());\n+    };\n+\n+    let previous = iter::successors(ctx.original_token.prev_token(), |t| {\n+        (matches!(t.kind(), SyntaxKind::EQ) || t.kind().is_trivia())\n+            .then(|| t.prev_token())\n+            .flatten()\n+    })\n+    .find(|t| matches!(t.kind(), SyntaxKind::IDENT));\n+\n+    match previous.as_ref().map(|p| p.text()) {\n+        Some(\"feature\") => {\n+            ctx.krate.map(|krate| {\n+                krate.features(ctx.db).iter().for_each(|f| {\n+                    let mut item = CompletionItem::new(\n+                        CompletionKind::Attribute,\n+                        ctx.source_range(),\n+                        f.clone(),\n+                    );\n+                    item.insert_text(format!(r#\"\"{}\"\"#, f));\n+\n+                    acc.add(item.build())\n+                })\n+            });\n+        }\n+        Some(\"target_arch\") => KNOWN_ARCH.iter().for_each(add_completion),\n+        Some(\"target_env\") => KNOWN_ENV.iter().for_each(add_completion),\n+        Some(\"target_os\") => KNOWN_OS.iter().for_each(add_completion),\n+        Some(\"target_vendor\") => KNOWN_VENDOR.iter().for_each(add_completion),\n+        Some(\"target_endian\") => [\"little\", \"big\"].iter().for_each(add_completion),\n+        Some(name) => {\n+            ctx.krate.map(|krate| {\n+                krate.cfg(ctx.db).get_cfg_values(&name).iter().for_each(|s| {\n+                    let mut item = CompletionItem::new(\n+                        CompletionKind::Attribute,\n+                        ctx.source_range(),\n+                        s.as_str(),\n+                    );\n+                    item.insert_text(format!(r#\"\"{}\"\"#, s));\n+\n+                    acc.add(item.build());\n+                })\n+            });\n+        }\n+        None => {\n+            ctx.krate.map(|krate| {\n+                krate.cfg(ctx.db).get_cfg_keys().iter().for_each(|s| {\n+                    let item = CompletionItem::new(\n+                        CompletionKind::Attribute,\n+                        ctx.source_range(),\n+                        s.as_str(),\n+                    );\n+                    acc.add(item.build());\n+                })\n+            });\n+        }\n+    };\n+}\n+\n+const KNOWN_ARCH: [&'static str; 19] = [\n+    \"aarch64\",\n+    \"arm\",\n+    \"avr\",\n+    \"hexagon\",\n+    \"mips\",\n+    \"mips64\",\n+    \"msp430\",\n+    \"nvptx64\",\n+    \"powerpc\",\n+    \"powerpc64\",\n+    \"riscv32\",\n+    \"riscv64\",\n+    \"s390x\",\n+    \"sparc\",\n+    \"sparc64\",\n+    \"wasm32\",\n+    \"wasm64\",\n+    \"x86\",\n+    \"x86_64\",\n+];\n+\n+const KNOWN_ENV: [&'static str; 7] =\n+    [\"eabihf\", \"gnu\", \"gnueabihf\", \"msvc\", \"relibc\", \"sgx\", \"uclibc\"];\n+\n+const KNOWN_OS: [&'static str; 20] = [\n+    \"cuda\",\n+    \"dragonfly\",\n+    \"emscripten\",\n+    \"freebsd\",\n+    \"fuchsia\",\n+    \"haiku\",\n+    \"hermit\",\n+    \"illumos\",\n+    \"l4re\",\n+    \"linux\",\n+    \"netbsd\",\n+    \"none\",\n+    \"openbsd\",\n+    \"psp\",\n+    \"redox\",\n+    \"solaris\",\n+    \"uefi\",\n+    \"unknown\",\n+    \"vxworks\",\n+    \"windows\",\n+];\n+\n+const KNOWN_VENDOR: [&'static str; 8] =\n+    [\"apple\", \"fortanix\", \"nvidia\", \"pc\", \"sony\", \"unknown\", \"wrs\", \"uwp\"];"}, {"sha": "9ee3fc1a3287e2ede940edda31883622903b5b0c", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/284483b347d15bee3a7bf293d33e5f19a9740102/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=284483b347d15bee3a7bf293d33e5f19a9740102", "patch": "@@ -387,6 +387,7 @@ fn project_json_to_crate_graph(\n                     cfg_options,\n                     env,\n                     proc_macro.unwrap_or_default(),\n+                    Default::default(),\n                 ),\n             )\n         })\n@@ -582,6 +583,7 @@ fn detached_files_to_crate_graph(\n             cfg_options.clone(),\n             Env::default(),\n             Vec::new(),\n+            Default::default(),\n         );\n \n         for (name, krate) in public_deps.iter() {\n@@ -726,6 +728,7 @@ fn add_target_crate_root(\n         cfg_options,\n         env,\n         proc_macro,\n+        pkg.features.clone(),\n     );\n \n     crate_id\n@@ -755,6 +758,7 @@ fn sysroot_to_crate_graph(\n                 cfg_options.clone(),\n                 env,\n                 proc_macro,\n+                Default::default(),\n             );\n             Some((krate, crate_id))\n         })"}]}