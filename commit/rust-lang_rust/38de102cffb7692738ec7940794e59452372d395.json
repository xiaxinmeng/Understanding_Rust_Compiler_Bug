{"sha": "38de102cffb7692738ec7940794e59452372d395", "node_id": "C_kwDOAAsO6NoAKDM4ZGUxMDJjZmZiNzY5MjczOGVjNzk0MDc5NGU1OTQ1MjM3MmQzOTU", "commit": {"author": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2022-07-21T01:43:37Z"}, "committer": {"name": "Jake Goulding", "email": "jake.goulding@gmail.com", "date": "2022-08-23T13:58:50Z"}, "message": "Support eager and lazy methods for providing references and values\n\nThere are times where computing a value may be cheap, or where\ncomputing a reference may be expensive, so this fills out the\npossibilities.", "tree": {"sha": "f297c2ad8f0eb2fdd6653f3cc61fe6a16aa91a7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f297c2ad8f0eb2fdd6653f3cc61fe6a16aa91a7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38de102cffb7692738ec7940794e59452372d395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38de102cffb7692738ec7940794e59452372d395", "html_url": "https://github.com/rust-lang/rust/commit/38de102cffb7692738ec7940794e59452372d395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38de102cffb7692738ec7940794e59452372d395/comments", "author": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shepmaster", "id": 174509, "node_id": "MDQ6VXNlcjE3NDUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/174509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shepmaster", "html_url": "https://github.com/shepmaster", "followers_url": "https://api.github.com/users/shepmaster/followers", "following_url": "https://api.github.com/users/shepmaster/following{/other_user}", "gists_url": "https://api.github.com/users/shepmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/shepmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shepmaster/subscriptions", "organizations_url": "https://api.github.com/users/shepmaster/orgs", "repos_url": "https://api.github.com/users/shepmaster/repos", "events_url": "https://api.github.com/users/shepmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/shepmaster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cff5642037b83ce1239a624bbe617a9aa0d59b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cff5642037b83ce1239a624bbe617a9aa0d59b1", "html_url": "https://github.com/rust-lang/rust/commit/1cff5642037b83ce1239a624bbe617a9aa0d59b1"}], "stats": {"total": 76, "additions": 69, "deletions": 7}, "files": [{"sha": "3bfb675531e6463028126e87cff8349277cf8b86", "filename": "library/core/src/any.rs", "status": "modified", "additions": 68, "deletions": 6, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/38de102cffb7692738ec7940794e59452372d395/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38de102cffb7692738ec7940794e59452372d395/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=38de102cffb7692738ec7940794e59452372d395", "patch": "@@ -796,7 +796,7 @@ pub trait Provider {\n     /// impl Provider for SomeConcreteType {\n     ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n     ///         demand.provide_ref::<str>(&self.field)\n-    ///             .provide_value::<i32>(|| self.num_field);\n+    ///             .provide_value::<i32>(self.num_field);\n     ///     }\n     /// }\n     /// ```\n@@ -881,36 +881,64 @@ impl<'a> Demand<'a> {\n     ///\n     /// # Examples\n     ///\n+    /// Provides an `u8`.\n+    ///\n+    /// ```rust\n+    /// #![feature(provide_any)]\n+    ///\n+    /// use std::any::{Provider, Demand};\n+    /// # struct SomeConcreteType { field: u8 }\n+    ///\n+    /// impl Provider for SomeConcreteType {\n+    ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n+    ///         demand.provide_value::<u8>(self.field);\n+    ///     }\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"provide_any\", issue = \"96024\")]\n+    pub fn provide_value<T>(&mut self, value: T) -> &mut Self\n+    where\n+        T: 'static,\n+    {\n+        self.provide::<tags::Value<T>>(value)\n+    }\n+\n+    /// Provide a value or other type with only static lifetimes computed using a closure.\n+    ///\n+    /// # Examples\n+    ///\n     /// Provides a `String` by cloning.\n     ///\n     /// ```rust\n-    /// # #![feature(provide_any)]\n+    /// #![feature(provide_any)]\n+    ///\n     /// use std::any::{Provider, Demand};\n     /// # struct SomeConcreteType { field: String }\n     ///\n     /// impl Provider for SomeConcreteType {\n     ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n-    ///         demand.provide_value::<String>(|| self.field.clone());\n+    ///         demand.provide_value_with::<String>(|| self.field.clone());\n     ///     }\n     /// }\n     /// ```\n     #[unstable(feature = \"provide_any\", issue = \"96024\")]\n-    pub fn provide_value<T>(&mut self, fulfil: impl FnOnce() -> T) -> &mut Self\n+    pub fn provide_value_with<T>(&mut self, fulfil: impl FnOnce() -> T) -> &mut Self\n     where\n         T: 'static,\n     {\n         self.provide_with::<tags::Value<T>>(fulfil)\n     }\n \n-    /// Provide a reference, note that the referee type must be bounded by `'static`,\n+    /// Provide a reference. The referee type must be bounded by `'static`,\n     /// but may be unsized.\n     ///\n     /// # Examples\n     ///\n     /// Provides a reference to a field as a `&str`.\n     ///\n     /// ```rust\n-    /// # #![feature(provide_any)]\n+    /// #![feature(provide_any)]\n+    ///\n     /// use std::any::{Provider, Demand};\n     /// # struct SomeConcreteType { field: String }\n     ///\n@@ -925,6 +953,40 @@ impl<'a> Demand<'a> {\n         self.provide::<tags::Ref<tags::MaybeSizedValue<T>>>(value)\n     }\n \n+    /// Provide a reference computed using a closure. The referee type\n+    /// must be bounded by `'static`, but may be unsized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Provides a reference to a field as a `&str`.\n+    ///\n+    /// ```rust\n+    /// #![feature(provide_any)]\n+    ///\n+    /// use std::any::{Provider, Demand};\n+    /// # struct SomeConcreteType { business: String, party: String }\n+    /// # fn today_is_a_weekday() -> bool { true }\n+    ///\n+    /// impl Provider for SomeConcreteType {\n+    ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n+    ///         demand.provide_ref_with::<str>(|| {\n+    ///             if today_is_a_weekday() {\n+    ///                 &self.business\n+    ///             } else {\n+    ///                 &self.party\n+    ///             }\n+    ///         });\n+    ///     }\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"provide_any\", issue = \"96024\")]\n+    pub fn provide_ref_with<T: ?Sized + 'static>(\n+        &mut self,\n+        fulfil: impl FnOnce() -> &'a T,\n+    ) -> &mut Self {\n+        self.provide_with::<tags::Ref<tags::MaybeSizedValue<T>>>(fulfil)\n+    }\n+\n     /// Provide a value with the given `Type` tag.\n     fn provide<I>(&mut self, value: I::Reified) -> &mut Self\n     where"}, {"sha": "9538b81394957be74e188531cb1d9e9b9f4fa9ad", "filename": "library/core/tests/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38de102cffb7692738ec7940794e59452372d395/library%2Fcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38de102cffb7692738ec7940794e59452372d395/library%2Fcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fany.rs?ref=38de102cffb7692738ec7940794e59452372d395", "patch": "@@ -142,7 +142,7 @@ impl Provider for SomeConcreteType {\n         demand\n             .provide_ref::<String>(&self.some_string)\n             .provide_ref::<str>(&self.some_string)\n-            .provide_value::<String>(|| \"bye\".to_owned());\n+            .provide_value_with::<String>(|| \"bye\".to_owned());\n     }\n }\n "}]}