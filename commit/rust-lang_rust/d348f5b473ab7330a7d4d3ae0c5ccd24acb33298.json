{"sha": "d348f5b473ab7330a7d4d3ae0c5ccd24acb33298", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNDhmNWI0NzNhYjczMzBhN2Q0ZDNhZTBjNWNjZDI0YWNiMzMyOTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-22T16:53:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-22T16:53:57Z"}, "message": "Codegen all instance types", "tree": {"sha": "1e93bb420a8b575ac62f5857441589556d7d4b43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e93bb420a8b575ac62f5857441589556d7d4b43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d348f5b473ab7330a7d4d3ae0c5ccd24acb33298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d348f5b473ab7330a7d4d3ae0c5ccd24acb33298", "html_url": "https://github.com/rust-lang/rust/commit/d348f5b473ab7330a7d4d3ae0c5ccd24acb33298", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d348f5b473ab7330a7d4d3ae0c5ccd24acb33298/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d87edae73ba93a3171903fd6889c554d34d5a3ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/d87edae73ba93a3171903fd6889c554d34d5a3ee", "html_url": "https://github.com/rust-lang/rust/commit/d87edae73ba93a3171903fd6889c554d34d5a3ee"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "37145b5d847c92782a5295b20dd6bbd75f25f373", "filename": "src/base.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d348f5b473ab7330a7d4d3ae0c5ccd24acb33298/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d348f5b473ab7330a7d4d3ae0c5ccd24acb33298/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=d348f5b473ab7330a7d4d3ae0c5ccd24acb33298", "patch": "@@ -17,25 +17,29 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n     let context = &mut cx.context;\n \n     match mono_item {\n-        MonoItem::Fn(inst) => match inst {\n-            Instance {\n-                def: InstanceDef::Item(def_id),\n-                substs: _,\n-            } => {\n-                let mut mir = ::std::io::Cursor::new(Vec::new());\n-                ::rustc_mir::util::write_mir_pretty(tcx, Some(def_id), &mut mir).unwrap();\n-                let mir_file_name =\n-                    \"target/out/mir/\".to_string() + &format!(\"{:?}\", def_id).replace('/', \"@\");\n-                ::std::fs::write(mir_file_name, mir.into_inner()).unwrap();\n-                let _print_guard = PrintOnPanic(format!(\"{:?}\", inst));\n-\n-                trans_fn(tcx, cx.module, &mut cx.ccx, context, inst);\n-            }\n-            Instance {\n-                def: InstanceDef::DropGlue(_, _),\n-                substs: _,\n-            } => unimpl!(\"Unimplemented drop glue instance\"),\n-            inst => unimpl!(\"Unimplemented instance {:?}\", inst),\n+        MonoItem::Fn(inst) => {\n+            let _print_guard = PrintOnPanic(format!(\"{:?}\", inst));\n+            let mir = match inst.def {\n+                InstanceDef::Item(_)\n+                | InstanceDef::DropGlue(_, _)\n+                | InstanceDef::Virtual(_, _) => {\n+                    let mut mir = ::std::io::Cursor::new(Vec::new());\n+                    ::rustc_mir::util::write_mir_pretty(tcx, Some(inst.def_id()), &mut mir).unwrap();\n+                    mir.into_inner()\n+                }\n+                InstanceDef::FnPtrShim(_, _)\n+                | InstanceDef::ClosureOnceShim { .. }\n+                | InstanceDef::CloneShim(_, _) => {\n+                    // FIXME fix write_mir_pretty for these instances\n+                    format!(\"{:#?}\", cx.tcx.instance_mir(inst.def)).into_bytes()\n+                }\n+                InstanceDef::Intrinsic(_) => bug!(\"tried to codegen intrinsic\"),\n+            };\n+            let mir_file_name =\n+                \"target/out/mir/\".to_string() + &format!(\"{:?}\", inst.def_id()).replace('/', \"@\");\n+            ::std::fs::write(mir_file_name, mir).unwrap();\n+\n+            trans_fn(tcx, cx.module, &mut cx.ccx, context, inst);\n         },\n         MonoItem::Static(def_id) => {\n             crate::constant::codegen_static(&mut cx.ccx, def_id);"}]}