{"sha": "60605a24d404ada4fdfd040ac924926cd699415b", "node_id": "C_kwDOAAsO6NoAKDYwNjA1YTI0ZDQwNGFkYTRmZGZkMDQwYWM5MjQ5MjZjZDY5OTQxNWI", "commit": {"author": {"name": "Oleg Matrokhin", "email": "matrokhin@gmail.com", "date": "2021-12-13T18:16:04Z"}, "committer": {"name": "Oleg Matrokhin", "email": "matrokhin@gmail.com", "date": "2021-12-13T18:16:04Z"}, "message": "Reuse results from split_into_parts()", "tree": {"sha": "ad45ac042749e82a853436d2991a879ebbda1006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad45ac042749e82a853436d2991a879ebbda1006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60605a24d404ada4fdfd040ac924926cd699415b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60605a24d404ada4fdfd040ac924926cd699415b", "html_url": "https://github.com/rust-lang/rust/commit/60605a24d404ada4fdfd040ac924926cd699415b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60605a24d404ada4fdfd040ac924926cd699415b/comments", "author": {"login": "errx", "id": 462486, "node_id": "MDQ6VXNlcjQ2MjQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/462486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/errx", "html_url": "https://github.com/errx", "followers_url": "https://api.github.com/users/errx/followers", "following_url": "https://api.github.com/users/errx/following{/other_user}", "gists_url": "https://api.github.com/users/errx/gists{/gist_id}", "starred_url": "https://api.github.com/users/errx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/errx/subscriptions", "organizations_url": "https://api.github.com/users/errx/orgs", "repos_url": "https://api.github.com/users/errx/repos", "events_url": "https://api.github.com/users/errx/events{/privacy}", "received_events_url": "https://api.github.com/users/errx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "errx", "id": 462486, "node_id": "MDQ6VXNlcjQ2MjQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/462486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/errx", "html_url": "https://github.com/errx", "followers_url": "https://api.github.com/users/errx/followers", "following_url": "https://api.github.com/users/errx/following{/other_user}", "gists_url": "https://api.github.com/users/errx/gists{/gist_id}", "starred_url": "https://api.github.com/users/errx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/errx/subscriptions", "organizations_url": "https://api.github.com/users/errx/orgs", "repos_url": "https://api.github.com/users/errx/repos", "events_url": "https://api.github.com/users/errx/events{/privacy}", "received_events_url": "https://api.github.com/users/errx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b03b41b7a4a4b90b5d1306794fd964a44c90fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b03b41b7a4a4b90b5d1306794fd964a44c90fdc", "html_url": "https://github.com/rust-lang/rust/commit/8b03b41b7a4a4b90b5d1306794fd964a44c90fdc"}], "stats": {"total": 30, "additions": 9, "deletions": 21}, "files": [{"sha": "df017636631e7b816239c5ac3856eee730f661ca", "filename": "crates/ide_assists/src/handlers/number_representation.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60605a24d404ada4fdfd040ac924926cd699415b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60605a24d404ada4fdfd040ac924926cd699415b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fnumber_representation.rs?ref=60605a24d404ada4fdfd040ac924926cd699415b", "patch": "@@ -27,17 +27,15 @@ pub(crate) fn reformat_number_literal(acc: &mut Assists, ctx: &AssistContext) ->\n         return remove_separators(acc, literal);\n     }\n \n-    let value = literal.str_value();\n+    let (prefix, value, suffix) = literal.split_into_parts();\n     if value.len() < MIN_NUMBER_OF_DIGITS_TO_FORMAT {\n         return None;\n     }\n \n     let radix = literal.radix();\n-    let mut converted = literal.prefix().to_string();\n-    converted.push_str(&add_group_separators(literal.str_value(), group_size(radix)));\n-    if let Some(suffix) = literal.suffix() {\n-        converted.push_str(suffix);\n-    }\n+    let mut converted = prefix.to_string();\n+    converted.push_str(&add_group_separators(value, group_size(radix)));\n+    converted.push_str(suffix);\n \n     let group_id = GroupLabel(\"Reformat number literal\".into());\n     let label = format!(\"Convert {} to {}\", literal, converted);"}, {"sha": "c32ab686ccad7d4a878e7ca5184b1e92d3f159f7", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/60605a24d404ada4fdfd040ac924926cd699415b/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60605a24d404ada4fdfd040ac924926cd699415b/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=60605a24d404ada4fdfd040ac924926cd699415b", "patch": "@@ -613,8 +613,6 @@ impl HasFormatSpecifier for ast::String {\n     }\n }\n \n-struct IntNumberParts<'a>(&'a str, &'a str, &'a str);\n-\n impl ast::IntNumber {\n     pub fn radix(&self) -> Radix {\n         match self.text().get(..2).unwrap_or_default() {\n@@ -625,7 +623,7 @@ impl ast::IntNumber {\n         }\n     }\n \n-    fn split_into_parts(&self) -> IntNumberParts {\n+    pub fn split_into_parts(&self) -> (&str, &str, &str) {\n         let radix = self.radix();\n         let (prefix, mut text) = self.text().split_at(radix.prefix_len());\n \n@@ -641,25 +639,17 @@ impl ast::IntNumber {\n             suffix = suffix2;\n         };\n \n-        IntNumberParts(prefix, text, suffix)\n-    }\n-\n-    pub fn prefix(&self) -> &str {\n-        self.split_into_parts().0\n-    }\n-\n-    pub fn str_value(&self) -> &str {\n-        self.split_into_parts().1\n+        (prefix, text, suffix)\n     }\n \n     pub fn value(&self) -> Option<u128> {\n-        let text = self.str_value().replace(\"_\", \"\");\n-        let value = u128::from_str_radix(&text, self.radix() as u32).ok()?;\n+        let (_, text, _) = self.split_into_parts();\n+        let value = u128::from_str_radix(&text.replace(\"_\", \"\"), self.radix() as u32).ok()?;\n         Some(value)\n     }\n \n     pub fn suffix(&self) -> Option<&str> {\n-        let suffix = self.split_into_parts().2;\n+        let (_, _, suffix) = self.split_into_parts();\n         if suffix.is_empty() {\n             None\n         } else {"}]}