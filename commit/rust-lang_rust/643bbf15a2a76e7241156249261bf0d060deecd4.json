{"sha": "643bbf15a2a76e7241156249261bf0d060deecd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0M2JiZjE1YTJhNzZlNzI0MTE1NjI0OTI2MWJmMGQwNjBkZWVjZDQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-06T12:40:27Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-10-06T12:40:27Z"}, "message": "Fix trait object hir formatting behind pointer and references", "tree": {"sha": "0afb188139ea4822f1e596a9f93c580827057cb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0afb188139ea4822f1e596a9f93c580827057cb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/643bbf15a2a76e7241156249261bf0d060deecd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/643bbf15a2a76e7241156249261bf0d060deecd4", "html_url": "https://github.com/rust-lang/rust/commit/643bbf15a2a76e7241156249261bf0d060deecd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/643bbf15a2a76e7241156249261bf0d060deecd4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f252ade72fee4776396122dc91a17ddc185a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f252ade72fee4776396122dc91a17ddc185a66", "html_url": "https://github.com/rust-lang/rust/commit/e5f252ade72fee4776396122dc91a17ddc185a66"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "d2e151f25247ec8684fe8ccaafce6487f7d10706", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/643bbf15a2a76e7241156249261bf0d060deecd4/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643bbf15a2a76e7241156249261bf0d060deecd4/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=643bbf15a2a76e7241156249261bf0d060deecd4", "patch": "@@ -221,7 +221,16 @@ impl HirDisplay for ApplicationTy {\n             }\n             TypeCtor::RawPtr(m) => {\n                 let t = self.parameters.as_single();\n-                write!(f, \"*{}{}\", m.as_keyword_for_ptr(), t.display(f.db))?;\n+                let ty_display = t.display(f.db);\n+\n+                write!(f, \"*{}\", m.as_keyword_for_ptr())?;\n+                if matches!(t, Ty::Dyn(predicates) if predicates.len() > 1) {\n+                    write!(f, \"(\")?;\n+                    write!(f, \"{}\", ty_display)?;\n+                    write!(f, \")\")?;\n+                } else {\n+                    write!(f, \"{}\", ty_display)?;\n+                }\n             }\n             TypeCtor::Ref(m) => {\n                 let t = self.parameters.as_single();\n@@ -230,7 +239,15 @@ impl HirDisplay for ApplicationTy {\n                 } else {\n                     t.display(f.db)\n                 };\n-                write!(f, \"&{}{}\", m.as_keyword_for_ref(), ty_display)?;\n+\n+                write!(f, \"&{}\", m.as_keyword_for_ref())?;\n+                if matches!(t, Ty::Dyn(predicates) if predicates.len() > 1) {\n+                    write!(f, \"(\")?;\n+                    write!(f, \"{}\", ty_display)?;\n+                    write!(f, \")\")?;\n+                } else {\n+                    write!(f, \"{}\", ty_display)?;\n+                }\n             }\n             TypeCtor::Never => write!(f, \"!\")?,\n             TypeCtor::Tuple { .. } => {\n@@ -636,14 +653,14 @@ impl HirDisplay for GenericPredicate {\n \n impl HirDisplay for Obligation {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n-        Ok(match self {\n-            Obligation::Trait(tr) => write!(f, \"Implements({})\", tr.display(f.db))?,\n+        match self {\n+            Obligation::Trait(tr) => write!(f, \"Implements({})\", tr.display(f.db)),\n             Obligation::Projection(proj) => write!(\n                 f,\n                 \"Normalize({} => {})\",\n                 proj.projection_ty.display(f.db),\n                 proj.ty.display(f.db)\n-            )?,\n-        })\n+            ),\n+        }\n     }\n }"}, {"sha": "3a4dc6a841c52c1974d37f4cd2e1cb912bf70d53", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/643bbf15a2a76e7241156249261bf0d060deecd4/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/643bbf15a2a76e7241156249261bf0d060deecd4/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=643bbf15a2a76e7241156249261bf0d060deecd4", "patch": "@@ -1023,6 +1023,40 @@ mod collections {\n         type Item=T;\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn multi_dyn_trait_bounds() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                type_hints: true,\n+                parameter_hints: false,\n+                chaining_hints: false,\n+                max_length: None,\n+            },\n+            r#\"\n+//- /main.rs crate:main\n+pub struct Vec<T> {}\n+\n+impl<T> Vec<T> {\n+    pub fn new() -> Self { Vec {} }\n+}\n+\n+pub struct Box<T> {}\n+\n+trait Display {}\n+trait Sync {}\n+\n+fn main() {\n+    let _v = Vec::<Box<&(dyn Display + Sync)>>::new();\n+      //^^ Vec<Box<&(dyn Display + Sync)>>\n+    let _v = Vec::<Box<*const (dyn Display + Sync)>>::new();\n+      //^^ Vec<Box<*const (dyn Display + Sync)>>\n+    let _v = Vec::<Box<dyn Display + Sync>>::new();\n+      //^^ Vec<Box<dyn Display + Sync>>\n+}\n \"#,\n         );\n     }"}]}