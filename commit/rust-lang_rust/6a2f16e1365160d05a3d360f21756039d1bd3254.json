{"sha": "6a2f16e1365160d05a3d360f21756039d1bd3254", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMmYxNmUxMzY1MTYwZDA1YTNkMzYwZjIxNzU2MDM5ZDFiZDMyNTQ=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-22T21:14:52Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T01:14:24Z"}, "message": "Add support for default trait impls in libsyntax", "tree": {"sha": "be3c95808ab82fa1b60406feb76d72f78f9113cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be3c95808ab82fa1b60406feb76d72f78f9113cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a2f16e1365160d05a3d360f21756039d1bd3254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2f16e1365160d05a3d360f21756039d1bd3254", "html_url": "https://github.com/rust-lang/rust/commit/6a2f16e1365160d05a3d360f21756039d1bd3254", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a2f16e1365160d05a3d360f21756039d1bd3254/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b01a37ec38db9301239f0c0abcf3c695055b0ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b01a37ec38db9301239f0c0abcf3c695055b0ff", "html_url": "https://github.com/rust-lang/rust/commit/2b01a37ec38db9301239f0c0abcf3c695055b0ff"}], "stats": {"total": 79, "additions": 60, "deletions": 19}, "files": [{"sha": "d57b23b8b1b920d7a9e71b6833efb8f292256af8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6a2f16e1365160d05a3d360f21756039d1bd3254", "patch": "@@ -1641,6 +1641,10 @@ pub enum Item_ {\n               Generics,\n               TyParamBounds,\n               Vec<TraitItem>),\n+\n+    // Default trait implementations\n+    // `impl Trait for ..`\n+    ItemDefTrait(Unsafety, TraitRef),\n     ItemImpl(Unsafety,\n              ImplPolarity,\n              Generics,\n@@ -1666,7 +1670,8 @@ impl Item_ {\n             ItemStruct(..) => \"struct\",\n             ItemTrait(..) => \"trait\",\n             ItemMac(..) |\n-            ItemImpl(..) => \"item\"\n+            ItemImpl(..) |\n+            ItemDefTrait(..) => \"item\"\n         }\n     }\n }"}, {"sha": "7903a3a1bfcaebc83ee0b74d54439b4b0913d16c", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=6a2f16e1365160d05a3d360f21756039d1bd3254", "patch": "@@ -1044,6 +1044,7 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n                 ItemStruct(..) => \"struct\",\n                 ItemTrait(..) => \"trait\",\n                 ItemImpl(..) => \"impl\",\n+                ItemDefTrait(..) => \"default impl\",\n                 ItemMac(..) => \"macro\"\n             };\n             format!(\"{} {}{}\", item_str, path_str, id_str)"}, {"sha": "f1228c1d36308a365d968d36ed34660fdd5d18bb", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=6a2f16e1365160d05a3d360f21756039d1bd3254", "patch": "@@ -252,8 +252,12 @@ pub fn name_to_dummy_lifetime(name: Name) -> Lifetime {\n /// hint of where they came from, (previously they would all just be\n /// listed as `__extensions__::method_name::hash`, with no indication\n /// of the type).\n-pub fn impl_pretty_name(trait_ref: &Option<TraitRef>, ty: &Ty) -> Ident {\n-    let mut pretty = pprust::ty_to_string(ty);\n+pub fn impl_pretty_name(trait_ref: &Option<TraitRef>, ty: Option<&Ty>) -> Ident {\n+    let mut pretty = match ty {\n+        Some(t) => pprust::ty_to_string(t),\n+        None => String::from_str(\"..\")\n+    };\n+\n     match *trait_ref {\n         Some(ref trait_ref) => {\n             pretty.push('.');"}, {"sha": "df6b73b4c97a0988f7dbe063e0d5bb6c96e1b503", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=6a2f16e1365160d05a3d360f21756039d1bd3254", "patch": "@@ -498,7 +498,7 @@ impl<'a> TraitDef<'a> {\n         // Just mark it now since we know that it'll end up used downstream\n         attr::mark_used(&attr);\n         let opt_trait_ref = Some(trait_ref);\n-        let ident = ast_util::impl_pretty_name(&opt_trait_ref, &*self_type);\n+        let ident = ast_util::impl_pretty_name(&opt_trait_ref, Some(&*self_type));\n         let mut a = vec![attr];\n         a.extend(self.attributes.iter().cloned());\n         cx.item("}, {"sha": "31e5a876374fe99bec7f2f5bd9144d86c375ed21", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=6a2f16e1365160d05a3d360f21756039d1bd3254", "patch": "@@ -999,6 +999,9 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n             let struct_def = folder.fold_struct_def(struct_def);\n             ItemStruct(struct_def, folder.fold_generics(generics))\n         }\n+        ItemDefTrait(unsafety, ref trait_ref) => {\n+            ItemDefTrait(unsafety, folder.fold_trait_ref((*trait_ref).clone()))\n+        }\n         ItemImpl(unsafety, polarity, generics, ifce, ty, impl_items) => {\n             let new_impl_items = impl_items.into_iter().flat_map(|item| {\n                 folder.fold_impl_item(item).into_iter()\n@@ -1150,7 +1153,7 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span}\n     let ident = match node {\n         // The node may have changed, recompute the \"pretty\" impl name.\n         ItemImpl(_, _, _, ref maybe_trait, ref ty, _) => {\n-            ast_util::impl_pretty_name(maybe_trait, &**ty)\n+            ast_util::impl_pretty_name(maybe_trait, Some(&**ty))\n         }\n         _ => ident\n     };"}, {"sha": "55c4afc36a547fe1f14c8a06b13c2286db83a327", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6a2f16e1365160d05a3d360f21756039d1bd3254", "patch": "@@ -31,7 +31,7 @@ use ast::{ExprVec, ExprWhile, ExprWhileLet, ExprForLoop, Field, FnDecl};\n use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, ForeignMod, FunctionRetTy};\n use ast::{Ident, Inherited, ImplItem, Item, Item_, ItemStatic};\n use ast::{ItemEnum, ItemFn, ItemForeignMod, ItemImpl, ItemConst};\n-use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy};\n+use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy, ItemDefTrait};\n use ast::{ItemExternCrate, ItemUse};\n use ast::{LifetimeDef, Lit, Lit_};\n use ast::{LitBool, LitChar, LitByte, LitBinary};\n@@ -4783,10 +4783,13 @@ impl<'a> Parser<'a> {\n         (impl_items, inner_attrs)\n     }\n \n-    /// Parses two variants (with the region/type params always optional):\n+    /// Parses items implementations variants\n     ///    impl<T> Foo { ... }\n-    ///    impl<T> ToString for ~[T] { ... }\n+    ///    impl<T> ToString for &'static T { ... }\n+    ///    impl Send for .. {}\n     fn parse_item_impl(&mut self, unsafety: ast::Unsafety) -> ItemInfo {\n+        let impl_span = self.span;\n+\n         // First, parse type parameters if necessary.\n         let mut generics = self.parse_generics();\n \n@@ -4807,7 +4810,7 @@ impl<'a> Parser<'a> {\n         // Parse traits, if necessary.\n         let opt_trait = if could_be_trait && self.eat_keyword(keywords::For) {\n             // New-style trait. Reinterpret the type as a trait.\n-            let opt_trait_ref = match ty.node {\n+            match ty.node {\n                 TyPath(ref path, node_id) => {\n                     Some(TraitRef {\n                         path: (*path).clone(),\n@@ -4818,10 +4821,7 @@ impl<'a> Parser<'a> {\n                     self.span_err(ty.span, \"not a trait\");\n                     None\n                 }\n-            };\n-\n-            ty = self.parse_ty_sum();\n-            opt_trait_ref\n+            }\n         } else {\n             match polarity {\n                 ast::ImplPolarity::Negative => {\n@@ -4834,14 +4834,27 @@ impl<'a> Parser<'a> {\n             None\n         };\n \n-        self.parse_where_clause(&mut generics);\n-        let (impl_items, attrs) = self.parse_impl_items();\n+        if self.eat(&token::DotDot) {\n+            if generics.is_parameterized() {\n+                self.span_err(impl_span, \"default trait implementations are not \\\n+                                          allowed to have genercis\");\n+            }\n \n-        let ident = ast_util::impl_pretty_name(&opt_trait, &*ty);\n+            self.expect(&token::OpenDelim(token::Brace));\n+            self.expect(&token::CloseDelim(token::Brace));\n+            (ast_util::impl_pretty_name(&opt_trait, None),\n+             ItemDefTrait(unsafety, opt_trait.unwrap()), None)\n+        } else {\n+            if opt_trait.is_some() {\n+                ty = self.parse_ty_sum();\n+            }\n+            self.parse_where_clause(&mut generics);\n+            let (impl_items, attrs) = self.parse_impl_items();\n \n-        (ident,\n-         ItemImpl(unsafety, polarity, generics, opt_trait, ty, impl_items),\n-         Some(attrs))\n+            (ast_util::impl_pretty_name(&opt_trait, Some(&*ty)),\n+             ItemImpl(unsafety, polarity, generics, opt_trait, ty, impl_items),\n+             Some(attrs))\n+        }\n     }\n \n     /// Parse a::B<String,i32>"}, {"sha": "d5b17b5798b83bc6710b0cb700f0a656730a0368", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=6a2f16e1365160d05a3d360f21756039d1bd3254", "patch": "@@ -926,6 +926,18 @@ impl<'a> State<'a> {\n                 try!(self.print_struct(&**struct_def, generics, item.ident, item.span));\n             }\n \n+            ast::ItemDefTrait(unsafety, ref trait_ref) => {\n+                try!(self.head(\"\"));\n+                try!(self.print_visibility(item.vis));\n+                try!(self.print_unsafety(unsafety));\n+                try!(self.word_nbsp(\"impl\"));\n+                try!(self.print_trait_ref(trait_ref));\n+                try!(space(&mut self.s));\n+                try!(self.word_space(\"for\"));\n+                try!(self.word_space(\"..\"));\n+                try!(self.bopen());\n+                try!(self.bclose(item.span));\n+            }\n             ast::ItemImpl(unsafety,\n                           polarity,\n                           ref generics,"}, {"sha": "9654e7a005b37854f7cfa61d003738a36c9669b5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2f16e1365160d05a3d360f21756039d1bd3254/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=6a2f16e1365160d05a3d360f21756039d1bd3254", "patch": "@@ -282,6 +282,9 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_generics(type_parameters);\n             walk_enum_def(visitor, enum_definition, type_parameters)\n         }\n+        ItemDefTrait(_, ref trait_ref) => {\n+            visitor.visit_trait_ref(trait_ref)\n+        }\n         ItemImpl(_, _,\n                  ref type_parameters,\n                  ref trait_reference,"}]}