{"sha": "87242f3cc7e82e60b308598f9abd29eb3c0c3be7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MjQyZjNjYzdlODJlNjBiMzA4NTk4ZjlhYmQyOWViM2MwYzNiZTc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-04T03:18:17Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-04T05:46:43Z"}, "message": "Provide suggestion when trying to use method on numeric literal", "tree": {"sha": "a6563113693b4d76d8fbee4cf10036ed40e56cbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6563113693b4d76d8fbee4cf10036ed40e56cbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87242f3cc7e82e60b308598f9abd29eb3c0c3be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87242f3cc7e82e60b308598f9abd29eb3c0c3be7", "html_url": "https://github.com/rust-lang/rust/commit/87242f3cc7e82e60b308598f9abd29eb3c0c3be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "885011ef1fd8fbe8c5be50a0713c03c980772be3", "url": "https://api.github.com/repos/rust-lang/rust/commits/885011ef1fd8fbe8c5be50a0713c03c980772be3", "html_url": "https://github.com/rust-lang/rust/commit/885011ef1fd8fbe8c5be50a0713c03c980772be3"}], "stats": {"total": 194, "additions": 161, "deletions": 33}, "files": [{"sha": "60ebe3c2c7b717f8ac842bfaddf9c23ce7ea2f6e", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 57, "deletions": 15, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=87242f3cc7e82e60b308598f9abd29eb3c0c3be7", "patch": "@@ -195,15 +195,53 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 };\n                 let mut err = if !actual.references_error() {\n-                    struct_span_err!(\n-                        tcx.sess,\n-                        span,\n-                        E0599,\n-                        \"no {} named `{}` found for type `{}` in the current scope\",\n-                        type_str,\n-                        item_name,\n-                        ty_string\n-                    )\n+                    // Suggest clamping down the type if the method that is being attempted to\n+                    // be used exists at all, and the type is an ambiuous numeric type\n+                    // ({integer}/{float}).\n+                    let mut candidates = all_traits(self.tcx)\n+                        .filter(|info| {\n+                            self.associated_item(info.def_id, item_name, Namespace::Value).is_some()\n+                        });\n+                    if let (true, false, Some(expr), Some(_)) = (actual.is_numeric(),\n+                                                                 actual.has_concrete_skeleton(),\n+                                                                 rcvr_expr,\n+                                                                 candidates.next()) {\n+                        let mut err = struct_span_err!(\n+                            tcx.sess,\n+                            span,\n+                            E0689,\n+                            \"can't call {} `{}` on ambiguous numeric type `{}`\",\n+                            type_str,\n+                            item_name,\n+                            ty_string\n+                        );\n+                        let snippet = tcx.sess.codemap().span_to_snippet(expr.span)\n+                            .unwrap_or(\"4\".to_string());\n+                        let concrete_type = if actual.is_integral() {\n+                            \"u32\"\n+                        } else {\n+                            \"f32\"\n+                        };\n+                        err.span_suggestion(expr.span,\n+                                            &format!(\"you must specify a concrete type for \\\n+                                                      this numeric value, like `{}`\",\n+                                                     concrete_type),\n+                                            format!(\"({} as {})\",\n+                                                    snippet,\n+                                                    concrete_type));\n+                        err.emit();\n+                        return;\n+                    } else {\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            span,\n+                            E0599,\n+                            \"no {} named `{}` found for type `{}` in the current scope\",\n+                            type_str,\n+                            item_name,\n+                            ty_string\n+                        )\n+                    }\n                 } else {\n                     tcx.sess.diagnostic().struct_dummy()\n                 };\n@@ -305,12 +343,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                       bound_list));\n                 }\n \n-                self.suggest_traits_to_import(&mut err,\n-                                              span,\n-                                              rcvr_ty,\n-                                              item_name,\n-                                              rcvr_expr,\n-                                              out_of_scope_traits);\n+                if actual.is_numeric() && actual.is_fresh() {\n+\n+                } else {\n+                    self.suggest_traits_to_import(&mut err,\n+                                                  span,\n+                                                  rcvr_ty,\n+                                                  item_name,\n+                                                  rcvr_expr,\n+                                                  out_of_scope_traits);\n+                }\n \n                 if let Some(lev_candidate) = lev_candidate {\n                     err.help(&format!(\"did you mean `{}`?\", lev_candidate.name));"}, {"sha": "204e57f12aa75186235f3094248dcdef631b6fe6", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=87242f3cc7e82e60b308598f9abd29eb3c0c3be7", "patch": "@@ -4641,6 +4641,31 @@ impl Foo for () {\n ```\n \"##,\n \n+E0689: r##\"\n+This error indicates that the numeric value for the method being passed exists\n+but the type of the numeric value or binding could not be identified.\n+\n+The error happens on numeric literals:\n+\n+```compile_fail,E0689\n+2.0.powi(2);\n+```\n+\n+and on numeric bindings without an identified concrete type:\n+\n+```compile_fail,E0689\n+let x = 2.0;\n+x.powi(2);  // same error as above\n+```\n+\n+Because of this, you must give the numeric literal or binding a type:\n+\n+```\n+let _ = (2.0 as f32).powi(2);\n+let x: f32 = 2.0;\n+let _ = x.powi(2);\n+```\n+\"##,\n }\n \n register_diagnostics! {"}, {"sha": "a4e92820e21e518fb377afb1809b3c62c476da44", "filename": "src/test/ui/issue-41652/issue_41652.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.rs?ref=87242f3cc7e82e60b308598f9abd29eb3c0c3be7", "patch": "@@ -17,7 +17,7 @@ struct S;\n impl issue_41652_b::Tr for S {\n     fn f() {\n         3.f()\n-        //~^ ERROR no method named `f` found for type `{integer}` in the current scope\n+        //~^ ERROR can't call method `f` on ambiguous numeric type `{integer}`\n     }\n }\n "}, {"sha": "2b12efc5fad59a739722b8da813c86b6d36a5297", "filename": "src/test/ui/issue-41652/issue_41652.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr?ref=87242f3cc7e82e60b308598f9abd29eb3c0c3be7", "patch": "@@ -1,18 +1,12 @@\n-error[E0599]: no method named `f` found for type `{integer}` in the current scope\n+error[E0689]: can't call method `f` on ambiguous numeric type `{integer}`\n   --> $DIR/issue_41652.rs:19:11\n    |\n 19 |         3.f()\n    |           ^\n+help: you must specify a concrete type for this numeric value, like `u32`\n    |\n-   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-   = help: try with `{integer}::f`\n-note: candidate #1 is defined in the trait `issue_41652_b::Tr`\n-  --> $DIR/auxiliary/issue_41652_b.rs:14:5\n-   |\n-14 | /     fn f()\n-15 | |         where Self: Sized;\n-   | |__________________________^\n-   = help: to disambiguate the method call, write `issue_41652_b::Tr::f(3)` instead\n+19 |         (3 as u32).f()\n+   |         ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "58a30e86f222bd288b0f6ca5f0f73a8eadb11287", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.rs?ref=87242f3cc7e82e60b308598f9abd29eb3c0c3be7", "patch": "@@ -46,12 +46,26 @@ macro_rules! fake_anon_field_expr {\n      }\n }\n \n+macro_rules! real_method_stmt {\n+     () => {\n+          2.0.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+     }\n+}\n+\n+macro_rules! real_method_expr {\n+     () => {\n+          2.0.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+     }\n+}\n+\n fn main() {\n     fake_method_stmt!();\n     fake_field_stmt!();\n     fake_anon_field_stmt!();\n+    real_method_stmt!();\n \n     let _ = fake_method_expr!();\n     let _ = fake_field_expr!();\n     let _ = fake_anon_field_expr!();\n+    let _ = real_method_expr!();\n }"}, {"sha": "1600bb4fd54701fe7321b90505a5a896209e6016", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=87242f3cc7e82e60b308598f9abd29eb3c0c3be7", "patch": "@@ -4,7 +4,7 @@ error[E0599]: no method named `fake` found for type `{integer}` in the current s\n 15 |           1.fake() //~ ERROR no method\n    |             ^^^^\n ...\n-50 |     fake_method_stmt!();\n+62 |     fake_method_stmt!();\n    |     -------------------- in this macro invocation\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n@@ -13,7 +13,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n 21 |           1.fake //~ ERROR doesn't have fields\n    |             ^^^^\n ...\n-51 |     fake_field_stmt!();\n+63 |     fake_field_stmt!();\n    |     ------------------- in this macro invocation\n \n error[E0609]: no field `0` on type `{integer}`\n@@ -22,16 +22,29 @@ error[E0609]: no field `0` on type `{integer}`\n 27 |           (1).0 //~ ERROR no field\n    |           ^^^^^\n ...\n-52 |     fake_anon_field_stmt!();\n+64 |     fake_anon_field_stmt!();\n    |     ------------------------ in this macro invocation\n \n+error[E0689]: can't call method `powi` on ambiguous numeric type `{float}`\n+  --> $DIR/macro-backtrace-invalid-internals.rs:51:15\n+   |\n+51 |           2.0.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+   |               ^^^^\n+...\n+65 |     real_method_stmt!();\n+   |     -------------------- in this macro invocation\n+help: you must specify a concrete type for this numeric value, like `f32`\n+   |\n+51 |           (2.0 as f32).powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+   |           ^^^^^^^^^^^^\n+\n error[E0599]: no method named `fake` found for type `{integer}` in the current scope\n   --> $DIR/macro-backtrace-invalid-internals.rs:33:13\n    |\n 33 |           1.fake() //~ ERROR no method\n    |             ^^^^\n ...\n-54 |     let _ = fake_method_expr!();\n+67 |     let _ = fake_method_expr!();\n    |             ------------------- in this macro invocation\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n@@ -40,7 +53,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n 39 |           1.fake //~ ERROR doesn't have fields\n    |             ^^^^\n ...\n-55 |     let _ = fake_field_expr!();\n+68 |     let _ = fake_field_expr!();\n    |             ------------------ in this macro invocation\n \n error[E0609]: no field `0` on type `{integer}`\n@@ -49,8 +62,21 @@ error[E0609]: no field `0` on type `{integer}`\n 45 |           (1).0 //~ ERROR no field\n    |           ^^^^^\n ...\n-56 |     let _ = fake_anon_field_expr!();\n+69 |     let _ = fake_anon_field_expr!();\n    |             ----------------------- in this macro invocation\n \n-error: aborting due to 6 previous errors\n+error[E0689]: can't call method `powi` on ambiguous numeric type `{float}`\n+  --> $DIR/macro-backtrace-invalid-internals.rs:57:15\n+   |\n+57 |           2.0.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+   |               ^^^^\n+...\n+70 |     let _ = real_method_expr!();\n+   |             ------------------- in this macro invocation\n+help: you must specify a concrete type for this numeric value, like `f32`\n+   |\n+57 |           (2.0 as f32).powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+   |           ^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "d0ae520f57bf1a1ccd90bca940a44fe4109fd5f8", "filename": "src/test/ui/suggestions/method-on-ambiguous-numeric-type.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.rs?ref=87242f3cc7e82e60b308598f9abd29eb3c0c3be7", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = 2.0.powi(2);\n+    //~^ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+    println!(\"{:?}\", x);\n+}"}, {"sha": "f315517d9406c8f852d7a58486c6e52a9a1127c0", "filename": "src/test/ui/suggestions/method-on-ambiguous-numeric-type.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87242f3cc7e82e60b308598f9abd29eb3c0c3be7/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr?ref=87242f3cc7e82e60b308598f9abd29eb3c0c3be7", "patch": "@@ -0,0 +1,12 @@\n+error[E0689]: can't call method `powi` on ambiguous numeric type `{float}`\n+  --> $DIR/method-on-ambiguous-numeric-type.rs:12:17\n+   |\n+12 |     let x = 2.0.powi(2);\n+   |                 ^^^^\n+help: you must specify a concrete type for this numeric value, like `f32`\n+   |\n+12 |     let x = (2.0 as f32).powi(2);\n+   |             ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}