{"sha": "7fbaf2769634ac1800449a6d2d818615cef7eace", "node_id": "C_kwDOAAsO6NoAKDdmYmFmMjc2OTYzNGFjMTgwMDQ0OWE2ZDJkODE4NjE1Y2VmN2VhY2U", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-14T10:00:46Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-17T08:54:24Z"}, "message": "macros: support doc comments in diag derives\n\nDocumentation comments shouldn't affect the diagnostic derive in any\nway, but explicit support has to be added for ignoring the `doc`\nattribute.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "3cb6b2bdba5c471b674284cf768816f19f216faa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb6b2bdba5c471b674284cf768816f19f216faa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fbaf2769634ac1800449a6d2d818615cef7eace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fbaf2769634ac1800449a6d2d818615cef7eace", "html_url": "https://github.com/rust-lang/rust/commit/7fbaf2769634ac1800449a6d2d818615cef7eace", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fbaf2769634ac1800449a6d2d818615cef7eace/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1536ab1b383f21b38f8d49230a2aecc51daffa3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1536ab1b383f21b38f8d49230a2aecc51daffa3d", "html_url": "https://github.com/rust-lang/rust/commit/1536ab1b383f21b38f8d49230a2aecc51daffa3d"}], "stats": {"total": 104, "additions": 90, "deletions": 14}, "files": [{"sha": "9f7d2661a3e8b425a0ca0057f828961ab7b71ccd", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7fbaf2769634ac1800449a6d2d818615cef7eace/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbaf2769634ac1800449a6d2d818615cef7eace/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=7fbaf2769634ac1800449a6d2d818615cef7eace", "patch": "@@ -5,7 +5,7 @@ use crate::diagnostics::error::{\n     DiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    build_field_mapping, report_error_if_not_applied_to_span, report_type_error,\n+    build_field_mapping, is_doc_comment, report_error_if_not_applied_to_span, report_type_error,\n     should_generate_set_arg, type_is_unit, type_matches_path, FieldInfo, FieldInnerTy, FieldMap,\n     HasFieldMap, SetOnce, SpannedOption, SubdiagnosticKind,\n };\n@@ -152,8 +152,12 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n     fn parse_subdiag_attribute(\n         &self,\n         attr: &Attribute,\n-    ) -> Result<(SubdiagnosticKind, Path), DiagnosticDeriveError> {\n-        let (subdiag, slug) = SubdiagnosticKind::from_attr(attr, self)?;\n+    ) -> Result<Option<(SubdiagnosticKind, Path)>, DiagnosticDeriveError> {\n+        let Some((subdiag, slug)) = SubdiagnosticKind::from_attr(attr, self)? else {\n+            // Some attributes aren't errors - like documentation comments - but also aren't\n+            // subdiagnostics.\n+            return Ok(None);\n+        };\n \n         if let SubdiagnosticKind::MultipartSuggestion { .. } = subdiag {\n             let meta = attr.parse_meta()?;\n@@ -170,7 +174,7 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n             SubdiagnosticKind::MultipartSuggestion { .. } => unreachable!(),\n         });\n \n-        Ok((subdiag, slug))\n+        Ok(Some((subdiag, slug)))\n     }\n \n     /// Establishes state in the `DiagnosticDeriveBuilder` resulting from the struct\n@@ -182,6 +186,11 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n     ) -> Result<TokenStream, DiagnosticDeriveError> {\n         let diag = &self.parent.diag;\n \n+        // Always allow documentation comments.\n+        if is_doc_comment(attr) {\n+            return Ok(quote! {});\n+        }\n+\n         let name = attr.path.segments.last().unwrap().ident.to_string();\n         let name = name.as_str();\n         let meta = attr.parse_meta()?;\n@@ -250,7 +259,11 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n             return Ok(tokens);\n         }\n \n-        let (subdiag, slug) = self.parse_subdiag_attribute(attr)?;\n+        let Some((subdiag, slug)) = self.parse_subdiag_attribute(attr)? else {\n+            // Some attributes aren't errors - like documentation comments - but also aren't\n+            // subdiagnostics.\n+            return Ok(quote! {});\n+        };\n         let fn_ident = format_ident!(\"{}\", subdiag);\n         match subdiag {\n             SubdiagnosticKind::Note | SubdiagnosticKind::Help | SubdiagnosticKind::Warn => {\n@@ -291,6 +304,11 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n             .attrs\n             .iter()\n             .map(move |attr| {\n+                // Always allow documentation comments.\n+                if is_doc_comment(attr) {\n+                    return quote! {};\n+                }\n+\n                 let name = attr.path.segments.last().unwrap().ident.to_string();\n                 let needs_clone =\n                     name == \"primary_span\" && matches!(inner_ty, FieldInnerTy::Vec(_));\n@@ -397,8 +415,11 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n             _ => (),\n         }\n \n-        let (subdiag, slug) = self.parse_subdiag_attribute(attr)?;\n-\n+        let Some((subdiag, slug)) = self.parse_subdiag_attribute(attr)? else {\n+            // Some attributes aren't errors - like documentation comments - but also aren't\n+            // subdiagnostics.\n+            return Ok(quote! {});\n+        };\n         let fn_ident = format_ident!(\"{}\", subdiag);\n         match subdiag {\n             SubdiagnosticKind::Label => {"}, {"sha": "4fe02e8160797c317345d0927398eea542122c7c", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7fbaf2769634ac1800449a6d2d818615cef7eace/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbaf2769634ac1800449a6d2d818615cef7eace/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=7fbaf2769634ac1800449a6d2d818615cef7eace", "patch": "@@ -5,9 +5,9 @@ use crate::diagnostics::error::{\n     DiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    build_field_mapping, new_code_ident, report_error_if_not_applied_to_applicability,\n-    report_error_if_not_applied_to_span, FieldInfo, FieldInnerTy, FieldMap, HasFieldMap, SetOnce,\n-    SpannedOption, SubdiagnosticKind,\n+    build_field_mapping, is_doc_comment, new_code_ident,\n+    report_error_if_not_applied_to_applicability, report_error_if_not_applied_to_span, FieldInfo,\n+    FieldInnerTy, FieldMap, HasFieldMap, SetOnce, SpannedOption, SubdiagnosticKind,\n };\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote};\n@@ -43,6 +43,11 @@ impl SubdiagnosticDeriveBuilder {\n \n             if matches!(ast.data, syn::Data::Enum(..)) {\n                 for attr in &ast.attrs {\n+                    // Always allow documentation comments.\n+                    if is_doc_comment(attr) {\n+                        continue;\n+                    }\n+\n                     span_err(\n                         attr.span().unwrap(),\n                         \"unsupported type attribute for subdiagnostic enum\",\n@@ -173,7 +178,11 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n         let mut kind_slugs = vec![];\n \n         for attr in self.variant.ast().attrs {\n-            let (kind, slug) = SubdiagnosticKind::from_attr(attr, self)?;\n+            let Some((kind, slug)) = SubdiagnosticKind::from_attr(attr, self)? else {\n+                // Some attributes aren't errors - like documentation comments - but also aren't\n+                // subdiagnostics.\n+                continue;\n+            };\n \n             let Some(slug) = slug else {\n                 let name = attr.path.segments.last().unwrap().ident.to_string();\n@@ -227,6 +236,11 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n         ast.attrs\n             .iter()\n             .map(|attr| {\n+                // Always allow documentation comments.\n+                if is_doc_comment(attr) {\n+                    return quote! {};\n+                }\n+\n                 let info = FieldInfo {\n                     binding,\n                     ty: inner_ty.inner_type().unwrap_or(&ast.ty),"}, {"sha": "61d5007fc30f0a135c7176a56bb355f111c2ce0e", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7fbaf2769634ac1800449a6d2d818615cef7eace/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbaf2769634ac1800449a6d2d818615cef7eace/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=7fbaf2769634ac1800449a6d2d818615cef7eace", "patch": "@@ -477,7 +477,12 @@ impl SubdiagnosticKind {\n     pub(super) fn from_attr(\n         attr: &Attribute,\n         fields: &impl HasFieldMap,\n-    ) -> Result<(SubdiagnosticKind, Option<Path>), DiagnosticDeriveError> {\n+    ) -> Result<Option<(SubdiagnosticKind, Option<Path>)>, DiagnosticDeriveError> {\n+        // Always allow documentation comments.\n+        if is_doc_comment(attr) {\n+            return Ok(None);\n+        }\n+\n         let span = attr.span().unwrap();\n \n         let name = attr.path.segments.last().unwrap().ident.to_string();\n@@ -526,7 +531,9 @@ impl SubdiagnosticKind {\n                     | SubdiagnosticKind::Note\n                     | SubdiagnosticKind::Help\n                     | SubdiagnosticKind::Warn\n-                    | SubdiagnosticKind::MultipartSuggestion { .. } => return Ok((kind, None)),\n+                    | SubdiagnosticKind::MultipartSuggestion { .. } => {\n+                        return Ok(Some((kind, None)));\n+                    }\n                     SubdiagnosticKind::Suggestion { .. } => {\n                         throw_span_err!(span, \"suggestion without `code = \\\"...\\\"`\")\n                     }\n@@ -626,7 +633,7 @@ impl SubdiagnosticKind {\n             | SubdiagnosticKind::MultipartSuggestion { .. } => {}\n         }\n \n-        Ok((kind, slug))\n+        Ok(Some((kind, slug)))\n     }\n }\n \n@@ -654,3 +661,7 @@ impl quote::IdentFragment for SubdiagnosticKind {\n pub(super) fn should_generate_set_arg(field: &Field) -> bool {\n     field.attrs.is_empty()\n }\n+\n+pub(super) fn is_doc_comment(attr: &Attribute) -> bool {\n+    attr.path.segments.last().unwrap().ident.to_string() == \"doc\"\n+}"}, {"sha": "b8deb48d49adde4fc41529dc64a2dabdc965e8fd", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7fbaf2769634ac1800449a6d2d818615cef7eace/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbaf2769634ac1800449a6d2d818615cef7eace/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=7fbaf2769634ac1800449a6d2d818615cef7eace", "patch": "@@ -749,3 +749,12 @@ struct SubdiagnosticEagerSuggestion {\n     #[subdiagnostic(eager)]\n     sub: SubdiagnosticWithSuggestion,\n }\n+\n+/// with a doc comment on the type..\n+#[derive(Diagnostic)]\n+#[diag(compiletest::example, code = \"E0123\")]\n+struct WithDocComment {\n+    /// ..and the field\n+    #[primary_span]\n+    span: Span,\n+}"}, {"sha": "31aae7ba12d429fce80e2001311848d6f016f15d", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7fbaf2769634ac1800449a6d2d818615cef7eace/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fbaf2769634ac1800449a6d2d818615cef7eace/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=7fbaf2769634ac1800449a6d2d818615cef7eace", "patch": "@@ -641,3 +641,24 @@ struct BJ {\n     span: Span,\n     r#type: String,\n }\n+\n+/// with a doc comment on the type..\n+#[derive(Subdiagnostic)]\n+#[label(parser::add_paren)]\n+struct BK {\n+    /// ..and the field\n+    #[primary_span]\n+    span: Span,\n+}\n+\n+/// with a doc comment on the type..\n+#[derive(Subdiagnostic)]\n+enum BL {\n+    /// ..and the variant..\n+    #[label(parser::add_paren)]\n+    Foo {\n+        /// ..and the field\n+        #[primary_span]\n+        span: Span,\n+    }\n+}"}]}