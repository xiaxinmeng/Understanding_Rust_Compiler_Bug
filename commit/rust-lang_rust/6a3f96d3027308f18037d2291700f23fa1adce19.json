{"sha": "6a3f96d3027308f18037d2291700f23fa1adce19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhM2Y5NmQzMDI3MzA4ZjE4MDM3ZDIyOTE3MDBmMjNmYTFhZGNlMTk=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-20T03:26:07Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-12-26T21:54:18Z"}, "message": "Fixed type inference for tuple struct variants.", "tree": {"sha": "ea126dcc3cd75fc9bd416df6038d1fd7653ca7d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea126dcc3cd75fc9bd416df6038d1fd7653ca7d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a3f96d3027308f18037d2291700f23fa1adce19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3f96d3027308f18037d2291700f23fa1adce19", "html_url": "https://github.com/rust-lang/rust/commit/6a3f96d3027308f18037d2291700f23fa1adce19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a3f96d3027308f18037d2291700f23fa1adce19/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa07e6238985a329d82ee09de7587f7f90c7a4d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa07e6238985a329d82ee09de7587f7f90c7a4d2", "html_url": "https://github.com/rust-lang/rust/commit/fa07e6238985a329d82ee09de7587f7f90c7a4d2"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "a68148515c425ebf6ee9701eae68f1471eac7a1c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a3f96d3027308f18037d2291700f23fa1adce19/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3f96d3027308f18037d2291700f23fa1adce19/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=6a3f96d3027308f18037d2291700f23fa1adce19", "patch": "@@ -1551,7 +1551,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             // Case 2. Reference to a variant constructor.\n             Def::Variant(def_id) |\n             Def::VariantCtor(def_id, ..) => {\n-                let adt_def = self_ty.and_then(|t| t.ty_adt_def());\n+                let adt_def = self_ty.map(|t| t.ty_adt_def().unwrap());\n                 let (generics_def_id, index) = if let Some(adt_def) = adt_def {\n                     debug_assert!(adt_def.is_enum());\n                     (adt_def.did, last)"}, {"sha": "e2eb7fab0f7326fd342f113e160cde87d55fd4bb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6a3f96d3027308f18037d2291700f23fa1adce19/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3f96d3027308f18037d2291700f23fa1adce19/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6a3f96d3027308f18037d2291700f23fa1adce19", "patch": "@@ -5079,7 +5079,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let path_segs = AstConv::def_ids_for_path_segments(self, segments, self_ty, def);\n \n         let mut user_self_ty = None;\n+        let mut is_alias_variant_ctor = false;\n         match def {\n+            Def::VariantCtor(_, _) => {\n+                if let Some(self_ty) = self_ty {\n+                    let adt_def = self_ty.ty_adt_def().unwrap();\n+                    user_self_ty = Some(UserSelfTy {\n+                        impl_def_id: adt_def.did,\n+                        self_ty,\n+                    });\n+                    is_alias_variant_ctor = true;\n+                }\n+            }\n             Def::Method(def_id) |\n             Def::AssociatedConst(def_id) => {\n                 let container = tcx.associated_item(def_id).container;\n@@ -5111,12 +5122,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // provided (if any) into their appropriate spaces. We'll also report\n         // errors if type parameters are provided in an inappropriate place.\n \n-        let is_alias_variant_ctor =\n-            match def {\n-                Def::VariantCtor(_, _) if self_ty.is_some() => true,\n-                _ => false,\n-            };\n-\n         let generic_segs: FxHashSet<_> = path_segs.iter().map(|PathSeg(_, index)| index).collect();\n         AstConv::prohibit_generics(self, segments.iter().enumerate().filter_map(|(index, seg)| {\n             if !generic_segs.contains(&index) || is_alias_variant_ctor {"}, {"sha": "0743f998979221f95010ded9f136cfa517d50b0d", "filename": "src/test/run-pass/enum-variant-generic-args.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6a3f96d3027308f18037d2291700f23fa1adce19/src%2Ftest%2Frun-pass%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3f96d3027308f18037d2291700f23fa1adce19/src%2Ftest%2Frun-pass%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-variant-generic-args.rs?ref=6a3f96d3027308f18037d2291700f23fa1adce19", "patch": "@@ -3,6 +3,7 @@\n \n #![allow(irrefutable_let_patterns)]\n \n+#[allow(dead_code)]\n enum Enum<T> { TSVariant(T), SVariant { v: T } }\n type Alias<T> = Enum<T>;\n type AliasFixed = Enum<()>;\n@@ -16,16 +17,6 @@ macro_rules! is_variant {\n     );\n }\n \n-impl<T> Enum<T> {\n-    fn ts_variant() {\n-        is_variant!(TSVariant, Self::TSVariant(()));\n-    }\n-\n-    fn s_variant() {\n-        is_variant!(SVariant, Self::SVariant { v: () });\n-    }\n-}\n-\n fn main() {\n     // Tuple struct variant\n \n@@ -38,8 +29,6 @@ fn main() {\n \n     is_variant!(TSVariant, AliasFixed::TSVariant(()));\n \n-    Enum::<()>::ts_variant();\n-\n     // Struct variant\n \n     is_variant!(SVariant, Enum::SVariant { v: () });\n@@ -50,6 +39,4 @@ fn main() {\n     is_variant!(SVariant, Alias::<()>::SVariant { v: () });\n \n     is_variant!(SVariant, AliasFixed::SVariant { v: () });\n-\n-    Enum::<()>::s_variant();\n }"}, {"sha": "ad821344e214364b1aa40c95da51259158b77811", "filename": "src/test/ui/enum-variant-generic-args.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a3f96d3027308f18037d2291700f23fa1adce19/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3f96d3027308f18037d2291700f23fa1adce19/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-variant-generic-args.rs?ref=6a3f96d3027308f18037d2291700f23fa1adce19", "patch": "@@ -6,6 +6,8 @@ type AliasFixed = Enum<()>;\n \n impl<T> Enum<T> {\n     fn ts_variant() {\n+        Self::TSVariant(());\n+        //~^ ERROR type parameters are not allowed on this name [E0109]\n         Self::TSVariant::<()>(());\n         //~^ ERROR type arguments are not allowed on this entity [E0109]\n         Self::<()>::TSVariant(());\n@@ -16,6 +18,8 @@ impl<T> Enum<T> {\n     }\n \n     fn s_variant() {\n+        Self::SVariant { v: () };\n+        //~^ ERROR type parameters are not allowed on this name [E0109]\n         Self::SVariant::<()> { v: () };\n         //~^ ERROR type arguments are not allowed on this entity [E0109]\n         //~^^ ERROR mismatched types [E0308]"}]}