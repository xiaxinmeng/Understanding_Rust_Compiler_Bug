{"sha": "5a6ebdfcda149fdf3093003bceacbb2e0a1682ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNmViZGZjZGExNDlmZGYzMDkzMDAzYmNlYWNiYjJlMGExNjgyYWI=", "commit": {"author": {"name": "Bryan Tan", "email": "techniux@gmail.com", "date": "2017-03-31T06:27:09Z"}, "committer": {"name": "Bryan Tan", "email": "techniux@gmail.com", "date": "2017-03-31T06:28:15Z"}, "message": "Add links to std::sync::mpsc docs #29377", "tree": {"sha": "574999443460fc1a908085b8e23a83c143729785", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/574999443460fc1a908085b8e23a83c143729785"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a6ebdfcda149fdf3093003bceacbb2e0a1682ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6ebdfcda149fdf3093003bceacbb2e0a1682ab", "html_url": "https://github.com/rust-lang/rust/commit/5a6ebdfcda149fdf3093003bceacbb2e0a1682ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a6ebdfcda149fdf3093003bceacbb2e0a1682ab/comments", "author": {"login": "Technius", "id": 1066652, "node_id": "MDQ6VXNlcjEwNjY2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1066652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Technius", "html_url": "https://github.com/Technius", "followers_url": "https://api.github.com/users/Technius/followers", "following_url": "https://api.github.com/users/Technius/following{/other_user}", "gists_url": "https://api.github.com/users/Technius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Technius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Technius/subscriptions", "organizations_url": "https://api.github.com/users/Technius/orgs", "repos_url": "https://api.github.com/users/Technius/repos", "events_url": "https://api.github.com/users/Technius/events{/privacy}", "received_events_url": "https://api.github.com/users/Technius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Technius", "id": 1066652, "node_id": "MDQ6VXNlcjEwNjY2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1066652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Technius", "html_url": "https://github.com/Technius", "followers_url": "https://api.github.com/users/Technius/followers", "following_url": "https://api.github.com/users/Technius/following{/other_user}", "gists_url": "https://api.github.com/users/Technius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Technius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Technius/subscriptions", "organizations_url": "https://api.github.com/users/Technius/orgs", "repos_url": "https://api.github.com/users/Technius/repos", "events_url": "https://api.github.com/users/Technius/events{/privacy}", "received_events_url": "https://api.github.com/users/Technius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c94997b6b1cca3e65ecfc5ba40c033d6838019b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c94997b6b1cca3e65ecfc5ba40c033d6838019b", "html_url": "https://github.com/rust-lang/rust/commit/5c94997b6b1cca3e65ecfc5ba40c033d6838019b"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "288a589e589b7ef6edbc3e8d148aa3867dac6c7a", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5a6ebdfcda149fdf3093003bceacbb2e0a1682ab/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a6ebdfcda149fdf3093003bceacbb2e0a1682ab/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=5a6ebdfcda149fdf3093003bceacbb2e0a1682ab", "patch": "@@ -13,40 +13,50 @@\n //! This module provides message-based communication over channels, concretely\n //! defined among three types:\n //!\n-//! * `Sender`\n-//! * `SyncSender`\n-//! * `Receiver`\n+//! * [`Sender`]\n+//! * [`SyncSender`]\n+//! * [`Receiver`]\n //!\n-//! A `Sender` or `SyncSender` is used to send data to a `Receiver`. Both\n+//! A [`Sender`] or [`SyncSender`] is used to send data to a [`Receiver`]. Both\n //! senders are clone-able (multi-producer) such that many threads can send\n //! simultaneously to one receiver (single-consumer).\n //!\n //! These channels come in two flavors:\n //!\n-//! 1. An asynchronous, infinitely buffered channel. The `channel()` function\n+//! 1. An asynchronous, infinitely buffered channel. The [`channel()`] function\n //!    will return a `(Sender, Receiver)` tuple where all sends will be\n //!    **asynchronous** (they never block). The channel conceptually has an\n //!    infinite buffer.\n //!\n-//! 2. A synchronous, bounded channel. The `sync_channel()` function will return\n-//!    a `(SyncSender, Receiver)` tuple where the storage for pending messages\n-//!    is a pre-allocated buffer of a fixed size. All sends will be\n+//! 2. A synchronous, bounded channel. The [`sync_channel()`] function will\n+//!    return a `(SyncSender, Receiver)` tuple where the storage for pending\n+//!    messages is a pre-allocated buffer of a fixed size. All sends will be\n //!    **synchronous** by blocking until there is buffer space available. Note\n-//!    that a bound of 0 is allowed, causing the channel to become a\n-//!    \"rendezvous\" channel where each sender atomically hands off a message to\n-//!    a receiver.\n+//!    that a bound of 0 is allowed, causing the channel to become a \"rendezvous\"\n+//!    channel where each sender atomically hands off a message to a receiver.\n+//!\n+//! [`Sender`]: ../../../std/sync/mpsc/struct.Sender.html\n+//! [`SyncSender`]: ../../../std/sync/mpsc/struct.SyncSender.html\n+//! [`Receiver`]: ../../../std/sync/mpsc/struct.Receiver.html\n+//! [`send`]: ../../../std/sync/mpsc/struct.Sender.html#method.send\n+//! [`channel()`]: ../../../std/sync/mpsc/fn.channel.html\n+//! [`sync_channel()`]: ../../../std/sync/mpsc/fn.sync_channel.html\n //!\n //! ## Disconnection\n //!\n-//! The send and receive operations on channels will all return a `Result`\n+//! The send and receive operations on channels will all return a [`Result`]\n //! indicating whether the operation succeeded or not. An unsuccessful operation\n //! is normally indicative of the other half of a channel having \"hung up\" by\n //! being dropped in its corresponding thread.\n //!\n //! Once half of a channel has been deallocated, most operations can no longer\n-//! continue to make progress, so `Err` will be returned. Many applications will\n-//! continue to `unwrap()` the results returned from this module, instigating a\n-//! propagation of failure among threads if one unexpectedly dies.\n+//! continue to make progress, so [`Err`] will be returned. Many applications\n+//! will continue to [`unwrap()`] the results returned from this module,\n+//! instigating a propagation of failure among threads if one unexpectedly dies.\n+//!\n+//! [`Result`]: ../../../std/result/enum.Result.html\n+//! [`Err`]: ../../../std/result/enum.Result.html#variant.Err\n+//! [`unwrap()`]: ../../../std/result/enum.Result.html#method.unwrap\n //!\n //! # Examples\n //!"}]}