{"sha": "914853bbfa912c4a49379997c0dc938801aa9c4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNDg1M2JiZmE5MTJjNGE0OTM3OTk5N2MwZGM5Mzg4MDFhYTljNGU=", "commit": {"author": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2017-09-12T01:46:18Z"}, "committer": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2017-09-12T01:46:18Z"}, "message": "Fix tidy checks", "tree": {"sha": "b96c4cc520f09b9b3b8a3687d8302d3089bc84f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b96c4cc520f09b9b3b8a3687d8302d3089bc84f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/914853bbfa912c4a49379997c0dc938801aa9c4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/914853bbfa912c4a49379997c0dc938801aa9c4e", "html_url": "https://github.com/rust-lang/rust/commit/914853bbfa912c4a49379997c0dc938801aa9c4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/914853bbfa912c4a49379997c0dc938801aa9c4e/comments", "author": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd", "html_url": "https://github.com/rust-lang/rust/commit/e2820ea06ceeb19cedb8ac38a4f1b7b6abb1fcfd"}], "stats": {"total": 62, "additions": 44, "deletions": 18}, "files": [{"sha": "7770a2f3f1b5a4b84616bed8b939c160e1ed5ae5", "filename": "src/libstd/sys/redox/syscall/call.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/914853bbfa912c4a49379997c0dc938801aa9c4e/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/914853bbfa912c4a49379997c0dc938801aa9c4e/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fcall.rs?ref=914853bbfa912c4a49379997c0dc938801aa9c4e", "patch": "@@ -140,7 +140,8 @@ pub fn ftruncate(fd: usize, len: usize) -> Result<usize> {\n \n // Change modify and/or access times\n pub fn futimens(fd: usize, times: &[TimeSpec]) -> Result<usize> {\n-    unsafe { syscall3(SYS_FUTIMENS, fd, times.as_ptr() as usize, times.len() * mem::size_of::<TimeSpec>()) }\n+    unsafe { syscall3(SYS_FUTIMENS, fd, times.as_ptr() as usize,\n+                      times.len() * mem::size_of::<TimeSpec>()) }\n }\n \n /// Fast userspace mutex\n@@ -291,7 +292,8 @@ pub fn setreuid(ruid: usize, euid: usize) -> Result<usize> {\n }\n \n /// Set up a signal handler\n-pub fn sigaction(sig: usize, act: Option<&SigAction>, oldact: Option<&mut SigAction>) -> Result<usize> {\n+pub fn sigaction(sig: usize, act: Option<&SigAction>, oldact: Option<&mut SigAction>)\n+-> Result<usize> {\n     unsafe { syscall4(SYS_SIGACTION, sig,\n                       act.map(|x| x as *const _).unwrap_or_else(ptr::null) as usize,\n                       oldact.map(|x| x as *mut _).unwrap_or_else(ptr::null_mut) as usize,"}, {"sha": "2e784ebc8a5c5a397e44e5fff85dcbfbade534af", "filename": "src/libstd/sys/redox/syscall/data.rs", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/914853bbfa912c4a49379997c0dc938801aa9c4e/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/914853bbfa912c4a49379997c0dc938801aa9c4e/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fdata.rs?ref=914853bbfa912c4a49379997c0dc938801aa9c4e", "patch": "@@ -22,15 +22,21 @@ impl Deref for Event {\n     type Target = [u8];\n     fn deref(&self) -> &[u8] {\n         unsafe {\n-            slice::from_raw_parts(self as *const Event as *const u8, mem::size_of::<Event>()) as &[u8]\n+            slice::from_raw_parts(\n+                self as *const Event as *const u8,\n+                mem::size_of::<Event>()\n+            ) as &[u8]\n         }\n     }\n }\n \n impl DerefMut for Event {\n     fn deref_mut(&mut self) -> &mut [u8] {\n         unsafe {\n-            slice::from_raw_parts_mut(self as *mut Event as *mut u8, mem::size_of::<Event>()) as &mut [u8]\n+            slice::from_raw_parts_mut(\n+                self as *mut Event as *mut u8,\n+                mem::size_of::<Event>()\n+            ) as &mut [u8]\n         }\n     }\n }\n@@ -52,15 +58,21 @@ impl Deref for Packet {\n     type Target = [u8];\n     fn deref(&self) -> &[u8] {\n         unsafe {\n-            slice::from_raw_parts(self as *const Packet as *const u8, mem::size_of::<Packet>()) as &[u8]\n+            slice::from_raw_parts(\n+                self as *const Packet as *const u8,\n+                mem::size_of::<Packet>()\n+            ) as &[u8]\n         }\n     }\n }\n \n impl DerefMut for Packet {\n     fn deref_mut(&mut self) -> &mut [u8] {\n         unsafe {\n-            slice::from_raw_parts_mut(self as *mut Packet as *mut u8, mem::size_of::<Packet>()) as &mut [u8]\n+            slice::from_raw_parts_mut(\n+                self as *mut Packet as *mut u8,\n+                mem::size_of::<Packet>()\n+            ) as &mut [u8]\n         }\n     }\n }\n@@ -107,17 +119,21 @@ impl Deref for Stat {\n     type Target = [u8];\n     fn deref(&self) -> &[u8] {\n         unsafe {\n-            slice::from_raw_parts(self as *const Stat as *const u8,\n-                                  mem::size_of::<Stat>()) as &[u8]\n+            slice::from_raw_parts(\n+                self as *const Stat as *const u8,\n+                mem::size_of::<Stat>()\n+            ) as &[u8]\n         }\n     }\n }\n \n impl DerefMut for Stat {\n     fn deref_mut(&mut self) -> &mut [u8] {\n         unsafe {\n-            slice::from_raw_parts_mut(self as *mut Stat as *mut u8,\n-                                      mem::size_of::<Stat>()) as &mut [u8]\n+            slice::from_raw_parts_mut(\n+                self as *mut Stat as *mut u8,\n+                mem::size_of::<Stat>()\n+            ) as &mut [u8]\n         }\n     }\n }\n@@ -135,17 +151,21 @@ impl Deref for StatVfs {\n     type Target = [u8];\n     fn deref(&self) -> &[u8] {\n         unsafe {\n-            slice::from_raw_parts(self as *const StatVfs as *const u8,\n-                                  mem::size_of::<StatVfs>()) as &[u8]\n+            slice::from_raw_parts(\n+                self as *const StatVfs as *const u8,\n+                mem::size_of::<StatVfs>()\n+            ) as &[u8]\n         }\n     }\n }\n \n impl DerefMut for StatVfs {\n     fn deref_mut(&mut self) -> &mut [u8] {\n         unsafe {\n-            slice::from_raw_parts_mut(self as *mut StatVfs as *mut u8,\n-                                      mem::size_of::<StatVfs>()) as &mut [u8]\n+            slice::from_raw_parts_mut(\n+                self as *mut StatVfs as *mut u8,\n+                mem::size_of::<StatVfs>()\n+            ) as &mut [u8]\n         }\n     }\n }\n@@ -161,17 +181,21 @@ impl Deref for TimeSpec {\n     type Target = [u8];\n     fn deref(&self) -> &[u8] {\n         unsafe {\n-            slice::from_raw_parts(self as *const TimeSpec as *const u8,\n-                                  mem::size_of::<TimeSpec>()) as &[u8]\n+            slice::from_raw_parts(\n+                self as *const TimeSpec as *const u8,\n+                mem::size_of::<TimeSpec>()\n+            ) as &[u8]\n         }\n     }\n }\n \n impl DerefMut for TimeSpec {\n     fn deref_mut(&mut self) -> &mut [u8] {\n         unsafe {\n-            slice::from_raw_parts_mut(self as *mut TimeSpec as *mut u8,\n-                                      mem::size_of::<TimeSpec>()) as &mut [u8]\n+            slice::from_raw_parts_mut(\n+                self as *mut TimeSpec as *mut u8,\n+                mem::size_of::<TimeSpec>()\n+            ) as &mut [u8]\n         }\n     }\n }"}]}