{"sha": "8b026a6e48ceadb2032b4982077fcdfab802cde5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMDI2YTZlNDhjZWFkYjIwMzJiNDk4MjA3N2ZjZGZhYjgwMmNkZTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-02-27T00:05:14Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-03-02T07:31:19Z"}, "message": "Use numeric field `Name`s (\"0\", \"1\" etc) for positional fields", "tree": {"sha": "00e536ee4d34cfc277f0c8e7b4bf9a04a8613e0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00e536ee4d34cfc277f0c8e7b4bf9a04a8613e0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b026a6e48ceadb2032b4982077fcdfab802cde5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b026a6e48ceadb2032b4982077fcdfab802cde5", "html_url": "https://github.com/rust-lang/rust/commit/8b026a6e48ceadb2032b4982077fcdfab802cde5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b026a6e48ceadb2032b4982077fcdfab802cde5/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b60b948d94b835a1a573d34e44c55251c6cfa98", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b60b948d94b835a1a573d34e44c55251c6cfa98", "html_url": "https://github.com/rust-lang/rust/commit/8b60b948d94b835a1a573d34e44c55251c6cfa98"}], "stats": {"total": 171, "additions": 62, "deletions": 109}, "files": [{"sha": "0f99d85b083fefb76fce0d8d8687592cf5c717d9", "filename": "src/librustc/front/map/definitions.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -83,7 +83,7 @@ pub enum DefPathData {\n     TypeParam(ast::Name),\n     LifetimeDef(ast::Name),\n     EnumVariant(ast::Name),\n-    Field(Option<ast::Name>),\n+    Field(ast::Name),\n     StructCtor, // implicit ctor for a tuple-like struct\n     Initializer, // initializer for a const\n     Binding(ast::Name), // pattern binding\n@@ -185,14 +185,10 @@ impl DefPathData {\n             EnumVariant(name) |\n             DetachedCrate(name) |\n             Binding(name) |\n-            Field(Some(name)) => {\n+            Field(name) => {\n                 name.as_str()\n             }\n \n-            Field(None) => {\n-                InternedString::new(\"{{field}}\")\n-            }\n-\n             // note that this does not show up in user printouts\n             CrateRoot => {\n                 InternedString::new(\"{{root}}\")"}, {"sha": "3592820b807daf1b17a0e9ae2716697201a9361c", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -429,13 +429,12 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n     }\n \n     fn should_warn_about_field(&mut self, node: &hir::StructField_) -> bool {\n-        let is_named = node.name.is_some();\n         let field_type = self.tcx.node_id_to_type(node.id);\n         let is_marker_field = match field_type.ty_to_def_id() {\n             Some(def_id) => self.tcx.lang_items.items().iter().any(|item| *item == Some(def_id)),\n             _ => false\n         };\n-        is_named\n+        !node.is_positional()\n             && !self.symbol_is_live(node.id, None)\n             && !is_marker_field\n             && !has_allow_dead_code_or_lang_attr(&node.attrs)\n@@ -546,7 +545,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n     fn visit_struct_field(&mut self, field: &hir::StructField) {\n         if self.should_warn_about_field(&field.node) {\n             self.warn_dead_code(field.node.id, field.span,\n-                                field.node.name.unwrap(), \"struct field\");\n+                                field.node.name, \"struct field\");\n         }\n \n         intravisit::walk_struct_field(self, field);"}, {"sha": "5d61892fbe211e347e76e6484aaa65e850d96d37", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -1371,8 +1371,6 @@ pub struct FieldDefData<'tcx, 'container: 'tcx> {\n     /// The field's DefId. NOTE: the fields of tuple-like enum variants\n     /// are not real items, and don't have entries in tcache etc.\n     pub did: DefId,\n-    /// special_idents::unnamed_field.name\n-    /// if this is a tuple-like field\n     pub name: Name,\n     pub vis: hir::Visibility,\n     /// TyIVar is used here to allow for variance (see the doc at"}, {"sha": "e161dfa25ef2d04d0af3b2e034644089a7b14f36", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -1242,45 +1242,22 @@ impl Visibility {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct StructField_ {\n-    pub name: Option<Name>,\n+    pub name: Name,\n     pub vis: Visibility,\n     pub id: NodeId,\n     pub ty: P<Ty>,\n     pub attrs: HirVec<Attribute>,\n }\n \n-// impl StructField_ {\n-//     pub fn name(&self) -> Option<Name> {\n-//         match self.kind {\n-//             NamedField(name, _) => Some(name),\n-//             UnnamedField(_) => None,\n-//         }\n-//     }\n-// }\n-\n pub type StructField = Spanned<StructField_>;\n \n-// #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-// pub enum StructFieldKind {\n-//     NamedField(Name, Visibility),\n-//     /// Element of a tuple-like struct\n-//     UnnamedField(Visibility),\n-// }\n-\n-// impl StructFieldKind {\n-//     pub fn is_unnamed(&self) -> bool {\n-//         match *self {\n-//             UnnamedField(..) => true,\n-//             NamedField(..) => false,\n-//         }\n-//     }\n-\n-//     pub fn visibility(&self) -> Visibility {\n-//         match *self {\n-//             NamedField(_, vis) | UnnamedField(vis) => vis,\n-//         }\n-//     }\n-// }\n+impl StructField_ {\n+    // Still necessary in couple of places\n+    pub fn is_positional(&self) -> bool {\n+        let first = self.name.as_str().as_bytes()[0];\n+        first >= b'0' && first <= b'9'\n+    }\n+}\n \n /// Fields and Ids of enum variants and structs\n ///"}, {"sha": "51cb1cec07bf2668efcd621bbc0844c278d8c6c5", "filename": "src/librustc_front/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_front%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_front%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fintravisit.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -669,7 +669,7 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &\n }\n \n pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v StructField) {\n-    walk_opt_name(visitor, struct_field.span, struct_field.node.name);\n+    visitor.visit_name(struct_field.span, struct_field.node.name);\n     visitor.visit_ty(&struct_field.node.ty);\n     walk_list!(visitor, visit_attribute, &struct_field.node.attrs);\n }"}, {"sha": "ee46687b0bc8fb2f27ada8e9bb77663c9e13ab69", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -578,12 +578,14 @@ pub fn lower_variant_data(lctx: &LoweringContext, vdata: &VariantData) -> hir::V\n     match *vdata {\n         VariantData::Struct(ref fields, id) => {\n             hir::VariantData::Struct(fields.iter()\n+                                           .enumerate()\n                                            .map(|f| lower_struct_field(lctx, f))\n                                            .collect(),\n                                      id)\n         }\n         VariantData::Tuple(ref fields, id) => {\n             hir::VariantData::Tuple(fields.iter()\n+                                          .enumerate()\n                                           .map(|f| lower_struct_field(lctx, f))\n                                           .collect(),\n                                     id)\n@@ -607,11 +609,14 @@ pub fn lower_poly_trait_ref(lctx: &LoweringContext, p: &PolyTraitRef) -> hir::Po\n     }\n }\n \n-pub fn lower_struct_field(lctx: &LoweringContext, f: &StructField) -> hir::StructField {\n+pub fn lower_struct_field(lctx: &LoweringContext,\n+                          (index, f): (usize, &StructField))\n+                          -> hir::StructField {\n     Spanned {\n         node: hir::StructField_ {\n             id: f.node.id,\n-            name: f.node.ident().map(|ident| ident.name),\n+            name: f.node.ident().map(|ident| ident.name)\n+                                .unwrap_or(token::intern(&index.to_string())),\n             vis: lower_visibility(lctx, f.node.kind.visibility()),\n             ty: lower_ty(lctx, &f.node.ty),\n             attrs: lower_attrs(lctx, &f.node.attrs),"}, {"sha": "4aaca6b521c675e399b9ee4fb33188edbda1f343", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -938,7 +938,7 @@ impl<'a> State<'a> {\n                 try!(self.maybe_print_comment(field.span.lo));\n                 try!(self.print_outer_attributes(&field.node.attrs));\n                 try!(self.print_visibility(field.node.vis));\n-                try!(self.print_name(field.node.name.unwrap()));\n+                try!(self.print_name(field.node.name));\n                 try!(self.word_nbsp(\":\"));\n                 try!(self.print_type(&field.node.ty));\n                 try!(word(&mut self.s, \",\"));"}, {"sha": "c9cd03026b0397579606cfab9a3939f290e28998", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -283,10 +283,7 @@ impl LateLintPass for NonSnakeCase {\n     fn check_struct_def(&mut self, cx: &LateContext, s: &hir::VariantData,\n                         _: ast::Name, _: &hir::Generics, _: ast::NodeId) {\n         for sf in s.fields() {\n-            if let Some(name) = sf.node.name {\n-                self.check_snake_case(cx, \"structure field\", &name.as_str(),\n-                                      Some(sf.span));\n-            }\n+            self.check_snake_case(cx, \"structure field\", &sf.node.name.as_str(), Some(sf.span));\n         }\n     }\n }"}, {"sha": "ed34efadc4d8e15ac9c376e7d214322986f6277e", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -428,7 +428,7 @@ impl LateLintPass for MissingDoc {\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext, sf: &hir::StructField) {\n-        if sf.node.name.is_some() {\n+        if !sf.node.is_positional() {\n             if sf.node.vis == hir::Public || self.in_variant {\n                 let cur_struct_def = *self.struct_def_stack.last()\n                     .expect(\"empty struct_def_stack\");"}, {"sha": "bce83d33f9ffe304b7aae7a9b46c4c2cc8617d9f", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -48,8 +48,7 @@ use rbml::reader;\n use rbml;\n use serialize::Decodable;\n use syntax::attr;\n-use syntax::parse::token::{IdentInterner, special_idents};\n-use syntax::parse::token;\n+use syntax::parse::token::{self, IdentInterner};\n use syntax::ast;\n use syntax::abi::Abi;\n use syntax::codemap::{self, Span, BytePos, NO_EXPANSION};\n@@ -406,6 +405,7 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                                 cdata: Cmd,\n                                 doc: rbml::Doc,\n                                 tcx: &ty::ctxt<'tcx>) -> Vec<ty::FieldDefData<'tcx, 'tcx>> {\n+        let mut index = 0;\n         reader::tagged_docs(doc, tag_item_field).map(|f| {\n             let ff = item_family(f);\n             match ff {\n@@ -417,8 +417,9 @@ pub fn get_adt_def<'tcx>(intr: &IdentInterner,\n                                   struct_field_family_to_visibility(ff))\n         }).chain(reader::tagged_docs(doc, tag_item_unnamed_field).map(|f| {\n             let ff = item_family(f);\n-            ty::FieldDefData::new(item_def_id(f, cdata),\n-                                  special_idents::unnamed_field.name,\n+            let name = intr.intern(&index.to_string());\n+            index += 1;\n+            ty::FieldDefData::new(item_def_id(f, cdata), name,\n                                   struct_field_family_to_visibility(ff))\n         })).collect()\n     }\n@@ -1153,10 +1154,13 @@ fn struct_field_family_to_visibility(family: Family) -> hir::Visibility {\n pub fn get_struct_field_names(intr: &IdentInterner, cdata: Cmd, id: DefIndex)\n     -> Vec<ast::Name> {\n     let item = cdata.lookup_item(id);\n+    let mut index = 0;\n     reader::tagged_docs(item, tag_item_field).map(|an_item| {\n         item_name(intr, an_item)\n     }).chain(reader::tagged_docs(item, tag_item_unnamed_field).map(|_| {\n-        special_idents::unnamed_field.name\n+        let name = intr.intern(&index.to_string());\n+        index += 1;\n+        name\n     })).collect()\n }\n "}, {"sha": "d514844fc114610dc88e07a00b95d893cc9c2c59", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -46,7 +46,6 @@ use syntax::codemap::BytePos;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::errors::Handler;\n-use syntax::parse::token::special_idents;\n use syntax;\n use rbml::writer::Encoder;\n \n@@ -249,7 +248,7 @@ fn encode_parent_item(rbml_w: &mut Encoder, id: DefId) {\n fn encode_struct_fields(rbml_w: &mut Encoder,\n                         variant: ty::VariantDef) {\n     for f in &variant.fields {\n-        if f.name == special_idents::unnamed_field.name {\n+        if variant.is_tuple_struct() {\n             rbml_w.start_tag(tag_item_unnamed_field);\n         } else {\n             rbml_w.start_tag(tag_item_field);"}, {"sha": "f5f1d2bfba7d305a64ee734e51727e97fae7a100", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -380,12 +380,12 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 }\n \n                 // Record the def ID and fields of this struct.\n-                let named_fields = struct_def.fields()\n-                                             .iter()\n-                                             .filter_map(|f| f.node.name)\n-                                             .collect();\n+                let field_names = struct_def.fields()\n+                                            .iter()\n+                                            .map(|f| f.node.name)\n+                                            .collect();\n                 let item_def_id = self.ast_map.local_def_id(item.id);\n-                self.structs.insert(item_def_id, named_fields);\n+                self.structs.insert(item_def_id, field_names);\n \n                 parent\n             }"}, {"sha": "81dd514ca7839a4ef0d85728edf078c8c28b1356", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -21,7 +21,6 @@ use util::nodemap::FnvHashSet;\n \n use syntax::ast;\n use syntax::codemap::{self, Span};\n-use syntax::parse::token::special_idents;\n \n /// check_drop_impl confirms that the Drop implementation identfied by\n /// `drop_impl_did` is not any more specialized than the type it is\n@@ -299,7 +298,7 @@ pub fn check_safety_of_destructor_if_necessary<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>\n                     // no need for an additional note if the overflow\n                     // was somehow on the root.\n                 }\n-                TypeContext::ADT { def_id, variant, field, field_index } => {\n+                TypeContext::ADT { def_id, variant, field } => {\n                     let adt = tcx.lookup_adt_def(def_id);\n                     let variant_name = match adt.adt_kind() {\n                         ty::AdtKind::Enum => format!(\"enum {} variant {}\",\n@@ -308,17 +307,12 @@ pub fn check_safety_of_destructor_if_necessary<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>\n                         ty::AdtKind::Struct => format!(\"struct {}\",\n                                                        tcx.item_path_str(def_id))\n                     };\n-                    let field_name = if field == special_idents::unnamed_field.name {\n-                        format!(\"#{}\", field_index)\n-                    } else {\n-                        format!(\"`{}`\", field)\n-                    };\n                     span_note!(\n                         &mut err,\n                         span,\n                         \"overflowed on {} field {} type: {}\",\n                         variant_name,\n-                        field_name,\n+                        field,\n                         detected_on_typ);\n                 }\n             }\n@@ -338,7 +332,6 @@ enum TypeContext {\n         def_id: DefId,\n         variant: ast::Name,\n         field: ast::Name,\n-        field_index: usize\n     }\n }\n \n@@ -452,7 +445,7 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'tcx>(\n         ty::TyStruct(def, substs) | ty::TyEnum(def, substs) => {\n             let did = def.did;\n             for variant in &def.variants {\n-                for (i, field) in variant.fields.iter().enumerate() {\n+                for field in variant.fields.iter() {\n                     let fty = field.ty(tcx, substs);\n                     let fty = cx.rcx.fcx.resolve_type_vars_if_possible(\n                         cx.rcx.fcx.normalize_associated_types_in(cx.span, &fty));\n@@ -462,7 +455,6 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'tcx>(\n                             def_id: did,\n                             field: field.name,\n                             variant: variant.name,\n-                            field_index: i\n                         },\n                         fty,\n                         depth+1))"}, {"sha": "941900100bbaf2741e69b3f07770b8e5b36f3154", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -36,7 +36,6 @@ use middle::infer::{self, InferCtxt, TypeOrigin, new_infer_ctxt};\n use std::cell::RefCell;\n use std::rc::Rc;\n use syntax::codemap::Span;\n-use syntax::parse::token;\n use util::nodemap::{DefIdMap, FnvHashMap};\n use rustc::dep_graph::DepNode;\n use rustc::front::map as hir_map;\n@@ -449,13 +448,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                                    for a coercion between structures with one field \\\n                                    being coerced, but {} fields need coercions: {}\",\n                                    diff_fields.len(), diff_fields.iter().map(|&(i, a, b)| {\n-                                        let name = fields[i].name;\n-                                        format!(\"{} ({} to {})\",\n-                                                if name == token::special_names::unnamed_field {\n-                                                    i.to_string()\n-                                                } else {\n-                                                    name.to_string()\n-                                                }, a, b)\n+                                        format!(\"{} ({} to {})\", fields[i].name, a, b)\n                                    }).collect::<Vec<_>>().join(\", \"));\n                         return;\n                     }"}, {"sha": "f153f13ed88220cdcc3f3f0242dd70493b4cd2c1", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -978,22 +978,18 @@ fn convert_struct_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n     let mut seen_fields: FnvHashMap<ast::Name, Span> = FnvHashMap();\n     let fields = def.fields().iter().map(|f| {\n         let fid = tcx.map.local_def_id(f.node.id);\n-        if let Some(name) = f.node.name {\n-            let dup_span = seen_fields.get(&name).cloned();\n-            if let Some(prev_span) = dup_span {\n-                let mut err = struct_span_err!(tcx.sess, f.span, E0124,\n-                                               \"field `{}` is already declared\",\n-                                               name);\n-                span_note!(&mut err, prev_span, \"previously declared here\");\n-                err.emit();\n-            } else {\n-                seen_fields.insert(name, f.span);\n-            }\n-\n-            ty::FieldDefData::new(fid, name, f.node.vis)\n+        let dup_span = seen_fields.get(&f.node.name).cloned();\n+        if let Some(prev_span) = dup_span {\n+            let mut err = struct_span_err!(tcx.sess, f.span, E0124,\n+                                           \"field `{}` is already declared\",\n+                                           f.node.name);\n+            span_note!(&mut err, prev_span, \"previously declared here\");\n+            err.emit();\n         } else {\n-            ty::FieldDefData::new(fid, special_idents::unnamed_field.name, f.node.vis)\n+            seen_fields.insert(f.node.name, f.span);\n         }\n+\n+        ty::FieldDefData::new(fid, f.node.name, f.node.vis)\n     }).collect();\n     ty::VariantDefData {\n         did: did,"}, {"sha": "3a2e1ca0ccf936404c73caaac69d44324a4630bd", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -188,17 +188,15 @@ fn build_external_function(cx: &DocContext, tcx: &ty::ctxt, did: DefId) -> clean\n }\n \n fn build_struct(cx: &DocContext, tcx: &ty::ctxt, did: DefId) -> clean::Struct {\n-    use syntax::parse::token::special_idents::unnamed_field;\n-\n     let t = tcx.lookup_item_type(did);\n     let predicates = tcx.lookup_predicates(did);\n     let variant = tcx.lookup_adt_def(did).struct_variant();\n \n     clean::Struct {\n         struct_type: match &*variant.fields {\n             [] => doctree::Unit,\n-            [ref f] if f.name == unnamed_field.name => doctree::Newtype,\n-            [ref f, ..] if f.name == unnamed_field.name => doctree::Tuple,\n+            [_] if variant.kind == ty::VariantKind::Tuple => doctree::Newtype,\n+            [..] if variant.kind == ty::VariantKind::Tuple => doctree::Tuple,\n             _ => doctree::Plain,\n         },\n         generics: (&t.generics, &predicates, subst::TypeSpace).clean(cx),"}, {"sha": "36cc5378375cd6d586d793dd98143e2a26023c86", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -1735,15 +1735,12 @@ pub enum StructField {\n \n impl Clean<Item> for hir::StructField {\n     fn clean(&self, cx: &DocContext) -> Item {\n-        let (name, vis) = match self.node.kind {\n-            hir::NamedField(id, vis) => (Some(id), vis),\n-            hir::UnnamedField(vis) => (None, vis)\n-        };\n+        let name = if self.node.is_positional() { None } else { Some(self.node.name) };\n         Item {\n             name: name.clean(cx),\n             attrs: self.node.attrs.clean(cx),\n             source: self.span.clean(cx),\n-            visibility: Some(vis),\n+            visibility: Some(self.node.vis),\n             stability: get_stability(cx, cx.map.local_def_id(self.node.id)),\n             deprecation: get_deprecation(cx, cx.map.local_def_id(self.node.id)),\n             def_id: cx.map.local_def_id(self.node.id),\n@@ -1754,12 +1751,15 @@ impl Clean<Item> for hir::StructField {\n \n impl<'tcx> Clean<Item> for ty::FieldDefData<'tcx, 'static> {\n     fn clean(&self, cx: &DocContext) -> Item {\n-        use syntax::parse::token::special_idents::unnamed_field;\n         // FIXME: possible O(n^2)-ness! Not my fault.\n         let attr_map =\n             cx.tcx().sess.cstore.crate_struct_field_attrs(self.did.krate);\n \n-        let (name, attrs) = if self.name == unnamed_field.name {\n+        let is_positional = {\n+            let first = self.name.as_str().as_bytes()[0];\n+            first >= b'0' && first <= b'9'\n+        };\n+        let (name, attrs) = if is_positional {\n             (None, None)\n         } else {\n             (Some(self.name), Some(attr_map.get(&self.did).unwrap()))\n@@ -1884,7 +1884,6 @@ impl Clean<Item> for doctree::Variant {\n \n impl<'tcx> Clean<Item> for ty::VariantDefData<'tcx, 'static> {\n     fn clean(&self, cx: &DocContext) -> Item {\n-        // use syntax::parse::token::special_idents::unnamed_field;\n         let kind = match self.kind() {\n             ty::VariantKind::Unit => CLikeVariant,\n             ty::VariantKind::Tuple => {"}, {"sha": "6593b3ea532008b9afb4d947db396644bc521230", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b026a6e48ceadb2032b4982077fcdfab802cde5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=8b026a6e48ceadb2032b4982077fcdfab802cde5", "patch": "@@ -542,7 +542,7 @@ declare_special_idents_and_keywords! {\n         // outside of libsyntax\n         (7,                          clownshoe_abi,          \"__rust_abi\");\n         (8,                          opaque,                 \"<opaque>\");\n-        (9,                          unnamed_field,          \"<unnamed_field>\");\n+        (9,                          __unused1,              \"<__unused1>\");\n         (super::SELF_TYPE_KEYWORD_NAME_NUM, type_self,       \"Self\");\n         (11,                         prelude_import,         \"prelude_import\");\n     }"}]}