{"sha": "f613dc138b4012cf3d2eb40718fbcc7cf0a34039", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MTNkYzEzOGI0MDEyY2YzZDJlYjQwNzE4ZmJjYzdjZjBhMzQwMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-18T16:18:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-18T16:18:11Z"}, "message": "Auto merge of #56189 - rep-nop:keep_doc_test_executable, r=QuietMisdreavus\n\nrustdoc: Add option to persist doc test executables\n\nFixes #37048.\n\nThis is the initial version of the code so the doctest executables can be used for stuff like code coverage (specifically https://github.com/xd009642/tarpaulin/issues/13) the folders it goes into were just a first idea, so any better ones are welcome.\n\nRight now it creates a directory structure like:\n```\n  given_path/\n          |_____ <filename>_rs_<linenum>/\n          |_____ ...\n          |_____ <filename>_rs_<linenum>/\n                 |_____ rust_out\n\n```\nI couldn't figure out where it actually outputs the file w/ the name, I suspect its somewhere deeper in the compiler.\n\nIt also adds the unstable `--persist-doctests` flag to `rustdoc` that enables this behavior.", "tree": {"sha": "d77b35ab334deed793d6a03083ddda21d1ecd9bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d77b35ab334deed793d6a03083ddda21d1ecd9bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f613dc138b4012cf3d2eb40718fbcc7cf0a34039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f613dc138b4012cf3d2eb40718fbcc7cf0a34039", "html_url": "https://github.com/rust-lang/rust/commit/f613dc138b4012cf3d2eb40718fbcc7cf0a34039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f613dc138b4012cf3d2eb40718fbcc7cf0a34039/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "527b8d424392dd7d89cfaa4dfdaec4df226c8018", "url": "https://api.github.com/repos/rust-lang/rust/commits/527b8d424392dd7d89cfaa4dfdaec4df226c8018", "html_url": "https://github.com/rust-lang/rust/commit/527b8d424392dd7d89cfaa4dfdaec4df226c8018"}, {"sha": "f5413cd1e232837775bd8dfc803af4429e8c89c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5413cd1e232837775bd8dfc803af4429e8c89c4", "html_url": "https://github.com/rust-lang/rust/commit/f5413cd1e232837775bd8dfc803af4429e8c89c4"}], "stats": {"total": 81, "additions": 73, "deletions": 8}, "files": [{"sha": "d3eb8cb3d3b8ab69522dd75bf2c63f12cba84537", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f613dc138b4012cf3d2eb40718fbcc7cf0a34039/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/f613dc138b4012cf3d2eb40718fbcc7cf0a34039/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=f613dc138b4012cf3d2eb40718fbcc7cf0a34039", "patch": "@@ -417,3 +417,15 @@ JavaScript, and font files in a single location, rather than duplicating it once\n (grouping of crate docs generated into the same output directory, like with `cargo doc`). Per-crate\n files like the search index will still load from the documentation root, but anything that gets\n renamed with `--resource-suffix` will load from the given path.\n+\n+### `--persist-doctests`: persist doctest executables after running\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --test -Z unstable-options --persist-doctests target/rustdoctest\n+```\n+\n+This flag allows you to keep doctest executables around after they're compiled or run.\n+Usually, rustdoc will immediately discard a compiled doctest after it's been tested, but\n+with this option, you can keep those binaries around for farther testing.\n\\ No newline at end of file"}, {"sha": "635d071b8e061e91ff1d36c76bfdf5d8f55bfaaa", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f613dc138b4012cf3d2eb40718fbcc7cf0a34039/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f613dc138b4012cf3d2eb40718fbcc7cf0a34039/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=f613dc138b4012cf3d2eb40718fbcc7cf0a34039", "patch": "@@ -68,6 +68,9 @@ pub struct Options {\n     pub should_test: bool,\n     /// List of arguments to pass to the test harness, if running tests.\n     pub test_args: Vec<String>,\n+    /// Optional path to persist the doctest executables to, defaults to a\n+    /// temporary directory if not set.\n+    pub persist_doctests: Option<PathBuf>,\n \n     // Options that affect the documentation process\n \n@@ -121,6 +124,7 @@ impl fmt::Debug for Options {\n             .field(\"lint_cap\", &self.lint_cap)\n             .field(\"should_test\", &self.should_test)\n             .field(\"test_args\", &self.test_args)\n+            .field(\"persist_doctests\", &self.persist_doctests)\n             .field(\"default_passes\", &self.default_passes)\n             .field(\"manual_passes\", &self.manual_passes)\n             .field(\"display_warnings\", &self.display_warnings)\n@@ -431,6 +435,7 @@ impl Options {\n         let enable_index_page = matches.opt_present(\"enable-index-page\") || index_page.is_some();\n         let static_root_path = matches.opt_str(\"static-root-path\");\n         let generate_search_filter = !matches.opt_present(\"disable-per-crate-search\");\n+        let persist_doctests = matches.opt_str(\"persist-doctests\").map(PathBuf::from);\n \n         let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -456,6 +461,7 @@ impl Options {\n             manual_passes,\n             display_warnings,\n             crate_version,\n+            persist_doctests,\n             render_options: RenderOptions {\n                 output,\n                 external_html,"}, {"sha": "4bbc01d32de3a8e0d52a022eb96cf673490295f7", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f613dc138b4012cf3d2eb40718fbcc7cf0a34039/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f613dc138b4012cf3d2eb40718fbcc7cf0a34039/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f613dc138b4012cf3d2eb40718fbcc7cf0a34039", "patch": "@@ -341,6 +341,12 @@ fn opts() -> Vec<RustcOptGroup> {\n                       \"disable-per-crate-search\",\n                       \"disables generating the crate selector on the search box\")\n         }),\n+        unstable(\"persist-doctests\", |o| {\n+             o.optopt(\"\",\n+                       \"persist-doctests\",\n+                       \"Directory to persist doctest executables into\",\n+                       \"PATH\")\n+        }),\n     ]\n }\n "}, {"sha": "65a96e9001b26f171c28a47503ba132f444ab999", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f613dc138b4012cf3d2eb40718fbcc7cf0a34039/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f613dc138b4012cf3d2eb40718fbcc7cf0a34039/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=f613dc138b4012cf3d2eb40718fbcc7cf0a34039", "patch": "@@ -142,7 +142,7 @@ pub fn test(mut options: Options, diag: &errors::Handler) -> isize {\n                                        options.libs, options.codegen_options, options.externs,\n                                        true, opts, options.maybe_sysroot, None,\n                                        Some(options.input),\n-                                       options.linker, options.edition);\n+                                       options.linker, options.edition, options.persist_doctests);\n     collector.set_position(DUMMY_SP);\n     let codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n     let res = find_testable_code(&input_str, &mut collector, codes);"}, {"sha": "0b9fbc81da626a600824de2922d6e15ab1890dba", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f613dc138b4012cf3d2eb40718fbcc7cf0a34039/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f613dc138b4012cf3d2eb40718fbcc7cf0a34039/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f613dc138b4012cf3d2eb40718fbcc7cf0a34039", "patch": "@@ -120,7 +120,8 @@ pub fn run(mut options: Options) -> isize {\n             Some(source_map),\n             None,\n             options.linker,\n-            options.edition\n+            options.edition,\n+            options.persist_doctests,\n         );\n \n         {\n@@ -184,7 +185,8 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n             cg: CodegenOptions, externs: Externs,\n             should_panic: bool, no_run: bool, as_test_harness: bool,\n             compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n-            maybe_sysroot: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition) {\n+            maybe_sysroot: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition,\n+            persist_doctests: Option<PathBuf>) {\n     // The test harness wants its own `main` and top-level functions, so\n     // never wrap the test in `fn main() { ... }`.\n     let (test, line_offset) = make_test(test, Some(cratename), as_test_harness, opts);\n@@ -249,6 +251,20 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     let old = io::set_panic(Some(box Sink(data.clone())));\n     let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n \n+    enum DirState {\n+        Temp(tempfile::TempDir),\n+        Perm(PathBuf),\n+    }\n+\n+    impl DirState {\n+        fn path(&self) -> &std::path::Path {\n+            match self {\n+                DirState::Temp(t) => t.path(),\n+                DirState::Perm(p) => p.as_path(),\n+            }\n+        }\n+    }\n+\n     let (libdir, outdir, compile_result) = driver::spawn_thread_pool(sessopts, |sessopts| {\n         let source_map = Lrc::new(SourceMap::new(sessopts.file_path_mapping()));\n         let emitter = errors::emitter::EmitterWriter::new(box Sink(data.clone()),\n@@ -267,7 +283,26 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n         let outdir = Mutex::new(\n-            TempFileBuilder::new().prefix(\"rustdoctest\").tempdir().expect(\"rustdoc needs a tempdir\")\n+            if let Some(mut path) = persist_doctests {\n+                path.push(format!(\"{}_{}\",\n+                    filename\n+                        .to_string()\n+                        .rsplit('/')\n+                        .next()\n+                        .unwrap()\n+                        .replace(\".\", \"_\"),\n+                        line)\n+                );\n+                std::fs::create_dir_all(&path)\n+                    .expect(\"Couldn't create directory for doctest executables\");\n+\n+                DirState::Perm(path)\n+            } else {\n+                DirState::Temp(TempFileBuilder::new()\n+                                .prefix(\"rustdoctest\")\n+                                .tempdir()\n+                                .expect(\"rustdoc needs a tempdir\"))\n+            }\n         );\n         let libdir = sess.target_filesearch(PathKind::All).get_lib_path();\n         let mut control = driver::CompileController::basic();\n@@ -629,13 +664,15 @@ pub struct Collector {\n     filename: Option<PathBuf>,\n     linker: Option<PathBuf>,\n     edition: Edition,\n+    persist_doctests: Option<PathBuf>,\n }\n \n impl Collector {\n     pub fn new(cratename: String, cfgs: Vec<String>, libs: Vec<SearchPath>, cg: CodegenOptions,\n                externs: Externs, use_headers: bool, opts: TestOptions,\n                maybe_sysroot: Option<PathBuf>, source_map: Option<Lrc<SourceMap>>,\n-               filename: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition) -> Collector {\n+               filename: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition,\n+               persist_doctests: Option<PathBuf>) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -652,6 +689,7 @@ impl Collector {\n             filename,\n             linker,\n             edition,\n+            persist_doctests,\n         }\n     }\n \n@@ -695,6 +733,8 @@ impl Tester for Collector {\n         let maybe_sysroot = self.maybe_sysroot.clone();\n         let linker = self.linker.clone();\n         let edition = config.edition.unwrap_or(self.edition);\n+        let persist_doctests = self.persist_doctests.clone();\n+\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n@@ -727,7 +767,8 @@ impl Tester for Collector {\n                                  &opts,\n                                  maybe_sysroot,\n                                  linker,\n-                                 edition)\n+                                 edition,\n+                                 persist_doctests)\n                     }))\n                 } {\n                     Ok(()) => (),"}, {"sha": "8af05e9ca97b1d60fd9557cb76d290c9e1bb6491", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f613dc138b4012cf3d2eb40718fbcc7cf0a34039/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f613dc138b4012cf3d2eb40718fbcc7cf0a34039/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=f613dc138b4012cf3d2eb40718fbcc7cf0a34039", "patch": "@@ -12,7 +12,7 @@ error[E0425]: cannot find value `no` in this scope\n 3 | no\n   | ^^ not found in this scope\n \n-thread '$DIR/failed-doctest-output.rs - OtherStruct (line 17)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:319:13\n+thread '$DIR/failed-doctest-output.rs - OtherStruct (line 17)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:354:13\n note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n ---- $DIR/failed-doctest-output.rs - SomeStruct (line 11) stdout ----\n@@ -21,7 +21,7 @@ thread '$DIR/failed-doctest-output.rs - SomeStruct (line 11)' panicked at 'test\n thread 'main' panicked at 'oh no', $DIR/failed-doctest-output.rs:3:1\n note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n-', src/librustdoc/test.rs:354:17\n+', src/librustdoc/test.rs:389:17\n \n \n failures:"}]}