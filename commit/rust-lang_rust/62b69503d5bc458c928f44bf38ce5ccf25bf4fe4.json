{"sha": "62b69503d5bc458c928f44bf38ce5ccf25bf4fe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYjY5NTAzZDViYzQ1OGM5MjhmNDRiZjM4Y2U1Y2NmMjViZjRmZTQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-23T20:51:56Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-23T20:51:56Z"}, "message": "Stop using project_lval_ty_from_slot for lval_ty; cover residual un-caught cases in type.ml.", "tree": {"sha": "e71c90d763b20fc28799d0922ccc34d37ce7bb70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e71c90d763b20fc28799d0922ccc34d37ce7bb70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62b69503d5bc458c928f44bf38ce5ccf25bf4fe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62b69503d5bc458c928f44bf38ce5ccf25bf4fe4", "html_url": "https://github.com/rust-lang/rust/commit/62b69503d5bc458c928f44bf38ce5ccf25bf4fe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62b69503d5bc458c928f44bf38ce5ccf25bf4fe4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac228a59ce987cf940ffeabc313ee3c405abb5e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac228a59ce987cf940ffeabc313ee3c405abb5e3", "html_url": "https://github.com/rust-lang/rust/commit/ac228a59ce987cf940ffeabc313ee3c405abb5e3"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "8196d568a509cbfe5f2652e60e6d08dd6859007e", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62b69503d5bc458c928f44bf38ce5ccf25bf4fe4/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/62b69503d5bc458c928f44bf38ce5ccf25bf4fe4/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=62b69503d5bc458c928f44bf38ce5ccf25bf4fe4", "patch": "@@ -1206,18 +1206,10 @@ let rec project_lval_ty_from_slot (cx:ctxt) (lval:Ast.lval) : Ast.ty =\n \n \n let lval_ty (cx:ctxt) (lval:Ast.lval) : Ast.ty =\n-  (*\n-    FIXME: The correct definition of this function is just: \n-    \n-       Hashtbl.find cx.ctxt_all_lval_types (lval_base_id lval)\n-    \n-    However, since the typechecker is not presently handling\n-    every stmt, we have a fallback mode to \"pick out the slot\n-    type and hope for the best\".\n-  *)\n   match htab_search cx.ctxt_all_lval_types (lval_base_id lval) with\n       Some t -> t\n-    | None -> project_lval_ty_from_slot cx lval\n+    | None -> bugi cx (lval_base_id lval) \"no type for lval %a\"\n+        Ast.sprintf_lval lval\n ;;\n \n let lval_is_static (cx:ctxt) (lval:Ast.lval) : bool ="}, {"sha": "9d74959a7ac69578065772f6628af20a3e747a62", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/62b69503d5bc458c928f44bf38ce5ccf25bf4fe4/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/62b69503d5bc458c928f44bf38ce5ccf25bf4fe4/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=62b69503d5bc458c928f44bf38ce5ccf25bf4fe4", "patch": "@@ -509,7 +509,8 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n     end;\n     if n_boxes > 1 then\n       (* TODO: allow more than one level of automatic dereference *)\n-      Common.err None \"sorry, only one level of automatic dereference is \\\n+      Common.unimpl (Some (Semant.lval_base_id lval))\n+        \"sorry, only one level of automatic dereference is \\\n         implemented; please add explicit dereference operators\";\n     Hashtbl.replace cx.Semant.ctxt_auto_deref_lval lval_id (n_boxes > 0);\n \n@@ -690,13 +691,19 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n \n         | Ast.STMT_new_str (dst, _) -> infer_lval Ast.TY_str dst\n \n-        | Ast.STMT_new_port _ -> ()  (* we can't actually typecheck this *)\n+        | Ast.STMT_new_port dst ->\n+            (* we can't actually typecheck this *)\n+            ignore (check_lval dst);\n+            ()\n \n         | Ast.STMT_new_chan (dst, Some port) ->\n             let ty = Ast.TY_chan (demand_port (check_lval port)) in\n             infer_lval ty dst\n \n-        | Ast.STMT_new_chan (_, None) -> ()  (* can't check this either *)\n+        | Ast.STMT_new_chan (dst, None) ->\n+            (* can't check this either *)\n+            ignore (check_lval dst);\n+            ()\n \n         | Ast.STMT_new_box (dst, mut, src) ->\n             let ty = Ast.TY_box (maybe_mutable mut (check_atom src)) in\n@@ -818,8 +825,13 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n             let value_ty = demand_chan (check_lval chan) in\n             infer_lval ~mut:Ast.MUT_immutable value_ty value\n \n-        | Ast.STMT_log _ | Ast.STMT_note _ | Ast.STMT_prove _ ->\n-            () (* always well-typed *)\n+        | Ast.STMT_log x | Ast.STMT_note x ->\n+            (* always well-typed, just record type in passing. *)\n+            ignore (check_atom x)\n+\n+        | Ast.STMT_prove _ ->\n+            (* always well-typed, static. Ignore. *)\n+            ()\n \n         | Ast.STMT_check (_, calls) -> check_check_calls calls\n "}]}