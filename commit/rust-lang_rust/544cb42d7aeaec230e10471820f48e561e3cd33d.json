{"sha": "544cb42d7aeaec230e10471820f48e561e3cd33d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NGNiNDJkN2FlYWVjMjMwZTEwNDcxODIwZjQ4ZTU2MWUzY2QzM2Q=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-02-06T08:02:59Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-02-07T07:44:26Z"}, "message": "Hoist path::Display on top of from_utf8_lossy()", "tree": {"sha": "efdf176acd56455cf4ee96a0019761149e0b3290", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efdf176acd56455cf4ee96a0019761149e0b3290"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/544cb42d7aeaec230e10471820f48e561e3cd33d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/544cb42d7aeaec230e10471820f48e561e3cd33d", "html_url": "https://github.com/rust-lang/rust/commit/544cb42d7aeaec230e10471820f48e561e3cd33d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/544cb42d7aeaec230e10471820f48e561e3cd33d/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0b89a57d5d548155d8a37f5e4b9f11a471bb075", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0b89a57d5d548155d8a37f5e4b9f11a471bb075", "html_url": "https://github.com/rust-lang/rust/commit/b0b89a57d5d548155d8a37f5e4b9f11a471bb075"}], "stats": {"total": 27, "additions": 2, "deletions": 25}, "files": [{"sha": "ccbb31da24f5ce8de86b57d3192afff8248f3b0d", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/544cb42d7aeaec230e10471820f48e561e3cd33d/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/544cb42d7aeaec230e10471820f48e561e3cd33d/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=544cb42d7aeaec230e10471820f48e561e3cd33d", "patch": "@@ -547,10 +547,10 @@ impl<'a, P: GenericPath> ToStr for Display<'a, P> {\n         if self.filename {\n             match self.path.filename() {\n                 None => ~\"\",\n-                Some(v) => from_utf8_with_replacement(v)\n+                Some(v) => str::from_utf8_lossy(v)\n             }\n         } else {\n-            from_utf8_with_replacement(self.path.as_vec())\n+            str::from_utf8_lossy(self.path.as_vec())\n         }\n     }\n }\n@@ -635,29 +635,6 @@ fn contains_nul(v: &[u8]) -> bool {\n     v.iter().any(|&x| x == 0)\n }\n \n-#[inline(always)]\n-fn from_utf8_with_replacement(mut v: &[u8]) -> ~str {\n-    // FIXME (#9516): Don't decode utf-8 manually here once we have a good way to do it in str\n-    // This is a truly horrifically bad implementation, done as a functionality stopgap until\n-    // we have a proper utf-8 decoder. I don't really want to write one here.\n-    static REPLACEMENT_CHAR: char = '\\uFFFD';\n-\n-    let mut s = str::with_capacity(v.len());\n-    while !v.is_empty() {\n-        let w = str::utf8_char_width(v[0]);\n-        if w == 0u {\n-            s.push_char(REPLACEMENT_CHAR);\n-            v = v.slice_from(1);\n-        } else if v.len() < w || !str::is_utf8(v.slice_to(w)) {\n-            s.push_char(REPLACEMENT_CHAR);\n-            v = v.slice_from(1);\n-        } else {\n-            s.push_str(unsafe { ::cast::transmute(v.slice_to(w)) });\n-            v = v.slice_from(w);\n-        }\n-    }\n-    s\n-}\n #[cfg(test)]\n mod tests {\n     use prelude::*;"}]}