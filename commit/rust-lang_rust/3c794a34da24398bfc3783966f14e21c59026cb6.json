{"sha": "3c794a34da24398bfc3783966f14e21c59026cb6", "node_id": "C_kwDOAAsO6NoAKDNjNzk0YTM0ZGEyNDM5OGJmYzM3ODM5NjZmMTRlMjFjNTkwMjZjYjY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-25T09:27:49Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-25T09:27:49Z"}, "message": "Go to declaration goes to assoc items of trait declarations", "tree": {"sha": "f61a61fdbfc2e2c541f7b04a5f94e75b581979a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f61a61fdbfc2e2c541f7b04a5f94e75b581979a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c794a34da24398bfc3783966f14e21c59026cb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c794a34da24398bfc3783966f14e21c59026cb6", "html_url": "https://github.com/rust-lang/rust/commit/3c794a34da24398bfc3783966f14e21c59026cb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c794a34da24398bfc3783966f14e21c59026cb6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fba39f0c02e43a0503a64b1ed4b36a05d8a1658", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fba39f0c02e43a0503a64b1ed4b36a05d8a1658", "html_url": "https://github.com/rust-lang/rust/commit/9fba39f0c02e43a0503a64b1ed4b36a05d8a1658"}], "stats": {"total": 90, "additions": 82, "deletions": 8}, "files": [{"sha": "5c17b7f41586d10b4ca7d1d9e24bfbc3d35bf2af", "filename": "crates/ide/src/goto_declaration.rs", "status": "modified", "additions": 82, "deletions": 8, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/3c794a34da24398bfc3783966f14e21c59026cb6/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c794a34da24398bfc3783966f14e21c59026cb6/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=3c794a34da24398bfc3783966f14e21c59026cb6", "patch": "@@ -1,18 +1,22 @@\n-use hir::Semantics;\n+use hir::{AsAssocItem, Semantics};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n     RootDatabase,\n };\n use syntax::{ast, match_ast, AstNode, SyntaxKind::*, T};\n \n-use crate::{FilePosition, NavigationTarget, RangeInfo};\n+use crate::{\n+    goto_definition::goto_definition, navigation_target::TryToNav, FilePosition, NavigationTarget,\n+    RangeInfo,\n+};\n \n // Feature: Go to Declaration\n //\n // Navigates to the declaration of an identifier.\n //\n-// This is currently the same as `Go to Definition` with the exception of outline modules where it\n-// will navigate to the `mod name;` item declaration.\n+// This is the same as `Go to Definition` with the following exceptions:\n+// - outline modules will navigate to the `mod name;` item declaration\n+// - trait assoc items will navigate to the assoc item of the trait declaration opposed to the trait impl\n pub(crate) fn goto_declaration(\n     db: &RootDatabase,\n     position: FilePosition,\n@@ -41,16 +45,28 @@ pub(crate) fn goto_declaration(\n                     _ => None\n                 }\n             };\n-            match def? {\n+            let assoc = match def? {\n                 Definition::Module(module) => {\n-                    Some(NavigationTarget::from_module_to_decl(db, module))\n+                    return Some(NavigationTarget::from_module_to_decl(db, module))\n                 }\n+                Definition::Const(c) => c.as_assoc_item(db),\n+                Definition::TypeAlias(ta) => ta.as_assoc_item(db),\n+                Definition::Function(f) => f.as_assoc_item(db),\n                 _ => None,\n-            }\n+            }?;\n+\n+            let trait_ = assoc.containing_trait_impl(db)?;\n+            let name = Some(assoc.name(db)?);\n+            let item = trait_.items(db).into_iter().find(|it| it.name(db) == name)?;\n+            item.try_to_nav(db)\n         })\n         .collect();\n \n-    Some(RangeInfo::new(range, info))\n+    if info.is_empty() {\n+        goto_definition(db, position)\n+    } else {\n+        Some(RangeInfo::new(range, info))\n+    }\n }\n \n #[cfg(test)]\n@@ -109,4 +125,62 @@ mod foo {\n \"#,\n         )\n     }\n+\n+    #[test]\n+    fn goto_decl_goto_def_fallback() {\n+        check(\n+            r#\"\n+struct Foo;\n+    // ^^^\n+impl Foo$0 {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_decl_assoc_item_no_impl_item() {\n+        check(\n+            r#\"\n+trait Trait {\n+    const C: () = ();\n+       // ^\n+}\n+impl Trait for () {}\n+\n+fn main() {\n+    <()>::C$0;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_decl_assoc_item() {\n+        check(\n+            r#\"\n+trait Trait {\n+    const C: () = ();\n+       // ^\n+}\n+impl Trait for () {\n+    const C: () = ();\n+}\n+\n+fn main() {\n+    <()>::C$0;\n+}\n+\"#,\n+        );\n+        check(\n+            r#\"\n+trait Trait {\n+    const C: () = ();\n+       // ^\n+}\n+impl Trait for () {\n+    const C$0: () = ();\n+}\n+\"#,\n+        );\n+    }\n }"}]}