{"sha": "e844b1570a4ddf2ece7ed7c092eaa136ce1d3878", "node_id": "C_kwDOAAsO6NoAKGU4NDRiMTU3MGE0ZGRmMmVjZTdlZDdjMDkyZWFhMTM2Y2UxZDM4Nzg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-05T11:20:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-05T11:20:05Z"}, "message": "Merge #11574\n\n11574: Small refactor text edit 2nd r=Veykril a=HansAuger\n\nSome more changes to text_edit. Basic idea is to make `Indel` implement `PartialOrd` to take advantage of some sweet sweet iteration, most notably itertool's `merge`.\r\n\r\n\n\nCo-authored-by: Moritz Vetter <mv@3yourmind.com>", "tree": {"sha": "543b3bc70050f598ba95e7146838f0a6eeaa3598", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/543b3bc70050f598ba95e7146838f0a6eeaa3598"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e844b1570a4ddf2ece7ed7c092eaa136ce1d3878", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiI0dlCRBK7hj4Ov3rIwAAaeEIAKsKWEdE/0xRvMo/esOo+EvX\nLR1qtEicBLpVnn5+tZ5xmpEgb/P2wliZ/O8tdDeBGDd/f1V1zZFJlSGqhGh8wTvx\nMatL5DXgHzq4TrHYuA8Cc+h6MZzHRokMflC+DnnUJc6biD0RVEZyNq95d9FODq28\nmYcFHqsI/6qIKopzKR/XtUtf7/c+Ap7GZXpV1+73gq1NXZ6c1+aIIhH2wqpr8FHD\nI/T27NS33a1ySjGWACsVhF7jXLF0S/GqQ7rwl8HCTWocmUSdJkQ5N8u2yyFZ7Xuj\nlJZqPg4/QdT8T6VtQquuHKIL3T2VdnK4RVqmKWyXEQXqg/KeOcHkFkiN32hyu9s=\n=iRng\n-----END PGP SIGNATURE-----\n", "payload": "tree 543b3bc70050f598ba95e7146838f0a6eeaa3598\nparent 79a7ba0bdf30699163b23094818605b34afbddc8\nparent 96c16bc3827693cef9108d684d63b17a8fe9f128\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1646479205 +0000\ncommitter GitHub <noreply@github.com> 1646479205 +0000\n\nMerge #11574\n\n11574: Small refactor text edit 2nd r=Veykril a=HansAuger\n\nSome more changes to text_edit. Basic idea is to make `Indel` implement `PartialOrd` to take advantage of some sweet sweet iteration, most notably itertool's `merge`.\r\n\r\n\n\nCo-authored-by: Moritz Vetter <mv@3yourmind.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e844b1570a4ddf2ece7ed7c092eaa136ce1d3878", "html_url": "https://github.com/rust-lang/rust/commit/e844b1570a4ddf2ece7ed7c092eaa136ce1d3878", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e844b1570a4ddf2ece7ed7c092eaa136ce1d3878/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79a7ba0bdf30699163b23094818605b34afbddc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/79a7ba0bdf30699163b23094818605b34afbddc8", "html_url": "https://github.com/rust-lang/rust/commit/79a7ba0bdf30699163b23094818605b34afbddc8"}, {"sha": "96c16bc3827693cef9108d684d63b17a8fe9f128", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c16bc3827693cef9108d684d63b17a8fe9f128", "html_url": "https://github.com/rust-lang/rust/commit/96c16bc3827693cef9108d684d63b17a8fe9f128"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "3f2ee2c572711243735b6e598c111ba41de7478b", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e844b1570a4ddf2ece7ed7c092eaa136ce1d3878/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e844b1570a4ddf2ece7ed7c092eaa136ce1d3878/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e844b1570a4ddf2ece7ed7c092eaa136ce1d3878", "patch": "@@ -1668,6 +1668,7 @@ checksum = \"288cb548dbe72b652243ea797201f3d481a0609a967980fcc5b2315ea811560a\"\n name = \"text_edit\"\n version = \"0.0.0\"\n dependencies = [\n+ \"itertools\",\n  \"text-size\",\n ]\n "}, {"sha": "dae69e265d7f5dd7a11f72c56395f104d84e707f", "filename": "crates/text_edit/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e844b1570a4ddf2ece7ed7c092eaa136ce1d3878/crates%2Ftext_edit%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e844b1570a4ddf2ece7ed7c092eaa136ce1d3878/crates%2Ftext_edit%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2FCargo.toml?ref=e844b1570a4ddf2ece7ed7c092eaa136ce1d3878", "patch": "@@ -10,4 +10,5 @@ rust-version = \"1.57\"\n doctest = false\n \n [dependencies]\n+itertools = \"0.10.0\"\n text-size = \"1.0.0\""}, {"sha": "1a6add057896a9ac0ae9d7bce2a876f45e3b8e59", "filename": "crates/text_edit/src/lib.rs", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e844b1570a4ddf2ece7ed7c092eaa136ce1d3878/crates%2Ftext_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e844b1570a4ddf2ece7ed7c092eaa136ce1d3878/crates%2Ftext_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2Fsrc%2Flib.rs?ref=e844b1570a4ddf2ece7ed7c092eaa136ce1d3878", "patch": "@@ -4,6 +4,8 @@\n //! so `TextEdit` is the ultimate representation of the work done by\n //! rust-analyzer.\n \n+use itertools::Itertools;\n+use std::cmp::max;\n pub use text_size::{TextRange, TextSize};\n \n /// `InsertDelete` -- a single \"atomic\" change to text\n@@ -91,13 +93,15 @@ impl TextEdit {\n         }\n \n         let text_size = TextSize::of(&*text);\n-        let mut total_len = text_size.clone();\n+        let mut total_len = text_size;\n+        let mut max_total_len = text_size.clone();\n         for indel in &self.indels {\n             total_len += TextSize::of(&indel.insert);\n             total_len -= indel.delete.len();\n+            max_total_len = max(max_total_len, total_len);\n         }\n \n-        if let Some(additional) = total_len.checked_sub(text_size.into()) {\n+        if let Some(additional) = max_total_len.checked_sub(text_size.into()) {\n             text.reserve(additional.into());\n         }\n \n@@ -109,16 +113,14 @@ impl TextEdit {\n     }\n \n     pub fn union(&mut self, other: TextEdit) -> Result<(), TextEdit> {\n-        // FIXME: can be done without allocating intermediate vector\n-        let mut all = self.iter().chain(other.iter()).collect::<Vec<_>>();\n-        if !check_disjoint_and_sort(&mut all) {\n+        let iter_merge =\n+            self.iter().merge_by(other.iter(), |l, r| l.delete.start() <= r.delete.start());\n+        if !check_disjoint(&mut iter_merge.clone()) {\n             return Err(other);\n         }\n \n-        self.indels.extend(other.indels);\n-        check_disjoint_and_sort(&mut self.indels);\n         // Only dedup deletions and replacements, keep all insertions\n-        self.indels.dedup_by(|a, b| a == b && !a.delete.is_empty());\n+        self.indels = iter_merge.dedup_by(|a, b| a == b && !a.delete.is_empty()).cloned().collect();\n         Ok(())\n     }\n \n@@ -188,14 +190,17 @@ impl TextEditBuilder {\n fn assert_disjoint_or_equal(indels: &mut [Indel]) {\n     assert!(check_disjoint_and_sort(indels));\n }\n-// FIXME: Remove the impl Bound here, it shouldn't be needed\n-fn check_disjoint_and_sort(indels: &mut [impl std::borrow::Borrow<Indel>]) -> bool {\n-    indels.sort_by_key(|indel| (indel.borrow().delete.start(), indel.borrow().delete.end()));\n-    indels.iter().zip(indels.iter().skip(1)).all(|(l, r)| {\n-        let l = l.borrow();\n-        let r = r.borrow();\n-        l.delete.end() <= r.delete.start() || l == r\n-    })\n+\n+fn check_disjoint_and_sort(indels: &mut [Indel]) -> bool {\n+    indels.sort_by_key(|indel| (indel.delete.start(), indel.delete.end()));\n+    check_disjoint(&mut indels.iter())\n+}\n+\n+fn check_disjoint<'a, I>(indels: &mut I) -> bool\n+where\n+    I: std::iter::Iterator<Item = &'a Indel> + Clone,\n+{\n+    indels.clone().zip(indels.skip(1)).all(|(l, r)| l.delete.end() <= r.delete.start() || l == r)\n }\n \n #[cfg(test)]\n@@ -232,6 +237,22 @@ mod tests {\n         assert_eq!(edit1.indels.len(), 3);\n     }\n \n+    #[test]\n+    fn test_union_with_duplicates() {\n+        let mut builder1 = TextEditBuilder::default();\n+        builder1.delete(range(7, 11));\n+        builder1.delete(range(13, 17));\n+\n+        let mut builder2 = TextEditBuilder::default();\n+        builder2.delete(range(1, 5));\n+        builder2.delete(range(13, 17));\n+\n+        let mut edit1 = builder1.finish();\n+        let edit2 = builder2.finish();\n+        assert!(edit1.union(edit2).is_ok());\n+        assert_eq!(edit1.indels.len(), 3);\n+    }\n+\n     #[test]\n     fn test_union_panics() {\n         let mut edit1 = TextEdit::delete(range(7, 11));"}]}