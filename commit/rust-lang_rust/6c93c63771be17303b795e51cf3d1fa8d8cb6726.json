{"sha": "6c93c63771be17303b795e51cf3d1fa8d8cb6726", "node_id": "C_kwDOAAsO6NoAKDZjOTNjNjM3NzFiZTE3MzAzYjc5NWU1MWNmM2QxZmE4ZDhjYjY3MjY", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2023-03-31T20:32:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-31T20:32:49Z"}, "message": "Rollup merge of #109443 - GuillaumeGomez:doc-primitive-hard-error, r=notriddle\n\nMove `doc(primitive)` future incompat warning to `invalid_doc_attributes`\n\nFixes #88070.\n\nIt's been a while since this was turned into a \"future incompatible lint\" so I think we can now turn it into a hard error without problem.\n\nr? `@jyn514`", "tree": {"sha": "74f65ff5a0c2f91fdbc040ec0957b88023cfa8b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74f65ff5a0c2f91fdbc040ec0957b88023cfa8b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c93c63771be17303b795e51cf3d1fa8d8cb6726", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkJ0NxCRBK7hj4Ov3rIwAA/hIIAB8JcagNPRM448MC5PEbtpX3\nzS16YpcBtnAKqwWI0KocreiGDQUk6WfaInbC9fF28CqW/O+ED6bD2+8/mrWdxVWo\n0JNDBaXMWQGQ+3Nd0Nf5IrxFooi4KHuqh+V/OCweb1YJT6S869OM8BD0R42Q4Srb\nuuEhpp4cl0+UeMrtoBOlwx9Z4rillu0K8F7esHFsbx0/4TvF8nb513/s+paWVHBm\nKmExADAAbdpnXSHAhhhFi8WGYtRPTFYprnN7xZlmH5+znGgIhCeo8IZLW2yw+Oc+\nkVN6ncA+qi/sj4o29oyKGamFFJuGcsCLbtnBRwPoK0AtHQBlK2U9S39t2ePvvOo=\n=20lV\n-----END PGP SIGNATURE-----\n", "payload": "tree 74f65ff5a0c2f91fdbc040ec0957b88023cfa8b4\nparent 8fe5b56b66ebd1a125275b6219301cf797fc5ff9\nparent f6035fb0fa68de45befc032e35bb68592ce1d029\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1680294769 +0200\ncommitter GitHub <noreply@github.com> 1680294769 +0200\n\nRollup merge of #109443 - GuillaumeGomez:doc-primitive-hard-error, r=notriddle\n\nMove `doc(primitive)` future incompat warning to `invalid_doc_attributes`\n\nFixes #88070.\n\nIt's been a while since this was turned into a \"future incompatible lint\" so I think we can now turn it into a hard error without problem.\n\nr? `@jyn514`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c93c63771be17303b795e51cf3d1fa8d8cb6726", "html_url": "https://github.com/rust-lang/rust/commit/6c93c63771be17303b795e51cf3d1fa8d8cb6726", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c93c63771be17303b795e51cf3d1fa8d8cb6726/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fe5b56b66ebd1a125275b6219301cf797fc5ff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe5b56b66ebd1a125275b6219301cf797fc5ff9", "html_url": "https://github.com/rust-lang/rust/commit/8fe5b56b66ebd1a125275b6219301cf797fc5ff9"}, {"sha": "f6035fb0fa68de45befc032e35bb68592ce1d029", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6035fb0fa68de45befc032e35bb68592ce1d029", "html_url": "https://github.com/rust-lang/rust/commit/f6035fb0fa68de45befc032e35bb68592ce1d029"}], "stats": {"total": 382, "additions": 217, "deletions": 165}, "files": [{"sha": "b62da63644d20e3ae828fb2ec4960e7f93e39ac4", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -225,7 +225,7 @@ declare_features! (\n     (active, rustc_allow_const_fn_unstable, \"1.49.0\", Some(69399), None),\n     /// Allows using compiler's own crates.\n     (active, rustc_private, \"1.0.0\", Some(27812), None),\n-    /// Allows using internal rustdoc features like `doc(primitive)` or `doc(keyword)`.\n+    /// Allows using internal rustdoc features like `doc(keyword)`.\n     (active, rustdoc_internals, \"1.58.0\", Some(90418), None),\n     /// Allows using the `rustdoc::missing_doc_code_examples` lint\n     (active, rustdoc_missing_doc_code_examples, \"1.31.0\", Some(101730), None),"}, {"sha": "c77292fdd1647d630407cafafe14482f17760764", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -778,6 +778,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         definition of a trait, it's currently in experimental form and should be changed before \\\n         being exposed outside of the std\"\n     ),\n+    rustc_attr!(\n+        rustc_doc_primitive, Normal, template!(NameValueStr: \"primitive name\"), ErrorFollowing,\n+        r#\"`rustc_doc_primitive` is a rustc internal attribute\"#,\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Testing:"}, {"sha": "b354dca7cc44c1a80830775280a187100c216d52", "filename": "compiler/rustc_passes/messages.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/compiler%2Frustc_passes%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/compiler%2Frustc_passes%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fmessages.ftl?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -148,9 +148,6 @@ passes_doc_test_unknown =\n passes_doc_test_takes_list =\n     `#[doc(test(...)]` takes a list of attributes\n \n-passes_doc_primitive =\n-    `doc(primitive)` should never have been stable\n-\n passes_doc_cfg_hide_takes_list =\n     `#[doc(cfg_hide(...)]` takes a list of attributes\n "}, {"sha": "80a93da2b45c4bc8327f0a7a97c163f615d2cb78", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1109,17 +1109,6 @@ impl CheckAttrVisitor<'_> {\n                             }\n                         }\n \n-                        sym::primitive => {\n-                            if !self.tcx.features().rustdoc_internals {\n-                                self.tcx.emit_spanned_lint(\n-                                    INVALID_DOC_ATTRIBUTES,\n-                                    hir_id,\n-                                    i_meta.span,\n-                                    errors::DocPrimitive,\n-                                );\n-                            }\n-                        }\n-\n                         _ => {\n                             let path = rustc_ast_pretty::pprust::path_to_string(&i_meta.path);\n                             if i_meta.has_name(sym::spotlight) {"}, {"sha": "139ba8c9677561267145e77e8c303b5f5596d4b4", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -288,10 +288,6 @@ pub struct DocTestTakesList;\n #[diag(passes_doc_cfg_hide_takes_list)]\n pub struct DocCfgHideTakesList;\n \n-#[derive(LintDiagnostic)]\n-#[diag(passes_doc_primitive)]\n-pub struct DocPrimitive;\n-\n #[derive(LintDiagnostic)]\n #[diag(passes_doc_test_unknown_any)]\n pub struct DocTestUnknownAny {"}, {"sha": "9eae99be2e901a7ca4520088049b60d18b9a74fa", "filename": "compiler/rustc_resolve/src/rustdoc.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -339,12 +339,14 @@ pub fn inner_docs(attrs: &[ast::Attribute]) -> bool {\n     attrs.iter().find(|a| a.doc_str().is_some()).map_or(true, |a| a.style == ast::AttrStyle::Inner)\n }\n \n-/// Has `#[doc(primitive)]` or `#[doc(keyword)]`.\n+/// Has `#[rustc_doc_primitive]` or `#[doc(keyword)]`.\n pub fn has_primitive_or_keyword_docs(attrs: &[ast::Attribute]) -> bool {\n     for attr in attrs {\n-        if attr.has_name(sym::doc) && let Some(items) = attr.meta_item_list() {\n+        if attr.has_name(sym::rustc_doc_primitive) {\n+            return true;\n+        } else if attr.has_name(sym::doc) && let Some(items) = attr.meta_item_list() {\n             for item in items {\n-                if item.has_name(sym::primitive) || item.has_name(sym::keyword) {\n+                if item.has_name(sym::keyword) {\n                     return true;\n                 }\n             }"}, {"sha": "6de226bbb68b055a4118cff50d9b96c65bfd16f3", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1246,6 +1246,7 @@ symbols! {\n         rustc_diagnostic_macros,\n         rustc_dirty,\n         rustc_do_not_const_check,\n+        rustc_doc_primitive,\n         rustc_dummy,\n         rustc_dump_env_program_clauses,\n         rustc_dump_program_clauses,"}, {"sha": "bf8339335dd7cdf8d9bcb90d3cffca2ec782f981", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,7 +1,8 @@\n // `library/{std,core}/src/primitive_docs.rs` should have the same contents.\n // These are different files so that relative links work properly without\n // having to have `CARGO_PKG_NAME` set, but conceptually they should always be the same.\n-#[doc(primitive = \"bool\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"bool\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"bool\")]\n #[doc(alias = \"true\")]\n #[doc(alias = \"false\")]\n /// The boolean type.\n@@ -63,7 +64,8 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_bool {}\n \n-#[doc(primitive = \"never\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"never\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"never\")]\n #[doc(alias = \"!\")]\n //\n /// The `!` type, also called \"never\".\n@@ -274,7 +276,8 @@ mod prim_bool {}\n #[unstable(feature = \"never_type\", issue = \"35121\")]\n mod prim_never {}\n \n-#[doc(primitive = \"char\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"char\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"char\")]\n #[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n@@ -398,7 +401,8 @@ mod prim_never {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_char {}\n \n-#[doc(primitive = \"unit\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"unit\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"unit\")]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -460,7 +464,8 @@ impl Copy for () {\n     // empty\n }\n \n-#[doc(primitive = \"pointer\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"pointer\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"pointer\")]\n #[doc(alias = \"ptr\")]\n #[doc(alias = \"*\")]\n #[doc(alias = \"*const\")]\n@@ -577,7 +582,8 @@ impl Copy for () {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer {}\n \n-#[doc(primitive = \"array\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"array\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"array\")]\n #[doc(alias = \"[]\")]\n #[doc(alias = \"[T;N]\")] // unfortunately, rustdoc doesn't have fuzzy search for aliases\n #[doc(alias = \"[T; N]\")]\n@@ -778,7 +784,8 @@ mod prim_pointer {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n-#[doc(primitive = \"slice\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"slice\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"slice\")]\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n@@ -870,7 +877,8 @@ mod prim_array {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice {}\n \n-#[doc(primitive = \"str\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"str\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"str\")]\n /// String slices.\n ///\n /// *[See also the `std::str` module](crate::str).*\n@@ -937,7 +945,8 @@ mod prim_slice {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_str {}\n \n-#[doc(primitive = \"tuple\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"tuple\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"tuple\")]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -1081,7 +1090,8 @@ impl<T: Copy> Copy for (T,) {\n     // empty\n }\n \n-#[doc(primitive = \"f32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"f32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f32\")]\n /// A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008).\n ///\n /// This type can represent a wide range of decimal numbers, like `3.5`, `27`,\n@@ -1147,7 +1157,8 @@ impl<T: Copy> Copy for (T,) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f32 {}\n \n-#[doc(primitive = \"f64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"f64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f64\")]\n /// A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008).\n ///\n /// This type is very similar to [`f32`], but has increased\n@@ -1162,67 +1173,78 @@ mod prim_f32 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f64 {}\n \n-#[doc(primitive = \"i8\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i8\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i8\")]\n //\n /// The 8-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i8 {}\n \n-#[doc(primitive = \"i16\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i16\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i16\")]\n //\n /// The 16-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i16 {}\n \n-#[doc(primitive = \"i32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i32\")]\n //\n /// The 32-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i32 {}\n \n-#[doc(primitive = \"i64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i64\")]\n //\n /// The 64-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i64 {}\n \n-#[doc(primitive = \"i128\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i128\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i128\")]\n //\n /// The 128-bit signed integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_i128 {}\n \n-#[doc(primitive = \"u8\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u8\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u8\")]\n //\n /// The 8-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u8 {}\n \n-#[doc(primitive = \"u16\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u16\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u16\")]\n //\n /// The 16-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u16 {}\n \n-#[doc(primitive = \"u32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u32\")]\n //\n /// The 32-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u32 {}\n \n-#[doc(primitive = \"u64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u64\")]\n //\n /// The 64-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u64 {}\n \n-#[doc(primitive = \"u128\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u128\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u128\")]\n //\n /// The 128-bit unsigned integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_u128 {}\n \n-#[doc(primitive = \"isize\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"isize\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"isize\")]\n //\n /// The pointer-sized signed integer type.\n ///\n@@ -1232,7 +1254,8 @@ mod prim_u128 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_isize {}\n \n-#[doc(primitive = \"usize\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"usize\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"usize\")]\n //\n /// The pointer-sized unsigned integer type.\n ///\n@@ -1242,7 +1265,8 @@ mod prim_isize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize {}\n \n-#[doc(primitive = \"reference\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"reference\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"reference\")]\n #[doc(alias = \"&\")]\n #[doc(alias = \"&mut\")]\n //\n@@ -1373,7 +1397,8 @@ mod prim_usize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_ref {}\n \n-#[doc(primitive = \"fn\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"fn\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"fn\")]\n //\n /// Function pointers, like `fn(usize) -> bool`.\n ///"}, {"sha": "bf8339335dd7cdf8d9bcb90d3cffca2ec782f981", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,7 +1,8 @@\n // `library/{std,core}/src/primitive_docs.rs` should have the same contents.\n // These are different files so that relative links work properly without\n // having to have `CARGO_PKG_NAME` set, but conceptually they should always be the same.\n-#[doc(primitive = \"bool\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"bool\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"bool\")]\n #[doc(alias = \"true\")]\n #[doc(alias = \"false\")]\n /// The boolean type.\n@@ -63,7 +64,8 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_bool {}\n \n-#[doc(primitive = \"never\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"never\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"never\")]\n #[doc(alias = \"!\")]\n //\n /// The `!` type, also called \"never\".\n@@ -274,7 +276,8 @@ mod prim_bool {}\n #[unstable(feature = \"never_type\", issue = \"35121\")]\n mod prim_never {}\n \n-#[doc(primitive = \"char\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"char\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"char\")]\n #[allow(rustdoc::invalid_rust_codeblocks)]\n /// A character type.\n ///\n@@ -398,7 +401,8 @@ mod prim_never {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_char {}\n \n-#[doc(primitive = \"unit\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"unit\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"unit\")]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -460,7 +464,8 @@ impl Copy for () {\n     // empty\n }\n \n-#[doc(primitive = \"pointer\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"pointer\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"pointer\")]\n #[doc(alias = \"ptr\")]\n #[doc(alias = \"*\")]\n #[doc(alias = \"*const\")]\n@@ -577,7 +582,8 @@ impl Copy for () {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer {}\n \n-#[doc(primitive = \"array\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"array\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"array\")]\n #[doc(alias = \"[]\")]\n #[doc(alias = \"[T;N]\")] // unfortunately, rustdoc doesn't have fuzzy search for aliases\n #[doc(alias = \"[T; N]\")]\n@@ -778,7 +784,8 @@ mod prim_pointer {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array {}\n \n-#[doc(primitive = \"slice\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"slice\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"slice\")]\n #[doc(alias = \"[\")]\n #[doc(alias = \"]\")]\n #[doc(alias = \"[]\")]\n@@ -870,7 +877,8 @@ mod prim_array {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice {}\n \n-#[doc(primitive = \"str\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"str\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"str\")]\n /// String slices.\n ///\n /// *[See also the `std::str` module](crate::str).*\n@@ -937,7 +945,8 @@ mod prim_slice {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_str {}\n \n-#[doc(primitive = \"tuple\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"tuple\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"tuple\")]\n #[doc(alias = \"(\")]\n #[doc(alias = \")\")]\n #[doc(alias = \"()\")]\n@@ -1081,7 +1090,8 @@ impl<T: Copy> Copy for (T,) {\n     // empty\n }\n \n-#[doc(primitive = \"f32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"f32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f32\")]\n /// A 32-bit floating point type (specifically, the \"binary32\" type defined in IEEE 754-2008).\n ///\n /// This type can represent a wide range of decimal numbers, like `3.5`, `27`,\n@@ -1147,7 +1157,8 @@ impl<T: Copy> Copy for (T,) {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f32 {}\n \n-#[doc(primitive = \"f64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"f64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"f64\")]\n /// A 64-bit floating point type (specifically, the \"binary64\" type defined in IEEE 754-2008).\n ///\n /// This type is very similar to [`f32`], but has increased\n@@ -1162,67 +1173,78 @@ mod prim_f32 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f64 {}\n \n-#[doc(primitive = \"i8\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i8\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i8\")]\n //\n /// The 8-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i8 {}\n \n-#[doc(primitive = \"i16\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i16\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i16\")]\n //\n /// The 16-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i16 {}\n \n-#[doc(primitive = \"i32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i32\")]\n //\n /// The 32-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i32 {}\n \n-#[doc(primitive = \"i64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i64\")]\n //\n /// The 64-bit signed integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i64 {}\n \n-#[doc(primitive = \"i128\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"i128\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"i128\")]\n //\n /// The 128-bit signed integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_i128 {}\n \n-#[doc(primitive = \"u8\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u8\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u8\")]\n //\n /// The 8-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u8 {}\n \n-#[doc(primitive = \"u16\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u16\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u16\")]\n //\n /// The 16-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u16 {}\n \n-#[doc(primitive = \"u32\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u32\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u32\")]\n //\n /// The 32-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u32 {}\n \n-#[doc(primitive = \"u64\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u64\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u64\")]\n //\n /// The 64-bit unsigned integer type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u64 {}\n \n-#[doc(primitive = \"u128\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"u128\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"u128\")]\n //\n /// The 128-bit unsigned integer type.\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_u128 {}\n \n-#[doc(primitive = \"isize\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"isize\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"isize\")]\n //\n /// The pointer-sized signed integer type.\n ///\n@@ -1232,7 +1254,8 @@ mod prim_u128 {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_isize {}\n \n-#[doc(primitive = \"usize\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"usize\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"usize\")]\n //\n /// The pointer-sized unsigned integer type.\n ///\n@@ -1242,7 +1265,8 @@ mod prim_isize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize {}\n \n-#[doc(primitive = \"reference\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"reference\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"reference\")]\n #[doc(alias = \"&\")]\n #[doc(alias = \"&mut\")]\n //\n@@ -1373,7 +1397,8 @@ mod prim_usize {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_ref {}\n \n-#[doc(primitive = \"fn\")]\n+#[cfg_attr(bootstrap, doc(primitive = \"fn\"))]\n+#[cfg_attr(not(bootstrap), rustc_doc_primitive = \"fn\")]\n //\n /// Function pointers, like `fn(usize) -> bool`.\n ///"}, {"sha": "960c1de1782c60b8886a99616283d981993cd104", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -177,9 +177,9 @@ Book][unstable-masked] and [its tracking issue][issue-masked].\n This is for Rust compiler internal use only.\n \n Since primitive types are defined in the compiler, there's no place to attach documentation\n-attributes. The `#[doc(primitive)]` attribute is used by the standard library to provide a way\n-to generate documentation for primitive types, and requires `#![feature(rustdoc_internals)]` to\n-enable.\n+attributes. The `#[rustc_doc_primitive = \"...\"]` attribute is used by the standard library to\n+provide a way to generate documentation for primitive types, and requires `#![feature(rustc_attrs)]`\n+to enable.\n \n ### Document keywords\n "}, {"sha": "ffa13ebb77c027afcd574ac7943c7860ee5b0668", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -249,38 +249,24 @@ impl ExternalCrate {\n         //\n         // Note that this loop only searches the top-level items of the crate,\n         // and this is intentional. If we were to search the entire crate for an\n-        // item tagged with `#[doc(primitive)]` then we would also have to\n+        // item tagged with `#[rustc_doc_primitive]` then we would also have to\n         // search the entirety of external modules for items tagged\n-        // `#[doc(primitive)]`, which is a pretty inefficient process (decoding\n+        // `#[rustc_doc_primitive]`, which is a pretty inefficient process (decoding\n         // all that metadata unconditionally).\n         //\n         // In order to keep the metadata load under control, the\n-        // `#[doc(primitive)]` feature is explicitly designed to only allow the\n+        // `#[rustc_doc_primitive]` feature is explicitly designed to only allow the\n         // primitive tags to show up as the top level items in a crate.\n         //\n         // Also note that this does not attempt to deal with modules tagged\n         // duplicately for the same primitive. This is handled later on when\n         // rendering by delegating everything to a hash map.\n         let as_primitive = |res: Res<!>| {\n-            if let Res::Def(DefKind::Mod, def_id) = res {\n-                let mut prim = None;\n-                let meta_items = tcx\n-                    .get_attrs(def_id, sym::doc)\n-                    .flat_map(|attr| attr.meta_item_list().unwrap_or_default());\n-                for meta in meta_items {\n-                    if let Some(v) = meta.value_str() {\n-                        if meta.has_name(sym::primitive) {\n-                            prim = PrimitiveType::from_symbol(v);\n-                            if prim.is_some() {\n-                                break;\n-                            }\n-                            // FIXME: should warn on unknown primitives?\n-                        }\n-                    }\n-                }\n-                return prim.map(|p| (def_id, p));\n-            }\n-            None\n+            let Res::Def(DefKind::Mod, def_id) = res else { return None };\n+            tcx.get_attrs(def_id, sym::rustc_doc_primitive).find_map(|attr| {\n+                // FIXME: should warn on unknown primitives?\n+                Some((def_id, PrimitiveType::from_symbol(attr.value_str()?)?))\n+            })\n         };\n \n         if root.is_local() {\n@@ -1829,13 +1815,17 @@ impl PrimitiveType {\n         }\n     }\n \n-    /// Returns the DefId of the module with `doc(primitive)` for this primitive type.\n+    /// Returns the DefId of the module with `rustc_doc_primitive` for this primitive type.\n     /// Panics if there is no such module.\n     ///\n-    /// This gives precedence to primitives defined in the current crate, and deprioritizes primitives defined in `core`,\n-    /// but otherwise, if multiple crates define the same primitive, there is no guarantee of which will be picked.\n-    /// In particular, if a crate depends on both `std` and another crate that also defines `doc(primitive)`, then\n-    /// it's entirely random whether `std` or the other crate is picked. (no_std crates are usually fine unless multiple dependencies define a primitive.)\n+    /// This gives precedence to primitives defined in the current crate, and deprioritizes\n+    /// primitives defined in `core`,\n+    /// but otherwise, if multiple crates define the same primitive, there is no guarantee of which\n+    /// will be picked.\n+    ///\n+    /// In particular, if a crate depends on both `std` and another crate that also defines\n+    /// `rustc_doc_primitive`, then it's entirely random whether `std` or the other crate is picked.\n+    /// (no_std crates are usually fine unless multiple dependencies define a primitive.)\n     pub(crate) fn primitive_locations(tcx: TyCtxt<'_>) -> &FxHashMap<PrimitiveType, DefId> {\n         static PRIMITIVE_LOCATIONS: OnceCell<FxHashMap<PrimitiveType, DefId>> = OnceCell::new();\n         PRIMITIVE_LOCATIONS.get_or_init(|| {"}, {"sha": "c39caf73a93671a79e8835096dd2835223eaec3b", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -249,9 +249,7 @@ pub(crate) fn id_from_item_inner(\n                     // instead, we directly get the primitive symbol and convert it to u32 to\n                     // generate the ID.\n                     if matches!(tcx.def_kind(def_id), DefKind::Mod) &&\n-                        let Some(prim) = tcx.get_attrs(*def_id, sym::doc)\n-                            .flat_map(|attr| attr.meta_item_list().unwrap_or_default())\n-                            .filter(|attr| attr.has_name(sym::primitive))\n+                        let Some(prim) = tcx.get_attrs(*def_id, sym::rustc_doc_primitive)\n                             .find_map(|attr| attr.value_str()) {\n                         format!(\":{}\", prim.as_u32())\n                     } else {"}, {"sha": "d6da6e0993894099830dbbbf20a79be9b8abebe8", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> JsonRenderer<'tcx> {\n                         // HACK(hkmatsumoto): For impls of primitive types, we index them\n                         // regardless of whether they're local. This is because users can\n                         // document primitive items in an arbitrary crate by using\n-                        // `doc(primitive)`.\n+                        // `rustc_doc_primitive`.\n                         let mut is_primitive_impl = false;\n                         if let clean::types::ItemKind::ImplItem(ref impl_) = *item.kind &&\n                             impl_.trait_.is_none() &&"}, {"sha": "4188aa1037fbd2a90b89854a89e88fd0b5fdba53", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -453,8 +453,8 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             })?;\n \n         // FIXME(#83862): this arbitrarily gives precedence to primitives over modules to support\n-        // links to primitives when `#[doc(primitive)]` is present. It should give an ambiguity\n-        // error instead and special case *only* modules with `#[doc(primitive)]`, not all\n+        // links to primitives when `#[rustc_doc_primitive]` is present. It should give an ambiguity\n+        // error instead and special case *only* modules with `#[rustc_doc_primitive]`, not all\n         // primitives.\n         match resolve_primitive(&path_root, TypeNS)\n             .or_else(|| self.resolve_path(&path_root, TypeNS, item_id, module_id))\n@@ -1144,7 +1144,7 @@ impl LinkCollector<'_, '_> {\n                 }\n             }\n \n-        // item can be non-local e.g. when using #[doc(primitive = \"pointer\")]\n+        // item can be non-local e.g. when using `#[rustc_doc_primitive = \"pointer\"]`\n         if let Some((src_id, dst_id)) = id.as_local().and_then(|dst_id| {\n             item.item_id.expect_def_id().as_local().map(|src_id| (src_id, dst_id))\n         }) {"}, {"sha": "8383dcc0482ea32ae018dbbdd3d182c863d057ed", "filename": "tests/rustdoc-json/impls/local_for_local_primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc-json%2Fimpls%2Flocal_for_local_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc-json%2Fimpls%2Flocal_for_local_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fimpls%2Flocal_for_local_primitive.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,5 +1,5 @@\n #![feature(no_core)]\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n #![no_core]\n \n // @set Local = \"$.index[*][?(@.name=='Local')].id\"\n@@ -16,6 +16,6 @@ impl Local for bool {}\n \n // FIXME(#101695): Test bool's `impls` include \"Local for bool\"\n // @has \"$.index[*][?(@.name=='bool')]\"\n-#[doc(primitive = \"bool\")]\n+#[rustc_doc_primitive = \"bool\"]\n /// Boolean docs\n mod prim_bool {}"}, {"sha": "0cf479faf294c8c600d4af3a2126fce403d949d7", "filename": "tests/rustdoc-json/primitives/local_primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fprimitives%2Flocal_primitive.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -8,7 +8,7 @@\n \n //! Link to [i32][prim@i32] [i64][prim@i64]\n \n-#[doc(primitive = \"i32\")]\n+#[rustc_doc_primitive = \"i32\"]\n mod prim_i32 {}\n \n // @set local_i32 = \"$.index[*][?(@.name=='i32')].id\""}, {"sha": "85d179ee45f367ed36a531718ecc449bdc802a07", "filename": "tests/rustdoc-json/primitives/primitive_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_impls.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -25,7 +25,7 @@ pub trait Trait {}\n impl Trait for i32 {}\n \n /// i32\n-#[doc(primitive = \"i32\")]\n+#[rustc_doc_primitive = \"i32\"]\n mod prim_i32 {}\n \n // @set i32 = \"$.index[*][?(@.docs=='i32')].id\""}, {"sha": "81e0acdc6e93e8eeb22ae948360ee22e986c2f53", "filename": "tests/rustdoc-json/primitives/primitive_overloading.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fprimitives%2Fprimitive_overloading.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -2,15 +2,15 @@\n \n // Regression test for <https://github.com/rust-lang/rust/issues/98006>.\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n #![feature(no_core)]\n \n #![no_core]\n \n // @has \"$.index[*][?(@.name=='usize')]\"\n // @has \"$.index[*][?(@.name=='prim')]\"\n \n-#[doc(primitive = \"usize\")]\n+#[rustc_doc_primitive = \"usize\"]\n /// This is the built-in type `usize`.\n mod prim {\n }"}, {"sha": "5180a804f07ba093ddeab976e86748189f3ea264", "filename": "tests/rustdoc-json/primitives/use_primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Fprimitives%2Fuse_primitive.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,8 +1,8 @@\n // edition:2018\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n-#[doc(primitive = \"usize\")]\n+#[rustc_doc_primitive = \"usize\"]\n mod usize {}\n \n // @set local_crate_id = \"$.index[*][?(@.name=='use_primitive')].crate_id\""}, {"sha": "f45405fbf5dc8d49cd77a67bf1e31cfc77ac4cf0", "filename": "tests/rustdoc-ui/coverage/exotic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc-ui%2Fcoverage%2Fexotic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc-ui%2Fcoverage%2Fexotic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fcoverage%2Fexotic.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -2,12 +2,13 @@\n // check-pass\n \n #![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n //! the features only used in std also have entries in the table, so make sure those get pulled out\n //! properly as well\n \n /// woo, check it out, we can write our own primitive docs lol\n-#[doc(primitive=\"unit\")]\n+#[rustc_doc_primitive = \"unit\"]\n mod prim_unit {}\n \n /// keywords? sure, pile them on"}, {"sha": "a6db93dbc33cdcc9133b8f9ffe85c5ad13188b90", "filename": "tests/rustdoc/auto-impl-primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fauto-impl-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fauto-impl-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fauto-impl-primitive.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,10 +1,10 @@\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n #![crate_name = \"foo\"]\n \n pub use std::fs::File;\n \n // @has 'foo/primitive.i16.html' '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementation'\n-#[doc(primitive = \"i16\")]\n+#[rustc_doc_primitive = \"i16\"]\n /// I love poneys!\n mod prim {}"}, {"sha": "a2f426c6352e988718b869ca57eb70c5a1782f48", "filename": "tests/rustdoc/auxiliary/issue-15318.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fauxiliary%2Fissue-15318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fauxiliary%2Fissue-15318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fauxiliary%2Fissue-15318.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -Cmetadata=aux\n #![crate_type = \"rlib\"]\n #![doc(html_root_url = \"http://example.com/\")]\n+#![feature(rustc_attrs)]\n #![feature(lang_items)]\n #![no_std]\n \n@@ -12,5 +13,5 @@ fn foo() {}\n fn bar(_: &core::panic::PanicInfo) -> ! { loop {} }\n \n /// dox\n-#[doc(primitive = \"pointer\")]\n+#[rustc_doc_primitive = \"pointer\"]\n pub mod ptr {}"}, {"sha": "d1785e4239119e3f11222a1119c330c2900b3c29", "filename": "tests/rustdoc/auxiliary/primitive-doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fauxiliary%2Fprimitive-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fauxiliary%2Fprimitive-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fauxiliary%2Fprimitive-doc.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,9 +1,10 @@\n // compile-flags: --crate-type lib --edition 2018\n \n+#![feature(rustc_attrs)]\n #![feature(no_core)]\n #![no_core]\n \n-#[doc(primitive = \"usize\")]\n+#[rustc_doc_primitive = \"usize\"]\n /// This is the built-in type `usize`.\n mod usize {\n }"}, {"sha": "41b9d41fa4410e514e7eb23f203c19c8bb660da0", "filename": "tests/rustdoc/check-source-code-urls-to-def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fcheck-source-code-urls-to-def.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -2,7 +2,7 @@\n // aux-build:source_code.rs\n // build-aux-docs\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n #![crate_name = \"foo\"]\n \n@@ -65,5 +65,5 @@ pub fn foo4() {\n }\n \n // @has - '//pre[@class=\"rust\"]//a[@href=\"../../foo/primitive.bool.html\"]' 'bool'\n-#[doc(primitive = \"bool\")]\n+#[rustc_doc_primitive = \"bool\"]\n mod whatever {}"}, {"sha": "c050929db9682cb66502e0c11b924cbad44af617", "filename": "tests/rustdoc/intra-doc/auxiliary/my-core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fmy-core.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -3,7 +3,7 @@\n #![rustc_coherence_is_core]\n #![crate_type=\"rlib\"]\n \n-#[doc(primitive = \"char\")]\n+#[rustc_doc_primitive = \"char\"]\n /// Some char docs\n mod char {}\n "}, {"sha": "711ac09ba9a03db250c74a30fe742a3360b2a5be", "filename": "tests/rustdoc/intra-doc/no-doc-primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fintra-doc%2Fno-doc-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fintra-doc%2Fno-doc-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fintra-doc%2Fno-doc-primitive.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,4 +1,4 @@\n-// Crate tree without a `doc(primitive)` module for primitive type linked to by a doc link.\n+// Crate tree without a `rustc_doc_primitive` module for primitive type linked to by a doc link.\n \n #![deny(rustdoc::broken_intra_doc_links)]\n #![feature(no_core, lang_items, rustc_attrs)]"}, {"sha": "6de4ec1802fd1348254ceedbfc6387705a8812b3", "filename": "tests/rustdoc/intra-doc/prim-methods-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fintra-doc%2Fprim-methods-local.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -10,7 +10,7 @@\n \n //! A [prim@`char`] and its [`char::len_utf8`].\n \n-#[doc(primitive = \"char\")]\n+#[rustc_doc_primitive = \"char\"]\n mod char {}\n \n impl char {"}, {"sha": "d13858a53cff71fbc5a67ce45b1d611840f8e157", "filename": "tests/rustdoc/intra-doc/prim-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fintra-doc%2Fprim-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fintra-doc%2Fprim-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fintra-doc%2Fprim-self.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -25,7 +25,7 @@ impl usize {\n     pub type ME = usize;\n }\n \n-#[doc(primitive = \"usize\")]\n+#[rustc_doc_primitive = \"usize\"]\n /// This has some docs.\n mod usize {}\n "}, {"sha": "2dab8f9488391f286116c2576dac28b1b76e7896", "filename": "tests/rustdoc/issue-15318-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fissue-15318-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fissue-15318-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-15318-3.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,7 +1,7 @@\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @has issue_15318_3/primitive.pointer.html\n \n /// dox\n-#[doc(primitive = \"pointer\")]\n+#[rustc_doc_primitive = \"pointer\"]\n pub mod ptr {}"}, {"sha": "21d02842431d0d02b98952b99cff374689d3d165", "filename": "tests/rustdoc/issue-23511.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fissue-23511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fissue-23511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-23511.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -3,7 +3,7 @@\n #![no_std]\n \n pub mod str {\n-    #![doc(primitive = \"str\")]\n+    #![rustc_doc_primitive = \"str\"]\n \n     impl str {\n         // @hasraw search-index.js foo"}, {"sha": "5af5f7616b57e867480bf986f19cc1adc1f9a971", "filename": "tests/rustdoc/notable-trait/doc-notable_trait-mut_t_is_not_an_iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_an_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_an_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_an_iterator.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -6,10 +6,10 @@\n //!\n //! [#80737]: https://github.com/rust-lang/rust/issues/80737\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n #![no_std]\n \n-#[doc(primitive = \"reference\")]\n+#[rustc_doc_primitive = \"reference\"]\n /// Some useless docs, wouhou!\n ///\n /// We need to put this in here, because notable traits"}, {"sha": "6c980aaa2b135ee97eb9c92c09de1561d3b44e26", "filename": "tests/rustdoc/notable-trait/doc-notable_trait-mut_t_is_not_ref_t.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_ref_t.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_ref_t.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-mut_t_is_not_ref_t.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -5,9 +5,9 @@\n //!\n //! [#78160]: https://github.com/rust-lang/rust/issues/78160\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n-#[doc(primitive = \"reference\")]\n+#[rustc_doc_primitive = \"reference\"]\n /// Some useless docs, wouhou!\n ///\n /// We need to put this in here, because notable traits"}, {"sha": "6f034224df55294bb880ffe3a282f58f719a7db6", "filename": "tests/rustdoc/primitive-reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fprimitive-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fprimitive-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive-reference.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @has foo/index.html\n // @has - '//h2[@id=\"primitives\"]' 'Primitive Types'\n@@ -16,7 +16,7 @@\n // @count - '//*[@class=\"impl\"]' 1\n // @has - '//*[@id=\"impl-Foo%3C%26A%3E-for-%26B\"]/*[@class=\"code-header\"]' \\\n //        'impl<A, B> Foo<&A> for &B'\n-#[doc(primitive = \"reference\")]\n+#[rustc_doc_primitive = \"reference\"]\n /// this is a test!\n mod reference {}\n "}, {"sha": "ba15a73ca1d1943295ebca4ee1f3103d095488a9", "filename": "tests/rustdoc/primitive-slice-auto-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fprimitive-slice-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fprimitive-slice-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive-slice-auto-trait.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,14 +1,14 @@\n // compile-flags: --crate-type lib --edition 2018\n \n #![crate_name = \"foo\"]\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @has foo/primitive.slice.html '//a[@class=\"primitive\"]' 'slice'\n // @has - '//h1' 'Primitive Type slice'\n // @has - '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has - '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Send for [T]where T: Send'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Sync for [T]where T: Sync'\n-#[doc(primitive = \"slice\")]\n+#[rustc_doc_primitive = \"slice\"]\n /// this is a test!\n mod slice_prim {}"}, {"sha": "2b407b586a3d4942b560c20ac8060abf7196a88d", "filename": "tests/rustdoc/primitive-tuple-auto-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fprimitive-tuple-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fprimitive-tuple-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive-tuple-auto-trait.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,15 +1,15 @@\n // compile-flags: --crate-type lib --edition 2018\n \n #![crate_name = \"foo\"]\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @has foo/primitive.tuple.html '//a[@class=\"primitive\"]' 'tuple'\n // @has - '//h1' 'Primitive Type tuple'\n // @has - '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has - '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'Send'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'Sync'\n-#[doc(primitive = \"tuple\")]\n+#[rustc_doc_primitive = \"tuple\"]\n /// this is a test!\n ///\n // Hardcoded anchor to header written in library/core/src/primitive_docs.rs"}, {"sha": "5a56f1fd83bd4bcc16ec0ab84ef8a8accbf57702", "filename": "tests/rustdoc/primitive-unit-auto-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fprimitive-unit-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fprimitive-unit-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive-unit-auto-trait.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,14 +1,14 @@\n // compile-flags: --crate-type lib --edition 2018\n \n #![crate_name = \"foo\"]\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @has foo/primitive.unit.html '//a[@class=\"primitive\"]' 'unit'\n // @has - '//h1' 'Primitive Type unit'\n // @has - '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has - '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl Send for ()'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl Sync for ()'\n-#[doc(primitive = \"unit\")]\n+#[rustc_doc_primitive = \"unit\"]\n /// this is a test!\n mod unit_prim {}"}, {"sha": "2da8ae6ff38da6c78e70a4ba1a59449d633a5218", "filename": "tests/rustdoc/primitive/primitive-generic-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive%2Fprimitive-generic-impl.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,8 +1,8 @@\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n #![crate_name = \"foo\"]\n \n // @has foo/primitive.i32.html '//*[@id=\"impl-ToString-for-i32\"]//h3[@class=\"code-header\"]' 'impl<T> ToString for T'\n \n-#[doc(primitive = \"i32\")]\n+#[rustc_doc_primitive = \"i32\"]\n /// Some useless docs, wouhou!\n mod i32 {}"}, {"sha": "32af2636c18b0fc624cd12ebf8d8d37e355f2cc0", "filename": "tests/rustdoc/primitive/primitive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fprimitive%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fprimitive%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive%2Fprimitive.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @has foo/index.html '//h2[@id=\"primitives\"]' 'Primitive Types'\n // @has foo/index.html '//a[@href=\"primitive.i32.html\"]' 'i32'\n@@ -11,11 +11,11 @@\n // @has foo/primitive.i32.html '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has foo/index.html '//a/@href' '../foo/index.html'\n // @!has foo/index.html '//span' '\ud83d\udd12'\n-#[doc(primitive = \"i32\")]\n+#[rustc_doc_primitive = \"i32\"]\n /// this is a test!\n mod i32{}\n \n // @has foo/primitive.bool.html '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'hello'\n-#[doc(primitive = \"bool\")]\n+#[rustc_doc_primitive = \"bool\"]\n /// hello\n mod bool {}"}, {"sha": "45a6ba8ed2e16b896a8bcf2c5401f7c54c1359e9", "filename": "tests/rustdoc/sidebar-all-page.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fsidebar-all-page.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Fsidebar-all-page.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsidebar-all-page.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @has 'foo/all.html'\n // @has - '//*[@class=\"sidebar-elems\"]//li' 'Structs'\n@@ -31,5 +31,5 @@ macro_rules! foo {\n pub type Type = u8;\n pub const FOO: u8 = 0;\n pub static BAR: u8 = 0;\n-#[doc(primitive = \"u8\")]\n+#[rustc_doc_primitive = \"u8\"]\n mod u8 {}"}, {"sha": "8d781b40e46d90b21f5beecb7f4c15d5b782217b", "filename": "tests/rustdoc/tab_title.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Ftab_title.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Ftab_title.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftab_title.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,4 +1,5 @@\n #![crate_name = \"foo\"]\n+#![feature(rustc_attrs)]\n #![feature(rustdoc_internals)]\n \n // tests for the html <title> element\n@@ -39,6 +40,6 @@ mod continue_keyword {}\n \n // @has foo/primitive.u8.html '//head/title' 'u8 - Rust'\n // @!has - '//head/title' 'foo'\n-#[doc(primitive = \"u8\")]\n+#[rustc_doc_primitive = \"u8\"]\n /// `u8` docs\n mod u8 {}"}, {"sha": "e1feb1cd64fef2517719b1cef398c35c24dde49c", "filename": "tests/rustdoc/titles.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Ftitles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Frustdoc%2Ftitles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftitles.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n-#![feature(rustdoc_internals)]\n+#![feature(rustc_attrs)]\n \n // @matches 'foo/index.html' '//h1' 'Crate foo'\n // @matches 'foo/index.html' '//h2[@class=\"location\"]' 'Crate foo'\n@@ -41,7 +41,7 @@ macro_rules! foo_macro {\n }\n \n // @matches 'foo/primitive.bool.html' '//h1' 'Primitive Type bool'\n-#[doc(primitive = \"bool\")]\n+#[rustc_doc_primitive = \"bool\"]\n mod bool {}\n \n // @matches 'foo/static.FOO_STATIC.html' '//h1' 'Static foo::FOO_STATIC'"}, {"sha": "4336961e3b5e091d070c0bcadded5a19ce473144", "filename": "tests/ui/rustdoc/doc-primitive.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Fui%2Frustdoc%2Fdoc-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Fui%2Frustdoc%2Fdoc-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frustdoc%2Fdoc-primitive.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -0,0 +1,8 @@\n+#![deny(invalid_doc_attributes)]\n+\n+#[doc(primitive = \"foo\")]\n+//~^ ERROR unknown `doc` attribute `primitive`\n+//~| WARN\n+mod bar {}\n+\n+fn main() {}"}, {"sha": "d61eb381647959c09fc28192c3d8a6187c41b14b", "filename": "tests/ui/rustdoc/doc-primitive.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Fui%2Frustdoc%2Fdoc-primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Fui%2Frustdoc%2Fdoc-primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frustdoc%2Fdoc-primitive.stderr?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -0,0 +1,16 @@\n+error: unknown `doc` attribute `primitive`\n+  --> $DIR/doc-primitive.rs:3:7\n+   |\n+LL | #[doc(primitive = \"foo\")]\n+   |       ^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+note: the lint level is defined here\n+  --> $DIR/doc-primitive.rs:1:9\n+   |\n+LL | #![deny(invalid_doc_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "78fcd90752e46d9cf494281321ecc94e94ba9c78", "filename": "tests/ui/rustdoc/feature-gate-doc_primitive.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Fui%2Frustdoc%2Ffeature-gate-doc_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Fui%2Frustdoc%2Ffeature-gate-doc_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frustdoc%2Ffeature-gate-doc_primitive.rs?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,7 +1,5 @@\n-// check-pass\n-#[doc(primitive = \"usize\")]\n-//~^ WARNING `doc(primitive)` should never have been stable\n-//~| WARNING hard error in a future release\n+#[rustc_doc_primitive = \"usize\"]\n+//~^ ERROR `rustc_doc_primitive` is a rustc internal attribute\n /// Some docs\n mod usize {}\n "}, {"sha": "5920880675d7ef2e514a6c4555137229141984cd", "filename": "tests/ui/rustdoc/feature-gate-doc_primitive.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Fui%2Frustdoc%2Ffeature-gate-doc_primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c93c63771be17303b795e51cf3d1fa8d8cb6726/tests%2Fui%2Frustdoc%2Ffeature-gate-doc_primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frustdoc%2Ffeature-gate-doc_primitive.stderr?ref=6c93c63771be17303b795e51cf3d1fa8d8cb6726", "patch": "@@ -1,12 +1,11 @@\n-warning: `doc(primitive)` should never have been stable\n-  --> $DIR/feature-gate-doc_primitive.rs:2:7\n+error[E0658]: `rustc_doc_primitive` is a rustc internal attribute\n+  --> $DIR/feature-gate-doc_primitive.rs:1:1\n    |\n-LL | #[doc(primitive = \"usize\")]\n-   |       ^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_doc_primitive = \"usize\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n-   = note: `#[warn(invalid_doc_attributes)]` on by default\n+   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n-warning: 1 warning emitted\n+error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}]}