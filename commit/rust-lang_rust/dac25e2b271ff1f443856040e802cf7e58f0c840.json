{"sha": "dac25e2b271ff1f443856040e802cf7e58f0c840", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYzI1ZTJiMjcxZmYxZjQ0Mzg1NjA0MGU4MDJjZjdlNThmMGM4NDA=", "commit": {"author": {"name": "Austin Bonander", "email": "austin.bonander@gmail.com", "date": "2017-02-22T19:15:12Z"}, "committer": {"name": "Austin Bonander", "email": "austin.bonander@gmail.com", "date": "2017-02-22T23:43:03Z"}, "message": "Don't assume plugin-whitelisted attributes are proc macro attributes\n\ncloses #40001", "tree": {"sha": "00f11882fb314686ccfa2d8c004281dbfbed242a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00f11882fb314686ccfa2d8c004281dbfbed242a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dac25e2b271ff1f443856040e802cf7e58f0c840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dac25e2b271ff1f443856040e802cf7e58f0c840", "html_url": "https://github.com/rust-lang/rust/commit/dac25e2b271ff1f443856040e802cf7e58f0c840", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dac25e2b271ff1f443856040e802cf7e58f0c840/comments", "author": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "committer": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc6f092c21a7a7249a9f8860f3cd10160aa36c02", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6f092c21a7a7249a9f8860f3cd10160aa36c02", "html_url": "https://github.com/rust-lang/rust/commit/fc6f092c21a7a7249a9f8860f3cd10160aa36c02"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "aba2de6b3a2b6106b78b04dff80223ecf5edb236", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dac25e2b271ff1f443856040e802cf7e58f0c840/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac25e2b271ff1f443856040e802cf7e58f0c840/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=dac25e2b271ff1f443856040e802cf7e58f0c840", "patch": "@@ -181,6 +181,11 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn find_legacy_attr_invoc(&mut self, attrs: &mut Vec<ast::Attribute>)\n                               -> Option<ast::Attribute> {\n         for i in 0..attrs.len() {\n+            if self.session.plugin_attributes.borrow().iter()\n+                    .any(|&(ref attr_nm, _)| attrs[i].name() == &**attr_nm) {\n+                attr::mark_known(&attrs[i]);\n+            }\n+\n             match self.builtin_macros.get(&attrs[i].name()).cloned() {\n                 Some(binding) => match *binding.get_macro(self) {\n                     MultiModifier(..) | MultiDecorator(..) | SyntaxExtension::AttrProcMacro(..) => {"}, {"sha": "cf1a631937ba451ea76ba642ae9ebe6511bddbe8", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/issue-40001-plugin.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/dac25e2b271ff1f443856040e802cf7e58f0c840/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac25e2b271ff1f443856040e802cf7e58f0c840/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-40001-plugin.rs?ref=dac25e2b271ff1f443856040e802cf7e58f0c840", "patch": "@@ -0,0 +1,66 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(box_syntax, plugin, plugin_registrar, rustc_private)]\n+#![crate_type = \"dylib\"]\n+\n+#[macro_use]\n+extern crate rustc;\n+extern crate rustc_plugin;\n+extern crate syntax;\n+\n+use rustc_plugin::Registry;\n+use syntax::ext::base::*;\n+use syntax::feature_gate::AttributeType::Whitelisted;\n+use syntax::symbol::Symbol;\n+\n+use rustc::hir;\n+use rustc::hir::intravisit;\n+use rustc::hir::map as hir_map;\n+use rustc::lint::{LateContext, LintPass, LintArray, LateLintPass, LintContext};\n+use rustc::ty;\n+use syntax::{ast, codemap};\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_late_lint_pass(box MissingWhitelistedAttrPass);\n+    reg.register_attribute(\"whitelisted_attr\".to_string(), Whitelisted);\n+}\n+\n+declare_lint!(MISSING_WHITELISTED_ATTR, Deny,\n+              \"Checks for missing `whitelisted_attr` attribute\");\n+\n+struct MissingWhitelistedAttrPass;\n+\n+impl LintPass for MissingWhitelistedAttrPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(MISSING_WHITELISTED_ATTR)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingWhitelistedAttrPass {\n+    fn check_fn(&mut self,\n+                cx: &LateContext<'a, 'tcx>,\n+                _: intravisit::FnKind<'tcx>,\n+                _: &'tcx hir::FnDecl,\n+                _: &'tcx hir::Body,\n+                span: codemap::Span,\n+                id: ast::NodeId) {\n+\n+        let item = match cx.tcx.hir.get(id) {\n+            hir_map::Node::NodeItem(item) => item,\n+            _ => cx.tcx.hir.expect_item(cx.tcx.hir.get_parent(id)),\n+        };\n+\n+        if !item.attrs.iter().any(|a| a.check_name(\"whitelisted_attr\")) {\n+            cx.span_lint(MISSING_WHITELISTED_ATTR, span,\n+                         \"Missing 'whitelited_attr' attribute\");\n+        }\n+    }\n+}"}, {"sha": "54e84b7f6189fd9be35f9e8c657bdd4b10e8bd85", "filename": "src/test/run-pass-fulldeps/proc-macro/issue-40001.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dac25e2b271ff1f443856040e802cf7e58f0c840/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-40001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac25e2b271ff1f443856040e802cf7e58f0c840/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-40001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fissue-40001.rs?ref=dac25e2b271ff1f443856040e802cf7e58f0c840", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-40001-plugin.rs\n+\n+#![feature(proc_macro, plugin)]\n+#![plugin(issue_40001_plugin)]\n+\n+#[whitelisted_attr]\n+fn main() {}"}]}