{"sha": "9c2a9a9a0635e53466749fdedcdc5a371e658cde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMmE5YTlhMDYzNWU1MzQ2Njc0OWZkZWRjZGM1YTM3MWU2NThjZGU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-11-15T20:00:27Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-11-16T12:11:29Z"}, "message": "Use Chalk's dyn/impl trait support", "tree": {"sha": "904a60eca279975874c6c890109eb3c852347da0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/904a60eca279975874c6c890109eb3c852347da0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c2a9a9a0635e53466749fdedcdc5a371e658cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c2a9a9a0635e53466749fdedcdc5a371e658cde", "html_url": "https://github.com/rust-lang/rust/commit/9c2a9a9a0635e53466749fdedcdc5a371e658cde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c2a9a9a0635e53466749fdedcdc5a371e658cde/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e21b82e035050570a8d8e77ebe8b50f7d34ad251", "url": "https://api.github.com/repos/rust-lang/rust/commits/e21b82e035050570a8d8e77ebe8b50f7d34ad251", "html_url": "https://github.com/rust-lang/rust/commit/e21b82e035050570a8d8e77ebe8b50f7d34ad251"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "d20aeaacf281bc608520f0f14f78224594a8d847", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c2a9a9a0635e53466749fdedcdc5a371e658cde/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2a9a9a0635e53466749fdedcdc5a371e658cde/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=9c2a9a9a0635e53466749fdedcdc5a371e658cde", "patch": "@@ -228,14 +228,10 @@ fn iterate_trait_method_candidates<T>(\n     'traits: for t in traits {\n         let data = t.trait_data(db);\n \n-        // FIXME this is a bit of a hack, since Chalk should say the same thing\n-        // anyway, but currently Chalk doesn't implement `dyn/impl Trait` yet\n-        let inherently_implemented = ty.value.inherent_trait() == Some(t);\n-\n         // we'll be lazy about checking whether the type implements the\n         // trait, but if we find out it doesn't, we'll skip the rest of the\n         // iteration\n-        let mut known_implemented = inherently_implemented;\n+        let mut known_implemented = false;\n         for &item in data.items() {\n             if !is_valid_candidate(db, name, mode, item) {\n                 continue;"}, {"sha": "838cb4d235088709cb53bf3976819314baa86bb2", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c2a9a9a0635e53466749fdedcdc5a371e658cde/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2a9a9a0635e53466749fdedcdc5a371e658cde/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=9c2a9a9a0635e53466749fdedcdc5a371e658cde", "patch": "@@ -3983,11 +3983,11 @@ fn test(x: impl Trait<u64>, y: &impl Trait<u64>) {\n     [180; 183) 'bar': fn bar() -> impl Trait<u64>\n     [180; 185) 'bar()': impl Trait<u64>\n     [191; 192) 'x': impl Trait<u64>\n-    [191; 198) 'x.foo()': {unknown}\n+    [191; 198) 'x.foo()': u64\n     [204; 205) 'y': &impl Trait<u64>\n-    [204; 211) 'y.foo()': {unknown}\n+    [204; 211) 'y.foo()': u64\n     [217; 218) 'z': impl Trait<u64>\n-    [217; 224) 'z.foo()': {unknown}\n+    [217; 224) 'z.foo()': u64\n     [230; 231) 'x': impl Trait<u64>\n     [230; 238) 'x.foo2()': i64\n     [244; 245) 'y': &impl Trait<u64>\n@@ -4033,11 +4033,11 @@ fn test(x: dyn Trait<u64>, y: &dyn Trait<u64>) {\n     [177; 180) 'bar': fn bar() -> dyn Trait<u64>\n     [177; 182) 'bar()': dyn Trait<u64>\n     [188; 189) 'x': dyn Trait<u64>\n-    [188; 195) 'x.foo()': {unknown}\n+    [188; 195) 'x.foo()': u64\n     [201; 202) 'y': &dyn Trait<u64>\n-    [201; 208) 'y.foo()': {unknown}\n+    [201; 208) 'y.foo()': u64\n     [214; 215) 'z': dyn Trait<u64>\n-    [214; 221) 'z.foo()': {unknown}\n+    [214; 221) 'z.foo()': u64\n     [227; 228) 'x': dyn Trait<u64>\n     [227; 235) 'x.foo2()': i64\n     [241; 242) 'y': &dyn Trait<u64>"}, {"sha": "81a378bac7af4a746322a46f582b788f352698b3", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c2a9a9a0635e53466749fdedcdc5a371e658cde/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c2a9a9a0635e53466749fdedcdc5a371e658cde/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=9c2a9a9a0635e53466749fdedcdc5a371e658cde", "patch": "@@ -68,8 +68,15 @@ impl ToChalk for Ty {\n             }\n             Ty::Bound(idx) => chalk_ir::TyData::BoundVar(idx as usize).intern(),\n             Ty::Infer(_infer_ty) => panic!(\"uncanonicalized infer ty\"),\n-            // FIXME use Chalk's Dyn/Opaque once the bugs with that are fixed\n-            Ty::Unknown | Ty::Dyn(_) | Ty::Opaque(_) => {\n+            Ty::Dyn(predicates) => {\n+                let where_clauses = predicates.iter().cloned().map(|p| p.to_chalk(db)).collect();\n+                chalk_ir::TyData::Dyn(make_binders(where_clauses, 1)).intern()\n+            }\n+            Ty::Opaque(predicates) => {\n+                let where_clauses = predicates.iter().cloned().map(|p| p.to_chalk(db)).collect();\n+                chalk_ir::TyData::Opaque(make_binders(where_clauses, 1)).intern()\n+            }\n+            Ty::Unknown => {\n                 let parameters = Vec::new();\n                 let name = TypeName::Error;\n                 chalk_ir::ApplicationTy { name, parameters }.cast().intern()"}]}