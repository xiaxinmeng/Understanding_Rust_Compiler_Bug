{"sha": "5cf83dcc1ae5575649ead36a7e4e8aeb6a017081", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZjgzZGNjMWFlNTU3NTY0OWVhZDM2YTdlNGU4YWViNmEwMTcwODE=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-26T20:03:28Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-26T20:03:28Z"}, "message": "Test the hashmap for growth and rehashing.", "tree": {"sha": "1b154ceda25c2710e90ea0c46af98393c264ed3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b154ceda25c2710e90ea0c46af98393c264ed3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cf83dcc1ae5575649ead36a7e4e8aeb6a017081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf83dcc1ae5575649ead36a7e4e8aeb6a017081", "html_url": "https://github.com/rust-lang/rust/commit/5cf83dcc1ae5575649ead36a7e4e8aeb6a017081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cf83dcc1ae5575649ead36a7e4e8aeb6a017081/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3c5e6c77388f3f81449c668e6a97b064cf41852", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c5e6c77388f3f81449c668e6a97b064cf41852", "html_url": "https://github.com/rust-lang/rust/commit/c3c5e6c77388f3f81449c668e6a97b064cf41852"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "bc70e51c9a85d7333beb8c35e7d175e38ec0a305", "filename": "src/test/run-pass/lib-map.rs", "status": "modified", "additions": 69, "deletions": 2, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/5cf83dcc1ae5575649ead36a7e4e8aeb6a017081/src%2Ftest%2Frun-pass%2Flib-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf83dcc1ae5575649ead36a7e4e8aeb6a017081/src%2Ftest%2Frun-pass%2Flib-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-map.rs?ref=5cf83dcc1ae5575649ead36a7e4e8aeb6a017081", "patch": "@@ -13,9 +13,13 @@ fn test_simple() {\n     ret u;\n   }\n \n-  let map.hashfn[uint] hasher = hash;\n-  let map.eqfn[uint] eqer = eq;\n+  // FIXME we don't really want to bind here but if we don't then the\n+  // hashmap's drop glue UMRs when trying to drop these functions, which\n+  // it stores internally.\n+  let map.hashfn[uint] hasher = bind hash(_);\n+  let map.eqfn[uint] eqer = bind eq(_, _);\n   let map.hashmap[uint, uint] hm = map.mk_hashmap[uint, uint](hasher, eqer);\n+\n   hm.insert(10u, 12u);\n   hm.insert(11u, 13u);\n   hm.insert(12u, 14u);\n@@ -24,9 +28,72 @@ fn test_simple() {\n   check (hm.get(12u) == 14u);\n   check (hm.get(10u) == 12u);\n \n+  hm.insert(12u, 14u);\n+  check (hm.get(12u) == 14u);\n+\n+  hm.insert(12u, 12u);\n+  check (hm.get(12u) == 12u);\n+\n   log \"*** finished test_simple\";\n }\n \n+/**\n+ * Force map growth and rehashing.\n+ */\n+fn test_growth() {\n+  log \"*** starting test_growth\";\n+\n+  let uint map_capacity = 64u;  // Keep in sync with map.mk_hashmap\n+\n+  fn eq(&uint x, &uint y) -> bool { ret x == y; }\n+  fn hash(&uint u) -> uint {\n+    // FIXME: can't use std.util.id since we'd be capturing a type param,\n+    // and presently we can't close items over type params.\n+    ret u;\n+  }\n+\n+  // FIXME: as in test_simple(), don't really want to bind.\n+  let map.hashfn[uint] hasher = bind hash(_);\n+  let map.eqfn[uint] eqer = bind eq(_, _);\n+  let map.hashmap[uint, uint] hm = map.mk_hashmap[uint, uint](hasher, eqer);\n+\n+  let uint i = 0u;\n+  while (i < map_capacity) {\n+    hm.insert(i, i * i);\n+    log \"inserting \" + std._uint.to_str(i, 10u)\n+      + \" -> \" + std._uint.to_str(i * i, 10u);\n+    i += 1u;\n+  }\n+\n+  log \"-----\";\n+\n+  i = 0u;\n+  while (i < map_capacity) {\n+    log \"get(\" + std._uint.to_str(i, 10u) + \") = \"\n+      + std._uint.to_str(hm.get(i), 10u);\n+    check (hm.get(i) == i * i);\n+    i += 1u;\n+  }\n+\n+  hm.insert(map_capacity, 17u);\n+  check (hm.get(map_capacity) == 17u);\n+\n+  log \"-----\";\n+\n+  hm.rehash();\n+\n+  i = 0u;\n+  while (i < map_capacity) {\n+    log \"get(\" + std._uint.to_str(i, 10u) + \") = \"\n+      + std._uint.to_str(hm.get(i), 10u);\n+    check (hm.get(i) == i * i);\n+    i += 1u;\n+  }\n+\n+  log \"*** finished test_growth\";\n+}\n+\n fn main() {\n   test_simple();\n+  test_growth();\n }"}]}