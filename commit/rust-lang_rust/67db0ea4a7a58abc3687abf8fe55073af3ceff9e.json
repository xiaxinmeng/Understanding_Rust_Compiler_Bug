{"sha": "67db0ea4a7a58abc3687abf8fe55073af3ceff9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZGIwZWE0YTdhNThhYmMzNjg3YWJmOGZlNTUwNzNhZjNjZWZmOWU=", "commit": {"author": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-12-06T21:30:30Z"}, "committer": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-12-06T21:30:30Z"}, "message": "suggestions from camelid review", "tree": {"sha": "c15552a5879db92067630b026242a9ac7ed9e0a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c15552a5879db92067630b026242a9ac7ed9e0a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67db0ea4a7a58abc3687abf8fe55073af3ceff9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67db0ea4a7a58abc3687abf8fe55073af3ceff9e", "html_url": "https://github.com/rust-lang/rust/commit/67db0ea4a7a58abc3687abf8fe55073af3ceff9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67db0ea4a7a58abc3687abf8fe55073af3ceff9e/comments", "author": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c13a9c020b1a70ad3d33b4de706567d46955e5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c13a9c020b1a70ad3d33b4de706567d46955e5d", "html_url": "https://github.com/rust-lang/rust/commit/0c13a9c020b1a70ad3d33b4de706567d46955e5d"}], "stats": {"total": 100, "additions": 32, "deletions": 68}, "files": [{"sha": "0c1578498b846bfcf73ebc2283b3838fb64aa221", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/67db0ea4a7a58abc3687abf8fe55073af3ceff9e/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67db0ea4a7a58abc3687abf8fe55073af3ceff9e/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=67db0ea4a7a58abc3687abf8fe55073af3ceff9e", "patch": "@@ -403,6 +403,32 @@ impl InherentCollect<'tcx> {\n                 // OK\n             }\n             _ => {\n+                let to_implement = if assoc_items.len() == 0 {\n+                    String::new()\n+                } else {\n+                    let plural = assoc_items.len() > 1;\n+                    let assoc_items_kind = {\n+                        let item_types = assoc_items.iter().map(|x| x.kind);\n+                        if item_types.clone().all(|x| x == hir::AssocItemKind::Const) {\n+                            \"constant\"\n+                        } else if item_types\n+                            .clone()\n+                            .all(|x| matches! {x, hir::AssocItemKind::Fn{ .. } })\n+                        {\n+                            \"method\"\n+                        } else {\n+                            \"associated item\"\n+                        }\n+                    };\n+\n+                    format!(\n+                        \" to implement {} {}{}\",\n+                        if plural { \"these\" } else { \"this\" },\n+                        assoc_items_kind,\n+                        if plural { \"s\" } else { \"\" }\n+                    )\n+                };\n+\n                 struct_span_err!(\n                     self.tcx.sess,\n                     span,\n@@ -412,34 +438,7 @@ impl InherentCollect<'tcx> {\n                     lang,\n                     ty\n                 )\n-                .span_help(\n-                    span,\n-                    &format!(\"consider using a trait{}\", {\n-                        if assoc_items.len() == 0 {\n-                            String::new()\n-                        } else {\n-                            let plural = assoc_items.len() > 1;\n-                            format!(\n-                                \" to implement {} {}{}\",\n-                                if plural { \"these\" } else { \"this\" },\n-                                {\n-                                    let item_types = assoc_items.iter().map(|x| x.kind);\n-                                    if item_types.clone().all(|x| x == hir::AssocItemKind::Const) {\n-                                        \"constant\"\n-                                    } else if item_types\n-                                        .clone()\n-                                        .all(|x| matches! {x, hir::AssocItemKind::Fn{ .. } })\n-                                    {\n-                                        \"method\"\n-                                    } else {\n-                                        \"associated item\"\n-                                    }\n-                                },\n-                                if plural { \"s\" } else { \"\" }\n-                            )\n-                        }\n-                    }),\n-                )\n+                .help(&format!(\"consider using a trait{}\", to_implement))\n                 .emit();\n             }\n         }"}, {"sha": "be47e93d19a9bb79b3fb3311141044c6cfc15ad7", "filename": "src/test/ui/error-codes/E0390.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67db0ea4a7a58abc3687abf8fe55073af3ceff9e/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67db0ea4a7a58abc3687abf8fe55073af3ceff9e/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0390.stderr?ref=67db0ea4a7a58abc3687abf8fe55073af3ceff9e", "patch": "@@ -4,11 +4,7 @@ error[E0390]: only a single inherent implementation marked with `#[lang = \"mut_p\n LL | impl *mut Foo {}\n    | ^^^^^^^^^^^^^^^^\n    |\n-help: consider using a trait\n-  --> $DIR/E0390.rs:5:1\n-   |\n-LL | impl *mut Foo {}\n-   | ^^^^^^^^^^^^^^^^\n+   = help: consider using a trait\n \n error: aborting due to previous error\n "}, {"sha": "d19c85b17f9e793a71b0f030227b2fff582c8e4a", "filename": "src/test/ui/kinds-of-primitive-impl.stderr", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/67db0ea4a7a58abc3687abf8fe55073af3ceff9e/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67db0ea4a7a58abc3687abf8fe55073af3ceff9e/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkinds-of-primitive-impl.stderr?ref=67db0ea4a7a58abc3687abf8fe55073af3ceff9e", "patch": "@@ -7,14 +7,7 @@ LL | |     pub const B: u8 = 0;\n LL | | }\n    | |_^\n    |\n-help: consider using a trait to implement this constant\n-  --> $DIR/kinds-of-primitive-impl.rs:4:1\n-   |\n-LL | / impl u8 {\n-LL | |\n-LL | |     pub const B: u8 = 0;\n-LL | | }\n-   | |_^\n+   = help: consider using a trait to implement this constant\n \n error[E0390]: only a single inherent implementation marked with `#[lang = \"str\"]` is allowed for the `str` primitive\n   --> $DIR/kinds-of-primitive-impl.rs:9:1\n@@ -26,15 +19,7 @@ LL | |     fn bar(self) {}\n LL | | }\n    | |_^\n    |\n-help: consider using a trait to implement these methods\n-  --> $DIR/kinds-of-primitive-impl.rs:9:1\n-   |\n-LL | / impl str {\n-LL | |\n-LL | |     fn foo() {}\n-LL | |     fn bar(self) {}\n-LL | | }\n-   | |_^\n+   = help: consider using a trait to implement these methods\n \n error[E0390]: only a single inherent implementation marked with `#[lang = \"char\"]` is allowed for the `char` primitive\n   --> $DIR/kinds-of-primitive-impl.rs:15:1\n@@ -48,17 +33,7 @@ LL | |     fn bar(self) {}\n LL | | }\n    | |_^\n    |\n-help: consider using a trait to implement these associated items\n-  --> $DIR/kinds-of-primitive-impl.rs:15:1\n-   |\n-LL | / impl char {\n-LL | |\n-LL | |     pub const B: u8 = 0;\n-LL | |     pub const C: u8 = 0;\n-LL | |     fn foo() {}\n-LL | |     fn bar(self) {}\n-LL | | }\n-   | |_^\n+   = help: consider using a trait to implement these associated items\n \n error: aborting due to 3 previous errors\n "}, {"sha": "50a0d5bef86d32d5da908db03c8162bf72e59765", "filename": "src/test/ui/single-primitive-inherent-impl.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67db0ea4a7a58abc3687abf8fe55073af3ceff9e/src%2Ftest%2Fui%2Fsingle-primitive-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67db0ea4a7a58abc3687abf8fe55073af3ceff9e/src%2Ftest%2Fui%2Fsingle-primitive-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-primitive-inherent-impl.stderr?ref=67db0ea4a7a58abc3687abf8fe55073af3ceff9e", "patch": "@@ -6,13 +6,7 @@ LL | |\n LL | | }\n    | |_^\n    |\n-help: consider using a trait\n-  --> $DIR/single-primitive-inherent-impl.rs:11:1\n-   |\n-LL | / impl str {\n-LL | |\n-LL | | }\n-   | |_^\n+   = help: consider using a trait\n \n error: aborting due to previous error\n "}]}