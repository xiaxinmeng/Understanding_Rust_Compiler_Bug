{"sha": "a92b5cc916a42c6f3425347281bb656d071c26d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MmI1Y2M5MTZhNDJjNmYzNDI1MzQ3MjgxYmI2NTZkMDcxYzI2ZDU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-06T10:34:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-06T10:34:00Z"}, "message": "Remove references to `StaticMutex` which got removed a while ago", "tree": {"sha": "5deabdbd4ee95a5753600dd1ecffc14059a8727d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5deabdbd4ee95a5753600dd1ecffc14059a8727d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a92b5cc916a42c6f3425347281bb656d071c26d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a92b5cc916a42c6f3425347281bb656d071c26d5", "html_url": "https://github.com/rust-lang/rust/commit/a92b5cc916a42c6f3425347281bb656d071c26d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a92b5cc916a42c6f3425347281bb656d071c26d5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c98d2e63f732682b057c8c453b08f9e12b262e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c98d2e63f732682b057c8c453b08f9e12b262e6", "html_url": "https://github.com/rust-lang/rust/commit/7c98d2e63f732682b057c8c453b08f9e12b262e6"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "714218a04178ed26059396cc5b6fc0908ba48c3f", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a92b5cc916a42c6f3425347281bb656d071c26d5/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a92b5cc916a42c6f3425347281bb656d071c26d5/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=a92b5cc916a42c6f3425347281bb656d071c26d5", "patch": "@@ -1281,9 +1281,7 @@ const F: &'static C = &D; // error\n ```\n \n This is because cell types do operations that are not thread-safe. Due to this,\n-they don't implement Sync and thus can't be placed in statics. In this\n-case, `StaticMutex` would work just fine, but it isn't stable yet:\n-https://doc.rust-lang.org/nightly/std/sync/struct.StaticMutex.html\n+they don't implement Sync and thus can't be placed in statics.\n \n However, if you still wish to use these types, you can achieve this by an unsafe\n wrapper:"}, {"sha": "f6cb8beae84158e6fe6715676c16d60d420b2794", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a92b5cc916a42c6f3425347281bb656d071c26d5/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a92b5cc916a42c6f3425347281bb656d071c26d5/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=a92b5cc916a42c6f3425347281bb656d071c26d5", "patch": "@@ -31,12 +31,10 @@\n // initialization closure panics, the Once enters a \"poisoned\" state which means\n // that all future calls will immediately panic as well.\n //\n-// So to implement this, one might first reach for a `StaticMutex`, but those\n-// unfortunately need to be deallocated (e.g. call `destroy()`) to free memory\n-// on all OSes (some of the BSDs allocate memory for mutexes). It also gets a\n-// lot harder with poisoning to figure out when the mutex needs to be\n-// deallocated because it's not after the closure finishes, but after the first\n-// successful closure finishes.\n+// So to implement this, one might first reach for a `Mutex`, but those cannot\n+// be put into a `static`. It also gets a lot harder with poisoning to figure\n+// out when the mutex needs to be deallocated because it's not after the closure\n+// finishes, but after the first successful closure finishes.\n //\n // All in all, this is instead implemented with atomics and lock-free\n // operations! Whee! Each `Once` has one word of atomic state, and this state is"}, {"sha": "60b03cdbeb0e9923b8c6b640b386090d126f2dcf", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a92b5cc916a42c6f3425347281bb656d071c26d5/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a92b5cc916a42c6f3425347281bb656d071c26d5/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=a92b5cc916a42c6f3425347281bb656d071c26d5", "patch": "@@ -49,9 +49,6 @@ impl Mutex {\n         // references, we instead create the mutex with type\n         // PTHREAD_MUTEX_NORMAL which is guaranteed to deadlock if we try to\n         // re-lock it from the same thread, thus avoiding undefined behavior.\n-        //\n-        // We can't do anything for StaticMutex, but that type is deprecated\n-        // anyways.\n         let mut attr: libc::pthread_mutexattr_t = mem::uninitialized();\n         let r = libc::pthread_mutexattr_init(&mut attr);\n         debug_assert_eq!(r, 0);"}]}