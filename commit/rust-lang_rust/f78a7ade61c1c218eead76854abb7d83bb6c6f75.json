{"sha": "f78a7ade61c1c218eead76854abb7d83bb6c6f75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3OGE3YWRlNjFjMWMyMThlZWFkNzY4NTRhYmI3ZDgzYmI2YzZmNzU=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@google.com", "date": "2020-10-04T17:07:30Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@google.com", "date": "2020-10-04T17:07:30Z"}, "message": "Inline \"eof\" methods", "tree": {"sha": "97759dbe6964d1903ffc7cfbe4437db529568e41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97759dbe6964d1903ffc7cfbe4437db529568e41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f78a7ade61c1c218eead76854abb7d83bb6c6f75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEGdbxTRDxXfPwlFQKMuM+wV4f7zwFAl96AW8ACgkQMuM+wV4f\n7zwW2Av7BX4SId/Wmjh3JDAjirm3AriiRxOETRH1st+WHd/bdHAUHpKxp3tzv8Nk\nI4zfLKo4lX1nSGDVXzMJxIZbbYRsICPuJTzV75rVRALq0lGjdyovjxe6CoMttNUe\nlYXc0EonomGRUZpAeEA/kOyTVlulMOp7BPm27LppWeYTNUpOaM10E/aa+UwKQeE4\ncqDv0axgHv8mxRXtjW5eL6TvGSz1/bRVa7Jvgi04cWunNoam2+W6M5PRR6Hdf+uw\nzqRd1MCCNt5dp9S7IHnvEWVrrQWFXfs1HEjdDfcu6CFNyXRcu0Kb/MMfbakh6m6S\ngpat/+6n7exxRuYmfo3dz+aplcXPz1v9mRbQB3WZ6RU/TXkf5NRfvPVsFwGXL19B\ni8TmDEwCQ/ZsJ7yE8AQsV4TzEbuN+X9J1L4xEN83LrS5NzcW1occtofJSSp/Gni2\nJSNu+uWZ4F2K6dfQt7i2eG+1sAXMsj8O7PpjYjdmW4aHfsdjD2lZx1Yp0uzDjx3g\nQmoeCk3+\n=rDyB\n-----END PGP SIGNATURE-----", "payload": "tree 97759dbe6964d1903ffc7cfbe4437db529568e41\nparent 9601724b11bbd9081b1bee6f7e478a5d2b9ace41\nauthor Tamir Duberstein <tamird@google.com> 1601831250 +0000\ncommitter Tamir Duberstein <tamird@google.com> 1601831250 +0000\n\nInline \"eof\" methods\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f78a7ade61c1c218eead76854abb7d83bb6c6f75", "html_url": "https://github.com/rust-lang/rust/commit/f78a7ade61c1c218eead76854abb7d83bb6c6f75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f78a7ade61c1c218eead76854abb7d83bb6c6f75/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9601724b11bbd9081b1bee6f7e478a5d2b9ace41", "url": "https://api.github.com/repos/rust-lang/rust/commits/9601724b11bbd9081b1bee6f7e478a5d2b9ace41", "html_url": "https://github.com/rust-lang/rust/commit/9601724b11bbd9081b1bee6f7e478a5d2b9ace41"}], "stats": {"total": 15, "additions": 2, "deletions": 13}, "files": [{"sha": "3a5fd8f6f5d0ed371a5e6208f62dfee485de0f74", "filename": "library/std/src/net/parser.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f78a7ade61c1c218eead76854abb7d83bb6c6f75/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78a7ade61c1c218eead76854abb7d83bb6c6f75/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs?ref=f78a7ade61c1c218eead76854abb7d83bb6c6f75", "patch": "@@ -44,10 +44,6 @@ impl<'a> Parser<'a> {\n         Parser { state: input.as_bytes() }\n     }\n \n-    fn is_eof(&self) -> bool {\n-        self.state.is_empty()\n-    }\n-\n     /// Run a parser, and restore the pre-parse state if it fails\n     fn read_atomically<T, F>(&mut self, inner: F) -> Option<T>\n     where\n@@ -63,19 +59,12 @@ impl<'a> Parser<'a> {\n \n     /// Run a parser, but fail if the entire input wasn't consumed.\n     /// Doesn't run atomically.\n-    fn read_till_eof<T, F>(&mut self, inner: F) -> Option<T>\n-    where\n-        F: FnOnce(&mut Parser<'_>) -> Option<T>,\n-    {\n-        inner(self).filter(|_| self.is_eof())\n-    }\n-\n-    /// Same as read_till_eof, but returns a Result<AddrParseError> on failure\n     fn parse_with<T, F>(&mut self, inner: F) -> Result<T, AddrParseError>\n     where\n         F: FnOnce(&mut Parser<'_>) -> Option<T>,\n     {\n-        self.read_till_eof(inner).ok_or(AddrParseError(()))\n+        let result = inner(self);\n+        if self.state.is_empty() { result } else { None }.ok_or(AddrParseError(()))\n     }\n \n     /// Read the next character from the input"}]}