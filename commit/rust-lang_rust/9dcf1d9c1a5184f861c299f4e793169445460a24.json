{"sha": "9dcf1d9c1a5184f861c299f4e793169445460a24", "node_id": "C_kwDOAAsO6NoAKDlkY2YxZDljMWE1MTg0Zjg2MWMyOTlmNGU3OTMxNjk0NDU0NjBhMjQ", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-26T22:32:32Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-07-26T22:33:17Z"}, "message": "rustdoc: remove Clean trait impl for ty::PolyTraitPredicate", "tree": {"sha": "b15023a42ae0a3688fffd82676d1fb6b6e89b570", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b15023a42ae0a3688fffd82676d1fb6b6e89b570"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dcf1d9c1a5184f861c299f4e793169445460a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dcf1d9c1a5184f861c299f4e793169445460a24", "html_url": "https://github.com/rust-lang/rust/commit/9dcf1d9c1a5184f861c299f4e793169445460a24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dcf1d9c1a5184f861c299f4e793169445460a24/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94ef5cc769db15492e2d004e88a2114b307e33a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94ef5cc769db15492e2d004e88a2114b307e33a", "html_url": "https://github.com/rust-lang/rust/commit/e94ef5cc769db15492e2d004e88a2114b307e33a"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "2f3ca41723d8558ff9c3570576103d4dee5571f2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9dcf1d9c1a5184f861c299f4e793169445460a24/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dcf1d9c1a5184f861c299f4e793169445460a24/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9dcf1d9c1a5184f861c299f4e793169445460a24", "patch": "@@ -327,7 +327,9 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::Predicate<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<WherePredicate> {\n         let bound_predicate = self.kind();\n         match bound_predicate.skip_binder() {\n-            ty::PredicateKind::Trait(pred) => bound_predicate.rebind(pred).clean(cx),\n+            ty::PredicateKind::Trait(pred) => {\n+                clean_poly_trait_predicate(bound_predicate.rebind(pred), cx)\n+            }\n             ty::PredicateKind::RegionOutlives(pred) => clean_region_outlives_predicate(pred, cx),\n             ty::PredicateKind::TypeOutlives(pred) => clean_type_outlives_predicate(pred, cx),\n             ty::PredicateKind::Projection(pred) => Some(clean_projection_predicate(pred, cx)),\n@@ -344,22 +346,23 @@ impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::Predicate<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Option<WherePredicate>> for ty::PolyTraitPredicate<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Option<WherePredicate> {\n-        // `T: ~const Destruct` is hidden because `T: Destruct` is a no-op.\n-        if self.skip_binder().constness == ty::BoundConstness::ConstIfConst\n-            && Some(self.skip_binder().def_id()) == cx.tcx.lang_items().destruct_trait()\n-        {\n-            return None;\n-        }\n-\n-        let poly_trait_ref = self.map_bound(|pred| pred.trait_ref);\n-        Some(WherePredicate::BoundPredicate {\n-            ty: clean_middle_ty(poly_trait_ref.skip_binder().self_ty(), cx, None),\n-            bounds: vec![poly_trait_ref.clean(cx)],\n-            bound_params: Vec::new(),\n-        })\n+fn clean_poly_trait_predicate<'tcx>(\n+    pred: ty::PolyTraitPredicate<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Option<WherePredicate> {\n+    // `T: ~const Destruct` is hidden because `T: Destruct` is a no-op.\n+    if pred.skip_binder().constness == ty::BoundConstness::ConstIfConst\n+        && Some(pred.skip_binder().def_id()) == cx.tcx.lang_items().destruct_trait()\n+    {\n+        return None;\n     }\n+\n+    let poly_trait_ref = pred.map_bound(|pred| pred.trait_ref);\n+    Some(WherePredicate::BoundPredicate {\n+        ty: clean_middle_ty(poly_trait_ref.skip_binder().self_ty(), cx, None),\n+        bounds: vec![poly_trait_ref.clean(cx)],\n+        bound_params: Vec::new(),\n+    })\n }\n \n fn clean_region_outlives_predicate<'tcx>("}]}