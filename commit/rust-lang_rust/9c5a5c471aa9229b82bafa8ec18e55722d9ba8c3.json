{"sha": "9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNWE1YzQ3MWFhOTIyOWI4MmJhZmE4ZWMxOGU1NTcyMmQ5YmE4YzM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-10-02T01:39:19Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-10-02T01:39:19Z"}, "message": "Rename to `was_placeholder` to `from_forall`", "tree": {"sha": "b9cf4bfe42842d8c7c8c356f7290a64f4648fe65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9cf4bfe42842d8c7c8c356f7290a64f4648fe65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl2T/9AACgkQtAh+UQ6Y\nsWROJQ/9Hl6u+iv01/xxjOR2TcbYFcnpMuVo7w0gd9rYzf8fdlkqbvdffDQ3x2jP\n3denKt5iBW97tXx6InTglJfCPQZC0RfhS3/JEn2f7nOHKhglWIIgT+I/vIvjb9ab\nxeMYptRVYVOZO+sjEAvMmLoQSoa2tjqdp7ImoKLps/89hZ4XOWiHvJebf+6MTJUi\n1DAs7JT3sRATFw65Yuee6t1Hnabi7RVT+b40JU0tizsJS3HcY19TBzOdbyoW/K/N\nPrf7UfY85WvlN/xLBn03EWsrmcu4qXbVDKg/t4sdLlhFjXSwTZ6e09HMKtQci3Xm\nFO1L4jUb3jcXbmNDIeOx5XhWvBfFxqEko3LoVUkU23hfmklghHC6xqpJPhZcrxI7\nWpgEAAuo+4DPIXTgUGUlKtlSAk8Ea92bY1m5SLp7nnoCmBbtMzudwDktUYF+Gw4V\n5ZWf+UBsVsf3niGQ7gEDtK4OCK4OHkWNnqf+K1JKRHIsIe7RlO5DBqEHrcQdM5Lh\nqfxXTyHwXJh0wqAJuyUM23SJof2i8kwmRNRMf3uErhy0GlR+ojzlHWwN4KIazEN8\n71U99fSCX2aQKINXLhls4HYtXezu0b+gJUfZST2FlZYrR8Fln6PPfrTgiqZG1EXc\nF+eX8LD0YbE1IZVv1qScgrtzHygy5XNFs7NfBhWwcwai4BnVRjE=\n=hqdy\n-----END PGP SIGNATURE-----", "payload": "tree b9cf4bfe42842d8c7c8c356f7290a64f4648fe65\nparent 1caa6dc5461292611fcad75c8114c9fd35d7e923\nauthor Aaron Hill <aa1ronham@gmail.com> 1569980359 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1569980359 -0400\n\nRename to `was_placeholder` to `from_forall`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3", "html_url": "https://github.com/rust-lang/rust/commit/9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1caa6dc5461292611fcad75c8114c9fd35d7e923", "url": "https://api.github.com/repos/rust-lang/rust/commits/1caa6dc5461292611fcad75c8114c9fd35d7e923", "html_url": "https://github.com/rust-lang/rust/commit/1caa6dc5461292611fcad75c8114c9fd35d7e923"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "35db82406ab4681ca993630a8dba1179cfa5b9ca", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3", "patch": "@@ -419,7 +419,17 @@ pub enum NLLRegionVariableOrigin {\n     Placeholder(ty::PlaceholderRegion),\n \n     Existential {\n-        was_placeholder: bool\n+        /// If this is true, then this variable was created to represent a lifetime\n+        /// bound in a `for` binder. For example, it might have been created to\n+        /// represent the lifetime `'a` in a type like `for<'a> fn(&'a u32)`.\n+        /// Such variables are created when we are trying to figure out if there\n+        /// is any valid instantiation of `'a` that could fit into some scenario.\n+        ///\n+        /// This is used to inform error reporting: in the case that we are trying to\n+        /// determine whether there is any valid instantiation of a `'a` variable that meets\n+        /// some constraint C, we want to blame the \"source\" of that `for` type,\n+        /// rather than blaming the source of the constraint C.\n+        from_forall: bool\n     },\n }\n "}, {"sha": "fa02e2dd234ef59dc7f8d6083387d12d1b8d65b2", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3", "patch": "@@ -159,11 +159,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         let should_reverse = match from_region_origin {\n             NLLRegionVariableOrigin::FreeRegion\n-                | NLLRegionVariableOrigin::Existential { was_placeholder: false  } => {\n+                | NLLRegionVariableOrigin::Existential { from_forall: false  } => {\n                     true\n             }\n             NLLRegionVariableOrigin::Placeholder(_)\n-                | NLLRegionVariableOrigin::Existential { was_placeholder: true  } => {\n+                | NLLRegionVariableOrigin::Existential { from_forall: true  } => {\n                     false\n             }\n         };"}, {"sha": "dbb810db555b40769e2de65dca44427f7bb69c24", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3", "patch": "@@ -1612,7 +1612,7 @@ impl<'tcx> RegionDefinition<'tcx> {\n \n         let origin = match rv_origin {\n             RegionVariableOrigin::NLL(origin) => origin,\n-            _ => NLLRegionVariableOrigin::Existential { was_placeholder: false },\n+            _ => NLLRegionVariableOrigin::Existential { from_forall: false },\n         };\n \n         Self { origin, universe, external_name: None }"}, {"sha": "315c369716e38f005bad5b602cec465fa3812666", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3", "patch": "@@ -35,7 +35,7 @@ where\n     infcx\n         .tcx\n         .fold_regions(value, &mut false, |_region, _depth| {\n-            let origin = NLLRegionVariableOrigin::Existential { was_placeholder: false };\n+            let origin = NLLRegionVariableOrigin::Existential { from_forall: false };\n             infcx.next_nll_region_var(origin)\n         })\n }"}, {"sha": "80bf0478128c792cd9f6d42d8296aba609c24ecc", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=9c5a5c471aa9229b82bafa8ec18e55722d9ba8c3", "patch": "@@ -66,9 +66,9 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n         self.infcx.create_next_universe()\n     }\n \n-    fn next_existential_region_var(&mut self, was_placeholder: bool) -> ty::Region<'tcx> {\n+    fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n         if let Some(_) = &mut self.borrowck_context {\n-            let origin = NLLRegionVariableOrigin::Existential { was_placeholder };\n+            let origin = NLLRegionVariableOrigin::Existential { from_forall };\n             self.infcx.next_nll_region_var(origin)\n         } else {\n             self.infcx.tcx.lifetimes.re_erased\n@@ -89,7 +89,7 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n         self.infcx\n             .next_nll_region_var_in_universe(NLLRegionVariableOrigin::Existential {\n-                was_placeholder: false\n+                from_forall: false\n             }, universe)\n     }\n "}]}