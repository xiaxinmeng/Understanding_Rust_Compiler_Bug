{"sha": "fd7b8c84d7a65d579d392130ef6293a0671f8a3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkN2I4Yzg0ZDdhNjVkNTc5ZDM5MjEzMGVmNjI5M2EwNjcxZjhhM2Q=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-02-26T20:40:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-26T20:40:35Z"}, "message": "Merge pull request #1338 from ignatenkobrain/update-deps\n\nUpdate deps", "tree": {"sha": "9136cb727e1c48018d8f7bc2ce4cb58f23486ce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9136cb727e1c48018d8f7bc2ce4cb58f23486ce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd7b8c84d7a65d579d392130ef6293a0671f8a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7b8c84d7a65d579d392130ef6293a0671f8a3d", "html_url": "https://github.com/rust-lang/rust/commit/fd7b8c84d7a65d579d392130ef6293a0671f8a3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd7b8c84d7a65d579d392130ef6293a0671f8a3d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ad352239acbc5c2824ab97ab8881ea843496d0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad352239acbc5c2824ab97ab8881ea843496d0e", "html_url": "https://github.com/rust-lang/rust/commit/7ad352239acbc5c2824ab97ab8881ea843496d0e"}, {"sha": "106e011511bf216423a6f9bf91b54aeae28a0644", "url": "https://api.github.com/repos/rust-lang/rust/commits/106e011511bf216423a6f9bf91b54aeae28a0644", "html_url": "https://github.com/rust-lang/rust/commit/106e011511bf216423a6f9bf91b54aeae28a0644"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "3d076ad576302287a3bba56f6c6f580a8d940951", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd7b8c84d7a65d579d392130ef6293a0671f8a3d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd7b8c84d7a65d579d392130ef6293a0671f8a3d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=fd7b8c84d7a65d579d392130ef6293a0671f8a3d", "patch": "@@ -19,14 +19,14 @@ cargo-fmt = []\n toml = \"0.2.1\"\n rustc-serialize = \"0.3\"\n unicode-segmentation = \"1.0.0\"\n-regex = \"0.1\"\n+regex = \"0.2\"\n term = \"0.4\"\n strings = \"0.0.1\"\n diff = \"0.1\"\n-syntex_syntax = \"0.56\"\n-syntex_errors = \"0.56\"\n+syntex_syntax = \"0.58\"\n+syntex_errors = \"0.58\"\n log = \"0.3\"\n-env_logger = \"0.3\"\n+env_logger = \"0.4\"\n getopts = \"0.2\"\n itertools = \"0.5.8\"\n multimap = \"0.3\""}, {"sha": "cbaa29a456904e797bfec4d45e4b5d12f2c84572", "filename": "src/patterns.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd7b8c84d7a65d579d392130ef6293a0671f8a3d/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7b8c84d7a65d579d392130ef6293a0671f8a3d/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=fd7b8c84d7a65d579d392130ef6293a0671f8a3d", "patch": "@@ -18,7 +18,7 @@ use types::{rewrite_path, PathContext};\n use super::Spanned;\n use comment::FindUncommented;\n \n-use syntax::ast::{self, BindingMode, Pat, PatKind, FieldPat};\n+use syntax::ast::{self, BindingMode, Pat, PatKind, FieldPat, RangeEnd};\n use syntax::ptr;\n use syntax::codemap::{self, BytePos, Span};\n \n@@ -56,8 +56,15 @@ impl Rewrite for Pat {\n                     None\n                 }\n             }\n-            PatKind::Range(ref lhs, ref rhs) => {\n-                rewrite_pair(&**lhs, &**rhs, \"\", \"...\", \"\", context, shape)\n+            PatKind::Range(ref lhs, ref rhs, ref end_kind) => {\n+                match *end_kind {\n+                    RangeEnd::Included => {\n+                        rewrite_pair(&**lhs, &**rhs, \"\", \"...\", \"\", context, shape)\n+                    }\n+                    RangeEnd::Excluded => {\n+                        rewrite_pair(&**lhs, &**rhs, \"\", \"..\", \"\", context, shape)\n+                    }\n+                }\n             }\n             PatKind::Ref(ref pat, mutability) => {\n                 let prefix = format!(\"&{}\", format_mutability(mutability));"}, {"sha": "8f51b09b6cc067240e85857121ad9cd950e5bad5", "filename": "src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7b8c84d7a65d579d392130ef6293a0671f8a3d/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7b8c84d7a65d579d392130ef6293a0671f8a3d/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=fd7b8c84d7a65d579d392130ef6293a0671f8a3d", "patch": "@@ -32,7 +32,7 @@ pub struct StringFormat<'a> {\n // FIXME: simplify this!\n pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String> {\n     // Strip line breaks.\n-    let re = Regex::new(r\"([^\\\\](\\\\\\\\)*)\\\\[\\n\\r][:space:]*\").unwrap();\n+    let re = Regex::new(r\"([^\\\\](\\\\\\\\)*)\\\\[\\n\\r][[:space:]]*\").unwrap();\n     let stripped_str = re.replace_all(orig, \"$1\");\n \n     let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false).collect::<Vec<&str>>();"}, {"sha": "257b1ec46bf9640051318d21382e08eb2fccb5cf", "filename": "tests/system.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7b8c84d7a65d579d392130ef6293a0671f8a3d/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7b8c84d7a65d579d392130ef6293a0671f8a3d/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=fd7b8c84d7a65d579d392130ef6293a0671f8a3d", "patch": "@@ -300,8 +300,8 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n         .take_while(|line| line_regex.is_match(&line))\n         .filter_map(|line| {\n                         regex.captures_iter(&line).next().map(|capture| {\n-                (capture.at(1).expect(\"Couldn't unwrap capture\").to_owned(),\n-                 capture.at(2).expect(\"Couldn't unwrap capture\").to_owned())\n+                (capture.get(1).expect(\"Couldn't unwrap capture\").as_str().to_owned(),\n+                 capture.get(2).expect(\"Couldn't unwrap capture\").as_str().to_owned())\n             })\n                     })\n         .collect()"}]}