{"sha": "4b1c6690377e1dcac2ffd6357f89192ae63f1822", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMWM2NjkwMzc3ZTFkY2FjMmZmZDYzNTdmODkxOTJhZTYzZjE4MjI=", "commit": {"author": {"name": "Mikko Rantanen", "email": "jubjub@jubjubnest.net", "date": "2016-10-17T20:09:49Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-10-17T20:09:49Z"}, "message": "Add spaces_within_square_brackets config option. (#1191)\n\n* Add spaces_within_square_brackets config option.\r\n\r\nEnabling the config enforces spaces within various array/slice brackets.\r\n\r\n* Fixed budget-calculations for [] spacing", "tree": {"sha": "2944152ec21a331964345c571d2574f58f2051a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2944152ec21a331964345c571d2574f58f2051a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b1c6690377e1dcac2ffd6357f89192ae63f1822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1c6690377e1dcac2ffd6357f89192ae63f1822", "html_url": "https://github.com/rust-lang/rust/commit/4b1c6690377e1dcac2ffd6357f89192ae63f1822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b1c6690377e1dcac2ffd6357f89192ae63f1822/comments", "author": {"login": "Rantanen", "id": 385385, "node_id": "MDQ6VXNlcjM4NTM4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/385385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rantanen", "html_url": "https://github.com/Rantanen", "followers_url": "https://api.github.com/users/Rantanen/followers", "following_url": "https://api.github.com/users/Rantanen/following{/other_user}", "gists_url": "https://api.github.com/users/Rantanen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rantanen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rantanen/subscriptions", "organizations_url": "https://api.github.com/users/Rantanen/orgs", "repos_url": "https://api.github.com/users/Rantanen/repos", "events_url": "https://api.github.com/users/Rantanen/events{/privacy}", "received_events_url": "https://api.github.com/users/Rantanen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23f01eddacccf4c9b871b0fd84d4344fd67bf668", "url": "https://api.github.com/repos/rust-lang/rust/commits/23f01eddacccf4c9b871b0fd84d4344fd67bf668", "html_url": "https://github.com/rust-lang/rust/commit/23f01eddacccf4c9b871b0fd84d4344fd67bf668"}], "stats": {"total": 116, "additions": 105, "deletions": 11}, "files": [{"sha": "38e8201c2c26fb4d728520a0c8d6f4b2ce46a0dc", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b1c6690377e1dcac2ffd6357f89192ae63f1822/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1c6690377e1dcac2ffd6357f89192ae63f1822/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=4b1c6690377e1dcac2ffd6357f89192ae63f1822", "patch": "@@ -417,6 +417,7 @@ create_config! {\n         \"Leave a space after the colon in a trait or lifetime bound\";\n     spaces_around_ranges: bool, false, \"Put spaces around the  .. and ... range operators\";\n     spaces_within_angle_brackets: bool, false, \"Put spaces within non-empty generic arguments\";\n+    spaces_within_square_brackets: bool, false, \"Put spaces within non-empty square brackets\";\n     spaces_within_parens: bool, false, \"Put spaces within non-empty parentheses\";\n     use_try_shorthand: bool, false, \"Replace uses of the try! macro by the ? shorthand\";\n     write_mode: WriteMode, WriteMode::Replace,"}, {"sha": "a43b1ceac3f70b87dee9fd15efa4a85b8a7777cc", "filename": "src/expr.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4b1c6690377e1dcac2ffd6357f89192ae63f1822/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1c6690377e1dcac2ffd6357f89192ae63f1822/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4b1c6690377e1dcac2ffd6357f89192ae63f1822", "patch": "@@ -206,10 +206,16 @@ fn format_expr(expr: &ast::Expr,\n             rewrite_pair(&**expr, &**ty, \"\", \": \", \"\", context, width, offset)\n         }\n         ast::ExprKind::Index(ref expr, ref index) => {\n-            rewrite_pair(&**expr, &**index, \"\", \"[\", \"]\", context, width, offset)\n+            let use_spaces = context.config.spaces_within_square_brackets;\n+            let lbr = if use_spaces { \"[ \" } else { \"[\" };\n+            let rbr = if use_spaces { \" ]\" } else { \"]\" };\n+            rewrite_pair(&**expr, &**index, \"\", lbr, rbr, context, width, offset)\n         }\n         ast::ExprKind::Repeat(ref expr, ref repeats) => {\n-            rewrite_pair(&**expr, &**repeats, \"[\", \"; \", \"]\", context, width, offset)\n+            let use_spaces = context.config.spaces_within_square_brackets;\n+            let lbr = if use_spaces { \"[ \" } else { \"[\" };\n+            let rbr = if use_spaces { \" ]\" } else { \"]\" };\n+            rewrite_pair(&**expr, &**repeats, lbr, \"; \", rbr, context, width, offset)\n         }\n         ast::ExprKind::Range(ref lhs, ref rhs, limits) => {\n             let delim = match limits {\n@@ -303,11 +309,14 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n                             -> Option<String>\n     where I: Iterator<Item = &'a ast::Expr>\n {\n-    // 1 = [\n-    let offset = offset + 1;\n+    let bracket_size = if context.config.spaces_within_square_brackets {\n+        2  // \"[ \"\n+    } else {\n+        1  // \"[\"\n+    };\n+    let offset = offset + bracket_size;\n     let inner_context = &RewriteContext { block_indent: offset, ..*context };\n-    // 2 for brackets\n-    let max_item_width = try_opt!(width.checked_sub(2));\n+    let max_item_width = try_opt!(width.checked_sub(bracket_size * 2));\n     let items = itemize_list(context.codemap,\n                              expr_iter,\n                              \"]\",\n@@ -339,7 +348,11 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n     };\n     let list_str = try_opt!(write_list(&items, &fmt));\n \n-    Some(format!(\"[{}]\", list_str))\n+    Some(if context.config.spaces_within_square_brackets && list_str.len() > 0 {\n+        format!(\"[ {} ]\", list_str)\n+    } else {\n+        format!(\"[{}]\", list_str)\n+    })\n }\n \n // This functions is pretty messy because of the rules around closures and blocks:"}, {"sha": "eb394dddd020ae10d6d098cbd1ae7653e4100b91", "filename": "src/patterns.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b1c6690377e1dcac2ffd6357f89192ae63f1822/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1c6690377e1dcac2ffd6357f89192ae63f1822/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=4b1c6690377e1dcac2ffd6357f89192ae63f1822", "patch": "@@ -94,7 +94,11 @@ impl Rewrite for Pat {\n                 let pats = try_opt!(pats);\n \n                 // Unwrap all the sub-strings and join them with commas.\n-                let result = format!(\"[{}]\", pats.join(\", \"));\n+                let result = if context.config.spaces_within_square_brackets {\n+                    format!(\"[ {} ]\", pats.join(\", \"))\n+                } else {\n+                    format!(\"[{}]\", pats.join(\", \"))\n+                };\n                 wrap_str(result, context.config.max_width, width, offset)\n             }\n             PatKind::Struct(ref path, ref fields, elipses) => {"}, {"sha": "af3bf94498fdc3d230d686303cfb076be4717b12", "filename": "src/types.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4b1c6690377e1dcac2ffd6357f89192ae63f1822/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1c6690377e1dcac2ffd6357f89192ae63f1822/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=4b1c6690377e1dcac2ffd6357f89192ae63f1822", "patch": "@@ -607,8 +607,17 @@ impl Rewrite for ast::Ty {\n                     })\n             }\n             ast::TyKind::Vec(ref ty) => {\n-                let budget = try_opt!(width.checked_sub(2));\n-                ty.rewrite(context, budget, offset + 1).map(|ty_str| format!(\"[{}]\", ty_str))\n+                let budget = if context.config.spaces_within_square_brackets {\n+                    try_opt!(width.checked_sub(4))\n+                } else {\n+                    try_opt!(width.checked_sub(2))\n+                };\n+                ty.rewrite(context, budget, offset + 1)\n+                    .map(|ty_str| if context.config.spaces_within_square_brackets {\n+                        format!(\"[ {} ]\", ty_str)\n+                    } else {\n+                        format!(\"[{}]\", ty_str)\n+                    })\n             }\n             ast::TyKind::Tup(ref items) => {\n                 rewrite_tuple(context,\n@@ -622,7 +631,10 @@ impl Rewrite for ast::Ty {\n                 rewrite_path(context, false, q_self.as_ref(), path, width, offset)\n             }\n             ast::TyKind::FixedLengthVec(ref ty, ref repeats) => {\n-                rewrite_pair(&**ty, &**repeats, \"[\", \"; \", \"]\", context, width, offset)\n+                let use_spaces = context.config.spaces_within_square_brackets;\n+                let lbr = if use_spaces { \"[ \" } else { \"[\" };\n+                let rbr = if use_spaces { \" ]\" } else { \"]\" };\n+                rewrite_pair(&**ty, &**repeats, lbr, \"; \", rbr, context, width, offset)\n             }\n             ast::TyKind::Infer => {\n                 if width >= 1 {"}, {"sha": "6988ce5ed1cd88d624742be52202ecdadbd952c5", "filename": "tests/source/spaces-within-square-brackets.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4b1c6690377e1dcac2ffd6357f89192ae63f1822/tests%2Fsource%2Fspaces-within-square-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1c6690377e1dcac2ffd6357f89192ae63f1822/tests%2Fsource%2Fspaces-within-square-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspaces-within-square-brackets.rs?ref=4b1c6690377e1dcac2ffd6357f89192ae63f1822", "patch": "@@ -0,0 +1,28 @@\n+// rustfmt-spaces_within_square_brackets: true\n+\n+fn main() {\n+\n+    let arr: [i32; 5] = [1, 2, 3, 4, 5];\n+    let arr: [i32; 500] = [0; 500];\n+\n+    let v = vec![1, 2, 3];\n+    assert_eq!(arr, [1, 2, 3]);\n+\n+    let i = arr[0];\n+\n+    let slice = &arr[1..2];\n+\n+    let line100_________________________________________________________________________ = [1, 2];\n+    let line101__________________________________________________________________________ = [1, 2];\n+    let line102___________________________________________________________________________ = [1, 2];\n+    let line103____________________________________________________________________________ = [1, 2];\n+    let line104_____________________________________________________________________________ = [1, 2];\n+\n+    let line100_____________________________________________________________________ = vec![1, 2];\n+    let line101______________________________________________________________________ = vec![1, 2];\n+    let line102_______________________________________________________________________ = vec![1, 2];\n+    let line103________________________________________________________________________ = vec![1, 2];\n+    let line104_________________________________________________________________________ = vec![1, 2];\n+}\n+\n+fn f(slice: &[i32]) {}"}, {"sha": "eb58a68370474c8914e05eeec1285456e4a75e46", "filename": "tests/target/spaces-within-square-brackets.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4b1c6690377e1dcac2ffd6357f89192ae63f1822/tests%2Ftarget%2Fspaces-within-square-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b1c6690377e1dcac2ffd6357f89192ae63f1822/tests%2Ftarget%2Fspaces-within-square-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-within-square-brackets.rs?ref=4b1c6690377e1dcac2ffd6357f89192ae63f1822", "patch": "@@ -0,0 +1,36 @@\n+// rustfmt-spaces_within_square_brackets: true\n+\n+fn main() {\n+\n+    let arr: [ i32; 5 ] = [ 1, 2, 3, 4, 5 ];\n+    let arr: [ i32; 500 ] = [ 0; 500 ];\n+\n+    let v = vec![ 1, 2, 3 ];\n+    assert_eq!(arr, [ 1, 2, 3 ]);\n+\n+    let i = arr[ 0 ];\n+\n+    let slice = &arr[ 1..2 ];\n+\n+    let line100_________________________________________________________________________ = [ 1, 2 ];\n+    let line101__________________________________________________________________________ = [ 1,\n+                                                                                              2 ];\n+    let line102___________________________________________________________________________ = [ 1,\n+                                                                                               2 ];\n+    let line103____________________________________________________________________________ = [ 1,\n+                                                                                                2 ];\n+    let line104_____________________________________________________________________________ =\n+        [ 1, 2 ];\n+\n+    let line100_____________________________________________________________________ = vec![ 1, 2 ];\n+    let line101______________________________________________________________________ = vec![ 1,\n+                                                                                              2 ];\n+    let line102_______________________________________________________________________ = vec![ 1,\n+                                                                                               2 ];\n+    let line103________________________________________________________________________ = vec![ 1,\n+                                                                                                2 ];\n+    let line104_________________________________________________________________________ =\n+        vec![ 1, 2 ];\n+}\n+\n+fn f(slice: &[ i32 ]) {}"}]}