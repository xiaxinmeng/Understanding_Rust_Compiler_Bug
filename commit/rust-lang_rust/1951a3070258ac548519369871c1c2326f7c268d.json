{"sha": "1951a3070258ac548519369871c1c2326f7c268d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NTFhMzA3MDI1OGFjNTQ4NTE5MzY5ODcxYzFjMjMyNmY3YzI2OGQ=", "commit": {"author": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2018-07-19T17:18:06Z"}, "committer": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2018-07-19T17:48:08Z"}, "message": "convert LocalWithRegion to Local", "tree": {"sha": "5c7590894597dabc09e18199448dfda77b2a5fa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c7590894597dabc09e18199448dfda77b2a5fa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1951a3070258ac548519369871c1c2326f7c268d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1951a3070258ac548519369871c1c2326f7c268d", "html_url": "https://github.com/rust-lang/rust/commit/1951a3070258ac548519369871c1c2326f7c268d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1951a3070258ac548519369871c1c2326f7c268d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0819ba9bea742dcc484a939710952a9840c8fae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0819ba9bea742dcc484a939710952a9840c8fae8", "html_url": "https://github.com/rust-lang/rust/commit/0819ba9bea742dcc484a939710952a9840c8fae8"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "95eac46afbb341d4d8300af77bffca78cf54daa5", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1951a3070258ac548519369871c1c2326f7c268d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1951a3070258ac548519369871c1c2326f7c268d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=1951a3070258ac548519369871c1c2326f7c268d", "patch": "@@ -30,7 +30,7 @@ use std::path::PathBuf;\n use std::rc::Rc;\n use std::str::FromStr;\n use transform::MirSource;\n-use util::liveness::{IdentityMap, LivenessResults, LocalSet, NllLivenessMap};\n+use util::liveness::{LivenessResults, LocalSet, NllLivenessMap};\n \n use self::mir_util::PassWhere;\n use polonius_engine::{Algorithm, Output};\n@@ -220,7 +220,7 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n         return;\n     }\n \n-    let map = &IdentityMap::new(mir);\n+    let map = &NllLivenessMap::compute(mir);\n \n     let regular_liveness_per_location: FxHashMap<_, _> = mir\n         .basic_blocks()"}, {"sha": "6fa1ce44fab8f9b90c1b2790c07a7ef2821ad2a1", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1951a3070258ac548519369871c1c2326f7c268d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1951a3070258ac548519369871c1c2326f7c268d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness.rs?ref=1951a3070258ac548519369871c1c2326f7c268d", "patch": "@@ -13,15 +13,15 @@ use dataflow::move_paths::{HasMoveData, MoveData};\n use dataflow::MaybeInitializedPlaces;\n use dataflow::{FlowAtLocation, FlowsAtLocation};\n use rustc::infer::canonical::QueryRegionConstraint;\n-use rustc::mir::{Local, LocalWithRegion};\n+use rustc::mir::LocalWithRegion;\n use rustc::mir::{BasicBlock, Location, Mir};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc::traits::query::type_op::outlives::DropckOutlives;\n use rustc::traits::query::type_op::TypeOp;\n use rustc::ty::{Ty, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;\n use std::rc::Rc;\n-use util::liveness::{IdentityMap, LivenessResults};\n+use util::liveness::{NllLivenessMap, LivenessResults, LiveVariableMap };\n \n use super::TypeChecker;\n \n@@ -47,7 +47,7 @@ pub(super) fn generate<'gcx, 'tcx>(\n         flow_inits,\n         move_data,\n         drop_data: FxHashMap(),\n-        map: &IdentityMap::new(mir),\n+        map: &NllLivenessMap::compute(mir),\n     };\n \n     for bb in mir.basic_blocks().indices() {\n@@ -68,7 +68,7 @@ where\n     flow_inits: &'gen mut FlowAtLocation<MaybeInitializedPlaces<'flow, 'gcx, 'tcx>>,\n     move_data: &'gen MoveData<'tcx>,\n     drop_data: FxHashMap<Ty<'tcx>, DropData<'tcx>>,\n-    map: &'gen IdentityMap<'gen, 'tcx>,\n+    map: &'gen NllLivenessMap,\n }\n \n struct DropData<'tcx> {\n@@ -88,7 +88,8 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n             .regular\n             .simulate_block(self.mir, bb, self.map, |location, live_locals| {\n                 for live_local in live_locals.iter() {\n-                    let live_local_ty = self.mir.local_decls[live_local].ty;\n+                    let local = self.map.from_live_var(live_local);\n+                    let live_local_ty = self.mir.local_decls[local].ty;\n                     Self::push_type_live_constraint(&mut self.cx, live_local_ty, location);\n                 }\n             });\n@@ -123,15 +124,17 @@ impl<'gen, 'typeck, 'flow, 'gcx, 'tcx> TypeLivenessGenerator<'gen, 'typeck, 'flo\n                     });\n                 }\n \n-                let mpi = self.move_data.rev_lookup.find_local(live_local);\n+                let local = self.map.from_live_var(live_local);\n+                let mpi = self.move_data.rev_lookup.find_local(local);\n                 if let Some(initialized_child) = self.flow_inits.has_any_child_of(mpi) {\n                     debug!(\n                         \"add_liveness_constraints: mpi={:?} has initialized child {:?}\",\n                         self.move_data.move_paths[mpi],\n                         self.move_data.move_paths[initialized_child]\n                     );\n \n-                    let live_local_ty = self.mir.local_decls[live_local].ty;\n+                    let local = self.map.from_live_var(live_local);\n+                    let live_local_ty = self.mir.local_decls[local].ty;\n                     self.add_drop_live_constraint(live_local, live_local_ty, location);\n                 }\n             }"}, {"sha": "6f73868ff9f2e02b412a86c9ec61bbd846569014", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1951a3070258ac548519369871c1c2326f7c268d/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1951a3070258ac548519369871c1c2326f7c268d/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=1951a3070258ac548519369871c1c2326f7c268d", "patch": "@@ -570,7 +570,7 @@ impl LiveVariableMap for NllLivenessMap {\n impl NllLivenessMap {\n     pub fn compute(mir: &Mir) -> Self {\n         let mut to_local = IndexVec::default();\n-        let from_local: IndexVec<_,_> = mir.local.decls.iter_enumerated.map(|local, local_decl| {\n+        let from_local: IndexVec<Local,Option<_>> = mir.local_decls.iter_enumerated().map(|(local, local_decl)| {\n             if local_decl.ty.has_free_regions() {\n                 Some(to_local.push(local))\n             }"}]}