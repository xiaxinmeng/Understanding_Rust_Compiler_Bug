{"sha": "f577847aa22cda4935562fe8e7c9420bcc58f148", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1Nzc4NDdhYTIyY2RhNDkzNTU2MmZlOGU3Yzk0MjBiY2M1OGYxNDg=", "commit": {"author": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-13T00:56:50Z"}, "committer": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-13T00:56:50Z"}, "message": "Reword", "tree": {"sha": "8a9cce6c5dbe13469a5189c4ca3b855aec18321a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a9cce6c5dbe13469a5189c4ca3b855aec18321a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f577847aa22cda4935562fe8e7c9420bcc58f148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f577847aa22cda4935562fe8e7c9420bcc58f148", "html_url": "https://github.com/rust-lang/rust/commit/f577847aa22cda4935562fe8e7c9420bcc58f148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f577847aa22cda4935562fe8e7c9420bcc58f148/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa14f797f32acbea481989371f6c32739975f160", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa14f797f32acbea481989371f6c32739975f160", "html_url": "https://github.com/rust-lang/rust/commit/fa14f797f32acbea481989371f6c32739975f160"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "030b7e4f646f924d8360e18af59113a512f282f9", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f577847aa22cda4935562fe8e7c9420bcc58f148/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f577847aa22cda4935562fe8e7c9420bcc58f148/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=f577847aa22cda4935562fe8e7c9420bcc58f148", "patch": "@@ -852,40 +852,45 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 if n == 1 { \"\" } else { \"s\" },\n             );\n \n+        let expected_str = if let Some(n) = expected_tuple {\n+            assert!(expected == 1);\n+            if closure_args.as_ref().map(|&(ref pats, _)| pats.len()) == Some(n) {\n+                Cow::from(\"a single tuple as argument\")\n+            } else {\n+                // be verbose when numbers differ\n+                Cow::from(format!(\"a single {}-tuple as argument\", n))\n+            }\n+        } else {\n+            Cow::from(args_str(expected, false))\n+        };\n+\n+        let found_str = if expected_tuple.is_some() {\n+            args_str(found, true)\n+        } else {\n+            args_str(found, false)\n+        };\n+\n+\n         let mut err = struct_span_err!(self.tcx.sess, span, E0593,\n             \"{} is expected to take {}, but it takes {}\",\n             kind,\n-            if expected_tuple.is_some() {\n-                Cow::from(\"a single tuple as argument\")\n-            } else {\n-                Cow::from(args_str(expected, false))\n-            },\n-            if expected_tuple.is_some() {\n-                args_str(found, true)\n-            } else {\n-                args_str(found, false)\n-            },\n+            expected_str,\n+            found_str,\n         );\n \n         err.span_label(\n             span,\n             format!(\n-                \"expected {} that takes {}{}\",\n+                \"expected {} that takes {}\",\n                 kind,\n-                args_str(expected, false),\n-                if let Some(n) = expected_tuple {\n-                    assert!(expected == 1);\n-                    Cow::from(format!(\", a {}-tuple\", n))\n-                } else {\n-                    Cow::from(\"\")\n-                }\n+                expected_str,\n             )\n         );\n \n         if let Some(span) = found_span {\n             if let (Some(expected_tuple), Some((pats, tys))) = (expected_tuple, closure_args) {\n                 if expected_tuple != found || pats.len() != found {\n-                    err.span_label(span, format!(\"takes {}\", args_str(found, true)));\n+                    err.span_label(span, format!(\"takes {}\", found_str));\n                 } else {\n                     let sugg = format!(\n                         \"|({}){}|\",\n@@ -906,10 +911,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         },\n                     );\n \n-                    err.span_suggestion(span, \"consider changing to\", sugg);\n+                    err.span_suggestion(\n+                        span,\n+                        \"consider changing the closure to accept a tuple\",\n+                        sugg\n+                    );\n                 }\n             } else {\n-                err.span_label(span, format!(\"takes {}\", args_str(found, false)));\n+                err.span_label(span, format!(\"takes {}\", found_str));\n             }\n         }\n "}, {"sha": "9d4ac6305465a54ba1efeeb491e2d926ca41a10d", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f577847aa22cda4935562fe8e7c9420bcc58f148/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f577847aa22cda4935562fe8e7c9420bcc58f148/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=f577847aa22cda4935562fe8e7c9420bcc58f148", "patch": "@@ -45,25 +45,25 @@ error[E0593]: closure is expected to take a single tuple as argument, but it tak\n   --> $DIR/closure-arg-count.rs:20:53\n    |\n 20 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x| i);\n-   |                                                     ^^^ ------ help: consider changing to: `|(i, x)|`\n+   |                                                     ^^^ ------ help: consider changing the closure to accept a tuple: `|(i, x)|`\n    |                                                     |\n-   |                                                     expected closure that takes 1 argument, a 2-tuple\n+   |                                                     expected closure that takes a single tuple as argument\n \n error[E0593]: closure is expected to take a single tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:21:53\n    |\n 21 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i: usize, x| i);\n-   |                                                     ^^^ ------------- help: consider changing to: `|(i, x): (usize, _)|`\n+   |                                                     ^^^ ------------- help: consider changing the closure to accept a tuple: `|(i, x): (usize, _)|`\n    |                                                     |\n-   |                                                     expected closure that takes 1 argument, a 2-tuple\n+   |                                                     expected closure that takes a single tuple as argument\n \n-error[E0593]: closure is expected to take a single tuple as argument, but it takes 3 distinct arguments\n+error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n   --> $DIR/closure-arg-count.rs:22:53\n    |\n 22 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x, y| i);\n    |                                                     ^^^ --------- takes 3 distinct arguments\n    |                                                     |\n-   |                                                     expected closure that takes 1 argument, a 2-tuple\n+   |                                                     expected closure that takes a single 2-tuple as argument\n \n error: aborting due to 8 previous errors\n "}]}