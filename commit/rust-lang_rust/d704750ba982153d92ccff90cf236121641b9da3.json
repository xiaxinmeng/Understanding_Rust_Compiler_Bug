{"sha": "d704750ba982153d92ccff90cf236121641b9da3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MDQ3NTBiYTk4MjE1M2Q5MmNjZmY5MGNmMjM2MTIxNjQxYjlkYTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-18T00:57:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-18T00:57:48Z"}, "message": "Merge #8080\n\n8080: Change ItemTree API to accomodate creating an ItemTree per block expression r=jonas-schievink a=jonas-schievink\n\n...which won't go through salsa because the AST is already cached anyways\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "01c2914d7c92a91c70282b3be19f955c83aa1431", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01c2914d7c92a91c70282b3be19f955c83aa1431"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d704750ba982153d92ccff90cf236121641b9da3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUqWNCRBK7hj4Ov3rIwAAdHIIAGZ0xGN+BW+wpE0WQDSxA+hS\nbFqoQGXI4TSf+b/p2MVHA+tsoauC8Cu0axFimkU4ShvcvsJAJm6NhD6DBTAoJXJl\nQUl1KPNUP247ML6eBipXifIN+er5QiE4DAdasISmsegvN6eTEYapZKwizia41aY6\nDfHZYwAJ9WGZb70nhRYxCGWwSz3vNVfzZxWU4DrOR9PYEHrqBiYsIznPeXI6c+f/\na4WDp0OHBJvX1y9cpiGZCGekJspe8SOFLq3NXQbwAehNjye4z9EC5gngE6fNpL7k\nvBCS5kJmyrPiCQWnGPQF1sG5rk9NNf1jC1uUM+V1EY+KvSSQLgFC26iUdYqs9nw=\n=8sjJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 01c2914d7c92a91c70282b3be19f955c83aa1431\nparent 5632e61f79ff8827816ccfab9f01ce2e349f3144\nparent 5fbb97a0f0b78edd8f602e46c6a336b5a1aac7ae\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616029068 +0000\ncommitter GitHub <noreply@github.com> 1616029068 +0000\n\nMerge #8080\n\n8080: Change ItemTree API to accomodate creating an ItemTree per block expression r=jonas-schievink a=jonas-schievink\n\n...which won't go through salsa because the AST is already cached anyways\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d704750ba982153d92ccff90cf236121641b9da3", "html_url": "https://github.com/rust-lang/rust/commit/d704750ba982153d92ccff90cf236121641b9da3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d704750ba982153d92ccff90cf236121641b9da3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5632e61f79ff8827816ccfab9f01ce2e349f3144", "url": "https://api.github.com/repos/rust-lang/rust/commits/5632e61f79ff8827816ccfab9f01ce2e349f3144", "html_url": "https://github.com/rust-lang/rust/commit/5632e61f79ff8827816ccfab9f01ce2e349f3144"}, {"sha": "5fbb97a0f0b78edd8f602e46c6a336b5a1aac7ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fbb97a0f0b78edd8f602e46c6a336b5a1aac7ae", "html_url": "https://github.com/rust-lang/rust/commit/5fbb97a0f0b78edd8f602e46c6a336b5a1aac7ae"}], "stats": {"total": 144, "additions": 92, "deletions": 52}, "files": [{"sha": "1902a8d167ad03e47b1503af8b49cc7cfb4b54c3", "filename": "crates/hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdb.rs?ref=d704750ba982153d92ccff90cf236121641b9da3", "patch": "@@ -3,10 +3,10 @@\n pub use hir_def::db::{\n     AttrsQuery, BlockDefMapQuery, BodyQuery, BodyWithSourceMapQuery, ConstDataQuery,\n     CrateDefMapQueryQuery, CrateLangItemsQuery, DefDatabase, DefDatabaseStorage, EnumDataQuery,\n-    ExprScopesQuery, FunctionDataQuery, GenericParamsQuery, ImplDataQuery, ImportMapQuery,\n-    InternConstQuery, InternDatabase, InternDatabaseStorage, InternEnumQuery, InternFunctionQuery,\n-    InternImplQuery, InternStaticQuery, InternStructQuery, InternTraitQuery, InternTypeAliasQuery,\n-    InternUnionQuery, ItemTreeQuery, LangItemQuery, StaticDataQuery, StructDataQuery,\n+    ExprScopesQuery, FileItemTreeQuery, FunctionDataQuery, GenericParamsQuery, ImplDataQuery,\n+    ImportMapQuery, InternConstQuery, InternDatabase, InternDatabaseStorage, InternEnumQuery,\n+    InternFunctionQuery, InternImplQuery, InternStaticQuery, InternStructQuery, InternTraitQuery,\n+    InternTypeAliasQuery, InternUnionQuery, LangItemQuery, StaticDataQuery, StructDataQuery,\n     TraitDataQuery, TypeAliasDataQuery, UnionDataQuery,\n };\n pub use hir_expand::db::{"}, {"sha": "15651bb2222ed5b58ee1fd890e02e1ca2d5677cb", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=d704750ba982153d92ccff90cf236121641b9da3", "patch": "@@ -574,7 +574,7 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn scope_for_def(&self, def: Trait) -> SemanticsScope<'db> {\n-        let file_id = self.db.lookup_intern_trait(def.id).id.file_id;\n+        let file_id = self.db.lookup_intern_trait(def.id).id.file_id();\n         let resolver = def.id.resolver(self.db.upcast());\n         SemanticsScope { db: self.db, file_id, resolver }\n     }"}, {"sha": "58e35353bc5f2193ea27f75e1f11dd81b82087be", "filename": "crates/hir_def/src/adt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fadt.rs?ref=d704750ba982153d92ccff90cf236121641b9da3", "patch": "@@ -94,7 +94,7 @@ impl StructData {\n     pub(crate) fn struct_data_query(db: &dyn DefDatabase, id: StructId) -> Arc<StructData> {\n         let loc = id.lookup(db);\n         let krate = loc.container.krate;\n-        let item_tree = db.item_tree(loc.id.file_id);\n+        let item_tree = loc.id.item_tree(db);\n         let repr = repr_from_value(db, krate, &item_tree, ModItem::from(loc.id.value).into());\n         let cfg_options = db.crate_graph()[loc.container.krate].cfg_options.clone();\n \n@@ -110,7 +110,7 @@ impl StructData {\n     pub(crate) fn union_data_query(db: &dyn DefDatabase, id: UnionId) -> Arc<StructData> {\n         let loc = id.lookup(db);\n         let krate = loc.container.krate;\n-        let item_tree = db.item_tree(loc.id.file_id);\n+        let item_tree = loc.id.item_tree(db);\n         let repr = repr_from_value(db, krate, &item_tree, ModItem::from(loc.id.value).into());\n         let cfg_options = db.crate_graph()[loc.container.krate].cfg_options.clone();\n \n@@ -130,7 +130,7 @@ impl EnumData {\n     pub(crate) fn enum_data_query(db: &dyn DefDatabase, e: EnumId) -> Arc<EnumData> {\n         let loc = e.lookup(db);\n         let krate = loc.container.krate;\n-        let item_tree = db.item_tree(loc.id.file_id);\n+        let item_tree = loc.id.item_tree(db);\n         let cfg_options = db.crate_graph()[krate].cfg_options.clone();\n \n         let enum_ = &item_tree[loc.id.value];"}, {"sha": "e4c84afbfa1d8ee6070447940f4c5a6e2fb3fff3", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=d704750ba982153d92ccff90cf236121641b9da3", "patch": "@@ -530,7 +530,7 @@ where\n }\n \n fn attrs_from_item_tree<N: ItemTreeNode>(id: ItemTreeId<N>, db: &dyn DefDatabase) -> RawAttrs {\n-    let tree = db.item_tree(id.file_id);\n+    let tree = id.item_tree(db);\n     let mod_item = N::id_to_mod_item(id.value);\n     tree.raw_attrs(mod_item.into()).clone()\n }"}, {"sha": "0be868ba20f5858fa459bf528955406b6816b29f", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=d704750ba982153d92ccff90cf236121641b9da3", "patch": "@@ -38,7 +38,7 @@ impl FunctionData {\n         let krate = loc.container.module(db).krate;\n         let crate_graph = db.crate_graph();\n         let cfg_options = &crate_graph[krate].cfg_options;\n-        let item_tree = db.item_tree(loc.id.file_id);\n+        let item_tree = loc.id.item_tree(db);\n         let func = &item_tree[loc.id.value];\n \n         let enabled_params = func\n@@ -89,7 +89,7 @@ impl TypeAliasData {\n         typ: TypeAliasId,\n     ) -> Arc<TypeAliasData> {\n         let loc = typ.lookup(db);\n-        let item_tree = db.item_tree(loc.id.file_id);\n+        let item_tree = loc.id.item_tree(db);\n         let typ = &item_tree[loc.id.value];\n \n         Arc::new(TypeAliasData {\n@@ -115,23 +115,23 @@ pub struct TraitData {\n impl TraitData {\n     pub(crate) fn trait_data_query(db: &dyn DefDatabase, tr: TraitId) -> Arc<TraitData> {\n         let tr_loc = tr.lookup(db);\n-        let item_tree = db.item_tree(tr_loc.id.file_id);\n+        let item_tree = tr_loc.id.item_tree(db);\n         let tr_def = &item_tree[tr_loc.id.value];\n         let name = tr_def.name.clone();\n         let is_auto = tr_def.is_auto;\n         let is_unsafe = tr_def.is_unsafe;\n         let module_id = tr_loc.container;\n         let container = AssocContainerId::TraitId(tr);\n-        let mut expander = Expander::new(db, tr_loc.id.file_id, module_id);\n         let visibility = item_tree[tr_def.visibility].clone();\n         let bounds = tr_def.bounds.clone();\n+        let mut expander = Expander::new(db, tr_loc.id.file_id(), module_id);\n \n         let items = collect_items(\n             db,\n             module_id,\n             &mut expander,\n             tr_def.items.iter().copied(),\n-            tr_loc.id.file_id,\n+            tr_loc.id.file_id(),\n             container,\n             100,\n         );\n@@ -167,21 +167,21 @@ impl ImplData {\n         let _p = profile::span(\"impl_data_query\");\n         let impl_loc = id.lookup(db);\n \n-        let item_tree = db.item_tree(impl_loc.id.file_id);\n+        let item_tree = impl_loc.id.item_tree(db);\n         let impl_def = &item_tree[impl_loc.id.value];\n         let target_trait = impl_def.target_trait.map(|id| item_tree[id].clone());\n         let target_type = item_tree[impl_def.target_type].clone();\n         let is_negative = impl_def.is_negative;\n         let module_id = impl_loc.container;\n         let container = AssocContainerId::ImplId(id);\n-        let mut expander = Expander::new(db, impl_loc.id.file_id, module_id);\n+        let mut expander = Expander::new(db, impl_loc.id.file_id(), module_id);\n \n         let items = collect_items(\n             db,\n             module_id,\n             &mut expander,\n             impl_def.items.iter().copied(),\n-            impl_loc.id.file_id,\n+            impl_loc.id.file_id(),\n             container,\n             100,\n         );\n@@ -202,7 +202,7 @@ pub struct ConstData {\n impl ConstData {\n     pub(crate) fn const_data_query(db: &dyn DefDatabase, konst: ConstId) -> Arc<ConstData> {\n         let loc = konst.lookup(db);\n-        let item_tree = db.item_tree(loc.id.file_id);\n+        let item_tree = loc.id.item_tree(db);\n         let konst = &item_tree[loc.id.value];\n \n         Arc::new(ConstData {\n@@ -225,7 +225,7 @@ pub struct StaticData {\n impl StaticData {\n     pub(crate) fn static_data_query(db: &dyn DefDatabase, konst: StaticId) -> Arc<StaticData> {\n         let node = konst.lookup(db);\n-        let item_tree = db.item_tree(node.id.file_id);\n+        let item_tree = node.id.item_tree(db);\n         let statik = &item_tree[node.id.value];\n \n         Arc::new(StaticData {\n@@ -251,7 +251,7 @@ fn collect_items(\n         return Vec::new();\n     }\n \n-    let item_tree = db.item_tree(file_id);\n+    let item_tree = db.file_item_tree(file_id);\n     let crate_graph = db.crate_graph();\n     let cfg_options = &crate_graph[module.krate].cfg_options;\n \n@@ -292,7 +292,7 @@ fn collect_items(\n                 if let Ok(res) = res {\n                     if let Some((mark, mac)) = res.value {\n                         let src: InFile<ast::MacroItems> = expander.to_source(mac);\n-                        let item_tree = db.item_tree(src.file_id);\n+                        let item_tree = db.file_item_tree(src.file_id);\n                         let iter =\n                             item_tree.top_level_items().iter().filter_map(ModItem::as_assoc_item);\n                         items.extend(collect_items("}, {"sha": "276caf5b33b3084b7e88cbbec8d63ae52b02daaa", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=d704750ba982153d92ccff90cf236121641b9da3", "patch": "@@ -48,8 +48,8 @@ pub trait InternDatabase: SourceDatabase {\n \n #[salsa::query_group(DefDatabaseStorage)]\n pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n-    #[salsa::invoke(ItemTree::item_tree_query)]\n-    fn item_tree(&self, file_id: HirFileId) -> Arc<ItemTree>;\n+    #[salsa::invoke(ItemTree::file_item_tree_query)]\n+    fn file_item_tree(&self, file_id: HirFileId) -> Arc<ItemTree>;\n \n     #[salsa::invoke(crate_def_map_wait)]\n     #[salsa::transparent]"}, {"sha": "7c6cbff118e79dc2bc3ebb2b4556381c940b32b6", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=d704750ba982153d92ccff90cf236121641b9da3", "patch": "@@ -97,43 +97,43 @@ impl GenericParams {\n         let generics = match def {\n             GenericDefId::FunctionId(id) => {\n                 let id = id.lookup(db).id;\n-                let tree = db.item_tree(id.file_id);\n+                let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n                 tree[item.generic_params].clone()\n             }\n             GenericDefId::AdtId(AdtId::StructId(id)) => {\n                 let id = id.lookup(db).id;\n-                let tree = db.item_tree(id.file_id);\n+                let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n                 tree[item.generic_params].clone()\n             }\n             GenericDefId::AdtId(AdtId::EnumId(id)) => {\n                 let id = id.lookup(db).id;\n-                let tree = db.item_tree(id.file_id);\n+                let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n                 tree[item.generic_params].clone()\n             }\n             GenericDefId::AdtId(AdtId::UnionId(id)) => {\n                 let id = id.lookup(db).id;\n-                let tree = db.item_tree(id.file_id);\n+                let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n                 tree[item.generic_params].clone()\n             }\n             GenericDefId::TraitId(id) => {\n                 let id = id.lookup(db).id;\n-                let tree = db.item_tree(id.file_id);\n+                let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n                 tree[item.generic_params].clone()\n             }\n             GenericDefId::TypeAliasId(id) => {\n                 let id = id.lookup(db).id;\n-                let tree = db.item_tree(id.file_id);\n+                let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n                 tree[item.generic_params].clone()\n             }\n             GenericDefId::ImplId(id) => {\n                 let id = id.lookup(db).id;\n-                let tree = db.item_tree(id.file_id);\n+                let tree = id.item_tree(db);\n                 let item = &tree[id.value];\n                 tree[item.generic_params].clone()\n             }"}, {"sha": "5f5b7151acdcb063056cd4a84188015d8b7223ea", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=d704750ba982153d92ccff90cf236121641b9da3", "patch": "@@ -76,7 +76,7 @@ pub struct ItemTree {\n }\n \n impl ItemTree {\n-    pub(crate) fn item_tree_query(db: &dyn DefDatabase, file_id: HirFileId) -> Arc<ItemTree> {\n+    pub(crate) fn file_item_tree_query(db: &dyn DefDatabase, file_id: HirFileId) -> Arc<ItemTree> {\n         let _p = profile::span(\"item_tree_query\").detail(|| format!(\"{:?}\", file_id));\n         let syntax = if let Some(node) = db.parse_or_expand(file_id) {\n             if node.kind() == SyntaxKind::ERROR {\n@@ -401,7 +401,47 @@ impl<N: ItemTreeNode> fmt::Debug for FileItemTreeId<N> {\n     }\n }\n \n-pub type ItemTreeId<N> = InFile<FileItemTreeId<N>>;\n+#[derive(Debug)]\n+pub struct ItemTreeId<N: ItemTreeNode> {\n+    file: HirFileId,\n+    pub value: FileItemTreeId<N>,\n+}\n+\n+impl<N: ItemTreeNode> ItemTreeId<N> {\n+    pub fn new(file: HirFileId, idx: FileItemTreeId<N>) -> Self {\n+        Self { file, value: idx }\n+    }\n+\n+    pub fn file_id(self) -> HirFileId {\n+        self.file\n+    }\n+\n+    pub fn item_tree(self, db: &dyn DefDatabase) -> Arc<ItemTree> {\n+        db.file_item_tree(self.file)\n+    }\n+}\n+\n+impl<N: ItemTreeNode> Copy for ItemTreeId<N> {}\n+impl<N: ItemTreeNode> Clone for ItemTreeId<N> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+impl<N: ItemTreeNode> PartialEq for ItemTreeId<N> {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.file == other.file && self.value == other.value\n+    }\n+}\n+\n+impl<N: ItemTreeNode> Eq for ItemTreeId<N> {}\n+\n+impl<N: ItemTreeNode> Hash for ItemTreeId<N> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        self.file.hash(state);\n+        self.value.hash(state);\n+    }\n+}\n \n macro_rules! mod_items {\n     ( $( $typ:ident in $fld:ident -> $ast:ty ),+ $(,)? ) => {"}, {"sha": "c97be584e245fb40d70c501f4567bfb7157965fe", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=d704750ba982153d92ccff90cf236121641b9da3", "patch": "@@ -213,7 +213,7 @@ impl DefMap {\n     ) -> Option<Arc<DefMap>> {\n         let block: BlockLoc = db.lookup_intern_block(block_id);\n \n-        let item_tree = db.item_tree(block.ast_id.file_id);\n+        let item_tree = db.file_item_tree(block.ast_id.file_id);\n         if item_tree.inner_items_of_block(block.ast_id.value).is_empty() {\n             return None;\n         }"}, {"sha": "d0fefb5afdfe9d4a5f06072e184858ec1a813da0", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=d704750ba982153d92ccff90cf236121641b9da3", "patch": "@@ -242,7 +242,7 @@ struct DefCollector<'a> {\n impl DefCollector<'_> {\n     fn seed_with_top_level(&mut self) {\n         let file_id = self.db.crate_graph()[self.def_map.krate].root_file_id;\n-        let item_tree = self.db.item_tree(file_id.into());\n+        let item_tree = self.db.file_item_tree(file_id.into());\n         let module_id = self.def_map.root;\n         self.def_map.modules[module_id].origin = ModuleOrigin::CrateRoot { definition: file_id };\n         if item_tree\n@@ -263,7 +263,7 @@ impl DefCollector<'_> {\n     }\n \n     fn seed_with_inner(&mut self, block: AstId<ast::BlockExpr>) {\n-        let item_tree = self.db.item_tree(block.file_id);\n+        let item_tree = self.db.file_item_tree(block.file_id);\n         let module_id = self.def_map.root;\n         self.def_map.modules[module_id].origin = ModuleOrigin::BlockExpr { block };\n         if item_tree\n@@ -895,7 +895,7 @@ impl DefCollector<'_> {\n         }\n \n         // Then, fetch and process the item tree. This will reuse the expansion result from above.\n-        let item_tree = self.db.item_tree(file_id);\n+        let item_tree = self.db.file_item_tree(file_id);\n         let mod_dir = self.mod_dirs[&module_id].clone();\n         ModCollector {\n             def_collector: &mut *self,\n@@ -951,21 +951,21 @@ impl DefCollector<'_> {\n         let mut diagnosed_extern_crates = FxHashSet::default();\n         for directive in &self.unresolved_imports {\n             if let ImportSource::ExternCrate(krate) = directive.import.source {\n-                let item_tree = self.db.item_tree(krate.file_id);\n+                let item_tree = krate.item_tree(self.db);\n                 let extern_crate = &item_tree[krate.value];\n \n                 diagnosed_extern_crates.insert(extern_crate.name.clone());\n \n                 self.def_map.diagnostics.push(DefDiagnostic::unresolved_extern_crate(\n                     directive.module_id,\n-                    InFile::new(krate.file_id, extern_crate.ast_id),\n+                    InFile::new(krate.file_id(), extern_crate.ast_id),\n                 ));\n             }\n         }\n \n         for directive in &self.unresolved_imports {\n             if let ImportSource::Import(import) = &directive.import.source {\n-                let item_tree = self.db.item_tree(import.file_id);\n+                let item_tree = import.item_tree(self.db);\n                 let import_data = &item_tree[import.value];\n \n                 match (import_data.path.segments().first(), &import_data.path.kind) {\n@@ -979,7 +979,7 @@ impl DefCollector<'_> {\n \n                 self.def_map.diagnostics.push(DefDiagnostic::unresolved_import(\n                     directive.module_id,\n-                    InFile::new(import.file_id, import_data.ast_id),\n+                    InFile::new(import.file_id(), import_data.ast_id),\n                     import_data.index,\n                 ));\n             }\n@@ -1055,7 +1055,7 @@ impl ModCollector<'_, '_> {\n                             self.def_collector.db,\n                             krate,\n                             &self.item_tree,\n-                            InFile::new(self.file_id, import_id),\n+                            ItemTreeId::new(self.file_id, import_id),\n                         ),\n                         status: PartialResolvedImport::Unresolved,\n                     })\n@@ -1067,7 +1067,7 @@ impl ModCollector<'_, '_> {\n                             self.def_collector.db,\n                             krate,\n                             &self.item_tree,\n-                            InFile::new(self.file_id, import_id),\n+                            ItemTreeId::new(self.file_id, import_id),\n                         ),\n                         status: PartialResolvedImport::Unresolved,\n                     })\n@@ -1299,7 +1299,7 @@ impl ModCollector<'_, '_> {\n                             Some((file_id, is_mod_rs)),\n                             &self.item_tree[module.visibility],\n                         );\n-                        let item_tree = db.item_tree(file_id.into());\n+                        let item_tree = db.file_item_tree(file_id.into());\n                         ModCollector {\n                             def_collector: &mut *self.def_collector,\n                             macro_depth: self.macro_depth,"}, {"sha": "24e57b46922d6b4fbdf0f54e3dc9fb45102c5040", "filename": "crates/hir_def/src/src.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fhir_def%2Fsrc%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fsrc.rs?ref=d704750ba982153d92ccff90cf236121641b9da3", "patch": "@@ -14,25 +14,25 @@ impl<N: ItemTreeNode> HasSource for AssocItemLoc<N> {\n     type Value = N::Source;\n \n     fn source(&self, db: &dyn DefDatabase) -> InFile<N::Source> {\n-        let tree = db.item_tree(self.id.file_id);\n-        let ast_id_map = db.ast_id_map(self.id.file_id);\n-        let root = db.parse_or_expand(self.id.file_id).unwrap();\n+        let tree = self.id.item_tree(db);\n+        let ast_id_map = db.ast_id_map(self.id.file_id());\n+        let root = db.parse_or_expand(self.id.file_id()).unwrap();\n         let node = &tree[self.id.value];\n \n-        InFile::new(self.id.file_id, ast_id_map.get(node.ast_id()).to_node(&root))\n+        InFile::new(self.id.file_id(), ast_id_map.get(node.ast_id()).to_node(&root))\n     }\n }\n \n impl<N: ItemTreeNode> HasSource for ItemLoc<N> {\n     type Value = N::Source;\n \n     fn source(&self, db: &dyn DefDatabase) -> InFile<N::Source> {\n-        let tree = db.item_tree(self.id.file_id);\n-        let ast_id_map = db.ast_id_map(self.id.file_id);\n-        let root = db.parse_or_expand(self.id.file_id).unwrap();\n+        let tree = self.id.item_tree(db);\n+        let ast_id_map = db.ast_id_map(self.id.file_id());\n+        let root = db.parse_or_expand(self.id.file_id()).unwrap();\n         let node = &tree[self.id.value];\n \n-        InFile::new(self.id.file_id, ast_id_map.get(node.ast_id()).to_node(&root))\n+        InFile::new(self.id.file_id(), ast_id_map.get(node.ast_id()).to_node(&root))\n     }\n }\n "}, {"sha": "9b590d919b08fdfb26d101b7d886710fc99f477e", "filename": "crates/ide_db/src/apply_change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fide_db%2Fsrc%2Fapply_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d704750ba982153d92ccff90cf236121641b9da3/crates%2Fide_db%2Fsrc%2Fapply_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fapply_change.rs?ref=d704750ba982153d92ccff90cf236121641b9da3", "patch": "@@ -148,7 +148,7 @@ impl RootDatabase {\n             hir::db::HygieneFrameQuery\n \n             // DefDatabase\n-            hir::db::ItemTreeQuery\n+            hir::db::FileItemTreeQuery\n             hir::db::BlockDefMapQuery\n             hir::db::CrateDefMapQueryQuery\n             hir::db::StructDataQuery"}]}