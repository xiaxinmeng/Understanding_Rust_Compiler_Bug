{"sha": "6468292c35d3ca556decce809d1b79c4f8b250e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NjgyOTJjMzVkM2NhNTU2ZGVjY2U4MDlkMWI3OWM0ZjhiMjUwZTI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-11T20:44:55Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-03T14:39:20Z"}, "message": "Fix ICE with unresolved associated items in closures (fixes #28971)", "tree": {"sha": "3bf33016aa98c2757f68303f1c41bd89fe342e42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bf33016aa98c2757f68303f1c41bd89fe342e42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6468292c35d3ca556decce809d1b79c4f8b250e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6468292c35d3ca556decce809d1b79c4f8b250e2", "html_url": "https://github.com/rust-lang/rust/commit/6468292c35d3ca556decce809d1b79c4f8b250e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6468292c35d3ca556decce809d1b79c4f8b250e2/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5fbb3a25faeb08f50f571a6aa227f14a9d086c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5fbb3a25faeb08f50f571a6aa227f14a9d086c2", "html_url": "https://github.com/rust-lang/rust/commit/a5fbb3a25faeb08f50f571a6aa227f14a9d086c2"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "f3d67feb5ca80aa6fda2fd82d80fcf260f53155f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6468292c35d3ca556decce809d1b79c4f8b250e2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6468292c35d3ca556decce809d1b79c4f8b250e2/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=6468292c35d3ca556decce809d1b79c4f8b250e2", "patch": "@@ -1196,7 +1196,18 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n \n         (*op)(self, cmt.clone(), pat);\n \n-        let opt_def = self.tcx().def_map.borrow().get(&pat.id).map(|d| d.full_def());\n+        let opt_def = if let Some(path_res) = self.tcx().def_map.borrow().get(&pat.id) {\n+            if path_res.depth != 0 {\n+                // Since patterns can be associated constants\n+                // which are resolved during typeck, we might have\n+                // some unresolved patterns reaching this stage\n+                // without aborting\n+                return Err(());\n+            }\n+            Some(path_res.full_def())\n+        } else {\n+            None\n+        };\n \n         // Note: This goes up here (rather than within the PatEnum arm\n         // alone) because struct patterns can refer to struct types or"}, {"sha": "1d14b71a40e4f486de88274a8986393655936fd1", "filename": "src/test/compile-fail/issue-28971.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6468292c35d3ca556decce809d1b79c4f8b250e2/src%2Ftest%2Fcompile-fail%2Fissue-28971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6468292c35d3ca556decce809d1b79c4f8b250e2/src%2Ftest%2Fcompile-fail%2Fissue-28971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28971.rs?ref=6468292c35d3ca556decce809d1b79c4f8b250e2", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This should not cause an ICE\n+\n+enum Foo {\n+    Bar(u8)\n+}\n+fn main(){\n+    foo(|| {\n+        match Foo::Bar(1) {\n+            Foo::Baz(..) => (), //~ ERROR no associated\n+            _ => (),\n+        }\n+    });\n+}\n+\n+fn foo<F>(f: F) where F: FnMut() {\n+    f();\n+}"}]}