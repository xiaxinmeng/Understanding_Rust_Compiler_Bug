{"sha": "d846afdeef167679b89e14bb420826f3496df000", "node_id": "C_kwDOAAsO6NoAKGQ4NDZhZmRlZWYxNjc2NzliODllMTRiYjQyMDgyNmYzNDk2ZGYwMDA", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T15:41:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T15:41:32Z"}, "message": "check top level entry point invariants", "tree": {"sha": "62fe7fa18ea182b615af9287ac9b2a8a73c2004d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62fe7fa18ea182b615af9287ac9b2a8a73c2004d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d846afdeef167679b89e14bb420826f3496df000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d846afdeef167679b89e14bb420826f3496df000", "html_url": "https://github.com/rust-lang/rust/commit/d846afdeef167679b89e14bb420826f3496df000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d846afdeef167679b89e14bb420826f3496df000/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa049d94d1ec4b55c7d76b65fa2587e84101ce5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa049d94d1ec4b55c7d76b65fa2587e84101ce5b", "html_url": "https://github.com/rust-lang/rust/commit/fa049d94d1ec4b55c7d76b65fa2587e84101ce5b"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "5f4b7d6d0bcac057945cf49b1d33063ff2ab3481", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/tt_conversion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d846afdeef167679b89e14bb420826f3496df000/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d846afdeef167679b89e14bb420826f3496df000/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs?ref=d846afdeef167679b89e14bb420826f3496df000", "patch": "@@ -105,21 +105,21 @@ macro_rules! m2 { ($x:ident) => {} }\n \n #[test]\n fn expansion_does_not_parse_as_expression() {\n-    cov_mark::check!(expansion_does_not_parse_as_expression);\n     check(\n         r#\"\n macro_rules! stmts {\n     () => { let _ = 0; }\n }\n \n-fn f() { let _ = stmts!(); }\n+fn f() { let _ = stmts!/*+errors*/(); }\n \"#,\n         expect![[r#\"\n macro_rules! stmts {\n     () => { let _ = 0; }\n }\n \n-fn f() { let _ = /* error: could not convert tokens */; }\n+fn f() { let _ = /* parse error: expected expression */\n+let _ = 0;; }\n \"#]],\n     )\n }"}, {"sha": "2bfda1aff2e75ac8586c70d64ccb3787ae9a75f6", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d846afdeef167679b89e14bb420826f3496df000/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d846afdeef167679b89e14bb420826f3496df000/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=d846afdeef167679b89e14bb420826f3496df000", "patch": "@@ -1148,7 +1148,7 @@ fn foo() { let a = id!([0u32, bar($0)] ); }\n fn test_hover_through_literal_string_in_macro() {\n     check(\n         r#\"\n-macro_rules! arr { ($($tt:tt)*) => { [$($tt)*)] } }\n+macro_rules! arr { ($($tt:tt)*) => { [$($tt)*] } }\n fn foo() {\n     let mastered_for_itunes = \"\";\n     let _ = arr!(\"Tr$0acks\", &mastered_for_itunes);"}, {"sha": "7d7807206f4fc1a3ff2063f250ea7d60268462cc", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d846afdeef167679b89e14bb420826f3496df000/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d846afdeef167679b89e14bb420826f3496df000/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=d846afdeef167679b89e14bb420826f3496df000", "patch": "@@ -1,7 +1,7 @@\n //! Conversions between [`SyntaxNode`] and [`tt::TokenTree`].\n \n use rustc_hash::{FxHashMap, FxHashSet};\n-use stdx::non_empty_vec::NonEmptyVec;\n+use stdx::{never, non_empty_vec::NonEmptyVec};\n use syntax::{\n     ast::{self, make::tokens::doc_comment},\n     AstToken, Parse, PreorderWithTokens, SmolStr, SyntaxElement, SyntaxKind,\n@@ -66,8 +66,7 @@ pub fn token_tree_to_syntax_node(\n             parser::Step::Error { msg } => tree_sink.error(msg.to_string()),\n         }\n     }\n-    if tree_sink.roots.len() != 1 {\n-        cov_mark::hit!(expansion_does_not_parse_as_expression);\n+    if never!(tree_sink.roots.len() != 1) {\n         return Err(ExpandError::ConversionError);\n     }\n     //FIXME: would be cool to report errors"}, {"sha": "0240a6f14f661152a98d88e7567b78d53c4838e1", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d846afdeef167679b89e14bb420826f3496df000/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d846afdeef167679b89e14bb420826f3496df000/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=d846afdeef167679b89e14bb420826f3496df000", "patch": "@@ -148,6 +148,19 @@ pub(crate) mod entry {\n             }\n             m.complete(p, ERROR);\n         }\n+\n+        pub(crate) fn meta_item(p: &mut Parser) {\n+            let m = p.start();\n+            attributes::meta(p);\n+            if p.at(EOF) {\n+                m.abandon(p);\n+                return;\n+            }\n+            while !p.at(EOF) {\n+                p.bump_any();\n+            }\n+            m.complete(p, ERROR);\n+        }\n     }\n }\n "}, {"sha": "9723a17c64aa82c24af07c10f42a7f381d450a2e", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d846afdeef167679b89e14bb420826f3496df000/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d846afdeef167679b89e14bb420826f3496df000/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=d846afdeef167679b89e14bb420826f3496df000", "patch": "@@ -99,9 +99,11 @@ impl PrefixEntryPoint {\n /// ```\n ///\n /// the input to the macro will be parsed with [`PrefixEntryPoint::Item`], and\n-/// the result will be [`TopEntryPoint::Items`].\n+/// the result will be [`TopEntryPoint::MacroItems`].\n ///\n-/// This *should* (but currently doesn't) guarantee that all input is consumed.\n+/// [`TopEntryPoint::parse`] makes a guarantee that\n+///   * all input is consumed\n+///   * the result is a valid tree (there's one root node)\n #[derive(Debug)]\n pub enum TopEntryPoint {\n     SourceFile,\n@@ -124,13 +126,29 @@ impl TopEntryPoint {\n             TopEntryPoint::Pattern => grammar::entry::top::pattern,\n             TopEntryPoint::Type => grammar::entry::top::type_,\n             TopEntryPoint::Expr => grammar::entry::top::expr,\n-            // FIXME\n-            TopEntryPoint::MetaItem => grammar::entry::prefix::meta_item,\n+            TopEntryPoint::MetaItem => grammar::entry::top::meta_item,\n         };\n         let mut p = parser::Parser::new(input);\n         entry_point(&mut p);\n         let events = p.finish();\n-        event::process(events)\n+        let res = event::process(events);\n+\n+        if cfg!(debug_assertions) {\n+            let mut depth = 0;\n+            let mut first = true;\n+            for step in res.iter() {\n+                assert!(depth > 0 || first);\n+                first = false;\n+                match step {\n+                    Step::Enter { .. } => depth += 1,\n+                    Step::Exit => depth -= 1,\n+                    Step::Token { .. } | Step::Error { .. } => (),\n+                }\n+            }\n+            assert!(!first, \"no tree at all\");\n+        }\n+\n+        res\n     }\n }\n "}]}