{"sha": "8cd40f9032fa15dc083646ba2105b3fae0a96eb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZDQwZjkwMzJmYTE1ZGMwODM2NDZiYTIxMDViM2ZhZTBhOTZlYjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-06-10T22:55:51Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-28T14:44:15Z"}, "message": "libstd: Fix merge fallout.", "tree": {"sha": "1cb2dcd67f037992e0554dea8d3011c0256fe023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cb2dcd67f037992e0554dea8d3011c0256fe023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cd40f9032fa15dc083646ba2105b3fae0a96eb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd40f9032fa15dc083646ba2105b3fae0a96eb5", "html_url": "https://github.com/rust-lang/rust/commit/8cd40f9032fa15dc083646ba2105b3fae0a96eb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cd40f9032fa15dc083646ba2105b3fae0a96eb5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f463e69d203ffdd1a0c6c73612a0ba514a700a78", "url": "https://api.github.com/repos/rust-lang/rust/commits/f463e69d203ffdd1a0c6c73612a0ba514a700a78", "html_url": "https://github.com/rust-lang/rust/commit/f463e69d203ffdd1a0c6c73612a0ba514a700a78"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "07a67ca3b1e63ff73b35835a867f50180a162bcb", "filename": "src/libstd/str.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8cd40f9032fa15dc083646ba2105b3fae0a96eb5/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd40f9032fa15dc083646ba2105b3fae0a96eb5/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=8cd40f9032fa15dc083646ba2105b3fae0a96eb5", "patch": "@@ -357,7 +357,8 @@ impl<'self> Iterator<(uint, uint)> for StrMatchesIndexIterator<'self> {\n     fn next(&mut self) -> Option<(uint, uint)> {\n         // See Issue #1932 for why this is a naive search\n         let (h_len, n_len) = (self.haystack.len(), self.needle.len());\n-        let mut (match_start, match_i) = (0, 0);\n+        let mut match_start = 0;\n+        let mut match_i = 0;\n \n         while self.position < h_len {\n             if self.haystack[self.position] == self.needle[match_i] {\n@@ -685,7 +686,7 @@ pub fn count_chars(s: &str, start: uint, end: uint) -> uint {\n /// Counts the number of bytes taken by the first `n` chars in `s`\n /// starting from `start`.\n pub fn count_bytes<'b>(s: &'b str, start: uint, n: uint) -> uint {\n-    assert!(is_char_boundary(s, start));\n+    assert!(s.is_char_boundary(start));\n     let mut end = start;\n     let mut cnt = n;\n     let l = s.len();"}]}