{"sha": "bca346b90b3423de3d333960f864d379b3cd7c0f", "node_id": "C_kwDOAAsO6NoAKGJjYTM0NmI5MGIzNDIzZGUzZDMzMzk2MGY4NjRkMzc5YjNjZDdjMGY", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-25T09:06:10Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-02T10:21:00Z"}, "message": "rebase and use ty::Const in patterns again", "tree": {"sha": "05c87b8dbb552b0c877113716a401a41495c8ae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05c87b8dbb552b0c877113716a401a41495c8ae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bca346b90b3423de3d333960f864d379b3cd7c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bca346b90b3423de3d333960f864d379b3cd7c0f", "html_url": "https://github.com/rust-lang/rust/commit/bca346b90b3423de3d333960f864d379b3cd7c0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bca346b90b3423de3d333960f864d379b3cd7c0f/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb5b250fa15780dd80e025c3e7991609d996badc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5b250fa15780dd80e025c3e7991609d996badc", "html_url": "https://github.com/rust-lang/rust/commit/bb5b250fa15780dd80e025c3e7991609d996badc"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "b5fa847451d1f87ebe110f1a561df961b7e33b2e", "filename": "clippy_lints/src/matches/overlapping_arms.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bca346b90b3423de3d333960f864d379b3cd7c0f/clippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca346b90b3423de3d333960f864d379b3cd7c0f/clippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Foverlapping_arms.rs?ref=bca346b90b3423de3d333960f864d379b3cd7c0f", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::consts::{constant, constant_full_int, miri_to_const, FullInt};\n+use clippy_utils::consts::{constant, constant_full_int, FullInt};\n use clippy_utils::diagnostics::span_lint_and_note;\n use core::cmp::Ordering;\n use rustc_hir::{Arm, Expr, PatKind, RangeEnd};\n@@ -32,18 +32,15 @@ fn all_ranges<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>], ty: Ty<'tcx>)\n         .filter_map(|arm| {\n             if let Arm { pat, guard: None, .. } = *arm {\n                 if let PatKind::Range(ref lhs, ref rhs, range_end) = pat.kind {\n-                    let lhs_const = match lhs {\n-                        Some(lhs) => constant(cx, cx.typeck_results(), lhs)?.0,\n-                        None => miri_to_const(ty.numeric_min_val(cx.tcx)?)?,\n+                    let lhs_val = match lhs {\n+                        Some(lhs) => constant(cx, cx.typeck_results(), lhs)?.0.int_value(cx, ty)?,\n+                        None => FullInt::U(ty.numeric_min_val(cx.tcx)?),\n                     };\n-                    let rhs_const = match rhs {\n-                        Some(rhs) => constant(cx, cx.typeck_results(), rhs)?.0,\n-                        None => miri_to_const(ty.numeric_max_val(cx.tcx)?)?,\n+                    let rhs_val = match rhs {\n+                        Some(rhs) => constant(cx, cx.typeck_results(), rhs)?.0.int_value(cx, ty)?,\n+                        None => FullInt::U(ty.numeric_max_val(cx.tcx)?),\n                     };\n \n-                    let lhs_val = lhs_const.int_value(cx, ty)?;\n-                    let rhs_val = rhs_const.int_value(cx, ty)?;\n-\n                     let rhs_bound = match range_end {\n                         RangeEnd::Included => EndBound::Included(rhs_val),\n                         RangeEnd::Excluded => EndBound::Excluded(rhs_val),"}, {"sha": "6ba9ba0753d49f42e5ac974d10e7c8e0a9e5ce17", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca346b90b3423de3d333960f864d379b3cd7c0f/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca346b90b3423de3d333960f864d379b3cd7c0f/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=bca346b90b3423de3d333960f864d379b3cd7c0f", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for NegMultiply {\n fn check_mul(cx: &LateContext<'_>, span: Span, lit: &Expr<'_>, exp: &Expr<'_>) {\n     if_chain! {\n         if let ExprKind::Lit(ref l) = lit.kind;\n-        if consts::lit_to_constant(&l.node, cx.typeck_results().expr_ty_opt(lit)) == Constant::Int(1);\n+        if consts::lit_to_mir_constant(&l.node, cx.typeck_results().expr_ty_opt(lit)) == Constant::Int(1);\n         if cx.typeck_results().expr_ty(exp).is_integral();\n \n         then {"}, {"sha": "be46b791aa4b656decb9406aeb5ee275136e8ce1", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bca346b90b3423de3d333960f864d379b3cd7c0f/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca346b90b3423de3d333960f864d379b3cd7c0f/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=bca346b90b3423de3d333960f864d379b3cd7c0f", "patch": "@@ -179,7 +179,7 @@ impl Constant {\n }\n \n /// Parses a `LitKind` to a `Constant`.\n-pub fn lit_to_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n+pub fn lit_to_mir_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n     match *lit {\n         LitKind::Str(ref is, _) => Constant::Str(is.to_string()),\n         LitKind::Byte(b) => Constant::Int(u128::from(b)),\n@@ -301,7 +301,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 if is_direct_expn_of(e.span, \"cfg\").is_some() {\n                     None\n                 } else {\n-                    Some(lit_to_constant(&lit.node, self.typeck_results.expr_ty_opt(e)))\n+                    Some(lit_to_mir_constant(&lit.node, self.typeck_results.expr_ty_opt(e)))\n                 }\n             },\n             ExprKind::Array(vec) => self.multi(vec).map(Constant::Vec),"}]}