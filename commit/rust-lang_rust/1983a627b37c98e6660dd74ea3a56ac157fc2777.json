{"sha": "1983a627b37c98e6660dd74ea3a56ac157fc2777", "node_id": "C_kwDOAAsO6NoAKDE5ODNhNjI3YjM3Yzk4ZTY2NjBkZDc0ZWEzYTU2YWMxNTdmYzI3Nzc", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-06T00:45:10Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-06T00:45:10Z"}, "message": "Detect bindings assigned blocks without tail expressions\n\nAddress  #44173 for type check errors.", "tree": {"sha": "c1f25da75414601e87b2f247149ec63dcf05a387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1f25da75414601e87b2f247149ec63dcf05a387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1983a627b37c98e6660dd74ea3a56ac157fc2777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1983a627b37c98e6660dd74ea3a56ac157fc2777", "html_url": "https://github.com/rust-lang/rust/commit/1983a627b37c98e6660dd74ea3a56ac157fc2777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1983a627b37c98e6660dd74ea3a56ac157fc2777/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "388538fc963e07a94e3fc3ac8948627fd2d28d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/388538fc963e07a94e3fc3ac8948627fd2d28d29", "html_url": "https://github.com/rust-lang/rust/commit/388538fc963e07a94e3fc3ac8948627fd2d28d29"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "a9e6b1411700968b7c9bc09347192ba0083a521a", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1983a627b37c98e6660dd74ea3a56ac157fc2777/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1983a627b37c98e6660dd74ea3a56ac157fc2777/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=1983a627b37c98e6660dd74ea3a56ac157fc2777", "patch": "@@ -75,6 +75,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n         self.check_for_range_as_method_call(err, expr, expr_ty, expected);\n+        self.check_for_binding_assigned_block_without_tail_expression(err, expr, expr_ty, expected);\n     }\n \n     /// Requires that the two types unify, and prints an error message if\n@@ -1670,4 +1671,48 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Applicability::MachineApplicable,\n         );\n     }\n+\n+    /// Identify when the type error is because `()` is found in a binding that was assigned a\n+    /// block without a tail expression.\n+    fn check_for_binding_assigned_block_without_tail_expression(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        checked_ty: Ty<'tcx>,\n+        expected_ty: Ty<'tcx>,\n+    ) {\n+        if !checked_ty.is_unit() {\n+            return;\n+        }\n+        let hir::ExprKind::Path(hir::QPath::Resolved(None, path)) = expr.kind else { return; };\n+        let hir::def::Res::Local(hir_id) = path.res else { return; };\n+        let Some(hir::Node::Pat(pat)) = self.tcx.hir().find(hir_id) else {\n+            return;\n+        };\n+        let Some(hir::Node::Local(hir::Local {\n+            ty: None,\n+            init: Some(init),\n+            ..\n+        })) = self.tcx.hir().find_parent(pat.hir_id) else { return; };\n+        let hir::ExprKind::Block(block, None) = init.kind else { return; };\n+        if block.expr.is_some() {\n+            return;\n+        }\n+        let [.., stmt] = block.stmts else {\n+            err.span_help(block.span, \"this empty block is missing a tail expression\");\n+            return;\n+        };\n+        let hir::StmtKind::Semi(tail_expr) = stmt.kind else { return; };\n+        let Some(ty) = self.node_ty_opt(tail_expr.hir_id) else { return; };\n+        if self.can_eq(self.param_env, expected_ty, ty).is_ok() {\n+            err.span_suggestion_verbose(\n+                stmt.span.with_lo(tail_expr.span.hi()),\n+                \"remove this semicolon\",\n+                \"\",\n+                Applicability::MachineApplicable,\n+            );\n+        } else {\n+            err.span_help(block.span, \"this block is missing a tail expression\");\n+        }\n+    }\n }"}, {"sha": "b5b23a9e67282966d7f7baa697cd07845dba009d", "filename": "src/test/ui/type/binding-assigned-block-without-tail-expression.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1983a627b37c98e6660dd74ea3a56ac157fc2777/src%2Ftest%2Fui%2Ftype%2Fbinding-assigned-block-without-tail-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1983a627b37c98e6660dd74ea3a56ac157fc2777/src%2Ftest%2Fui%2Ftype%2Fbinding-assigned-block-without-tail-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fbinding-assigned-block-without-tail-expression.rs?ref=1983a627b37c98e6660dd74ea3a56ac157fc2777", "patch": "@@ -0,0 +1,16 @@\n+fn main() {\n+    let x = {\n+        println!(\"foo\");\n+        42;\n+    };\n+    let y = {};\n+    let z = {\n+        \"hi\";\n+    };\n+    println!(\"{}\", x); //~ ERROR E0277\n+    println!(\"{}\", y); //~ ERROR E0277\n+    println!(\"{}\", z); //~ ERROR E0277\n+    let _: i32 = x; //~ ERROR E0308\n+    let _: i32 = y; //~ ERROR E0308\n+    let _: i32 = z; //~ ERROR E0308\n+}"}, {"sha": "46300104b05a66e5bd7cf919883e269abe3000d5", "filename": "src/test/ui/type/binding-assigned-block-without-tail-expression.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/1983a627b37c98e6660dd74ea3a56ac157fc2777/src%2Ftest%2Fui%2Ftype%2Fbinding-assigned-block-without-tail-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1983a627b37c98e6660dd74ea3a56ac157fc2777/src%2Ftest%2Fui%2Ftype%2Fbinding-assigned-block-without-tail-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fbinding-assigned-block-without-tail-expression.stderr?ref=1983a627b37c98e6660dd74ea3a56ac157fc2777", "patch": "@@ -0,0 +1,79 @@\n+error[E0277]: `()` doesn't implement `std::fmt::Display`\n+  --> $DIR/binding-assigned-block-without-tail-expression.rs:10:20\n+   |\n+LL |     println!(\"{}\", x);\n+   |                    ^ `()` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `()`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: `()` doesn't implement `std::fmt::Display`\n+  --> $DIR/binding-assigned-block-without-tail-expression.rs:11:20\n+   |\n+LL |     println!(\"{}\", y);\n+   |                    ^ `()` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `()`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: `()` doesn't implement `std::fmt::Display`\n+  --> $DIR/binding-assigned-block-without-tail-expression.rs:12:20\n+   |\n+LL |     println!(\"{}\", z);\n+   |                    ^ `()` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `()`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/binding-assigned-block-without-tail-expression.rs:13:18\n+   |\n+LL |     let _: i32 = x;\n+   |            ---   ^ expected `i32`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+help: remove this semicolon\n+   |\n+LL -         42;\n+LL +         42\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/binding-assigned-block-without-tail-expression.rs:14:18\n+   |\n+LL |     let _: i32 = y;\n+   |            ---   ^ expected `i32`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+help: this empty block is missing a tail expression\n+  --> $DIR/binding-assigned-block-without-tail-expression.rs:6:13\n+   |\n+LL |     let y = {};\n+   |             ^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/binding-assigned-block-without-tail-expression.rs:15:18\n+   |\n+LL |     let _: i32 = z;\n+   |            ---   ^ expected `i32`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+help: this block is missing a tail expression\n+  --> $DIR/binding-assigned-block-without-tail-expression.rs:7:13\n+   |\n+LL |       let z = {\n+   |  _____________^\n+LL | |         \"hi\";\n+LL | |     };\n+   | |_____^\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}]}