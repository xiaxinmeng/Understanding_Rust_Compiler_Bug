{"sha": "ac822a52be47579ffa59d5ca3e125680a79545d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjODIyYTUyYmU0NzU3OWZmYTU5ZDVjYTNlMTI1NjgwYTc5NTQ1ZDA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-25T18:44:23Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-25T18:44:23Z"}, "message": "rustc: Stop using shape code for logging", "tree": {"sha": "5ef280226f9e0f3dcdf3dbc2c766743f4cbcec35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ef280226f9e0f3dcdf3dbc2c766743f4cbcec35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac822a52be47579ffa59d5ca3e125680a79545d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac822a52be47579ffa59d5ca3e125680a79545d0", "html_url": "https://github.com/rust-lang/rust/commit/ac822a52be47579ffa59d5ca3e125680a79545d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac822a52be47579ffa59d5ca3e125680a79545d0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbc00ced3a09a7a8c32d69a89b9e073252cca39d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc00ced3a09a7a8c32d69a89b9e073252cca39d", "html_url": "https://github.com/rust-lang/rust/commit/dbc00ced3a09a7a8c32d69a89b9e073252cca39d"}], "stats": {"total": 63, "additions": 48, "deletions": 15}, "files": [{"sha": "a9f63b57fa5fc10cc4b7eceb8bfd90c52cb13370", "filename": "src/libcore/logging.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ac822a52be47579ffa59d5ca3e125680a79545d0/src%2Flibcore%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac822a52be47579ffa59d5ca3e125680a79545d0/src%2Flibcore%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flogging.rs?ref=ac822a52be47579ffa59d5ca3e125680a79545d0", "patch": "@@ -4,13 +4,16 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-export console_on, console_off;\n+use cast::transmute;\n+\n+export console_on, console_off, log_type;\n \n #[nolink]\n extern mod rustrt {\n     #[legacy_exports];\n     fn rust_log_console_on();\n     fn rust_log_console_off();\n+    fn rust_log_str(level: u32, string: *libc::c_char, size: libc::size_t);\n }\n \n /// Turns on logging to stdout globally\n@@ -27,4 +30,17 @@ fn console_on() {\n  */\n fn console_off() {\n     rustrt::rust_log_console_off();\n-}\n\\ No newline at end of file\n+}\n+\n+#[cfg(notest)]\n+#[lang=\"log_type\"]\n+pub fn log_type<T>(level: u32, object: &T) {\n+    let bytes = do io::with_bytes_writer() |writer| {\n+        repr::write_repr(writer, object);\n+    };\n+    unsafe {\n+        let len = bytes.len() as libc::size_t;\n+        rustrt::rust_log_str(level, transmute(vec::raw::to_ptr(bytes)), len);\n+    }\n+}\n+"}, {"sha": "91c5760d3e9df76bd483dee836475a2a261cfe7b", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac822a52be47579ffa59d5ca3e125680a79545d0/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ac822a52be47579ffa59d5ca3e125680a79545d0/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=ac822a52be47579ffa59d5ca3e125680a79545d0", "patch": "@@ -952,9 +952,9 @@ rust_call_tydesc_glue(void *root, size_t *tydesc, size_t glue_index) {\n \n // Don't run on the Rust stack!\n extern \"C\" void\n-rust_log_str(uint32_t level, const char *str) {\n+rust_log_str(uint32_t level, const char *str, size_t size) {\n     rust_task *task = rust_get_current_task();\n-    task->sched_loop->get_log().log(task, level, \"%s\", str);\n+    task->sched_loop->get_log().log(task, level, \"%.*s\", (int)size, str);\n }\n \n //"}, {"sha": "ea22e3a7809746c876e3e372c7b7a2b6d1398404", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac822a52be47579ffa59d5ca3e125680a79545d0/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac822a52be47579ffa59d5ca3e125680a79545d0/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=ac822a52be47579ffa59d5ca3e125680a79545d0", "patch": "@@ -46,7 +46,8 @@ struct LanguageItems {\n \n     mut str_eq_fn: Option<def_id>,\n     mut uniq_str_eq_fn: Option<def_id>,\n-    mut annihilate_fn: Option<def_id>\n+    mut annihilate_fn: Option<def_id>,\n+    mut log_type_fn: Option<def_id>\n }\n \n mod LanguageItems {\n@@ -76,7 +77,8 @@ mod LanguageItems {\n \n             str_eq_fn: None,\n             uniq_str_eq_fn: None,\n-            annihilate_fn: None\n+            annihilate_fn: None,\n+            log_type_fn: None\n         }\n     }\n }\n@@ -111,6 +113,7 @@ fn LanguageItemCollector(crate: @crate, session: session,\n     item_refs.insert(~\"str_eq\", &mut items.str_eq_fn);\n     item_refs.insert(~\"uniq_str_eq\", &mut items.uniq_str_eq_fn);\n     item_refs.insert(~\"annihilate\", &mut items.annihilate_fn);\n+    item_refs.insert(~\"log_type\", &mut items.log_type_fn);\n \n     LanguageItemCollector {\n         crate: crate,"}, {"sha": "65a788991bfc1ee22bc694a347889325cf2ee324", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac822a52be47579ffa59d5ca3e125680a79545d0/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac822a52be47579ffa59d5ca3e125680a79545d0/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ac822a52be47579ffa59d5ca3e125680a79545d0", "patch": "@@ -2005,12 +2005,6 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n         }\n         Call(bcx, main_llfn, args);\n \n-        // Call the box annihilator.\n-        // XXX: Crashes.\n-        //let did = bcx.tcx().lang_items.annihilate_fn.get();\n-        //let bcx = callee::trans_rtcall_or_lang_call(bcx, did, ~[],\n-        //                                            expr::Ignore);\n-\n         build_return(bcx);\n         finish_fn(fcx, lltop);\n         return llfdecl;"}, {"sha": "1903469ee22203458bb4c0ef50e332f40541bcc9", "filename": "src/rustc/middle/trans/callee.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ac822a52be47579ffa59d5ca3e125680a79545d0/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac822a52be47579ffa59d5ca3e125680a79545d0/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=ac822a52be47579ffa59d5ca3e125680a79545d0", "patch": "@@ -290,6 +290,26 @@ fn trans_rtcall_or_lang_call(bcx: block, did: ast::def_id, args: ~[ValueRef],\n         ArgVals(args), dest, DontAutorefArg);\n }\n \n+fn trans_rtcall_or_lang_call_with_type_params(bcx: block,\n+                                              did: ast::def_id,\n+                                              args: ~[ValueRef],\n+                                              type_params: ~[ty::t],\n+                                              dest: expr::Dest) -> block {\n+    let fty;\n+    if did.crate == ast::local_crate {\n+        fty = ty::node_id_to_type(bcx.tcx(), did.node);\n+    } else {\n+        fty = csearch::get_type(bcx.tcx(), did).ty;\n+    }\n+\n+    let rty = ty::ty_fn_ret(fty);\n+    return callee::trans_call_inner(\n+        bcx, None, fty, rty,\n+        |bcx| trans_fn_ref_with_vtables_to_callee(bcx, did, 0, type_params,\n+                                                  None),\n+        ArgVals(args), dest, DontAutorefArg);\n+}\n+\n fn body_contains_ret(body: ast::blk) -> bool {\n     let cx = {mut found: false};\n     visit::visit_block(body, cx, visit::mk_vt(@{"}, {"sha": "5d8b0fbbbe156312dcd17146cf7a8502d8ccf7e8", "filename": "src/rustc/middle/trans/controlflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac822a52be47579ffa59d5ca3e125680a79545d0/src%2Frustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac822a52be47579ffa59d5ca3e125680a79545d0/src%2Frustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=ac822a52be47579ffa59d5ca3e125680a79545d0", "patch": "@@ -190,12 +190,12 @@ fn trans_log(log_ex: @ast::expr,\n \n             // Translate the value to be logged\n             let val_datum = unpack_datum!(bcx, expr::trans_to_datum(bcx, e));\n-            let tydesc = get_tydesc_simple(ccx, val_datum.ty);\n \n             // Call the polymorphic log function\n             let val = val_datum.to_ref_llval(bcx);\n-            let val = PointerCast(bcx, val, T_ptr(T_i8()));\n-            Call(bcx, ccx.upcalls.log_type, [tydesc, val, level]);\n+            let did = bcx.tcx().lang_items.log_type_fn.get();\n+            let bcx = callee::trans_rtcall_or_lang_call_with_type_params(\n+                bcx, did, ~[level, val], ~[val_datum.ty], expr::Ignore);\n             bcx\n         }\n     }"}]}