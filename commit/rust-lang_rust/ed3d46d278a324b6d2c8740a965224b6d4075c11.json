{"sha": "ed3d46d278a324b6d2c8740a965224b6d4075c11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkM2Q0NmQyNzhhMzI0YjZkMmM4NzQwYTk2NTIyNGI2ZDQwNzVjMTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-25T03:03:48Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-28T18:50:13Z"}, "message": "rustbuild: Move assembling rustc to its own step\n\nRight now it's implicitly done as part of building the compiler, but this was\nintended to be a standalone step to ensure we tracked what built what.", "tree": {"sha": "8efeb0ce05a20a4705af39d8ca33d678be977f63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8efeb0ce05a20a4705af39d8ca33d678be977f63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed3d46d278a324b6d2c8740a965224b6d4075c11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3d46d278a324b6d2c8740a965224b6d4075c11", "html_url": "https://github.com/rust-lang/rust/commit/ed3d46d278a324b6d2c8740a965224b6d4075c11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed3d46d278a324b6d2c8740a965224b6d4075c11/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "189827bd960fbb6e2e4dad5114ee414af35bb84c", "url": "https://api.github.com/repos/rust-lang/rust/commits/189827bd960fbb6e2e4dad5114ee414af35bb84c", "html_url": "https://github.com/rust-lang/rust/commit/189827bd960fbb6e2e4dad5114ee414af35bb84c"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "dc547f74db19b43e0b9d89635d2f605bcdef3442", "filename": "src/bootstrap/build/compile.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ed3d46d278a324b6d2c8740a965224b6d4075c11/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3d46d278a324b6d2c8740a965224b6d4075c11/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcompile.rs?ref=ed3d46d278a324b6d2c8740a965224b6d4075c11", "patch": "@@ -99,7 +99,6 @@ pub fn rustc<'a>(build: &'a Build, stage: u32, target: &str,\n              host, target);\n \n     let out_dir = build.cargo_out(stage, &host, false, target);\n-    let rustc = out_dir.join(exe(\"rustc\", target));\n     build.clear_if_dirty(&out_dir, &libstd_shim(build, stage, &host, target));\n \n     let mut cargo = build.cargo(stage, compiler, false, target, \"build\");\n@@ -153,10 +152,6 @@ pub fn rustc<'a>(build: &'a Build, stage: u32, target: &str,\n \n     let sysroot_libdir = build.sysroot_libdir(stage, host, target);\n     add_to_sysroot(&out_dir, &sysroot_libdir);\n-\n-    if host == target {\n-        assemble_compiler(build, stage, target, &rustc);\n-    }\n }\n \n /// Cargo's output path for the standard library in a given stage, compiled\n@@ -172,39 +167,42 @@ fn compiler_file(compiler: &Path, file: &str) -> String {\n \n /// Prepare a new compiler from the artifacts in `stage`\n ///\n-/// This will link the compiler built by `host` during the stage\n-/// specified to the sysroot location for `host` to be the official\n-/// `stage + 1` compiler for that host. This means that the `rustc` binary\n-/// itself will be linked into place along with all supporting dynamic\n-/// libraries.\n-fn assemble_compiler(build: &Build, stage: u32, host: &str, rustc: &Path) {\n+/// This will assemble a compiler in `build/$host/stage$stage`. The compiler\n+/// must have been previously produced by the `stage - 1` build.config.build\n+/// compiler.\n+pub fn assemble_rustc(build: &Build, stage: u32, host: &str) {\n+    assert!(stage > 0, \"the stage0 compiler isn't assembled, it's downloaded\");\n+\n     // Clear out old files\n-    let sysroot = build.sysroot(stage + 1, host);\n+    let sysroot = build.sysroot(stage, host);\n     let _ = fs::remove_dir_all(&sysroot);\n     t!(fs::create_dir_all(&sysroot));\n \n     // Link in all dylibs to the libdir\n     let sysroot_libdir = sysroot.join(libdir(host));\n     t!(fs::create_dir_all(&sysroot_libdir));\n-    let src_libdir = build.sysroot_libdir(stage, host, host);\n+    let src_libdir = build.sysroot_libdir(stage - 1, &build.config.build, host);\n     for f in t!(fs::read_dir(&src_libdir)).map(|f| t!(f)) {\n         let filename = f.file_name().into_string().unwrap();\n         if is_dylib(&filename) {\n             t!(fs::hard_link(&f.path(), sysroot_libdir.join(&filename)));\n         }\n     }\n \n+    let out_dir = build.cargo_out(stage - 1, &build.config.build, false, host);\n+\n     // Link the compiler binary itself into place\n+    let rustc = out_dir.join(exe(\"rustc\", host));\n     let bindir = sysroot.join(\"bin\");\n     t!(fs::create_dir_all(&bindir));\n-    let compiler = build.compiler_path(&Compiler::new(stage + 1, host));\n+    let compiler = build.compiler_path(&Compiler::new(stage, host));\n     let _ = fs::remove_file(&compiler);\n     t!(fs::hard_link(rustc, compiler));\n \n     // See if rustdoc exists to link it into place\n-    let exe = exe(\"rustdoc\", host);\n-    let rustdoc_src = rustc.parent().unwrap().join(&exe);\n-    let rustdoc_dst = bindir.join(exe);\n+    let rustdoc = exe(\"rustdoc\", host);\n+    let rustdoc_src = out_dir.join(&rustdoc);\n+    let rustdoc_dst = bindir.join(&rustdoc);\n     if fs::metadata(&rustdoc_src).is_ok() {\n         let _ = fs::remove_file(&rustdoc_dst);\n         t!(fs::hard_link(&rustdoc_src, &rustdoc_dst));"}, {"sha": "88ec6b72eddad3782fffd81300c46954888ec43a", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed3d46d278a324b6d2c8740a965224b6d4075c11/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3d46d278a324b6d2c8740a965224b6d4075c11/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=ed3d46d278a324b6d2c8740a965224b6d4075c11", "patch": "@@ -146,8 +146,12 @@ impl Build {\n                 Librustc { stage, compiler } => {\n                     compile::rustc(self, stage, target.target, &compiler);\n                 }\n+                Rustc { stage: 0 } => {\n+                    assert!(target.target == self.config.build,\n+                            \"only have one stage0 compiler\");\n+                }\n                 Rustc { stage } => {\n-                    println!(\"ok, rustc stage{} in {}\", stage, target.target);\n+                    compile::assemble_rustc(self, stage, target.target);\n                 }\n             }\n         }"}]}