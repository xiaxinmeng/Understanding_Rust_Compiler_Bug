{"sha": "aee79294699153ac7da9d2e5d076192c6eee3238", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZTc5Mjk0Njk5MTUzYWM3ZGE5ZDJlNWQwNzYxOTJjNmVlZTMyMzg=", "commit": {"author": {"name": "Nick Desaulniers", "email": "ndesaulniers@mozilla.com", "date": "2013-02-01T01:51:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-01T04:12:49Z"}, "message": "Replace most invocations of fail keyword with die! macro", "tree": {"sha": "18e14a0fcfddad87b2a2955e7821bb4c63acbbfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18e14a0fcfddad87b2a2955e7821bb4c63acbbfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aee79294699153ac7da9d2e5d076192c6eee3238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aee79294699153ac7da9d2e5d076192c6eee3238", "html_url": "https://github.com/rust-lang/rust/commit/aee79294699153ac7da9d2e5d076192c6eee3238", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aee79294699153ac7da9d2e5d076192c6eee3238/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2db3175c76b51e5124cfa135de7ceeea8ceee0d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2db3175c76b51e5124cfa135de7ceeea8ceee0d6", "html_url": "https://github.com/rust-lang/rust/commit/2db3175c76b51e5124cfa135de7ceeea8ceee0d6"}], "stats": {"total": 1822, "additions": 914, "deletions": 908}, "files": [{"sha": "8f5f9547c520e9b016b44d915e726729fc770381", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -69,7 +69,7 @@ pub fn parse_config(args: ~[~str]) -> config {\n     let matches =\n         &match getopts::getopts(args_, opts) {\n           Ok(m) => m,\n-          Err(f) => fail getopts::fail_str(f)\n+          Err(f) => die!(getopts::fail_str(f))\n         };\n \n     fn opt_path(m: &getopts::Matches, nm: ~str) -> Path {\n@@ -131,7 +131,7 @@ pub fn str_mode(s: ~str) -> mode {\n       ~\"run-fail\" => mode_run_fail,\n       ~\"run-pass\" => mode_run_pass,\n       ~\"pretty\" => mode_pretty,\n-      _ => fail ~\"invalid mode\"\n+      _ => die!(~\"invalid mode\")\n     }\n }\n \n@@ -148,7 +148,7 @@ pub fn run_tests(config: config) {\n     let opts = test_opts(config);\n     let tests = make_tests(config);\n     let res = test::run_tests_console(&opts, tests);\n-    if !res { fail ~\"Some tests failed\"; }\n+    if !res { die!(~\"Some tests failed\"); }\n }\n \n pub fn test_opts(config: config) -> test::TestOpts {"}, {"sha": "0b9d67426ae35ae749fce2b906cab7285f47383b", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -119,7 +119,7 @@ fn parse_exec_env(line: ~str) -> Option<(~str, ~str)> {\n         match strs.len() {\n           1u => (strs[0], ~\"\"),\n           2u => (strs[0], strs[1]),\n-          n => fail fmt!(\"Expected 1 or 2 strings, not %u\", n)\n+          n => die!(fmt!(\"Expected 1 or 2 strings, not %u\", n))\n         }\n     }\n }"}, {"sha": "a8e4d91d89a8888f1dc51d9743b3c548f56cd714", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -71,7 +71,7 @@ pub fn run(lib_path: ~str,\n         os::close(pipe_in.out);\n         os::close(pipe_out.in);\n         os::close(pipe_err.in);\n-        fail;\n+        die!();\n     }\n \n \n@@ -99,7 +99,7 @@ pub fn run(lib_path: ~str,\n           (2, s) => {\n             errs = s;\n           }\n-          _ => { fail }\n+          _ => { die!() }\n         };\n         count -= 1;\n     };"}, {"sha": "a71b8a360a246f6a771ff5392ab35a6dec0ee4b4", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -200,7 +200,7 @@ actual:\\n\\\n \\n\",\n                      expected, actual);\n             io::stdout().write_str(msg);\n-            fail;\n+            die!();\n         }\n     }\n \n@@ -467,7 +467,7 @@ fn compose_and_run_compiler(\n fn ensure_dir(path: &Path) {\n     if os::path_is_dir(path) { return; }\n     if !os::make_dir(path, 0x1c0i32) {\n-        fail fmt!(\"can't make dir %s\", path.to_str());\n+        die!(fmt!(\"can't make dir %s\", path.to_str()));\n     }\n }\n \n@@ -617,7 +617,7 @@ fn maybe_dump_to_stdout(config: config, out: ~str, err: ~str) {\n \n fn error(err: ~str) { io::stdout().write_line(fmt!(\"\\nerror: %s\", err)); }\n \n-fn fatal(err: ~str) -> ! { error(err); fail; }\n+fn fatal(err: ~str) -> ! { error(err); die!(); }\n \n fn fatal_ProcRes(err: ~str, ProcRes: ProcRes) -> ! {\n     let msg =\n@@ -635,5 +635,5 @@ stderr:\\n\\\n \\n\",\n              err, ProcRes.cmdline, ProcRes.stdout, ProcRes.stderr);\n     io::stdout().write_str(msg);\n-    fail;\n+    die!();\n }"}, {"sha": "4027677a3b07973247436a49c0fce37b3f5def7c", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -295,7 +295,7 @@ pub fn load_link(mis: ~[@ast::meta_item]) -> (Option<~str>,\n                     _ => { }\n                 }\n             }\n-            _ => fail ~\"load_link: meta items must be name-values\"\n+            _ => die!(~\"load_link: meta items must be name-values\")\n         }\n     }\n     (name, vers, uuid)\n@@ -332,8 +332,8 @@ pub fn load_crate(filename: &Path) -> Option<Crate> {\n                 }\n             }\n             _ => {\n-                fail ~\"crate attributes may not contain \" +\n-                     ~\"meta_words\";\n+                die!(~\"crate attributes may not contain \" +\n+                     ~\"meta_words\");\n             }\n         }\n     }\n@@ -435,7 +435,7 @@ pub fn rest(s: ~str, start: uint) -> ~str {\n pub fn need_dir(s: &Path) {\n     if os::path_is_dir(s) { return; }\n     if !os::make_dir(s, 493_i32 /* oct: 755 */) {\n-        fail fmt!(\"can't make_dir %s\", s.to_str());\n+        die!(fmt!(\"can't make_dir %s\", s.to_str()));\n     }\n }\n \n@@ -453,7 +453,7 @@ pub fn valid_pkg_name(s: &str) -> bool {\n \n pub fn parse_source(name: ~str, j: &json::Json) -> @Source {\n     if !valid_pkg_name(name) {\n-        fail fmt!(\"'%s' is an invalid source name\", name);\n+        die!(fmt!(\"'%s' is an invalid source name\", name));\n     }\n \n     match *j {\n@@ -485,7 +485,7 @@ pub fn parse_source(name: ~str, j: &json::Json) -> @Source {\n                 mut keyfp: keyfp,\n                 packages: DVec() };\n         }\n-        _ => fail ~\"needed dict value in source\"\n+        _ => die!(~\"needed dict value in source\")\n     };\n }\n \n@@ -500,8 +500,8 @@ pub fn try_parse_sources(filename: &Path,\n                 debug!(\"source: %s\", *k);\n             }\n         }\n-        Ok(_) => fail ~\"malformed sources.json\",\n-        Err(e) => fail fmt!(\"%s:%s\", filename.to_str(), e.to_str())\n+        Ok(_) => die!(~\"malformed sources.json\"),\n+        Err(e) => die!(fmt!(\"%s:%s\", filename.to_str(), e.to_str()))\n     }\n }\n \n@@ -662,7 +662,7 @@ pub fn build_cargo_options(argv: ~[~str]) -> Options {\n     let matches = &match getopts::getopts(argv, opts()) {\n         result::Ok(m) => m,\n         result::Err(f) => {\n-            fail fmt!(\"%s\", getopts::fail_str(f));\n+            die!(fmt!(\"%s\", getopts::fail_str(f)));\n         }\n     };\n \n@@ -675,10 +675,10 @@ pub fn build_cargo_options(argv: ~[~str]) -> Options {\n     let is_install = len > 1u && matches.free[1] == ~\"install\";\n     let is_uninstall = len > 1u && matches.free[1] == ~\"uninstall\";\n \n-    if G && g { fail ~\"-G and -g both provided\"; }\n+    if G && g { die!(~\"-G and -g both provided\"); }\n \n     if !is_install && !is_uninstall && (g || G) {\n-        fail ~\"-g and -G are only valid for `install` and `uninstall|rm`\";\n+        die!(~\"-g and -G are only valid for `install` and `uninstall|rm`\");\n     }\n \n     let mode =\n@@ -845,7 +845,7 @@ pub fn install_source(c: &Cargo, path: &Path) {\n     }\n \n     if vec::is_empty(cratefiles) {\n-        fail ~\"this doesn't look like a rust package (no .rc files)\";\n+        die!(~\"this doesn't look like a rust package (no .rc files)\");\n     }\n \n     for cratefiles.each |cf| {\n@@ -888,7 +888,7 @@ pub fn install_curl(c: &Cargo, wd: &Path, url: ~str) {\n     let p = run::program_output(~\"curl\", ~[~\"-f\", ~\"-s\", ~\"-o\",\n                                          tarpath.to_str(), url]);\n     if p.status != 0 {\n-        fail fmt!(\"fetch of %s failed: %s\", url, p.err);\n+        die!(fmt!(\"fetch of %s failed: %s\", url, p.err));\n     }\n     run::run_program(~\"tar\", ~[~\"-x\", ~\"--strip-components=1\",\n                                ~\"-C\", wd.to_str(),\n@@ -1123,8 +1123,8 @@ pub fn install_query(c: &Cargo, wd: &Path, target: ~str) {\n pub fn get_temp_workdir(c: &Cargo) -> Path {\n     match tempfile::mkdtemp(&c.workdir, \"cargo\") {\n       Some(wd) => wd,\n-      None => fail fmt!(\"needed temp dir: %s\",\n-                        c.workdir.to_str())\n+      None => die!(fmt!(\"needed temp dir: %s\",\n+                        c.workdir.to_str()))\n     }\n }\n \n@@ -1138,7 +1138,7 @@ pub fn cmd_install(c: &Cargo) {\n                                                    wd.to_str()]);\n \n             if status != 0 {\n-                fail fmt!(\"could not copy directory: %s\", cwd.to_str());\n+                die!(fmt!(\"could not copy directory: %s\", cwd.to_str()));\n             }\n \n             install_source(c, &wd);"}, {"sha": "18b1c49efb14e2f9d09fbbc4a60035267e82fc9a", "filename": "src/libcargo/pgp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcargo%2Fpgp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcargo%2Fpgp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fpgp.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -87,7 +87,7 @@ pub fn init(root: &Path) {\n         p.input().write_str(signing_key());\n         let s = p.finish();\n         if s != 0 {\n-            fail ~\"pgp init failed\";\n+            die!(~\"pgp init failed\");\n         }\n     }\n }\n@@ -98,7 +98,7 @@ pub fn add(root: &Path, key: &Path) {\n         run::program_output(~\"gpg\", ~[~\"--homedir\", path.to_str(),\n                                       ~\"--import\", key.to_str()]);\n     if p.status != 0 {\n-        fail ~\"pgp add failed: \" + p.out;\n+        die!(~\"pgp add failed: \" + p.out);\n     }\n }\n "}, {"sha": "8ad4ad7cd8cb88356b2bfad25bf8c140629f570d", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -37,7 +37,7 @@ impl<T, U> Condition<T, U> {\n \n     fn raise(t: T) -> U {\n         let msg = fmt!(\"Unhandled condition: %s: %?\", self.name, t);\n-        self.raise_default(t, || fail copy msg)\n+        self.raise_default(t, || die!(copy msg))\n     }\n \n     fn raise_default(t: T, default: &fn() -> U) -> U {"}, {"sha": "4378880c6b061fe8d90438b1aa02684ea807288b", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -251,6 +251,7 @@ pub mod core {\n     pub use condition;\n     pub use option;\n     pub use kinds;\n+    pub use sys;\n }\n \n "}, {"sha": "d4216b283a9b35bc452479e46f0dc9012fba2147", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -48,18 +48,18 @@ priv impl<T> DListNode<T> {\n         match self.next {\n             Some(neighbour) => match neighbour.prev {\n               Some(me) => if !managed::ptr_eq(self, me) {\n-                  fail ~\"Asymmetric next-link in dlist node.\"\n+                  die!(~\"Asymmetric next-link in dlist node.\")\n               },\n-              None => fail ~\"One-way next-link in dlist node.\"\n+              None => die!(~\"One-way next-link in dlist node.\")\n             },\n             None => ()\n         }\n         match self.prev {\n             Some(neighbour) => match neighbour.next {\n               Some(me) => if !managed::ptr_eq(me, self) {\n-                  fail ~\"Asymmetric prev-link in dlist node.\"\n+                  die!(~\"Asymmetric prev-link in dlist node.\")\n               },\n-              None => fail ~\"One-way prev-link in dlist node.\"\n+              None => die!(~\"One-way prev-link in dlist node.\")\n             },\n             None => ()\n         }\n@@ -76,7 +76,7 @@ impl<T> DListNode<T> {\n     pure fn next_node(@self) -> @DListNode<T> {\n         match self.next_link() {\n             Some(nobe) => nobe,\n-            None       => fail ~\"This dlist node has no next neighbour.\"\n+            None       => die!(~\"This dlist node has no next neighbour.\")\n         }\n     }\n     /// Get the previous node in the list, if there is one.\n@@ -88,7 +88,7 @@ impl<T> DListNode<T> {\n     pure fn prev_node(@self) -> @DListNode<T> {\n         match self.prev_link() {\n             Some(nobe) => nobe,\n-            None       => fail ~\"This dlist node has no previous neighbour.\"\n+            None       => die!(~\"This dlist node has no previous neighbour.\")\n         }\n     }\n }\n@@ -135,21 +135,21 @@ priv impl<T> DList<T> {\n         // These asserts could be stronger if we had node-root back-pointers,\n         // but those wouldn't allow for O(1) append.\n         if self.size == 0 {\n-            fail ~\"This dlist is empty; that node can't be on it.\"\n+            die!(~\"This dlist is empty; that node can't be on it.\")\n         }\n-        if !nobe.linked { fail ~\"That node isn't linked to any dlist.\" }\n+        if !nobe.linked { die!(~\"That node isn't linked to any dlist.\") }\n         if !((nobe.prev.is_some()\n               || managed::ptr_eq(self.hd.expect(~\"headless dlist?\"),\n                                  nobe)) &&\n              (nobe.next.is_some()\n               || managed::ptr_eq(self.tl.expect(~\"tailless dlist?\"),\n                                  nobe))) {\n-            fail ~\"That node isn't on this dlist.\"\n+            die!(~\"That node isn't on this dlist.\")\n         }\n     }\n     fn make_mine(nobe: @DListNode<T>) {\n         if nobe.prev.is_some() || nobe.next.is_some() || nobe.linked {\n-            fail ~\"Cannot insert node that's already on a dlist!\"\n+            die!(~\"Cannot insert node that's already on a dlist!\")\n         }\n         nobe.linked = true;\n     }\n@@ -313,14 +313,16 @@ impl<T> DList<T> {\n     pure fn head_n(@self) -> @DListNode<T> {\n         match self.hd {\n             Some(nobe) => nobe,\n-            None       => fail ~\"Attempted to get the head of an empty dlist.\"\n+            None       => die!(\n+                ~\"Attempted to get the head of an empty dlist.\")\n         }\n     }\n     /// Get the node at the list's tail, failing if empty. O(1).\n     pure fn tail_n(@self) -> @DListNode<T> {\n         match self.tl {\n             Some(nobe) => nobe,\n-            None       => fail ~\"Attempted to get the tail of an empty dlist.\"\n+            None       => die!(\n+                ~\"Attempted to get the tail of an empty dlist.\")\n         }\n     }\n \n@@ -333,7 +335,7 @@ impl<T> DList<T> {\n      */\n     fn append(@self, them: @DList<T>) {\n         if managed::ptr_eq(self, them) {\n-            fail ~\"Cannot append a dlist to itself!\"\n+            die!(~\"Cannot append a dlist to itself!\")\n         }\n         if them.len() > 0 {\n             self.link(self.tl, them.hd);\n@@ -350,7 +352,7 @@ impl<T> DList<T> {\n      */\n     fn prepend(@self, them: @DList<T>) {\n         if managed::ptr_eq(self, them) {\n-            fail ~\"Cannot prepend a dlist to itself!\"\n+            die!(~\"Cannot prepend a dlist to itself!\")\n         }\n         if them.len() > 0 {\n             self.link(them.tl, self.hd);"}, {"sha": "8b1a16a725ae04e4eec9e5cd0905f0c66afe1102", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -91,7 +91,7 @@ priv impl<A> DVec<A> {\n         unsafe {\n             let data: *() = cast::reinterpret_cast(&self.data);\n             if data.is_null() {\n-                fail ~\"Recursive use of dvec\";\n+                die!(~\"Recursive use of dvec\");\n             }\n         }\n     }\n@@ -102,7 +102,7 @@ priv impl<A> DVec<A> {\n             let mut data = cast::reinterpret_cast(&null::<()>());\n             data <-> self.data;\n             let data_ptr: *() = cast::reinterpret_cast(&data);\n-            if data_ptr.is_null() { fail ~\"Recursive use of dvec\"; }\n+            if data_ptr.is_null() { die!(~\"Recursive use of dvec\"); }\n             return f(move data);\n         }\n     }\n@@ -329,7 +329,7 @@ impl<A: Copy> DVec<A> {\n \n         let length = self.len();\n         if length == 0 {\n-            fail ~\"attempt to retrieve the last element of an empty vector\";\n+            die!(~\"attempt to retrieve the last element of an empty vector\");\n         }\n \n         return self.data[length - 1];"}, {"sha": "6b327b919e55c8b482a64dfd2bbe3ed65f05c143", "filename": "src/libcore/either.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -136,7 +136,7 @@ pub pure fn unwrap_left<T,U>(eith: Either<T,U>) -> T {\n     //! Retrieves the value in the left branch. Fails if the either is Right.\n \n     match move eith {\n-        Left(move x) => move x, Right(_) => fail ~\"either::unwrap_left Right\"\n+        Left(move x) => move x, Right(_) => die!(~\"either::unwrap_left Right\")\n     }\n }\n \n@@ -145,7 +145,7 @@ pub pure fn unwrap_right<T,U>(eith: Either<T,U>) -> U {\n     //! Retrieves the value in the right branch. Fails if the either is Left.\n \n     match move eith {\n-        Right(move x) => move x, Left(_) => fail ~\"either::unwrap_right Left\"\n+        Right(move x) => move x, Left(_) => die!(~\"either::unwrap_right Left\")\n     }\n }\n "}, {"sha": "e452735777ece45986a9b4a8c8e76e2717a1c79a", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -342,7 +342,7 @@ pub mod ct {\n     }\n \n     #[cfg(test)]\n-    fn die(s: &str) -> ! { fail s.to_owned() }\n+    fn die(s: &str) -> ! { die!(s.to_owned()) }\n \n     #[test]\n     fn test_parse_count() {"}, {"sha": "b90edec4d9612f6065438e8498537e0fe6930bb5", "filename": "src/libcore/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -516,7 +516,7 @@ pub fn test_from_str() {\n    // note: NaN != NaN, hence this slightly complex test\n    match from_str(~\"NaN\") {\n        Some(f) => assert is_NaN(f),\n-       None => fail\n+       None => die!()\n    }\n \n    assert from_str(~\"\").is_none();"}, {"sha": "8150bfbe0ee83233f86bdc469b1c9039644bcf03", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -312,7 +312,7 @@ fn expect_sentinel() -> bool { false }\n // heap and stack allocations requiring drop, and runs all\n // destructors.\n //\n-// This should only be called from fail, as it will drop the roots\n+// This should only be called from fail!, as it will drop the roots\n // which are *live* on the stack, rather than dropping those that are\n // dead.\n pub fn cleanup_stack_for_failure() {"}, {"sha": "d9e53811b65c4be75fb673b3db7e2970c38ae64e", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -286,7 +286,7 @@ impl SipState : io::Writer {\n     }\n \n     fn seek(&self, _x: int, _s: io::SeekStyle) {\n-        fail;\n+        die!();\n     }\n     fn tell(&self) -> uint {\n         self.length"}, {"sha": "2cf7053246d85e39a64f7e8fc290e295c0c5fafa", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -167,7 +167,7 @@ pub mod linear {\n         /// True if there was no previous entry with that key\n         fn insert_internal(&mut self, hash: uint, k: K, v: V) -> bool {\n             match self.bucket_for_key_with_hash(self.buckets, hash, &k) {\n-                TableFull => { fail ~\"Internal logic error\"; }\n+                TableFull => { die!(~\"Internal logic error\"); }\n                 FoundHole(idx) => {\n                     debug!(\"insert fresh (%?->%?) at idx %?, hash %?\",\n                            k, v, idx, hash);\n@@ -301,7 +301,7 @@ pub mod linear {\n                             Some(&bkt.value)\n                         }\n                         None => {\n-                            fail ~\"LinearMap::find: internal logic error\"\n+                            die!(~\"LinearMap::find: internal logic error\")\n                         }\n                     }\n                 }\n@@ -623,7 +623,7 @@ mod test_map {\n         assert m.find(&1).is_none();\n         m.insert(1, 2);\n         match m.find(&1) {\n-            None => fail,\n+            None => die!(),\n             Some(v) => assert *v == 2\n         }\n     }"}, {"sha": "08508b09b70a728adb2f01d6f1abfb432e83cde9", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -112,7 +112,7 @@ pub pure fn is_nonnegative(x: T) -> bool { x >= 0 as T }\n pub pure fn range_step(start: T, stop: T, step: T, it: fn(T) -> bool) {\n     let mut i = start;\n     if step == 0 {\n-        fail ~\"range_step called with step == 0\";\n+        die!(~\"range_step called with step == 0\");\n     } else if step > 0 { // ascending\n         while i < stop {\n             if !it(i) { break }\n@@ -359,16 +359,16 @@ pub fn test_ranges() {\n \n     // None of the `fail`s should execute.\n     for range(10,0) |_i| {\n-        fail ~\"unreachable\";\n+        die!(~\"unreachable\");\n     }\n     for range_rev(0,10) |_i| {\n-        fail ~\"unreachable\";\n+        die!(~\"unreachable\");\n     }\n     for range_step(10,0,1) |_i| {\n-        fail ~\"unreachable\";\n+        die!(~\"unreachable\");\n     }\n     for range_step(0,10,-1) |_i| {\n-        fail ~\"unreachable\";\n+        die!(~\"unreachable\");\n     }\n }\n "}, {"sha": "d2ddbc40885e3ceda5e09e66a30ba846dea351d7", "filename": "src/libcore/io.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -611,7 +611,7 @@ impl *libc::FILE: Writer {\n                 if nout != len as size_t {\n                     error!(\"error writing buffer\");\n                     log(error, os::last_os_error());\n-                    fail;\n+                    die!();\n                 }\n             }\n         }\n@@ -661,7 +661,7 @@ impl fd_t: Writer {\n                     if nout < 0 as ssize_t {\n                         error!(\"error writing buffer\");\n                         log(error, os::last_os_error());\n-                        fail;\n+                        die!();\n                     }\n                     count += nout as uint;\n                 }\n@@ -670,11 +670,11 @@ impl fd_t: Writer {\n     }\n     fn seek(&self, _offset: int, _whence: SeekStyle) {\n         error!(\"need 64-bit foreign calls for seek, sorry\");\n-        fail;\n+        die!();\n     }\n     fn tell(&self) -> uint {\n         error!(\"need 64-bit foreign calls for tell, sorry\");\n-        fail;\n+        die!();\n     }\n     fn flush(&self) -> int { 0 }\n     fn get_type(&self) -> WriterType {\n@@ -1279,7 +1279,7 @@ mod tests {\n           result::Err(copy e) => {\n             assert e == ~\"error opening not a file\";\n           }\n-          result::Ok(_) => fail\n+          result::Ok(_) => die!()\n         }\n     }\n \n@@ -1320,7 +1320,7 @@ mod tests {\n           result::Err(copy e) => {\n             assert str::starts_with(e, \"error opening\");\n           }\n-          result::Ok(_) => fail\n+          result::Ok(_) => die!()\n         }\n     }\n \n@@ -1330,7 +1330,7 @@ mod tests {\n           result::Err(copy e) => {\n             assert str::starts_with(e, \"error opening\");\n           }\n-          result::Ok(_) => fail\n+          result::Ok(_) => die!()\n         }\n     }\n "}, {"sha": "cf67d478983cdc69f841ae59983e74fe8d9660d3", "filename": "src/libcore/iter-trait/dlist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdlist.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -33,7 +33,7 @@ mod inst {\n             if !f(&nobe.data) { break; }\n             // Check (weakly) that the user didn't do a remove.\n             if self.size == 0 {\n-                fail ~\"The dlist became empty during iteration??\"\n+                die!(~\"The dlist became empty during iteration??\")\n             }\n             if !nobe.linked ||\n                 (!((nobe.prev.is_some()\n@@ -42,7 +42,7 @@ mod inst {\n                    && (nobe.next.is_some()\n                     || managed::ptr_eq(self.tl.expect(~\"tailless dlist?\"),\n                                        nobe)))) {\n-                fail ~\"Removing a dlist node during iteration is forbidden!\"\n+                die!(~\"Removing a dlist node during iteration is forbidden!\")\n             }\n             link = nobe.next_link();\n         }"}, {"sha": "2ffa870226179c3976209cb360567c75dafc2b67", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -220,7 +220,7 @@ pub pure fn min<A:Copy Ord,IA:BaseIter<A>>(self: &IA) -> A {\n         }\n     } {\n         Some(move val) => val,\n-        None => fail ~\"min called on empty iterator\"\n+        None => die!(~\"min called on empty iterator\")\n     }\n }\n \n@@ -235,7 +235,7 @@ pub pure fn max<A:Copy Ord,IA:BaseIter<A>>(self: &IA) -> A {\n         }\n     } {\n         Some(move val) => val,\n-        None => fail ~\"max called on empty iterator\"\n+        None => die!(~\"max called on empty iterator\")\n     }\n }\n "}, {"sha": "4623a3f45431d6c159979f2e9d5ff6e3c351ac90", "filename": "src/libcore/mutable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fmutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fmutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmutable.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -48,8 +48,8 @@ pub fn unwrap<T>(m: Mut<T>) -> T {\n impl<T> Data<T> {\n     fn borrow_mut<R>(op: &fn(t: &mut T) -> R) -> R {\n         match self.mode {\n-            Immutable => fail fmt!(\"%? currently immutable\",\n-                                   self.value),\n+            Immutable => die!(fmt!(\"%? currently immutable\",\n+                                   self.value)),\n             ReadOnly | Mutable => {}\n         }\n \n@@ -64,8 +64,8 @@ impl<T> Data<T> {\n \n     fn borrow_imm<R>(op: &fn(t: &T) -> R) -> R {\n         match self.mode {\n-          Mutable => fail fmt!(\"%? currently mutable\",\n-                               self.value),\n+          Mutable => die!(fmt!(\"%? currently mutable\",\n+                               self.value)),\n           ReadOnly | Immutable => {}\n         }\n "}, {"sha": "cb9593260d6638e8fa78a4972ef77703ea1233ee", "filename": "src/libcore/oldcomm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Foldcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Foldcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foldcomm.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -183,9 +183,9 @@ fn as_raw_port<T: Owned, U>(ch: Chan<T>, f: fn(*rust_port) -> U) -> U {\n         let p = PortRef(rustrt::rust_port_take(*ch));\n \n         if ptr::is_null(p.p) {\n-            fail ~\"unable to locate port for channel\"\n+            die!(~\"unable to locate port for channel\")\n         } else if rustrt::get_task_id() != rustrt::rust_port_task(p.p) {\n-            fail ~\"unable to access unowned port\"\n+            die!(~\"unable to access unowned port\")\n         }\n \n         f(p.p)\n@@ -298,7 +298,7 @@ pub fn select2<A: Owned, B: Owned>(p_a: Port<A>, p_b: Port<B>)\n         } else if resport == (**p_b).po {\n             either::Right(recv(p_b))\n         } else {\n-            fail ~\"unexpected result from rust_port_select\";\n+            die!(~\"unexpected result from rust_port_select\");\n         }\n     }\n }\n@@ -466,7 +466,7 @@ fn test_select2_stress() {\n         match select2(po_a, po_b) {\n           either::Left(~\"a\") => as_ += 1,\n           either::Right(~\"b\") => bs += 1,\n-          _ => fail ~\"test_select_2_stress failed\"\n+          _ => die!(~\"test_select_2_stress failed\")\n         }\n     }\n \n@@ -536,7 +536,7 @@ fn test_port_detach_fail() {\n             let ch = po.chan();\n \n             do task::spawn {\n-                fail;\n+                die!();\n             }\n \n             do task::spawn {"}, {"sha": "9cb955ad352b913e0d749bdb1d308a601d7c07c8", "filename": "src/libcore/option.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -78,7 +78,7 @@ pub pure fn get<T: Copy>(opt: Option<T>) -> T {\n \n     match opt {\n       Some(copy x) => return x,\n-      None => fail ~\"option::get none\"\n+      None => die!(~\"option::get none\")\n     }\n }\n \n@@ -100,7 +100,7 @@ pub pure fn get_ref<T>(opt: &r/Option<T>) -> &r/T {\n      */\n     match *opt {\n         Some(ref x) => x,\n-        None => fail ~\"option::get_ref none\"\n+        None => die!(~\"option::get_ref none\")\n     }\n }\n \n@@ -229,7 +229,7 @@ pub pure fn unwrap<T>(opt: Option<T>) -> T {\n      */\n     match move opt {\n         Some(move x) => move x,\n-        None => fail ~\"option::unwrap none\"\n+        None => die!(~\"option::unwrap none\")\n     }\n }\n \n@@ -243,7 +243,7 @@ pub fn swap_unwrap<T>(opt: &mut Option<T>) -> T {\n \n     Fails if the value equals `None`.\n      */\n-    if opt.is_none() { fail ~\"option::swap_unwrap none\" }\n+    if opt.is_none() { die!(~\"option::swap_unwrap none\") }\n     unwrap(util::replace(opt, None))\n }\n \n@@ -252,7 +252,7 @@ pub pure fn expect<T>(opt: Option<T>, reason: &str) -> T {\n     //! As unwrap, but with a specified failure message.\n     match move opt {\n         Some(move val) => val,\n-        None => fail reason.to_owned(),\n+        None => die!(reason.to_owned()),\n     }\n }\n "}, {"sha": "af484454ef466addf42a8753c3c37ad8d947cfd5", "filename": "src/libcore/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -1212,7 +1212,7 @@ mod tests {\n           assert (libc::fclose(ostream) == (0u as c_int));\n           let rs = os::copy_file(&in, &out);\n           if (!os::path_exists(&in)) {\n-            fail (fmt!(\"%s doesn't exist\", in.to_str()));\n+            die!(fmt!(\"%s doesn't exist\", in.to_str()));\n           }\n           assert(rs);\n           let rslt = run::run_program(~\"diff\", ~[in.to_str(), out.to_str()]);"}, {"sha": "5f6ee3baf02347c9f7dccb868bc1a86612a50a7a", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -384,7 +384,7 @@ fn wait_event(this: *rust_task) -> *libc::c_void {\n \n         let killed = rustrt::task_wait_event(this, &mut event);\n         if killed && !task::failing() {\n-            fail ~\"killed\"\n+            die!(~\"killed\")\n         }\n         event\n     }\n@@ -506,7 +506,7 @@ pub fn send<T: Owned, Tbuffer: Owned>(p: SendPacketBuffered<T, Tbuffer>,\n             //unsafe { forget(p); }\n             return true;\n         }\n-        Full => fail ~\"duplicate send\",\n+        Full => die!(~\"duplicate send\"),\n         Blocked => {\n             debug!(\"waking up task for %?\", p_);\n             let old_task = swap_task(&mut p.header.blocked_task, ptr::null());\n@@ -667,7 +667,7 @@ pub fn try_recv<T: Owned, Tbuffer: Owned>(p: RecvPacketBuffered<T, Tbuffer>)\n             debug!(\"woke up, p.state = %?\", copy p.header.state);\n           }\n           Blocked => if first {\n-            fail ~\"blocking on already blocked packet\"\n+            die!(~\"blocking on already blocked packet\")\n           },\n           Full => {\n             let mut payload = None;\n@@ -703,7 +703,7 @@ pub fn try_recv<T: Owned, Tbuffer: Owned>(p: RecvPacketBuffered<T, Tbuffer>)\n pub pure fn peek<T: Owned, Tb: Owned>(p: &RecvPacketBuffered<T, Tb>) -> bool {\n     match unsafe {(*p.header()).state} {\n       Empty | Terminated => false,\n-      Blocked => fail ~\"peeking on blocked packet\",\n+      Blocked => die!(~\"peeking on blocked packet\"),\n       Full => true\n     }\n }\n@@ -736,7 +736,7 @@ fn sender_terminate<T: Owned>(p: *Packet<T>) {\n       }\n       Full => {\n         // This is impossible\n-        fail ~\"you dun goofed\"\n+        die!(~\"you dun goofed\")\n       }\n       Terminated => {\n         assert p.header.blocked_task.is_null();\n@@ -799,7 +799,7 @@ fn wait_many<T: Selectable>(pkts: &[T]) -> uint {\n                 (*p).state = old;\n                 break;\n               }\n-              Blocked => fail ~\"blocking on blocked packet\",\n+              Blocked => die!(~\"blocking on blocked packet\"),\n               Empty => ()\n             }\n         }\n@@ -872,7 +872,7 @@ pub fn select2<A: Owned, Ab: Owned, B: Owned, Bb: Owned>(\n     match i {\n       0 => Left((try_recv(move a), move b)),\n       1 => Right((move a, try_recv(move b))),\n-      _ => fail ~\"select2 return an invalid packet\"\n+      _ => die!(~\"select2 return an invalid packet\")\n     }\n }\n \n@@ -896,7 +896,7 @@ pub fn select2i<A: Selectable, B: Selectable>(a: &A, b: &B) ->\n     match wait_many([a.header(), b.header()]) {\n       0 => Left(()),\n       1 => Right(()),\n-      _ => fail ~\"wait returned unexpected index\"\n+      _ => die!(~\"wait returned unexpected index\")\n     }\n }\n \n@@ -1048,7 +1048,7 @@ impl<T,Tbuffer> SendPacketBuffered<T,Tbuffer> {\n             //forget(packet);\n             header\n           },\n-          None => fail ~\"packet already consumed\"\n+          None => die!(~\"packet already consumed\")\n         }\n     }\n \n@@ -1147,7 +1147,7 @@ impl<T: Owned, Tbuffer: Owned> RecvPacketBuffered<T, Tbuffer> : Selectable {\n             //forget(packet);\n             header\n           },\n-          None => fail ~\"packet already consumed\"\n+          None => die!(~\"packet already consumed\")\n         }\n     }\n }\n@@ -1391,7 +1391,7 @@ impl<T: Owned> Port<T>: Peekable<T> {\n             endp <-> self.endp;\n             let peek = match &endp {\n               &Some(ref endp) => pipes::peek(endp),\n-              &None => fail ~\"peeking empty stream\"\n+              &None => die!(~\"peeking empty stream\")\n             };\n             self.endp <-> endp;\n             peek\n@@ -1404,7 +1404,7 @@ impl<T: Owned> Port<T>: Selectable {\n         unsafe {\n             match self.endp {\n               Some(ref endp) => endp.header(),\n-              None => fail ~\"peeking empty stream\"\n+              None => die!(~\"peeking empty stream\")\n             }\n         }\n     }\n@@ -1639,7 +1639,7 @@ pub mod test {\n         c1.send(~\"abc\");\n \n         match (move p1, move p2).select() {\n-          Right(_) => fail,\n+          Right(_) => die!(),\n           _ => ()\n         }\n "}, {"sha": "1fb8166ed12dccc8518d6fe8e697435228ec1c75", "filename": "src/libcore/private.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -225,7 +225,7 @@ pub unsafe fn unwrap_shared_mutable_state<T: Owned>(rc: SharedMutableState<T>)\n             cast::forget(move ptr);\n             // Also we have to free the (rejected) server endpoints.\n             let _server: UnwrapProto = cast::transmute(move serverp);\n-            fail ~\"Another task is already unwrapping this ARC!\";\n+            die!(~\"Another task is already unwrapping this ARC!\");\n         }\n     }\n }\n@@ -371,7 +371,7 @@ impl<T: Owned> Exclusive<T> {\n         let rec = unsafe { get_shared_mutable_state(&self.x) };\n         do rec.lock.lock {\n             if rec.failed {\n-                fail ~\"Poisoned exclusive - another task failed inside!\";\n+                die!(~\"Poisoned exclusive - another task failed inside!\");\n             }\n             rec.failed = true;\n             let result = f(&mut rec.data);\n@@ -513,7 +513,7 @@ pub mod tests {\n             let x2 = x.clone();\n             do task::spawn {\n                 for 10.times { task::yield(); } // try to let the unwrapper go\n-                fail; // punt it awake from its deadlock\n+                die!(); // punt it awake from its deadlock\n             }\n             let _z = unwrap_exclusive(move x);\n             do x2.with |_hello| { }"}, {"sha": "655a8754f01d7ae2825b5cff9d903a2e277e4368", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -298,7 +298,7 @@ impl ReprVisitor : TyVisitor {\n     }\n \n     // Type no longer exists, vestigial function.\n-    fn visit_str() -> bool { fail; }\n+    fn visit_str() -> bool { die!(); }\n \n     fn visit_estr_box() -> bool {\n         do self.get::<@str> |s| {\n@@ -320,7 +320,7 @@ impl ReprVisitor : TyVisitor {\n \n     // Type no longer exists, vestigial function.\n     fn visit_estr_fixed(_n: uint, _sz: uint,\n-                        _align: uint) -> bool { fail; }\n+                        _align: uint) -> bool { die!(); }\n \n     fn visit_box(mtbl: uint, inner: *TyDesc) -> bool {\n         self.writer.write_char('@');\n@@ -356,7 +356,7 @@ impl ReprVisitor : TyVisitor {\n     }\n \n     // Type no longer exists, vestigial function.\n-    fn visit_vec(_mtbl: uint, _inner: *TyDesc) -> bool { fail; }\n+    fn visit_vec(_mtbl: uint, _inner: *TyDesc) -> bool { die!(); }\n \n \n     fn visit_unboxed_vec(mtbl: uint, inner: *TyDesc) -> bool {\n@@ -555,7 +555,7 @@ impl ReprVisitor : TyVisitor {\n     }\n \n     // Type no longer exists, vestigial function.\n-    fn visit_constr(_inner: *TyDesc) -> bool { fail; }\n+    fn visit_constr(_inner: *TyDesc) -> bool { die!(); }\n \n     fn visit_closure_ptr(_ck: uint) -> bool { true }\n }"}, {"sha": "d04667698fd27fc844f25d5d07eec05b149c506c", "filename": "src/libcore/result.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -44,7 +44,7 @@ pub pure fn get<T: Copy, U>(res: &Result<T, U>) -> T {\n     match *res {\n       Ok(copy t) => t,\n       Err(ref the_err) => unsafe {\n-        fail fmt!(\"get called on error result: %?\", *the_err)\n+        die!(fmt!(\"get called on error result: %?\", *the_err))\n       }\n     }\n }\n@@ -61,7 +61,7 @@ pub pure fn get_ref<T, U>(res: &a/Result<T, U>) -> &a/T {\n     match *res {\n         Ok(ref t) => t,\n         Err(ref the_err) => unsafe {\n-            fail fmt!(\"get_ref called on error result: %?\", *the_err)\n+            die!(fmt!(\"get_ref called on error result: %?\", *the_err))\n         }\n     }\n }\n@@ -77,7 +77,7 @@ pub pure fn get_ref<T, U>(res: &a/Result<T, U>) -> &a/T {\n pub pure fn get_err<T, U: Copy>(res: &Result<T, U>) -> U {\n     match *res {\n       Err(copy u) => u,\n-      Ok(_) => fail ~\"get_err called on ok result\"\n+      Ok(_) => die!(~\"get_err called on ok result\")\n     }\n }\n \n@@ -382,7 +382,7 @@ pub fn iter_vec2<S,T,U:Copy>(ss: &[S], ts: &[T],\n pub pure fn unwrap<T, U>(res: Result<T, U>) -> T {\n     match move res {\n       Ok(move t) => move t,\n-      Err(_) => fail ~\"unwrap called on an err result\"\n+      Err(_) => die!(~\"unwrap called on an err result\")\n     }\n }\n \n@@ -391,7 +391,7 @@ pub pure fn unwrap<T, U>(res: Result<T, U>) -> T {\n pub pure fn unwrap_err<T, U>(res: Result<T, U>) -> U {\n     match move res {\n       Err(move u) => move u,\n-      Ok(_) => fail ~\"unwrap called on an ok result\"\n+      Ok(_) => die!(~\"unwrap called on an ok result\")\n     }\n }\n "}, {"sha": "c10eacc7a0adc7dfa5bbb8e18fac5e8bc990e5ac", "filename": "src/libcore/run.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -184,7 +184,7 @@ fn with_dirp<T>(d: &Option<~str>,\n pub fn run_program(prog: &str, args: &[~str]) -> int {\n     let pid = spawn_process(prog, args, &None, &None,\n                             0i32, 0i32, 0i32);\n-    if pid == -1 as pid_t { fail; }\n+    if pid == -1 as pid_t { die!(); }\n     return waitpid(pid);\n }\n \n@@ -214,7 +214,7 @@ pub fn start_program(prog: &str, args: &[~str]) -> Program {\n                       pipe_err.out);\n \n     unsafe {\n-        if pid == -1 as pid_t { fail; }\n+        if pid == -1 as pid_t { die!(); }\n         libc::close(pipe_input.in);\n         libc::close(pipe_output.out);\n         libc::close(pipe_err.out);\n@@ -328,7 +328,7 @@ pub fn program_output(prog: &str, args: &[~str]) ->\n             os::close(pipe_in.out);\n             os::close(pipe_out.in);\n             os::close(pipe_err.in);\n-            fail;\n+            die!();\n         }\n \n         os::close(pipe_in.out);\n@@ -362,7 +362,7 @@ pub fn program_output(prog: &str, args: &[~str]) ->\n                     errs = move s;\n                 }\n                 (n, _) => {\n-                    fail(fmt!(\"program_output received an unexpected file \\\n+                    die!(fmt!(\"program_output received an unexpected file \\\n                                number: %u\", n));\n                 }\n             };\n@@ -474,7 +474,7 @@ mod tests {\n         os::close(pipe_out.out);\n         os::close(pipe_err.out);\n \n-        if pid == -1i32 { fail; }\n+        if pid == -1i32 { die!(); }\n         let expected = ~\"test\";\n         writeclose(pipe_in.out, copy expected);\n         let actual = readclose(pipe_out.in);"}, {"sha": "64695be21d5156d8127a076599d44565b8035b0e", "filename": "src/libcore/str.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -2990,7 +2990,7 @@ mod tests {\n     #[should_fail]\n     fn test_as_bytes_fail() {\n         // Don't double free\n-        as_bytes::<()>(&~\"\", |_bytes| fail );\n+        as_bytes::<()>(&~\"\", |_bytes| die!() );\n     }\n \n     #[test]\n@@ -3090,12 +3090,12 @@ mod tests {\n               0 => assert ch == 'x',\n               1 => assert ch == '\\u03c0',\n               2 => assert ch == 'y',\n-              _ => fail ~\"test_chars_each failed\"\n+              _ => die!(~\"test_chars_each failed\")\n             }\n             i += 1;\n         }\n \n-        chars_each(~\"\", |_ch| fail ); // should not fail\n+        chars_each(~\"\", |_ch| die!() ); // should not fail\n     }\n \n     #[test]\n@@ -3107,7 +3107,7 @@ mod tests {\n               0 => assert bb == 'x' as u8,\n               1 => assert bb == 'y' as u8,\n               2 => assert bb == 'z' as u8,\n-              _ => fail ~\"test_bytes_each failed\"\n+              _ => die!(~\"test_bytes_each failed\")\n             }\n             i += 1;\n         }\n@@ -3169,7 +3169,7 @@ mod tests {\n             ii += 1;\n         }\n \n-        words_each(~\"\", |_x| fail); // should not fail\n+        words_each(~\"\", |_x| die!()); // should not fail\n     }\n \n     #[test]"}, {"sha": "5136af810e8d2ec0e113c26ed8836197b910e847", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -133,15 +133,15 @@ fn test_tls_modify() {\n         fn my_key(_x: @~str) { }\n         local_data_modify(my_key, |data| {\n             match data {\n-                Some(@ref val) => fail ~\"unwelcome value: \" + *val,\n+                Some(@ref val) => die!(~\"unwelcome value: \" + *val),\n                 None       => Some(@~\"first data\")\n             }\n         });\n         local_data_modify(my_key, |data| {\n             match data {\n                 Some(@~\"first data\") => Some(@~\"next data\"),\n-                Some(@ref val)           => fail ~\"wrong value: \" + *val,\n-                None                 => fail ~\"missing value\"\n+                Some(@ref val)           => die!(~\"wrong value: \" + *val),\n+                None                 => die!(~\"missing value\")\n             }\n         });\n         assert *(local_data_pop(my_key).get()) == ~\"next data\";\n@@ -212,11 +212,11 @@ fn test_tls_cleanup_on_failure() {\n                 local_data_set(str_key, @~\"string data\");\n                 local_data_set(box_key, @@());\n                 local_data_set(int_key, @42);\n-                fail;\n+                die!();\n             }\n         }\n         // Not quite nondeterministic.\n         local_data_set(int_key, @31337);\n-        fail;\n+        die!();\n     }\n }"}, {"sha": "a34956c87badfbf3b621144f59590d03b62e4c90", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -218,7 +218,7 @@ pub fn task() -> TaskBuilder {\n priv impl TaskBuilder {\n     fn consume() -> TaskBuilder {\n         if self.consumed {\n-            fail ~\"Cannot copy a task_builder\"; // Fake move mode on self\n+            die!(~\"Cannot copy a task_builder\"); // Fake move mode on self\n         }\n         self.consumed = true;\n         let notify_chan = replace(&mut self.opts.notify_chan, None);\n@@ -314,7 +314,7 @@ impl TaskBuilder {\n         // sending out messages.\n \n         if self.opts.notify_chan.is_some() {\n-            fail ~\"Can't set multiple future_results for one task!\";\n+            die!(~\"Can't set multiple future_results for one task!\");\n         }\n \n         // Construct the future and give it to the caller.\n@@ -548,7 +548,7 @@ pub fn yield() {\n         let task_ = rt::rust_get_task();\n         let killed = rt::rust_task_yield(task_);\n         if killed && !failing() {\n-            fail ~\"killed\";\n+            die!(~\"killed\");\n         }\n     }\n }\n@@ -694,24 +694,24 @@ fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n             for iter::repeat(16) { task::yield(); }\n             ch.send(()); // If killed first, grandparent hangs.\n         }\n-        fail; // Shouldn't kill either (grand)parent or (grand)child.\n+        die!(); // Shouldn't kill either (grand)parent or (grand)child.\n     }\n     po.recv();\n }\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_unsup_no_fail_up() { // child unlinked fails\n-    do spawn_unlinked { fail; }\n+    do spawn_unlinked { die!(); }\n }\n #[test] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_sup_no_fail_up() { // child unlinked fails\n-    do spawn_supervised { fail; }\n+    do spawn_supervised { die!(); }\n     // Give child a chance to fail-but-not-kill-us.\n     for iter::repeat(16) { task::yield(); }\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_unlinked_sup_fail_down() {\n     do spawn_supervised { loop { task::yield(); } }\n-    fail; // Shouldn't leave a child hanging around.\n+    die!(); // Shouldn't leave a child hanging around.\n }\n \n #[test] #[should_fail] #[ignore(cfg(windows))]\n@@ -754,7 +754,7 @@ fn test_spawn_linked_sup_fail_down() { // parent fails; child fails\n         .. b0\n     };\n     do b1.spawn { loop { task::yield(); } }\n-    fail; // *both* mechanisms would be wrong if this didn't kill the child...\n+    die!(); // *both* mechanisms would be wrong if this didn't kill the child\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n@@ -767,13 +767,13 @@ fn test_spawn_linked_unsup_fail_up() { // child fails; parent fails\n fn test_spawn_linked_unsup_fail_down() { // parent fails; child fails\n     // Default options are to spawn linked & unsupervised.\n     do spawn { loop { task::yield(); } }\n-    fail;\n+    die!();\n }\n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_spawn_linked_unsup_default_opts() { // parent fails; child fails\n     // Make sure the above test is the same as this one.\n     do task().linked().spawn { loop { task::yield(); } }\n-    fail;\n+    die!();\n }\n \n // A couple bonus linked failure tests - testing for failure propagation even\n@@ -788,7 +788,7 @@ fn test_spawn_failure_propagate_grandchild() {\n         }\n     }\n     for iter::repeat(16) { task::yield(); }\n-    fail;\n+    die!();\n }\n \n #[test] #[should_fail] #[ignore(cfg(windows))]\n@@ -800,7 +800,7 @@ fn test_spawn_failure_propagate_secondborn() {\n         }\n     }\n     for iter::repeat(16) { task::yield(); }\n-    fail;\n+    die!();\n }\n \n #[test] #[should_fail] #[ignore(cfg(windows))]\n@@ -812,7 +812,7 @@ fn test_spawn_failure_propagate_nephew_or_niece() {\n         }\n     }\n     for iter::repeat(16) { task::yield(); }\n-    fail;\n+    die!();\n }\n \n #[test] #[should_fail] #[ignore(cfg(windows))]\n@@ -824,7 +824,7 @@ fn test_spawn_linked_sup_propagate_sibling() {\n         }\n     }\n     for iter::repeat(16) { task::yield(); }\n-    fail;\n+    die!();\n }\n \n #[test]\n@@ -868,7 +868,7 @@ fn test_future_result() {\n     result = None;\n     do task().future_result(|+r|\n         { result = Some(move r); }).unlinked().spawn {\n-        fail;\n+        die!();\n     }\n     assert option::unwrap(move result).recv() == Failure;\n }\n@@ -884,18 +884,18 @@ fn test_try_success() {\n         ~\"Success!\"\n     } {\n         result::Ok(~\"Success!\") => (),\n-        _ => fail\n+        _ => die!()\n     }\n }\n \n #[test]\n #[ignore(cfg(windows))]\n fn test_try_fail() {\n     match do try {\n-        fail\n+        die!()\n     } {\n         result::Err(()) => (),\n-        result::Ok(()) => fail\n+        result::Ok(()) => die!()\n     }\n }\n \n@@ -1095,7 +1095,7 @@ fn test_unkillable() {\n         yield();\n         // We want to fail after the unkillable task\n         // blocks on recv\n-        fail;\n+        die!();\n     }\n \n     unsafe {\n@@ -1130,7 +1130,7 @@ fn test_unkillable_nested() {\n         yield();\n         // We want to fail after the unkillable task\n         // blocks on recv\n-        fail;\n+        die!();\n     }\n \n     unsafe {"}, {"sha": "e5fa0db63a1c4f65531243d81bcdca91c60aceb5", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -697,7 +697,7 @@ fn test_spawn_raw_unsupervise() {\n         .. default_task_opts()\n     };\n     do spawn_raw(move opts) {\n-        fail;\n+        die!();\n     }\n }\n \n@@ -727,7 +727,7 @@ fn test_spawn_raw_notify_failure() {\n         .. default_task_opts()\n     };\n     do spawn_raw(move opts) {\n-        fail;\n+        die!();\n     }\n     assert notify_po.recv() == Failure;\n }"}, {"sha": "1cd447df005368cf61b88a2fcda472724f99d9c4", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -76,7 +76,7 @@ pub pure fn is_nonnegative(x: T) -> bool { x >= 0 as T }\n pub pure fn range_step(start: T, stop: T, step: T_SIGNED, it: fn(T) -> bool) {\n     let mut i = start;\n     if step == 0 {\n-        fail ~\"range_step called with step == 0\";\n+        die!(~\"range_step called with step == 0\");\n     }\n     if step >= 0 {\n         while i < stop {\n@@ -243,7 +243,7 @@ pub pure fn to_str_bytes<U>(neg: bool, num: T, radix: uint,\n         } else if n <= 15u as T {\n             (n - 10 as T) as u8 + 'a' as u8\n         } else {\n-            fail;\n+            die!();\n         }\n     }\n \n@@ -357,16 +357,16 @@ pub fn test_ranges() {\n \n     // None of the `fail`s should execute.\n     for range(0,0) |_i| {\n-        fail ~\"unreachable\";\n+        die!(~\"unreachable\");\n     }\n     for range_rev(0,0) |_i| {\n-        fail ~\"unreachable\";\n+        die!(~\"unreachable\");\n     }\n     for range_step(10,0,1) |_i| {\n-        fail ~\"unreachable\";\n+        die!(~\"unreachable\");\n     }\n     for range_step(0,1,-10) |_i| {\n-        fail ~\"unreachable\";\n+        die!(~\"unreachable\");\n     }\n }\n "}, {"sha": "8dff492e634cc08379cb07fb0feb9610b9acd02c", "filename": "src/libcore/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -100,7 +100,7 @@ fn choose_weighted_item(v: &[Item]) -> Item {\n \n */\n pub fn unreachable() -> ! {\n-    fail ~\"internal error: entered unreachable code\";\n+    die!(~\"internal error: entered unreachable code\");\n }\n \n mod tests {"}, {"sha": "7846d3d03024041aafbacb18d2c40f65cc3b415f", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -241,7 +241,7 @@ pub pure fn init<T: Copy>(v: &[const T]) -> ~[T] {\n \n /// Returns the last element of the slice `v`, failing if the slice is empty.\n pub pure fn last<T: Copy>(v: &[const T]) -> T {\n-    if len(v) == 0u { fail ~\"last_unsafe: empty vector\" }\n+    if len(v) == 0u { die!(~\"last_unsafe: empty vector\") }\n     v[len(v) - 1u]\n }\n \n@@ -568,7 +568,7 @@ pub fn consume_mut<T>(v: ~[mut T], f: fn(uint, v: T)) {\n pub fn pop<T>(v: &mut ~[T]) -> T {\n     let ln = v.len();\n     if ln == 0 {\n-        fail ~\"sorry, cannot vec::pop an empty vector\"\n+        die!(~\"sorry, cannot vec::pop an empty vector\")\n     }\n     let valptr = ptr::to_mut_unsafe_ptr(&mut v[ln - 1u]);\n     unsafe {\n@@ -589,7 +589,7 @@ pub fn pop<T>(v: &mut ~[T]) -> T {\n pub fn swap_remove<T>(v: &mut ~[T], index: uint) -> T {\n     let ln = v.len();\n     if index >= ln {\n-        fail fmt!(\"vec::swap_remove - index %u >= length %u\", index, ln);\n+        die!(fmt!(\"vec::swap_remove - index %u >= length %u\", index, ln));\n     }\n     if index < ln - 1 {\n         v[index] <-> v[ln - 1];\n@@ -831,7 +831,7 @@ pub pure fn flat_map<T, U>(v: &[T], f: fn(t: &T) -> ~[U]) -> ~[U] {\n pub pure fn map2<T: Copy, U: Copy, V>(v0: &[T], v1: &[U],\n                                   f: fn(t: &T, v: &U) -> V) -> ~[V] {\n     let v0_len = len(v0);\n-    if v0_len != len(v1) { fail; }\n+    if v0_len != len(v1) { die!(); }\n     let mut u: ~[V] = ~[];\n     let mut i = 0u;\n     while i < v0_len {\n@@ -2859,7 +2859,7 @@ mod tests {\n     #[test]\n     fn test_each_empty() {\n         for each::<int>(~[]) |_v| {\n-            fail; // should never be executed\n+            die!(); // should never be executed\n         }\n     }\n \n@@ -2886,7 +2886,7 @@ mod tests {\n     #[test]\n     fn test_reach_empty() {\n         for rev_each::<int>(~[]) |_v| {\n-            fail; // should never execute\n+            die!(); // should never execute\n         }\n     }\n \n@@ -3388,7 +3388,7 @@ mod tests {\n     #[should_fail]\n     fn test_from_fn_fail() {\n         do from_fn(100) |v| {\n-            if v == 50 { fail }\n+            if v == 50 { die!() }\n             (~0, @0)\n         };\n     }\n@@ -3402,7 +3402,7 @@ mod tests {\n             push((~0, @0));\n             push((~0, @0));\n             push((~0, @0));\n-            fail;\n+            die!();\n         };\n     }\n \n@@ -3415,7 +3415,7 @@ mod tests {\n         let mut i = 0;\n         do split(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 1;\n \n@@ -3432,7 +3432,7 @@ mod tests {\n         let mut i = 0;\n         do split(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 1;\n \n@@ -3449,7 +3449,7 @@ mod tests {\n         let mut i = 0;\n         do splitn(v, 100) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 1;\n \n@@ -3466,7 +3466,7 @@ mod tests {\n         let mut i = 0;\n         do split(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 1;\n \n@@ -3483,7 +3483,7 @@ mod tests {\n         let mut i = 0;\n         do rsplit(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 1;\n \n@@ -3500,7 +3500,7 @@ mod tests {\n         let mut i = 0;\n         do rsplit(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 1;\n \n@@ -3517,7 +3517,7 @@ mod tests {\n         let mut i = 0;\n         do rsplitn(v, 100) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 1;\n \n@@ -3534,7 +3534,7 @@ mod tests {\n         let mut i = 0;\n         do rsplitn(v, 100) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 1;\n \n@@ -3550,7 +3550,7 @@ mod tests {\n         let mut i = 0;\n         do consume(v) |_i, _elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 1;\n         };\n@@ -3564,7 +3564,7 @@ mod tests {\n         let mut i = 0;\n         do consume_mut(v) |_i, _elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 1;\n         };\n@@ -3578,7 +3578,7 @@ mod tests {\n         let mut v = ~[];\n         do v.grow_fn(100) |i| {\n             if i == 50 {\n-                fail\n+                die!()\n             }\n             (~0, @0)\n         }\n@@ -3592,7 +3592,7 @@ mod tests {\n         let mut i = 0;\n         do map(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             ~[(~0, @0)]\n@@ -3607,7 +3607,7 @@ mod tests {\n         let mut i = 0;\n         do map_consume(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             ~[(~0, @0)]\n@@ -3622,7 +3622,7 @@ mod tests {\n         let mut i = 0;\n         do mapi(v) |_i, _elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             ~[(~0, @0)]\n@@ -3637,7 +3637,7 @@ mod tests {\n         let mut i = 0;\n         do map(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             ~[(~0, @0)]\n@@ -3653,7 +3653,7 @@ mod tests {\n         let mut i = 0;\n         do map2(v, v) |_elt1, _elt2| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             ~[(~0, @0)]\n@@ -3669,7 +3669,7 @@ mod tests {\n         let mut i = 0;\n         do filter_map(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             Some((~0, @0))\n@@ -3685,7 +3685,7 @@ mod tests {\n         let mut i = 0;\n         do v.filtered |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             true\n@@ -3701,7 +3701,7 @@ mod tests {\n         let mut i = 0;\n         do foldl((~0, @0), v) |_a, _b| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             (~0, @0)\n@@ -3717,7 +3717,7 @@ mod tests {\n         let mut i = 0;\n         do foldr(v, (~0, @0)) |_a, _b| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             (~0, @0)\n@@ -3732,7 +3732,7 @@ mod tests {\n         let mut i = 0;\n         do any(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             false\n@@ -3747,7 +3747,7 @@ mod tests {\n         let mut i = 0;\n         do any(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             false\n@@ -3762,7 +3762,7 @@ mod tests {\n         let mut i = 0;\n         do all(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             true\n@@ -3777,7 +3777,7 @@ mod tests {\n         let mut i = 0;\n         do alli(v) |_i, _elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             true\n@@ -3792,7 +3792,7 @@ mod tests {\n         let mut i = 0;\n         do all2(v, v) |_elt1, _elt2| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             true\n@@ -3808,7 +3808,7 @@ mod tests {\n         let mut i = 0;\n         do find(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             false\n@@ -3823,7 +3823,7 @@ mod tests {\n         let mut i = 0;\n         do position(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             false\n@@ -3838,7 +3838,7 @@ mod tests {\n         let mut i = 0;\n         do rposition(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             false\n@@ -3853,7 +3853,7 @@ mod tests {\n         let mut i = 0;\n         do each(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             false\n@@ -3868,7 +3868,7 @@ mod tests {\n         let mut i = 0;\n         do eachi(v) |_i, _elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n             false\n@@ -3884,7 +3884,7 @@ mod tests {\n         let mut i = 0;\n         for each_permutation(v) |_elt| {\n             if i == 2 {\n-                fail\n+                die!()\n             }\n             i += 0;\n         }\n@@ -3896,7 +3896,7 @@ mod tests {\n     fn test_as_imm_buf_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n         do as_imm_buf(v) |_buf, _i| {\n-            fail\n+            die!()\n         }\n     }\n \n@@ -3906,7 +3906,7 @@ mod tests {\n     fn test_as_const_buf_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n         do as_const_buf(v) |_buf, _i| {\n-            fail\n+            die!()\n         }\n     }\n \n@@ -3916,7 +3916,7 @@ mod tests {\n     fn test_as_mut_buf_fail() {\n         let v = [mut (~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n         do as_mut_buf(v) |_buf, _i| {\n-            fail\n+            die!()\n         }\n     }\n "}, {"sha": "8b1ac845f4f7dfc1194e3d5c3788d3d7a93ae03e", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -573,7 +573,7 @@ pub fn check_roundtrip_convergence(code: @~str, maxIters: uint) {\n         run::run_program(~\"diff\",\n                          ~[~\"-w\", ~\"-u\", ~\"round-trip-a.rs\",\n                           ~\"round-trip-b.rs\"]);\n-        fail ~\"Mismatch\";\n+        die!(~\"Mismatch\");\n     }\n }\n "}, {"sha": "889c924b7fd0608db9f88f32d0d2e89b65d2e939", "filename": "src/libfuzzer/rand_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibfuzzer%2Frand_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibfuzzer%2Frand_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Frand_util.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -42,7 +42,7 @@ fn shuffled<T: copy>(r : rand::rng, v : ~[T]) -> ~[T] {\n }\n \n // sample from a population without replacement\n-//fn sample<T>(r : rand::rng, pop : ~[T], k : uint) -> ~[T] { fail }\n+//fn sample<T>(r : rand::rng, pop : ~[T], k : uint) -> ~[T] { die!() }\n \n // Two ways to make a weighted choice.\n // * weighted_choice is O(number of choices) time"}, {"sha": "2a07de5caeaaa41bd6d1753fb85e1ec5b504ba39", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -509,7 +509,7 @@ pub fn build_link_meta(sess: Session, c: &ast::crate, output: &Path,\n               }\n               ast::meta_list(_, _) => {\n                 // FIXME (#607): Implement this\n-                fail ~\"unimplemented meta_item variant\";\n+                die!(~\"unimplemented meta_item variant\");\n               }\n             }\n         }"}, {"sha": "d8d412eaedc73620ef3da68c90811dfd7946b378", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -179,7 +179,7 @@ pub fn get_install_prefix_rpath(target_triple: &str) -> Path {\n     let install_prefix = env!(\"CFG_PREFIX\");\n \n     if install_prefix == ~\"\" {\n-        fail ~\"rustc compiled without CFG_PREFIX environment variable\";\n+        die!(~\"rustc compiled without CFG_PREFIX environment variable\");\n     }\n \n     let tlib = filesearch::relative_target_lib_path(target_triple);"}, {"sha": "7f7c01149888bd7f52564a5d885820691808765d", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -506,7 +506,7 @@ pub fn host_triple() -> ~str {\n     return if ht != ~\"\" {\n             ht\n         } else {\n-            fail ~\"rustc built without CFG_HOST_TRIPLE\"\n+            die!(~\"rustc built without CFG_HOST_TRIPLE\")\n         };\n }\n \n@@ -846,7 +846,7 @@ pub fn build_output_filenames(input: input,\n \n pub fn early_error(emitter: diagnostic::emitter, msg: ~str) -> ! {\n     emitter(None, msg, diagnostic::fatal);\n-    fail;\n+    die!();\n }\n \n pub fn list_metadata(sess: Session, path: &Path, out: io::Writer) {\n@@ -874,8 +874,8 @@ pub mod test {\n         let matches =\n             &match getopts(~[~\"--test\"], optgroups()) {\n               Ok(copy m) => m,\n-              Err(copy f) => fail ~\"test_switch_implies_cfg_test: \" +\n-                             getopts::fail_str(f)\n+              Err(copy f) => die!(~\"test_switch_implies_cfg_test: \" +\n+                             getopts::fail_str(f))\n             };\n         let sessopts = build_session_options(\n             ~\"rustc\", matches, diagnostic::emit);\n@@ -892,8 +892,8 @@ pub mod test {\n             &match getopts(~[~\"--test\", ~\"--cfg=test\"], optgroups()) {\n               Ok(copy m) => m,\n               Err(copy f) => {\n-                fail ~\"test_switch_implies_cfg_test_unless_cfg_test: \" +\n-                    getopts::fail_str(f);\n+                die!(~\"test_switch_implies_cfg_test_unless_cfg_test: \" +\n+                    getopts::fail_str(f));\n               }\n             };\n         let sessopts = build_session_options("}, {"sha": "8ba15bf3930ec7c328f239a2d3c65bd5653ae906", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -1451,7 +1451,7 @@ pub fn float_width(llt: TypeRef) -> uint {\n               2 => 64u,\n               3 => 80u,\n               4 | 5 => 128u,\n-              _ => fail ~\"llvm_float_width called on a non-float type\"\n+              _ => die!(~\"llvm_float_width called on a non-float type\")\n             };\n     }\n }"}, {"sha": "3bfeddb858f3f21b9a3614937ce87830b6df9621", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -91,7 +91,7 @@ fn find_item(item_id: int, items: ebml::Doc) -> ebml::Doc {\n fn lookup_item(item_id: int, data: @~[u8]) -> ebml::Doc {\n     let items = reader::get_doc(reader::Doc(data), tag_items);\n     match maybe_find_item(item_id, items) {\n-       None => fail(fmt!(\"lookup_item: id not found: %d\", item_id)),\n+       None => die!(fmt!(\"lookup_item: id not found: %d\", item_id)),\n        Some(d) => d\n     }\n }\n@@ -149,7 +149,7 @@ fn item_family(item: ebml::Doc) -> Family {\n       'g' => PublicField,\n       'j' => PrivateField,\n       'N' => InheritedField,\n-       c => fail (fmt!(\"unexpected family char: %c\", c))\n+       c => die!(fmt!(\"unexpected family char: %c\", c))\n     }\n }\n \n@@ -396,7 +396,7 @@ pub fn struct_dtor(cdata: cmd, id: ast::node_id) -> Option<ast::def_id> {\n     let mut found = None;\n     let cls_items = match maybe_find_item(id, items) {\n             Some(it) => it,\n-            None     => fail (fmt!(\"struct_dtor: class id not found \\\n+            None     => die!(fmt!(\"struct_dtor: class id not found \\\n               when looking up dtor for %d\", id))\n     };\n     for reader::tagged_docs(cls_items, tag_item_dtor) |doc| {\n@@ -421,8 +421,8 @@ pub enum def_like {\n fn def_like_to_def(def_like: def_like) -> ast::def {\n     match def_like {\n         dl_def(def) => return def,\n-        dl_impl(*) => fail ~\"found impl in def_like_to_def\",\n-        dl_field => fail ~\"found field in def_like_to_def\"\n+        dl_impl(*) => die!(~\"found impl in def_like_to_def\"),\n+        dl_field => die!(~\"found field in def_like_to_def\")\n     }\n }\n \n@@ -625,7 +625,7 @@ fn get_self_ty(item: ebml::Doc) -> ast::self_ty_ {\n             'm' => { ast::m_mutbl }\n             'c' => { ast::m_const }\n             _ => {\n-                fail fmt!(\"unknown mutability character: `%c`\", ch as char)\n+                die!(fmt!(\"unknown mutability character: `%c`\", ch as char))\n             }\n         }\n     }\n@@ -642,7 +642,7 @@ fn get_self_ty(item: ebml::Doc) -> ast::self_ty_ {\n         '~' => { return ast::sty_uniq(get_mutability(string[1])); }\n         '&' => { return ast::sty_region(get_mutability(string[1])); }\n         _ => {\n-            fail fmt!(\"unknown self type code: `%c`\", self_ty_kind as char);\n+            die!(fmt!(\"unknown self type code: `%c`\", self_ty_kind as char));\n         }\n     }\n }\n@@ -832,7 +832,7 @@ pub fn get_static_methods_if_impl(intr: @ident_interner,\n                     StaticMethod => purity = ast::impure_fn,\n                     UnsafeStaticMethod => purity = ast::unsafe_fn,\n                     PureStaticMethod => purity = ast::pure_fn,\n-                    _ => fail\n+                    _ => die!()\n                 }\n \n                 static_impl_methods.push(StaticMethodInfo {\n@@ -865,7 +865,7 @@ pure fn family_to_visibility(family: Family) -> ast::visibility {\n       PublicField => ast::public,\n       PrivateField => ast::private,\n       InheritedField => ast::inherited,\n-      _ => fail\n+      _ => die!()\n     }\n }\n \n@@ -915,7 +915,7 @@ fn describe_def(items: ebml::Doc, id: ast::def_id) -> ~str {\n     if id.crate != ast::local_crate { return ~\"external\"; }\n     let it = match maybe_find_item(id.node, items) {\n         Some(it) => it,\n-        None => fail (fmt!(\"describe_def: item not found %?\", id))\n+        None => die!(fmt!(\"describe_def: item not found %?\", id))\n     };\n     return item_family_to_str(item_family(it));\n }\n@@ -1100,7 +1100,7 @@ pub fn translate_def_id(cdata: cmd, did: ast::def_id) -> ast::def_id {\n \n     match cdata.cnum_map.find(did.crate) {\n       option::Some(n) => ast::def_id { crate: n, node: did.node },\n-      option::None => fail ~\"didn't find a crate in the cnum_map\"\n+      option::None => die!(~\"didn't find a crate in the cnum_map\")\n     }\n }\n "}, {"sha": "0f61d12d7c8464a4db3e03275ea39ddbe13e0911", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -527,7 +527,7 @@ fn purity_static_method_family(p: purity) -> char {\n       unsafe_fn => 'U',\n       pure_fn => 'P',\n       impure_fn => 'F',\n-      _ => fail ~\"extern fn can't be static\"\n+      _ => die!(~\"extern fn can't be static\")\n     }\n }\n \n@@ -829,7 +829,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n                                    true, item.id, *m, /*bad*/copy m.tps);\n         }\n       }\n-      item_mac(*) => fail ~\"item macros unimplemented\"\n+      item_mac(*) => die!(~\"item macros unimplemented\")\n     }\n }\n "}, {"sha": "dfccaf77dfd320974d3fa0aff186077daf72d0d3", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -108,7 +108,7 @@ fn make_target_lib_path(sysroot: &Path,\n fn get_or_default_sysroot() -> Path {\n     match os::self_exe_path() {\n       option::Some(ref p) => (*p).pop(),\n-      option::None => fail ~\"can't determine value for sysroot\"\n+      option::None => die!(~\"can't determine value for sysroot\")\n     }\n }\n \n@@ -176,7 +176,7 @@ fn get_cargo_lib_path_nearest() -> Result<Path, ~str> {\n pub fn libdir() -> ~str {\n    let libdir = env!(\"CFG_LIBDIR\");\n    if str::is_empty(libdir) {\n-      fail ~\"rustc compiled without CFG_LIBDIR environment variable\";\n+      die!(~\"rustc compiled without CFG_LIBDIR environment variable\");\n    }\n    libdir\n }"}, {"sha": "c4cb154e21f0d8a580b2ac0d1c956952d04d8b14", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -150,10 +150,10 @@ pub fn crate_name_from_metas(+metas: ~[@ast::meta_item]) -> ~str {\n           Some(ref n) => (/*bad*/copy *n),\n           // FIXME (#2406): Probably want a warning here since the user\n           // is using the wrong type of meta item.\n-          _ => fail\n+          _ => die!()\n         }\n       }\n-      None => fail ~\"expected to find the crate name\"\n+      None => die!(~\"expected to find the crate name\")\n     }\n }\n "}, {"sha": "797d6d199a0a8f1c279cfb1d9c64286831f51499", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -135,7 +135,7 @@ fn parse_proto(st: @pstate) -> ast::Proto {\n         '@' => ast::ProtoBox,\n         '~' => ast::ProtoUniq,\n         '&' => ast::ProtoBorrowed,\n-        _ => fail ~\"parse_proto(): bad input\"\n+        _ => die!(~\"parse_proto(): bad input\")\n     }\n }\n \n@@ -153,7 +153,7 @@ fn parse_vstore(st: @pstate) -> ty::vstore {\n       '~' => ty::vstore_uniq,\n       '@' => ty::vstore_box,\n       '&' => ty::vstore_slice(parse_region(st)),\n-      _ => fail ~\"parse_vstore: bad input\"\n+      _ => die!(~\"parse_vstore: bad input\")\n     }\n }\n \n@@ -188,7 +188,7 @@ fn parse_bound_region(st: @pstate) -> ty::bound_region {\n         assert next(st) == '|';\n         ty::br_cap_avoid(id, @parse_bound_region(st))\n       },\n-      _ => fail ~\"parse_bound_region: bad input\"\n+      _ => die!(~\"parse_bound_region: bad input\")\n     }\n }\n \n@@ -213,15 +213,15 @@ fn parse_region(st: @pstate) -> ty::Region {\n       't' => {\n         ty::re_static\n       }\n-      _ => fail ~\"parse_region: bad input\"\n+      _ => die!(~\"parse_region: bad input\")\n     }\n }\n \n fn parse_opt<T>(st: @pstate, f: fn() -> T) -> Option<T> {\n     match next(st) {\n       'n' => None,\n       's' => Some(f()),\n-      _ => fail ~\"parse_opt: bad input\"\n+      _ => die!(~\"parse_opt: bad input\")\n     }\n }\n \n@@ -254,7 +254,7 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n           'D' => return ty::mk_mach_int(st.tcx, ast::ty_i64),\n           'f' => return ty::mk_mach_float(st.tcx, ast::ty_f32),\n           'F' => return ty::mk_mach_float(st.tcx, ast::ty_f64),\n-          _ => fail ~\"parse_ty: bad numeric type\"\n+          _ => die!(~\"parse_ty: bad numeric type\")\n         }\n       }\n       'c' => return ty::mk_char(st.tcx),\n@@ -353,7 +353,7 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n           assert (next(st) == ']');\n           return ty::mk_struct(st.tcx, did, substs);\n       }\n-      c => { error!(\"unexpected char in type string: %c\", c); fail;}\n+      c => { error!(\"unexpected char in type string: %c\", c); die!();}\n     }\n }\n \n@@ -405,15 +405,15 @@ fn parse_purity(c: char) -> purity {\n       'p' => pure_fn,\n       'i' => impure_fn,\n       'c' => extern_fn,\n-      _ => fail ~\"parse_purity: bad purity\"\n+      _ => die!(~\"parse_purity: bad purity\")\n     }\n }\n \n fn parse_onceness(c: char) -> ast::Onceness {\n     match c {\n         'o' => ast::Once,\n         'm' => ast::Many,\n-        _ => fail ~\"parse_onceness: bad onceness\"\n+        _ => die!(~\"parse_onceness: bad onceness\")\n     }\n }\n \n@@ -426,7 +426,7 @@ fn parse_mode(st: @pstate) -> ast::mode {\n         '+' => ast::by_copy,\n         '=' => ast::by_ref,\n         '#' => ast::by_val,\n-        _ => fail ~\"bad mode\"\n+        _ => die!(~\"bad mode\")\n     });\n     return m;\n }\n@@ -464,20 +464,20 @@ pub fn parse_def_id(buf: &[u8]) -> ast::def_id {\n     while colon_idx < len && buf[colon_idx] != ':' as u8 { colon_idx += 1u; }\n     if colon_idx == len {\n         error!(\"didn't find ':' when parsing def id\");\n-        fail;\n+        die!();\n     }\n \n     let crate_part = vec::view(buf, 0u, colon_idx);\n     let def_part = vec::view(buf, colon_idx + 1u, len);\n \n     let crate_num = match uint::parse_bytes(crate_part, 10u) {\n        Some(cn) => cn as int,\n-       None => fail (fmt!(\"internal error: parse_def_id: crate number \\\n+       None => die!(fmt!(\"internal error: parse_def_id: crate number \\\n                                expected, but found %?\", crate_part))\n     };\n     let def_num = match uint::parse_bytes(def_part, 10u) {\n        Some(dn) => dn as int,\n-       None => fail (fmt!(\"internal error: parse_def_id: id expected, but \\\n+       None => die!(fmt!(\"internal error: parse_def_id: id expected, but \\\n                                found %?\", def_part))\n     };\n     ast::def_id { crate: crate_num, node: def_num }\n@@ -500,7 +500,7 @@ fn parse_bounds(st: @pstate, conv: conv_did) -> @~[ty::param_bound] {\n           'O' => ty::bound_durable,\n           'I' => ty::bound_trait(parse_ty(st, conv)),\n           '.' => break,\n-          _ => fail ~\"parse_bounds: bad bounds\"\n+          _ => die!(~\"parse_bounds: bad bounds\")\n         });\n     }\n     @bounds"}, {"sha": "69d69537f2ad913ebb01a190a77db6f87bb57a79", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -321,7 +321,7 @@ fn enc_sty(w: io::Writer, cx: @ctxt, +st: ty::sty) {\n           debug!(\"~~~~ %s\", ~\"]\");\n           w.write_char(']');\n       }\n-      ty::ty_err => fail ~\"Shouldn't encode error type\"\n+      ty::ty_err => die!(~\"Shouldn't encode error type\")\n     }\n }\n "}, {"sha": "878b9b6fdc93c3965a182a96ce8817249cdff1c8", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -304,7 +304,7 @@ fn simplify_ast(ii: ast::inlined_item) -> ast::inlined_item {\n                                              span: _}, _) => true,\n               ast::stmt_decl(@ast::spanned { node: ast::decl_item(_),\n                                              span: _}, _) => false,\n-              ast::stmt_mac(*) => fail ~\"unexpanded macro in astencode\"\n+              ast::stmt_mac(*) => die!(~\"unexpanded macro in astencode\")\n             }\n         };\n         let blk_sans_items = ast::blk_ {\n@@ -717,7 +717,7 @@ impl reader::Decoder: vtable_decoder_helpers {\n                     )\n                   }\n                   // hard to avoid - user input\n-                  _ => fail ~\"bad enum variant\"\n+                  _ => die!(~\"bad enum variant\")\n                 }\n             }\n         }\n@@ -1288,6 +1288,6 @@ fn test_simplification() {\n         assert pprust::item_to_str(item_out, ext_cx.parse_sess().interner)\n             == pprust::item_to_str(item_exp, ext_cx.parse_sess().interner);\n       }\n-      _ => fail\n+      _ => die!()\n     }\n }"}, {"sha": "4d97be5c9801f0db4b5799d114313cbd7f4ebcde", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -249,7 +249,7 @@ pub fn check_item_recursion(sess: Session,\n                   ast_map::node_item(it, _) => {\n                     (v.visit_item)(it, env, v);\n                   }\n-                  _ => fail ~\"const not bound to an item\"\n+                  _ => die!(~\"const not bound to an item\")\n                 }\n               }\n               _ => ()"}, {"sha": "5bd1fc223c4e09cf49f1adb393903c891e970d82", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -148,11 +148,11 @@ pub fn check_exhaustive(cx: @MatchCheckCtxt, sp: span, pats: ~[@pat]) {\n           }\n           ty::ty_enum(id, _) => {\n               let vid = match (*ctor) { variant(id) => id,\n-              _ => fail ~\"check_exhaustive: non-variant ctor\" };\n+              _ => die!(~\"check_exhaustive: non-variant ctor\") };\n             match vec::find(*ty::enum_variants(cx.tcx, id),\n                                 |v| v.id == vid) {\n                 Some(v) => Some(cx.tcx.sess.str_of(v.name)),\n-              None => fail ~\"check_exhaustive: bad variant in ctor\"\n+              None => die!(~\"check_exhaustive: bad variant in ctor\")\n             }\n           }\n           ty::ty_unboxed_vec(*) | ty::ty_evec(*) => {\n@@ -367,7 +367,7 @@ pub fn missing_ctor(cx: @MatchCheckCtxt,\n                     return Some(variant(v.id));\n                 }\n             }\n-            fail;\n+            die!();\n         } else { None }\n       }\n       ty::ty_nil => None,\n@@ -378,7 +378,7 @@ pub fn missing_ctor(cx: @MatchCheckCtxt,\n               None => (),\n               Some(val(const_bool(true))) => true_found = true,\n               Some(val(const_bool(false))) => false_found = true,\n-              _ => fail ~\"impossible case\"\n+              _ => die!(~\"impossible case\")\n             }\n         }\n         if true_found && false_found { None }\n@@ -446,10 +446,10 @@ pub fn ctor_arity(cx: @MatchCheckCtxt, ctor: ctor, ty: ty::t) -> uint {\n       ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_rptr(*) => 1u,\n       ty::ty_enum(eid, _) => {\n           let id = match ctor { variant(id) => id,\n-          _ => fail ~\"impossible case\" };\n+          _ => die!(~\"impossible case\") };\n         match vec::find(*ty::enum_variants(cx.tcx, eid), |v| v.id == id ) {\n             Some(v) => v.args.len(),\n-            None => fail ~\"impossible case\"\n+            None => die!(~\"impossible case\")\n         }\n       }\n       ty::ty_struct(cid, _) => ty::lookup_struct_fields(cx.tcx, cid).len(),\n@@ -497,7 +497,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                                     compare_const_vals((*c_hi), e_v) <= 0\n                             }\n                             single => true,\n-                            _ => fail ~\"type error\"\n+                            _ => die!(~\"type error\")\n                         };\n                         if match_ { Some(vec::tail(r)) } else { None }\n                     }\n@@ -530,7 +530,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n             pat_rec(ref flds, _) => {\n                 let ty_flds = match /*bad*/copy ty::get(left_ty).sty {\n                     ty::ty_rec(flds) => flds,\n-                    _ => fail ~\"bad type for pat_rec\"\n+                    _ => die!(~\"bad type for pat_rec\")\n                 };\n                 let args = vec::map(ty_flds, |ty_fld| {\n                     match flds.find(|f| f.ident == ty_fld.ident) {\n@@ -596,7 +596,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             compare_const_vals((*c_hi), e_v) <= 0\n                     }\n                     single => true,\n-                    _ => fail ~\"type error\"\n+                    _ => die!(~\"type error\")\n                 };\n                 if match_ { Some(vec::tail(r)) } else { None }\n             }\n@@ -606,7 +606,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                     range(ref lo, ref hi) =>\n                         ((/*bad*/copy *lo), (/*bad*/copy *hi)),\n                     single => return Some(vec::tail(r)),\n-                    _ => fail ~\"type error\"\n+                    _ => die!(~\"type error\")\n                 };\n                 let v_lo = eval_const_expr(cx.tcx, lo),\n                 v_hi = eval_const_expr(cx.tcx, hi);"}, {"sha": "f917964d2345f86a46ee9e6706c49b23cd10f3b4", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -233,7 +233,7 @@ pub enum const_val {\n pub fn eval_const_expr(tcx: middle::ty::ctxt, e: @expr) -> const_val {\n     match eval_const_expr_partial(tcx, e) {\n         Ok(ref r) => (/*bad*/copy *r),\n-        Err(ref s) => fail (/*bad*/copy *s)\n+        Err(ref s) => die!(/*bad*/copy *s)\n     }\n }\n \n@@ -459,7 +459,7 @@ pub fn compare_const_vals(a: const_val, b: const_val) -> int {\n             1\n         }\n     }\n-    _ => fail ~\"compare_const_vals: ill-typed comparison\"\n+    _ => die!(~\"compare_const_vals: ill-typed comparison\")\n   }\n }\n "}, {"sha": "724f70b53d6c500656027bb45b1926cf45e7cbb0", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -59,7 +59,7 @@ fn collect_freevars(def_map: resolve::DefMap, blk: ast::blk)\n               ast::expr_path(*) => {\n                   let mut i = 0;\n                   match def_map.find(expr.id) {\n-                    None => fail ~\"path not found\",\n+                    None => die!(~\"path not found\"),\n                     Some(df) => {\n                       let mut def = df;\n                       while i < depth {\n@@ -119,7 +119,7 @@ pub fn annotate_freevars(def_map: resolve::DefMap, crate: @ast::crate) ->\n \n pub fn get_freevars(tcx: ty::ctxt, fid: ast::node_id) -> freevar_info {\n     match tcx.freevars.find(fid) {\n-      None => fail ~\"get_freevars: \" + int::str(fid) + ~\" has no freevars\",\n+      None => die!(~\"get_freevars: \" + int::str(fid) + ~\" has no freevars\"),\n       Some(d) => return d\n     }\n }"}, {"sha": "227f026bc9221525f04b3315bdb14382b5e84a9b", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -213,11 +213,11 @@ pub fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n         };\n         if vec::len(*ts) != vec::len(*bounds) {\n             // Fail earlier to make debugging easier\n-            fail fmt!(\"internal error: in kind::check_expr, length \\\n+            die!(fmt!(\"internal error: in kind::check_expr, length \\\n                        mismatch between actual and declared bounds: actual = \\\n                         %s (%u tys), declared = %? (%u tys)\",\n                       tys_to_str(cx.tcx, *ts), ts.len(),\n-                      *bounds, (*bounds).len());\n+                      *bounds, (*bounds).len()));\n         }\n         for vec::each2(*ts, *bounds) |ty, bound| {\n             check_bounds(cx, type_parameter_id, e.span, *ty, *bound)"}, {"sha": "9017b1e153769ec77d07d4bc92888fba13717900", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -481,7 +481,7 @@ fn check_item_type_limits(cx: ty::ctxt, it: @ast::item) {\n             ast::gt => v >= min,\n             ast::ge => v > min,\n             ast::eq | ast::ne => v >= min && v <= max,\n-            _ => fail\n+            _ => die!()\n         }\n     }\n \n@@ -540,7 +540,7 @@ fn check_item_type_limits(cx: ty::ctxt, it: @ast::item) {\n                         ast::lit_int_unsuffixed(v) => v,\n                         _ => return true\n                     },\n-                    _ => fail\n+                    _ => die!()\n                 };\n                 is_valid(norm_binop, lit_val, min, max)\n             }\n@@ -553,7 +553,7 @@ fn check_item_type_limits(cx: ty::ctxt, it: @ast::item) {\n                         ast::lit_int_unsuffixed(v) => v as u64,\n                         _ => return true\n                     },\n-                    _ => fail\n+                    _ => die!()\n                 };\n                 is_valid(norm_binop, lit_val, min, max)\n             }\n@@ -954,7 +954,7 @@ fn check_fn_deprecated_modes(tcx: ty::ctxt, fn_ty: ty::t, decl: ast::fn_decl,\n                                        ty_to_str(tcx, arg_ty.ty),\n                                        mode_to_str(arg_ast.mode));\n                                 error!(\"%?\",arg_ast.ty.node);\n-                                fail\n+                                die!()\n                             }\n                         };\n                     }"}, {"sha": "d4e873eb63c5520841b322ffdced268120192e7f", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -322,7 +322,7 @@ pub fn namespace_for_duplicate_checking_mode(mode: DuplicateCheckingMode)\n         ForbidDuplicateModules | ForbidDuplicateTypes |\n         ForbidDuplicateTypesAndValues => TypeNS,\n         ForbidDuplicateValues => ValueNS,\n-        OverwriteDuplicates => fail ~\"OverwriteDuplicates has no namespace\"\n+        OverwriteDuplicates => die!(~\"OverwriteDuplicates has no namespace\")\n     }\n }\n \n@@ -604,8 +604,8 @@ pub impl NameBindings {\n     fn get_module() -> @Module {\n         match self.get_module_if_available() {\n             None => {\n-                fail ~\"get_module called on a node with no module \\\n-                       definition!\"\n+                die!(~\"get_module called on a node with no module \\\n+                       definition!\")\n             }\n             Some(module_def) => module_def\n         }\n@@ -1326,7 +1326,7 @@ pub impl Resolver {\n             }\n \n             item_mac(*) => {\n-                fail ~\"item macros unimplemented\"\n+                die!(~\"item macros unimplemented\")\n             }\n         }\n     }\n@@ -1579,7 +1579,7 @@ pub impl Resolver {\n                     match existing_module.parent_link {\n                       NoParentLink |\n                       BlockParentLink(*) => {\n-                        fail ~\"can't happen\";\n+                        die!(~\"can't happen\");\n                       }\n                       ModuleParentLink(parent_module, ident) => {\n                         let name_bindings = parent_module.children.get(ident);\n@@ -1645,7 +1645,7 @@ pub impl Resolver {\n           def_prim_ty(*) | def_ty_param(*) | def_binding(*) |\n           def_use(*) | def_upvar(*) | def_region(*) |\n           def_typaram_binder(*) | def_label(*) | def_self_ty(*) => {\n-            fail fmt!(\"didn't expect `%?`\", def);\n+            die!(fmt!(\"didn't expect `%?`\", def));\n           }\n         }\n     }\n@@ -2221,7 +2221,7 @@ pub impl Resolver {\n             }\n             UnboundResult => { /* Continue. */ }\n             UnknownResult => {\n-                fail ~\"value result should be known at this point\";\n+                die!(~\"value result should be known at this point\");\n             }\n         }\n         match type_result {\n@@ -2231,7 +2231,7 @@ pub impl Resolver {\n             }\n             UnboundResult => { /* Continue. */ }\n             UnknownResult => {\n-                fail ~\"type result should be known at this point\";\n+                die!(~\"type result should be known at this point\");\n             }\n         }\n \n@@ -2384,7 +2384,7 @@ pub impl Resolver {\n                         binding\");\n             }\n             UnknownResult => {\n-                fail ~\"module result should be known at this point\";\n+                die!(~\"module result should be known at this point\");\n             }\n         }\n \n@@ -2996,7 +2996,7 @@ pub impl Resolver {\n                 allowable_namespaces = namespaces;\n             }\n             GlobImport => {\n-                fail ~\"found `import *`, which is invalid\";\n+                die!(~\"found `import *`, which is invalid\");\n             }\n         }\n \n@@ -3116,9 +3116,9 @@ pub impl Resolver {\n         // Otherwise, proceed and write in the bindings.\n         match module_.import_resolutions.find(target_name) {\n             None => {\n-                fail ~\"(resolving one-level renaming import) reduced graph \\\n+                die!(~\"(resolving one-level renaming import) reduced graph \\\n                       construction or glob importing should have created the \\\n-                      import resolution name by now\";\n+                      import resolution name by now\");\n             }\n             Some(import_resolution) => {\n                 debug!(\"(resolving one-level renaming import) writing module \\\n@@ -3732,7 +3732,7 @@ pub impl Resolver {\n             }\n \n           item_mac(*) => {\n-            fail ~\"item macros unimplemented\"\n+            die!(~\"item macros unimplemented\")\n           }\n         }\n \n@@ -4430,8 +4430,8 @@ pub impl Resolver {\n             Success(target) => {\n                 match target.bindings.value_def {\n                     None => {\n-                        fail ~\"resolved name in the value namespace to a set \\\n-                              of name bindings with no def?!\";\n+                        die!(~\"resolved name in the value namespace to a set \\\n+                              of name bindings with no def?!\");\n                     }\n                     Some(def) => {\n                         match def.def {\n@@ -4450,7 +4450,7 @@ pub impl Resolver {\n             }\n \n             Indeterminate => {\n-                fail ~\"unexpected indeterminate result\";\n+                die!(~\"unexpected indeterminate result\");\n             }\n \n             Failed => {\n@@ -4611,7 +4611,7 @@ pub impl Resolver {\n             }\n \n             Indeterminate => {\n-                fail ~\"indeterminate unexpected\";\n+                die!(~\"indeterminate unexpected\");\n             }\n \n             Success(resulting_module) => {\n@@ -4658,7 +4658,7 @@ pub impl Resolver {\n             }\n \n             Indeterminate => {\n-                fail ~\"indeterminate unexpected\";\n+                die!(~\"indeterminate unexpected\");\n             }\n \n             Success(resulting_module) => {\n@@ -4736,7 +4736,7 @@ pub impl Resolver {\n                 }\n             }\n             Indeterminate => {\n-                fail ~\"unexpected indeterminate result\";\n+                die!(~\"unexpected indeterminate result\");\n             }\n             Failed => {\n                 return None;"}, {"sha": "6f8db25a109a3931aefe10e8bc513d16bddf82b9", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -209,8 +209,8 @@ pub fn opt_eq(tcx: ty::ctxt, a: &Opt, b: &Opt) -> bool {\n                         a_expr = e.get();\n                     }\n                     UnitLikeStructLit(_) => {\n-                        fail ~\"UnitLikeStructLit should have been handled \\\n-                               above\"\n+                        die!(~\"UnitLikeStructLit should have been handled \\\n+                               above\")\n                     }\n                 }\n \n@@ -222,8 +222,8 @@ pub fn opt_eq(tcx: ty::ctxt, a: &Opt, b: &Opt) -> bool {\n                         b_expr = e.get();\n                     }\n                     UnitLikeStructLit(_) => {\n-                        fail ~\"UnitLikeStructLit should have been handled \\\n-                               above\"\n+                        die!(~\"UnitLikeStructLit should have been handled \\\n+                               above\")\n                     }\n                 }\n "}, {"sha": "dd4c773278f159705b38d71998d4f0bdf4c44cc9", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -1888,7 +1888,7 @@ pub fn trans_enum_variant(ccx: @crate_ctxt,\n         // works. So we have to cast to the destination's view of the type.\n         let llarg = match fcx.llargs.find(va.id) {\n             Some(local_mem(x)) => x,\n-            _ => fail ~\"trans_enum_variant: how do we know this works?\",\n+            _ => die!(~\"trans_enum_variant: how do we know this works?\"),\n         };\n         let arg_ty = arg_tys[i].ty;\n         memcpy_ty(bcx, lldestptr, llarg, arg_ty);\n@@ -2024,7 +2024,7 @@ pub fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n     let path = match ccx.tcx.items.get(item.id) {\n         ast_map::node_item(_, p) => p,\n         // tjc: ?\n-        _ => fail ~\"trans_item\",\n+        _ => die!(~\"trans_item\"),\n     };\n     match /*bad*/copy item.node {\n       // XXX: Bad copies.\n@@ -2280,7 +2280,7 @@ pub fn item_path(ccx: @crate_ctxt, i: @ast::item) -> path {\n         /*bad*/copy *match ccx.tcx.items.get(i.id) {\n             ast_map::node_item(_, p) => p,\n                 // separate map for paths?\n-            _ => fail ~\"item_path\"\n+            _ => die!(~\"item_path\")\n         },\n         ~[path_name(i.ident)])\n }\n@@ -2367,7 +2367,7 @@ pub fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n                 set_inline_hint_if_appr(/*bad*/copy i.attrs, llfn);\n                 llfn\n               }\n-              _ => fail ~\"get_item_val: weird result in table\"\n+              _ => die!(~\"get_item_val: weird result in table\")\n             }\n           }\n           ast_map::node_trait_method(trait_method, _, pth) => {\n@@ -2448,14 +2448,14 @@ pub fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n                       ast::item_enum(_, _) => {\n                         register_fn(ccx, (*v).span, pth, id, enm.attrs)\n                       }\n-                      _ => fail ~\"node_variant, shouldn't happen\"\n+                      _ => die!(~\"node_variant, shouldn't happen\")\n                     };\n                 }\n                 ast::struct_variant_kind(_) => {\n-                    fail ~\"struct variant kind unexpected in get_item_val\"\n+                    die!(~\"struct variant kind unexpected in get_item_val\")\n                 }\n                 ast::enum_variant_kind(_) => {\n-                    fail ~\"enum variant kind unexpected in get_item_val\"\n+                    die!(~\"enum variant kind unexpected in get_item_val\")\n                 }\n             }\n             set_inline_hint(llfn);"}, {"sha": "5938823768ca7f4ea020302e07a293553e74e722", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -33,7 +33,7 @@ pub fn terminate(cx: block, _: &str) {\n \n pub fn check_not_terminated(cx: block) {\n     if cx.terminated {\n-        fail ~\"already terminated!\";\n+        die!(~\"already terminated!\");\n     }\n }\n "}, {"sha": "d3eb2157ee340db725d57621b1861f7b4c2d981b", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -96,7 +96,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n                     let elt = llvm::LLVMGetElementType(ty);\n                     ty_align(elt)\n                 }\n-                _ => fail ~\"ty_size: unhandled type\"\n+                _ => die!(~\"ty_size: unhandled type\")\n             };\n         }\n     }\n@@ -122,7 +122,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n                   let eltsz = ty_size(elt);\n                   len * eltsz\n                 }\n-                _ => fail ~\"ty_size: unhandled type\"\n+                _ => die!(~\"ty_size: unhandled type\")\n             };\n         }\n     }\n@@ -215,7 +215,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n                         i += 1u;\n                     }\n                 }\n-                _ => fail ~\"classify: unhandled type\"\n+                _ => die!(~\"classify: unhandled type\")\n             }\n         }\n     }\n@@ -315,7 +315,7 @@ fn llreg_ty(cls: &[x86_64_reg_class]) -> TypeRef {\n                 sse_ds_class => {\n                     tys.push(T_f64());\n                 }\n-                _ => fail ~\"llregtype: unhandled class\"\n+                _ => die!(~\"llregtype: unhandled class\")\n             }\n             i += 1u;\n         }"}, {"sha": "b55b8b83f017cb7dc07639eabe4e1bc9e206d774", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -383,7 +383,7 @@ pub fn trans_rtcall_or_lang_call_with_type_params(bcx: block,\n                     llfnty = T_ptr(struct_elt(llfnty, 0));\n                     new_llval = PointerCast(callee.bcx, fn_data.llfn, llfnty);\n                 }\n-                _ => fail\n+                _ => die!()\n             }\n             Callee { bcx: callee.bcx, data: Fn(FnData { llfn: new_llval }) }\n         },"}, {"sha": "a32280c5850fd53734a81a59be30a4fe96117c46", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -268,7 +268,7 @@ fn create_block(cx: block) -> @metadata<block_md> {\n     while cx.node_info.is_none() {\n         match cx.parent {\n           Some(b) => cx = b,\n-          None => fail\n+          None => die!()\n         }\n     }\n     let sp = cx.node_info.get().span;\n@@ -548,7 +548,7 @@ fn create_ty(_cx: @crate_ctxt, _t: ty::t, _ty: @ast::Ty)\n      * elsewhere, not be self-contained.\n      */\n \n-    fail;\n+    die!();\n     /*\n     fn t_to_ty(cx: crate_ctxt, t: ty::t, span: span) -> @ast::ty {\n         let ty = match ty::get(t).struct {\n@@ -664,7 +664,7 @@ pub fn create_local_var(bcx: block, local: @ast::local)\n         let name = match local.node.pat.node {\n           ast::pat_ident(_, pth, _) => ast_util::path_to_ident(pth),\n           // FIXME this should be handled (#2533)\n-          _ => fail ~\"no single variable name for local\"\n+          _ => die!(~\"no single variable name for local\")\n         };\n         let loc = cx.sess.codemap.lookup_char_pos(local.span.lo);\n         let ty = node_id_type(bcx, local.node.id);"}, {"sha": "3d441dc973a2b5fd75c0e8c8b42963f1b8649fd9", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -500,7 +500,7 @@ pub fn trans_intrinsic(ccx: @crate_ctxt,\n           if tp_sz != out_sz {\n               let sp = match ccx.tcx.items.get(ref_id.get()) {\n                   ast_map::node_expr(e) => e.span,\n-                  _ => fail ~\"reinterpret_cast or forget has non-expr arg\"\n+                  _ => die!(~\"reinterpret_cast or forget has non-expr arg\")\n               };\n               ccx.sess.span_fatal(\n                   sp, fmt!(\"reinterpret_cast called on types \\\n@@ -958,7 +958,7 @@ fn abi_of_foreign_fn(ccx: @crate_ctxt, i: @ast::foreign_item)\n       None => match ccx.tcx.items.get(i.id) {\n         ast_map::node_foreign_item(_, abi, _) => abi,\n         // ??\n-        _ => fail ~\"abi_of_foreign_fn: not foreign\"\n+        _ => die!(~\"abi_of_foreign_fn: not foreign\")\n       },\n       Some(_) => match attr::foreign_abi(i.attrs) {\n         either::Right(abi) => abi,"}, {"sha": "d1621233f5dd7829a20d306bc26fdc81c574b783", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -253,7 +253,7 @@ pub fn trans_method_callee(bcx: block,\n                                                trait_id, off, vtbl)\n                 }\n                 // how to get rid of this?\n-                None => fail ~\"trans_method_callee: missing param_substs\"\n+                None => die!(~\"trans_method_callee: missing param_substs\")\n             }\n         }\n         typeck::method_trait(_, off, vstore) => {\n@@ -311,13 +311,13 @@ pub fn trans_static_method_callee(bcx: block,\n             ast_map::node_trait_method(trait_method, _, _) => {\n                 ast_util::trait_method_to_ty_method(*trait_method).ident\n             }\n-            _ => fail ~\"callee is not a trait method\"\n+            _ => die!(~\"callee is not a trait method\")\n         }\n     } else {\n         let path = csearch::get_item_path(bcx.tcx(), method_id);\n         match path[path.len()-1] {\n             path_name(s) => { s }\n-            path_mod(_) => { fail ~\"path doesn't have a name?\" }\n+            path_mod(_) => { die!(~\"path doesn't have a name?\") }\n         }\n     };\n     debug!(\"trans_static_method_callee: method_id=%?, callee_id=%?, \\\n@@ -347,8 +347,8 @@ pub fn trans_static_method_callee(bcx: block,\n             FnData {llfn: PointerCast(bcx, lval, llty)}\n         }\n         _ => {\n-            fail ~\"vtable_param left in monomorphized \\\n-                   function's vtable substs\";\n+            die!(~\"vtable_param left in monomorphized \\\n+                   function's vtable substs\");\n         }\n     }\n }\n@@ -368,7 +368,7 @@ pub fn method_with_name(ccx: @crate_ctxt, impl_id: ast::def_id,\n             }, _) => {\n             method_from_methods(/*bad*/copy *ms, name).get()\n           }\n-          _ => fail ~\"method_with_name\"\n+          _ => die!(~\"method_with_name\")\n         }\n     } else {\n         csearch::get_impl_method(ccx.sess.cstore, impl_id, name)\n@@ -396,13 +396,13 @@ pub fn method_with_name_or_default(ccx: @crate_ctxt, impl_id: ast::def_id,\n                                   return pmi.method_info.did;\n                               }\n                           }\n-                          fail\n+                          die!()\n                       }\n-                      None => fail\n+                      None => die!()\n                   }\n               }\n           }\n-          _ => fail ~\"method_with_name\"\n+          _ => die!(~\"method_with_name\")\n         }\n     } else {\n         csearch::get_impl_method(ccx.sess.cstore, impl_id, name)\n@@ -421,14 +421,14 @@ pub fn method_ty_param_count(ccx: @crate_ctxt, m_id: ast::def_id,\n                         method_ty_param_count(\n                             ccx, source.method_id, source.impl_id)\n                     }\n-                    None => fail\n+                    None => die!()\n                 }\n             }\n             Some(ast_map::node_trait_method(@ast::provided(@ref m), _, _))\n                 => {\n                 m.tps.len()\n             }\n-            copy e => fail fmt!(\"method_ty_param_count %?\", e)\n+            copy e => die!(fmt!(\"method_ty_param_count %?\", e))\n         }\n     } else {\n         csearch::get_type_param_count(ccx.sess.cstore, m_id) -\n@@ -493,7 +493,8 @@ pub fn trans_monomorphized_callee(bcx: block,\n                              mentry.explicit_self)\n       }\n       typeck::vtable_param(*) => {\n-          fail ~\"vtable_param left in monomorphized function's vtable substs\";\n+          die!(~\"vtable_param left in monomorphized function's \" +\n+              \"vtable substs\");\n       }\n     };\n \n@@ -768,7 +769,7 @@ pub fn vtable_id(ccx: @crate_ctxt,\n             }\n         }\n         // can't this be checked at the callee?\n-        _ => fail ~\"vtable_id\"\n+        _ => die!(~\"vtable_id\")\n     }\n }\n \n@@ -783,7 +784,7 @@ pub fn get_vtable(ccx: @crate_ctxt,\n         typeck::vtable_static(id, substs, sub_vtables) => {\n             make_impl_vtable(ccx, id, substs, sub_vtables)\n         }\n-        _ => fail ~\"get_vtable: expected a static origin\"\n+        _ => die!(~\"get_vtable: expected a static origin\")\n       }\n     }\n }"}, {"sha": "66e0186e67e9f17c940f8232893c1ae5b6c58391", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -135,7 +135,7 @@ fn traverse_public_item(cx: ctx, item: @item) {\n       }\n       item_const(*) |\n       item_enum(*) | item_trait(*) => (),\n-      item_mac(*) => fail ~\"item macros unimplemented\"\n+      item_mac(*) => die!(~\"item macros unimplemented\")\n     }\n }\n "}, {"sha": "7484967e9e5f3ab6c5233ce7edf42779f75a5ac0", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -147,7 +147,7 @@ pub fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n                 ~\"bswap16\" | ~\"bswap32\" | ~\"bswap64\" => 0,\n \n                 // would be cool to make these an enum instead of strings!\n-                _ => fail ~\"unknown intrinsic in type_use\"\n+                _ => die!(~\"unknown intrinsic in type_use\")\n             };\n             for uint::range(0u, n_tps) |n| { cx.uses[n] |= flags;}\n         }"}, {"sha": "928a1cfa96744d3d65be2bf62174f58316835961", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -1568,7 +1568,7 @@ pub fn get_element_type(ty: t, i: uint) -> t {\n     match /*bad*/copy get(ty).sty {\n       ty_rec(flds) => return flds[i].mt.ty,\n       ty_tup(ts) => return ts[i],\n-      _ => fail ~\"get_element_type called on invalid type\"\n+      _ => die!(~\"get_element_type called on invalid type\")\n     }\n }\n \n@@ -2823,28 +2823,28 @@ fn node_id_has_type_params(cx: ctxt, id: ast::node_id) -> bool {\n pub fn ty_fn_args(fty: t) -> ~[arg] {\n     match get(fty).sty {\n       ty_fn(ref f) => /*bad*/copy f.sig.inputs,\n-      _ => fail ~\"ty_fn_args() called on non-fn type\"\n+      _ => die!(~\"ty_fn_args() called on non-fn type\")\n     }\n }\n \n pub fn ty_fn_proto(fty: t) -> Proto {\n     match get(fty).sty {\n       ty_fn(ref f) => f.meta.proto,\n-      _ => fail ~\"ty_fn_proto() called on non-fn type\"\n+      _ => die!(~\"ty_fn_proto() called on non-fn type\")\n     }\n }\n \n pub fn ty_fn_purity(fty: t) -> ast::purity {\n     match get(fty).sty {\n       ty_fn(ref f) => f.meta.purity,\n-      _ => fail ~\"ty_fn_purity() called on non-fn type\"\n+      _ => die!(~\"ty_fn_purity() called on non-fn type\")\n     }\n }\n \n pub pure fn ty_fn_ret(fty: t) -> t {\n     match get(fty).sty {\n         ty_fn(ref f) => f.sig.output,\n-        _ => fail ~\"ty_fn_ret() called on non-fn type\"\n+        _ => die!(~\"ty_fn_ret() called on non-fn type\")\n     }\n }\n \n@@ -3239,7 +3239,7 @@ pub fn stmt_node_id(s: @ast::stmt) -> ast::node_id {\n       ast::stmt_decl(_, id) | stmt_expr(_, id) | stmt_semi(_, id) => {\n         return id;\n       }\n-      ast::stmt_mac(*) => fail ~\"unexpanded macro in trans\"\n+      ast::stmt_mac(*) => die!(~\"unexpanded macro in trans\")\n     }\n }\n \n@@ -3263,7 +3263,7 @@ pub fn get_field(tcx: ctxt, rec_ty: t, id: ast::ident) -> field {\n     match vec::find(get_fields(rec_ty), |f| f.ident == id) {\n       Some(f) => f,\n       // Do we only call this when we know the field is legit?\n-      None => fail (fmt!(\"get_field: ty doesn't have a field %s\",\n+      None => die!(fmt!(\"get_field: ty doesn't have a field %s\",\n                          tcx.sess.str_of(id)))\n     }\n }\n@@ -3272,7 +3272,7 @@ pub fn get_fields(rec_ty:t) -> ~[field] {\n     match /*bad*/copy get(rec_ty).sty {\n       ty_rec(fields) => fields,\n       // Can we check at the caller?\n-      _ => fail ~\"get_fields: not a record type\"\n+      _ => die!(~\"get_fields: not a record type\")\n     }\n }\n \n@@ -3929,10 +3929,10 @@ pub fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[VariantInfo] {\n                          }\n                     }\n                     ast::struct_variant_kind(_) => {\n-                        fail ~\"struct variant kinds unimpl in enum_variants\"\n+                        die!(~\"struct variant kinds unimpl in enum_variants\")\n                     }\n                     ast::enum_variant_kind(_) => {\n-                        fail ~\"enum variant kinds unimpl in enum_variants\"\n+                        die!(~\"enum variant kinds unimpl in enum_variants\")\n                     }\n                 }\n             })"}, {"sha": "add1a13222185d428213f9f09bf1a68f8f842dfc", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -2247,7 +2247,7 @@ pub fn check_expr_with_unifier(fcx: @fn_ctxt,\n                     demand::suptype(fcx, b.span, inner_ty, fcx.expr_ty(b));\n                 }\n                 // argh\n-                _ => fail ~\"expr_fn_block\"\n+                _ => die!(~\"expr_fn_block\")\n         }\n         let block_ty = structurally_resolved_type(\n             fcx, expr.span, fcx.node_ty(b.id));\n@@ -2287,7 +2287,7 @@ pub fn check_expr_with_unifier(fcx: @fn_ctxt,\n             demand::suptype(fcx, b.span, inner_ty, fcx.expr_ty(b));\n           }\n           // argh\n-          _ => fail ~\"expected fn ty\"\n+          _ => die!(~\"expected fn ty\")\n         }\n         fcx.write_ty(expr.id, fcx.node_ty(b.id));\n       }"}, {"sha": "773ad73ce7a26122e2da368143fe9b5d52d4ccb0", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -148,7 +148,7 @@ pub fn fixup_substs(vcx: &VtableContext, location_info: &LocationInfo,\n     do fixup_ty(vcx, location_info, t, is_early).map |t_f| {\n         match ty::get(*t_f).sty {\n           ty::ty_trait(_, ref substs_f, _) => (/*bad*/copy *substs_f),\n-          _ => fail ~\"t_f should be a trait\"\n+          _ => die!(~\"t_f should be a trait\")\n         }\n     }\n }"}, {"sha": "6230662ce168d8795f4eddade69d38c295db5341", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -135,8 +135,8 @@ pub fn get_base_type_def_id(inference_context: @InferCtxt,\n                     return Some(def_id);\n                 }\n                 _ => {\n-                    fail ~\"get_base_type() returned a type that wasn't an \\\n-                           enum, class, or trait\";\n+                    die!(~\"get_base_type() returned a type that wasn't an \\\n+                           enum, class, or trait\");\n                 }\n             }\n         }"}, {"sha": "6a5c1fb53bc06978f85026c0f271583061fbb5ea", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -913,8 +913,8 @@ pub fn ty_of_item(ccx: @crate_ctxt, it: @ast::item)\n           return tpt;\n       }\n       ast::item_impl(*) | ast::item_mod(_) |\n-      ast::item_foreign_mod(_) => fail,\n-      ast::item_mac(*) => fail ~\"item macros unimplemented\"\n+      ast::item_foreign_mod(_) => die!(),\n+      ast::item_mac(*) => die!(~\"item macros unimplemented\")\n     }\n }\n "}, {"sha": "6d6e572a7692e5e8759e5ace452aa8e812fd5016", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -102,7 +102,7 @@ impl Env {\n         return match search_mod(self, &self.crate.node.module, 0, names) {\n             Some(id) => id,\n             None => {\n-                fail fmt!(\"No item found: `%s`\", str::connect(names, \"::\"));\n+                die!(fmt!(\"No item found: `%s`\", str::connect(names, \"::\")));\n             }\n         };\n \n@@ -155,17 +155,17 @@ impl Env {\n \n     fn assert_subtype(&self, a: ty::t, b: ty::t) {\n         if !self.is_subtype(a, b) {\n-            fail fmt!(\"%s is not a subtype of %s, but it should be\",\n+            die!(fmt!(\"%s is not a subtype of %s, but it should be\",\n                       self.ty_to_str(a),\n-                      self.ty_to_str(b));\n+                      self.ty_to_str(b)));\n         }\n     }\n \n     fn assert_not_subtype(&self, a: ty::t, b: ty::t) {\n         if self.is_subtype(a, b) {\n-            fail fmt!(\"%s is a subtype of %s, but it shouldn't be\",\n+            die!(fmt!(\"%s is a subtype of %s, but it shouldn't be\",\n                       self.ty_to_str(a),\n-                      self.ty_to_str(b));\n+                      self.ty_to_str(b)));\n         }\n     }\n \n@@ -240,7 +240,7 @@ impl Env {\n     fn check_lub(&self, t1: ty::t, t2: ty::t, t_lub: ty::t) {\n         match self.lub().tys(t1, t2) {\n             Err(e) => {\n-                fail fmt!(\"Unexpected error computing LUB: %?\", e)\n+                die!(fmt!(\"Unexpected error computing LUB: %?\", e))\n             }\n             Ok(t) => {\n                 self.assert_eq(t, t_lub);\n@@ -262,7 +262,7 @@ impl Env {\n                self.ty_to_str(t_glb));\n         match self.glb().tys(t1, t2) {\n             Err(e) => {\n-                fail fmt!(\"Unexpected error computing LUB: %?\", e)\n+                die!(fmt!(\"Unexpected error computing LUB: %?\", e))\n             }\n             Ok(t) => {\n                 self.assert_eq(t, t_glb);\n@@ -281,8 +281,8 @@ impl Env {\n         match self.lub().tys(t1, t2) {\n             Err(_) => {}\n             Ok(t) => {\n-                fail fmt!(\"Unexpected success computing LUB: %?\",\n-                          self.ty_to_str(t))\n+                die!(fmt!(\"Unexpected success computing LUB: %?\",\n+                          self.ty_to_str(t)))\n             }\n         }\n     }\n@@ -292,8 +292,8 @@ impl Env {\n         match self.glb().tys(t1, t2) {\n             Err(_) => {}\n             Ok(t) => {\n-                fail fmt!(\"Unexpected success computing GLB: %?\",\n-                          self.ty_to_str(t))\n+                die!(fmt!(\"Unexpected success computing GLB: %?\",\n+                          self.ty_to_str(t)))\n             }\n         }\n     }"}, {"sha": "7ac719bd55e886c30706d8dd2fb9f9d7e6dbbd0f", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -368,7 +368,7 @@ pub fn monitor(+f: fn~(diagnostic::emitter)) {\n                 }\n             }\n             // Fail so the process returns a failure code\n-            fail;\n+            die!();\n         }\n     }\n }"}, {"sha": "80cf679ddaafb85724f8ab0ee39e48c5b7a409b9", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -257,7 +257,7 @@ fn merge_method_attrs(\n                  attr_parser::parse_desc(copy method.attrs))\n             })\n           }\n-          _ => fail ~\"unexpected item\"\n+          _ => die!(~\"unexpected item\")\n         }\n     };\n "}, {"sha": "d069fc142074fcc27af3f22f526d6e022cccef30", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -71,7 +71,7 @@ fn take_my_order_please(\n      * This function is full of fail\n      */\n \n-    fail;\n+    die!();\n }\n \n mod fortress_of_solitude {"}, {"sha": "fc572e3da2c1d80afa16626ee30c97adb92deb8a", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -322,7 +322,8 @@ fn structdoc_from_struct(\n         fields: do struct_def.fields.map |field| {\n             match field.node.kind {\n                 ast::named_field(ident, _, _) => to_str(ident),\n-                ast::unnamed_field => fail ~\"what is an unnamed struct field?\"\n+                ast::unnamed_field => die!(\n+                    ~\"what is an unnamed struct field?\")\n             }\n         },\n         sig: None"}, {"sha": "bb8ffe98b9f8e9da8ba341673c93f1a191bce015", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -543,7 +543,7 @@ fn write_sig(ctxt: &Ctxt, sig: Option<~str>) {\n         ctxt.w.write_line(code_block_indent(sig));\n         ctxt.w.write_line(~\"\");\n       }\n-      None => fail ~\"unimplemented\"\n+      None => die!(~\"unimplemented\")\n     }\n }\n "}, {"sha": "ad153d5927601baed77dcdc9c31ea7d83767da21", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -145,7 +145,7 @@ fn pandoc_writer(\n         if status != 0 {\n             error!(\"pandoc-out: %s\", stdout);\n             error!(\"pandoc-err: %s\", stderr);\n-            fail ~\"pandoc failed\";\n+            die!(~\"pandoc failed\");\n         }\n     }\n }\n@@ -293,7 +293,7 @@ fn write_file(path: &Path, s: ~str) {\n       result::Ok(writer) => {\n         writer.write_str(s);\n       }\n-      result::Err(e) => fail e\n+      result::Err(e) => die!(e)\n     }\n }\n "}, {"sha": "7ef7cd3900753b387990871c62508df295baabbc", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -79,7 +79,7 @@ fn get_fn_sig(srv: astsrv::Srv, fn_id: doc::AstId) -> Option<~str> {\n             Some(pprust::fun_to_str(*decl, ident, copy *tys,\n                                     extract::interner()))\n           }\n-          _ => fail ~\"get_fn_sig: fn_id not bound to a fn item\"\n+          _ => die!(~\"get_fn_sig: fn_id not bound to a fn item\")\n         }\n     }\n }\n@@ -228,7 +228,7 @@ fn get_method_sig(\n                     }\n                   }\n                 }\n-                _ => fail ~\"method not found\"\n+                _ => die!(~\"method not found\")\n             }\n           }\n           ast_map::node_item(@ast::item {\n@@ -245,10 +245,10 @@ fn get_method_sig(\n                         extract::interner()\n                     ))\n                 }\n-                None => fail ~\"method not found\"\n+                None => die!(~\"method not found\")\n             }\n           }\n-          _ => fail ~\"get_method_sig: item ID not bound to trait or impl\"\n+          _ => die!(~\"get_method_sig: item ID not bound to trait or impl\")\n         }\n     }\n }\n@@ -314,7 +314,7 @@ fn should_add_impl_self_ty() {\n \n #[test]\n fn should_add_impl_method_sigs() {\n-    let doc = test::mk_doc(~\"impl int { fn a<T>() -> int { fail } }\");\n+    let doc = test::mk_doc(~\"impl int { fn a<T>() -> int { die!() } }\");\n     assert doc.cratemod().impls()[0].methods[0].sig\n         == Some(~\"fn a<T>() -> int\");\n }\n@@ -395,7 +395,7 @@ fn strip_struct_extra_stuff(item: @ast::item) -> @ast::item {\n             };\n             ast::item_struct(def, tys)\n         }\n-        _ => fail ~\"not a struct\"\n+        _ => die!(~\"not a struct\")\n     };\n \n     @ast::item {"}, {"sha": "0e551066449935792eab82f4afad71499c83b402", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -178,10 +178,10 @@ fn run(repl: Repl, input: ~str) -> Repl {\n         ast::expr_call(_, exprs, _) => {\n             match exprs[0].node {\n                 ast::expr_block(blk) => @blk,\n-                _ => fail\n+                _ => die!()\n             }\n         }\n-        _ => fail\n+        _ => die!()\n     };\n     debug!(\"recording input into repl history\");\n     record(repl, blk, sess.parse_sess.interner)\n@@ -320,7 +320,7 @@ fn run_cmd(repl: &mut Repl, _in: io::Reader, _out: io::Writer,\n             let mut end_multiline = false;\n             while (!end_multiline) {\n                 match get_line(~\"rusti| \") {\n-                    None => fail ~\"unterminated multiline command :{ .. :}\",\n+                    None => die!(~\"unterminated multiline command :{ .. :}\"),\n                     Some(line) => {\n                         if str::trim(line) == ~\":}\" {\n                             end_multiline = true;"}, {"sha": "a8d3f15610467d41c1e14fa111d622ffea901f16", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -221,7 +221,7 @@ pub fn unwrap_mutex_arc<T: Owned>(arc: MutexARC<T>) -> T {\n     let inner = unsafe { unwrap_shared_mutable_state(move x) };\n     let MutexARCInner { failed: failed, data: data, _ } = move inner;\n     if failed {\n-        fail ~\"Can't unwrap poisoned MutexARC - another task failed inside!\"\n+        die!(~\"Can't unwrap poisoned MutexARC - another task failed inside!\")\n     }\n     move data\n }\n@@ -232,9 +232,9 @@ pub fn unwrap_mutex_arc<T: Owned>(arc: MutexARC<T>) -> T {\n fn check_poison(is_mutex: bool, failed: bool) {\n     if failed {\n         if is_mutex {\n-            fail ~\"Poisoned MutexARC - another task failed inside!\";\n+            die!(~\"Poisoned MutexARC - another task failed inside!\");\n         } else {\n-            fail ~\"Poisoned rw_arc - another task failed inside!\";\n+            die!(~\"Poisoned rw_arc - another task failed inside!\");\n         }\n     }\n }\n@@ -410,7 +410,7 @@ pub fn unwrap_rw_arc<T: Const Owned>(arc: RWARC<T>) -> T {\n     let inner = unsafe { unwrap_shared_mutable_state(move x) };\n     let RWARCInner { failed: failed, data: data, _ } = move inner;\n     if failed {\n-        fail ~\"Can't unwrap poisoned RWARC - another task failed inside!\"\n+        die!(~\"Can't unwrap poisoned RWARC - another task failed inside!\")\n     }\n     move data\n }"}, {"sha": "3e21a320d4436164b3d7253765566120a95c3969", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -305,6 +305,6 @@ fn test_arena_destructors_fail() {\n         // get freed too.\n         do arena.alloc { @20 };\n         // Now fail.\n-        fail;\n+        die!();\n     };\n }"}, {"sha": "5813e0919d958546bac2d64ce034349fe6a86c9a", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -65,7 +65,7 @@ impl &[u8]: ToBase64 {\n                 str::push_char(&mut s, chars[(n >> 6u) & 63u]);\n                 str::push_char(&mut s, '=');\n               }\n-              _ => fail ~\"Algebra is broken, please alert the math police\"\n+              _ => die!(~\"Algebra is broken, please alert the math police\")\n             }\n         }\n         s\n@@ -84,7 +84,7 @@ pub trait FromBase64 {\n \n impl ~[u8]: FromBase64 {\n     pure fn from_base64() -> ~[u8] {\n-        if self.len() % 4u != 0u { fail ~\"invalid base64 length\"; }\n+        if self.len() % 4u != 0u { die!(~\"invalid base64 length\"); }\n \n         let len = self.len();\n         let mut padding = 0u;\n@@ -126,10 +126,10 @@ impl ~[u8]: FromBase64 {\n                             r.push(((n >> 10u) & 0xFFu) as u8);\n                             return copy r;\n                           }\n-                          _ => fail ~\"invalid base64 padding\"\n+                          _ => die!(~\"invalid base64 padding\")\n                         }\n                     } else {\n-                        fail ~\"invalid base64 character\";\n+                        die!(~\"invalid base64 character\");\n                     }\n \n                     i += 1u;"}, {"sha": "2ccf347714151d2b7f96814d1b139b1529226079", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -332,7 +332,7 @@ pub impl BigUint {\n     }\n \n     pure fn divmod(&self, other: &BigUint) -> (BigUint, BigUint) {\n-        if other.is_zero() { fail }\n+        if other.is_zero() { die!() }\n         if self.is_zero() { return (Zero::zero(), Zero::zero()); }\n         if *other == One::one() { return (copy *self, Zero::zero()); }\n \n@@ -523,7 +523,7 @@ priv pure fn get_radix_base(radix: uint) -> (uint, uint) {\n         14 => (1475789056, 8),\n         15 => (2562890625, 8),\n         16 => (4294967296, 8),\n-        _  => fail\n+        _  => die!()\n     }\n }\n \n@@ -547,7 +547,7 @@ priv pure fn get_radix_base(radix: uint) -> (uint, uint) {\n         14 => (38416, 4),\n         15 => (50625, 4),\n         16 => (65536, 4),\n-        _  => fail\n+        _  => die!()\n     }\n }\n \n@@ -797,7 +797,7 @@ pub impl BigInt {\n         let d = BigInt::from_biguint(Plus, d_ui),\n             m = BigInt::from_biguint(Plus, m_ui);\n         match (self.sign, other.sign) {\n-            (_,    Zero)   => fail,\n+            (_,    Zero)   => die!(),\n             (Plus, Plus)  | (Zero, Plus)  => (d, m),\n             (Plus, Minus) | (Zero, Minus) => if m.is_zero() {\n                 (-d, Zero::zero())\n@@ -828,7 +828,7 @@ pub impl BigInt {\n         let q = BigInt::from_biguint(Plus, q_ui);\n         let r = BigInt::from_biguint(Plus, r_ui);\n         match (self.sign, other.sign) {\n-            (_,    Zero)   => fail,\n+            (_,    Zero)   => die!(),\n             (Plus, Plus)  | (Zero, Plus)  => ( q,  r),\n             (Plus, Minus) | (Zero, Minus) => (-q,  r),\n             (Minus, Plus)                 => (-q, -r),\n@@ -1193,7 +1193,7 @@ mod biguint_tests {\n              ~\"2\" +\n              str::from_chars(vec::from_elem(bits / 2 - 1, '0')) + \"1\"),\n             (10, match bits {\n-                32 => ~\"8589934593\", 16 => ~\"131073\", _ => fail\n+                32 => ~\"8589934593\", 16 => ~\"131073\", _ => die!()\n             }),\n             (16,\n              ~\"2\" +\n@@ -1210,7 +1210,7 @@ mod biguint_tests {\n             (10, match bits {\n                 32 => ~\"55340232229718589441\",\n                 16 => ~\"12885032961\",\n-                _ => fail\n+                _ => die!()\n             }),\n             (16, ~\"3\" +\n              str::from_chars(vec::from_elem(bits / 4 - 1, '0')) + \"2\" +\n@@ -1257,7 +1257,7 @@ mod biguint_tests {\n         fn check(n: uint, s: &str) {\n             let n = factor(n);\n             let ans = match BigUint::from_str_radix(s, 10) {\n-                Some(x) => x, None => fail\n+                Some(x) => x, None => die!()\n             };\n             assert n == ans;\n         }"}, {"sha": "0ad9d0af2ac77d7a817467437a238f5309082d51", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -242,7 +242,7 @@ pub fn Bitv (nbits: uint, init: bool) -> Bitv {\n priv impl Bitv {\n \n     fn die() -> ! {\n-        fail ~\"Tried to do operation on bit vectors with different sizes\";\n+        die!(~\"Tried to do operation on bit vectors with different sizes\");\n     }\n \n     #[inline(always)]"}, {"sha": "aae84a8695783e39e2bf3c9117e7b629ded94195", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -34,7 +34,7 @@ impl<T> Cell<T> {\n     /// Yields the value, failing if the cell is empty.\n     fn take() -> T {\n         if self.is_empty() {\n-            fail ~\"attempt to take an empty cell\";\n+            die!(~\"attempt to take an empty cell\");\n         }\n \n         let mut value = None;\n@@ -45,7 +45,7 @@ impl<T> Cell<T> {\n     /// Returns the value, failing if the cell is full.\n     fn put_back(value: T) {\n         if !self.is_empty() {\n-            fail ~\"attempt to put a value back into a full cell\";\n+            die!(~\"attempt to put a value back into a full cell\");\n         }\n         self.value = Some(move value);\n     }"}, {"sha": "2f001ae866c6b7cb82290216dba1c84fb053b31e", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -58,7 +58,7 @@ pub fn create<T: Copy>() -> Deque<T> {\n         move rv\n     }\n     fn get<T: Copy>(elts: &DVec<Cell<T>>, i: uint) -> T {\n-        match (*elts).get_elt(i) { Some(move t) => t, _ => fail }\n+        match (*elts).get_elt(i) { Some(move t) => t, _ => die!() }\n     }\n \n     struct Repr<T> {"}, {"sha": "25deaf2a9b5961ae2fb10ebe2e603f9cace6397e", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -104,7 +104,7 @@ pub mod reader {\n                         (data[start + 2u] as uint) << 8u |\n                         (data[start + 3u] as uint),\n                     next: start + 4u};\n-        } else { error!(\"vint too big\"); fail; }\n+        } else { error!(\"vint too big\"); die!(); }\n     }\n \n     pub fn Doc(data: @~[u8]) -> Doc {\n@@ -140,7 +140,7 @@ pub mod reader {\n             Some(d) => d,\n             None => {\n                 error!(\"failed to find block with tag %u\", tg);\n-                fail;\n+                die!();\n             }\n         }\n     }\n@@ -227,7 +227,8 @@ pub mod reader {\n                     self.pos = r_doc.end;\n                     let str = doc_as_str(r_doc);\n                     if lbl != str {\n-                        fail fmt!(\"Expected label %s but found %s\", lbl, str);\n+                        die!(fmt!(\"Expected label %s but found %s\", lbl,\n+                            str));\n                     }\n                 }\n             }\n@@ -236,20 +237,20 @@ pub mod reader {\n         fn next_doc(exp_tag: EbmlEncoderTag) -> Doc {\n             debug!(\". next_doc(exp_tag=%?)\", exp_tag);\n             if self.pos >= self.parent.end {\n-                fail ~\"no more documents in current node!\";\n+                die!(~\"no more documents in current node!\");\n             }\n             let TaggedDoc { tag: r_tag, doc: r_doc } =\n                 doc_at(self.parent.data, self.pos);\n             debug!(\"self.parent=%?-%? self.pos=%? r_tag=%? r_doc=%?-%?\",\n                    copy self.parent.start, copy self.parent.end,\n                    copy self.pos, r_tag, r_doc.start, r_doc.end);\n             if r_tag != (exp_tag as uint) {\n-                fail fmt!(\"expected EBML doc with tag %? but found tag %?\",\n-                          exp_tag, r_tag);\n+                die!(fmt!(\"expected EBML doc with tag %? but found tag %?\",\n+                          exp_tag, r_tag));\n             }\n             if r_doc.end > self.parent.end {\n-                fail fmt!(\"invalid EBML, child extends to 0x%x, \\\n-                           parent to 0x%x\", r_doc.end, self.parent.end);\n+                die!(fmt!(\"invalid EBML, child extends to 0x%x, \\\n+                           parent to 0x%x\", r_doc.end, self.parent.end));\n             }\n             self.pos = r_doc.end;\n             r_doc\n@@ -291,7 +292,7 @@ pub mod reader {\n         fn read_uint(&self) -> uint {\n             let v = doc_as_u64(self.next_doc(EsUint));\n             if v > (::core::uint::max_value as u64) {\n-                fail fmt!(\"uint %? too large for this architecture\", v);\n+                die!(fmt!(\"uint %? too large for this architecture\", v));\n             }\n             v as uint\n         }\n@@ -303,22 +304,22 @@ pub mod reader {\n         fn read_int(&self) -> int {\n             let v = doc_as_u64(self.next_doc(EsInt)) as i64;\n             if v > (int::max_value as i64) || v < (int::min_value as i64) {\n-                fail fmt!(\"int %? out of range for this architecture\", v);\n+                die!(fmt!(\"int %? out of range for this architecture\", v));\n             }\n             v as int\n         }\n \n         fn read_bool(&self) -> bool { doc_as_u8(self.next_doc(EsBool))\n                                          as bool }\n \n-        fn read_f64(&self) -> f64 { fail ~\"read_f64()\"; }\n-        fn read_f32(&self) -> f32 { fail ~\"read_f32()\"; }\n-        fn read_float(&self) -> float { fail ~\"read_float()\"; }\n+        fn read_f64(&self) -> f64 { die!(~\"read_f64()\"); }\n+        fn read_f32(&self) -> f32 { die!(~\"read_f32()\"); }\n+        fn read_float(&self) -> float { die!(~\"read_float()\"); }\n \n-        fn read_char(&self) -> char { fail ~\"read_char()\"; }\n+        fn read_char(&self) -> char { die!(~\"read_char()\"); }\n \n         fn read_owned_str(&self) -> ~str { doc_as_str(self.next_doc(EsStr)) }\n-        fn read_managed_str(&self) -> @str { fail ~\"read_managed_str()\"; }\n+        fn read_managed_str(&self) -> @str { die!(~\"read_managed_str()\"); }\n \n         // Compound types:\n         fn read_owned<T>(&self, f: fn() -> T) -> T {\n@@ -427,7 +428,7 @@ pub mod writer {\n                             n as u8]),\n             4u => w.write(&[0x10u8 | ((n >> 24_u) as u8), (n >> 16_u) as u8,\n                             (n >> 8_u) as u8, n as u8]),\n-            _ => fail fmt!(\"vint to write too big: %?\", n)\n+            _ => die!(fmt!(\"vint to write too big: %?\", n))\n         };\n     }\n \n@@ -436,7 +437,7 @@ pub mod writer {\n         if n < 0x4000_u { write_sized_vuint(w, n, 2u); return; }\n         if n < 0x200000_u { write_sized_vuint(w, n, 3u); return; }\n         if n < 0x10000000_u { write_sized_vuint(w, n, 4u); return; }\n-        fail fmt!(\"vint to write too big: %?\", n);\n+        die!(fmt!(\"vint to write too big: %?\", n));\n     }\n \n     pub fn Encoder(w: io::Writer) -> Encoder {\n@@ -598,17 +599,17 @@ pub mod writer {\n \n         // FIXME (#2742): implement these\n         fn emit_f64(&self, _v: f64) {\n-            fail ~\"Unimplemented: serializing an f64\";\n+            die!(~\"Unimplemented: serializing an f64\");\n         }\n         fn emit_f32(&self, _v: f32) {\n-            fail ~\"Unimplemented: serializing an f32\";\n+            die!(~\"Unimplemented: serializing an f32\");\n         }\n         fn emit_float(&self, _v: float) {\n-            fail ~\"Unimplemented: serializing a float\";\n+            die!(~\"Unimplemented: serializing a float\");\n         }\n \n         fn emit_char(&self, _v: char) {\n-            fail ~\"Unimplemented: serializing a char\";\n+            die!(~\"Unimplemented: serializing a char\");\n         }\n \n         fn emit_borrowed_str(&self, v: &str) {"}, {"sha": "ba95fa5b66137acf7147da98e9fefc073893f444", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -262,7 +262,7 @@ pub impl<T,U:Unflattener<T>,P:BytePort> FlatPort<T, U, P>: GenericPort<T> {\n     fn recv() -> T {\n         match self.try_recv() {\n             Some(move val) => move val,\n-            None => fail ~\"port is closed\"\n+            None => die!(~\"port is closed\")\n         }\n     }\n     fn try_recv() -> Option<T> {\n@@ -298,7 +298,7 @@ pub impl<T,U:Unflattener<T>,P:BytePort> FlatPort<T, U, P>: GenericPort<T> {\n             }\n         }\n         else {\n-            fail ~\"flatpipe: unrecognized command\";\n+            die!(~\"flatpipe: unrecognized command\");\n         }\n     }\n }\n@@ -480,7 +480,7 @@ pub mod flatteners {\n                 Ok(move json) => {\n                     json::Decoder(move json)\n                 }\n-                Err(e) => fail fmt!(\"flatpipe: can't parse json: %?\", e)\n+                Err(e) => die!(fmt!(\"flatpipe: can't parse json: %?\", e))\n             }\n         }\n     }"}, {"sha": "57b768a742f3c2f07056f46b1a57ac7882bba5ef", "filename": "src/libstd/future.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -65,14 +65,14 @@ impl<A> Future<A> {\n         unsafe {\n             match self.state {\n                 Forced(ref mut v) => { return cast::transmute(v); }\n-                Evaluating => fail ~\"Recursive forcing of future!\",\n+                Evaluating => die!(~\"Recursive forcing of future!\"),\n                 Pending(_) => {}\n             }\n \n             let mut state = Evaluating;\n             self.state <-> state;\n             match move state {\n-                Forced(_) | Evaluating => fail ~\"Logic error.\",\n+                Forced(_) | Evaluating => die!(~\"Logic error.\"),\n                 Pending(move f) => {\n                     self.state = Forced(move f());\n                     self.get_ref()\n@@ -195,7 +195,7 @@ pub mod test {\n     #[should_fail]\n     #[ignore(cfg(target_os = \"win32\"))]\n     pub fn test_futurefail() {\n-        let f = spawn(|| fail);\n+        let f = spawn(|| die!());\n         let _x: ~str = f.get();\n     }\n "}, {"sha": "6e1a08610350711863b78621850a0f0305cdd61d", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -56,7 +56,7 @@\n  *         ];\n  *         let matches = match getopts(vec::tail(args), opts) {\n  *             result::ok(m) { m }\n- *             result::err(f) { fail fail_str(f) }\n+ *             result::err(f) { die!(fail_str(f)) }\n  *         };\n  *         if opt_present(matches, \"h\") || opt_present(matches, \"help\") {\n  *             print_usage(program);\n@@ -348,7 +348,7 @@ fn opt_vals(mm: &Matches, nm: &str) -> ~[Optval] {\n       Some(id) => mm.vals[id],\n       None => {\n         error!(\"No option '%s' defined\", nm);\n-        fail\n+        die!()\n       }\n     };\n }\n@@ -384,7 +384,7 @@ pub fn opts_present(mm: &Matches, names: &[~str]) -> bool {\n  * argument\n  */\n pub fn opt_str(mm: &Matches, nm: &str) -> ~str {\n-    return match opt_val(mm, nm) { Val(copy s) => s, _ => fail };\n+    return match opt_val(mm, nm) { Val(copy s) => s, _ => die!() };\n }\n \n /**\n@@ -400,7 +400,7 @@ pub fn opts_str(mm: &Matches, names: &[~str]) -> ~str {\n           _ => ()\n         }\n     }\n-    fail;\n+    die!();\n }\n \n \n@@ -550,7 +550,7 @@ pub mod groups {\n         match ((*lopt).short_name.len(),\n                (*lopt).long_name.len()) {\n \n-           (0,0) => fail ~\"this long-format option was given no name\",\n+           (0,0) => die!(~\"this long-format option was given no name\"),\n \n            (0,_) => ~[Opt {name:   Long(((*lopt).long_name)),\n                            hasarg: (*lopt).hasarg,\n@@ -567,7 +567,7 @@ pub mod groups {\n                            hasarg: (*lopt).hasarg,\n                            occur:  (*lopt).occur}],\n \n-           (_,_) => fail ~\"something is wrong with the long-form opt\"\n+           (_,_) => die!(~\"something is wrong with the long-form opt\")\n         }\n     }\n \n@@ -598,7 +598,7 @@ pub mod groups {\n             row += match short_name.len() {\n                 0 => ~\"\",\n                 1 => ~\"-\" + short_name + \" \",\n-                _ => fail ~\"the short name should only be 1 char long\",\n+                _ => die!(~\"the short name should only be 1 char long\"),\n             };\n \n             // long option\n@@ -668,7 +668,7 @@ mod tests {\n             assert (opt_present(m, ~\"test\"));\n             assert (opt_str(m, ~\"test\") == ~\"20\");\n           }\n-          _ => { fail ~\"test_reqopt_long failed\"; }\n+          _ => { die!(~\"test_reqopt_long failed\"); }\n         }\n     }\n \n@@ -679,7 +679,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionMissing_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -690,7 +690,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, ArgumentMissing_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -701,7 +701,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionDuplicated_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -715,7 +715,7 @@ mod tests {\n             assert (opt_present(m, ~\"t\"));\n             assert (opt_str(m, ~\"t\") == ~\"20\");\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -726,7 +726,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionMissing_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -737,7 +737,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, ArgumentMissing_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -748,7 +748,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionDuplicated_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -764,7 +764,7 @@ mod tests {\n             assert (opt_present(m, ~\"test\"));\n             assert (opt_str(m, ~\"test\") == ~\"20\");\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -775,7 +775,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (!opt_present(m, ~\"test\")),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -786,7 +786,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, ArgumentMissing_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -797,7 +797,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionDuplicated_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -811,7 +811,7 @@ mod tests {\n             assert (opt_present(m, ~\"t\"));\n             assert (opt_str(m, ~\"t\") == ~\"20\");\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -822,7 +822,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (!opt_present(m, ~\"t\")),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -833,7 +833,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, ArgumentMissing_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -844,7 +844,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionDuplicated_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -857,7 +857,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (opt_present(m, ~\"test\")),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -868,7 +868,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (!opt_present(m, ~\"test\")),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -882,7 +882,7 @@ mod tests {\n             log(error, fail_str(f));\n             check_fail_type(f, UnexpectedArgument_);\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -893,7 +893,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionDuplicated_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -904,7 +904,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (opt_present(m, ~\"t\")),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -915,7 +915,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (!opt_present(m, ~\"t\")),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -930,7 +930,7 @@ mod tests {\n \n             assert (m.free[0] == ~\"20\");\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -941,7 +941,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, OptionDuplicated_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -955,7 +955,7 @@ mod tests {\n           Ok(ref m) => {\n             assert (opt_count(m, ~\"v\") == 1);\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -968,7 +968,7 @@ mod tests {\n           Ok(ref m) => {\n             assert (opt_count(m, ~\"v\") == 2);\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -981,7 +981,7 @@ mod tests {\n           Ok(ref m) => {\n             assert (opt_count(m, ~\"v\") == 2);\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -994,7 +994,7 @@ mod tests {\n           Ok(ref m) => {\n             assert (opt_count(m, ~\"verbose\") == 1);\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -1007,7 +1007,7 @@ mod tests {\n           Ok(ref m) => {\n             assert (opt_count(m, ~\"verbose\") == 2);\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -1022,7 +1022,7 @@ mod tests {\n             assert (opt_present(m, ~\"test\"));\n             assert (opt_str(m, ~\"test\") == ~\"20\");\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -1033,7 +1033,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (!opt_present(m, ~\"test\")),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -1044,7 +1044,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, ArgumentMissing_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -1061,7 +1061,7 @@ mod tests {\n               assert (pair[0] == ~\"20\");\n               assert (pair[1] == ~\"30\");\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -1075,7 +1075,7 @@ mod tests {\n             assert (opt_present(m, ~\"t\"));\n             assert (opt_str(m, ~\"t\") == ~\"20\");\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -1086,7 +1086,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => assert (!opt_present(m, ~\"t\")),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -1097,7 +1097,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, ArgumentMissing_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -1114,7 +1114,7 @@ mod tests {\n             assert (pair[0] == ~\"20\");\n             assert (pair[1] == ~\"30\");\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -1125,7 +1125,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, UnrecognizedOption_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -1136,7 +1136,7 @@ mod tests {\n         let rs = getopts(args, opts);\n         match rs {\n           Err(copy f) => check_fail_type(f, UnrecognizedOption_),\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -1168,7 +1168,7 @@ mod tests {\n             assert (pair[1] == ~\"-60 70\");\n             assert (!opt_present(m, ~\"notpresent\"));\n           }\n-          _ => fail\n+          _ => die!()\n         }\n     }\n \n@@ -1178,7 +1178,7 @@ mod tests {\n         let opts = ~[optopt(~\"e\"), optopt(~\"encrypt\")];\n         let matches = &match getopts(args, opts) {\n           result::Ok(move m) => m,\n-          result::Err(_) => fail\n+          result::Err(_) => die!()\n         };\n         assert opts_present(matches, ~[~\"e\"]);\n         assert opts_present(matches, ~[~\"encrypt\"]);\n@@ -1199,7 +1199,7 @@ mod tests {\n         let opts = ~[optmulti(~\"L\"), optmulti(~\"M\")];\n         let matches = &match getopts(args, opts) {\n           result::Ok(move m) => m,\n-          result::Err(_) => fail\n+          result::Err(_) => die!()\n         };\n         assert opts_present(matches, ~[~\"L\"]);\n         assert opts_str(matches, ~[~\"L\"]) == ~\"foo\";"}, {"sha": "f0929c3dba047f07d8a0e6424c8355c679a25445", "filename": "src/libstd/json.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -123,7 +123,7 @@ pub impl Encoder: serialize::Encoder {\n     fn emit_managed(&self, f: fn()) { f() }\n \n     fn emit_enum(&self, name: &str, f: fn()) {\n-        if name != \"option\" { fail ~\"only supports option enum\" }\n+        if name != \"option\" { die!(~\"only supports option enum\") }\n         f()\n     }\n     fn emit_enum_variant(&self, _name: &str, id: uint, _cnt: uint, f: fn()) {\n@@ -227,7 +227,7 @@ pub impl PrettyEncoder: serialize::Encoder {\n     fn emit_managed(&self, f: fn()) { f() }\n \n     fn emit_enum(&self, name: &str, f: fn()) {\n-        if name != \"option\" { fail ~\"only supports option enum\" }\n+        if name != \"option\" { die!(~\"only supports option enum\") }\n         f()\n     }\n     fn emit_enum_variant(&self, _name: &str, id: uint, _cnt: uint, f: fn()) {\n@@ -743,7 +743,7 @@ pub impl Decoder: serialize::Decoder {\n         debug!(\"read_nil\");\n         match *self.pop() {\n             Null => (),\n-            _ => fail ~\"not a null\"\n+            _ => die!(~\"not a null\")\n         }\n     }\n \n@@ -763,7 +763,7 @@ pub impl Decoder: serialize::Decoder {\n         debug!(\"read_bool\");\n         match *self.pop() {\n             Boolean(b) => b,\n-            _ => fail ~\"not a boolean\"\n+            _ => die!(~\"not a boolean\")\n         }\n     }\n \n@@ -773,29 +773,29 @@ pub impl Decoder: serialize::Decoder {\n         debug!(\"read_float\");\n         match *self.pop() {\n             Number(f) => f,\n-            _ => fail ~\"not a number\"\n+            _ => die!(~\"not a number\")\n         }\n     }\n \n     fn read_char(&self) -> char {\n         let v = str::chars(self.read_owned_str());\n-        if v.len() != 1 { fail ~\"string must have one character\" }\n+        if v.len() != 1 { die!(~\"string must have one character\") }\n         v[0]\n     }\n \n     fn read_owned_str(&self) -> ~str {\n         debug!(\"read_owned_str\");\n         match *self.pop() {\n             String(ref s) => copy *s,\n-            _ => fail ~\"not a string\"\n+            _ => die!(~\"not a string\")\n         }\n     }\n \n     fn read_managed_str(&self) -> @str {\n         debug!(\"read_managed_str\");\n         match *self.pop() {\n             String(ref s) => s.to_managed(),\n-            _ => fail ~\"not a string\"\n+            _ => die!(~\"not a string\")\n         }\n     }\n \n@@ -811,7 +811,7 @@ pub impl Decoder: serialize::Decoder {\n \n     fn read_enum<T>(&self, name: &str, f: fn() -> T) -> T {\n         debug!(\"read_enum(%s)\", name);\n-        if name != ~\"option\" { fail ~\"only supports the option enum\" }\n+        if name != ~\"option\" { die!(~\"only supports the option enum\") }\n         f()\n     }\n \n@@ -826,15 +826,15 @@ pub impl Decoder: serialize::Decoder {\n \n     fn read_enum_variant_arg<T>(&self, idx: uint, f: fn() -> T) -> T {\n         debug!(\"read_enum_variant_arg(idx=%u)\", idx);\n-        if idx != 0 { fail ~\"unknown index\" }\n+        if idx != 0 { die!(~\"unknown index\") }\n         f()\n     }\n \n     fn read_owned_vec<T>(&self, f: fn(uint) -> T) -> T {\n         debug!(\"read_owned_vec()\");\n         let len = match *self.peek() {\n             List(list) => list.len(),\n-            _ => fail ~\"not a list\",\n+            _ => die!(~\"not a list\"),\n         };\n         let res = f(len);\n         self.pop();\n@@ -845,7 +845,7 @@ pub impl Decoder: serialize::Decoder {\n         debug!(\"read_owned_vec()\");\n         let len = match *self.peek() {\n             List(ref list) => list.len(),\n-            _ => fail ~\"not a list\",\n+            _ => die!(~\"not a list\"),\n         };\n         let res = f(len);\n         self.pop();\n@@ -862,7 +862,7 @@ pub impl Decoder: serialize::Decoder {\n                 self.stack.push(&list[idx]);\n                 f()\n             }\n-            _ => fail ~\"not a list\",\n+            _ => die!(~\"not a list\"),\n         }\n     }\n \n@@ -889,20 +889,20 @@ pub impl Decoder: serialize::Decoder {\n                 let obj: &self/~Object = obj;\n \n                 match obj.find(&name.to_owned()) {\n-                    None => fail fmt!(\"no such field: %s\", name),\n+                    None => die!(fmt!(\"no such field: %s\", name)),\n                     Some(json) => {\n                         self.stack.push(json);\n                         f()\n                     }\n                 }\n             }\n-            Number(_) => fail ~\"num\",\n-            String(_) => fail ~\"str\",\n-            Boolean(_) => fail ~\"bool\",\n-            List(_) => fail fmt!(\"list: %?\", top),\n-            Null => fail ~\"null\",\n+            Number(_) => die!(~\"num\"),\n+            String(_) => die!(~\"str\"),\n+            Boolean(_) => die!(~\"bool\"),\n+            List(_) => die!(fmt!(\"list: %?\", top)),\n+            Null => die!(~\"null\"),\n \n-            //_ => fail fmt!(\"not an object: %?\", *top)\n+            //_ => die!(fmt!(\"not an object: %?\", *top))\n         }\n     }\n \n@@ -922,7 +922,7 @@ pub impl Decoder: serialize::Decoder {\n                 self.stack.push(&list[idx]);\n                 f()\n             }\n-            _ => fail ~\"not a list\"\n+            _ => die!(~\"not a list\")\n         }\n     }\n }"}, {"sha": "3016abee464da8f7f5f2a6c6b2491b6029352d98", "filename": "src/libstd/list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -94,7 +94,7 @@ pub pure fn len<T>(ls: @List<T>) -> uint {\n pub pure fn tail<T: Copy>(ls: @List<T>) -> @List<T> {\n     match *ls {\n         Cons(_, tl) => return tl,\n-        Nil => fail ~\"list empty\"\n+        Nil => die!(~\"list empty\")\n     }\n }\n \n@@ -103,7 +103,7 @@ pub pure fn head<T: Copy>(ls: @List<T>) -> T {\n     match *ls {\n       Cons(copy hd, _) => hd,\n       // makes me sad\n-      _ => fail ~\"head invoked on empty list\"\n+      _ => die!(~\"head invoked on empty list\")\n     }\n }\n "}, {"sha": "380e23b23a5e9bc685ea80a84a98cd78134cf9fd", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -366,7 +366,7 @@ pub mod chained {\n         pure fn get(k: K) -> V {\n             let opt_v = self.find(k);\n             if opt_v.is_none() {\n-                fail fmt!(\"Key not found in table: %?\", k);\n+                die!(fmt!(\"Key not found in table: %?\", k));\n             }\n             option::unwrap(move opt_v)\n         }"}, {"sha": "f4fd69aae1e12380a3f44fd08eb9536e4683c770", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -64,14 +64,14 @@ pub fn format_addr(ip: &IpAddr) -> ~str {\n       Ipv4(ref addr) =>  unsafe {\n         let result = uv_ip4_name(addr);\n         if result == ~\"\" {\n-            fail ~\"failed to convert inner sockaddr_in address to str\"\n+            die!(~\"failed to convert inner sockaddr_in address to str\")\n         }\n         result\n       },\n       Ipv6(ref addr) => unsafe {\n         let result = uv_ip6_name(addr);\n         if result == ~\"\" {\n-            fail ~\"failed to convert inner sockaddr_in address to str\"\n+            die!(~\"failed to convert inner sockaddr_in address to str\")\n         }\n         result\n       }\n@@ -183,7 +183,7 @@ pub mod v4 {\n     pub fn parse_addr(ip: &str) -> IpAddr {\n         match try_parse_addr(ip) {\n           result::Ok(move addr) => move addr,\n-          result::Err(ref err_data) => fail err_data.err_msg\n+          result::Err(ref err_data) => die!(err_data.err_msg)\n         }\n     }\n     // the simple, old style numberic representation of\n@@ -278,7 +278,7 @@ pub mod v6 {\n     pub fn parse_addr(ip: &str) -> IpAddr {\n         match try_parse_addr(ip) {\n           result::Ok(move addr) => move addr,\n-          result::Err(copy err_data) => fail err_data.err_msg\n+          result::Err(copy err_data) => die!(err_data.err_msg)\n         }\n     }\n     pub fn try_parse_addr(ip: &str) -> result::Result<IpAddr,ParseAddrErr> {\n@@ -400,7 +400,7 @@ mod test {\n             assert true;\n           }\n           result::Ok(ref addr) => {\n-            fail fmt!(\"Expected failure, but got addr %?\", addr);\n+            die!(fmt!(\"Expected failure, but got addr %?\", addr));\n           }\n         }\n     }\n@@ -413,7 +413,7 @@ mod test {\n             assert true;\n           }\n           result::Ok(ref addr) => {\n-            fail fmt!(\"Expected failure, but got addr %?\", addr);\n+            die!(fmt!(\"Expected failure, but got addr %?\", addr));\n           }\n         }\n     }\n@@ -424,7 +424,7 @@ mod test {\n         let iotask = &uv::global_loop::get();\n         let ga_result = get_addr(localhost_name, iotask);\n         if result::is_err(&ga_result) {\n-            fail ~\"got err result from net::ip::get_addr();\"\n+            die!(~\"got err result from net::ip::get_addr();\")\n         }\n         // note really sure how to realiably test/assert\n         // this.. mostly just wanting to see it work, atm."}, {"sha": "91fdd07f65fd822c82515a78bb305cfe32e45aea", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -1644,7 +1644,7 @@ pub mod test {\n             hl_loop);\n         match actual_resp_result.get_err() {\n           ConnectionRefused => (),\n-          _ => fail ~\"unknown error.. expected connection_refused\"\n+          _ => die!(~\"unknown error.. expected connection_refused\")\n         }\n     }\n     pub fn impl_gl_tcp_ipv4_server_address_in_use() {\n@@ -1685,8 +1685,8 @@ pub mod test {\n             assert true;\n           }\n           _ => {\n-            fail ~\"expected address_in_use listen error,\"+\n-                ~\"but got a different error varient. check logs.\";\n+            die!(~\"expected address_in_use listen error,\"+\n+                ~\"but got a different error varient. check logs.\");\n           }\n         }\n     }\n@@ -1704,8 +1704,8 @@ pub mod test {\n             assert true;\n           }\n           _ => {\n-            fail ~\"expected address_in_use listen error,\"+\n-                      ~\"but got a different error varient. check logs.\";\n+            die!(~\"expected address_in_use listen error,\"+\n+                      ~\"but got a different error varient. check logs.\");\n           }\n         }\n     }\n@@ -1884,14 +1884,14 @@ pub mod test {\n         if result::is_err(&listen_result) {\n             match result::get_err(&listen_result) {\n               GenericListenErr(ref name, ref msg) => {\n-                fail fmt!(\"SERVER: exited abnormally name %s msg %s\",\n-                                *name, *msg);\n+                die!(fmt!(\"SERVER: exited abnormally name %s msg %s\",\n+                                *name, *msg));\n               }\n               AccessDenied => {\n-                fail ~\"SERVER: exited abnormally, got access denied..\";\n+                die!(~\"SERVER: exited abnormally, got access denied..\");\n               }\n               AddressInUse => {\n-                fail ~\"SERVER: exited abnormally, got address in use...\";\n+                die!(~\"SERVER: exited abnormally, got address in use...\");\n               }\n             }\n         }\n@@ -1910,15 +1910,15 @@ pub mod test {\n                 debug!(\"establish_cb %?\", kill_ch);\n             },\n             |new_conn, kill_ch| {\n-                fail fmt!(\"SERVER: shouldn't be called.. %? %?\",\n-                           new_conn, kill_ch);\n+                die!(fmt!(\"SERVER: shouldn't be called.. %? %?\",\n+                           new_conn, kill_ch));\n         });\n         // err check on listen_result\n         if result::is_err(&listen_result) {\n             result::get_err(&listen_result)\n         }\n         else {\n-            fail ~\"SERVER: did not fail as expected\"\n+            die!(~\"SERVER: did not fail as expected\")\n         }\n     }\n \n@@ -1962,7 +1962,7 @@ pub mod test {\n             debug!(\"tcp_write_single err name: %s msg: %s\",\n                 err_data.err_name, err_data.err_msg);\n             // meh. torn on what to do here.\n-            fail ~\"tcp_write_single failed\";\n+            die!(~\"tcp_write_single failed\");\n         }\n     }\n }"}, {"sha": "54a301b03e2a5c186b5f850b4d4454b8da28e014", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -100,7 +100,7 @@ pub fn of_str(str: @~str) -> Rope {\n  */\n pub fn of_substr(str: @~str, byte_offset: uint, byte_len: uint) -> Rope {\n     if byte_len == 0u { return node::Empty; }\n-    if byte_offset + byte_len  > str::len(*str) { fail; }\n+    if byte_offset + byte_len  > str::len(*str) { die!(); }\n     return node::Content(node::of_substr(str, byte_offset, byte_len));\n }\n \n@@ -246,9 +246,9 @@ Section: Transforming ropes\n pub fn sub_chars(rope: Rope, char_offset: uint, char_len: uint) -> Rope {\n     if char_len == 0u { return node::Empty; }\n     match (rope) {\n-      node::Empty => fail,\n+      node::Empty => die!(),\n       node::Content(node) => if char_len > node::char_len(node) {\n-        fail\n+        die!()\n       } else {\n         return node::Content(node::sub_chars(node, char_offset, char_len))\n       }\n@@ -271,9 +271,9 @@ pub fn sub_chars(rope: Rope, char_offset: uint, char_len: uint) -> Rope {\n pub fn sub_bytes(rope: Rope, byte_offset: uint, byte_len: uint) -> Rope {\n     if byte_len == 0u { return node::Empty; }\n     match (rope) {\n-      node::Empty => fail,\n+      node::Empty => die!(),\n       node::Content(node) =>if byte_len > node::byte_len(node) {\n-        fail\n+        die!()\n       } else {\n         return node::Content(node::sub_bytes(node, byte_offset, byte_len))\n       }\n@@ -550,7 +550,7 @@ pub pure fn byte_len(rope: Rope) -> uint {\n  */\n pub fn char_at(rope: Rope, pos: uint) -> char {\n    match (rope) {\n-      node::Empty => fail,\n+      node::Empty => die!(),\n       node::Content(x) => return node::char_at(x, pos)\n    }\n }"}, {"sha": "4938ead9ea8143062465cebf97ce5e19b2af4a61", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -390,7 +390,7 @@ pub impl<D: Decoder, T: Decodable<D>> Option<T>: Decodable<D> {\n                   0 => None,\n                   1 => Some(d.read_enum_variant_arg(\n                       0u, || Decodable::decode(d))),\n-                  _ => fail(fmt!(\"Bad variant for option: %u\", i))\n+                  _ => die!(fmt!(\"Bad variant for option: %u\", i))\n                 }\n             }\n         }"}, {"sha": "608d071d90e5c07269ae671611638f0a4563d6bc", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -85,7 +85,7 @@ pub fn sha1() -> Sha1 {\n                 st.len_high += 1u32;\n                 if st.len_high == 0u32 {\n                     // FIXME: Need better failure mode (#2346)\n-                    fail;\n+                    die!();\n                 }\n             }\n             if st.msg_block_idx == msg_block_len { process_msg_block(st); }"}, {"sha": "c4680056e19df353f56eec8f07b9fb1a0c24f7a1", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -69,7 +69,7 @@ pub pure fn get<T: Copy>(self: SmallIntMap<T>, key: uint) -> T {\n     match find(self, key) {\n       None => {\n         error!(\"smallintmap::get(): key not present\");\n-        fail;\n+        die!();\n       }\n       Some(move v) => return v\n     }"}, {"sha": "37e438ea2b2fc82ff70d044d0f705bf86c27918a", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -548,7 +548,7 @@ impl<T: Copy Ord> MergeState<T> {\n             copy_vec(array, dest, array, c2, len2);\n             array[dest+len2] <-> tmp[c1];\n         } else if len1 == 0 {\n-            fail ~\"Comparison violates its contract!\";\n+            die!(~\"Comparison violates its contract!\");\n         } else {\n             assert len2 == 0;\n             assert len1 > 1;\n@@ -666,7 +666,7 @@ impl<T: Copy Ord> MergeState<T> {\n             copy_vec(array, dest+1, array, c1+1, len1);\n             array[dest] <-> tmp[c2];\n         } else if len2 == 0 {\n-            fail ~\"Comparison violates its contract!\";\n+            die!(~\"Comparison violates its contract!\");\n         } else {\n             assert len1 == 0;\n             assert len2 != 0;\n@@ -914,7 +914,7 @@ mod test_tim_sort {\n         pure fn lt(&self, other: &CVal) -> bool {\n             unsafe {\n                 let rng = rand::Rng();\n-                if rng.gen_float() > 0.995 { fail ~\"It's happening!!!\"; }\n+                if rng.gen_float() > 0.995 { die!(~\"It's happening!!!\"); }\n             }\n             (*self).val < other.val\n         }\n@@ -970,7 +970,7 @@ mod test_tim_sort {\n         };\n \n         tim_sort(arr);\n-        fail ~\"Guarantee the fail\";\n+        die!(~\"Guarantee the fail\");\n     }\n \n     struct DVal { val: uint }\n@@ -1038,7 +1038,7 @@ mod big_tests {\n         fn isSorted<T: Ord>(arr: &[const T]) {\n             for uint::range(0, arr.len()-1) |i| {\n                 if arr[i] > arr[i+1] {\n-                    fail ~\"Array not sorted\";\n+                    die!(~\"Array not sorted\");\n                 }\n             }\n         }\n@@ -1110,7 +1110,7 @@ mod big_tests {\n         fn isSorted<T: Ord>(arr: &[const @T]) {\n             for uint::range(0, arr.len()-1) |i| {\n                 if arr[i] > arr[i+1] {\n-                    fail ~\"Array not sorted\";\n+                    die!(~\"Array not sorted\");\n                 }\n             }\n         }\n@@ -1193,7 +1193,7 @@ mod big_tests {\n                         task::local_data::local_data_set(self.key, @(y+1));\n                     }\n                 }\n-                _ => fail ~\"Expected key to work\",\n+                _ => die!(~\"Expected key to work\"),\n             }\n         }\n     }"}, {"sha": "3a6036194c4b0e3fc74740fd122a759f1c33b10e", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -335,11 +335,11 @@ fn check_cvar_bounds<U>(out_of_bounds: Option<uint>, id: uint, act: &str,\n                         blk: fn() -> U) -> U {\n     match out_of_bounds {\n         Some(0) =>\n-            fail fmt!(\"%s with illegal ID %u - this lock has no condvars!\",\n-                      act, id),\n+            die!(fmt!(\"%s with illegal ID %u - this lock has no condvars!\",\n+                      act, id)),\n         Some(length) =>\n-            fail fmt!(\"%s with illegal ID %u - ID must be less than %u\",\n-                      act, id, length),\n+            die!(fmt!(\"%s with illegal ID %u - ID must be less than %u\",\n+                      act, id, length)),\n         None => blk()\n     }\n }\n@@ -582,7 +582,7 @@ impl &RWlock {\n     /// To be called inside of the write_downgrade block.\n     fn downgrade(token: RWlockWriteMode/&a) -> RWlockReadMode/&a {\n         if !ptr::ref_eq(self, token.lock) {\n-            fail ~\"Can't downgrade() with a different rwlock's write_mode!\";\n+            die!(~\"Can't downgrade() with a different rwlock's write_mode!\");\n         }\n         unsafe {\n             do task::unkillable {\n@@ -935,7 +935,7 @@ mod tests {\n \n         let result: result::Result<(),()> = do task::try |move m2| {\n             do m2.lock {\n-                fail;\n+                die!();\n             }\n         };\n         assert result.is_err();\n@@ -954,7 +954,7 @@ mod tests {\n             do task::spawn |move p| { // linked\n                 let _ = p.recv(); // wait for sibling to get in the mutex\n                 task::yield();\n-                fail;\n+                die!();\n             }\n             do m2.lock_cond |cond| {\n                 c.send(()); // tell sibling go ahead\n@@ -996,7 +996,7 @@ mod tests {\n             }\n             do m2.lock { }\n             c.send(move sibling_convos); // let parent wait on all children\n-            fail;\n+            die!();\n         };\n         assert result.is_err();\n         // child task must have finished by the time try returns\n@@ -1050,7 +1050,7 @@ mod tests {\n             let _ = p.recv();\n             do m.lock_cond |cond| {\n                 if !cond.signal_on(0) {\n-                    fail; // success; punt sibling awake.\n+                    die!(); // success; punt sibling awake.\n                 }\n             }\n         };\n@@ -1290,7 +1290,7 @@ mod tests {\n \n         let result: result::Result<(),()> = do task::try |move x2| {\n             do lock_rwlock_in_mode(x2, mode1) {\n-                fail;\n+                die!();\n             }\n         };\n         assert result.is_err();"}, {"sha": "c287872996c7d0e9d4fd8f9b7dfd231b3df8893d", "filename": "src/libstd/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -68,9 +68,9 @@ pub fn test_main(args: &[~str], tests: &[TestDesc]) {\n     let opts =\n         match parse_opts(args) {\n           either::Left(move o) => o,\n-          either::Right(move m) => fail m\n+          either::Right(move m) => die!(m)\n         };\n-    if !run_tests_console(&opts, tests) { fail ~\"Some tests failed\"; }\n+    if !run_tests_console(&opts, tests) { die!(~\"Some tests failed\"); }\n }\n \n pub struct TestOpts {\n@@ -167,7 +167,7 @@ pub fn run_tests_console(opts: &TestOpts,\n                                             ~[io::Create, io::Truncate]) {\n           result::Ok(w) => Some(w),\n           result::Err(ref s) => {\n-              fail(fmt!(\"can't open output file: %s\", *s))\n+              die!(fmt!(\"can't open output file: %s\", *s))\n           }\n         },\n         None => None\n@@ -514,7 +514,7 @@ mod tests {\n         let args = ~[~\"progname\", ~\"filter\"];\n         let opts = match parse_opts(args) {\n           either::Left(copy o) => o,\n-          _ => fail ~\"Malformed arg in first_free_arg_should_be_a_filter\"\n+          _ => die!(~\"Malformed arg in first_free_arg_should_be_a_filter\")\n         };\n         assert ~\"filter\" == opts.filter.get();\n     }\n@@ -524,7 +524,7 @@ mod tests {\n         let args = ~[~\"progname\", ~\"filter\", ~\"--ignored\"];\n         let opts = match parse_opts(args) {\n           either::Left(copy o) => o,\n-          _ => fail ~\"Malformed arg in parse_ignored_flag\"\n+          _ => die!(~\"Malformed arg in parse_ignored_flag\")\n         };\n         assert (opts.run_ignored);\n     }"}, {"sha": "165c2a3d9bcb9b26e41c2187bfd8b151cc556323", "filename": "src/libstd/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -1042,7 +1042,7 @@ mod tests {\n             == Err(~\"Invalid time\");\n \n         match strptime(~\"Fri Feb 13 15:31:30 2009\", format) {\n-          Err(copy e) => fail e,\n+          Err(copy e) => die!(e),\n           Ok(ref tm) => {\n             assert tm.tm_sec == 30_i32;\n             assert tm.tm_min == 31_i32;\n@@ -1062,7 +1062,7 @@ mod tests {\n         fn test(s: &str, format: &str) -> bool {\n             match strptime(s, format) {\n               Ok(ref tm) => tm.strftime(format) == str::from_slice(s),\n-              Err(copy e) => fail e\n+              Err(copy e) => die!(e)\n             }\n         }\n "}, {"sha": "f89830ed12a9076a575ae85217d599509060950d", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -69,13 +69,13 @@ pub fn delayed_send<T: Owned>(iotask: &IoTask,\n                         } else {\n                             let error_msg = uv::ll::get_last_err_info(\n                                 loop_ptr);\n-                            fail ~\"timer::delayed_send() start failed: \" +\n-                                error_msg;\n+                            die!(~\"timer::delayed_send() start failed: \" +\n+                                error_msg);\n                         }\n                     } else {\n                         let error_msg = uv::ll::get_last_err_info(loop_ptr);\n-                        fail ~\"timer::delayed_send() init failed: \" +\n-                            error_msg;\n+                        die!(~\"timer::delayed_send() init failed: \" +\n+                            error_msg);\n                     }\n                 }\n             };\n@@ -159,7 +159,7 @@ extern fn delayed_send_cb(handle: *uv::ll::uv_timer_t,\n         } else {\n             let loop_ptr = uv::ll::get_loop_for_uv_handle(handle);\n             let error_msg = uv::ll::get_last_err_info(loop_ptr);\n-            fail ~\"timer::sleep() init failed: \"+error_msg;\n+            die!(~\"timer::sleep() init failed: \"+error_msg);\n         }\n     }\n }"}, {"sha": "95deec08feb5e9cbdac251006761cb7aae29acef", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -401,7 +401,7 @@ fn unwrap<T:Owned\n     ww.res <-> s;\n \n     match move s {\n-        None => fail,\n+        None => die!(),\n         Some(Left(move v)) => move v,\n         Some(Right(move port)) => {\n "}, {"sha": "7c947852afd52b45054e965a24e173f3dcd13c72", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -40,7 +40,7 @@ pub impl<S: Encoder> ident: Encodable<S> {\n         let intr = match unsafe {\n             task::local_data::local_data_get(interner_key!())\n         } {\n-            None => fail ~\"encode: TLS interner not set up\",\n+            None => die!(~\"encode: TLS interner not set up\"),\n             Some(intr) => intr\n         };\n \n@@ -53,7 +53,7 @@ pub impl<D: Decoder> ident: Decodable<D> {\n         let intr = match unsafe {\n             task::local_data::local_data_get(interner_key!())\n         } {\n-            None => fail ~\"decode: TLS interner not set up\",\n+            None => die!(~\"decode: TLS interner not set up\"),\n             Some(intr) => intr\n         };\n "}, {"sha": "759d3d2d824fa5cf09eb06f759b690dcfb084136", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -316,7 +316,7 @@ pub fn map_struct_def(struct_def: @ast::struct_def, parent_node: ast_node,\n                     cx.map.insert(ctor_id,\n                                   node_struct_ctor(struct_def, item, p));\n                 }\n-                _ => fail ~\"struct def parent wasn't an item\"\n+                _ => die!(~\"struct def parent wasn't an item\")\n             }\n         }\n     }\n@@ -400,7 +400,7 @@ pub fn node_item_query<Result>(items: map, id: node_id,\n                            error_msg: ~str) -> Result {\n     match items.find(id) {\n         Some(node_item(it, _)) => query(it),\n-        _ => fail(error_msg)\n+        _ => die!(error_msg)\n     }\n }\n "}, {"sha": "bdea3d6d6f32450a05dae8a45d4d90aa98338626", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -66,7 +66,7 @@ pub pure fn stmt_id(s: stmt) -> node_id {\n       stmt_decl(_, id) => id,\n       stmt_expr(_, id) => id,\n       stmt_semi(_, id) => id,\n-      stmt_mac(*) => fail ~\"attempted to analyze unexpanded stmt\",\n+      stmt_mac(*) => die!(~\"attempted to analyze unexpanded stmt\")\n     }\n }\n \n@@ -75,7 +75,7 @@ pub fn variant_def_ids(d: def) -> {enm: def_id, var: def_id} {\n       def_variant(enum_id, var_id) => {\n         return {enm: enum_id, var: var_id}\n       }\n-      _ => fail ~\"non-variant in variant_def_ids\"\n+      _ => die!(~\"non-variant in variant_def_ids\")\n     }\n }\n \n@@ -93,7 +93,7 @@ pub pure fn def_id_of_def(d: def) -> def_id {\n         local_def(id)\n       }\n \n-      def_prim_ty(_) => fail\n+      def_prim_ty(_) => die!()\n     }\n }\n "}, {"sha": "d9b22248b145d15b0b68be970db5d8eb9c20beb7", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -199,7 +199,7 @@ fn eq(a: @ast::meta_item, b: @ast::meta_item) -> bool {\n             // FIXME (#607): Needs implementing\n             // This involves probably sorting the list by name and\n             // meta_item variant\n-            fail ~\"unimplemented meta_item variant\"\n+            die!(~\"unimplemented meta_item variant\")\n           }\n         }\n }"}, {"sha": "b51327a0dfb9de8930d07551afdd9cd01a14e1f4", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -356,7 +356,7 @@ pub impl CodeMap {\n         for self.files.each |fm| { if fm.name == filename { return *fm; } }\n         //XXjdm the following triggers a mismatched type bug\n         //      (or expected function, found _|_)\n-        fail; // (\"asking for \" + filename + \" which we don't know about\");\n+        die!(); // (\"asking for \" + filename + \" which we don't know about\");\n     }\n \n }\n@@ -376,8 +376,8 @@ priv impl CodeMap {\n             }\n         }\n         if (a >= len) {\n-            fail fmt!(\"position %u does not resolve to a source location\",\n-                      pos.to_uint())\n+            die!(fmt!(\"position %u does not resolve to a source location\",\n+                      pos.to_uint()))\n         }\n \n         return a;"}, {"sha": "c454f5dde2b5174d3f5d27234431e7c84377897f", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -63,7 +63,7 @@ struct codemap_t {\n impl codemap_t: span_handler {\n     fn span_fatal(sp: span, msg: &str) -> ! {\n         self.handler.emit(Some((self.cm, sp)), msg, fatal);\n-        fail;\n+        die!();\n     }\n     fn span_err(sp: span, msg: &str) {\n         self.handler.emit(Some((self.cm, sp)), msg, error);\n@@ -89,7 +89,7 @@ impl codemap_t: span_handler {\n impl handler_t: handler {\n     fn fatal(msg: &str) -> ! {\n         (self.emit)(None, msg, fatal);\n-        fail;\n+        die!();\n     }\n     fn err(msg: &str) {\n         (self.emit)(None, msg, error);"}, {"sha": "e406e09aac0cc4cb36c7417bc482d659f8e61a20", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -812,8 +812,8 @@ fn mk_struct_fields(fields: ~[@ast::struct_field]) -> ~[field] {\n     do fields.map |field| {\n         let (ident, mutbl) = match field.node.kind {\n             ast::named_field(ident, mutbl, _) => (ident, mutbl),\n-            _ => fail ~\"[auto_encode] does not support \\\n-                        unnamed fields\",\n+            _ => die!(~\"[auto_encode] does not support \\\n+                        unnamed fields\")\n         };\n \n         field {\n@@ -954,9 +954,9 @@ fn mk_enum_ser_body(\n             ast::tuple_variant_kind(args) =>\n                 ser_variant(cx, span, variant.node.name, v_idx, args),\n             ast::struct_variant_kind(*) =>\n-                fail ~\"struct variants unimplemented\",\n+                die!(~\"struct variants unimplemented\"),\n             ast::enum_variant_kind(*) =>\n-                fail ~\"enum variants unimplemented\",\n+                die!(~\"enum variants unimplemented\"),\n         }\n     };\n \n@@ -1047,9 +1047,9 @@ fn mk_enum_deser_body(\n                 }\n             },\n             ast::struct_variant_kind(*) =>\n-                fail ~\"struct variants unimplemented\",\n+                die!(~\"struct variants unimplemented\"),\n             ast::enum_variant_kind(*) =>\n-                fail ~\"enum variants unimplemented\",\n+                die!(~\"enum variants unimplemented\")\n         };\n \n         let pat = @ast::pat {"}, {"sha": "1502332859cc3a626f6f8a990e209fcc8039b519", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -40,13 +40,13 @@ pub impl parser::Parser: proto_parser {\n         self.expect(token::COLON);\n         let dir = match copy self.token {\n           token::IDENT(n, _) => self.interner.get(n),\n-          _ => fail\n+          _ => die!()\n         };\n         self.bump();\n         let dir = match dir {\n           @~\"send\" => send,\n           @~\"recv\" => recv,\n-          _ => fail\n+          _ => die!()\n         };\n \n         let typarms = if self.token == token::LT {"}, {"sha": "4a9a22de50f50b81c542826fdeb128c6fd23e5d8", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -184,7 +184,7 @@ pub mod rt {\n                 Some(ast) => ast,\n                 None => {\n                     error!(\"Parse error with ```\\n%s\\n```\", s);\n-                    fail\n+                    die!()\n                 }\n             }\n         }\n@@ -399,7 +399,7 @@ fn mk_token(cx: ext_ctxt, sp: span, tok: token::Token) -> @ast::expr {\n                                   ~[mk_ident(cx, sp, ident)]);\n         }\n \n-        INTERPOLATED(_) => fail ~\"quote! with interpolated token\",\n+        INTERPOLATED(_) => die!(~\"quote! with interpolated token\"),\n \n         _ => ()\n     }\n@@ -437,7 +437,7 @@ fn mk_token(cx: ext_ctxt, sp: span, tok: token::Token) -> @ast::expr {\n         DOLLAR => \"DOLLAR\",\n         UNDERSCORE => \"UNDERSCORE\",\n         EOF => \"EOF\",\n-        _ => fail\n+        _ => die!()\n     };\n     build::mk_path(cx, sp,\n                    ids_ext(cx, ~[name.to_owned()]))\n@@ -467,7 +467,7 @@ fn mk_tt(cx: ext_ctxt, sp: span, tt: &ast::token_tree)\n         }\n \n         ast::tt_delim(ref tts) => mk_tts(cx, sp, *tts),\n-        ast::tt_seq(*) => fail ~\"tt_seq in quote!\",\n+        ast::tt_seq(*) => die!(~\"tt_seq in quote!\"),\n \n         ast::tt_nonterminal(sp, ident) => {\n "}, {"sha": "1c7a12a428243ca591cf047afed212e977e3bd00", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -125,7 +125,7 @@ pub type matcher_pos = ~{\n pub fn copy_up(&& mpu: matcher_pos_up) -> matcher_pos {\n     match &mpu {\n       &matcher_pos_up(Some(ref mp)) => copy (*mp),\n-      _ => fail\n+      _ => die!()\n     }\n }\n \n@@ -362,7 +362,7 @@ pub fn parse(sess: parse_sess,\n                         fmt!(\"%s ('%s')\", *sess.interner.get(name),\n                              *sess.interner.get(bind))\n                       }\n-                      _ => fail\n+                      _ => die!()\n                     } }), ~\" or \");\n                 return error(sp, fmt!(\n                     \"Local ambiguity: multiple parsing options: \\\n@@ -387,7 +387,7 @@ pub fn parse(sess: parse_sess,\n                         parse_nt(rust_parser, *sess.interner.get(name))));\n                     ei.idx += 1u;\n                   }\n-                  _ => fail\n+                  _ => die!()\n                 }\n                 cur_eis.push(move ei);\n "}, {"sha": "8ed10fb138d57f9db2362ad521b48102c49a63b2", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -117,7 +117,7 @@ pub fn strip_doc_comment_decoration(comment: ~str) -> ~str {\n         return str::connect(lines, ~\"\\n\");\n     }\n \n-    fail ~\"not a doc-comment: \" + comment;\n+    die!(~\"not a doc-comment: \" + comment);\n }\n \n fn read_to_eol(rdr: string_reader) -> ~str {\n@@ -295,7 +295,7 @@ fn consume_comment(rdr: string_reader, code_to_the_left: bool,\n         read_block_comment(rdr, code_to_the_left, comments);\n     } else if rdr.curr == '#' && nextch(rdr) == '!' {\n         read_shebang_comment(rdr, code_to_the_left, comments);\n-    } else { fail; }\n+    } else { die!(); }\n     debug!(\"<<< consume comment\");\n }\n "}, {"sha": "65fc86a106a610adc78e92a02b030caa47466808", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -203,7 +203,7 @@ fn hex_digit_val(c: char) -> int {\n     if in_range(c, '0', '9') { return (c as int) - ('0' as int); }\n     if in_range(c, 'a', 'f') { return (c as int) - ('a' as int) + 10; }\n     if in_range(c, 'A', 'F') { return (c as int) - ('A' as int) + 10; }\n-    fail;\n+    die!();\n }\n \n fn bin_digit_value(c: char) -> int { if c == '0' { return 0; } return 1; }"}, {"sha": "51acf76ac30054ad36779c0ba9ccbe9488eecc7f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -2500,7 +2500,7 @@ pub impl Parser {\n                           _ => None\n                         }\n                       }\n-                      _ => fail\n+                      _ => die!()\n                     };\n \n                     match maybe_bound {\n@@ -3892,7 +3892,7 @@ pub impl Parser {\n             let metadata = self.parse_optional_meta();\n             view_item_use(ident, metadata, self.get_id())\n         } else {\n-            fail;\n+            die!();\n         };\n         self.expect(token::SEMI);\n         @ast::view_item { node: node,"}, {"sha": "bcf4281132df65cefddaa88d0635f819b0f8b212", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -209,7 +209,7 @@ pub fn to_str(in: @ident_interner, t: Token) -> ~str {\n                       nt_block(*) => ~\"block\",\n                       nt_stmt(*) => ~\"statement\",\n                       nt_pat(*) => ~\"pattern\",\n-                      nt_expr(*) => fail ~\"should have been handled above\",\n+                      nt_expr(*) => die!(~\"should have been handled above\"),\n                       nt_ty(*) => ~\"type\",\n                       nt_ident(*) => ~\"identifier\",\n                       nt_path(*) => ~\"path\",\n@@ -262,7 +262,7 @@ pub fn flip_delimiter(t: token::Token) -> token::Token {\n       token::RPAREN => token::LPAREN,\n       token::RBRACE => token::LBRACE,\n       token::RBRACKET => token::LBRACKET,\n-      _ => fail\n+      _ => die!()\n     }\n }\n "}, {"sha": "0159a74ab88b8d17f111c1389e725aa91f7d4c61", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -532,7 +532,7 @@ pub impl printer {\n           }\n           EOF => {\n             // EOF should never get here.\n-            fail;\n+            die!();\n           }\n         }\n     }"}, {"sha": "72fd205fee9ecdceb043c1e777d26028be7b1ecf", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -422,10 +422,10 @@ pub fn print_type_ex(s: ps, &&ty: @ast::Ty, print_colons: bool) {\n         word(s.s, ~\"]\");\n       }\n       ast::ty_mac(_) => {\n-          fail ~\"print_type doesn't know how to print a ty_mac\";\n+          die!(~\"print_type doesn't know how to print a ty_mac\");\n       }\n       ast::ty_infer => {\n-          fail ~\"print_type shouldn't see a ty_infer\";\n+          die!(~\"print_type shouldn't see a ty_infer\");\n       }\n \n     }\n@@ -617,7 +617,7 @@ pub fn print_enum_def(s: ps, enum_definition: ast::enum_def,\n         word_space(s, ~\"=\");\n         match enum_definition.variants[0].node.kind {\n             ast::tuple_variant_kind(args) => print_type(s, args[0].ty),\n-            _ => fail ~\"newtype syntax with struct?\"\n+            _ => die!(~\"newtype syntax with struct?\")\n         }\n         word(s.s, ~\";\");\n         end(s);\n@@ -686,7 +686,7 @@ pub fn print_struct(s: ps,\n             }\n \n             match field.node.kind {\n-                ast::named_field(*) => fail ~\"unexpected named field\",\n+                ast::named_field(*) => die!(~\"unexpected named field\"),\n                 ast::unnamed_field => {\n                     maybe_print_comment(s, field.span.lo);\n                     print_type(s, field.node.ty);\n@@ -709,7 +709,7 @@ pub fn print_struct(s: ps,\n \n         for struct_def.fields.each |field| {\n             match field.node.kind {\n-                ast::unnamed_field => fail ~\"unexpected unnamed field\",\n+                ast::unnamed_field => die!(~\"unexpected unnamed field\"),\n                 ast::named_field(ident, mutability, visibility) => {\n                     hardbreak_if_not_bol(s);\n                     maybe_print_comment(s, field.span.lo);\n@@ -995,7 +995,7 @@ pub fn print_if(s: ps, test: @ast::expr, blk: ast::blk,\n               }\n               // BLEAH, constraints would be great here\n               _ => {\n-                  fail ~\"print_if saw if with weird alternative\";\n+                  die!(~\"print_if saw if with weird alternative\");\n               }\n             }\n           }\n@@ -1296,7 +1296,7 @@ pub fn print_expr(s: ps, &&expr: @ast::expr) {\n                         }\n                         end(s); // close enclosing cbox\n                     }\n-                    None => fail\n+                    None => die!()\n                 }\n             } else {\n                 // the block will close the pattern's ibox\n@@ -2244,7 +2244,7 @@ pub mod test {\n \n     fn string_check<T : Eq> (given : &T, expected: &T) {\n         if !(given == expected) {\n-            fail (fmt!(\"given %?, expected %?\",given,expected));\n+            die!(fmt!(\"given %?, expected %?\",given,expected));\n         }\n     }\n "}, {"sha": "e9f799d1f75014319cc3d631fe4e375a5c749025", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -25,7 +25,7 @@ pub fn alist_get<A: Copy, B: Copy>(lst: alist<A,B>, k: A) -> B {\n     for lst.data.each |entry| {\n         if eq_fn(entry.key, k) { return entry.value; }\n     }\n-    fail;\n+    die!();\n }\n \n #[inline]"}, {"sha": "a27d7a771c5c3159fd1f68680771cf619af42a7c", "filename": "src/test/auxiliary/issue2378a.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378a.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -14,7 +14,7 @@ impl methods<T:copy> for maybe<T> {\n     fn ~[](idx: uint) -> T {\n         match self {\n           just(t) { t }\n-          nothing { fail; }\n+          nothing { die!(); }\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "cda4f32ab5ceb6cb3f7d12ad6a7de6d90e7baaae", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -36,6 +36,6 @@ impl bool: read {\n pub fn read<T: read Copy>(s: ~str) -> T {\n     match read::readMaybe(s) {\n       Some(x) => x,\n-      _ => fail ~\"read failed!\"\n+      _ => die!(~\"read failed!\")\n     }\n }"}, {"sha": "35bd280928b1fa441be781276b507ba51a6d8136", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -212,7 +212,7 @@ fn bfs2(graph: graph, key: node_id) -> bfs_result {\n         match *c {\n           white => { -1i64 }\n           black(parent) => { parent }\n-          _ => { fail ~\"Found remaining gray nodes in BFS\" }\n+          _ => { die!(~\"Found remaining gray nodes in BFS\") }\n         }\n     }\n }\n@@ -294,7 +294,7 @@ fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n         match *c {\n           white => { -1i64 }\n           black(parent) => { parent }\n-          _ => { fail ~\"Found remaining gray nodes in BFS\" }\n+          _ => { die!(~\"Found remaining gray nodes in BFS\") }\n         }\n     }\n }"}, {"sha": "4a6eaad9e14ed27c58e7a2cac442b40ba20c098a", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -56,7 +56,7 @@ macro_rules! follow (\n             $(Some($message($($x,)* move next)) => {\n                 let $next = move next;\n                 move $e })+\n-                _ => { fail }\n+                _ => { die!() }\n         }\n     );\n \n@@ -67,7 +67,7 @@ macro_rules! follow (\n             $(Some($message(move next)) => {\n                 let $next = move next;\n                 move $e })+\n-                _ => { fail }\n+                _ => { die!() }\n         }\n     )\n )"}, {"sha": "f2fd95920bc11efb7f0e810bbfa707a893731fce", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -118,7 +118,7 @@ pub fn solve_grid(g: grid_t) {\n             ptr = ptr + 1u;\n         } else {\n             // no: redo this field aft recoloring pred; unless there is none\n-            if ptr == 0u { fail ~\"No solution found for this sudoku\"; }\n+            if ptr == 0u { die!(~\"No solution found for this sudoku\"); }\n             ptr = ptr - 1u;\n         }\n     }"}, {"sha": "20dcb079597e5ac99ac6e940c9a8885776cde5c4", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -66,7 +66,7 @@ fn r(l: @nillist) -> r {\n fn recurse_or_fail(depth: int, st: Option<State>) {\n     if depth == 0 {\n         debug!(\"unwinding %.4f\", precise_time_s());\n-        fail;\n+        die!();\n     } else {\n         let depth = depth - 1;\n "}, {"sha": "415df0e9fa8d905b324a13c9b5f23cf0d840059d", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -46,6 +46,6 @@ fn main() {\n     let (p,c) = pipes::stream();\n     child_generation(uint::from_str(args[1]).get(), move c);\n     if p.try_recv().is_none() {\n-        fail ~\"it happened when we slumbered\";\n+        die!(~\"it happened when we slumbered\");\n     }\n }"}, {"sha": "3b1a20136b6626d2487ed2b39481635cbbc547fa", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -77,7 +77,7 @@ fn main() {\n         }\n         // Grandparent group waits for middle group to be gone, then fails\n         error!(\"Grandparent group wakes up and fails\");\n-        fail;\n+        die!();\n     };\n     assert x.is_err();\n }"}, {"sha": "1cce1dee2f79c5b67378eafe32ac815713d3144b", "filename": "src/test/compile-fail/alt-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-join.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,7 +11,7 @@\n // a good test that we merge paths correctly in the presence of a\n // variable that's used before it's declared\n \n-fn my_fail() -> ! { fail; }\n+fn my_fail() -> ! { die!(); }\n \n fn main() {\n     match true { false => { my_fail(); } true => { } }"}, {"sha": "d044d9bdc964b2dd4a153ddb933e6ce5630d79bb", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,7 +12,7 @@\n // Tests that a function with a ! annotation always actually fails\n \n fn bad_bang(i: uint) -> ! {\n-    if i < 0u { } else { fail; }\n+    if i < 0u { } else { die!(); }\n     //~^ ERROR expected `!` but found `()`\n }\n "}, {"sha": "fea31ef1738269e4b0d3272da762a24fb001c096", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -20,6 +20,6 @@ fn main() {\n     let x = Some(X { x: () });\n     match move x {\n         Some(ref _y @ move _z) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        None => fail\n+        None => die!()\n     }\n }"}, {"sha": "b58fe788846dddf5f9f4eb8e309564c973a42885", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -20,6 +20,6 @@ fn main() {\n     let x = Some((X { x: () }, X { x: () }));\n     match move x {\n         Some((ref _y, move _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        None => fail\n+        None => die!()\n     }\n }"}, {"sha": "8f9682e662c69d03f1da9cd3d8e297e76cf83c00", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -22,6 +22,6 @@ fn main() {\n     let x = some2(X { x: () }, X { x: () });\n     match move x {\n         some2(ref _y, move _z) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        none2 => fail\n+        none2 => die!()\n     }\n }"}, {"sha": "6c14dd4d141873c77a139852326e753c849b2e8d", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -20,6 +20,6 @@ fn main() {\n     let x = Some((X { x: () }, X { x: () }));\n     match move x {\n         Some((move _y, ref _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n-        None => fail\n+        None => die!()\n     }\n }"}, {"sha": "45b5a896f6b119a594a2f535de5042a02444f0e4", "filename": "src/test/compile-fail/bind-by-move-no-guards.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -13,8 +13,8 @@ fn main() {\n     let x = Some(p);\n     c.send(false);\n     match move x {\n-        Some(move z) if z.recv() => { fail }, //~ ERROR cannot bind by-move into a pattern guard\n+        Some(move z) if z.recv() => { die!() }, //~ ERROR cannot bind by-move into a pattern guard\n         Some(move z) => { assert !z.recv(); },\n-        None => fail\n+        None => die!()\n     }\n }"}, {"sha": "c8b8ebecce812f11d069bbaa7d4477eaae5f7c41", "filename": "src/test/compile-fail/bind-by-move-no-lvalues-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -22,6 +22,6 @@ fn main() {\n     let x = Some(X { x: () });\n     match x {\n         Some(move _z) => { }, //~ ERROR cannot bind by-move when matching an lvalue\n-        None => fail\n+        None => die!()\n     }\n }"}, {"sha": "889ccb3fd99348165a54aa812feb831df84aed7a", "filename": "src/test/compile-fail/bind-by-move-no-lvalues-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -24,6 +24,6 @@ fn main() {\n     let x = Y { y: Some(X { x: () }) };\n     match x.y {\n         Some(move _z) => { }, //~ ERROR cannot bind by-move when matching an lvalue\n-        None => fail\n+        None => die!()\n     }\n }"}, {"sha": "40196fe0817a4e76e5ad7735036d343ad578ac22", "filename": "src/test/compile-fail/bind-by-move-no-sub-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -20,6 +20,6 @@ fn main() {\n     let x = Some(X { x: () });\n     match move x {\n         Some(move _y @ ref _z) => { }, //~ ERROR cannot bind by-move with sub-bindings\n-        None => fail\n+        None => die!()\n     }\n }"}, {"sha": "6ce631c68a3ddc70e8e2ab723c41fa09fae231df", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -23,7 +23,7 @@ fn main() {\n                 x = X(Left((0,0))); //~ ERROR assigning to captured outer mutable variable\n                 (*f)()\n             },\n-            _ => fail\n+            _ => die!()\n         }\n     }\n }"}, {"sha": "9aec4b49ef2606a5d869ef05a5e524f40228e396", "filename": "src/test/compile-fail/borrowck-loan-local-as-both-mut-and-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -16,7 +16,7 @@ use core::either::{Either, Left, Right};\n                 *x = Right(1.0);\n                 *z\n             }\n-            _ => fail\n+            _ => die!()\n         }\n     }\n "}, {"sha": "0c2903765fc4b853c0f11546882f6eec4e56f7f5", "filename": "src/test/compile-fail/borrowck-ref-into-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -14,7 +14,7 @@ fn main() {\n         Some(ref m) => {\n             msg = m;\n         },  \n-        None => { fail }\n+        None => { die!() }\n     }   \n     io::println(*msg);\n }"}, {"sha": "a76649fb990995b11900bb79045396a52e253902", "filename": "src/test/compile-fail/closure-that-fails.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-that-fails.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -2,6 +2,6 @@ fn foo(f: fn() -> !) {}\n \n fn main() {\n     // Type inference didn't use to be able to handle this:\n-    foo(|| fail);\n+    foo(|| die!());\n     foo(|| 22); //~ ERROR mismatched types\n }"}, {"sha": "ef84b11d5fc1c10120761521f2407180a7654781", "filename": "src/test/compile-fail/deref-non-pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fderef-non-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fderef-non-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderef-non-pointer.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,6 +11,6 @@\n // error-pattern:cannot be dereferenced\n fn main() {\n   match *1 {\n-      _ => { fail; }\n+      _ => { die!(); }\n   }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "6d4f5ba2f4c1bd893f6e99a4996e054d0d200f4d", "filename": "src/test/compile-fail/fail-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:mismatched types\n \n-fn main() { fail 5; }\n+fn main() { die!(5); }"}, {"sha": "eab577f713bd1c76233f0cdb16992c7091d744cc", "filename": "src/test/compile-fail/fail-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Ffail-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Ffail-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-simple.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,5 +12,5 @@\n \n // error-pattern:unexpected token\n fn main() {\n-  fail @ ;\n+  die!(@);\n }"}, {"sha": "8e32c0869624c456796d004e7ff78422a2495a87", "filename": "src/test/compile-fail/fail-type-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern:expected `~str` but found `~[int]`\n-fn main() { fail ~[0i]; }\n+fn main() { die!(~[0i]); }"}, {"sha": "3df9dc8300ad27ca6908c3c59d082cf5a5f776d4", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -14,7 +14,7 @@ trait vec_monad<A> {\n \n impl<A> ~[A]: vec_monad<A> {\n     fn bind<B>(f: fn(A) -> ~[B]) {\n-        let mut r = fail;\n+        let mut r = die!();\n         for self.each |elt| { r += f(*elt); }\n         //~^ WARNING unreachable expression\n         //~^^ ERROR the type of this value must be known"}, {"sha": "51883aa97340f15b6e4c9e8b0b5c27660fa64394", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n fn fail_len(v: ~[const int]) -> uint {\n-    let mut i = fail;\n+    let mut i = die!();\n     for v.each |x| { i += 1u; }\n     //~^ WARNING unreachable statement\n     //~^^ ERROR the type of this value must be known\n     return i;\n }\n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "abaeb37e6c26bf6d9c0233df58153aba742bf0cb", "filename": "src/test/compile-fail/issue-2330.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2330.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -16,7 +16,7 @@ trait channel<T> {\n \n // `chan` is not a trait, it's an enum\n impl int: chan { //~ ERROR can only implement trait types\n-    fn send(v: int) { fail }\n+    fn send(v: int) { die!() }\n }\n \n fn main() {"}, {"sha": "37945839de4c807d0bcd86518a6bea60a2f0cafa", "filename": "src/test/compile-fail/issue-2354.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2354.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -16,8 +16,8 @@\n  */\n fn foo() { //~ ERROR this open brace is not closed\n   match Some(x) {\n-      Some(y) { fail; }\n-      None    { fail; }\n+      Some(y) { die!(); }\n+      None    { die!(); }\n }\n \n fn bar() {"}, {"sha": "7624e33e9add9389e3154f3dae8fce9058144fc6", "filename": "src/test/compile-fail/issue-2611-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -24,7 +24,7 @@ struct E {\n }\n \n impl E: A {\n-  fn b<F:Copy, G>(_x: F) -> F { fail } //~ ERROR in method `b`, type parameter 0 has 1 bound, but\n+  fn b<F:Copy, G>(_x: F) -> F { die!() } //~ ERROR in method `b`, type parameter 0 has 1 bound, but\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "1e923974d33cd94affd5f38c7e9ad99f51ca4e58", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -21,7 +21,7 @@ struct E {\n }\n \n impl E: A {\n-  fn b<F:Copy Const, G>(_x: F) -> F { fail } //~ ERROR in method `b`, type parameter 0 has 2 bounds, but\n+  fn b<F:Copy Const, G>(_x: F) -> F { die!() } //~ ERROR in method `b`, type parameter 0 has 2 bounds, but\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "e868d022d57583bba8b49b2dc9c8aa53c4949f82", "filename": "src/test/compile-fail/issue-2611-5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -22,7 +22,7 @@ struct E {\n \n impl E: A {\n   // n.b. The error message is awful -- see #3404\n-  fn b<F:Copy, G>(_x: G) -> G { fail } //~ ERROR method `b` has an incompatible type\n+  fn b<F:Copy, G>(_x: G) -> G { die!() } //~ ERROR method `b` has an incompatible type\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "45b7263429335b4e6a50dddca4266d798d2d0ee1", "filename": "src/test/compile-fail/issue-2817.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn uuid() -> uint { fail; }\n+fn uuid() -> uint { die!(); }\n \n-fn from_str(s: ~str) -> uint { fail; }\n-fn to_str(u: uint) -> ~str { fail; }\n-fn uuid_random() -> uint { fail; }\n+fn from_str(s: ~str) -> uint { die!(); }\n+fn to_str(u: uint) -> ~str { die!(); }\n+fn uuid_random() -> uint { die!(); }\n \n fn main() {\n     do uint::range(0, 100000) |_i| { //~ ERROR Do-block body must return bool, but\n@@ -22,4 +22,4 @@ fn main() {\n     do uint::range(0, 100000) |_i| { //~ ERROR mismatched types\n         ~\"str\"\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "cde878e122aec93dcc26ffe5ea5809ce528f1eea", "filename": "src/test/compile-fail/issue-3021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -26,7 +26,7 @@ fn siphash(k0 : u64) -> siphash {\n            //~^ ERROR unresolved name: k0\n         }\n     }\n-    fail;\n+    die!();\n }\n \n fn main() {}"}, {"sha": "74136d955731d393063f7ba1bb6db18a73dea171", "filename": "src/test/compile-fail/issue-3601.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3601.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -37,6 +37,6 @@ fn main() {\n         ~Element(ed) => match ed.kind {\n             ~HTMLImageElement(d) if d.image.is_some() => { true }\n         },\n-        _ => fail ~\"WAT\" //~ ERROR wat\n+        _ => die!(~\"WAT\") //~ ERROR wat\n     };\n }"}, {"sha": "5fc692ed3ec728117e063b96a1e76dc8cd1e308b", "filename": "src/test/compile-fail/issue-3668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -16,7 +16,7 @@ trait PTrait {\n impl P: PTrait {\n    fn getChildOption() -> Option<@P> {\n        const childVal: @P = self.child.get(); //~ ERROR attempt to use a non-constant value in a constant\n-       fail;\n+       die!();\n    }\n }\n "}, {"sha": "e910ea1fa5749d1d60e689aceb0fab93e6cb563e", "filename": "src/test/compile-fail/issue-897-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn g() -> ! { fail; }\n+fn g() -> ! { die!(); }\n fn f() -> ! {\n     return 42i; //~ ERROR expected `!` but found `int`\n     g(); //~ WARNING unreachable statement"}, {"sha": "f5f4b376a99cfcf5bf7462a0d4e1ddc5dbad64f1", "filename": "src/test/compile-fail/issue-897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -10,6 +10,6 @@\n \n fn f() -> ! {\n     return 42i; //~ ERROR expected `!` but found `int`\n-    fail; //~ WARNING unreachable statement\n+    die!(); //~ WARNING unreachable statement\n }\n fn main() { }"}, {"sha": "fcdf9438e3d9ef62e01852d81c8c7b2d87e3a1ac", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,7 +11,7 @@\n fn send<T: Owned>(ch: _chan<T>, -data: T) {\n     log(debug, ch);\n     log(debug, data);\n-    fail;\n+    die!();\n }\n \n enum _chan<T> = int;\n@@ -23,4 +23,4 @@ fn test00_start(ch: _chan<~int>, message: ~int, _count: ~int) {\n     log(debug, message); //~ ERROR use of moved value: `message`\n }\n \n-fn main() { fail; }\n+fn main() { die!(); }"}, {"sha": "b8db996ebfa54c2ff49e4c6da9260611a137a5c3", "filename": "src/test/compile-fail/non-exhaustive-match-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match-nested.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -16,8 +16,8 @@ enum u { c, d }\n fn main() {\n   let x = a(c);\n   match x {\n-      a(d) => { fail ~\"hello\"; }\n-      b => { fail ~\"goodbye\"; }\n+      a(d) => { die!(~\"hello\"); }\n+      b => { die!(~\"goodbye\"); }\n     }\n }\n "}, {"sha": "9b2d129a1a8cabbf30c4ddf02a0b668b461fd4b0", "filename": "src/test/compile-fail/noncopyable-match-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fnoncopyable-match-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fnoncopyable-match-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-match-pattern.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -14,6 +14,6 @@ fn main() {\n         Some(copy z) => { //~ ERROR copying a noncopyable value\n             do z.with |b| { assert !*b; }\n         }\n-        None => fail\n+        None => die!()\n     }\n }"}, {"sha": "ef4f0f4fb53e7ea0868e205d9fe5da500434c578", "filename": "src/test/compile-fail/not-enough-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-enough-arguments.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -13,7 +13,7 @@\n // unrelated errors.\n \n fn foo(a: int, b: int, c: int, d:int) {\n-  fail;\n+  die!();\n }\n \n fn main() {"}, {"sha": "7942a38caa0db8c323b9eaca5359c1e140f4f125", "filename": "src/test/compile-fail/pattern-tyvar-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -17,6 +17,6 @@ use option::Some;\n \n enum bar { t1((), Option<~[int]>), t2, }\n \n-fn foo(t: bar) -> int { match t { t1(_, Some(x)) => { return x * 3; } _ => { fail; } } }\n+fn foo(t: bar) -> int { match t { t1(_, Some(x)) => { return x * 3; } _ => { die!(); } } }\n \n fn main() { }"}, {"sha": "3b4200bb4be59403dec8db38d1b0b99574879d0e", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -21,7 +21,7 @@ fn foo(t: bar) {\n       t1(_, Some::<int>(x)) => {\n         log(debug, x);\n       }\n-      _ => { fail; }\n+      _ => { die!(); }\n     }\n }\n "}, {"sha": "2fc487d13d2ebe3cae057643de5062cc5b9b7a69", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -63,6 +63,6 @@ fn main() {\n }\n \n fn check_pp<T>(expr: T, f: fn(pprust::ps, T), expect: str) {\n-    fail;\n+    die!();\n }\n "}, {"sha": "43b1d287739e64294e716a9cf78fd0c57ec7aea3", "filename": "src/test/compile-fail/qquote-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -58,6 +58,6 @@ fn main() {\n }\n \n fn check_pp<T>(expr: T, f: fn(pprust::ps, T), expect: str) {\n-    fail;\n+    die!();\n }\n "}, {"sha": "95a5222d14c4c8b0c63ae79682919a4f8993efa8", "filename": "src/test/compile-fail/regions-fn-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn of<T>() -> @fn(T) { fail; }\n-fn subtype<T>(x: @fn(T)) { fail; }\n+fn of<T>() -> @fn(T) { die!(); }\n+fn subtype<T>(x: @fn(T)) { die!(); }\n \n fn test_fn<T>(_x: &x/T, _y: &y/T, _z: &z/T) {\n     // Here, x, y, and z are free.  Other letters"}, {"sha": "3ead89b2082d158a45441fc08e6b0cc879e3950d", "filename": "src/test/compile-fail/regions-fn-subtyping.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn of<T>() -> @fn(T) { fail; }\n-fn subtype<T>(x: @fn(T)) { fail; }\n+fn of<T>() -> @fn(T) { die!(); }\n+fn subtype<T>(x: @fn(T)) { die!(); }\n \n fn test_fn<T>(_x: &x/T, _y: &y/T, _z: &z/T) {\n     // Here, x, y, and z are free.  Other letters\n@@ -54,4 +54,4 @@ fn test_fn<T>(_x: &x/T, _y: &y/T, _z: &z/T) {\n         of::<fn(&a/T) -> @fn(&a/T)>());\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "c6cd05b7a65264e47ab5d6d506a1e043f6422869", "filename": "src/test/compile-fail/tag-that-dare-not-speak-its-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -16,7 +16,7 @@\n extern mod core;\n \n fn last<T>(v: ~[const &T]) -> core::Option<T> {\n-    fail;\n+    die!();\n }\n \n fn main() {"}, {"sha": "ea40d8bd077624ccf939adf8d2cfcb5b1bf3b1bd", "filename": "src/test/compile-fail/tag-type-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -14,4 +14,4 @@ enum quux<T> { bar }\n \n fn foo(c: quux) { assert (false); }\n \n-fn main() { fail; }\n+fn main() { die!(); }"}, {"sha": "801e3e710300e29de0b5a17589ea8ddd54724c69", "filename": "src/test/compile-fail/warn-foreign-int-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-foreign-int-types.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -16,5 +16,5 @@ extern mod xx {\n \n fn main() {\n   // let it fail to verify warning message\n-  fail\n+  die!()\n }"}, {"sha": "7b24d256cb0054c014b872a89a8e41f4de9d1509", "filename": "src/test/pretty/issue-929.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fpretty%2Fissue-929.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Fpretty%2Fissue-929.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-929.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f() { if (1 == fail) { } else { } }\n+fn f() { if (1 == die!()) { } else { } }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "ac465d81b7e134ece603ee80a5fcae5f3dae0e64", "filename": "src/test/run-fail/alt-bot-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -14,6 +14,6 @@ fn foo(s: ~str) { }\n \n fn main() {\n     let i =\n-        match Some::<int>(3) { None::<int> => { fail } Some::<int>(_) => { fail } };\n+        match Some::<int>(3) { None::<int> => { die!() } Some::<int>(_) => { die!() } };\n     foo(i);\n }"}, {"sha": "c74e16f42220882ffe3be7e3b52741d3c1e345cb", "filename": "src/test/run-fail/alt-disc-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Falt-disc-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Falt-disc-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Falt-disc-bot.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn f() -> ! { fail ~\"quux\" }\n+fn f() -> ! { die!(~\"quux\") }\n fn g() -> int { match f() { true => { 1 } false => { 0 } } }\n fn main() { g(); }"}, {"sha": "e30a73601c6ff9109819d2ec1745972cae514a46", "filename": "src/test/run-fail/alt-wildcards.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Falt-wildcards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Falt-wildcards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Falt-wildcards.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,9 +11,9 @@\n // error-pattern:squirrelcupcake\n fn cmp() -> int {\n     match (option::Some('a'), option::None::<char>) {\n-        (option::Some(_), _) => { fail ~\"squirrelcupcake\"; }\n-        (_, option::Some(_)) => { fail; }\n-        _                    => { fail ~\"wat\"; }\n+        (option::Some(_), _) => { die!(~\"squirrelcupcake\"); }\n+        (_, option::Some(_)) => { die!(); }\n+        _                    => { die!(~\"wat\"); }\n     }\n }\n "}, {"sha": "c367510994891f7d058375eac8d0c88215392bb5", "filename": "src/test/run-fail/args-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fargs-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // error-pattern:meep\n-fn f(a: int, b: int, c: @int) { fail ~\"moop\"; }\n+fn f(a: int, b: int, c: @int) { die!(~\"moop\"); }\n \n-fn main() { f(1, fail ~\"meep\", @42); }\n+fn main() { f(1, die!(~\"meep\"), @42); }"}, {"sha": "1e553d1089dab51eafc8db603b06a7fd6741c801", "filename": "src/test/run-fail/binop-fail-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { log(error, s); fail ~\"quux\"; }\n+fn my_err(s: ~str) -> ! { log(error, s); die!(~\"quux\"); }\n fn main() { 3u == my_err(~\"bye\"); }"}, {"sha": "1e553d1089dab51eafc8db603b06a7fd6741c801", "filename": "src/test/run-fail/binop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fbinop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fbinop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { log(error, s); fail ~\"quux\"; }\n+fn my_err(s: ~str) -> ! { log(error, s); die!(~\"quux\"); }\n fn main() { 3u == my_err(~\"bye\"); }"}, {"sha": "f16e838aaf56a488696a27a9200d1768f33cb2e8", "filename": "src/test/run-fail/bug-811.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fbug-811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fbug-811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-811.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -16,6 +16,6 @@ type port_id = int;\n \n enum chan_t<T> = {task: task_id, port: port_id};\n \n-fn send<T: Owned>(ch: chan_t<T>, data: T) { fail; }\n+fn send<T: Owned>(ch: chan_t<T>, data: T) { die!(); }\n \n-fn main() { fail ~\"quux\"; }\n+fn main() { die!(~\"quux\"); }"}, {"sha": "38e29d02fdd936adc05a87ea14324a28168858e3", "filename": "src/test/run-fail/doublefail.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fdoublefail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fdoublefail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdoublefail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -10,6 +10,6 @@\n \n //error-pattern:One\n fn main() {\n-    fail ~\"One\";\n-    fail ~\"Two\";\n-}\n\\ No newline at end of file\n+    die!(~\"One\");\n+    die!(~\"Two\");\n+}"}, {"sha": "ac5eaefe32b5cb47a3010361eb07fcedbe24d86d", "filename": "src/test/run-fail/explicit-fail-msg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern:wooooo\n fn main() {\n-    let mut a = 1; if 1 == 1 { a = 2; } fail ~\"woooo\" + ~\"o\";\n+    let mut a = 1; if 1 == 1 { a = 2; } die!(~\"woooo\" + ~\"o\");\n }"}, {"sha": "acc5ef916686e7bc8f6297c6ccdc95f9f7697e37", "filename": "src/test/run-fail/explicit-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fexplicit-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fexplicit-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,4 +12,4 @@\n \n \n // error-pattern:explicit\n-fn main() { fail; }\n+fn main() { die!(); }"}, {"sha": "6cb0f4f3260bc05c6185b1c5e5893275cf5cdf02", "filename": "src/test/run-fail/expr-alt-fail-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fexpr-alt-fail-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fexpr-alt-fail-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-alt-fail-fn.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,7 +12,7 @@\n \n \n // error-pattern:explicit failure\n-fn f() -> ! { fail }\n+fn f() -> ! { die!() }\n \n fn g() -> int { let x = match true { true => { f() } false => { 10 } }; return x; }\n "}, {"sha": "b70382955e30186bd3b5cc9e4705864ea8be1d06", "filename": "src/test/run-fail/expr-alt-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fexpr-alt-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fexpr-alt-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-alt-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,4 +12,4 @@\n \n \n // error-pattern:explicit failure\n-fn main() { let x = match true { false => { 0 } true => { fail } }; }\n+fn main() { let x = match true { false => { 0 } true => { die!() } }; }"}, {"sha": "2b840a71b8b41316379daf1744238a918e41744c", "filename": "src/test/run-fail/expr-fn-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fexpr-fn-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fexpr-fn-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-fn-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,6 +12,6 @@\n \n \n // error-pattern:explicit failure\n-fn f() -> ! { fail }\n+fn f() -> ! { die!() }\n \n fn main() { f(); }"}, {"sha": "cd6efa7302a468743fcaef272cc3264ad31ac488", "filename": "src/test/run-fail/expr-if-fail-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fexpr-if-fail-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fexpr-if-fail-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-if-fail-fn.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,7 +12,7 @@\n \n \n // error-pattern:explicit failure\n-fn f() -> ! { fail }\n+fn f() -> ! { die!() }\n \n fn g() -> int { let x = if true { f() } else { 10 }; return x; }\n "}, {"sha": "d39a0271e64de2fe1b4294de55e810d40c8f0e8d", "filename": "src/test/run-fail/expr-if-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,4 +12,4 @@\n \n \n // error-pattern:explicit failure\n-fn main() { let x = if false { 0 } else if true { fail } else { 10 }; }\n+fn main() { let x = if false { 0 } else if true { die!() } else { 10 }; }"}, {"sha": "7f59d499fd3b1f5cec1d53ecc492a1996fa685f4", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -37,7 +37,7 @@ fn main() {\n         do task::spawn {\n             let result = count(5u);\n             debug!(\"result = %?\", result);\n-            fail;\n+            die!();\n         };\n     }\n }"}, {"sha": "2755f8e47a2196f1676d3ae180f60ab837e6851e", "filename": "src/test/run-fail/fail-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Ffail-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Ffail-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-main.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:moop\n extern mod std;\n-fn main() { fail ~\"moop\"; }\n+fn main() { die!(~\"moop\"); }"}, {"sha": "3e6f8a433c68a714840b2bd71da16291fd16690b", "filename": "src/test/run-fail/fmt-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Ffmt-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Ffmt-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffmt-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,4 +11,4 @@\n // error-pattern:meh\n extern mod std;\n \n-fn main() { let str_var: ~str = ~\"meh\"; fail fmt!(\"%s\", str_var); }\n+fn main() { let str_var: ~str = ~\"meh\"; die!(fmt!(\"%s\", str_var)); }"}, {"sha": "bbae1b1739da9e44b3a98cbeb0fb32b798c6b53f", "filename": "src/test/run-fail/for-each-loop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:moop\n extern mod std;\n-fn main() { for uint::range(0u, 10u) |_i| { fail ~\"moop\"; } }\n+fn main() { for uint::range(0u, 10u) |_i| { die!(~\"moop\"); } }"}, {"sha": "f0bc250f1cbfaa1a9bf0b05e761956411531b0af", "filename": "src/test/run-fail/if-check-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-check-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -19,7 +19,7 @@ fn foo(x: uint) {\n     if even(x) {\n         log(debug, x);\n     } else {\n-        fail ~\"Number is odd\";\n+        die!(~\"Number is odd\");\n     }\n }\n "}, {"sha": "1212b550cfbc97182e5f6cac07a51317d751473c", "filename": "src/test/run-fail/if-cond-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn my_err(s: ~str) -> ! { log(error, s); fail ~\"quux\"; }\n+fn my_err(s: ~str) -> ! { log(error, s); die!(~\"quux\"); }\n fn main() { if my_err(~\"bye\") { } }"}, {"sha": "deb8192fc3be2205cdbeee77d77ddc56b5a7f78c", "filename": "src/test/run-fail/issue-2156.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2156.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,6 +15,6 @@ use io::ReaderUtil;\n \n fn main() {\n     do io::with_str_reader(~\"\") |rdr| {\n-        match rdr.read_char() { '=' => { } _ => { fail } }\n+        match rdr.read_char() { '=' => { } _ => { die!() } }\n     }\n }"}, {"sha": "de7475b3303dc7fdb371b7c031b599291235c060", "filename": "src/test/run-fail/issue-2272.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fissue-2272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fissue-2272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2272.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -22,5 +22,5 @@ fn main() {\n         },\n         a: ~0\n     };\n-    fail;\n-}\n\\ No newline at end of file\n+    die!();\n+}"}, {"sha": "ca4774cd53ebc84f374a6f782c4a0e23ff0e919f", "filename": "src/test/run-fail/issue-3029.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-3029.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:so long\n fn main() {\n     let x = ~[], y = ~[3];\n-    fail ~\"so long\";\n+    die!(~\"so long\");\n     x += y;\n     ~\"good\" + ~\"bye\";\n }"}, {"sha": "f020cb7eafdf0b72c9a68993ecb1e239cabc51b6", "filename": "src/test/run-fail/linked-failure2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Flinked-failure2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,7 +12,7 @@\n \n // error-pattern:fail\n \n-fn child() { fail; }\n+fn child() { die!(); }\n \n fn main() {\n     let (p, _c) = pipes::stream::<()>();"}, {"sha": "78e3798399c1fc8a324df8434e44531fc62d46b5", "filename": "src/test/run-fail/linked-failure3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Flinked-failure3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure3.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,7 +12,7 @@\n \n // error-pattern:fail\n \n-fn grandchild() { fail ~\"grandchild dies\"; }\n+fn grandchild() { die!(~\"grandchild dies\"); }\n \n fn child() {\n     let (p, _c) = pipes::stream::<int>();"}, {"sha": "63a7cc7ed893c356a521f0163c8475e80fc92b33", "filename": "src/test/run-fail/morestack1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fmorestack1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fmorestack1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack1.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:explicit failure\n+// error-pattern:fail\n fn getbig(i: int) {\n     if i != 0 {\n         getbig(i - 1);\n     } else {\n-        fail;\n+        die!();\n     }\n }\n \n fn main() {\n     getbig(100000);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "58957aac2038a7d2e38ece4db854e55a9e898b03", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -27,7 +27,7 @@ fn getbig_call_c_and_fail(i: int) {\n     } else {\n         unsafe {\n             rustrt::last_os_error();\n-            fail;\n+            die!();\n         }\n     }\n }"}, {"sha": "01296a829690346b87ce1373f1b5d7a80cab96e8", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -19,7 +19,7 @@ fn getbig_and_fail(&&i: int) {\n     if i != 0 {\n         getbig_and_fail(i - 1);\n     } else {\n-        fail;\n+        die!();\n     }\n }\n "}, {"sha": "e8b6785d1e800c4008674d7ca3fa6ef567d142c4", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -19,7 +19,7 @@ fn getbig_and_fail(&&i: int) {\n     if i != 0 {\n         getbig_and_fail(i - 1);\n     } else {\n-        fail;\n+        die!();\n     }\n }\n "}, {"sha": "32d8f84292bd6ac998cf02cdf8c058048dbbaba6", "filename": "src/test/run-fail/rhs-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Frhs-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Frhs-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frhs-type.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -14,4 +14,4 @@\n \n struct T { t: ~str }\n \n-fn main() { let pth = fail ~\"bye\"; let rs: T = T {t: pth}; }\n+fn main() { let pth = die!(~\"bye\"); let rs: T = T {t: pth}; }"}, {"sha": "a27404e46fe6f0c3c163a87c384a403ef5557d1d", "filename": "src/test/run-fail/rt-log-trunc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Frt-log-trunc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Frt-log-trunc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-log-trunc.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,7 +12,7 @@\n // error-pattern:[...]\n \n fn main() {\n-    fail ~\"\\\n+    die!(~\"\\\n           aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n           aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n           aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n@@ -70,5 +70,5 @@ fn main() {\n           aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n           aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n           aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\n-          \";\n+          \");\n }"}, {"sha": "de4b062d7003a7087e9f67837cb52656e55a1a5b", "filename": "src/test/run-fail/rt-set-exit-status-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     // normally. In this case we're going to fail, so instead of of\n     // returning 50 the process will return the typical rt failure code.\n     os::set_exit_status(50);\n-    fail;\n-}\n\\ No newline at end of file\n+    die!();\n+}"}, {"sha": "ece9f5fdc51e264da6c8dd03b31d1568e1813863", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -34,5 +34,5 @@ fn main() {\n     do task::spawn {\n       let i = r(5);\n     };\n-    fail;\n+    die!();\n }"}, {"sha": "48adac555863bddfb72fbfab70ebb73c53c0a4ff", "filename": "src/test/run-fail/run-unexported-tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -17,5 +17,5 @@ mod m {\n     pub fn exported() { }\n \n     #[test]\n-    fn unexported() { fail ~\"runned an unexported test\"; }\n+    fn unexported() { die!(~\"runned an unexported test\"); }\n }"}, {"sha": "e7bfe1b67c5f358c0bcdc6d3c3e817d8f60f4610", "filename": "src/test/run-fail/spawnfail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fspawnfail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,7 +15,7 @@ extern mod std;\n // We don't want to see any invalid reads\n fn main() {\n     fn f() {\n-        fail;\n+        die!();\n     }\n     task::spawn(|| f() );\n-}\n\\ No newline at end of file\n+}"}, {"sha": "fc108a4fbdd19c711111a434f156314f0b5fdbac", "filename": "src/test/run-fail/task-comm-recv-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-comm-recv-block.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,7 +12,7 @@\n \n fn goodfail() {\n     task::yield();\n-    fail ~\"goodfail\";\n+    die!(~\"goodfail\");\n }\n \n fn main() {"}, {"sha": "559c7c2d89d42b82ef9df2a87aec80dc900716b0", "filename": "src/test/run-fail/unwind-alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-alt.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,10 +15,10 @@ fn test_box() {\n }\n fn test_str() {\n   let res = match false { true => { ~\"happy\" },\n-     _ => fail ~\"non-exhaustive match failure\" };\n+     _ => die!(~\"non-exhaustive match failure\") };\n   assert res == ~\"happy\";\n }\n fn main() {\n     test_box();\n     test_str();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ca6d154f4e60f15fc6c8abcc66acb09ca6a2e88c", "filename": "src/test/run-fail/unwind-box-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn failfn() {\n-    fail;\n+    die!();\n }\n \n fn main() {"}, {"sha": "94a03142beca2a1e7d556945ef2f051d6794ed81", "filename": "src/test/run-fail/unwind-box-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn failfn() {\n-    fail;\n+    die!();\n }\n \n fn main() {"}, {"sha": "13b1bc36ba95d2e1e1dedbbba7d1b5dcc03e74c5", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn failfn() {\n-    fail;\n+    die!();\n }\n \n struct r {"}, {"sha": "1469a56a6d41bc817d424fed3afd5a9ccd0655b4", "filename": "src/test/run-fail/unwind-box-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-str.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,11 +11,11 @@\n // error-pattern:fail\n \n fn failfn() {\n-    fail;\n+    die!();\n }\n \n fn main() {\n     let x = @~\"hi\";\n     failfn();\n     log(error, x);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "d41e0f193243d13b1632f3507fca75c66f3e2fe9", "filename": "src/test/run-fail/unwind-box-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-trait.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn failfn() {\n-    fail;\n+    die!();\n }\n \n trait i {\n@@ -26,4 +26,4 @@ fn main() {\n     let x = ~0 as i;\n     failfn();\n     log(error, x);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "8f24d2922f995138d31bdd852e7ab13cfc85035d", "filename": "src/test/run-fail/unwind-box-unique-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,11 +11,11 @@\n // error-pattern:fail\n \n fn failfn() {\n-    fail;\n+    die!();\n }\n \n fn main() {\n     let x = @~~0;\n     failfn();\n     log(error, x);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "8a1dcef5ca51d9ce599b8a77f90cc74c0dfb75ee", "filename": "src/test/run-fail/unwind-box-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,11 +11,11 @@\n // error-pattern:fail\n \n fn failfn() {\n-    fail;\n+    die!();\n }\n \n fn main() {\n     let x = @~0;\n     failfn();\n     log(error, x);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e2559e66eaed13ae82af1fc3ae5c9bdb3d985d33", "filename": "src/test/run-fail/unwind-box-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,11 +11,11 @@\n // error-pattern:fail\n \n fn failfn() {\n-    fail;\n+    die!();\n }\n \n fn main() {\n     let x = @~[0, 1, 2, 3, 4, 5];\n     failfn();\n     log(error, x);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "02761fef9768493ca0ee3a76b4addb1469171365", "filename": "src/test/run-fail/unwind-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,10 +11,10 @@\n // error-pattern:fail\n \n fn failfn() {\n-    fail;\n+    die!();\n }\n \n fn main() {\n     @0;\n     failfn();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f6a3fa1ab67bc20c71effd033fdf2b041239f9fc", "filename": "src/test/run-fail/unwind-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-closure.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,11 +11,11 @@\n // error-pattern:fail\n \n fn f(a: @int) {\n-    fail;\n+    die!();\n }\n \n fn main() {\n     let b = @0;\n     let g : fn@() = |move b|f(b);\n     g();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "5c776b5fd7adce17b887c31cfa361d7fd22346ea", "filename": "src/test/run-fail/unwind-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,5 +12,5 @@\n \n fn main() {\n     @0;\n-    fail;\n-}\n\\ No newline at end of file\n+    die!();\n+}"}, {"sha": "69106602ec8911a2a4cc2a3ed9702ec6a19cfca4", "filename": "src/test/run-fail/unwind-initializer-indirect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -10,8 +10,8 @@\n \n // error-pattern:fail\n \n-fn f() -> @int { fail; }\n+fn f() -> @int { die!(); }\n \n fn main() {\n     let a: @int = f();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7047a77a6e7776f2c6f7e17828094c618de1634a", "filename": "src/test/run-fail/unwind-initializer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,6 +12,6 @@\n \n fn main() {\n     let a: @int = {\n-        fail;\n+        die!();\n     };\n-}\n\\ No newline at end of file\n+}"}, {"sha": "4dac04d379d4f0eb3b5b7ddcb47e669ede59bb38", "filename": "src/test/run-fail/unwind-interleaved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,11 +12,11 @@\n \n fn a() { }\n \n-fn b() { fail; }\n+fn b() { die!(); }\n \n fn main() {\n     let x = ~[0];\n     a();\n     let y = ~[0];\n     b();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7c5782a18131311edbd008d4084978de101e6f9b", "filename": "src/test/run-fail/unwind-iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,11 +11,11 @@\n // error-pattern:fail\n \n fn x(it: fn(int)) {\n-    fail;\n+    die!();\n     it(0);\n }\n \n fn main() {\n     let a = @0;\n     x(|_i| { } );\n-}\n\\ No newline at end of file\n+}"}, {"sha": "8621209fd5d1a255af598b38aecb581b65d84341", "filename": "src/test/run-fail/unwind-iter2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -16,5 +16,5 @@ fn x(it: fn(int)) {\n }\n \n fn main() {\n-    x(|_x| fail );\n-}\n\\ No newline at end of file\n+    x(|_x| die!() );\n+}"}, {"sha": "89d6dd4970ee6323b7a25564fb5c6f24984d6636", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -21,8 +21,8 @@ fn main() {\n         let cheese = copy cheese;\n         let f = fn@() {\n             let chew = mush + cheese;\n-            fail ~\"so yummy\"\n+            die!(~\"so yummy\")\n         };\n         f();\n     });\n-}\n\\ No newline at end of file\n+}"}, {"sha": "116918f044ce35c2212ccd1c0dc9c3f1cead3bd5", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -22,7 +22,7 @@ fn main() {\n         arr += ~[@~\"key stuff\"];\n         map.insert(copy arr, arr + ~[@~\"value stuff\"]);\n         if arr.len() == 5 {\n-            fail;\n+            die!();\n         }\n     }\n }"}, {"sha": "2419edf650c42b50abb61ab8085d2550e4de2068", "filename": "src/test/run-fail/unwind-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-move.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -10,10 +10,10 @@\n \n // error-pattern:fail\n fn f(-_a: @int) {\n-    fail;\n+    die!();\n }\n \n fn main() {\n     let a = @0;\n     f(move a);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "450c982eb3f3763922eb3938654f8b7ffaf98914", "filename": "src/test/run-fail/unwind-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-nested.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     {\n         let b = @0;\n         {\n-            fail;\n+            die!();\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7a5c81eed7a1ffe0d2b71041745b86de93bc11a6", "filename": "src/test/run-fail/unwind-partial-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-fn f() -> ~[int] { fail; }\n+fn f() -> ~[int] { die!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns.\n@@ -25,4 +25,4 @@ fn partial() {\n fn main() {\n     prime();\n     partial();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "12f0a7b47853c6ee588cfdb9e16f7036c65a2127", "filename": "src/test/run-fail/unwind-partial-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-fn f() -> ~[int] { fail; }\n+fn f() -> ~[int] { die!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns.\n@@ -25,4 +25,4 @@ fn partial() {\n fn main() {\n     prime();\n     partial();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "87df161cfd3adbfe6b37975aee3c53d7c8afdeb2", "filename": "src/test/run-fail/unwind-partial-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-fn f() -> ~[int] { fail; }\n+fn f() -> ~[int] { die!(); }\n \n // Voodoo. In unwind-alt we had to do this to trigger the bug. Might\n // have been to do with memory allocation patterns.\n@@ -25,4 +25,4 @@ fn partial() {\n fn main() {\n     prime();\n     partial();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "324783893f96ee41af6e33649a0297f76e0341c3", "filename": "src/test/run-fail/unwind-rec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-rec.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn build() -> ~[int] {\n-    fail;\n+    die!();\n }\n \n struct Blk { node: ~[int] }\n@@ -20,4 +20,4 @@ fn main() {\n     let blk = Blk {\n         node: build()\n     };\n-}\n\\ No newline at end of file\n+}"}, {"sha": "0e2c279e98ab281af207e34f14d4993001818e62", "filename": "src/test/run-fail/unwind-rec2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-rec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-rec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-rec2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,7 +15,7 @@ fn build1() -> ~[int] {\n }\n \n fn build2() -> ~[int] {\n-    fail;\n+    die!();\n }\n \n struct Blk { node: ~[int], span: ~[int] }\n@@ -25,4 +25,4 @@ fn main() {\n         node: build1(),\n         span: build2()\n     };\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a5ff830249503a13d61ff0aea58d283d44ada8d0", "filename": "src/test/run-fail/unwind-resource-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,7 +12,7 @@\n \n struct r {\n     i: int,\n-    drop { fail ~\"squirrel\" }\n+    drop { die!(~\"squirrel\") }\n }\n \n fn r(i: int) -> r { r { i: i } }"}, {"sha": "69575e6e13a60279cf55065904c3858100b03974", "filename": "src/test/run-fail/unwind-resource-fail2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -13,13 +13,13 @@\n \n struct r {\n     i: int,\n-    drop { fail ~\"wombat\" }\n+    drop { die!(~\"wombat\") }\n }\n \n fn r(i: int) -> r { r { i: i } }\n \n fn main() {\n     @0;\n     let r = move r(0);\n-    fail;\n-}\n\\ No newline at end of file\n+    die!();\n+}"}, {"sha": "10adfdf1fa3d6c14a7043d7bf04bd07fc633cf3b", "filename": "src/test/run-fail/unwind-resource-fail3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail3.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -19,7 +19,7 @@ fn faily_box(i: @int) -> faily_box { faily_box { i: i } }\n \n impl faily_box : Drop {\n     fn finalize(&self) {\n-        fail ~\"quux\";\n+        die!(~\"quux\");\n     }\n }\n "}, {"sha": "42a4a7e376d5c22fa874b1d02ad2f9c0c7425450", "filename": "src/test/run-fail/unwind-stacked.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-stacked.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,7 +12,7 @@\n \n fn f() {\n     let a = @0;\n-    fail;\n+    die!();\n }\n \n fn g() {\n@@ -23,4 +23,4 @@ fn g() {\n fn main() {\n     let a = @0;\n     g();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "6cd234ae77062c79adc77aa6f2f723ea0a6c2d51", "filename": "src/test/run-fail/unwind-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn fold_local() -> @~[int]{\n-    fail;\n+    die!();\n }\n \n fn main() {"}, {"sha": "83ed7efcd44bad3aa91728d7f2e4b4b7b2fe5da4", "filename": "src/test/run-fail/unwind-tup2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,7 +15,7 @@ fn fold_local() -> @~[int]{\n }\n \n fn fold_remote() -> @~[int]{\n-    fail;\n+    die!();\n }\n \n fn main() {"}, {"sha": "56321e3382955965c84820481e176ff17a05fa25", "filename": "src/test/run-fail/unwind-uninitialized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,10 +11,10 @@\n // error-pattern:fail\n \n fn f() {\n-    fail;\n+    die!();\n }\n \n fn main() {\n     f();\n     let a = @0;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e9de0c4520a05b436a1b8c581fb84bb4b4504ea3", "filename": "src/test/run-fail/unwind-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Funwind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-unique.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,10 +11,10 @@\n // error-pattern:fail\n \n fn failfn() {\n-    fail;\n+    die!();\n }\n \n fn main() {\n     ~0;\n     failfn();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "de483d6dc479895c2420f05618a4ed227494bdd9", "filename": "src/test/run-fail/while-body-fails.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // error-pattern:quux\n-fn main() { let x: int = { while true { fail ~\"quux\"; } ; 8 } ; }\n+fn main() { let x: int = { while true { die!(~\"quux\"); } ; 8 } ; }"}, {"sha": "951737aa9b265d262dbdeb247d4b0e98a4a73716", "filename": "src/test/run-fail/while-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern:giraffe\n fn main() {\n-    fail { while true { fail ~\"giraffe\"}; ~\"clandestine\" };\n+    die!({ while true { die!(~\"giraffe\")}; ~\"clandestine\" });\n }"}, {"sha": "2a27be56bec865764d82c058467961984b689355", "filename": "src/test/run-fail/zip-different-lengths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fzip-different-lengths.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -37,5 +37,5 @@ fn main() {\n \n     assert same_length(chars, ints);\n     let ps = zip(chars, ints);\n-    fail ~\"the impossible happened\";\n+    die!(~\"the impossible happened\");\n }"}, {"sha": "ffa0b5e0cf1cd98a13e7613cb8126a59f8f6e554", "filename": "src/test/run-pass/alt-bot-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Falt-bot-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Falt-bot-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-bot-2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // n.b. This was only ever failing with optimization disabled.\n-fn a() -> int { match return 1 { 2 => 3, _ => fail } }\n+fn a() -> int { match return 1 { 2 => 3, _ => die!() } }\n fn main() { a(); }"}, {"sha": "1e5e541a1de34ad466183e57b53d64631c581c63", "filename": "src/test/run-pass/alt-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Falt-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Falt-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-bot.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,6 +11,6 @@\n \n fn main() {\n     let i: int =\n-        match Some::<int>(3) { None::<int> => { fail } Some::<int>(_) => { 5 } };\n+        match Some::<int>(3) { None::<int> => { die!() } Some::<int>(_) => { 5 } };\n     log(debug, i);\n }"}, {"sha": "02ebcdc34e4f89913a97a2ccbbbcf4cf0803f61e", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -22,7 +22,7 @@ fn foo(s: @int) {\n         log(debug, y); // ref up then down\n \n       }\n-      _ => { debug!(\"?\"); fail; }\n+      _ => { debug!(\"?\"); die!(); }\n     }\n     log(debug, ::core::sys::refcount(s));\n     assert (::core::sys::refcount(s) == count + 1u);"}, {"sha": "89db197e1163750a0b79bfa87c257b6a2889c83b", "filename": "src/test/run-pass/alt-pattern-lit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -14,7 +14,7 @@ fn altlit(f: int) -> int {\n     match f {\n       10 => { debug!(\"case 10\"); return 20; }\n       11 => { debug!(\"case 11\"); return 22; }\n-      _  => fail ~\"the impossible happened\"\n+      _  => die!(~\"the impossible happened\")\n     }\n }\n "}, {"sha": "6eec537b723984e349b0428fa82a1589a8cb5753", "filename": "src/test/run-pass/alt-range.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Falt-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Falt-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-range.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,31 +11,31 @@\n fn main() {\n     match 5u {\n       1u..5u => {}\n-      _ => fail ~\"should match range\",\n+      _ => die!(~\"should match range\"),\n     }\n     match 5u {\n-      6u..7u => fail ~\"shouldn't match range\",\n+      6u..7u => die!(~\"shouldn't match range\"),\n       _ => {}\n     }\n     match 5u {\n-      1u => fail ~\"should match non-first range\",\n+      1u => die!(~\"should match non-first range\"),\n       2u..6u => {}\n-      _ => fail ~\"math is broken\"\n+      _ => die!(~\"math is broken\")\n     }\n     match 'c' {\n       'a'..'z' => {}\n-      _ => fail ~\"should suppport char ranges\"\n+      _ => die!(~\"should suppport char ranges\")\n     }\n     match -3 {\n       -7..5 => {}\n-      _ => fail ~\"should match signed range\"\n+      _ => die!(~\"should match signed range\")\n     }\n     match 3.0 {\n       1.0..5.0 => {}\n-      _ => fail ~\"should match float range\"\n+      _ => die!(~\"should match float range\")\n     }\n     match -1.5 {\n       -3.6..3.6 => {}\n-      _ => fail ~\"should match negative float range\"\n+      _ => die!(~\"should match negative float range\")\n     }\n }"}, {"sha": "f04706a0e3c9a1dca21c95fb4cdee6c7f6a4d2cd", "filename": "src/test/run-pass/alt-ref-binding-in-guard-3256.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -14,6 +14,6 @@ fn main() {\n         Some(ref z) if z.with(|b| *b) => {\n             do z.with |b| { assert *b; }\n         },\n-        _ => fail\n+        _ => die!()\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "6801bda1f352a93814d9401d8eeee22df1b3a643", "filename": "src/test/run-pass/alt-str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Falt-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Falt-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-str.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,21 +11,21 @@\n // Issue #53\n \n fn main() {\n-    match ~\"test\" { ~\"not-test\" => fail, ~\"test\" => (), _ => fail }\n+    match ~\"test\" { ~\"not-test\" => die!(), ~\"test\" => (), _ => die!() }\n \n     enum t { tag1(~str), tag2, }\n \n \n     match tag1(~\"test\") {\n-      tag2 => fail,\n-      tag1(~\"not-test\") => fail,\n+      tag2 => die!(),\n+      tag1(~\"not-test\") => die!(),\n       tag1(~\"test\") => (),\n-      _ => fail\n+      _ => die!()\n     }\n \n-    let x = match ~\"a\" { ~\"a\" => 1, ~\"b\" => 2, _ => fail };\n+    let x = match ~\"a\" { ~\"a\" => 1, ~\"b\" => 2, _ => die!() };\n     assert (x == 1);\n \n-    match ~\"a\" { ~\"a\" => { } ~\"b\" => { }, _ => fail }\n+    match ~\"a\" { ~\"a\" => { } ~\"b\" => { }, _ => die!() }\n \n }"}, {"sha": "eaf8fd5ceaadc4c4e8c860288b5aaa12a7d58c88", "filename": "src/test/run-pass/attr-main-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-main-2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n \n fn main() {\n-    fail\n+    die!()\n }\n \n #[main]"}, {"sha": "03fa6779a56198129ccede2ef656017dbea3c4e3", "filename": "src/test/run-pass/binary-minus-without-space.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,6 +11,6 @@\n // Check that issue #954 stays fixed\n \n fn main() {\n-    match -1 { -1 => {}, _ => fail ~\"wat\" }\n+    match -1 { -1 => {}, _ => die!(~\"wat\") }\n     assert 1-1 == 0;\n }"}, {"sha": "ca11d8e7a338a38872abd8e63cddbec5ee52e87d", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -19,6 +19,6 @@ fn main() {\n     let x = Some(p);\n     match move x {\n         Some(move z) => { dispose(z); },\n-        None => fail\n+        None => die!()\n     }\n }"}, {"sha": "309c387264c23df87e287b6811ac4182ca224743", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -35,14 +35,14 @@ fn main() {\n         assert false;\n     }\n     match do vec::all(v) |e| { float::is_negative(*e) } {\n-        true => { fail ~\"incorrect answer.\"; }\n+        true => { die!(~\"incorrect answer.\"); }\n         false => { }\n     }\n     match 3 {\n       _ if do vec::any(v) |e| { float::is_negative(*e) } => {\n       }\n       _ => {\n-        fail ~\"wrong answer.\";\n+        die!(~\"wrong answer.\");\n       }\n     }\n "}, {"sha": "7eeb1b3ab7631eab769504b0a36cdb8f16900a56", "filename": "src/test/run-pass/boxed-class-type-substitution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,7 +15,7 @@ type Tree<T> = {\n     mut parent: Option<T>,\n };\n \n-fn empty<T>() -> Tree<T> { fail }\n+fn empty<T>() -> Tree<T> { die!() }\n \n struct Box {\n     tree: Tree<@Box>\n@@ -31,4 +31,4 @@ enum layout_data = {\n     mut box: Option<@Box>\n };\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "9a6d137d3e578d65901a8247113f1453f74da801", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -62,7 +62,7 @@ impl<T: Copy> cat<T> : StdMap<int, T> {\n \n   pure fn get(+k:int) -> T { match self.find(k) {\n       Some(v) => { v }\n-      None    => { fail ~\"epic fail\"; }\n+      None    => { die!(~\"epic fail\"); }\n     }\n   }\n   pure fn find(+k:int) -> Option<T> { if k <= self.meows {"}, {"sha": "cabd8ee298db53ee55c6747113ff7a2b9ac5b08d", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-win32\n fn adder(+x: @int, +y: @int) -> int { return *x + *y; }\n-fn failer() -> @int { fail; }\n+fn failer() -> @int { die!(); }\n fn main() {\n     assert(result::is_err(&task::try(|| {\n         adder(@2, failer()); ()"}, {"sha": "826a85804f76b4057ca826972ac5ea362ae5960b", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -81,7 +81,7 @@ mod m {\n // Since the bogus configuration isn't defined main will just be\n // parsed, but nothing further will be done with it\n #[cfg(bogus)]\n-fn main() { fail }\n+fn main() { die!() }\n \n fn main() {\n     // Exercise some of the configured items in ways that wouldn't be possible\n@@ -95,7 +95,7 @@ fn main() {\n \n fn test_in_fn_ctxt() {\n     #[cfg(bogus)]\n-    fn f() { fail }\n+    fn f() { die!() }\n     fn f() { }\n     f();\n "}, {"sha": "44fe06926819b1a1c1fa715409b1241f1c7fc779", "filename": "src/test/run-pass/const-big-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -19,18 +19,18 @@ const X: Foo = Baz;\n fn main() {\n     match X {\n         Baz => {}\n-        _ => fail\n+        _ => die!()\n     }\n     match Y {\n         Bar(s) => assert(s == 2654435769),\n-        _ => fail\n+        _ => die!()\n     }\n     match Z {\n         Quux(d,h) => {\n             assert(d == 0x123456789abcdef0);\n             assert(h == 0x1234);\n         }\n-        _ => fail\n+        _ => die!()\n     }\n }\n "}, {"sha": "848e6b2052126afdb050d115438b2dd549727da2", "filename": "src/test/run-pass/const-enum-byref-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,7 +15,7 @@ impl E {\n     fn method(&self) {\n         match *self {\n             V => {}\n-            VV(*) => fail\n+            VV(*) => die!()\n         }\n     }\n }"}, {"sha": "83e27009959515161022ada8b15e0af2ba490166", "filename": "src/test/run-pass/const-enum-byref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -14,7 +14,7 @@ const C: E = V;\n fn f(a: &E) {\n     match *a {\n         V => {}\n-        VV(*) => fail\n+        VV(*) => die!()\n     }\n }\n "}, {"sha": "0f6363b4908d317f3e8a5020aa9d1075d2ddaec0", "filename": "src/test/run-pass/const-nullary-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -19,11 +19,11 @@ const X: Foo = Bar;\n fn main() {\n     match X {\n         Bar => {}\n-        Baz | Boo => fail\n+        Baz | Boo => die!()\n     }\n     match Y {\n         Baz => {}\n-        Bar | Boo => fail\n+        Bar | Boo => die!()\n     }\n }\n "}, {"sha": "82b51cd5fae27b4e219ccc083070dc5cdbb1181b", "filename": "src/test/run-pass/expr-alt-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,13 +15,13 @@\n \n // Tests for match as expressions resulting in boxed types\n fn test_box() {\n-    let res = match true { true => { @100 } _ => fail ~\"wat\" };\n+    let res = match true { true => { @100 } _ => die!(~\"wat\") };\n     assert (*res == 100);\n }\n \n fn test_str() {\n     let res = match true { true => { ~\"happy\" },\n-                         _ => fail ~\"not happy at all\" };\n+                         _ => die!(~\"not happy at all\") };\n     assert (res == ~\"happy\");\n }\n "}, {"sha": "160fcfe2245caef95dc23eee0acc4463e5b8d3c3", "filename": "src/test/run-pass/expr-alt-fail-all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-fail-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-fail-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-fail-all.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -17,6 +17,6 @@ fn main() {\n     let x =\n         match true {\n           true => { 10 }\n-          false => { match true { true => { fail } false => { fail } } }\n+          false => { match true { true => { die!() } false => { die!() } } }\n         };\n }"}, {"sha": "7666e4b90e55629304c3a9c645af6392a05037d7", "filename": "src/test/run-pass/expr-alt-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n fn test_simple() {\n-    let r = match true { true => { true } false => { fail } };\n+    let r = match true { true => { true } false => { die!() } };\n     assert (r == true);\n }\n \n fn test_box() {\n-    let r = match true { true => { ~[10] } false => { fail } };\n+    let r = match true { true => { ~[10] } false => { die!() } };\n     assert (r[0] == 10);\n }\n "}, {"sha": "f23107a7db8bd0c01591cbe73b81f7bbe1e9cce3", "filename": "src/test/run-pass/expr-alt-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,7 +15,7 @@\n type compare<T> = fn@(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, eq: compare<T>) {\n-    let actual: @T = match true { true => { expected }, _ => fail };\n+    let actual: @T = match true { true => { expected }, _ => die!() };\n     assert (eq(expected, actual));\n }\n "}, {"sha": "18e5f39a81f459807466261813803911fefd0810", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -16,7 +16,7 @@\n type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<T: Copy>(expected: T, eq: compare<T>) {\n-    let actual: T = match true { true => { expected }, _ => fail ~\"wat\" };\n+    let actual: T = match true { true => { expected }, _ => die!(~\"wat\") };\n     assert (eq(expected, actual));\n }\n "}, {"sha": "04f2a8ec02bf6edf01f62d0f140ca72f92331029", "filename": "src/test/run-pass/expr-alt-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -16,7 +16,7 @@ type compare<T> = fn@(~T, ~T) -> bool;\n fn test_generic<T: Copy>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = match true {\n         true => { copy expected },\n-        _ => fail ~\"wat\"\n+        _ => die!(~\"wat\")\n     };\n     assert (eq(expected, actual));\n }"}, {"sha": "7263540102d069fb0dac02b26c0cda182dac7901", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -18,7 +18,7 @@ type compare<T> = fn@(T, T) -> bool;\n fn test_generic<T: Copy>(expected: T, eq: compare<T>) {\n     let actual: T = match true {\n         true => copy expected,\n-        _ => fail ~\"wat\"\n+        _ => die!(~\"wat\")\n     };\n     assert (eq(expected, actual));\n }"}, {"sha": "4fa2bf1913ada98fc9737ff588310be007cc17a8", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,7 +15,7 @@\n type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<T: Copy>(expected: T, eq: compare<T>) {\n-  let actual: T = match true { true => { expected }, _ => fail ~\"wat\" };\n+  let actual: T = match true { true => { expected }, _ => die!(~\"wat\") };\n     assert (eq(expected, actual));\n }\n "}, {"sha": "f2887f2a69103e08055512d2fbcfab1e304d7d18", "filename": "src/test/run-pass/expr-alt-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -17,7 +17,7 @@\n struct R { i: int }\n \n fn test_rec() {\n-    let rs = match true { true => R {i: 100}, _ => fail };\n+    let rs = match true { true => R {i: 100}, _ => die!() };\n     assert (rs.i == 100);\n }\n "}, {"sha": "8dd0da344a3529bd0cd81797e5c50c04fbd8ed6a", "filename": "src/test/run-pass/expr-alt-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-alt-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-unique.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,7 +15,7 @@\n \n // Tests for match as expressions resulting in boxed types\n fn test_box() {\n-    let res = match true { true => { ~100 }, _ => fail };\n+    let res = match true { true => { ~100 }, _ => die!() };\n     assert (*res == 100);\n }\n "}, {"sha": "b56878dec633e88217f7635097f6d4265125fb30", "filename": "src/test/run-pass/expr-if-fail-all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-if-fail-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-if-fail-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-fail-all.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -10,4 +10,4 @@\n \n // When all branches of an if expression result in fail, the entire if\n // expression results in fail.\n-fn main() { let x = if true { 10 } else { if true { fail } else { fail } }; }\n+fn main() { let x = if true { 10 } else { if true { die!() } else { die!() } }; }"}, {"sha": "3130b26ac581c6c012d061e03a5ada4374a0a307", "filename": "src/test/run-pass/expr-if-fail.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-if-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fexpr-if-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test_if_fail() { let x = if false { fail } else { 10 }; assert (x == 10); }\n+fn test_if_fail() { let x = if false { die!() } else { 10 }; assert (x == 10); }\n \n fn test_else_fail() {\n-    let x = if true { 10 } else { fail };\n+    let x = if true { 10 } else { die!() };\n     assert (x == 10);\n }\n \n fn test_elseif_fail() {\n-    let x = if false { 0 } else if false { fail } else { 10 };\n+    let x = if false { 0 } else if false { die!() } else { 10 };\n     assert (x == 10);\n }\n "}, {"sha": "d7ef8cb63ce4b070cede2f0a038f0c70cdd0521e", "filename": "src/test/run-pass/for-loop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() { let x: ~[int] = ~[]; for x.each |_i| { fail ~\"moop\"; } }\n+fn main() { let x: ~[int] = ~[]; for x.each |_i| { die!(~\"moop\"); } }"}, {"sha": "a97b748a8a022c13f049faa79569e08dcc48b053", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     match getopts(args, opts) {\n         result::Ok(ref m)  =>\n             assert !opt_present(m, \"b\"),\n-        result::Err(ref f) => fail fail_str(copy *f)\n+        result::Err(ref f) => die!(fail_str(copy *f))\n     };\n \n }"}, {"sha": "c7c61cf8e42563be4dc2ad0b60698c2f6fcf242d", "filename": "src/test/run-pass/if-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fif-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fif-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-bot.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,6 +11,6 @@\n \n \n fn main() {\n-    let i: int = if false { fail } else { 5 };\n+    let i: int = if false { die!() } else { 5 };\n     log(debug, i);\n }"}, {"sha": "bb16b22c1e3a0ae7fc8ba0f1643dae468d7b87c5", "filename": "src/test/run-pass/if-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fif-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fif-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -18,7 +18,7 @@ fn foo(x: uint) {\n     if even(x) {\n         log(debug, x);\n     } else {\n-        fail;\n+        die!();\n     }\n }\n "}, {"sha": "c83b52727e17eca4b4edff282f9f2cd813d9a4fd", "filename": "src/test/run-pass/issue-1516.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1516.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // xfail-test\n-fn main() {  let early_error: fn@(str) -> !  = {|msg| fail }; }\n+fn main() {  let early_error: fn@(str) -> !  = {|msg| die!() }; }\n "}, {"sha": "9618ed9664642acf656240d690adb1b991836ed5", "filename": "src/test/run-pass/issue-2311-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,7 +15,7 @@ struct foo<A> {\n \n impl<A: Copy> foo<A> {\n    fn bar<B,C:clam<A>>(c: C) -> B {\n-     fail;\n+     die!();\n    }\n }\n "}, {"sha": "8b6925b1a16551441370149133b5b5cd31d03d73", "filename": "src/test/run-pass/issue-2312.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2312.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,7 +15,7 @@ trait clam<A> { }\n enum foo = int;\n \n impl foo {\n-    fn bar<B,C:clam<B>>(c: C) -> B { fail; }\n+    fn bar<B,C:clam<B>>(c: C) -> B { die!(); }\n }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "135bc08c21dcdab66ef1b0a9703fb79521c6022d", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -53,9 +53,9 @@ pub mod pipes {\n \n     #[abi = \"rust-intrinsic\"]\n     mod rusti {\n-      pub fn atomic_xchg(_dst: &mut int, _src: int) -> int { fail; }\n-      pub fn atomic_xchg_acq(_dst: &mut int, _src: int) -> int { fail; }\n-      pub fn atomic_xchg_rel(_dst: &mut int, _src: int) -> int { fail; }\n+      pub fn atomic_xchg(_dst: &mut int, _src: int) -> int { die!(); }\n+      pub fn atomic_xchg_acq(_dst: &mut int, _src: int) -> int { die!(); }\n+      pub fn atomic_xchg_rel(_dst: &mut int, _src: int) -> int { die!(); }\n     }\n \n     // We should consider moving this to ::core::unsafe, although I\n@@ -89,7 +89,7 @@ pub mod pipes {\n             // The receiver will eventually clean this up.\n             unsafe { forget(move p); }\n           }\n-          full => { fail ~\"duplicate send\" }\n+          full => { die!(~\"duplicate send\") }\n           blocked => {\n \n             // The receiver will eventually clean this up.\n@@ -132,7 +132,7 @@ pub mod pipes {\n           }\n           full => {\n             // This is impossible\n-            fail ~\"you dun goofed\"\n+            die!(~\"you dun goofed\")\n           }\n           terminated => {\n             // I have to clean up, use drop_glue\n@@ -149,7 +149,7 @@ pub mod pipes {\n           }\n           blocked => {\n             // this shouldn't happen.\n-            fail ~\"terminating a blocked packet\"\n+            die!(~\"terminating a blocked packet\")\n           }\n           terminated | full => {\n             // I have to clean up, use drop_glue\n@@ -269,7 +269,7 @@ pub mod pingpong {\n         pub fn do_pong(-c: pong) -> (ping, ()) {\n             let packet = ::pipes::recv(move c);\n             if packet.is_none() {\n-                fail ~\"sender closed the connection\"\n+                die!(~\"sender closed the connection\")\n             }\n             (pingpong::liberate_pong(option::unwrap(move packet)), ())\n         }\n@@ -284,7 +284,7 @@ pub mod pingpong {\n         pub fn do_ping(-c: ping) -> (pong, ()) {\n             let packet = ::pipes::recv(move c);\n             if packet.is_none() {\n-                fail ~\"sender closed the connection\"\n+                die!(~\"sender closed the connection\")\n             }\n             (pingpong::liberate_ping(option::unwrap(move packet)), ())\n         }"}, {"sha": "4aa66b48fbec547c003e61ea066ab9b1d8c498a2", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -54,7 +54,7 @@ fn square_from_char(c: char) -> square {\n       ' '  => { empty }\n       _ => {\n         error!(\"invalid square: %?\", c);\n-        fail\n+        die!()\n       }\n     }\n }"}, {"sha": "844619c676d82726621996c3531383279d620116", "filename": "src/test/run-pass/issue-3168.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3168.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -17,7 +17,7 @@ fn main() {\n         do task::spawn |move p2| {\n             p2.recv();\n             error!(\"sibling fails\");\n-            fail;\n+            die!();\n         }   \n         let (p3,c3) = pipes::stream();\n         c.send(move c3);"}, {"sha": "3cd52be70b08c45ce31a5ef05cdd4b2d0e70f2ec", "filename": "src/test/run-pass/issue-3176.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3176.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -19,7 +19,7 @@ fn main() {\n         do task::spawn |move p2| {\n             p2.recv();\n             error!(\"sibling fails\");\n-            fail;\n+            die!();\n         }   \n         let (p3,c3) = pipes::stream();\n         c.send(move c3);"}, {"sha": "9296df58fec70efce75cb4f0c35ba90572f9e57d", "filename": "src/test/run-pass/issue-3895.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-3895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-3895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3895.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -14,6 +14,6 @@ fn main() {\n     \n     match BadChar {\n         _ if true => BadChar,\n-        BadChar | BadSyntax => fail ,\n+        BadChar | BadSyntax => die!() ,\n     };\n }"}, {"sha": "8612252d5b62bcbfd7a036345b01980907411336", "filename": "src/test/run-pass/issue-4016.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4016.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -21,7 +21,7 @@ trait JD : Deserializable<json::Deserializer> { }\n fn exec<T: JD>() {\n     let doc = result::unwrap(json::from_str(\"\"));\n     let _v: T = deserialize(&json::Deserializer(move doc));\n-    fail\n+    die!()\n }\n \n fn main() {}"}, {"sha": "73732dae3943ef981a4d3cd7bc9d453e88db0b83", "filename": "src/test/run-pass/iter-eachi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fiter-eachi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fiter-eachi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-eachi.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     }\n     assert c == 5u;\n \n-    for None::<uint>.eachi |i, v| { fail; }\n+    for None::<uint>.eachi |i, v| { die!(); }\n \n     let mut c = 0u;\n     for Some(1u).eachi |i, v| {"}, {"sha": "8ea06f9f0b1c3fca63bddfe14520a6459c415f40", "filename": "src/test/run-pass/last-use-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -15,7 +15,7 @@ fn lp<T>(s: ~str, f: fn(~str) -> T) -> T {\n         let r = f(s);\n         return (move r);\n     }\n-    fail;\n+    die!();\n }\n \n fn apply<T>(s: ~str, f: fn(~str) -> T) -> T {"}, {"sha": "166639da5df0151e67731d84599ce7b06391eb99", "filename": "src/test/run-pass/lots-a-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Flots-a-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flots-a-fail.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -12,7 +12,7 @@\n extern mod std;\n \n fn die() {\n-    fail;\n+    die!();\n }\n \n fn iloop() {"}, {"sha": "dd620b5ae39d65c369e269f5551444b5be1b7aab", "filename": "src/test/run-pass/macro-interpolation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -17,7 +17,7 @@ macro_rules! overly_complicated (\n           Some($pat) => {\n             $res\n           }\n-          _ => { fail; }\n+          _ => { die!(); }\n         }\n     })\n \n@@ -26,4 +26,4 @@ fn main() {\n     assert overly_complicated!(f, x, Option<uint>, { return Some(x); },\n                                Some(8u), Some(y), y) == 8u\n \n-}\n\\ No newline at end of file\n+}"}, {"sha": "4d2949ab217dbe2c2941c03667b37b4522c80dab", "filename": "src/test/run-pass/negative.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fnegative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fnegative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnegative.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -11,6 +11,6 @@\n fn main() {\n     match -5 {\n       -5 => {}\n-      _ => { fail }\n+      _ => { die!() }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "38fb1f4d2d0c2c80284996134ccc2b6b8ab3d43c", "filename": "src/test/run-pass/nested-alts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee79294699153ac7da9d2e5d076192c6eee3238/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-alts.rs?ref=aee79294699153ac7da9d2e5d076192c6eee3238", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn baz() -> ! { fail; }\n+fn baz() -> ! { die!(); }\n \n fn foo() {\n     match Some::<int>(5) {"}]}