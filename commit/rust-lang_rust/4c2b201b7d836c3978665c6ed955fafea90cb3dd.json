{"sha": "4c2b201b7d836c3978665c6ed955fafea90cb3dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMmIyMDFiN2Q4MzZjMzk3ODY2NWM2ZWQ5NTVmYWZlYTkwY2IzZGQ=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-02-13T17:18:13Z"}, "committer": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-02-13T17:18:13Z"}, "message": "Make annotations tests similar to those in runnables", "tree": {"sha": "7d29a020ea312042ee4cc8272b8e469923c662d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d29a020ea312042ee4cc8272b8e469923c662d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c2b201b7d836c3978665c6ed955fafea90cb3dd", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEcPkYW+t8+2SKgl5T2MS9WuTZzE0FAmAoCdUACgkQ2MS9WuTZ\nzE1cfQf+LCV07qXMnaPi/daup/GYkkoAyzPHikFaO8R829SZgyTK03FleApTznVI\ndLkM9VcpLMriEQ9UDLDgmavPwVFj1uJlHEpiJXkntuFToAwl2PCBlN9I6A2d5Csa\n6jSiJB+kgFHozMhO0TqMcizSMOA7pi0HvwyxTIqLIkpWHw6JSv9TZ8JuLiusMAlB\nHU7vtIrcFbrsFZn4TRyRVx2S7vNIhgiaIcBKjckPjKOZB9RHaAV+KNVoaUNZ2/Eh\nN8qjxmQ6jZjGossPaXonD7O7Mjz9CGt4i0IVewQDr2AsLyyp0vpJasqzZydCqAMb\nEzkNNOcu7P6TrTMEdDBCwuOEGaYVWQ==\n=4lT2\n-----END PGP SIGNATURE-----", "payload": "tree 7d29a020ea312042ee4cc8272b8e469923c662d5\nparent ee049b256a7718fb346a7172a34f0fc324b3269b\nauthor ivan770 <leshenko.ivan770@gmail.com> 1613236693 +0200\ncommitter ivan770 <leshenko.ivan770@gmail.com> 1613236693 +0200\n\nMake annotations tests similar to those in runnables\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2b201b7d836c3978665c6ed955fafea90cb3dd", "html_url": "https://github.com/rust-lang/rust/commit/4c2b201b7d836c3978665c6ed955fafea90cb3dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c2b201b7d836c3978665c6ed955fafea90cb3dd/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee049b256a7718fb346a7172a34f0fc324b3269b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee049b256a7718fb346a7172a34f0fc324b3269b", "html_url": "https://github.com/rust-lang/rust/commit/ee049b256a7718fb346a7172a34f0fc324b3269b"}], "stats": {"total": 895, "additions": 707, "deletions": 188}, "files": [{"sha": "414a60bed03db782be82588b5d6f496b940dbc36", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 707, "deletions": 188, "changes": 895, "blob_url": "https://github.com/rust-lang/rust/blob/4c2b201b7d836c3978665c6ed955fafea90cb3dd/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2b201b7d836c3978665c6ed955fafea90cb3dd/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=4c2b201b7d836c3978665c6ed955fafea90cb3dd", "patch": "@@ -154,134 +154,247 @@ fn should_skip_runnable(kind: &RunnableKind, binary_target: bool) -> bool {\n \n #[cfg(test)]\n mod tests {\n-    use ide_db::base_db::{FileId, FileRange};\n-    use syntax::{TextRange, TextSize};\n+    use expect_test::{expect, Expect};\n \n-    use crate::{fixture, Annotation, AnnotationConfig, AnnotationKind, RunnableKind};\n+    use crate::{fixture, Annotation, AnnotationConfig};\n \n-    fn get_annotations(\n-        ra_fixture: &str,\n-        annotation_config: AnnotationConfig,\n-    ) -> (FileId, Vec<Annotation>) {\n+    fn check(ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = fixture::file(ra_fixture);\n \n         let annotations: Vec<Annotation> = analysis\n-            .annotations(file_id, annotation_config)\n+            .annotations(\n+                file_id,\n+                AnnotationConfig {\n+                    binary_target: true,\n+                    annotate_runnables: true,\n+                    annotate_impls: true,\n+                    annotate_references: true,\n+                    annotate_method_references: true,\n+                    run: true,\n+                    debug: true,\n+                },\n+            )\n             .unwrap()\n             .into_iter()\n-            .map(move |annotation| analysis.resolve_annotation(annotation).unwrap())\n+            .map(|annotation| analysis.resolve_annotation(annotation).unwrap())\n             .collect();\n \n-        if annotations.len() == 0 {\n-            panic!(\"unresolved annotations\")\n-        }\n-\n-        (file_id, annotations)\n-    }\n-\n-    macro_rules! check_annotation {\n-        ( $ra_fixture:expr, $config:expr, $item_positions:expr, $pattern:pat, $checker:expr ) => {\n-            let (file_id, annotations) = get_annotations($ra_fixture, $config);\n-\n-            annotations.into_iter().for_each(|annotation| {\n-                assert!($item_positions.contains(&annotation.range));\n-\n-                match annotation.kind {\n-                    $pattern => $checker(file_id),\n-                    _ => panic!(\"Unexpected annotation kind\"),\n-                }\n-            });\n-        };\n+        expect.assert_debug_eq(&annotations);\n     }\n \n     #[test]\n     fn const_annotations() {\n-        check_annotation!(\n+        check(\n             r#\"\n const DEMO: i32 = 123;\n \n+const UNUSED: i32 = 123;\n+\n fn main() {\n     let hello = DEMO;\n }\n             \"#,\n-            AnnotationConfig {\n-                binary_target: false,\n-                annotate_runnables: false,\n-                annotate_impls: false,\n-                annotate_references: true,\n-                annotate_method_references: false,\n-                run: false,\n-                debug: false,\n-            },\n-            &[TextRange::new(TextSize::from(0), TextSize::from(22))],\n-            AnnotationKind::HasReferences { data: Some(ranges), .. },\n-            |file_id| assert_eq!(\n-                *ranges.first().unwrap(),\n-                FileRange {\n-                    file_id,\n-                    range: TextRange::new(TextSize::from(52), TextSize::from(56))\n-                }\n-            )\n-        );\n-    }\n-\n-    #[test]\n-    fn unused_const_annotations() {\n-        check_annotation!(\n-            r#\"\n-const DEMO: i32 = 123;\n-\n-fn main() {}\n-            \"#,\n-            AnnotationConfig {\n-                binary_target: false,\n-                annotate_runnables: false,\n-                annotate_impls: false,\n-                annotate_references: true,\n-                annotate_method_references: false,\n-                run: false,\n-                debug: false,\n-            },\n-            &[TextRange::new(TextSize::from(0), TextSize::from(22))],\n-            AnnotationKind::HasReferences { data: Some(ranges), .. },\n-            |_| assert_eq!(ranges.len(), 0)\n+            expect![[r#\"\n+                [\n+                    Annotation {\n+                        range: 50..85,\n+                        kind: Runnable {\n+                            debug: true,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 50..85,\n+                                    focus_range: 53..57,\n+                                    name: \"main\",\n+                                    kind: Function,\n+                                },\n+                                kind: Bin,\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 50..85,\n+                        kind: Runnable {\n+                            debug: false,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 50..85,\n+                                    focus_range: 53..57,\n+                                    name: \"main\",\n+                                    kind: Function,\n+                                },\n+                                kind: Bin,\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 0..22,\n+                        kind: HasReferences {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 6,\n+                            },\n+                            data: Some(\n+                                [\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 78..82,\n+                                    },\n+                                ],\n+                            ),\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 24..48,\n+                        kind: HasReferences {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 30,\n+                            },\n+                            data: Some(\n+                                [],\n+                            ),\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 53..57,\n+                        kind: HasReferences {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 53,\n+                            },\n+                            data: Some(\n+                                [],\n+                            ),\n+                        },\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn struct_references_annotations() {\n-        check_annotation!(\n+        check(\n             r#\"\n struct Test;\n \n fn main() {\n     let test = Test;\n }\n             \"#,\n-            AnnotationConfig {\n-                binary_target: false,\n-                annotate_runnables: false,\n-                annotate_impls: false,\n-                annotate_references: true,\n-                annotate_method_references: false,\n-                run: false,\n-                debug: false,\n-            },\n-            &[TextRange::new(TextSize::from(0), TextSize::from(12))],\n-            AnnotationKind::HasReferences { data: Some(ranges), .. },\n-            |file_id| assert_eq!(\n-                *ranges.first().unwrap(),\n-                FileRange {\n-                    file_id,\n-                    range: TextRange::new(TextSize::from(41), TextSize::from(45))\n-                }\n-            )\n+            expect![[r#\"\n+                [\n+                    Annotation {\n+                        range: 14..48,\n+                        kind: Runnable {\n+                            debug: true,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 14..48,\n+                                    focus_range: 17..21,\n+                                    name: \"main\",\n+                                    kind: Function,\n+                                },\n+                                kind: Bin,\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 14..48,\n+                        kind: Runnable {\n+                            debug: false,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 14..48,\n+                                    focus_range: 17..21,\n+                                    name: \"main\",\n+                                    kind: Function,\n+                                },\n+                                kind: Bin,\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 0..12,\n+                        kind: HasImpls {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 7,\n+                            },\n+                            data: Some(\n+                                [],\n+                            ),\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 0..12,\n+                        kind: HasReferences {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 7,\n+                            },\n+                            data: Some(\n+                                [\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 41..45,\n+                                    },\n+                                ],\n+                            ),\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 17..21,\n+                        kind: HasReferences {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 17,\n+                            },\n+                            data: Some(\n+                                [],\n+                            ),\n+                        },\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn struct_and_trait_impls_annotations() {\n-        check_annotation!(\n+        check(\n             r#\"\n struct Test;\n \n@@ -293,84 +406,229 @@ fn main() {\n     let test = Test;\n }\n             \"#,\n-            AnnotationConfig {\n-                binary_target: false,\n-                annotate_runnables: false,\n-                annotate_impls: true,\n-                annotate_references: false,\n-                annotate_method_references: false,\n-                run: false,\n-                debug: false,\n-            },\n-            &[\n-                TextRange::new(TextSize::from(0), TextSize::from(12)),\n-                TextRange::new(TextSize::from(14), TextSize::from(34))\n-            ],\n-            AnnotationKind::HasImpls { data: Some(ranges), .. },\n-            |_| assert_eq!(\n-                ranges.first().unwrap().full_range,\n-                TextRange::new(TextSize::from(36), TextSize::from(64))\n-            )\n-        );\n-    }\n-\n-    #[test]\n-    fn run_annotation() {\n-        check_annotation!(\n-            r#\"\n-fn main() {}\n-            \"#,\n-            AnnotationConfig {\n-                binary_target: true,\n-                annotate_runnables: true,\n-                annotate_impls: false,\n-                annotate_references: false,\n-                annotate_method_references: false,\n-                run: true,\n-                debug: false,\n-            },\n-            &[TextRange::new(TextSize::from(0), TextSize::from(12))],\n-            AnnotationKind::Runnable { debug: false, runnable },\n-            |_| {\n-                assert!(matches!(runnable.kind, RunnableKind::Bin));\n-                assert!(runnable.action().run_title.contains(\"Run\"));\n-            }\n+            expect![[r#\"\n+                [\n+                    Annotation {\n+                        range: 66..100,\n+                        kind: Runnable {\n+                            debug: true,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 66..100,\n+                                    focus_range: 69..73,\n+                                    name: \"main\",\n+                                    kind: Function,\n+                                },\n+                                kind: Bin,\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 66..100,\n+                        kind: Runnable {\n+                            debug: false,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 66..100,\n+                                    focus_range: 69..73,\n+                                    name: \"main\",\n+                                    kind: Function,\n+                                },\n+                                kind: Bin,\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 0..12,\n+                        kind: HasImpls {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 7,\n+                            },\n+                            data: Some(\n+                                [\n+                                    NavigationTarget {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        full_range: 36..64,\n+                                        focus_range: 57..61,\n+                                        name: \"impl\",\n+                                        kind: Impl,\n+                                    },\n+                                ],\n+                            ),\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 0..12,\n+                        kind: HasReferences {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 7,\n+                            },\n+                            data: Some(\n+                                [\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 57..61,\n+                                    },\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 93..97,\n+                                    },\n+                                ],\n+                            ),\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 14..34,\n+                        kind: HasImpls {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 20,\n+                            },\n+                            data: Some(\n+                                [\n+                                    NavigationTarget {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        full_range: 36..64,\n+                                        focus_range: 57..61,\n+                                        name: \"impl\",\n+                                        kind: Impl,\n+                                    },\n+                                ],\n+                            ),\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 14..34,\n+                        kind: HasReferences {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 20,\n+                            },\n+                            data: Some(\n+                                [\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 41..52,\n+                                    },\n+                                ],\n+                            ),\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 69..73,\n+                        kind: HasReferences {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 69,\n+                            },\n+                            data: Some(\n+                                [],\n+                            ),\n+                        },\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n \n     #[test]\n-    fn debug_annotation() {\n-        check_annotation!(\n+    fn runnable_annotation() {\n+        check(\n             r#\"\n fn main() {}\n             \"#,\n-            AnnotationConfig {\n-                binary_target: true,\n-                annotate_runnables: true,\n-                annotate_impls: false,\n-                annotate_references: false,\n-                annotate_method_references: false,\n-                run: false,\n-                debug: true,\n-            },\n-            &[TextRange::new(TextSize::from(0), TextSize::from(12))],\n-            AnnotationKind::Runnable { debug: true, runnable },\n-            |_| {\n-                assert!(matches!(runnable.kind, RunnableKind::Bin));\n-                assert!(runnable.action().debugee);\n-            }\n+            expect![[r#\"\n+                [\n+                    Annotation {\n+                        range: 0..12,\n+                        kind: Runnable {\n+                            debug: true,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 0..12,\n+                                    focus_range: 3..7,\n+                                    name: \"main\",\n+                                    kind: Function,\n+                                },\n+                                kind: Bin,\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 0..12,\n+                        kind: Runnable {\n+                            debug: false,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 0..12,\n+                                    focus_range: 3..7,\n+                                    name: \"main\",\n+                                    kind: Function,\n+                                },\n+                                kind: Bin,\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 3..7,\n+                        kind: HasReferences {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 3,\n+                            },\n+                            data: Some(\n+                                [],\n+                            ),\n+                        },\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn method_annotations() {\n-        // We actually want to skip `fn main` annotation, as it has no references in it\n-        // but just ignoring empty reference slices would lead to false-positive if something\n-        // goes wrong in annotation resolving mechanism. By tracking if we iterated before finding\n-        // an empty slice we can track if everything is settled.\n-        let mut iterated_once = false;\n-\n-        check_annotation!(\n+        check(\n             r#\"\n struct Test;\n \n@@ -382,37 +640,298 @@ fn main() {\n     Test.self_by_ref();\n }\n             \"#,\n-            AnnotationConfig {\n-                binary_target: false,\n-                annotate_runnables: false,\n-                annotate_impls: false,\n-                annotate_references: false,\n-                annotate_method_references: true,\n-                run: false,\n-                debug: false,\n-            },\n-            &[\n-                TextRange::new(TextSize::from(33), TextSize::from(44)),\n-                TextRange::new(TextSize::from(61), TextSize::from(65))\n-            ],\n-            AnnotationKind::HasReferences { data: Some(ranges), .. },\n-            |file_id| {\n-                match ranges.as_slice() {\n-                    [first, ..] => {\n-                        assert_eq!(\n-                            *first,\n-                            FileRange {\n-                                file_id,\n-                                range: TextRange::new(TextSize::from(79), TextSize::from(90))\n-                            }\n-                        );\n-\n-                        iterated_once = true;\n-                    }\n-                    [] if iterated_once => {}\n-                    [] => panic!(\"One reference was expected but not found\"),\n-                }\n-            }\n+            expect![[r#\"\n+                [\n+                    Annotation {\n+                        range: 58..95,\n+                        kind: Runnable {\n+                            debug: true,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 58..95,\n+                                    focus_range: 61..65,\n+                                    name: \"main\",\n+                                    kind: Function,\n+                                },\n+                                kind: Bin,\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 58..95,\n+                        kind: Runnable {\n+                            debug: false,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 58..95,\n+                                    focus_range: 61..65,\n+                                    name: \"main\",\n+                                    kind: Function,\n+                                },\n+                                kind: Bin,\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 0..12,\n+                        kind: HasImpls {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 7,\n+                            },\n+                            data: Some(\n+                                [\n+                                    NavigationTarget {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        full_range: 14..56,\n+                                        focus_range: 19..23,\n+                                        name: \"impl\",\n+                                        kind: Impl,\n+                                    },\n+                                ],\n+                            ),\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 0..12,\n+                        kind: HasReferences {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 7,\n+                            },\n+                            data: Some(\n+                                [\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 19..23,\n+                                    },\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 74..78,\n+                                    },\n+                                ],\n+                            ),\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 33..44,\n+                        kind: HasReferences {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 33,\n+                            },\n+                            data: Some(\n+                                [\n+                                    FileRange {\n+                                        file_id: FileId(\n+                                            0,\n+                                        ),\n+                                        range: 79..90,\n+                                    },\n+                                ],\n+                            ),\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 61..65,\n+                        kind: HasReferences {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 61,\n+                            },\n+                            data: Some(\n+                                [],\n+                            ),\n+                        },\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_annotations() {\n+        check(\n+            r#\"\n+fn main() {}\n+\n+mod tests {\n+    #[test]\n+    fn my_cool_test() {}\n+}\n+            \"#,\n+            expect![[r#\"\n+                [\n+                    Annotation {\n+                        range: 0..12,\n+                        kind: Runnable {\n+                            debug: true,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 0..12,\n+                                    focus_range: 3..7,\n+                                    name: \"main\",\n+                                    kind: Function,\n+                                },\n+                                kind: Bin,\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 0..12,\n+                        kind: Runnable {\n+                            debug: false,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 0..12,\n+                                    focus_range: 3..7,\n+                                    name: \"main\",\n+                                    kind: Function,\n+                                },\n+                                kind: Bin,\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 14..64,\n+                        kind: Runnable {\n+                            debug: true,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 14..64,\n+                                    focus_range: 18..23,\n+                                    name: \"tests\",\n+                                    kind: Module,\n+                                },\n+                                kind: TestMod {\n+                                    path: \"tests\",\n+                                },\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 14..64,\n+                        kind: Runnable {\n+                            debug: false,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 14..64,\n+                                    focus_range: 18..23,\n+                                    name: \"tests\",\n+                                    kind: Module,\n+                                },\n+                                kind: TestMod {\n+                                    path: \"tests\",\n+                                },\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 30..62,\n+                        kind: Runnable {\n+                            debug: true,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 30..62,\n+                                    focus_range: 45..57,\n+                                    name: \"my_cool_test\",\n+                                    kind: Function,\n+                                },\n+                                kind: Test {\n+                                    test_id: Path(\n+                                        \"tests::my_cool_test\",\n+                                    ),\n+                                    attr: TestAttr {\n+                                        ignore: false,\n+                                    },\n+                                },\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 30..62,\n+                        kind: Runnable {\n+                            debug: false,\n+                            runnable: Runnable {\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 30..62,\n+                                    focus_range: 45..57,\n+                                    name: \"my_cool_test\",\n+                                    kind: Function,\n+                                },\n+                                kind: Test {\n+                                    test_id: Path(\n+                                        \"tests::my_cool_test\",\n+                                    ),\n+                                    attr: TestAttr {\n+                                        ignore: false,\n+                                    },\n+                                },\n+                                cfg: None,\n+                            },\n+                        },\n+                    },\n+                    Annotation {\n+                        range: 3..7,\n+                        kind: HasReferences {\n+                            position: FilePosition {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                offset: 3,\n+                            },\n+                            data: Some(\n+                                [],\n+                            ),\n+                        },\n+                    },\n+                ]\n+            \"#]],\n         );\n     }\n }"}]}