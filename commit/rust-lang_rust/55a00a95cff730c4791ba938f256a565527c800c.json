{"sha": "55a00a95cff730c4791ba938f256a565527c800c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YTAwYTk1Y2ZmNzMwYzQ3OTFiYTkzOGYyNTZhNTY1NTI3YzgwMGM=", "commit": {"author": {"name": "Isaac Whitfield", "email": "iw@whitfin.io", "date": "2018-05-12T23:36:53Z"}, "committer": {"name": "Isaac Whitfield", "email": "iw@whitfin.io", "date": "2018-05-18T16:38:08Z"}, "message": "Remove unnecessary impl methods for CrateMetadata", "tree": {"sha": "533bcd5865ff745620f289aec4e12e2f58b2e02a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/533bcd5865ff745620f289aec4e12e2f58b2e02a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55a00a95cff730c4791ba938f256a565527c800c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55a00a95cff730c4791ba938f256a565527c800c", "html_url": "https://github.com/rust-lang/rust/commit/55a00a95cff730c4791ba938f256a565527c800c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55a00a95cff730c4791ba938f256a565527c800c/comments", "author": {"login": "whitfin", "id": 5376378, "node_id": "MDQ6VXNlcjUzNzYzNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5376378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitfin", "html_url": "https://github.com/whitfin", "followers_url": "https://api.github.com/users/whitfin/followers", "following_url": "https://api.github.com/users/whitfin/following{/other_user}", "gists_url": "https://api.github.com/users/whitfin/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitfin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitfin/subscriptions", "organizations_url": "https://api.github.com/users/whitfin/orgs", "repos_url": "https://api.github.com/users/whitfin/repos", "events_url": "https://api.github.com/users/whitfin/events{/privacy}", "received_events_url": "https://api.github.com/users/whitfin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "whitfin", "id": 5376378, "node_id": "MDQ6VXNlcjUzNzYzNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/5376378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitfin", "html_url": "https://github.com/whitfin", "followers_url": "https://api.github.com/users/whitfin/followers", "following_url": "https://api.github.com/users/whitfin/following{/other_user}", "gists_url": "https://api.github.com/users/whitfin/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitfin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitfin/subscriptions", "organizations_url": "https://api.github.com/users/whitfin/orgs", "repos_url": "https://api.github.com/users/whitfin/repos", "events_url": "https://api.github.com/users/whitfin/events{/privacy}", "received_events_url": "https://api.github.com/users/whitfin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb", "html_url": "https://github.com/rust-lang/rust/commit/680f3b24ba9b9e6dbf9301fe4af09a12fe8bb9cb"}], "stats": {"total": 133, "additions": 36, "deletions": 97}, "files": [{"sha": "2467d5cf97c1742917c10fb7413ee3231e38baa4", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/55a00a95cff730c4791ba938f256a565527c800c/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a00a95cff730c4791ba938f256a565527c800c/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=55a00a95cff730c4791ba938f256a565527c800c", "patch": "@@ -58,9 +58,9 @@ pub struct CrateLoader<'a> {\n fn dump_crates(cstore: &CStore) {\n     info!(\"resolved crates:\");\n     cstore.iter_crate_data(|_, data| {\n-        info!(\"  name: {}\", data.name());\n+        info!(\"  name: {}\", data.root.name);\n         info!(\"  cnum: {}\", data.cnum);\n-        info!(\"  hash: {}\", data.hash());\n+        info!(\"  hash: {}\", data.root.hash);\n         info!(\"  reqd: {:?}\", *data.dep_kind.lock());\n         let CrateSource { dylib, rlib, rmeta } = data.source.clone();\n         dylib.map(|dl| info!(\"  dylib: {}\", dl.0.display()));\n@@ -113,7 +113,7 @@ impl<'a> CrateLoader<'a> {\n             if data.name != name { return }\n \n             match hash {\n-                Some(hash) if *hash == data.hash() => { ret = Some(cnum); return }\n+                Some(hash) if *hash == data.root.hash => { ret = Some(cnum); return }\n                 Some(..) => return,\n                 None => {}\n             }\n@@ -172,9 +172,9 @@ impl<'a> CrateLoader<'a> {\n \n         // Check for conflicts with any crate loaded so far\n         self.cstore.iter_crate_data(|_, other| {\n-            if other.name() == root.name && // same crate-name\n-               other.disambiguator() == root.disambiguator &&  // same crate-disambiguator\n-               other.hash() != root.hash { // but different SVH\n+            if other.root.name == root.name && // same crate-name\n+               other.root.disambiguator == root.disambiguator &&  // same crate-disambiguator\n+               other.root.hash != root.hash { // but different SVH\n                 span_fatal!(self.sess, span, E0523,\n                         \"found two different crates with name `{}` that are \\\n                          not distinguished by differing `-C metadata`. This \\\n@@ -343,7 +343,7 @@ impl<'a> CrateLoader<'a> {\n         if locate_ctxt.triple == &self.sess.opts.target_triple {\n             let mut result = LoadResult::Loaded(library);\n             self.cstore.iter_crate_data(|cnum, data| {\n-                if data.name() == root.name && root.hash == data.hash() {\n+                if data.root.name == root.name && root.hash == data.root.hash {\n                     assert!(locate_ctxt.hash.is_none());\n                     info!(\"load success, going to previous cnum: {}\", cnum);\n                     result = LoadResult::Previous(cnum);\n@@ -642,12 +642,12 @@ impl<'a> CrateLoader<'a> {\n \n         self.cstore.iter_crate_data(|cnum, data| {\n             needs_panic_runtime = needs_panic_runtime ||\n-                                  data.needs_panic_runtime();\n-            if data.is_panic_runtime() {\n+                                  data.root.needs_panic_runtime;\n+            if data.root.panic_runtime {\n                 // Inject a dependency from all #![needs_panic_runtime] to this\n                 // #![panic_runtime] crate.\n                 self.inject_dependency_if(cnum, \"a panic runtime\",\n-                                          &|data| data.needs_panic_runtime());\n+                                          &|data| data.root.needs_panic_runtime);\n                 runtime_found = runtime_found || *data.dep_kind.lock() == DepKind::Explicit;\n             }\n         });\n@@ -684,19 +684,19 @@ impl<'a> CrateLoader<'a> {\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n         // and the panic strategy is indeed what we thought it was.\n-        if !data.is_panic_runtime() {\n+        if !data.root.panic_runtime {\n             self.sess.err(&format!(\"the crate `{}` is not a panic runtime\",\n                                    name));\n         }\n-        if data.panic_strategy() != desired_strategy {\n+        if data.root.panic_strategy != desired_strategy {\n             self.sess.err(&format!(\"the crate `{}` does not have the panic \\\n                                     strategy `{}`\",\n                                    name, desired_strategy.desc()));\n         }\n \n         self.sess.injected_panic_runtime.set(Some(cnum));\n         self.inject_dependency_if(cnum, \"a panic runtime\",\n-                                  &|data| data.needs_panic_runtime());\n+                                  &|data| data.root.needs_panic_runtime);\n     }\n \n     fn inject_sanitizer_runtime(&mut self) {\n@@ -791,7 +791,7 @@ impl<'a> CrateLoader<'a> {\n                                        PathKind::Crate, dep_kind);\n \n                 // Sanity check the loaded crate to ensure it is indeed a sanitizer runtime\n-                if !data.is_sanitizer_runtime() {\n+                if !data.root.sanitizer_runtime {\n                     self.sess.err(&format!(\"the crate `{}` is not a sanitizer runtime\",\n                                            name));\n                 }\n@@ -814,7 +814,7 @@ impl<'a> CrateLoader<'a> {\n                                    PathKind::Crate, dep_kind);\n \n             // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n-            if !data.is_profiler_runtime() {\n+            if !data.root.profiler_runtime {\n                 self.sess.err(&format!(\"the crate `profiler_builtins` is not \\\n                                         a profiler runtime\"));\n             }\n@@ -831,7 +831,7 @@ impl<'a> CrateLoader<'a> {\n         let mut needs_allocator = attr::contains_name(&krate.attrs,\n                                                       \"needs_allocator\");\n         self.cstore.iter_crate_data(|_, data| {\n-            needs_allocator = needs_allocator || data.needs_allocator();\n+            needs_allocator = needs_allocator || data.root.needs_allocator;\n         });\n         if !needs_allocator {\n             self.sess.injected_allocator.set(None);\n@@ -873,7 +873,7 @@ impl<'a> CrateLoader<'a> {\n             None\n         };\n         self.cstore.iter_crate_data(|_, data| {\n-            if !data.has_global_allocator() {\n+            if !data.root.has_global_allocator {\n                 return\n             }\n             match global_allocator {\n@@ -882,14 +882,14 @@ impl<'a> CrateLoader<'a> {\n                                             conflicts with this global \\\n                                             allocator in: {}\",\n                                            other_crate,\n-                                           data.name()));\n+                                           data.root.name));\n                 }\n                 Some(None) => {\n                     self.sess.err(&format!(\"the #[global_allocator] in this \\\n                                             crate conflicts with global \\\n-                                            allocator in: {}\", data.name()));\n+                                            allocator in: {}\", data.root.name));\n                 }\n-                None => global_allocator = Some(Some(data.name())),\n+                None => global_allocator = Some(Some(data.root.name)),\n             }\n         });\n         if global_allocator.is_some() {\n@@ -951,7 +951,7 @@ impl<'a> CrateLoader<'a> {\n             // error.\n             let mut allocator = None;\n             self.cstore.iter_crate_data(|_, data| {\n-                if allocator.is_none() && data.has_default_lib_allocator() {\n+                if allocator.is_none() && data.root.has_default_lib_allocator {\n                     allocator = Some(data.clone());\n                 }\n             });\n@@ -1027,9 +1027,9 @@ impl<'a> CrateLoader<'a> {\n                 self.sess.err(&format!(\"the crate `{}` cannot depend \\\n                                         on a crate that needs {}, but \\\n                                         it depends on `{}`\",\n-                                       self.cstore.get_crate_data(krate).name(),\n+                                       self.cstore.get_crate_data(krate).root.name,\n                                        what,\n-                                       data.name()));\n+                                       data.root.name));\n             }\n         }\n "}, {"sha": "0b2409fa98ec3242319da69683f3a3ef1fbf951a", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/55a00a95cff730c4791ba938f256a565527c800c/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a00a95cff730c4791ba938f256a565527c800c/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=55a00a95cff730c4791ba938f256a565527c800c", "patch": "@@ -15,10 +15,7 @@ use schema;\n \n use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::map::definitions::DefPathTable;\n-use rustc::hir::svh::Svh;\n use rustc::middle::cstore::{DepKind, ExternCrate, MetadataLoader};\n-use rustc::session::CrateDisambiguator;\n-use rustc_target::spec::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::util::nodemap::{FxHashMap, NodeMap};\n \n@@ -176,61 +173,3 @@ impl CStore {\n         self.extern_mod_crate_map.borrow().get(&emod_id).cloned()\n     }\n }\n-\n-impl CrateMetadata {\n-    pub fn name(&self) -> Symbol {\n-        self.root.name\n-    }\n-\n-    pub fn hash(&self) -> Svh {\n-        self.root.hash\n-    }\n-\n-    pub fn disambiguator(&self) -> CrateDisambiguator {\n-        self.root.disambiguator\n-    }\n-\n-    pub fn needs_allocator(&self) -> bool {\n-        self.root.needs_allocator\n-    }\n-\n-    pub fn has_global_allocator(&self) -> bool {\n-        self.root.has_global_allocator\n-    }\n-\n-    pub fn has_default_lib_allocator(&self) -> bool {\n-        self.root.has_default_lib_allocator\n-    }\n-\n-    pub fn is_panic_runtime(&self) -> bool {\n-        self.root.panic_runtime\n-    }\n-\n-    pub fn needs_panic_runtime(&self) -> bool {\n-        self.root.needs_panic_runtime\n-    }\n-\n-    pub fn is_compiler_builtins(&self) -> bool {\n-        self.root.compiler_builtins\n-    }\n-\n-    pub fn is_sanitizer_runtime(&self) -> bool {\n-        self.root.sanitizer_runtime\n-    }\n-\n-    pub fn is_profiler_runtime(&self) -> bool {\n-        self.root.profiler_runtime\n-    }\n-\n-    pub fn is_no_builtins(&self) -> bool {\n-        self.root.no_builtins\n-    }\n-\n-    pub fn panic_strategy(&self) -> PanicStrategy {\n-        self.root.panic_strategy\n-    }\n-\n-    pub fn edition(&self) -> Edition {\n-        self.root.edition\n-    }\n-}"}, {"sha": "e837afcb81907e4273d281359487f837c6a33953", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/55a00a95cff730c4791ba938f256a565527c800c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a00a95cff730c4791ba938f256a565527c800c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=55a00a95cff730c4791ba938f256a565527c800c", "patch": "@@ -170,17 +170,17 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     is_mir_available => { cdata.is_item_mir_available(def_id.index) }\n \n     dylib_dependency_formats => { Lrc::new(cdata.get_dylib_dependency_formats()) }\n-    is_panic_runtime => { cdata.is_panic_runtime() }\n-    is_compiler_builtins => { cdata.is_compiler_builtins() }\n-    has_global_allocator => { cdata.has_global_allocator() }\n-    is_sanitizer_runtime => { cdata.is_sanitizer_runtime() }\n-    is_profiler_runtime => { cdata.is_profiler_runtime() }\n-    panic_strategy => { cdata.panic_strategy() }\n+    is_panic_runtime => { cdata.root.panic_runtime }\n+    is_compiler_builtins => { cdata.root.compiler_builtins }\n+    has_global_allocator => { cdata.root.has_global_allocator }\n+    is_sanitizer_runtime => { cdata.root.sanitizer_runtime }\n+    is_profiler_runtime => { cdata.root.profiler_runtime }\n+    panic_strategy => { cdata.root.panic_strategy }\n     extern_crate => {\n         let r = Lrc::new(*cdata.extern_crate.lock());\n         r\n     }\n-    is_no_builtins => { cdata.is_no_builtins() }\n+    is_no_builtins => { cdata.root.no_builtins }\n     impl_defaultness => { cdata.get_impl_defaultness(def_id.index) }\n     reachable_non_generics => {\n         let reachable_non_generics = tcx\n@@ -209,9 +209,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n             DefId { krate: def_id.krate, index }\n         })\n     }\n-    crate_disambiguator => { cdata.disambiguator() }\n-    crate_hash => { cdata.hash() }\n-    original_crate_name => { cdata.name() }\n+    crate_disambiguator => { cdata.root.disambiguator }\n+    crate_hash => { cdata.root.hash }\n+    original_crate_name => { cdata.root.name }\n \n     extra_filename => { cdata.root.extra_filename.clone() }\n \n@@ -457,17 +457,17 @@ impl CrateStore for cstore::CStore {\n \n     fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator\n     {\n-        self.get_crate_data(cnum).disambiguator()\n+        self.get_crate_data(cnum).root.disambiguator\n     }\n \n     fn crate_hash_untracked(&self, cnum: CrateNum) -> hir::svh::Svh\n     {\n-        self.get_crate_data(cnum).hash()\n+        self.get_crate_data(cnum).root.hash\n     }\n \n     fn crate_edition_untracked(&self, cnum: CrateNum) -> Edition\n     {\n-        self.get_crate_data(cnum).edition()\n+        self.get_crate_data(cnum).root.edition\n     }\n \n     /// Returns the `DefKey` for a given `DefId`. This indicates the"}]}