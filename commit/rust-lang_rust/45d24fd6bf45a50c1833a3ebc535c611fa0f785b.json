{"sha": "45d24fd6bf45a50c1833a3ebc535c611fa0f785b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZDI0ZmQ2YmY0NWE1MGMxODMzYTNlYmM1MzVjNjExZmEwZjc4NWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-21T07:25:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-21T07:25:58Z"}, "message": "Auto merge of #4425 - mikerite:4375, r=flip1995\n\nFix `temporary_cstring_as_ptr` false negative\n\nFixes #4375.\n\nChanges the check to test when `.unwrap().as_ptr()` is called on any\n`Result<CString, _>` as suggested by @flip1995\n(https://github.com/rust-lang/rust-clippy/issues/4375#issuecomment-520724123).\n\nchangelog: Fix `temporary_cstring_as_ptr` false negative", "tree": {"sha": "12ebd4637f7c42c333658be46325a8959d05bd5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ebd4637f7c42c333658be46325a8959d05bd5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45d24fd6bf45a50c1833a3ebc535c611fa0f785b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45d24fd6bf45a50c1833a3ebc535c611fa0f785b", "html_url": "https://github.com/rust-lang/rust/commit/45d24fd6bf45a50c1833a3ebc535c611fa0f785b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45d24fd6bf45a50c1833a3ebc535c611fa0f785b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "460e2659f1365fd987c2aad3433855ef24f1b700", "url": "https://api.github.com/repos/rust-lang/rust/commits/460e2659f1365fd987c2aad3433855ef24f1b700", "html_url": "https://github.com/rust-lang/rust/commit/460e2659f1365fd987c2aad3433855ef24f1b700"}, {"sha": "59893bcab0684abf0483fd7da474e34910d9c507", "url": "https://api.github.com/repos/rust-lang/rust/commits/59893bcab0684abf0483fd7da474e34910d9c507", "html_url": "https://github.com/rust-lang/rust/commit/59893bcab0684abf0483fd7da474e34910d9c507"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "43388a891532891d51c396165f3b7075169e683d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45d24fd6bf45a50c1833a3ebc535c611fa0f785b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45d24fd6bf45a50c1833a3ebc535c611fa0f785b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=45d24fd6bf45a50c1833a3ebc535c611fa0f785b", "patch": "@@ -8,7 +8,6 @@ use std::iter;\n use if_chain::if_chain;\n use matches::matches;\n use rustc::hir;\n-use rustc::hir::def::{DefKind, Res};\n use rustc::hir::intravisit::{self, Visitor};\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, Lint, LintArray, LintContext, LintPass};\n use rustc::ty::{self, Predicate, Ty};\n@@ -1668,13 +1667,12 @@ fn lint_extend(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &[hir::Expr]) {\n     }\n }\n \n-fn lint_cstring_as_ptr(cx: &LateContext<'_, '_>, expr: &hir::Expr, new: &hir::Expr, unwrap: &hir::Expr) {\n+fn lint_cstring_as_ptr(cx: &LateContext<'_, '_>, expr: &hir::Expr, source: &hir::Expr, unwrap: &hir::Expr) {\n     if_chain! {\n-        if let hir::ExprKind::Call(ref fun, ref args) = new.node;\n-        if args.len() == 1;\n-        if let hir::ExprKind::Path(ref path) = fun.node;\n-        if let Res::Def(DefKind::Method, did) = cx.tables.qpath_res(path, fun.hir_id);\n-        if match_def_path(cx, did, &paths::CSTRING_NEW);\n+        let source_type = cx.tables.expr_ty(source);\n+        if let ty::Adt(def, substs) = source_type.sty;\n+        if match_def_path(cx, def.did, &paths::RESULT);\n+        if match_type(cx, substs.type_at(0), &paths::CSTRING);\n         then {\n             span_lint_and_then(\n                 cx,"}, {"sha": "5c688a601cd806d0bd83dc2b67f68fd870570d83", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45d24fd6bf45a50c1833a3ebc535c611fa0f785b/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45d24fd6bf45a50c1833a3ebc535c611fa0f785b/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=45d24fd6bf45a50c1833a3ebc535c611fa0f785b", "patch": "@@ -17,7 +17,7 @@ pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n-pub const CSTRING_NEW: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"new\"];\n+pub const CSTRING: [&str; 4] = [\"std\", \"ffi\", \"c_str\", \"CString\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n pub const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];"}, {"sha": "6cdd6b4ff6e77671afb525e01d9f5398ad536a0e", "filename": "tests/ui/cstring.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/45d24fd6bf45a50c1833a3ebc535c611fa0f785b/tests%2Fui%2Fcstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45d24fd6bf45a50c1833a3ebc535c611fa0f785b/tests%2Fui%2Fcstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.rs?ref=45d24fd6bf45a50c1833a3ebc535c611fa0f785b", "patch": "@@ -1,9 +1,24 @@\n+#![deny(clippy::temporary_cstring_as_ptr)]\n+\n fn main() {}\n \n-#[allow(clippy::result_unwrap_used)]\n fn temporary_cstring() {\n     use std::ffi::CString;\n \n     CString::new(\"foo\").unwrap().as_ptr();\n     CString::new(\"foo\").expect(\"dummy\").as_ptr();\n }\n+\n+mod issue4375 {\n+    use std::ffi::CString;\n+    use std::os::raw::c_char;\n+\n+    extern \"C\" {\n+        fn foo(data: *const c_char);\n+    }\n+\n+    pub fn bar(v: &[u8]) {\n+        let cstr = CString::new(v);\n+        unsafe { foo(cstr.unwrap().as_ptr()) }\n+    }\n+}"}, {"sha": "21838237413c4d82b572e95b6be041e1145338c2", "filename": "tests/ui/cstring.stderr", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/45d24fd6bf45a50c1833a3ebc535c611fa0f785b/tests%2Fui%2Fcstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45d24fd6bf45a50c1833a3ebc535c611fa0f785b/tests%2Fui%2Fcstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.stderr?ref=45d24fd6bf45a50c1833a3ebc535c611fa0f785b", "patch": "@@ -1,29 +1,46 @@\n error: you are getting the inner pointer of a temporary `CString`\n-  --> $DIR/cstring.rs:7:5\n+  --> $DIR/cstring.rs:8:5\n    |\n LL |     CString::new(\"foo\").unwrap().as_ptr();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(clippy::temporary_cstring_as_ptr)]` on by default\n+note: lint level defined here\n+  --> $DIR/cstring.rs:1:9\n+   |\n+LL | #![deny(clippy::temporary_cstring_as_ptr)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: that pointer will be invalid outside this expression\n help: assign the `CString` to a variable to extend its lifetime\n-  --> $DIR/cstring.rs:7:5\n+  --> $DIR/cstring.rs:8:5\n    |\n LL |     CString::new(\"foo\").unwrap().as_ptr();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you are getting the inner pointer of a temporary `CString`\n-  --> $DIR/cstring.rs:8:5\n+  --> $DIR/cstring.rs:9:5\n    |\n LL |     CString::new(\"foo\").expect(\"dummy\").as_ptr();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: that pointer will be invalid outside this expression\n help: assign the `CString` to a variable to extend its lifetime\n-  --> $DIR/cstring.rs:8:5\n+  --> $DIR/cstring.rs:9:5\n    |\n LL |     CString::new(\"foo\").expect(\"dummy\").as_ptr();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: you are getting the inner pointer of a temporary `CString`\n+  --> $DIR/cstring.rs:22:22\n+   |\n+LL |         unsafe { foo(cstr.unwrap().as_ptr()) }\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: that pointer will be invalid outside this expression\n+help: assign the `CString` to a variable to extend its lifetime\n+  --> $DIR/cstring.rs:22:22\n+   |\n+LL |         unsafe { foo(cstr.unwrap().as_ptr()) }\n+   |                      ^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n "}]}