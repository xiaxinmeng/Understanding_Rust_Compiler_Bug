{"sha": "92b2230fefe61322dbca8194c8721f848c5d1c2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYjIyMzBmZWZlNjEzMjJkYmNhODE5NGM4NzIxZjg0OGM1ZDFjMmY=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-10T10:45:35Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-10T10:45:35Z"}, "message": "add if let and while let postfix for Option and Result\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "de64e186fe43e3f317aaa2df0ef5d7f4a6c96414", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de64e186fe43e3f317aaa2df0ef5d7f4a6c96414"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92b2230fefe61322dbca8194c8721f848c5d1c2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92b2230fefe61322dbca8194c8721f848c5d1c2f", "html_url": "https://github.com/rust-lang/rust/commit/92b2230fefe61322dbca8194c8721f848c5d1c2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92b2230fefe61322dbca8194c8721f848c5d1c2f/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e80903a96564c2239489a8c630a4748bf21a3659", "url": "https://api.github.com/repos/rust-lang/rust/commits/e80903a96564c2239489a8c630a4748bf21a3659", "html_url": "https://github.com/rust-lang/rust/commit/e80903a96564c2239489a8c630a4748bf21a3659"}], "stats": {"total": 108, "additions": 46, "deletions": 62}, "files": [{"sha": "f3fc92ebf26bf9540127096834c0f812a4d749cd", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92b2230fefe61322dbca8194c8721f848c5d1c2f/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b2230fefe61322dbca8194c8721f848c5d1c2f/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=92b2230fefe61322dbca8194c8721f848c5d1c2f", "patch": "@@ -103,15 +103,15 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n }\n \n #[derive(Clone, Copy)]\n-pub(crate) enum TryEnum {\n+pub enum TryEnum {\n     Result,\n     Option,\n }\n \n impl TryEnum {\n     const ALL: [TryEnum; 2] = [TryEnum::Option, TryEnum::Result];\n \n-    pub(crate) fn from_ty(sema: &Semantics<RootDatabase>, ty: &Type) -> Option<TryEnum> {\n+    pub fn from_ty(sema: &Semantics<RootDatabase>, ty: &Type) -> Option<TryEnum> {\n         let enum_ = match ty.as_adt() {\n             Some(Adt::Enum(it)) => it,\n             _ => return None,"}, {"sha": "be18c845c643d7a8dcf2c0b346a1e84e913ef1d8", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/92b2230fefe61322dbca8194c8721f848c5d1c2f/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b2230fefe61322dbca8194c8721f848c5d1c2f/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=92b2230fefe61322dbca8194c8721f848c5d1c2f", "patch": "@@ -1086,28 +1086,6 @@ impl Type {\n         matches!(self.ty.value, Ty::Apply(ApplicationTy { ctor: TypeCtor::Bool, .. }))\n     }\n \n-    pub fn is_option(&self, db: &dyn HirDatabase) -> bool {\n-        if let Some(adt_ty) = self.as_adt() {\n-            if let Adt::Enum(_) = adt_ty {\n-                if self.display(db).to_string().starts_with(\"Option<\") {\n-                    return true;\n-                }\n-            }\n-        }\n-        false\n-    }\n-\n-    pub fn is_result(&self, db: &dyn HirDatabase) -> bool {\n-        if let Some(adt_ty) = self.as_adt() {\n-            if let Adt::Enum(_) = adt_ty {\n-                if self.display(db).to_string().starts_with(\"Result<\") {\n-                    return true;\n-                }\n-            }\n-        }\n-        false\n-    }\n-\n     pub fn is_mutable_reference(&self) -> bool {\n         matches!(\n             self.ty.value,"}, {"sha": "c5c4426ccd39ad5ced70f138ece8cfd24a60dd4b", "filename": "crates/ra_ide/src/completion/complete_postfix.rs", "status": "modified", "additions": 44, "deletions": 38, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/92b2230fefe61322dbca8194c8721f848c5d1c2f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b2230fefe61322dbca8194c8721f848c5d1c2f/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=92b2230fefe61322dbca8194c8721f848c5d1c2f", "patch": "@@ -14,6 +14,7 @@ use crate::{\n     },\n     CompletionItem,\n };\n+use ra_assists::utils::TryEnum;\n \n pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.config.enable_postfix_completions {\n@@ -38,46 +39,51 @@ pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         None => return,\n     };\n \n-    if receiver_ty.is_option(ctx.db) {\n-        postfix_snippet(\n-            ctx,\n-            cap,\n-            &dot_receiver,\n-            \"ifl\",\n-            \"if let Some {}\",\n-            &format!(\"if let Some($1) = {} {{\\n    $0\\n}}\", receiver_text),\n-        )\n-        .add_to(acc);\n+    if let Some(try_enum) = TryEnum::from_ty(&ctx.sema, &receiver_ty) {\n+        match try_enum {\n+            TryEnum::Result => {\n+                postfix_snippet(\n+                    ctx,\n+                    cap,\n+                    &dot_receiver,\n+                    \"ifl\",\n+                    \"if let Ok {}\",\n+                    &format!(\"if let Ok($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+                )\n+                .add_to(acc);\n \n-        postfix_snippet(\n-            ctx,\n-            cap,\n-            &dot_receiver,\n-            \"while\",\n-            \"while let Some {}\",\n-            &format!(\"while let Some($1) = {} {{\\n    $0\\n}}\", receiver_text),\n-        )\n-        .add_to(acc);\n-    } else if receiver_ty.is_result(ctx.db) {\n-        postfix_snippet(\n-            ctx,\n-            cap,\n-            &dot_receiver,\n-            \"ifl\",\n-            \"if let Ok {}\",\n-            &format!(\"if let Ok($1) = {} {{\\n    $0\\n}}\", receiver_text),\n-        )\n-        .add_to(acc);\n+                postfix_snippet(\n+                    ctx,\n+                    cap,\n+                    &dot_receiver,\n+                    \"while\",\n+                    \"while let Ok {}\",\n+                    &format!(\"while let Ok($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+                )\n+                .add_to(acc);\n+            }\n+            TryEnum::Option => {\n+                postfix_snippet(\n+                    ctx,\n+                    cap,\n+                    &dot_receiver,\n+                    \"ifl\",\n+                    \"if let Some {}\",\n+                    &format!(\"if let Some($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+                )\n+                .add_to(acc);\n \n-        postfix_snippet(\n-            ctx,\n-            cap,\n-            &dot_receiver,\n-            \"while\",\n-            \"while let Ok {}\",\n-            &format!(\"while let Ok($1) = {} {{\\n    $0\\n}}\", receiver_text),\n-        )\n-        .add_to(acc);\n+                postfix_snippet(\n+                    ctx,\n+                    cap,\n+                    &dot_receiver,\n+                    \"while\",\n+                    \"while let Some {}\",\n+                    &format!(\"while let Some($1) = {} {{\\n    $0\\n}}\", receiver_text),\n+                )\n+                .add_to(acc);\n+            }\n+        }\n     } else if receiver_ty.is_bool() || receiver_ty.is_unknown() {\n         postfix_snippet(\n             ctx,"}]}