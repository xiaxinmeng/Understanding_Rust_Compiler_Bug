{"sha": "eca9e3429ad55bdc55fa12e69cab8c2cf54d0ccd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYTllMzQyOWFkNTViZGM1NWZhMTJlNjljYWI4YzJjZjU0ZDBjY2Q=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-23T11:32:15Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-23T14:12:03Z"}, "message": "PrimVal used to allow comparing `Undef`", "tree": {"sha": "6377c2c51d4faff1ec728745e37766f517516cf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6377c2c51d4faff1ec728745e37766f517516cf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eca9e3429ad55bdc55fa12e69cab8c2cf54d0ccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eca9e3429ad55bdc55fa12e69cab8c2cf54d0ccd", "html_url": "https://github.com/rust-lang/rust/commit/eca9e3429ad55bdc55fa12e69cab8c2cf54d0ccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eca9e3429ad55bdc55fa12e69cab8c2cf54d0ccd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ee4fdcd15cc404f6d195027b11c24bdb0905204", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ee4fdcd15cc404f6d195027b11c24bdb0905204", "html_url": "https://github.com/rust-lang/rust/commit/5ee4fdcd15cc404f6d195027b11c24bdb0905204"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "8492019a9bf89c362c931a017f086428c1edd38e", "filename": "src/lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eca9e3429ad55bdc55fa12e69cab8c2cf54d0ccd/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca9e3429ad55bdc55fa12e69cab8c2cf54d0ccd/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=eca9e3429ad55bdc55fa12e69cab8c2cf54d0ccd", "patch": "@@ -8,7 +8,7 @@ use eval_context::{EvalContext};\n use memory::Pointer;\n use value::{PrimVal, Value};\n \n-#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+#[derive(Copy, Clone, Debug)]\n pub enum Lvalue<'tcx> {\n     /// An lvalue referring to a value allocated in the `Memory` system.\n     Ptr {"}, {"sha": "e5ed99b24341aeee2b510a9fcac0237c4fcec0b2", "filename": "src/operator.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eca9e3429ad55bdc55fa12e69cab8c2cf54d0ccd/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca9e3429ad55bdc55fa12e69cab8c2cf54d0ccd/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=eca9e3429ad55bdc55fa12e69cab8c2cf54d0ccd", "patch": "@@ -159,10 +159,22 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 },\n                 // These work on anything\n                 Eq if left_kind == right_kind => {\n-                    return Ok((PrimVal::from_bool(left == right), false));\n+                    let result = match (left, right) {\n+                        (PrimVal::Bytes(left), PrimVal::Bytes(right)) => left == right,\n+                        (PrimVal::Ptr(left), PrimVal::Ptr(right)) => left == right,\n+                        (PrimVal::Undef, _) | (_, PrimVal::Undef) => return Err(EvalError::ReadUndefBytes),\n+                        _ => false,\n+                    };\n+                    return Ok((PrimVal::from_bool(result), false));\n                 }\n                 Ne if left_kind == right_kind => {\n-                    return Ok((PrimVal::from_bool(left != right), false));\n+                    let result = match (left, right) {\n+                        (PrimVal::Bytes(left), PrimVal::Bytes(right)) => left != right,\n+                        (PrimVal::Ptr(left), PrimVal::Ptr(right)) => left != right,\n+                        (PrimVal::Undef, _) | (_, PrimVal::Undef) => return Err(EvalError::ReadUndefBytes),\n+                        _ => true,\n+                    };\n+                    return Ok((PrimVal::from_bool(result), false));\n                 }\n                 // These need both pointers to be in the same allocation\n                 Lt | Le | Gt | Ge | Sub"}, {"sha": "85f79b7831e1850b542aa1cb22f26bceb990a395", "filename": "src/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eca9e3429ad55bdc55fa12e69cab8c2cf54d0ccd/src%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca9e3429ad55bdc55fa12e69cab8c2cf54d0ccd/src%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue.rs?ref=eca9e3429ad55bdc55fa12e69cab8c2cf54d0ccd", "patch": "@@ -42,7 +42,7 @@ pub enum Value {\n /// `memory::Allocation`. It is in many ways like a small chunk of a `Allocation`, up to 8 bytes in\n /// size. Like a range of bytes in an `Allocation`, a `PrimVal` can either represent the raw bytes\n /// of a simple value, a pointer into another `Allocation`, or be undefined.\n-#[derive(Clone, Copy, Debug, Eq, PartialEq)]\n+#[derive(Clone, Copy, Debug)]\n pub enum PrimVal {\n     /// The raw bytes of a simple value.\n     Bytes(u128),"}]}