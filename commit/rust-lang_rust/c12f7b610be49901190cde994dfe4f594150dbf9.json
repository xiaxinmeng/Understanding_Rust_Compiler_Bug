{"sha": "c12f7b610be49901190cde994dfe4f594150dbf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMmY3YjYxMGJlNDk5MDExOTBjZGU5OTRkZmU0ZjU5NDE1MGRiZjk=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-17T10:24:05Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:53:16Z"}, "message": "Lower generics", "tree": {"sha": "dcbcf0f72f8fb23601f415fb390561dff94ffb9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcbcf0f72f8fb23601f415fb390561dff94ffb9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c12f7b610be49901190cde994dfe4f594150dbf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c12f7b610be49901190cde994dfe4f594150dbf9", "html_url": "https://github.com/rust-lang/rust/commit/c12f7b610be49901190cde994dfe4f594150dbf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c12f7b610be49901190cde994dfe4f594150dbf9/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "864b650f92388f4e82d130713b2de9afe637102f", "url": "https://api.github.com/repos/rust-lang/rust/commits/864b650f92388f4e82d130713b2de9afe637102f", "html_url": "https://github.com/rust-lang/rust/commit/864b650f92388f4e82d130713b2de9afe637102f"}], "stats": {"total": 109, "additions": 83, "deletions": 26}, "files": [{"sha": "ed4f60c663f3bfefb6e191c4c05706fa72edd3e6", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c12f7b610be49901190cde994dfe4f594150dbf9/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12f7b610be49901190cde994dfe4f594150dbf9/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=c12f7b610be49901190cde994dfe4f594150dbf9", "patch": "@@ -42,7 +42,7 @@ pub enum TypeParamProvenance {\n }\n \n /// Data about the generic parameters of a function, struct, impl, etc.\n-#[derive(Clone, PartialEq, Eq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug, Default)]\n pub struct GenericParams {\n     pub types: Arena<TypeParamData>,\n     // lifetimes: Arena<LocalLifetimeParamId, LifetimeParamData>,\n@@ -156,7 +156,12 @@ impl GenericParams {\n         (generics, InFile::new(file_id, sm))\n     }\n \n-    fn fill(&mut self, lower_ctx: &LowerCtx, sm: &mut SourceMap, node: &dyn TypeParamsOwner) {\n+    pub(crate) fn fill(\n+        &mut self,\n+        lower_ctx: &LowerCtx,\n+        sm: &mut SourceMap,\n+        node: &dyn TypeParamsOwner,\n+    ) {\n         if let Some(params) = node.type_param_list() {\n             self.fill_params(lower_ctx, sm, params)\n         }\n@@ -165,7 +170,7 @@ impl GenericParams {\n         }\n     }\n \n-    fn fill_bounds(\n+    pub(crate) fn fill_bounds(\n         &mut self,\n         lower_ctx: &LowerCtx,\n         node: &dyn ast::TypeBoundsOwner,\n@@ -229,7 +234,7 @@ impl GenericParams {\n             .push(WherePredicate { target: WherePredicateTarget::TypeRef(type_ref), bound });\n     }\n \n-    fn fill_implicit_impl_trait_args(&mut self, type_ref: &TypeRef) {\n+    pub(crate) fn fill_implicit_impl_trait_args(&mut self, type_ref: &TypeRef) {\n         type_ref.walk(&mut |type_ref| {\n             if let TypeRef::ImplTrait(bounds) = type_ref {\n                 let param = TypeParamData {"}, {"sha": "c3990c2ebbe74b4703d7b9f0166508588ba22569", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c12f7b610be49901190cde994dfe4f594150dbf9/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12f7b610be49901190cde994dfe4f594150dbf9/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=c12f7b610be49901190cde994dfe4f594150dbf9", "patch": "@@ -26,7 +26,7 @@ use test_utils::mark;\n use crate::{\n     attr::Attrs,\n     db::DefDatabase,\n-    generics,\n+    generics::GenericParams,\n     path::{path, AssociatedTypeBinding, GenericArgs, ImportAlias, ModPath, Path},\n     type_ref::{Mutability, TypeBound, TypeRef},\n     visibility::RawVisibility,\n@@ -230,7 +230,7 @@ pub struct Function {\n     pub name: Name,\n     pub attrs: Attrs,\n     pub visibility: RawVisibility,\n-    pub generic_params: generics::GenericParams,\n+    pub generic_params: GenericParams,\n     pub has_self_param: bool,\n     pub params: Vec<TypeRef>,\n     pub ret_type: TypeRef,\n@@ -243,7 +243,7 @@ pub struct Struct {\n     pub name: Name,\n     pub attrs: Attrs,\n     pub visibility: RawVisibility,\n-    pub generic_params: generics::GenericParams,\n+    pub generic_params: GenericParams,\n     pub fields: Fields,\n     pub ast_id: FileAstId<ast::StructDef>,\n     pub kind: StructDefKind,\n@@ -264,7 +264,7 @@ pub struct Union {\n     pub name: Name,\n     pub attrs: Attrs,\n     pub visibility: RawVisibility,\n-    pub generic_params: generics::GenericParams,\n+    pub generic_params: GenericParams,\n     pub fields: Fields,\n     pub ast_id: FileAstId<ast::UnionDef>,\n }\n@@ -274,7 +274,7 @@ pub struct Enum {\n     pub name: Name,\n     pub attrs: Attrs,\n     pub visibility: RawVisibility,\n-    pub generic_params: generics::GenericParams,\n+    pub generic_params: GenericParams,\n     pub variants: Range<Idx<Variant>>,\n     pub ast_id: FileAstId<ast::EnumDef>,\n }\n@@ -300,15 +300,15 @@ pub struct Static {\n pub struct Trait {\n     pub name: Name,\n     pub visibility: RawVisibility,\n-    pub generic_params: generics::GenericParams,\n+    pub generic_params: GenericParams,\n     pub auto: bool,\n     pub items: Vec<AssocItem>,\n     pub ast_id: FileAstId<ast::TraitDef>,\n }\n \n #[derive(Debug, Eq, PartialEq)]\n pub struct Impl {\n-    pub generic_params: generics::GenericParams,\n+    pub generic_params: GenericParams,\n     pub target_trait: Option<TypeRef>,\n     pub target_type: TypeRef,\n     pub is_negative: bool,\n@@ -320,7 +320,7 @@ pub struct Impl {\n pub struct TypeAlias {\n     pub name: Name,\n     pub visibility: RawVisibility,\n-    pub generic_params: generics::GenericParams,\n+    pub generic_params: GenericParams,\n     pub type_ref: Option<TypeRef>,\n     pub ast_id: FileAstId<ast::TypeAliasDef>,\n }"}, {"sha": "737a69c3080ec8f602cc07786ad31e233b6f55bb", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 66, "deletions": 14, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c12f7b610be49901190cde994dfe4f594150dbf9/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12f7b610be49901190cde994dfe4f594150dbf9/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=c12f7b610be49901190cde994dfe4f594150dbf9", "patch": "@@ -1,6 +1,12 @@\n+//! AST -> `ItemTree` lowering code.\n+\n use super::*;\n-use crate::attr::Attrs;\n+use crate::{\n+    attr::Attrs,\n+    generics::{GenericParams, TypeParamData, TypeParamProvenance},\n+};\n use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, HirFileId};\n+use ra_arena::map::ArenaMap;\n use ra_syntax::ast::{self, ModuleItemOwner};\n use smallvec::SmallVec;\n use std::sync::Arc;\n@@ -123,7 +129,7 @@ impl Ctx {\n         let attrs = self.lower_attrs(strukt);\n         let visibility = self.lower_visibility(strukt);\n         let name = strukt.name()?.as_name();\n-        let generic_params = self.lower_generic_params(strukt);\n+        let generic_params = self.lower_generic_params(GenericsOwner::Struct, strukt);\n         let fields = self.lower_fields(&strukt.kind());\n         let ast_id = self.source_ast_id_map.ast_id(strukt);\n         let kind = match strukt.kind() {\n@@ -191,7 +197,7 @@ impl Ctx {\n         let attrs = self.lower_attrs(union);\n         let visibility = self.lower_visibility(union);\n         let name = union.name()?.as_name();\n-        let generic_params = self.lower_generic_params(union);\n+        let generic_params = self.lower_generic_params(GenericsOwner::Union, union);\n         let fields = match union.record_field_def_list() {\n             Some(record_field_def_list) => {\n                 self.lower_fields(&StructKind::Record(record_field_def_list))\n@@ -207,7 +213,7 @@ impl Ctx {\n         let attrs = self.lower_attrs(enum_);\n         let visibility = self.lower_visibility(enum_);\n         let name = enum_.name()?.as_name();\n-        let generic_params = self.lower_generic_params(enum_);\n+        let generic_params = self.lower_generic_params(GenericsOwner::Enum, enum_);\n         let variants = match &enum_.variant_list() {\n             Some(variant_list) => self.lower_variants(variant_list),\n             None => self.next_variant_idx()..self.next_variant_idx(),\n@@ -239,7 +245,6 @@ impl Ctx {\n         let attrs = self.lower_attrs(func);\n         let visibility = self.lower_visibility(func);\n         let name = func.name()?.as_name();\n-        let generic_params = self.lower_generic_params(func);\n \n         let mut params = Vec::new();\n         let mut has_self_param = false;\n@@ -281,24 +286,25 @@ impl Ctx {\n         };\n \n         let ast_id = self.source_ast_id_map.ast_id(func);\n-        let res = Function {\n+        let mut res = Function {\n             name,\n             attrs,\n             visibility,\n-            generic_params,\n+            generic_params: GenericParams::default(),\n             has_self_param,\n             params,\n             ret_type,\n             ast_id,\n         };\n+        res.generic_params = self.lower_generic_params(GenericsOwner::Function(&res), func);\n         Some(res)\n     }\n \n     fn lower_type_alias(&mut self, type_alias: &ast::TypeAliasDef) -> Option<TypeAlias> {\n         let name = type_alias.name()?.as_name();\n         let type_ref = type_alias.type_ref().map(|it| self.lower_type_ref(&it));\n         let visibility = self.lower_visibility(type_alias);\n-        let generic_params = self.lower_generic_params(type_alias);\n+        let generic_params = self.lower_generic_params(GenericsOwner::TypeAlias, type_alias);\n         let ast_id = self.source_ast_id_map.ast_id(type_alias);\n         let res = TypeAlias { name, visibility, generic_params, type_ref, ast_id };\n         Some(res)\n@@ -349,7 +355,7 @@ impl Ctx {\n     fn lower_trait(&mut self, trait_def: &ast::TraitDef) -> Option<Trait> {\n         let name = trait_def.name()?.as_name();\n         let visibility = self.lower_visibility(trait_def);\n-        let generic_params = self.lower_generic_params(trait_def);\n+        let generic_params = self.lower_generic_params(GenericsOwner::Trait(trait_def), trait_def);\n         let auto = trait_def.auto_token().is_some();\n         let items = trait_def.item_list().map(|list| {\n             // FIXME: Does not handle macros\n@@ -367,7 +373,7 @@ impl Ctx {\n     }\n \n     fn lower_impl(&mut self, impl_def: &ast::ImplDef) -> Option<Impl> {\n-        let generic_params = self.lower_generic_params(impl_def);\n+        let generic_params = self.lower_generic_params(GenericsOwner::Impl, impl_def);\n         let target_trait = impl_def.target_trait().map(|tr| self.lower_type_ref(&tr));\n         let target_type = self.lower_type_ref(&impl_def.target_type()?);\n         let is_negative = impl_def.excl_token().is_some();\n@@ -465,10 +471,43 @@ impl Ctx {\n \n     fn lower_generic_params(\n         &mut self,\n-        _item: &impl ast::TypeParamsOwner,\n-    ) -> generics::GenericParams {\n-        // TODO\n-        generics::GenericParams { types: Arena::new(), where_predicates: Vec::new() }\n+        owner: GenericsOwner<'_>,\n+        node: &impl ast::TypeParamsOwner,\n+    ) -> GenericParams {\n+        let mut sm = &mut ArenaMap::default();\n+        let mut generics = GenericParams::default();\n+        match owner {\n+            GenericsOwner::Function(func) => {\n+                generics.fill(&self.body_ctx, sm, node);\n+                // lower `impl Trait` in arguments\n+                for param in &func.params {\n+                    generics.fill_implicit_impl_trait_args(param);\n+                }\n+            }\n+            GenericsOwner::Struct\n+            | GenericsOwner::Enum\n+            | GenericsOwner::Union\n+            | GenericsOwner::TypeAlias => {\n+                generics.fill(&self.body_ctx, sm, node);\n+            }\n+            GenericsOwner::Trait(trait_def) => {\n+                // traits get the Self type as an implicit first type parameter\n+                let self_param_id = generics.types.alloc(TypeParamData {\n+                    name: Some(name![Self]),\n+                    default: None,\n+                    provenance: TypeParamProvenance::TraitSelf,\n+                });\n+                sm.insert(self_param_id, Either::Left(trait_def.clone()));\n+                // add super traits as bounds on Self\n+                // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n+                let self_param = TypeRef::Path(name![Self].into());\n+                generics.fill_bounds(&self.body_ctx, trait_def, self_param);\n+\n+                generics.fill(&self.body_ctx, &mut sm, node);\n+            }\n+            GenericsOwner::Impl => {}\n+        }\n+        generics\n     }\n \n     fn lower_attrs(&self, item: &impl ast::AttrsOwner) -> Attrs {\n@@ -503,3 +542,16 @@ fn desugar_future_path(orig: TypeRef) -> Path {\n \n     Path::from_known_path(path, generic_args)\n }\n+\n+enum GenericsOwner<'a> {\n+    /// We need access to the partially-lowered `Function` for lowering `impl Trait` in argument\n+    /// position.\n+    Function(&'a Function),\n+    Struct,\n+    Enum,\n+    Union,\n+    /// The `TraitDef` is needed to fill the source map for the implicit `Self` parameter.\n+    Trait(&'a ast::TraitDef),\n+    TypeAlias,\n+    Impl,\n+}"}]}