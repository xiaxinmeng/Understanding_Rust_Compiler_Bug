{"sha": "765eebf064ae17347f3532791760fc5c2150b5ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NWVlYmYwNjRhZTE3MzQ3ZjM1MzI3OTE3NjBmYzVjMjE1MGI1ZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-01T06:41:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-01T06:41:48Z"}, "message": "Auto merge of #62253 - Centril:rollup-115uuuq, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #62062 (Use a more efficient iteration order for forward dataflow)\n - #62063 (Use a more efficient iteration order for backward dataflow)\n - #62224 (rustdoc: remove unused derives and variants)\n - #62228 (Extend the #[must_use] lint to boxed types)\n - #62235 (Extend the `#[must_use]` lint to arrays)\n - #62239 (Fix a typo)\n - #62241 (Always parse 'async unsafe fn' + properly ban in 2015)\n - #62248 (before_exec actually will only get deprecated with 1.37)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "9077efea1b800006ddff12343e010f949d977b09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9077efea1b800006ddff12343e010f949d977b09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/765eebf064ae17347f3532791760fc5c2150b5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/765eebf064ae17347f3532791760fc5c2150b5ea", "html_url": "https://github.com/rust-lang/rust/commit/765eebf064ae17347f3532791760fc5c2150b5ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/765eebf064ae17347f3532791760fc5c2150b5ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5748825cc8c74cccef0059cdd4043e6e9b4aa188", "url": "https://api.github.com/repos/rust-lang/rust/commits/5748825cc8c74cccef0059cdd4043e6e9b4aa188", "html_url": "https://github.com/rust-lang/rust/commit/5748825cc8c74cccef0059cdd4043e6e9b4aa188"}, {"sha": "1abbf4b864f37809469d26df28a5eab14b89ce10", "url": "https://api.github.com/repos/rust-lang/rust/commits/1abbf4b864f37809469d26df28a5eab14b89ce10", "html_url": "https://github.com/rust-lang/rust/commit/1abbf4b864f37809469d26df28a5eab14b89ce10"}], "stats": {"total": 478, "additions": 359, "deletions": 119}, "files": [{"sha": "5ceeea8d037cbc538199a0803fee386bfc4fb96f", "filename": "RELEASES.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -309,9 +309,9 @@ Misc\n \n Compatibility Notes\n -------------------\n-- [`Command::before_exec` is now deprecated in favor of the\n-  unsafe method `Command::pre_exec`.][58059]\n-- [Use of `ATOMIC_{BOOL, ISIZE, USIZE}_INIT` is now deprecated.][57425] As you\n+- [`Command::before_exec` is being replaced by the unsafe method\n+  `Command::pre_exec`][58059] and will be deprecated with Rust 1.37.0.\n+- [Use of `ATOMIC_{BOOL, ISIZE, USIZE}_INIT` is now deprecated][57425] as you\n   can now use `const` functions in `static` variables.\n \n [58370]: https://github.com/rust-lang/rust/pull/58370/"}, {"sha": "e843303380ad0dfd91d58cce14d828d36556de16", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -337,16 +337,16 @@ impl char {\n     /// ```\n     /// // as chars\n     /// let eastern = '\u6771';\n-    /// let capitol = '\u4eac';\n+    /// let capital = '\u4eac';\n     ///\n     /// // both can be represented as three bytes\n     /// assert_eq!(3, eastern.len_utf8());\n-    /// assert_eq!(3, capitol.len_utf8());\n+    /// assert_eq!(3, capital.len_utf8());\n     ///\n     /// // as a &str, these two are encoded in UTF-8\n     /// let tokyo = \"\u6771\u4eac\";\n     ///\n-    /// let len = eastern.len_utf8() + capitol.len_utf8();\n+    /// let len = eastern.len_utf8() + capital.len_utf8();\n     ///\n     /// // we can see that they take six bytes total...\n     /// assert_eq!(6, tokyo.len());"}, {"sha": "2db2e0bc0da96b5b0100e41ce5526556bdfd455f", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -48,7 +48,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         }\n \n         let ty = cx.tables.expr_ty(&expr);\n-        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\");\n+        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\", \"\", false);\n \n         let mut fn_warned = false;\n         let mut op_warned = false;\n@@ -133,23 +133,39 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             ty: Ty<'tcx>,\n             expr: &hir::Expr,\n             span: Span,\n-            descr_post_path: &str,\n+            descr_pre: &str,\n+            descr_post: &str,\n+            plural: bool,\n         ) -> bool {\n             if ty.is_unit() || cx.tcx.is_ty_uninhabited_from(\n                 cx.tcx.hir().get_module_parent(expr.hir_id), ty)\n             {\n                 return true;\n             }\n \n+            let plural_suffix = if plural { \"s\" } else { \"\" };\n+\n             match ty.sty {\n-                ty::Adt(def, _) => check_must_use_def(cx, def.did, span, \"\", descr_post_path),\n+                ty::Adt(..) if ty.is_box() => {\n+                    let boxed_ty = ty.boxed_ty();\n+                    let descr_pre = &format!(\"{}boxed \", descr_pre);\n+                    check_must_use_ty(cx, boxed_ty, expr, span, descr_pre, descr_post, plural)\n+                }\n+                ty::Adt(def, _) => {\n+                    check_must_use_def(cx, def.did, span, descr_pre, descr_post)\n+                }\n                 ty::Opaque(def, _) => {\n                     let mut has_emitted = false;\n                     for (predicate, _) in &cx.tcx.predicates_of(def).predicates {\n                         if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n                             let trait_ref = poly_trait_predicate.skip_binder().trait_ref;\n                             let def_id = trait_ref.def_id;\n-                            if check_must_use_def(cx, def_id, span, \"implementer of \", \"\") {\n+                            let descr_pre = &format!(\n+                                \"{}implementer{} of \",\n+                                descr_pre,\n+                                plural_suffix,\n+                            );\n+                            if check_must_use_def(cx, def_id, span, descr_pre, descr_post) {\n                                 has_emitted = true;\n                                 break;\n                             }\n@@ -162,7 +178,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                     for predicate in binder.skip_binder().iter() {\n                         if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate {\n                             let def_id = trait_ref.def_id;\n-                            if check_must_use_def(cx, def_id, span, \"\", \" trait object\") {\n+                            let descr_post = &format!(\n+                                \" trait object{}{}\",\n+                                plural_suffix,\n+                                descr_post,\n+                            );\n+                            if check_must_use_def(cx, def_id, span, descr_pre, descr_post) {\n                                 has_emitted = true;\n                                 break;\n                             }\n@@ -179,14 +200,27 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                         vec![]\n                     };\n                     for (i, ty) in tys.iter().map(|k| k.expect_ty()).enumerate() {\n-                        let descr_post_path = &format!(\" in tuple element {}\", i);\n+                        let descr_post = &format!(\" in tuple element {}\", i);\n                         let span = *spans.get(i).unwrap_or(&span);\n-                        if check_must_use_ty(cx, ty, expr, span, descr_post_path) {\n+                        if check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, plural) {\n                             has_emitted = true;\n                         }\n                     }\n                     has_emitted\n                 }\n+                ty::Array(ty, len) => match len.assert_usize(cx.tcx) {\n+                    // If the array is definitely non-empty, we can do `#[must_use]` checking.\n+                    Some(n) if n != 0 => {\n+                        let descr_pre = &format!(\n+                            \"{}array{} of \",\n+                            descr_pre,\n+                            plural_suffix,\n+                        );\n+                        check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, true)\n+                    }\n+                    // Otherwise, we don't lint, to avoid false positives.\n+                    _ => false,\n+                }\n                 _ => false,\n             }\n         }"}, {"sha": "6cdd9de8b954d143889dbe9ae5df3b138973db99", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -228,9 +228,25 @@ where\n     BD: BitDenotation<'tcx>,\n {\n     fn walk_cfg(&mut self, in_out: &mut BitSet<BD::Idx>) {\n-        let mut dirty_queue: WorkQueue<mir::BasicBlock> =\n-            WorkQueue::with_all(self.builder.body.basic_blocks().len());\n         let body = self.builder.body;\n+\n+        // Initialize the dirty queue in reverse post-order. This makes it more likely that the\n+        // entry state for each basic block will have the effects of its predecessors applied\n+        // before it is processed. In fact, for CFGs without back edges, this guarantees that\n+        // dataflow will converge in exactly `N` iterations, where `N` is the number of basic\n+        // blocks.\n+        let mut dirty_queue: WorkQueue<mir::BasicBlock> =\n+            WorkQueue::with_none(body.basic_blocks().len());\n+        for (bb, _) in traversal::reverse_postorder(body) {\n+            dirty_queue.insert(bb);\n+        }\n+\n+        // Add blocks which are not reachable from START_BLOCK to the work queue. These blocks will\n+        // be processed after the ones added above.\n+        for bb in body.basic_blocks().indices() {\n+            dirty_queue.insert(bb);\n+        }\n+\n         while let Some(bb) = dirty_queue.pop() {\n             let (on_entry, trans) = self.builder.flow_state.sets.get_mut(bb.index());\n             debug_assert!(in_out.words().len() == on_entry.words().len());"}, {"sha": "8ead571d9664decb5df16745a30252b2d96ab464", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -75,9 +75,24 @@ pub fn liveness_of_locals<'tcx>(\n \n     let mut bits = LiveVarSet::new_empty(num_live_vars);\n \n-    // queue of things that need to be re-processed, and a set containing\n-    // the things currently in the queue\n-    let mut dirty_queue: WorkQueue<BasicBlock> = WorkQueue::with_all(body.basic_blocks().len());\n+    // The dirty queue contains the set of basic blocks whose entry sets have changed since they\n+    // were last processed. At the start of the analysis, we initialize the queue in post-order to\n+    // make it more likely that the entry set for a given basic block will have the effects of all\n+    // its successors in the CFG applied before it is processed.\n+    //\n+    // FIXME(ecstaticmorse): Reverse post-order on the reverse CFG may generate a better iteration\n+    // order when cycles are present, but the overhead of computing the reverse CFG may outweigh\n+    // any benefits. Benchmark this and find out.\n+    let mut dirty_queue: WorkQueue<BasicBlock> = WorkQueue::with_none(body.basic_blocks().len());\n+    for (bb, _) in traversal::postorder(body) {\n+        dirty_queue.insert(bb);\n+    }\n+\n+    // Add blocks which are not reachable from START_BLOCK to the work queue. These blocks will\n+    // be processed after the ones added above.\n+    for bb in body.basic_blocks().indices() {\n+        dirty_queue.insert(bb);\n+    }\n \n     let predecessors = body.predecessors();\n "}, {"sha": "560635962995cb268263db3023691c631fa12f6b", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -837,13 +837,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                                  the relevant `fold_*()` method in `PlaceholderExpander`?\");\n     }\n \n-    fn visit_fn_header(&mut self, header: &'a FnHeader) {\n-        if header.asyncness.node.is_async() && self.session.rust_2015() {\n-            struct_span_err!(self.session, header.asyncness.span, E0670,\n-                             \"`async fn` is not permitted in the 2015 edition\").emit();\n-        }\n-    }\n-\n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n         match ii.node {\n             ImplItemKind::Method(ref sig, _) => {"}, {"sha": "ad211763a6c46e4be4106948c0ad873f7aecf6fb", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -16,7 +16,7 @@ use syntax_pos::Span;\n \n use crate::html::escape::Escape;\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub enum Cfg {\n     /// Accepts all configurations.\n     True,"}, {"sha": "3fe048a6986bb2e0bb33d70e7888560ea2226ab8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 54, "deletions": 57, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -223,7 +223,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct ExternalCrate {\n     pub name: String,\n     pub src: FileName,\n@@ -355,7 +355,7 @@ impl Clean<ExternalCrate> for CrateNum {\n /// Anything with a source location and set of attributes and, optionally, a\n /// name. That is, anything that can be documented. This doesn't correspond\n /// directly to the AST's concept of an item; it's a strict superset.\n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone)]\n pub struct Item {\n     /// Stringified span\n     pub source: Span,\n@@ -528,7 +528,7 @@ impl Item {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub enum ItemEnum {\n     ExternCrateItem(String, Option<String>),\n     ImportItem(Import),\n@@ -594,7 +594,7 @@ impl ItemEnum {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Module {\n     pub items: Vec<Item>,\n     pub is_crate: bool,\n@@ -731,7 +731,7 @@ impl<I: IntoIterator<Item=ast::NestedMetaItem>> NestedAttributesExt for I {\n /// Included files are kept separate from inline doc comments so that proper line-number\n /// information can be given when a doctest fails. Sugared doc comments and \"raw\" doc comments are\n /// kept separate because of issue #42760.\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum DocFragment {\n     /// A doc fragment created from a `///` or `//!` doc comment.\n     SugaredDoc(usize, syntax_pos::Span, String),\n@@ -781,7 +781,7 @@ impl<'a> FromIterator<&'a DocFragment> for String {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Default)]\n+#[derive(Clone, Debug, Default)]\n pub struct Attributes {\n     pub doc_strings: Vec<DocFragment>,\n     pub other_attrs: Vec<ast::Attribute>,\n@@ -1048,7 +1048,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum GenericBound {\n     TraitBound(PolyTrait, hir::TraitBoundModifier),\n     Outlives(Lifetime),\n@@ -1231,7 +1231,7 @@ impl<'tcx> Clean<Option<Vec<GenericBound>>> for InternalSubsts<'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct Lifetime(String);\n \n impl Lifetime {\n@@ -1326,7 +1326,7 @@ impl Clean<Option<Lifetime>> for ty::RegionKind {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum WherePredicate {\n     BoundPredicate { ty: Type, bounds: Vec<GenericBound> },\n     RegionPredicate { lifetime: Lifetime, bounds: Vec<GenericBound> },\n@@ -1464,7 +1464,7 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum GenericParamDefKind {\n     Lifetime,\n     Type {\n@@ -1498,7 +1498,7 @@ impl GenericParamDefKind {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct GenericParamDef {\n     pub name: String,\n \n@@ -1610,7 +1610,7 @@ impl Clean<GenericParamDef> for hir::GenericParam {\n }\n \n // maybe use a Generic enum and use Vec<Generic>?\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Default, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Default, Hash)]\n pub struct Generics {\n     pub params: Vec<GenericParamDef>,\n     pub where_predicates: Vec<WherePredicate>,\n@@ -1874,7 +1874,7 @@ pub fn get_all_types(\n     (all_types.into_iter().collect(), ret_types)\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Method {\n     pub generics: Generics,\n     pub decl: FnDecl,\n@@ -1902,7 +1902,7 @@ impl<'a> Clean<Method> for (&'a hir::MethodSig, &'a hir::Generics, hir::BodyId,\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct TyMethod {\n     pub header: hir::FnHeader,\n     pub decl: FnDecl,\n@@ -1911,7 +1911,7 @@ pub struct TyMethod {\n     pub ret_types: Vec<Type>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n@@ -1952,7 +1952,7 @@ impl Clean<Item> for doctree::Function<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct FnDecl {\n     pub inputs: Arguments,\n     pub output: FunctionRetTy,\n@@ -1989,7 +1989,7 @@ impl FnDecl {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct Arguments {\n     pub values: Vec<Argument>,\n }\n@@ -2063,13 +2063,13 @@ impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct Argument {\n     pub type_: Type,\n     pub name: String,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n+#[derive(Clone, PartialEq, Debug)]\n pub enum SelfTy {\n     SelfValue,\n     SelfBorrowed(Option<Lifetime>, Mutability),\n@@ -2093,7 +2093,7 @@ impl Argument {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum FunctionRetTy {\n     Return(Type),\n     DefaultReturn,\n@@ -2117,7 +2117,7 @@ impl GetDefId for FunctionRetTy {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Trait {\n     pub auto: bool,\n     pub unsafety: hir::Unsafety,\n@@ -2153,7 +2153,7 @@ impl Clean<Item> for doctree::Trait<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct TraitAlias {\n     pub generics: Generics,\n     pub bounds: Vec<GenericBound>,\n@@ -2437,7 +2437,7 @@ impl Clean<Item> for ty::AssocItem {\n }\n \n /// A trait reference, which may have higher ranked lifetimes.\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct PolyTrait {\n     pub trait_: Type,\n     pub generic_params: Vec<GenericParamDef>,\n@@ -2446,7 +2446,7 @@ pub struct PolyTrait {\n /// A representation of a type suitable for hyperlinking purposes. Ideally, one can get the original\n /// type out of the AST/`TyCtxt` given one of these, if more information is needed. Most\n /// importantly, it does not preserve mutability or boxes.\n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum Type {\n     /// Structs/enums/traits (most that would be an `hir::TyKind::Path`).\n     ResolvedPath {\n@@ -2469,7 +2469,6 @@ pub enum Type {\n     Array(Box<Type>, String),\n     Never,\n     CVarArgs,\n-    Unique(Box<Type>),\n     RawPointer(Mutability, Box<Type>),\n     BorrowedRef {\n         lifetime: Option<Lifetime>,\n@@ -2491,7 +2490,7 @@ pub enum Type {\n     ImplTrait(Vec<GenericBound>),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Copy, Debug)]\n+#[derive(Clone, PartialEq, Eq, Hash, Copy, Debug)]\n pub enum PrimitiveType {\n     Isize, I8, I16, I32, I64, I128,\n     Usize, U8, U16, U32, U64, U128,\n@@ -2510,7 +2509,7 @@ pub enum PrimitiveType {\n     CVarArgs,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Copy, Debug)]\n+#[derive(Clone, Copy, Debug)]\n pub enum TypeKind {\n     Enum,\n     Function,\n@@ -2520,7 +2519,6 @@ pub enum TypeKind {\n     Struct,\n     Union,\n     Trait,\n-    Variant,\n     Typedef,\n     Foreign,\n     Macro,\n@@ -3190,7 +3188,7 @@ impl Clean<Item> for ty::FieldDef {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcDecodable, RustcEncodable, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n pub enum Visibility {\n     Public,\n     Inherited,\n@@ -3219,15 +3217,15 @@ impl Clean<Option<Visibility>> for ty::Visibility {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Struct {\n     pub struct_type: doctree::StructType,\n     pub generics: Generics,\n     pub fields: Vec<Item>,\n     pub fields_stripped: bool,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Union {\n     pub struct_type: doctree::StructType,\n     pub generics: Generics,\n@@ -3278,7 +3276,7 @@ impl Clean<Item> for doctree::Union<'_> {\n /// This is a more limited form of the standard Struct, different in that\n /// it lacks the things most items have (name, id, parameterization). Found\n /// only as a variant in an enum.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct VariantStruct {\n     pub struct_type: doctree::StructType,\n     pub fields: Vec<Item>,\n@@ -3295,7 +3293,7 @@ impl Clean<VariantStruct> for ::rustc::hir::VariantData {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Enum {\n     pub variants: IndexVec<VariantIdx, Item>,\n     pub generics: Generics,\n@@ -3321,7 +3319,7 @@ impl Clean<Item> for doctree::Enum<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Variant {\n     pub kind: VariantKind,\n }\n@@ -3384,7 +3382,7 @@ impl Clean<Item> for ty::VariantDef {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub enum VariantKind {\n     CLike,\n     Tuple(Vec<Type>),\n@@ -3402,7 +3400,7 @@ impl Clean<VariantKind> for hir::VariantData {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Span {\n     pub filename: FileName,\n     pub loline: usize,\n@@ -3448,7 +3446,7 @@ impl Clean<Span> for syntax_pos::Span {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct Path {\n     pub global: bool,\n     pub res: Res,\n@@ -3471,7 +3469,7 @@ impl Clean<Path> for hir::Path {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum GenericArg {\n     Lifetime(Lifetime),\n     Type(Type),\n@@ -3488,7 +3486,7 @@ impl fmt::Display for GenericArg {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum GenericArgs {\n     AngleBracketed {\n         args: Vec<GenericArg>,\n@@ -3528,7 +3526,7 @@ impl Clean<GenericArgs> for hir::GenericArgs {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct PathSegment {\n     pub name: String,\n     pub args: GenericArgs,\n@@ -3553,7 +3551,6 @@ fn strip_type(ty: Type) -> Type {\n         }\n         Type::Slice(inner_ty) => Type::Slice(Box::new(strip_type(*inner_ty))),\n         Type::Array(inner_ty, s) => Type::Array(Box::new(strip_type(*inner_ty)), s),\n-        Type::Unique(inner_ty) => Type::Unique(Box::new(strip_type(*inner_ty))),\n         Type::RawPointer(m, inner_ty) => Type::RawPointer(m, Box::new(strip_type(*inner_ty))),\n         Type::BorrowedRef { lifetime, mutability, type_ } => {\n             Type::BorrowedRef { lifetime, mutability, type_: Box::new(strip_type(*type_)) }\n@@ -3625,7 +3622,7 @@ impl Clean<String> for InternedString {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Typedef {\n     pub type_: Type,\n     pub generics: Generics,\n@@ -3649,7 +3646,7 @@ impl Clean<Item> for doctree::Typedef<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Existential {\n     pub bounds: Vec<GenericBound>,\n     pub generics: Generics,\n@@ -3673,7 +3670,7 @@ impl Clean<Item> for doctree::Existential<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct BareFunctionDecl {\n     pub unsafety: hir::Unsafety,\n     pub generic_params: Vec<GenericParamDef>,\n@@ -3695,7 +3692,7 @@ impl Clean<BareFunctionDecl> for hir::BareFnTy {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Static {\n     pub type_: Type,\n     pub mutability: Mutability,\n@@ -3725,7 +3722,7 @@ impl Clean<Item> for doctree::Static<'_> {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub struct Constant {\n     pub type_: Type,\n     pub expr: String,\n@@ -3749,7 +3746,7 @@ impl Clean<Item> for doctree::Constant<'_> {\n     }\n }\n \n-#[derive(Debug, Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Copy, Hash)]\n+#[derive(Debug, Clone, PartialEq, Eq, Copy, Hash)]\n pub enum Mutability {\n     Mutable,\n     Immutable,\n@@ -3764,7 +3761,7 @@ impl Clean<Mutability> for hir::Mutability {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Copy, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Copy, Debug, Hash)]\n pub enum ImplPolarity {\n     Positive,\n     Negative,\n@@ -3779,7 +3776,7 @@ impl Clean<ImplPolarity> for hir::ImplPolarity {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Impl {\n     pub unsafety: hir::Unsafety,\n     pub generics: Generics,\n@@ -4003,15 +4000,15 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub enum Import {\n     // use source as str;\n     Simple(String, ImportSource),\n     // use source::*;\n     Glob(ImportSource)\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct ImportSource {\n     pub path: Path,\n     pub did: Option<DefId>,\n@@ -4227,7 +4224,7 @@ fn resolve_use_source(cx: &DocContext<'_>, path: Path) -> ImportSource {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Macro {\n     pub source: String,\n     pub imported_from: Option<String>,\n@@ -4256,7 +4253,7 @@ impl Clean<Item> for doctree::Macro<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct ProcMacro {\n     pub kind: MacroKind,\n     pub helpers: Vec<String>,\n@@ -4280,7 +4277,7 @@ impl Clean<Item> for doctree::ProcMacro<'_> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Stability {\n     pub level: stability::StabilityLevel,\n     pub feature: Option<String>,\n@@ -4290,7 +4287,7 @@ pub struct Stability {\n     pub issue: Option<u32>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, Debug)]\n pub struct Deprecation {\n     pub since: Option<String>,\n     pub note: Option<String>,\n@@ -4340,13 +4337,13 @@ impl Clean<Deprecation> for attr::Deprecation {\n \n /// An type binding on an associated type (e.g., `A = Bar` in `Foo<A = Bar>` or\n /// `A: Send + Sync` in `Foo<A: Send + Sync>`).\n-#[derive(Clone, PartialEq, Eq, RustcDecodable, RustcEncodable, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct TypeBinding {\n     pub name: String,\n     pub kind: TypeBindingKind,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcDecodable, RustcEncodable, Debug, Hash)]\n+#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum TypeBindingKind {\n     Equality {\n         ty: Type,"}, {"sha": "2557b8d1627c0a4a8f37688713f135a1d374cbe7", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -78,7 +78,7 @@ impl Module<'hir> {\n     }\n }\n \n-#[derive(Debug, Clone, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Debug, Clone, Copy)]\n pub enum StructType {\n     /// A braced struct\n     Plain,"}, {"sha": "9e5cc03b8312323f01505e4371c1e80b8a959474", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -737,9 +737,6 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter<'_>, use_absolute: bool) ->\n                 }\n             }\n         }\n-        clean::Unique(..) => {\n-            panic!(\"should have been cleaned\")\n-        }\n     }\n }\n "}, {"sha": "5f1a1b31616c1f0869bac051fac1206247021e1c", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -110,7 +110,6 @@ impl From<clean::TypeKind> for ItemType {\n             clean::TypeKind::Module     => ItemType::Module,\n             clean::TypeKind::Static     => ItemType::Static,\n             clean::TypeKind::Const      => ItemType::Constant,\n-            clean::TypeKind::Variant    => ItemType::Variant,\n             clean::TypeKind::Typedef    => ItemType::Typedef,\n             clean::TypeKind::Foreign    => ItemType::ForeignType,\n             clean::TypeKind::Macro      => ItemType::Macro,"}, {"sha": "2080637ecb402dab68c79df8c821c83b45ee5bdc", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -5188,9 +5188,6 @@ fn collect_paths_for_type(first_ty: clean::Type) -> Vec<String> {\n             clean::Type::Array(ty, _) => {\n                 work.push_back(*ty);\n             },\n-            clean::Type::Unique(ty) => {\n-                work.push_back(*ty);\n-            },\n             clean::Type::RawPointer(_, ty) => {\n                 work.push_back(*ty);\n             },"}, {"sha": "ba423300e027760f4e60f5c44495e70a2721cd8e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -42,8 +42,6 @@ extern crate test as testing;\n #[macro_use] extern crate log;\n extern crate rustc_errors as errors;\n \n-extern crate serialize as rustc_serialize; // used by deriving\n-\n use std::default::Default;\n use std::env;\n use std::panic;"}, {"sha": "797d85e941d96d2ee430039fd6f2f197e435e2aa", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -103,7 +103,9 @@ pub fn set_hook(hook: Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>) {\n         HOOK_LOCK.write_unlock();\n \n         if let Hook::Custom(ptr) = old_hook {\n-            Box::from_raw(ptr);\n+            #[allow(unused_must_use)] {\n+                Box::from_raw(ptr);\n+            }\n         }\n     }\n }"}, {"sha": "696b5f48385e7a9631d65207884e7a55acf40f6b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -5734,9 +5734,12 @@ impl<'a> Parser<'a> {\n     {\n         let is_const_fn = self.eat_keyword(kw::Const);\n         let const_span = self.prev_span;\n-        let unsafety = self.parse_unsafety();\n         let asyncness = self.parse_asyncness();\n+        if let IsAsync::Async { .. } = asyncness {\n+            self.ban_async_in_2015(self.prev_span);\n+        }\n         let asyncness = respan(self.prev_span, asyncness);\n+        let unsafety = self.parse_unsafety();\n         let (constness, unsafety, abi) = if is_const_fn {\n             (respan(const_span, Constness::Const), unsafety, Abi::Rust)\n         } else {\n@@ -7254,13 +7257,7 @@ impl<'a> Parser<'a> {\n                                         item_,\n                                         visibility,\n                                         maybe_append(attrs, extra_attrs));\n-                if self.token.span.rust_2015() {\n-                    self.diagnostic().struct_span_err_with_code(\n-                        async_span,\n-                        \"`async fn` is not permitted in the 2015 edition\",\n-                        DiagnosticId::Error(\"E0670\".into())\n-                    ).emit();\n-                }\n+                self.ban_async_in_2015(async_span);\n                 return Ok(Some(item));\n             }\n         }\n@@ -7534,6 +7531,19 @@ impl<'a> Parser<'a> {\n         self.parse_macro_use_or_failure(attrs, macros_allowed, attributes_allowed, lo, visibility)\n     }\n \n+    /// We are parsing `async fn`. If we are on Rust 2015, emit an error.\n+    fn ban_async_in_2015(&self, async_span: Span) {\n+        if async_span.rust_2015() {\n+            self.diagnostic()\n+                .struct_span_err_with_code(\n+                    async_span,\n+                    \"`async fn` is not permitted in the 2015 edition\",\n+                    DiagnosticId::Error(\"E0670\".into())\n+                )\n+                .emit();\n+        }\n+    }\n+\n     /// Parses a foreign item.\n     crate fn parse_foreign_item(&mut self) -> PResult<'a, ForeignItem> {\n         maybe_whole!(self, NtForeignItem, |ni| ni);"}, {"sha": "111fb8aa506a4b91116101b55d1a42fce064d135", "filename": "src/test/run-pass/issues/issue-30530.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-30530.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -12,7 +12,9 @@ pub enum Handler {\n }\n \n fn main() {\n-    take(Handler::Default, Box::new(main));\n+    #[allow(unused_must_use)] {\n+        take(Handler::Default, Box::new(main));\n+    }\n }\n \n #[inline(never)]"}, {"sha": "6badd203842ffec55d36c7e8aa8d7a5efb6277f7", "filename": "src/test/run-pass/panics/panic-handler-flail-wildly.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-handler-flail-wildly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-handler-flail-wildly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-handler-flail-wildly.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n+\n #![allow(stable_features)]\n+#![allow(unused_must_use)]\n \n // ignore-emscripten no threads support\n "}, {"sha": "0eae1467fbfa0e6e80bdb617297d584f6ffc532b", "filename": "src/test/ui/async-await/async-await.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -134,11 +134,15 @@ trait Bar {\n }\n \n impl Foo {\n-    async fn async_method(x: u8) -> u8 {\n+    async fn async_assoc_item(x: u8) -> u8 {\n         unsafe {\n             unsafe_async_fn(x).await\n         }\n     }\n+\n+    async unsafe fn async_unsafe_assoc_item(x: u8) -> u8 {\n+        unsafe_async_fn(x).await\n+    }\n }\n \n fn test_future_yields_once_then_returns<F, Fut>(f: F)\n@@ -180,12 +184,17 @@ fn main() {\n         async_fn,\n         generic_async_fn,\n         async_fn_with_internal_borrow,\n-        Foo::async_method,\n+        Foo::async_assoc_item,\n         |x| {\n             async move {\n                 unsafe { unsafe_async_fn(x).await }\n             }\n         },\n+        |x| {\n+            async move {\n+                unsafe { Foo::async_unsafe_assoc_item(x).await }\n+            }\n+        },\n     }\n     test_with_borrow! {\n         async_block_with_borrow_named_lifetime,"}, {"sha": "a5bc1810154750cf53a4553cd24958c203d4d44c", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -28,6 +28,12 @@ fn main() {\n         async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n     }\n \n+    accept_item! {\n+        impl Foo {\n+            async fn bar() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n+        }\n+    }\n+\n     let inside_closure = || {\n         async fn bar() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n     };"}, {"sha": "efb4462095d0d7e8b364ede027a5c7429575537f", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -23,7 +23,19 @@ LL | async fn async_baz() {\n    | ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:32:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:16:5\n+   |\n+LL |     async fn foo() {}\n+   |     ^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+   |\n+LL |     async fn foo() {}\n+   |     ^^^^^\n+\n+error[E0670]: `async fn` is not permitted in the 2015 edition\n+  --> $DIR/edition-deny-async-fns-2015.rs:38:9\n    |\n LL |         async fn bar() {}\n    |         ^^^^^\n@@ -35,23 +47,17 @@ LL |         async fn foo() {}\n    |         ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:16:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:33:13\n    |\n-LL |     async fn foo() {}\n-   |     ^^^^^\n+LL |             async fn bar() {}\n+   |             ^^^^^\n \n error[E0706]: trait fns cannot be declared `async`\n   --> $DIR/edition-deny-async-fns-2015.rs:20:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^^^^^^^^^^^^^\n \n-error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n-   |\n-LL |     async fn foo() {}\n-   |     ^^^^^\n-\n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0670`."}, {"sha": "81e0cd799ad7053d7fa0ee49670c03f8d91b8bf0", "filename": "src/test/ui/async-await/no-unsafe-async.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -0,0 +1,11 @@\n+// edition:2018\n+\n+struct S;\n+\n+impl S {\n+    #[cfg(FALSE)]\n+    unsafe async fn g() {} //~ ERROR expected one of `extern` or `fn`, found `async`\n+}\n+\n+#[cfg(FALSE)]\n+unsafe async fn f() {} //~ ERROR expected one of `extern`, `fn`, or `{`, found `async`"}, {"sha": "c339c7c3bf5bf341500d1fd3a5275ab66f30ead2", "filename": "src/test/ui/async-await/no-unsafe-async.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-unsafe-async.stderr?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -0,0 +1,14 @@\n+error: expected one of `extern` or `fn`, found `async`\n+  --> $DIR/no-unsafe-async.rs:7:12\n+   |\n+LL |     unsafe async fn g() {}\n+   |            ^^^^^ expected one of `extern` or `fn` here\n+\n+error: expected one of `extern`, `fn`, or `{`, found `async`\n+  --> $DIR/no-unsafe-async.rs:11:8\n+   |\n+LL | unsafe async fn f() {}\n+   |        ^^^^^ expected one of `extern`, `fn`, or `{` here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "97825dd2f6c43d5c17993bcbbf8083557ccc6f7c", "filename": "src/test/ui/lint/must_use-array.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Flint%2Fmust_use-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Flint%2Fmust_use-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-array.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -0,0 +1,47 @@\n+#![deny(unused_must_use)]\n+\n+#[must_use]\n+struct S;\n+\n+struct A;\n+\n+#[must_use]\n+trait T {}\n+\n+impl T for A {}\n+\n+fn empty() -> [S; 0] {\n+    []\n+}\n+\n+fn singleton() -> [S; 1] {\n+    [S]\n+}\n+\n+fn many() -> [S; 4] {\n+    [S, S, S, S]\n+}\n+\n+fn array_of_impl_trait() -> [impl T; 2] {\n+    [A, A]\n+}\n+\n+fn impl_array() -> [(u8, Box<dyn T>); 2] {\n+    [(0, Box::new(A)), (0, Box::new(A))]\n+}\n+\n+fn array_of_arrays_of_arrays() -> [[[S; 1]; 2]; 1] {\n+    [[[S], [S]]]\n+}\n+\n+fn main() {\n+    empty(); // ok\n+    singleton(); //~ ERROR unused array of `S` that must be used\n+    many(); //~ ERROR unused array of `S` that must be used\n+    ([S], 0, ()); //~ ERROR unused array of `S` in tuple element 0 that must be used\n+    array_of_impl_trait(); //~ ERROR unused array of implementers of `T` that must be used\n+    impl_array();\n+    //~^ ERROR unused array of boxed `T` trait objects in tuple element 1 that must be used\n+    array_of_arrays_of_arrays();\n+    //~^ ERROR unused array of arrays of arrays of `S` that must be used\n+}"}, {"sha": "a6dbd8e93d4d323f071c51a0d3928c6b10f3a04d", "filename": "src/test/ui/lint/must_use-array.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Flint%2Fmust_use-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Flint%2Fmust_use-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-array.stderr?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -0,0 +1,44 @@\n+error: unused array of `S` that must be used\n+  --> $DIR/must_use-array.rs:39:5\n+   |\n+LL |     singleton();\n+   |     ^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/must_use-array.rs:1:9\n+   |\n+LL | #![deny(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: unused array of `S` that must be used\n+  --> $DIR/must_use-array.rs:40:5\n+   |\n+LL |     many();\n+   |     ^^^^^^^\n+\n+error: unused array of `S` in tuple element 0 that must be used\n+  --> $DIR/must_use-array.rs:41:6\n+   |\n+LL |     ([S], 0, ());\n+   |      ^^^\n+\n+error: unused array of implementers of `T` that must be used\n+  --> $DIR/must_use-array.rs:42:5\n+   |\n+LL |     array_of_impl_trait();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused array of boxed `T` trait objects in tuple element 1 that must be used\n+  --> $DIR/must_use-array.rs:43:5\n+   |\n+LL |     impl_array();\n+   |     ^^^^^^^^^^^^^\n+\n+error: unused array of arrays of arrays of `S` that must be used\n+  --> $DIR/must_use-array.rs:45:5\n+   |\n+LL |     array_of_arrays_of_arrays();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "0aa751443a0804f482881df0108e432a7915f466", "filename": "src/test/ui/lint/must_use-trait.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.rs?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -17,6 +17,23 @@ fn get_critical() -> impl NotSoCritical + Critical + DecidedlyUnimportant {\n     Anon {}\n }\n \n+fn get_boxed_critical() -> Box<dyn Critical> {\n+    Box::new(Anon {})\n+}\n+\n+fn get_nested_boxed_critical() -> Box<Box<dyn Critical>> {\n+    Box::new(Box::new(Anon {}))\n+}\n+\n+fn get_critical_tuple() -> (u32, Box<dyn Critical>, impl Critical, ()) {\n+    (0, get_boxed_critical(), get_critical(), ())\n+}\n+\n fn main() {\n     get_critical(); //~ ERROR unused implementer of `Critical` that must be used\n+    get_boxed_critical(); //~ ERROR unused boxed `Critical` trait object that must be used\n+    get_nested_boxed_critical();\n+    //~^ ERROR unused boxed boxed `Critical` trait object that must be used\n+    get_critical_tuple(); //~ ERROR unused boxed `Critical` trait object in tuple element 1\n+    //~^ ERROR unused implementer of `Critical` in tuple element 2\n }"}, {"sha": "be74362e29d62b720dad2da64460f01c15bb1128", "filename": "src/test/ui/lint/must_use-trait.stderr", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/765eebf064ae17347f3532791760fc5c2150b5ea/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_use-trait.stderr?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -1,5 +1,5 @@\n error: unused implementer of `Critical` that must be used\n-  --> $DIR/must_use-trait.rs:21:5\n+  --> $DIR/must_use-trait.rs:33:5\n    |\n LL |     get_critical();\n    |     ^^^^^^^^^^^^^^^\n@@ -10,5 +10,29 @@ note: lint level defined here\n LL | #![deny(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: unused boxed `Critical` trait object that must be used\n+  --> $DIR/must_use-trait.rs:34:5\n+   |\n+LL |     get_boxed_critical();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused boxed boxed `Critical` trait object that must be used\n+  --> $DIR/must_use-trait.rs:35:5\n+   |\n+LL |     get_nested_boxed_critical();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused boxed `Critical` trait object in tuple element 1 that must be used\n+  --> $DIR/must_use-trait.rs:37:5\n+   |\n+LL |     get_critical_tuple();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused implementer of `Critical` in tuple element 2 that must be used\n+  --> $DIR/must_use-trait.rs:37:5\n+   |\n+LL |     get_critical_tuple();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "72b2e1045d642c517347c421b1db92e34c22a70d", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=765eebf064ae17347f3532791760fc5c2150b5ea", "patch": "@@ -1 +1 @@\n-Subproject commit 945f007c0d305c3ec069b5e5d911ef783f6d70e7\n+Subproject commit 72b2e1045d642c517347c421b1db92e34c22a70d"}]}