{"sha": "e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "node_id": "C_kwDOAAsO6NoAKGU2ZTdjMzk5MGVkZDE3MWJhNjYzMzdlYjdkYmQ3NWQwN2FlNWZhNGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-01-17T15:03:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-17T15:03:05Z"}, "message": "Rollup merge of #106962 - compiler-errors:use-sugg-span, r=oli-obk\n\nFix use suggestion span\n\nFixes #106954", "tree": {"sha": "0f11abc1cda8b67002491653948ba532ac8e5784", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f11abc1cda8b67002491653948ba532ac8e5784"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjxripCRBK7hj4Ov3rIwAAaq4IAGE8DTrVkYS8QrMHvu6T9ZiW\n1UVh8GGrBMqFD8pd6MH53yTs9aNPdpVchqxwz8ex1sDhmTFUgVkPrN7LSf7dei41\n9fL8J8R/l9rF+19+n2h9rhQm5NtycVqZf+jjz+fLfMhn7Bm2OZr0fQwcMQi59Dnd\nmeAGq8Ce5P0aa72CJjyxYseosZtzQOVyWw7AmrUDwvHObVipYLc8RsAKMkqzY6kd\nC2/j1dvsrXHq/kl6pdjvIIGLES6YcF0jsM+WrAQl47VRy7Eydn74Qfmgw/PKfw1r\n8p/Zj+zPkQQieyufJTy3TqfGU5I8fq+PVmF3UbOSRj2kGyGbRFs1vFjafHa0GLc=\n=IpDG\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f11abc1cda8b67002491653948ba532ac8e5784\nparent 26c0a38994d3f91851cc4d30c444f9cd0f6a0073\nparent 21725774a228771862f5b8b1c971eb77d54ec261\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1673967785 +0530\ncommitter GitHub <noreply@github.com> 1673967785 +0530\n\nRollup merge of #106962 - compiler-errors:use-sugg-span, r=oli-obk\n\nFix use suggestion span\n\nFixes #106954\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "html_url": "https://github.com/rust-lang/rust/commit/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26c0a38994d3f91851cc4d30c444f9cd0f6a0073", "url": "https://api.github.com/repos/rust-lang/rust/commits/26c0a38994d3f91851cc4d30c444f9cd0f6a0073", "html_url": "https://github.com/rust-lang/rust/commit/26c0a38994d3f91851cc4d30c444f9cd0f6a0073"}, {"sha": "21725774a228771862f5b8b1c971eb77d54ec261", "url": "https://api.github.com/repos/rust-lang/rust/commits/21725774a228771862f5b8b1c971eb77d54ec261", "html_url": "https://github.com/rust-lang/rust/commit/21725774a228771862f5b8b1c971eb77d54ec261"}], "stats": {"total": 94, "additions": 48, "deletions": 46}, "files": [{"sha": "f24e405018b7474eb71b969e4fea74b8aaf56995", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -5,10 +5,10 @@ use rustc_ast::visit::{self, Visitor};\n use rustc_ast::{self as ast, Crate, ItemKind, ModKind, NodeId, Path, CRATE_NODE_ID};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::struct_span_err;\n use rustc_errors::{\n     pluralize, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n };\n+use rustc_errors::{struct_span_err, SuggestionStyle};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, PerNS};\n@@ -2418,7 +2418,7 @@ fn show_candidates(\n         }\n \n         if let Some(span) = use_placement_span {\n-            let add_use = match mode {\n+            let (add_use, trailing) = match mode {\n                 DiagnosticMode::Pattern => {\n                     err.span_suggestions(\n                         span,\n@@ -2428,21 +2428,23 @@ fn show_candidates(\n                     );\n                     return;\n                 }\n-                DiagnosticMode::Import => \"\",\n-                DiagnosticMode::Normal => \"use \",\n+                DiagnosticMode::Import => (\"\", \"\"),\n+                DiagnosticMode::Normal => (\"use \", \";\\n\"),\n             };\n             for candidate in &mut accessible_path_strings {\n                 // produce an additional newline to separate the new use statement\n                 // from the directly following item.\n-                let additional_newline = if let FoundUse::Yes = found_use { \"\" } else { \"\\n\" };\n-                candidate.0 = format!(\"{add_use}{}{append};\\n{additional_newline}\", &candidate.0);\n+                let additional_newline = if let FoundUse::No = found_use && let DiagnosticMode::Normal = mode { \"\\n\" } else { \"\" };\n+                candidate.0 =\n+                    format!(\"{add_use}{}{append}{trailing}{additional_newline}\", &candidate.0);\n             }\n \n-            err.span_suggestions(\n+            err.span_suggestions_with_style(\n                 span,\n                 &msg,\n                 accessible_path_strings.into_iter().map(|a| a.0),\n                 Applicability::MaybeIncorrect,\n+                SuggestionStyle::ShowAlways,\n             );\n             if let [first, .., last] = &path[..] {\n                 let sp = first.ident.span.until(last.ident.span);\n@@ -2463,7 +2465,7 @@ fn show_candidates(\n                 msg.push_str(&candidate.0);\n             }\n \n-            err.note(&msg);\n+            err.help(&msg);\n         }\n     } else if !matches!(mode, DiagnosticMode::Import) {\n         assert!(!inaccessible_path_strings.is_empty());"}, {"sha": "e0b3b8685d6eb02ea62254083bbe848c6d168596", "filename": "tests/ui/empty/empty-macro-use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fempty%2Fempty-macro-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fempty%2Fempty-macro-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty%2Fempty-macro-use.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -4,7 +4,7 @@ error: cannot find macro `macro_two` in this scope\n LL |     macro_two!();\n    |     ^^^^^^^^^\n    |\n-   = note: consider importing this macro:\n+   = help: consider importing this macro:\n            two_macros::macro_two\n \n error: aborting due to previous error"}, {"sha": "92e8a44b55fe570fd2fdacf0fd9f4f1aedc8c01f", "filename": "tests/ui/extenv/issue-55897.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fextenv%2Fissue-55897.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fextenv%2Fissue-55897.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fissue-55897.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -30,7 +30,7 @@ LL |     use env;\n help: consider importing this module instead\n    |\n LL |     use std::env;\n-   |         ~~~~~~~~~\n+   |         ~~~~~~~~\n \n error: cannot determine resolution for the macro `env`\n   --> $DIR/issue-55897.rs:6:22"}, {"sha": "c01901be5fe78d976d102700253637731c744ba0", "filename": "tests/ui/hygiene/globs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fglobs.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -51,7 +51,7 @@ LL | n!(f);\n LL |         n!(f);\n    |            ^ not found in this scope\n    |\n-   = note: consider importing this function:\n+   = help: consider importing this function:\n            foo::f\n    = note: this error originates in the macro `n` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -64,7 +64,7 @@ LL | n!(f);\n LL |                 f\n    |                 ^ not found in this scope\n    |\n-   = note: consider importing this function:\n+   = help: consider importing this function:\n            foo::f\n    = note: this error originates in the macro `n` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3f31b041b62038d329f16c08de10ac3cae1d36c0", "filename": "tests/ui/hygiene/no_implicit_prelude-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fno_implicit_prelude-2018.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -4,7 +4,7 @@ error: cannot find macro `print` in this scope\n LL |         print!();\n    |         ^^^^^\n    |\n-   = note: consider importing this macro:\n+   = help: consider importing this macro:\n            std::print\n \n error: aborting due to previous error"}, {"sha": "b6b1bc5fccf022a3bcd278ecdf527dcb2296b5dd", "filename": "tests/ui/imports/bad-import-in-nested.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fimports%2Fbad-import-in-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fimports%2Fbad-import-in-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fbad-import-in-nested.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -4,7 +4,7 @@ error[E0432]: unresolved import `super::super::C::D::AA`\n LL |         use super::{super::C::D::AA, AA as _};\n    |                     ^^^^^^^^^^^^^^^ no `AA` in `C::D`\n    |\n-   = note: consider importing this type alias instead:\n+   = help: consider importing this type alias instead:\n            crate::A::AA\n \n error[E0432]: unresolved import `crate::C::AA`\n@@ -13,7 +13,7 @@ error[E0432]: unresolved import `crate::C::AA`\n LL |     use crate::C::{self, AA};\n    |                          ^^ no `AA` in `C`\n    |\n-   = note: consider importing this type alias instead:\n+   = help: consider importing this type alias instead:\n            crate::A::AA\n \n error[E0432]: unresolved import `crate::C::BB`\n@@ -22,7 +22,7 @@ error[E0432]: unresolved import `crate::C::BB`\n LL |     use crate::{A, C::BB};\n    |                    ^^^^^ no `BB` in `C`\n    |\n-   = note: consider importing this type alias instead:\n+   = help: consider importing this type alias instead:\n            crate::A::BB\n \n error: aborting due to 3 previous errors"}, {"sha": "f9c5cf920e1f10fc25abc0ab67d36e12ad35295e", "filename": "tests/ui/imports/bad-import-with-rename.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fimports%2Fbad-import-with-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fimports%2Fbad-import-with-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fbad-import-with-rename.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -7,7 +7,7 @@ LL |     use crate::D::B as _;\n help: consider importing this type alias instead\n    |\n LL |     use A::B as _;\n-   |         ~~~~~~~~~~\n+   |         ~~~~~~~~~\n \n error[E0432]: unresolved import `crate::D::B2`\n   --> $DIR/bad-import-with-rename.rs:10:9\n@@ -18,7 +18,7 @@ LL |     use crate::D::B2;\n help: consider importing this type alias instead\n    |\n LL |     use A::B2;\n-   |         ~~~~~~\n+   |         ~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3448f3119778a6d4b5592297f1c56d0096d2f949", "filename": "tests/ui/imports/issue-56125.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fimports%2Fissue-56125.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fimports%2Fissue-56125.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-56125.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -7,13 +7,13 @@ LL |     use empty::issue_56125;\n help: consider importing one of these items instead\n    |\n LL |     use crate::m3::last_segment::issue_56125;\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     use crate::m3::non_last_segment::non_last_segment::issue_56125;\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     use issue_56125::issue_56125;\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     use issue_56125::last_segment::issue_56125;\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      and 1 other candidate\n \n error[E0659]: `issue_56125` is ambiguous"}, {"sha": "5374ba3dc9e6d07783f9914523118b6ea121de6a", "filename": "tests/ui/imports/issue-57015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fimports%2Fissue-57015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fimports%2Fissue-57015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-57015.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -7,7 +7,7 @@ LL | use single_err::something;\n help: consider importing this module instead\n    |\n LL | use glob_ok::something;\n-   |     ~~~~~~~~~~~~~~~~~~~\n+   |     ~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "60ba2eab7a7bfbe8dbfb6f62383a68a2842482da", "filename": "tests/ui/macros/issue-88228.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fmacros%2Fissue-88228.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fmacros%2Fissue-88228.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-88228.rs?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -8,7 +8,7 @@ mod hey {\n \n #[derive(Bla)]\n //~^ ERROR cannot find derive macro `Bla`\n-//~| NOTE consider importing this derive macro\n+//~| HELP consider importing this derive macro\n struct A;\n \n #[derive(println)]\n@@ -19,5 +19,5 @@ struct B;\n fn main() {\n     bla!();\n     //~^ ERROR cannot find macro `bla`\n-    //~| NOTE consider importing this macro\n+    //~| HELP consider importing this macro\n }"}, {"sha": "fe8a1deaedd77e2f2029b333344f6bc30b258697", "filename": "tests/ui/macros/issue-88228.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fmacros%2Fissue-88228.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fmacros%2Fissue-88228.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-88228.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -4,7 +4,7 @@ error: cannot find macro `bla` in this scope\n LL |     bla!();\n    |     ^^^\n    |\n-   = note: consider importing this macro:\n+   = help: consider importing this macro:\n            crate::hey::bla\n \n error: cannot find derive macro `println` in this scope\n@@ -21,7 +21,7 @@ error: cannot find derive macro `Bla` in this scope\n LL | #[derive(Bla)]\n    |          ^^^\n    |\n-   = note: consider importing this derive macro:\n+   = help: consider importing this derive macro:\n            crate::hey::Bla\n \n error: aborting due to 3 previous errors"}, {"sha": "ca5f0f190e8ba445c34214361d8b5d9ab54b762c", "filename": "tests/ui/macros/macro-use-wrong-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-use-wrong-name.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -9,7 +9,7 @@ LL |     macro_two!();\n LL | macro_rules! macro_one { () => (\"one\") }\n    | ---------------------- similarly named macro `macro_one` defined here\n    |\n-   = note: consider importing this macro:\n+   = help: consider importing this macro:\n            two_macros::macro_two\n \n error: aborting due to previous error"}, {"sha": "99e291cda0377ccb0e3b05362b0683372529a128", "filename": "tests/ui/missing/missing-macro-use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fmissing%2Fmissing-macro-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fmissing%2Fmissing-macro-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing%2Fmissing-macro-use.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -4,7 +4,7 @@ error: cannot find macro `macro_two` in this scope\n LL |     macro_two!();\n    |     ^^^^^^^^^\n    |\n-   = note: consider importing this macro:\n+   = help: consider importing this macro:\n            two_macros::macro_two\n \n error: aborting due to previous error"}, {"sha": "de2c27a878c678688db5b389f07658344d79de47", "filename": "tests/ui/proc-macro/derive-helper-shadowing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -16,7 +16,7 @@ error: cannot find attribute `empty_helper` in this scope\n LL |             #[derive(GenHelperUse)]\n    |                      ^^^^^^^^^^^^\n    |\n-   = note: consider importing this attribute macro:\n+   = help: consider importing this attribute macro:\n            empty_helper\n    = note: this error originates in the derive macro `GenHelperUse` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -29,7 +29,7 @@ LL |         #[empty_helper]\n LL |             gen_helper_use!();\n    |             ----------------- in this macro invocation\n    |\n-   = note: consider importing this attribute macro:\n+   = help: consider importing this attribute macro:\n            crate::empty_helper\n    = note: this error originates in the macro `gen_helper_use` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "2c55abf38c399a62b2d2430444d7fc5925a857b3", "filename": "tests/ui/proc-macro/generate-mod.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fgenerate-mod.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -4,7 +4,7 @@ error[E0412]: cannot find type `FromOutside` in this scope\n LL | generate_mod::check!();\n    | ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            FromOutside\n    = note: this error originates in the macro `generate_mod::check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -14,7 +14,7 @@ error[E0412]: cannot find type `Outer` in this scope\n LL | generate_mod::check!();\n    | ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            Outer\n    = note: this error originates in the macro `generate_mod::check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -24,7 +24,7 @@ error[E0412]: cannot find type `FromOutside` in this scope\n LL | #[generate_mod::check_attr]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            FromOutside\n    = note: this error originates in the attribute macro `generate_mod::check_attr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -34,7 +34,7 @@ error[E0412]: cannot find type `OuterAttr` in this scope\n LL | #[generate_mod::check_attr]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            OuterAttr\n    = note: this error originates in the attribute macro `generate_mod::check_attr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -44,7 +44,7 @@ error[E0412]: cannot find type `FromOutside` in this scope\n LL | #[derive(generate_mod::CheckDerive)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            FromOutside\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -54,7 +54,7 @@ error[E0412]: cannot find type `OuterDerive` in this scope\n LL | #[derive(generate_mod::CheckDerive)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            OuterDerive\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -64,7 +64,7 @@ error[E0412]: cannot find type `FromOutside` in this scope\n LL |     #[derive(generate_mod::CheckDerive)]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            FromOutside\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -74,7 +74,7 @@ error[E0412]: cannot find type `OuterDerive` in this scope\n LL |     #[derive(generate_mod::CheckDerive)]\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            OuterDerive\n    = note: this error originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -84,7 +84,7 @@ error[E0412]: cannot find type `FromOutside` in this scope\n LL | #[derive(generate_mod::CheckDeriveLint)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            FromOutside\n    = note: this error originates in the derive macro `generate_mod::CheckDeriveLint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -94,7 +94,7 @@ error[E0412]: cannot find type `OuterDeriveLint` in this scope\n LL | #[derive(generate_mod::CheckDeriveLint)]\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: consider importing this struct:\n+   = help: consider importing this struct:\n            OuterDeriveLint\n    = note: this error originates in the derive macro `generate_mod::CheckDeriveLint` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "122e8fd350cb2f4ef15abc373500f807536b0488", "filename": "tests/ui/rfc-2126-extern-absolute-paths/not-allowed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-allowed.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -7,9 +7,9 @@ LL | use alloc;\n help: consider importing one of these items instead\n    |\n LL | use core::alloc;\n-   |     ~~~~~~~~~~~~\n-LL | use std::alloc;\n    |     ~~~~~~~~~~~\n+LL | use std::alloc;\n+   |     ~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "f8b3e6d65afb64cac3492bf2a9f27b11cd58b813", "filename": "tests/ui/simd/portable-intrinsics-arent-exposed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -15,7 +15,7 @@ LL | use std::simd::intrinsics;\n help: consider importing this module instead\n    |\n LL | use std::intrinsics;\n-   |     ~~~~~~~~~~~~~~~~\n+   |     ~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7635f579d66b94cd9e2ce76388f132e3517d1fee", "filename": "tests/ui/test-attrs/inaccessible-test-modules.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -13,7 +13,7 @@ LL | use test as y;\n help: consider importing this module instead\n    |\n LL | use test::test as y;\n-   |     ~~~~~~~~~~~~~~~~\n+   |     ~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ea737c567b96047f01e68084dd2bc7aa215ca689", "filename": "tests/ui/unresolved/unresolved-candidates.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Funresolved%2Funresolved-candidates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f/tests%2Fui%2Funresolved%2Funresolved-candidates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funresolved%2Funresolved-candidates.stderr?ref=e6e7c3990edd171ba66337eb7dbd75d07ae5fa4f", "patch": "@@ -7,7 +7,7 @@ LL |     use Trait;\n help: consider importing this trait instead\n    |\n LL |     use a::Trait;\n-   |         ~~~~~~~~~\n+   |         ~~~~~~~~\n \n error[E0405]: cannot find trait `Trait` in this scope\n   --> $DIR/unresolved-candidates.rs:10:10"}]}