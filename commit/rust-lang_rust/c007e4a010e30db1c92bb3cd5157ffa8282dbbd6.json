{"sha": "c007e4a010e30db1c92bb3cd5157ffa8282dbbd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMDdlNGEwMTBlMzBkYjFjOTJiYjNjZDUxNTdmZmE4MjgyZGJiZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-04T20:52:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-04T20:52:22Z"}, "message": "Auto merge of #30759 - Manishearth:attr-tls, r=alexcrichton\n\nfixes #30756\n\nr? @Gankro", "tree": {"sha": "c53645be61e98209da45e3ec52d923c269f5f8d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c53645be61e98209da45e3ec52d923c269f5f8d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c007e4a010e30db1c92bb3cd5157ffa8282dbbd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c007e4a010e30db1c92bb3cd5157ffa8282dbbd6", "html_url": "https://github.com/rust-lang/rust/commit/c007e4a010e30db1c92bb3cd5157ffa8282dbbd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c007e4a010e30db1c92bb3cd5157ffa8282dbbd6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0ef74026690cffccb543fc274d73a078eba797d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ef74026690cffccb543fc274d73a078eba797d", "html_url": "https://github.com/rust-lang/rust/commit/d0ef74026690cffccb543fc274d73a078eba797d"}, {"sha": "4b68c293fdf64749975adfa0c70c8b3eda649bad", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b68c293fdf64749975adfa0c70c8b3eda649bad", "html_url": "https://github.com/rust-lang/rust/commit/4b68c293fdf64749975adfa0c70c8b3eda649bad"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "69395001bbfdcd0db9abc7f20be5cd2fba5ecef6", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c007e4a010e30db1c92bb3cd5157ffa8282dbbd6/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c007e4a010e30db1c92bb3cd5157ffa8282dbbd6/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=c007e4a010e30db1c92bb3cd5157ffa8282dbbd6", "patch": "@@ -92,7 +92,7 @@ pub struct LocalKey<T: 'static> {\n     // trivially devirtualizable by LLVM because the value of `inner` never\n     // changes and the constant should be readonly within a crate. This mainly\n     // only runs into problems when TLS statics are exported across crates.\n-    inner: unsafe fn() -> Option<&'static UnsafeCell<Option<T>>>,\n+    inner: fn() -> Option<&'static UnsafeCell<Option<T>>>,\n \n     // initialization routine to invoke to create a value\n     init: fn() -> T,\n@@ -126,7 +126,7 @@ macro_rules! __thread_local_inner {\n     ($t:ty, $init:expr) => {{\n         fn __init() -> $t { $init }\n \n-        unsafe fn __getit() -> $crate::option::Option<\n+        fn __getit() -> $crate::option::Option<\n             &'static $crate::cell::UnsafeCell<\n                 $crate::option::Option<$t>>>\n         {\n@@ -183,7 +183,7 @@ impl<T: 'static> LocalKey<T> {\n     #[unstable(feature = \"thread_local_internals\",\n                reason = \"recently added to create a key\",\n                issue = \"0\")]\n-    pub const fn new(inner: unsafe fn() -> Option<&'static UnsafeCell<Option<T>>>,\n+    pub const fn new(inner: fn() -> Option<&'static UnsafeCell<Option<T>>>,\n                      init: fn() -> T) -> LocalKey<T> {\n         LocalKey {\n             inner: inner,\n@@ -303,11 +303,13 @@ pub mod elf {\n             }\n         }\n \n-        pub unsafe fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n-            if intrinsics::needs_drop::<T>() && self.dtor_running.get() {\n-                return None\n+        pub fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n+            unsafe {\n+                if intrinsics::needs_drop::<T>() && self.dtor_running.get() {\n+                    return None\n+                }\n+                self.register_dtor();\n             }\n-            self.register_dtor();\n             Some(&self.inner)\n         }\n \n@@ -452,24 +454,26 @@ pub mod os {\n             }\n         }\n \n-        pub unsafe fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n-            let ptr = self.os.get() as *mut Value<T>;\n-            if !ptr.is_null() {\n-                if ptr as usize == 1 {\n-                    return None\n+        pub fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n+            unsafe {\n+                let ptr = self.os.get() as *mut Value<T>;\n+                if !ptr.is_null() {\n+                    if ptr as usize == 1 {\n+                        return None\n+                    }\n+                    return Some(&(*ptr).value);\n                 }\n-                return Some(&(*ptr).value);\n-            }\n \n-            // If the lookup returned null, we haven't initialized our own local\n-            // copy, so do that now.\n-            let ptr: Box<Value<T>> = box Value {\n-                key: self,\n-                value: UnsafeCell::new(None),\n-            };\n-            let ptr = Box::into_raw(ptr);\n-            self.os.set(ptr as *mut u8);\n-            Some(&(*ptr).value)\n+                // If the lookup returned null, we haven't initialized our own local\n+                // copy, so do that now.\n+                let ptr: Box<Value<T>> = box Value {\n+                    key: self,\n+                    value: UnsafeCell::new(None),\n+                };\n+                let ptr = Box::into_raw(ptr);\n+                self.os.set(ptr as *mut u8);\n+                Some(&(*ptr).value)\n+            }\n         }\n     }\n "}, {"sha": "d21b42f8c876e8329459665009f737baa4c32297", "filename": "src/test/run-pass/issue-30756.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c007e4a010e30db1c92bb3cd5157ffa8282dbbd6/src%2Ftest%2Frun-pass%2Fissue-30756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c007e4a010e30db1c92bb3cd5157ffa8282dbbd6/src%2Ftest%2Frun-pass%2Fissue-30756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-30756.rs?ref=c007e4a010e30db1c92bb3cd5157ffa8282dbbd6", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(unsafe_code)]\n+\n+thread_local!(static FOO: u8 = 1);\n+\n+fn main() {\n+}"}]}