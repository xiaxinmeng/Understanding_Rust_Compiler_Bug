{"sha": "f8dec3d0549beddcae22bc14c49a0778b50334ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZGVjM2QwNTQ5YmVkZGNhZTIyYmMxNGM0OWEwNzc4YjUwMzM0ZWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-23T12:54:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-23T12:54:13Z"}, "message": "Rollup merge of #77047 - RalfJung:miri-dealloc, r=oli-obk\n\nMiri: more informative deallocation error messages\n\nMake sure we show the affected AllocId.\n\nr? @oli-obk", "tree": {"sha": "5de71a053909c4eda609603fb6094f83aabc4c49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5de71a053909c4eda609603fb6094f83aabc4c49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8dec3d0549beddcae22bc14c49a0778b50334ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfa0V1CRBK7hj4Ov3rIwAAdHIIAKniFlsyz0U/oA+WZm7FUB0B\ntMkVYaAdyW3IyWulADFktfnGAfqmspVeB/RJren+GrWYa9Tqr3cIKHYyjuBnoQ7e\nue3Qk/hNdpZOy+Fie6RxbVfEM8kAkccbi17QKXZy1hvd1zyehBb+QGSJbBaxG2mS\nuYEoETdbPyrAFDWx/DpqzomiFdMrN85sgZhVr0j/GmGweaPGBl3yVynWrkLCRtZi\nZoz+4daEHxNe67u8P+pJyjMr6mskp8tbNnhJAs5BYogVUrR//q6d3Uwu+MKfqCtV\nfBN3W1GdJsaKl+dzHT7nCzua+eHh4sXNvIUamtmfxHIgIGpTQ7/ynr94LX/LU9Y=\n=ELZl\n-----END PGP SIGNATURE-----\n", "payload": "tree 5de71a053909c4eda609603fb6094f83aabc4c49\nparent 049ba0c6f01fee9978acaf9caefdc3bfcd5ddc9b\nparent 731113b8eeef206ff27b77cb9f0dc49e2762a1b4\nauthor Dylan DPC <dylan.dpc@gmail.com> 1600865653 +0200\ncommitter GitHub <noreply@github.com> 1600865653 +0200\n\nRollup merge of #77047 - RalfJung:miri-dealloc, r=oli-obk\n\nMiri: more informative deallocation error messages\n\nMake sure we show the affected AllocId.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8dec3d0549beddcae22bc14c49a0778b50334ea", "html_url": "https://github.com/rust-lang/rust/commit/f8dec3d0549beddcae22bc14c49a0778b50334ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8dec3d0549beddcae22bc14c49a0778b50334ea/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "049ba0c6f01fee9978acaf9caefdc3bfcd5ddc9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/049ba0c6f01fee9978acaf9caefdc3bfcd5ddc9b", "html_url": "https://github.com/rust-lang/rust/commit/049ba0c6f01fee9978acaf9caefdc3bfcd5ddc9b"}, {"sha": "731113b8eeef206ff27b77cb9f0dc49e2762a1b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/731113b8eeef206ff27b77cb9f0dc49e2762a1b4", "html_url": "https://github.com/rust-lang/rust/commit/731113b8eeef206ff27b77cb9f0dc49e2762a1b4"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "f3e373813ca537c3e40bcccb63b2410f254bcea1", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8dec3d0549beddcae22bc14c49a0778b50334ea/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8dec3d0549beddcae22bc14c49a0778b50334ea/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=f8dec3d0549beddcae22bc14c49a0778b50334ea", "patch": "@@ -285,9 +285,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             None => {\n                 // Deallocating global memory -- always an error\n                 return Err(match self.tcx.get_global_alloc(ptr.alloc_id) {\n-                    Some(GlobalAlloc::Function(..)) => err_ub_format!(\"deallocating a function\"),\n+                    Some(GlobalAlloc::Function(..)) => {\n+                        err_ub_format!(\"deallocating {}, which is a function\", ptr.alloc_id)\n+                    }\n                     Some(GlobalAlloc::Static(..) | GlobalAlloc::Memory(..)) => {\n-                        err_ub_format!(\"deallocating static memory\")\n+                        err_ub_format!(\"deallocating {}, which is static memory\", ptr.alloc_id)\n                     }\n                     None => err_ub!(PointerUseAfterFree(ptr.alloc_id)),\n                 }\n@@ -297,15 +299,17 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n         if alloc_kind != kind {\n             throw_ub_format!(\n-                \"deallocating {} memory using {} deallocation operation\",\n+                \"deallocating {}, which is {} memory, using {} deallocation operation\",\n+                ptr.alloc_id,\n                 alloc_kind,\n                 kind\n             );\n         }\n         if let Some((size, align)) = old_size_and_align {\n             if size != alloc.size || align != alloc.align {\n                 throw_ub_format!(\n-                    \"incorrect layout on deallocation: allocation has size {} and alignment {}, but gave size {} and alignment {}\",\n+                    \"incorrect layout on deallocation: {} has size {} and alignment {}, but gave size {} and alignment {}\",\n+                    ptr.alloc_id,\n                     alloc.size.bytes(),\n                     alloc.align.bytes(),\n                     size.bytes(),"}]}