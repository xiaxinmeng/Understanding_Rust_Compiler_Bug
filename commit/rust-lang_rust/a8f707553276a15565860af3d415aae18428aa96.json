{"sha": "a8f707553276a15565860af3d415aae18428aa96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZjcwNzU1MzI3NmExNTU2NTg2MGFmM2Q0MTVhYWUxODQyOGFhOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-26T05:47:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-26T05:47:23Z"}, "message": "Auto merge of #80692 - Aaron1011:feature/query-result-debug, r=estebank\n\nEnforce that query results implement Debug\n\nCurrently, we require that query keys implement `Debug`, but we do not do the same for query values. This can make incremental compilation bugs difficult to debug - there isn't a good place to print out the result loaded from disk.\n\nThis PR adds `Debug` bounds to several query-related functions, allowing us to debug-print the query value when an 'unstable fingerprint' error occurs. This required adding `#[derive(Debug)]` to a fairly large number of types - hopefully, this doesn't have much of an impact on compiler bootstrapping times.", "tree": {"sha": "cab6b5b5c79128ae7a396ce82fed0173356d3d66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cab6b5b5c79128ae7a396ce82fed0173356d3d66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8f707553276a15565860af3d415aae18428aa96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f707553276a15565860af3d415aae18428aa96", "html_url": "https://github.com/rust-lang/rust/commit/a8f707553276a15565860af3d415aae18428aa96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8f707553276a15565860af3d415aae18428aa96/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff6ee2a70218543f410e557f390e246131847572", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff6ee2a70218543f410e557f390e246131847572", "html_url": "https://github.com/rust-lang/rust/commit/ff6ee2a70218543f410e557f390e246131847572"}, {"sha": "056fbbf7eee75f503c2a037046101df91a2f7e2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/056fbbf7eee75f503c2a037046101df91a2f7e2f", "html_url": "https://github.com/rust-lang/rust/commit/056fbbf7eee75f503c2a037046101df91a2f7e2f"}], "stats": {"total": 80, "additions": 46, "deletions": 34}, "files": [{"sha": "494880701844ef245fc6072b9980ea87f050afdb", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -66,21 +66,21 @@ fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Encodable, Decodable)]\n+#[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug)]\n pub enum InlineAttr {\n     None,\n     Hint,\n     Always,\n     Never,\n }\n \n-#[derive(Clone, Encodable, Decodable)]\n+#[derive(Clone, Encodable, Decodable, Debug)]\n pub enum InstructionSetAttr {\n     ArmA32,\n     ArmT32,\n }\n \n-#[derive(Clone, Encodable, Decodable)]\n+#[derive(Clone, Encodable, Decodable, Debug)]\n pub enum OptimizeAttr {\n     None,\n     Speed,"}, {"sha": "3850c9b74fddc0632634bc45dce6594984bd61f2", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -552,6 +552,7 @@ pub fn hash_stable_hashmap<HCX, K, V, R, SK, F>(\n \n /// A vector container that makes sure that its items are hashed in a stable\n /// order.\n+#[derive(Debug)]\n pub struct StableVec<T>(Vec<T>);\n \n impl<T> StableVec<T> {"}, {"sha": "30f659c2f71bd209946b6b94006f35eb235ccaa5", "filename": "compiler/rustc_data_structures/src/steal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_data_structures%2Fsrc%2Fsteal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_data_structures%2Fsrc%2Fsteal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsteal.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -21,6 +21,7 @@ use crate::sync::{MappedReadGuard, ReadGuard, RwLock};\n /// -- once the value is stolen -- it will never be read from again.\n //\n // FIXME(#41710): what is the best way to model linear queries?\n+#[derive(Debug)]\n pub struct Steal<T> {\n     value: RwLock<Option<T>>,\n }"}, {"sha": "cd3c8fded633f05e4074076e13fe08756a6c8541", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -36,7 +36,7 @@ macro_rules! declare_features {\n             ),+];\n \n         /// A set of features to be used by later passes.\n-        #[derive(Clone, Default)]\n+        #[derive(Clone, Default, Debug)]\n         pub struct Features {\n             /// `#![feature]` attrs for language features, for error reporting.\n             pub declared_lang_features: Vec<(Symbol, Span, Option<Symbol>)>,"}, {"sha": "26ce30cb51177944f4632f2cd62954459657ddf7", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -67,7 +67,7 @@ macro_rules! language_item_table {\n             }\n         }\n \n-        #[derive(HashStable_Generic)]\n+        #[derive(HashStable_Generic, Debug)]\n         pub struct LanguageItems {\n             /// Mappings from lang items to their possibly found `DefId`s.\n             /// The index corresponds to the order in `LangItem`."}, {"sha": "1305b5c9f00ab27839ed10104114ccd1f455ac5c", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -85,11 +85,13 @@ fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {\n     }\n }\n \n+#[derive(Debug)]\n pub(super) struct HirOwnerData<'hir> {\n     pub(super) signature: Option<&'hir Owner<'hir>>,\n     pub(super) with_bodies: Option<&'hir mut OwnerNodes<'hir>>,\n }\n \n+#[derive(Debug)]\n pub struct IndexedHir<'hir> {\n     /// The SVH of the local crate.\n     pub crate_hash: Svh,"}, {"sha": "6934e06d4c2e30c7eaa105c28466edae9a333f1e", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -17,6 +17,7 @@ use rustc_hir::*;\n use rustc_index::vec::IndexVec;\n use rustc_span::DUMMY_SP;\n \n+#[derive(Debug)]\n pub struct Owner<'tcx> {\n     parent: HirId,\n     node: Node<'tcx>,\n@@ -32,12 +33,13 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Owner<'tcx> {\n     }\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n pub struct ParentedNode<'tcx> {\n     parent: ItemLocalId,\n     node: Node<'tcx>,\n }\n \n+#[derive(Debug)]\n pub struct OwnerNodes<'tcx> {\n     hash: Fingerprint,\n     nodes: IndexVec<ItemLocalId, Option<ParentedNode<'tcx>>>,"}, {"sha": "0bdccf7b5f073ed443f9d2a25979094fb2d8de89", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -12,7 +12,7 @@ use rustc_span::source_map::{DesugaringKind, ExpnKind, MultiSpan};\n use rustc_span::{symbol, Span, Symbol, DUMMY_SP};\n \n /// How a lint level was set.\n-#[derive(Clone, Copy, PartialEq, Eq, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, HashStable, Debug)]\n pub enum LintLevelSource {\n     /// Lint is at the default level as declared\n     /// in rustc or a plugin.\n@@ -48,11 +48,13 @@ impl LintLevelSource {\n /// A tuple of a lint level and its source.\n pub type LevelAndSource = (Level, LintLevelSource);\n \n+#[derive(Debug)]\n pub struct LintLevelSets {\n     pub list: Vec<LintSet>,\n     pub lint_cap: Level,\n }\n \n+#[derive(Debug)]\n pub enum LintSet {\n     CommandLine {\n         // -A,-W,-D flags, a `Symbol` for the flag itself and `Level` for which\n@@ -139,6 +141,7 @@ impl LintLevelSets {\n     }\n }\n \n+#[derive(Debug)]\n pub struct LintLevelMap {\n     pub sets: LintLevelSets,\n     pub id_to_set: FxHashMap<HirId, u32>,"}, {"sha": "5f2ffda642cee69e0f491540eb10f1b7ae8f2e94", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -3,7 +3,7 @@ use rustc_attr::{InlineAttr, InstructionSetAttr, OptimizeAttr};\n use rustc_session::config::SanitizerSet;\n use rustc_span::symbol::Symbol;\n \n-#[derive(Clone, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Clone, TyEncodable, TyDecodable, HashStable, Debug)]\n pub struct CodegenFnAttrs {\n     pub flags: CodegenFnAttrFlags,\n     /// Parsed representation of the `#[inline]` attribute"}, {"sha": "4f1ca968c3018a342a3cc704da5ffe6da7d48636", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -96,7 +96,7 @@ pub struct NativeLib {\n     pub wasm_import_module: Option<Symbol>,\n }\n \n-#[derive(Clone, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Clone, TyEncodable, TyDecodable, HashStable, Debug)]\n pub struct ForeignModule {\n     pub foreign_items: Vec<DefId>,\n     pub def_id: DefId,"}, {"sha": "a369e85306b36514815730773d7b4be4c7f93edb", "filename": "compiler/rustc_middle/src/middle/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -7,7 +7,7 @@ pub mod lib_features {\n     use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n     use rustc_span::symbol::Symbol;\n \n-    #[derive(HashStable)]\n+    #[derive(HashStable, Debug)]\n     pub struct LibFeatures {\n         // A map from feature to stabilisation version.\n         pub stable: FxHashMap<Symbol, Symbol>,"}, {"sha": "1b7d0e620a4c514f14f8bef61f09757cc01d201c", "filename": "compiler/rustc_middle/src/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -68,7 +68,7 @@ pub type ObjectLifetimeDefault = Set1<Region>;\n \n /// Maps the id of each lifetime reference to the lifetime decl\n /// that it corresponds to.\n-#[derive(Default, HashStable)]\n+#[derive(Default, HashStable, Debug)]\n pub struct ResolveLifetimes {\n     /// Maps from every use of a named (not anonymous) lifetime to a\n     /// `Region` describing how that region is bound"}, {"sha": "89ca8eed39a9bc88d8e76f4b66ce1166bf362b86", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -36,7 +36,7 @@ impl StabilityLevel {\n }\n \n /// An entry in the `depr_map`.\n-#[derive(Clone, HashStable)]\n+#[derive(Clone, HashStable, Debug)]\n pub struct DeprecationEntry {\n     /// The metadata of the attribute associated with this entry.\n     pub attr: Deprecation,\n@@ -63,7 +63,7 @@ impl DeprecationEntry {\n }\n \n /// A stability index, giving the stability level for items and methods.\n-#[derive(HashStable)]\n+#[derive(HashStable, Debug)]\n pub struct Index<'tcx> {\n     /// This is mostly a cache, except the stabilities of local items\n     /// are filled by the annotator."}, {"sha": "f288ad8d1d4a3a464fb12a8eb2a21713969d6292", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -13,7 +13,7 @@ use crate::ty::{ParamEnv, ScalarInt, Ty, TyCtxt};\n use super::{AllocId, Allocation, InterpResult, Pointer, PointerArithmetic};\n \n /// Represents the result of const evaluation via the `eval_to_allocation` query.\n-#[derive(Clone, HashStable, TyEncodable, TyDecodable)]\n+#[derive(Clone, HashStable, TyEncodable, TyDecodable, Debug)]\n pub struct ConstAlloc<'tcx> {\n     // the value lives here, at offset 0, and that allocation definitely is a `AllocKind::Memory`\n     // (so you can use `AllocMap::unwrap_memory`)."}, {"sha": "eb13c89544c1303486ae18ed7f8dec744598c8a4", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -216,6 +216,7 @@ impl<'tcx> fmt::Display for MonoItem<'tcx> {\n     }\n }\n \n+#[derive(Debug)]\n pub struct CodegenUnit<'tcx> {\n     /// A name for this CGU. Incremental compilation requires that\n     /// name be unique amongst **all** crates. Therefore, it should"}, {"sha": "c293fbe4ef8ca73800149d8d57dfed704c87e083", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -17,7 +17,7 @@ use std::fmt::{self, Debug};\n \n use super::{Field, SourceInfo};\n \n-#[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub enum UnsafetyViolationKind {\n     /// Only permitted in regular `fn`s, prohibited in `const fn`s.\n     General,\n@@ -36,7 +36,7 @@ pub enum UnsafetyViolationKind {\n     UnsafeFnBorrowPacked,\n }\n \n-#[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub enum UnsafetyViolationDetails {\n     CallToUnsafeFunction,\n     UseOfInlineAssembly,\n@@ -121,15 +121,15 @@ impl UnsafetyViolationDetails {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub struct UnsafetyViolation {\n     pub source_info: SourceInfo,\n     pub lint_root: hir::HirId,\n     pub kind: UnsafetyViolationKind,\n     pub details: UnsafetyViolationDetails,\n }\n \n-#[derive(Clone, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Clone, TyEncodable, TyDecodable, HashStable, Debug)]\n pub struct UnsafetyCheckResult {\n     /// Violations that are propagated *upwards* from this function.\n     pub violations: Lrc<[UnsafetyViolation]>,"}, {"sha": "cb60bfa4c5408cff31564af9dee9fc890579567d", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -23,7 +23,7 @@ use rustc_span::symbol::Ident;\n ///   parents of a given specializing impl, which is needed for extracting\n ///   default items amongst other things. In the simple \"chain\" rule, every impl\n ///   has at most one parent.\n-#[derive(TyEncodable, TyDecodable, HashStable)]\n+#[derive(TyEncodable, TyDecodable, HashStable, Debug)]\n pub struct Graph {\n     /// All impls have a parent; the \"root\" impls have as their parent the `def_id`\n     /// of the trait.\n@@ -50,7 +50,7 @@ impl Graph {\n \n /// Children of a given impl, grouped into blanket/non-blanket varieties as is\n /// done in `TraitDef`.\n-#[derive(Default, TyEncodable, TyDecodable)]\n+#[derive(Default, TyEncodable, TyDecodable, Debug)]\n pub struct Children {\n     // Impls of a trait (or specializations of a given impl). To allow for\n     // quicker lookup, the impls are indexed by a simplified version of their"}, {"sha": "275384e227a90b01e3b0dcea1a3a3ca43eeae364", "filename": "compiler/rustc_middle/src/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -18,7 +18,7 @@ use DefIdForest::*;\n /// We store the minimal set of `DefId`s required to represent the whole set. If A and B are\n /// `DefId`s in the `DefIdForest`, and A is a parent of B, then only A will be stored. When this is\n /// used with `type_uninhabited_from`, there will very rarely be more than one `DefId` stored.\n-#[derive(Clone, HashStable)]\n+#[derive(Clone, HashStable, Debug)]\n pub enum DefIdForest {\n     Empty,\n     Single(DefId),"}, {"sha": "c4d867161386df180dd3eb294624b0095c8aa9a1", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -185,7 +185,7 @@ pub struct ImplHeader<'tcx> {\n     pub predicates: Vec<Predicate<'tcx>>,\n }\n \n-#[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub enum ImplPolarity {\n     /// `impl Trait for Type`\n     Positive,\n@@ -435,7 +435,7 @@ pub enum Variance {\n /// HIR of every item in the local crate. Instead, use\n /// `tcx.variances_of()` to get the variance for a *particular*\n /// item.\n-#[derive(HashStable)]\n+#[derive(HashStable, Debug)]\n pub struct CrateVariancesMap<'tcx> {\n     /// For each item with generics, maps to a vector of the variance\n     /// of its generics. If an item has no generics, it will have no\n@@ -1174,7 +1174,7 @@ pub enum PredicateKind<'tcx> {\n /// HIR of every item in the local crate. Instead, use\n /// `tcx.inferred_outlives_of()` to get the outlives for a *particular*\n /// item.\n-#[derive(HashStable)]\n+#[derive(HashStable, Debug)]\n pub struct CratePredicatesMap<'tcx> {\n     /// For each struct with outlive bounds, maps to a vector of the\n     /// predicate of its outlive bounds. If an item has no outlives\n@@ -3107,7 +3107,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-#[derive(Clone, HashStable)]\n+#[derive(Clone, HashStable, Debug)]\n pub struct AdtSizedConstraint<'tcx>(pub &'tcx [Ty<'tcx>]);\n \n /// Yields the parent function's `DefId` if `def_id` is an `impl Trait` definition."}, {"sha": "f4d7eac0ae2f80f6917d895c2e63da10c8b1d36c", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -63,7 +63,7 @@ pub enum TraitSpecializationKind {\n     AlwaysApplicable,\n }\n \n-#[derive(Default)]\n+#[derive(Default, Debug)]\n pub struct TraitImpls {\n     blanket_impls: Vec<DefId>,\n     /// Impls indexed by their simplified self type, for fast lookup."}, {"sha": "1d2bc1a99a596dfd0191240cb3372ae7c11b64f2", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -15,7 +15,7 @@ pub trait CacheSelector<K, V> {\n }\n \n pub trait QueryStorage: Default {\n-    type Value;\n+    type Value: Debug;\n     type Stored: Clone;\n \n     /// Store a value without putting it in the cache.\n@@ -75,7 +75,7 @@ impl<K, V> Default for DefaultCache<K, V> {\n     }\n }\n \n-impl<K: Eq + Hash, V: Clone> QueryStorage for DefaultCache<K, V> {\n+impl<K: Eq + Hash, V: Clone + Debug> QueryStorage for DefaultCache<K, V> {\n     type Value = V;\n     type Stored = V;\n \n@@ -89,7 +89,7 @@ impl<K: Eq + Hash, V: Clone> QueryStorage for DefaultCache<K, V> {\n impl<K, V> QueryCache for DefaultCache<K, V>\n where\n     K: Eq + Hash + Clone + Debug,\n-    V: Clone,\n+    V: Clone + Debug,\n {\n     type Key = K;\n     type Sharded = FxHashMap<K, (V, DepNodeIndex)>;\n@@ -156,7 +156,7 @@ impl<'tcx, K, V> Default for ArenaCache<'tcx, K, V> {\n     }\n }\n \n-impl<'tcx, K: Eq + Hash, V: 'tcx> QueryStorage for ArenaCache<'tcx, K, V> {\n+impl<'tcx, K: Eq + Hash, V: Debug + 'tcx> QueryStorage for ArenaCache<'tcx, K, V> {\n     type Value = V;\n     type Stored = &'tcx V;\n \n@@ -171,6 +171,7 @@ impl<'tcx, K: Eq + Hash, V: 'tcx> QueryStorage for ArenaCache<'tcx, K, V> {\n impl<'tcx, K, V: 'tcx> QueryCache for ArenaCache<'tcx, K, V>\n where\n     K: Eq + Hash + Clone + Debug,\n+    V: Debug,\n {\n     type Key = K;\n     type Sharded = FxHashMap<K, &'tcx (V, DepNodeIndex)>;"}, {"sha": "36532135f016d12ce352b90236027da4c116aa20", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -20,6 +20,7 @@ use rustc_errors::{Diagnostic, FatalError};\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::Span;\n use std::collections::hash_map::Entry;\n+use std::fmt::Debug;\n use std::hash::{Hash, Hasher};\n use std::mem;\n use std::num::NonZeroU32;\n@@ -478,7 +479,7 @@ where\n     result\n }\n \n-fn load_from_disk_and_cache_in_memory<CTX, K, V>(\n+fn load_from_disk_and_cache_in_memory<CTX, K, V: Debug>(\n     tcx: CTX,\n     key: K,\n     prev_dep_node_index: SerializedDepNodeIndex,\n@@ -539,7 +540,7 @@ where\n \n #[inline(never)]\n #[cold]\n-fn incremental_verify_ich<CTX, K, V>(\n+fn incremental_verify_ich<CTX, K, V: Debug>(\n     tcx: CTX,\n     result: &V,\n     dep_node: &DepNode<CTX::DepKind>,"}, {"sha": "6e269e9e1264c2dcdb878b59694dcef750a86702", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f707553276a15565860af3d415aae18428aa96/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=a8f707553276a15565860af3d415aae18428aa96", "patch": "@@ -361,7 +361,7 @@ impl Default for TrimmedDefPaths {\n /// Use tree-based collections to cheaply get a deterministic `Hash` implementation.\n /// *Do not* switch `BTreeMap` out for an unsorted container type! That would break\n /// dependency tracking for command-line arguments.\n-#[derive(Clone, Hash)]\n+#[derive(Clone, Hash, Debug)]\n pub struct OutputTypes(BTreeMap<OutputType, Option<PathBuf>>);\n \n impl_stable_hash_via_hash!(OutputTypes);\n@@ -552,7 +552,7 @@ impl Input {\n     }\n }\n \n-#[derive(Clone, Hash)]\n+#[derive(Clone, Hash, Debug)]\n pub struct OutputFilenames {\n     pub out_directory: PathBuf,\n     filestem: String,"}]}