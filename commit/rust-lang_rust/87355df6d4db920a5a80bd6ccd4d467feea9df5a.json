{"sha": "87355df6d4db920a5a80bd6ccd4d467feea9df5a", "node_id": "C_kwDOAAsO6NoAKDg3MzU1ZGY2ZDRkYjkyMGE1YTgwYmQ2Y2NkNGQ0NjdmZWVhOWRmNWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-25T00:46:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-25T00:46:04Z"}, "message": "Auto merge of #93368 - eddyb:diagbld-guarantee, r=estebank\n\nrustc_errors: let `DiagnosticBuilder::emit` return a \"guarantee of emission\".\n\nThat is, `DiagnosticBuilder` is now generic over the return type of `.emit()`, so we'll now have:\n* `DiagnosticBuilder<ErrorReported>` for error (incl. fatal/bug) diagnostics\n  * can only be created via a `const L: Level`-generic constructor, that limits allowed variants via a `where` clause, so not even `rustc_errors` can accidentally bypass this limitation\n  * asserts `diagnostic.is_error()` on emission, just in case the construction restriction was bypassed (e.g. by replacing the whole `Diagnostic` inside `DiagnosticBuilder`)\n  * `.emit()` returns `ErrorReported`, as a \"proof\" token that `.emit()` was called\n    (though note that this isn't a real guarantee until after completing the work on\n     #69426)\n* `DiagnosticBuilder<()>` for everything else (warnings, notes, etc.)\n  * can also be obtained from other `DiagnosticBuilder`s by calling `.forget_guarantee()`\n\nThis PR is a companion to other ongoing work, namely:\n* #69426\n  and it's ongoing implementation:\n  #93222\n  the API changes in this PR are needed to get statically-checked \"only errors produce `ErrorReported` from `.emit()`\", but doesn't itself provide any really strong guarantees without those other `ErrorReported` changes\n* #93244\n  would make the choices of API changes (esp. naming) in this PR fit better overall\n\nIn order to be able to let `.emit()` return anything trustable, several changes had to be made:\n* `Diagnostic`'s `level` field is now private to `rustc_errors`, to disallow arbitrary \"downgrade\"s from \"some kind of error\" to \"warning\" (or anything else that doesn't cause compilation to fail)\n  * it's still possible to replace the whole `Diagnostic` inside the `DiagnosticBuilder`, sadly, that's harder to fix, but it's unlikely enough that we can paper over it with asserts on `.emit()`\n* `.cancel()` now consumes `DiagnosticBuilder`, preventing `.emit()` calls on a cancelled diagnostic\n  * it's also now done internally, through `DiagnosticBuilder`-private state, instead of having a `Level::Cancelled` variant that can be read (or worse, written) by the user\n  * this removes a hazard of calling `.cancel()` on an error then continuing to attach details to it, and even expect to be able to `.emit()` it\n  * warnings were switched to *only* `can_emit_warnings` on emission (instead of pre-cancelling early)\n  * `struct_dummy` was removed (as it relied on a pre-`Cancelled` `Diagnostic`)\n* since `.emit()` doesn't consume the `DiagnosticBuilder` <sub>(I tried and gave up, it's much more work than this PR)</sub>,\n  we have to make `.emit()` idempotent wrt the guarantees it returns\n  * thankfully, `err.emit(); err.emit();` can return `ErrorReported` both times, as the second `.emit()` call has no side-effects *only* because the first one did do the appropriate emission\n* `&mut Diagnostic` is now used in a lot of function signatures, which used to take `&mut DiagnosticBuilder` (in the interest of not having to make those functions generic)\n  * the APIs were already mostly identical, allowing for low-effort porting to this new setup\n  * only some of the suggestion methods needed some rework, to have the extra `DiagnosticBuilder` functionality on the `Diagnostic` methods themselves (that change is also present in #93259)\n  * `.emit()`/`.cancel()` aren't available, but IMO calling them from an \"error decorator/annotator\" function isn't a good practice, and can lead to strange behavior (from the caller's perspective)\n  * `.downgrade_to_delayed_bug()` was added, letting you convert any `.is_error()` diagnostic into a `delay_span_bug` one (which works because in both cases the guarantees available are the same)\n\nThis PR should ideally be reviewed commit-by-commit, since there is a lot of fallout in each.\n\nr? `@estebank` cc `@Manishearth` `@nikomatsakis` `@mark-i-m`", "tree": {"sha": "407ce572f545b83d04cd138423608c95e87e6868", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/407ce572f545b83d04cd138423608c95e87e6868"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87355df6d4db920a5a80bd6ccd4d467feea9df5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87355df6d4db920a5a80bd6ccd4d467feea9df5a", "html_url": "https://github.com/rust-lang/rust/commit/87355df6d4db920a5a80bd6ccd4d467feea9df5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87355df6d4db920a5a80bd6ccd4d467feea9df5a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "996fa506a41349cc767ca01b895eaf3555694045", "url": "https://api.github.com/repos/rust-lang/rust/commits/996fa506a41349cc767ca01b895eaf3555694045", "html_url": "https://github.com/rust-lang/rust/commit/996fa506a41349cc767ca01b895eaf3555694045"}, {"sha": "881b8cb704c20b8ac550329b980c241a246cbd50", "url": "https://api.github.com/repos/rust-lang/rust/commits/881b8cb704c20b8ac550329b980c241a246cbd50", "html_url": "https://github.com/rust-lang/rust/commit/881b8cb704c20b8ac550329b980c241a246cbd50"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "a20aa12c9ff4771a1a3e56543d980bb42b207ec6", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=87355df6d4db920a5a80bd6ccd4d467feea9df5a", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::{\n };\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, HirId};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -489,7 +489,7 @@ fn emit_branches_sharing_code_lint(\n         add_expr_note = !cx.typeck_results().expr_ty(if_expr).is_unit();\n     }\n \n-    let add_optional_msgs = |diag: &mut DiagnosticBuilder<'_>| {\n+    let add_optional_msgs = |diag: &mut Diagnostic| {\n         if add_expr_note {\n             diag.note(\"The end suggestion probably needs some adjustments to use the expression result correctly\");\n         }"}, {"sha": "16173580fd4617ae67a5223b96ce94a3a67be87d", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=87355df6d4db920a5a80bd6ccd4d467feea9df5a", "patch": "@@ -628,9 +628,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                 let mut parser = match maybe_new_parser_from_source_str(&sess, filename, code) {\n                     Ok(p) => p,\n                     Err(errs) => {\n-                        for mut err in errs {\n-                            err.cancel();\n-                        }\n+                        drop(errs);\n                         return false;\n                     },\n                 };\n@@ -668,7 +666,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                             _ => {},\n                         },\n                         Ok(None) => break,\n-                        Err(mut e) => {\n+                        Err(e) => {\n                             e.cancel();\n                             return false;\n                         },"}, {"sha": "d5430a8c91750784b0033ccb226c9d352c632b60", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=87355df6d4db920a5a80bd6ccd4d467feea9df5a", "patch": "@@ -1,7 +1,7 @@\n use std::borrow::Cow;\n use std::collections::BTreeMap;\n \n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_inf, walk_ty, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind};\n@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n \n         fn suggestion<'tcx>(\n             cx: &LateContext<'tcx>,\n-            diag: &mut DiagnosticBuilder<'_>,\n+            diag: &mut Diagnostic,\n             generics_span: Span,\n             generics_suggestion_span: Span,\n             target: &ImplicitHasherType<'_>,"}, {"sha": "dd7177e0131ca5d3ef2ff523a6d68a1b023ccf26", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=87355df6d4db920a5a80bd6ccd4d467feea9df5a", "patch": "@@ -1,7 +1,7 @@\n //! checks for `#[inline]` on trait methods without bodies\n \n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::sugg::DiagnosticBuilderExt;\n+use clippy_utils::sugg::DiagnosticExt;\n use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n use rustc_hir::{TraitFn, TraitItem, TraitItemKind};"}, {"sha": "ebfd908a6fb741692149fe5a491bf1612680221a", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=87355df6d4db920a5a80bd6ccd4d467feea9df5a", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::{get_trait_def_id, is_self, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{BindingAnnotation, Body, FnDecl, GenericArg, HirId, Impl, ItemKind, Node, PatKind, QPath, TyKind};\n use rustc_hir::{HirIdMap, HirIdSet};\n@@ -196,7 +196,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                     }\n \n                     // Dereference suggestion\n-                    let sugg = |diag: &mut DiagnosticBuilder<'_>| {\n+                    let sugg = |diag: &mut Diagnostic| {\n                         if let ty::Adt(def, ..) = ty.kind() {\n                             if let Some(span) = cx.tcx.hir().span_if_local(def.did) {\n                                 if can_type_implement_copy(cx.tcx, cx.param_env, ty, traits::ObligationCause::dummy_with_span(span)).is_ok() {"}, {"sha": "4cb79648ae36a054e13ce8aeda7f558fccb34d7a", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=87355df6d4db920a5a80bd6ccd4d467feea9df5a", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_hir_and_then;\n use clippy_utils::return_ty;\n use clippy_utils::source::snippet;\n-use clippy_utils::sugg::DiagnosticBuilderExt;\n+use clippy_utils::sugg::DiagnosticExt;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "a328ddda5ae7b9fd6b980eddf188641e70057f6b", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=87355df6d4db920a5a80bd6ccd4d467feea9df5a", "patch": "@@ -534,7 +534,7 @@ impl Write {\n             match parser\n                 .parse_expr()\n                 .map(rustc_ast::ptr::P::into_inner)\n-                .map_err(|mut e| e.cancel())\n+                .map_err(|e| e.cancel())\n             {\n                 // write!(e, ...)\n                 Ok(p) if parser.eat(&token::Comma) => Some(p),\n@@ -563,7 +563,7 @@ impl Write {\n             }\n \n             let comma_span = parser.prev_token.span;\n-            let token_expr = if let Ok(expr) = parser.parse_expr().map_err(|mut err| err.cancel()) {\n+            let token_expr = if let Ok(expr) = parser.parse_expr().map_err(|err| err.cancel()) {\n                 expr\n             } else {\n                 return (Some(fmtstr), None);"}, {"sha": "a927788e6a44ad9931c8bc7521fdea5f4006fa5c", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=87355df6d4db920a5a80bd6ccd4d467feea9df5a", "patch": "@@ -8,13 +8,13 @@\n //! Thank you!\n //! ~The `INTERNAL_METADATA_COLLECTOR` lint\n \n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::HirId;\n use rustc_lint::{LateContext, Lint, LintContext};\n use rustc_span::source_map::{MultiSpan, Span};\n use std::env;\n \n-fn docs_link(diag: &mut DiagnosticBuilder<'_>, lint: &'static Lint) {\n+fn docs_link(diag: &mut Diagnostic, lint: &'static Lint) {\n     if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n         if let Some(lint) = lint.name_lower().strip_prefix(\"clippy::\") {\n             diag.help(&format!(\n@@ -145,7 +145,7 @@ pub fn span_lint_and_then<C, S, F>(cx: &C, lint: &'static Lint, sp: S, msg: &str\n where\n     C: LintContext,\n     S: Into<MultiSpan>,\n-    F: FnOnce(&mut DiagnosticBuilder<'_>),\n+    F: FnOnce(&mut Diagnostic),\n {\n     cx.struct_span_lint(lint, sp, |diag| {\n         let mut diag = diag.build(msg);\n@@ -169,7 +169,7 @@ pub fn span_lint_hir_and_then(\n     hir_id: HirId,\n     sp: impl Into<MultiSpan>,\n     msg: &str,\n-    f: impl FnOnce(&mut DiagnosticBuilder<'_>),\n+    f: impl FnOnce(&mut Diagnostic),\n ) {\n     cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |diag| {\n         let mut diag = diag.build(msg);\n@@ -219,7 +219,7 @@ pub fn span_lint_and_sugg<'a, T: LintContext>(\n /// appear once per\n /// replacement. In human-readable format though, it only appears once before\n /// the whole suggestion.\n-pub fn multispan_sugg<I>(diag: &mut DiagnosticBuilder<'_>, help_msg: &str, sugg: I)\n+pub fn multispan_sugg<I>(diag: &mut Diagnostic, help_msg: &str, sugg: I)\n where\n     I: IntoIterator<Item = (Span, String)>,\n {\n@@ -232,7 +232,7 @@ where\n /// multiple spans. This is tracked in issue [rustfix#141](https://github.com/rust-lang/rustfix/issues/141).\n /// Suggestions with multiple spans will be silently ignored.\n pub fn multispan_sugg_with_applicability<I>(\n-    diag: &mut DiagnosticBuilder<'_>,\n+    diag: &mut Diagnostic,\n     help_msg: &str,\n     applicability: Applicability,\n     sugg: I,"}, {"sha": "63c442e70085a1015825b4731f3b079ccd985af1", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87355df6d4db920a5a80bd6ccd4d467feea9df5a/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=87355df6d4db920a5a80bd6ccd4d467feea9df5a", "patch": "@@ -673,8 +673,8 @@ fn indentation<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n         })\n }\n \n-/// Convenience extension trait for `DiagnosticBuilder`.\n-pub trait DiagnosticBuilderExt<T: LintContext> {\n+/// Convenience extension trait for `Diagnostic`.\n+pub trait DiagnosticExt<T: LintContext> {\n     /// Suggests to add an attribute to an item.\n     ///\n     /// Correctly handles indentation of the attribute and item.\n@@ -721,7 +721,7 @@ pub trait DiagnosticBuilderExt<T: LintContext> {\n     fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str, applicability: Applicability);\n }\n \n-impl<T: LintContext> DiagnosticBuilderExt<T> for rustc_errors::DiagnosticBuilder<'_> {\n+impl<T: LintContext> DiagnosticExt<T> for rustc_errors::Diagnostic {\n     fn suggest_item_with_attr<D: Display + ?Sized>(\n         &mut self,\n         cx: &T,"}]}