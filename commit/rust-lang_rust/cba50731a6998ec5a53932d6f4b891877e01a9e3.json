{"sha": "cba50731a6998ec5a53932d6f4b891877e01a9e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYTUwNzMxYTY5OThlYzVhNTM5MzJkNmY0Yjg5MTg3N2UwMWE5ZTM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-11T13:28:03Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-11T20:00:26Z"}, "message": "Move crate loader to collect_intra_doc_links::early\n\nThis groups the similar code together, and also allows making most of collect_intra_doc_links private again", "tree": {"sha": "622b4a5fb1d9ca5c9229ef490f64963d9c2aedb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/622b4a5fb1d9ca5c9229ef490f64963d9c2aedb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cba50731a6998ec5a53932d6f4b891877e01a9e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cba50731a6998ec5a53932d6f4b891877e01a9e3", "html_url": "https://github.com/rust-lang/rust/commit/cba50731a6998ec5a53932d6f4b891877e01a9e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cba50731a6998ec5a53932d6f4b891877e01a9e3/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47d1ed96902508108a00afa1865f5e40819db5c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/47d1ed96902508108a00afa1865f5e40819db5c6", "html_url": "https://github.com/rust-lang/rust/commit/47d1ed96902508108a00afa1865f5e40819db5c6"}], "stats": {"total": 141, "additions": 80, "deletions": 61}, "files": [{"sha": "be7bff1a29c2b4d51e45cbc9afc3b4007e8c8f36", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 50, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/cba50731a6998ec5a53932d6f4b891877e01a9e3/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba50731a6998ec5a53932d6f4b891877e01a9e3/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=cba50731a6998ec5a53932d6f4b891877e01a9e3", "patch": "@@ -5,8 +5,8 @@ use rustc_driver::abort_on_err;\n use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::json::JsonEmitter;\n use rustc_feature::UnstableFeatures;\n-use rustc_hir::def::{Namespace::TypeNS, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def::Res;\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use rustc_hir::HirId;\n use rustc_hir::{\n     intravisit::{self, NestedVisitorMap, Visitor},\n@@ -356,54 +356,7 @@ crate fn create_resolver<'a>(\n     let (krate, resolver, _) = &*parts;\n     let resolver = resolver.borrow().clone();\n \n-    // Letting the resolver escape at the end of the function leads to inconsistencies between the\n-    // crates the TyCtxt sees and the resolver sees (because the resolver could load more crates\n-    // after escaping). Hopefully `IntraLinkCrateLoader` gets all the crates we need ...\n-    struct IntraLinkCrateLoader {\n-        current_mod: DefId,\n-        resolver: Rc<RefCell<interface::BoxedResolver>>,\n-    }\n-    impl ast::visit::Visitor<'_> for IntraLinkCrateLoader {\n-        fn visit_attribute(&mut self, attr: &ast::Attribute) {\n-            use crate::html::markdown::markdown_links;\n-            use crate::passes::collect_intra_doc_links::preprocess_link;\n-\n-            if let Some(doc) = attr.doc_str() {\n-                for link in markdown_links(&doc.as_str()) {\n-                    let path_str = if let Some(Ok(x)) = preprocess_link(&link) {\n-                        x.path_str\n-                    } else {\n-                        continue;\n-                    };\n-                    self.resolver.borrow_mut().access(|resolver| {\n-                        let _ = resolver.resolve_str_path_error(\n-                            attr.span,\n-                            &path_str,\n-                            TypeNS,\n-                            self.current_mod,\n-                        );\n-                    });\n-                }\n-            }\n-            ast::visit::walk_attribute(self, attr);\n-        }\n-\n-        fn visit_item(&mut self, item: &ast::Item) {\n-            use rustc_ast_lowering::ResolverAstLowering;\n-\n-            if let ast::ItemKind::Mod(..) = item.kind {\n-                let new_mod =\n-                    self.resolver.borrow_mut().access(|resolver| resolver.local_def_id(item.id));\n-                let old_mod = mem::replace(&mut self.current_mod, new_mod.to_def_id());\n-                ast::visit::walk_item(self, item);\n-                self.current_mod = old_mod;\n-            } else {\n-                ast::visit::walk_item(self, item);\n-            }\n-        }\n-    }\n-    let crate_id = LocalDefId { local_def_index: CRATE_DEF_INDEX }.to_def_id();\n-    let mut loader = IntraLinkCrateLoader { current_mod: crate_id, resolver };\n+    let mut loader = crate::passes::collect_intra_doc_links::IntraLinkCrateLoader::new(resolver);\n     ast::visit::walk_crate(&mut loader, krate);\n \n     loader.resolver"}, {"sha": "6342110adfe0bf0ca77fd07647f5f5b0e7e7e6cd", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cba50731a6998ec5a53932d6f4b891877e01a9e3/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba50731a6998ec5a53932d6f4b891877e01a9e3/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=cba50731a6998ec5a53932d6f4b891877e01a9e3", "patch": "@@ -39,13 +39,16 @@ use crate::passes::Pass;\n \n use super::span_of_attrs;\n \n+mod early;\n+crate use early::IntraLinkCrateLoader;\n+\n crate const COLLECT_INTRA_DOC_LINKS: Pass = Pass {\n     name: \"collect-intra-doc-links\",\n     run: collect_intra_doc_links,\n     description: \"resolves intra-doc links\",\n };\n \n-crate fn collect_intra_doc_links(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n+fn collect_intra_doc_links(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n     LinkCollector {\n         cx,\n         mod_ids: Vec::new(),\n@@ -68,7 +71,7 @@ impl<'a> From<ResolutionFailure<'a>> for ErrorKind<'a> {\n }\n \n #[derive(Copy, Clone, Debug, Hash)]\n-crate enum Res {\n+enum Res {\n     Def(DefKind, DefId),\n     Primitive(PrimitiveType),\n }\n@@ -134,7 +137,7 @@ impl TryFrom<ResolveRes> for Res {\n \n /// A link failed to resolve.\n #[derive(Debug)]\n-crate enum ResolutionFailure<'a> {\n+enum ResolutionFailure<'a> {\n     /// This resolved, but with the wrong namespace.\n     WrongNamespace {\n         /// What the link resolved to.\n@@ -172,7 +175,7 @@ crate enum ResolutionFailure<'a> {\n }\n \n #[derive(Debug)]\n-crate enum MalformedGenerics {\n+enum MalformedGenerics {\n     /// This link has unbalanced angle brackets.\n     ///\n     /// For example, `Vec<T` should trigger this, as should `Vec<T>>`.\n@@ -224,7 +227,7 @@ impl ResolutionFailure<'a> {\n     }\n }\n \n-crate enum AnchorFailure {\n+enum AnchorFailure {\n     /// User error: `[std#x#y]` is not valid\n     MultipleAnchors,\n     /// The anchor provided by the user conflicts with Rustdoc's generated anchor.\n@@ -892,7 +895,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n     }\n }\n \n-crate enum PreprocessingError<'a> {\n+enum PreprocessingError<'a> {\n     Anchor(AnchorFailure),\n     Disambiguator(Range<usize>, String),\n     Resolution(ResolutionFailure<'a>, String, Option<Disambiguator>),\n@@ -904,8 +907,8 @@ impl From<AnchorFailure> for PreprocessingError<'_> {\n     }\n }\n \n-crate struct PreprocessingInfo {\n-    crate path_str: String,\n+struct PreprocessingInfo {\n+    path_str: String,\n     disambiguator: Option<Disambiguator>,\n     extra_fragment: Option<String>,\n     link_text: String,\n@@ -917,7 +920,7 @@ crate struct PreprocessingInfo {\n /// - `Some(Ok)` if the link is valid\n ///\n /// `link_buffer` is needed for lifetime reasons; it will always be overwritten and the contents ignored.\n-crate fn preprocess_link<'a>(\n+fn preprocess_link<'a>(\n     ori_link: &'a MarkdownLink,\n ) -> Option<Result<PreprocessingInfo, PreprocessingError<'a>>> {\n     // [] is mostly likely not supposed to be a link\n@@ -1494,7 +1497,7 @@ fn should_ignore_link(path_str: &str) -> bool {\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n /// Disambiguators for a link.\n-crate enum Disambiguator {\n+enum Disambiguator {\n     /// `prim@`\n     ///\n     /// This is buggy, see <https://github.com/rust-lang/rust/pull/77875#discussion_r503583103>\n@@ -1523,7 +1526,7 @@ impl Disambiguator {\n     /// This returns `Ok(Some(...))` if a disambiguator was found,\n     /// `Ok(None)` if no disambiguator was found, or `Err(...)`\n     /// if there was a problem with the disambiguator.\n-    crate fn from_str(link: &str) -> Result<Option<(Self, &str)>, (String, Range<usize>)> {\n+    fn from_str(link: &str) -> Result<Option<(Self, &str)>, (String, Range<usize>)> {\n         use Disambiguator::{Kind, Namespace as NS, Primitive};\n \n         if let Some(idx) = link.find('@') {"}, {"sha": "7cba2523d1a3b938e45b20671e9976e9ac976ec4", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/cba50731a6998ec5a53932d6f4b891877e01a9e3/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba50731a6998ec5a53932d6f4b891877e01a9e3/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=cba50731a6998ec5a53932d6f4b891877e01a9e3", "patch": "@@ -0,0 +1,63 @@\n+use rustc_ast as ast;\n+use rustc_hir::def::Namespace::TypeNS;\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_interface::interface;\n+\n+use std::cell::RefCell;\n+use std::mem;\n+use std::rc::Rc;\n+\n+// Letting the resolver escape at the end of the function leads to inconsistencies between the\n+// crates the TyCtxt sees and the resolver sees (because the resolver could load more crates\n+// after escaping). Hopefully `IntraLinkCrateLoader` gets all the crates we need ...\n+crate struct IntraLinkCrateLoader {\n+    current_mod: DefId,\n+    crate resolver: Rc<RefCell<interface::BoxedResolver>>,\n+}\n+\n+impl IntraLinkCrateLoader {\n+    crate fn new(resolver: Rc<RefCell<interface::BoxedResolver>>) -> Self {\n+        let crate_id = LocalDefId { local_def_index: CRATE_DEF_INDEX }.to_def_id();\n+        Self { current_mod: crate_id, resolver }\n+    }\n+}\n+\n+impl ast::visit::Visitor<'_> for IntraLinkCrateLoader {\n+    fn visit_attribute(&mut self, attr: &ast::Attribute) {\n+        use crate::html::markdown::markdown_links;\n+        use crate::passes::collect_intra_doc_links::preprocess_link;\n+\n+        if let Some(doc) = attr.doc_str() {\n+            for link in markdown_links(&doc.as_str()) {\n+                let path_str = if let Some(Ok(x)) = preprocess_link(&link) {\n+                    x.path_str\n+                } else {\n+                    continue;\n+                };\n+                self.resolver.borrow_mut().access(|resolver| {\n+                    let _ = resolver.resolve_str_path_error(\n+                        attr.span,\n+                        &path_str,\n+                        TypeNS,\n+                        self.current_mod,\n+                    );\n+                });\n+            }\n+        }\n+        ast::visit::walk_attribute(self, attr);\n+    }\n+\n+    fn visit_item(&mut self, item: &ast::Item) {\n+        use rustc_ast_lowering::ResolverAstLowering;\n+\n+        if let ast::ItemKind::Mod(..) = item.kind {\n+            let new_mod =\n+                self.resolver.borrow_mut().access(|resolver| resolver.local_def_id(item.id));\n+            let old_mod = mem::replace(&mut self.current_mod, new_mod.to_def_id());\n+            ast::visit::walk_item(self, item);\n+            self.current_mod = old_mod;\n+        } else {\n+            ast::visit::walk_item(self, item);\n+        }\n+    }\n+}"}]}