{"sha": "5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "node_id": "C_kwDOAAsO6NoAKDVlYTNmMGFlMDhjMDc0NzIyMzlhOTRjZTU1NjAxZTliNjNlYjFmNDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-23T21:09:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-23T21:09:20Z"}, "message": "Auto merge of #111867 - RalfJung:miri, r=RalfJung\n\nupdate Miri", "tree": {"sha": "b359fdba5f35408decd83caf44170dd61c12cbe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b359fdba5f35408decd83caf44170dd61c12cbe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "html_url": "https://github.com/rust-lang/rust/commit/5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5699874dc07d2dfb262d007293853f73c171f7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5699874dc07d2dfb262d007293853f73c171f7e", "html_url": "https://github.com/rust-lang/rust/commit/d5699874dc07d2dfb262d007293853f73c171f7e"}, {"sha": "13e4766440efde6baaff12675cd9acf580e3f557", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e4766440efde6baaff12675cd9acf580e3f557", "html_url": "https://github.com/rust-lang/rust/commit/13e4766440efde6baaff12675cd9acf580e3f557"}], "stats": {"total": 220, "additions": 171, "deletions": 49}, "files": [{"sha": "d5840513083a724759d9ecc96b8406d04d576e7c", "filename": "Cargo.lock", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -903,6 +903,16 @@ dependencies = [\n  \"quote\",\n ]\n \n+[[package]]\n+name = \"ctrlc\"\n+version = \"3.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7394a21d012ce5c850497fb774b167d81b99f060025fbf06ee92b9848bd97eb2\"\n+dependencies = [\n+ \"nix\",\n+ \"windows-sys 0.48.0\",\n+]\n+\n [[package]]\n name = \"curl\"\n version = \"0.4.44\"\n@@ -2304,6 +2314,7 @@ name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n  \"colored\",\n+ \"ctrlc\",\n  \"env_logger 0.9.0\",\n  \"getrandom\",\n  \"lazy_static\",\n@@ -2333,6 +2344,18 @@ version = \"1.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"e4a24736216ec316047a1fc4252e27dabb04218aa4a3f37c6e7ddbf1f9782b54\"\n \n+[[package]]\n+name = \"nix\"\n+version = \"0.26.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bfdda3d196821d6af13126e40375cdf7da646a96114af134d5f417a9a1dc8e1a\"\n+dependencies = [\n+ \"bitflags\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"static_assertions\",\n+]\n+\n [[package]]\n name = \"nom\"\n version = \"7.1.0\""}, {"sha": "7bedb5d48f64ea783de6855b8fa4c56633235951", "filename": "src/tools/miri/Cargo.lock", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.lock?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -183,6 +183,16 @@ dependencies = [\n  \"cfg-if\",\n ]\n \n+[[package]]\n+name = \"ctrlc\"\n+version = \"3.2.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bbcf33c2a618cbe41ee43ae6e9f2e48368cd9f9db2896f10167d8d762679f639\"\n+dependencies = [\n+ \"nix\",\n+ \"windows-sys 0.45.0\",\n+]\n+\n [[package]]\n name = \"diff\"\n version = \"0.1.13\"\n@@ -421,6 +431,7 @@ name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n  \"colored\",\n+ \"ctrlc\",\n  \"env_logger\",\n  \"getrandom\",\n  \"lazy_static\",\n@@ -437,6 +448,18 @@ dependencies = [\n  \"ui_test\",\n ]\n \n+[[package]]\n+name = \"nix\"\n+version = \"0.26.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bfdda3d196821d6af13126e40375cdf7da646a96114af134d5f417a9a1dc8e1a\"\n+dependencies = [\n+ \"bitflags\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"static_assertions\",\n+]\n+\n [[package]]\n name = \"object\"\n version = \"0.30.3\"\n@@ -713,6 +736,12 @@ version = \"1.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0\"\n \n+[[package]]\n+name = \"static_assertions\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n+\n [[package]]\n name = \"syn\"\n version = \"2.0.15\""}, {"sha": "683f99ca4de445875c20260102017a2f7e275d12", "filename": "src/tools/miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.toml?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -29,6 +29,7 @@ smallvec = \"1.7\"\n # for more information.\n rustc-workspace-hack = \"1.0.0\"\n measureme = \"10.0.0\"\n+ctrlc = \"3.2.5\"\n \n [target.'cfg(unix)'.dependencies]\n libc = \"0.2\""}, {"sha": "d7216060358cb583a7ffe0a3bcd26ec7c8263ab0", "filename": "src/tools/miri/cargo-miri/src/arg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Farg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Farg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Farg.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -40,7 +40,8 @@ impl<'s, I: Iterator<Item = Cow<'s, str>>> Iterator for ArgSplitFlagValue<'_, I>\n         if arg == \"--\" {\n             // Stop searching at `--`.\n             self.args = None;\n-            return None;\n+            // But yield the `--` so that it does not get lost!\n+            return Some(Err(Cow::Borrowed(\"--\")));\n         }\n         // These branches cannot be merged if we want to avoid the allocation in the `Borrowed` branch.\n         match &arg {\n@@ -79,9 +80,8 @@ impl<'a, I: Iterator<Item = String> + 'a> ArgSplitFlagValue<'a, I> {\n     ) -> impl Iterator<Item = Result<String, String>> + 'a {\n         ArgSplitFlagValue::new(args.map(Cow::Owned), name).map(|x| {\n             match x {\n-                Ok(Cow::Owned(s)) => Ok(s),\n-                Err(Cow::Owned(s)) => Err(s),\n-                _ => panic!(\"iterator converted owned to borrowed\"),\n+                Ok(s) => Ok(s.into_owned()),\n+                Err(s) => Err(s.into_owned()),\n             }\n         })\n     }"}, {"sha": "465e4a1b2d2b20dce3afaaa443b5847e928c710a", "filename": "src/tools/miri/cargo-miri/src/phases.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -113,30 +113,17 @@ pub fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n     };\n     let metadata = get_cargo_metadata();\n     let mut cmd = cargo();\n-    cmd.arg(cargo_cmd);\n-\n-    // Forward all arguments before `--` other than `--target-dir` and its value to Cargo.\n-    // (We want to *change* the target-dir value, so we must not forward it.)\n-    let mut target_dir = None;\n-    for arg in ArgSplitFlagValue::from_string_iter(&mut args, \"--target-dir\") {\n-        match arg {\n-            Ok(value) => {\n-                if target_dir.is_some() {\n-                    show_error!(\"`--target-dir` is provided more than once\");\n-                }\n-                target_dir = Some(value.into());\n-            }\n-            Err(arg) => {\n-                cmd.arg(arg);\n-            }\n-        }\n+    cmd.arg(&cargo_cmd);\n+    // In nextest we have to also forward the main `verb`.\n+    if cargo_cmd == \"nextest\" {\n+        cmd.arg(\n+            args.next()\n+                .unwrap_or_else(|| show_error!(\"`cargo miri nextest` expects a verb (e.g. `run`)\")),\n+        );\n     }\n-    // Detect the target directory if it's not specified via `--target-dir`.\n-    // (`cargo metadata` does not support `--target-dir`, that's why we have to handle this ourselves.)\n-    let target_dir = target_dir.get_or_insert_with(|| metadata.target_directory.clone());\n-    // Set `--target-dir` to `miri` inside the original target directory.\n-    target_dir.push(\"miri\");\n-    cmd.arg(\"--target-dir\").arg(target_dir);\n+    // We set the following flags *before* forwarding more arguments.\n+    // This is needed to fix <https://github.com/rust-lang/miri/issues/2829>: cargo will stop\n+    // interpreting things as flags when it sees the first positional argument.\n \n     // Make sure the build target is explicitly set.\n     // This is needed to make the `target.runner` settings do something,\n@@ -154,8 +141,23 @@ pub fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n     cmd.arg(\"--config\")\n         .arg(format!(\"target.'cfg(all())'.runner=[{cargo_miri_path_for_toml}, 'runner']\"));\n \n-    // Forward all further arguments after `--` to cargo.\n-    cmd.arg(\"--\").args(args);\n+    // Set `--target-dir` to `miri` inside the original target directory.\n+    let mut target_dir = match get_arg_flag_value(\"--target-dir\") {\n+        Some(dir) => PathBuf::from(dir),\n+        None => metadata.target_directory.clone().into_std_path_buf(),\n+    };\n+    target_dir.push(\"miri\");\n+    cmd.arg(\"--target-dir\").arg(target_dir);\n+\n+    // *After* we set all the flags that need setting, forward everything else. Make sure to skip\n+    // `--target-dir` (which would otherwise be set twice).\n+    for arg in\n+        ArgSplitFlagValue::from_string_iter(&mut args, \"--target-dir\").filter_map(Result::err)\n+    {\n+        cmd.arg(arg);\n+    }\n+    // Forward all further arguments (not consumed by `ArgSplitFlagValue`) to cargo.\n+    cmd.args(args);\n \n     // Set `RUSTC_WRAPPER` to ourselves.  Cargo will prepend that binary to its usual invocation,\n     // i.e., the first argument is `rustc` -- which is what we use in `main` to distinguish"}, {"sha": "0bff100dc140ef9e4f4dfbae1b431580e81bc2eb", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -1 +1 @@\n-69fef92ab2f287f072b66fb7b4f62c8bb4acba43\n+8b4b20836b832e91aa605a2faf5e2a55190202c8"}, {"sha": "d85cac7bcbb58239ceb48b20584a4488cf3674ad", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -3,6 +3,7 @@\n use std::cell::RefCell;\n use std::collections::hash_map::Entry;\n use std::num::TryFromIntError;\n+use std::sync::atomic::{AtomicBool, Ordering::Relaxed};\n use std::task::Poll;\n use std::time::{Duration, SystemTime};\n \n@@ -1012,8 +1013,24 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Run the core interpreter loop. Returns only when an interrupt occurs (an error or program\n     /// termination).\n     fn run_threads(&mut self) -> InterpResult<'tcx, !> {\n+        static SIGNALED: AtomicBool = AtomicBool::new(false);\n+        ctrlc::set_handler(move || {\n+            // Indicate that we have ben signaled to stop. If we were already signaled, exit\n+            // immediately. In our interpreter loop we try to consult this value often, but if for\n+            // whatever reason we don't get to that check or the cleanup we do upon finding that\n+            // this bool has become true takes a long time, the exit here will promptly exit the\n+            // process on the second Ctrl-C.\n+            if SIGNALED.swap(true, Relaxed) {\n+                std::process::exit(1);\n+            }\n+        })\n+        .unwrap();\n         let this = self.eval_context_mut();\n         loop {\n+            if SIGNALED.load(Relaxed) {\n+                this.machine.handle_abnormal_termination();\n+                std::process::exit(1);\n+            }\n             match this.machine.threads.schedule(&this.machine.clock)? {\n                 SchedulingAction::ExecuteStep => {\n                     if !this.step()? {"}, {"sha": "29f518fe58b580c55216bd370d7038efef4691e5", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -713,6 +713,15 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n         let def_id = frame.instance.def_id();\n         def_id.is_local() || self.local_crates.contains(&def_id.krate)\n     }\n+\n+    /// Called when the interpreter is going to shut down abnormally, such as due to a Ctrl-C.\n+    pub(crate) fn handle_abnormal_termination(&mut self) {\n+        // All strings in the profile data are stored in a single string table which is not\n+        // written to disk until the profiler is dropped. If the interpreter exits without dropping\n+        // the profiler, it is not possible to interpret the profile data and all measureme tools\n+        // will panic when given the file.\n+        drop(self.profiler.take());\n+    }\n }\n \n impl VisitTags for MiriMachine<'_, '_> {"}, {"sha": "323991249d3a7a4bd9630b87c1c4e75775381179", "filename": "src/tools/miri/src/shims/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fbacktrace.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -102,7 +102,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let ptr_layout = this.layout_of(ptr_ty)?;\n \n                 for (i, ptr) in ptrs.into_iter().enumerate() {\n-                    let offset = ptr_layout.size * i.try_into().unwrap();\n+                    let offset = ptr_layout.size.checked_mul(i.try_into().unwrap(), this).unwrap();\n \n                     let op_place = buf_place.offset(offset, ptr_layout, this)?;\n "}, {"sha": "aa0794c00bee5cbde54cf6cb039b26526c548e42", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -166,7 +166,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     dependency_format.1.iter().enumerate().filter_map(|(num, &linkage)| {\n                         // We add 1 to the number because that's what rustc also does everywhere it\n                         // calls `CrateNum::new`...\n-                        #[allow(clippy::integer_arithmetic)]\n+                        #[allow(clippy::arithmetic_side_effects)]\n                         (linkage != Linkage::NotLinked).then_some(CrateNum::new(num + 1))\n                     }),\n                 ) {\n@@ -707,7 +707,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     .position(|&c| c == val)\n                 {\n                     let idx = u64::try_from(idx).unwrap();\n-                    #[allow(clippy::integer_arithmetic)] // idx < num, so this never wraps\n+                    #[allow(clippy::arithmetic_side_effects)] // idx < num, so this never wraps\n                     let new_ptr = ptr.offset(Size::from_bytes(num - idx - 1), this)?;\n                     this.write_pointer(new_ptr, dest)?;\n                 } else {\n@@ -916,10 +916,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let a = this.read_scalar(a)?.to_u64()?;\n                 let b = this.read_scalar(b)?.to_u64()?;\n \n-                #[allow(clippy::integer_arithmetic)]\n+                #[allow(clippy::arithmetic_side_effects)]\n                 // adding two u64 and a u8 cannot wrap in a u128\n                 let wide_sum = u128::from(c_in) + u128::from(a) + u128::from(b);\n-                #[allow(clippy::integer_arithmetic)] // it's a u128, we can shift by 64\n+                #[allow(clippy::arithmetic_side_effects)] // it's a u128, we can shift by 64\n                 let (c_out, sum) = ((wide_sum >> 64).truncate::<u8>(), wide_sum.truncate::<u64>());\n \n                 let c_out_field = this.place_field(dest, 0)?;"}, {"sha": "1995db715e8dacdb0383a6211ace15545603183b", "filename": "src/tools/miri/src/shims/intrinsics/simd.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -563,7 +563,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let (op, op_len) = this.operand_to_simd(op)?;\n                 let bitmask_len = op_len.max(8);\n \n-                assert!(dest.layout.ty.is_integral());\n+                // Returns either an unsigned integer or array of `u8`.\n+                assert!(\n+                    dest.layout.ty.is_integral()\n+                        || matches!(dest.layout.ty.kind(), ty::Array(elemty, _) if elemty == &this.tcx.types.u8)\n+                );\n                 assert!(bitmask_len <= 64);\n                 assert_eq!(bitmask_len, dest.layout.size.bits());\n                 let op_len = u32::try_from(op_len).unwrap();\n@@ -577,7 +581,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                             .unwrap();\n                     }\n                 }\n-                this.write_int(res, dest)?;\n+                // We have to force the place type to be an int so that we can write `res` into it.\n+                let mut dest = this.force_allocation(dest)?;\n+                dest.layout = this.machine.layouts.uint(dest.layout.size).unwrap();\n+                this.write_int(res, &dest.into())?;\n             }\n \n             name => throw_unsup_format!(\"unimplemented intrinsic: `simd_{name}`\"),\n@@ -605,7 +612,7 @@ fn simd_bitmask_index(idx: u32, vec_len: u32, endianness: Endian) -> u32 {\n     assert!(idx < vec_len);\n     match endianness {\n         Endian::Little => idx,\n-        #[allow(clippy::integer_arithmetic)] // idx < vec_len\n+        #[allow(clippy::arithmetic_side_effects)] // idx < vec_len\n         Endian::Big => vec_len - 1 - idx, // reverse order of bits\n     }\n }"}, {"sha": "a423a0786b7510979a0ad6f860f171fa74ad082c", "filename": "src/tools/miri/src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fmod.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::integer_arithmetic)]\n+#![warn(clippy::arithmetic_side_effects)]\n \n mod backtrace;\n #[cfg(target_os = \"linux\")]"}, {"sha": "756dec1beca45ad326651614fa7e8ea534753ef1", "filename": "src/tools/miri/src/shims/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -108,7 +108,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         Ok(0)\n     }\n \n-    #[allow(non_snake_case, clippy::integer_arithmetic)]\n+    #[allow(non_snake_case, clippy::arithmetic_side_effects)]\n     fn GetSystemTimeAsFileTime(\n         &mut self,\n         LPFILETIME_op: &OpTy<'tcx, Provenance>,"}, {"sha": "62bd087e7e82d62e19cf1bfa2daeda387dc995d2", "filename": "src/tools/miri/src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -56,7 +56,7 @@ impl<'tcx> Default for TlsData<'tcx> {\n impl<'tcx> TlsData<'tcx> {\n     /// Generate a new TLS key with the given destructor.\n     /// `max_size` determines the integer size the key has to fit in.\n-    #[allow(clippy::integer_arithmetic)]\n+    #[allow(clippy::arithmetic_side_effects)]\n     pub fn create_tls_key(\n         &mut self,\n         dtor: Option<ty::Instance<'tcx>>,"}, {"sha": "d1b09cd7b558b27da8267c76efe599cc11624429", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -458,7 +458,7 @@ pub struct DirHandler {\n }\n \n impl DirHandler {\n-    #[allow(clippy::integer_arithmetic)]\n+    #[allow(clippy::arithmetic_side_effects)]\n     fn insert_new(&mut self, read_dir: ReadDir) -> u64 {\n         let id = self.next_id;\n         self.next_id += 1;"}, {"sha": "6889c43004224336cf18a9eb896ec3e06aa035da", "filename": "src/tools/miri/src/shims/unix/linux/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -247,7 +247,7 @@ pub fn futex<'tcx>(\n             // before doing the syscall.\n             this.atomic_fence(AtomicFenceOrd::SeqCst)?;\n             let mut n = 0;\n-            #[allow(clippy::integer_arithmetic)]\n+            #[allow(clippy::arithmetic_side_effects)]\n             for _ in 0..val {\n                 if let Some(thread) = this.futex_wake(addr_usize, bitset) {\n                     this.unblock_thread(thread);"}, {"sha": "b8bb7f6245210c1cadbbbb1a05a43dc42e739ea2", "filename": "src/tools/miri/src/shims/windows/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -219,7 +219,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     .copied()\n                     .scan(Size::ZERO, |a, x| {\n                         let res = Some(*a);\n-                        *a += x;\n+                        *a = a.checked_add(x, this).unwrap();\n                         res\n                     })\n                     .collect();"}, {"sha": "d9ae1b22409ddd1b9b69a3a134270a3e35c62353", "filename": "src/tools/miri/src/shims/windows/handle.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fhandle.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -62,7 +62,7 @@ impl Handle {\n         let floor_log2 = variant_count.ilog2();\n \n         // we need to add one for non powers of two to compensate for the difference\n-        #[allow(clippy::integer_arithmetic)] // cannot overflow\n+        #[allow(clippy::arithmetic_side_effects)] // cannot overflow\n         if variant_count.is_power_of_two() { floor_log2 } else { floor_log2 + 1 }\n     }\n \n@@ -87,7 +87,7 @@ impl Handle {\n \n         // packs the data into the lower `data_size` bits\n         // and packs the discriminant right above the data\n-        #[allow(clippy::integer_arithmetic)] // cannot overflow\n+        #[allow(clippy::arithmetic_side_effects)] // cannot overflow\n         return discriminant << data_size | data;\n     }\n \n@@ -106,11 +106,11 @@ impl Handle {\n         let data_size = u32::BITS.checked_sub(disc_size).unwrap();\n \n         // the lower `data_size` bits of this mask are 1\n-        #[allow(clippy::integer_arithmetic)] // cannot overflow\n+        #[allow(clippy::arithmetic_side_effects)] // cannot overflow\n         let data_mask = 2u32.pow(data_size) - 1;\n \n         // the discriminant is stored right above the lower `data_size` bits\n-        #[allow(clippy::integer_arithmetic)] // cannot overflow\n+        #[allow(clippy::arithmetic_side_effects)] // cannot overflow\n         let discriminant = handle >> data_size;\n \n         // the data is stored in the lower `data_size` bits"}, {"sha": "9df90c725e40f4bd90059a97c3b232542d405389", "filename": "src/tools/miri/test-cargo-miri/run-test.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2Frun-test.py?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -108,8 +108,9 @@ def test_cargo_miri_run():\n         env={'MIRITESTVAR': \"wrongval\"}, # changing the env var causes a rebuild (re-runs build.rs),\n                                          # so keep it set\n     )\n+    # This also covers passing arguments without `--`: Cargo will forward unused positional arguments to the program.\n     test(\"`cargo miri run` (with arguments and target)\",\n-        cargo_miri(\"run\") + [\"--bin\", \"cargo-miri-test\", \"--\", \"hello world\", '\"hello world\"', r'he\\\\llo\\\"world'],\n+        cargo_miri(\"run\") + [\"--bin\", \"cargo-miri-test\", \"hello world\", '\"hello world\"', r'he\\\\llo\\\"world'],\n         \"run.args.stdout.ref\", \"run.args.stderr.ref\",\n     )\n     test(\"`cargo miri r` (subcrate, no isolation)\","}, {"sha": "ee67a65a4f9a206d37293456ac238295de4e7c3c", "filename": "src/tools/miri/tests/pass/portable-simd.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3f0ae08c07472239a94ce55601e9b63eb1f45/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fportable-simd.rs?ref=5ea3f0ae08c07472239a94ce55601e9b63eb1f45", "patch": "@@ -2,6 +2,10 @@\n #![feature(portable_simd, platform_intrinsics)]\n use std::simd::*;\n \n+extern \"platform-intrinsic\" {\n+    pub(crate) fn simd_bitmask<T, U>(x: T) -> U;\n+}\n+\n fn simd_ops_f32() {\n     let a = f32x4::splat(10.0);\n     let b = f32x4::from_array([1.0, 2.0, 3.0, -4.0]);\n@@ -208,11 +212,40 @@ fn simd_mask() {\n     assert_eq!(bitmask, 0b1010001101001001);\n     assert_eq!(Mask::<i64, 16>::from_bitmask(bitmask), mask);\n \n+    // Also directly call intrinsic, to test both kinds of return types.\n+    unsafe {\n+        let bitmask1: u16 = simd_bitmask(mask.to_int());\n+        let bitmask2: [u8; 2] = simd_bitmask(mask.to_int());\n+        if cfg!(target_endian = \"little\") {\n+            assert_eq!(bitmask1, 0b1010001101001001);\n+            assert_eq!(bitmask2, [0b01001001, 0b10100011]);\n+        } else {\n+            // All the bitstrings are reversed compared to above, but the array elements are in the\n+            // same order.\n+            assert_eq!(bitmask1, 0b1001001011000101);\n+            assert_eq!(bitmask2, [0b10010010, 0b11000101]);\n+        }\n+    }\n+\n+    // Mask less than 8 bits long, which is a special case (padding with 0s).\n     let values = [false, false, false, true];\n     let mask = Mask::<i64, 4>::from_array(values);\n     let bitmask = mask.to_bitmask();\n     assert_eq!(bitmask, 0b1000);\n     assert_eq!(Mask::<i64, 4>::from_bitmask(bitmask), mask);\n+\n+    // Also directly call intrinsic, to test both kinds of return types.\n+    unsafe {\n+        let bitmask1: u8 = simd_bitmask(mask.to_int());\n+        let bitmask2: [u8; 1] = simd_bitmask(mask.to_int());\n+        if cfg!(target_endian = \"little\") {\n+            assert_eq!(bitmask1, 0b1000);\n+            assert_eq!(bitmask2, [0b1000]);\n+        } else {\n+            assert_eq!(bitmask1, 0b0001);\n+            assert_eq!(bitmask2, [0b0001]);\n+        }\n+    }\n }\n \n fn simd_cast() {"}]}