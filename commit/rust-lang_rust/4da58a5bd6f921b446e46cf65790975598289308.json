{"sha": "4da58a5bd6f921b446e46cf65790975598289308", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYTU4YTViZDZmOTIxYjQ0NmU0NmNmNjU3OTA5NzU1OTgyODkzMDg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-24T02:18:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-24T17:54:09Z"}, "message": "rustc: Implement typechecking for tuple structs. r=nmatsakis", "tree": {"sha": "3e0de65d3b2b901ebf2ca5adaa587036fcbbc336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e0de65d3b2b901ebf2ca5adaa587036fcbbc336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4da58a5bd6f921b446e46cf65790975598289308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4da58a5bd6f921b446e46cf65790975598289308", "html_url": "https://github.com/rust-lang/rust/commit/4da58a5bd6f921b446e46cf65790975598289308", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4da58a5bd6f921b446e46cf65790975598289308/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61bb3571a59f4659a0a46565c71fa7ecfa352811", "url": "https://api.github.com/repos/rust-lang/rust/commits/61bb3571a59f4659a0a46565c71fa7ecfa352811", "html_url": "https://github.com/rust-lang/rust/commit/61bb3571a59f4659a0a46565c71fa7ecfa352811"}], "stats": {"total": 98, "additions": 87, "deletions": 11}, "files": [{"sha": "e25fb470bb9b811dcabdab97b5708cd776d5d9bc", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4da58a5bd6f921b446e46cf65790975598289308/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da58a5bd6f921b446e46cf65790975598289308/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4da58a5bd6f921b446e46cf65790975598289308", "patch": "@@ -1444,6 +1444,31 @@ enum struct_field_kind {\n     unnamed_field   // element of a tuple-like struct\n }\n \n+impl struct_field_kind : cmp::Eq {\n+    pure fn eq(other: &struct_field_kind) -> bool {\n+        match self {\n+            named_field(ident_a, class_mutability_a, visibility_a) => {\n+                match *other {\n+                    named_field(ident_b, class_mutability_b, visibility_b)\n+                            => {\n+                        ident_a == ident_b &&\n+                        class_mutability_a == class_mutability_b &&\n+                        visibility_a == visibility_b\n+                    }\n+                    unnamed_field => false\n+                }\n+            }\n+            unnamed_field => {\n+                match *other {\n+                    named_field(*) => false,\n+                    unnamed_field => true\n+                }\n+            }\n+        }\n+    }\n+    pure fn ne(other: &struct_field_kind) -> bool { !self.eq(other) }\n+}\n+\n #[auto_serialize]\n #[auto_deserialize]\n type struct_def = {\n@@ -1452,7 +1477,10 @@ type struct_def = {\n     methods: ~[@method],    /* methods */\n     /* (not including ctor or dtor) */\n     /* dtor is optional */\n-    dtor: Option<class_dtor>\n+    dtor: Option<class_dtor>,\n+    /* ID of the constructor. This is only used for tuple- or enum-like\n+     * structs. */\n+    ctor_id: node_id\n };\n \n /*"}, {"sha": "d1b975492254a484699b94a3842bbd5fc2b0cb5b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4da58a5bd6f921b446e46cf65790975598289308/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da58a5bd6f921b446e46cf65790975598289308/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=4da58a5bd6f921b446e46cf65790975598289308", "patch": "@@ -280,7 +280,8 @@ fn fold_struct_def(struct_def: @ast::struct_def, fld: ast_fold)\n         traits: vec::map(struct_def.traits, |p| fold_trait_ref(*p, fld)),\n         fields: vec::map(struct_def.fields, |f| fold_struct_field(*f, fld)),\n         methods: vec::map(struct_def.methods, |m| fld.fold_method(*m)),\n-        dtor: dtor\n+        dtor: dtor,\n+        ctor_id: fld.new_id(struct_def.ctor_id)\n     };\n }\n \n@@ -563,7 +564,8 @@ fn noop_fold_variant(v: variant_, fld: ast_fold) -> variant_ {\n                                  |f| fld.fold_struct_field(*f)),\n                 methods: vec::map(struct_def.methods,\n                                   |m| fld.fold_method(*m)),\n-                dtor: dtor\n+                dtor: dtor,\n+                ctor_id: fld.new_id(struct_def.ctor_id)\n             })\n         }\n "}, {"sha": "e0570c537a7094e92c5f087dff031c589d003bd7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4da58a5bd6f921b446e46cf65790975598289308/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da58a5bd6f921b446e46cf65790975598289308/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4da58a5bd6f921b446e46cf65790975598289308", "patch": "@@ -2722,12 +2722,14 @@ impl Parser {\n                     self_id: self.get_id(),\n                     body: d_body},\n              span: d_s}};\n+        let _ = self.get_id();  // XXX: Workaround for crazy bug.\n         (class_name,\n          item_class(@{\n              traits: traits,\n              fields: move fields,\n              methods: move methods,\n-             dtor: actual_dtor\n+             dtor: actual_dtor,\n+             ctor_id: self.get_id()\n          }, ty_params),\n          None)\n     }\n@@ -3073,7 +3075,8 @@ impl Parser {\n             traits: ~[],\n             fields: move fields,\n             methods: move methods,\n-            dtor: actual_dtor\n+            dtor: actual_dtor,\n+            ctor_id: self.get_id()\n         };\n     }\n "}, {"sha": "1f7b3b1c8612f9e9659ad6196effe7812ac47c04", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4da58a5bd6f921b446e46cf65790975598289308/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da58a5bd6f921b446e46cf65790975598289308/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=4da58a5bd6f921b446e46cf65790975598289308", "patch": "@@ -9,8 +9,7 @@ use middle::pat_util::{pat_bindings};\n use syntax::ast::{_mod, add, arm};\n use syntax::ast::{bind_by_ref, bind_by_implicit_ref, bind_by_value};\n use syntax::ast::{bitand, bitor, bitxor};\n-use syntax::ast::{binding_mode, blk,\n-                     capture_clause, class_ctor, class_dtor};\n+use syntax::ast::{binding_mode, blk, capture_clause, class_ctor, class_dtor};\n use syntax::ast::{crate, crate_num, decl_item};\n use syntax::ast::{def, def_arg, def_binding, def_class, def_const, def_fn};\n use syntax::ast::{def_foreign_mod, def_id, def_label, def_local, def_mod};\n@@ -39,7 +38,7 @@ use syntax::ast::{trait_ref, tuple_variant_kind, Ty, ty_bool, ty_char};\n use syntax::ast::{ty_f, ty_f32, ty_f64, ty_float, ty_i, ty_i16, ty_i32};\n use syntax::ast::{ty_i64, ty_i8, ty_int, ty_param, ty_path, ty_str, ty_u};\n use syntax::ast::{ty_u16, ty_u32, ty_u64, ty_u8, ty_uint, type_value_ns};\n-use syntax::ast::{ty_param_bound};\n+use syntax::ast::{ty_param_bound, unnamed_field};\n use syntax::ast::{variant, view_item, view_item_export, view_item_import};\n use syntax::ast::{view_item_use, view_path_glob, view_path_list};\n use syntax::ast::{view_path_simple, visibility, anonymous, named};\n@@ -1179,12 +1178,22 @@ impl Resolver {\n             }\n \n             // These items live in both the type and value namespaces.\n-            item_class(*) => {\n+            item_class(struct_def, _) => {\n                 let (name_bindings, new_parent) =\n                     self.add_child(ident, parent, ForbidDuplicateTypes, sp);\n \n-                (*name_bindings).define_type\n-                    (privacy, def_ty(local_def(item.id)), sp);\n+                name_bindings.define_type(\n+                    privacy, def_ty(local_def(item.id)), sp);\n+\n+                // If this struct is tuple-like or enum-like, define a name\n+                // in the value namespace.\n+                if struct_def.fields.len() == 0 ||\n+                        struct_def.fields[0].node.kind == unnamed_field {\n+                    name_bindings.define_value(\n+                        privacy,\n+                        def_class(local_def(struct_def.ctor_id)),\n+                        sp);\n+                }\n \n                 // Record the def ID of this struct.\n                 self.structs.insert(local_def(item.id), ());"}, {"sha": "c8dcde52ebb94b9efe9be7a354d836a89c7f9c5a", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4da58a5bd6f921b446e46cf65790975598289308/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da58a5bd6f921b446e46cf65790975598289308/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=4da58a5bd6f921b446e46cf65790975598289308", "patch": "@@ -22,6 +22,7 @@ are represented as `ty_param()` instances.\n \n use astconv::{ast_conv, ty_of_fn_decl, ty_of_arg, ast_ty_to_ty};\n use ast_util::trait_method_to_ty_method;\n+use middle::ty::{FnMeta, FnSig, FnTyBase};\n use rscope::*;\n use ty::{FnTyBase, FnMeta, FnSig, InstantiatedTraitRef};\n use util::common::pluralize;\n@@ -559,6 +560,39 @@ fn convert_struct(ccx: @crate_ctxt,\n         write_ty_to_tcx(tcx, trait_ref.impl_id, tpt.ty);\n         tcx.tcache.insert(local_def(trait_ref.impl_id), tpt);\n     }\n+\n+    // If this struct is enum-like or tuple-like, create the type of its\n+    // constructor.\n+    if struct_def.fields.len() == 0 {\n+        // Enum-like.\n+        write_ty_to_tcx(tcx, struct_def.ctor_id, selfty);\n+        tcx.tcache.insert(local_def(struct_def.ctor_id), tpt);\n+    } else if struct_def.fields[0].node.kind == ast::unnamed_field {\n+        // Tuple-like.\n+        let ctor_fn_ty = ty::mk_fn(tcx, FnTyBase {\n+            meta: FnMeta {\n+                purity: ast::pure_fn,\n+                proto: ty::proto_bare,\n+                bounds: @~[],\n+                ret_style: ast::return_val,\n+            },\n+            sig: FnSig {\n+                inputs: do struct_def.fields.map |field| {\n+                    {\n+                        mode: ast::expl(ast::by_copy),\n+                        ty: ccx.tcx.tcache.get(local_def(field.node.id)).ty\n+                    }\n+                },\n+                output: selfty\n+            }\n+        });\n+        write_ty_to_tcx(tcx, struct_def.ctor_id, ctor_fn_ty);\n+        tcx.tcache.insert(local_def(struct_def.ctor_id), {\n+            bounds: tpt.bounds,\n+            region_param: tpt.region_param,\n+            ty: ctor_fn_ty\n+        });\n+    }\n }\n \n fn convert_foreign(ccx: @crate_ctxt, i: @ast::foreign_item) {"}]}