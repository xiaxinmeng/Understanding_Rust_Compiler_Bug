{"sha": "7abc06bd576264cb6b7c8becdbd1a8c0e914463d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYmMwNmJkNTc2MjY0Y2I2YjdjOGJlY2RiZDFhOGMwZTkxNDQ2M2Q=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-05T12:58:24Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-05T12:58:24Z"}, "message": "Add proper test for literals and fixed typo bug", "tree": {"sha": "35d8b8b04a8e17a162fd6b95105db34919d59507", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35d8b8b04a8e17a162fd6b95105db34919d59507"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7abc06bd576264cb6b7c8becdbd1a8c0e914463d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7abc06bd576264cb6b7c8becdbd1a8c0e914463d", "html_url": "https://github.com/rust-lang/rust/commit/7abc06bd576264cb6b7c8becdbd1a8c0e914463d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7abc06bd576264cb6b7c8becdbd1a8c0e914463d/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ea0238e538dc332b23698d54c02d8bd037f58bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea0238e538dc332b23698d54c02d8bd037f58bb", "html_url": "https://github.com/rust-lang/rust/commit/1ea0238e538dc332b23698d54c02d8bd037f58bb"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "4203929d4f4eaa205311976cf6605af2f6519e7e", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7abc06bd576264cb6b7c8becdbd1a8c0e914463d/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abc06bd576264cb6b7c8becdbd1a8c0e914463d/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=7abc06bd576264cb6b7c8becdbd1a8c0e914463d", "patch": "@@ -167,7 +167,7 @@ impl_froms!(TokenTree: Leaf, Subtree);\n     )\n     }\n \n-    fn create_rules(macro_definition: &str) -> MacroRules {\n+    pub(crate) fn create_rules(macro_definition: &str) -> MacroRules {\n         let source_file = ast::SourceFile::parse(macro_definition);\n         let macro_definition =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n@@ -176,7 +176,7 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         crate::MacroRules::parse(&definition_tt).unwrap()\n     }\n \n-    fn expand(rules: &MacroRules, invocation: &str) -> tt::Subtree {\n+    pub(crate) fn expand(rules: &MacroRules, invocation: &str) -> tt::Subtree {\n         let source_file = ast::SourceFile::parse(invocation);\n         let macro_invocation =\n             source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n@@ -186,7 +186,7 @@ impl_froms!(TokenTree: Leaf, Subtree);\n         rules.expand(&invocation_tt).unwrap()\n     }\n \n-    fn assert_expansion(rules: &MacroRules, invocation: &str, expansion: &str) {\n+    pub(crate) fn assert_expansion(rules: &MacroRules, invocation: &str, expansion: &str) {\n         let expanded = expand(rules, invocation);\n         assert_eq!(expanded.to_string(), expansion);\n     }\n@@ -338,7 +338,7 @@ SOURCE_FILE@[0; 40)\n     }\n \n     #[test]\n-    fn expand_literals_to_item_list() {\n+    fn expand_literals_to_token_tree() {\n         fn to_subtree(tt: &tt::TokenTree) -> &tt::Subtree {\n             if let tt::TokenTree::Subtree(subtree) = tt {\n                 return &subtree;\n@@ -361,6 +361,7 @@ SOURCE_FILE@[0; 40)\n                         let a = 'c';\n                         let c = 1000;\n                         let f = 12E+99_f64;\n+                        let s = \"rust1\";\n                     }\n                 }\n             }\n@@ -375,5 +376,7 @@ SOURCE_FILE@[0; 40)\n         assert_eq!(to_literal(&stm_tokens[5 + 3]).text, \"1000\");\n         // [let] [f] [=] [12E+99_f64] [;]\n         assert_eq!(to_literal(&stm_tokens[10 + 3]).text, \"12E+99_f64\");\n+        // [let] [s] [=] [\"rust1\"] [;]\n+        assert_eq!(to_literal(&stm_tokens[15 + 3]).text, \"\\\"rust1\\\"\");\n     }\n }"}, {"sha": "139a0fd3379aa7230d0f9607e3d7ab7fa376129f", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7abc06bd576264cb6b7c8becdbd1a8c0e914463d/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abc06bd576264cb6b7c8becdbd1a8c0e914463d/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=7abc06bd576264cb6b7c8becdbd1a8c0e914463d", "patch": "@@ -103,10 +103,12 @@ fn convert_tt(\n     Some(res)\n }\n \n+#[derive(Debug)]\n struct TtTokenSource {\n     tokens: Vec<TtToken>,\n }\n \n+#[derive(Debug)]\n struct TtToken {\n     kind: SyntaxKind,\n     is_joint_to_next: bool,\n@@ -355,3 +357,44 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n         self.inner.error(error, self.text_pos)\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::tests::{expand, create_rules};\n+\n+    #[test]\n+    fn convert_tt_token_source() {\n+        let rules = create_rules(\n+            r#\"\n+            macro_rules! literals {\n+                ($i:ident) => {\n+                    {\n+                        let a = 'c';\n+                        let c = 1000;\n+                        let f = 12E+99_f64;\n+                        let s = \"rust1\";\n+                    }\n+                }\n+            }\n+            \"#,\n+        );\n+        let expansion = expand(&rules, \"literals!(foo)\");\n+        let tt_src = TtTokenSource::new(&expansion);\n+\n+        // [{]\n+        // [let] [a] [=] ['c'] [;]\n+        assert_eq!(tt_src.tokens[1 + 3].text, \"'c'\");\n+        assert_eq!(tt_src.tokens[1 + 3].kind, CHAR);\n+        // [let] [c] [=] [1000] [;]\n+        assert_eq!(tt_src.tokens[1 + 5 + 3].text, \"1000\");\n+        assert_eq!(tt_src.tokens[1 + 5 + 3].kind, INT_NUMBER);\n+        // [let] [f] [=] [12E+99_f64] [;]\n+        assert_eq!(tt_src.tokens[1 + 10 + 3].text, \"12E+99_f64\");\n+        assert_eq!(tt_src.tokens[1 + 10 + 3].kind, FLOAT_NUMBER);\n+\n+        // [let] [s] [=] [\"rust1\"] [;]\n+        assert_eq!(tt_src.tokens[1 + 15 + 3].text, \"\\\"rust1\\\"\");\n+        assert_eq!(tt_src.tokens[1 + 15 + 3].kind, STRING);\n+    }\n+}"}, {"sha": "3ae42912c5284c9ba2335d01dea695c296f954df", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7abc06bd576264cb6b7c8becdbd1a8c0e914463d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7abc06bd576264cb6b7c8becdbd1a8c0e914463d/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=7abc06bd576264cb6b7c8becdbd1a8c0e914463d", "patch": "@@ -217,7 +217,7 @@ fn scan_literal_suffix(ptr: &mut Ptr) {\n \n pub fn classify_literal(text: &str) -> Option<Token> {\n     let tkn = next_token(text);\n-    if tkn.kind.is_literal() || tkn.len.to_usize() != text.len() {\n+    if !tkn.kind.is_literal() || tkn.len.to_usize() != text.len() {\n         return None;\n     }\n "}]}