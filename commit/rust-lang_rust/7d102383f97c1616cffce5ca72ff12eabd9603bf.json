{"sha": "7d102383f97c1616cffce5ca72ff12eabd9603bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMTAyMzgzZjk3YzE2MTZjZmZjZTVjYTcyZmYxMmVhYmQ5NjAzYmY=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2020-11-20T14:25:43Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-01-22T17:15:28Z"}, "message": "Add doc aliases for memory allocations\n\n- Vec::with_capacity / Box::new -> alloc + malloc\n- Box::new_zeroed -> calloc\n- Vec::{reserve,reserve_exact,try_reserve_exact,shrink_to_fit,shrink_to} -> realloc", "tree": {"sha": "e693cfad89c88181d4269c71a2a491ec5dafbe6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e693cfad89c88181d4269c71a2a491ec5dafbe6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d102383f97c1616cffce5ca72ff12eabd9603bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d102383f97c1616cffce5ca72ff12eabd9603bf", "html_url": "https://github.com/rust-lang/rust/commit/7d102383f97c1616cffce5ca72ff12eabd9603bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d102383f97c1616cffce5ca72ff12eabd9603bf/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbc01bb624a960533e049fdb98d0489ff2a8de06", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc01bb624a960533e049fdb98d0489ff2a8de06", "html_url": "https://github.com/rust-lang/rust/commit/bbc01bb624a960533e049fdb98d0489ff2a8de06"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "dacf6f8d830045fb498490f4f8ac19103216ac57", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d102383f97c1616cffce5ca72ff12eabd9603bf/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d102383f97c1616cffce5ca72ff12eabd9603bf/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=7d102383f97c1616cffce5ca72ff12eabd9603bf", "patch": "@@ -178,8 +178,10 @@ impl<T> Box<T> {\n     /// ```\n     /// let five = Box::new(5);\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline(always)]\n+    #[doc(alias = \"alloc\")]\n+    #[doc(alias = \"malloc\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(x: T) -> Self {\n         box x\n     }\n@@ -226,8 +228,9 @@ impl<T> Box<T> {\n     /// ```\n     ///\n     /// [zeroed]: mem::MaybeUninit::zeroed\n-    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n+    #[doc(alias = \"calloc\")]\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {\n         Self::new_zeroed_in(Global)\n     }"}, {"sha": "73f68b88488d482d949990d80d3d2898ca8eee08", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d102383f97c1616cffce5ca72ff12eabd9603bf/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d102383f97c1616cffce5ca72ff12eabd9603bf/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=7d102383f97c1616cffce5ca72ff12eabd9603bf", "patch": "@@ -35,6 +35,8 @@\n ///\n /// [`Vec`]: crate::vec::Vec\n #[cfg(not(test))]\n+#[doc(alias = \"alloc\")]\n+#[doc(alias = \"malloc\")]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(box_syntax, liballoc_internals)]"}, {"sha": "b1f860d6b64a87e6fb37e22d540530ac8864a48e", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d102383f97c1616cffce5ca72ff12eabd9603bf/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d102383f97c1616cffce5ca72ff12eabd9603bf/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=7d102383f97c1616cffce5ca72ff12eabd9603bf", "patch": "@@ -403,6 +403,8 @@ impl String {\n     /// s.push('a');\n     /// ```\n     #[inline]\n+    #[doc(alias = \"alloc\")]\n+    #[doc(alias = \"malloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize) -> String {\n         String { vec: Vec::with_capacity(capacity) }"}, {"sha": "b533ce794207ad1a5a498a1607dee660e7183750", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7d102383f97c1616cffce5ca72ff12eabd9603bf/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d102383f97c1616cffce5ca72ff12eabd9603bf/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=7d102383f97c1616cffce5ca72ff12eabd9603bf", "patch": "@@ -433,6 +433,7 @@ impl<T> Vec<T> {\n     /// assert!(vec.capacity() >= 11);\n     /// ```\n     #[inline]\n+    #[doc(alias = \"malloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize) -> Self {\n         Self::with_capacity_in(capacity, Global)\n@@ -766,6 +767,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// vec.reserve(10);\n     /// assert!(vec.capacity() >= 11);\n     /// ```\n+    #[doc(alias = \"realloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve(&mut self, additional: usize) {\n         self.buf.reserve(self.len, additional);\n@@ -791,6 +793,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// vec.reserve_exact(10);\n     /// assert!(vec.capacity() >= 11);\n     /// ```\n+    #[doc(alias = \"realloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.buf.reserve_exact(self.len, additional);\n@@ -828,6 +831,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n+    #[doc(alias = \"realloc\")]\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.buf.try_reserve(self.len, additional)\n@@ -869,6 +873,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n+    #[doc(alias = \"realloc\")]\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n     pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.buf.try_reserve_exact(self.len, additional)\n@@ -888,6 +893,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// vec.shrink_to_fit();\n     /// assert!(vec.capacity() >= 3);\n     /// ```\n+    #[doc(alias = \"realloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn shrink_to_fit(&mut self) {\n         // The capacity is never less than the length, and there's nothing to do when\n@@ -920,6 +926,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// vec.shrink_to(0);\n     /// assert!(vec.capacity() >= 3);\n     /// ```\n+    #[doc(alias = \"realloc\")]\n     #[unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n         self.buf.shrink_to_fit(cmp::max(self.len, min_capacity));"}]}