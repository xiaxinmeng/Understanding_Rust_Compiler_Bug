{"sha": "51364b5708d83aef3bc6371b052e7644efe55121", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMzY0YjU3MDhkODNhZWYzYmM2MzcxYjA1MmU3NjQ0ZWZlNTUxMjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-09T14:49:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-09T14:50:40Z"}, "message": "Fix #1474: check that block args resolved to bare fns do not make use of upvars", "tree": {"sha": "5c6be46372ff98644b25a865220c09cec4de6478", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c6be46372ff98644b25a865220c09cec4de6478"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51364b5708d83aef3bc6371b052e7644efe55121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51364b5708d83aef3bc6371b052e7644efe55121", "html_url": "https://github.com/rust-lang/rust/commit/51364b5708d83aef3bc6371b052e7644efe55121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51364b5708d83aef3bc6371b052e7644efe55121/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8944a390c64b892b1718b7817a463e4f227f37a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8944a390c64b892b1718b7817a463e4f227f37a8", "html_url": "https://github.com/rust-lang/rust/commit/8944a390c64b892b1718b7817a463e4f227f37a8"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "2e3060b2c2b839c0f5e42811c8ff3411080058b5", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/51364b5708d83aef3bc6371b052e7644efe55121/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51364b5708d83aef3bc6371b052e7644efe55121/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=51364b5708d83aef3bc6371b052e7644efe55121", "patch": "@@ -56,13 +56,14 @@ fn check_crate(tcx: ty::ctxt, method_map: typeck::method_map,\n // Yields the appropriate function to check the kind of closed over\n // variables. `id` is the node_id for some expression that creates the\n // closure.\n-fn with_closure_check_fn(cx: ctx, id: node_id,\n-                         b: block(fn(ctx, ty::t, sp: span))) {\n+fn with_appropriate_checker(cx: ctx, id: node_id,\n+                            b: block(fn(ctx, ty::t, sp: span))) {\n     let fty = ty::node_id_to_monotype(cx.tcx, id);\n     alt ty::ty_fn_proto(cx.tcx, fty) {\n       proto_send. { b(check_send); }\n       proto_shared(_) { b(check_copy); }\n-      proto_block. | proto_bare. { /* no check needed */ }\n+      proto_block. { /* no check needed */ }\n+      proto_bare. { b(check_none); }\n     }\n }\n \n@@ -81,11 +82,11 @@ fn check_fn(fk: visit::fn_kind, decl: fn_decl, body: blk, sp: span,\n     // \"future-proof\" to do it this way, as check_fn_body() is supposed to be\n     // the common flow point for all functions that appear in the AST.\n \n-    with_closure_check_fn(cx, id) { |check_fn|\n+    with_appropriate_checker(cx, id) { |checker|\n         for @{def, span} in *freevars::get_freevars(cx.tcx, id) {\n             let id = ast_util::def_id_of_def(def).node;\n             let ty = ty::node_id_to_type(cx.tcx, id);\n-            check_fn(cx, ty, span);\n+            checker(cx, ty, span);\n         }\n     }\n \n@@ -96,21 +97,21 @@ fn check_fn_cap_clause(cx: ctx,\n                        id: node_id,\n                        cap_clause: capture_clause) {\n     // Check that the variables named in the clause which are not free vars\n-    // (if any) are also legal.  freevars are checked above in check_fn_body.\n+    // (if any) are also legal.  freevars are checked above in check_fn().\n     // This is kind of a degenerate case, as captured variables will generally\n     // appear free in the body.\n     let freevars = freevars::get_freevars(cx.tcx, id);\n     let freevar_ids = vec::map(*freevars, { |freevar|\n         ast_util::def_id_of_def(freevar.def).node\n     });\n     //log(\"freevar_ids\", freevar_ids);\n-    with_closure_check_fn(cx, id) { |check_fn|\n+    with_appropriate_checker(cx, id) { |checker|\n         let check_var = lambda(&&cap_item: @capture_item) {\n             let cap_def = cx.tcx.def_map.get(cap_item.id);\n             let cap_def_id = ast_util::def_id_of_def(cap_def).node;\n             if !vec::member(cap_def_id, freevar_ids) {\n                 let ty = ty::node_id_to_type(cx.tcx, cap_def_id);\n-                check_fn(cx, ty, cap_item.span);\n+                checker(cx, ty, cap_item.span);\n             }\n         };\n         vec::iter(cap_clause.copies, check_var);\n@@ -240,6 +241,10 @@ fn check_send(cx: ctx, ty: ty::t, sp: span) {\n     }\n }\n \n+fn check_none(cx: ctx, _ty: ty::t, sp: span) {\n+    cx.tcx.sess.span_err(sp, \"attempted dynamic environment capture\");\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "4b46d96b590b723629e211afe6771f1cb02b81b3", "filename": "src/test/compile-fail/bad-var-env-capture-in-block-arg.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/51364b5708d83aef3bc6371b052e7644efe55121/src%2Ftest%2Fcompile-fail%2Fbad-var-env-capture-in-block-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51364b5708d83aef3bc6371b052e7644efe55121/src%2Ftest%2Fcompile-fail%2Fbad-var-env-capture-in-block-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-var-env-capture-in-block-arg.rs?ref=51364b5708d83aef3bc6371b052e7644efe55121", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let x = 3;\n+    fn blah(_a: fn()) {}\n+    blah({||\n+        log(debug, x); //! ERROR attempted dynamic environment capture\n+    });\n+}\n\\ No newline at end of file"}]}