{"sha": "05441abd2bc1f0658aafa8b0161146fae34f7206", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NDQxYWJkMmJjMWYwNjU4YWFmYThiMDE2MTE0NmZhZTM0ZjcyMDY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-22T22:39:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-07T10:28:00Z"}, "message": "add closure requirement tests, improve debugging output\n\nThe overall format is now easier to read. Also, There is now graphviz\noutput, as well as a `#[rustc_regions]` annotation that dumps internal\nstate.", "tree": {"sha": "7a40029896dbf7f1e4ce38b2298896318fff8e1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a40029896dbf7f1e4ce38b2298896318fff8e1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05441abd2bc1f0658aafa8b0161146fae34f7206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05441abd2bc1f0658aafa8b0161146fae34f7206", "html_url": "https://github.com/rust-lang/rust/commit/05441abd2bc1f0658aafa8b0161146fae34f7206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05441abd2bc1f0658aafa8b0161146fae34f7206/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab1c1bc6bc18b70818206e7f07ac5133239607ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab1c1bc6bc18b70818206e7f07ac5133239607ff", "html_url": "https://github.com/rust-lang/rust/commit/ab1c1bc6bc18b70818206e7f07ac5133239607ff"}], "stats": {"total": 1779, "additions": 1702, "deletions": 77}, "files": [{"sha": "4ff299efb95558f26dc24f86e7eebf0710be94ab", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 105, "deletions": 6, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -14,6 +14,7 @@ use rustc::infer::InferCtxt;\n use rustc::ty::{self, RegionKind, RegionVid};\n use rustc::util::nodemap::FxHashMap;\n use std::collections::BTreeSet;\n+use std::io;\n use transform::MirSource;\n use transform::type_check;\n use util::liveness::{self, LivenessMode, LivenessResult, LocalSet};\n@@ -22,6 +23,7 @@ use dataflow::MaybeInitializedLvals;\n use dataflow::move_paths::MoveData;\n \n use util as mir_util;\n+use util::pretty::{self, ALIGN};\n use self::mir_util::PassWhere;\n \n mod constraint_generation;\n@@ -117,8 +119,19 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     let closure_region_requirements = regioncx.solve(infcx, &mir, def_id);\n \n     // Dump MIR results into a file, if that is enabled. This let us\n-    // write unit-tests.\n-    dump_mir_results(infcx, liveness, MirSource::item(def_id), &mir, &regioncx);\n+    // write unit-tests, as well as helping with debugging.\n+    dump_mir_results(\n+        infcx,\n+        liveness,\n+        MirSource::item(def_id),\n+        &mir,\n+        &regioncx,\n+        &closure_region_requirements,\n+    );\n+\n+    // We also have a `#[rustc_nll]` annotation that causes us to dump\n+    // information\n+    dump_annotation(infcx, &mir, def_id, &regioncx, &closure_region_requirements);\n \n     (regioncx, closure_region_requirements)\n }\n@@ -134,6 +147,7 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n     source: MirSource,\n     mir: &Mir<'tcx>,\n     regioncx: &RegionInferenceContext,\n+    closure_region_requirements: &Option<ClosureRegionRequirements>,\n ) {\n     if !mir_util::dump_enabled(infcx.tcx, \"nll\", source) {\n         return;\n@@ -168,9 +182,17 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n     mir_util::dump_mir(infcx.tcx, None, \"nll\", &0, source, mir, |pass_where, out| {\n         match pass_where {\n             // Before the CFG, dump out the values for each region variable.\n-            PassWhere::BeforeCFG => for region in regioncx.regions() {\n-                writeln!(out, \"| {:?}: {}\", region, regioncx.region_value_str(region))?;\n-            },\n+            PassWhere::BeforeCFG => {\n+                regioncx.dump_mir(out)?;\n+\n+                if let Some(closure_region_requirements) = closure_region_requirements {\n+                    writeln!(out, \"|\")?;\n+                    writeln!(out, \"| Free Region Constraints\")?;\n+                    for_each_region_constraint(closure_region_requirements, &mut |msg| {\n+                        writeln!(out, \"| {}\", msg)\n+                    })?;\n+                }\n+            }\n \n             // Before each basic block, dump out the values\n             // that are live on entry to the basic block.\n@@ -184,13 +206,90 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n                     &regular_liveness_per_location[&location],\n                     &drop_liveness_per_location[&location],\n                 );\n-                writeln!(out, \"            | Live variables at {:?}: {}\", location, s)?;\n+                writeln!(\n+                    out,\n+                    \"{:ALIGN$} | Live variables on entry to {:?}: {}\",\n+                    \"\",\n+                    location,\n+                    s,\n+                    ALIGN = ALIGN\n+                )?;\n             }\n \n             PassWhere::AfterLocation(_) | PassWhere::AfterCFG => {}\n         }\n         Ok(())\n     });\n+\n+    // Also dump the inference graph constraints as a graphviz file.\n+    let _: io::Result<()> = do catch {\n+        let mut file =\n+            pretty::create_dump_file(infcx.tcx, \"regioncx.dot\", None, \"nll\", &0, source)?;\n+        regioncx.dump_graphviz(&mut file)\n+    };\n+}\n+\n+fn dump_annotation<'a, 'gcx, 'tcx>(\n+    infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n+    mir: &Mir<'tcx>,\n+    mir_def_id: DefId,\n+    regioncx: &RegionInferenceContext,\n+    closure_region_requirements: &Option<ClosureRegionRequirements>,\n+) {\n+    let tcx = infcx.tcx;\n+    let base_def_id = tcx.closure_base_def_id(mir_def_id);\n+    if !tcx.has_attr(base_def_id, \"rustc_regions\") {\n+        return;\n+    }\n+\n+    // When the enclosing function is tagged with `#[rustc_regions]`,\n+    // we dump out various bits of state as warnings. This is useful\n+    // for verifying that the compiler is behaving as expected.  These\n+    // warnings focus on the closure region requirements -- for\n+    // viewing the intraprocedural state, the -Zdump-mir output is\n+    // better.\n+\n+    if let Some(closure_region_requirements) = closure_region_requirements {\n+        let mut err = tcx.sess\n+            .diagnostic()\n+            .span_note_diag(mir.span, \"External requirements\");\n+\n+        regioncx.annotate(&mut err);\n+\n+        err.note(&format!(\n+            \"number of external vids: {}\",\n+            closure_region_requirements.num_external_vids\n+        ));\n+\n+        // Dump the region constraints we are imposing *between* those\n+        // newly created variables.\n+        for_each_region_constraint(closure_region_requirements, &mut |msg| {\n+            err.note(msg);\n+            Ok(())\n+        }).unwrap();\n+\n+        err.emit();\n+    } else {\n+        let mut err = tcx.sess\n+            .diagnostic()\n+            .span_note_diag(mir.span, \"No external requirements\");\n+        regioncx.annotate(&mut err);\n+        err.emit();\n+    }\n+}\n+\n+fn for_each_region_constraint(\n+    closure_region_requirements: &ClosureRegionRequirements,\n+    with_msg: &mut FnMut(&str) -> io::Result<()>,\n+) -> io::Result<()> {\n+    for req in &closure_region_requirements.outlives_requirements {\n+        with_msg(&format!(\n+            \"where {:?}: {:?}\",\n+            req.free_region,\n+            req.outlived_free_region,\n+        ))?;\n+    }\n+    Ok(())\n }\n \n /// Right now, we piggy back on the `ReVar` to store our NLL inference"}, {"sha": "906efaef887c38c54131781c3c726a55c09e98db", "filename": "src/librustc_mir/borrow_check/nll/region_infer/annotation.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! As part of the NLL unit tests, you can annotate a function with\n+//! `#[rustc_regions]`, and we will emit information about the region\n+//! inference context and -- in particular -- the external constraints\n+//! that this region imposes on others. The methods in this file\n+//! handle the part about dumping the inference context internal\n+//! state.\n+\n+use rustc::ty;\n+use rustc_errors::DiagnosticBuilder;\n+use super::RegionInferenceContext;\n+\n+impl<'gcx, 'tcx> RegionInferenceContext<'tcx> {\n+    /// Write out our state into the `.mir` files.\n+    pub(crate) fn annotate(&self, err: &mut DiagnosticBuilder<'_>) {\n+        match self.universal_regions.defining_ty.sty {\n+            ty::TyClosure(def_id, substs) => {\n+                err.note(&format!(\n+                    \"defining type: {:?} with closure substs {:#?}\",\n+                    def_id,\n+                    &substs.substs[..]\n+                ));\n+            }\n+            ty::TyFnDef(def_id, substs) => {\n+                err.note(&format!(\n+                    \"defining type: {:?} with substs {:#?}\",\n+                    def_id,\n+                    &substs[..]\n+                ));\n+            }\n+            _ => {\n+                err.note(&format!(\n+                    \"defining type: {:?}\",\n+                    self.universal_regions.defining_ty\n+                ));\n+            }\n+        }\n+    }\n+}"}, {"sha": "5477308bde948e7904862ce9bc22341015c2cdab", "filename": "src/librustc_mir/borrow_check/nll/region_infer/dump_mir.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,100 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! As part of generating the regions, if you enable `-Zdump-mir=nll`,\n+//! we will generate an annotated copy of the MIR that includes the\n+//! state of region inference. This code handles emitting the region\n+//! context internal state.\n+\n+use std::io::{self, Write};\n+use super::{Constraint, RegionInferenceContext};\n+\n+// Room for \"'_#NNNNr\" before things get misaligned.\n+// Easy enough to fix if this ever doesn't seem like\n+// enough.\n+const REGION_WIDTH: usize = 8;\n+\n+impl<'tcx> RegionInferenceContext<'tcx> {\n+    /// Write out our state into the `.mir` files.\n+    pub(crate) fn dump_mir(&self, out: &mut Write) -> io::Result<()> {\n+        writeln!(out, \"| Free Region Mapping\")?;\n+\n+        for region in self.regions() {\n+            if self.definitions[region].is_universal {\n+                let classification = self.universal_regions.region_classification(region).unwrap();\n+                let outlived_by = self.universal_regions.regions_outlived_by(region);\n+                writeln!(\n+                    out,\n+                    \"| {r:rw$} | {c:cw$} | {ob}\",\n+                    r = format!(\"{:?}\", region),\n+                    rw = REGION_WIDTH,\n+                    c = format!(\"{:?}\", classification),\n+                    cw = 8, // \"External\" at most\n+                    ob = format!(\"{:?}\", outlived_by)\n+                )?;\n+            }\n+        }\n+\n+        writeln!(out, \"|\")?;\n+        writeln!(out, \"| Inferred Region Values\")?;\n+        for region in self.regions() {\n+            writeln!(\n+                out,\n+                \"| {r:rw$} | {v}\",\n+                r = format!(\"{:?}\", region),\n+                rw = REGION_WIDTH,\n+                v = self.region_value_str(region),\n+            )?;\n+        }\n+\n+        writeln!(out, \"|\")?;\n+        writeln!(out, \"| Inference Constraints\")?;\n+        self.for_each_constraint(&mut |msg| writeln!(out, \"| {}\", msg))?;\n+\n+        Ok(())\n+    }\n+\n+    /// Debugging aid: Invokes the `with_msg` callback repeatedly with\n+    /// our internal region constraints.  These are dumped into the\n+    /// -Zdump-mir file so that we can figure out why the region\n+    /// inference resulted in the values that it did when debugging.\n+    fn for_each_constraint(\n+        &self,\n+        with_msg: &mut FnMut(&str) -> io::Result<()>,\n+    ) -> io::Result<()> {\n+        for region in self.definitions.indices() {\n+            let value = self.region_value_str_from_matrix(&self.liveness_constraints, region);\n+            if value != \"{}\" {\n+                with_msg(&format!(\"{:?} live at {}\", region, value))?;\n+            }\n+        }\n+\n+        let mut constraints: Vec<_> = self.constraints.iter().collect();\n+        constraints.sort();\n+        for constraint in &constraints {\n+            let Constraint {\n+                sup,\n+                sub,\n+                point,\n+                span,\n+            } = constraint;\n+            with_msg(&format!(\n+                \"{:?}: {:?} @ {:?} due to {:?}\",\n+                sup,\n+                sub,\n+                point,\n+                span\n+            ))?;\n+        }\n+\n+        Ok(())\n+    }\n+}\n+"}, {"sha": "7923b159d80dc44ffed9f54a29035f7459d3fb53", "filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,71 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! This module provides linkage between RegionInferenceContext and\n+//! libgraphviz traits, specialized to attaching borrowck analysis\n+//! data to rendered labels.\n+\n+use dot::{self, IntoCow};\n+use rustc_data_structures::indexed_vec::Idx;\n+use std::borrow::Cow;\n+use std::io::{self, Write};\n+use super::*;\n+\n+impl<'tcx> RegionInferenceContext<'tcx> {\n+    /// Write out the region constraint graph.\n+    pub(crate) fn dump_graphviz(&self, mut w: &mut Write) -> io::Result<()> {\n+        dot::render(self, &mut w)\n+    }\n+}\n+\n+impl<'this, 'tcx> dot::Labeller<'this> for RegionInferenceContext<'tcx> {\n+    type Node = RegionVid;\n+    type Edge = Constraint;\n+\n+    fn graph_id(&'this self) -> dot::Id<'this> {\n+        dot::Id::new(format!(\"RegionInferenceContext\")).unwrap()\n+    }\n+    fn node_id(&'this self, n: &RegionVid) -> dot::Id<'this> {\n+        dot::Id::new(format!(\"r{}\", n.index())).unwrap()\n+    }\n+    fn node_shape(&'this self, _node: &RegionVid) -> Option<dot::LabelText<'this>> {\n+        Some(dot::LabelText::LabelStr(Cow::Borrowed(\"box\")))\n+    }\n+    fn node_label(&'this self, n: &RegionVid) -> dot::LabelText<'this> {\n+        dot::LabelText::LabelStr(format!(\"{:?}\", n).into_cow())\n+    }\n+    fn edge_label(&'this self, e: &Constraint) -> dot::LabelText<'this> {\n+        dot::LabelText::LabelStr(format!(\"{:?}\", e.point).into_cow())\n+    }\n+}\n+\n+impl<'this, 'tcx> dot::GraphWalk<'this> for RegionInferenceContext<'tcx> {\n+    type Node = RegionVid;\n+    type Edge = Constraint;\n+\n+    fn nodes(&'this self) -> dot::Nodes<'this, RegionVid> {\n+        let vids: Vec<RegionVid> = self.definitions.indices().collect();\n+        vids.into_cow()\n+    }\n+    fn edges(&'this self) -> dot::Edges<'this, Constraint> {\n+        (&self.constraints[..]).into_cow()\n+    }\n+\n+    // Render `a: b` as `a <- b`, indicating the flow\n+    // of data during inference.\n+\n+    fn source(&'this self, edge: &Constraint) -> RegionVid {\n+        edge.sub\n+    }\n+\n+    fn target(&'this self, edge: &Constraint) -> RegionVid {\n+        edge.sup\n+    }\n+}"}, {"sha": "b2e2ccc5d0b720d889fa3598b02d87627d8e66b3", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -25,6 +25,10 @@ use std::collections::BTreeMap;\n use std::fmt;\n use syntax_pos::Span;\n \n+mod annotation;\n+mod dump_mir;\n+mod graphviz;\n+\n pub struct RegionInferenceContext<'tcx> {\n     /// Contains the definition for every region variable.  Region\n     /// variables are identified by their index (`RegionVid`). The"}, {"sha": "22cef25320ed30317b824dbc592bc9c07c8ef8c2", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -717,6 +717,12 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                       is just used for rustc unit tests \\\n                                       and will never be stable\",\n                                      cfg_fn!(rustc_attrs))),\n+    (\"rustc_regions\", Normal, Gated(Stability::Unstable,\n+                                    \"rustc_attrs\",\n+                                    \"the `#[rustc_regions]` attribute \\\n+                                     is just used for rustc unit tests \\\n+                                     and will never be stable\",\n+                                    cfg_fn!(rustc_attrs))),\n     (\"rustc_error\", Whitelisted, Gated(Stability::Unstable,\n                                        \"rustc_attrs\",\n                                        \"the `#[rustc_error]` attribute \\"}, {"sha": "09288cf69ff586064efc7116894ccf6d5257dc89", "filename": "src/test/mir-opt/nll/liveness-call-subtlety.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -28,18 +28,18 @@ fn main() {\n // START rustc.main.nll.0.mir\n //    | Live variables on entry to bb0: []\n //    bb0: {\n-//            | Live variables at bb0[0]: []\n+//            | Live variables on entry to bb0[0]: []\n //        StorageLive(_1);\n-//            | Live variables at bb0[1]: []\n+//            | Live variables on entry to bb0[1]: []\n //        _1 = const <std::boxed::Box<T>>::new(const 22usize) -> [return: bb2, unwind: bb1];\n //    }\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n //    | Live variables on entry to bb2: [_1 (drop)]\n //    bb2: {\n-//            | Live variables at bb2[0]: [_1 (drop)]\n+//            | Live variables on entry to bb2[0]: [_1 (drop)]\n //        StorageLive(_2);\n-//            | Live variables at bb2[1]: [_1 (drop)]\n+//            | Live variables on entry to bb2[1]: [_1 (drop)]\n //        _2 = const can_panic() -> [return: bb3, unwind: bb4];\n //    }\n // END rustc.main.nll.0.mir"}, {"sha": "b060222a95f1701ea42b1c9a5c7ec44b91db1556", "filename": "src/test/mir-opt/nll/liveness-drop-intra-block.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -27,15 +27,15 @@ fn main() {\n // START rustc.main.nll.0.mir\n //    | Live variables on entry to bb2: []\n //    bb2: {\n-//            | Live variables at bb2[0]: []\n+//            | Live variables on entry to bb2[0]: []\n //        _1 = const 55usize;\n-//            | Live variables at bb2[1]: [_1]\n+//            | Live variables on entry to bb2[1]: [_1]\n //        StorageLive(_3);\n-//            | Live variables at bb2[2]: [_1]\n+//            | Live variables on entry to bb2[2]: [_1]\n //        StorageLive(_4);\n-//            | Live variables at bb2[3]: [_1]\n+//            | Live variables on entry to bb2[3]: [_1]\n //        _4 = _1;\n-//            | Live variables at bb2[4]: [_4]\n+//            | Live variables on entry to bb2[4]: [_4]\n //        _3 = const use_x(move _4) -> [return: bb3, unwind: bb1];\n //    }\n // END rustc.main.nll.0.mir"}, {"sha": "671f5e5292aa439029b6e98221ed7e51bb9da502", "filename": "src/test/mir-opt/nll/liveness-interblock.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -31,18 +31,18 @@ fn main() {\n // START rustc.main.nll.0.mir\n //     | Live variables on entry to bb3: [_1]\n //     bb3: {\n-//             | Live variables at bb3[0]: [_1]\n+//             | Live variables on entry to bb3[0]: [_1]\n //         StorageLive(_4);\n-//             | Live variables at bb3[1]: [_1]\n+//             | Live variables on entry to bb3[1]: [_1]\n //         _4 = _1;\n-//             | Live variables at bb3[2]: [_4]\n+//             | Live variables on entry to bb3[2]: [_4]\n //         _3 = const make_live(move _4) -> [return: bb5, unwind: bb1];\n //     }\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n //     | Live variables on entry to bb4: []\n //     bb4: {\n-//             | Live variables at bb4[0]: []\n+//             | Live variables on entry to bb4[0]: []\n //         _5 = const make_dead() -> [return: bb6, unwind: bb1];\n //     }\n // END rustc.main.nll.0.mir"}, {"sha": "0c42585a528e0c3d4c4f927109af14aeb9c2e5f4", "filename": "src/test/mir-opt/nll/named-lifetimes-basic.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -26,9 +26,18 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.use_x.nll.0.mir\n-// | '_#0r: {bb0[0], bb0[1], '_#0r}\n-// | '_#1r: {bb0[0], bb0[1], '_#1r}\n-// | '_#2r: {bb0[0], bb0[1], '_#2r}\n-// | '_#3r: {bb0[0], bb0[1], '_#3r}\n+// | Free Region Mapping\n+// | '_#0r    | Global   | ['_#2r, '_#1r, '_#0r, '_#3r]\n+// | '_#1r    | External | ['_#1r]\n+// | '_#2r    | External | ['_#2r, '_#1r]\n+// | '_#3r    | Local    | ['_#3r]\n+// |\n+// | Inferred Region Values\n+// | '_#0r    | {bb0[0], bb0[1], '_#0r}\n+// | '_#1r    | {bb0[0], bb0[1], '_#1r}\n+// | '_#2r    | {bb0[0], bb0[1], '_#2r}\n+// | '_#3r    | {bb0[0], bb0[1], '_#3r}\n+// |\n+// ...\n // fn use_x(_1: &'_#1r mut i32, _2: &'_#2r u32, _3: &'_#1r u32, _4: &'_#3r u32) -> bool {\n // END rustc.use_x.nll.0.mir"}, {"sha": "d203472f20c737d5bb29a556a32abf17c7b3b41b", "filename": "src/test/mir-opt/nll/reborrow-basic.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -28,11 +28,10 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#6r: {bb0[6], bb0[7], bb0[8], bb0[9], bb0[10], bb0[11], bb0[12], bb0[13], bb0[14]}\n+// | '_#6r    | {bb0[6], bb0[7], bb0[8], bb0[9], bb0[10], bb0[11], bb0[12], bb0[13], bb0[14]}\n+// ...\n+// | '_#8r    | {bb0[11], bb0[12], bb0[13], bb0[14]}\n // ...\n-// | '_#8r: {bb0[11], bb0[12], bb0[13], bb0[14]}\n-// END rustc.main.nll.0.mir\n-// START rustc.main.nll.0.mir\n // let _2: &'_#6r mut i32;\n // ...\n // let _4: &'_#8r mut i32;"}, {"sha": "c04cedbc04b4d95e1de5163bb4e1138c0489ee8e", "filename": "src/test/mir-opt/nll/region-liveness-basic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -31,26 +31,26 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#1r: {bb2[0], bb2[1], bb3[0], bb3[1]}\n-// | '_#2r: {bb2[1], bb3[0], bb3[1]}\n+// | '_#1r    | {bb2[0], bb2[1], bb3[0], bb3[1]}\n+// | '_#2r    | {bb2[1], bb3[0], bb3[1]}\n // ...\n //             let _2: &'_#2r usize;\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n //    bb2: {\n-//            | Live variables at bb2[0]: [_1, _3]\n+//            | Live variables on entry to bb2[0]: [_1, _3]\n //        _2 = &'_#1r _1[_3];\n-//            | Live variables at bb2[1]: [_2]\n+//            | Live variables on entry to bb2[1]: [_2]\n //        switchInt(const true) -> [0u8: bb4, otherwise: bb3];\n //    }\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n //    bb3: {\n-//            | Live variables at bb3[0]: [_2]\n+//            | Live variables on entry to bb3[0]: [_2]\n //        StorageLive(_7);\n-//            | Live variables at bb3[1]: [_2]\n+//            | Live variables on entry to bb3[1]: [_2]\n //        _7 = (*_2);\n-//            | Live variables at bb3[2]: [_7]\n+//            | Live variables on entry to bb3[2]: [_7]\n //        _6 = const use_x(move _7) -> [return: bb5, unwind: bb1];\n //    }\n // END rustc.main.nll.0.mir"}, {"sha": "e2ad49a443625f57c6b88e7c77622b1c7040bdf6", "filename": "src/test/mir-opt/nll/region-liveness-drop-may-dangle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-may-dangle.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -44,5 +44,5 @@ unsafe impl<#[may_dangle] T> Drop for Wrap<T> {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#5r: {bb2[3], bb2[4], bb2[5], bb3[0], bb3[1]}\n+// | '_#5r    | {bb2[3], bb2[4], bb2[5], bb3[0], bb3[1]}\n // END rustc.main.nll.0.mir"}, {"sha": "e0272a51d03d996459411d05db1d4ece24598c81", "filename": "src/test/mir-opt/nll/region-liveness-drop-no-may-dangle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-no-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-no-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-no-may-dangle.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -46,5 +46,5 @@ impl<T> Drop for Wrap<T> {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#5r: {bb2[3], bb2[4], bb2[5], bb3[0], bb3[1], bb3[2], bb4[0], bb5[0], bb5[1], bb5[2], bb6[0], bb7[0], bb7[1], bb8[0]}\n+// | '_#5r    | {bb2[3], bb2[4], bb2[5], bb3[0], bb3[1], bb3[2], bb4[0], bb5[0], bb5[1], bb5[2], bb6[0], bb7[0], bb7[1], bb8[0]}\n // END rustc.main.nll.0.mir"}, {"sha": "8aa0eb1a3a90eb0f15e403a8f9233f26e01728c5", "filename": "src/test/mir-opt/nll/region-liveness-two-disjoint-uses.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -36,10 +36,10 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#1r: {bb2[0], bb2[1], bb3[0], bb3[1]}\n+// | '_#1r    | {bb2[0], bb2[1], bb3[0], bb3[1]}\n // ...\n-// | '_#3r: {bb8[1], bb8[2], bb8[3], bb8[4]}\n-// | '_#4r: {bb2[1], bb3[0], bb3[1], bb8[2], bb8[3], bb8[4]}\n+// | '_#3r    | {bb8[1], bb8[2], bb8[3], bb8[4]}\n+// | '_#4r    | {bb2[1], bb3[0], bb3[1], bb8[2], bb8[3], bb8[4]}\n // ...\n // let mut _2: &'_#4r usize;\n // ..."}, {"sha": "2bc165bd3c4a3a6d6d47d602538fd2b507602c21", "filename": "src/test/mir-opt/nll/region-subtyping-basic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -32,9 +32,9 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#1r: {bb2[0], bb2[1], bb2[2], bb2[3], bb2[4], bb2[5], bb2[6], bb3[0], bb3[1]}\n-// | '_#2r: {bb2[1], bb2[2], bb2[3], bb2[4], bb2[5], bb2[6], bb3[0], bb3[1]}\n-// | '_#3r: {bb2[5], bb2[6], bb3[0], bb3[1]}\n+// | '_#1r    | {bb2[0], bb2[1], bb2[2], bb2[3], bb2[4], bb2[5], bb2[6], bb3[0], bb3[1]}\n+// | '_#2r    | {bb2[1], bb2[2], bb2[3], bb2[4], bb2[5], bb2[6], bb3[0], bb3[1]}\n+// | '_#3r    | {bb2[5], bb2[6], bb3[0], bb3[1]}\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n // let _2: &'_#2r usize;"}, {"sha": "00a0c94d2218ab9dfcf34079f04432b574f370d2", "filename": "src/test/ui/nll/capture-ref-in-struct.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Znll -Zborrowck=mir\n+\n+// Test that a structure which tries to store a pointer to `y` into\n+// `p` (indirectly) fails to compile.\n+\n+#![feature(rustc_attrs)]\n+\n+struct SomeStruct<'a, 'b: 'a> {\n+    p: &'a mut &'b i32,\n+    y: &'b i32,\n+}\n+\n+fn test() {\n+    let x = 44;\n+    let mut p = &x;\n+\n+    {\n+        let y = 22;\n+\n+        let closure = SomeStruct {\n+            p: &mut p,\n+            y: &y,\n+        };\n+\n+        closure.invoke();\n+    }\n+    //~^ ERROR borrowed value does not live long enough [E0597]\n+\n+    deref(p);\n+}\n+\n+impl<'a, 'b> SomeStruct<'a, 'b> {\n+    fn invoke(self) {\n+        *self.p = self.y;\n+    }\n+}\n+\n+fn deref(_: &i32) { }\n+\n+fn main() { }"}, {"sha": "f10e52e05f19ddb3a042cb83d32b466236cabcfb", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,13 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/capture-ref-in-struct.rs:36:6\n+   |\n+28 |         let y = 22;\n+   |             - temporary value created here\n+...\n+36 |     }\n+   |      ^ temporary value dropped here while still borrowed\n+   |\n+   = note: consider using a `let` binding to increase its lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "dae8c84224015b6970ca2777afe5c35ce91d1d8e", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test closure that:\n+//\n+// - takes an argument `y`\n+// - stores `y` into another, longer-lived spot\n+//\n+// *but* the signature of the closure doesn't indicate that `y` lives\n+// long enough for that. The closure reports the error (and hence we\n+// see it before the closure's \"external requirements\" report).\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_regions]\n+fn test() {\n+    let x = 44;\n+    let mut p = &x;\n+\n+    {\n+        let y = 22;\n+        let mut closure = expect_sig(|p, y| *p = y);\n+        //~^ ERROR free region `'_#4r` does not outlive free region `'_#3r`\n+        //~| WARNING not reporting region error due to -Znll\n+        closure(&mut p, &y);\n+    }\n+\n+    deref(p);\n+}\n+\n+fn expect_sig<F>(f: F) -> F\n+    where F: FnMut(&mut &i32, &i32)\n+{\n+    f\n+}\n+\n+fn deref(_p: &i32) { }\n+\n+fn main() { }"}, {"sha": "a0587c797df62d6a3e32f869e6ece81456142b57", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,40 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/escape-argument-callee.rs:31:50\n+   |\n+31 |         let mut closure = expect_sig(|p, y| *p = y);\n+   |                                                  ^\n+\n+error: free region `'_#4r` does not outlive free region `'_#3r`\n+  --> $DIR/escape-argument-callee.rs:31:45\n+   |\n+31 |         let mut closure = expect_sig(|p, y| *p = y);\n+   |                                             ^^^^^^\n+\n+note: External requirements\n+  --> $DIR/escape-argument-callee.rs:31:38\n+   |\n+31 |         let mut closure = expect_sig(|p, y| *p = y);\n+   |                                      ^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:9 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]) with closure substs [\n+               i16,\n+               for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r(7666))) mut &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(7667))) i32, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0(7668))) i32))\n+           ]\n+   = note: number of external vids: 1\n+\n+note: No external requirements\n+  --> $DIR/escape-argument-callee.rs:25:1\n+   |\n+25 | / fn test() {\n+26 | |     let x = 44;\n+27 | |     let mut p = &x;\n+28 | |\n+...  |\n+37 | |     deref(p);\n+38 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:3 ~ escape_argument_callee[317d]::test[0]) with substs []\n+\n+error: aborting due to previous error\n+"}, {"sha": "da6d60e00eadbfc233c3086a2ab1c035b966303d", "filename": "src/test/ui/nll/closure-requirements/escape-argument.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test closure that:\n+//\n+// - takes an argument `y`\n+// - stores `y` into another, longer-lived spot\n+//\n+// but is invoked with a spot that doesn't live long\n+// enough to store `y`.\n+//\n+// The error is reported in the caller: invoking the closure links the\n+// lifetime of the borrow that is given as `y` and forces it to live\n+// too long.\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_regions]\n+fn test() {\n+    let x = 44;\n+    let mut p = &x;\n+\n+    {\n+        let y = 22;\n+        let mut closure = expect_sig(|p, y| *p = y);\n+        closure(&mut p, &y);\n+    }\n+    //~^ ERROR borrowed value does not live long enough [E0597]\n+\n+    deref(p);\n+}\n+\n+fn expect_sig<F>(f: F) -> F\n+    where F: for<'a, 'b> FnMut(&'a mut &'b i32, &'b i32)\n+{\n+    f\n+}\n+\n+fn deref(_p: &i32) { }\n+\n+fn main() { }"}, {"sha": "653c4612462471f370050cd9a39757f92dcd7bbb", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,39 @@\n+note: External requirements\n+  --> $DIR/escape-argument.rs:34:38\n+   |\n+34 |         let mut closure = expect_sig(|p, y| *p = y);\n+   |                                      ^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:9 ~ escape_argument[317d]::test[0]::{{closure}}[0]) with closure substs [\n+               i16,\n+               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r(8634))) mut &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(8635))) i32, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(8635))) i32))\n+           ]\n+   = note: number of external vids: 1\n+\n+note: No external requirements\n+  --> $DIR/escape-argument.rs:28:1\n+   |\n+28 | / fn test() {\n+29 | |     let x = 44;\n+30 | |     let mut p = &x;\n+31 | |\n+...  |\n+39 | |     deref(p);\n+40 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:3 ~ escape_argument[317d]::test[0]) with substs []\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/escape-argument.rs:36:6\n+   |\n+33 |         let y = 22;\n+   |             - temporary value created here\n+...\n+36 |     }\n+   |      ^ temporary value dropped here while still borrowed\n+   |\n+   = note: consider using a `let` binding to increase its lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "6a94f244ea68e6d78997d1012792b7ec7aa7978b", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// As in via-upvar, test closure that:\n+//\n+// - captures a variable `y`\n+// - stores reference to `y` into another, longer-lived spot\n+//\n+// except that the closure does so via a second closure.\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_regions]\n+fn test() {\n+    let x = 44;\n+    let mut p = &x;\n+\n+    {\n+        let y = 22;\n+\n+        let mut closure = || {\n+            let mut closure1 = || p = &y;\n+            closure1();\n+        };\n+\n+        closure();\n+    } //~ ERROR borrowed value does not live long enough\n+\n+    deref(p);\n+}\n+\n+fn deref(_p: &i32) { }\n+\n+fn main() { }"}, {"sha": "201590f01f38ee0dccc3c23ba0254182b0451d16", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,61 @@\n+note: External requirements\n+  --> $DIR/escape-upvar-nested.rs:31:32\n+   |\n+31 |             let mut closure1 = || p = &y;\n+   |                                ^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:10 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]::{{closure}}[0]) with closure substs [\n+               i16,\n+               extern \"rust-call\" fn(()),\n+               &'_#1r mut &'_#2r i32,\n+               &'_#3r i32\n+           ]\n+   = note: number of external vids: 4\n+   = note: where '_#3r: '_#2r\n+\n+note: External requirements\n+  --> $DIR/escape-upvar-nested.rs:30:27\n+   |\n+30 |           let mut closure = || {\n+   |  ___________________________^\n+31 | |             let mut closure1 = || p = &y;\n+32 | |             closure1();\n+33 | |         };\n+   | |_________^\n+   |\n+   = note: defining type: DefId(0/1:9 ~ escape_upvar_nested[317d]::test[0]::{{closure}}[0]) with closure substs [\n+               i16,\n+               extern \"rust-call\" fn(()),\n+               &'_#1r mut &'_#2r i32,\n+               &'_#3r i32\n+           ]\n+   = note: number of external vids: 4\n+   = note: where '_#3r: '_#2r\n+\n+note: No external requirements\n+  --> $DIR/escape-upvar-nested.rs:23:1\n+   |\n+23 | / fn test() {\n+24 | |     let x = 44;\n+25 | |     let mut p = &x;\n+26 | |\n+...  |\n+38 | |     deref(p);\n+39 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:3 ~ escape_upvar_nested[317d]::test[0]) with substs []\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/escape-upvar-nested.rs:36:6\n+   |\n+28 |         let y = 22;\n+   |             - temporary value created here\n+...\n+36 |     } //~ ERROR borrowed value does not live long enough\n+   |      ^ temporary value dropped here while still borrowed\n+   |\n+   = note: consider using a `let` binding to increase its lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "5d14501cdbba71abbcc1be889e6e703e4b912c64", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test closure that:\n+// - captures a variable `y`\n+// - stores reference to `y` into another, longer-lived spot\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_regions]\n+fn test() {\n+    let x = 44;\n+    let mut p = &x;\n+\n+    {\n+        let y = 22;\n+        let mut closure = || p = &y;\n+        closure();\n+    } //~ ERROR borrowed value does not live long enough\n+\n+    deref(p);\n+}\n+\n+fn deref(_p: &i32) { }\n+\n+fn main() { }"}, {"sha": "0a182fbc278e805133dc12caa496021c71dd5a4a", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,42 @@\n+note: External requirements\n+  --> $DIR/escape-upvar-ref.rs:26:27\n+   |\n+26 |         let mut closure = || p = &y;\n+   |                           ^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:9 ~ escape_upvar_ref[317d]::test[0]::{{closure}}[0]) with closure substs [\n+               i16,\n+               extern \"rust-call\" fn(()),\n+               &'_#1r mut &'_#2r i32,\n+               &'_#3r i32\n+           ]\n+   = note: number of external vids: 4\n+   = note: where '_#3r: '_#2r\n+\n+note: No external requirements\n+  --> $DIR/escape-upvar-ref.rs:20:1\n+   |\n+20 | / fn test() {\n+21 | |     let x = 44;\n+22 | |     let mut p = &x;\n+23 | |\n+...  |\n+30 | |     deref(p);\n+31 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:3 ~ escape_upvar_ref[317d]::test[0]) with substs []\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/escape-upvar-ref.rs:28:6\n+   |\n+25 |         let y = 22;\n+   |             - temporary value created here\n+...\n+28 |     } //~ ERROR borrowed value does not live long enough\n+   |      ^ temporary value dropped here while still borrowed\n+   |\n+   = note: consider using a `let` binding to increase its lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "c2f071cc029e6898731aacf62844533ea28d3ab9", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,63 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test where we fail to approximate due to demanding a postdom\n+// relationship between our upper bounds.\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+\n+#![feature(rustc_attrs)]\n+\n+use std::cell::Cell;\n+\n+// Callee knows that:\n+//\n+// 'x: 'a\n+// 'x: 'b\n+// 'c: 'y\n+//\n+// we have to prove that `'x: 'y`. We currently can only approximate\n+// via a postdominator -- hence we fail to choose between `'a` and\n+// `'b` here and report the error in the closure.\n+fn establish_relationships<'a, 'b, 'c, F>(\n+    _cell_a: Cell<&'a u32>,\n+    _cell_b: Cell<&'b u32>,\n+    _cell_c: Cell<&'c u32>,\n+    _closure: F,\n+) where\n+    F: for<'x, 'y> FnMut(\n+        Cell<&'a &'x u32>, // shows that 'x: 'a\n+        Cell<&'b &'x u32>, // shows that 'x: 'b\n+        Cell<&'y &'c u32>, // shows that 'c: 'y\n+        Cell<&'x u32>,\n+        Cell<&'y u32>,\n+    ),\n+{\n+}\n+\n+fn demand_y<'x, 'y>(_cell_x: Cell<&'x u32>, _cell_y: Cell<&'y u32>, _y: &'y u32) {}\n+\n+#[rustc_regions]\n+fn supply<'a, 'b, 'c>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>, cell_c: Cell<&'c u32>) {\n+    establish_relationships(\n+        cell_a,\n+        cell_b,\n+        cell_c,\n+        |_outlives1, _outlives2, _outlives3, x, y| {\n+            // Only works if 'x: 'y:\n+            let p = x.get();\n+            //~^ WARN not reporting region error due to -Znll\n+            demand_y(x, y, p)\n+            //~^ ERROR free region `'_#5r` does not outlive free region `'_#6r`\n+        },\n+    );\n+}\n+\n+fn main() {}"}, {"sha": "c52701d0bf8680d496710bdb189d7b1a12a465df", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,46 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/propagate-approximated-fail-no-postdom.rs:55:21\n+   |\n+55 |             let p = x.get();\n+   |                     ^^^^^^^\n+\n+error: free region `'_#5r` does not outlive free region `'_#6r`\n+  --> $DIR/propagate-approximated-fail-no-postdom.rs:57:25\n+   |\n+57 |             demand_y(x, y, p)\n+   |                         ^\n+\n+note: External requirements\n+  --> $DIR/propagate-approximated-fail-no-postdom.rs:53:9\n+   |\n+53 | /         |_outlives1, _outlives2, _outlives3, x, y| {\n+54 | |             // Only works if 'x: 'y:\n+55 | |             let p = x.get();\n+56 | |             //~^ WARN not reporting region error due to -Znll\n+57 | |             demand_y(x, y, p)\n+58 | |             //~^ ERROR free region `'_#5r` does not outlive free region `'_#6r`\n+59 | |         },\n+   | |_________^\n+   |\n+   = note: defining type: DefId(0/1:20 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+               i16,\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r(9523))) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r(9523))) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(9524))) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r(9523))) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(9524))) u32>))\n+           ]\n+   = note: number of external vids: 4\n+\n+note: No external requirements\n+  --> $DIR/propagate-approximated-fail-no-postdom.rs:48:1\n+   |\n+48 | / fn supply<'a, 'b, 'c>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>, cell_c: Cell<&'c u32>) {\n+49 | |     establish_relationships(\n+50 | |         cell_a,\n+51 | |         cell_b,\n+...  |\n+60 | |     );\n+61 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:6 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]) with substs []\n+\n+error: aborting due to previous error\n+"}, {"sha": "a18b618a05345e236a80841fa8a4fcf57c6769ee", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Rather convoluted setup where we infer a relationship between two\n+// free regions in the closure signature (`'a` and `'b`) on the basis\n+// of a relationship between two bound regions (`'x` and `'y`).\n+//\n+// The idea is that, thanks to invoking `demand_y`, `'x: 'y` must\n+// hold, where `'x` and `'y` are bound regions. The closure can't\n+// prove that directly, and because `'x` and `'y` are bound it cannot\n+// ask the caller to prove it either. But it has bounds on `'x` and\n+// `'y` in terms of `'a` and `'b`, and it can propagate a relationship\n+// between `'a` and `'b` to the caller.\n+//\n+// Note: the use of `Cell` here is to introduce invariance. One less\n+// variable.\n+//\n+// FIXME: The `supply` function *ought* to generate an error, but it\n+// currently does not. This is I believe a shortcoming of the MIR type\n+// checker: the closure inference is expressing the correct\n+// requirement, as you can see from the `#[rustc_regions]` output.\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+\n+#![feature(rustc_attrs)]\n+\n+use std::cell::Cell;\n+\n+// Callee knows that:\n+//\n+// 'x: 'a\n+// 'b: 'y\n+//\n+// so if we are going to ensure that `'x: 'y`, then `'a: 'b` must\n+// hold.\n+fn establish_relationships<'a, 'b, F>(_cell_a: &Cell<&'a u32>, _cell_b: &Cell<&'b u32>, _closure: F)\n+where\n+    F: for<'x, 'y> FnMut(\n+        &Cell<&'a &'x u32>, // shows that 'x: 'a\n+        &Cell<&'y &'b u32>, // shows that 'b: 'y\n+        &Cell<&'x u32>,\n+        &Cell<&'y u32>,\n+    ),\n+{\n+}\n+\n+fn demand_y<'x, 'y>(_cell_x: &Cell<&'x u32>, _cell_y: &Cell<&'y u32>, _y: &'y u32) {}\n+\n+#[rustc_regions]\n+fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+    establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+        // Only works if 'x: 'y:\n+        demand_y(x, y, x.get())\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "6cdbd87a833f0539c2ce9f4464876ae035241439", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,36 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/propagate-approximated-ref.rs:60:9\n+   |\n+60 |         demand_y(x, y, x.get())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: External requirements\n+  --> $DIR/propagate-approximated-ref.rs:58:47\n+   |\n+58 |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |  _______________________________________________^\n+59 | |         // Only works if 'x: 'y:\n+60 | |         demand_y(x, y, x.get())\n+61 | |     });\n+   | |_____^\n+   |\n+   = note: defining type: DefId(0/1:18 ~ propagate_approximated_ref[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+               i16,\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r(7696))) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(7697))) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0(7698))) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1(7699))) &'_#2r u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't2(9524))) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(7697))) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't3(9525))) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1(7699))) u32>))\n+           ]\n+   = note: number of external vids: 3\n+   = note: where '_#1r: '_#2r\n+\n+note: No external requirements\n+  --> $DIR/propagate-approximated-ref.rs:57:1\n+   |\n+57 | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+58 | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+59 | |         // Only works if 'x: 'y:\n+60 | |         demand_y(x, y, x.get())\n+61 | |     });\n+62 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:6 ~ propagate_approximated_ref[317d]::supply[0]) with substs []\n+"}, {"sha": "8a6384d95ca0d3339737dca7054576fe46305daa", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-to-empty.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a case where we fail to approximate one of the regions and\n+// hence report an error while checking the closure.\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+\n+#![feature(rustc_attrs)]\n+\n+use std::cell::Cell;\n+\n+// Callee knows that:\n+//\n+// 'b: 'y\n+//\n+// but this doesn't really help us in proving that `'x: 'y`, so closure gets an error.\n+fn establish_relationships<'a, 'b, F>(_cell_a: &Cell<&'a u32>, _cell_b: &Cell<&'b u32>, _closure: F)\n+where\n+    F: for<'x, 'y> FnMut(\n+        &Cell<&'y &'b u32>, // shows that 'b: 'y\n+        &Cell<&'x u32>,\n+        &Cell<&'y u32>,\n+    ),\n+{\n+}\n+\n+fn demand_y<'x, 'y>(_cell_x: &Cell<&'x u32>, _cell_y: &Cell<&'y u32>, _y: &'y u32) {}\n+\n+#[rustc_regions]\n+fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+    establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+        // Only works if 'x: 'y:\n+        demand_y(x, y, x.get())\n+        //~^ WARN not reporting region error due to -Znll\n+        //~| ERROR free region `'_#6r` does not outlive free region `'_#4r`\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "8d62e49adc58c8292797923d1802dfb2fe4ecf9e", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-to-empty.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-empty.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,46 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/propagate-approximated-to-empty.rs:41:9\n+   |\n+41 |         demand_y(x, y, x.get())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: free region `'_#6r` does not outlive free region `'_#4r`\n+  --> $DIR/propagate-approximated-to-empty.rs:41:21\n+   |\n+41 |         demand_y(x, y, x.get())\n+   |                     ^\n+\n+note: External requirements\n+  --> $DIR/propagate-approximated-to-empty.rs:39:47\n+   |\n+39 |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+   |  _______________________________________________^\n+40 | |         // Only works if 'x: 'y:\n+41 | |         demand_y(x, y, x.get())\n+42 | |         //~^ WARN not reporting region error due to -Znll\n+43 | |         //~| ERROR free region `'_#6r` does not outlive free region `'_#4r`\n+44 | |     });\n+   | |_____^\n+   |\n+   = note: defining type: DefId(0/1:18 ~ propagate_approximated_to_empty[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+               i16,\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r(7695))) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(7696))) &'_#1r u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0(7697))) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1(9522))) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't2(9523))) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(7696))) u32>))\n+           ]\n+   = note: number of external vids: 2\n+\n+note: No external requirements\n+  --> $DIR/propagate-approximated-to-empty.rs:38:1\n+   |\n+38 | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+39 | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+40 | |         // Only works if 'x: 'y:\n+41 | |         demand_y(x, y, x.get())\n+...  |\n+44 | |     });\n+45 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:6 ~ propagate_approximated_to_empty[317d]::supply[0]) with substs []\n+\n+error: aborting due to previous error\n+"}, {"sha": "5e669b3d3c1c1e38e2184e1eb854e6133a97f432", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-to-static.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-static.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a case where we are forced to approximate one end-point with\n+// `'static`. Note that `'static` shows up in the stderr output as `'0`.\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+\n+#![feature(rustc_attrs)]\n+\n+use std::cell::Cell;\n+\n+// Callee knows that:\n+//\n+// 'x: 'a\n+//\n+// so the only way we can ensure that `'x: 'y` is to show that\n+// `'a: 'static`.\n+fn establish_relationships<'a, 'b, F>(_cell_a: &Cell<&'a u32>, _cell_b: &Cell<&'b u32>, _closure: F)\n+where\n+    F: for<'x, 'y> FnMut(\n+        &Cell<&'a &'x u32>, // shows that 'x: 'a\n+        &Cell<&'x u32>,\n+        &Cell<&'y u32>,\n+    ),\n+{\n+}\n+\n+fn demand_y<'x, 'y>(_cell_x: &Cell<&'x u32>, _cell_y: &Cell<&'y u32>, _y: &'y u32) {}\n+\n+#[rustc_regions]\n+fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+    establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+        // Only works if 'x: 'y:\n+        demand_y(x, y, x.get())\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "d40643305e66ccf764797305ba4bca627f233cb4", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-to-static.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-to-static.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,36 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/propagate-approximated-to-static.rs:42:9\n+   |\n+42 |         demand_y(x, y, x.get())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: External requirements\n+  --> $DIR/propagate-approximated-to-static.rs:40:47\n+   |\n+40 |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+   |  _______________________________________________^\n+41 | |         // Only works if 'x: 'y:\n+42 | |         demand_y(x, y, x.get())\n+43 | |     });\n+   | |_____^\n+   |\n+   = note: defining type: DefId(0/1:18 ~ propagate_approximated_to_static[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+               i16,\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r(7695))) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(7696))) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0(7697))) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(7696))) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1(9522))) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't2(9523))) u32>))\n+           ]\n+   = note: number of external vids: 2\n+   = note: where '_#1r: '_#0r\n+\n+note: No external requirements\n+  --> $DIR/propagate-approximated-to-static.rs:39:1\n+   |\n+39 | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+40 | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+41 | |         // Only works if 'x: 'y:\n+42 | |         demand_y(x, y, x.get())\n+43 | |     });\n+44 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:6 ~ propagate_approximated_to_static[317d]::supply[0]) with substs []\n+"}, {"sha": "48d446b00af8bb7c045fe35e4bbf25dea58bdd35", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// A simpler variant of `outlives-from-argument` where cells are\n+// passed by value.\n+//\n+// This is simpler because there are no \"extraneous\" region\n+// relationships. In the 'main' variant, there are a number of\n+// anonymous regions as well.\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+\n+#![feature(rustc_attrs)]\n+\n+use std::cell::Cell;\n+\n+// Callee knows that:\n+//\n+// 'x: 'a\n+// 'b: 'y\n+//\n+// so if we are going to ensure that `'x: 'y`, then `'a: 'b` must\n+// hold.\n+fn establish_relationships<'a, 'b, F>(_cell_a: Cell<&'a u32>, _cell_b: Cell<&'b u32>, _closure: F)\n+where\n+    F: for<'x, 'y> FnMut(\n+        Cell<&'a &'x u32>, // shows that 'x: 'a\n+        Cell<&'y &'b u32>, // shows that 'b: 'y\n+        Cell<&'x u32>,\n+        Cell<&'y u32>,\n+    ),\n+{\n+}\n+\n+fn demand_y<'x, 'y>(_outlives1: Cell<&&'x u32>, _outlives2: Cell<&'y &u32>, _y: &'y u32) {}\n+\n+#[rustc_regions]\n+fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+    establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n+        // Only works if 'x: 'y:\n+        demand_y(outlives1, outlives2, x.get())\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "77514543e15f627223c63bedec6d78df85ba37bb", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,36 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/propagate-approximated-val.rs:48:9\n+   |\n+48 |         demand_y(outlives1, outlives2, x.get())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: External requirements\n+  --> $DIR/propagate-approximated-val.rs:46:45\n+   |\n+46 |       establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n+   |  _____________________________________________^\n+47 | |         // Only works if 'x: 'y:\n+48 | |         demand_y(outlives1, outlives2, x.get())\n+49 | |     });\n+   | |_____^\n+   |\n+   = note: defining type: DefId(0/1:18 ~ propagate_approximated_val[317d]::test[0]::{{closure}}[0]) with closure substs [\n+               i16,\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r(9519))) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(9520))) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r(9519))) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(9520))) u32>))\n+           ]\n+   = note: number of external vids: 3\n+   = note: where '_#1r: '_#2r\n+\n+note: No external requirements\n+  --> $DIR/propagate-approximated-val.rs:45:1\n+   |\n+45 | / fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+46 | |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n+47 | |         // Only works if 'x: 'y:\n+48 | |         demand_y(outlives1, outlives2, x.get())\n+49 | |     });\n+50 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:6 ~ propagate_approximated_val[317d]::test[0]) with substs []\n+"}, {"sha": "a28b5f4c0f949139e039f78bea8e0bd5fc07207d", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test where we might in theory be able to see that the relationship\n+// between two bound regions is true within closure and hence have no\n+// need to propagate; but in fact we do because identity of free\n+// regions is erased.\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+\n+#![feature(rustc_attrs)]\n+\n+use std::cell::Cell;\n+\n+// In theory, callee knows that:\n+//\n+// 'x: 'a\n+// 'a: 'y\n+//\n+// and hence could satisfy that `'x: 'y` locally. However, in our\n+// checking, we ignore the precise free regions that come into the\n+// region and just assign each position a distinct universally bound\n+// region. Hence, we propagate a constraint to our caller that will\n+// wind up being solvable.\n+fn establish_relationships<'a, F>(\n+    _cell_a: Cell<&'a u32>,\n+    _closure: F,\n+) where\n+    F: for<'x, 'y> FnMut(\n+        Cell<&'a &'x u32>, // shows that 'x: 'a\n+        Cell<&'y &'a u32>, // shows that 'a: 'y\n+        Cell<&'x u32>,\n+        Cell<&'y u32>,\n+    ),\n+{\n+}\n+\n+fn demand_y<'x, 'y>(_cell_x: Cell<&'x u32>, _cell_y: Cell<&'y u32>, _y: &'y u32) {}\n+\n+#[rustc_regions]\n+fn supply<'a>(cell_a: Cell<&'a u32>) {\n+    establish_relationships(\n+        cell_a,\n+        |_outlives1, _outlives2, x, y| {\n+            // Only works if 'x: 'y:\n+            let p = x.get();\n+            demand_y(x, y, p)\n+        },\n+    );\n+}\n+\n+fn main() {}"}, {"sha": "87fda8c4e160df52ec49d26807ee70e2558e5f88", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,37 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/propagate-despite-same-free-region.rs:53:21\n+   |\n+53 |             let p = x.get();\n+   |                     ^^^^^^^\n+\n+note: External requirements\n+  --> $DIR/propagate-despite-same-free-region.rs:51:9\n+   |\n+51 | /         |_outlives1, _outlives2, x, y| {\n+52 | |             // Only works if 'x: 'y:\n+53 | |             let p = x.get();\n+54 | |             demand_y(x, y, p)\n+55 | |         },\n+   | |_________^\n+   |\n+   = note: defining type: DefId(0/1:16 ~ propagate_despite_same_free_region[317d]::supply[0]::{{closure}}[0]) with closure substs [\n+               i16,\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r(9518))) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(9519))) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r(9518))) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(9519))) u32>))\n+           ]\n+   = note: number of external vids: 3\n+   = note: where '_#1r: '_#2r\n+\n+note: No external requirements\n+  --> $DIR/propagate-despite-same-free-region.rs:48:1\n+   |\n+48 | / fn supply<'a>(cell_a: Cell<&'a u32>) {\n+49 | |     establish_relationships(\n+50 | |         cell_a,\n+51 | |         |_outlives1, _outlives2, x, y| {\n+...  |\n+56 | |     );\n+57 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:6 ~ propagate_despite_same_free_region[317d]::supply[0]) with substs []\n+"}, {"sha": "fc8b48b85513480d4dc4ae6c6ca823fb1c40b4cf", "filename": "src/test/ui/nll/closure-requirements/region-ebr-does-not-outlive-static.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-ebr-does-not-outlive-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-ebr-does-not-outlive-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-ebr-does-not-outlive-static.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Basic test for free regions in the NLL code. This test ought to\n+// report an error due to a reborrowing constraint. Right now, we get\n+// a variety of errors from the older, AST-based machinery (notably\n+// borrowck), and then we get the NLL error at the end.\n+\n+// compile-flags:-Znll -Zborrowck=mir\n+\n+fn foo<'a>(x: &'a u32) -> &'static u32\n+    where 'static: 'a\n+{\n+    &*x\n+        //~^ WARN not reporting region error due to -Znll\n+        //~| ERROR free region `'a` does not outlive free region `'static`\n+}\n+\n+fn main() { }"}, {"sha": "d3fbbb81df92865c874f6992405e0e51641439a4", "filename": "src/test/ui/nll/closure-requirements/region-ebr-does-not-outlive-static.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-ebr-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-ebr-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-ebr-does-not-outlive-static.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,14 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/region-ebr-does-not-outlive-static.rs:21:5\n+   |\n+21 |     &*x\n+   |     ^^^\n+\n+error: free region `'a` does not outlive free region `'static`\n+  --> $DIR/region-ebr-does-not-outlive-static.rs:21:5\n+   |\n+21 |     &*x\n+   |     ^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "ec661bfb8e5f50dc036da8d6851675f5f2ac2e18", "filename": "src/test/ui/nll/closure-requirements/region-lbr-anon-does-not-outlive-static.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Basic test for free regions in the NLL code. This test ought to\n+// report an error due to a reborrowing constraint. Right now, we get\n+// a variety of errors from the older, AST-based machinery (notably\n+// borrowck), and then we get the NLL error at the end.\n+\n+// compile-flags:-Znll\n+\n+fn foo(x: &u32) -> &'static u32 {\n+    &*x\n+        //~^ WARN not reporting region error due to -Znll\n+        //~| ERROR `*x` does not live long enough\n+        //~| ERROR free region `'_#1r` does not outlive free region `'static`\n+}\n+\n+fn main() { }"}, {"sha": "d5d4a5642ea8e1aef5fca4048891663f4be5b465", "filename": "src/test/ui/nll/closure-requirements/region-lbr-anon-does-not-outlive-static.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,32 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/region-lbr-anon-does-not-outlive-static.rs:19:5\n+   |\n+19 |     &*x\n+   |     ^^^\n+\n+error[E0597]: `*x` does not live long enough\n+  --> $DIR/region-lbr-anon-does-not-outlive-static.rs:19:6\n+   |\n+19 |     &*x\n+   |      ^^ does not live long enough\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+note: ...but borrowed value is only valid for the anonymous lifetime #1 defined on the function body at 18:1\n+  --> $DIR/region-lbr-anon-does-not-outlive-static.rs:18:1\n+   |\n+18 | / fn foo(x: &u32) -> &'static u32 {\n+19 | |     &*x\n+20 | |         //~^ WARN not reporting region error due to -Znll\n+21 | |         //~| ERROR `*x` does not live long enough\n+22 | |         //~| ERROR free region `'_#1r` does not outlive free region `'static`\n+23 | | }\n+   | |_^\n+\n+error: free region `'_#1r` does not outlive free region `'static`\n+  --> $DIR/region-lbr-anon-does-not-outlive-static.rs:19:5\n+   |\n+19 |     &*x\n+   |     ^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f70441c08d843d0fadbdb35b8cff91477efce90a", "filename": "src/test/ui/nll/closure-requirements/region-lbr-named-does-not-outlive-static.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Basic test for free regions in the NLL code. This test ought to\n+// report an error due to a reborrowing constraint. Right now, we get\n+// a variety of errors from the older, AST-based machinery (notably\n+// borrowck), and then we get the NLL error at the end.\n+\n+// compile-flags:-Znll -Zborrowck=mir\n+\n+fn foo<'a>(x: &'a u32) -> &'static u32 {\n+    &*x\n+        //~^ WARN not reporting region error due to -Znll\n+        //~| ERROR free region `'_#1r` does not outlive free region `'static`\n+}\n+\n+fn main() { }"}, {"sha": "a54e7b612c1404440995ad423ae15ecf7da50cda", "filename": "src/test/ui/nll/closure-requirements/region-lbr-named-does-not-outlive-static.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,14 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/region-lbr-named-does-not-outlive-static.rs:19:5\n+   |\n+19 |     &*x\n+   |     ^^^\n+\n+error: free region `'_#1r` does not outlive free region `'static`\n+  --> $DIR/region-lbr-named-does-not-outlive-static.rs:19:5\n+   |\n+19 |     &*x\n+   |     ^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "94a234bc3d371fb09d86b9bb586ffef51d8221f5", "filename": "src/test/ui/nll/closure-requirements/region-lbr1-does-not-outlive-ebr2.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -13,12 +13,12 @@\n // a variety of errors from the older, AST-based machinery (notably\n // borrowck), and then we get the NLL error at the end.\n \n-// compile-flags:-Znll\n+// compile-flags:-Znll -Zborrowck=mir\n \n fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> &'b u32 {\n-    &*x //~ ERROR free region `'a` does not outlive `'b`\n-    //~^ ERROR `*x` does not live long enough\n-    //~| WARN not reporting region error due to -Znll\n+    &*x\n+        //~^ WARN not reporting region error due to -Znll\n+        //~| ERROR free region `'_#1r` does not outlive free region `'_#2r`\n }\n \n fn main() { }", "previous_filename": "src/test/ui/nll/named-region-basic.rs"}, {"sha": "c1b2f440309497c6d6238af5aae96cb0f56decfe", "filename": "src/test/ui/nll/closure-requirements/region-lbr1-does-not-outlive-ebr2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,14 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/region-lbr1-does-not-outlive-ebr2.rs:19:5\n+   |\n+19 |     &*x\n+   |     ^^^\n+\n+error: free region `'_#1r` does not outlive free region `'_#2r`\n+  --> $DIR/region-lbr1-does-not-outlive-ebr2.rs:19:5\n+   |\n+19 |     &*x\n+   |     ^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d63fd04cd2b7fcb87b4422ff1340a076f94ebc21", "filename": "src/test/ui/nll/closure-requirements/region-lbr1-does-outlive-lbr2-because-implied-bound.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-outlive-lbr2-because-implied-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-outlive-lbr2-because-implied-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-outlive-lbr2-because-implied-bound.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Basic test for free regions in the NLL code. This test does not\n+// report an error because of the (implied) bound that `'b: 'a`.\n+\n+// compile-flags:-Znll\n+// must-compile-successfully\n+\n+#![allow(warnings)]\n+\n+fn foo<'a, 'b>(x: &'a &'b u32) -> &'a u32 {\n+    &**x\n+}\n+\n+fn main() { }"}, {"sha": "9314bbf94322256db21fd4c6819c5f039becc649", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.rs?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test closure that takes two references and is supposed to return\n+// the first, but actually returns the second. This should fail within\n+// the closure.\n+\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_regions]\n+fn test() {\n+    expect_sig(|a, b| b); // ought to return `a`\n+    //~^ WARN not reporting region error due to -Znll\n+    //~| ERROR free region `'_#3r` does not outlive free region `'_#2r`\n+}\n+\n+fn expect_sig<F>(f: F) -> F\n+    where F: for<'a> FnMut(&'a i32, &i32) -> &'a i32\n+{\n+    f\n+}\n+\n+fn deref(_p: &i32) { }\n+\n+fn main() { }"}, {"sha": "ba0c6cd895c7af715c3a256dd1f73cebedeb5a5f", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,38 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/return-wrong-bound-region.rs:21:23\n+   |\n+21 |     expect_sig(|a, b| b); // ought to return `a`\n+   |                       ^\n+\n+error: free region `'_#3r` does not outlive free region `'_#2r`\n+  --> $DIR/return-wrong-bound-region.rs:21:23\n+   |\n+21 |     expect_sig(|a, b| b); // ought to return `a`\n+   |                       ^\n+\n+note: External requirements\n+  --> $DIR/return-wrong-bound-region.rs:21:16\n+   |\n+21 |     expect_sig(|a, b| b); // ought to return `a`\n+   |                ^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:9 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]) with closure substs [\n+               i16,\n+               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r(7661))) i32, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's(8630))) i32)) -> &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r(7661))) i32\n+           ]\n+   = note: number of external vids: 1\n+\n+note: No external requirements\n+  --> $DIR/return-wrong-bound-region.rs:20:1\n+   |\n+20 | / fn test() {\n+21 | |     expect_sig(|a, b| b); // ought to return `a`\n+22 | |     //~^ WARN not reporting region error due to -Znll\n+23 | |     //~| ERROR free region `'_#3r` does not outlive free region `'_#2r`\n+24 | | }\n+   | |_^\n+   |\n+   = note: defining type: DefId(0/0:3 ~ return_wrong_bound_region[317d]::test[0]) with substs []\n+\n+error: aborting due to previous error\n+"}, {"sha": "ba06888943b91eeb00344007e3967657e1a4dfa9", "filename": "src/test/ui/nll/closure-requirements/via-upvar-nested.stderr", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fvia-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05441abd2bc1f0658aafa8b0161146fae34f7206/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fvia-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fvia-upvar-nested.stderr?ref=05441abd2bc1f0658aafa8b0161146fae34f7206", "patch": "@@ -0,0 +1,87 @@\n+note: External requirements\n+  --> $DIR/via-upvar-nested.rs:24:28\n+   |\n+24 |             let closure1 = || p = &y;\n+   |                            ^^^^^^^^^\n+   |\n+   = note: _0: ()\n+   = note: _1: &mut [closure@$DIR/via-upvar-nested.rs:24:28: 24:37 p:&mut &i32, y:&i32]\n+\n+note: External requirements\n+  --> $DIR/via-upvar-nested.rs:23:27\n+   |\n+23 |           let mut closure = || {\n+   |  ___________________________^\n+24 | |             let closure1 = || p = &y;\n+25 | |             closure1();\n+26 | |         };\n+   | |_________^\n+   |\n+   = note: _0: ()\n+   = note: _1: &mut [closure@$DIR/via-upvar-nested.rs:23:27: 26:10 p:&mut &i32, y:&i32]\n+   = note: where '_#1r: '_#2r\n+\n+error[E0596]: cannot borrow immutable item `closure1` as mutable (Mir)\n+  --> $DIR/via-upvar-nested.rs:25:13\n+   |\n+25 |             closure1();\n+   |             ^^^^^^^^ cannot borrow as mutable\n+\n+error[E0597]: `**y` does not live long enough (Ast)\n+  --> $DIR/via-upvar-nested.rs:24:36\n+   |\n+24 |             let closure1 = || p = &y;\n+   |                            --      ^ does not live long enough\n+   |                            |\n+   |                            capture occurs here\n+...\n+29 |     }\n+   |     - borrowed value only lives until here\n+...\n+32 | }\n+   | - borrowed value needs to live until here\n+\n+error[E0596]: cannot borrow immutable local variable `closure1` as mutable (Ast)\n+  --> $DIR/via-upvar-nested.rs:25:13\n+   |\n+24 |             let closure1 = || p = &y;\n+   |                 -------- consider changing this to `mut closure1`\n+25 |             closure1();\n+   |             ^^^^^^^^ cannot borrow mutably\n+\n+note: No external requirements\n+  --> $DIR/via-upvar-nested.rs:16:1\n+   |\n+16 | / fn test() {\n+17 | |     let x = 44;\n+18 | |     let mut p = &x;\n+19 | |\n+...  |\n+31 | |     deref(p);\n+32 | | }\n+   | |_^\n+\n+error[E0597]: borrowed value does not live long enough (Mir)\n+  --> $DIR/via-upvar-nested.rs:29:6\n+   |\n+21 |         let y = 22;\n+   |             - temporary value created here\n+...\n+29 |     }\n+   |      ^ temporary value dropped here while still borrowed\n+   |\n+   = note: consider using a `let` binding to increase its lifetime\n+\n+error[E0502]: cannot borrow `(*p)` as immutable because it is also borrowed as mutable (Mir)\n+  --> $DIR/via-upvar-nested.rs:31:11\n+   |\n+23 |         let mut closure = || {\n+   |                           -- mutable borrow occurs here\n+24 |             let closure1 = || p = &y;\n+   |                               - previous borrow occurs due to use of `(*p)` in closure\n+...\n+31 |     deref(p);\n+   |           ^ immutable borrow occurs here\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "9c1de6c366cc92afc94e8c4d68e9dbdbc8b9e1c7", "filename": "src/test/ui/nll/named-region-basic.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ab1c1bc6bc18b70818206e7f07ac5133239607ff/src%2Ftest%2Fui%2Fnll%2Fnamed-region-basic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab1c1bc6bc18b70818206e7f07ac5133239607ff/src%2Ftest%2Fui%2Fnll%2Fnamed-region-basic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnamed-region-basic.stderr?ref=ab1c1bc6bc18b70818206e7f07ac5133239607ff", "patch": "@@ -1,31 +0,0 @@\n-warning: not reporting region error due to -Znll\n-  --> $DIR/named-region-basic.rs:19:5\n-   |\n-19 |     &*x //~ ERROR free region `'a` does not outlive `'b`\n-   |     ^^^\n-\n-error[E0597]: `*x` does not live long enough\n-  --> $DIR/named-region-basic.rs:19:6\n-   |\n-19 |     &*x //~ ERROR free region `'a` does not outlive `'b`\n-   |      ^^ does not live long enough\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-note: ...but borrowed value is only valid for the lifetime 'a as defined on the function body at 18:1\n-  --> $DIR/named-region-basic.rs:18:1\n-   |\n-18 | / fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> &'b u32 {\n-19 | |     &*x //~ ERROR free region `'a` does not outlive `'b`\n-20 | |     //~^ ERROR `*x` does not live long enough\n-21 | |     //~| WARN not reporting region error due to -Znll\n-22 | | }\n-   | |_^\n-\n-error: free region `'a` does not outlive `'b`\n-  --> $DIR/named-region-basic.rs:19:5\n-   |\n-19 |     &*x //~ ERROR free region `'a` does not outlive `'b`\n-   |     ^^^\n-\n-error: aborting due to 2 previous errors\n-"}]}