{"sha": "fcac11993ca055bbdc7683a2f6ed7b88a838fb0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYWMxMTk5M2NhMDU1YmJkYzc2ODNhMmY2ZWQ3Yjg4YTgzOGZiMGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-23T07:11:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-23T07:11:01Z"}, "message": "Auto merge of #74611 - Mark-Simulacrum:revert-74069-bad-niche, r=eddyb\n\nRevert \"Compare tagged/niche-filling layout and pick the best one\"\n\nReverts rust-lang/rust#74069. It caused a performance regression, see https://github.com/rust-lang/rust/pull/74069#issuecomment-662166827. perf: https://perf.rust-lang.org/compare.html?start=d3df8512d2c2afc6d2e7d8b5b951dd7f2ad77b02&end=cfade73820883adf654fe34fd6b0b03a99458a51\n\nr? @eddyb\n\ncc @nnethercote", "tree": {"sha": "3afcc7ae7281b8c2fa90f30355819595a8d42f10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3afcc7ae7281b8c2fa90f30355819595a8d42f10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcac11993ca055bbdc7683a2f6ed7b88a838fb0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcac11993ca055bbdc7683a2f6ed7b88a838fb0f", "html_url": "https://github.com/rust-lang/rust/commit/fcac11993ca055bbdc7683a2f6ed7b88a838fb0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcac11993ca055bbdc7683a2f6ed7b88a838fb0f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8b55a4ad230ebec762fdfc4f241ba98a98560af", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8b55a4ad230ebec762fdfc4f241ba98a98560af", "html_url": "https://github.com/rust-lang/rust/commit/e8b55a4ad230ebec762fdfc4f241ba98a98560af"}, {"sha": "1d6860082fb3f7e15a64f551e50863021ef122c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d6860082fb3f7e15a64f551e50863021ef122c1", "html_url": "https://github.com/rust-lang/rust/commit/1d6860082fb3f7e15a64f551e50863021ef122c1"}], "stats": {"total": 58, "additions": 7, "deletions": 51}, "files": [{"sha": "b7dccb8d8ce6d3ef3aab403891855949f17bae76", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcac11993ca055bbdc7683a2f6ed7b88a838fb0f/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcac11993ca055bbdc7683a2f6ed7b88a838fb0f/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=fcac11993ca055bbdc7683a2f6ed7b88a838fb0f", "patch": "@@ -27,7 +27,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(cmp_min_max_by)]\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(const_fn_transmute)]"}, {"sha": "215f44819b5d144996f2d8e20c289fffca4fb009", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fcac11993ca055bbdc7683a2f6ed7b88a838fb0f/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcac11993ca055bbdc7683a2f6ed7b88a838fb0f/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=fcac11993ca055bbdc7683a2f6ed7b88a838fb0f", "patch": "@@ -876,8 +876,6 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     .iter_enumerated()\n                     .all(|(i, v)| v.discr == ty::VariantDiscr::Relative(i.as_u32()));\n \n-                let mut niche_filling_layout = None;\n-\n                 // Niche-filling enum optimization.\n                 if !def.repr.inhibit_enum_layout_opt() && no_explicit_discriminants {\n                     let mut dataful_variant = None;\n@@ -974,7 +972,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                             let largest_niche =\n                                 Niche::from_scalar(dl, offset, niche_scalar.clone());\n \n-                            niche_filling_layout = Some(Layout {\n+                            return Ok(tcx.intern_layout(Layout {\n                                 variants: Variants::Multiple {\n                                     tag: niche_scalar,\n                                     tag_encoding: TagEncoding::Niche {\n@@ -993,7 +991,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                                 largest_niche,\n                                 size,\n                                 align,\n-                            });\n+                            }));\n                         }\n                     }\n                 }\n@@ -1216,7 +1214,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                 let largest_niche = Niche::from_scalar(dl, Size::ZERO, tag.clone());\n \n-                let tagged_layout = Layout {\n+                tcx.intern_layout(Layout {\n                     variants: Variants::Multiple {\n                         tag,\n                         tag_encoding: TagEncoding::Direct,\n@@ -1231,23 +1229,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     abi,\n                     align,\n                     size,\n-                };\n-\n-                let best_layout = match (tagged_layout, niche_filling_layout) {\n-                    (tagged_layout, Some(niche_filling_layout)) => {\n-                        // Pick the smaller layout; otherwise,\n-                        // pick the layout with the larger niche; otherwise,\n-                        // pick tagged as it has simpler codegen.\n-                        cmp::min_by_key(tagged_layout, niche_filling_layout, |layout| {\n-                            let niche_size =\n-                                layout.largest_niche.as_ref().map_or(0, |n| n.available(dl));\n-                            (layout.size, cmp::Reverse(niche_size))\n-                        })\n-                    }\n-                    (tagged_layout, None) => tagged_layout,\n-                };\n-\n-                tcx.intern_layout(best_layout)\n+                })\n             }\n \n             // Types with no meaningful known layout."}, {"sha": "301edc0d086b11fee1b251fd47b5ab7ebba36190", "filename": "src/test/ui/print_type_sizes/niche-filling.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcac11993ca055bbdc7683a2f6ed7b88a838fb0f/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/fcac11993ca055bbdc7683a2f6ed7b88a838fb0f/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout?ref=fcac11993ca055bbdc7683a2f6ed7b88a838fb0f", "patch": "@@ -8,12 +8,12 @@ print-type-size     variant `Some`: 12 bytes\n print-type-size         field `.0`: 12 bytes\n print-type-size     variant `None`: 0 bytes\n print-type-size type: `EmbeddedDiscr`: 8 bytes, alignment: 4 bytes\n-print-type-size     discriminant: 1 bytes\n print-type-size     variant `Record`: 7 bytes\n-print-type-size         field `.pre`: 1 bytes\n-print-type-size         field `.post`: 2 bytes\n print-type-size         field `.val`: 4 bytes\n+print-type-size         field `.post`: 2 bytes\n+print-type-size         field `.pre`: 1 bytes\n print-type-size     variant `None`: 0 bytes\n+print-type-size     end padding: 1 bytes\n print-type-size type: `MyOption<Union1<std::num::NonZeroU32>>`: 8 bytes, alignment: 4 bytes\n print-type-size     discriminant: 4 bytes\n print-type-size     variant `Some`: 4 bytes"}, {"sha": "6a3f3c98f127a96d1b5e0a3c93e7d1e1f95b0018", "filename": "src/test/ui/type-sizes.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fcac11993ca055bbdc7683a2f6ed7b88a838fb0f/src%2Ftest%2Fui%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcac11993ca055bbdc7683a2f6ed7b88a838fb0f/src%2Ftest%2Fui%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-sizes.rs?ref=fcac11993ca055bbdc7683a2f6ed7b88a838fb0f", "patch": "@@ -5,7 +5,6 @@\n #![feature(never_type)]\n \n use std::mem::size_of;\n-use std::num::NonZeroU8;\n \n struct t {a: u8, b: i8}\n struct u {a: u8, b: i8, c: u8}\n@@ -103,23 +102,6 @@ enum Option2<A, B> {\n     None\n }\n \n-// Two layouts are considered for `CanBeNicheFilledButShouldnt`:\n-//   Niche-filling:\n-//     { u32 (4 bytes), NonZeroU8 + tag in niche (1 byte), padding (3 bytes) }\n-//   Tagged:\n-//     { tag (1 byte), NonZeroU8 (1 byte), padding (2 bytes), u32 (4 bytes) }\n-// Both are the same size (due to padding),\n-// but the tagged layout is better as the tag creates a niche with 254 invalid values,\n-// allowing types like `Option<Option<CanBeNicheFilledButShouldnt>>` to fit into 8 bytes.\n-pub enum CanBeNicheFilledButShouldnt {\n-    A(NonZeroU8, u32),\n-    B\n-}\n-pub enum AlwaysTaggedBecauseItHasNoNiche {\n-    A(u8, u32),\n-    B\n-}\n-\n pub fn main() {\n     assert_eq!(size_of::<u8>(), 1 as usize);\n     assert_eq!(size_of::<u32>(), 4 as usize);\n@@ -163,11 +145,4 @@ pub fn main() {\n     assert_eq!(size_of::<Option<Option<(&(), bool)>>>(), size_of::<(bool, &())>());\n     assert_eq!(size_of::<Option<Option2<bool, &()>>>(), size_of::<(bool, &())>());\n     assert_eq!(size_of::<Option<Option2<&(), bool>>>(), size_of::<(bool, &())>());\n-\n-    assert_eq!(size_of::<CanBeNicheFilledButShouldnt>(), 8);\n-    assert_eq!(size_of::<Option<CanBeNicheFilledButShouldnt>>(), 8);\n-    assert_eq!(size_of::<Option<Option<CanBeNicheFilledButShouldnt>>>(), 8);\n-    assert_eq!(size_of::<AlwaysTaggedBecauseItHasNoNiche>(), 8);\n-    assert_eq!(size_of::<Option<AlwaysTaggedBecauseItHasNoNiche>>(), 8);\n-    assert_eq!(size_of::<Option<Option<AlwaysTaggedBecauseItHasNoNiche>>>(), 8);\n }"}]}