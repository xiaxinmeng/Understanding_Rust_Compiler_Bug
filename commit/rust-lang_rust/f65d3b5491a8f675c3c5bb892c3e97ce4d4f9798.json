{"sha": "f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NWQzYjU0OTFhOGY2NzVjM2M1YmI4OTJjM2U5N2NlNGQ0Zjk3OTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-02T16:07:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-09T11:08:00Z"}, "message": "switch validation of scalars to be type-driven\n\nThis does not actually regress anything.  It would regress NonNull, but we\ndidn't handle that correctly previously either.", "tree": {"sha": "df93ce786114504917b4f7b63e17f8725fa2f3e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df93ce786114504917b4f7b63e17f8725fa2f3e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "html_url": "https://github.com/rust-lang/rust/commit/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff5a245f52813d4d876f283b0dffa3674e9210b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5a245f52813d4d876f283b0dffa3674e9210b1", "html_url": "https://github.com/rust-lang/rust/commit/ff5a245f52813d4d876f283b0dffa3674e9210b1"}], "stats": {"total": 252, "additions": 117, "deletions": 135}, "files": [{"sha": "a5e4231e7ab4e3ed1a6b59266058022e9a099db5", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 63, "deletions": 99, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "patch": "@@ -15,7 +15,7 @@ use rustc::ty::layout::{self, Size};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc::mir::interpret::{\n-    Scalar, AllocType, EvalResult, EvalErrorKind, PointerArithmetic\n+    Scalar, AllocType, EvalResult, EvalErrorKind\n };\n \n use super::{\n@@ -50,6 +50,13 @@ macro_rules! validation_failure {\n }\n \n macro_rules! try_validation {\n+    ($e:expr, $what:expr, $where:expr, $details:expr) => {{\n+        match $e {\n+            Ok(x) => x,\n+            Err(_) => return validation_failure!($what, $where, $details),\n+        }\n+    }};\n+\n     ($e:expr, $what:expr, $where:expr) => {{\n         match $e {\n             Ok(x) => x,\n@@ -121,114 +128,65 @@ fn path_format(path: &Vec<PathElem>) -> String {\n     out\n }\n \n+fn scalar_format(value: ScalarMaybeUndef) -> String {\n+    match value {\n+        ScalarMaybeUndef::Undef =>\n+            \"uninitialized bytes\".to_owned(),\n+        ScalarMaybeUndef::Scalar(Scalar::Ptr(_)) =>\n+            \"a pointer\".to_owned(),\n+        ScalarMaybeUndef::Scalar(Scalar::Bits { bits, .. }) =>\n+            bits.to_string(),\n+    }\n+}\n+\n impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n     fn validate_scalar(\n         &self,\n         value: ScalarMaybeUndef,\n         size: Size,\n-        scalar: &layout::Scalar,\n         path: &Vec<PathElem>,\n         ty: Ty,\n     ) -> EvalResult<'tcx> {\n-        trace!(\"validate scalar: {:#?}, {:#?}, {:#?}, {}\", value, size, scalar, ty);\n-        let (lo, hi) = scalar.valid_range.clone().into_inner();\n-\n-        let value = match value {\n-            ScalarMaybeUndef::Scalar(scalar) => scalar,\n-            ScalarMaybeUndef::Undef => return validation_failure!(\"undefined bytes\", path),\n-        };\n-\n-        let bits = match value {\n-            Scalar::Bits { bits, size: value_size } => {\n-                assert_eq!(value_size as u64, size.bytes());\n-                bits\n-            },\n-            Scalar::Ptr(_) => {\n-                match ty.sty {\n-                    ty::Bool |\n-                    ty::Char |\n-                    ty::Float(_) |\n-                    ty::Int(_) |\n-                    ty::Uint(_) => {\n-                        return validation_failure!(\n-                                \"a pointer\",\n-                                path,\n-                                format!(\"the type {}\", ty.sty)\n-                            );\n-                    }\n-                    ty::RawPtr(_) |\n-                    ty::Ref(_, _, _) |\n-                    ty::FnPtr(_) => {}\n-                    _ => { unreachable!(); }\n-                }\n+        trace!(\"validate scalar: {:#?}, {:#?}, {}\", value, size, ty);\n \n-                let ptr_size = self.pointer_size();\n-                let ptr_max = u128::max_value() >> (128 - ptr_size.bits());\n-                return if lo > hi {\n-                    if lo - hi == 1 {\n-                        // no gap, all values are ok\n-                        Ok(())\n-                    } else if hi < ptr_max || lo > 1 {\n-                        let max = u128::max_value() >> (128 - size.bits());\n-                        validation_failure!(\n-                            \"pointer\",\n-                            path,\n-                            format!(\"something in the range {:?} or {:?}\", 0..=lo, hi..=max)\n-                        )\n-                    } else {\n-                        Ok(())\n-                    }\n-                } else if hi < ptr_max || lo > 1 {\n-                    validation_failure!(\n-                        \"pointer\",\n-                        path,\n-                        format!(\"something in the range {:?}\", scalar.valid_range)\n-                    )\n-                } else {\n-                    Ok(())\n-                };\n-            },\n-        };\n-\n-        // char gets a special treatment, because its number space is not contiguous so `TyLayout`\n-        // has no special checks for chars\n+        // Go over all the primitive types\n         match ty.sty {\n+            ty::Bool => {\n+                try_validation!(value.to_bool(),\n+                    scalar_format(value), path, \"a boolean\");\n+            },\n             ty::Char => {\n-                debug_assert_eq!(size.bytes(), 4);\n-                if ::std::char::from_u32(bits as u32).is_none() {\n-                    return validation_failure!(\n-                        \"character\",\n-                        path,\n-                        \"a valid unicode codepoint\"\n-                    );\n-                }\n+                try_validation!(value.to_char(),\n+                    scalar_format(value), path, \"a valid unicode codepoint\");\n+            },\n+            ty::Float(_) | ty::Int(_) | ty::Uint(_) => {\n+                // Must be scalar bits\n+                try_validation!(value.to_bits(size),\n+                    scalar_format(value), path, \"initialized plain bits\");\n             }\n-            _ => {},\n-        }\n-\n-        use std::ops::RangeInclusive;\n-        let in_range = |bound: RangeInclusive<u128>| bound.contains(&bits);\n-        if lo > hi {\n-            if in_range(0..=hi) || in_range(lo..=u128::max_value()) {\n-                Ok(())\n-            } else {\n-                validation_failure!(\n-                    bits,\n-                    path,\n-                    format!(\"something in the range {:?} or {:?}\", ..=hi, lo..)\n-                )\n+            ty::RawPtr(_) => {\n+                // Anything but undef goes\n+                try_validation!(value.not_undef(),\n+                    scalar_format(value), path, \"a raw pointer\");\n+            },\n+            ty::Ref(..) => {\n+                // This is checked by the recursive reference handling, nothing to do here.\n+                debug_assert!(ty.builtin_deref(true).is_some() && !ty.is_unsafe_ptr());\n             }\n-        } else {\n-            if in_range(scalar.valid_range.clone()) {\n-                Ok(())\n-            } else {\n-                validation_failure!(\n-                    bits,\n-                    path,\n-                    format!(\"something in the range {:?}\", scalar.valid_range)\n-                )\n+            ty::FnPtr(_sig) => {\n+                let ptr = try_validation!(value.to_ptr(),\n+                    scalar_format(value), path, \"a pointer\");\n+                let _fn = try_validation!(self.memory.get_fn(ptr),\n+                    scalar_format(value), path, \"a function pointer\");\n+                // TODO: Check if the signature matches\n+            }\n+            ty::FnDef(..) => {\n+                // This is a zero-sized type with all relevant data sitting in the type.\n+                // There is nothing to validate.\n             }\n+            _ => bug!(\"Unexpected primitive type {}\", ty)\n         }\n+        Ok(())\n     }\n \n     /// Validate a reference, potentially recursively. `place` is assumed to already be\n@@ -240,10 +198,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         ref_tracking: Option<&mut RefTracking<'tcx>>,\n     ) -> EvalResult<'tcx> {\n         // Before we do anything else, make sure this is entirely in-bounds.\n+        let (size, align) = self.size_and_align_of(place.extra, place.layout)?;\n+        try_validation!(self.memory.check_align(place.ptr, align),\n+            \"unaligned reference\", path);\n         if !place.layout.is_zst() {\n             let ptr = try_validation!(place.ptr.to_ptr(),\n                 \"integer pointer in non-ZST reference\", path);\n-            let size = self.size_and_align_of(place.extra, place.layout)?.0;\n             try_validation!(self.memory.check_bounds(ptr, size, false),\n                 \"dangling reference (not entirely in bounds)\", path);\n             // Skip recursion for some external statics\n@@ -277,6 +237,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     /// It will error if the bits at the destination do not match the ones described by the layout.\n     /// The `path` may be pushed to, but the part that is present when the function\n     /// starts must not be changed!\n+    ///\n+    /// `ref_tracking` can be None to avoid recursive checking below references.\n+    /// This also toggles between \"run-time\" (no recursion) and \"compile-time\" (with recursion)\n+    /// validation (e.g., pointer values are fine in integers at runtime).\n     pub fn validate_operand(\n         &self,\n         dest: OpTy<'tcx>,\n@@ -346,12 +310,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         return validation_failure!(\"a value of an uninhabited type\", path),\n                     // check that the scalar is a valid pointer or that its bit range matches the\n                     // expectation.\n-                    layout::Abi::Scalar(ref scalar_layout) => {\n-                        let size = scalar_layout.value.size(self);\n+                    layout::Abi::Scalar(_) => {\n                         let value = try_validation!(self.read_value(dest),\n                             \"uninitialized or unrepresentable data\", path);\n                         let scalar = value.to_scalar_or_undef();\n-                        self.validate_scalar(scalar, size, scalar_layout, &path, dest.layout.ty)?;\n+                        self.validate_scalar(scalar, dest.layout.size, &path, dest.layout.ty)?;\n                         // Recursively check *safe* references\n                         if dest.layout.ty.builtin_deref(true).is_some() &&\n                             !dest.layout.ty.is_unsafe_ptr()\n@@ -365,7 +328,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             layout::FieldPlacement::Arbitrary { .. }\n                 if dest.layout.ty.builtin_deref(true).is_some() =>\n             {\n-                // This is a fat pointer.\n+                // This is a fat pointer. We also check fat raw pointers, their metadata must\n+                // be valid!\n                 let ptr = try_validation!(self.read_value(dest.into()),\n                     \"undefined location in fat pointer\", path);\n                 let ptr = try_validation!(self.ref_to_mplace(ptr),"}, {"sha": "7be9345b6b423c8a87f12d9c6be030488f0ca5cc", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "patch": "@@ -2,7 +2,7 @@ error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/const-pointer-values-in-various-types.rs:24:5\n    |\n LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type usize\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n@@ -36,7 +36,7 @@ error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/const-pointer-values-in-various-types.rs:36:5\n    |\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type u64\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n@@ -74,7 +74,7 @@ error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/const-pointer-values-in-various-types.rs:51:5\n    |\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type i64\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n@@ -96,7 +96,7 @@ error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/const-pointer-values-in-various-types.rs:60:5\n    |\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type f64\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n@@ -144,7 +144,7 @@ error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/const-pointer-values-in-various-types.rs:78:5\n    |\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type u64\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n@@ -184,7 +184,7 @@ error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/const-pointer-values-in-various-types.rs:93:5\n    |\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type i64\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n@@ -208,7 +208,7 @@ error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/const-pointer-values-in-various-types.rs:102:5\n    |\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type f64\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "477e7119ba93735f0cf4203fc4f3a945408f2596", "filename": "src/test/ui/consts/const-eval/transmute-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs?ref=f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "patch": "@@ -14,6 +14,5 @@ use std::mem;\n \n static FOO: bool = unsafe { mem::transmute(3u8) };\n //~^ ERROR this static likely exhibits undefined behavior\n-//~^^ type validation failed: encountered 3, but expected something in the range 0..=1\n \n fn main() {}"}, {"sha": "2e82c0963c3778c77c248b6f8d4f5adbcfe3d655", "filename": "src/test/ui/consts/const-eval/transmute-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr?ref=f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "patch": "@@ -2,7 +2,7 @@ error[E0080]: this static likely exhibits undefined behavior\n   --> $DIR/transmute-const.rs:15:1\n    |\n LL | static FOO: bool = unsafe { mem::transmute(3u8) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3, but expected something in the range 0..=1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "20105a46c1db0dc93905618833f243d0b67c3283", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "patch": "@@ -18,7 +18,7 @@ error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/ub-enum.rs:45:1\n    |\n LL | const BAD_ENUM_CHAR : Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered character at .Some.0.1, but expected a valid unicode codepoint\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 4294967295 at .Some.0.1, but expected a valid unicode codepoint\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "e010152513c15509016fabe488a2d888a1ee84a8", "filename": "src/test/ui/consts/const-eval/ub-ref.rs", "status": "renamed", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs?ref=f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "patch": "@@ -8,13 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-union Foo {\n-    a: &'static u8,\n-    b: usize,\n-}\n+#![feature(const_transmute)]\n \n-const USIZE_AS_STATIC_REF: &'static u8 = unsafe { Foo { b: 1337 }.a};\n+use std::mem;\n+\n+const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n+//~^ ERROR this constant likely exhibits undefined behavior\n+\n+const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n+//~^ ERROR this constant likely exhibits undefined behavior\n+\n+const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n //~^ ERROR this constant likely exhibits undefined behavior\n \n-fn main() {\n-}\n+fn main() {}", "previous_filename": "src/test/ui/consts/const-eval/ub-usize-in-ref.rs"}, {"sha": "b7989e22afabe4e69b4ea3b7445174e38c046486", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "patch": "@@ -0,0 +1,27 @@\n+error[E0080]: this constant likely exhibits undefined behavior\n+  --> $DIR/ub-ref.rs:15:1\n+   |\n+LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered unaligned reference\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error[E0080]: this constant likely exhibits undefined behavior\n+  --> $DIR/ub-ref.rs:18:1\n+   |\n+LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error[E0080]: this constant likely exhibits undefined behavior\n+  --> $DIR/ub-ref.rs:21:1\n+   |\n+LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered integer pointer in non-ZST reference\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "55bc1e50aac009b007c44819f5f5fc7423a98d0b", "filename": "src/test/ui/consts/const-eval/ub-usize-in-ref.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff5a245f52813d4d876f283b0dffa3674e9210b1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-usize-in-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff5a245f52813d4d876f283b0dffa3674e9210b1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-usize-in-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-usize-in-ref.stderr?ref=ff5a245f52813d4d876f283b0dffa3674e9210b1", "patch": "@@ -1,11 +0,0 @@\n-error[E0080]: this constant likely exhibits undefined behavior\n-  --> $DIR/ub-usize-in-ref.rs:16:1\n-   |\n-LL | const USIZE_AS_STATIC_REF: &'static u8 = unsafe { Foo { b: 1337 }.a};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered integer pointer in non-ZST reference\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "4484dd6a14740f12cf06feb11faa1b2361e96e3d", "filename": "src/test/ui/consts/const-eval/union-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr?ref=f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "patch": "@@ -13,7 +13,7 @@ LL | / const FIELD_PATH: Struct = Struct { //~ ERROR this constant likely exhibi\n LL | |     a: 42,\n LL | |     b: unsafe { UNION.field3 },\n LL | | };\n-   | |__^ type validation failed: encountered undefined bytes at .b\n+   | |__^ type validation failed: encountered uninitialized bytes at .b, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "86b3bdaa6b79ec82d41cb0e9a8b9208501dd6b5b", "filename": "src/test/ui/consts/const-eval/union-ub.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs?ref=f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "patch": "@@ -41,5 +41,4 @@ const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n const BAD_UNION: Foo = unsafe { Bar { u8: 42 }.foo };\n \n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "5da7e1a4dbf606bc7f0a47da3545056f1b986266", "filename": "src/test/ui/consts/const-eval/union-ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr?ref=f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "patch": "@@ -2,7 +2,7 @@ error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/union-ub.rs:36:1\n    |\n LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something in the range 0..=1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}, {"sha": "0471ef075f80956d1b7496ab0905a3e38ef68c3d", "filename": "src/test/ui/union-ub-fat-ptr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Funion-ub-fat-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798/src%2Ftest%2Fui%2Funion-ub-fat-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion-ub-fat-ptr.stderr?ref=f65d3b5491a8f675c3c5bb892c3e97ce4d4f9798", "patch": "@@ -66,31 +66,31 @@ error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/union-ub-fat-ptr.rs:116:1\n    |\n LL | const G: &Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>, but expected something in the range 0..=1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/union-ub-fat-ptr.rs:119:1\n    |\n LL | const H: &[bool] = &[unsafe { BoolTransmute { val: 3 }.bl }];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>[0], but expected something in the range 0..=1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>[0], but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/union-ub-fat-ptr.rs:125:1\n    |\n LL | const I2: &MySliceBool = &MySlice(unsafe { BoolTransmute { val: 3 }.bl }, [false]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.0, but expected something in the range 0..=1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.0, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/union-ub-fat-ptr.rs:128:1\n    |\n LL | const I3: &MySliceBool = &MySlice(true, [unsafe { BoolTransmute { val: 3 }.bl }]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.1[0], but expected something in the range 0..=1\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.1[0], but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}]}