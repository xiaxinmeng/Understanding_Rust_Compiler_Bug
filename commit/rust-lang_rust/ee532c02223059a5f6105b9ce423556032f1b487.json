{"sha": "ee532c02223059a5f6105b9ce423556032f1b487", "node_id": "C_kwDOAAsO6NoAKGVlNTMyYzAyMjIzMDU5YTVmNjEwNWI5Y2U0MjM1NTYwMzJmMWI0ODc", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-01-27T15:17:14Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:48:26Z"}, "message": "Don't lint `explicit_auto_deref` on reborrows", "tree": {"sha": "dde7b9fd05220bc4512f15be6cf1159bd0ea978c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dde7b9fd05220bc4512f15be6cf1159bd0ea978c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee532c02223059a5f6105b9ce423556032f1b487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee532c02223059a5f6105b9ce423556032f1b487", "html_url": "https://github.com/rust-lang/rust/commit/ee532c02223059a5f6105b9ce423556032f1b487", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee532c02223059a5f6105b9ce423556032f1b487/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a74d3357079e5edf2454f6523a9c93081e7348e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a74d3357079e5edf2454f6523a9c93081e7348e", "html_url": "https://github.com/rust-lang/rust/commit/8a74d3357079e5edf2454f6523a9c93081e7348e"}], "stats": {"total": 108, "additions": 76, "deletions": 32}, "files": [{"sha": "dc51da262697768b724652d98ba4836c45965f42", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ee532c02223059a5f6105b9ce423556032f1b487/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee532c02223059a5f6105b9ce423556032f1b487/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=ee532c02223059a5f6105b9ce423556032f1b487", "patch": "@@ -183,6 +183,10 @@ enum State {\n         deref_span: Span,\n         deref_hir_id: HirId,\n     },\n+    Reborrow {\n+        deref_span: Span,\n+        deref_hir_id: HirId,\n+    },\n     Borrow,\n }\n \n@@ -395,10 +399,38 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n                 ));\n             },\n             (Some((State::Borrow, data)), RefOp::Deref) => {\n+                if typeck.expr_ty(sub_expr).is_ref() {\n+                    self.state = Some((\n+                        State::Reborrow {\n+                            deref_span: expr.span,\n+                            deref_hir_id: expr.hir_id,\n+                        },\n+                        data,\n+                    ));\n+                } else {\n+                    self.state = Some((\n+                        State::ExplicitDeref {\n+                            deref_span: expr.span,\n+                            deref_hir_id: expr.hir_id,\n+                        },\n+                        data,\n+                    ));\n+                }\n+            },\n+            (\n+                Some((\n+                    State::Reborrow {\n+                        deref_span,\n+                        deref_hir_id,\n+                    },\n+                    data,\n+                )),\n+                RefOp::Deref,\n+            ) => {\n                 self.state = Some((\n                     State::ExplicitDeref {\n-                        deref_span: expr.span,\n-                        deref_hir_id: expr.hir_id,\n+                        deref_span,\n+                        deref_hir_id,\n                     },\n                     data,\n                 ));\n@@ -959,7 +991,7 @@ fn report<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data\n                 },\n             );\n         },\n-        State::Borrow => (),\n+        State::Borrow | State::Reborrow { .. } => (),\n     }\n }\n "}, {"sha": "a8e2bbfef0f5aae09d2ea5058f645c955c427543", "filename": "tests/ui/borrow_deref_ref_unfixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee532c02223059a5f6105b9ce423556032f1b487/tests%2Fui%2Fborrow_deref_ref_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee532c02223059a5f6105b9ce423556032f1b487/tests%2Fui%2Fborrow_deref_ref_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_deref_ref_unfixable.rs?ref=ee532c02223059a5f6105b9ce423556032f1b487", "patch": "@@ -1,4 +1,4 @@\n-#![allow(dead_code, unused_variables, clippy::explicit_auto_deref)]\n+#![allow(dead_code, unused_variables)]\n \n fn main() {}\n "}, {"sha": "0d3f8b61afc21f6edf26f1127c2295091c2f69e2", "filename": "tests/ui/explicit_auto_deref.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee532c02223059a5f6105b9ce423556032f1b487/tests%2Fui%2Fexplicit_auto_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ee532c02223059a5f6105b9ce423556032f1b487/tests%2Fui%2Fexplicit_auto_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.fixed?ref=ee532c02223059a5f6105b9ce423556032f1b487", "patch": "@@ -8,7 +8,8 @@\n     clippy::needless_borrow,\n     clippy::ptr_arg,\n     clippy::redundant_field_names,\n-    clippy::too_many_arguments\n+    clippy::too_many_arguments,\n+    clippy::borrow_deref_ref\n )]\n \n trait CallableStr {\n@@ -48,6 +49,7 @@ impl<U: ?Sized> CallableT<U> for i32 {\n }\n \n fn f_str(_: &str) {}\n+fn f_string(_: &String) {}\n fn f_t<T>(_: T) {}\n fn f_ref_t<T: ?Sized>(_: &T) {}\n \n@@ -158,4 +160,8 @@ fn main() {\n     }\n     let _ = E2::S1(&*s); // Don't lint. Inferred type would change.\n     let _ = E2::S2 { s: &*s }; // Don't lint. Inferred type would change.\n+\n+    let ref_s = &s;\n+    let _: &String = &*ref_s; // Don't lint reborrow.\n+    f_string(&*ref_s); // Don't lint reborrow.\n }"}, {"sha": "31c268bcdecef2bfd86472b98d81480a3d963beb", "filename": "tests/ui/explicit_auto_deref.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee532c02223059a5f6105b9ce423556032f1b487/tests%2Fui%2Fexplicit_auto_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee532c02223059a5f6105b9ce423556032f1b487/tests%2Fui%2Fexplicit_auto_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.rs?ref=ee532c02223059a5f6105b9ce423556032f1b487", "patch": "@@ -8,7 +8,8 @@\n     clippy::needless_borrow,\n     clippy::ptr_arg,\n     clippy::redundant_field_names,\n-    clippy::too_many_arguments\n+    clippy::too_many_arguments,\n+    clippy::borrow_deref_ref\n )]\n \n trait CallableStr {\n@@ -48,6 +49,7 @@ impl<U: ?Sized> CallableT<U> for i32 {\n }\n \n fn f_str(_: &str) {}\n+fn f_string(_: &String) {}\n fn f_t<T>(_: T) {}\n fn f_ref_t<T: ?Sized>(_: &T) {}\n \n@@ -158,4 +160,8 @@ fn main() {\n     }\n     let _ = E2::S1(&*s); // Don't lint. Inferred type would change.\n     let _ = E2::S2 { s: &*s }; // Don't lint. Inferred type would change.\n+\n+    let ref_s = &s;\n+    let _: &String = &*ref_s; // Don't lint reborrow.\n+    f_string(&*ref_s); // Don't lint reborrow.\n }"}, {"sha": "b53b4b4a200c6debba48a3873291a480a8f5ffd2", "filename": "tests/ui/explicit_auto_deref.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ee532c02223059a5f6105b9ce423556032f1b487/tests%2Fui%2Fexplicit_auto_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee532c02223059a5f6105b9ce423556032f1b487/tests%2Fui%2Fexplicit_auto_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.stderr?ref=ee532c02223059a5f6105b9ce423556032f1b487", "patch": "@@ -1,157 +1,157 @@\n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:61:20\n+  --> $DIR/explicit_auto_deref.rs:63:20\n    |\n LL |     let _: &str = &*s;\n    |                    ^^ help: try this: `s`\n    |\n    = note: `-D clippy::explicit-auto-deref` implied by `-D warnings`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:65:12\n+  --> $DIR/explicit_auto_deref.rs:67:12\n    |\n LL |     f_str(&*s);\n    |            ^^ help: try this: `s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:69:14\n+  --> $DIR/explicit_auto_deref.rs:71:14\n    |\n LL |     f_str_t(&*s, &*s); // Don't lint second param.\n    |              ^^ help: try this: `s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:72:25\n+  --> $DIR/explicit_auto_deref.rs:74:25\n    |\n LL |     let _: &Box<i32> = &**b;\n    |                         ^^^ help: try this: `b`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:78:8\n+  --> $DIR/explicit_auto_deref.rs:80:8\n    |\n LL |     c(&*s);\n    |        ^^ help: try this: `s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:84:9\n+  --> $DIR/explicit_auto_deref.rs:86:9\n    |\n LL |         &**x\n    |         ^^^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:88:11\n+  --> $DIR/explicit_auto_deref.rs:90:11\n    |\n LL |         { &**x }\n    |           ^^^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:92:9\n+  --> $DIR/explicit_auto_deref.rs:94:9\n    |\n LL |         &**{ x }\n    |         ^^^^^^^^ help: try this: `{ x }`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:96:9\n+  --> $DIR/explicit_auto_deref.rs:98:9\n    |\n LL |         &***x\n    |         ^^^^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:113:13\n+  --> $DIR/explicit_auto_deref.rs:115:13\n    |\n LL |         f1(&*x);\n    |             ^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:114:13\n+  --> $DIR/explicit_auto_deref.rs:116:13\n    |\n LL |         f2(&*x);\n    |             ^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:115:13\n+  --> $DIR/explicit_auto_deref.rs:117:13\n    |\n LL |         f3(&*x);\n    |             ^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:116:28\n+  --> $DIR/explicit_auto_deref.rs:118:28\n    |\n LL |         f4.callable_str()(&*x);\n    |                            ^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:117:13\n+  --> $DIR/explicit_auto_deref.rs:119:13\n    |\n LL |         f5(&*x);\n    |             ^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:118:13\n+  --> $DIR/explicit_auto_deref.rs:120:13\n    |\n LL |         f6(&*x);\n    |             ^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:119:28\n+  --> $DIR/explicit_auto_deref.rs:121:28\n    |\n LL |         f7.callable_str()(&*x);\n    |                            ^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:120:26\n+  --> $DIR/explicit_auto_deref.rs:122:26\n    |\n LL |         f8.callable_t()(&*x);\n    |                          ^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:121:13\n+  --> $DIR/explicit_auto_deref.rs:123:13\n    |\n LL |         f9(&*x);\n    |             ^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:122:14\n+  --> $DIR/explicit_auto_deref.rs:124:14\n    |\n LL |         f10(&*x);\n    |              ^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:123:27\n+  --> $DIR/explicit_auto_deref.rs:125:27\n    |\n LL |         f11.callable_t()(&*x);\n    |                           ^^ help: try this: `x`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:127:17\n+  --> $DIR/explicit_auto_deref.rs:129:17\n    |\n LL |     let _ = S1(&*s);\n    |                 ^^ help: try this: `s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:132:22\n+  --> $DIR/explicit_auto_deref.rs:134:22\n    |\n LL |     let _ = S2 { s: &*s };\n    |                      ^^ help: try this: `s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:148:30\n+  --> $DIR/explicit_auto_deref.rs:150:30\n    |\n LL |             let _ = Self::S1(&**s);\n    |                              ^^^^ help: try this: `s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:149:35\n+  --> $DIR/explicit_auto_deref.rs:151:35\n    |\n LL |             let _ = Self::S2 { s: &**s };\n    |                                   ^^^^ help: try this: `s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:152:21\n+  --> $DIR/explicit_auto_deref.rs:154:21\n    |\n LL |     let _ = E1::S1(&*s);\n    |                     ^^ help: try this: `s`\n \n error: deref which would be done by auto-deref\n-  --> $DIR/explicit_auto_deref.rs:153:26\n+  --> $DIR/explicit_auto_deref.rs:155:26\n    |\n LL |     let _ = E1::S2 { s: &*s };\n    |                          ^^ help: try this: `s`"}]}