{"sha": "5610231454f81d09f0a21f7fbdf58ad44898759c", "node_id": "C_kwDOAAsO6NoAKDU2MTAyMzE0NTRmODFkMDlmMGEyMWY3ZmJkZjU4YWQ0NDg5ODc1OWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-15T20:17:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-15T20:17:34Z"}, "message": "Rollup merge of #106896 - Ezrashaw:str-cast-bool-emptyness, r=compiler-errors\n\nsuggest `is_empty` for collections when casting to `bool`\n\nFixes #106883\n\nMatches on slices, `String` and `str`. It would be nice to do this with something like `Deref<Target=str>` as well, but AFAIK it's not possible in this part of the compiler.", "tree": {"sha": "51cfa0c21ff266245319e5bfb889bd9b11fa76aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51cfa0c21ff266245319e5bfb889bd9b11fa76aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5610231454f81d09f0a21f7fbdf58ad44898759c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjxF9eCRBK7hj4Ov3rIwAAS9sIAIkm/qfShfu+GHGAbltpDGZH\ny52kTj6IFpCMW2w77pTLlrV+dBa8higVpQ/p0+s0Bf57HLrx5Lbl9PxZPIqklg84\naTPqRP8bodF4m3gsdsoa5+ByZghFBOSby6cWxbC/PbN3Mioyq9StEVdaqLhwvEFN\n16y8H3m55XrhwGTgQC6F9ZxgxoevYtpfpVq3njdgeguccZvPK3LAxtqBTuSXTvdx\nDLa4XgaZ6Ntf4+s79kPrrC18iN9MlhSkWxDbxJYIV6XeLefD63gHREqW3lf6CuMk\nxxy0kpq9HY2tda8+4oaNZ5TxpNku7e3wWREIdrcTtJFphmqTOiCOpl67zpz3soI=\n=5hfi\n-----END PGP SIGNATURE-----\n", "payload": "tree 51cfa0c21ff266245319e5bfb889bd9b11fa76aa\nparent 72180b348b95f3df16f245ff90524b23d7f4bd0c\nparent 92ced4a12e60811b67ed98c79c77c151581b7e07\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673813854 +0100\ncommitter GitHub <noreply@github.com> 1673813854 +0100\n\nRollup merge of #106896 - Ezrashaw:str-cast-bool-emptyness, r=compiler-errors\n\nsuggest `is_empty` for collections when casting to `bool`\n\nFixes #106883\n\nMatches on slices, `String` and `str`. It would be nice to do this with something like `Deref<Target=str>` as well, but AFAIK it's not possible in this part of the compiler.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5610231454f81d09f0a21f7fbdf58ad44898759c", "html_url": "https://github.com/rust-lang/rust/commit/5610231454f81d09f0a21f7fbdf58ad44898759c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5610231454f81d09f0a21f7fbdf58ad44898759c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72180b348b95f3df16f245ff90524b23d7f4bd0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/72180b348b95f3df16f245ff90524b23d7f4bd0c", "html_url": "https://github.com/rust-lang/rust/commit/72180b348b95f3df16f245ff90524b23d7f4bd0c"}, {"sha": "92ced4a12e60811b67ed98c79c77c151581b7e07", "url": "https://api.github.com/repos/rust-lang/rust/commits/92ced4a12e60811b67ed98c79c77c151581b7e07", "html_url": "https://github.com/rust-lang/rust/commit/92ced4a12e60811b67ed98c79c77c151581b7e07"}], "stats": {"total": 146, "additions": 142, "deletions": 4}, "files": [{"sha": "0a230fca107affea99ad03c0bd31a8316e59908c", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5610231454f81d09f0a21f7fbdf58ad44898759c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5610231454f81d09f0a21f7fbdf58ad44898759c/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=5610231454f81d09f0a21f7fbdf58ad44898759c", "patch": "@@ -31,7 +31,9 @@\n use super::FnCtxt;\n \n use crate::type_error_struct;\n-use rustc_errors::{struct_span_err, Applicability, DelayDm, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{\n+    struct_span_err, Applicability, DelayDm, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+};\n use rustc_hir as hir;\n use rustc_macros::{TypeFoldable, TypeVisitable};\n use rustc_middle::mir::Mutability;\n@@ -270,6 +272,9 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                         }\n                     ));\n                 }\n+\n+                self.try_suggest_collection_to_bool(fcx, &mut err);\n+\n                 err.emit();\n             }\n             CastError::NeedViaInt => {\n@@ -517,6 +522,9 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 } else {\n                     err.span_label(self.span, \"invalid cast\");\n                 }\n+\n+                self.try_suggest_collection_to_bool(fcx, &mut err);\n+\n                 err.emit();\n             }\n             CastError::SizedUnsizedCast => {\n@@ -1080,4 +1088,40 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             },\n         );\n     }\n+\n+    /// Attempt to suggest using `.is_empty` when trying to cast from a\n+    /// collection type to a boolean.\n+    fn try_suggest_collection_to_bool(&self, fcx: &FnCtxt<'a, 'tcx>, err: &mut Diagnostic) {\n+        if self.cast_ty.is_bool() {\n+            let derefed = fcx\n+                .autoderef(self.expr_span, self.expr_ty)\n+                .silence_errors()\n+                .find(|t| matches!(t.0.kind(), ty::Str | ty::Slice(..)));\n+\n+            if let Some((deref_ty, _)) = derefed {\n+                // Give a note about what the expr derefs to.\n+                if deref_ty != self.expr_ty.peel_refs() {\n+                    err.span_note(\n+                        self.expr_span,\n+                        format!(\n+                            \"this expression `Deref`s to `{}` which implements `is_empty`\",\n+                            fcx.ty_to_string(deref_ty)\n+                        ),\n+                    );\n+                }\n+\n+                // Create a multipart suggestion: add `!` and `.is_empty()` in\n+                // place of the cast.\n+                let suggestion = vec![\n+                    (self.expr_span.shrink_to_lo(), \"!\".to_string()),\n+                    (self.span.with_lo(self.expr_span.hi()), \".is_empty()\".to_string()),\n+                ];\n+\n+                err.multipart_suggestion_verbose(format!(\n+                    \"consider using the `is_empty` method on `{}` to determine if it contains anything\",\n+                    fcx.ty_to_string(self.expr_ty),\n+                ),  suggestion, Applicability::MaybeIncorrect);\n+            }\n+        }\n+    }\n }"}, {"sha": "fbebc80d91ced614a38fe76cf3acc64cf3313e9f", "filename": "tests/ui/cast/cast-as-bool.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5610231454f81d09f0a21f7fbdf58ad44898759c/tests%2Fui%2Fcast%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5610231454f81d09f0a21f7fbdf58ad44898759c/tests%2Fui%2Fcast%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast%2Fcast-as-bool.rs?ref=5610231454f81d09f0a21f7fbdf58ad44898759c", "patch": "@@ -2,8 +2,12 @@ fn main() {\n     let u = 5 as bool; //~ ERROR cannot cast as `bool`\n                        //~| HELP compare with zero instead\n                        //~| SUGGESTION 5 != 0\n+\n     let t = (1 + 2) as bool; //~ ERROR cannot cast as `bool`\n                              //~| HELP compare with zero instead\n                              //~| SUGGESTION (1 + 2) != 0\n-    let v = \"hello\" as bool; //~ ERROR casting `&'static str` as `bool` is invalid\n+\n+    let v = \"hello\" as bool;\n+    //~^ ERROR casting `&'static str` as `bool` is invalid\n+    //~| HELP consider using the `is_empty` method on `&'static str` to determine if it contains anything\n }"}, {"sha": "19ac8f10fec216abdaf92214f69d3086aeb1791b", "filename": "tests/ui/cast/cast-as-bool.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5610231454f81d09f0a21f7fbdf58ad44898759c/tests%2Fui%2Fcast%2Fcast-as-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5610231454f81d09f0a21f7fbdf58ad44898759c/tests%2Fui%2Fcast%2Fcast-as-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast%2Fcast-as-bool.stderr?ref=5610231454f81d09f0a21f7fbdf58ad44898759c", "patch": "@@ -5,16 +5,21 @@ LL |     let u = 5 as bool;\n    |             ^^^^^^^^^ help: compare with zero instead: `5 != 0`\n \n error[E0054]: cannot cast as `bool`\n-  --> $DIR/cast-as-bool.rs:5:13\n+  --> $DIR/cast-as-bool.rs:6:13\n    |\n LL |     let t = (1 + 2) as bool;\n    |             ^^^^^^^^^^^^^^^ help: compare with zero instead: `(1 + 2) != 0`\n \n error[E0606]: casting `&'static str` as `bool` is invalid\n-  --> $DIR/cast-as-bool.rs:8:13\n+  --> $DIR/cast-as-bool.rs:10:13\n    |\n LL |     let v = \"hello\" as bool;\n    |             ^^^^^^^^^^^^^^^\n+   |\n+help: consider using the `is_empty` method on `&'static str` to determine if it contains anything\n+   |\n+LL |     let v = !\"hello\".is_empty();\n+   |             +       ~~~~~~~~~~~\n \n error: aborting due to 3 previous errors\n "}, {"sha": "27e0816dd1c6a62336d4f2475b5acfc3a76226f2", "filename": "tests/ui/cast/issue-106883-is-empty.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5610231454f81d09f0a21f7fbdf58ad44898759c/tests%2Fui%2Fcast%2Fissue-106883-is-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5610231454f81d09f0a21f7fbdf58ad44898759c/tests%2Fui%2Fcast%2Fissue-106883-is-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast%2Fissue-106883-is-empty.rs?ref=5610231454f81d09f0a21f7fbdf58ad44898759c", "patch": "@@ -0,0 +1,27 @@\n+use std::ops::Deref;\n+\n+struct Foo;\n+\n+impl Deref for Foo {\n+    type Target = [u8];\n+\n+    fn deref(&self) -> &Self::Target {\n+        &[]\n+    }\n+}\n+\n+fn main() {\n+    let _ = \"foo\" as bool;\n+    //~^ ERROR casting `&'static str` as `bool` is invalid [E0606]\n+\n+    let _ = String::from(\"foo\") as bool;\n+    //~^ ERROR non-primitive cast: `String` as `bool` [E0605]\n+\n+    let _ = Foo as bool;\n+    //~^ ERROR non-primitive cast: `Foo` as `bool` [E0605]\n+}\n+\n+fn _slice(bar: &[i32]) -> bool {\n+    bar as bool\n+    //~^ ERROR casting `&[i32]` as `bool` is invalid [E0606]\n+}"}, {"sha": "7115c7704ca29dfd4af9160e2a748e6981767857", "filename": "tests/ui/cast/issue-106883-is-empty.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5610231454f81d09f0a21f7fbdf58ad44898759c/tests%2Fui%2Fcast%2Fissue-106883-is-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5610231454f81d09f0a21f7fbdf58ad44898759c/tests%2Fui%2Fcast%2Fissue-106883-is-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast%2Fissue-106883-is-empty.stderr?ref=5610231454f81d09f0a21f7fbdf58ad44898759c", "patch": "@@ -0,0 +1,58 @@\n+error[E0606]: casting `&'static str` as `bool` is invalid\n+  --> $DIR/issue-106883-is-empty.rs:14:13\n+   |\n+LL |     let _ = \"foo\" as bool;\n+   |             ^^^^^^^^^^^^^\n+   |\n+help: consider using the `is_empty` method on `&'static str` to determine if it contains anything\n+   |\n+LL |     let _ = !\"foo\".is_empty();\n+   |             +     ~~~~~~~~~~~\n+\n+error[E0605]: non-primitive cast: `String` as `bool`\n+  --> $DIR/issue-106883-is-empty.rs:17:13\n+   |\n+LL |     let _ = String::from(\"foo\") as bool;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+   |\n+note: this expression `Deref`s to `str` which implements `is_empty`\n+  --> $DIR/issue-106883-is-empty.rs:17:13\n+   |\n+LL |     let _ = String::from(\"foo\") as bool;\n+   |             ^^^^^^^^^^^^^^^^^^^\n+help: consider using the `is_empty` method on `String` to determine if it contains anything\n+   |\n+LL |     let _ = !String::from(\"foo\").is_empty();\n+   |             +                   ~~~~~~~~~~~\n+\n+error[E0605]: non-primitive cast: `Foo` as `bool`\n+  --> $DIR/issue-106883-is-empty.rs:20:13\n+   |\n+LL |     let _ = Foo as bool;\n+   |             ^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+   |\n+note: this expression `Deref`s to `[u8]` which implements `is_empty`\n+  --> $DIR/issue-106883-is-empty.rs:20:13\n+   |\n+LL |     let _ = Foo as bool;\n+   |             ^^^\n+help: consider using the `is_empty` method on `Foo` to determine if it contains anything\n+   |\n+LL |     let _ = !Foo.is_empty();\n+   |             +   ~~~~~~~~~~~\n+\n+error[E0606]: casting `&[i32]` as `bool` is invalid\n+  --> $DIR/issue-106883-is-empty.rs:25:5\n+   |\n+LL |     bar as bool\n+   |     ^^^^^^^^^^^\n+   |\n+help: consider using the `is_empty` method on `&[i32]` to determine if it contains anything\n+   |\n+LL |     !bar.is_empty()\n+   |     +   ~~~~~~~~~~~\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0605, E0606.\n+For more information about an error, try `rustc --explain E0605`."}]}