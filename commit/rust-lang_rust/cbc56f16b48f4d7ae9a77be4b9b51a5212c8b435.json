{"sha": "cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYzU2ZjE2YjQ4ZjRkN2FlOWE3N2JlNGI5YjUxYTUyMTJjOGI0MzU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-10-04T03:28:40Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-10-04T03:28:40Z"}, "message": "add +d16 and +fp-only-sp to thumbv7em-none-eabihf and documentation", "tree": {"sha": "317978ca406c544e77701546305fea1dbb19f266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/317978ca406c544e77701546305fea1dbb19f266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435", "html_url": "https://github.com/rust-lang/rust/commit/cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435/comments", "author": null, "committer": null, "parents": [{"sha": "6d0b8aeb97215e21053deb112b76fa12ab41340f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0b8aeb97215e21053deb112b76fa12ab41340f", "html_url": "https://github.com/rust-lang/rust/commit/6d0b8aeb97215e21053deb112b76fa12ab41340f"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "61be7ff2f5d1b8e160fb311ecbb4427d1830c5a8", "filename": "src/librustc_back/target/thumb_base.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs?ref=cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435", "patch": "@@ -8,14 +8,48 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// These 4 `thumbv*` targets cover the ARM Cortex-M family of processors which are widely used in\n+// microcontrollers. Namely, all these processors:\n+//\n+// - Cortex-M0\n+// - Cortex-M0+\n+// - Cortex-M1\n+// - Cortex-M3\n+// - Cortex-M4(F)\n+// - Cortex-M7(F)\n+//\n+// We have opted for 4 targets instead of one target per processor (e.g. `cortex-m0`, `cortex-m3`,\n+// etc) because the differences between some processors like the cortex-m0 and cortex-m1 are almost\n+// non-existent from the POV of codegen so it doesn't make sense to have separate targets for them.\n+// And if differences exist between two processors under the same target, rustc flags can be used to\n+// optimize for one processor or the other.\n+//\n+// Also, we have not chosen a single target (`arm-none-eabi`) like GCC does because this makes\n+// difficult to integrate Rust code and C code. Targeting the Cortex-M4 requires different gcc flags\n+// than the ones you would use for the Cortex-M0 and with a single target it'd be impossible to\n+// differentiate one processor from the other.\n+//\n+// About arm vs thumb in the name. The Cortex-M devices only support the Thumb instruction set,\n+// which is more compact (higher code density), and not the ARM instruction set. That's why LLVM\n+// triples use thumb instead of arm. We follow suit because having thumb in the name let us\n+// differentiate these targets from our other `arm(v7)-*-*-gnueabi(hf)` targets in the context of\n+// build scripts / gcc flags.\n+\n use target::TargetOptions;\n use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    // See rust-lang/rfcs#1645 for a discussion about these defaults\n     TargetOptions {\n         executables: true,\n+        // In 99%+ of cases, we want to use the `arm-none-eabi-gcc` compiler (there aren't many\n+        // options around)\n         linker: \"arm-none-eabi-gcc\".to_string(),\n+        // Because these devices have very little resources having an unwinder is too onerous so we\n+        // default to \"abort\" because the \"unwind\" strategy is very rare.\n         panic_strategy: \"abort\".to_string(),\n+        // Similarly, one almost always never wants to use relocatable code because of the extra\n+        // costs it involves.\n         relocation_model: \"static\".to_string(),\n         .. Default::default()\n     }"}, {"sha": "d00744353a64d4f81adfd5b74a6b032e7dd9c027", "filename": "src/librustc_back/target/thumbv6m_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435/src%2Flibrustc_back%2Ftarget%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435/src%2Flibrustc_back%2Ftarget%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv6m_none_eabi.rs?ref=cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Targets the Cortex-M0, Cortex-M0+ and Cortex-M1 processors (ARMv6-M architecture)\n+\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {"}, {"sha": "6f5216e0f776dd90465169b6fdb8002b61850845", "filename": "src/librustc_back/target/thumbv7em_none_eabi.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabi.rs?ref=cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435", "patch": "@@ -8,6 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Targets the Cortex-M4 and Cortex-M7 processors (ARMv7E-M)\n+//\n+// This target assumes that the device doesn't have a FPU (Floating Point Unit) and lowers all the\n+// floating point operations to software routines (intrinsics).\n+//\n+// As such, this target uses the \"soft\" calling convention (ABI) where floating point values are\n+// passed to/from subroutines via general purpose registers (R0, R1, etc.).\n+//\n+// To opt-in to hardware accelerated floating point operations, you can use, for example,\n+// `-C target-feature=+vfp4` or `-C target-cpu=cortex-m4`.\n+\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {"}, {"sha": "74bb9915e68e702b9ef8d329dc491e8c3a4eb523", "filename": "src/librustc_back/target/thumbv7em_none_eabihf.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv7em_none_eabihf.rs?ref=cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435", "patch": "@@ -8,6 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Targets the Cortex-M4F and Cortex-M7F processors (ARMv7E-M)\n+//\n+// This target assumes that the device does have a FPU (Floating Point Unit) and lowers all (single\n+// precision) floating point operations to hardware instructions.\n+//\n+// Additionally, this target uses the \"hard\" floating convention (ABI) where floating point values\n+// are passed to/from subroutines via FPU registers (S0, S1, D0, D1, etc.).\n+//\n+// To opt into double precision hardware support, use the `-C target-feature=-fp-only-sp` flag.\n+\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n@@ -22,8 +32,13 @@ pub fn target() -> TargetResult {\n         target_vendor: \"\".to_string(),\n \n         options: TargetOptions {\n-            // vfp4 lowest common denominator between the Cortex-M4 (vfp4) and the Cortex-M7 (vfp5)\n-            features: \"+vfp4\".to_string(),\n+            // `+vfp4` is the lowest common denominator between the Cortex-M4 (vfp4-16) and the\n+            // Cortex-M7 (vfp5)\n+            // `+d16` both the Cortex-M4 and the Cortex-M7 only have 16 double-precision registers\n+            // available\n+            // `+fp-only-sp` The Cortex-M4 only supports single precision floating point operations\n+            // whereas in the Cortex-M7 double precision is optional\n+            features: \"+vfp4,+d16,+fp-only-sp\".to_string(),\n             max_atomic_width: 32,\n             .. super::thumb_base::opts()\n         }"}, {"sha": "1ff95e1080b4944dd7d89f1de3da1f270ea713bb", "filename": "src/librustc_back/target/thumbv7m_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435/src%2Flibrustc_back%2Ftarget%2Fthumbv7m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435/src%2Flibrustc_back%2Ftarget%2Fthumbv7m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumbv7m_none_eabi.rs?ref=cbc56f16b48f4d7ae9a77be4b9b51a5212c8b435", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Targets the Cortex-M3 processor (ARMv7-M)\n+\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {"}]}