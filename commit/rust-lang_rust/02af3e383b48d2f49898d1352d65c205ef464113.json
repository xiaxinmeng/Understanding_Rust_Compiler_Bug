{"sha": "02af3e383b48d2f49898d1352d65c205ef464113", "node_id": "C_kwDOAAsO6NoAKDAyYWYzZTM4M2I0OGQyZjQ5ODk4ZDEzNTJkNjVjMjA1ZWY0NjQxMTM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-13T11:11:06Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-13T11:11:06Z"}, "message": "Sync from rust 7b4f48927dce585f747a58083b45ab62b9d73a53", "tree": {"sha": "8a9a639e50d61dfd790ce0ff2ede2e09240b3abb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a9a639e50d61dfd790ce0ff2ede2e09240b3abb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02af3e383b48d2f49898d1352d65c205ef464113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02af3e383b48d2f49898d1352d65c205ef464113", "html_url": "https://github.com/rust-lang/rust/commit/02af3e383b48d2f49898d1352d65c205ef464113", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02af3e383b48d2f49898d1352d65c205ef464113/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b9e8c65d5b590ae215ffdcd63d3c9c6031e331c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9e8c65d5b590ae215ffdcd63d3c9c6031e331c", "html_url": "https://github.com/rust-lang/rust/commit/0b9e8c65d5b590ae215ffdcd63d3c9c6031e331c"}, {"sha": "7e23d77cac430828fec0031199b4145a8b850fa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e23d77cac430828fec0031199b4145a8b850fa2", "html_url": "https://github.com/rust-lang/rust/commit/7e23d77cac430828fec0031199b4145a8b850fa2"}], "stats": {"total": 42, "additions": 15, "deletions": 27}, "files": [{"sha": "e64daf96b01c92f26dac3a49d21adc43dc6d8975", "filename": "example/alloc_system.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02af3e383b48d2f49898d1352d65c205ef464113/example%2Falloc_system.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02af3e383b48d2f49898d1352d65c205ef464113/example%2Falloc_system.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Falloc_system.rs?ref=02af3e383b48d2f49898d1352d65c205ef464113", "patch": "@@ -1,12 +1,6 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n+// SPDX-License-Identifier: MIT OR Apache-2.0\n+// SPDX-FileCopyrightText: The Rust Project Developers (see https://thanks.rust-lang.org)\n+\n #![no_std]\n \n pub struct System;"}, {"sha": "2c246ceb37d54fa43940774b79a359f39c346da3", "filename": "src/allocator.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/02af3e383b48d2f49898d1352d65c205ef464113/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02af3e383b48d2f49898d1352d65c205ef464113/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=02af3e383b48d2f49898d1352d65c205ef464113", "patch": "@@ -4,6 +4,7 @@\n use crate::prelude::*;\n \n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use rustc_codegen_ssa::base::allocator_kind_for_codegen;\n use rustc_session::config::OomStrategy;\n use rustc_span::symbol::sym;\n \n@@ -13,24 +14,15 @@ pub(crate) fn codegen(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n ) -> bool {\n-    let any_dynamic_crate = tcx.dependency_formats(()).iter().any(|(_, list)| {\n-        use rustc_middle::middle::dependency_format::Linkage;\n-        list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n-    });\n-    if any_dynamic_crate {\n-        false\n-    } else if let Some(kind) = tcx.allocator_kind(()) {\n-        codegen_inner(\n-            module,\n-            unwind_context,\n-            kind,\n-            tcx.alloc_error_handler_kind(()).unwrap(),\n-            tcx.sess.opts.unstable_opts.oom,\n-        );\n-        true\n-    } else {\n-        false\n-    }\n+    let Some(kind) = allocator_kind_for_codegen(tcx) else { return false };\n+    codegen_inner(\n+        module,\n+        unwind_context,\n+        kind,\n+        tcx.alloc_error_handler_kind(()).unwrap(),\n+        tcx.sess.opts.unstable_opts.oom,\n+    );\n+    true\n }\n \n fn codegen_inner("}, {"sha": "d0af3729b237c1cf93e927281b4159680a0aa33c", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02af3e383b48d2f49898d1352d65c205ef464113/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02af3e383b48d2f49898d1352d65c205ef464113/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=02af3e383b48d2f49898d1352d65c205ef464113", "patch": "@@ -815,6 +815,7 @@ fn codegen_stmt<'tcx>(\n         | StatementKind::Nop\n         | StatementKind::FakeRead(..)\n         | StatementKind::Retag { .. }\n+        | StatementKind::PlaceMention(..)\n         | StatementKind::AscribeUserType(..) => {}\n \n         StatementKind::Coverage { .. } => fx.tcx.sess.fatal(\"-Zcoverage is unimplemented\"),"}, {"sha": "31278f810e911b3d5cc11a512643fd762979559e", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02af3e383b48d2f49898d1352d65c205ef464113/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02af3e383b48d2f49898d1352d65c205ef464113/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=02af3e383b48d2f49898d1352d65c205ef464113", "patch": "@@ -529,6 +529,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                         | StatementKind::StorageDead(_)\n                         | StatementKind::Retag(_, _)\n                         | StatementKind::AscribeUserType(_, _)\n+                        | StatementKind::PlaceMention(..)\n                         | StatementKind::Coverage(_)\n                         | StatementKind::ConstEvalCounter\n                         | StatementKind::Nop => {}"}]}