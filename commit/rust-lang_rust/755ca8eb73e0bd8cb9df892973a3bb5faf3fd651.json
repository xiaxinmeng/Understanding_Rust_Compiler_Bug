{"sha": "755ca8eb73e0bd8cb9df892973a3bb5faf3fd651", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NWNhOGViNzNlMGJkOGNiOWRmODkyOTczYTNiYjVmYWYzZmQ2NTE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-21T02:50:29Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-21T02:54:14Z"}, "message": "Correctly check that ! functions always diverge\n\nAlso make _|_ unify with any type.", "tree": {"sha": "4076cb9c63738f1c5f439f515282f7fe07564ecf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4076cb9c63738f1c5f439f515282f7fe07564ecf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/755ca8eb73e0bd8cb9df892973a3bb5faf3fd651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/755ca8eb73e0bd8cb9df892973a3bb5faf3fd651", "html_url": "https://github.com/rust-lang/rust/commit/755ca8eb73e0bd8cb9df892973a3bb5faf3fd651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/755ca8eb73e0bd8cb9df892973a3bb5faf3fd651/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "699986d192a90313cb1fdaf1a650247689a13cee", "url": "https://api.github.com/repos/rust-lang/rust/commits/699986d192a90313cb1fdaf1a650247689a13cee", "html_url": "https://github.com/rust-lang/rust/commit/699986d192a90313cb1fdaf1a650247689a13cee"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "29f1dab6ede02cff1affb8995aa0ccec7e9867f6", "filename": "src/comp/middle/tstate/ann.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/755ca8eb73e0bd8cb9df892973a3bb5faf3fd651/src%2Fcomp%2Fmiddle%2Ftstate%2Fann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755ca8eb73e0bd8cb9df892973a3bb5faf3fd651/src%2Fcomp%2Fmiddle%2Ftstate%2Fann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fann.rs?ref=755ca8eb73e0bd8cb9df892973a3bb5faf3fd651", "patch": "@@ -109,6 +109,13 @@ fn set_in_poststate(uint i, &pre_and_post_state s) -> bool {\n   ret !was_set;\n }\n \n+fn clear_in_poststate(uint i, &pre_and_post_state s) -> bool {\n+  // sets the ith bit in p's post\n+  auto was_set = bitv::get(s.poststate, i);\n+  bitv::set(s.poststate, i, false);\n+  ret was_set;\n+}\n+\n // Sets all the bits in a's precondition to equal the\n // corresponding bit in p's precondition.\n fn set_precondition(ts_ann a, &precond p) -> () {"}, {"sha": "8de90452b6dc111fbf4399e862c2263600627897", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/755ca8eb73e0bd8cb9df892973a3bb5faf3fd651/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755ca8eb73e0bd8cb9df892973a3bb5faf3fd651/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=755ca8eb73e0bd8cb9df892973a3bb5faf3fd651", "patch": "@@ -29,6 +29,7 @@ import tstate::ann::intersect;\n import tstate::ann::clone;\n import tstate::ann::set_in_postcond;\n import tstate::ann::set_in_poststate;\n+import tstate::ann::clear_in_poststate;\n              \n fn bit_num(def_id v, fn_info m) -> uint {\n   assert (m.vars.contains_key(v));\n@@ -137,3 +138,10 @@ fn gen_poststate(&fn_ctxt fcx, &ann a, def_id id) -> bool {\n   ret set_in_poststate(i, (ann_to_ts_ann(fcx.ccx, a)).states);\n }\n \n+fn kill_poststate(&fn_ctxt fcx, &ann a, def_id id) -> bool {\n+  log \"kill_poststate\";\n+  assert (fcx.enclosing.vars.contains_key(id));\n+  let uint i = (fcx.enclosing.vars.get(id))._0;\n+  ret clear_in_poststate(i, (ann_to_ts_ann(fcx.ccx, a)).states);\n+}\n+"}, {"sha": "a94982e7c9d0c3b07caa64eb66a2f73a805434e5", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/755ca8eb73e0bd8cb9df892973a3bb5faf3fd651/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755ca8eb73e0bd8cb9df892973a3bb5faf3fd651/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=755ca8eb73e0bd8cb9df892973a3bb5faf3fd651", "patch": "@@ -11,6 +11,8 @@ import front::ast::ident;\n import front::ast::def_id;\n import front::ast::ty_param;\n import front::ast::crate;\n+import front::ast::return;\n+import front::ast::noreturn;\n \n import front::ast::expr;\n import middle::ty::type_is_nil;\n@@ -124,17 +126,29 @@ fn check_states_against_conditions(&fn_ctxt fcx, &_fn f, &ann a) -> () {\n     auto do_inner = bind do_inner_(fcx, _, post);\n     option::map[@expr, ()](do_inner, f.body.node.expr);\n   \n+    auto cf = fcx.enclosing.cf;\n     /* Finally, check that the return value is initialized */\n     if (f.proto == ast::proto_fn\n         && ! promises(*post, fcx.id, enclosing)\n         && ! type_is_nil(fcx.ccx.tcx,\n-                         ret_ty_of_fn(fcx.ccx.tcx, a)) ) {\n+                         ret_ty_of_fn(fcx.ccx.tcx, a))\n+        && cf == return) {\n         fcx.ccx.tcx.sess.span_note(f.body.span, \"In function \" + fcx.name +\n           \", not all control paths return a value\");\n         fcx.ccx.tcx.sess.span_err(f.decl.output.span,\n             \"see declared return type of '\" + ty_to_str(*f.decl.output) +\n             \"'\");\n     }\n+    else if (cf == noreturn) {\n+        // check that this really always fails\n+        // the fcx.id bit means \"returns\" for a returning fn,\n+        // \"diverges\" for a non-returning fn (I need to use the word\n+        if (! promises(*post, fcx.id, enclosing)) {\n+            fcx.ccx.tcx.sess.span_err(f.body.span,\n+              \"In non-returning function \" + fcx.name +\n+              \", some control paths may return to the caller\");\n+        }\n+    }\n \n }\n "}, {"sha": "6175a48972fd607b3ef03750159027c75faadd04", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/755ca8eb73e0bd8cb9df892973a3bb5faf3fd651/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755ca8eb73e0bd8cb9df892973a3bb5faf3fd651/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=755ca8eb73e0bd8cb9df892973a3bb5faf3fd651", "patch": "@@ -56,6 +56,7 @@ import bitvectors::intersect_postconds;\n import bitvectors::declare_var;\n import bitvectors::bit_num;\n import bitvectors::gen_poststate;\n+import bitvectors::kill_poststate;\n \n import front::ast;\n import front::ast::_fn;\n@@ -373,6 +374,13 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n     case (expr_ret(?maybe_ret_val, ?a)) {\n         changed = extend_prestate_ann(fcx.ccx, a, pres) || changed;\n         set_poststate_ann(fcx.ccx, a, false_postcond(num_local_vars));\n+        /* return from an always-failing function clears the return bit */\n+        alt (fcx.enclosing.cf) {\n+            case (noreturn) {\n+                kill_poststate(fcx, a, fcx.id);\n+            }\n+            case (_) {}\n+        }\n         alt(maybe_ret_val) {\n             case (none[@expr]) { /* do nothing */ }\n             case (some[@expr](?ret_val)) {"}, {"sha": "10db57626f0e9aaefe94d26a382b0cafa8788e5c", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/755ca8eb73e0bd8cb9df892973a3bb5faf3fd651/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755ca8eb73e0bd8cb9df892973a3bb5faf3fd651/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=755ca8eb73e0bd8cb9df892973a3bb5faf3fd651", "patch": "@@ -2288,7 +2288,8 @@ mod unify {\n \n         alt (struct(cx.tcx, expected)) {\n             case (ty::ty_nil)        { ret struct_cmp(cx, expected, actual); }\n-            case (ty::ty_bot)        { ret struct_cmp(cx, expected, actual); }\n+            // _|_ unifies with anything\n+            case (ty::ty_bot)        { ret ures_ok(expected);                }\n             case (ty::ty_bool)       { ret struct_cmp(cx, expected, actual); }\n             case (ty::ty_int)        { ret struct_cmp(cx, expected, actual); }\n             case (ty::ty_uint)       { ret struct_cmp(cx, expected, actual); }"}]}