{"sha": "4c0b7ac7ba97092faf4a1322981ad6e5b1f01111", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMGI3YWM3YmE5NzA5MmZhZjRhMTMyMjk4MWFkNmU1YjFmMDExMTE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-23T21:47:22Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-23T21:47:22Z"}, "message": "GenericParam does not need to be a HIR owner.", "tree": {"sha": "ebd8521efd3b1d535951767ed6443c7e2e636ab1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebd8521efd3b1d535951767ed6443c7e2e636ab1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c0b7ac7ba97092faf4a1322981ad6e5b1f01111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0b7ac7ba97092faf4a1322981ad6e5b1f01111", "html_url": "https://github.com/rust-lang/rust/commit/4c0b7ac7ba97092faf4a1322981ad6e5b1f01111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c0b7ac7ba97092faf4a1322981ad6e5b1f01111/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d04c3aa8656f6588c87bafafb34d51239dab98bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d04c3aa8656f6588c87bafafb34d51239dab98bb", "html_url": "https://github.com/rust-lang/rust/commit/d04c3aa8656f6588c87bafafb34d51239dab98bb"}], "stats": {"total": 60, "additions": 6, "deletions": 54}, "files": [{"sha": "65e2ea9df6d8047d78cc6afa86e4e97edfa03bbf", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4c0b7ac7ba97092faf4a1322981ad6e5b1f01111/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0b7ac7ba97092faf4a1322981ad6e5b1f01111/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=4c0b7ac7ba97092faf4a1322981ad6e5b1f01111", "patch": "@@ -520,10 +520,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         }\n                         self.visit_fn_ret_ty(&f.decl.output)\n                     }\n-                    TyKind::ImplTrait(def_node_id, _) => {\n-                        self.lctx.allocate_hir_id_counter(def_node_id);\n-                        visit::walk_ty(self, t);\n-                    }\n                     _ => visit::walk_ty(self, t),\n                 }\n             }\n@@ -1431,14 +1427,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         // Add a definition for the in-band `Param`.\n                         let def_id = self.resolver.local_def_id(def_node_id);\n \n-                        self.allocate_hir_id_counter(def_node_id);\n-\n-                        let hir_bounds = self.with_hir_id_owner(def_node_id, |this| {\n-                            this.lower_param_bounds(\n-                                bounds,\n-                                ImplTraitContext::Universal(in_band_ty_params, parent_def_id),\n-                            )\n-                        });\n+                        let hir_bounds = self.lower_param_bounds(\n+                            bounds,\n+                            ImplTraitContext::Universal(in_band_ty_params, parent_def_id),\n+                        );\n                         // Set the name to `impl Bound1 + Bound2`.\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n                         in_band_ty_params.push(hir::GenericParam {"}, {"sha": "69a615b223a8dc1a0157dd4be63b35d5fe5e2e4d", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4c0b7ac7ba97092faf4a1322981ad6e5b1f01111/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0b7ac7ba97092faf4a1322981ad6e5b1f01111/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=4c0b7ac7ba97092faf4a1322981ad6e5b1f01111", "patch": "@@ -373,26 +373,8 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_generic_param(&mut self, param: &'hir GenericParam<'hir>) {\n-        if let hir::GenericParamKind::Type {\n-            synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-            ..\n-        } = param.kind\n-        {\n-            debug_assert_eq!(\n-                param.hir_id.owner,\n-                self.definitions.opt_hir_id_to_local_def_id(param.hir_id).unwrap()\n-            );\n-            self.with_dep_node_owner(param.hir_id.owner, param, |this, hash| {\n-                this.insert_with_hash(param.span, param.hir_id, Node::GenericParam(param), hash);\n-\n-                this.with_parent(param.hir_id, |this| {\n-                    intravisit::walk_generic_param(this, param);\n-                });\n-            });\n-        } else {\n-            self.insert(param.span, param.hir_id, Node::GenericParam(param));\n-            intravisit::walk_generic_param(self, param);\n-        }\n+        self.insert(param.span, param.hir_id, Node::GenericParam(param));\n+        intravisit::walk_generic_param(self, param);\n     }\n \n     fn visit_trait_item(&mut self, ti: &'hir TraitItem<'hir>) {"}, {"sha": "944a3097a61c33ee476631a3aa956d3ab55018be", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c0b7ac7ba97092faf4a1322981ad6e5b1f01111/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0b7ac7ba97092faf4a1322981ad6e5b1f01111/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=4c0b7ac7ba97092faf4a1322981ad6e5b1f01111", "patch": "@@ -172,17 +172,4 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n         // we are currently in. So for those it's correct that they have a\n         // different owner.\n     }\n-\n-    fn visit_generic_param(&mut self, param: &'hir hir::GenericParam<'hir>) {\n-        if let hir::GenericParamKind::Type {\n-            synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-            ..\n-        } = param.kind\n-        {\n-            // Synthetic impl trait parameters are owned by the node of the desugared type.\n-            // This means it is correct for them to have a different owner.\n-        } else {\n-            intravisit::walk_generic_param(self, param);\n-        }\n-    }\n }"}, {"sha": "65f16ff45a10ca1b7347a51ca5cc06adb60def34", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c0b7ac7ba97092faf4a1322981ad6e5b1f01111/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0b7ac7ba97092faf4a1322981ad6e5b1f01111/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=4c0b7ac7ba97092faf4a1322981ad6e5b1f01111", "patch": "@@ -320,15 +320,6 @@ impl<'tcx> DumpVisitor<'tcx> {\n         for param in generics.params {\n             match param.kind {\n                 hir::GenericParamKind::Lifetime { .. } => {}\n-                hir::GenericParamKind::Type {\n-                    synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                    ..\n-                } => {\n-                    return self\n-                        .nest_typeck_results(self.tcx.hir().local_def_id(param.hir_id), |this| {\n-                            this.visit_generics(generics)\n-                        });\n-                }\n                 hir::GenericParamKind::Type { .. } => {\n                     let param_ss = param.name.ident().span;\n                     let name = escape(self.span.snippet(param_ss));"}]}