{"sha": "06f4950cbdb5a0a59063156af6383283b1aae30e", "node_id": "C_kwDOAAsO6NoAKDA2ZjQ5NTBjYmRiNWEwYTU5MDYzMTU2YWY2MzgzMjgzYjFhYWUzMGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-02T13:10:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-02T13:10:49Z"}, "message": "Auto merge of #100032 - BoxyUwU:no_ty_in_placeholder_const, r=compiler-errors\n\nmake `PlaceholderConst` not store the type of the const\n\nCurrently the `Placeholder` variant on `ConstKind` is 28 bytes when with this PR its 8 bytes, i am not sure this is really useful at all rn since `Unevaluated` and `Value` variants are huge still but eventually it should be possible to get both down to 16 bytes :thinking:. Mostly opening this to see if this change has any perf impact when done before it can make `ConstKind`/`ConstS` smaller", "tree": {"sha": "6db3b95354686aed9c475d474da9edd8ef626d1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6db3b95354686aed9c475d474da9edd8ef626d1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06f4950cbdb5a0a59063156af6383283b1aae30e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06f4950cbdb5a0a59063156af6383283b1aae30e", "html_url": "https://github.com/rust-lang/rust/commit/06f4950cbdb5a0a59063156af6383283b1aae30e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06f4950cbdb5a0a59063156af6383283b1aae30e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "792bc5a0102d0973d42183a2b267850bb905236f", "url": "https://api.github.com/repos/rust-lang/rust/commits/792bc5a0102d0973d42183a2b267850bb905236f", "html_url": "https://github.com/rust-lang/rust/commit/792bc5a0102d0973d42183a2b267850bb905236f"}, {"sha": "49d001c5f364193350f5ef92522f3be7828e34e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/49d001c5f364193350f5ef92522f3be7828e34e8", "html_url": "https://github.com/rust-lang/rust/commit/49d001c5f364193350f5ef92522f3be7828e34e8"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "ca7862c9dc46778be5f69fa54b76bf54bfc48a86", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=06f4950cbdb5a0a59063156af6383283b1aae30e", "patch": "@@ -511,7 +511,9 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             }\n             ty::ConstKind::Placeholder(placeholder) => {\n                 return self.canonicalize_const_var(\n-                    CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderConst(placeholder) },\n+                    CanonicalVarInfo {\n+                        kind: CanonicalVarKind::PlaceholderConst(placeholder, ct.ty()),\n+                    },\n                     ct,\n                 );\n             }\n@@ -695,11 +697,14 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n                             ..placeholder\n                         })\n                     }\n-                    CanonicalVarKind::PlaceholderConst(placeholder) => {\n-                        CanonicalVarKind::PlaceholderConst(ty::Placeholder {\n-                            universe: reverse_universe_map[&placeholder.universe],\n-                            ..placeholder\n-                        })\n+                    CanonicalVarKind::PlaceholderConst(placeholder, t) => {\n+                        CanonicalVarKind::PlaceholderConst(\n+                            ty::Placeholder {\n+                                universe: reverse_universe_map[&placeholder.universe],\n+                                ..placeholder\n+                            },\n+                            t,\n+                        )\n                     }\n                 },\n             })"}, {"sha": "a9294a85e51894b15688cab9dba92b0babbf802c", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=06f4950cbdb5a0a59063156af6383283b1aae30e", "patch": "@@ -144,13 +144,13 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 )\n                 .into(),\n \n-            CanonicalVarKind::PlaceholderConst(ty::PlaceholderConst { universe, name }) => {\n+            CanonicalVarKind::PlaceholderConst(ty::PlaceholderConst { universe, name }, ty) => {\n                 let universe_mapped = universe_map(universe);\n                 let placeholder_mapped = ty::PlaceholderConst { universe: universe_mapped, name };\n                 self.tcx\n                     .mk_const(ty::ConstS {\n                         kind: ty::ConstKind::Placeholder(placeholder_mapped),\n-                        ty: name.ty,\n+                        ty,\n                     })\n                     .into()\n             }"}, {"sha": "9bdd437333bb6360beca59f71c2ab89413274f53", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=06f4950cbdb5a0a59063156af6383283b1aae30e", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 self.tcx.mk_const(ty::ConstS {\n                     kind: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n                         universe: next_universe,\n-                        name: ty::BoundConst { var: bound_var, ty },\n+                        name: bound_var,\n                     }),\n                     ty,\n                 })"}, {"sha": "1546c9ccff2e62a0ebd4e10ffc6895e27e30ff0c", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=06f4950cbdb5a0a59063156af6383283b1aae30e", "patch": "@@ -2067,7 +2067,7 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n                     ty,\n                     kind: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n                         universe: ty::UniverseIndex::ROOT,\n-                        name: ty::BoundConst { ty, var: ty::BoundVar::from_usize(idx) },\n+                        name: ty::BoundVar::from_usize(idx),\n                     }),\n                 })\n                 .into()"}, {"sha": "200de9079c2188b95b8796917d14c05250547065", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=06f4950cbdb5a0a59063156af6383283b1aae30e", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> CanonicalVarInfo<'tcx> {\n             CanonicalVarKind::Region(_) => true,\n             CanonicalVarKind::PlaceholderRegion(..) => false,\n             CanonicalVarKind::Const(..) => true,\n-            CanonicalVarKind::PlaceholderConst(_) => false,\n+            CanonicalVarKind::PlaceholderConst(_, _) => false,\n         }\n     }\n }\n@@ -133,7 +133,7 @@ pub enum CanonicalVarKind<'tcx> {\n     Const(ty::UniverseIndex, Ty<'tcx>),\n \n     /// A \"placeholder\" that represents \"any const\".\n-    PlaceholderConst(ty::PlaceholderConst<'tcx>),\n+    PlaceholderConst(ty::PlaceholderConst<'tcx>, Ty<'tcx>),\n }\n \n impl<'tcx> CanonicalVarKind<'tcx> {\n@@ -148,7 +148,7 @@ impl<'tcx> CanonicalVarKind<'tcx> {\n             CanonicalVarKind::Region(ui) => ui,\n             CanonicalVarKind::PlaceholderRegion(placeholder) => placeholder.universe,\n             CanonicalVarKind::Const(ui, _) => ui,\n-            CanonicalVarKind::PlaceholderConst(placeholder) => placeholder.universe,\n+            CanonicalVarKind::PlaceholderConst(placeholder, _) => placeholder.universe,\n         }\n     }\n }"}, {"sha": "38e72d36f6e63e085de814b8b74e295d4c9a9f87", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=06f4950cbdb5a0a59063156af6383283b1aae30e", "patch": "@@ -1200,7 +1200,7 @@ pub struct BoundConst<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n \n-pub type PlaceholderConst<'tcx> = Placeholder<BoundConst<'tcx>>;\n+pub type PlaceholderConst<'tcx> = Placeholder<BoundVar>;\n \n /// A `DefId` which, in case it is a const argument, is potentially bundled with\n /// the `DefId` of the generic parameter it instantiates."}, {"sha": "6a4f582ac504447d7f3c4870ac02d1a4d0ddc05e", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=06f4950cbdb5a0a59063156af6383283b1aae30e", "patch": "@@ -744,10 +744,7 @@ impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n             }\n             ty::ConstKind::Bound(debruijn, bound_const) if debruijn >= self.current_index => {\n                 let universe = self.universe_for(debruijn);\n-                let p = ty::PlaceholderConst {\n-                    universe,\n-                    name: ty::BoundConst { var: bound_const, ty: ct.ty() },\n-                };\n+                let p = ty::PlaceholderConst { universe, name: bound_const };\n                 self.mapped_consts.insert(p, bound_const);\n                 self.infcx\n                     .tcx"}, {"sha": "f76386fa720dfaa6b2e9e5dbe95ba8ccae81ba10", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f4950cbdb5a0a59063156af6383283b1aae30e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=06f4950cbdb5a0a59063156af6383283b1aae30e", "patch": "@@ -76,7 +76,7 @@ pub(crate) fn evaluate_goal<'tcx>(\n                         chalk_ir::UniverseIndex { counter: ui.index() },\n                     ),\n                     CanonicalVarKind::Const(_ui, _ty) => unimplemented!(),\n-                    CanonicalVarKind::PlaceholderConst(_pc) => unimplemented!(),\n+                    CanonicalVarKind::PlaceholderConst(_pc, _ty) => unimplemented!(),\n                 }),\n             ),\n             value: obligation.value.lower_into(interner),"}]}