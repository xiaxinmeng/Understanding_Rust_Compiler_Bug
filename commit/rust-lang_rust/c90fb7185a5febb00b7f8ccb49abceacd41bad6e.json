{"sha": "c90fb7185a5febb00b7f8ccb49abceacd41bad6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MGZiNzE4NWE1ZmViYjAwYjdmOGNjYjQ5YWJjZWFjZDQxYmFkNmU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-06T21:13:47Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-16T16:58:37Z"}, "message": "Move spotlight next to the return type", "tree": {"sha": "c74c85b0b0198e4d025975a4341915e238f9839d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c74c85b0b0198e4d025975a4341915e238f9839d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c90fb7185a5febb00b7f8ccb49abceacd41bad6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c90fb7185a5febb00b7f8ccb49abceacd41bad6e", "html_url": "https://github.com/rust-lang/rust/commit/c90fb7185a5febb00b7f8ccb49abceacd41bad6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c90fb7185a5febb00b7f8ccb49abceacd41bad6e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cecd6003b3eb15168421084a27223596517899c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cecd6003b3eb15168421084a27223596517899c", "html_url": "https://github.com/rust-lang/rust/commit/3cecd6003b3eb15168421084a27223596517899c"}], "stats": {"total": 50, "additions": 14, "deletions": 36}, "files": [{"sha": "1a96656b6f23c7f031806d8510561096ca9f4591", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c90fb7185a5febb00b7f8ccb49abceacd41bad6e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c90fb7185a5febb00b7f8ccb49abceacd41bad6e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c90fb7185a5febb00b7f8ccb49abceacd41bad6e", "patch": "@@ -2410,12 +2410,12 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n         f.generics.print()\n     )\n     .len();\n-    write!(w, \"{}<pre class='rust fn'>\", render_spotlight_traits(it));\n+    write!(w, \"<pre class='rust fn'>\");\n     render_attributes(w, it, false);\n     write!(\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n-           {name}{generics}{decl}{where_clause}</pre>\",\n+           {name}{generics}{decl}{spotlight}{where_clause}</pre>\",\n         vis = it.visibility.print_with_space(),\n         constness = f.header.constness.print_with_space(),\n         asyncness = f.header.asyncness.print_with_space(),\n@@ -2425,7 +2425,8 @@ fn item_function(w: &mut Buffer, cx: &Context, it: &clean::Item, f: &clean::Func\n         generics = f.generics.print(),\n         where_clause = WhereClause { gens: &f.generics, indent: 0, end_newline: true },\n         decl = Function { decl: &f.decl, header_len, indent: 0, asyncness: f.header.asyncness }\n-            .print()\n+            .print(),\n+        spotlight = spotlight_decl(&f.decl),\n     );\n     document(w, cx, it)\n }\n@@ -2614,9 +2615,8 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait)\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n         write!(\n             w,\n-            \"<h3 id='{id}' class='method'>{extra}<code>\",\n-            extra = render_spotlight_traits(m),\n-            id = id\n+            \"<h3 id='{id}' class='method'><code>\",\n+            id = id,\n         );\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl);\n         write!(w, \"</code>\");\n@@ -2931,7 +2931,7 @@ fn render_assoc_item(\n         write!(\n             w,\n             \"{}{}{}{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n-                   {generics}{decl}{where_clause}\",\n+                   {generics}{decl}{spotlight}{where_clause}\",\n             if parent == ItemType::Trait { \"    \" } else { \"\" },\n             meth.visibility.print_with_space(),\n             header.constness.print_with_space(),\n@@ -2943,6 +2943,7 @@ fn render_assoc_item(\n             name = name,\n             generics = g.print(),\n             decl = Function { decl: d, header_len, indent, asyncness: header.asyncness }.print(),\n+            spotlight = spotlight_decl(&d),\n             where_clause = WhereClause { gens: g, indent, end_newline }\n         )\n     }\n@@ -3564,16 +3565,6 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool) -> bool {\n     }\n }\n \n-fn render_spotlight_traits(item: &clean::Item) -> String {\n-    match item.inner {\n-        clean::FunctionItem(clean::Function { ref decl, .. })\n-        | clean::TyMethodItem(clean::TyMethod { ref decl, .. })\n-        | clean::MethodItem(clean::Method { ref decl, .. })\n-        | clean::ForeignFunctionItem(clean::Function { ref decl, .. }) => spotlight_decl(decl),\n-        _ => String::new(),\n-    }\n-}\n-\n fn spotlight_decl(decl: &clean::FnDecl) -> String {\n     let mut out = Buffer::html();\n     let mut trait_ = String::new();\n@@ -3622,13 +3613,13 @@ fn spotlight_decl(decl: &clean::FnDecl) -> String {\n         out.insert_str(\n             0,\n             &format!(\n-                \"<div class=\\\"important-traits\\\"><div class='tooltip'>\u24d8\\\n+                \"<span class=\\\"important-traits\\\"><div class='tooltip'>\u24d8\\\n                                     <span class='tooltiptext'>Important traits for {}</span></div>\\\n                                     <div class=\\\"content hidden\\\">\",\n                 trait_\n             ),\n         );\n-        out.push_str(\"</code></div></div>\");\n+        out.push_str(\"</code></div></span>\");\n     }\n \n     out.into_inner()\n@@ -3740,13 +3731,12 @@ fn render_impl(\n                 (true, \" hidden\")\n             };\n         match item.inner {\n-            clean::MethodItem(clean::Method { ref decl, .. })\n-            | clean::TyMethodItem(clean::TyMethod { ref decl, .. }) => {\n+            clean::MethodItem(clean::Method { .. })\n+            | clean::TyMethodItem(clean::TyMethod { .. }) => {\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                     write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n-                    write!(w, \"{}\", spotlight_decl(decl));\n                     write!(w, \"<code>\");\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl);\n                     write!(w, \"</code>\");"}, {"sha": "b780cf5dafb4936fd9725a9d3e027d6be41bd7eb", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c90fb7185a5febb00b7f8ccb49abceacd41bad6e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/c90fb7185a5febb00b7f8ccb49abceacd41bad6e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=c90fb7185a5febb00b7f8ccb49abceacd41bad6e", "patch": "@@ -1082,7 +1082,7 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tfont-size: 16px;\n }\n \n-.tooltip:hover .tooltiptext {\n+.important-traits:hover .tooltiptext {\n \tdisplay: inline;\n }\n \n@@ -1150,6 +1150,7 @@ pre.rust {\n .important-traits {\n \tcursor: pointer;\n \tz-index: 2;\n+\tmargin-left: 5px;\n }\n \n h4 > .important-traits {\n@@ -1555,19 +1556,6 @@ h3.important {\n \ttop: 0px;\n }\n \n-#main > div.important-traits {\n-\tposition: absolute;\n-\tleft: -24px;\n-\tmargin-top: 16px;\n-}\n-\n-.content > .methods > .method > div.important-traits {\n-\tposition: absolute;\n-\tfont-weight: 400;\n-\tleft: -42px;\n-\tmargin-top: 2px;\n-}\n-\n kbd {\n \tdisplay: inline-block;\n \tpadding: 3px 5px;"}]}