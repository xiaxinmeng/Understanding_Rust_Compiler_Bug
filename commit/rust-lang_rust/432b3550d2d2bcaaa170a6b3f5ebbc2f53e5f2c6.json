{"sha": "432b3550d2d2bcaaa170a6b3f5ebbc2f53e5f2c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMmIzNTUwZDJkMmJjYWFhMTcwYTZiM2Y1ZWJiYzJmNTNlNWYyYzY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-21T01:47:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-21T01:47:41Z"}, "message": "Rollup merge of #80171 - pierwill:pierwill-rustcmiddle-tykind, r=lcnr\n\nEdit rustc_middle::ty::TyKind docs\n\n- Add a definition for this enum.\n- Fix typo and missing punctuation.\n- Spell out \"algebraic data type\".", "tree": {"sha": "a20076933440e0f71252f40aec9ecb5ffa5f3d55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a20076933440e0f71252f40aec9ecb5ffa5f3d55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/432b3550d2d2bcaaa170a6b3f5ebbc2f53e5f2c6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf3/69CRBK7hj4Ov3rIwAAdHIIACH8TJgI3cxLyscvx+R+zHhf\n0y7s2o3b9MRbIs/rUnMs62wztR0lzMG+RNxoRsBZRR1FVYiCKakqvUnVm6x2Yidg\nWNxhhdfViZo9Oy5b10UVDWDDLUi4Xst3af19jpMwBcYdZO1+9yFL2ggh+MEVvOAg\nSs/dNe6SbxKCAgjsd9nSI2ZLq3Jn7dASfj49ENnsFRCefj7UnauNknNFG6s+WlMX\nbminmerBJLMAoHiBqb0btkyHYMWEFK7mJj79i4N1tHDqABWT44IbBJkm8Zhtl5Ek\nIBslGE/CfXNiYhIricUUFO8Jai4e9m8TWvX7GaqlBvNkLjnxr9hVUy0vKhtm/Gw=\n=q/Ru\n-----END PGP SIGNATURE-----\n", "payload": "tree a20076933440e0f71252f40aec9ecb5ffa5f3d55\nparent d729e764926bba02422115d5c60e51519de50dea\nparent b228be20c224ab6dfa9498935515bf925d4503b3\nauthor Dylan DPC <dylan.dpc@gmail.com> 1608515261 +0100\ncommitter GitHub <noreply@github.com> 1608515261 +0100\n\nRollup merge of #80171 - pierwill:pierwill-rustcmiddle-tykind, r=lcnr\n\nEdit rustc_middle::ty::TyKind docs\n\n- Add a definition for this enum.\n- Fix typo and missing punctuation.\n- Spell out \"algebraic data type\".\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/432b3550d2d2bcaaa170a6b3f5ebbc2f53e5f2c6", "html_url": "https://github.com/rust-lang/rust/commit/432b3550d2d2bcaaa170a6b3f5ebbc2f53e5f2c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/432b3550d2d2bcaaa170a6b3f5ebbc2f53e5f2c6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d729e764926bba02422115d5c60e51519de50dea", "url": "https://api.github.com/repos/rust-lang/rust/commits/d729e764926bba02422115d5c60e51519de50dea", "html_url": "https://github.com/rust-lang/rust/commit/d729e764926bba02422115d5c60e51519de50dea"}, {"sha": "b228be20c224ab6dfa9498935515bf925d4503b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b228be20c224ab6dfa9498935515bf925d4503b3", "html_url": "https://github.com/rust-lang/rust/commit/b228be20c224ab6dfa9498935515bf925d4503b3"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "dc72a713a7d865ec75de96e0b68d8cda9dc0bc9d", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/432b3550d2d2bcaaa170a6b3f5ebbc2f53e5f2c6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432b3550d2d2bcaaa170a6b3f5ebbc2f53e5f2c6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=432b3550d2d2bcaaa170a6b3f5ebbc2f53e5f2c6", "patch": "@@ -88,6 +88,8 @@ impl BoundRegionKind {\n     }\n }\n \n+/// Defines the kinds of types.\n+///\n /// N.B., if you change this, you'll probably want to change the corresponding\n /// AST structure in `librustc_ast/ast.rs` as well.\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]\n@@ -110,7 +112,7 @@ pub enum TyKind<'tcx> {\n     /// A primitive floating-point type. For example, `f64`.\n     Float(ast::FloatTy),\n \n-    /// Structures, enumerations and unions.\n+    /// Algebraic data types (ADT). For example: structures, enumerations and unions.\n     ///\n     /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.\n     /// That is, even after substitution it is possible that there are type\n@@ -170,11 +172,11 @@ pub enum TyKind<'tcx> {\n     /// `|a| yield a`.\n     Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n \n-    /// A type representin the types stored inside a generator.\n+    /// A type representing the types stored inside a generator.\n     /// This should only appear in GeneratorInteriors.\n     GeneratorWitness(Binder<&'tcx List<Ty<'tcx>>>),\n \n-    /// The never type `!`\n+    /// The never type `!`.\n     Never,\n \n     /// A tuple type. For example, `(i32, bool)`."}]}