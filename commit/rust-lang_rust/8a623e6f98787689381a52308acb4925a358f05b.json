{"sha": "8a623e6f98787689381a52308acb4925a358f05b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNjIzZTZmOTg3ODc2ODkzODFhNTIzMDhhY2I0OTI1YTM1OGYwNWI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-22T22:01:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-22T22:01:00Z"}, "message": "Rollup merge of #78793 - camelid:fixup-structuraleq, r=jyn514\n\nClean up `StructuralEq` docs", "tree": {"sha": "cbcc3a4e066487aeb5a7bfaadfbd06821bac775c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbcc3a4e066487aeb5a7bfaadfbd06821bac775c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a623e6f98787689381a52308acb4925a358f05b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfut+cCRBK7hj4Ov3rIwAAdHIIACD8/ixu67z8tNUppjf5V3AX\n4b3/FdR7rvVpiVCJHxSj9+3aMd1SnZGiY0Ev9I3CrzsYA+EhfhL/9f3J1+iKqqsJ\n7tPyR8LiZNXde6GFaDeOX3KoOD3y0kL7KXZYswyJbNDUsTs+TVt9ok5z80jrplsQ\nUe/DB4aXwZ/h/sr2Xose0mXQ4+L/U+TaMyKoWyvzv/LB0fJ8m3oPqgbzvalshlc7\n1RicLYMhkyFxpiAW5cDXca9YcQNnagQPxljUy43Sq3dtVA60C5Ka8cKYNk1LqVHq\n58I7zQ/ayjuF9mWz8WRW/WCivrL44nsRsq6ZWgjNAgXOVCms2wXBs+hPqu6Tn3s=\n=LclO\n-----END PGP SIGNATURE-----\n", "payload": "tree cbcc3a4e066487aeb5a7bfaadfbd06821bac775c\nparent b249844c33f5327cbba7a13d34eaaf290f0ec776\nparent b813c727235c48e9142726699dae2e0423fd57d9\nauthor Mara Bos <m-ou.se@m-ou.se> 1606082460 +0100\ncommitter GitHub <noreply@github.com> 1606082460 +0100\n\nRollup merge of #78793 - camelid:fixup-structuraleq, r=jyn514\n\nClean up `StructuralEq` docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a623e6f98787689381a52308acb4925a358f05b", "html_url": "https://github.com/rust-lang/rust/commit/8a623e6f98787689381a52308acb4925a358f05b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a623e6f98787689381a52308acb4925a358f05b/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b249844c33f5327cbba7a13d34eaaf290f0ec776", "url": "https://api.github.com/repos/rust-lang/rust/commits/b249844c33f5327cbba7a13d34eaaf290f0ec776", "html_url": "https://github.com/rust-lang/rust/commit/b249844c33f5327cbba7a13d34eaaf290f0ec776"}, {"sha": "b813c727235c48e9142726699dae2e0423fd57d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b813c727235c48e9142726699dae2e0423fd57d9", "html_url": "https://github.com/rust-lang/rust/commit/b813c727235c48e9142726699dae2e0423fd57d9"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "29364d0ce9b89130650c8f2c788ddee8d19503c5", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a623e6f98787689381a52308acb4925a358f05b/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a623e6f98787689381a52308acb4925a358f05b/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=8a623e6f98787689381a52308acb4925a358f05b", "patch": "@@ -156,18 +156,18 @@ pub trait StructuralPartialEq {\n /// Required trait for constants used in pattern matches.\n ///\n /// Any type that derives `Eq` automatically implements this trait, *regardless*\n-/// of whether its type-parameters implement `Eq`.\n+/// of whether its type parameters implement `Eq`.\n ///\n-/// This is a hack to workaround a limitation in our type-system.\n+/// This is a hack to work around a limitation in our type system.\n ///\n-/// Background:\n+/// # Background\n ///\n /// We want to require that types of consts used in pattern matches\n /// have the attribute `#[derive(PartialEq, Eq)]`.\n ///\n /// In a more ideal world, we could check that requirement by just checking that\n-/// the given type implements both (1.) the `StructuralPartialEq` trait *and*\n-/// (2.) the `Eq` trait. However, you can have ADTs that *do* `derive(PartialEq, Eq)`,\n+/// the given type implements both the `StructuralPartialEq` trait *and*\n+/// the `Eq` trait. However, you can have ADTs that *do* `derive(PartialEq, Eq)`,\n /// and be a case that we want the compiler to accept, and yet the constant's\n /// type fails to implement `Eq`.\n ///\n@@ -176,8 +176,11 @@ pub trait StructuralPartialEq {\n /// ```rust\n /// #[derive(PartialEq, Eq)]\n /// struct Wrap<X>(X);\n+///\n /// fn higher_order(_: &()) { }\n+///\n /// const CFN: Wrap<fn(&())> = Wrap(higher_order);\n+///\n /// fn main() {\n ///     match CFN {\n ///         CFN => {}"}]}