{"sha": "1ff6e5356ce26a073149d0c10b82aaa8b80fb093", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZjZlNTM1NmNlMjZhMDczMTQ5ZDBjMTBiODJhYWE4YjgwZmIwOTM=", "commit": {"author": {"name": "GuillaumeGomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-02-03T23:48:39Z"}, "committer": {"name": "GuillaumeGomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-02-06T11:01:14Z"}, "message": "librustc_resolve has been updated", "tree": {"sha": "c1436e675a4d7833fb4f13de2339135710f96f38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1436e675a4d7833fb4f13de2339135710f96f38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ff6e5356ce26a073149d0c10b82aaa8b80fb093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ff6e5356ce26a073149d0c10b82aaa8b80fb093", "html_url": "https://github.com/rust-lang/rust/commit/1ff6e5356ce26a073149d0c10b82aaa8b80fb093", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ff6e5356ce26a073149d0c10b82aaa8b80fb093/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b6632d82d59f53f0fa71be8abdc50a8353cfda1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b6632d82d59f53f0fa71be8abdc50a8353cfda1", "html_url": "https://github.com/rust-lang/rust/commit/4b6632d82d59f53f0fa71be8abdc50a8353cfda1"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "fe42817a9c4ffd95c1f12727139a190d8961c06f", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ff6e5356ce26a073149d0c10b82aaa8b80fb093/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff6e5356ce26a073149d0c10b82aaa8b80fb093/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=1ff6e5356ce26a073149d0c10b82aaa8b80fb093", "patch": "@@ -307,8 +307,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     ViewPathSimple(binding, ref full_path) => {\n                         let source_name =\n                             full_path.segments.last().unwrap().identifier.name;\n-                        if token::get_name(source_name).get() == \"mod\" ||\n-                           token::get_name(source_name).get() == \"self\" {\n+                        if &token::get_name(source_name)[] == \"mod\" ||\n+                           &token::get_name(source_name)[] == \"self\" {\n                             self.resolve_error(view_path.span,\n                                 \"`self` imports are only allowed within a { } list\");\n                         }\n@@ -1020,7 +1020,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                         self.handle_external_def(def,\n                                                  def_visibility,\n                                                  &*child_name_bindings,\n-                                                 token::get_name(name).get(),\n+                                                 &token::get_name(name)[],\n                                                  name,\n                                                  root);\n                     }"}, {"sha": "0d87f2a17dfa422abe1aff9bdb68084311c71e54", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1ff6e5356ce26a073149d0c10b82aaa8b80fb093/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ff6e5356ce26a073149d0c10b82aaa8b80fb093/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1ff6e5356ce26a073149d0c10b82aaa8b80fb093", "patch": "@@ -1093,7 +1093,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             } else {\n                 result.push_str(\"::\")\n             }\n-            result.push_str(token::get_name(*name).get());\n+            result.push_str(&token::get_name(*name)[]);\n         };\n         result\n     }\n@@ -1111,7 +1111,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                         -> String {\n         match subclass {\n             SingleImport(_, source) => {\n-                token::get_name(source).get().to_string()\n+                token::get_name(source).to_string()\n             }\n             GlobImport => \"*\".to_string()\n         }\n@@ -1708,7 +1708,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         debug!(\"(resolving glob import) writing resolution `{}` in `{}` \\\n                to `{}`\",\n-               token::get_name(name).get(),\n+               &token::get_name(name)[],\n                self.module_to_string(&*containing_module),\n                self.module_to_string(module_));\n \n@@ -1725,7 +1725,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         let msg = format!(\"a {} named `{}` has already been imported \\\n                                            in this module\",\n                                           namespace_name,\n-                                          token::get_name(name).get());\n+                                          &token::get_name(name)[]);\n                         span_err!(self.session, import_directive.span, E0251, \"{}\", msg);\n                     } else {\n                         let target = Target::new(containing_module.clone(),\n@@ -1757,7 +1757,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     name: Name,\n                                     namespace: Namespace) {\n         debug!(\"check_for_conflicting_import: {}; target exists: {}\",\n-               token::get_name(name).get(),\n+               &token::get_name(name)[],\n                target.is_some());\n \n         match *target {\n@@ -1768,7 +1768,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     TypeNS => \"type\",\n                                     ValueNS => \"value\",\n                                   },\n-                                  token::get_name(name).get());\n+                                  &token::get_name(name)[]);\n                 span_err!(self.session, import_span, E0252, \"{}\", &msg[]);\n             }\n             Some(_) | None => {}\n@@ -1804,7 +1804,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     let msg = format!(\"import `{0}` conflicts with imported \\\n                                        crate in this module \\\n                                        (maybe you meant `use {0}::*`?)\",\n-                                      token::get_name(name).get());\n+                                      &token::get_name(name)[]);\n                     span_err!(self.session, import_span, E0254, \"{}\", &msg[]);\n                 }\n                 Some(_) | None => {}\n@@ -1826,7 +1826,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 if let Some(ref value) = *name_bindings.value_def.borrow() {\n                     let msg = format!(\"import `{}` conflicts with value \\\n                                        in this module\",\n-                                      token::get_name(name).get());\n+                                      &token::get_name(name)[]);\n                     span_err!(self.session, import_span, E0255, \"{}\", &msg[]);\n                     if let Some(span) = value.value_span {\n                         self.session.span_note(span,\n@@ -1844,7 +1844,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         None => {\n                             let msg = format!(\"import `{}` conflicts with type in \\\n                                                this module\",\n-                                              token::get_name(name).get());\n+                                              &token::get_name(name)[]);\n                             span_err!(self.session, import_span, E0256, \"{}\", &msg[]);\n                             if let Some(span) = ty.type_span {\n                                 self.session.span_note(span,\n@@ -1866,7 +1866,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 _ => {\n                                     let msg = format!(\"import `{}` conflicts with existing \\\n                                                        submodule\",\n-                                                      token::get_name(name).get());\n+                                                      &token::get_name(name)[]);\n                                     span_err!(self.session, import_span, E0258, \"{}\", &msg[]);\n                                     if let Some(span) = ty.type_span {\n                                         self.session.span_note(span,\n@@ -1892,7 +1892,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 span_err!(self.session, span, E0259,\n                           \"an external crate named `{}` has already \\\n                                    been imported into this module\",\n-                                  token::get_name(name).get());\n+                                  &token::get_name(name)[]);\n         }\n     }\n \n@@ -1906,7 +1906,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                           \"the name `{}` conflicts with an external \\\n                                    crate that has been imported into this \\\n                                    module\",\n-                                  token::get_name(name).get());\n+                                  &token::get_name(name)[]);\n         }\n     }\n \n@@ -1955,7 +1955,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     let module_name = self.module_to_string(&*search_module);\n                     let mut span = span;\n                     let msg = if \"???\" == &module_name[] {\n-                        span.hi = span.lo + Pos::from_usize(segment_name.get().len());\n+                        span.hi = span.lo + Pos::from_usize(segment_name.len());\n \n                         match search_parent_externals(name,\n                                                      &self.current_module) {\n@@ -2368,11 +2368,11 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let mut containing_module;\n         let mut i;\n         let first_module_path_string = token::get_name(module_path[0]);\n-        if \"self\" == first_module_path_string.get() {\n+        if \"self\" == &first_module_path_string[] {\n             containing_module =\n                 self.get_nearest_normal_module_parent_or_self(module_);\n             i = 1;\n-        } else if \"super\" == first_module_path_string.get() {\n+        } else if \"super\" == &first_module_path_string[] {\n             containing_module =\n                 self.get_nearest_normal_module_parent_or_self(module_);\n             i = 0;  // We'll handle `super` below.\n@@ -2383,7 +2383,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         // Now loop through all the `super`s we find.\n         while i < module_path.len() {\n             let string = token::get_name(module_path[i]);\n-            if \"super\" != string.get() {\n+            if \"super\" != &string[] {\n                 break\n             }\n             debug!(\"(resolving module prefix) resolving `super` at {}\",\n@@ -2417,7 +2417,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                               allow_private_imports: bool)\n                               -> ResolveResult<(Target, bool)> {\n         debug!(\"(resolving name in module) resolving `{}` in `{}`\",\n-               token::get_name(name).get(),\n+               &token::get_name(name)[],\n                self.module_to_string(&*module_));\n \n         // First, check the direct children of the module.\n@@ -2493,7 +2493,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         // We're out of luck.\n         debug!(\"(resolving name in module) failed to resolve `{}`\",\n-               token::get_name(name).get());\n+               &token::get_name(name)[]);\n         return Failed(None);\n     }\n \n@@ -4372,7 +4372,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         let mut smallest = 0;\n         for (i, other) in maybes.iter().enumerate() {\n-            values[i] = lev_distance(name, other.get());\n+            values[i] = lev_distance(name, &other[]);\n \n             if values[i] <= values[smallest] {\n                 smallest = i;\n@@ -4383,9 +4383,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             values[smallest] != uint::MAX &&\n             values[smallest] < name.len() + 2 &&\n             values[smallest] <= max_distance &&\n-            name != maybes[smallest].get() {\n+            name != &maybes[smallest][] {\n \n-            Some(maybes[smallest].get().to_string())\n+            Some(maybes[smallest].to_string())\n \n         } else {\n             None\n@@ -4475,7 +4475,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                     false // Stop advancing\n                                 });\n \n-                                if method_scope && token::get_name(self.self_name).get()\n+                                if method_scope && &token::get_name(self.self_name)[]\n                                                                    == path_name {\n                                         self.resolve_error(\n                                             expr.span,"}]}