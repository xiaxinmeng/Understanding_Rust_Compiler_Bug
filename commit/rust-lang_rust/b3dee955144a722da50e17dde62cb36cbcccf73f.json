{"sha": "b3dee955144a722da50e17dde62cb36cbcccf73f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZGVlOTU1MTQ0YTcyMmRhNTBlMTdkZGU2MmNiMzZjYmNjY2Y3M2Y=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-14T18:29:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-14T20:51:30Z"}, "message": "Add a facility for ignoring tests. Issue #428\n\nAdding the #[ignore] attribute will cause the test not to be run, though it\nwill still show up in the list of tests.", "tree": {"sha": "c4fe653b9eaf9be74f48fac73406f77a427768e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4fe653b9eaf9be74f48fac73406f77a427768e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3dee955144a722da50e17dde62cb36cbcccf73f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3dee955144a722da50e17dde62cb36cbcccf73f", "html_url": "https://github.com/rust-lang/rust/commit/b3dee955144a722da50e17dde62cb36cbcccf73f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3dee955144a722da50e17dde62cb36cbcccf73f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49da7da441716da2ae99b893907f0fbd1655d813", "url": "https://api.github.com/repos/rust-lang/rust/commits/49da7da441716da2ae99b893907f0fbd1655d813", "html_url": "https://github.com/rust-lang/rust/commit/49da7da441716da2ae99b893907f0fbd1655d813"}], "stats": {"total": 145, "additions": 120, "deletions": 25}, "files": [{"sha": "a0d1118bdd0683d71d71221ac276bbc5e5d28f6a", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b3dee955144a722da50e17dde62cb36cbcccf73f/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3dee955144a722da50e17dde62cb36cbcccf73f/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=b3dee955144a722da50e17dde62cb36cbcccf73f", "patch": "@@ -11,9 +11,12 @@ export modify_for_testing;\n \n type node_id_gen = @fn() -> ast::node_id;\n \n+type test = rec(ast::ident[] path,\n+                bool ignore);\n+\n type test_ctxt = @rec(node_id_gen next_node_id,\n                       mutable ast::ident[] path,\n-                      mutable ast::ident[][] testfns);\n+                      mutable test[] testfns);\n \n // Traverse the crate, collecting all the test functions, eliding any\n // existing main functions, and synthesizing a main test harness\n@@ -88,7 +91,9 @@ fn fold_item(&test_ctxt cx, &@ast::item i,\n \n     if (is_test_fn(i)) {\n         log \"this is a test function\";\n-        cx.testfns += ~[cx.path];\n+        auto test = rec(path = cx.path,\n+                        ignore = is_ignored(i));\n+        cx.testfns += ~[test];\n         log #fmt(\"have %u test functions\", ivec::len(cx.testfns));\n     }\n \n@@ -116,6 +121,10 @@ fn is_test_fn(&@ast::item i) -> bool {\n     ret has_test_attr && has_test_signature(i);\n }\n \n+fn is_ignored(&@ast::item i) -> bool {\n+    attr::contains_name(attr::attr_metas(i.attrs), \"ignore\")\n+}\n+\n fn add_test_module(&test_ctxt cx, &ast::_mod m) -> ast::_mod {\n     auto testmod = mk_test_module(cx);\n     ret rec(items=m.items + ~[testmod] with m);\n@@ -225,18 +234,20 @@ fn mk_test_desc_vec(&test_ctxt cx) -> @ast::expr {\n     log #fmt(\"building test vector from %u tests\",\n              ivec::len(cx.testfns));\n     auto descs = ~[];\n-    for (ast::ident[] testpath in cx.testfns) {\n-        log #fmt(\"encoding %s\", ast::path_name_i(testpath));\n-        auto path = testpath;\n-        descs += ~[mk_test_desc_rec(cx, path)];\n+    for (test test in cx.testfns) {\n+        auto test_ = test; // Satisfy alias analysis\n+        descs += ~[mk_test_desc_rec(cx, test_)];\n     }\n \n     ret @rec(id = cx.next_node_id(),\n              node = ast::expr_vec(descs, ast::imm, ast::sk_unique),\n              span = rec(lo=0u,hi=0u));\n }\n \n-fn mk_test_desc_rec(&test_ctxt cx, ast::ident[] path) -> @ast::expr {\n+fn mk_test_desc_rec(&test_ctxt cx, test test) -> @ast::expr {\n+    auto path = test.path;\n+\n+    log #fmt(\"encoding %s\", ast::path_name_i(path));\n \n     let ast::lit name_lit = nospan(ast::lit_str(ast::path_name_i(path),\n                                                 ast::sk_rc));\n@@ -260,7 +271,19 @@ fn mk_test_desc_rec(&test_ctxt cx, ast::ident[] path) -> @ast::expr {\n                                          ident = \"fn\",\n                                          expr = @fn_expr));\n \n-    let ast::expr_ desc_rec_ = ast::expr_rec(~[name_field, fn_field],\n+    let ast::lit ignore_lit = nospan(ast::lit_bool(test.ignore));\n+\n+    let ast::expr ignore_expr = rec(id = cx.next_node_id(),\n+                                    node = ast::expr_lit(@ignore_lit),\n+                                    span = rec(lo=0u, hi=0u));\n+\n+    let ast::field ignore_field = nospan(rec(mut = ast::imm,\n+                                             ident = \"ignore\",\n+                                             expr = @ignore_expr));\n+\n+    let ast::expr_ desc_rec_ = ast::expr_rec(~[name_field,\n+                                               fn_field,\n+                                               ignore_field],\n                                              option::none);\n     let ast::expr desc_rec = rec(id = cx.next_node_id(),\n                                  node = desc_rec_,"}, {"sha": "037206b39f3f5f34a3ec251e4a841243cd25b52d", "filename": "src/lib/test.rs", "status": "modified", "additions": 52, "deletions": 17, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/b3dee955144a722da50e17dde62cb36cbcccf73f/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3dee955144a722da50e17dde62cb36cbcccf73f/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=b3dee955144a722da50e17dde62cb36cbcccf73f", "patch": "@@ -7,6 +7,11 @@ export test_name;\n export test_fn;\n export test_desc;\n export test_main;\n+export test_result;\n+export tr_ok;\n+export tr_failed;\n+export tr_ignored;\n+export run_test;\n \n // The name of a test. By convention this follows the rules for rust\n // paths, i.e it should be a series of identifiers seperated by double\n@@ -23,7 +28,8 @@ type test_fn = fn();\n // The definition of a single test. A test runner will run a list of\n // these.\n type test_desc = rec(test_name name,\n-                     test_fn fn);\n+                     test_fn fn,\n+                     bool ignore);\n \n // The default console test runner. It accepts the command line\n // arguments and a vector of test_descs (generated at compile time).\n@@ -43,6 +49,12 @@ fn parse_opts(&vec[str] args) -> test_opts {\n         })\n }\n \n+tag test_result {\n+    tr_ok;\n+    tr_failed;\n+    tr_ignored;\n+}\n+\n // A simple console test runner\n fn run_tests(&test_opts opts, &test_desc[] tests) -> bool {\n \n@@ -55,38 +67,42 @@ fn run_tests(&test_opts opts, &test_desc[] tests) -> bool {\n \n     auto passed = 0u;\n     auto failed = 0u;\n+    auto ignored = 0u;\n \n     for (test_desc test in filtered_tests) {\n         out.write_str(#fmt(\"running %s ... \", test.name));\n-        if (run_test(test)) {\n-            passed += 1u;\n-            write_ok(out);\n-            out.write_line(\"\");\n-        } else {\n-            failed += 1u;\n-            write_failed(out);\n-            out.write_line(\"\");\n+        alt (run_test(test)) {\n+            tr_ok {\n+                passed += 1u;\n+                write_ok(out);\n+                out.write_line(\"\");\n+            }\n+            tr_failed {\n+                failed += 1u;\n+                write_failed(out);\n+                out.write_line(\"\");\n+            }\n+            tr_ignored {\n+                ignored += 1u;\n+                write_ignored(out);\n+                out.write_line(\"\");\n+            }\n         }\n     }\n \n-    assert passed + failed == total;\n+    assert passed + failed + ignored == total;\n \n     out.write_str(#fmt(\"\\nresult: \"));\n     if (failed == 0u) {\n         write_ok(out);\n     } else {\n         write_failed(out);\n     }\n-    out.write_str(#fmt(\". %u passed; %u failed\\n\\n\",\n-                       passed, failed));\n+    out.write_str(#fmt(\". %u passed; %u failed; %u ignored\\n\\n\",\n+                       passed, failed, ignored));\n \n     ret true;\n \n-    fn run_test(&test_desc test) -> bool {\n-        test.fn();\n-        ret true;\n-    }\n-\n     fn write_ok(&io::writer out) {\n         if (term::color_supported()) {\n             term::fg(out.get_buf_writer(), term::color_green);\n@@ -106,6 +122,16 @@ fn run_tests(&test_opts opts, &test_desc[] tests) -> bool {\n             term::reset(out.get_buf_writer());\n         }\n     }\n+\n+    fn write_ignored(&io::writer out) {\n+        if (term::color_supported()) {\n+            term::fg(out.get_buf_writer(), term::color_yellow);\n+        }\n+        out.write_str(\"ignored\");\n+        if (term::color_supported()) {\n+            term::reset(out.get_buf_writer());\n+        }\n+    }\n }\n \n fn filter_tests(&test_opts opts, &test_desc[] tests) -> test_desc[] {\n@@ -128,6 +154,15 @@ fn filter_tests(&test_opts opts, &test_desc[] tests) -> test_desc[] {\n     ret ivec::filter_map(filter, tests);\n }\n \n+fn run_test(&test_desc test) -> test_result {\n+    if (!test.ignore) {\n+        test.fn();\n+        ret tr_ok;\n+    } else {\n+        ret tr_ignored;\n+    }\n+}\n+\n \n // Local Variables:\n // mode: rust;"}, {"sha": "5bce16591790e0087f1d935158fa28c34d7851cc", "filename": "src/test/stdtest/stdtest.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3dee955144a722da50e17dde62cb36cbcccf73f/src%2Ftest%2Fstdtest%2Fstdtest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b3dee955144a722da50e17dde62cb36cbcccf73f/src%2Ftest%2Fstdtest%2Fstdtest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstdtest.rc?ref=b3dee955144a722da50e17dde62cb36cbcccf73f", "patch": "@@ -2,6 +2,7 @@ use std;\n \n mod sha1;\n mod int;\n+mod test;\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "17f18a5151ebe09db4966a4b43d501604402bb6e", "filename": "src/test/stdtest/test.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b3dee955144a722da50e17dde62cb36cbcccf73f/src%2Ftest%2Fstdtest%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3dee955144a722da50e17dde62cb36cbcccf73f/src%2Ftest%2Fstdtest%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftest.rs?ref=b3dee955144a722da50e17dde62cb36cbcccf73f", "patch": "@@ -0,0 +1,36 @@\n+import std::test;\n+\n+#[test]\n+fn do_not_run_ignored_tests() {\n+    auto ran = @mutable false;\n+    auto f = bind fn(@mutable bool ran) {\n+        *ran = true;\n+    } (ran);\n+\n+    auto desc = rec(name = \"whatever\",\n+                    fn = f,\n+                    ignore = true);\n+\n+    auto res = test::run_test(desc);\n+\n+    assert ran == false;\n+}\n+\n+#[test]\n+fn ignored_tests_result_in_ignored() {\n+    fn f() { }\n+    auto desc = rec(name = \"whatever\",\n+                    fn = f,\n+                    ignore = true);\n+    auto res = test::run_test(desc);\n+    assert res == test::tr_ignored;\n+}\n+\n+// Local Variables:\n+// mode: rust;\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:"}]}