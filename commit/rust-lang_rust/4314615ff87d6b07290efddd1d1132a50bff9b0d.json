{"sha": "4314615ff87d6b07290efddd1d1132a50bff9b0d", "node_id": "C_kwDOAAsO6NoAKDQzMTQ2MTVmZjg3ZDZiMDcyOTBlZmRkZDFkMTEzMmE1MGJmZjliMGQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-01T02:06:48Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-08T05:07:19Z"}, "message": "Arena-allocate `hir::Lifetime`.\n\nThis shrinks `hir::Ty` from 72 to 48 bytes.\n\n`visit_lifetime` is added to the HIR stats collector because these types\nare now stored in memory on their own, instead of being within other\ntypes.", "tree": {"sha": "ae20b70d7a85213deb0191ed3b0642d3509883a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae20b70d7a85213deb0191ed3b0642d3509883a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4314615ff87d6b07290efddd1d1132a50bff9b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4314615ff87d6b07290efddd1d1132a50bff9b0d", "html_url": "https://github.com/rust-lang/rust/commit/4314615ff87d6b07290efddd1d1132a50bff9b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4314615ff87d6b07290efddd1d1132a50bff9b0d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "512bd84f51ba6963c84506f408840e5341abe499", "url": "https://api.github.com/repos/rust-lang/rust/commits/512bd84f51ba6963c84506f408840e5341abe499", "html_url": "https://github.com/rust-lang/rust/commit/512bd84f51ba6963c84506f408840e5341abe499"}], "stats": {"total": 121, "additions": 65, "deletions": 56}, "files": [{"sha": "e484f77cad4435233a521e1a056d4e8344bce869", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4314615ff87d6b07290efddd1d1132a50bff9b0d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314615ff87d6b07290efddd1d1132a50bff9b0d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=4314615ff87d6b07290efddd1d1132a50bff9b0d", "patch": "@@ -1196,7 +1196,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let lifetime_bound = this.elided_dyn_bound(t.span);\n                 (bounds, lifetime_bound)\n             });\n-            let kind = hir::TyKind::TraitObject(bounds, lifetime_bound, TraitObjectSyntax::None);\n+            let kind = hir::TyKind::TraitObject(bounds, &lifetime_bound, TraitObjectSyntax::None);\n             return hir::Ty { kind, span: self.lower_span(t.span), hir_id: self.next_id() };\n         }\n \n@@ -1934,8 +1934,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let res = res.unwrap_or(\n                     self.resolver.get_lifetime_res(lifetime.id).unwrap_or(LifetimeRes::Error),\n                 );\n-                let l = self.new_named_lifetime_with_res(id, span, ident, res);\n-                hir::GenericArg::Lifetime(l)\n+                hir::GenericArg::Lifetime(self.new_named_lifetime_with_res(id, span, ident, res))\n             },\n         ));\n \n@@ -2004,7 +2003,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn lower_lifetime(&mut self, l: &Lifetime) -> hir::Lifetime {\n+    fn lower_lifetime(&mut self, l: &Lifetime) -> &'hir hir::Lifetime {\n         let span = self.lower_span(l.ident.span);\n         let ident = self.lower_ident(l.ident);\n         self.new_named_lifetime(l.id, l.id, span, ident)\n@@ -2017,7 +2016,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         span: Span,\n         ident: Ident,\n         res: LifetimeRes,\n-    ) -> hir::Lifetime {\n+    ) -> &'hir hir::Lifetime {\n         let name = match res {\n             LifetimeRes::Param { param, .. } => {\n                 let p_name = ParamName::Plain(ident);\n@@ -2038,7 +2037,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         };\n \n         debug!(?name);\n-        hir::Lifetime { hir_id: self.lower_node_id(id), span: self.lower_span(span), name }\n+        self.arena.alloc(hir::Lifetime {\n+            hir_id: self.lower_node_id(id),\n+            span: self.lower_span(span),\n+            name,\n+        })\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n@@ -2048,7 +2051,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         new_id: NodeId,\n         span: Span,\n         ident: Ident,\n-    ) -> hir::Lifetime {\n+    ) -> &'hir hir::Lifetime {\n         let res = self.resolver.get_lifetime_res(id).unwrap_or(LifetimeRes::Error);\n         self.new_named_lifetime_with_res(new_id, span, ident, res)\n     }\n@@ -2462,14 +2465,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// bound, like the bound in `Box<dyn Debug>`. This method is not invoked\n     /// when the bound is written, even if it is written with `'_` like in\n     /// `Box<dyn Debug + '_>`. In those cases, `lower_lifetime` is invoked.\n-    fn elided_dyn_bound(&mut self, span: Span) -> hir::Lifetime {\n+    fn elided_dyn_bound(&mut self, span: Span) -> &'hir hir::Lifetime {\n         let r = hir::Lifetime {\n             hir_id: self.next_id(),\n             span: self.lower_span(span),\n             name: hir::LifetimeName::ImplicitObjectLifetimeDefault,\n         };\n         debug!(\"elided_dyn_bound: r={:?}\", r);\n-        r\n+        self.arena.alloc(r)\n     }\n }\n "}, {"sha": "8eb0f6dd812dddc197b2fb77203cae909794a8bc", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4314615ff87d6b07290efddd1d1132a50bff9b0d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314615ff87d6b07290efddd1d1132a50bff9b0d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=4314615ff87d6b07290efddd1d1132a50bff9b0d", "patch": "@@ -259,7 +259,7 @@ impl InferArg {\n \n #[derive(Debug, HashStable_Generic)]\n pub enum GenericArg<'hir> {\n-    Lifetime(Lifetime),\n+    Lifetime(&'hir Lifetime),\n     Type(&'hir Ty<'hir>),\n     Const(ConstArg),\n     Infer(InferArg),\n@@ -430,7 +430,7 @@ pub enum GenericBound<'hir> {\n     Trait(PolyTraitRef<'hir>, TraitBoundModifier),\n     // FIXME(davidtwco): Introduce `PolyTraitRef::LangItem`\n     LangItemTrait(LangItem, Span, HirId, &'hir GenericArgs<'hir>),\n-    Outlives(Lifetime),\n+    Outlives(&'hir Lifetime),\n }\n \n impl GenericBound<'_> {\n@@ -756,7 +756,7 @@ impl<'hir> WhereBoundPredicate<'hir> {\n pub struct WhereRegionPredicate<'hir> {\n     pub span: Span,\n     pub in_where_clause: bool,\n-    pub lifetime: Lifetime,\n+    pub lifetime: &'hir Lifetime,\n     pub bounds: GenericBounds<'hir>,\n }\n \n@@ -2499,7 +2499,7 @@ pub enum TyKind<'hir> {\n     /// A raw pointer (i.e., `*const T` or `*mut T`).\n     Ptr(MutTy<'hir>),\n     /// A reference (i.e., `&'a T` or `&'a mut T`).\n-    Rptr(Lifetime, MutTy<'hir>),\n+    Rptr(&'hir Lifetime, MutTy<'hir>),\n     /// A bare function (e.g., `fn(usize) -> bool`).\n     BareFn(&'hir BareFnTy<'hir>),\n     /// The never type (`!`).\n@@ -2518,7 +2518,7 @@ pub enum TyKind<'hir> {\n     OpaqueDef(ItemId, &'hir [GenericArg<'hir>]),\n     /// A trait object type `Bound1 + Bound2 + Bound3`\n     /// where `Bound` is a trait or a lifetime.\n-    TraitObject(&'hir [PolyTraitRef<'hir>], Lifetime, TraitObjectSyntax),\n+    TraitObject(&'hir [PolyTraitRef<'hir>], &'hir Lifetime, TraitObjectSyntax),\n     /// Unused for now.\n     Typeof(AnonConst),\n     /// `TyKind::Infer` means the type should be inferred instead of it having been\n@@ -3474,7 +3474,7 @@ mod size_asserts {\n     static_assert_size!(ForeignItem<'_>, 72);\n     static_assert_size!(ForeignItemKind<'_>, 40);\n     #[cfg(not(bootstrap))]\n-    static_assert_size!(GenericArg<'_>, 32);\n+    static_assert_size!(GenericArg<'_>, 24);\n     static_assert_size!(GenericBound<'_>, 48);\n     static_assert_size!(Generics<'_>, 56);\n     static_assert_size!(Impl<'_>, 80);\n@@ -3494,9 +3494,9 @@ mod size_asserts {\n     static_assert_size!(Stmt<'_>, 32);\n     static_assert_size!(StmtKind<'_>, 16);\n     #[cfg(not(bootstrap))]\n-    static_assert_size!(TraitItem<'static>, 88);\n+    static_assert_size!(TraitItem<'_>, 88);\n     #[cfg(not(bootstrap))]\n     static_assert_size!(TraitItemKind<'_>, 48);\n-    static_assert_size!(Ty<'_>, 72);\n-    static_assert_size!(TyKind<'_>, 56);\n+    static_assert_size!(Ty<'_>, 48);\n+    static_assert_size!(TyKind<'_>, 32);\n }"}, {"sha": "075069feb52d5661f97c16fd338b02bc2852270d", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4314615ff87d6b07290efddd1d1132a50bff9b0d/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314615ff87d6b07290efddd1d1132a50bff9b0d/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=4314615ff87d6b07290efddd1d1132a50bff9b0d", "patch": "@@ -437,6 +437,11 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         }\n     }\n \n+    fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) {\n+        self.record(\"Lifetime\", Id::Node(lifetime.hir_id), lifetime);\n+        hir_visit::walk_lifetime(self, lifetime)\n+    }\n+\n     fn visit_path(&mut self, path: &'v hir::Path<'v>, _id: hir::HirId) {\n         self.record(\"Path\", Id::None, path);\n         hir_visit::walk_path(self, path)"}, {"sha": "2829ab45d4740d7f325dcbeb342676e3882c55ff", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4314615ff87d6b07290efddd1d1132a50bff9b0d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314615ff87d6b07290efddd1d1132a50bff9b0d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4314615ff87d6b07290efddd1d1132a50bff9b0d", "patch": "@@ -190,7 +190,7 @@ fn clean_poly_trait_ref_with_bindings<'tcx>(\n     )\n }\n \n-fn clean_lifetime<'tcx>(lifetime: hir::Lifetime, cx: &mut DocContext<'tcx>) -> Lifetime {\n+fn clean_lifetime<'tcx>(lifetime: &hir::Lifetime, cx: &mut DocContext<'tcx>) -> Lifetime {\n     let def = cx.tcx.named_region(lifetime.hir_id);\n     if let Some(\n         rl::Region::EarlyBound(node_id)\n@@ -495,7 +495,7 @@ fn clean_generic_param<'tcx>(\n                     .filter(|bp| !bp.in_where_clause)\n                     .flat_map(|bp| bp.bounds)\n                     .map(|bound| match bound {\n-                        hir::GenericBound::Outlives(lt) => clean_lifetime(*lt, cx),\n+                        hir::GenericBound::Outlives(lt) => clean_lifetime(lt, cx),\n                         _ => panic!(),\n                     })\n                     .collect()\n@@ -1392,7 +1392,7 @@ fn maybe_expand_private_type_alias<'tcx>(\n                     }\n                     _ => None,\n                 });\n-                if let Some(lt) = lifetime.cloned() {\n+                if let Some(lt) = lifetime {\n                     let lt_def_id = cx.tcx.hir().local_def_id(param.hir_id);\n                     let cleaned =\n                         if !lt.is_elided() { clean_lifetime(lt, cx) } else { Lifetime::elided() };"}, {"sha": "24c281a0c995ac84a13be389568c18d279cbca83", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/4314615ff87d6b07290efddd1d1132a50bff9b0d/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4314615ff87d6b07290efddd1d1132a50bff9b0d/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=4314615ff87d6b07290efddd1d1132a50bff9b0d", "patch": "@@ -119,59 +119,60 @@ hir-stats HIR STATS\n hir-stats Name                Accumulated Size         Count     Item Size\n hir-stats ----------------------------------------------------------------\n hir-stats ForeignItemRef            24 ( 0.2%)             1            24\n+hir-stats Lifetime                  32 ( 0.3%)             1            32\n hir-stats Mod                       32 ( 0.3%)             1            32\n hir-stats ExprField                 40 ( 0.4%)             1            40\n hir-stats TraitItemRef              56 ( 0.6%)             2            28\n-hir-stats Param                     64 ( 0.6%)             2            32\n-hir-stats Local                     64 ( 0.6%)             1            64\n+hir-stats Local                     64 ( 0.7%)             1            64\n+hir-stats Param                     64 ( 0.7%)             2            32\n hir-stats InlineAsm                 72 ( 0.7%)             1            72\n hir-stats ImplItemRef               72 ( 0.7%)             2            36\n-hir-stats FieldDef                  96 ( 0.9%)             2            48\n-hir-stats Arm                       96 ( 0.9%)             2            48\n-hir-stats Body                      96 ( 0.9%)             3            32\n-hir-stats Stmt                      96 ( 0.9%)             3            32\n+hir-stats Body                      96 ( 1.0%)             3            32\n+hir-stats GenericArg                96 ( 1.0%)             4            24\n+hir-stats - Type                      24 ( 0.2%)             1\n+hir-stats - Lifetime                  72 ( 0.7%)             3\n+hir-stats FieldDef                  96 ( 1.0%)             2            48\n+hir-stats Arm                       96 ( 1.0%)             2            48\n+hir-stats Stmt                      96 ( 1.0%)             3            32\n hir-stats - Local                     32 ( 0.3%)             1\n hir-stats - Semi                      32 ( 0.3%)             1\n hir-stats - Expr                      32 ( 0.3%)             1\n hir-stats FnDecl                   120 ( 1.2%)             3            40\n hir-stats Attribute                128 ( 1.3%)             4            32\n-hir-stats GenericArg               128 ( 1.3%)             4            32\n-hir-stats - Type                      32 ( 0.3%)             1\n-hir-stats - Lifetime                  96 ( 0.9%)             3\n-hir-stats GenericArgs              144 ( 1.4%)             3            48\n+hir-stats GenericArgs              144 ( 1.5%)             3            48\n hir-stats Variant                  160 ( 1.6%)             2            80\n-hir-stats GenericBound             192 ( 1.9%)             4            48\n-hir-stats - Trait                    192 ( 1.9%)             4\n-hir-stats WherePredicate           216 ( 2.1%)             3            72\n-hir-stats - BoundPredicate           216 ( 2.1%)             3\n-hir-stats Block                    288 ( 2.8%)             6            48\n-hir-stats GenericParam             400 ( 3.9%)             5            80\n-hir-stats Pat                      440 ( 4.3%)             5            88\n+hir-stats WherePredicate           168 ( 1.7%)             3            56\n+hir-stats - BoundPredicate           168 ( 1.7%)             3\n+hir-stats GenericBound             192 ( 2.0%)             4            48\n+hir-stats - Trait                    192 ( 2.0%)             4\n+hir-stats Block                    288 ( 3.0%)             6            48\n+hir-stats GenericParam             400 ( 4.1%)             5            80\n+hir-stats Pat                      440 ( 4.5%)             5            88\n hir-stats - Wild                      88 ( 0.9%)             1\n hir-stats - Struct                    88 ( 0.9%)             1\n-hir-stats - Binding                  264 ( 2.6%)             3\n-hir-stats Generics                 560 ( 5.5%)            10            56\n-hir-stats Expr                     768 ( 7.6%)            12            64\n-hir-stats - Path                      64 ( 0.6%)             1\n-hir-stats - Struct                    64 ( 0.6%)             1\n-hir-stats - Match                     64 ( 0.6%)             1\n-hir-stats - InlineAsm                 64 ( 0.6%)             1\n+hir-stats - Binding                  264 ( 2.7%)             3\n+hir-stats Generics                 560 ( 5.7%)            10            56\n+hir-stats Ty                       720 ( 7.4%)            15            48\n+hir-stats - Ptr                       48 ( 0.5%)             1\n+hir-stats - Rptr                      48 ( 0.5%)             1\n+hir-stats - Path                     624 ( 6.4%)            13\n+hir-stats Expr                     768 ( 7.9%)            12            64\n+hir-stats - Path                      64 ( 0.7%)             1\n+hir-stats - Struct                    64 ( 0.7%)             1\n+hir-stats - Match                     64 ( 0.7%)             1\n+hir-stats - InlineAsm                 64 ( 0.7%)             1\n hir-stats - Lit                      128 ( 1.3%)             2\n-hir-stats - Block                    384 ( 3.8%)             6\n-hir-stats Item                     960 ( 9.4%)            12            80\n+hir-stats - Block                    384 ( 3.9%)             6\n+hir-stats Item                     960 ( 9.8%)            12            80\n hir-stats - Trait                     80 ( 0.8%)             1\n hir-stats - Enum                      80 ( 0.8%)             1\n hir-stats - ExternCrate               80 ( 0.8%)             1\n hir-stats - ForeignMod                80 ( 0.8%)             1\n hir-stats - Impl                      80 ( 0.8%)             1\n hir-stats - Fn                       160 ( 1.6%)             2\n-hir-stats - Use                      400 ( 3.9%)             5\n-hir-stats Ty                     1_080 (10.6%)            15            72\n-hir-stats - Ptr                       72 ( 0.7%)             1\n-hir-stats - Rptr                      72 ( 0.7%)             1\n-hir-stats - Path                     936 ( 9.2%)            13\n-hir-stats Path                   1_536 (15.1%)            32            48\n-hir-stats PathSegment            2_240 (22.0%)            40            56\n+hir-stats - Use                      400 ( 4.1%)             5\n+hir-stats Path                   1_536 (15.7%)            32            48\n+hir-stats PathSegment            2_240 (23.0%)            40            56\n hir-stats ----------------------------------------------------------------\n-hir-stats Total                 10_168\n+hir-stats Total                  9_760\n hir-stats"}, {"sha": "ff23ed5fffa3cd04bd86060bb207aa853c426a18", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4314615ff87d6b07290efddd1d1132a50bff9b0d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4314615ff87d6b07290efddd1d1132a50bff9b0d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=4314615ff87d6b07290efddd1d1132a50bff9b0d", "patch": "@@ -929,7 +929,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         }\n     }\n \n-    pub fn hash_lifetime(&mut self, lifetime: Lifetime) {\n+    pub fn hash_lifetime(&mut self, lifetime: &Lifetime) {\n         std::mem::discriminant(&lifetime.name).hash(&mut self.s);\n         if let LifetimeName::Param(param_id, ref name) = lifetime.name {\n             std::mem::discriminant(name).hash(&mut self.s);"}]}