{"sha": "c2aa7485d28f684834630b754bd68bb5850f2f4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYWE3NDg1ZDI4ZjY4NDgzNDYzMGI3NTRiZDY4YmI1ODUwZjJmNGE=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-12-15T01:21:00Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-01-03T22:34:52Z"}, "message": "add tests", "tree": {"sha": "2c4198301dd9c5b33ef798f85421c33487a7fd07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c4198301dd9c5b33ef798f85421c33487a7fd07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2aa7485d28f684834630b754bd68bb5850f2f4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2aa7485d28f684834630b754bd68bb5850f2f4a", "html_url": "https://github.com/rust-lang/rust/commit/c2aa7485d28f684834630b754bd68bb5850f2f4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2aa7485d28f684834630b754bd68bb5850f2f4a/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ab27b255cad40d62954fa5e619e8d243e70bc8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ab27b255cad40d62954fa5e619e8d243e70bc8c", "html_url": "https://github.com/rust-lang/rust/commit/4ab27b255cad40d62954fa5e619e8d243e70bc8c"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "0984362993cb9bef9ba89429914088bf0b03ed9d", "filename": "src/test/run-pass/traits/principal-less-trait-objects.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c2aa7485d28f684834630b754bd68bb5850f2f4a/src%2Ftest%2Frun-pass%2Ftraits%2Fprincipal-less-trait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2aa7485d28f684834630b754bd68bb5850f2f4a/src%2Ftest%2Frun-pass%2Ftraits%2Fprincipal-less-trait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Fprincipal-less-trait-objects.rs?ref=c2aa7485d28f684834630b754bd68bb5850f2f4a", "patch": "@@ -0,0 +1,41 @@\n+// Check that trait-objects without a principal codegen properly.\n+\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::mem;\n+\n+// Array is to make sure the size is not exactly pointer-size, so\n+// we can be sure we are measuring the right size in the\n+// `size_of_val` test.\n+struct SetOnDrop<'a>(&'a AtomicUsize, [u8; 64]);\n+impl<'a> Drop for SetOnDrop<'a> {\n+    fn drop(&mut self) {\n+        self.0.store(self.0.load(Ordering::Relaxed)+1, Ordering::Relaxed);\n+    }\n+}\n+\n+trait TypeEq<V: ?Sized> {}\n+impl<T: ?Sized> TypeEq<T> for T {}\n+fn assert_types_eq<U: ?Sized, V: ?Sized>() where U: TypeEq<V> {}\n+\n+fn main() {\n+    // Check that different ways of writing the same type are equal.\n+    assert_types_eq::<dyn Sync, dyn Sync + Sync>();\n+    assert_types_eq::<dyn Sync + Send, dyn Send + Sync>();\n+    assert_types_eq::<dyn Sync + Send + Sync, dyn Send + Sync>();\n+\n+    // Check that codegen works.\n+    //\n+    // Using `AtomicUsize` here because `Cell<u32>` is not `Sync`, and\n+    // so can't be made into a `Box<dyn Sync>`.\n+    let c = AtomicUsize::new(0);\n+    {\n+        let d: Box<dyn Sync> = Box::new(SetOnDrop(&c, [0; 64]));\n+\n+        assert_eq!(mem::size_of_val(&*d),\n+                   mem::size_of::<SetOnDrop>());\n+        assert_eq!(mem::align_of_val(&*d),\n+                   mem::align_of::<SetOnDrop>());\n+        assert_eq!(c.load(Ordering::Relaxed), 0);\n+    }\n+    assert_eq!(c.load(Ordering::Relaxed), 1);\n+}"}]}