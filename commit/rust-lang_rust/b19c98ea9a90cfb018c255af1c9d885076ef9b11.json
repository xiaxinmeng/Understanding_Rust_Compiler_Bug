{"sha": "b19c98ea9a90cfb018c255af1c9d885076ef9b11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOWM5OGVhOWE5MGNmYjAxOGMyNTVhZjFjOWQ4ODUwNzZlZjliMTE=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-25T23:22:22Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-25T23:38:12Z"}, "message": "Some perf fixes, although vec::slice is still too slow (Issue #2719)", "tree": {"sha": "72b05fb28724b5eed5d98cad6f40ea2722106a6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72b05fb28724b5eed5d98cad6f40ea2722106a6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b19c98ea9a90cfb018c255af1c9d885076ef9b11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b19c98ea9a90cfb018c255af1c9d885076ef9b11", "html_url": "https://github.com/rust-lang/rust/commit/b19c98ea9a90cfb018c255af1c9d885076ef9b11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b19c98ea9a90cfb018c255af1c9d885076ef9b11/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7adad4c6cb1042084b62c35a6577c125f089b3d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7adad4c6cb1042084b62c35a6577c125f089b3d5", "html_url": "https://github.com/rust-lang/rust/commit/7adad4c6cb1042084b62c35a6577c125f089b3d5"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "7b64f6da0bbdb6b061b0732c73647cc07e9fe4be", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=b19c98ea9a90cfb018c255af1c9d885076ef9b11", "patch": "@@ -1727,7 +1727,7 @@ mod unsafe {\n         vec::reserve(v, len + 1u);\n         vec::as_buf(v) {|b| ptr::memcpy(b, buf, len); }\n         vec::unsafe::set_len(v, len);\n-        v += [0u8];\n+        vec::push(v, 0u8);\n \n         assert is_utf8(v);\n         ret ::unsafe::transmute(v);"}, {"sha": "b58d5b3b3b12ef363eb401cac558447dfce7664e", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=b19c98ea9a90cfb018c255af1c9d885076ef9b11", "patch": "@@ -255,14 +255,18 @@ pure fn slice<T: copy>(v: [const T]/&, start: uint, end: uint) -> [T] {\n     assert (start <= end);\n     assert (end <= len(v));\n     let mut result = [];\n-    unchecked{reserve(result, end - start)}\n+\n+//    unchecked {\n+//        push_all(result, view(v, start, end));\n+//    }\n+\n     let mut i = start;\n     while i < end { result += [v[i]]; i += 1u; }\n     ret result;\n }\n \n #[doc = \"Return a slice that points into another slice.\"]\n-pure fn view<T: copy>(v: [T]/&, start: uint, end: uint) -> [T]/&a {\n+pure fn view<T: copy>(v: [const T]/&a, start: uint, end: uint) -> [T]/&a {\n     assert (start <= end);\n     assert (end <= len(v));\n     unpack_slice(v) {|p, _len|\n@@ -454,6 +458,7 @@ fn push_slow<T>(&v: [const T], +initval: T) {\n \n #[inline(always)]\n fn push_all<T: copy>(&v: [const T], rhs: [const T]/&) {\n+    reserve(v, v.len() + rhs.len());\n     for uint::range(0u, rhs.len()) {|i|\n         push(v, rhs[i]);\n     }"}, {"sha": "d02c498025cf62f41599a32a3d521210cea8adab", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=b19c98ea9a90cfb018c255af1c9d885076ef9b11", "patch": "@@ -193,7 +193,7 @@ impl writer for writer {\n         write_vuint(self.writer, tag_id);\n \n         // Write a placeholder four-byte size.\n-        self.size_positions += [self.writer.tell()];\n+        vec::push(self.size_positions, self.writer.tell());\n         let zeroes: [u8]/& = [0u8, 0u8, 0u8, 0u8]/&;\n         self.writer.write(zeroes);\n     }"}, {"sha": "5c5a6e09d2f75b65edc47bb5744e6696014aa0f3", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=b19c98ea9a90cfb018c255af1c9d885076ef9b11", "patch": "@@ -43,9 +43,9 @@ fn merge_sort<T: copy>(le: le<T>, v: [const T]) -> [T] {\n         let mut b_ix = 0u;\n         while a_ix < a_len && b_ix < b_len {\n             if le(a[a_ix], b[b_ix]) {\n-                rs += [a[a_ix]];\n+                vec::push(rs, a[a_ix]);\n                 a_ix += 1u;\n-            } else { rs += [b[b_ix]]; b_ix += 1u; }\n+            } else { vec::push(rs, b[b_ix]); b_ix += 1u; }\n         }\n         rs += vec::slice(a, a_ix, a_len);\n         rs += vec::slice(b, b_ix, b_len);"}, {"sha": "26e8b938468cf88885bf177b0c25216524dd5b65", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=b19c98ea9a90cfb018c255af1c9d885076ef9b11", "patch": "@@ -36,7 +36,7 @@ fn sort_and_fmt(mm: hashmap<[u8], uint>, total: uint) -> str {\n \n    // map -> [(k,%)]\n    mm.each(fn&(key: [u8], val: uint) -> bool {\n-      pairs += [(key, pct(val, total))];\n+      vec::push(pairs, (key, pct(val, total)));\n       ret true;\n    });\n "}, {"sha": "7254b5bbb9e8e4955a703c5f483b9a095d2ed775", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=b19c98ea9a90cfb018c255af1c9d885076ef9b11", "patch": "@@ -72,7 +72,7 @@ fn chanmb(i: uint, size: uint, ch: comm::chan<line>) -> ()\n     for uint::range(0_u, size/8_u) {\n         |j|\n         let x = {re: xincr*(j as f64) - 1.5f64, im: y};\n-        crv += [fillbyte(x, incr)];\n+        vec::push(crv, fillbyte(x, incr));\n     };\n     comm::send(ch, {i:i, b:crv});\n }"}, {"sha": "5faf7f858573fc4cfe8954f472e4b2aca7cb65c8", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=b19c98ea9a90cfb018c255af1c9d885076ef9b11", "patch": "@@ -21,7 +21,7 @@ fn calc(children: uint, parent_ch: comm::chan<msg>) {\n     iter::repeat (children) {||\n         alt check comm::recv(port) {\n           ready(child_ch) {\n-            child_chs += [child_ch];\n+            vec::push(child_chs, child_ch);\n           }\n         }\n     }"}, {"sha": "b8ec6563a9676239ae8407b723ba48931bf9f279", "filename": "src/test/run-pass/vec-slice.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Ftest%2Frun-pass%2Fvec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19c98ea9a90cfb018c255af1c9d885076ef9b11/src%2Ftest%2Frun-pass%2Fvec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-slice.rs?ref=b19c98ea9a90cfb018c255af1c9d885076ef9b11", "patch": "@@ -1,7 +1,6 @@\n-// xfail-test\n fn main() {\n-  let vec<int> v = [1,2,3,4,5];\n-  auto v2 = v.(1,2);\n-  assert (v2.(0) == 2);\n-  assert (v2.(1) == 3);\n+    let  v = [1,2,3,4,5];\n+    let v2 = vec::slice(v, 1, 3);\n+    assert (v2[0] == 2);\n+    assert (v2[1] == 3);\n }"}]}