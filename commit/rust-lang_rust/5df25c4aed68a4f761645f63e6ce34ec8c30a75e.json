{"sha": "5df25c4aed68a4f761645f63e6ce34ec8c30a75e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZjI1YzRhZWQ2OGE0Zjc2MTY0NWY2M2U2Y2UzNGVjOGMzMGE3NWU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-26T04:27:48Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-19T00:14:33Z"}, "message": "rustc: remove redundant/unused fields from layout::Abi::Vector.", "tree": {"sha": "ad366489a7ee32680424f27ca24d5841d662d45e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad366489a7ee32680424f27ca24d5841d662d45e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5df25c4aed68a4f761645f63e6ce34ec8c30a75e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5df25c4aed68a4f761645f63e6ce34ec8c30a75e", "html_url": "https://github.com/rust-lang/rust/commit/5df25c4aed68a4f761645f63e6ce34ec8c30a75e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5df25c4aed68a4f761645f63e6ce34ec8c30a75e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b203a26efbd0d57115fc5dd40ec5410a8e5bd9da", "url": "https://api.github.com/repos/rust-lang/rust/commits/b203a26efbd0d57115fc5dd40ec5410a8e5bd9da", "html_url": "https://github.com/rust-lang/rust/commit/b203a26efbd0d57115fc5dd40ec5410a8e5bd9da"}], "stats": {"total": 47, "additions": 19, "deletions": 28}, "files": [{"sha": "9d8736338f1284a22c5ff78d0b4aa88818c71630", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5df25c4aed68a4f761645f63e6ce34ec8c30a75e/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df25c4aed68a4f761645f63e6ce34ec8c30a75e/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=5df25c4aed68a4f761645f63e6ce34ec8c30a75e", "patch": "@@ -740,10 +740,7 @@ impl FieldPlacement {\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Abi {\n     Scalar(Primitive),\n-    Vector {\n-        element: Primitive,\n-        count: u64\n-    },\n+    Vector,\n     Aggregate {\n         /// If true, the size is exact, otherwise it's only a lower bound.\n         sized: bool,\n@@ -755,15 +752,15 @@ impl Abi {\n     /// Returns true if the layout corresponds to an unsized type.\n     pub fn is_unsized(&self) -> bool {\n         match *self {\n-            Abi::Scalar(_) | Abi::Vector { .. } => false,\n+            Abi::Scalar(_) | Abi::Vector => false,\n             Abi::Aggregate { sized, .. } => !sized\n         }\n     }\n \n     /// Returns true if the fields of the layout are packed.\n     pub fn is_packed(&self) -> bool {\n         match *self {\n-            Abi::Scalar(_) | Abi::Vector { .. } => false,\n+            Abi::Scalar(_) | Abi::Vector => false,\n             Abi::Aggregate { packed, .. } => packed\n         }\n     }\n@@ -1202,14 +1199,14 @@ impl<'a, 'tcx> CachedLayout {\n             ty::TyAdt(def, ..) if def.repr.simd() => {\n                 let count = ty.simd_size(tcx) as u64;\n                 let element = cx.layout_of(ty.simd_type(tcx))?;\n-                let element_scalar = match element.abi {\n-                    Abi::Scalar(value) => value,\n+                match element.abi {\n+                    Abi::Scalar(_) => {}\n                     _ => {\n                         tcx.sess.fatal(&format!(\"monomorphising SIMD type `{}` with \\\n                                                 a non-machine element type `{}`\",\n                                                 ty, element.ty));\n                     }\n-                };\n+                }\n                 let size = element.size.checked_mul(count, dl)\n                     .ok_or(LayoutError::SizeOverflow(ty))?;\n                 let align = dl.vector_align(size);\n@@ -1221,10 +1218,7 @@ impl<'a, 'tcx> CachedLayout {\n                         stride: element.size,\n                         count\n                     },\n-                    abi: Abi::Vector {\n-                        element: element_scalar,\n-                        count\n-                    },\n+                    abi: Abi::Vector,\n                     size,\n                     align,\n                     primitive_align: align\n@@ -2076,7 +2070,7 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n     pub fn is_zst(&self) -> bool {\n         match self.abi {\n             Abi::Scalar(_) => false,\n-            Abi::Vector { count, .. } => count == 0,\n+            Abi::Vector => self.size.bytes() == 0,\n             Abi::Aggregate { sized, .. } => sized && self.size.bytes() == 0\n         }\n     }\n@@ -2233,10 +2227,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for Abi {\n             Scalar(ref value) => {\n                 value.hash_stable(hcx, hasher);\n             }\n-            Vector { ref element, count } => {\n-                element.hash_stable(hcx, hasher);\n-                count.hash_stable(hcx, hasher);\n-            }\n+            Vector => {}\n             Aggregate { packed, sized } => {\n                 packed.hash_stable(hcx, hasher);\n                 sized.hash_stable(hcx, hasher);"}, {"sha": "688fa8fe02d03187918323dee02ebbcaa7fbb377", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5df25c4aed68a4f761645f63e6ce34ec8c30a75e/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df25c4aed68a4f761645f63e6ce34ec8c30a75e/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=5df25c4aed68a4f761645f63e6ce34ec8c30a75e", "patch": "@@ -279,7 +279,7 @@ impl<'tcx> LayoutExt<'tcx> for TyLayout<'tcx> {\n     fn is_aggregate(&self) -> bool {\n         match self.abi {\n             layout::Abi::Scalar(_) |\n-            layout::Abi::Vector { .. } => false,\n+            layout::Abi::Vector => false,\n             layout::Abi::Aggregate { .. } => true\n         }\n     }\n@@ -300,7 +300,7 @@ impl<'tcx> LayoutExt<'tcx> for TyLayout<'tcx> {\n                 })\n             }\n \n-            layout::Abi::Vector { .. } => {\n+            layout::Abi::Vector => {\n                 Some(Reg {\n                     kind: RegKind::Vector,\n                     size: self.size"}, {"sha": "b799a7690bdf893650a6c84114ca914842b4dfc2", "filename": "src/librustc_trans/cabi_x86_64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5df25c4aed68a4f761645f63e6ce34ec8c30a75e/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df25c4aed68a4f761645f63e6ce34ec8c30a75e/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86_64.rs?ref=5df25c4aed68a4f761645f63e6ce34ec8c30a75e", "patch": "@@ -75,14 +75,14 @@ fn classify_arg<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &ArgType<'tcx>)\n                 unify(cls, off, reg);\n             }\n \n-            layout::Abi::Vector { element, count } => {\n+            layout::Abi::Vector => {\n                 unify(cls, off, Class::Sse);\n \n                 // everything after the first one is the upper\n                 // half of a register.\n-                let eltsz = element.size(ccx);\n-                for i in 1..count {\n-                    unify(cls, off + eltsz * (i as u64), Class::SseUp);\n+                for i in 1..layout.fields.count() {\n+                    let field_off = off + layout.fields.offset(i);\n+                    unify(cls, field_off, Class::SseUp);\n                 }\n             }\n "}, {"sha": "ceb649be197efd54368f90a6e249f54d28b923d3", "filename": "src/librustc_trans/cabi_x86_win64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5df25c4aed68a4f761645f63e6ce34ec8c30a75e/src%2Flibrustc_trans%2Fcabi_x86_win64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df25c4aed68a4f761645f63e6ce34ec8c30a75e/src%2Flibrustc_trans%2Fcabi_x86_win64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86_win64.rs?ref=5df25c4aed68a4f761645f63e6ce34ec8c30a75e", "patch": "@@ -26,7 +26,7 @@ pub fn compute_abi_info(fty: &mut FnType) {\n                     _ => a.make_indirect()\n                 }\n             }\n-            layout::Abi::Vector { .. } => {\n+            layout::Abi::Vector => {\n                 // FIXME(eddyb) there should be a size cap here\n                 // (probably what clang calls \"illegal vectors\").\n             }"}, {"sha": "d782ffe1f9d34ef2e4d021342093f4575c6fd0fe", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5df25c4aed68a4f761645f63e6ce34ec8c30a75e/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df25c4aed68a4f761645f63e6ce34ec8c30a75e/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=5df25c4aed68a4f761645f63e6ce34ec8c30a75e", "patch": "@@ -1098,7 +1098,7 @@ fn trans_const_adt<'a, 'tcx>(\n     match l.variants {\n         layout::Variants::Single { index } => {\n             assert_eq!(variant_index, index);\n-            if let layout::Abi::Vector { .. } = l.abi {\n+            if let layout::Abi::Vector = l.abi {\n                 Const::new(C_vector(&vals.iter().map(|x| x.llval).collect::<Vec<_>>()), t)\n             } else if let layout::FieldPlacement::Union(_) = l.fields {\n                 assert_eq!(variant_index, 0);"}, {"sha": "6fec1a675cd63b0730abd78d9f5afe938853cd59", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5df25c4aed68a4f761645f63e6ce34ec8c30a75e/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5df25c4aed68a4f761645f63e6ce34ec8c30a75e/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=5df25c4aed68a4f761645f63e6ce34ec8c30a75e", "patch": "@@ -23,7 +23,7 @@ fn uncached_llvm_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                 -> Type {\n     match layout.abi {\n         layout::Abi::Scalar(_) => bug!(\"handled elsewhere\"),\n-        layout::Abi::Vector { .. } => {\n+        layout::Abi::Vector => {\n             return Type::vector(&layout.field(ccx, 0).llvm_type(ccx),\n                                 layout.fields.count() as u64);\n         }\n@@ -158,7 +158,7 @@ pub trait LayoutLlvmExt<'tcx> {\n impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n     fn is_llvm_immediate(&self) -> bool {\n         match self.abi {\n-            layout::Abi::Scalar(_) | layout::Abi::Vector { .. } => true,\n+            layout::Abi::Scalar(_) | layout::Abi::Vector => true,\n \n             layout::Abi::Aggregate { .. } => self.is_zst()\n         }"}]}