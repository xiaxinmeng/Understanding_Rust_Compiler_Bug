{"sha": "6810f5286b6b91daab06fc3dccb27d8c46f14349", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MTBmNTI4NmI2YjkxZGFhYjA2ZmMzZGNjYjI3ZDhjNDZmMTQzNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-12T11:27:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-12T11:27:48Z"}, "message": "Auto merge of #53793 - toidiu:ak-stabalize, r=nikomatsakis\n\nstabilize outlives requirements\n\nhttps://github.com/rust-lang/rust/issues/44493\n\nr? @nikomatsakis", "tree": {"sha": "f576d065912988d1cf5e916750ea4a8a6e4b07fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f576d065912988d1cf5e916750ea4a8a6e4b07fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6810f5286b6b91daab06fc3dccb27d8c46f14349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6810f5286b6b91daab06fc3dccb27d8c46f14349", "html_url": "https://github.com/rust-lang/rust/commit/6810f5286b6b91daab06fc3dccb27d8c46f14349", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6810f5286b6b91daab06fc3dccb27d8c46f14349/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8586ec6980462c99a8926646201b2444d8938d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/8586ec6980462c99a8926646201b2444d8938d29", "html_url": "https://github.com/rust-lang/rust/commit/8586ec6980462c99a8926646201b2444d8938d29"}, {"sha": "731f4efae5ee18082202f31e8699fe07eb0a5d19", "url": "https://api.github.com/repos/rust-lang/rust/commits/731f4efae5ee18082202f31e8699fe07eb0a5d19", "html_url": "https://github.com/rust-lang/rust/commit/731f4efae5ee18082202f31e8699fe07eb0a5d19"}], "stats": {"total": 1555, "additions": 802, "deletions": 753}, "files": [{"sha": "fe82f8555da329e3ba96fbb10bb8b440891121e0", "filename": "src/doc/unstable-book/src/language-features/infer-outlives-requirements.md", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-outlives-requirements.md", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-outlives-requirements.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-outlives-requirements.md?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,67 +0,0 @@\n-# `infer_outlives_requirements`\n-\n-The tracking issue for this feature is: [#44493]\n-\n-[#44493]: https://github.com/rust-lang/rust/issues/44493\n-\n-------------------------\n-The `infer_outlives_requirements` feature indicates that certain\n-outlives requirements can be inferred by the compiler rather than\n-stating them explicitly.\n-\n-For example, currently generic struct definitions that contain\n-references, require where-clauses of the form T: 'a. By using\n-this feature the outlives predicates will be inferred, although\n-they may still be written explicitly.\n-\n-```rust,ignore (pseudo-Rust)\n-struct Foo<'a, T>\n-  where T: 'a // <-- currently required\n-  {\n-      bar: &'a T,\n-  }\n-```\n-\n-\n-## Examples:\n-\n-\n-```rust,ignore (pseudo-Rust)\n-#![feature(infer_outlives_requirements)]\n-\n-// Implicitly infer T: 'a\n-struct Foo<'a, T> {\n-    bar: &'a T,\n-}\n-```\n-\n-```rust,ignore (pseudo-Rust)\n-#![feature(infer_outlives_requirements)]\n-\n-// Implicitly infer `U: 'b`\n-struct Foo<'b, U> {\n-    bar: Bar<'b, U>\n-}\n-\n-struct Bar<'a, T> where T: 'a {\n-    x: &'a (),\n-    y: T,\n-}\n-```\n-\n-```rust,ignore (pseudo-Rust)\n-#![feature(infer_outlives_requirements)]\n-\n-// Implicitly infer `b': 'a`\n-struct Foo<'a, 'b, T> {\n-    x: &'a &'b T\n-}\n-```\n-\n-```rust,ignore (pseudo-Rust)\n-#![feature(infer_outlives_requirements)]\n-\n-// Implicitly infer `<T as std::iter::Iterator>::Item : 'a`\n-struct Foo<'a, T: Iterator> {\n-    bar: &'a T::Item\n-```"}, {"sha": "2d271fd0dca8dcb0adc68f7c53cf4bf8e6dc02af", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -77,7 +77,6 @@\n #![cfg_attr(not(test), feature(fn_traits))]\n #![cfg_attr(not(test), feature(generator_trait))]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![cfg_attr(test, feature(test))]\n \n #![feature(allocator_api)]"}, {"sha": "bdf0e37a2e672d8de3ae3d274b31a294c12918e8", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -17,7 +17,6 @@\n #![feature(libc)]\n #![feature(linkage)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n #![cfg_attr(dummy_jemalloc, allow(dead_code, unused_extern_crates))]"}, {"sha": "65204ebf71413027a9bf79f0c0ff048907d03f74", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -18,7 +18,6 @@\n #![feature(allocator_api)]\n #![feature(core_intrinsics)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\", target_os = \"redox\"), feature(libc))]"}, {"sha": "6ad703180c224eecd7e6777c5beb18c17ea8fe5f", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -27,7 +27,6 @@\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(raw_vec_internals)]\n #![cfg_attr(test, feature(test))]\n "}, {"sha": "763409327de2bd623b7e20a111dc9a2fa87e548e", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -92,7 +92,6 @@\n #![feature(link_llvm_intrinsics)]\n #![feature(never_type)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(exhaustive_patterns)]\n #![feature(macro_at_most_once_rep)]\n #![feature(no_core)]"}, {"sha": "1bac6d22d37441effd48a7ef1e4b0755c8c67979", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -21,7 +21,6 @@\n        test(attr(deny(warnings))))]\n \n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n \n pub use self::Piece::*;\n pub use self::Position::*;"}, {"sha": "9fa48adebdf07a523411152409a2e1465c07fc37", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -289,7 +289,6 @@\n        test(attr(allow(unused_variables), deny(warnings))))]\n \n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(str_escape)]\n \n use self::LabelText::*;"}, {"sha": "14221f3d79e84050f91f50b58736b1281b022c8f", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -25,7 +25,6 @@\n #![feature(core_intrinsics)]\n #![feature(libc)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(panic_runtime)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]"}, {"sha": "9c3fc76c307a6f7696ba4ce2f163c1dea7812602", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -35,7 +35,6 @@\n #![feature(lang_items)]\n #![feature(libc)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(panic_unwind)]\n #![feature(raw)]\n #![feature(staged_api)]"}, {"sha": "bb55661e45c75d7c854095219b2d3873245a093c", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -28,7 +28,6 @@\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(lang_items)]"}, {"sha": "a85593253b100f8f184ab7a336335ef7961ea5e8", "filename": "src/libprofiler_builtins/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibprofiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibprofiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -16,5 +16,4 @@\n             issue = \"0\")]\n #![allow(unused_features)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(staged_api)]"}, {"sha": "3318bbd8c870ec20a9294a1c349dc466a970c789", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 52, "deletions": 38, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1232,41 +1232,54 @@ let x: i32 = \"I am not a number!\";\n \"##,\n \n E0309: r##\"\n-Types in type definitions have lifetimes associated with them that represent\n-how long the data stored within them is guaranteed to be live. This lifetime\n-must be as long as the data needs to be alive, and missing the constraint that\n-denotes this will cause this error.\n+The type definition contains some field whose type\n+requires an outlives annotation. Outlives annotations\n+(e.g., `T: 'a`) are used to guarantee that all the data in T is valid\n+for at least the lifetime `'a`. This scenario most commonly\n+arises when the type contains an associated type reference\n+like `<T as SomeTrait<'a>>::Output`, as shown in this example:\n \n ```compile_fail,E0309\n-// This won't compile because T is not constrained, meaning the data\n-// stored in it is not guaranteed to last as long as the reference\n+// This won't compile because the applicable impl of\n+// `SomeTrait` (below) requires that `T: 'a`, but the struct does\n+// not have a matching where-clause.\n struct Foo<'a, T> {\n-    foo: &'a T\n+    foo: <T as SomeTrait<'a>>::Output,\n }\n-```\n \n-This will compile, because it has the constraint on the type parameter:\n+trait SomeTrait<'a> {\n+    type Output;\n+}\n \n-```\n-struct Foo<'a, T: 'a> {\n-    foo: &'a T\n+impl<'a, T> SomeTrait<'a> for T\n+where\n+    T: 'a,\n+{\n+    type Output = u32;\n }\n ```\n \n-To see why this is important, consider the case where `T` is itself a reference\n-(e.g., `T = &str`). If we don't include the restriction that `T: 'a`, the\n-following code would be perfectly legal:\n+Here, the where clause `T: 'a` that appears on the impl is not known to be\n+satisfied on the struct. To make this example compile, you have to add\n+a where-clause like `T: 'a` to the struct definition:\n \n-```compile_fail,E0309\n-struct Foo<'a, T> {\n-    foo: &'a T\n+```\n+struct Foo<'a, T>\n+where\n+    T: 'a,\n+{\n+    foo: <T as SomeTrait<'a>>::Output\n }\n \n-fn main() {\n-    let v = \"42\".to_string();\n-    let f = Foo{foo: &v};\n-    drop(v);\n-    println!(\"{}\", f.foo); // but we've already dropped v!\n+trait SomeTrait<'a> {\n+    type Output;\n+}\n+\n+impl<'a, T> SomeTrait<'a> for T\n+where\n+    T: 'a,\n+{\n+    type Output = u32;\n }\n ```\n \"##,\n@@ -1465,30 +1478,31 @@ A reference has a longer lifetime than the data it references.\n Erroneous code example:\n \n ```compile_fail,E0491\n-// struct containing a reference requires a lifetime parameter,\n-// because the data the reference points to must outlive the struct (see E0106)\n-struct Struct<'a> {\n-    ref_i32: &'a i32,\n+trait SomeTrait<'a> {\n+    type Output;\n }\n \n-// However, a nested struct like this, the signature itself does not tell\n-// whether 'a outlives 'b or the other way around.\n-// So it could be possible that 'b of reference outlives 'a of the data.\n-struct Nested<'a, 'b> {\n-    ref_struct: &'b Struct<'a>, // compile error E0491\n+impl<'a, T> SomeTrait<'a> for T {\n+    type Output = &'a T; // compile error E0491\n }\n ```\n \n-To fix this issue, you can specify a bound to the lifetime like below:\n+Here, the problem is that a reference type like `&'a T` is only valid\n+if all the data in T outlives the lifetime `'a`. But this impl as written\n+is applicable to any lifetime `'a` and any type `T` -- we have no guarantee\n+that `T` outlives `'a`. To fix this, you can add a where clause like\n+`where T: 'a`.\n \n ```\n-struct Struct<'a> {\n-    ref_i32: &'a i32,\n+trait SomeTrait<'a> {\n+    type Output;\n }\n \n-// 'a: 'b means 'a outlives 'b\n-struct Nested<'a: 'b, 'b> {\n-    ref_struct: &'b Struct<'a>,\n+impl<'a, T> SomeTrait<'a> for T\n+where\n+    T: 'a,\n+{\n+    type Output = &'a T; // compile error E0491\n }\n ```\n \"##,"}, {"sha": "56096a5d423f33e986b4c47b03026929bb7a6377", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -52,7 +52,6 @@\n #![feature(exhaustive_patterns)]\n #![feature(extern_types)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(non_exhaustive)]\n #![feature(proc_macro_internals)]\n #![feature(quote)]"}, {"sha": "2a3404ee830343d10de823c8663c175394c9d7a6", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(rustc_private)]\n \n #[macro_use] extern crate log;"}, {"sha": "d6e821d427d0580f45266e98cce22d40be793747", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -46,7 +46,6 @@\n #![forbid(unsafe_code)]\n \n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(try_from)]\n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]"}, {"sha": "b3ba86ad8a4b32af8f7f6629cca53f8891221b8f", "filename": "src/librustc_asan/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_asan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_asan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -11,7 +11,6 @@\n #![sanitizer_runtime]\n #![feature(alloc_system)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "16da8c8a3b8bf6651dc41d8b70ef0f9b7cc8341d", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -15,7 +15,6 @@\n #![allow(non_camel_case_types)]\n \n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(quote)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "9cb233122c3d086d105b6d73e51d7b9259ae1aaa", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -27,7 +27,6 @@\n #![allow(unused_attributes)]\n #![feature(libc)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(quote)]\n #![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "635819e94e8679bfed6b729350c25cb400ce79c9", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -20,7 +20,6 @@\n #![feature(box_syntax)]\n #![feature(custom_attribute)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![allow(unused_attributes)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "55dec45a0982471fbec041d2f11ec61102625b68", "filename": "src/librustc_cratesio_shim/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_extern_crates)]\n \n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n \n extern crate bitflags;\n extern crate log;"}, {"sha": "87a033138c32e1e49be0e416e19097e3d1c4e5ce", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -29,7 +29,6 @@\n #![feature(optin_builtin_traits)]\n #![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(allow_internal_unstable)]\n #![feature(vec_resize_with)]\n "}, {"sha": "a96c277d4b555d723e9967cdf55c7b717daf8a22", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -21,7 +21,6 @@\n #![feature(box_syntax)]\n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(option_replace)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "3582c2359c8b9f653f5ed5d27148f2845e18e801", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -17,7 +17,6 @@\n #![feature(range_contains)]\n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(optin_builtin_traits)]\n \n extern crate atty;"}, {"sha": "acdcf2b459e92efc99006e02a97e445be61aaf45", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -15,7 +15,6 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(specialization)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "9ed69a2dc9b8ec95528f6cc2a09712985204624c", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -28,7 +28,6 @@\n #![feature(box_syntax)]\n #![cfg_attr(stage0, feature(macro_vis_matcher))]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(macro_at_most_once_rep)]"}, {"sha": "387660473a887dea0a2524a4bdceefbd0b78b515", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(static_nobundle)]\n \n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "b3ba86ad8a4b32af8f7f6629cca53f8891221b8f", "filename": "src/librustc_lsan/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -11,7 +11,6 @@\n #![sanitizer_runtime]\n #![feature(alloc_system)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "09a8bea0941b618a20933ac77ec9a5a079fb1711", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -16,7 +16,6 @@\n #![feature(libc)]\n #![feature(macro_at_most_once_rep)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![feature(quote)]"}, {"sha": "e71de0001fbe342d14a829e7b4addc68ce090da3", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -15,7 +15,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n */\n \n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(in_band_lifetimes)]\n #![feature(impl_header_lifetime_elision)]\n #![feature(slice_patterns)]"}, {"sha": "b3ba86ad8a4b32af8f7f6629cca53f8891221b8f", "filename": "src/librustc_msan/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_msan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_msan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -11,7 +11,6 @@\n #![sanitizer_runtime]\n #![feature(alloc_system)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "d62cb00923f7047411ff3a17d5da3886d33d6ea9", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -19,7 +19,6 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(rustc_diagnostic_macros)]\n \n #[macro_use]"}, {"sha": "fa7008be73a0797d7a4570886396af6b3a0db7d9", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -11,7 +11,6 @@\n #![allow(nonstandard_style)]\n \n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n \n pub struct Intrinsic {\n     pub inputs: &'static [&'static Type],"}, {"sha": "67f53a67313f798f1f9d2979d9f57e0a949095af", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -65,7 +65,6 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(rustc_diagnostic_macros)]\n \n #[macro_use] extern crate syntax;"}, {"sha": "47e8588857d6a3303b77ef3dfb16c7906d2b0de4", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -13,7 +13,6 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(rustc_diagnostic_macros)]\n \n #![recursion_limit=\"256\"]\n@@ -1381,7 +1380,13 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     }\n \n     fn predicates(&mut self) -> &mut Self {\n-        let predicates = self.tcx.predicates_of(self.item_def_id);\n+        // NB: We use `explicit_predicates_of` and not `predicates_of`\n+        // because we don't want to report privacy errors due to where\n+        // clauses that the compiler inferred. We only want to\n+        // consider the ones that the user wrote. This is important\n+        // for the inferred outlives rules; see\n+        // `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.\n+        let predicates = self.tcx.explicit_predicates_of(self.item_def_id);\n         for predicate in &predicates.predicates {\n             predicate.visit_with(self);\n             match predicate {"}, {"sha": "c725d56d0cfdc8b178dbace230bb982c1e8395e6", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -14,7 +14,6 @@\n \n #![feature(crate_visibility_modifier)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]\n "}, {"sha": "8d6a75ecc59257eb83b66c5d4090327824ee7b41", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -13,7 +13,6 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(custom_attribute)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![allow(unused_attributes)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "c198b19ce616075e3cc55b88973ee1263478363f", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -25,7 +25,6 @@\n #![cfg_attr(stage0, feature(const_fn))]\n #![cfg_attr(not(stage0), feature(min_const_fn))]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(slice_patterns)]\n \n #[macro_use]"}, {"sha": "7fe1af819512951ec02cd061c4e54585d66b2338", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -16,7 +16,6 @@\n #![feature(extern_prelude)]\n #![feature(in_band_lifetimes)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "b3ba86ad8a4b32af8f7f6629cca53f8891221b8f", "filename": "src/librustc_tsan/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_tsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_tsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -11,7 +11,6 @@\n #![sanitizer_runtime]\n #![feature(alloc_system)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "5309be21768f1553fd575177a12c2e3ae8b55b89", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1578,14 +1578,10 @@ fn predicates_defined_on<'a, 'tcx>(\n     def_id: DefId,\n ) -> ty::GenericPredicates<'tcx> {\n     let explicit = tcx.explicit_predicates_of(def_id);\n-    let predicates = if tcx.sess.features_untracked().infer_outlives_requirements {\n-        [\n-            &explicit.predicates[..],\n-            &tcx.inferred_outlives_of(def_id)[..],\n-        ].concat()\n-    } else {\n-        explicit.predicates\n-    };\n+    let predicates = [\n+      &explicit.predicates[..],\n+      &tcx.inferred_outlives_of(def_id)[..],\n+    ].concat();\n \n     ty::GenericPredicates {\n         parent: explicit.parent,"}, {"sha": "aaa42f8d41225a8ec1dd1b06a6aaa9e84e293d16", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -76,7 +76,6 @@ This API is completely unstable and subject to change.\n #![feature(crate_visibility_modifier)]\n #![feature(exhaustive_patterns)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(quote)]\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "254146c0ef3aa3dbe61976a7c7dc2705b99e8c24", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -66,7 +66,8 @@ impl<'cx, 'tcx> ItemLikeVisitor<'tcx> for InferVisitor<'cx, 'tcx> {\n \n         debug!(\"InferVisitor::visit_item(item={:?})\", item_did);\n \n-        let node_id = self.tcx\n+        let node_id = self\n+            .tcx\n             .hir\n             .as_local_node_id(item_did)\n             .expect(\"expected local def-id\");\n@@ -108,7 +109,8 @@ impl<'cx, 'tcx> ItemLikeVisitor<'tcx> for InferVisitor<'cx, 'tcx> {\n         // Therefore mark `predicates_added` as true and which will ensure\n         // we walk the crates again and re-calculate predicates for all\n         // items.\n-        let item_predicates_len: usize = self.global_inferred_outlives\n+        let item_predicates_len: usize = self\n+            .global_inferred_outlives\n             .get(&item_did)\n             .map(|p| p.len())\n             .unwrap_or(0);"}, {"sha": "bc471d427048b5651f4d612724bc4fa658824948", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -17,7 +17,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(set_stdio)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(test)]"}, {"sha": "1f6ee3d867b17b3c7225b31a84266de1f039df8a", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -25,7 +25,6 @@ Core encoding and decoding interfaces.\n #![feature(specialization)]\n #![feature(never_type)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![cfg_attr(test, feature(test))]\n \n pub use self::serialize::{Decoder, Encoder, Decodable, Encodable};"}, {"sha": "17f6923eae72368b6190bc70fde284aca26b2ae4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -274,7 +274,6 @@\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(exhaustive_patterns)]\n #![feature(on_unimplemented)]\n #![feature(optin_builtin_traits)]"}, {"sha": "d98e457439927fac53f01e016c15dab5bb1ee4a0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -412,9 +412,6 @@ declare_features! (\n     // Use `?` as the Kleene \"at most one\" operator\n     (active, macro_at_most_once_rep, \"1.25.0\", Some(48075), None),\n \n-    // Infer outlives requirements; RFC 2093\n-    (active, infer_outlives_requirements, \"1.26.0\", Some(44493), None),\n-\n     // Infer static outlives requirements; RFC 2093\n     (active, infer_static_outlives_requirements, \"1.26.0\", Some(44493), None),\n \n@@ -672,6 +669,8 @@ declare_features! (\n     (accepted, proc_macro_path_invoc, \"1.30.0\", Some(38356), None),\n     // Allows all literals in attribute lists and values of key-value pairs.\n     (accepted, attr_literals, \"1.30.0\", Some(34981), None),\n+    // Infer outlives requirements; RFC 2093\n+    (accepted, infer_outlives_requirements, \"1.30.0\", Some(44493), None),\n     (accepted, panic_handler, \"1.30.0\", Some(44489), None),\n     // Used to preserve symbols (see llvm.used)\n     (accepted, used, \"1.30.0\", Some(40289), None),\n@@ -1124,12 +1123,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                  \"never will be stable\",\n                                  cfg_fn!(rustc_attrs))),\n \n-    // RFC #2093\n-    (\"infer_outlives_requirements\", Normal, Gated(Stability::Unstable,\n-                                   \"infer_outlives_requirements\",\n-                                   \"infer outlives requirements is an experimental feature\",\n-                                   cfg_fn!(infer_outlives_requirements))),\n-\n     // RFC #2093\n     (\"infer_static_outlives_requirements\", Normal, Gated(Stability::Unstable,\n                                    \"infer_static_outlives_requirements\","}, {"sha": "2aaab6aaa16d931942844d5f06e73ff3bb076b3d", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -22,7 +22,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(macro_at_most_once_rep)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(rustc_attrs)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]"}, {"sha": "31089c9ff82cefefc9a3111d6e65b91aafcbb024", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -17,7 +17,6 @@\n #![feature(proc_macro_internals)]\n #![feature(decl_macro)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(str_escape)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "bd70344b018127992879e1f0684868c91cad8035", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -22,7 +22,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(custom_attribute)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(non_exhaustive)]\n #![feature(optin_builtin_traits)]\n #![feature(specialization)]"}, {"sha": "a49fd67639dbe5210fe1118a2f1e672f8958f7b5", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -51,7 +51,6 @@\n // Handle rustfmt skips\n #![feature(custom_attribute)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![allow(unused_attributes)]\n \n use std::io::prelude::*;"}, {"sha": "6ffa6e9be937d134c91b661134d31a00b8603f18", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -36,7 +36,6 @@\n #![feature(fnbox)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc))]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(set_stdio)]\n #![feature(panic_unwind)]\n #![feature(staged_api)]"}, {"sha": "424a7e3d009ecaa6c930c200c7819552b7609e89", "filename": "src/libunwind/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibunwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Flibunwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flib.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -14,7 +14,6 @@\n #![feature(cfg_target_vendor)]\n #![feature(link_cfg)]\n #![cfg_attr(not(stage0), feature(nll))]\n-#![cfg_attr(not(stage0), feature(infer_outlives_requirements))]\n #![feature(staged_api)]\n #![feature(unwind_attributes)]\n #![feature(static_nobundle)]"}, {"sha": "8aa75e6315d1ddf245844a938d47d8f745e4e9f1", "filename": "src/test/incremental/issue-51409.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fincremental%2Fissue-51409.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fincremental%2Fissue-51409.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-51409.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -13,8 +13,6 @@\n // Regression test that `infer_outlives_predicates` can be\n // used with incremental without an ICE.\n \n-#![feature(infer_outlives_requirements)]\n-\n struct Foo<'a, T> {\n   x: &'a T\n }"}, {"sha": "6343dc201c5d9f3e3980f0753798649e856fc423", "filename": "src/test/ui/dep-graph/dep-graph-struct-signature.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -88,7 +88,6 @@ mod invalid_signatures {\n     }\n \n     #[rustc_then_this_would_need(FnSignature)] //~ ERROR no path\n-    #[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path\n     fn b(x: WontChange) { }\n \n     #[rustc_then_this_would_need(FnSignature)] //~ ERROR no path from `WillChange`"}, {"sha": "0d75bf5a9adc0831109ade2e8e4558ba051d27a8", "filename": "src/test/ui/dep-graph/dep-graph-struct-signature.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -82,20 +82,14 @@ error: no path from `WillChange` to `FnSignature`\n LL |     #[rustc_then_this_would_need(FnSignature)] //~ ERROR no path\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: no path from `WillChange` to `TypeckTables`\n-  --> $DIR/dep-graph-struct-signature.rs:91:5\n-   |\n-LL |     #[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: no path from `WillChange` to `FnSignature`\n-  --> $DIR/dep-graph-struct-signature.rs:94:5\n+  --> $DIR/dep-graph-struct-signature.rs:93:5\n    |\n LL |     #[rustc_then_this_would_need(FnSignature)] //~ ERROR no path from `WillChange`\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: no path from `WillChange` to `TypeckTables`\n-  --> $DIR/dep-graph-struct-signature.rs:95:5\n+  --> $DIR/dep-graph-struct-signature.rs:94:5\n    |\n LL |     #[rustc_then_this_would_need(TypeckTables)] //~ ERROR no path from `WillChange`\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -136,5 +130,5 @@ error: OK\n LL |         #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 22 previous errors\n "}, {"sha": "01ccc50a130f2a56b976bf16a6f1f8c8a9d58e45", "filename": "src/test/ui/feature-gates/feature-gate-infer_outlives_requirements.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_outlives_requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_outlives_requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_outlives_requirements.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Needs an explicit where clause stating outlives condition. (RFC 2093)\n-\n-// Type T needs to outlive lifetime 'a.\n-struct Foo<'a, T> {\n-    bar: &'a [T] //~ ERROR the parameter type `T` may not live long enough [E0309]\n-}\n-\n-fn main() { }"}, {"sha": "560e494b5828dec66e2a5705001b090911c8146e", "filename": "src/test/ui/feature-gates/feature-gate-infer_outlives_requirements.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_outlives_requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_outlives_requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_outlives_requirements.stderr?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,17 +0,0 @@\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/feature-gate-infer_outlives_requirements.rs:15:5\n-   |\n-LL | struct Foo<'a, T> {\n-   |                - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     bar: &'a [T] //~ ERROR the parameter type `T` may not live long enough [E0309]\n-   |     ^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'a [T]` does not outlive the data it points at\n-  --> $DIR/feature-gate-infer_outlives_requirements.rs:15:5\n-   |\n-LL |     bar: &'a [T] //~ ERROR the parameter type `T` may not live long enough [E0309]\n-   |     ^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0309`."}, {"sha": "0dd5a8512852a53033649ebb2e800ccb3e52542b", "filename": "src/test/ui/issue-53419.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fissue-53419.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fissue-53419.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-53419.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -10,8 +10,6 @@\n \n //compile-pass\n \n-#![feature(infer_outlives_requirements)]\n-\n struct Foo {\n     bar: for<'r> Fn(usize, &'r FnMut())\n }"}, {"sha": "24ed7ce92bfda9e14f7e3aa37dc562724fe106a5", "filename": "src/test/ui/issues/issue-37323.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fissues%2Fissue-37323.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fissues%2Fissue-37323.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37323.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-pass\n+\n #![feature(rustc_attrs)]\n #![allow(warnings)]\n \n@@ -17,7 +19,6 @@ struct Point {\n \n struct NestedA<'a, 'b> {\n     x: &'a NestedB<'b>\n-    //~^ ERROR E0491\n }\n \n struct NestedB<'a> {"}, {"sha": "a83923a591023896456569943f7bea7e5c347e10", "filename": "src/test/ui/issues/issue-37323.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fissues%2Fissue-37323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fissues%2Fissue-37323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37323.stderr?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,20 +0,0 @@\n-error[E0491]: in type `&'a NestedB<'b>`, reference has a longer lifetime than the data it references\n-  --> $DIR/issue-37323.rs:19:5\n-   |\n-LL |     x: &'a NestedB<'b>\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: the pointer is valid for the lifetime 'a as defined on the struct at 18:16\n-  --> $DIR/issue-37323.rs:18:16\n-   |\n-LL | struct NestedA<'a, 'b> {\n-   |                ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the struct at 18:20\n-  --> $DIR/issue-37323.rs:18:20\n-   |\n-LL | struct NestedA<'a, 'b> {\n-   |                    ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0491`."}, {"sha": "7bc83fd750703b00d22bd2a09c1f6748bcec27ca", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -14,9 +14,9 @@ trait ListItem<'a> {\n \n trait Collection { fn len(&self) -> usize; }\n \n+// is now well formed. RFC 2093\n struct List<'a, T: ListItem<'a>> {\n     slice: &'a [T]\n-    //~^ ERROR may not live long enough\n }\n \n impl<'a, T: ListItem<'a>> Collection for List<'a, T> {"}, {"sha": "db8d57bb19d03e931cb14ba35852606e900a7c29", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,17 +1,3 @@\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:18:5\n-   |\n-LL | struct List<'a, T: ListItem<'a>> {\n-   |                 -- help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     slice: &'a [T]\n-   |     ^^^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'a [T]` does not outlive the data it points at\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:18:5\n-   |\n-LL |     slice: &'a [T]\n-   |     ^^^^^^^^^^^^^^\n-\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:29:5\n    |\n@@ -109,7 +95,7 @@ LL | |         //~^ ERROR may not live long enough\n LL | |     }\n    | |_____^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors occurred: E0309, E0310.\n For more information about an error, try `rustc --explain E0309`."}, {"sha": "e09aabaf69253ee855c1b7a8368c033dd5af38f7", "filename": "src/test/ui/lint/lint-ctypes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -11,6 +11,8 @@\n #![deny(improper_ctypes)]\n #![feature(libc)]\n \n+#![allow(private_in_public)]\n+\n extern crate libc;\n \n use std::marker::PhantomData;"}, {"sha": "b243c49316f8cdacdb408ae449242a66eac784e2", "filename": "src/test/ui/lint/lint-ctypes.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,5 +1,5 @@\n error: `extern` block uses type `Foo` which is not FFI-safe: this struct has unspecified layout\n-  --> $DIR/lint-ctypes.rs:54:28\n+  --> $DIR/lint-ctypes.rs:56:28\n    |\n LL |     pub fn ptr_type1(size: *const Foo); //~ ERROR: uses type `Foo`\n    |                            ^^^^^^^^^^\n@@ -11,155 +11,155 @@ LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n    = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n note: type defined here\n-  --> $DIR/lint-ctypes.rs:32:1\n+  --> $DIR/lint-ctypes.rs:34:1\n    |\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `Foo` which is not FFI-safe: this struct has unspecified layout\n-  --> $DIR/lint-ctypes.rs:55:28\n+  --> $DIR/lint-ctypes.rs:57:28\n    |\n LL |     pub fn ptr_type2(size: *const Foo); //~ ERROR: uses type `Foo`\n    |                            ^^^^^^^^^^\n    |\n    = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n note: type defined here\n-  --> $DIR/lint-ctypes.rs:32:1\n+  --> $DIR/lint-ctypes.rs:34:1\n    |\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `[u32]` which is not FFI-safe: slices have no C equivalent\n-  --> $DIR/lint-ctypes.rs:56:26\n+  --> $DIR/lint-ctypes.rs:58:26\n    |\n LL |     pub fn slice_type(p: &[u32]); //~ ERROR: uses type `[u32]`\n    |                          ^^^^^^\n    |\n    = help: consider using a raw pointer instead\n \n error: `extern` block uses type `str` which is not FFI-safe: string slices have no C equivalent\n-  --> $DIR/lint-ctypes.rs:57:24\n+  --> $DIR/lint-ctypes.rs:59:24\n    |\n LL |     pub fn str_type(p: &str); //~ ERROR: uses type `str`\n    |                        ^^^^\n    |\n    = help: consider using `*const u8` and a length instead\n \n error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n-  --> $DIR/lint-ctypes.rs:58:24\n+  --> $DIR/lint-ctypes.rs:60:24\n    |\n LL |     pub fn box_type(p: Box<u32>); //~ ERROR uses type `std::boxed::Box<u32>`\n    |                        ^^^^^^^^\n    |\n    = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n \n error: `extern` block uses type `char` which is not FFI-safe: the `char` type has no C equivalent\n-  --> $DIR/lint-ctypes.rs:59:25\n+  --> $DIR/lint-ctypes.rs:61:25\n    |\n LL |     pub fn char_type(p: char); //~ ERROR uses type `char`\n    |                         ^^^^\n    |\n    = help: consider using `u32` or `libc::wchar_t` instead\n \n error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n-  --> $DIR/lint-ctypes.rs:60:25\n+  --> $DIR/lint-ctypes.rs:62:25\n    |\n LL |     pub fn i128_type(p: i128); //~ ERROR uses type `i128`\n    |                         ^^^^\n \n error: `extern` block uses type `u128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n-  --> $DIR/lint-ctypes.rs:61:25\n+  --> $DIR/lint-ctypes.rs:63:25\n    |\n LL |     pub fn u128_type(p: u128); //~ ERROR uses type `u128`\n    |                         ^^^^\n \n error: `extern` block uses type `dyn std::clone::Clone` which is not FFI-safe: trait objects have no C equivalent\n-  --> $DIR/lint-ctypes.rs:62:26\n+  --> $DIR/lint-ctypes.rs:64:26\n    |\n LL |     pub fn trait_type(p: &Clone); //~ ERROR uses type `dyn std::clone::Clone`\n    |                          ^^^^^^\n \n error: `extern` block uses type `(i32, i32)` which is not FFI-safe: tuples have unspecified layout\n-  --> $DIR/lint-ctypes.rs:63:26\n+  --> $DIR/lint-ctypes.rs:65:26\n    |\n LL |     pub fn tuple_type(p: (i32, i32)); //~ ERROR uses type `(i32, i32)`\n    |                          ^^^^^^^^^^\n    |\n    = help: consider using a struct instead\n \n error: `extern` block uses type `(i32, i32)` which is not FFI-safe: tuples have unspecified layout\n-  --> $DIR/lint-ctypes.rs:64:27\n+  --> $DIR/lint-ctypes.rs:66:27\n    |\n LL |     pub fn tuple_type2(p: I32Pair); //~ ERROR uses type `(i32, i32)`\n    |                           ^^^^^^^\n    |\n    = help: consider using a struct instead\n \n error: `extern` block uses type `ZeroSize` which is not FFI-safe: this struct has no fields\n-  --> $DIR/lint-ctypes.rs:65:25\n+  --> $DIR/lint-ctypes.rs:67:25\n    |\n LL |     pub fn zero_size(p: ZeroSize); //~ ERROR struct has no fields\n    |                         ^^^^^^^^\n    |\n    = help: consider adding a member to this struct\n note: type defined here\n-  --> $DIR/lint-ctypes.rs:28:1\n+  --> $DIR/lint-ctypes.rs:30:1\n    |\n LL | pub struct ZeroSize;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `ZeroSizeWithPhantomData` which is not FFI-safe: composed only of PhantomData\n-  --> $DIR/lint-ctypes.rs:66:33\n+  --> $DIR/lint-ctypes.rs:68:33\n    |\n LL |     pub fn zero_size_phantom(p: ZeroSizeWithPhantomData); //~ ERROR composed only of PhantomData\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `std::marker::PhantomData<bool>` which is not FFI-safe: composed only of PhantomData\n-  --> $DIR/lint-ctypes.rs:68:12\n+  --> $DIR/lint-ctypes.rs:70:12\n    |\n LL |         -> ::std::marker::PhantomData<bool>; //~ ERROR: composed only of PhantomData\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `fn()` which is not FFI-safe: this function pointer has Rust-specific calling convention\n-  --> $DIR/lint-ctypes.rs:69:23\n+  --> $DIR/lint-ctypes.rs:71:23\n    |\n LL |     pub fn fn_type(p: RustFn); //~ ERROR function pointer has Rust-specific\n    |                       ^^^^^^\n    |\n    = help: consider using an `extern fn(...) -> ...` function pointer instead\n \n error: `extern` block uses type `fn()` which is not FFI-safe: this function pointer has Rust-specific calling convention\n-  --> $DIR/lint-ctypes.rs:70:24\n+  --> $DIR/lint-ctypes.rs:72:24\n    |\n LL |     pub fn fn_type2(p: fn()); //~ ERROR function pointer has Rust-specific\n    |                        ^^^^\n    |\n    = help: consider using an `extern fn(...) -> ...` function pointer instead\n \n error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n-  --> $DIR/lint-ctypes.rs:71:28\n+  --> $DIR/lint-ctypes.rs:73:28\n    |\n LL |     pub fn fn_contained(p: RustBadRet); //~ ERROR: uses type `std::boxed::Box<u32>`\n    |                            ^^^^^^^^^^\n    |\n    = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n \n error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n-  --> $DIR/lint-ctypes.rs:72:32\n+  --> $DIR/lint-ctypes.rs:74:32\n    |\n LL |     pub fn transparent_i128(p: TransparentI128); //~ ERROR: uses type `i128`\n    |                                ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `str` which is not FFI-safe: string slices have no C equivalent\n-  --> $DIR/lint-ctypes.rs:73:31\n+  --> $DIR/lint-ctypes.rs:75:31\n    |\n LL |     pub fn transparent_str(p: TransparentStr); //~ ERROR: uses type `str`\n    |                               ^^^^^^^^^^^^^^\n    |\n    = help: consider using `*const u8` and a length instead\n \n error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n-  --> $DIR/lint-ctypes.rs:74:30\n+  --> $DIR/lint-ctypes.rs:76:30\n    |\n LL |     pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: uses type `std::boxed::Box<u32>`\n    |                              ^^^^^^^^^^^^^^^^"}, {"sha": "34d1075f9b71dbd1d1bd766d2422bb3e1a606832", "filename": "src/test/ui/no_owned_box_lang_item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fno_owned_box_lang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fno_owned_box_lang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_owned_box_lang_item.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -15,10 +15,12 @@\n #![feature(lang_items, box_syntax)]\n #![no_std]\n \n+use core::panic::PanicInfo;\n+\n fn main() {\n     let x = box 1i32;\n }\n \n #[lang = \"eh_personality\"] extern fn eh_personality() {}\n #[lang = \"eh_unwind_resume\"] extern fn eh_unwind_resume() {}\n-#[lang = \"panic_impl\"] fn panic_impl() -> ! { loop {} }\n+#[lang = \"panic_impl\"] fn panic_impl(panic: &PanicInfo) -> ! { loop {} }"}, {"sha": "a2d3cf6779f1768f4bf620ddd76862cd89bdd934", "filename": "src/test/ui/regions/regions-enum-not-wf.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -8,31 +8,43 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+\n // Various examples of structs whose fields are not well-formed.\n \n #![allow(dead_code)]\n \n+trait Dummy<'a> {\n+  type Out;\n+}\n+impl<'a, T> Dummy<'a> for T\n+where T: 'a\n+{\n+  type Out = ();\n+}\n+type RequireOutlives<'a, T> = <T as Dummy<'a>>::Out;\n+\n enum Ref1<'a, T> {\n-    Ref1Variant1(&'a T) //~ ERROR the parameter type `T` may not live long enough\n+    Ref1Variant1(RequireOutlives<'a, T>) //~ ERROR the parameter type `T` may not live long enough\n }\n \n enum Ref2<'a, T> {\n     Ref2Variant1,\n-    Ref2Variant2(isize, &'a T), //~ ERROR the parameter type `T` may not live long enough\n+    Ref2Variant2(isize, RequireOutlives<'a, T>), //~ ERROR the parameter type `T` may not live long enough\n }\n \n enum RefOk<'a, T:'a> {\n     RefOkVariant1(&'a T)\n }\n \n+// This is now well formed. RFC 2093\n enum RefIndirect<'a, T> {\n     RefIndirectVariant1(isize, RefOk<'a,T>)\n-        //~^ ERROR the parameter type `T` may not live long enough\n }\n \n-enum RefDouble<'a, 'b, T> {\n-    RefDoubleVariant1(&'a &'b T)\n-        //~^ ERROR reference has a longer lifetime than the data\n+enum RefDouble<'a, 'b, T> { //~ ERROR 45:1: 48:2: the parameter type `T` may not live long enough [E0309]\n+    RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n+        //~^ 46:23: 46:49: the parameter type `T` may not live long enough [E0309]\n }\n \n fn main() { }"}, {"sha": "923ea17622ac08e5b62457b8fde3cb2c7dd17886", "filename": "src/test/ui/regions/regions-enum-not-wf.stderr", "status": "modified", "additions": 40, "deletions": 37, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-enum-not-wf.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,64 +1,67 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-enum-not-wf.rs:16:18\n+  --> $DIR/regions-enum-not-wf.rs:28:18\n    |\n LL | enum Ref1<'a, T> {\n    |               - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     Ref1Variant1(&'a T) //~ ERROR the parameter type `T` may not live long enough\n-   |                  ^^^^^\n+LL |     Ref1Variant1(RequireOutlives<'a, T>) //~ ERROR the parameter type `T` may not live long enough\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...so that the reference type `&'a T` does not outlive the data it points at\n-  --> $DIR/regions-enum-not-wf.rs:16:18\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/regions-enum-not-wf.rs:28:18\n    |\n-LL |     Ref1Variant1(&'a T) //~ ERROR the parameter type `T` may not live long enough\n-   |                  ^^^^^\n+LL |     Ref1Variant1(RequireOutlives<'a, T>) //~ ERROR the parameter type `T` may not live long enough\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-enum-not-wf.rs:21:25\n+  --> $DIR/regions-enum-not-wf.rs:33:25\n    |\n LL | enum Ref2<'a, T> {\n    |               - help: consider adding an explicit lifetime bound `T: 'a`...\n LL |     Ref2Variant1,\n-LL |     Ref2Variant2(isize, &'a T), //~ ERROR the parameter type `T` may not live long enough\n-   |                         ^^^^^\n+LL |     Ref2Variant2(isize, RequireOutlives<'a, T>), //~ ERROR the parameter type `T` may not live long enough\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...so that the reference type `&'a T` does not outlive the data it points at\n-  --> $DIR/regions-enum-not-wf.rs:21:25\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/regions-enum-not-wf.rs:33:25\n    |\n-LL |     Ref2Variant2(isize, &'a T), //~ ERROR the parameter type `T` may not live long enough\n-   |                         ^^^^^\n+LL |     Ref2Variant2(isize, RequireOutlives<'a, T>), //~ ERROR the parameter type `T` may not live long enough\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-enum-not-wf.rs:29:32\n+  --> $DIR/regions-enum-not-wf.rs:45:1\n    |\n-LL | enum RefIndirect<'a, T> {\n-   |                      - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     RefIndirectVariant1(isize, RefOk<'a,T>)\n-   |                                ^^^^^^^^^^^\n+LL |   enum RefDouble<'a, 'b, T> { //~ ERROR 45:1: 48:2: the parameter type `T` may not live long enough [E0309]\n+   |   ^                      - help: consider adding an explicit lifetime bound `T: 'b`...\n+   |  _|\n+   | |\n+LL | |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n+LL | |         //~^ 46:23: 46:49: the parameter type `T` may not live long enough [E0309]\n+LL | | }\n+   | |_^\n    |\n note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-enum-not-wf.rs:29:32\n+  --> $DIR/regions-enum-not-wf.rs:45:1\n    |\n-LL |     RefIndirectVariant1(isize, RefOk<'a,T>)\n-   |                                ^^^^^^^^^^^\n+LL | / enum RefDouble<'a, 'b, T> { //~ ERROR 45:1: 48:2: the parameter type `T` may not live long enough [E0309]\n+LL | |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n+LL | |         //~^ 46:23: 46:49: the parameter type `T` may not live long enough [E0309]\n+LL | | }\n+   | |_^\n \n-error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-enum-not-wf.rs:34:23\n-   |\n-LL |     RefDoubleVariant1(&'a &'b T)\n-   |                       ^^^^^^^^^\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-enum-not-wf.rs:46:23\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the enum at 33:16\n-  --> $DIR/regions-enum-not-wf.rs:33:16\n+LL | enum RefDouble<'a, 'b, T> { //~ ERROR 45:1: 48:2: the parameter type `T` may not live long enough [E0309]\n+   |                        - help: consider adding an explicit lifetime bound `T: 'b`...\n+LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL | enum RefDouble<'a, 'b, T> {\n-   |                ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the enum at 33:20\n-  --> $DIR/regions-enum-not-wf.rs:33:20\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/regions-enum-not-wf.rs:46:23\n    |\n-LL | enum RefDouble<'a, 'b, T> {\n-   |                    ^^\n+LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n \n-Some errors occurred: E0309, E0491.\n-For more information about an error, try `rustc --explain E0309`.\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "7a2be8c0d95bb2fb5f2b8256de2e6e1424bc8015", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-region-rev.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region-rev.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -13,6 +13,8 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n+// compile-pass\n+\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n@@ -21,9 +23,8 @@ mod rev_variant_struct_region {\n         x: fn(&'a i32),\n     }\n     enum Bar<'a,'b> {\n-        V(&'a Foo<'b>) //~ ERROR reference has a longer lifetime\n+        V(&'a Foo<'b>)\n     }\n }\n \n-#[rustc_error]\n fn main() { }"}, {"sha": "5084097e30d1104c707c4120f363362671f7ae16", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-region-rev.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region-rev.stderr?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,20 +0,0 @@\n-error[E0491]: in type `&'a rev_variant_struct_region::Foo<'b>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-enum-region-rev.rs:24:11\n-   |\n-LL |         V(&'a Foo<'b>) //~ ERROR reference has a longer lifetime\n-   |           ^^^^^^^^^^^\n-   |\n-note: the pointer is valid for the lifetime 'a as defined on the enum at 23:14\n-  --> $DIR/regions-outlives-nominal-type-enum-region-rev.rs:23:14\n-   |\n-LL |     enum Bar<'a,'b> {\n-   |              ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the enum at 23:17\n-  --> $DIR/regions-outlives-nominal-type-enum-region-rev.rs:23:17\n-   |\n-LL |     enum Bar<'a,'b> {\n-   |                 ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0491`."}, {"sha": "07127263bf869814be1c7e140c7378c7fe4d09f7", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-region.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -13,6 +13,8 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n+// compile-pass\n+\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n@@ -21,9 +23,8 @@ mod variant_struct_region {\n         x: &'a i32,\n     }\n     enum Bar<'a,'b> {\n-        V(&'a Foo<'b>) //~ ERROR reference has a longer lifetime\n+        V(&'a Foo<'b>)\n     }\n }\n \n-#[rustc_error]\n fn main() { }"}, {"sha": "ce187eddfa9d69fbd77dc094b7e82fd5e1575e17", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-region.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region.stderr?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,20 +0,0 @@\n-error[E0491]: in type `&'a variant_struct_region::Foo<'b>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-enum-region.rs:24:11\n-   |\n-LL |         V(&'a Foo<'b>) //~ ERROR reference has a longer lifetime\n-   |           ^^^^^^^^^^^\n-   |\n-note: the pointer is valid for the lifetime 'a as defined on the enum at 23:14\n-  --> $DIR/regions-outlives-nominal-type-enum-region.rs:23:14\n-   |\n-LL |     enum Bar<'a,'b> {\n-   |              ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the enum at 23:17\n-  --> $DIR/regions-outlives-nominal-type-enum-region.rs:23:17\n-   |\n-LL |     enum Bar<'a,'b> {\n-   |                 ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0491`."}, {"sha": "4941b568fc6c97ef6a628b98d8a4f6b5ce5f8c54", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-type-rev.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type-rev.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -13,17 +13,18 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n+//compile-pass\n+\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n-mod rev_variant_struct_type {\n+mod variant_struct_type {\n     struct Foo<T> {\n         x: fn(T)\n     }\n     enum Bar<'a,'b> {\n-        V(&'a Foo<&'b i32>) //~ ERROR reference has a longer lifetime\n+        V(&'a Foo<&'b i32>)\n     }\n }\n \n-#[rustc_error]\n fn main() { }"}, {"sha": "8636b89b71abe181903eb713b7c935e4be2f877f", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-type-rev.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type-rev.stderr?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,20 +0,0 @@\n-error[E0491]: in type `&'a rev_variant_struct_type::Foo<&'b i32>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-enum-type-rev.rs:24:11\n-   |\n-LL |         V(&'a Foo<&'b i32>) //~ ERROR reference has a longer lifetime\n-   |           ^^^^^^^^^^^^^^^^\n-   |\n-note: the pointer is valid for the lifetime 'a as defined on the enum at 23:14\n-  --> $DIR/regions-outlives-nominal-type-enum-type-rev.rs:23:14\n-   |\n-LL |     enum Bar<'a,'b> {\n-   |              ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the enum at 23:17\n-  --> $DIR/regions-outlives-nominal-type-enum-type-rev.rs:23:17\n-   |\n-LL |     enum Bar<'a,'b> {\n-   |                 ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0491`."}, {"sha": "38eb0c97a47dea6967a38579070ccd7af2d99e84", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-type.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -13,6 +13,8 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n+// compile-pass\n+\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n@@ -21,9 +23,8 @@ mod variant_struct_type {\n         x: T\n     }\n     enum Bar<'a,'b> {\n-        F(&'a Foo<&'b i32>) //~ ERROR reference has a longer lifetime\n+        V(&'a Foo<&'b i32>)\n     }\n }\n \n-#[rustc_error]\n fn main() { }"}, {"sha": "c209547e20c8489ff20d7c06e563281dd636303d", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-type.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type.stderr?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,20 +0,0 @@\n-error[E0491]: in type `&'a variant_struct_type::Foo<&'b i32>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-enum-type.rs:24:11\n-   |\n-LL |         F(&'a Foo<&'b i32>) //~ ERROR reference has a longer lifetime\n-   |           ^^^^^^^^^^^^^^^^\n-   |\n-note: the pointer is valid for the lifetime 'a as defined on the enum at 23:14\n-  --> $DIR/regions-outlives-nominal-type-enum-type.rs:23:14\n-   |\n-LL |     enum Bar<'a,'b> {\n-   |              ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the enum at 23:17\n-  --> $DIR/regions-outlives-nominal-type-enum-type.rs:23:17\n-   |\n-LL |     enum Bar<'a,'b> {\n-   |                 ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0491`."}, {"sha": "50febdd45797ee8a27476237391f24f397a005a8", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-region-rev.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region-rev.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -13,6 +13,8 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n+// compile-pass\n+\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n@@ -21,9 +23,8 @@ mod rev_variant_struct_region {\n         x: fn(&'a i32),\n     }\n     struct Bar<'a,'b> {\n-        f: &'a Foo<'b> //~ ERROR reference has a longer lifetime\n+        f: &'a Foo<'b>\n     }\n }\n \n-#[rustc_error]\n fn main() { }"}, {"sha": "48980bdf8320ed94d4990cd590847bf287e010b3", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-region-rev.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region-rev.stderr?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,20 +0,0 @@\n-error[E0491]: in type `&'a rev_variant_struct_region::Foo<'b>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-struct-region-rev.rs:24:9\n-   |\n-LL |         f: &'a Foo<'b> //~ ERROR reference has a longer lifetime\n-   |         ^^^^^^^^^^^^^^\n-   |\n-note: the pointer is valid for the lifetime 'a as defined on the struct at 23:16\n-  --> $DIR/regions-outlives-nominal-type-struct-region-rev.rs:23:16\n-   |\n-LL |     struct Bar<'a,'b> {\n-   |                ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the struct at 23:19\n-  --> $DIR/regions-outlives-nominal-type-struct-region-rev.rs:23:19\n-   |\n-LL |     struct Bar<'a,'b> {\n-   |                   ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0491`."}, {"sha": "ea07fb4104be160cc6c49fc465e06cd7ffcd03d8", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-region.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -13,6 +13,8 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n+// compile-pass\n+\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n@@ -25,5 +27,4 @@ mod variant_struct_region {\n     }\n }\n \n-#[rustc_error]\n fn main() { }"}, {"sha": "e2b328886b334f9386c1ca3350667dd34b9b8c72", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-region.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region.stderr?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,20 +0,0 @@\n-error[E0491]: in type `&'a variant_struct_region::Foo<'b>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-struct-region.rs:24:9\n-   |\n-LL |         f: &'a Foo<'b> //~ ERROR reference has a longer lifetime\n-   |         ^^^^^^^^^^^^^^\n-   |\n-note: the pointer is valid for the lifetime 'a as defined on the struct at 23:16\n-  --> $DIR/regions-outlives-nominal-type-struct-region.rs:23:16\n-   |\n-LL |     struct Bar<'a,'b> {\n-   |                ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the struct at 23:19\n-  --> $DIR/regions-outlives-nominal-type-struct-region.rs:23:19\n-   |\n-LL |     struct Bar<'a,'b> {\n-   |                   ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0491`."}, {"sha": "735037ac2f6d4a9b507e69d80169723d0729e31b", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-type-rev.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type-rev.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -13,6 +13,8 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n+// compile-pass\n+\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n@@ -25,5 +27,4 @@ mod rev_variant_struct_type {\n     }\n }\n \n-#[rustc_error]\n fn main() { }"}, {"sha": "2bf04ffa64afb87f24d9e185dc0e032dd72b2222", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-type-rev.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type-rev.stderr?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,20 +0,0 @@\n-error[E0491]: in type `&'a rev_variant_struct_type::Foo<&'b i32>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-struct-type-rev.rs:24:9\n-   |\n-LL |         f: &'a Foo<&'b i32> //~ ERROR reference has a longer lifetime\n-   |         ^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the pointer is valid for the lifetime 'a as defined on the struct at 23:16\n-  --> $DIR/regions-outlives-nominal-type-struct-type-rev.rs:23:16\n-   |\n-LL |     struct Bar<'a,'b> {\n-   |                ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the struct at 23:19\n-  --> $DIR/regions-outlives-nominal-type-struct-type-rev.rs:23:19\n-   |\n-LL |     struct Bar<'a,'b> {\n-   |                   ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0491`."}, {"sha": "dfd3583ce6cab95016749f98650f596183024bef", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-type.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -13,6 +13,8 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n+// compile-pass\n+\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n@@ -25,5 +27,4 @@ mod variant_struct_type {\n     }\n }\n \n-#[rustc_error]\n fn main() { }"}, {"sha": "af9f1d3722aebf7c5204b7b65e8717b553d69dae", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-type.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type.stderr?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,20 +0,0 @@\n-error[E0491]: in type `&'a variant_struct_type::Foo<&'b i32>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-struct-type.rs:24:9\n-   |\n-LL |         f: &'a Foo<&'b i32> //~ ERROR reference has a longer lifetime\n-   |         ^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the pointer is valid for the lifetime 'a as defined on the struct at 23:16\n-  --> $DIR/regions-outlives-nominal-type-struct-type.rs:23:16\n-   |\n-LL |     struct Bar<'a,'b> {\n-   |                ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the struct at 23:19\n-  --> $DIR/regions-outlives-nominal-type-struct-type.rs:23:19\n-   |\n-LL |     struct Bar<'a,'b> {\n-   |                   ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0491`."}, {"sha": "9433b8b1952f24b13a61200ba08047251c1818b1", "filename": "src/test/ui/regions/regions-struct-not-wf.lexical.stderr", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.lexical.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.lexical.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.lexical.stderr?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,49 +0,0 @@\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-struct-not-wf.rs:19:5\n-   |\n-LL | struct Ref<'a, T> {\n-   |                - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     field: &'a T\n-   |     ^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'a T` does not outlive the data it points at\n-  --> $DIR/regions-struct-not-wf.rs:19:5\n-   |\n-LL |     field: &'a T\n-   |     ^^^^^^^^^^^^\n-\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-struct-not-wf.rs:29:5\n-   |\n-LL | struct RefIndirect<'a, T> {\n-   |                        - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     field: RefOk<'a, T>\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-struct-not-wf.rs:29:5\n-   |\n-LL |     field: RefOk<'a, T>\n-   |     ^^^^^^^^^^^^^^^^^^^\n-\n-error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-struct-not-wf.rs:35:5\n-   |\n-LL |     field: &'a &'b T\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: the pointer is valid for the lifetime 'a as defined on the struct at 34:18\n-  --> $DIR/regions-struct-not-wf.rs:34:18\n-   |\n-LL | struct DoubleRef<'a, 'b, T> {\n-   |                  ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the struct at 34:22\n-  --> $DIR/regions-struct-not-wf.rs:34:22\n-   |\n-LL | struct DoubleRef<'a, 'b, T> {\n-   |                      ^^\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0309, E0491.\n-For more information about an error, try `rustc --explain E0309`."}, {"sha": "9433b8b1952f24b13a61200ba08047251c1818b1", "filename": "src/test/ui/regions/regions-struct-not-wf.nll.stderr", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.nll.stderr?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,49 +0,0 @@\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-struct-not-wf.rs:19:5\n-   |\n-LL | struct Ref<'a, T> {\n-   |                - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     field: &'a T\n-   |     ^^^^^^^^^^^^\n-   |\n-note: ...so that the reference type `&'a T` does not outlive the data it points at\n-  --> $DIR/regions-struct-not-wf.rs:19:5\n-   |\n-LL |     field: &'a T\n-   |     ^^^^^^^^^^^^\n-\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-struct-not-wf.rs:29:5\n-   |\n-LL | struct RefIndirect<'a, T> {\n-   |                        - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     field: RefOk<'a, T>\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/regions-struct-not-wf.rs:29:5\n-   |\n-LL |     field: RefOk<'a, T>\n-   |     ^^^^^^^^^^^^^^^^^^^\n-\n-error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-struct-not-wf.rs:35:5\n-   |\n-LL |     field: &'a &'b T\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: the pointer is valid for the lifetime 'a as defined on the struct at 34:18\n-  --> $DIR/regions-struct-not-wf.rs:34:18\n-   |\n-LL | struct DoubleRef<'a, 'b, T> {\n-   |                  ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the struct at 34:22\n-  --> $DIR/regions-struct-not-wf.rs:34:22\n-   |\n-LL | struct DoubleRef<'a, 'b, T> {\n-   |                      ^^\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0309, E0491.\n-For more information about an error, try `rustc --explain E0309`."}, {"sha": "bdd708197bc768a497ca5b939b5e34858fca96ef", "filename": "src/test/ui/regions/regions-struct-not-wf.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -10,31 +10,29 @@\n \n // Various examples of structs whose fields are not well-formed.\n \n-// revisions:lexical nll\n-\n #![allow(dead_code)]\n-#![cfg_attr(nll, feature(nll))]\n \n-struct Ref<'a, T> {\n-    field: &'a T\n-        //[lexical]~^ ERROR the parameter type `T` may not live long enough\n-        //[nll]~^^ ERROR the parameter type `T` may not live long enough\n+trait Trait<'a, T> {\n+    type Out;\n+}\n+trait Trait1<'a, 'b, T> {\n+    type Out;\n+}\n+\n+impl<'a, T> Trait<'a, T> for usize {\n+    type Out = &'a T;\n }\n \n struct RefOk<'a, T:'a> {\n     field: &'a T\n }\n \n-struct RefIndirect<'a, T> {\n-    field: RefOk<'a, T>\n-        //[lexical]~^ ERROR the parameter type `T` may not live long enough\n-        //[nll]~^^ ERROR the parameter type `T` may not live long enough\n+impl<'a, T> Trait<'a, T> for u32 {\n+    type Out = RefOk<'a, T>;\n }\n \n-struct DoubleRef<'a, 'b, T> {\n-    field: &'a &'b T\n-        //[lexical]~^ ERROR reference has a longer lifetime than the data it references\n-        //[nll]~^^ ERROR reference has a longer lifetime than the data it references\n+impl<'a, 'b, T> Trait1<'a, 'b, T> for u32 {\n+    type Out = &'a &'b T;\n }\n \n fn main() { }"}, {"sha": "d8c8b6c3ccc86bc944f7853c11709d84a333cf12", "filename": "src/test/ui/regions/regions-struct-not-wf.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-struct-not-wf.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -0,0 +1,49 @@\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-struct-not-wf.rs:23:5\n+   |\n+LL | impl<'a, T> Trait<'a, T> for usize {\n+   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+LL |     type Out = &'a T;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: ...so that the reference type `&'a T` does not outlive the data it points at\n+  --> $DIR/regions-struct-not-wf.rs:23:5\n+   |\n+LL |     type Out = &'a T;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-struct-not-wf.rs:31:5\n+   |\n+LL | impl<'a, T> Trait<'a, T> for u32 {\n+   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+LL |     type Out = RefOk<'a, T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/regions-struct-not-wf.rs:31:5\n+   |\n+LL |     type Out = RefOk<'a, T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data it references\n+  --> $DIR/regions-struct-not-wf.rs:35:5\n+   |\n+LL |     type Out = &'a &'b T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime 'a as defined on the impl at 34:6\n+  --> $DIR/regions-struct-not-wf.rs:34:6\n+   |\n+LL | impl<'a, 'b, T> Trait1<'a, 'b, T> for u32 {\n+   |      ^^\n+note: but the referenced data is only valid for the lifetime 'b as defined on the impl at 34:10\n+  --> $DIR/regions-struct-not-wf.rs:34:10\n+   |\n+LL | impl<'a, 'b, T> Trait1<'a, 'b, T> for u32 {\n+   |          ^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0309, E0491.\n+For more information about an error, try `rustc --explain E0309`."}, {"sha": "cc659cd14b1a1c5328a228ff3063d922e66cea76", "filename": "src/test/ui/rfc-2093-infer-outlives/cross-crate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fcross-crate.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,10 +9,9 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n \n #[rustc_outlives]\n-struct Foo<'a, T> { //~ ERROR 15:1: 17:2: rustc_outlives\n+struct Foo<'a, T> { //~ ERROR 14:1: 16:2: rustc_outlives\n     bar: std::slice::IterMut<'a, T>\n }\n "}, {"sha": "dd00c14ea16f2d3157b41ad29a3f8452f3303e12", "filename": "src/test/ui/rfc-2093-infer-outlives/cross-crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fcross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fcross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fcross-crate.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,7 +1,7 @@\n error: rustc_outlives\n-  --> $DIR/cross-crate.rs:15:1\n+  --> $DIR/cross-crate.rs:14:1\n    |\n-LL | / struct Foo<'a, T> { //~ ERROR 15:1: 17:2: rustc_outlives\n+LL | / struct Foo<'a, T> { //~ ERROR 14:1: 16:2: rustc_outlives\n LL | |     bar: std::slice::IterMut<'a, T>\n LL | | }\n    | |_^"}, {"sha": "47dc5dfdc96e6f0a8bd421ae90fdb2ff5b1b977b", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -10,16 +10,14 @@\n \n // ignore-tidy-linelength\n \n-#![feature(infer_outlives_requirements)]\n-\n /*\n  * We don't infer `T: 'static` outlives relationships by default.\n  * Instead an additional feature gate `infer_static_outlives_requirements`\n  * is required.\n  */\n \n struct Foo<U> {\n-    bar: Bar<U> //~ ERROR 22:5: 22:16: the parameter type `U` may not live long enough [E0310]\n+    bar: Bar<U> //~ ERROR 20:5: 20:16: the parameter type `U` may not live long enough [E0310]\n }\n struct Bar<T: 'static> {\n     x: T,"}, {"sha": "5d8cf0aa3245c262378a6210b0b7c814ba4a67a8", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,15 +1,15 @@\n error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/dont-infer-static.rs:22:5\n+  --> $DIR/dont-infer-static.rs:20:5\n    |\n LL | struct Foo<U> {\n    |            - help: consider adding an explicit lifetime bound `U: 'static`...\n-LL |     bar: Bar<U> //~ ERROR 22:5: 22:16: the parameter type `U` may not live long enough [E0310]\n+LL |     bar: Bar<U> //~ ERROR 20:5: 20:16: the parameter type `U` may not live long enough [E0310]\n    |     ^^^^^^^^^^^\n    |\n note: ...so that the type `U` will meet its required lifetime bounds\n-  --> $DIR/dont-infer-static.rs:22:5\n+  --> $DIR/dont-infer-static.rs:20:5\n    |\n-LL |     bar: Bar<U> //~ ERROR 22:5: 22:16: the parameter type `U` may not live long enough [E0310]\n+LL |     bar: Bar<U> //~ ERROR 20:5: 20:16: the parameter type `U` may not live long enough [E0310]\n    |     ^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "b2c18b274ce013331cb1c94da4cc68fadb730fa2", "filename": "src/test/ui/rfc-2093-infer-outlives/enum.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -10,24 +10,26 @@\n \n // ignore-tidy-linelength\n \n+#![feature(rustc_attrs)]\n+\n // Needs an explicit where clause stating outlives condition. (RFC 2093)\n \n // Type T needs to outlive lifetime 'a.\n-enum Foo<'a, T> {\n-\n+#[rustc_outlives]\n+enum Foo<'a, T> { //~ ERROR rustc_outlives\n     One(Bar<'a, T>)\n }\n \n // Type U needs to outlive lifetime 'b\n-struct Bar<'b, U> {\n-    field2: &'b U //~ ERROR the parameter type `U` may not live long enough [E0309]\n+#[rustc_outlives]\n+struct Bar<'b, U> { //~ ERROR rustc_outlives\n+    field2: &'b U\n }\n \n-\n-\n // Type K needs to outlive lifetime 'c.\n-enum Ying<'c, K> {\n-    One(&'c Yang<K>) //~ ERROR the parameter type `K` may not live long enough [E0309]\n+#[rustc_outlives]\n+enum Ying<'c, K> { //~ ERROR rustc_outlives\n+    One(&'c Yang<K>)\n }\n \n struct Yang<V> {"}, {"sha": "e621c435eea35a5301aebf23c46330fbe9eb5e2b", "filename": "src/test/ui/rfc-2093-infer-outlives/enum.stderr", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,31 +1,32 @@\n-error[E0309]: the parameter type `U` may not live long enough\n-  --> $DIR/enum.rs:23:5\n+error: rustc_outlives\n+  --> $DIR/enum.rs:19:1\n    |\n-LL | struct Bar<'b, U> {\n-   |                - help: consider adding an explicit lifetime bound `U: 'b`...\n-LL |     field2: &'b U //~ ERROR the parameter type `U` may not live long enough [E0309]\n-   |     ^^^^^^^^^^^^^\n+LL | / enum Foo<'a, T> { //~ ERROR rustc_outlives\n+LL | |     One(Bar<'a, T>)\n+LL | | }\n+   | |_^\n    |\n-note: ...so that the reference type `&'b U` does not outlive the data it points at\n-  --> $DIR/enum.rs:23:5\n-   |\n-LL |     field2: &'b U //~ ERROR the parameter type `U` may not live long enough [E0309]\n-   |     ^^^^^^^^^^^^^\n+   = note: T : 'a\n \n-error[E0309]: the parameter type `K` may not live long enough\n-  --> $DIR/enum.rs:30:9\n+error: rustc_outlives\n+  --> $DIR/enum.rs:25:1\n+   |\n+LL | / struct Bar<'b, U> { //~ ERROR rustc_outlives\n+LL | |     field2: &'b U\n+LL | | }\n+   | |_^\n    |\n-LL | enum Ying<'c, K> {\n-   |               - help: consider adding an explicit lifetime bound `K: 'c`...\n-LL |     One(&'c Yang<K>) //~ ERROR the parameter type `K` may not live long enough [E0309]\n-   |         ^^^^^^^^^^^\n+   = note: U : 'b\n+\n+error: rustc_outlives\n+  --> $DIR/enum.rs:31:1\n    |\n-note: ...so that the reference type `&'c Yang<K>` does not outlive the data it points at\n-  --> $DIR/enum.rs:30:9\n+LL | / enum Ying<'c, K> { //~ ERROR rustc_outlives\n+LL | |     One(&'c Yang<K>)\n+LL | | }\n+   | |_^\n    |\n-LL |     One(&'c Yang<K>) //~ ERROR the parameter type `K` may not live long enough [E0309]\n-   |         ^^^^^^^^^^^\n+   = note: K : 'c\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0309`."}, {"sha": "9264259520952055409cded862356bc82416fe38", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-dyn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-dyn.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -10,13 +10,12 @@\n \n #![feature(dyn_trait)]\n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n \n trait Trait<'x, T> where T: 'x {\n }\n \n #[rustc_outlives]\n-struct Foo<'a, A> //~ ERROR 19:1: 22:2: rustc_outlives\n+struct Foo<'a, A> //~ ERROR 18:1: 21:2: rustc_outlives\n {\n     foo: Box<dyn Trait<'a, A>>\n }"}, {"sha": "5d167493308fd431aeec1f5ad4c60efd9c922136", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-dyn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-dyn.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,7 +1,7 @@\n error: rustc_outlives\n-  --> $DIR/explicit-dyn.rs:19:1\n+  --> $DIR/explicit-dyn.rs:18:1\n    |\n-LL | / struct Foo<'a, A> //~ ERROR 19:1: 22:2: rustc_outlives\n+LL | / struct Foo<'a, A> //~ ERROR 18:1: 21:2: rustc_outlives\n LL | | {\n LL | |     foo: Box<dyn Trait<'a, A>>\n LL | | }"}, {"sha": "0ac75fc255601287f07f65387a514fdddd8a1141", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-enum.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,10 +9,9 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n \n #[rustc_outlives]\n-enum Foo<'a, U> { //~ ERROR 15:1: 17:2: rustc_outlives\n+enum Foo<'a, U> { //~ ERROR 14:1: 16:2: rustc_outlives\n     One(Bar<'a, U>)\n }\n "}, {"sha": "33ef4b7e6a1080d01f300cde271218da7fc12f00", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-enum.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,7 +1,7 @@\n error: rustc_outlives\n-  --> $DIR/explicit-enum.rs:15:1\n+  --> $DIR/explicit-enum.rs:14:1\n    |\n-LL | / enum Foo<'a, U> { //~ ERROR 15:1: 17:2: rustc_outlives\n+LL | / enum Foo<'a, U> { //~ ERROR 14:1: 16:2: rustc_outlives\n LL | |     One(Bar<'a, U>)\n LL | | }\n    | |_^"}, {"sha": "02c171627e6f03bf227b33fa8404346cd770b342", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-projection.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-projection.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n \n trait Trait<'x, T> where T: 'x {\n     type Type;"}, {"sha": "5480130c2d3f17cc001d9612b12d27191679b354", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-projection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-projection.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,5 +1,5 @@\n error: rustc_outlives\n-  --> $DIR/explicit-projection.rs:19:1\n+  --> $DIR/explicit-projection.rs:18:1\n    |\n LL | / struct Foo<'a, A, B> where A: Trait<'a, B> //~ ERROR rustc_outlives\n LL | | {"}, {"sha": "4dc01a5221006e3e338d0594dead0b32de85507c", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-struct.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,10 +9,9 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n \n #[rustc_outlives]\n-struct Foo<'b, U> { //~ ERROR 15:1: 17:2: rustc_outlives\n+struct Foo<'b, U> { //~ ERROR 14:1: 16:2: rustc_outlives\n     bar: Bar<'b, U>\n }\n "}, {"sha": "7655dec5cb851ff739c9dd9dde9a8a8617806fb6", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-struct.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,7 +1,7 @@\n error: rustc_outlives\n-  --> $DIR/explicit-struct.rs:15:1\n+  --> $DIR/explicit-struct.rs:14:1\n    |\n-LL | / struct Foo<'b, U> { //~ ERROR 15:1: 17:2: rustc_outlives\n+LL | / struct Foo<'b, U> { //~ ERROR 14:1: 16:2: rustc_outlives\n LL | |     bar: Bar<'b, U>\n LL | | }\n    | |_^"}, {"sha": "ae4b9b15f683bfae216149c81250a5ffa7d51e08", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-union.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,13 +9,11 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n #![feature(untagged_unions)]\n #![allow(unions_with_drop_fields)]\n \n-\n #[rustc_outlives]\n-union Foo<'b, U> { //~ ERROR 18:1: 20:2: rustc_outlives\n+union Foo<'b, U> { //~ ERROR 16:1: 18:2: rustc_outlives\n     bar: Bar<'b, U>\n }\n "}, {"sha": "c01c7532c86247d4051de54b37c1ea4d59c8305d", "filename": "src/test/ui/rfc-2093-infer-outlives/explicit-union.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fexplicit-union.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,7 +1,7 @@\n error: rustc_outlives\n-  --> $DIR/explicit-union.rs:18:1\n+  --> $DIR/explicit-union.rs:16:1\n    |\n-LL | / union Foo<'b, U> { //~ ERROR 18:1: 20:2: rustc_outlives\n+LL | / union Foo<'b, U> { //~ ERROR 16:1: 18:2: rustc_outlives\n LL | |     bar: Bar<'b, U>\n LL | | }\n    | |_^"}, {"sha": "c4407b8b89f24a8eb953df006ab09af7aadc3461", "filename": "src/test/ui/rfc-2093-infer-outlives/infer-static.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,11 +9,10 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n #![feature(infer_static_outlives_requirements)]\n \n #[rustc_outlives]\n-struct Foo<U> { //~ ERROR 16:1: 18:2: rustc_outlives\n+struct Foo<U> { //~ ERROR 15:1: 17:2: rustc_outlives\n     bar: Bar<U>\n }\n struct Bar<T: 'static> {"}, {"sha": "0cb4f3faa335264c3641c2f2af7f271628714139", "filename": "src/test/ui/rfc-2093-infer-outlives/infer-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Finfer-static.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,7 +1,7 @@\n error: rustc_outlives\n-  --> $DIR/infer-static.rs:16:1\n+  --> $DIR/infer-static.rs:15:1\n    |\n-LL | / struct Foo<U> { //~ ERROR 16:1: 18:2: rustc_outlives\n+LL | / struct Foo<U> { //~ ERROR 15:1: 17:2: rustc_outlives\n LL | |     bar: Bar<U>\n LL | | }\n    | |_^"}, {"sha": "5cb365b7a7bbf703f5487c3c0feba6c04e040b91", "filename": "src/test/ui/rfc-2093-infer-outlives/nested-enum.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-enum.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,11 +9,9 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n-\n \n #[rustc_outlives]\n-enum Foo<'a, T> { //~ ERROR 16:1: 19:2: rustc_outlives\n+enum Foo<'a, T> { //~ ERROR 14:1: 17:2: rustc_outlives\n \n     One(Bar<'a, T>)\n }"}, {"sha": "f0a6905d14bdda31fcf14c47947b3d1a2b3203e0", "filename": "src/test/ui/rfc-2093-infer-outlives/nested-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-enum.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,7 +1,7 @@\n error: rustc_outlives\n-  --> $DIR/nested-enum.rs:16:1\n+  --> $DIR/nested-enum.rs:14:1\n    |\n-LL | / enum Foo<'a, T> { //~ ERROR 16:1: 19:2: rustc_outlives\n+LL | / enum Foo<'a, T> { //~ ERROR 14:1: 17:2: rustc_outlives\n LL | |\n LL | |     One(Bar<'a, T>)\n LL | | }"}, {"sha": "e56d7d7a053b17363fbdad46520b54ec439ccad7", "filename": "src/test/ui/rfc-2093-infer-outlives/nested-regions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-regions.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,10 +9,9 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n \n #[rustc_outlives]\n-struct Foo<'a, 'b, T> { //~ ERROR 15:1: 17:2: rustc_outlives\n+struct Foo<'a, 'b, T> { //~ ERROR 14:1: 16:2: rustc_outlives\n     x: &'a &'b T\n }\n "}, {"sha": "978fe352bc750b463dbb11c2cd6811a8c3cbcad2", "filename": "src/test/ui/rfc-2093-infer-outlives/nested-regions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-regions.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,7 +1,7 @@\n error: rustc_outlives\n-  --> $DIR/nested-regions.rs:15:1\n+  --> $DIR/nested-regions.rs:14:1\n    |\n-LL | / struct Foo<'a, 'b, T> { //~ ERROR 15:1: 17:2: rustc_outlives\n+LL | / struct Foo<'a, 'b, T> { //~ ERROR 14:1: 16:2: rustc_outlives\n LL | |     x: &'a &'b T\n LL | | }\n    | |_^"}, {"sha": "84d1b88188003c6296719d65524413e218445b2a", "filename": "src/test/ui/rfc-2093-infer-outlives/nested-structs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-structs.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,10 +9,9 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n \n #[rustc_outlives]\n-struct Foo<'a, T> { //~ ERROR 15:1: 17:2: rustc_outlives\n+struct Foo<'a, T> { //~ ERROR 14:1: 16:2: rustc_outlives\n     field1: Bar<'a, T>\n }\n "}, {"sha": "db02232b9130ba02e0170e59ea89227ce77dbe0e", "filename": "src/test/ui/rfc-2093-infer-outlives/nested-structs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-structs.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,7 +1,7 @@\n error: rustc_outlives\n-  --> $DIR/nested-structs.rs:15:1\n+  --> $DIR/nested-structs.rs:14:1\n    |\n-LL | / struct Foo<'a, T> { //~ ERROR 15:1: 17:2: rustc_outlives\n+LL | / struct Foo<'a, T> { //~ ERROR 14:1: 16:2: rustc_outlives\n LL | |     field1: Bar<'a, T>\n LL | | }\n    | |_^"}, {"sha": "974675f51c711191969a81f7f52f01ad4d2e1442", "filename": "src/test/ui/rfc-2093-infer-outlives/nested-union.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,13 +9,11 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n #![feature(untagged_unions)]\n #![allow(unions_with_drop_fields)]\n \n-\n #[rustc_outlives]\n-union Foo<'a, T> { //~ ERROR 18:1: 20:2: rustc_outlives\n+union Foo<'a, T> { //~ ERROR 16:1: 18:2: rustc_outlives\n     field1: Bar<'a, T>\n }\n "}, {"sha": "2704a1d2def779c50e6b3fb626076d6ce5020b2e", "filename": "src/test/ui/rfc-2093-infer-outlives/nested-union.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fnested-union.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,7 +1,7 @@\n error: rustc_outlives\n-  --> $DIR/nested-union.rs:18:1\n+  --> $DIR/nested-union.rs:16:1\n    |\n-LL | / union Foo<'a, T> { //~ ERROR 18:1: 20:2: rustc_outlives\n+LL | / union Foo<'a, T> { //~ ERROR 16:1: 18:2: rustc_outlives\n LL | |     field1: Bar<'a, T>\n LL | | }\n    | |_^"}, {"sha": "180f5ac6cdc46718e8048602850167a93eff15cf", "filename": "src/test/ui/rfc-2093-infer-outlives/privacy.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fprivacy.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -0,0 +1,20 @@\n+// Test that we do not get a privacy error here.  Initially, we did,\n+// because we inferred an outlives predciate of `<Foo<'a> as\n+// Private>::Out: 'a`, but the private trait is -- well -- private,\n+// and hence it was not something that a pub trait could refer to.\n+//\n+// run-pass\n+\n+#![allow(dead_code)]\n+\n+pub struct Foo<'a> {\n+    field: Option<&'a <Foo<'a> as Private>::Out>\n+}\n+\n+trait Private {\n+    type Out: ?Sized;\n+}\n+\n+impl<T: ?Sized> Private for T { type Out = Self; }\n+\n+fn main() { }"}, {"sha": "7693d0e9401d2594390565e2928c26a9052cb89a", "filename": "src/test/ui/rfc-2093-infer-outlives/projection.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fprojection.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n \n #[rustc_outlives]\n struct Foo<'a, T: Iterator> { //~ ERROR rustc_outlives"}, {"sha": "fb4835ae2d8bf2cb408a088e7b7ebc0a7559a400", "filename": "src/test/ui/rfc-2093-infer-outlives/projection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fprojection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fprojection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fprojection.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,5 +1,5 @@\n error: rustc_outlives\n-  --> $DIR/projection.rs:15:1\n+  --> $DIR/projection.rs:14:1\n    |\n LL | / struct Foo<'a, T: Iterator> { //~ ERROR rustc_outlives\n LL | |     bar: &'a T::Item"}, {"sha": "760d9889bbe76989285c9bc8623028c01c50fbcc", "filename": "src/test/ui/rfc-2093-infer-outlives/reference.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Freference.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n \n #[rustc_outlives]\n struct Foo<'a, T> { //~ ERROR rustc_outlives"}, {"sha": "fdd312f9b89c5f8bc34177fd8def3e2e6238ca9f", "filename": "src/test/ui/rfc-2093-infer-outlives/reference.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Freference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Freference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Freference.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,5 +1,5 @@\n error: rustc_outlives\n-  --> $DIR/reference.rs:15:1\n+  --> $DIR/reference.rs:14:1\n    |\n LL | / struct Foo<'a, T> { //~ ERROR rustc_outlives\n LL | |     bar: &'a T,"}, {"sha": "a2d3cf6779f1768f4bf620ddd76862cd89bdd934", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-enum-not-wf.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+// Various examples of structs whose fields are not well-formed.\n+\n+#![allow(dead_code)]\n+\n+trait Dummy<'a> {\n+  type Out;\n+}\n+impl<'a, T> Dummy<'a> for T\n+where T: 'a\n+{\n+  type Out = ();\n+}\n+type RequireOutlives<'a, T> = <T as Dummy<'a>>::Out;\n+\n+enum Ref1<'a, T> {\n+    Ref1Variant1(RequireOutlives<'a, T>) //~ ERROR the parameter type `T` may not live long enough\n+}\n+\n+enum Ref2<'a, T> {\n+    Ref2Variant1,\n+    Ref2Variant2(isize, RequireOutlives<'a, T>), //~ ERROR the parameter type `T` may not live long enough\n+}\n+\n+enum RefOk<'a, T:'a> {\n+    RefOkVariant1(&'a T)\n+}\n+\n+// This is now well formed. RFC 2093\n+enum RefIndirect<'a, T> {\n+    RefIndirectVariant1(isize, RefOk<'a,T>)\n+}\n+\n+enum RefDouble<'a, 'b, T> { //~ ERROR 45:1: 48:2: the parameter type `T` may not live long enough [E0309]\n+    RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n+        //~^ 46:23: 46:49: the parameter type `T` may not live long enough [E0309]\n+}\n+\n+fn main() { }"}, {"sha": "923ea17622ac08e5b62457b8fde3cb2c7dd17886", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-enum-not-wf.stderr", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -0,0 +1,67 @@\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-enum-not-wf.rs:28:18\n+   |\n+LL | enum Ref1<'a, T> {\n+   |               - help: consider adding an explicit lifetime bound `T: 'a`...\n+LL |     Ref1Variant1(RequireOutlives<'a, T>) //~ ERROR the parameter type `T` may not live long enough\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/regions-enum-not-wf.rs:28:18\n+   |\n+LL |     Ref1Variant1(RequireOutlives<'a, T>) //~ ERROR the parameter type `T` may not live long enough\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-enum-not-wf.rs:33:25\n+   |\n+LL | enum Ref2<'a, T> {\n+   |               - help: consider adding an explicit lifetime bound `T: 'a`...\n+LL |     Ref2Variant1,\n+LL |     Ref2Variant2(isize, RequireOutlives<'a, T>), //~ ERROR the parameter type `T` may not live long enough\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/regions-enum-not-wf.rs:33:25\n+   |\n+LL |     Ref2Variant2(isize, RequireOutlives<'a, T>), //~ ERROR the parameter type `T` may not live long enough\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-enum-not-wf.rs:45:1\n+   |\n+LL |   enum RefDouble<'a, 'b, T> { //~ ERROR 45:1: 48:2: the parameter type `T` may not live long enough [E0309]\n+   |   ^                      - help: consider adding an explicit lifetime bound `T: 'b`...\n+   |  _|\n+   | |\n+LL | |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n+LL | |         //~^ 46:23: 46:49: the parameter type `T` may not live long enough [E0309]\n+LL | | }\n+   | |_^\n+   |\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/regions-enum-not-wf.rs:45:1\n+   |\n+LL | / enum RefDouble<'a, 'b, T> { //~ ERROR 45:1: 48:2: the parameter type `T` may not live long enough [E0309]\n+LL | |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n+LL | |         //~^ 46:23: 46:49: the parameter type `T` may not live long enough [E0309]\n+LL | | }\n+   | |_^\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-enum-not-wf.rs:46:23\n+   |\n+LL | enum RefDouble<'a, 'b, T> { //~ ERROR 45:1: 48:2: the parameter type `T` may not live long enough [E0309]\n+   |                        - help: consider adding an explicit lifetime bound `T: 'b`...\n+LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/regions-enum-not-wf.rs:46:23\n+   |\n+LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>)\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "44af621ef24dc8b7ca649828db6408b14d2b4386", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region-rev.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a nominal type (like `Foo<'a>`) outlives `'b` if its\n+// arguments (like `'a`) outlive `'b`.\n+//\n+// Rule OutlivesNominalType from RFC 1214.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+mod rev_variant_struct_region {\n+    struct Foo<'a> {\n+        x: fn(&'a i32),\n+    }\n+    trait Trait<'a, 'b> {\n+        type Out;\n+    }\n+    impl<'a, 'b> Trait<'a, 'b> for usize {\n+        type Out = &'a Foo<'b>; //~ ERROR reference has a longer lifetime\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "bd4682f0acfe70c58ac964eafb18329d526e2780", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region-rev.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -0,0 +1,20 @@\n+error[E0491]: in type `&'a rev_variant_struct_region::Foo<'b>`, reference has a longer lifetime than the data it references\n+  --> $DIR/regions-outlives-nominal-type-region-rev.rs:27:9\n+   |\n+LL |         type Out = &'a Foo<'b>; //~ ERROR reference has a longer lifetime\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime 'a as defined on the impl at 26:10\n+  --> $DIR/regions-outlives-nominal-type-region-rev.rs:26:10\n+   |\n+LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n+   |          ^^\n+note: but the referenced data is only valid for the lifetime 'b as defined on the impl at 26:14\n+  --> $DIR/regions-outlives-nominal-type-region-rev.rs:26:14\n+   |\n+LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n+   |              ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0491`."}, {"sha": "93f16350a7b4dcb7a7e70d59c7f3c580aa28bf30", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a nominal type (like `Foo<'a>`) outlives `'b` if its\n+// arguments (like `'a`) outlive `'b`.\n+//\n+// Rule OutlivesNominalType from RFC 1214.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+mod variant_struct_region {\n+    struct Foo<'a> {\n+        x: &'a i32,\n+    }\n+    trait Trait<'a, 'b> {\n+        type Out;\n+    }\n+    impl<'a, 'b> Trait<'a, 'b> for usize {\n+        type Out = &'a Foo<'b>; //~ ERROR reference has a longer lifetime\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "3fdfb673b3700ada395eb097e304dbd01dbdea70", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -0,0 +1,20 @@\n+error[E0491]: in type `&'a variant_struct_region::Foo<'b>`, reference has a longer lifetime than the data it references\n+  --> $DIR/regions-outlives-nominal-type-region.rs:27:9\n+   |\n+LL |         type Out = &'a Foo<'b>; //~ ERROR reference has a longer lifetime\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime 'a as defined on the impl at 26:10\n+  --> $DIR/regions-outlives-nominal-type-region.rs:26:10\n+   |\n+LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n+   |          ^^\n+note: but the referenced data is only valid for the lifetime 'b as defined on the impl at 26:14\n+  --> $DIR/regions-outlives-nominal-type-region.rs:26:14\n+   |\n+LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n+   |              ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0491`."}, {"sha": "e44e049a9e5dc3a3cf5ec123420917eaa5898369", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type-rev.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a nominal type (like `Foo<'a>`) outlives `'b` if its\n+// arguments (like `'a`) outlive `'b`.\n+//\n+// Rule OutlivesNominalType from RFC 1214.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+mod variant_struct_type {\n+    struct Foo<T> {\n+        x: fn(T)\n+    }\n+    trait Trait<'a, 'b> {\n+        type Out;\n+    }\n+    impl<'a, 'b> Trait<'a, 'b> for usize {\n+        type Out = &'a Foo<&'b i32>; //~ ERROR reference has a longer lifetime\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "166e95cdeddf30693236f555d11471d6f0aab2e6", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type-rev.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -0,0 +1,20 @@\n+error[E0491]: in type `&'a variant_struct_type::Foo<&'b i32>`, reference has a longer lifetime than the data it references\n+  --> $DIR/regions-outlives-nominal-type-type-rev.rs:27:9\n+   |\n+LL |         type Out = &'a Foo<&'b i32>; //~ ERROR reference has a longer lifetime\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime 'a as defined on the impl at 26:10\n+  --> $DIR/regions-outlives-nominal-type-type-rev.rs:26:10\n+   |\n+LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n+   |          ^^\n+note: but the referenced data is only valid for the lifetime 'b as defined on the impl at 26:14\n+  --> $DIR/regions-outlives-nominal-type-type-rev.rs:26:14\n+   |\n+LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n+   |              ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0491`."}, {"sha": "1293e6c234bc14de26722937d2b2cc12d63e314e", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a nominal type (like `Foo<'a>`) outlives `'b` if its\n+// arguments (like `'a`) outlive `'b`.\n+//\n+// Rule OutlivesNominalType from RFC 1214.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+mod variant_struct_type {\n+    struct Foo<T> {\n+        x: T\n+    }\n+    trait Trait<'a, 'b> {\n+        type Out;\n+    }\n+    impl<'a, 'b> Trait<'a, 'b> for usize {\n+        type Out = &'a Foo<&'b i32>; //~ ERROR reference has a longer lifetime\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() { }"}, {"sha": "54952ec1676dbd71124544053e90402714bed230", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -0,0 +1,20 @@\n+error[E0491]: in type `&'a variant_struct_type::Foo<&'b i32>`, reference has a longer lifetime than the data it references\n+  --> $DIR/regions-outlives-nominal-type-type.rs:27:9\n+   |\n+LL |         type Out = &'a Foo<&'b i32>; //~ ERROR reference has a longer lifetime\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime 'a as defined on the impl at 26:10\n+  --> $DIR/regions-outlives-nominal-type-type.rs:26:10\n+   |\n+LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n+   |          ^^\n+note: but the referenced data is only valid for the lifetime 'b as defined on the impl at 26:14\n+  --> $DIR/regions-outlives-nominal-type-type.rs:26:14\n+   |\n+LL |     impl<'a, 'b> Trait<'a, 'b> for usize {\n+   |              ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0491`."}, {"sha": "bdd708197bc768a497ca5b939b5e34858fca96ef", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-struct-not-wf.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Various examples of structs whose fields are not well-formed.\n+\n+#![allow(dead_code)]\n+\n+trait Trait<'a, T> {\n+    type Out;\n+}\n+trait Trait1<'a, 'b, T> {\n+    type Out;\n+}\n+\n+impl<'a, T> Trait<'a, T> for usize {\n+    type Out = &'a T;\n+}\n+\n+struct RefOk<'a, T:'a> {\n+    field: &'a T\n+}\n+\n+impl<'a, T> Trait<'a, T> for u32 {\n+    type Out = RefOk<'a, T>;\n+}\n+\n+impl<'a, 'b, T> Trait1<'a, 'b, T> for u32 {\n+    type Out = &'a &'b T;\n+}\n+\n+fn main() { }"}, {"sha": "d8c8b6c3ccc86bc944f7853c11709d84a333cf12", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-struct-not-wf.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -0,0 +1,49 @@\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-struct-not-wf.rs:23:5\n+   |\n+LL | impl<'a, T> Trait<'a, T> for usize {\n+   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+LL |     type Out = &'a T;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: ...so that the reference type `&'a T` does not outlive the data it points at\n+  --> $DIR/regions-struct-not-wf.rs:23:5\n+   |\n+LL |     type Out = &'a T;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-struct-not-wf.rs:31:5\n+   |\n+LL | impl<'a, T> Trait<'a, T> for u32 {\n+   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+LL |     type Out = RefOk<'a, T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/regions-struct-not-wf.rs:31:5\n+   |\n+LL |     type Out = RefOk<'a, T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data it references\n+  --> $DIR/regions-struct-not-wf.rs:35:5\n+   |\n+LL |     type Out = &'a &'b T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the pointer is valid for the lifetime 'a as defined on the impl at 34:6\n+  --> $DIR/regions-struct-not-wf.rs:34:6\n+   |\n+LL | impl<'a, 'b, T> Trait1<'a, 'b, T> for u32 {\n+   |      ^^\n+note: but the referenced data is only valid for the lifetime 'b as defined on the impl at 34:10\n+  --> $DIR/regions-struct-not-wf.rs:34:10\n+   |\n+LL | impl<'a, 'b, T> Trait1<'a, 'b, T> for u32 {\n+   |          ^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0309, E0491.\n+For more information about an error, try `rustc --explain E0309`."}, {"sha": "37c468f2f83101c4f660cd15d5c2fb9b2b48ba00", "filename": "src/test/ui/rfc-2093-infer-outlives/self-dyn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-dyn.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -10,14 +10,13 @@\n \n #![feature(dyn_trait)]\n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n \n trait Trait<'x, 's, T> where T: 'x,\n       's: {\n }\n \n #[rustc_outlives]\n-struct Foo<'a, 'b, A> //~ ERROR 20:1: 23:2: rustc_outlives\n+struct Foo<'a, 'b, A> //~ ERROR 19:1: 22:2: rustc_outlives\n {\n     foo: Box<dyn Trait<'a, 'b, A>>\n }"}, {"sha": "8c69307ddfb72da571caeb7bfcce80b326f7f2ff", "filename": "src/test/ui/rfc-2093-infer-outlives/self-dyn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-dyn.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,7 +1,7 @@\n error: rustc_outlives\n-  --> $DIR/self-dyn.rs:20:1\n+  --> $DIR/self-dyn.rs:19:1\n    |\n-LL | / struct Foo<'a, 'b, A> //~ ERROR 20:1: 23:2: rustc_outlives\n+LL | / struct Foo<'a, 'b, A> //~ ERROR 19:1: 22:2: rustc_outlives\n LL | | {\n LL | |     foo: Box<dyn Trait<'a, 'b, A>>\n LL | | }"}, {"sha": "82d13d9179a1b7b376d567571292dbe3c8b93233", "filename": "src/test/ui/rfc-2093-infer-outlives/self-structs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-structs.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -9,10 +9,9 @@\n // except according to those terms.\n \n #![feature(rustc_attrs)]\n-#![feature(infer_outlives_requirements)]\n \n #[rustc_outlives]\n-struct Foo<'a, 'b, T> { //~ ERROR 15:1: 17:2: rustc_outlives\n+struct Foo<'a, 'b, T> { //~ ERROR 14:1: 16:2: rustc_outlives\n     field1: Bar<'a, 'b, T>\n }\n "}, {"sha": "541e282f23874f3a4f6b245d456e87c603043f0a", "filename": "src/test/ui/rfc-2093-infer-outlives/self-structs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fself-structs.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,7 +1,7 @@\n error: rustc_outlives\n-  --> $DIR/self-structs.rs:15:1\n+  --> $DIR/self-structs.rs:14:1\n    |\n-LL | / struct Foo<'a, 'b, T> { //~ ERROR 15:1: 17:2: rustc_outlives\n+LL | / struct Foo<'a, 'b, T> { //~ ERROR 14:1: 16:2: rustc_outlives\n LL | |     field1: Bar<'a, 'b, T>\n LL | | }\n    | |_^"}, {"sha": "598f18bf8d8d2b62f1cde515a11e6d4f682452b9", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -76,6 +76,24 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n LL |     b: (_, _),\n    |            ^ not allowed in type signatures\n \n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:112:12\n+   |\n+LL |         a: _,\n+   |            ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:114:13\n+   |\n+LL |         b: (_, _),\n+   |             ^ not allowed in type signatures\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:114:16\n+   |\n+LL |         b: (_, _),\n+   |                ^ not allowed in type signatures\n+\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:67:21\n    |\n@@ -136,24 +154,6 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n LL |     fn fn_test8(_f: fn() -> _) { }\n    |                             ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:112:12\n-   |\n-LL |         a: _,\n-   |            ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:114:13\n-   |\n-LL |         b: (_, _),\n-   |             ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:114:16\n-   |\n-LL |         b: (_, _),\n-   |                ^ not allowed in type signatures\n-\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:43:24\n    |"}, {"sha": "afdf59d1e5bc55d22cba7292b944b7207bdee11f", "filename": "src/test/ui/wf/wf-outlives-ty-in-fn-or-trait.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.rs?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -8,25 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that an appearance of `T` in fn args or in a trait object must\n-// still meet the outlives bounds. Since this is a new requirement,\n-// this is currently only a warning, not a hard error.\n-\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n-trait Trait<T> { }\n+trait Trait<'a, T> {\n+    type Out;\n+}\n+\n+impl<'a, T> Trait<'a, T> for usize {\n+    type Out = &'a fn(T);\n+}\n \n struct Foo<'a,T> {\n     f: &'a fn(T),\n-    //~^ ERROR E0309\n }\n \n-struct Bar<'a,T> {\n-    f: &'a Trait<T>,\n-    //~^ ERROR E0309\n+trait Baz<T> { }\n+\n+impl<'a, T> Trait<'a, T> for u32 {\n+    type Out = &'a Baz<T>;\n }\n \n-#[rustc_error]\n fn main() { }\n "}, {"sha": "26a2138c9f83c2afa689c4027f19731f577d2cfa", "filename": "src/test/ui/wf/wf-outlives-ty-in-fn-or-trait.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6810f5286b6b91daab06fc3dccb27d8c46f14349/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr?ref=6810f5286b6b91daab06fc3dccb27d8c46f14349", "patch": "@@ -1,30 +1,30 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:21:5\n+  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:19:5\n    |\n-LL | struct Foo<'a,T> {\n-   |               - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     f: &'a fn(T),\n-   |     ^^^^^^^^^^^^\n+LL | impl<'a, T> Trait<'a, T> for usize {\n+   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+LL |     type Out = &'a fn(T);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...so that the reference type `&'a fn(T)` does not outlive the data it points at\n-  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:21:5\n+  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:19:5\n    |\n-LL |     f: &'a fn(T),\n-   |     ^^^^^^^^^^^^\n+LL |     type Out = &'a fn(T);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:26:5\n+  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:29:5\n    |\n-LL | struct Bar<'a,T> {\n-   |               - help: consider adding an explicit lifetime bound `T: 'a`...\n-LL |     f: &'a Trait<T>,\n-   |     ^^^^^^^^^^^^^^^\n+LL | impl<'a, T> Trait<'a, T> for u32 {\n+   |          - help: consider adding an explicit lifetime bound `T: 'a`...\n+LL |     type Out = &'a Baz<T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...so that the reference type `&'a (dyn Trait<T> + 'a)` does not outlive the data it points at\n-  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:26:5\n+note: ...so that the reference type `&'a (dyn Baz<T> + 'a)` does not outlive the data it points at\n+  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:29:5\n    |\n-LL |     f: &'a Trait<T>,\n-   |     ^^^^^^^^^^^^^^^\n+LL |     type Out = &'a Baz<T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}]}