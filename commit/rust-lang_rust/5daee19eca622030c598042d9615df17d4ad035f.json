{"sha": "5daee19eca622030c598042d9615df17d4ad035f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYWVlMTllY2E2MjIwMzBjNTk4MDQyZDk2MTVkZjE3ZDRhZDAzNWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-09T10:24:28Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-09T18:54:43Z"}, "message": "Rollup merge of #24212 - alexcrichton:destabilize-begin-unwind, r=huonw\n\n Now that we have a `#[allow_internal_unstable]` attribute for macros there's no\nneed for these two `begin_unwind` functions to be stable. Right now the `panic!`\ninterface is the only one we wish to stabilize, so remove the stability markers\nfrom these functions.\n\nWhile this is a breaking change, it is highly unlikely to break any actual code.\nIt is recommended to use the `panic!` macro instead if it breaks explicit calls\ninto `std::rt`.\n\n[breaking-change]\ncc #24208", "tree": {"sha": "e69748a12da9881b913c4ef90bf65ff23a8efd00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e69748a12da9881b913c4ef90bf65ff23a8efd00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5daee19eca622030c598042d9615df17d4ad035f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5daee19eca622030c598042d9615df17d4ad035f", "html_url": "https://github.com/rust-lang/rust/commit/5daee19eca622030c598042d9615df17d4ad035f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5daee19eca622030c598042d9615df17d4ad035f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e466e730b18645e73c2e4a841f6e675c82ceb22", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e466e730b18645e73c2e4a841f6e675c82ceb22", "html_url": "https://github.com/rust-lang/rust/commit/4e466e730b18645e73c2e4a841f6e675c82ceb22"}, {"sha": "ec7c800d2fc0dc5918d325ae68d88c9708d20259", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7c800d2fc0dc5918d325ae68d88c9708d20259", "html_url": "https://github.com/rust-lang/rust/commit/ec7c800d2fc0dc5918d325ae68d88c9708d20259"}], "stats": {"total": 796, "additions": 1, "deletions": 795}, "files": [{"sha": "3d10c151f80d6b4266375aa48ea747cca6543b48", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -37,6 +37,7 @@\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable]\n macro_rules! panic {\n     () => ({\n         panic!(\"explicit panic\")"}, {"sha": "2f58a437eb4727992d192b058e58e2b6cef0aff1", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -495,7 +495,6 @@ pub extern fn rust_begin_unwind(msg: fmt::Arguments,\n /// on (e.g.) the inlining of other functions as possible), by moving\n /// the actual formatting into this shared place.\n #[inline(never)] #[cold]\n-#[stable(since = \"1.0.0\", feature = \"rust1\")]\n pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, usize)) -> ! {\n     use fmt::Write;\n \n@@ -511,7 +510,6 @@ pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, usize))\n \n /// This is the entry point of unwinding for panic!() and assert!().\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n-#[stable(since = \"1.0.0\", feature = \"rust1\")]\n pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, usize)) -> ! {\n     // Note that this should be the only allocation performed in this code path.\n     // Currently this means that panic!() on OOM will invoke this code path,\n@@ -598,7 +596,6 @@ fn begin_unwind_inner(msg: Box<Any + Send>,\n /// Only a limited number of callbacks can be registered, and this function\n /// returns whether the callback was successfully registered or not. It is not\n /// currently possible to unregister a callback once it has been registered.\n-#[unstable(feature = \"std_misc\")]\n pub unsafe fn register(f: Callback) -> bool {\n     match CALLBACK_CNT.fetch_add(1, Ordering::SeqCst) {\n         // The invocation code has knowledge of this window where the count has"}, {"sha": "a0644e513a6e9727c5e988b31f961f953a9b9074", "filename": "src/test/run-pass-fulldeps/rename-directory.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Frename-directory.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -12,7 +12,6 @@\n // because it needs TempDir, which is in extra\n \n // ignore-android\n-// pretty-expanded FIXME #23616\n \n #![feature(rustc_private, path_ext)]\n "}, {"sha": "d2a595804a4b29c810eece527bf35eaaeb998cc8", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n struct X {\n     x: isize"}, {"sha": "c93049b87a76483473ef35c46fd0570dba5b9d4f", "filename": "src/test/run-pass/arith-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Farith-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Farith-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-2.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let i32_c: isize = 0x10101010;"}, {"sha": "e5ff97e3cdbd287992093dbb7c4b75878a806ac7", "filename": "src/test/run-pass/arith-unsigned.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Farith-unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Farith-unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-unsigned.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(type_limits)]\n "}, {"sha": "53eec3c28c0de7580e9e60b1a3fbd77786b4cb13", "filename": "src/test/run-pass/artificial-block.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fartificial-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fartificial-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fartificial-block.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn f() -> isize { { return 3; } }\n "}, {"sha": "d89607077dcbeaceca799f0cf1940c08ac96bc66", "filename": "src/test/run-pass/as-precedence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fas-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fas-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fas-precedence.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn main() {\n     assert_eq!(3 as usize * 3, 9);"}, {"sha": "3eebc7acb0fd55f2b43507b4a13b443603569bd8", "filename": "src/test/run-pass/asm-in-out-operand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(asm)]\n "}, {"sha": "d7913b473f85aae25c3412dad9db5163b3a2c18c", "filename": "src/test/run-pass/asm-out-assign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(asm)]\n "}, {"sha": "186f91da07ccbdfa2815ea4232015ffe7da3a7d9", "filename": "src/test/run-pass/assign-assign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassign-assign.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // Issue 483 - Assignment expressions result in nil\n-// pretty-expanded FIXME #23616\n \n fn test_assign() {\n     let mut x: isize;"}, {"sha": "f05a1520b8ef88e173465d8b1b0985e860333932", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -12,7 +12,6 @@\n // making method calls, but only if there aren't any matches without\n // it.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(unboxed_closures)]\n "}, {"sha": "06521e0ec78e8164d3d37dbbb0f37cf31326ae09", "filename": "src/test/run-pass/associated-types-basic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(core)]\n "}, {"sha": "d82ba6add75c78b09b94965d997fd4bdef179fd9", "filename": "src/test/run-pass/associated-types-binding-in-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-trait.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // Test a case where the associated type binding (to `bool`, in this\n // case) is derived from the trait definition. Issue #21636.\n \n-// pretty-expanded FIXME #23616\n \n use std::vec;\n "}, {"sha": "4eacd120bc690919314f654039b9cc9443c2a8db", "filename": "src/test/run-pass/associated-types-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test equality constrai32s on associated types in a where clause.\n \n-// pretty-expanded FIXME #23616\n \n pub trait ToI32 {\n     fn to_i32(&self) -> i32;"}, {"sha": "77ab616ca918b35b4dab8f4918e4853089e3f07f", "filename": "src/test/run-pass/associated-types-constant-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n trait SignedUnsigned {\n     type Opposite;"}, {"sha": "1661812520b3efe22bfd2bb9511078cb495ced02", "filename": "src/test/run-pass/associated-types-doubleendediterator-object.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "7014cc59b71db619283d20fc136a5f3f016dcc36", "filename": "src/test/run-pass/associated-types-enum-field-named.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-named.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test associated types appearing in struct-like enum variants.\n \n-// pretty-expanded FIXME #23616\n \n use self::VarValue::*;\n "}, {"sha": "c983fdefc0e35c0f8d8ced8550858cf0a6b8a866", "filename": "src/test/run-pass/associated-types-enum-field-numbered.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-enum-field-numbered.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test associated types appearing in tuple-like enum variants.\n \n-// pretty-expanded FIXME #23616\n \n use self::VarValue::*;\n "}, {"sha": "74199f57fb634f401c0797230cbe782496f6b7e5", "filename": "src/test/run-pass/associated-types-in-default-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n trait Get {\n     type Value;"}, {"sha": "dcd7895fa99e644c325488016b200eed7e33a7fd", "filename": "src/test/run-pass/associated-types-in-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n trait Get {\n     type Value;"}, {"sha": "5b81ac7090876f89758e28ba7a1e7b53ccd06545", "filename": "src/test/run-pass/associated-types-in-impl-generics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n trait Get {\n     type Value;"}, {"sha": "5eaf4c2bc839654e3317ed638589e546ade1f737", "filename": "src/test/run-pass/associated-types-in-inherent-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n trait Get {\n     type Value;"}, {"sha": "31336787e4c13e41ee892fbf75d6cc7a7d2337bb", "filename": "src/test/run-pass/associated-types-issue-20220.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20220.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test references to `Self::Item` in the trait. Issue #20220.\n \n-// pretty-expanded FIXME #23616\n \n use std::vec;\n "}, {"sha": "cf4b82721112c5baa69c88e6178532861531fd96", "filename": "src/test/run-pass/associated-types-issue-21212.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-21212.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -13,7 +13,6 @@\n // where clauses in the environment which in turn required normalizing\n // `Self::Input`.\n \n-// pretty-expanded FIXME #23616\n \n pub trait Parser {\n     type Input;"}, {"sha": "181ce52eb4baf6fb2dcee6fa65d02f4f1e65b624", "filename": "src/test/run-pass/associated-types-iterator-binding.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn pairwise_sub<T:DoubleEndedIterator<Item=isize>>(mut t: T) -> isize {\n     let mut result = 0;"}, {"sha": "dfd468884a167ec2df94020703dfb1b3c615d3da", "filename": "src/test/run-pass/associated-types-project-from-type-param-via-bound-in-where-clause.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -12,7 +12,6 @@\n // `Item` originates in a where-clause, not the declaration of\n // `T`. Issue #20300.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(core)]\n "}, {"sha": "8054b3aa52a1d95c0e592d80dae4df4558ef9287", "filename": "src/test/run-pass/associated-types-projection-from-known-type-in-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-from-known-type-in-impl.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test where the impl self type uses a projection from a constant type.\n \n-// pretty-expanded FIXME #23616\n \n trait Int\n {"}, {"sha": "70c7602ffceb17d3726e8ed224c06b9dcc0a73d2", "filename": "src/test/run-pass/associated-types-projection-in-supertrait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-supertrait.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // Test that we are handle to correctly handle a projection type\n // that appears in a supertrait bound. Issue #20559.\n \n-// pretty-expanded FIXME #23616\n \n trait A\n {"}, {"sha": "3b7fb65a8b4aaa96adf84eba8337a8d4692166b9", "filename": "src/test/run-pass/associated-types-ref-in-struct-literal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-ref-in-struct-literal.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test associated type references in a struct literal. Issue #20535.\n \n-// pretty-expanded FIXME #23616\n \n pub trait Foo {\n     type Bar;"}, {"sha": "5bba54e57b477ce5e334a14e7c5aecdc368364c9", "filename": "src/test/run-pass/associated-types-return.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test equality constraints on associated types in a where clause.\n \n-// pretty-expanded FIXME #23616\n \n pub trait Foo {\n     type A;"}, {"sha": "776b2183d3908948b4f6a130c6aee5d576818e50", "filename": "src/test/run-pass/associated-types-simple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n trait Get {\n     type Value;"}, {"sha": "6adfaabcc23b46f0d4fa3cb69de798c41814d251", "filename": "src/test/run-pass/associated-types-stream.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-stream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-stream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-stream.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // Test references to the trait `Stream` in the bounds for associated\n // types defined on `Stream`. Issue #20551.\n \n-// pretty-expanded FIXME #23616\n \n trait Stream {\n     type Car;"}, {"sha": "00746c32e1c31e07cc4cd6373a7a880a1efd5816", "filename": "src/test/run-pass/associated-types-struct-field-named.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-named.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // Test that we correctly normalize the type of a struct field\n // which has an associated type.\n \n-// pretty-expanded FIXME #23616\n \n pub trait UnifyKey {\n     type Value;"}, {"sha": "25e89892a29af5d2df94b957b5ac18daa40081c9", "filename": "src/test/run-pass/associated-types-struct-field-numbered.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-struct-field-numbered.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // Test that we correctly normalize the type of a struct field\n // which has an associated type.\n \n-// pretty-expanded FIXME #23616\n \n pub trait UnifyKey {\n     type Value;"}, {"sha": "1432369f7143dbbf5730f0137cf3f445833bbe34", "filename": "src/test/run-pass/associated-types-sugar-path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test paths to associated types using the type-parameter-only sugar.\n \n-// pretty-expanded FIXME #23616\n \n pub trait Foo {\n     type A;"}, {"sha": "b3c9ea541b71282af4490d41f05ccc47229a59b5", "filename": "src/test/run-pass/attr-main-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-main-2.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(main)]\n "}, {"sha": "893fb85b529a70a91fbce0493627f13920797be7", "filename": "src/test/run-pass/attr-no-drop-flag-size.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(unsafe_destructor)]\n #![feature(unsafe_no_drop_flag)]"}, {"sha": "babc0db4c3190c52f27e12b0c9925c26923f316c", "filename": "src/test/run-pass/auto-loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-loop.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let mut sum = 0;"}, {"sha": "5b12edb427562ae1b23df3ccc31a9d7ab52ebf86", "filename": "src/test/run-pass/auto-ref-sliceable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n trait Pushable<T> {\n     fn push_val(&mut self, t: T);"}, {"sha": "1f3d17ad55c08ef9609d863a89b00bc691c0b0cf", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn f<T>(x: Vec<T>) -> T { return x.into_iter().next().unwrap(); }\n "}, {"sha": "582fd020dd061756ec49a63f06a37404f0a4c079", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "c80a92a185a2e26c007ec799db6ef995cad3cb24", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "2a782cfa176ee1566658c71dbc63bba0d63d7f72", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "a1bcf65ab75fabece2f93c2b6f85c685c9e4ada5", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "326218674ae3f7ad5da77a0d0d3d95fa4d514545", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "05f12fd089ad476c6dd9ca706ebcd96c42d57b3a", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "19c0e7baaa0a1998f00caa6dc2a2825497f38330", "filename": "src/test/run-pass/big-literals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbig-literals.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(core)]\n "}, {"sha": "01a9ec809397336b4831bf188c3c865d62462f6c", "filename": "src/test/run-pass/binary-minus-without-space.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Check that issue #954 stays fixed\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     match -1 { -1 => {}, _ => panic!(\"wat\") }"}, {"sha": "9be7d63ab951d8cd10978ae5efe9524c7268934b", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::sync::Arc;\n fn dispose(_x: Arc<bool>) { }"}, {"sha": "b4c38bf450b1bd63b138b1ef96b7649aae18bf4e", "filename": "src/test/run-pass/bind-field-short-with-modifiers.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-field-short-with-modifiers.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     struct Foo { x: isize, y: isize }"}, {"sha": "73cba2e4e0a7ca73bb1eae25d7e16fab0a73ab10", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn asBlock<F>(f: F) -> usize where F: FnOnce() -> usize {\n    return f();"}, {"sha": "ac8f5012573616c56fabc935be30af47814a968a", "filename": "src/test/run-pass/block-expr-precedence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -13,7 +13,6 @@\n \n // no-reformat\n \n-// pretty-expanded FIXME #23616\n \n /*\n  *"}, {"sha": "3e6109da39a266d9a014fb40fc3247b561fca277", "filename": "src/test/run-pass/block-fn-coerce.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn force<F>(f: F) -> isize where F: FnOnce() -> isize { return f(); }\n "}, {"sha": "fa0b86d0a02467761a8a3165ef5f280706185e6a", "filename": "src/test/run-pass/bool-not.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbool-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbool-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbool-not.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     if !false { assert!((true)); } else { assert!((false)); }"}, {"sha": "53b568b06b5b6a16546cdcb52c290828ae7d6feb", "filename": "src/test/run-pass/bool.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbool.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Basic boolean tests\n \n-// pretty-expanded FIXME #23616\n \n use std::cmp::Ordering::{Equal, Greater, Less};\n use std::ops::{BitAnd, BitOr, BitXor};"}, {"sha": "f0d09688192c6fd56ee13ee2a869ae8dda2066b6", "filename": "src/test/run-pass/borrow-tuple-fields.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-tuple-fields.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct Foo(isize, isize);\n "}, {"sha": "7fdc65a96e238d3894ba661577ffe4fc18272f38", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "5b15c8f0797fa659a2d218457586d925e1deff63", "filename": "src/test/run-pass/borrowck-closures-two-imm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -14,7 +14,6 @@\n // that the main function can read the variable too while\n // the closures are in scope. Issue #6801.\n \n-// pretty-expanded FIXME #23616\n \n fn a() -> i32 {\n     let mut x = 3;"}, {"sha": "0e33351894d14c0759e21c8f2d082a0ce3cb744e", "filename": "src/test/run-pass/borrowck-fixed-length-vecs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let x = [22];"}, {"sha": "380bd398a7cb2fe57d4419aa20c02c1380131f93", "filename": "src/test/run-pass/borrowck-freeze-frozen-mut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-freeze-frozen-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-freeze-frozen-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-freeze-frozen-mut.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test that a `&mut` inside of an `&` is freezable.\n \n-// pretty-expanded FIXME #23616\n \n struct MutSlice<'a, T:'a> {\n     data: &'a mut [T]"}, {"sha": "fb30c85e709631b02d60e45f6fa0fbdbb751681b", "filename": "src/test/run-pass/borrowck-macro-interaction-issue-6304.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // Check that we do not ICE when compiling this\n // macro, which reuses the expression `$id`\n \n-// pretty-expanded FIXME #23616\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "bbc668f5cabfe77523915cdff0ba9fc3a3866de5", "filename": "src/test/run-pass/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "d55517c65d667e458d53b91142fc56dc0b937eea", "filename": "src/test/run-pass/borrowck-mut-vec-as-imm-slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn want_slice(v: &[isize]) -> isize {\n     let mut sum = 0;"}, {"sha": "e0a5db678d2f455d39a36876966a502ec62a45bf", "filename": "src/test/run-pass/borrowck-pat-reassign-no-binding.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let mut x = None;"}, {"sha": "045e8d952adaa0ffdd383e48327a19b94a5acf92", "filename": "src/test/run-pass/borrowck-rvalues-mutable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-rvalues-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-rvalues-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-rvalues-mutable.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct Counter {\n     value: usize"}, {"sha": "59a5fea769a6fcb19afe8b7f0af1fca7c2490f1c", "filename": "src/test/run-pass/borrowck-scope-of-deref-issue-4666.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-scope-of-deref-issue-4666.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -12,7 +12,6 @@\n // limited to the deref operation itself, and does not infect the\n // block as a whole.\n \n-// pretty-expanded FIXME #23616\n \n struct Box {\n     x: usize"}, {"sha": "2e8ddb08064726af9a7f3f3afe7ce0269d75a261", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n use std::cell::Cell;\n "}, {"sha": "3e47764ba0264ea90192477aed583163a5ca1178", "filename": "src/test/run-pass/borrowed-ptr-pattern-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn foo(s: &String) -> bool {\n     match &**s {"}, {"sha": "91228efb9c1cb1a8ce62956ac62a4a52016d376d", "filename": "src/test/run-pass/borrowed-ptr-pattern-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn foo<'r>(s: &'r usize) -> bool {\n     match s {"}, {"sha": "6656eb41f2e3a64ff4a6b8f52d2277ecfdb8317a", "filename": "src/test/run-pass/borrowed-ptr-pattern-infallible.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let (&x, &y) = (&3, &'a');"}, {"sha": "e1e9381eeb8e76f5506d45f58a758c29f6f1dc57", "filename": "src/test/run-pass/borrowed-ptr-pattern-option.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn select<'r>(x: &'r Option<isize>, y: &'r Option<isize>) -> &'r Option<isize> {\n     match (x, y) {"}, {"sha": "3042ff7743b706903a7d538acc9d7cdab5d6f7be", "filename": "src/test/run-pass/borrowed-ptr-pattern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn foo<T:Clone>(x: &T) -> T{\n     match x {"}, {"sha": "ea136e2dc4854d9193f869175fc31ab22d0024bf", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let mut i = 0;"}, {"sha": "80fd09114fc95b8abae05620b55ad2ea48a7f8c9", "filename": "src/test/run-pass/bug-7183-generics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n trait Speak : Sized {\n     fn say(&self, s:&str) -> String;"}, {"sha": "c5064d56ca1233502c64e6d21e9be352f4534cb8", "filename": "src/test/run-pass/builtin-superkinds-capabilities-transitive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -14,7 +14,6 @@\n // a Send. Basically this just makes sure rustc is using\n // each_bound_trait_and_supertraits in type_contents correctly.\n \n-// pretty-expanded FIXME #23616\n \n use std::sync::mpsc::{channel, Sender};\n "}, {"sha": "183e6fe232cd39e7c9533f3edf56ea53960ce598", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -14,7 +14,6 @@\n // Tests \"capabilities\" granted by traits with super-builtin-kinds,\n // even when using them cross-crate.\n \n-// pretty-expanded FIXME #23616\n \n extern crate trait_superkinds_in_metadata;\n "}, {"sha": "a4d5c943b1f68b81458bef1ca9c1ab2d1dde7f67", "filename": "src/test/run-pass/builtin-superkinds-capabilities.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -12,7 +12,6 @@\n // builtin-kinds, e.g., if a trait requires Send to implement, then\n // at usage site of that trait, we know we have the Send capability.\n \n-// pretty-expanded FIXME #23616\n \n use std::sync::mpsc::{channel, Sender, Receiver};\n "}, {"sha": "c4dc7d78b06d52df49518d17cebf8690d8a55ae3", "filename": "src/test/run-pass/builtin-superkinds-self-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // Tests the ability for the Self type in default methods to use\n // capabilities granted by builtin kinds as supertraits.\n \n-// pretty-expanded FIXME #23616\n \n use std::sync::mpsc::{Sender, channel};\n "}, {"sha": "5bbdec95b157647d0fec393e3c8357ff4b1c76f9", "filename": "src/test/run-pass/by-value-self-in-mut-slot.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct X {\n     a: isize"}, {"sha": "e35398a22917fc66c10484fdc46acc4184b86cec", "filename": "src/test/run-pass/call-closure-from-overloaded-op.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn foo() -> isize { 22 }\n "}, {"sha": "45cec79e1a30ee973b5adbe40f2f2ad4df0343d5", "filename": "src/test/run-pass/capture-clauses-boxed-closures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn each<T, F>(x: &[T], mut f: F) where F: FnMut(&T) {\n     for val in x {"}, {"sha": "5e7d5aacb8d0d871d625a298e39e38d972d97f04", "filename": "src/test/run-pass/capture-clauses-unboxed-closures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(unboxed_closures)]\n "}, {"sha": "bb60626a4bf02afaeea6107dcc59c532212fbbc1", "filename": "src/test/run-pass/cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let i: isize = 'Q' as isize;"}, {"sha": "e4f4a4f3a576cde0ce8b7e632e48c1254046af66", "filename": "src/test/run-pass/cci_nested_exe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:cci_nested_lib.rs\n \n-// pretty-expanded FIXME #23616\n \n #![feature(globs)]\n "}, {"sha": "c1fcf49654626735f0449d8d5542d92e7e93607e", "filename": "src/test/run-pass/cell-does-not-clone.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcell-does-not-clone.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::cell::Cell;\n "}, {"sha": "36b9ce1585cf803cf7e72a748592cffc3d3a2f56", "filename": "src/test/run-pass/cfg-macros-foo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -13,7 +13,6 @@\n // check that cfg correctly chooses between the macro impls (see also\n // cfg-macros-notfoo.rs)\n \n-// pretty-expanded FIXME #23616\n \n #[cfg(foo)]\n #[macro_use]"}, {"sha": "4e1b833add017b7c56ee39d80a7929aeb0b958aa", "filename": "src/test/run-pass/cfg-macros-notfoo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -13,7 +13,6 @@\n // check that cfg correctly chooses between the macro impls (see also\n // cfg-macros-foo.rs)\n \n-// pretty-expanded FIXME #23616\n \n #[cfg(foo)]\n #[macro_use]"}, {"sha": "1b692d8bd51f4d8eadffd75e2143bb1594074788", "filename": "src/test/run-pass/cfgs-on-items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcfgs-on-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcfgs-on-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfgs-on-items.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // compile-flags: --cfg fooA --cfg fooB\n \n // fooA AND !bar\n-// pretty-expanded FIXME #23616\n \n #[cfg(all(fooA, not(bar)))]\n fn foo1() -> isize { 1 }"}, {"sha": "d63512f8066cbbe07449f2edef7b83327cc60fa0", "filename": "src/test/run-pass/char.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchar.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let c: char = 'x';"}, {"sha": "5959dd4c389c85de57a340ce90ace8d7c0663be9", "filename": "src/test/run-pass/check-static-mut-slices.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcheck-static-mut-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcheck-static-mut-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-mut-slices.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Checks that mutable static items can have mutable slices\n \n-// pretty-expanded FIXME #23616\n \n static mut TEST: &'static mut [isize] = &mut [1];\n "}, {"sha": "8408597f3540995a5cd19bd9d8c8e52c2659f869", "filename": "src/test/run-pass/check-static-slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcheck-static-slice.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // Check that the various ways of getting to a reference to a vec (both sized\n // and unsized) work properly.\n \n-// pretty-expanded FIXME #23616\n \n const aa: [isize; 3] = [1, 2, 3];\n const ab: &'static [isize; 3] = &aa;"}, {"sha": "6783609b256c98e80138564b6820a3f451ab41cf", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n /* Test that exporting a class also exports its\n    public fields and methods */"}, {"sha": "6ab158dc37ca5d0d0c4b474932422999f97985df", "filename": "src/test/run-pass/class-method-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:cci_class_2.rs\n-// pretty-expanded FIXME #23616\n \n extern crate cci_class_2;\n use cci_class_2::kitties::cat;"}, {"sha": "666571007595c066e1da7007d49ddeaeb1c93d7a", "filename": "src/test/run-pass/class-methods-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:cci_class_3.rs\n-// pretty-expanded FIXME #23616\n \n extern crate cci_class_3;\n use cci_class_3::kitties::cat;"}, {"sha": "93af906bd5a6c47e188e616485263c121de2ec8a", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct cat {\n   meows : usize,"}, {"sha": "4d247bde190de29f7bcf8afd920b37de3fd718a9", "filename": "src/test/run-pass/class-poly-methods-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:cci_class_6.rs\n-// pretty-expanded FIXME #23616\n \n extern crate cci_class_6;\n use cci_class_6::kitties::cat;"}, {"sha": "2528ff5128f9c874d9b19aa5bb977616889946bc", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n struct cat<U> {\n     info : Vec<U> ,"}, {"sha": "3d99aa1ef1d08984142ac5bf6012e2e7b37b9218", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:cci_class_4.rs\n-// pretty-expanded FIXME #23616\n \n extern crate cci_class_4;\n use cci_class_4::kitties::cat;"}, {"sha": "db15001c62f1931d8ac3a7f43ea17709e10fab18", "filename": "src/test/run-pass/classes-simple-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:cci_class.rs\n-// pretty-expanded FIXME #23616\n \n extern crate cci_class;\n use cci_class::kitties::cat;"}, {"sha": "64ec2ea7e71aea8b335125c3726e786db6aad117", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct cat {\n     meows : usize,"}, {"sha": "c475fb2cff945429280e445197f8eb6842bec810", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct cat {\n     meows : usize,"}, {"sha": "d813a6d8102360e8ea6ae31a9e0bffa251cf59ef", "filename": "src/test/run-pass/cleanup-rvalue-during-if-and-while.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-during-if-and-while.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -12,7 +12,6 @@\n // This test verifies that temporaries created for `while`'s and `if`\n // conditions are dropped after the condition is evaluated.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "344ea63c7c74da6d474372fc8320b667e1a4e659", "filename": "src/test/run-pass/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -24,7 +24,6 @@\n // It's unclear how likely such a bug is to recur, but it seems like a\n // scenario worth testing.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "630a510ca651ed1fe79c3d431f9b2fa75989cc80", "filename": "src/test/run-pass/closure-inference.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn foo(i: isize) -> isize { i + 1 }\n "}, {"sha": "2f24cd4ce40432c032d5ee1490c587bd02c7c842", "filename": "src/test/run-pass/closure-inference2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test a rather underspecified example:\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let f = {|i| i};"}, {"sha": "cd3f556864e64ae2c372d74c33e2005a3d50e8db", "filename": "src/test/run-pass/cmp-default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcmp-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcmp-default.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::cmp::Ordering;\n "}, {"sha": "5258ad1af5150c317b9d619af550007474355c83", "filename": "src/test/run-pass/coerce-reborrow-imm-ptr-rcvr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct SpeechMaker {\n     speeches: usize"}, {"sha": "4e116ae14669146a7714349849e13d2eb1029407", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-rcvr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn bar(v: &mut [usize]) -> Vec<usize> {\n     v.to_vec()"}, {"sha": "ce0bc33905fe5c3f355c373669bbae4b2a600f09", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn reverse(v: &mut [usize]) {\n     v.reverse();"}, {"sha": "066b33e007b89e61ffee78cc0a10851339c2bddf", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-rcvr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn bar(v: &mut [usize]) {\n     v.reverse();"}, {"sha": "228a73326e1170fe128c92a4608af95f54221985", "filename": "src/test/run-pass/compare-generic-enums.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcompare-generic-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcompare-generic-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompare-generic-enums.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n type an_int = isize;\n "}, {"sha": "9a2390a9e68d3e7946dd725f40510bcd153d2f74", "filename": "src/test/run-pass/concat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconcat.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     assert_eq!(format!(concat!(\"foo\", \"bar\", \"{}\"), \"baz\"), \"foobarbaz\".to_string());"}, {"sha": "5891d9f1aa019aa8ae4be68647a2b411fd7689e5", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // Crate use statements\n-// pretty-expanded FIXME #23616\n \n #[cfg(bogus)]\n use flippity;"}, {"sha": "c6beb5ba358750e25b1a32e4a7675755dfeaaceb", "filename": "src/test/run-pass/conditional-debug-macro-off.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // compile-flags: -C debug-assertions=no\n // exec-env:RUST_LOG=conditional-debug-macro-off=4\n \n-// pretty-expanded FIXME #23616\n \n #![feature(rustc_private)]\n "}, {"sha": "69173e35e2ce38aa9a3f8a5269437e8617b61e57", "filename": "src/test/run-pass/const-autoderef.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-autoderef.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n static A: [u8; 1] = ['h' as u8];\n static B: u8 = (&A)[0];"}, {"sha": "125aefe036dc621307a475926ac2997d7dd97483", "filename": "src/test/run-pass/const-big-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum Foo {\n     Bar(u32),"}, {"sha": "4b32ee352311d1d50c3eefa7c585a2e1b4d32807", "filename": "src/test/run-pass/const-binops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-binops.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n macro_rules! assert_approx_eq {\n     ($a:expr, $b:expr) => ({"}, {"sha": "6fa6feffbfa005dacb526f92e73e2183c0852097", "filename": "src/test/run-pass/const-block-cross-crate-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-block-cross-crate-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-block-cross-crate-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block-cross-crate-fn.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:cci_const_block.rs\n \n-// pretty-expanded FIXME #23616\n \n extern crate cci_const_block;\n "}, {"sha": "8a4b220a3763c3401d2c335e4af1a32e739508a7", "filename": "src/test/run-pass/const-block-item-macro-codegen.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-block-item-macro-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-block-item-macro-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block-item-macro-codegen.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // General test that function items in static blocks\n // can be generated with a macro.\n \n-// pretty-expanded FIXME #23616\n \n struct MyType {\n     desc: &'static str,"}, {"sha": "b616b1f610325e6a97faa828dc61b44ffe549c07", "filename": "src/test/run-pass/const-block-item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-block-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-block-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block-item.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n mod foo {\n     pub trait Value {"}, {"sha": "e56d01d7ba8ce205edeef9172e941a57eef50dfc", "filename": "src/test/run-pass/const-block.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(dead_code)]\n #![allow(unused_unsafe)]"}, {"sha": "e7674f893d37738843a83417c03ab81de5956945", "filename": "src/test/run-pass/const-cast-ptr-int.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast-ptr-int.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::ptr;\n "}, {"sha": "411df2b3e0759d7a8c59234d2e02e8c07f483c3c", "filename": "src/test/run-pass/const-cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cast.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(libc)]\n "}, {"sha": "b28017b85ad612218047d807548f5bf2d0ea51f2", "filename": "src/test/run-pass/const-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-const.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n const a: isize = 1;\n const b: isize = a + 2;"}, {"sha": "0d9d0e0e0aa73bd550d2639bbc4d3f5643113361", "filename": "src/test/run-pass/const-contents.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-contents.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Issue #570\n \n-// pretty-expanded FIXME #23616\n \n static lsl : isize = 1 << 2;\n static add : isize = 1 + 2;"}, {"sha": "d66c335db2e8785920def01c97a73815ef3be31b", "filename": "src/test/run-pass/const-cross-crate-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:cci_const.rs\n \n-// pretty-expanded FIXME #23616\n \n extern crate cci_const;\n static foo: &'static str = cci_const::foopy;"}, {"sha": "bbe31ceed33cf64992dedf23687565e45e9cfa2f", "filename": "src/test/run-pass/const-cross-crate-extern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:cci_const.rs\n \n-// pretty-expanded FIXME #23616\n \n extern crate cci_const;\n use cci_const::bar;"}, {"sha": "f5407f0c815235d30b54814edd2d2208c0a7e396", "filename": "src/test/run-pass/const-deref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-deref.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n const C: &'static isize = &1000;\n static D: isize = *C;"}, {"sha": "57470c4a67e263fc11c7ec7ce57c805aa2db5a5d", "filename": "src/test/run-pass/const-enum-byref-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V, VV(isize) }\n static C: E = E::V;"}, {"sha": "e3f1d5d35320c3847d70ad16205223bf4aeee7a7", "filename": "src/test/run-pass/const-enum-byref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V, VV(isize) }\n static C: E = E::V;"}, {"sha": "38f21f7e9596245bd560402aff03502831c71f28", "filename": "src/test/run-pass/const-enum-cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-cast.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum A { A1, A2 }\n enum B { B1=0, B2=2 }"}, {"sha": "40a1c99e987db5cfd855c38a305c7617438436c0", "filename": "src/test/run-pass/const-enum-ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-ptr.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V0, V1(isize) }\n static C: &'static E = &E::V0;"}, {"sha": "46c4f82eb98e1c5c54c081a5ca04110ec93dcdbe", "filename": "src/test/run-pass/const-enum-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-struct.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V16(u16), V32(u32) }\n struct S { a: E, b: u16, c: u16 }"}, {"sha": "e356ecb385b98a4225fa4f6f8bbf9016f7085534", "filename": "src/test/run-pass/const-enum-struct2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-struct2.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V0, V16(u16) }\n struct S { a: E, b: u16, c: u16 }"}, {"sha": "6c8786dee6782b7feca49254121a56943b4aa1c3", "filename": "src/test/run-pass/const-enum-structlike.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E {\n     S0 { s: String },"}, {"sha": "476defaa524a08096a2cb0332cc985ff66e4f072", "filename": "src/test/run-pass/const-enum-tuple.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuple.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V16(u16), V32(u32) }\n static C: (E, u16, u16) = (E::V16(0xDEAD), 0x600D, 0xBAD);"}, {"sha": "61043ef75a4c554417b210c12f8aed9b0f7a9eaa", "filename": "src/test/run-pass/const-enum-tuple2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuple2.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V0, V16(u16) }\n static C: (E, u16, u16) = (E::V0, 0x600D, 0xBAD);"}, {"sha": "f574508522b266c4148dae2fd05e2b5ae9b14d93", "filename": "src/test/run-pass/const-enum-tuplestruct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V16(u16), V32(u32) }\n struct S(E, u16, u16);"}, {"sha": "88cfc0dec702856dc8387fa93e03800a454fe463", "filename": "src/test/run-pass/const-enum-tuplestruct2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-tuplestruct2.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V0, V16(u16) }\n struct S(E, u16, u16);"}, {"sha": "2f1cd8dbf9b1213cd3f2fd68ec7a2c48f51050f6", "filename": "src/test/run-pass/const-enum-vec-index.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-index.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V1(isize), V0 }\n const C: &'static [E] = &[E::V0, E::V1(0xDEADBEE)];"}, {"sha": "de94527a604867dd7ed87932f56f852e2f4a8c9a", "filename": "src/test/run-pass/const-enum-vec-ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vec-ptr.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V1(isize), V0 }\n static C: &'static [E] = &[E::V0, E::V1(0xDEADBEE), E::V0];"}, {"sha": "8d43a76bc28c314deaa1ea8ea82634d3f425fcf0", "filename": "src/test/run-pass/const-enum-vector.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-vector.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum E { V1(isize), V0 }\n static C: [E; 3] = [E::V0, E::V1(0xDEADBEE), E::V0];"}, {"sha": "214b0400e8631056570d1f6bc518b1cd664c9a88", "filename": "src/test/run-pass/const-extern-function.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n extern fn foopy() {}\n "}, {"sha": "85c92dda434a64ccb65891d23f5a15ad978e1645", "filename": "src/test/run-pass/const-fn-val.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn foo() -> isize {\n     return 0xca7f000d;"}, {"sha": "7f26a9773396d7a76bb3273f08b93b4dfe178b35", "filename": "src/test/run-pass/const-negative.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-negative.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Issue #358\n \n-// pretty-expanded FIXME #23616\n \n static toplevel_mod: isize = -1;\n "}, {"sha": "b3f6549ef0167c1c5a5a4efe0e51c788fd616c33", "filename": "src/test/run-pass/const-nullary-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum Foo {\n     Bar,"}, {"sha": "b1b7f782cd04a143fcbc37239b3ada310fbf6485", "filename": "src/test/run-pass/const-nullary-univariant-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #[derive(Copy, Clone)]\n enum Foo {"}, {"sha": "9a1f747ce59fbb0cc8ddafcaaa67fbc7ff3a8277", "filename": "src/test/run-pass/const-region-ptrs-noncopy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs-noncopy.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n type Big = [u64; 8];\n struct Pair<'a> { a: isize, b: &'a Big }"}, {"sha": "1cdb98a8bc05b36a65045594eca0e4117a1b1adc", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::{str, string};\n "}, {"sha": "ddc50fc6646f2e12c04fd1904f6695dc62aa83c3", "filename": "src/test/run-pass/const-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct Bar(isize, isize);\n "}, {"sha": "36e6e160a3bd298229c672c94f5c0aa2d751766d", "filename": "src/test/run-pass/consts-in-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n const FOO: isize = 10;\n const BAR: isize = 3;"}, {"sha": "7eae9017420d7a9f089d287a39e027643be70042", "filename": "src/test/run-pass/cross-crate-newtype-struct-pat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:newtype_struct_xc.rs\n \n-// pretty-expanded FIXME #23616\n \n extern crate newtype_struct_xc;\n "}, {"sha": "f8e690cf29e077f996a97895b11a1dd363053f2e", "filename": "src/test/run-pass/deep.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdeep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdeep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeep.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n fn f(x: isize) -> isize {\n     if x == 1 { return 1; } else { let y: isize = 1 + f(x - 1); return y; }"}, {"sha": "98441d7daaad74246458b4b14b28cb28be130647", "filename": "src/test/run-pass/deref-mut-on-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-mut-on-ref.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test that `&mut T` implements `DerefMut<T>`\n \n-// pretty-expanded FIXME #23616\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "383c8197f94738df3946e4f5f726c587d7069ebd", "filename": "src/test/run-pass/deref-on-ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-on-ref.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test that `&T` and `&mut T` implement `Deref<T>`\n \n-// pretty-expanded FIXME #23616\n \n use std::ops::Deref;\n "}, {"sha": "b84d78b4f4fbdde76885fc30da909978d5246809", "filename": "src/test/run-pass/deref-rc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderef-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderef-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-rc.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::rc::Rc;\n "}, {"sha": "b1cd1877a7667101e40d76165de5f2f76a70f196", "filename": "src/test/run-pass/deriving-cmp-generic-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // no-pretty-expanded FIXME #15189\n \n-// pretty-expanded FIXME #23616\n \n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n enum E<T> {"}, {"sha": "14f7862ef21fc899cd0369f2270de965e76ef110", "filename": "src/test/run-pass/deriving-cmp-generic-struct-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // no-pretty-expanded FIXME #15189\n \n-// pretty-expanded FIXME #23616\n \n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n enum ES<T> {"}, {"sha": "5c7d806f519d17ed129fb6f8807e1350a9fe2b0a", "filename": "src/test/run-pass/deriving-cmp-generic-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // no-pretty-expanded FIXME #15189\n \n-// pretty-expanded FIXME #23616\n \n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n struct S<T> {"}, {"sha": "b7bfb91b278a0bb8c6f05c0638b89faa07b1778b", "filename": "src/test/run-pass/deriving-cmp-generic-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // no-pretty-expanded FIXME #15189\n \n-// pretty-expanded FIXME #23616\n \n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n struct TS<T>(T,T);"}, {"sha": "e22e4767d521fd78fa9437d1e4cf980c7549f9b9", "filename": "src/test/run-pass/deriving-cmp-shortcircuit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -12,7 +12,6 @@\n // where possible, by having a type that panics when compared as the\n // second element, so this passes iff the instances shortcircuit.\n \n-// pretty-expanded FIXME #23616\n \n use std::cmp::Ordering;\n "}, {"sha": "dc31e71aad8730b484c1e2005873d1b7de08fd9b", "filename": "src/test/run-pass/deriving-default-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "db5a1f3f000a87e4946d432efd7b8f80f247ff9e", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "7cc59edfcab0e98b9a86b8e16ba14740779de1ce", "filename": "src/test/run-pass/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // This briefly tests the capability of `Cell` and `RefCell` to implement the\n // `Encodable` and `Decodable` traits via `#[derive(Encodable, Decodable)]`\n \n-// pretty-expanded FIXME #23616\n \n #![feature(rustc_private)]\n "}, {"sha": "287750e5051c7b5a219e1d4c12f326d548600892", "filename": "src/test/run-pass/deriving-hash.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-hash.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(hash)]\n "}, {"sha": "bc11b55d3105f3029fa9a054a4a77047cb5f3c6e", "filename": "src/test/run-pass/deriving-rand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(rand)]\n "}, {"sha": "0d24f0bd0d7b32cc1ae645a633e87c6ad8a070d3", "filename": "src/test/run-pass/destructure-array-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // Ensure that we can do a destructuring bind of a fixed-size array,\n // even when the element type has a destructor.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(slice_patterns)]\n "}, {"sha": "0816e258e84a003d603d70651e667b75700eb12d", "filename": "src/test/run-pass/die-macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdie-macro.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Just testing that panic!() type checks in statement or expr\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unreachable_code)]\n "}, {"sha": "b6cae71df865da0ecfb9661f868eba53c03b4554", "filename": "src/test/run-pass/div-mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdiv-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdiv-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiv-mod.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let x: isize = 15;"}, {"sha": "33d5c72772c579e9597ee650298d9569967b1412", "filename": "src/test/run-pass/drop-struct-as-object.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // Test that destructor on a struct runs successfully after the struct\n // is boxed and converted to an object.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "9dd458344cb5a3399e219f9ff74bb84fc76e5259", "filename": "src/test/run-pass/drop-with-type-ascription-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-1.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(str_words)]\n "}, {"sha": "cb3712dea322455e674976b9f95fd261bf126c1a", "filename": "src/test/run-pass/drop-with-type-ascription-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-with-type-ascription-2.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(collections)]\n "}, {"sha": "6ccf6c2fd644d958b5a1b05229a736416dfe7aa0", "filename": "src/test/run-pass/dropck_tarena_sound_drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdropck_tarena_sound_drop.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -16,7 +16,6 @@\n // shows a similar setup, but restricts `f` so that the struct `C<'a>`\n // is force-fed a lifetime equal to that of the borrowed arena.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unstable)]\n #![feature(unsafe_destructor, rustc_private)]"}, {"sha": "b031c82a07f3dec35d9d9f147dda252ada8fc9e2", "filename": "src/test/run-pass/dst-deref-mut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n-// pretty-expanded FIXME #23616\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "c4666d05fbfe36758b7fccb867c6764aa34a7ff2", "filename": "src/test/run-pass/dst-deref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n-// pretty-expanded FIXME #23616\n \n use std::ops::Deref;\n "}, {"sha": "34a187fa6f2d2ca66a5301c2858b2366fba8cfe4", "filename": "src/test/run-pass/dst-index.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-index.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // Test that overloaded index expressions with DST result types\n // work and don't ICE.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(core)]\n "}, {"sha": "d899de9164071f23adfb7b3b4a500810fa4a3536", "filename": "src/test/run-pass/dst-raw.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-raw.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test DST raw pointers\n \n-// pretty-expanded FIXME #23616\n \n trait Trait {\n     fn foo(&self) -> isize;"}, {"sha": "d440fb2a216ecf93131bb254a520b1b98f90d252", "filename": "src/test/run-pass/dst-struct-sole.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // As dst-struct.rs, but the unsized field is the only field in the struct.\n \n-// pretty-expanded FIXME #23616\n \n struct Fat<T: ?Sized> {\n     ptr: T"}, {"sha": "8b6db23026b8a9cf3e36c41c7ed0425bef24aade", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "4d2b50c08e2f508e2b03ed7e1426a6586e0e4e9b", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "afc1d200b274b3db37fd9c17c5e1539663d1d1ea", "filename": "src/test/run-pass/else-if.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Felse-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Felse-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Felse-if.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     if 1 == 2 {"}, {"sha": "af6e321e40aa65ee59dcb90e8acd4aea14575453", "filename": "src/test/run-pass/empty-allocation-non-null.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     assert!(Some(Box::new(())).is_some());"}, {"sha": "827894f8f32c91084930842a74634dcedc29eeeb", "filename": "src/test/run-pass/enum-alignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-alignment.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::mem;\n "}, {"sha": "8be3634c88addb6dc6a3e5027e9903171a65b927", "filename": "src/test/run-pass/enum-clike-ffi-as-int.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-clike-ffi-as-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-clike-ffi-as-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-clike-ffi-as-int.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n /*!\n  * C-like enums have to be represented as LLVM ints, not wrapped in a"}, {"sha": "1ff6370136076e76e800ce68c773a6f9ebdabc95", "filename": "src/test/run-pass/enum-discr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discr.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum Animal {\n     Cat = 0,"}, {"sha": "99e44735d0f03a11a25a9517d08c8480bdb089b6", "filename": "src/test/run-pass/enum-discrim-autosizing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-discrim-autosizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-discrim-autosizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-autosizing.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::mem::size_of;\n "}, {"sha": "edad5cc1652da9253695ce3aad854faff0db28be", "filename": "src/test/run-pass/enum-discrim-manual-sizing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-discrim-manual-sizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-discrim-manual-sizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-manual-sizing.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::mem::size_of;\n "}, {"sha": "cf66725178011f4521cdbbe1c96990785d079471", "filename": "src/test/run-pass/enum-disr-val-pretty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // pp-exact\n \n-// pretty-expanded FIXME #23616\n \n enum color { red = 1, green, blue, imaginary = -1, }\n "}, {"sha": "499d131947a38027d210bf4df73653aa7ac4563a", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(core)]\n "}, {"sha": "1342c4e104de5bf01f16f6375a90dfe87068ac65", "filename": "src/test/run-pass/enum-nullable-const-null-with-fields.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-const-null-with-fields.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::result::Result;\n use std::result::Result::Ok;"}, {"sha": "c8a1047cfa8180987a8da946a54673bc35405f23", "filename": "src/test/run-pass/enum-nullable-simplifycfg-misopt.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-nullable-simplifycfg-misopt.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "efe72729817e8fb9da9b31eb0ebebf23a3d26903", "filename": "src/test/run-pass/env-home-dir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-home-dir.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(path)]\n "}, {"sha": "d86f63c9cb91daff12bd2d29017b1c066b3d650f", "filename": "src/test/run-pass/env-vars.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenv-vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fenv-vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv-vars.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::env::*;\n "}, {"sha": "bf8b089a830c2c662eb2d9dcbe253950679b704e", "filename": "src/test/run-pass/eq-multidispatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #[derive(PartialEq)]\n struct Bar;"}, {"sha": "4dfb15418405dd8ecdf5405479fb6112adf26ecd", "filename": "src/test/run-pass/estr-uniq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Festr-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Festr-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-uniq.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(dead_assignment)]\n "}, {"sha": "d17056e6d799d3c6fd3c39a69130cb81bca4f477", "filename": "src/test/run-pass/exec-env.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexec-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexec-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexec-env.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // exec-env:TEST_EXEC_ENV=22\n \n-// pretty-expanded FIXME #23616\n \n use std::env;\n "}, {"sha": "1b50d3028b1e254e6870e5607d08593691008cd9", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "4021ae89e3629fc7bea5585ab7863f7bacfcb96c", "filename": "src/test/run-pass/explicit-self-objects-uniq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "d2a0d60eb661447ab42d0aa6ddabaecbd53ad4d1", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "67e41aad6971b63f4d217071bff2fa83afe2b5ad", "filename": "src/test/run-pass/expr-block-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n fn test_fn() {\n     fn ten() -> isize { return 10; }"}, {"sha": "5477a9227aa1d30d55f828fccb2d8b237074ef63", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "8795962bebdd8be067054dbc610a447152aa6d60", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn test_generic<T: Clone, F>(expected: T, eq: F) where F: FnOnce(T, T) -> bool {\n     let actual: T = { expected.clone() };"}, {"sha": "d9b4c95bc24d19a2944cb84fc7a407f80181eeeb", "filename": "src/test/run-pass/expr-block-slot.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-block-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-block-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-slot.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Regression test for issue #377\n \n-// pretty-expanded FIXME #23616\n \n struct A { a: isize }\n struct V { v: isize }"}, {"sha": "7ad024186015b70c600cf7ddcb76a45ea5078d80", "filename": "src/test/run-pass/expr-block-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-unique.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "38be041938b3c3875762b31207f059c7a5823748", "filename": "src/test/run-pass/expr-block.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -13,7 +13,6 @@\n \n \n // Tests for standalone blocks as expressions\n-// pretty-expanded FIXME #23616\n \n fn test_basic() { let rs: bool = { true }; assert!((rs)); }\n "}, {"sha": "99e74a6b8564dc0e62629dd7b58c515f65fe5c0c", "filename": "src/test/run-pass/expr-copy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-copy.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn f(arg: &mut A) {\n     arg.a = 100;"}, {"sha": "aeca388d317b623fe74be0ec6af82783920cb7ff", "filename": "src/test/run-pass/expr-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-fn.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn test_int() {\n     fn f() -> isize { 10 }"}, {"sha": "94c6b70bb62f32cd867832895cfbddfb6c8176cd", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn test_generic<T, F>(expected: T, not_expected: T, eq: F) where\n     T: Clone,"}, {"sha": "43110533b6dc6919e454d9b805aa296f10e8c211", "filename": "src/test/run-pass/expr-if-panic-all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-if-panic-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-if-panic-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-panic-all.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // When all branches of an if expression result in panic, the entire if\n // expression results in panic.\n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let _x = if true {"}, {"sha": "c7f10b66ca3c77489fee58d3e755816c27f53970", "filename": "src/test/run-pass/expr-if-panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-if-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-if-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-panic.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn test_if_panic() {\n     let x = if false { panic!() } else { 10 };"}, {"sha": "12000fd54e7e73365a33bf20c1b1b6a3e62200bc", "filename": "src/test/run-pass/expr-if-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-unique.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "e8458e320113bf366ad938f5f2b47de1cbe78444", "filename": "src/test/run-pass/expr-if.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -13,7 +13,6 @@\n \n \n // Tests for if as expressions\n-// pretty-expanded FIXME #23616\n \n fn test_if() { let rs: bool = if true { true } else { false }; assert!((rs)); }\n "}, {"sha": "738fcecb2e0db96f00fe3d652cdea1b4903280e8", "filename": "src/test/run-pass/expr-match-generic-unique1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique1.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "88ea2415241093016478d137fc0522a75758326e", "filename": "src/test/run-pass/expr-match-generic-unique2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic-unique2.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "509106289d079859e1db249748439d900d4c1d00", "filename": "src/test/run-pass/expr-match-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n type compare<T> = extern \"Rust\" fn(T, T) -> bool;\n "}, {"sha": "e712d552a810779fc2ae98f019fb11e8189f500a", "filename": "src/test/run-pass/expr-match-panic-all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-match-panic-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-match-panic-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-panic-all.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -13,7 +13,6 @@\n \n // When all branches of a match expression result in panic, the entire\n // match expression results in panic.\n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let _x ="}, {"sha": "89dc7b09c7b15a5ace7e683164f571e8c7e62d5c", "filename": "src/test/run-pass/expr-match-panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-match-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-match-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-panic.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn test_simple() {\n     let r = match true { true => { true } false => { panic!() } };"}, {"sha": "e752c20a5124251cf240f6731298266d8a99059e", "filename": "src/test/run-pass/expr-match-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-unique.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "580ee52ed364572d6dc5b25db6cc23d35a0c53c2", "filename": "src/test/run-pass/expr-match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexpr-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -13,7 +13,6 @@\n \n \n // Tests for using match as an expression\n-// pretty-expanded FIXME #23616\n \n fn test_basic() {\n     let mut rs: bool = match true { true => { true } false => { false } };"}, {"sha": "90ca31e80be3a49e4c055112b70e6f1214435b1e", "filename": "src/test/run-pass/ext-expand-inner-exprs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fext-expand-inner-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fext-expand-inner-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fext-expand-inner-exprs.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n static FOO : &'static str = concat!(concat!(\"hel\", \"lo\"), \"world\");\n "}, {"sha": "3474e2eefb7c7cba8933faafe3b538914125c542", "filename": "src/test/run-pass/exterior.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexterior.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n use std::cell::Cell;\n "}, {"sha": "ec6b6c8d39fad9625e6e75d8d32f033164a79ff0", "filename": "src/test/run-pass/extern-call-direct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test direct calls to extern fns.\n \n-// pretty-expanded FIXME #23616\n \n extern fn f(x: usize) -> usize { x * 2 }\n "}, {"sha": "6535ae2fca946793fd36ccad8b21caaf4d9ad3a4", "filename": "src/test/run-pass/extern-compare-with-return-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Tests that we can compare various kinds of extern fn signatures.\n \n-// pretty-expanded FIXME #23616\n \n extern fn voidret1() {}\n extern fn voidret2() {}"}, {"sha": "28a076113d1f093d257e1e86a1ab8014013fa45f", "filename": "src/test/run-pass/extern-methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-methods.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(core)]\n "}, {"sha": "e75aa2d72c925d8a2bd0bc26e26d526d60ba220f", "filename": "src/test/run-pass/extern-pass-char.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test a function that takes/returns a u8.\n \n-// pretty-expanded FIXME #23616\n \n #[link(name = \"rust_test_helpers\")]\n extern {"}, {"sha": "e92f9b6a1a172302565db4664e3e82c0c77a1aca", "filename": "src/test/run-pass/extern-pass-double.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #[link(name = \"rust_test_helpers\")]\n extern {"}, {"sha": "0753ea1bcfeada174d7e2f3176f67bd533440ae4", "filename": "src/test/run-pass/extern-pass-u32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test a function that takes/returns a u32.\n \n-// pretty-expanded FIXME #23616\n \n #[link(name = \"rust_test_helpers\")]\n extern {"}, {"sha": "89faa3bb47141bac73ec00290c7616cd646d4d64", "filename": "src/test/run-pass/extern-pass-u64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test a call to a function that takes/returns a u64.\n \n-// pretty-expanded FIXME #23616\n \n #[link(name = \"rust_test_helpers\")]\n extern {"}, {"sha": "3c58646e0c302aec4548d17705002fc7111b1fd4", "filename": "src/test/run-pass/extern-return-TwoU16s.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub struct TwoU16s {\n     one: u16, two: u16"}, {"sha": "0eb6be2d687a496d6079f38484261b8d0c3601cd", "filename": "src/test/run-pass/extern-return-TwoU32s.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub struct TwoU32s {\n     one: u32, two: u32"}, {"sha": "d5eab86351e10a1c5a8b839cdcf3e84c3ccd7277", "filename": "src/test/run-pass/extern-return-TwoU64s.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub struct TwoU64s {\n     one: u64, two: u64"}, {"sha": "d8f476bcd0cbb8cf1da726427b8096ea9e367f9f", "filename": "src/test/run-pass/extern-return-TwoU8s.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub struct TwoU8s {\n     one: u8, two: u8"}, {"sha": "7ef87b9409d51c017db502464821449f0018af4c", "filename": "src/test/run-pass/extern-take-value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-take-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextern-take-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-take-value.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n extern fn f() {\n }"}, {"sha": "352f68da9854fcdf11049b4d90bb5d5e6693fa4d", "filename": "src/test/run-pass/extoption_env-not-defined.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     assert!(option_env!(\"__HOPEFULLY_DOESNT_EXIST__\").is_none());"}, {"sha": "624167db36da354f24639f47b5426bad1d2b8490", "filename": "src/test/run-pass/field-destruction-order.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffield-destruction-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffield-destruction-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffield-destruction-order.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -21,7 +21,6 @@\n // declarations, but we currently run them top-to-bottom. I don't think the\n // order really matters that much as long as we define what it is.\n \n-// pretty-expanded FIXME #23616\n \n struct A;\n struct B;"}, {"sha": "eefd94475358c386832bec5e2b3912625fcd9f1d", "filename": "src/test/run-pass/fixed_length_copy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffixed_length_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffixed_length_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed_length_copy.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let arr = [1,2,3];"}, {"sha": "e9f6e0f51b4ec6dacc7b2b6342c74db89a0f8bae", "filename": "src/test/run-pass/float2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffloat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffloat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat2.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let a = 1.5e6f64;"}, {"sha": "d133f3463a3f2accba63150ef73250654a542ab3", "filename": "src/test/run-pass/floatlits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffloatlits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffloatlits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloatlits.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let f = 4.999999999999f64;"}, {"sha": "2d3d4cbffd00d3eb5562a1e2d21678fa2d5509a9", "filename": "src/test/run-pass/fn-bare-assign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn f(i: isize, called: &mut bool) {\n     assert_eq!(i, 10);"}, {"sha": "3ed4f103af081644f3493d2f82b7858af4b60c4b", "filename": "src/test/run-pass/fn-bare-size.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::mem;\n "}, {"sha": "e6ee77cb62bb6d85cc7d5912c1a0cae8d9fd9838", "filename": "src/test/run-pass/fn-bare-spawn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // This is what the signature to spawn should look like with bare functions\n \n-// pretty-expanded FIXME #23616\n \n fn spawn<T:Send>(val: T, f: fn(T)) {\n     f(val);"}, {"sha": "9a8a8d4782ed583f6fff8aaefbdb01a2f22db3f5", "filename": "src/test/run-pass/fn-item-type-cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffn-item-type-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffn-item-type-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-item-type-cast.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test explicit coercions from a fn item type to a fn pointer type.\n \n-// pretty-expanded FIXME #23616\n \n fn foo(x: isize) -> isize { x * 2 }\n fn bar(x: isize) -> isize { x * 4 }"}, {"sha": "2e9607602fd627edc2d82ca79800dca39c3d72b2", "filename": "src/test/run-pass/fn-pattern-expected-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-pattern-expected-type.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let f = |(x, y): (isize, isize)| {"}, {"sha": "963d34a2d2fbdd70239463b40826e1983d6af548", "filename": "src/test/run-pass/for-destruct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffor-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffor-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-destruct.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct Pair { x: isize, y: isize }\n "}, {"sha": "411183e4f74a7a23c031527b6ffce08f2f9d523a", "filename": "src/test/run-pass/for-loop-goofiness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffor-loop-goofiness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffor-loop-goofiness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-goofiness.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n enum BogusOption<T> {\n     None,"}, {"sha": "7efd15f222e3717af4cc3fc80f99c101087a2da1", "filename": "src/test/run-pass/for-loop-into-iterator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffor-loop-into-iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffor-loop-into-iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-into-iterator.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // Test that for loops can do what RFC #235 claims\n \n-// pretty-expanded FIXME #23616\n \n fn main() {\n     let mut v = vec![1];"}, {"sha": "001ca1a02f632ad0311e9c37df9737d04a93c8ff", "filename": "src/test/run-pass/for-loop-panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffor-loop-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffor-loop-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-panic.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,6 +9,5 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() { let x: Vec<isize> = Vec::new(); for _ in &x { panic!(\"moop\"); } }"}, {"sha": "bfc0d6cf9d542729ff573db0751746f6e8fb3e12", "filename": "src/test/run-pass/foreach-external-iterators-break.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let x = [1; 100];"}, {"sha": "cedb9601431462df10d76c27ce9b726e3a5d5d4d", "filename": "src/test/run-pass/foreach-external-iterators-hashmap-break-restart.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(collections)]\n "}, {"sha": "79304fce5c166d1defa8369431130610ace37db2", "filename": "src/test/run-pass/foreach-external-iterators-hashmap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(collections)]\n "}, {"sha": "7248537d6a1b6263742a7185473f3204b316cb34", "filename": "src/test/run-pass/foreach-external-iterators-loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let x = [1; 100];"}, {"sha": "87aa3d84003c527d7f751605889264d1871db977", "filename": "src/test/run-pass/foreach-external-iterators-nested.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let x = [1; 100];"}, {"sha": "d1fe98f5431f751d7b8f3b93dd36725f49c202e4", "filename": "src/test/run-pass/foreach-external-iterators.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let x = [1; 100];"}, {"sha": "60068185f5a524f37dac0a4f7224f9400b148bbd", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n fn two<F>(mut it: F) where F: FnMut(isize) { it(0); it(1); }\n "}, {"sha": "d3d872620c38b9a7d2bf224b0ff9c486d4cfbe1e", "filename": "src/test/run-pass/foreign-fn-with-byval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #[derive(Copy, Clone)]\n pub struct S {"}, {"sha": "9bbd8cdb11d884de0ac3bf9e1ea91e2c74ff9002", "filename": "src/test/run-pass/format-nan.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fformat-nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fformat-nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-nan.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     use std::f64;"}, {"sha": "0f16dfa1e8f15753d9202e7bd0a98e33950a5e59", "filename": "src/test/run-pass/format-ref-cell.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::cell::RefCell;\n "}, {"sha": "dd58787a1de9005fd7e4cc7ab800fde31c1f6584", "filename": "src/test/run-pass/fsu-moves-and-copies.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffsu-moves-and-copies.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // Issue 4691: Ensure that functional-struct-updates operates\n // correctly and moves rather than copy when appropriate.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax, core)]"}, {"sha": "3bb6df33f70a0a6e19b6283df10ff82db37fd6c7", "filename": "src/test/run-pass/fun-call-variants.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n fn ho<F>(f: F) -> isize where F: FnOnce(isize) -> isize { let n: isize = f(3); return n; }\n "}, {"sha": "b28c64d06be2f83fdd4b898dc8f4260671579fcb", "filename": "src/test/run-pass/fun-indirect-call.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffun-indirect-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffun-indirect-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffun-indirect-call.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n fn f() -> isize { return 42; }\n "}, {"sha": "6030da44e4ade6982dc4c3238ea3e91c5408b7f1", "filename": "src/test/run-pass/func-arg-incomplete-pattern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // Test that we do not leak when the arg pattern must drop part of the\n // argument (in this case, the `y` field).\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "ab565e7abcaceda8e3feb9c385a828f716bfe21e", "filename": "src/test/run-pass/func-arg-ref-pattern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -14,7 +14,6 @@\n // boxes. Make sure that we don't free the box as we match the\n // pattern.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_patterns)]"}, {"sha": "3ab3ee4db2d5b997084c63f8b599a9c6174370e5", "filename": "src/test/run-pass/func-arg-wild-pattern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffunc-arg-wild-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Ffunc-arg-wild-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-wild-pattern.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n // Test that we can compile code that uses a `_` in function argument\n // patterns.\n \n-// pretty-expanded FIXME #23616\n \n fn foo((x, _): (isize, isize)) -> isize {\n     x"}, {"sha": "8dbe6de83886919e00728df07f3b24545d6ddfe2", "filename": "src/test/run-pass/generic-exterior-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "67aea1f9f8ae8e8f48d7b6545bc0a40daa9635a9", "filename": "src/test/run-pass/generic-extern-mangle.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-extern-mangle.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(core)]\n "}, {"sha": "181e05183d2ec0dde117b4c29473cd4616f8ffaf", "filename": "src/test/run-pass/generic-fn-infer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-infer.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -13,7 +13,6 @@\n \n \n // Issue #45: infer type parameters in function applications\n-// pretty-expanded FIXME #23616\n \n fn id<T>(x: T) -> T { return x; }\n "}, {"sha": "0a59a925a5ff6cf815b56e2dc62911f8b4d5fb9c", "filename": "src/test/run-pass/generic-object.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgeneric-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgeneric-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-object.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "7a496ebf8ce349b932381358d29585e409bbdb31", "filename": "src/test/run-pass/generic-static-methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n trait vec_utils<T> {\n     fn map_<U, F>(x: &Self, f: F) -> Vec<U> where F: FnMut(&T) -> U;"}, {"sha": "8e7a3add343495a9ecf07f5ad7e5fb5773a088eb", "filename": "src/test/run-pass/generic-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgeneric-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgeneric-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-type.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n struct Pair<T> {x: T, y: T}\n "}, {"sha": "21e9a9a80d0aedf65139e0605130a15ee191ba6d", "filename": "src/test/run-pass/generic-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "c9595d09e21b2125cd75e09072a879e5800f9d36", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(rustc_private)]\n "}, {"sha": "13da404c253b34e855bc45a11eda3ae65b46dee2", "filename": "src/test/run-pass/global-scope.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fglobal-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fglobal-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fglobal-scope.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n pub fn f() -> isize { return 1; }\n "}, {"sha": "53c3eff5b81ee11dc22d2c35f300571f394da821", "filename": "src/test/run-pass/guards-not-exhaustive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #[derive(Copy, Clone)]\n enum Q { R(Option<usize>) }"}, {"sha": "d79dbabac2d42e4ca82e48aed87e7b61f94e26fb", "filename": "src/test/run-pass/guards.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fguards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fguards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #[derive(Copy, Clone)]\n struct Pair { x: isize, y: isize }"}, {"sha": "8e2e21bed0a7c3f663185b079c836e15126ae7b8", "filename": "src/test/run-pass/hrtb-fn-like-trait-object.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fhrtb-fn-like-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fhrtb-fn-like-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-fn-like-trait-object.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // A basic test of using a higher-ranked trait bound.\n \n-// pretty-expanded FIXME #23616\n \n trait FnLike<A,R> {\n     fn call(&self, arg: A) -> R;"}, {"sha": "71e314b513251cb0fbacafa7d4f6595130bd0761", "filename": "src/test/run-pass/hrtb-fn-like-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fhrtb-fn-like-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fhrtb-fn-like-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-fn-like-trait.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // A basic test of using a higher-ranked trait bound.\n \n-// pretty-expanded FIXME #23616\n \n trait FnLike<A,R> {\n     fn call(&self, arg: A) -> R;"}, {"sha": "fefbd00476689381073579ba2f2ec441b2c14e51", "filename": "src/test/run-pass/hrtb-trait-object-paren-notation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(unboxed_closures)]\n "}, {"sha": "f0bb31b8470f1f605a63722716961e4764b4465f", "filename": "src/test/run-pass/huge-largest-array.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n use std::mem::size_of;\n "}, {"sha": "83f09850f7776d237359f1c6aca2dddccd842148", "filename": "src/test/run-pass/hygiene-dodging-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n mod x {\n     pub fn g() -> usize {14}"}, {"sha": "df72a5410a2b2e505807eb306772790fbc837770", "filename": "src/test/run-pass/hygienic-labels.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygienic-labels.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n macro_rules! loop_x {\n     ($e: expr) => {"}, {"sha": "075faba2fcb85fd1b57bc0a2f7166b7a740b886e", "filename": "src/test/run-pass/i32-sub.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fi32-sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fi32-sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi32-sub.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,6 +11,5 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() { let mut x: i32 = -400; x = 0 - x; assert!((x == 400)); }"}, {"sha": "242cea264afb13840cfb1efeb7554c2e6db04e4c", "filename": "src/test/run-pass/i8-incr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fi8-incr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fi8-incr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi8-incr.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -11,7 +11,6 @@\n \n \n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let mut x: i8 = -12;"}, {"sha": "13134abd8fdd96f8c46e753798104275703545ff", "filename": "src/test/run-pass/if-let.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-let.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let x = Some(3);"}, {"sha": "0d43f1ca70669b848295031abc23d2fae0c689c3", "filename": "src/test/run-pass/impl-inherent-non-conflict.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fimpl-inherent-non-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fimpl-inherent-non-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-inherent-non-conflict.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -12,7 +12,6 @@\n // with the same name, which can be called on values that have a\n // precise enough type to allow distinguishing between the methods.\n \n-// pretty-expanded FIXME #23616\n \n struct Foo<T>(T);\n "}, {"sha": "f0195976aa832b3389b2cd089c58638788ffb1c4", "filename": "src/test/run-pass/impl-inherent-prefer-over-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fimpl-inherent-prefer-over-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fimpl-inherent-prefer-over-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-inherent-prefer-over-trait.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct Foo;\n "}, {"sha": "beba056b72cdc383757e937d18908184b97db219", "filename": "src/test/run-pass/impl-not-adjacent-to-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fimpl-not-adjacent-to-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fimpl-not-adjacent-to-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-not-adjacent-to-type.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n mod foo {\n     pub struct Point {"}, {"sha": "b2a9b08b01b86ad0cab084ee716e79286e802022", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(dead_assignment)]\n "}, {"sha": "22369c77ed33fdc5b82689ed339f148c72802b75", "filename": "src/test/run-pass/inferred-suffix-in-pattern-range.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let x = 2;"}, {"sha": "5489a61f7d0b9a70975151b819c96f361425fe9b", "filename": "src/test/run-pass/inherent-trait-method-order.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Finherent-trait-method-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Finherent-trait-method-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finherent-trait-method-order.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n struct Foo;\n "}, {"sha": "97b32189d0027203c80c719d7f8598b6b26209c8", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "d8d9d5136e2d1082ccb6abbc6cfc648e07528845", "filename": "src/test/run-pass/inner-attrs-on-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Finner-attrs-on-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Finner-attrs-on-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finner-attrs-on-impl.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n struct Foo;\n "}, {"sha": "b93ca943e4714e793fd54ee8bd998c6fae2e50d2", "filename": "src/test/run-pass/inner-static.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Finner-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Finner-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finner-static.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:inner_static.rs\n \n-// pretty-expanded FIXME #23616\n \n extern crate inner_static;\n "}, {"sha": "ba9d22f06a976f7f1a847aeee0c7ee44303f586e", "filename": "src/test/run-pass/integer-literal-radix.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Finteger-literal-radix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Finteger-literal-radix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finteger-literal-radix.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n pub fn main() {\n     let a = 0xBEEF_isize;"}, {"sha": "fa97ef8fcd39434983863aab8b715e1821bca4b1", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(intrinsics, main)]\n "}, {"sha": "ff7d799f64c5f3dbfa634ba781259efd51736ea7", "filename": "src/test/run-pass/intrinsic-assume.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-assume.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(core)]\n "}, {"sha": "abb85cc7f194966fa053d132cfe3cd51fc09453d", "filename": "src/test/run-pass/intrinsic-atomics-cc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fintrinsic-atomics-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fintrinsic-atomics-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics-cc.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:cci_intrinsic.rs\n \n-// pretty-expanded FIXME #23616\n \n extern crate cci_intrinsic;\n use cci_intrinsic::atomic_xchg;"}, {"sha": "4ccab55e94348a28b28da185a9dfad8a6c311241", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "2e75f2dccd1baf84168ca603415d20662530d48d", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]"}, {"sha": "63aed3f009fd7d7832544957a4894d7d500f856f", "filename": "src/test/run-pass/intrinsic-return-address.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fintrinsic-return-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5daee19eca622030c598042d9615df17d4ad035f/src%2Ftest%2Frun-pass%2Fintrinsic-return-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-return-address.rs?ref=5daee19eca622030c598042d9615df17d4ad035f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(intrinsics)]\n "}]}