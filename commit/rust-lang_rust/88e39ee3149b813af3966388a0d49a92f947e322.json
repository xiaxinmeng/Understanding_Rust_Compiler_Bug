{"sha": "88e39ee3149b813af3966388a0d49a92f947e322", "node_id": "C_kwDOAAsO6NoAKDg4ZTM5ZWUzMTQ5YjgxM2FmMzk2NjM4OGEwZDQ5YTkyZjk0N2UzMjI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-02-06T14:54:35Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-18T19:24:55Z"}, "message": "make first component of dyn* use pointer layout+type, and adjust DynStar comment", "tree": {"sha": "0a412d29a01c39a69d3e33760b753822c5388761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a412d29a01c39a69d3e33760b753822c5388761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88e39ee3149b813af3966388a0d49a92f947e322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88e39ee3149b813af3966388a0d49a92f947e322", "html_url": "https://github.com/rust-lang/rust/commit/88e39ee3149b813af3966388a0d49a92f947e322", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88e39ee3149b813af3966388a0d49a92f947e322/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eb5c4581a386b13c414e8c8bd73846ef37236d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb5c4581a386b13c414e8c8bd73846ef37236d1", "html_url": "https://github.com/rust-lang/rust/commit/3eb5c4581a386b13c414e8c8bd73846ef37236d1"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "229e3d9dc5f8ebd88a81e935184ea5f1ae94c5f7", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88e39ee3149b813af3966388a0d49a92f947e322/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e39ee3149b813af3966388a0d49a92f947e322/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=88e39ee3149b813af3966388a0d49a92f947e322", "patch": "@@ -39,7 +39,7 @@ use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::Symbol;\n use rustc_span::{DebuggerVisualizerFile, DebuggerVisualizerType};\n-use rustc_target::abi::{Align, Size, VariantIdx};\n+use rustc_target::abi::{Align, VariantIdx};\n \n use std::collections::BTreeSet;\n use std::time::{Duration, Instant};\n@@ -273,13 +273,6 @@ pub fn cast_to_dyn_star<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         matches!(dst_ty.kind(), ty::Dynamic(_, _, ty::DynStar)),\n         \"destination type must be a dyn*\"\n     );\n-    // FIXME(dyn-star): this is probably not the best way to check if this is\n-    // a pointer, and really we should ensure that the value is a suitable\n-    // pointer earlier in the compilation process.\n-    let src = match src_ty_and_layout.pointee_info_at(bx.cx(), Size::ZERO) {\n-        Some(_) => bx.ptrtoint(src, bx.cx().type_isize()),\n-        None => bx.bitcast(src, bx.type_isize()),\n-    };\n     (src, unsized_info(bx, src_ty_and_layout.ty, dst_ty, old_info))\n }\n "}, {"sha": "993191ee96a446f8ad02652c707fa0dc84fc5414", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e39ee3149b813af3966388a0d49a92f947e322/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e39ee3149b813af3966388a0d49a92f947e322/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=88e39ee3149b813af3966388a0d49a92f947e322", "patch": "@@ -770,7 +770,7 @@ where\n \n                 ty::Dynamic(_, _, ty::DynStar) => {\n                     if i == 0 {\n-                        TyMaybeWithLayout::Ty(tcx.types.usize)\n+                        TyMaybeWithLayout::Ty(tcx.mk_mut_ptr(tcx.types.unit))\n                     } else if i == 1 {\n                         // FIXME(dyn-star) same FIXME as above applies here too\n                         TyMaybeWithLayout::Ty("}, {"sha": "1a62794b0b441b471192f0fb6229f43c45698e25", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88e39ee3149b813af3966388a0d49a92f947e322/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e39ee3149b813af3966388a0d49a92f947e322/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=88e39ee3149b813af3966388a0d49a92f947e322", "patch": "@@ -193,7 +193,7 @@ fn layout_of_uncached<'tcx>(\n         }\n \n         ty::Dynamic(_, _, ty::DynStar) => {\n-            let mut data = scalar_unit(Int(dl.ptr_sized_integer(), false));\n+            let mut data = scalar_unit(Pointer(AddressSpace::DATA));\n             data.valid_range_mut().start = 0;\n             let mut vtable = scalar_unit(Pointer(AddressSpace::DATA));\n             vtable.valid_range_mut().start = 1;"}, {"sha": "ebe2b76aef335e5bf2c5a9948ece67e49d417ebf", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88e39ee3149b813af3966388a0d49a92f947e322/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88e39ee3149b813af3966388a0d49a92f947e322/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=88e39ee3149b813af3966388a0d49a92f947e322", "patch": "@@ -26,11 +26,9 @@ pub enum DynKind {\n     Dyn,\n     /// A sized `dyn* Trait` object\n     ///\n-    /// These objects are represented as a `(data, vtable)` pair where `data` is a ptr-sized value\n-    /// (often a pointer to the real object, but not necessarily) and `vtable` is a pointer to\n-    /// the vtable for `dyn* Trait`. The representation is essentially the same as `&dyn Trait`\n-    /// or similar, but the drop function included in the vtable is responsible for freeing the\n-    /// underlying storage if needed. This allows a `dyn*` object to be treated agnostically with\n+    /// These objects are represented as a `(data, vtable)` pair where `data` is a value of some\n+    /// ptr-sized and ptr-aligned dynamically determined type `T` and `vtable` is a pointer to the\n+    /// vtable of `impl T for Trait`. This allows a `dyn*` object to be treated agnostically with\n     /// respect to whether it points to a `Box<T>`, `Rc<T>`, etc.\n     DynStar,\n }"}]}