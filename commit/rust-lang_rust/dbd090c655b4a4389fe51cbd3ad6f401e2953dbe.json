{"sha": "dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "node_id": "C_kwDOAAsO6NoAKGRiZDA5MGM2NTViNGE0Mzg5ZmU1MWNiZDNhZDZmNDAxZTI5NTNkYmU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-09T07:03:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-09T07:03:45Z"}, "message": "Rollup merge of #110694 - est31:builtin, r=petrochenkov\n\nImplement builtin # syntax and use it for offset_of!(...)\n\nAdd `builtin #` syntax to the parser, as well as a generic infrastructure to support both item and expression position builtin syntaxes. The PR also uses this infrastructure for the implementation of the `offset_of!` macro, added by #106934.\n\ncc `@petrochenkov` `@DrMeepster`\n\ncc #110680 `builtin #` tracking issue\ncc #106655 `offset_of!` tracking issue", "tree": {"sha": "6de355c93e791dc65923c0cf69e80c267a799e33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6de355c93e791dc65923c0cf69e80c267a799e33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkWfBRCRBK7hj4Ov3rIwAAqAwIAE+KanXRTljRa5nw9kBqWWn2\nAlLc02A+VGfI8PxXQRcXLltCJUsPuHOhVaB8YDS5T4weGkXnbCJp9uGxBLOtS8Zb\njibClgKR6ylTys1JB0q+ewVCfhQx2yzX8ppJ6mqsXyLI83qDdroepAIwYW0zwAr1\nQvQ7QGyoebCbHetw3MpDWPVxk2Bw5zOe7B6hVvdXuEdQ7udTXI6C7Tlp4+T4l08D\n+Ql73/s91zwgwg1MGBNbex9uBRrNTSwJHlFR9aEkxyth5E1mXBYOvt5vLBPBR6op\ntac1+kOm/BqriddO1UlWhLu/TSuKIpw538xX9P46SLm2mfH0ggsNoGQ9kOTtNOg=\n=gXYX\n-----END PGP SIGNATURE-----\n", "payload": "tree 6de355c93e791dc65923c0cf69e80c267a799e33\nparent ff30b8cb7bcf3eaee7a5222c8ec35adba4a0d243\nparent 83b4df4e611961373ffaf4bfcd9f8940a4f37c09\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683615825 +0530\ncommitter GitHub <noreply@github.com> 1683615825 +0530\n\nRollup merge of #110694 - est31:builtin, r=petrochenkov\n\nImplement builtin # syntax and use it for offset_of!(...)\n\nAdd `builtin #` syntax to the parser, as well as a generic infrastructure to support both item and expression position builtin syntaxes. The PR also uses this infrastructure for the implementation of the `offset_of!` macro, added by #106934.\n\ncc `@petrochenkov` `@DrMeepster`\n\ncc #110680 `builtin #` tracking issue\ncc #106655 `offset_of!` tracking issue\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "html_url": "https://github.com/rust-lang/rust/commit/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff30b8cb7bcf3eaee7a5222c8ec35adba4a0d243", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff30b8cb7bcf3eaee7a5222c8ec35adba4a0d243", "html_url": "https://github.com/rust-lang/rust/commit/ff30b8cb7bcf3eaee7a5222c8ec35adba4a0d243"}, {"sha": "83b4df4e611961373ffaf4bfcd9f8940a4f37c09", "url": "https://api.github.com/repos/rust-lang/rust/commits/83b4df4e611961373ffaf4bfcd9f8940a4f37c09", "html_url": "https://github.com/rust-lang/rust/commit/83b4df4e611961373ffaf4bfcd9f8940a4f37c09"}], "stats": {"total": 469, "additions": 333, "deletions": 136}, "files": [{"sha": "3d5056d82c56c4c8c3e96f2c9a39e81290cd0fe7", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -603,6 +603,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(yeet_expr, \"`do yeet` expression is experimental\");\n     gate_all!(dyn_star, \"`dyn*` trait objects are experimental\");\n     gate_all!(const_closures, \"const closures are experimental\");\n+    gate_all!(builtin_syntax, \"`builtin #` syntax is unstable\");\n \n     if !visitor.features.negative_bounds {\n         for &span in spans.get(&sym::negative_bounds).iter().copied().flatten() {"}, {"sha": "87c32ffce1214b6ffbced065d7eb358561f0509b", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -556,8 +556,7 @@ impl<'a> State<'a> {\n                 self.pclose();\n             }\n             ast::ExprKind::OffsetOf(container, fields) => {\n-                // FIXME: This should have its own syntax, distinct from a macro invocation.\n-                self.word(\"offset_of!\");\n+                self.word(\"builtin # offset_of\");\n                 self.popen();\n                 self.rbox(0, Inconsistent);\n                 self.print_type(container);"}, {"sha": "3b458b1d30ba7f7d7996bc31d317b6298620798e", "filename": "compiler/rustc_builtin_macros/messages.ftl", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_builtin_macros%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_builtin_macros%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fmessages.ftl?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -150,10 +150,6 @@ builtin_macros_format_pos_mismatch = {$n} positional {$n ->\n     *[more] arguments\n     } in format string, but {$desc}\n \n-builtin_macros_offset_of_expected_field = expected field\n-\n-builtin_macros_offset_of_expected_two_args = expected 2 arguments\n-\n builtin_macros_test_case_non_item = `#[test_case]` attribute is only allowed on items\n \n builtin_macros_test_bad_fn = {$kind} functions cannot be used for tests"}, {"sha": "4e5edb4d6b1dfd1906465a4a2c4d52168dca65b1", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -44,7 +44,6 @@ mod format;\n mod format_foreign;\n mod global_allocator;\n mod log_syntax;\n-mod offset_of;\n mod source_util;\n mod test;\n mod trace_macros;\n@@ -92,7 +91,6 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n         line: source_util::expand_line,\n         log_syntax: log_syntax::expand_log_syntax,\n         module_path: source_util::expand_mod,\n-        offset_of: offset_of::expand_offset_of,\n         option_env: env::expand_option_env,\n         core_panic: edition_panic::expand_panic,\n         std_panic: edition_panic::expand_panic,"}, {"sha": "0ef3e000e414c40c69fb87601320f8f07098957f", "filename": "compiler/rustc_builtin_macros/src/offset_of.rs", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/ff30b8cb7bcf3eaee7a5222c8ec35adba4a0d243/compiler%2Frustc_builtin_macros%2Fsrc%2Foffset_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff30b8cb7bcf3eaee7a5222c8ec35adba4a0d243/compiler%2Frustc_builtin_macros%2Fsrc%2Foffset_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Foffset_of.rs?ref=ff30b8cb7bcf3eaee7a5222c8ec35adba4a0d243", "patch": "@@ -1,99 +0,0 @@\n-use rustc_ast as ast;\n-use rustc_ast::ptr::P;\n-use rustc_ast::token;\n-use rustc_ast::tokenstream::TokenStream;\n-use rustc_errors::PResult;\n-use rustc_expand::base::{self, *};\n-use rustc_macros::Diagnostic;\n-use rustc_parse::parser::Parser;\n-use rustc_span::{symbol::Ident, Span};\n-\n-#[derive(Diagnostic)]\n-#[diag(builtin_macros_offset_of_expected_field)]\n-struct ExpectedField {\n-    #[primary_span]\n-    span: Span,\n-}\n-\n-#[derive(Diagnostic)]\n-#[diag(builtin_macros_offset_of_expected_two_args)]\n-struct ExpectedTwoArgs {\n-    #[primary_span]\n-    span: Span,\n-}\n-\n-fn parse_field<'a>(cx: &ExtCtxt<'a>, p: &mut Parser<'a>) -> PResult<'a, Ident> {\n-    let token = p.token.uninterpolate();\n-    let field = match token.kind {\n-        token::Ident(name, _) => Ident::new(name, token.span),\n-        token::Literal(token::Lit { kind: token::Integer, symbol, suffix: None }) => {\n-            Ident::new(symbol, token.span)\n-        }\n-        _ => return Err(cx.create_err(ExpectedField { span: p.token.span })),\n-    };\n-\n-    p.bump();\n-\n-    Ok(field)\n-}\n-\n-fn parse_args<'a>(\n-    cx: &mut ExtCtxt<'a>,\n-    sp: Span,\n-    tts: TokenStream,\n-) -> PResult<'a, (P<ast::Ty>, P<[Ident]>)> {\n-    let mut p = cx.new_parser_from_tts(tts);\n-\n-    let container = p.parse_ty()?;\n-\n-    p.expect(&token::Comma)?;\n-\n-    if p.eat(&token::Eof) {\n-        return Err(cx.create_err(ExpectedTwoArgs { span: sp }));\n-    }\n-\n-    let mut fields = Vec::new();\n-\n-    loop {\n-        let field = parse_field(cx, &mut p)?;\n-        fields.push(field);\n-\n-        if p.eat(&token::Dot) {\n-            continue;\n-        }\n-\n-        p.eat(&token::Comma);\n-\n-        if !p.eat(&token::Eof) {\n-            return Err(cx.create_err(ExpectedTwoArgs { span: sp }));\n-        }\n-\n-        break;\n-    }\n-\n-    Ok((container, fields.into()))\n-}\n-\n-pub fn expand_offset_of<'cx>(\n-    cx: &'cx mut ExtCtxt<'_>,\n-    sp: Span,\n-    tts: TokenStream,\n-) -> Box<dyn base::MacResult + 'cx> {\n-    match parse_args(cx, sp, tts) {\n-        Ok((container, fields)) => {\n-            let expr = P(ast::Expr {\n-                id: ast::DUMMY_NODE_ID,\n-                kind: ast::ExprKind::OffsetOf(container, fields),\n-                span: sp,\n-                attrs: ast::AttrVec::new(),\n-                tokens: None,\n-            });\n-\n-            MacEager::expr(expr)\n-        }\n-        Err(mut err) => {\n-            err.emit();\n-            DummyResult::any(sp)\n-        }\n-    }\n-}"}, {"sha": "f4615445f8e9bb6947cda99b803c5d2a3a767f17", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -313,6 +313,8 @@ declare_features! (\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n     /// Allows async functions to be declared, implemented, and used in traits.\n     (active, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n+    /// Allows builtin # foo() syntax\n+    (active, builtin_syntax, \"CURRENT_RUSTC_VERSION\", Some(110680), None),\n     /// Allows `c\"foo\"` literals.\n     (active, c_str_literals, \"CURRENT_RUSTC_VERSION\", Some(105723), None),\n     /// Treat `extern \"C\"` function as nounwind."}, {"sha": "711447a0af0775af746402ef4205f96fbda06839", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -257,6 +257,10 @@ parse_invalid_literal_suffix_on_tuple_index = suffixes on a tuple index are inva\n     .tuple_exception_line_2 = on proc macros, you'll want to use `syn::Index::from` or `proc_macro::Literal::*_unsuffixed` for code that will desugar to tuple field access\n     .tuple_exception_line_3 = see issue #60210 <https://github.com/rust-lang/rust/issues/60210> for more information\n \n+parse_expected_builtin_ident = expected identifier after `builtin #`\n+\n+parse_unknown_builtin_construct = unknown `builtin #` construct `{$name}`\n+\n parse_non_string_abi_literal = non-string ABI literal\n     .suggestion = specify the ABI with a string literal\n "}, {"sha": "0810f0efef98d7137433897e4d970ef3ac096c73", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -2644,3 +2644,18 @@ pub(crate) struct MalformedCfgAttr {\n     pub span: Span,\n     pub sugg: &'static str,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_unknown_builtin_construct)]\n+pub(crate) struct UnknownBuiltinConstruct {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_expected_builtin_ident)]\n+pub(crate) struct ExpectedBuiltinIdent {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "887e155426fa1b5fe8c52da7ca18925fdaae2109", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -1300,6 +1300,8 @@ impl<'a> Parser<'a> {\n             })\n         } else if self.check(&token::OpenDelim(Delimiter::Bracket)) {\n             self.parse_expr_array_or_repeat(Delimiter::Bracket)\n+        } else if self.is_builtin() {\n+            self.parse_expr_builtin()\n         } else if self.check_path() {\n             self.parse_expr_path_start()\n         } else if self.check_keyword(kw::Move)\n@@ -1766,6 +1768,61 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr)\n     }\n \n+    /// Parse `builtin # ident(args,*)`.\n+    fn parse_expr_builtin(&mut self) -> PResult<'a, P<Expr>> {\n+        self.parse_builtin(|this, lo, ident| {\n+            if ident.name == sym::offset_of {\n+                return Ok(Some(this.parse_expr_offset_of(lo)?));\n+            }\n+\n+            Ok(None)\n+        })\n+    }\n+\n+    pub(crate) fn parse_builtin<T>(\n+        &mut self,\n+        parse: impl FnOnce(&mut Parser<'a>, Span, Ident) -> PResult<'a, Option<T>>,\n+    ) -> PResult<'a, T> {\n+        let lo = self.token.span;\n+\n+        self.bump(); // `builtin`\n+        self.bump(); // `#`\n+\n+        let Some((ident, false)) = self.token.ident() else {\n+            let err = errors::ExpectedBuiltinIdent { span: self.token.span }\n+                .into_diagnostic(&self.sess.span_diagnostic);\n+            return Err(err);\n+        };\n+        self.sess.gated_spans.gate(sym::builtin_syntax, ident.span);\n+        self.bump();\n+\n+        self.expect(&TokenKind::OpenDelim(Delimiter::Parenthesis))?;\n+        let ret = if let Some(res) = parse(self, lo, ident)? {\n+            Ok(res)\n+        } else {\n+            let err = errors::UnknownBuiltinConstruct { span: lo.to(ident.span), name: ident.name }\n+                .into_diagnostic(&self.sess.span_diagnostic);\n+            return Err(err);\n+        };\n+        self.expect(&TokenKind::CloseDelim(Delimiter::Parenthesis))?;\n+\n+        ret\n+    }\n+\n+    pub(crate) fn parse_expr_offset_of(&mut self, lo: Span) -> PResult<'a, P<Expr>> {\n+        let container = self.parse_ty()?;\n+        self.expect(&TokenKind::Comma)?;\n+\n+        let seq_sep = SeqSep { sep: Some(token::Dot), trailing_sep_allowed: false };\n+        let (fields, _trailing, _recovered) = self.parse_seq_to_before_end(\n+            &TokenKind::CloseDelim(Delimiter::Parenthesis),\n+            seq_sep,\n+            Parser::parse_field_name,\n+        )?;\n+        let span = lo.to(self.token.span);\n+        Ok(self.mk_expr(span, ExprKind::OffsetOf(container, fields.to_vec().into())))\n+    }\n+\n     /// Returns a string literal if the next token is a string literal.\n     /// In case of error returns `Some(lit)` if the next token is a literal with a wrong kind,\n     /// and returns `None` if the next token is not literal at all.\n@@ -2835,6 +2892,10 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n+    pub(crate) fn is_builtin(&self) -> bool {\n+        self.token.is_keyword(kw::Builtin) && self.look_ahead(1, |t| *t == token::Pound)\n+    }\n+\n     /// Parses a `try {...}` expression (`try` token already eaten).\n     fn parse_try_block(&mut self, span_lo: Span) -> PResult<'a, P<Expr>> {\n         let (attrs, body) = self.parse_inner_attrs_and_block()?;"}, {"sha": "840cfe908997ffbfe55525fe4684d5b64066cf39", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -265,6 +265,9 @@ impl<'a> Parser<'a> {\n             // UNION ITEM\n             self.bump(); // `union`\n             self.parse_item_union()?\n+        } else if self.is_builtin() {\n+            // BUILTIN# ITEM\n+            return self.parse_item_builtin();\n         } else if self.eat_keyword(kw::Macro) {\n             // MACROS 2.0 ITEM\n             self.parse_item_decl_macro(lo)?\n@@ -434,6 +437,11 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn parse_item_builtin(&mut self) -> PResult<'a, Option<ItemInfo>> {\n+        // To be expanded\n+        return Ok(None);\n+    }\n+\n     /// Parses an item macro, e.g., `item!();`.\n     fn parse_item_macro(&mut self, vis: &Visibility) -> PResult<'a, MacCall> {\n         let path = self.parse_path(PathStyle::Mod)?; // `foo::bar`"}, {"sha": "a0bd086053e4e6c976e5185d2db551745831c2eb", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -90,7 +90,11 @@ impl<'a> Parser<'a> {\n                 attrs,\n                 errors::InvalidVariableDeclarationSub::UseLetNotVar,\n             )?\n-        } else if self.check_path() && !self.token.is_qpath_start() && !self.is_path_start_item() {\n+        } else if self.check_path()\n+            && !self.token.is_qpath_start()\n+            && !self.is_path_start_item()\n+            && !self.is_builtin()\n+        {\n             // We have avoided contextual keywords like `union`, items with `crate` visibility,\n             // or `auto trait` items. We aim to parse an arbitrary path `a::b` but not something\n             // that starts like a path (1 token), but it fact not a path."}, {"sha": "117e2774bd87a3eda9f1f625a7cd89158e601fb0", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -95,6 +95,7 @@ symbols! {\n \n         // Weak keywords, have special meaning only in specific contexts.\n         Auto:               \"auto\",\n+        Builtin:            \"builtin\",\n         Catch:              \"catch\",\n         Default:            \"default\",\n         MacroRules:         \"macro_rules\",\n@@ -440,6 +441,7 @@ symbols! {\n         breakpoint,\n         bridge,\n         bswap,\n+        builtin_syntax,\n         c_str,\n         c_str_literals,\n         c_unwind,"}, {"sha": "4913a6de918286ae24820d42c2df0eaaa4cb66b0", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -1315,9 +1315,9 @@ impl<T> SizedTypeProperties for T {}\n ///\n /// assert_eq!(mem::offset_of!(NestedA, b.0), 0);\n /// ```\n-#[unstable(feature = \"offset_of\", issue = \"106655\")]\n-#[rustc_builtin_macro]\n #[cfg(not(bootstrap))]\n+#[unstable(feature = \"offset_of\", issue = \"106655\")]\n+#[allow_internal_unstable(builtin_syntax)]\n pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {\n-    /* compiler built-in */\n+    builtin # offset_of($Container, $($fields).+)\n }"}, {"sha": "e3757941c8cd179ab2a987b88fd8f7c056fdc8a1", "filename": "tests/mir-opt/const_prop/offset_of.concrete.ConstProp.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.concrete.ConstProp.diff?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -22,17 +22,17 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/offset_of.rs:+1:9: +1:10\n--         _1 = OffsetOf(Alpha, [0]);       // scope 0 at $DIR/offset_of.rs:+1:13: +1:33\n-+         _1 = const 4_usize;              // scope 0 at $DIR/offset_of.rs:+1:13: +1:33\n+-         _1 = OffsetOf(Alpha, [0]);       // scope 0 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n++         _1 = const 4_usize;              // scope 0 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n           StorageLive(_2);                 // scope 1 at $DIR/offset_of.rs:+2:9: +2:10\n--         _2 = OffsetOf(Alpha, [1]);       // scope 1 at $DIR/offset_of.rs:+2:13: +2:33\n-+         _2 = const 0_usize;              // scope 1 at $DIR/offset_of.rs:+2:13: +2:33\n+-         _2 = OffsetOf(Alpha, [1]);       // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n++         _2 = const 0_usize;              // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n           StorageLive(_3);                 // scope 2 at $DIR/offset_of.rs:+3:9: +3:11\n--         _3 = OffsetOf(Alpha, [2, 0]);    // scope 2 at $DIR/offset_of.rs:+3:14: +3:36\n-+         _3 = const 2_usize;              // scope 2 at $DIR/offset_of.rs:+3:14: +3:36\n+-         _3 = OffsetOf(Alpha, [2, 0]);    // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n++         _3 = const 2_usize;              // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n           StorageLive(_4);                 // scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n--         _4 = OffsetOf(Alpha, [2, 1]);    // scope 3 at $DIR/offset_of.rs:+4:14: +4:36\n-+         _4 = const 3_usize;              // scope 3 at $DIR/offset_of.rs:+4:14: +4:36\n+-         _4 = OffsetOf(Alpha, [2, 1]);    // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n++         _4 = const 3_usize;              // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/offset_of.rs:+0:15: +5:2\n           StorageDead(_4);                 // scope 3 at $DIR/offset_of.rs:+5:1: +5:2\n           StorageDead(_3);                 // scope 2 at $DIR/offset_of.rs:+5:1: +5:2"}, {"sha": "4a655604cd183076de1d50e7c389553dba194f15", "filename": "tests/mir-opt/const_prop/offset_of.generic.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foffset_of.generic.ConstProp.diff?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -22,13 +22,13 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/offset_of.rs:+1:9: +1:11\n-          _1 = OffsetOf(Gamma<T>, [0]);    // scope 0 at $DIR/offset_of.rs:+1:14: +1:37\n+          _1 = OffsetOf(Gamma<T>, [0]);    // scope 0 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n           StorageLive(_2);                 // scope 1 at $DIR/offset_of.rs:+2:9: +2:11\n-          _2 = OffsetOf(Gamma<T>, [1]);    // scope 1 at $DIR/offset_of.rs:+2:14: +2:37\n+          _2 = OffsetOf(Gamma<T>, [1]);    // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n           StorageLive(_3);                 // scope 2 at $DIR/offset_of.rs:+3:9: +3:11\n-          _3 = OffsetOf(Delta<T>, [1]);    // scope 2 at $DIR/offset_of.rs:+3:14: +3:37\n+          _3 = OffsetOf(Delta<T>, [1]);    // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n           StorageLive(_4);                 // scope 3 at $DIR/offset_of.rs:+4:9: +4:11\n-          _4 = OffsetOf(Delta<T>, [2]);    // scope 3 at $DIR/offset_of.rs:+4:14: +4:37\n+          _4 = OffsetOf(Delta<T>, [2]);    // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/offset_of.rs:+0:17: +5:2\n           StorageDead(_4);                 // scope 3 at $DIR/offset_of.rs:+5:1: +5:2\n           StorageDead(_3);                 // scope 2 at $DIR/offset_of.rs:+5:1: +5:2"}, {"sha": "832bb5a96bc3db5f5b8dc81884d29894d0c6b795", "filename": "tests/ui/feature-gates/feature-gate-builtin_syntax.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Ffeature-gates%2Ffeature-gate-builtin_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Ffeature-gates%2Ffeature-gate-builtin_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-builtin_syntax.rs?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -0,0 +1,7 @@\n+struct Foo {\n+    v: u8,\n+    w: u8,\n+}\n+fn main() {\n+    builtin # offset_of(Foo, v); //~ ERROR `builtin #` syntax is unstable\n+}"}, {"sha": "3bc7848f66dd305cb17bdd4e040ff11797a74083", "filename": "tests/ui/feature-gates/feature-gate-builtin_syntax.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Ffeature-gates%2Ffeature-gate-builtin_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Ffeature-gates%2Ffeature-gate-builtin_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-builtin_syntax.stderr?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `builtin #` syntax is unstable\n+  --> $DIR/feature-gate-builtin_syntax.rs:6:15\n+   |\n+LL |     builtin # offset_of(Foo, v);\n+   |               ^^^^^^^^^\n+   |\n+   = note: see issue #110680 <https://github.com/rust-lang/rust/issues/110680> for more information\n+   = help: add `#![feature(builtin_syntax)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "5e66e33f8a273b4ac5988401f429834b83550882", "filename": "tests/ui/offset-of/offset-of-arg-count.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.rs?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -3,7 +3,15 @@\n use std::mem::offset_of;\n \n fn main() {\n-    offset_of!(NotEnoughArguments); //~ ERROR expected one of\n-    offset_of!(NotEnoughArgumentsWithAComma, ); //~ ERROR expected 2 arguments\n-    offset_of!(Container, field, too many arguments); //~ ERROR expected 2 arguments\n+    offset_of!(NotEnoughArguments); //~ ERROR unexpected end of macro invocation\n+    offset_of!(NotEnoughArgumentsWithAComma, ); //~ ERROR unexpected end of macro invocation\n+    offset_of!(Container, field, too many arguments); //~ ERROR no rules expected the token `too`\n+    offset_of!(S, f); // compiles fine\n+    offset_of!(S, f,); // also compiles fine\n+    offset_of!(S, f.); //~ ERROR unexpected end of macro invocation\n+    offset_of!(S, f.,); //~ ERROR expected identifier\n+    offset_of!(S, f..); //~ ERROR no rules expected the token\n+    offset_of!(S, f..,); //~ ERROR no rules expected the token\n }\n+\n+struct S { f: u8, }"}, {"sha": "4275a89545f50c24975002b8eb881babeeabf904", "filename": "tests/ui/offset-of/offset-of-arg-count.stderr", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-arg-count.stderr?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -1,20 +1,59 @@\n-error: expected one of `!`, `(`, `+`, `,`, `::`, or `<`, found `<eof>`\n-  --> $DIR/offset-of-arg-count.rs:6:16\n+error: unexpected end of macro invocation\n+  --> $DIR/offset-of-arg-count.rs:6:34\n    |\n LL |     offset_of!(NotEnoughArguments);\n-   |                ^^^^^^^^^^^^^^^^^^ expected one of `!`, `(`, `+`, `,`, `::`, or `<`\n+   |                                  ^ missing tokens in macro arguments\n+   |\n+note: while trying to match `,`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n \n-error: expected 2 arguments\n-  --> $DIR/offset-of-arg-count.rs:7:5\n+error: unexpected end of macro invocation\n+  --> $DIR/offset-of-arg-count.rs:7:45\n    |\n LL |     offset_of!(NotEnoughArgumentsWithAComma, );\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                             ^ missing tokens in macro arguments\n+   |\n+note: while trying to match meta-variable `$fields:tt`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n \n-error: expected 2 arguments\n-  --> $DIR/offset-of-arg-count.rs:8:5\n+error: no rules expected the token `too`\n+  --> $DIR/offset-of-arg-count.rs:8:34\n    |\n LL |     offset_of!(Container, field, too many arguments);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                  ^^^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence end\n+\n+error: unexpected end of macro invocation\n+  --> $DIR/offset-of-arg-count.rs:11:21\n+   |\n+LL |     offset_of!(S, f.);\n+   |                     ^ missing tokens in macro arguments\n+   |\n+note: while trying to match meta-variable `$fields:tt`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+\n+error: expected identifier, found `,`\n+  --> $DIR/offset-of-arg-count.rs:12:21\n+   |\n+LL |     offset_of!(S, f.,);\n+   |                     ^ expected identifier\n+\n+error: no rules expected the token `..`\n+  --> $DIR/offset-of-arg-count.rs:13:20\n+   |\n+LL |     offset_of!(S, f..);\n+   |                    ^^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence start\n+\n+error: no rules expected the token `..`\n+  --> $DIR/offset-of-arg-count.rs:14:20\n+   |\n+LL |     offset_of!(S, f..,);\n+   |                    ^^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence start\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "1be9899887b4abe9c1daffd8967835c5ab4aa8c0", "filename": "tests/ui/offset-of/offset-of-builtin.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Foffset-of%2Foffset-of-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Foffset-of%2Foffset-of-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-builtin.rs?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -0,0 +1,44 @@\n+#![feature(builtin_syntax)]\n+\n+// For the exposed macro we already test these errors in the other files,\n+// but this test helps to make sure the builtin construct also errors.\n+// This has the same examples as offset-of-arg-count.rs\n+\n+fn main() {\n+    builtin # offset_of(NotEnoughArguments); //~ ERROR expected one of\n+}\n+fn t1() {\n+    // Already errored upon at the macro level. Yielding an error would require\n+    // extra effort.\n+    builtin # offset_of(NotEnoughArgumentsWithAComma, );\n+}\n+fn t2() {\n+    builtin # offset_of(Container, field, too many arguments); //~ ERROR expected identifier, found\n+    //~| ERROR found `,`\n+    //~| ERROR found `many`\n+    //~| ERROR found `arguments`\n+}\n+fn t3() {\n+    builtin # offset_of(S, f); // compiles fine\n+}\n+fn t4() {\n+    // Already errored upon at the macro level. Yielding an error would require\n+    // extra effort.\n+    builtin # offset_of(S, f);\n+}\n+fn t5() {\n+    builtin # offset_of(S, f.); //~ ERROR expected identifier\n+}\n+fn t6() {\n+    builtin # offset_of(S, f.,); //~ ERROR expected identifier\n+}\n+fn t7() {\n+    builtin # offset_of(S, f..); //~ ERROR expected one of\n+}\n+fn t8() {\n+    // Already errored upon at the macro level. Yielding an error would require\n+    // extra effort.\n+    builtin # offset_of(S, f..,);\n+}\n+\n+struct S { f: u8, }"}, {"sha": "1a1f33cc613a741cdeb9717b71d68cd643f90a3f", "filename": "tests/ui/offset-of/offset-of-builtin.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Foffset-of%2Foffset-of-builtin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Foffset-of%2Foffset-of-builtin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-builtin.stderr?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -0,0 +1,65 @@\n+error: expected one of `!`, `(`, `+`, `,`, `::`, or `<`, found `)`\n+  --> $DIR/offset-of-builtin.rs:8:43\n+   |\n+LL |     builtin # offset_of(NotEnoughArguments);\n+   |                                           ^ expected one of `!`, `(`, `+`, `,`, `::`, or `<`\n+\n+error: expected identifier, found `,`\n+  --> $DIR/offset-of-builtin.rs:16:41\n+   |\n+LL |     builtin # offset_of(Container, field, too many arguments);\n+   |                                         ^\n+   |                                         |\n+   |                                         expected identifier\n+   |                                         help: remove this comma\n+\n+error: expected one of `)` or `.`, found `,`\n+  --> $DIR/offset-of-builtin.rs:16:41\n+   |\n+LL |     builtin # offset_of(Container, field, too many arguments);\n+   |                                         ^\n+   |                                         |\n+   |                                         expected one of `)` or `.`\n+   |                                         help: missing `.`\n+\n+error: expected one of `)` or `.`, found `many`\n+  --> $DIR/offset-of-builtin.rs:16:47\n+   |\n+LL |     builtin # offset_of(Container, field, too many arguments);\n+   |                                              -^^^^ expected one of `)` or `.`\n+   |                                              |\n+   |                                              help: missing `.`\n+\n+error: expected one of `)` or `.`, found `arguments`\n+  --> $DIR/offset-of-builtin.rs:16:52\n+   |\n+LL |     builtin # offset_of(Container, field, too many arguments);\n+   |                                                   -^^^^^^^^^ expected one of `)` or `.`\n+   |                                                   |\n+   |                                                   help: missing `.`\n+\n+error: expected identifier, found `)`\n+  --> $DIR/offset-of-builtin.rs:30:30\n+   |\n+LL |     builtin # offset_of(S, f.);\n+   |                              ^ expected identifier\n+\n+error: expected identifier, found `,`\n+  --> $DIR/offset-of-builtin.rs:33:30\n+   |\n+LL |     builtin # offset_of(S, f.,);\n+   |                              ^ expected identifier\n+\n+error: expected one of `)` or `.`, found `..`\n+  --> $DIR/offset-of-builtin.rs:36:29\n+   |\n+LL |     builtin # offset_of(S, f..);\n+   |                             ^^ expected one of `)` or `.`\n+   |\n+help: if you meant to bind the contents of the rest of the array pattern into `f`, use `@`\n+   |\n+LL |     builtin # offset_of(S, f @ ..);\n+   |                              +\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "e6e0f49923620f127085ff1f869d4d5e54412e15", "filename": "tests/ui/offset-of/offset-of-dst-field.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -5,6 +5,7 @@ LL |     offset_of!(Alpha, z);\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n   --> $DIR/offset-of-dst-field.rs:31:5\n@@ -13,6 +14,7 @@ LL |     offset_of!(Beta, z);\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Trait + 'static)`\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the size for values of type `Extern` cannot be known at compilation time\n   --> $DIR/offset-of-dst-field.rs:32:5\n@@ -21,6 +23,7 @@ LL |     offset_of!(Gamma, z);\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `Extern`\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c39882519a5da0e0e91adb3995e5c49bc10d5079", "filename": "tests/ui/offset-of/offset-of-unstable.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Foffset-of%2Foffset-of-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Foffset-of%2Foffset-of-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-unstable.stderr?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -33,6 +33,7 @@ LL | |     );\n    | |_____^\n    |\n    = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'unstable_test_feature'\n   --> $DIR/offset-of-unstable.rs:18:5\n@@ -41,6 +42,7 @@ LL |     offset_of!(StableWithUnstableField, unstable);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'unstable_test_feature'\n   --> $DIR/offset-of-unstable.rs:20:5\n@@ -49,6 +51,7 @@ LL |     offset_of!(StableWithUnstableFieldType, stable.unstable);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'unstable_test_feature'\n   --> $DIR/offset-of-unstable.rs:21:5\n@@ -61,6 +64,7 @@ LL | |     );\n    | |_____^\n    |\n    = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'unstable_test_feature'\n   --> $DIR/offset-of-unstable.rs:26:5\n@@ -73,6 +77,7 @@ LL | |     );\n    | |_____^\n    |\n    = help: add `#![feature(unstable_test_feature)]` to the crate attributes to enable\n+   = note: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 8 previous errors\n "}, {"sha": "897dab8ec50aea16381bd143b0207dad181ca2b8", "filename": "tests/ui/parser/builtin-syntax.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Fparser%2Fbuiltin-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Fparser%2Fbuiltin-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fbuiltin-syntax.rs?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -0,0 +1,9 @@\n+#![feature(builtin_syntax)]\n+\n+fn main() {\n+    builtin # foobar(); //~ ERROR unknown `builtin #` construct\n+}\n+\n+fn not_identifier() {\n+    builtin # {}(); //~ ERROR expected identifier after\n+}"}, {"sha": "ee3764a62216ae3033100fecdba9c598b33f0dbd", "filename": "tests/ui/parser/builtin-syntax.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Fparser%2Fbuiltin-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe/tests%2Fui%2Fparser%2Fbuiltin-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fbuiltin-syntax.stderr?ref=dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "patch": "@@ -0,0 +1,14 @@\n+error: unknown `builtin #` construct `foobar`\n+  --> $DIR/builtin-syntax.rs:4:5\n+   |\n+LL |     builtin # foobar();\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: expected identifier after `builtin #`\n+  --> $DIR/builtin-syntax.rs:8:15\n+   |\n+LL |     builtin # {}();\n+   |               ^\n+\n+error: aborting due to 2 previous errors\n+"}]}