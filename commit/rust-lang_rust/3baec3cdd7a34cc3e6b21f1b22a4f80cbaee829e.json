{"sha": "3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYWVjM2NkZDdhMzRjYzNlNmIyMWYxYjIyYTRmODBjYmFlZTgyOWU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-31T16:43:51Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-08-07T16:13:17Z"}, "message": "Add HirId to VisibilityKind::Restricted", "tree": {"sha": "92ddf23622c07d4a70a32a81e7ffe483b4b301c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ddf23622c07d4a70a32a81e7ffe483b4b301c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "html_url": "https://github.com/rust-lang/rust/commit/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39e95165323f76042dfab65772a8411dd85fe088", "url": "https://api.github.com/repos/rust-lang/rust/commits/39e95165323f76042dfab65772a8411dd85fe088", "html_url": "https://github.com/rust-lang/rust/commit/39e95165323f76042dfab65772a8411dd85fe088"}], "stats": {"total": 95, "additions": 56, "deletions": 39}, "files": [{"sha": "d853d3d9a7fb4975601bc311b1c538455d131c4d", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "patch": "@@ -353,10 +353,10 @@ pub trait Visitor<'v> : Sized {\n     fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n         walk_lifetime(self, lifetime)\n     }\n-    fn visit_qpath(&mut self, qpath: &'v QPath, id: NodeId, span: Span) {\n+    fn visit_qpath(&mut self, qpath: &'v QPath, id: HirId, span: Span) {\n         walk_qpath(self, qpath, id, span)\n     }\n-    fn visit_path(&mut self, path: &'v Path, _id: NodeId) {\n+    fn visit_path(&mut self, path: &'v Path, _id: HirId) {\n         walk_path(self, path)\n     }\n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v PathSegment) {\n@@ -456,7 +456,7 @@ pub fn walk_trait_ref<'v, V>(visitor: &mut V, trait_ref: &'v TraitRef)\n     where V: Visitor<'v>\n {\n     visitor.visit_id(trait_ref.ref_id);\n-    visitor.visit_path(&trait_ref.path, trait_ref.ref_id)\n+    visitor.visit_path(&trait_ref.path, trait_ref.hir_ref_id)\n }\n \n pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n@@ -471,7 +471,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         }\n         ItemKind::Use(ref path, _) => {\n             visitor.visit_id(item.id);\n-            visitor.visit_path(path, item.id);\n+            visitor.visit_path(path, item.hir_id);\n         }\n         ItemKind::Static(ref typ, _, body) |\n         ItemKind::Const(ref typ, body) => {\n@@ -602,7 +602,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             visitor.visit_fn_decl(&function_declaration.decl);\n         }\n         TyKind::Path(ref qpath) => {\n-            visitor.visit_qpath(qpath, typ.id, typ.span);\n+            visitor.visit_qpath(qpath, typ.hir_id, typ.span);\n         }\n         TyKind::Array(ref ty, ref length) => {\n             visitor.visit_ty(ty);\n@@ -621,7 +621,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n     }\n }\n \n-pub fn walk_qpath<'v, V: Visitor<'v>>(visitor: &mut V, qpath: &'v QPath, id: NodeId, span: Span) {\n+pub fn walk_qpath<'v, V: Visitor<'v>>(visitor: &mut V, qpath: &'v QPath, id: HirId, span: Span) {\n     match *qpath {\n         QPath::Resolved(ref maybe_qself, ref path) => {\n             if let Some(ref qself) = *maybe_qself {\n@@ -670,14 +670,14 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n     visitor.visit_id(pattern.id);\n     match pattern.node {\n         PatKind::TupleStruct(ref qpath, ref children, _) => {\n-            visitor.visit_qpath(qpath, pattern.id, pattern.span);\n+            visitor.visit_qpath(qpath, pattern.hir_id, pattern.span);\n             walk_list!(visitor, visit_pat, children);\n         }\n         PatKind::Path(ref qpath) => {\n-            visitor.visit_qpath(qpath, pattern.id, pattern.span);\n+            visitor.visit_qpath(qpath, pattern.hir_id, pattern.span);\n         }\n         PatKind::Struct(ref qpath, ref fields, _) => {\n-            visitor.visit_qpath(qpath, pattern.id, pattern.span);\n+            visitor.visit_qpath(qpath, pattern.hir_id, pattern.span);\n             for field in fields {\n                 visitor.visit_id(field.node.id);\n                 visitor.visit_ident(field.node.ident);\n@@ -985,7 +985,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_anon_const(count)\n         }\n         ExprKind::Struct(ref qpath, ref fields, ref optional_base) => {\n-            visitor.visit_qpath(qpath, expression.id, expression.span);\n+            visitor.visit_qpath(qpath, expression.hir_id, expression.span);\n             for field in fields {\n                 visitor.visit_id(field.id);\n                 visitor.visit_ident(field.ident);\n@@ -1062,7 +1062,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_expr(index_expression)\n         }\n         ExprKind::Path(ref qpath) => {\n-            visitor.visit_qpath(qpath, expression.id, expression.span);\n+            visitor.visit_qpath(qpath, expression.hir_id, expression.span);\n         }\n         ExprKind::Break(ref destination, ref opt_expr) => {\n             if let Some(ref label) = destination.label {\n@@ -1108,9 +1108,9 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) {\n }\n \n pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility) {\n-    if let VisibilityKind::Restricted { ref path, id } = vis.node {\n+    if let VisibilityKind::Restricted { ref path, id, hir_id } = vis.node {\n         visitor.visit_id(id);\n-        visitor.visit_path(path, id)\n+        visitor.visit_path(path, hir_id)\n     }\n }\n "}, {"sha": "6b66fd8a2b2ff0af74171613dd0f8503624296a3", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "patch": "@@ -2155,12 +2155,14 @@ impl<'a> LoweringContext<'a> {\n             let future_path =\n                 this.std_path(span, &[\"future\", \"Future\"], Some(future_params), false);\n \n+            let LoweredNodeId { node_id, hir_id } = this.next_id();\n             let mut bounds = vec![\n                 hir::GenericBound::Trait(\n                     hir::PolyTraitRef {\n                         trait_ref: hir::TraitRef {\n                             path: future_path,\n-                            ref_id: this.next_id().node_id,\n+                            ref_id: node_id,\n+                            hir_ref_id: hir_id,\n                         },\n                         bound_generic_params: hir_vec![],\n                         span,\n@@ -2482,9 +2484,11 @@ impl<'a> LoweringContext<'a> {\n             hir::QPath::Resolved(None, path) => path.and_then(|path| path),\n             qpath => bug!(\"lower_trait_ref: unexpected QPath `{:?}`\", qpath),\n         };\n+        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(p.ref_id);\n         hir::TraitRef {\n             path,\n-            ref_id: self.lower_node_id(p.ref_id).node_id,\n+            ref_id: node_id,\n+            hir_ref_id: hir_id,\n         }\n     }\n \n@@ -2843,11 +2847,13 @@ impl<'a> LoweringContext<'a> {\n                             hir::VisibilityKind::Public => hir::VisibilityKind::Public,\n                             hir::VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n                             hir::VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n-                            hir::VisibilityKind::Restricted { ref path, id: _ } => {\n+                            hir::VisibilityKind::Restricted { ref path, id: _, hir_id: _ } => {\n+                                let id = this.next_id();\n                                 hir::VisibilityKind::Restricted {\n                                     path: path.clone(),\n                                     // We are allocating a new NodeId here\n-                                    id: this.next_id().node_id,\n+                                    id: id.node_id,\n+                                    hir_id: id.hir_id,\n                                 }\n                             }\n                         };\n@@ -2916,11 +2922,13 @@ impl<'a> LoweringContext<'a> {\n                             hir::VisibilityKind::Public => hir::VisibilityKind::Public,\n                             hir::VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n                             hir::VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n-                            hir::VisibilityKind::Restricted { ref path, id: _ } => {\n+                            hir::VisibilityKind::Restricted { ref path, id: _, hir_id: _ } => {\n+                                let id = this.next_id();\n                                 hir::VisibilityKind::Restricted {\n                                     path: path.clone(),\n                                     // We are allocating a new NodeId here\n-                                    id: this.next_id().node_id,\n+                                    id: id.node_id,\n+                                    hir_id: id.hir_id,\n                                 }\n                             }\n                         };\n@@ -4350,13 +4358,17 @@ impl<'a> LoweringContext<'a> {\n         let node = match v.node {\n             VisibilityKind::Public => hir::VisibilityKind::Public,\n             VisibilityKind::Crate(sugar) => hir::VisibilityKind::Crate(sugar),\n-            VisibilityKind::Restricted { ref path, id } => hir::VisibilityKind::Restricted {\n-                path: P(self.lower_path(id, path, ParamMode::Explicit)),\n-                id: if let Some(owner) = explicit_owner {\n-                    self.lower_node_id_with_owner(id, owner).node_id\n+            VisibilityKind::Restricted { ref path, id } => {\n+                let lowered_id = if let Some(owner) = explicit_owner {\n+                    self.lower_node_id_with_owner(id, owner)\n                 } else {\n-                    self.lower_node_id(id).node_id\n-                },\n+                    self.lower_node_id(id)\n+                };\n+                hir::VisibilityKind::Restricted {\n+                    path: P(self.lower_path(id, path, ParamMode::Explicit)),\n+                    id: lowered_id.node_id,\n+                    hir_id: lowered_id.hir_id,\n+                }\n             },\n             VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n         };\n@@ -4675,6 +4687,7 @@ impl<'a> LoweringContext<'a> {\n                         trait_ref: hir::TraitRef {\n                             path: path.and_then(|path| path),\n                             ref_id: id.node_id,\n+                            hir_ref_id: id.hir_id,\n                         },\n                         span,\n                     };"}, {"sha": "0003790e6d552cfc066ed946c8789206b4f1f8c5", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "patch": "@@ -1912,6 +1912,7 @@ pub enum UseKind {\n pub struct TraitRef {\n     pub path: Path,\n     pub ref_id: NodeId,\n+    pub hir_ref_id: HirId,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n@@ -1931,7 +1932,7 @@ pub type Visibility = Spanned<VisibilityKind>;\n pub enum VisibilityKind {\n     Public,\n     Crate(CrateSugar),\n-    Restricted { path: P<Path>, id: NodeId },\n+    Restricted { path: P<Path>, id: NodeId, hir_id: HirId },\n     Inherited,\n }\n "}, {"sha": "53bd7106e9680f4f0dae141f5e2df2ca63ae62e3", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "patch": "@@ -360,6 +360,7 @@ impl_stable_hash_for!(enum hir::FunctionRetTy {\n impl_stable_hash_for!(struct hir::TraitRef {\n     // Don't hash the ref_id. It is tracked via the thing it is used to access\n     ref_id -> _,\n+    hir_ref_id -> _,\n     path,\n });\n \n@@ -723,9 +724,10 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::VisibilityKind {\n             hir::VisibilityKind::Crate(sugar) => {\n                 sugar.hash_stable(hcx, hasher);\n             }\n-            hir::VisibilityKind::Restricted { ref path, id } => {\n+            hir::VisibilityKind::Restricted { ref path, id, hir_id } => {\n                 hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n                     id.hash_stable(hcx, hasher);\n+                    hir_id.hash_stable(hcx, hasher);\n                 });\n                 path.hash_stable(hcx, hasher);\n             }"}, {"sha": "315ed38ad07703fc14566a3efe808490d6253826", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "patch": "@@ -869,7 +869,7 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n         hir_visit::walk_lifetime(self, lt);\n     }\n \n-    fn visit_path(&mut self, p: &'tcx hir::Path, id: ast::NodeId) {\n+    fn visit_path(&mut self, p: &'tcx hir::Path, id: hir::HirId) {\n         run_lints!(self, check_path, p, id);\n         hir_visit::walk_path(self, p);\n     }"}, {"sha": "231a70f873fdc833bb9f2a1163063f28db59e7de", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "patch": "@@ -242,7 +242,7 @@ macro_rules! late_lint_methods {\n             fn check_variant(a: &$hir hir::Variant, b: &$hir hir::Generics);\n             fn check_variant_post(a: &$hir hir::Variant, b: &$hir hir::Generics);\n             fn check_lifetime(a: &$hir hir::Lifetime);\n-            fn check_path(a: &$hir hir::Path, b: ast::NodeId);\n+            fn check_path(a: &$hir hir::Path, b: hir::HirId);\n             fn check_attribute(a: &$hir ast::Attribute);\n \n             /// Called when entering a syntax node that can have lint attributes such"}, {"sha": "d0e3ae2b9fc465254b731ae70cbe57c5d6a4457b", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "patch": "@@ -279,7 +279,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n         self.in_pat = false;\n     }\n \n-    fn visit_path(&mut self, path: &'tcx hir::Path, _: ast::NodeId) {\n+    fn visit_path(&mut self, path: &'tcx hir::Path, _: hir::HirId) {\n         self.handle_definition(path.def);\n         intravisit::walk_path(self, path);\n     }"}, {"sha": "f2d39a905ee5f496d4a33e1a4d2e1413015d6632", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "patch": "@@ -903,7 +903,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         self.resolve_lifetime_ref(lifetime_ref);\n     }\n \n-    fn visit_path(&mut self, path: &'tcx hir::Path, _: ast::NodeId) {\n+    fn visit_path(&mut self, path: &'tcx hir::Path, _: hir::HirId) {\n         for (i, segment) in path.segments.iter().enumerate() {\n             let depth = path.segments.len() - i - 1;\n             if let Some(ref args) = segment.args {"}, {"sha": "8af8d463b112bbfeb9e978a8cc71f5efea7f30d0", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "patch": "@@ -780,7 +780,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         intravisit::walk_item(self, item);\n     }\n \n-    fn visit_path(&mut self, path: &'tcx hir::Path, id: ast::NodeId) {\n+    fn visit_path(&mut self, path: &'tcx hir::Path, id: hir::HirId) {\n+        let id = self.tcx.hir.hir_to_node_id(id);\n         match path.def {\n             Def::Local(..) | Def::Upvar(..) |\n             Def::PrimTy(..) | Def::SelfTy(..) | Def::Err => {}"}, {"sha": "3a449b6a68e4c260f8c7dc3d13b16e174d2573a1", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "patch": "@@ -1526,7 +1526,6 @@ impl TypeAliasBounds {\n \n         // We use a HIR visitor to walk the type.\n         use rustc::hir::intravisit::{self, Visitor};\n-        use syntax::ast::NodeId;\n         struct WalkAssocTypes<'a, 'db> where 'db: 'a {\n             err: &'a mut DiagnosticBuilder<'db>\n         }\n@@ -1536,7 +1535,7 @@ impl TypeAliasBounds {\n                 intravisit::NestedVisitorMap::None\n             }\n \n-            fn visit_qpath(&mut self, qpath: &'v hir::QPath, id: NodeId, span: Span) {\n+            fn visit_qpath(&mut self, qpath: &'v hir::QPath, id: hir::HirId, span: Span) {\n                 if TypeAliasBounds::is_type_variable_assoc(qpath) {\n                     self.err.span_help(span,\n                         \"use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to \\"}, {"sha": "3c5a0590c20235ef59de29b070c03a2d8e597a8e", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "patch": "@@ -224,11 +224,11 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         self.record(\"Lifetime\", Id::Node(lifetime.id), lifetime);\n         hir_visit::walk_lifetime(self, lifetime)\n     }\n-    fn visit_qpath(&mut self, qpath: &'v hir::QPath, id: NodeId, span: Span) {\n+    fn visit_qpath(&mut self, qpath: &'v hir::QPath, id: hir::HirId, span: Span) {\n         self.record(\"QPath\", Id::None, qpath);\n         hir_visit::walk_qpath(self, qpath, id, span)\n     }\n-    fn visit_path(&mut self, path: &'v hir::Path, _id: NodeId) {\n+    fn visit_path(&mut self, path: &'v hir::Path, _id: hir::HirId) {\n         self.record(\"Path\", Id::None, path);\n         hir_visit::walk_path(self, path)\n     }"}, {"sha": "b6dd0e8b9b21db9d2d440199675bb736ad46c216", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "patch": "@@ -815,16 +815,15 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n     // we prohibit access to private statics from other crates, this allows to give\n     // more code internal visibility at link time. (Access to private functions\n     // is already prohibited by type privacy for function types.)\n-    fn visit_qpath(&mut self, qpath: &'tcx hir::QPath, id: ast::NodeId, span: Span) {\n+    fn visit_qpath(&mut self, qpath: &'tcx hir::QPath, id: hir::HirId, span: Span) {\n         let def = match *qpath {\n             hir::QPath::Resolved(_, ref path) => match path.def {\n                 Def::Method(..) | Def::AssociatedConst(..) |\n                 Def::AssociatedTy(..) | Def::Static(..) => Some(path.def),\n                 _ => None,\n             }\n             hir::QPath::TypeRelative(..) => {\n-                let hir_id = self.tcx.hir.node_to_hir_id(id);\n-                self.tables.type_dependent_defs().get(hir_id).cloned()\n+                self.tables.type_dependent_defs().get(id).cloned()\n             }\n         };\n         if let Some(def) = def {"}, {"sha": "5fd0b88870736c0d82d0a265458d1a0d7deec4ad", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "patch": "@@ -126,6 +126,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n             let trait_ = hir::TraitRef {\n                 path: get_path_for_type(self.cx.tcx, trait_def_id, hir::def::Def::Trait),\n                 ref_id: ast::DUMMY_NODE_ID,\n+                hir_ref_id: hir::DUMMY_HIR_ID,\n             };\n \n             let polarity;"}, {"sha": "83e0827340dafbb3e4fa9fe5a1af05d1c65be175", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=3baec3cdd7a34cc3e6b21f1b22a4f80cbaee829e", "patch": "@@ -119,6 +119,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> BlanketImplFinder <'a, 'tcx, 'rcx, 'cstore> {\n                                                         trait_def_id,\n                                                         hir::def::Def::Trait),\n                                 ref_id: ast::DUMMY_NODE_ID,\n+                                hir_ref_id: hir::DUMMY_HIR_ID,\n                             };\n                             let provided_trait_methods =\n                                 infcx.tcx.provided_trait_methods(trait_def_id)"}]}