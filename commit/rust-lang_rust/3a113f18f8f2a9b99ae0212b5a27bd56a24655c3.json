{"sha": "3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMTEzZjE4ZjhmMmE5Yjk5YWUwMjEyYjVhMjdiZDU2YTI0NjU1YzM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-21T01:01:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-21T01:01:34Z"}, "message": "Rollup merge of #82707 - BoxyUwU:errooaaar, r=oli-obk\n\nconst_evaluatable_checked: Stop eagerly erroring in `is_const_evaluatable`\n\nFixes #82279\n\nWe don't want to be emitting errors inside of is_const_evaluatable because we may call this during selection where it should be able to fail silently\n\nThere were two errors being emitted in `is_const_evaluatable`. The one causing the compile error in #82279 was inside the match arm for `FailureKind::MentionsParam` but I moved the other error being emitted too since it made things cleaner imo\n\nThe `NotConstEvaluatable` enum \\*should\\* have a fourth variant for when we fail to evaluate a concrete const, e.g. `0 - 1` but that cant happen until #81339\n\ncc `@oli-obk` `@lcnr`\nr? `@nikomatsakis`", "tree": {"sha": "f75e0d066cefb294363bee1bf1d53542b4904eb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f75e0d066cefb294363bee1bf1d53542b4904eb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVprvCRBK7hj4Ov3rIwAAdHIIAJ7eirwNkiiGuW49HGq64Vu9\nIkGsL2rT6Z3vVlK1uuL9V59x011At3aqW/WXMVkLClOQ4Ieb7q7ub0Lf9q7EjNi+\nLJImBaO8gwW5wJDjC3Gaihbz+Sa/e3hCHTkk9LbDKXLoMhwOGizHPU+cggrf9Nqt\nRVO9g2kokX6hxt0phWbK818rN54rmZv6+9XDd8l+qe+nDadjg2WwNFJeYXjGGECj\nQNbDXlni26jTku3oB/5wYb7RpoRp7NT/E3RMw5OY0hB4eat9VT8lXtcqA66++g3O\nos0bOPKG7nWcd3RFAubjHOug914esXmSDnnV5RY+LoBndaUylPdHcSqtDpj4Y8w=\n=ioRh\n-----END PGP SIGNATURE-----\n", "payload": "tree f75e0d066cefb294363bee1bf1d53542b4904eb7\nparent 61edfd591cedff66fca639c02f66984f6271e5a6\nparent 8e353bb8eabc761d8fd800a985a859dd635adaa2\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616288494 +0100\ncommitter GitHub <noreply@github.com> 1616288494 +0100\n\nRollup merge of #82707 - BoxyUwU:errooaaar, r=oli-obk\n\nconst_evaluatable_checked: Stop eagerly erroring in `is_const_evaluatable`\n\nFixes #82279\n\nWe don't want to be emitting errors inside of is_const_evaluatable because we may call this during selection where it should be able to fail silently\n\nThere were two errors being emitted in `is_const_evaluatable`. The one causing the compile error in #82279 was inside the match arm for `FailureKind::MentionsParam` but I moved the other error being emitted too since it made things cleaner imo\n\nThe `NotConstEvaluatable` enum \\*should\\* have a fourth variant for when we fail to evaluate a concrete const, e.g. `0 - 1` but that cant happen until #81339\n\ncc `@oli-obk` `@lcnr`\nr? `@nikomatsakis`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "html_url": "https://github.com/rust-lang/rust/commit/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61edfd591cedff66fca639c02f66984f6271e5a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/61edfd591cedff66fca639c02f66984f6271e5a6", "html_url": "https://github.com/rust-lang/rust/commit/61edfd591cedff66fca639c02f66984f6271e5a6"}, {"sha": "8e353bb8eabc761d8fd800a985a859dd635adaa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e353bb8eabc761d8fd800a985a859dd635adaa2", "html_url": "https://github.com/rust-lang/rust/commit/8e353bb8eabc761d8fd800a985a859dd635adaa2"}], "stats": {"total": 250, "additions": 141, "deletions": 109}, "files": [{"sha": "776a777b1bdb5844c982a84be2dd39e94dbc5a0a", "filename": "compiler/rustc_middle/src/mir/abstract_const.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fabstract_const.rs?ref=3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "patch": "@@ -18,3 +18,20 @@ pub enum Node<'tcx> {\n     UnaryOp(mir::UnOp, NodeId),\n     FunctionCall(NodeId, &'tcx [NodeId]),\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, TyEncodable, TyDecodable)]\n+pub enum NotConstEvaluatable {\n+    Error(rustc_errors::ErrorReported),\n+    MentionsInfer,\n+    MentionsParam,\n+}\n+\n+impl From<rustc_errors::ErrorReported> for NotConstEvaluatable {\n+    fn from(e: rustc_errors::ErrorReported) -> NotConstEvaluatable {\n+        NotConstEvaluatable::Error(e)\n+    }\n+}\n+\n+TrivialTypeFoldableAndLiftImpls! {\n+    NotConstEvaluatable,\n+}"}, {"sha": "90b82020551c27257c89c770593ff2e4edbc89cb", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "patch": "@@ -9,7 +9,7 @@ pub mod specialization_graph;\n mod structural_impls;\n \n use crate::infer::canonical::Canonical;\n-use crate::mir::interpret::ErrorHandled;\n+use crate::mir::abstract_const::NotConstEvaluatable;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, AdtKind, Ty, TyCtxt};\n \n@@ -398,7 +398,7 @@ pub enum SelectionError<'tcx> {\n         ty::error::TypeError<'tcx>,\n     ),\n     TraitNotObjectSafe(DefId),\n-    ConstEvalFailure(ErrorHandled),\n+    NotConstEvaluatable(NotConstEvaluatable),\n     Overflow,\n }\n "}, {"sha": "229ba86b25aa91a0f06528d268422f137fa894f2", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 13, "deletions": 50, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n-use rustc_middle::mir::abstract_const::{Node, NodeId};\n+use rustc_middle::mir::abstract_const::{Node, NodeId, NotConstEvaluatable};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::mir::{self, Rvalue, StatementKind, TerminatorKind};\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n@@ -32,7 +32,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     substs: SubstsRef<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     span: Span,\n-) -> Result<(), ErrorHandled> {\n+) -> Result<(), NotConstEvaluatable> {\n     debug!(\"is_const_evaluatable({:?}, {:?})\", def, substs);\n     if infcx.tcx.features().const_evaluatable_checked {\n         let tcx = infcx.tcx;\n@@ -103,29 +103,10 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n                 match failure_kind {\n                     FailureKind::MentionsInfer => {\n-                        return Err(ErrorHandled::TooGeneric);\n+                        return Err(NotConstEvaluatable::MentionsInfer);\n                     }\n                     FailureKind::MentionsParam => {\n-                        // FIXME(const_evaluatable_checked): Better error message.\n-                        let mut err =\n-                            infcx.tcx.sess.struct_span_err(span, \"unconstrained generic constant\");\n-                        let const_span = tcx.def_span(def.did);\n-                        // FIXME(const_evaluatable_checked): Update this suggestion once\n-                        // explicit const evaluatable bounds are implemented.\n-                        if let Ok(snippet) = infcx.tcx.sess.source_map().span_to_snippet(const_span)\n-                        {\n-                            err.span_help(\n-                                tcx.def_span(def.did),\n-                                &format!(\"try adding a `where` bound using this expression: `where [u8; {}]: Sized`\", snippet),\n-                            );\n-                        } else {\n-                            err.span_help(\n-                                const_span,\n-                                \"consider adding a `where` bound for this expression\",\n-                            );\n-                        }\n-                        err.emit();\n-                        return Err(ErrorHandled::Reported(ErrorReported));\n+                        return Err(NotConstEvaluatable::MentionsParam);\n                     }\n                     FailureKind::Concrete => {\n                         // Dealt with below by the same code which handles this\n@@ -180,34 +161,16 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n     debug!(?concrete, \"is_const_evaluatable\");\n     match concrete {\n-        Err(ErrorHandled::TooGeneric) if !substs.has_infer_types_or_consts() => {\n-            // FIXME(const_evaluatable_checked): We really should move\n-            // emitting this error message to fulfill instead. For\n-            // now this is easier.\n-            //\n-            // This is not a problem without `const_evaluatable_checked` as\n-            // all `ConstEvaluatable` predicates have to be fulfilled for compilation\n-            // to succeed.\n-            //\n-            // @lcnr: We already emit an error for things like\n-            // `fn test<const N: usize>() -> [0 - N]` eagerly here,\n-            // so until we fix this I don't really care.\n-\n-            let mut err = infcx\n-                .tcx\n-                .sess\n-                .struct_span_err(span, \"constant expression depends on a generic parameter\");\n-            // FIXME(const_generics): we should suggest to the user how they can resolve this\n-            // issue. However, this is currently not actually possible\n-            // (see https://github.com/rust-lang/rust/issues/66962#issuecomment-575907083).\n-            //\n-            // Note that with `feature(const_evaluatable_checked)` this case should not\n-            // be reachable.\n-            err.note(\"this may fail depending on what value the parameter takes\");\n-            err.emit();\n-            Err(ErrorHandled::Reported(ErrorReported))\n+        Err(ErrorHandled::TooGeneric) => Err(match substs.has_infer_types_or_consts() {\n+            true => NotConstEvaluatable::MentionsInfer,\n+            false => NotConstEvaluatable::MentionsParam,\n+        }),\n+        Err(ErrorHandled::Linted) => {\n+            infcx.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n+            Err(NotConstEvaluatable::Error(ErrorReported))\n         }\n-        c => c.map(drop),\n+        Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n+        Ok(_) => Ok(()),\n     }\n }\n "}, {"sha": "060e4e36dfefc5971b796d9233dc669d540de85d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 51, "deletions": 16, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "patch": "@@ -2,10 +2,10 @@ pub mod on_unimplemented;\n pub mod suggestions;\n \n use super::{\n-    ConstEvalFailure, EvaluationResult, FulfillmentError, FulfillmentErrorCode,\n-    MismatchedProjectionTypes, Obligation, ObligationCause, ObligationCauseCode,\n-    OnUnimplementedDirective, OnUnimplementedNote, OutputTypeParameterMismatch, Overflow,\n-    PredicateObligation, SelectionContext, SelectionError, TraitNotObjectSafe,\n+    EvaluationResult, FulfillmentError, FulfillmentErrorCode, MismatchedProjectionTypes,\n+    Obligation, ObligationCause, ObligationCauseCode, OnUnimplementedDirective,\n+    OnUnimplementedNote, OutputTypeParameterMismatch, Overflow, PredicateObligation,\n+    SelectionContext, SelectionError, TraitNotObjectSafe,\n };\n \n use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n@@ -17,7 +17,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::Node;\n-use rustc_middle::mir::interpret::ErrorHandled;\n+use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::{\n@@ -738,24 +738,59 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let violations = self.tcx.object_safety_violations(did);\n                 report_object_safety_error(self.tcx, span, did, violations)\n             }\n-            ConstEvalFailure(ErrorHandled::TooGeneric) => {\n-                bug!(\"too generic should have been handled in `is_const_evaluatable`\");\n+\n+            SelectionError::NotConstEvaluatable(NotConstEvaluatable::MentionsInfer) => {\n+                bug!(\n+                    \"MentionsInfer should have been handled in `traits/fulfill.rs` or `traits/select/mod.rs`\"\n+                )\n+            }\n+            SelectionError::NotConstEvaluatable(NotConstEvaluatable::MentionsParam) => {\n+                if !self.tcx.features().const_evaluatable_checked {\n+                    let mut err = self.tcx.sess.struct_span_err(\n+                        span,\n+                        \"constant expression depends on a generic parameter\",\n+                    );\n+                    // FIXME(const_generics): we should suggest to the user how they can resolve this\n+                    // issue. However, this is currently not actually possible\n+                    // (see https://github.com/rust-lang/rust/issues/66962#issuecomment-575907083).\n+                    //\n+                    // Note that with `feature(const_evaluatable_checked)` this case should not\n+                    // be reachable.\n+                    err.note(\"this may fail depending on what value the parameter takes\");\n+                    err.emit();\n+                    return;\n+                }\n+\n+                match obligation.predicate.kind().skip_binder() {\n+                    ty::PredicateKind::ConstEvaluatable(def, _) => {\n+                        let mut err =\n+                            self.tcx.sess.struct_span_err(span, \"unconstrained generic constant\");\n+                        let const_span = self.tcx.def_span(def.did);\n+                        match self.tcx.sess.source_map().span_to_snippet(const_span) {\n+                            Ok(snippet) => err.help(&format!(\n+                                \"try adding a `where` bound using this expression: `where [(); {}]:`\",\n+                                snippet\n+                            )),\n+                            _ => err.help(\"consider adding a `where` bound using this expression\"),\n+                        };\n+                        err\n+                    }\n+                    _ => {\n+                        span_bug!(\n+                            span,\n+                            \"unexpected non-ConstEvaluatable predicate, this should not be reachable\"\n+                        )\n+                    }\n+                }\n             }\n+\n             // Already reported in the query.\n-            ConstEvalFailure(ErrorHandled::Reported(ErrorReported)) => {\n+            SelectionError::NotConstEvaluatable(NotConstEvaluatable::Error(ErrorReported)) => {\n                 // FIXME(eddyb) remove this once `ErrorReported` becomes a proof token.\n                 self.tcx.sess.delay_span_bug(span, \"`ErrorReported` without an error\");\n                 return;\n             }\n \n-            // Already reported in the query, but only as a lint.\n-            // This shouldn't actually happen for constants used in types, modulo\n-            // bugs. The `delay_span_bug` here ensures it won't be ignored.\n-            ConstEvalFailure(ErrorHandled::Linted) => {\n-                self.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n-                return;\n-            }\n-\n             Overflow => {\n                 bug!(\"overflow should be handled before the `report_selection_error` path\");\n             }"}, {"sha": "1c403cc02cdaacfbfc8eda90415eac3bc634ddcb", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "patch": "@@ -3,7 +3,8 @@ use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n use rustc_errors::ErrorReported;\n-use rustc_infer::traits::{TraitEngine, TraitEngineExt as _, TraitObligation};\n+use rustc_infer::traits::{SelectionError, TraitEngine, TraitEngineExt as _, TraitObligation};\n+use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::subst::SubstsRef;\n@@ -18,7 +19,7 @@ use super::wf;\n use super::CodeAmbiguity;\n use super::CodeProjectionError;\n use super::CodeSelectionError;\n-use super::{ConstEvalFailure, Unimplemented};\n+use super::Unimplemented;\n use super::{FulfillmentError, FulfillmentErrorCode};\n use super::{ObligationCause, PredicateObligation};\n \n@@ -498,14 +499,19 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                         obligation.cause.span,\n                     ) {\n                         Ok(()) => ProcessResult::Changed(vec![]),\n-                        Err(ErrorHandled::TooGeneric) => {\n+                        Err(NotConstEvaluatable::MentionsInfer) => {\n                             pending_obligation.stalled_on.clear();\n                             pending_obligation.stalled_on.extend(\n                                 substs.iter().filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n                             );\n                             ProcessResult::Unchanged\n                         }\n-                        Err(e) => ProcessResult::Error(CodeSelectionError(ConstEvalFailure(e))),\n+                        Err(\n+                            e @ NotConstEvaluatable::MentionsParam\n+                            | e @ NotConstEvaluatable::Error(_),\n+                        ) => ProcessResult::Error(CodeSelectionError(\n+                            SelectionError::NotConstEvaluatable(e),\n+                        )),\n                     }\n                 }\n \n@@ -576,11 +582,11 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                             }\n                         }\n                         (Err(ErrorHandled::Reported(ErrorReported)), _)\n-                        | (_, Err(ErrorHandled::Reported(ErrorReported))) => {\n-                            ProcessResult::Error(CodeSelectionError(ConstEvalFailure(\n-                                ErrorHandled::Reported(ErrorReported),\n-                            )))\n-                        }\n+                        | (_, Err(ErrorHandled::Reported(ErrorReported))) => ProcessResult::Error(\n+                            CodeSelectionError(SelectionError::NotConstEvaluatable(\n+                                NotConstEvaluatable::Error(ErrorReported),\n+                            )),\n+                        ),\n                         (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => {\n                             span_bug!(\n                                 obligation.cause.span(self.selcx.tcx()),"}, {"sha": "7a954505741337cb375ff655557e16231efd9b89", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "patch": "@@ -34,6 +34,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::Constness;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n+use rustc_middle::mir::abstract_const::NotConstEvaluatable;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::fast_reject;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n@@ -547,7 +548,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         obligation.cause.span,\n                     ) {\n                         Ok(()) => Ok(EvaluatedToOk),\n-                        Err(ErrorHandled::TooGeneric) => Ok(EvaluatedToAmbig),\n+                        Err(NotConstEvaluatable::MentionsInfer) => Ok(EvaluatedToAmbig),\n+                        Err(NotConstEvaluatable::MentionsParam) => Ok(EvaluatedToErr),\n                         Err(_) => Ok(EvaluatedToErr),\n                     }\n                 }"}, {"sha": "84b2665d5bfeddb5d3f7183686267c0efae32ce6", "filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate_predicate.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr?ref=3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "patch": "@@ -3,48 +3,52 @@ error: unconstrained generic constant\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try adding a `where` bound using this expression: `where [u8; std::mem::size_of::<T>() - 1]: Sized`\n-  --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n+   | \n+  ::: $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ---------------------------- required by this bound in `test1`\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n \n error: unconstrained generic constant\n   --> $DIR/cross_crate_predicate.rs:7:13\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try adding a `where` bound using this expression: `where [u8; std::mem::size_of::<T>() - 1]: Sized`\n-  --> $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n+   | \n+  ::: $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           ---------------------------- required by this bound in `test1`\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n \n error: unconstrained generic constant\n   --> $DIR/cross_crate_predicate.rs:7:13\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try adding a `where` bound using this expression: `where [u8; std::mem::size_of::<T>() - 1]: Sized`\n-  --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n+   | \n+  ::: $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ---------------------------- required by this bound in `test1`\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n \n error: unconstrained generic constant\n   --> $DIR/cross_crate_predicate.rs:7:13\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try adding a `where` bound using this expression: `where [u8; std::mem::size_of::<T>() - 1]: Sized`\n-  --> $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n+   | \n+  ::: $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           ---------------------------- required by this bound in `test1`\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7c11a47b2f0f9ca983373428de6f9ad032f45f60", "filename": "src/test/ui/const-generics/const_evaluatable_checked/different-fn.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr?ref=3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "patch": "@@ -4,11 +4,7 @@ error: unconstrained generic constant\n LL |     [0; size_of::<Foo<T>>()]\n    |         ^^^^^^^^^^^^^^^^^^^\n    |\n-help: try adding a `where` bound using this expression: `where [u8; size_of::<Foo<T>>()]: Sized`\n-  --> $DIR/different-fn.rs:10:9\n-   |\n-LL |     [0; size_of::<Foo<T>>()]\n-   |         ^^^^^^^^^^^^^^^^^^^\n+   = help: try adding a `where` bound using this expression: `where [(); size_of::<Foo<T>>()]:`\n \n error: aborting due to previous error\n "}, {"sha": "92a410afcb1a97c4a3fecb1b4f142c2d4e9bb30e", "filename": "src/test/ui/const-generics/const_evaluatable_checked/dont-eagerly-error-in-is-const-evaluatable.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdont-eagerly-error-in-is-const-evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdont-eagerly-error-in-is-const-evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdont-eagerly-error-in-is-const-evaluatable.rs?ref=3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![feature(const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+// This test is a repro for #82279. It checks that we don't error\n+// when calling is_const_evaluatable on `std::mem::size_of::<T>()`\n+// when looking for candidates that may prove `T: Foo` in `foo`\n+\n+trait Foo {}\n+\n+#[allow(dead_code)]\n+fn foo<T: Foo>() {}\n+\n+impl<T> Foo for T where [(); std::mem::size_of::<T>()]:  {}\n+\n+fn main() {}"}, {"sha": "7b41e39b7d742d96c3226abe5ebec8bfd617e917", "filename": "src/test/ui/const_evaluatable/needs_where_clause.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr?ref=3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "patch": "@@ -4,11 +4,7 @@ error: unconstrained generic constant\n LL |   b: [f32; complex_maths::<T>(N)],\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: try adding a `where` bound using this expression: `where [u8; complex_maths::<T>(N)]: Sized`\n-  --> $DIR/needs_where_clause.rs:11:12\n-   |\n-LL |   b: [f32; complex_maths::<T>(N)],\n-   |            ^^^^^^^^^^^^^^^^^^^^^\n+   = help: try adding a `where` bound using this expression: `where [(); complex_maths::<T>(N)]:`\n \n error: aborting due to previous error\n "}, {"sha": "3e5c2f5cad1dfff3a3c08fc5bea2310d7b7618fb", "filename": "src/test/ui/const_evaluatable/no_where_clause.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a113f18f8f2a9b99ae0212b5a27bd56a24655c3/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr?ref=3a113f18f8f2a9b99ae0212b5a27bd56a24655c3", "patch": "@@ -4,11 +4,7 @@ error: unconstrained generic constant\n LL |   b: [f32; complex_maths(N)],\n    |      ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: try adding a `where` bound using this expression: `where [u8; complex_maths(N)]: Sized`\n-  --> $DIR/no_where_clause.rs:10:12\n-   |\n-LL |   b: [f32; complex_maths(N)],\n-   |            ^^^^^^^^^^^^^^^^\n+   = help: try adding a `where` bound using this expression: `where [(); complex_maths(N)]:`\n \n error: aborting due to previous error\n "}]}