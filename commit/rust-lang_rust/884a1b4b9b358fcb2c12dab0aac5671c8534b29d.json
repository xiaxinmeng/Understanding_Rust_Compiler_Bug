{"sha": "884a1b4b9b358fcb2c12dab0aac5671c8534b29d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NGExYjRiOWIzNThmY2IyYzEyZGFiMGFhYzU2NzFjODUzNGIyOWQ=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-09-09T20:42:57Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-09-09T20:42:57Z"}, "message": "Fix anchor links\n\n#safety -> self#safety", "tree": {"sha": "ec00eaec40d493e1b88578cdaea0711debacdafe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec00eaec40d493e1b88578cdaea0711debacdafe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/884a1b4b9b358fcb2c12dab0aac5671c8534b29d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/884a1b4b9b358fcb2c12dab0aac5671c8534b29d", "html_url": "https://github.com/rust-lang/rust/commit/884a1b4b9b358fcb2c12dab0aac5671c8534b29d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/884a1b4b9b358fcb2c12dab0aac5671c8534b29d/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d24026bb6dbf33f022b9dd1daffeeab2c9f7d117", "url": "https://api.github.com/repos/rust-lang/rust/commits/d24026bb6dbf33f022b9dd1daffeeab2c9f7d117", "html_url": "https://github.com/rust-lang/rust/commit/d24026bb6dbf33f022b9dd1daffeeab2c9f7d117"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "92c4f2ccfe8a00df2876e82f121231b22f19e35b", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/884a1b4b9b358fcb2c12dab0aac5671c8534b29d/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/884a1b4b9b358fcb2c12dab0aac5671c8534b29d/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=884a1b4b9b358fcb2c12dab0aac5671c8534b29d", "patch": "@@ -134,7 +134,7 @@ mod mut_ptr;\n ///\n /// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n ///\n-/// [valid]: #safety\n+/// [valid]: self#safety\n ///\n /// # Examples\n ///\n@@ -316,7 +316,7 @@ pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n ///\n /// Note that even if `T` has size `0`, the pointers must be non-NULL and properly aligned.\n ///\n-/// [valid]: #safety\n+/// [valid]: self#safety\n ///\n /// # Examples\n ///\n@@ -394,7 +394,7 @@ pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n /// Note that even if the effectively copied size (`count * size_of::<T>()`) is `0`,\n /// the pointers must be non-NULL and properly aligned.\n ///\n-/// [valid]: #safety\n+/// [valid]: self#safety\n ///\n /// # Examples\n ///\n@@ -533,7 +533,7 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n ///\n /// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n ///\n-/// [valid]: #safety\n+/// [valid]: self#safety\n ///\n /// # Examples\n ///\n@@ -668,7 +668,7 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n /// assert_eq!(s, \"bar\");\n /// ```\n ///\n-/// [valid]: #safety\n+/// [valid]: self#safety\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn read<T>(src: *const T) -> T {\n@@ -706,7 +706,7 @@ pub unsafe fn read<T>(src: *const T) -> T {\n /// Note that even if `T` has size `0`, the pointer must be non-NULL.\n ///\n /// [read-ownership]: read#ownership-of-the-returned-value\n-/// [valid]: #safety\n+/// [valid]: self#safety\n ///\n /// ## On `packed` structs\n ///\n@@ -809,7 +809,7 @@ pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n ///\n /// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n ///\n-/// [valid]: #safety\n+/// [valid]: self#safety\n ///\n /// # Examples\n ///\n@@ -898,7 +898,7 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n ///\n /// Note that even if `T` has size `0`, the pointer must be non-NULL.\n ///\n-/// [valid]: #safety\n+/// [valid]: self#safety\n ///\n /// ## On `packed` structs\n ///\n@@ -1010,7 +1010,7 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n ///\n /// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n ///\n-/// [valid]: #safety\n+/// [valid]: self#safety\n /// [read-ownership]: read#ownership-of-the-returned-value\n ///\n /// Just like in C, whether an operation is volatile has no bearing whatsoever\n@@ -1080,7 +1080,7 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n ///\n /// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n ///\n-/// [valid]: #safety\n+/// [valid]: self#safety\n ///\n /// Just like in C, whether an operation is volatile has no bearing whatsoever\n /// on questions involving concurrent access from multiple threads. Volatile"}]}