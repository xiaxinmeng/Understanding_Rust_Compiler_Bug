{"sha": "ece629b1cc4403e1e4f7118534dee8e147a162cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZTYyOWIxY2M0NDAzZTFlNGY3MTE4NTM0ZGVlOGUxNDdhMTYyY2Y=", "commit": {"author": {"name": "Evgenii", "email": "evgeniy@nspcc.ru", "date": "2019-02-04T10:30:43Z"}, "committer": {"name": "Evgenii", "email": "evgeniy@nspcc.ru", "date": "2019-02-04T10:30:43Z"}, "message": "transition to Rust 2018", "tree": {"sha": "e08e06e11aefba31c7fed6639bfb41d02f6482ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e08e06e11aefba31c7fed6639bfb41d02f6482ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ece629b1cc4403e1e4f7118534dee8e147a162cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ece629b1cc4403e1e4f7118534dee8e147a162cf", "html_url": "https://github.com/rust-lang/rust/commit/ece629b1cc4403e1e4f7118534dee8e147a162cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ece629b1cc4403e1e4f7118534dee8e147a162cf/comments", "author": {"login": "fyrchik", "id": 22011053, "node_id": "MDQ6VXNlcjIyMDExMDUz", "avatar_url": "https://avatars.githubusercontent.com/u/22011053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fyrchik", "html_url": "https://github.com/fyrchik", "followers_url": "https://api.github.com/users/fyrchik/followers", "following_url": "https://api.github.com/users/fyrchik/following{/other_user}", "gists_url": "https://api.github.com/users/fyrchik/gists{/gist_id}", "starred_url": "https://api.github.com/users/fyrchik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fyrchik/subscriptions", "organizations_url": "https://api.github.com/users/fyrchik/orgs", "repos_url": "https://api.github.com/users/fyrchik/repos", "events_url": "https://api.github.com/users/fyrchik/events{/privacy}", "received_events_url": "https://api.github.com/users/fyrchik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fyrchik", "id": 22011053, "node_id": "MDQ6VXNlcjIyMDExMDUz", "avatar_url": "https://avatars.githubusercontent.com/u/22011053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fyrchik", "html_url": "https://github.com/fyrchik", "followers_url": "https://api.github.com/users/fyrchik/followers", "following_url": "https://api.github.com/users/fyrchik/following{/other_user}", "gists_url": "https://api.github.com/users/fyrchik/gists{/gist_id}", "starred_url": "https://api.github.com/users/fyrchik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fyrchik/subscriptions", "organizations_url": "https://api.github.com/users/fyrchik/orgs", "repos_url": "https://api.github.com/users/fyrchik/repos", "events_url": "https://api.github.com/users/fyrchik/events{/privacy}", "received_events_url": "https://api.github.com/users/fyrchik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfcfaf17434b33a4f93f36b44c8eea8b79445ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfcfaf17434b33a4f93f36b44c8eea8b79445ffb", "html_url": "https://github.com/rust-lang/rust/commit/bfcfaf17434b33a4f93f36b44c8eea8b79445ffb"}], "stats": {"total": 607, "additions": 311, "deletions": 296}, "files": [{"sha": "57422945adea6d2ee8588d0e75fb0a668d5db154", "filename": "build.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -35,9 +35,7 @@ fn main() {\n // (git not installed or if this is not a git repository) just return an empty string.\n fn commit_info() -> String {\n     match (channel(), commit_hash(), commit_date()) {\n-        (channel, Some(hash), Some(date)) => {\n-            format!(\"{} ({} {})\", channel, hash.trim_end(), date)\n-        }\n+        (channel, Some(hash), Some(date)) => format!(\"{} ({} {})\", channel, hash.trim_end(), date),\n         _ => String::new(),\n     }\n }"}, {"sha": "465c17fe2a02f08bef815a0c0e432712a679688f", "filename": "src/attr.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -10,20 +10,20 @@\n \n //! Format attributes and meta items.\n \n-use comment::{contains_comment, rewrite_doc_comment, CommentStyle};\n-use config::lists::*;\n-use config::IndentStyle;\n-use expr::rewrite_literal;\n-use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n-use overflow;\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::Shape;\n-use types::{rewrite_path, PathContext};\n-use utils::{count_newlines, mk_sp};\n-\n use syntax::ast;\n use syntax::source_map::{BytePos, Span, DUMMY_SP};\n \n+use crate::comment::{contains_comment, rewrite_doc_comment, CommentStyle};\n+use crate::config::lists::*;\n+use crate::config::IndentStyle;\n+use crate::expr::rewrite_literal;\n+use crate::lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n+use crate::overflow;\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::Shape;\n+use crate::types::{rewrite_path, PathContext};\n+use crate::utils::{count_newlines, mk_sp};\n+\n /// Returns attributes on the given statement.\n pub fn get_attrs_from_stmt(stmt: &ast::Stmt) -> &[ast::Attribute] {\n     match stmt.node {\n@@ -216,7 +216,7 @@ impl Rewrite for ast::MetaItem {\n             }\n             ast::MetaItemKind::List(ref list) => {\n                 let path = rewrite_path(context, PathContext::Type, None, &self.ident, shape)?;\n-                let has_trailing_comma = ::expr::span_ends_with_comma(context, self.span);\n+                let has_trailing_comma = crate::expr::span_ends_with_comma(context, self.span);\n                 overflow::rewrite_with_parens(\n                     context,\n                     &path,\n@@ -383,7 +383,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n                 if let Some(missing_span) = missing_span {\n                     let snippet = context.snippet(missing_span);\n                     let (mla, mlb) = has_newlines_before_after_comment(snippet);\n-                    let comment = ::comment::recover_missing_comment_in_span(\n+                    let comment = crate::comment::recover_missing_comment_in_span(\n                         missing_span,\n                         shape.with_max_width(context.config),\n                         context,\n@@ -418,7 +418,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n                     .get(derives.len())\n                     .map(|next| mk_sp(attrs[derives.len() - 1].span.hi(), next.span.lo()));\n                 if let Some(missing_span) = missing_span {\n-                    let comment = ::comment::recover_missing_comment_in_span(\n+                    let comment = crate::comment::recover_missing_comment_in_span(\n                         missing_span,\n                         shape.with_max_width(context.config),\n                         context,\n@@ -451,7 +451,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n                 .get(1)\n                 .map(|next| mk_sp(attrs[0].span.hi(), next.span.lo()));\n             if let Some(missing_span) = missing_span {\n-                let comment = ::comment::recover_missing_comment_in_span(\n+                let comment = crate::comment::recover_missing_comment_in_span(\n                     missing_span,\n                     shape.with_max_width(context.config),\n                     context,"}, {"sha": "53e95e8b5b608c31cfe70926ba38f8ce5a195398", "filename": "src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -24,7 +24,7 @@ use failure::err_msg;\n \n use getopts::{Matches, Options};\n \n-use rustfmt::{\n+use crate::rustfmt::{\n     load_config, CliOptions, Color, Config, Edition, EmitMode, ErrorKind, FileLines, FileName,\n     Input, Session, Verbosity,\n };"}, {"sha": "9ea37a3684f14014bc3bc4224e1faf96385e6e0f", "filename": "src/chains.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -65,25 +65,25 @@\n //!            .qux\n //! ```\n \n-use comment::{rewrite_comment, CharClasses, FullCodeCharKind, RichChar};\n-use config::IndentStyle;\n-use expr::rewrite_call;\n-use lists::extract_pre_comment;\n-use macros::convert_try_mac;\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::Shape;\n-use source_map::SpanUtils;\n-use utils::{\n-    self, first_line_width, last_line_extendable, last_line_width, mk_sp, rewrite_ident,\n-    trimmed_last_line_width, wrap_str,\n-};\n-\n use std::borrow::Cow;\n use std::cmp::min;\n \n use syntax::source_map::{BytePos, Span};\n use syntax::{ast, ptr};\n \n+use crate::comment::{rewrite_comment, CharClasses, FullCodeCharKind, RichChar};\n+use crate::config::IndentStyle;\n+use crate::expr::rewrite_call;\n+use crate::lists::extract_pre_comment;\n+use crate::macros::convert_try_mac;\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::Shape;\n+use crate::source_map::SpanUtils;\n+use crate::utils::{\n+    self, first_line_width, last_line_extendable, last_line_width, mk_sp, rewrite_ident,\n+    trimmed_last_line_width, wrap_str,\n+};\n+\n pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -> Option<String> {\n     let chain = Chain::from_ast(expr, context);\n     debug!(\"rewrite_chain {:?} {:?}\", chain, shape);"}, {"sha": "efc35a0b0836f54cca5154c676a93d6a2b2154c9", "filename": "src/checkstyle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -11,7 +11,7 @@\n use std::io::{self, Write};\n use std::path::Path;\n \n-use rustfmt_diff::{DiffLine, Mismatch};\n+use crate::rustfmt_diff::{DiffLine, Mismatch};\n \n /// The checkstyle header - should be emitted before the output of Rustfmt.\n ///"}, {"sha": "4ec66f063868e174fc94a54418f9be73df97ed36", "filename": "src/closures.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -8,19 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use config::lists::*;\n use syntax::parse::classify;\n use syntax::source_map::Span;\n use syntax::{ast, ptr};\n \n-use expr::{block_contains_comment, is_simple_block, is_unsafe_block, rewrite_cond};\n-use items::{span_hi_for_arg, span_lo_for_arg};\n-use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n-use overflow::OverflowableItem;\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::Shape;\n-use source_map::SpanUtils;\n-use utils::{last_line_width, left_most_sub_expr, stmt_expr, NodeIdExt};\n+use crate::config::lists::*;\n+use crate::expr::{block_contains_comment, is_simple_block, is_unsafe_block, rewrite_cond};\n+use crate::items::{span_hi_for_arg, span_lo_for_arg};\n+use crate::lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n+use crate::overflow::OverflowableItem;\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::Shape;\n+use crate::source_map::SpanUtils;\n+use crate::utils::{last_line_width, left_most_sub_expr, stmt_expr, NodeIdExt};\n \n // This module is pretty messy because of the rules around closures and blocks:\n // FIXME - the below is probably no longer true in full.\n@@ -159,7 +159,8 @@ fn rewrite_closure_with_block(\n         span: body.span,\n         recovered: false,\n     };\n-    let block = ::expr::rewrite_block_with_visitor(context, \"\", &block, None, None, shape, false)?;\n+    let block =\n+        crate::expr::rewrite_block_with_visitor(context, \"\", &block, None, None, shape, false)?;\n     Some(format!(\"{} {}\", prefix, block))\n }\n "}, {"sha": "7b3a21fa4afd5cdccc65ab0093b20706f53559a5", "filename": "src/comment.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -15,14 +15,14 @@ use std::{self, borrow::Cow, iter};\n use itertools::{multipeek, MultiPeek};\n use syntax::source_map::Span;\n \n-use config::Config;\n-use rewrite::RewriteContext;\n-use shape::{Indent, Shape};\n-use string::{rewrite_string, StringFormat};\n-use utils::{\n+use crate::config::Config;\n+use crate::rewrite::RewriteContext;\n+use crate::shape::{Indent, Shape};\n+use crate::string::{rewrite_string, StringFormat};\n+use crate::utils::{\n     count_newlines, first_line_width, last_line_width, trim_left_preserve_layout, unicode_str_width,\n };\n-use {ErrorKind, FormattingError};\n+use crate::{ErrorKind, FormattingError};\n \n fn is_custom_comment(comment: &str) -> bool {\n     if !comment.starts_with(\"//\") {\n@@ -657,7 +657,7 @@ impl<'a> CommentRewrite<'a> {\n                     _ => {\n                         let mut config = self.fmt.config.clone();\n                         config.set().wrap_comments(false);\n-                        match ::format_code_block(&self.code_block_buffer, &config) {\n+                        match crate::format_code_block(&self.code_block_buffer, &config) {\n                             Some(ref s) => trim_custom_comment_prefix(&s.snippet),\n                             None => trim_custom_comment_prefix(&self.code_block_buffer),\n                         }\n@@ -1672,7 +1672,7 @@ fn remove_comment_header(comment: &str) -> &str {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use shape::{Indent, Shape};\n+    use crate::shape::{Indent, Shape};\n \n     #[test]\n     fn char_classes() {\n@@ -1733,11 +1733,11 @@ mod test {\n     #[test]\n     #[rustfmt::skip]\n     fn format_doc_comments() {\n-        let mut wrap_normalize_config: ::config::Config = Default::default();\n+        let mut wrap_normalize_config: crate::config::Config = Default::default();\n         wrap_normalize_config.set().wrap_comments(true);\n         wrap_normalize_config.set().normalize_comments(true);\n \n-        let mut wrap_config: ::config::Config = Default::default();\n+        let mut wrap_config: crate::config::Config = Default::default();\n         wrap_config.set().wrap_comments(true);\n \n         let comment = rewrite_comment(\" //test\","}, {"sha": "09c41f8bb1dd34eeb5e6e068ba9169c9255cbc1d", "filename": "src/config/config_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use config::file_lines::FileLines;\n-use config::options::{IgnoreList, WidthHeuristics};\n+use crate::config::file_lines::FileLines;\n+use crate::config::options::{IgnoreList, WidthHeuristics};\n \n /// Trait for types that can be used in `Config`.\n pub trait ConfigType: Sized {"}, {"sha": "74f8e186180fdc5ed95a84fe1e2c319fd8e4789e", "filename": "src/config/lists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fconfig%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fconfig%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Flists.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -10,8 +10,8 @@\n \n //! Configuration options related to rewriting a list.\n \n-use config::config_type::ConfigType;\n-use config::IndentStyle;\n+use crate::config::config_type::ConfigType;\n+use crate::config::IndentStyle;\n \n /// The definitive formatting tactic for lists.\n #[derive(Eq, PartialEq, Debug, Copy, Clone)]"}, {"sha": "3685db306c85e8eff00364967cc2eb2250aecfcf", "filename": "src/config/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -8,18 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use regex::Regex;\n use std::cell::Cell;\n use std::default::Default;\n use std::fs::File;\n use std::io::{Error, ErrorKind, Read};\n use std::path::{Path, PathBuf};\n use std::{env, fs};\n \n-use config::config_type::ConfigType;\n-pub use config::file_lines::{FileLines, FileName, Range};\n-pub use config::lists::*;\n-pub use config::options::*;\n+use regex::Regex;\n+\n+use crate::config::config_type::ConfigType;\n+pub use crate::config::file_lines::{FileLines, FileName, Range};\n+pub use crate::config::lists::*;\n+pub use crate::config::options::*;\n \n #[macro_use]\n pub mod config_type;"}, {"sha": "7734cfbd506911048c8f6f5372846b1ea686763f", "filename": "src/config/options.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use config::config_type::ConfigType;\n-use config::lists::*;\n-use config::{Config, FileName};\n+use std::collections::HashSet;\n+use std::path::{Path, PathBuf};\n \n use atty;\n \n-use std::collections::HashSet;\n-use std::path::{Path, PathBuf};\n+use crate::config::config_type::ConfigType;\n+use crate::config::lists::*;\n+use crate::config::{Config, FileName};\n \n /// Macro that will stringify the enum variants or a provided textual repr\n #[macro_export]\n@@ -169,7 +169,7 @@ impl NewlineStyle {\n     /// If the style is set to `Auto` and `raw_input_text` contains no\n     /// newlines, the `Native` style will be used.\n     pub(crate) fn apply(self, formatted_text: &mut String, raw_input_text: &str) {\n-        use NewlineStyle::*;\n+        use crate::NewlineStyle::*;\n         let mut style = self;\n         if style == Auto {\n             style = Self::auto_detect(raw_input_text);"}, {"sha": "0e22134680f6e5f0356d3ab32af9ff339956e805", "filename": "src/expr.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -11,40 +11,40 @@\n use std::borrow::Cow;\n use std::cmp::min;\n \n-use config::lists::*;\n use syntax::parse::token::DelimToken;\n use syntax::source_map::{BytePos, SourceMap, Span};\n use syntax::{ast, ptr};\n \n-use chains::rewrite_chain;\n-use closures;\n-use comment::{\n+use crate::chains::rewrite_chain;\n+use crate::closures;\n+use crate::comment::{\n     combine_strs_with_missing_comments, contains_comment, recover_comment_removed, rewrite_comment,\n     rewrite_missing_comment, CharClasses, FindUncommented,\n };\n-use config::{Config, ControlBraceStyle, IndentStyle, Version};\n-use lists::{\n+use crate::config::lists::*;\n+use crate::config::{Config, ControlBraceStyle, IndentStyle, Version};\n+use crate::lists::{\n     definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n     struct_lit_tactic, write_list, ListFormatting, ListItem, Separator,\n };\n-use macros::{rewrite_macro, MacroPosition};\n-use matches::rewrite_match;\n-use overflow::{self, IntoOverflowableItem, OverflowableItem};\n-use pairs::{rewrite_all_pairs, rewrite_pair, PairParts};\n-use patterns::is_short_pattern;\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::{Indent, Shape};\n-use source_map::{LineRangeUtils, SpanUtils};\n-use spanned::Spanned;\n-use string::{rewrite_string, StringFormat};\n-use types::{rewrite_path, PathContext};\n-use utils::{\n+use crate::macros::{rewrite_macro, MacroPosition};\n+use crate::matches::rewrite_match;\n+use crate::overflow::{self, IntoOverflowableItem, OverflowableItem};\n+use crate::pairs::{rewrite_all_pairs, rewrite_pair, PairParts};\n+use crate::patterns::is_short_pattern;\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::{Indent, Shape};\n+use crate::source_map::{LineRangeUtils, SpanUtils};\n+use crate::spanned::Spanned;\n+use crate::string::{rewrite_string, StringFormat};\n+use crate::types::{rewrite_path, PathContext};\n+use crate::utils::{\n     colon_spaces, contains_skip, count_newlines, first_line_ends_with, inner_attributes,\n     last_line_extendable, last_line_width, mk_sp, outer_attributes, ptr_vec_to_ref_vec,\n     semicolon_for_expr, semicolon_for_stmt, wrap_str,\n };\n-use vertical::rewrite_with_alignment;\n-use visitor::FmtVisitor;\n+use crate::vertical::rewrite_with_alignment;\n+use crate::visitor::FmtVisitor;\n \n impl Rewrite for ast::Expr {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {"}, {"sha": "9ffa0308297af5b306715ef7a4683751b563d137", "filename": "src/formatting.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -12,11 +12,11 @@ use syntax::errors::{DiagnosticBuilder, Handler};\n use syntax::parse::{self, ParseSess};\n use syntax::source_map::{FilePathMapping, SourceMap, Span};\n \n-use comment::{CharClasses, FullCodeCharKind};\n-use config::{Config, FileName, Verbosity};\n-use issues::BadIssueSeeker;\n-use visitor::{FmtVisitor, SnippetProvider};\n-use {modules, source_file, ErrorKind, FormatReport, Input, Session};\n+use crate::comment::{CharClasses, FullCodeCharKind};\n+use crate::config::{Config, FileName, Verbosity};\n+use crate::issues::BadIssueSeeker;\n+use crate::visitor::{FmtVisitor, SnippetProvider};\n+use crate::{modules, source_file, ErrorKind, FormatReport, Input, Session};\n \n // A map of the files of a crate, with their new content\n pub(crate) type SourceFile = Vec<FileRecord>;\n@@ -157,7 +157,7 @@ impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n \n         debug_assert_eq!(\n             visitor.line_number,\n-            ::utils::count_newlines(&visitor.buffer)\n+            crate::utils::count_newlines(&visitor.buffer)\n         );\n \n         // For some reason, the source_map does not include terminating"}, {"sha": "f7a181c4b6c666f0ada3ff55df36b47a27be0347", "filename": "src/git-rustfmt/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fgit-rustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fgit-rustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgit-rustfmt%2Fmain.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -22,7 +22,7 @@ use std::str::FromStr;\n \n use getopts::{Matches, Options};\n \n-use rustfmt::{load_config, CliOptions, Input, Session};\n+use crate::rustfmt::{load_config, CliOptions, Input, Session};\n \n fn prune_files(files: Vec<&str>) -> Vec<&str> {\n     let prefixes: Vec<_> = files"}, {"sha": "ad102a64c6bdd0e87ca7e48b1b98ba120beeb279", "filename": "src/imports.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -8,24 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::borrow::Cow;\n use std::cmp::Ordering;\n+use std::fmt;\n \n-use config::lists::*;\n use syntax::ast::{self, UseTreeKind};\n use syntax::source_map::{self, BytePos, Span, DUMMY_SP};\n \n-use comment::combine_strs_with_missing_comments;\n-use config::{Edition, IndentStyle};\n-use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator};\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::Shape;\n-use source_map::SpanUtils;\n-use spanned::Spanned;\n-use utils::{is_same_visibility, mk_sp, rewrite_ident};\n-use visitor::FmtVisitor;\n-\n-use std::borrow::Cow;\n-use std::fmt;\n+use crate::comment::combine_strs_with_missing_comments;\n+use crate::config::lists::*;\n+use crate::config::{Edition, IndentStyle};\n+use crate::lists::{\n+    definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n+};\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::Shape;\n+use crate::source_map::SpanUtils;\n+use crate::spanned::Spanned;\n+use crate::utils::{is_same_visibility, mk_sp, rewrite_ident};\n+use crate::visitor::FmtVisitor;\n \n /// Returns a name imported by a `use` declaration. e.g. returns `Ordering`\n /// for `std::cmp::Ordering` and `self` for `std::cmp::self`.\n@@ -242,7 +243,7 @@ impl UseTree {\n     // Rewrite use tree with `use ` and a trailing `;`.\n     pub fn rewrite_top_level(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         let vis = self.visibility.as_ref().map_or(Cow::from(\"\"), |vis| {\n-            ::utils::format_visibility(context, &vis)\n+            crate::utils::format_visibility(context, &vis)\n         });\n         let use_str = self\n             .rewrite(context, shape.offset_left(vis.len())?)"}, {"sha": "3104f72043663413b48e4b134a246ede02a9cec0", "filename": "src/issues.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -14,7 +14,7 @@\n \n use std::fmt;\n \n-use config::ReportTactic;\n+use crate::config::ReportTactic;\n \n const TO_DO_CHARS: &[char] = &['t', 'o', 'd', 'o'];\n const FIX_ME_CHARS: &[char] = &['f', 'i', 'x', 'm', 'e'];"}, {"sha": "3bef81c7d9acd8165d4f0327e6ef36d2228284c6", "filename": "src/items.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -13,32 +13,34 @@\n use std::borrow::Cow;\n use std::cmp::{min, Ordering};\n \n-use config::lists::*;\n use regex::Regex;\n use rustc_target::spec::abi;\n use syntax::source_map::{self, BytePos, Span};\n use syntax::visit;\n use syntax::{ast, ptr, symbol};\n \n-use comment::{\n+use crate::comment::{\n     combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n     recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented,\n };\n-use config::{BraceStyle, Config, Density, IndentStyle, Version};\n-use expr::{\n+use crate::config::lists::*;\n+use crate::config::{BraceStyle, Config, Density, IndentStyle, Version};\n+use crate::expr::{\n     format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, rewrite_assign_rhs_with,\n     ExprType, RhsTactics,\n };\n-use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator};\n-use macros::{rewrite_macro, MacroPosition};\n-use overflow;\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::{Indent, Shape};\n-use source_map::{LineRangeUtils, SpanUtils};\n-use spanned::Spanned;\n-use utils::*;\n-use vertical::rewrite_with_alignment;\n-use visitor::FmtVisitor;\n+use crate::lists::{\n+    definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n+};\n+use crate::macros::{rewrite_macro, MacroPosition};\n+use crate::overflow;\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::{Indent, Shape};\n+use crate::source_map::{LineRangeUtils, SpanUtils};\n+use crate::spanned::Spanned;\n+use crate::utils::*;\n+use crate::vertical::rewrite_with_alignment;\n+use crate::visitor::FmtVisitor;\n \n const DEFAULT_VISIBILITY: ast::Visibility = source_map::Spanned {\n     node: ast::VisibilityKind::Inherited,\n@@ -621,7 +623,7 @@ impl<'a> FmtVisitor<'a> {\n                 self.buffer.clear();\n             }\n             // type -> existential -> const -> macro -> method\n-            use ast::ImplItemKind::*;\n+            use crate::ast::ImplItemKind::*;\n             fn need_empty_line(a: &ast::ImplItemKind, b: &ast::ImplItemKind) -> bool {\n                 match (a, b) {\n                     (Type(..), Type(..))"}, {"sha": "6fc3dc859455d371010e3a8470839d9ec8209c8d", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -42,15 +42,16 @@ use std::mem;\n use std::panic;\n use std::path::PathBuf;\n use std::rc::Rc;\n-use syntax::ast;\n \n-use comment::LineClasses;\n use failure::Fail;\n-use formatting::{FormatErrorMap, FormattingError, ReportedErrors, SourceFile};\n-use issues::Issue;\n-use shape::Indent;\n+use syntax::ast;\n+\n+use crate::comment::LineClasses;\n+use crate::formatting::{FormatErrorMap, FormattingError, ReportedErrors, SourceFile};\n+use crate::issues::Issue;\n+use crate::shape::Indent;\n \n-pub use config::{\n+pub use crate::config::{\n     load_config, CliOptions, Color, Config, Edition, EmitMode, FileLines, FileName, NewlineStyle,\n     Range, Verbosity,\n };"}, {"sha": "3575b207dbaf895c7e5b7f88d07202c3fbc67f30", "filename": "src/lists.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -13,15 +13,15 @@\n use std::cmp;\n use std::iter::Peekable;\n \n-use config::lists::*;\n use syntax::source_map::BytePos;\n \n-use comment::{find_comment_end, rewrite_comment, FindUncommented};\n-use config::{Config, IndentStyle};\n-use rewrite::RewriteContext;\n-use shape::{Indent, Shape};\n-use utils::{count_newlines, first_line_width, last_line_width, mk_sp, starts_with_newline};\n-use visitor::SnippetProvider;\n+use crate::comment::{find_comment_end, rewrite_comment, FindUncommented};\n+use crate::config::lists::*;\n+use crate::config::{Config, IndentStyle};\n+use crate::rewrite::RewriteContext;\n+use crate::shape::{Indent, Shape};\n+use crate::utils::{count_newlines, first_line_width, last_line_width, mk_sp, starts_with_newline};\n+use crate::visitor::SnippetProvider;\n \n pub struct ListFormatting<'a> {\n     tactic: DefinitiveListTactic,"}, {"sha": "51cf9db53e8b8003f86c361973c826d83f271a80", "filename": "src/macros.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -21,7 +21,6 @@\n \n use std::collections::HashMap;\n \n-use config::lists::*;\n use syntax::parse::new_parser_from_tts;\n use syntax::parse::parser::Parser;\n use syntax::parse::token::{BinOpToken, DelimToken, Token};\n@@ -32,19 +31,22 @@ use syntax::tokenstream::{Cursor, ThinTokenStream, TokenStream, TokenTree};\n use syntax::ThinVec;\n use syntax::{ast, parse, ptr};\n \n-use comment::{contains_comment, CharClasses, FindUncommented, FullCodeCharKind, LineClasses};\n-use expr::rewrite_array;\n-use lists::{itemize_list, write_list, ListFormatting};\n-use overflow;\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::{Indent, Shape};\n-use source_map::SpanUtils;\n-use spanned::Spanned;\n-use utils::{\n+use crate::comment::{\n+    contains_comment, CharClasses, FindUncommented, FullCodeCharKind, LineClasses,\n+};\n+use crate::config::lists::*;\n+use crate::expr::rewrite_array;\n+use crate::lists::{itemize_list, write_list, ListFormatting};\n+use crate::overflow;\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::{Indent, Shape};\n+use crate::source_map::SpanUtils;\n+use crate::spanned::Spanned;\n+use crate::utils::{\n     format_visibility, is_empty_line, mk_sp, remove_trailing_white_spaces, rewrite_ident,\n     trim_left_preserve_layout, wrap_str, NodeIdExt,\n };\n-use visitor::FmtVisitor;\n+use crate::visitor::FmtVisitor;\n \n const FORCED_BRACKET_MACROS: &[&str] = &[\"vec!\"];\n \n@@ -75,7 +77,7 @@ impl MacroArg {\n \n impl Rewrite for ast::Item {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        let mut visitor = ::visitor::FmtVisitor::from_context(context);\n+        let mut visitor = crate::visitor::FmtVisitor::from_context(context);\n         visitor.block_indent = shape.indent;\n         visitor.last_pos = self.span().lo();\n         visitor.visit_item(self);\n@@ -1271,12 +1273,12 @@ impl MacroBranch {\n         config.set().max_width(new_width);\n \n         // First try to format as items, then as statements.\n-        let new_body_snippet = match ::format_snippet(&body_str, &config) {\n+        let new_body_snippet = match crate::format_snippet(&body_str, &config) {\n             Some(new_body) => new_body,\n             None => {\n                 let new_width = new_width + config.tab_spaces();\n                 config.set().max_width(new_width);\n-                match ::format_code_block(&body_str, &config) {\n+                match crate::format_code_block(&body_str, &config) {\n                     Some(new_body) => new_body,\n                     None => return None,\n                 }\n@@ -1374,7 +1376,7 @@ fn format_lazy_static(context: &RewriteContext, shape: Shape, ts: &TokenStream)\n \n     while parser.token != Token::Eof {\n         // Parse a `lazy_static!` item.\n-        let vis = ::utils::format_visibility(context, &parse_or!(parse_visibility, false));\n+        let vis = crate::utils::format_visibility(context, &parse_or!(parse_visibility, false));\n         parser.eat_keyword(symbol::keywords::Static);\n         parser.eat_keyword(symbol::keywords::Ref);\n         let id = parse_or!(parse_ident);\n@@ -1392,7 +1394,7 @@ fn format_lazy_static(context: &RewriteContext, shape: Shape, ts: &TokenStream)\n             id,\n             ty.rewrite(context, nested_shape)?\n         ));\n-        result.push_str(&::expr::rewrite_assign_rhs(\n+        result.push_str(&crate::expr::rewrite_assign_rhs(\n             context,\n             stmt,\n             &*expr,"}, {"sha": "febab4da178ade6e9e1987be7859109d6311039a", "filename": "src/matches.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -12,22 +12,22 @@\n \n use std::iter::repeat;\n \n-use config::lists::*;\n use syntax::source_map::{BytePos, Span};\n use syntax::{ast, ptr};\n \n-use comment::{combine_strs_with_missing_comments, rewrite_comment};\n-use config::{Config, ControlBraceStyle, IndentStyle, Version};\n-use expr::{\n+use crate::comment::{combine_strs_with_missing_comments, rewrite_comment};\n+use crate::config::lists::*;\n+use crate::config::{Config, ControlBraceStyle, IndentStyle, Version};\n+use crate::expr::{\n     format_expr, is_empty_block, is_simple_block, is_unsafe_block, prefer_next_line, rewrite_cond,\n     rewrite_multiple_patterns, ExprType, RhsTactics,\n };\n-use lists::{itemize_list, write_list, ListFormatting};\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::Shape;\n-use source_map::SpanUtils;\n-use spanned::Spanned;\n-use utils::{\n+use crate::lists::{itemize_list, write_list, ListFormatting};\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::Shape;\n+use crate::source_map::SpanUtils;\n+use crate::spanned::Spanned;\n+use crate::utils::{\n     contains_skip, extra_offset, first_line_width, inner_attributes, last_line_extendable, mk_sp,\n     ptr_vec_to_ref_vec, semicolon_for_expr, trimmed_last_line_width,\n };"}, {"sha": "2b409ab7b871194733226bfaf0653fb6e76e418d", "filename": "src/missed_spans.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -12,12 +12,12 @@ use std::borrow::Cow;\n \n use syntax::source_map::{BytePos, Pos, Span};\n \n-use comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n-use config::{EmitMode, FileName};\n-use shape::{Indent, Shape};\n-use source_map::LineRangeUtils;\n-use utils::{count_newlines, last_line_width, mk_sp};\n-use visitor::FmtVisitor;\n+use crate::comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n+use crate::config::{EmitMode, FileName};\n+use crate::shape::{Indent, Shape};\n+use crate::source_map::LineRangeUtils;\n+use crate::utils::{count_newlines, last_line_width, mk_sp};\n+use crate::visitor::FmtVisitor;\n \n struct SnippetStatus {\n     /// An offset to the current line from the beginning of the original snippet."}, {"sha": "1a89be66e8fe8028feadcc42b69cb2cd30dcea48", "filename": "src/modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -17,8 +17,8 @@ use syntax::parse::{parser, DirectoryOwnership};\n use syntax::source_map;\n use syntax_pos::symbol::Symbol;\n \n-use config::FileName;\n-use utils::contains_skip;\n+use crate::config::FileName;\n+use crate::utils::contains_skip;\n \n /// List all the files containing modules of a crate.\n /// If a file is used twice in a crate, it appears only once."}, {"sha": "04456aea106c43ef7cbc66ca4349b7e835c7996c", "filename": "src/overflow.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -10,28 +10,30 @@\n \n //! Rewrite a list some items with overflow.\n \n-use config::lists::*;\n-use config::Version;\n+use std::cmp::min;\n+\n use syntax::parse::token::DelimToken;\n use syntax::source_map::Span;\n use syntax::{ast, ptr};\n \n-use closures;\n-use expr::{\n+use crate::closures;\n+use crate::config::lists::*;\n+use crate::config::Version;\n+use crate::expr::{\n     can_be_overflowed_expr, is_every_expr_simple, is_method_call, is_nested_call, is_simple_expr,\n     rewrite_cond,\n };\n-use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator};\n-use macros::MacroArg;\n-use patterns::{can_be_overflowed_pat, TuplePatField};\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::Shape;\n-use source_map::SpanUtils;\n-use spanned::Spanned;\n-use types::{can_be_overflowed_type, SegmentParam};\n-use utils::{count_newlines, extra_offset, first_line_width, last_line_width, mk_sp};\n-\n-use std::cmp::min;\n+use crate::lists::{\n+    definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n+};\n+use crate::macros::MacroArg;\n+use crate::patterns::{can_be_overflowed_pat, TuplePatField};\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::Shape;\n+use crate::source_map::SpanUtils;\n+use crate::spanned::Spanned;\n+use crate::types::{can_be_overflowed_type, SegmentParam};\n+use crate::utils::{count_newlines, extra_offset, first_line_width, last_line_width, mk_sp};\n \n const SHORT_ITEM_THRESHOLD: usize = 10;\n \n@@ -544,7 +546,7 @@ impl<'a> Context<'a> {\n                     && self.one_line_width != 0\n                     && !list_items[0].has_comment()\n                     && !list_items[0].inner_as_ref().contains('\\n')\n-                    && ::lists::total_item_width(&list_items[0]) <= self.one_line_width\n+                    && crate::lists::total_item_width(&list_items[0]) <= self.one_line_width\n                 {\n                     tactic = DefinitiveListTactic::Horizontal;\n                 } else {"}, {"sha": "05a0911c388afaf601d28df6aa6b1518407f6074", "filename": "src/pairs.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fpairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fpairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpairs.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -10,11 +10,13 @@\n \n use syntax::ast;\n \n-use config::lists::*;\n-use config::IndentStyle;\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::Shape;\n-use utils::{first_line_width, is_single_line, last_line_width, trimmed_last_line_width, wrap_str};\n+use crate::config::lists::*;\n+use crate::config::IndentStyle;\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::Shape;\n+use crate::utils::{\n+    first_line_width, is_single_line, last_line_width, trimmed_last_line_width, wrap_str,\n+};\n \n /// Sigils that decorate a binop pair.\n #[derive(new, Clone, Copy)]"}, {"sha": "acfb6ee19336166bd15a8bb7ae33cc046cd84780", "filename": "src/patterns.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -8,26 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use config::lists::*;\n use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd, RangeSyntax};\n use syntax::ptr;\n use syntax::source_map::{self, BytePos, Span};\n \n-use comment::FindUncommented;\n-use expr::{can_be_overflowed_expr, rewrite_unary_prefix, wrap_struct_field};\n-use lists::{\n+use crate::comment::FindUncommented;\n+use crate::config::lists::*;\n+use crate::expr::{can_be_overflowed_expr, rewrite_unary_prefix, wrap_struct_field};\n+use crate::lists::{\n     itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape, struct_lit_tactic,\n     write_list,\n };\n-use macros::{rewrite_macro, MacroPosition};\n-use overflow;\n-use pairs::{rewrite_pair, PairParts};\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::Shape;\n-use source_map::SpanUtils;\n-use spanned::Spanned;\n-use types::{rewrite_path, PathContext};\n-use utils::{format_mutability, mk_sp, rewrite_ident};\n+use crate::macros::{rewrite_macro, MacroPosition};\n+use crate::overflow;\n+use crate::pairs::{rewrite_pair, PairParts};\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::Shape;\n+use crate::source_map::SpanUtils;\n+use crate::spanned::Spanned;\n+use crate::types::{rewrite_path, PathContext};\n+use crate::utils::{format_mutability, mk_sp, rewrite_ident};\n \n /// Returns true if the given pattern is short. A short pattern is defined by the following grammar:\n ///"}, {"sha": "5891cde75941ba1cbfe86e31c6d6d1ea53417c53", "filename": "src/reorder.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -16,22 +16,22 @@\n \n // FIXME(#2455): Reorder trait items.\n \n-use config::Config;\n-use syntax::{ast, attr, source_map::Span};\n+use std::cmp::{Ord, Ordering};\n \n-use attr::filter_inline_attrs;\n-use comment::combine_strs_with_missing_comments;\n-use imports::{merge_use_trees, UseTree};\n-use items::{is_mod_decl, rewrite_extern_crate, rewrite_mod};\n-use lists::{itemize_list, write_list, ListFormatting, ListItem};\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::Shape;\n-use source_map::LineRangeUtils;\n-use spanned::Spanned;\n-use utils::{contains_skip, mk_sp};\n-use visitor::FmtVisitor;\n+use syntax::{ast, attr, source_map::Span};\n \n-use std::cmp::{Ord, Ordering};\n+use crate::attr::filter_inline_attrs;\n+use crate::comment::combine_strs_with_missing_comments;\n+use crate::config::Config;\n+use crate::imports::{merge_use_trees, UseTree};\n+use crate::items::{is_mod_decl, rewrite_extern_crate, rewrite_mod};\n+use crate::lists::{itemize_list, write_list, ListFormatting, ListItem};\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::Shape;\n+use crate::source_map::LineRangeUtils;\n+use crate::spanned::Spanned;\n+use crate::utils::{contains_skip, mk_sp};\n+use crate::visitor::FmtVisitor;\n \n /// Choose the ordering between the given two items.\n fn compare_items(a: &ast::Item, b: &ast::Item) -> Ordering {"}, {"sha": "9d3733a279ce33de449c6dc022a42cfb99645d15", "filename": "src/rewrite.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -10,16 +10,16 @@\n \n // A generic trait to abstract the rewriting of an element (of the AST).\n \n+use std::cell::RefCell;\n+\n use syntax::parse::ParseSess;\n use syntax::ptr;\n use syntax::source_map::{SourceMap, Span};\n \n-use config::{Config, IndentStyle};\n-use shape::Shape;\n-use visitor::SnippetProvider;\n-use FormatReport;\n-\n-use std::cell::RefCell;\n+use crate::config::{Config, IndentStyle};\n+use crate::shape::Shape;\n+use crate::visitor::SnippetProvider;\n+use crate::FormatReport;\n \n pub trait Rewrite {\n     /// Rewrite self into shape."}, {"sha": "8a74aa47c0cd962e1c5692ad5a76493ff8e53da6", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use config::{Color, Config, Verbosity};\n-use diff;\n use std::collections::VecDeque;\n use std::io;\n use std::io::Write;\n \n+use diff;\n+\n+use crate::config::{Color, Config, Verbosity};\n+\n #[derive(Debug, PartialEq)]\n pub enum DiffLine {\n     Context(String),"}, {"sha": "1b1217346fa48ed045ddb955ce22214370697f54", "filename": "src/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshape.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -12,7 +12,7 @@ use std::borrow::Cow;\n use std::cmp::min;\n use std::ops::{Add, Sub};\n \n-use Config;\n+use crate::Config;\n \n #[derive(Copy, Clone, Debug)]\n pub struct Indent {"}, {"sha": "b26cd0521fa5d2a98739ddad77a24460b6dd4979", "filename": "src/source_file.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_file.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -11,12 +11,12 @@\n use std::fs;\n use std::io::{self, Write};\n \n-use checkstyle::output_checkstyle_file;\n-use config::{Config, EmitMode, FileName, Verbosity};\n-use rustfmt_diff::{make_diff, output_modified, print_diff};\n+use crate::checkstyle::output_checkstyle_file;\n+use crate::config::{Config, EmitMode, FileName, Verbosity};\n+use crate::rustfmt_diff::{make_diff, output_modified, print_diff};\n \n #[cfg(test)]\n-use formatting::FileRecord;\n+use crate::formatting::FileRecord;\n \n // Append a newline to the end of each file.\n pub fn append_newline(s: &mut String) {\n@@ -33,13 +33,13 @@ where\n     T: Write,\n {\n     if config.emit_mode() == EmitMode::Checkstyle {\n-        write!(out, \"{}\", ::checkstyle::header())?;\n+        write!(out, \"{}\", crate::checkstyle::header())?;\n     }\n     for &(ref filename, ref text) in source_file {\n         write_file(text, filename, out, config)?;\n     }\n     if config.emit_mode() == EmitMode::Checkstyle {\n-        write!(out, \"{}\", ::checkstyle::footer())?;\n+        write!(out, \"{}\", crate::checkstyle::footer())?;\n     }\n \n     Ok(())"}, {"sha": "8caff51ee40e4f1212be74eb2e2b3b76afedd6e0", "filename": "src/source_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_map.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -11,11 +11,11 @@\n //! This module contains utilities that work with the `SourceMap` from `libsyntax`/`syntex_syntax`.\n //! This includes extension traits and methods for looking up spans and line ranges for AST nodes.\n \n-use config::file_lines::LineRange;\n use syntax::source_map::{BytePos, SourceMap, Span};\n-use visitor::SnippetProvider;\n \n-use comment::FindUncommented;\n+use crate::comment::FindUncommented;\n+use crate::config::file_lines::LineRange;\n+use crate::visitor::SnippetProvider;\n \n pub trait SpanUtils {\n     fn span_after(&self, original: Span, needle: &str) -> BytePos;"}, {"sha": "ab021ed7ec11f75e31ccbb43f999c0d24df1fb1d", "filename": "src/spanned.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::cmp::max;\n+\n use syntax::{\n     ast, ptr,\n     source_map::{self, Span},\n };\n \n-use macros::MacroArg;\n-use utils::{mk_sp, outer_attributes};\n-\n-use std::cmp::max;\n+use crate::macros::MacroArg;\n+use crate::utils::{mk_sp, outer_attributes};\n \n /// Spanned returns a span including attributes, if available.\n pub trait Spanned {\n@@ -116,7 +116,7 @@ impl Spanned for ast::Arm {\n \n impl Spanned for ast::Arg {\n     fn span(&self) -> Span {\n-        if ::items::is_named_arg(self) {\n+        if crate::items::is_named_arg(self) {\n             mk_sp(self.pat.span.lo(), self.ty.span.hi())\n         } else {\n             self.ty.span"}, {"sha": "cb17484173825652ae14b82510cd64b4cf5a07a0", "filename": "src/string.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -14,9 +14,9 @@ use regex::Regex;\n use unicode_categories::UnicodeCategories;\n use unicode_segmentation::UnicodeSegmentation;\n \n-use config::Config;\n-use shape::Shape;\n-use utils::{unicode_str_width, wrap_str};\n+use crate::config::Config;\n+use crate::shape::Shape;\n+use crate::utils::{unicode_str_width, wrap_str};\n \n const MIN_STRING: usize = 10;\n \n@@ -362,8 +362,8 @@ fn graphemes_width(graphemes: &[&str]) -> usize {\n #[cfg(test)]\n mod test {\n     use super::{break_string, detect_url, rewrite_string, SnippetState, StringFormat};\n-    use config::Config;\n-    use shape::{Indent, Shape};\n+    use crate::config::Config;\n+    use crate::shape::{Indent, Shape};\n     use unicode_segmentation::UnicodeSegmentation;\n \n     #[test]"}, {"sha": "7e0be85f5abc9c9d5f40383a00a8f849c77e2980", "filename": "src/test/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -18,11 +18,11 @@ use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::str::Chars;\n \n-use config::{Color, Config, EmitMode, FileName, ReportTactic};\n-use formatting::{ModifiedChunk, SourceFile};\n-use rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, OutputWriter};\n-use source_file;\n-use {FormatReport, Input, Session};\n+use crate::config::{Color, Config, EmitMode, FileName, ReportTactic};\n+use crate::formatting::{ModifiedChunk, SourceFile};\n+use crate::rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, OutputWriter};\n+use crate::source_file;\n+use crate::{FormatReport, Input, Session};\n \n const DIFF_CONTEXT_SIZE: usize = 3;\n const CONFIGURATIONS_FILE_NAME: &str = \"Configurations.md\";\n@@ -145,7 +145,9 @@ fn modified_test() {\n     let filename = \"tests/writemode/source/modified.rs\";\n     let mut data = Vec::new();\n     let mut config = Config::default();\n-    config.set().emit_mode(::config::EmitMode::ModifiedLines);\n+    config\n+        .set()\n+        .emit_mode(crate::config::EmitMode::ModifiedLines);\n \n     {\n         let mut session = Session::new(config, Some(&mut data));"}, {"sha": "6c683a207961e087a80ea0af667a59ddbfccbe42", "filename": "src/types.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -11,22 +11,22 @@\n use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n-use config::lists::*;\n use syntax::ast::{self, FunctionRetTy, Mutability};\n use syntax::source_map::{self, BytePos, Span};\n use syntax::symbol::keywords;\n \n-use config::{IndentStyle, TypeDensity};\n-use expr::{rewrite_assign_rhs, rewrite_tuple, rewrite_unary_prefix};\n-use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n-use macros::{rewrite_macro, MacroPosition};\n-use overflow;\n-use pairs::{rewrite_pair, PairParts};\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::Shape;\n-use source_map::SpanUtils;\n-use spanned::Spanned;\n-use utils::{\n+use crate::config::lists::*;\n+use crate::config::{IndentStyle, TypeDensity};\n+use crate::expr::{rewrite_assign_rhs, rewrite_tuple, rewrite_unary_prefix};\n+use crate::lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n+use crate::macros::{rewrite_macro, MacroPosition};\n+use crate::overflow;\n+use crate::pairs::{rewrite_pair, PairParts};\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::Shape;\n+use crate::source_map::SpanUtils;\n+use crate::spanned::Spanned;\n+use crate::utils::{\n     colon_spaces, extra_offset, first_line_width, format_abi, format_mutability,\n     last_line_extendable, last_line_width, mk_sp, rewrite_ident,\n };\n@@ -706,7 +706,7 @@ fn rewrite_bare_fn(\n         result.push_str(\"> \");\n     }\n \n-    result.push_str(::utils::format_unsafety(bare_fn.unsafety));\n+    result.push_str(crate::utils::format_unsafety(bare_fn.unsafety));\n \n     result.push_str(&format_abi(\n         bare_fn.abi,"}, {"sha": "06f1ca2d8d8eb99cf85752176cde64fca8863622", "filename": "src/utils.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -20,14 +20,13 @@ use syntax::ast::{\n use syntax::ptr;\n use syntax::source_map::{BytePos, Span, NO_EXPANSION};\n use syntax_pos::Mark;\n-\n-use comment::{filter_normal_code, CharClasses, FullCodeCharKind, LineClasses};\n-use config::{Config, Version};\n-use rewrite::RewriteContext;\n-use shape::{Indent, Shape};\n-\n use unicode_width::UnicodeWidthStr;\n \n+use crate::comment::{filter_normal_code, CharClasses, FullCodeCharKind, LineClasses};\n+use crate::config::{Config, Version};\n+use crate::rewrite::RewriteContext;\n+use crate::shape::{Indent, Shape};\n+\n pub const DEPR_SKIP_ANNOTATION: &str = \"rustfmt_skip\";\n pub const SKIP_ANNOTATION: &str = \"rustfmt::skip\";\n "}, {"sha": "cf018b7291dedd4470268bcb7d1bcd3d9cc32a77", "filename": "src/vertical.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -12,19 +12,21 @@\n \n use std::cmp;\n \n-use config::lists::*;\n use syntax::ast;\n use syntax::source_map::{BytePos, Span};\n \n-use comment::{combine_strs_with_missing_comments, contains_comment};\n-use expr::rewrite_field;\n-use items::{rewrite_struct_field, rewrite_struct_field_prefix};\n-use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator};\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::{Indent, Shape};\n-use source_map::SpanUtils;\n-use spanned::Spanned;\n-use utils::{contains_skip, is_attributes_extendable, mk_sp, rewrite_ident};\n+use crate::comment::{combine_strs_with_missing_comments, contains_comment};\n+use crate::config::lists::*;\n+use crate::expr::rewrite_field;\n+use crate::items::{rewrite_struct_field, rewrite_struct_field_prefix};\n+use crate::lists::{\n+    definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n+};\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::{Indent, Shape};\n+use crate::source_map::SpanUtils;\n+use crate::spanned::Spanned;\n+use crate::utils::{contains_skip, is_attributes_extendable, mk_sp, rewrite_ident};\n \n pub trait AlignedItem {\n     fn skip(&self) -> bool;"}, {"sha": "029905f7e80a4873b5c663d8e6292ee6bc25c95d", "filename": "src/visitor.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ece629b1cc4403e1e4f7118534dee8e147a162cf/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=ece629b1cc4403e1e4f7118534dee8e147a162cf", "patch": "@@ -8,32 +8,32 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::cell::RefCell;\n+\n use syntax::attr::HasAttrs;\n use syntax::parse::ParseSess;\n use syntax::source_map::{self, BytePos, Pos, SourceMap, Span};\n use syntax::{ast, visit};\n \n-use attr::*;\n-use comment::{CodeCharKind, CommentCodeSlices, FindUncommented};\n-use config::{BraceStyle, Config};\n-use items::{\n+use crate::attr::*;\n+use crate::comment::{CodeCharKind, CommentCodeSlices, FindUncommented};\n+use crate::config::{BraceStyle, Config};\n+use crate::items::{\n     format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item,\n     rewrite_associated_impl_type, rewrite_associated_type, rewrite_existential_impl_type,\n     rewrite_existential_type, rewrite_extern_crate, rewrite_type_alias, FnSig, StaticParts,\n     StructParts,\n };\n-use macros::{rewrite_macro, rewrite_macro_def, MacroPosition};\n-use rewrite::{Rewrite, RewriteContext};\n-use shape::{Indent, Shape};\n-use source_map::{LineRangeUtils, SpanUtils};\n-use spanned::Spanned;\n-use utils::{\n+use crate::macros::{rewrite_macro, rewrite_macro_def, MacroPosition};\n+use crate::rewrite::{Rewrite, RewriteContext};\n+use crate::shape::{Indent, Shape};\n+use crate::source_map::{LineRangeUtils, SpanUtils};\n+use crate::spanned::Spanned;\n+use crate::utils::{\n     self, contains_skip, count_newlines, inner_attributes, mk_sp, ptr_vec_to_ref_vec,\n     rewrite_ident, DEPR_SKIP_ANNOTATION,\n };\n-use {ErrorKind, FormatReport, FormattingError};\n-\n-use std::cell::RefCell;\n+use crate::{ErrorKind, FormatReport, FormattingError};\n \n /// Creates a string slice corresponding to the specified span.\n pub struct SnippetProvider<'a> {"}]}