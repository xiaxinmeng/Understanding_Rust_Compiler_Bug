{"sha": "22ab5303ff03f09c1de24834a08e982e8b6e8fdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYWI1MzAzZmYwM2YwOWMxZGUyNDgzNGEwOGU5ODJlOGI2ZThmZGQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-26T07:20:31Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-26T07:26:02Z"}, "message": "handle attributes for non-immediate types first\n\nSlices are non-immediate and were not having these attributes applied.", "tree": {"sha": "3c252a6b19f09a14d01a25b82a6a7f48fee77116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c252a6b19f09a14d01a25b82a6a7f48fee77116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22ab5303ff03f09c1de24834a08e982e8b6e8fdd", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22ab5303ff03f09c1de24834a08e982e8b6e8fdd", "html_url": "https://github.com/rust-lang/rust/commit/22ab5303ff03f09c1de24834a08e982e8b6e8fdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22ab5303ff03f09c1de24834a08e982e8b6e8fdd/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c51149ac97b818a31749d85bcb3b3f2332b94fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c51149ac97b818a31749d85bcb3b3f2332b94fb", "html_url": "https://github.com/rust-lang/rust/commit/0c51149ac97b818a31749d85bcb3b3f2332b94fb"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "09515774d698c90b8777eb966e8aba026fa2501d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/22ab5303ff03f09c1de24834a08e982e8b6e8fdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22ab5303ff03f09c1de24834a08e982e8b6e8fdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=22ab5303ff03f09c1de24834a08e982e8b6e8fdd", "patch": "@@ -1728,16 +1728,20 @@ pub fn get_fn_llvm_attributes(ccx: &CrateContext, fn_ty: ty::t) -> Vec<(uint, u6\n \n     for (idx, &t) in fn_sig.inputs.iter().enumerate().map(|(i, v)| (i + first_arg_offset, v)) {\n         match ty::get(t).sty {\n+            // this needs to be first to prevent fat pointers from falling through\n+            _ if !type_is_immediate(ccx, t) => {\n+                // For non-immediate arguments the callee gets its own copy of\n+                // the value on the stack, so there are no aliases. It's also\n+                // program-invisible so can't possibly capture\n+                attrs.push((idx, lib::llvm::NoAliasAttribute as u64));\n+                attrs.push((idx, lib::llvm::NoCaptureAttribute as u64));\n+                attrs.push((idx, lib::llvm::NonNullAttribute as u64));\n+            }\n             // `~` pointer parameters never alias because ownership is transferred\n             ty::ty_uniq(_) => {\n                 attrs.push((idx, lib::llvm::NoAliasAttribute as u64));\n                 attrs.push((idx, lib::llvm::NonNullAttribute as u64));\n             }\n-            // These are not really pointers but pairs, (pointer, len)\n-            ty::ty_rptr(_, ty::mt { ty: it, .. }) |\n-            ty::ty_rptr(_, ty::mt { ty: it, .. }) if match ty::get(it).sty {\n-                ty::ty_str | ty::ty_vec(..) => true, _ => false\n-            } => {}\n             // `&mut` pointer parameters never alias other parameters, or mutable global data\n             ty::ty_rptr(b, mt) if mt.mutbl == ast::MutMutable => {\n                 attrs.push((idx, lib::llvm::NoAliasAttribute as u64));\n@@ -1759,16 +1763,7 @@ pub fn get_fn_llvm_attributes(ccx: &CrateContext, fn_ty: ty::t) -> Vec<(uint, u6\n             ty::ty_rptr(_, _) => {\n                 attrs.push((idx, lib::llvm::NonNullAttribute as u64));\n             }\n-            _ => {\n-                // For non-immediate arguments the callee gets its own copy of\n-                // the value on the stack, so there are no aliases. It's also\n-                // program-invisible so can't possibly capture\n-                if !type_is_immediate(ccx, t) {\n-                    attrs.push((idx, lib::llvm::NoAliasAttribute as u64));\n-                    attrs.push((idx, lib::llvm::NoCaptureAttribute as u64));\n-                    attrs.push((idx, lib::llvm::NonNullAttribute as u64));\n-                }\n-            }\n+            _ => ()\n         }\n     }\n "}]}