{"sha": "955e913612648056853b4021a5d9046775538fd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NWU5MTM2MTI2NDgwNTY4NTNiNDAyMWE1ZDkwNDY3NzU1MzhmZDc=", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-23T12:42:08Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-23T14:31:48Z"}, "message": "review comments", "tree": {"sha": "e5fc65792fa28ff725697d23d644f7bb64b7cbc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5fc65792fa28ff725697d23d644f7bb64b7cbc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/955e913612648056853b4021a5d9046775538fd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/955e913612648056853b4021a5d9046775538fd7", "html_url": "https://github.com/rust-lang/rust/commit/955e913612648056853b4021a5d9046775538fd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/955e913612648056853b4021a5d9046775538fd7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31d07edc94814069a02bea7341edfa35c7068786", "url": "https://api.github.com/repos/rust-lang/rust/commits/31d07edc94814069a02bea7341edfa35c7068786", "html_url": "https://github.com/rust-lang/rust/commit/31d07edc94814069a02bea7341edfa35c7068786"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "a48d4fe8bb55adb670f0b8286a0dbdf864b27328", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/955e913612648056853b4021a5d9046775538fd7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955e913612648056853b4021a5d9046775538fd7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=955e913612648056853b4021a5d9046775538fd7", "patch": "@@ -321,21 +321,42 @@ impl CodeSuggestion {\n                         }\n                     }\n                     // Add a whole line highlight per line in the snippet.\n-                    let len = part.snippet.split('\\n').next().unwrap_or(&part.snippet).len();\n+                    let len: isize = part\n+                        .snippet\n+                        .split('\\n')\n+                        .next()\n+                        .unwrap_or(&part.snippet)\n+                        .chars()\n+                        .map(|c| match c {\n+                            '\\t' => 4,\n+                            _ => 1,\n+                        })\n+                        .sum();\n                     line_highlight.push(SubstitutionHighlight {\n                         start: (cur_lo.col.0 as isize + acc) as usize,\n-                        end: (cur_lo.col.0 as isize + acc + len as isize) as usize,\n+                        end: (cur_lo.col.0 as isize + acc + len) as usize,\n                     });\n                     buf.push_str(&part.snippet);\n-                    prev_hi = sm.lookup_char_pos(part.span.hi());\n+                    let cur_hi = sm.lookup_char_pos(part.span.hi());\n                     if prev_hi.line == cur_lo.line {\n-                        acc += len as isize - (prev_hi.col.0 - cur_lo.col.0) as isize;\n+                        // Account for the difference between the width of the current code and the\n+                        // snippet being suggested, so that the *later* suggestions are correctly\n+                        // aligned on the screen.\n+                        acc += len as isize - (cur_hi.col.0 - cur_lo.col.0) as isize;\n                     }\n+                    prev_hi = cur_hi;\n                     prev_line = sf.get_line(prev_hi.line - 1);\n                     for line in part.snippet.split('\\n').skip(1) {\n                         acc = 0;\n                         highlights.push(std::mem::take(&mut line_highlight));\n-                        line_highlight.push(SubstitutionHighlight { start: 0, end: line.len() });\n+                        let end: usize = line\n+                            .chars()\n+                            .map(|c| match c {\n+                                '\\t' => 4,\n+                                _ => 1,\n+                            })\n+                            .sum();\n+                        line_highlight.push(SubstitutionHighlight { start: 0, end });\n                     }\n                 }\n                 highlights.push(std::mem::take(&mut line_highlight));"}]}