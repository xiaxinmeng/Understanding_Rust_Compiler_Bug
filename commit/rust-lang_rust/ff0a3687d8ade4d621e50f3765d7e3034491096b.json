{"sha": "ff0a3687d8ade4d621e50f3765d7e3034491096b", "node_id": "C_kwDOAAsO6NoAKGZmMGEzNjg3ZDhhZGU0ZDYyMWU1MGYzNzY1ZDdlMzAzNDQ5MTA5NmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-21T19:51:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-21T19:51:56Z"}, "message": "Auto merge of #8520 - J-ZhengLi:issue8506, r=xFrednet\n\nfix suggestion on `[map_flatten]` being cropped causing possible information loss\n\nfixes #8506\n\nMulti-line suggestion given by the lint is missing its bottom part, which could potentially contains useful information about the fix.\n\n---\n\nchangelog: [`map_flatten`]: Long suggestions will now be splitup into two help messages", "tree": {"sha": "368fa29c84b1e49f962015a23263ce6cf575579f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/368fa29c84b1e49f962015a23263ce6cf575579f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff0a3687d8ade4d621e50f3765d7e3034491096b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0a3687d8ade4d621e50f3765d7e3034491096b", "html_url": "https://github.com/rust-lang/rust/commit/ff0a3687d8ade4d621e50f3765d7e3034491096b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff0a3687d8ade4d621e50f3765d7e3034491096b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47b93ea5ef65d7beab630f0975b96c872610ccd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/47b93ea5ef65d7beab630f0975b96c872610ccd2", "html_url": "https://github.com/rust-lang/rust/commit/47b93ea5ef65d7beab630f0975b96c872610ccd2"}, {"sha": "5b6295d663fe5f2cc825f8a74578b0afab58c560", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b6295d663fe5f2cc825f8a74578b0afab58c560", "html_url": "https://github.com/rust-lang/rust/commit/5b6295d663fe5f2cc825f8a74578b0afab58c560"}], "stats": {"total": 519, "additions": 395, "deletions": 124}, "files": [{"sha": "f447940ea3b5aaa84a2845c7ff8bbffc1e08fc1b", "filename": "clippy_lints/src/methods/map_flatten.rs", "status": "modified", "additions": 54, "deletions": 64, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a3687d8ade4d621e50f3765d7e3034491096b/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a3687d8ade4d621e50f3765d7e3034491096b/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs?ref=ff0a3687d8ade4d621e50f3765d7e3034491096b", "patch": "@@ -1,83 +1,73 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::diagnostics::span_lint_and_sugg_for_edges;\n use clippy_utils::is_trait_method;\n-use clippy_utils::source::snippet;\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n-use rustc_hir as hir;\n+use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n-use rustc_span::symbol::sym;\n+use rustc_span::{symbol::sym, Span};\n \n use super::MAP_FLATTEN;\n \n /// lint use of `map().flatten()` for `Iterators` and 'Options'\n-pub(super) fn check<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    recv: &'tcx hir::Expr<'_>,\n-    map_arg: &'tcx hir::Expr<'_>,\n-) {\n-    // lint if caller of `.map().flatten()` is an Iterator\n-    if is_trait_method(cx, expr, sym::Iterator) {\n-        let map_closure_ty = cx.typeck_results().expr_ty(map_arg);\n-        let is_map_to_option = match map_closure_ty.kind() {\n-            ty::Closure(_, _) | ty::FnDef(_, _) | ty::FnPtr(_) => {\n-                let map_closure_sig = match map_closure_ty.kind() {\n-                    ty::Closure(_, substs) => substs.as_closure().sig(),\n-                    _ => map_closure_ty.fn_sig(cx.tcx),\n-                };\n-                let map_closure_return_ty = cx.tcx.erase_late_bound_regions(map_closure_sig.output());\n-                is_type_diagnostic_item(cx, map_closure_return_ty, sym::Option)\n-            },\n-            _ => false,\n-        };\n-\n-        let method_to_use = if is_map_to_option {\n-            // `(...).map(...)` has type `impl Iterator<Item=Option<...>>\n-            \"filter_map\"\n-        } else {\n-            // `(...).map(...)` has type `impl Iterator<Item=impl Iterator<...>>\n-            \"flat_map\"\n-        };\n-        let func_snippet = snippet(cx, map_arg.span, \"..\");\n-        let hint = format!(\".{0}({1})\", method_to_use, func_snippet);\n-        span_lint_and_sugg(\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, map_arg: &Expr<'_>, map_span: Span) {\n+    if let Some((caller_ty_name, method_to_use)) = try_get_caller_ty_name_and_method_name(cx, expr, recv, map_arg) {\n+        let mut applicability = Applicability::MachineApplicable;\n+        let help_msgs = [\n+            &format!(\"try replacing `map` with `{}`\", method_to_use),\n+            \"and remove the `.flatten()`\",\n+        ];\n+        let closure_snippet = snippet_with_applicability(cx, map_arg.span, \"..\", &mut applicability);\n+        span_lint_and_sugg_for_edges(\n             cx,\n             MAP_FLATTEN,\n-            expr.span.with_lo(recv.span.hi()),\n-            \"called `map(..).flatten()` on an `Iterator`\",\n-            &format!(\"try using `{}` instead\", method_to_use),\n-            hint,\n-            Applicability::MachineApplicable,\n+            expr.span.with_lo(map_span.lo()),\n+            &format!(\"called `map(..).flatten()` on `{}`\", caller_ty_name),\n+            &help_msgs,\n+            format!(\"{}({})\", method_to_use, closure_snippet),\n+            applicability,\n         );\n     }\n+}\n \n-    // lint if caller of `.map().flatten()` is an Option or Result\n-    let caller_type = match cx.typeck_results().expr_ty(recv).kind() {\n-        ty::Adt(adt, _) => {\n+fn try_get_caller_ty_name_and_method_name(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    caller_expr: &Expr<'_>,\n+    map_arg: &Expr<'_>,\n+) -> Option<(&'static str, &'static str)> {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n+        if is_map_to_option(cx, map_arg) {\n+            // `(...).map(...)` has type `impl Iterator<Item=Option<...>>\n+            Some((\"Iterator\", \"filter_map\"))\n+        } else {\n+            // `(...).map(...)` has type `impl Iterator<Item=impl Iterator<...>>\n+            Some((\"Iterator\", \"flat_map\"))\n+        }\n+    } else {\n+        if let ty::Adt(adt, _) = cx.typeck_results().expr_ty(caller_expr).kind() {\n             if cx.tcx.is_diagnostic_item(sym::Option, adt.did()) {\n-                \"Option\"\n+                return Some((\"Option\", \"and_then\"));\n             } else if cx.tcx.is_diagnostic_item(sym::Result, adt.did()) {\n-                \"Result\"\n-            } else {\n-                return;\n+                return Some((\"Result\", \"and_then\"));\n             }\n-        },\n-        _ => {\n-            return;\n-        },\n-    };\n+        }\n+        None\n+    }\n+}\n \n-    let func_snippet = snippet(cx, map_arg.span, \"..\");\n-    let hint = format!(\".and_then({})\", func_snippet);\n-    let lint_info = format!(\"called `map(..).flatten()` on an `{}`\", caller_type);\n-    span_lint_and_sugg(\n-        cx,\n-        MAP_FLATTEN,\n-        expr.span.with_lo(recv.span.hi()),\n-        &lint_info,\n-        \"try using `and_then` instead\",\n-        hint,\n-        Applicability::MachineApplicable,\n-    );\n+fn is_map_to_option(cx: &LateContext<'_>, map_arg: &Expr<'_>) -> bool {\n+    let map_closure_ty = cx.typeck_results().expr_ty(map_arg);\n+    match map_closure_ty.kind() {\n+        ty::Closure(_, _) | ty::FnDef(_, _) | ty::FnPtr(_) => {\n+            let map_closure_sig = match map_closure_ty.kind() {\n+                ty::Closure(_, substs) => substs.as_closure().sig(),\n+                _ => map_closure_ty.fn_sig(cx.tcx),\n+            };\n+            let map_closure_return_ty = cx.tcx.erase_late_bound_regions(map_closure_sig.output());\n+            is_type_diagnostic_item(cx, map_closure_return_ty, sym::Option)\n+        },\n+        _ => false,\n+    }\n }"}, {"sha": "822f40179ee804d6608196fb1b258de4850b678e", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a3687d8ade4d621e50f3765d7e3034491096b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a3687d8ade4d621e50f3765d7e3034491096b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=ff0a3687d8ade4d621e50f3765d7e3034491096b", "patch": "@@ -2377,7 +2377,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 flat_map_option::check(cx, expr, arg, span);\n             },\n             (name @ \"flatten\", args @ []) => match method_call(recv) {\n-                Some((\"map\", [recv, map_arg], _)) => map_flatten::check(cx, expr, recv, map_arg),\n+                Some((\"map\", [recv, map_arg], map_span)) => map_flatten::check(cx, expr, recv, map_arg, map_span),\n                 Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n                 _ => {},\n             },"}, {"sha": "b3fad6ce7b65137e8a0a6a8e0c0c6fd2210c9c88", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a3687d8ade4d621e50f3765d7e3034491096b/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a3687d8ade4d621e50f3765d7e3034491096b/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=ff0a3687d8ade4d621e50f3765d7e3034491096b", "patch": "@@ -85,14 +85,15 @@ macro_rules! CONFIGURATION_VALUE_TEMPLATE {\n     };\n }\n \n-const LINT_EMISSION_FUNCTIONS: [&[&str]; 7] = [\n+const LINT_EMISSION_FUNCTIONS: [&[&str]; 8] = [\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_help\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_note\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_hir\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_sugg\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_then\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_hir_and_then\"],\n+    &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_sugg_for_edges\"],\n ];\n const SUGGESTION_DIAGNOSTIC_BUILDER_METHODS: [(&str, bool); 9] = [\n     (\"span_suggestion\", false),"}, {"sha": "625a53899df94d69e0dbf8db91b9856ea677e69d", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a3687d8ade4d621e50f3765d7e3034491096b/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a3687d8ade4d621e50f3765d7e3034491096b/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=ff0a3687d8ade4d621e50f3765d7e3034491096b", "patch": "@@ -8,7 +8,7 @@\n //! Thank you!\n //! ~The `INTERNAL_METADATA_COLLECTOR` lint\n \n-use rustc_errors::{Applicability, Diagnostic};\n+use rustc_errors::{emitter::MAX_SUGGESTION_HIGHLIGHT_LINES, Applicability, Diagnostic};\n use rustc_hir::HirId;\n use rustc_lint::{LateContext, Lint, LintContext};\n use rustc_span::source_map::{MultiSpan, Span};\n@@ -213,6 +213,90 @@ pub fn span_lint_and_sugg<'a, T: LintContext>(\n     });\n }\n \n+/// Like [`span_lint_and_sugg`] with a focus on the edges. The output will either\n+/// emit single span or multispan suggestion depending on the number of its lines.\n+///\n+/// If the given suggestion string has more lines than the maximum display length defined by\n+/// [`MAX_SUGGESTION_HIGHLIGHT_LINES`][`rustc_errors::emitter::MAX_SUGGESTION_HIGHLIGHT_LINES`],\n+/// this function will split the suggestion and span to showcase the change for the top and\n+/// bottom edge of the code. For normal suggestions, in one display window, the help message\n+/// will be combined with a colon.\n+///\n+/// Multipart suggestions like the one being created here currently cannot be\n+/// applied by rustfix (See [rustfix#141](https://github.com/rust-lang/rustfix/issues/141)).\n+/// Testing rustfix with this lint emission function might require a file with\n+/// suggestions that can be fixed and those that can't. See\n+/// [clippy#8520](https://github.com/rust-lang/rust-clippy/pull/8520/files) for\n+/// an example and of this.\n+///\n+/// # Example for a long suggestion\n+///\n+/// ```text\n+/// error: called `map(..).flatten()` on `Option`\n+///   --> $DIR/map_flatten.rs:8:10\n+///    |\n+/// LL |           .map(|x| {\n+///    |  __________^\n+/// LL | |             if x <= 5 {\n+/// LL | |                 Some(x)\n+/// LL | |             } else {\n+/// ...  |\n+/// LL | |         })\n+/// LL | |         .flatten();\n+///    | |__________________^\n+///    |\n+///   = note: `-D clippy::map-flatten` implied by `-D warnings`\n+/// help: try replacing `map` with `and_then`\n+///    |\n+/// LL ~         .and_then(|x| {\n+/// LL +             if x <= 5 {\n+/// LL +                 Some(x)\n+///    |\n+/// help: and remove the `.flatten()`\n+///    |\n+/// LL +                 None\n+/// LL +             }\n+/// LL ~         });\n+///    |\n+/// ```\n+pub fn span_lint_and_sugg_for_edges(\n+    cx: &LateContext<'_>,\n+    lint: &'static Lint,\n+    sp: Span,\n+    msg: &str,\n+    helps: &[&str; 2],\n+    sugg: String,\n+    applicability: Applicability,\n+) {\n+    span_lint_and_then(cx, lint, sp, msg, |diag| {\n+        let sugg_lines_count = sugg.lines().count();\n+        if sugg_lines_count > MAX_SUGGESTION_HIGHLIGHT_LINES {\n+            let sm = cx.sess().source_map();\n+            if let (Ok(line_upper), Ok(line_bottom)) = (sm.lookup_line(sp.lo()), sm.lookup_line(sp.hi())) {\n+                let split_idx = MAX_SUGGESTION_HIGHLIGHT_LINES / 2;\n+                let span_upper = sm.span_until_char(sp.with_hi(line_upper.sf.lines[line_upper.line + split_idx]), '\\n');\n+                let span_bottom = sp.with_lo(line_bottom.sf.lines[line_bottom.line - split_idx]);\n+\n+                let sugg_lines_vec = sugg.lines().collect::<Vec<&str>>();\n+                let sugg_upper = sugg_lines_vec[..split_idx].join(\"\\n\");\n+                let sugg_bottom = sugg_lines_vec[sugg_lines_count - split_idx..].join(\"\\n\");\n+\n+                diag.span_suggestion(span_upper, helps[0], sugg_upper, applicability);\n+                diag.span_suggestion(span_bottom, helps[1], sugg_bottom, applicability);\n+\n+                return;\n+            }\n+        }\n+        diag.span_suggestion_with_style(\n+            sp,\n+            &helps.join(\", \"),\n+            sugg,\n+            applicability,\n+            rustc_errors::SuggestionStyle::ShowAlways,\n+        );\n+    });\n+}\n+\n /// Create a suggestion made from several `span \u2192 replacement`.\n ///\n /// Note: in the JSON format (used by `compiletest_rs`), the help message will"}, {"sha": "7d47ee09dc1acfdac5e5932713fff966412fab88", "filename": "tests/ui/map_flatten.rs", "status": "modified", "additions": 49, "deletions": 25, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a3687d8ade4d621e50f3765d7e3034491096b/tests%2Fui%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a3687d8ade4d621e50f3765d7e3034491096b/tests%2Fui%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.rs?ref=ff0a3687d8ade4d621e50f3765d7e3034491096b", "patch": "@@ -1,31 +1,55 @@\n-// run-rustfix\n-\n-#![warn(clippy::all, clippy::pedantic)]\n-#![allow(clippy::let_underscore_drop)]\n-#![allow(clippy::missing_docs_in_private_items)]\n-#![allow(clippy::map_identity)]\n-#![allow(clippy::redundant_closure)]\n-#![allow(clippy::unnecessary_wraps)]\n+#![warn(clippy::map_flatten)]\n #![feature(result_flattening)]\n \n-fn main() {\n-    // mapping to Option on Iterator\n-    fn option_id(x: i8) -> Option<i8> {\n-        Some(x)\n-    }\n-    let option_id_ref: fn(i8) -> Option<i8> = option_id;\n-    let option_id_closure = |x| Some(x);\n-    let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n-    let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n-    let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n-    let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n+// issue #8506, multi-line\n+#[rustfmt::skip]\n+fn long_span() {\n+    let _: Option<i32> = Some(1)\n+        .map(|x| {\n+            if x <= 5 {\n+                Some(x)\n+            } else {\n+                None\n+            }\n+        })\n+        .flatten();\n \n-    // mapping to Iterator on Iterator\n-    let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n+    let _: Result<i32, i32> = Ok(1)\n+        .map(|x| {\n+            if x == 1 {\n+                Ok(x)\n+            } else {\n+                Err(0)\n+            }\n+        })\n+        .flatten();\n \n-    // mapping to Option on Option\n-    let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n+    let result: Result<i32, i32> = Ok(2);\n+    fn do_something() { }\n+    let _: Result<i32, i32> = result\n+        .map(|res| {\n+            if res > 0 {\n+                do_something();\n+                Ok(res)\n+            } else {\n+                Err(0)\n+            }\n+        })\n+        .flatten();\n+        \n+    let _: Vec<_> = vec![5_i8; 6]\n+        .into_iter()\n+        .map(|some_value| {\n+            if some_value > 3 {\n+                Some(some_value)\n+            } else {\n+                None\n+            }\n+        })\n+        .flatten()\n+        .collect();\n+}\n \n-    // mapping to Result on Result\n-    let _: Result<_, &str> = (Ok(Ok(1))).map(|x| x).flatten();\n+fn main() {\n+    long_span();\n }"}, {"sha": "c9c60df838f67bf07bd70cc38fb0f3b238a7d44e", "filename": "tests/ui/map_flatten.stderr", "status": "modified", "additions": 93, "deletions": 32, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a3687d8ade4d621e50f3765d7e3034491096b/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a3687d8ade4d621e50f3765d7e3034491096b/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=ff0a3687d8ade4d621e50f3765d7e3034491096b", "patch": "@@ -1,46 +1,107 @@\n-error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:18:46\n+error: called `map(..).flatten()` on `Option`\n+  --> $DIR/map_flatten.rs:8:10\n    |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id)`\n+LL |           .map(|x| {\n+   |  __________^\n+LL | |             if x <= 5 {\n+LL | |                 Some(x)\n+LL | |             } else {\n+...  |\n+LL | |         })\n+LL | |         .flatten();\n+   | |__________________^\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n-\n-error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:19:46\n+help: try replacing `map` with `and_then`\n    |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_ref)`\n-\n-error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:20:46\n+LL ~         .and_then(|x| {\n+LL +             if x <= 5 {\n+LL +                 Some(x)\n    |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_closure)`\n-\n-error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:21:46\n+help: and remove the `.flatten()`\n+   |\n+LL +                 None\n+LL +             }\n+LL ~         });\n    |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(|x| x.checked_add(1))`\n \n-error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:24:46\n+error: called `map(..).flatten()` on `Result`\n+  --> $DIR/map_flatten.rs:18:10\n+   |\n+LL |           .map(|x| {\n+   |  __________^\n+LL | |             if x == 1 {\n+LL | |                 Ok(x)\n+LL | |             } else {\n+...  |\n+LL | |         })\n+LL | |         .flatten();\n+   | |__________________^\n+   |\n+help: try replacing `map` with `and_then`\n+   |\n+LL ~         .and_then(|x| {\n+LL +             if x == 1 {\n+LL +                 Ok(x)\n+   |\n+help: and remove the `.flatten()`\n+   |\n+LL +                 Err(0)\n+LL +             }\n+LL ~         });\n    |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `.flat_map(|x| 0..x)`\n \n-error: called `map(..).flatten()` on an `Option`\n-  --> $DIR/map_flatten.rs:27:39\n+error: called `map(..).flatten()` on `Result`\n+  --> $DIR/map_flatten.rs:30:10\n+   |\n+LL |           .map(|res| {\n+   |  __________^\n+LL | |             if res > 0 {\n+LL | |                 do_something();\n+LL | |                 Ok(res)\n+...  |\n+LL | |         })\n+LL | |         .flatten();\n+   | |__________________^\n+   |\n+help: try replacing `map` with `and_then`\n+   |\n+LL ~         .and_then(|res| {\n+LL +             if res > 0 {\n+LL +                 do_something();\n+   |\n+help: and remove the `.flatten()`\n+   |\n+LL +                 Err(0)\n+LL +             }\n+LL ~         });\n    |\n-LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n-   |                                       ^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `.and_then(|x| x)`\n \n-error: called `map(..).flatten()` on an `Result`\n-  --> $DIR/map_flatten.rs:30:41\n+error: called `map(..).flatten()` on `Iterator`\n+  --> $DIR/map_flatten.rs:42:10\n+   |\n+LL |           .map(|some_value| {\n+   |  __________^\n+LL | |             if some_value > 3 {\n+LL | |                 Some(some_value)\n+LL | |             } else {\n+...  |\n+LL | |         })\n+LL | |         .flatten()\n+   | |__________________^\n+   |\n+help: try replacing `map` with `filter_map`\n+   |\n+LL ~         .filter_map(|some_value| {\n+LL +             if some_value > 3 {\n+LL +                 Some(some_value)\n+   |\n+help: and remove the `.flatten()`\n+   |\n+LL +                 None\n+LL +             }\n+LL +         })\n    |\n-LL |     let _: Result<_, &str> = (Ok(Ok(1))).map(|x| x).flatten();\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `.and_then(|x| x)`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "fec3a95edd62da54cddde339c8566e0fa56656e9", "filename": "tests/ui/map_flatten_fixable.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a3687d8ade4d621e50f3765d7e3034491096b/tests%2Fui%2Fmap_flatten_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a3687d8ade4d621e50f3765d7e3034491096b/tests%2Fui%2Fmap_flatten_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.fixed?ref=ff0a3687d8ade4d621e50f3765d7e3034491096b", "previous_filename": "tests/ui/map_flatten.fixed"}, {"sha": "aa1f76e335af0dad3a395921b3e25e6fbf82b6a4", "filename": "tests/ui/map_flatten_fixable.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a3687d8ade4d621e50f3765d7e3034491096b/tests%2Fui%2Fmap_flatten_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a3687d8ade4d621e50f3765d7e3034491096b/tests%2Fui%2Fmap_flatten_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.rs?ref=ff0a3687d8ade4d621e50f3765d7e3034491096b", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+#![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::let_underscore_drop)]\n+#![allow(clippy::missing_docs_in_private_items)]\n+#![allow(clippy::map_identity)]\n+#![allow(clippy::redundant_closure)]\n+#![allow(clippy::unnecessary_wraps)]\n+#![feature(result_flattening)]\n+\n+fn main() {\n+    // mapping to Option on Iterator\n+    fn option_id(x: i8) -> Option<i8> {\n+        Some(x)\n+    }\n+    let option_id_ref: fn(i8) -> Option<i8> = option_id;\n+    let option_id_closure = |x| Some(x);\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n+\n+    // mapping to Iterator on Iterator\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n+\n+    // mapping to Option on Option\n+    let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n+\n+    // mapping to Result on Result\n+    let _: Result<_, &str> = (Ok(Ok(1))).map(|x| x).flatten();\n+}"}, {"sha": "c91c73846b69fb475a8d2d35064c8352b4aca6e9", "filename": "tests/ui/map_flatten_fixable.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ff0a3687d8ade4d621e50f3765d7e3034491096b/tests%2Fui%2Fmap_flatten_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff0a3687d8ade4d621e50f3765d7e3034491096b/tests%2Fui%2Fmap_flatten_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.stderr?ref=ff0a3687d8ade4d621e50f3765d7e3034491096b", "patch": "@@ -0,0 +1,80 @@\n+error: called `map(..).flatten()` on `Iterator`\n+  --> $DIR/map_flatten_fixable.rs:18:47\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::map-flatten` implied by `-D warnings`\n+help: try replacing `map` with `filter_map`, and remove the `.flatten()`\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(option_id).collect();\n+   |                                               ~~~~~~~~~~~~~~~~~~~~~\n+\n+error: called `map(..).flatten()` on `Iterator`\n+  --> $DIR/map_flatten_fixable.rs:19:47\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try replacing `map` with `filter_map`, and remove the `.flatten()`\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(option_id_ref).collect();\n+   |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: called `map(..).flatten()` on `Iterator`\n+  --> $DIR/map_flatten_fixable.rs:20:47\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try replacing `map` with `filter_map`, and remove the `.flatten()`\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(option_id_closure).collect();\n+   |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: called `map(..).flatten()` on `Iterator`\n+  --> $DIR/map_flatten_fixable.rs:21:47\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try replacing `map` with `filter_map`, and remove the `.flatten()`\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(|x| x.checked_add(1)).collect();\n+   |                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: called `map(..).flatten()` on `Iterator`\n+  --> $DIR/map_flatten_fixable.rs:24:47\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try replacing `map` with `flat_map`, and remove the `.flatten()`\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().flat_map(|x| 0..x).collect();\n+   |                                               ~~~~~~~~~~~~~~~~~~\n+\n+error: called `map(..).flatten()` on `Option`\n+  --> $DIR/map_flatten_fixable.rs:27:40\n+   |\n+LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n+   |                                        ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try replacing `map` with `and_then`, and remove the `.flatten()`\n+   |\n+LL |     let _: Option<_> = (Some(Some(1))).and_then(|x| x);\n+   |                                        ~~~~~~~~~~~~~~~\n+\n+error: called `map(..).flatten()` on `Result`\n+  --> $DIR/map_flatten_fixable.rs:30:42\n+   |\n+LL |     let _: Result<_, &str> = (Ok(Ok(1))).map(|x| x).flatten();\n+   |                                          ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try replacing `map` with `and_then`, and remove the `.flatten()`\n+   |\n+LL |     let _: Result<_, &str> = (Ok(Ok(1))).and_then(|x| x);\n+   |                                          ~~~~~~~~~~~~~~~\n+\n+error: aborting due to 7 previous errors\n+"}]}