{"sha": "c0bc00174f0b033a689a12c108f0abddc3420f9f", "node_id": "C_kwDOAAsO6NoAKGMwYmMwMDE3NGYwYjAzM2E2ODlhMTJjMTA4ZjBhYmRkYzM0MjBmOWY", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-04-05T12:08:17Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-04-05T12:08:17Z"}, "message": "review", "tree": {"sha": "098b7e8cc8be95e64f858eae3dac9063034e6b8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/098b7e8cc8be95e64f858eae3dac9063034e6b8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0bc00174f0b033a689a12c108f0abddc3420f9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0bc00174f0b033a689a12c108f0abddc3420f9f", "html_url": "https://github.com/rust-lang/rust/commit/c0bc00174f0b033a689a12c108f0abddc3420f9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0bc00174f0b033a689a12c108f0abddc3420f9f/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f41e711b7eb3831ca986aca4b70e627703704a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f41e711b7eb3831ca986aca4b70e627703704a8f", "html_url": "https://github.com/rust-lang/rust/commit/f41e711b7eb3831ca986aca4b70e627703704a8f"}], "stats": {"total": 47, "additions": 16, "deletions": 31}, "files": [{"sha": "940358acde9a2ad72cd982f43f1d62b17e930996", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0bc00174f0b033a689a12c108f0abddc3420f9f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bc00174f0b033a689a12c108f0abddc3420f9f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=c0bc00174f0b033a689a12c108f0abddc3420f9f", "patch": "@@ -7,7 +7,6 @@ use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n use cstr::cstr;\n-use libc::c_uint;\n use rustc_codegen_ssa::traits::*;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -486,10 +485,10 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n             // go into custom sections of the wasm executable.\n             if self.tcx.sess.target.is_like_wasm {\n                 if let Some(section) = attrs.link_section {\n-                    let section = llvm::LLVMMDStringInContext(\n+                    let section = llvm::LLVMMDStringInContext2(\n                         self.llcx,\n                         section.as_str().as_ptr().cast(),\n-                        section.as_str().len() as c_uint,\n+                        section.as_str().len(),\n                     );\n                     assert!(alloc.provenance().ptrs().is_empty());\n \n@@ -498,17 +497,15 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n                     // as part of the interpreter execution).\n                     let bytes =\n                         alloc.inspect_with_uninit_and_ptr_outside_interpreter(0..alloc.len());\n-                    let alloc = llvm::LLVMMDStringInContext(\n-                        self.llcx,\n-                        bytes.as_ptr().cast(),\n-                        bytes.len() as c_uint,\n-                    );\n+                    let alloc =\n+                        llvm::LLVMMDStringInContext2(self.llcx, bytes.as_ptr().cast(), bytes.len());\n                     let data = [section, alloc];\n-                    let meta = llvm::LLVMMDNodeInContext(self.llcx, data.as_ptr(), 2);\n+                    let meta = llvm::LLVMMDNodeInContext2(self.llcx, data.as_ptr(), data.len());\n+                    let val = llvm::LLVMMetadataAsValue(self.llcx, meta);\n                     llvm::LLVMAddNamedMetadataOperand(\n                         self.llmod,\n                         \"wasm.custom_sections\\0\".as_ptr().cast(),\n-                        meta,\n+                        val,\n                     );\n                 }\n             } else {"}, {"sha": "0ff206cda6c9e55995624e9b3c200930cce55a2c", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c0bc00174f0b033a689a12c108f0abddc3420f9f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bc00174f0b033a689a12c108f0abddc3420f9f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=c0bc00174f0b033a689a12c108f0abddc3420f9f", "patch": "@@ -881,29 +881,24 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n         );\n \n         if tcx.sess.opts.unstable_opts.profile {\n-            let cu_desc_metadata =\n-                llvm::LLVMMetadataAsValue(debug_context.llcontext, unit_metadata);\n             let default_gcda_path = &output_filenames.with_extension(\"gcda\");\n             let gcda_path =\n                 tcx.sess.opts.unstable_opts.profile_emit.as_ref().unwrap_or(default_gcda_path);\n \n             let gcov_cu_info = [\n                 path_to_mdstring(debug_context.llcontext, &output_filenames.with_extension(\"gcno\")),\n                 path_to_mdstring(debug_context.llcontext, gcda_path),\n-                cu_desc_metadata,\n+                unit_metadata,\n             ];\n-            let gcov_metadata = llvm::LLVMMDNodeInContext(\n+            let gcov_metadata = llvm::LLVMMDNodeInContext2(\n                 debug_context.llcontext,\n                 gcov_cu_info.as_ptr(),\n-                gcov_cu_info.len() as c_uint,\n+                gcov_cu_info.len(),\n             );\n+            let val = llvm::LLVMMetadataAsValue(debug_context.llcontext, gcov_metadata);\n \n             let llvm_gcov_ident = cstr!(\"llvm.gcov\");\n-            llvm::LLVMAddNamedMetadataOperand(\n-                debug_context.llmod,\n-                llvm_gcov_ident.as_ptr(),\n-                gcov_metadata,\n-            );\n+            llvm::LLVMAddNamedMetadataOperand(debug_context.llmod, llvm_gcov_ident.as_ptr(), val);\n         }\n \n         // Insert `llvm.ident` metadata on the wasm targets since that will\n@@ -924,15 +919,9 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n         return unit_metadata;\n     };\n \n-    fn path_to_mdstring<'ll>(llcx: &'ll llvm::Context, path: &Path) -> &'ll Value {\n+    fn path_to_mdstring<'ll>(llcx: &'ll llvm::Context, path: &Path) -> &'ll llvm::Metadata {\n         let path_str = path_to_c_string(path);\n-        unsafe {\n-            llvm::LLVMMDStringInContext(\n-                llcx,\n-                path_str.as_ptr(),\n-                path_str.as_bytes().len() as c_uint,\n-            )\n-        }\n+        unsafe { llvm::LLVMMDStringInContext2(llcx, path_str.as_ptr(), path_str.as_bytes().len()) }\n     }\n }\n "}, {"sha": "dc498f784b31fed36646951fe5fd6e83314d3a21", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0bc00174f0b033a689a12c108f0abddc3420f9f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bc00174f0b033a689a12c108f0abddc3420f9f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=c0bc00174f0b033a689a12c108f0abddc3420f9f", "patch": "@@ -1075,7 +1075,6 @@ extern \"C\" {\n     // FIXME: deprecated, replace with LLVMMDStringInContext2\n     pub fn LLVMMDStringInContext(C: &Context, Str: *const c_char, SLen: c_uint) -> &Value;\n \n-    // LLVMMDStringInContext but don't own string\n     pub fn LLVMMDStringInContext2(C: &Context, Str: *const c_char, SLen: size_t) -> &Metadata;\n \n     // FIXME: deprecated, replace with LLVMMDNodeInContext2\n@@ -1117,7 +1116,7 @@ extern \"C\" {\n         Packed: Bool,\n     ) -> &'a Value;\n \n-    // FIXME: replace with LLVMConstArray2\n+    // FIXME: replace with LLVMConstArray2 when bumped minimal version to llvm-17\n     // https://github.com/llvm/llvm-project/commit/35276f16e5a2cae0dfb49c0fbf874d4d2f177acc\n     pub fn LLVMConstArray<'a>(\n         ElementTy: &'a Type,"}, {"sha": "29e5b7d494d8b18279ccd3ab7db78ff156e58457", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0bc00174f0b033a689a12c108f0abddc3420f9f/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c0bc00174f0b033a689a12c108f0abddc3420f9f/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=c0bc00174f0b033a689a12c108f0abddc3420f9f", "patch": "@@ -1137,7 +1137,7 @@ extern \"C\" void LLVMRustWriteValueToString(LLVMValueRef V,\n }\n \n // LLVMArrayType function does not support 64-bit ElementCount\n-// FIXME: replace with LLVMArrayType2\n+// FIXME: replace with LLVMArrayType2 when bumped minimal version to llvm-17\n // https://github.com/llvm/llvm-project/commit/35276f16e5a2cae0dfb49c0fbf874d4d2f177acc\n extern \"C\" LLVMTypeRef LLVMRustArrayType(LLVMTypeRef ElementTy,\n                                          uint64_t ElementCount) {"}]}