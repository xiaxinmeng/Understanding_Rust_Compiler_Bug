{"sha": "ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOWE1ZGQxNjU0Y2MwZDU0ZWQ1YjJiYjcxZWM4ZWQ1NTk0NzAyNzY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-10T19:16:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-10T19:16:32Z"}, "message": "Merge #3933\n\n3933: Fix accidently quadratic behavior when processing include! r=matklad a=matklad\n\nThis fixes the immediate problem behind #3927. It doesn't yet fix the deeper problem with `to_node` being quadratic (hence the test is ignored), but it is a good start anyway.\r\n\r\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "bba0a2507861fd9c4e354283e2b2102532747e7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bba0a2507861fd9c4e354283e2b2102532747e7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJekMYQCRBK7hj4Ov3rIwAAdHIIAGtAIUenBRk28+butb/g/uWQ\nPn0PPjRU/rFzRW+EFEZBxLdw7s/wFFlj1dgsGT8eB4mNBbj2e2a+DKJkSSk8D4ff\nJei6z7cBv6bbVwxfrgFwtHLwnkuSncMM+3vAasHtIM8xzunCDDNmD5QyrRUpjbIf\no6X9pdpL2c3SqX71eOfiVXdlibwYxSQ18x2nXCYHG/7AfwyD+tl8rPbRwvIFkHOZ\nqqdsGz3lk2Q1T+oVV3mohsRZVdaAcNpRi5XZdOWdeIC8njo+gD1e7tg732UK0KPf\nftwuC7F+LK5ZKu2ia/p4Idnhup4FOqmULvD9Dp4HjrzMDyCxfsgj/A3E78RAofo=\n=/oAm\n-----END PGP SIGNATURE-----\n", "payload": "tree bba0a2507861fd9c4e354283e2b2102532747e7e\nparent 773bb5173d3d54e6d19dfadd75c342c7acdce287\nparent 1b68c72fe93424213db895a4066eafb99dfdeac9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1586546192 +0000\ncommitter GitHub <noreply@github.com> 1586546192 +0000\n\nMerge #3933\n\n3933: Fix accidently quadratic behavior when processing include! r=matklad a=matklad\n\nThis fixes the immediate problem behind #3927. It doesn't yet fix the deeper problem with `to_node` being quadratic (hence the test is ignored), but it is a good start anyway.\r\n\r\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276", "html_url": "https://github.com/rust-lang/rust/commit/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "773bb5173d3d54e6d19dfadd75c342c7acdce287", "url": "https://api.github.com/repos/rust-lang/rust/commits/773bb5173d3d54e6d19dfadd75c342c7acdce287", "html_url": "https://github.com/rust-lang/rust/commit/773bb5173d3d54e6d19dfadd75c342c7acdce287"}, {"sha": "1b68c72fe93424213db895a4066eafb99dfdeac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b68c72fe93424213db895a4066eafb99dfdeac9", "html_url": "https://github.com/rust-lang/rust/commit/1b68c72fe93424213db895a4066eafb99dfdeac9"}], "stats": {"total": 98, "additions": 63, "deletions": 35}, "files": [{"sha": "f2a9b1c4087b12c60802e60f49c40f4fc430d7a9", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276", "patch": "@@ -1,10 +1,13 @@\n+use std::fs;\n+\n use insta::assert_snapshot;\n use ra_db::fixture::WithFixture;\n-\n-use super::{infer, type_at, type_at_pos};\n+use test_utils::project_dir;\n \n use crate::test_db::TestDB;\n \n+use super::{infer, type_at, type_at_pos};\n+\n #[test]\n fn cfg_impl_def() {\n     let (db, pos) = TestDB::with_position(\n@@ -481,6 +484,30 @@ fn bar() -> u32 {0}\n     assert_eq!(\"u32\", type_at_pos(&db, pos));\n }\n \n+#[test]\n+#[ignore]\n+fn include_accidentally_quadratic() {\n+    let file = project_dir().join(\"crates/ra_syntax/test_data/accidentally_quadratic\");\n+    let big_file = fs::read_to_string(file).unwrap();\n+    let big_file = vec![big_file; 10].join(\"\\n\");\n+\n+    let fixture = r#\"\n+//- /main.rs\n+#[rustc_builtin_macro]\n+macro_rules! include {() => {}}\n+\n+include!(\"foo.rs\");\n+\n+fn main() {\n+    RegisterBlock { }<|>;\n+}\n+    \"#;\n+    let fixture = format!(\"{}\\n//- /foo.rs\\n{}\", fixture, big_file);\n+\n+    let (db, pos) = TestDB::with_position(&fixture);\n+    assert_eq!(\"RegisterBlock\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_builtin_macros_include_concat() {\n     let (db, pos) = TestDB::with_position("}, {"sha": "9fb5cb058370b09584f6fc6c3cd3e7c84ecd2b7c", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276", "patch": "@@ -137,21 +137,23 @@ impl TokenMap {\n         token_id: tt::TokenId,\n         open_relative_range: TextRange,\n         close_relative_range: TextRange,\n-    ) {\n+    ) -> usize {\n+        let res = self.entries.len();\n         self.entries\n             .push((token_id, TokenTextRange::Delimiter(open_relative_range, close_relative_range)));\n+        res\n     }\n \n-    fn update_close_delim(&mut self, token_id: tt::TokenId, close_relative_range: TextRange) {\n-        if let Some(entry) = self.entries.iter_mut().find(|(tid, _)| *tid == token_id) {\n-            if let TokenTextRange::Delimiter(dim, _) = entry.1 {\n-                entry.1 = TokenTextRange::Delimiter(dim, close_relative_range);\n-            }\n+    fn update_close_delim(&mut self, idx: usize, close_relative_range: TextRange) {\n+        let (_, token_text_range) = &mut self.entries[idx];\n+        if let TokenTextRange::Delimiter(dim, _) = token_text_range {\n+            *token_text_range = TokenTextRange::Delimiter(*dim, close_relative_range);\n         }\n     }\n \n-    fn remove_delim(&mut self, token_id: tt::TokenId) {\n-        self.entries.retain(|(tid, _)| *tid != token_id);\n+    fn remove_delim(&mut self, idx: usize) {\n+        // FIXME: This could be accidently quadratic\n+        self.entries.remove(idx);\n     }\n }\n \n@@ -238,24 +240,24 @@ impl TokenIdAlloc {\n         token_id\n     }\n \n-    fn open_delim(&mut self, open_abs_range: TextRange) -> tt::TokenId {\n+    fn open_delim(&mut self, open_abs_range: TextRange) -> (tt::TokenId, usize) {\n         let token_id = tt::TokenId(self.next_id);\n         self.next_id += 1;\n-        self.map.insert_delim(\n+        let idx = self.map.insert_delim(\n             token_id,\n             open_abs_range - self.global_offset,\n             open_abs_range - self.global_offset,\n         );\n-        token_id\n+        (token_id, idx)\n     }\n \n-    fn close_delim(&mut self, id: tt::TokenId, close_abs_range: Option<TextRange>) {\n+    fn close_delim(&mut self, idx: usize, close_abs_range: Option<TextRange>) {\n         match close_abs_range {\n             None => {\n-                self.map.remove_delim(id);\n+                self.map.remove_delim(idx);\n             }\n             Some(close) => {\n-                self.map.update_close_delim(id, close - self.global_offset);\n+                self.map.update_close_delim(idx, close - self.global_offset);\n             }\n         }\n     }\n@@ -322,7 +324,7 @@ trait TokenConvertor {\n \n             if let Some((kind, closed)) = delim {\n                 let mut subtree = tt::Subtree::default();\n-                let id = self.id_alloc().open_delim(range);\n+                let (id, idx) = self.id_alloc().open_delim(range);\n                 subtree.delimiter = Some(tt::Delimiter { kind, id });\n \n                 while self.peek().map(|it| it.kind() != closed).unwrap_or(false) {\n@@ -331,7 +333,7 @@ trait TokenConvertor {\n                 let last_range = match self.bump() {\n                     None => {\n                         // For error resilience, we insert an char punct for the opening delim here\n-                        self.id_alloc().close_delim(id, None);\n+                        self.id_alloc().close_delim(idx, None);\n                         let leaf: tt::Leaf = tt::Punct {\n                             id: self.id_alloc().alloc(range),\n                             char: token.to_char().unwrap(),\n@@ -344,7 +346,7 @@ trait TokenConvertor {\n                     }\n                     Some(it) => it.1,\n                 };\n-                self.id_alloc().close_delim(id, Some(last_range));\n+                self.id_alloc().close_delim(idx, Some(last_range));\n                 subtree.into()\n             } else {\n                 let spacing = match self.peek() {"}, {"sha": "2d4f68f5e07ec2f5e929370985be9897a8ccc463", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276", "patch": "@@ -113,21 +113,6 @@ pub fn profile(label: Label) -> Profiler {\n     })\n }\n \n-pub fn print_time(label: Label) -> impl Drop {\n-    struct Guard {\n-        label: Label,\n-        start: Instant,\n-    }\n-\n-    impl Drop for Guard {\n-        fn drop(&mut self) {\n-            eprintln!(\"{}: {:?}\", self.label, self.start.elapsed())\n-        }\n-    }\n-\n-    Guard { label, start: Instant::now() }\n-}\n-\n pub struct Profiler {\n     label: Option<Label>,\n     detail: Option<String>,"}, {"sha": "01cdf452c22bf1cb0d9433a459fae060a835a8a7", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=ca9a5dd1654cc0d54ed5b2bb71ec8ed559470276", "patch": "@@ -1,6 +1,6 @@\n //! Missing batteries for standard libraries.\n \n-use std::{cell::Cell, fmt};\n+use std::{cell::Cell, fmt, time::Instant};\n \n #[inline(always)]\n pub fn is_ci() -> bool {\n@@ -88,3 +88,17 @@ where\n         Ok(())\n     }\n }\n+pub fn timeit(label: &'static str) -> impl Drop {\n+    struct Guard {\n+        label: &'static str,\n+        start: Instant,\n+    }\n+\n+    impl Drop for Guard {\n+        fn drop(&mut self) {\n+            eprintln!(\"{}: {:?}\", self.label, self.start.elapsed())\n+        }\n+    }\n+\n+    Guard { label, start: Instant::now() }\n+}"}]}