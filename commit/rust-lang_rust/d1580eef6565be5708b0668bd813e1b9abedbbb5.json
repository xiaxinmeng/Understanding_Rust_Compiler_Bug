{"sha": "d1580eef6565be5708b0668bd813e1b9abedbbb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNTgwZWVmNjU2NWJlNTcwOGIwNjY4YmQ4MTNlMWI5YWJlZGJiYjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-23T13:31:38Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T17:14:08Z"}, "message": "typeck/pat.rs: extract `is_non_ref_pat`.", "tree": {"sha": "4cbd92e4309c191bd34e603a5e082d0ea9f4e714", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cbd92e4309c191bd34e603a5e082d0ea9f4e714"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1580eef6565be5708b0668bd813e1b9abedbbb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1580eef6565be5708b0668bd813e1b9abedbbb5", "html_url": "https://github.com/rust-lang/rust/commit/d1580eef6565be5708b0668bd813e1b9abedbbb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1580eef6565be5708b0668bd813e1b9abedbbb5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbe6d59d6ef744ef17d5fb3e13a1e017baae9ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe6d59d6ef744ef17d5fb3e13a1e017baae9ce8", "html_url": "https://github.com/rust-lang/rust/commit/dbe6d59d6ef744ef17d5fb3e13a1e017baae9ce8"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "25eefbaa24c6f76bbc6e192011992fb13072e989", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d1580eef6565be5708b0668bd813e1b9abedbbb5/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1580eef6565be5708b0668bd813e1b9abedbbb5/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=d1580eef6565be5708b0668bd813e1b9abedbbb5", "patch": "@@ -56,34 +56,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         debug!(\"check_pat_walk(pat={:?},expected={:?},def_bm={:?})\", pat, expected, def_bm);\n \n-        let mut path_resolution = None;\n-        let is_non_ref_pat = match pat.node {\n-            PatKind::Struct(..) |\n-            PatKind::TupleStruct(..) |\n-            PatKind::Or(_) |\n-            PatKind::Tuple(..) |\n-            PatKind::Box(_) |\n-            PatKind::Range(..) |\n-            PatKind::Slice(..) => true,\n-            PatKind::Lit(ref lt) => {\n-                let ty = self.check_expr(lt);\n-                match ty.sty {\n-                    ty::Ref(..) => false,\n-                    _ => true,\n-                }\n-            }\n-            PatKind::Path(ref qpath) => {\n-                let resolution = self.resolve_ty_and_res_ufcs(qpath, pat.hir_id, pat.span);\n-                path_resolution = Some(resolution);\n-                match resolution.0 {\n-                    Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssocConst, _) => false,\n-                    _ => true,\n-                }\n-            }\n-            PatKind::Wild |\n-            PatKind::Binding(..) |\n-            PatKind::Ref(..) => false,\n+        let path_resolution = match &pat.node {\n+            PatKind::Path(qpath) => Some(self.resolve_ty_and_res_ufcs(qpath, pat.hir_id, pat.span)),\n+            _ => None,\n         };\n+\n+        let is_non_ref_pat = self.is_non_ref_pat(pat, path_resolution.map(|(res, ..)| res));\n         if is_non_ref_pat {\n             debug!(\"pattern is non reference pattern\");\n             let mut exp_ty = self.resolve_type_vars_with_obligations(&expected);\n@@ -560,6 +538,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // subtyping.\n     }\n \n+    /// Is the pattern a \"non reference pattern\"?\n+    /// When the pattern is a path pattern, `opt_path_res` must be `Some(res)`.\n+    fn is_non_ref_pat(&self, pat: &'tcx hir::Pat, opt_path_res: Option<Res>) -> bool {\n+        match pat.node {\n+            PatKind::Struct(..) |\n+            PatKind::TupleStruct(..) |\n+            PatKind::Or(_) |\n+            PatKind::Tuple(..) |\n+            PatKind::Box(_) |\n+            PatKind::Range(..) |\n+            PatKind::Slice(..) => true,\n+            PatKind::Lit(ref lt) => {\n+                let ty = self.check_expr(lt);\n+                match ty.sty {\n+                    ty::Ref(..) => false,\n+                    _ => true,\n+                }\n+            }\n+            PatKind::Path(_) => {\n+                match opt_path_res.unwrap() {\n+                    Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssocConst, _) => false,\n+                    _ => true,\n+                }\n+            }\n+            PatKind::Wild |\n+            PatKind::Binding(..) |\n+            PatKind::Ref(..) => false,\n+        }\n+    }\n+\n     fn borrow_pat_suggestion(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}]}