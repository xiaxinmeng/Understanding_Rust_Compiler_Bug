{"sha": "d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZDVlNGQyMTc4MDk3ZmJlOTJiMjZlNTdkMGUxOGRjMWVlZGJlNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-23T02:53:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-23T02:53:50Z"}, "message": "Auto merge of #20221 - liigo:rustdoc-sidebar-tooltips-v3, r=alexcrichton\n\nThis pull request add tooltips to most links of sidebar.\r\nThe tooltips display \"summary line\" of items' document.\r\n\r\nSome lengthy/annoying raw markdown code are eliminated, such as links and headers.\r\n- `[Rust](http://rust-lang.org)` displays as `Rust` (no URLs)\r\n- `# header` displays as `header` (no `#`s)\r\n\r\nSome inline spans, e.g. ``` `code` ``` and ```*emphasis*```, are kept as they are, for better readable.\r\n\r\nI've make sure `&` `'` `\"` `<` and `>` are properly displayed in tooltips, for example, `&'a Option<T>`.\r\n\r\nOnline preview: http://liigo.com/tmp/tooltips/std/index.html\r\n\r\n@alexcrichton @steveklabnik since you have reviewed my previous ([v1](https://github.com/rust-lang/rust/pull/13014),[v2](https://github.com/rust-lang/rust/pull/16448)) PRs of this serise, which have been closed for technical reasons. Thank you.", "tree": {"sha": "21595913f46325a665699acac95b7e56a488e64c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21595913f46325a665699acac95b7e56a488e64c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e", "html_url": "https://github.com/rust-lang/rust/commit/d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4874ca36f61d1975398c2ddb9e3d43443a8c373b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4874ca36f61d1975398c2ddb9e3d43443a8c373b", "html_url": "https://github.com/rust-lang/rust/commit/4874ca36f61d1975398c2ddb9e3d43443a8c373b"}, {"sha": "2b11a80a60dbae980418b229ab89d2a28dbbc15f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b11a80a60dbae980418b229ab89d2a28dbbc15f", "html_url": "https://github.com/rust-lang/rust/commit/2b11a80a60dbae980418b229ab89d2a28dbbc15f"}], "stats": {"total": 145, "additions": 130, "deletions": 15}, "files": [{"sha": "00182a80ab3dd828e414529299611fff3989fe9e", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 97, "deletions": 4, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e", "patch": "@@ -72,16 +72,40 @@ type blockcodefn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n type headerfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n                               libc::c_int, *mut libc::c_void);\n \n+type linkfn = extern \"C\" fn (*mut hoedown_buffer, *const hoedown_buffer,\n+                             *const hoedown_buffer, *const hoedown_buffer,\n+                             *mut libc::c_void) -> libc::c_int;\n+\n+type normaltextfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n+                                  *mut libc::c_void);\n+\n #[repr(C)]\n struct hoedown_renderer {\n-    opaque: *mut hoedown_html_renderer_state,\n+    opaque: *mut libc::c_void,\n+\n     blockcode: Option<blockcodefn>,\n     blockquote: Option<extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n                                      *mut libc::c_void)>,\n     blockhtml: Option<extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n                                     *mut libc::c_void)>,\n     header: Option<headerfn>,\n-    other: [libc::size_t; 28],\n+\n+    other_block_level_callbacks: [libc::size_t; 9],\n+\n+    /* span level callbacks - NULL or return 0 prints the span verbatim */\n+    other_span_level_callbacks_1: [libc::size_t; 9],\n+    link: Option<linkfn>,\n+    other_span_level_callbacks_2: [libc::size_t; 5],\n+    // hoedown will add `math` callback here, but we use an old version of it.\n+\n+    /* low level callbacks - NULL copies input directly into the output */\n+    entity: Option<extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n+                                 *mut libc::c_void)>,\n+    normal_text: Option<normaltextfn>,\n+\n+    /* header and footer */\n+    doc_header: Option<extern \"C\" fn(*mut hoedown_buffer, *mut libc::c_void)>,\n+    doc_footer: Option<extern \"C\" fn(*mut hoedown_buffer, *mut libc::c_void)>,\n }\n \n #[repr(C)]\n@@ -134,6 +158,8 @@ extern {\n     fn hoedown_document_free(md: *mut hoedown_document);\n \n     fn hoedown_buffer_new(unit: libc::size_t) -> *mut hoedown_buffer;\n+    fn hoedown_buffer_put(b: *mut hoedown_buffer, c: *const libc::c_char,\n+                          n: libc::size_t);\n     fn hoedown_buffer_puts(b: *mut hoedown_buffer, c: *const libc::c_char);\n     fn hoedown_buffer_free(b: *mut hoedown_buffer);\n \n@@ -279,7 +305,8 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n             dfltblk: (*renderer).blockcode.unwrap(),\n             toc_builder: if print_toc {Some(TocBuilder::new())} else {None}\n         };\n-        (*(*renderer).opaque).opaque = &mut opaque as *mut _ as *mut libc::c_void;\n+        (*((*renderer).opaque as *mut hoedown_html_renderer_state)).opaque\n+                = &mut opaque as *mut _ as *mut libc::c_void;\n         (*renderer).blockcode = Some(block as blockcodefn);\n         (*renderer).header = Some(header as headerfn);\n \n@@ -355,7 +382,8 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n         let renderer = hoedown_html_renderer_new(0, 0);\n         (*renderer).blockcode = Some(block as blockcodefn);\n         (*renderer).header = Some(header as headerfn);\n-        (*(*renderer).opaque).opaque = tests as *mut _ as *mut libc::c_void;\n+        (*((*renderer).opaque as *mut hoedown_html_renderer_state)).opaque\n+                = tests as *mut _ as *mut libc::c_void;\n \n         let document = hoedown_document_new(renderer, HOEDOWN_EXTENSIONS, 16);\n         hoedown_document_render(document, ob, doc.as_ptr(),\n@@ -442,9 +470,60 @@ impl<'a> fmt::Display for MarkdownWithToc<'a> {\n     }\n }\n \n+pub fn plain_summary_line(md: &str) -> String {\n+    extern fn link(_ob: *mut hoedown_buffer,\n+                       _link: *const hoedown_buffer,\n+                       _title: *const hoedown_buffer,\n+                       content: *const hoedown_buffer,\n+                       opaque: *mut libc::c_void) -> libc::c_int\n+    {\n+        unsafe {\n+            if !content.is_null() && (*content).size > 0 {\n+                let ob = opaque as *mut hoedown_buffer;\n+                hoedown_buffer_put(ob, (*content).data as *const libc::c_char,\n+                                   (*content).size);\n+            }\n+        }\n+        1\n+    }\n+\n+    extern fn normal_text(_ob: *mut hoedown_buffer,\n+                              text: *const hoedown_buffer,\n+                              opaque: *mut libc::c_void)\n+    {\n+        unsafe {\n+            let ob = opaque as *mut hoedown_buffer;\n+            hoedown_buffer_put(ob, (*text).data as *const libc::c_char,\n+                               (*text).size);\n+        }\n+    }\n+\n+    unsafe {\n+        let ob = hoedown_buffer_new(DEF_OUNIT);\n+        let mut plain_renderer: hoedown_renderer = ::std::mem::zeroed();\n+        let renderer = &mut plain_renderer as *mut hoedown_renderer;\n+        (*renderer).opaque = ob as *mut libc::c_void;\n+        (*renderer).link = Some(link as linkfn);\n+        (*renderer).normal_text = Some(normal_text as normaltextfn);\n+\n+        let document = hoedown_document_new(renderer, HOEDOWN_EXTENSIONS, 16);\n+        hoedown_document_render(document, ob, md.as_ptr(),\n+                                md.len() as libc::size_t);\n+        hoedown_document_free(document);\n+        let plain_slice = slice::from_raw_buf(&(*ob).data, (*ob).size as uint);\n+        let plain = match str::from_utf8(plain_slice) {\n+            Ok(s) => s.to_string(),\n+            Err(_) => \"\".to_string(),\n+        };\n+        hoedown_buffer_free(ob);\n+        plain\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::{LangString, Markdown};\n+    use super::plain_summary_line;\n \n     #[test]\n     fn test_lang_string_parse() {\n@@ -478,4 +557,18 @@ mod tests {\n         let markdown = \"# title\";\n         format!(\"{}\", Markdown(markdown.as_slice()));\n     }\n+\n+    #[test]\n+    fn test_plain_summary_line() {\n+        fn t(input: &str, expect: &str) {\n+            let output = plain_summary_line(input);\n+            assert_eq!(output, expect);\n+        }\n+\n+        t(\"hello [Rust](http://rust-lang.org) :)\", \"hello Rust :)\");\n+        t(\"code `let x = i32;` ...\", \"code `let x = i32;` ...\");\n+        t(\"type `Type<'static>` ...\", \"type `Type<'static>` ...\");\n+        t(\"# top header\", \"top header\");\n+        t(\"## header\", \"header\");\n+    }\n }"}, {"sha": "9a25993d28a6450ef40cf732fb6c8afd5d2cf948", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e", "patch": "@@ -64,8 +64,13 @@ use html::item_type::ItemType;\n use html::layout;\n use html::markdown::Markdown;\n use html::markdown;\n+use html::escape::Escape;\n use stability_summary;\n \n+/// A pair of name and its optional document.\n+#[derive(Clone, Eq, Ord, PartialEq, PartialOrd)]\n+pub struct NameDoc(String, Option<String>);\n+\n /// Major driving force in all rustdoc rendering. This contains information\n /// about where in the tree-like hierarchy rendering is occurring and controls\n /// how the current page is being rendered.\n@@ -95,7 +100,7 @@ pub struct Context {\n     /// functions), and the value is the list of containers belonging to this\n     /// header. This map will change depending on the surrounding context of the\n     /// page.\n-    pub sidebar: HashMap<String, Vec<String>>,\n+    pub sidebar: HashMap<String, Vec<NameDoc>>,\n     /// This flag indicates whether [src] links should be generated or not. If\n     /// the source files are present in the html rendering, then this will be\n     /// `true`.\n@@ -1245,7 +1250,7 @@ impl Context {\n         }\n     }\n \n-    fn build_sidebar(&self, m: &clean::Module) -> HashMap<String, Vec<String>> {\n+    fn build_sidebar(&self, m: &clean::Module) -> HashMap<String, Vec<NameDoc>> {\n         let mut map = HashMap::new();\n         for item in m.items.iter() {\n             if self.ignore_private_item(item) { continue }\n@@ -1262,7 +1267,7 @@ impl Context {\n             let short = short.to_string();\n             let v = map.entry(short).get().unwrap_or_else(\n                 |vacant_entry| vacant_entry.insert(Vec::with_capacity(1)));\n-            v.push(myname);\n+            v.push(NameDoc(myname, Some(shorter_line(item.doc_value()))));\n         }\n \n         for (_, items) in map.iter_mut() {\n@@ -1476,6 +1481,11 @@ fn shorter<'a>(s: Option<&'a str>) -> &'a str {\n     }\n }\n \n+#[inline]\n+fn shorter_line(s: Option<&str>) -> String {\n+    shorter(s).replace(\"\\n\", \" \")\n+}\n+\n fn document(w: &mut fmt::Formatter, item: &clean::Item) -> fmt::Result {\n     match item.doc_value() {\n         Some(s) => {\n@@ -2201,21 +2211,22 @@ impl<'a> fmt::Display for Sidebar<'a> {\n                 None => return Ok(())\n             };\n             try!(write!(w, \"<div class='block {}'><h2>{}</h2>\", short, longty));\n-            for item in items.iter() {\n+            for &NameDoc(ref name, ref doc) in items.iter() {\n                 let curty = shortty(cur).to_static_str();\n-                let class = if cur.name.as_ref().unwrap() == item &&\n+                let class = if cur.name.as_ref().unwrap() == name &&\n                                short == curty { \"current\" } else { \"\" };\n-                try!(write!(w, \"<a class='{ty} {class}' href='{href}{path}'>\\\n-                                {name}</a>\",\n+                try!(write!(w, \"<a class='{ty} {class}' href='{href}{path}' \\\n+                                title='{title}'>{name}</a>\",\n                        ty = short,\n                        class = class,\n                        href = if curty == \"mod\" {\"../\"} else {\"\"},\n                        path = if short == \"mod\" {\n-                           format!(\"{}/index.html\", item.as_slice())\n+                           format!(\"{}/index.html\", name.as_slice())\n                        } else {\n-                           format!(\"{}.{}.html\", short, item.as_slice())\n+                           format!(\"{}.{}.html\", short, name.as_slice())\n                        },\n-                       name = item.as_slice()));\n+                       title = Escape(doc.as_ref().unwrap().as_slice()),\n+                       name = name.as_slice()));\n             }\n             try!(write!(w, \"</div>\"));\n             Ok(())"}, {"sha": "aac3985f0cc9cd967115c98c7381b696f1e43eb6", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e", "patch": "@@ -668,6 +668,15 @@\n             search();\n         }\n \n+        function plainSummaryLine(markdown) {\n+            var str = markdown.replace(/\\n/g, ' ')\n+            str = str.replace(/'/g, \"\\'\")\n+            str = str.replace(/^#+? (.+?)/, \"$1\")\n+            str = str.replace(/\\[(.*?)\\]\\(.*?\\)/g, \"$1\")\n+            str = str.replace(/\\[(.*?)\\]\\[.*?\\]/g, \"$1\")\n+            return str;\n+        }\n+\n         index = buildIndex(rawSearchIndex);\n         startSearch();\n \n@@ -688,8 +697,10 @@\n                 if (crates[i] == window.currentCrate) {\n                     klass += ' current';\n                 }\n+                var desc = rawSearchIndex[crates[i]].items[0][3];\n                 div.append($('<a>', {'href': '../' + crates[i] + '/index.html',\n-                                    'class': klass}).text(crates[i]));\n+                                     'title': plainSummaryLine(desc),\n+                                     'class': klass}).text(crates[i]));\n             }\n             sidebar.append(div);\n         }"}]}