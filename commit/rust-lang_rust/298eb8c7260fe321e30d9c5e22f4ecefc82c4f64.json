{"sha": "298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OGViOGM3MjYwZmUzMjFlMzBkOWM1ZTIyZjRlY2VmYzgyYzRmNjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-08T01:08:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-11T02:04:26Z"}, "message": "Convert 'import' to 'use'. Remove 'import' keyword.", "tree": {"sha": "ddd18bdc6c940595bd1df41cfa5d414ffa862a5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddd18bdc6c940595bd1df41cfa5d414ffa862a5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "html_url": "https://github.com/rust-lang/rust/commit/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9", "html_url": "https://github.com/rust-lang/rust/commit/1a8a0a77b14c44d98501cd9fb0f14ed88d4c38d9"}], "stats": {"total": 430, "additions": 195, "deletions": 235}, "files": [{"sha": "a9f50492f2be3607173f6c75974f7279ce8784db", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1,5 +1,3 @@\n-import option;\n-\n enum mode { mode_compile_fail, mode_run_fail, mode_run_pass, mode_pretty, }\n \n impl mode : cmp::Eq {"}, {"sha": "201edcb0f268067ee3cd869685ed644c716b6787", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -7,7 +7,7 @@\n use core(vers = \"0.4\");\n use std(vers = \"0.4\");\n \n-import core::*;\n+use core::*;\n \n mod procsrv;\n mod util;"}, {"sha": "4b24c5fd2957d50c8a73c65478930e91a892e5df", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1,20 +1,16 @@\n-import option;\n-import std::getopts;\n-import std::test;\n-import str;\n-import vec;\n-import task;\n-\n-import core::result;\n-import result::{Ok, Err};\n-\n-import common::config;\n-import common::mode_run_pass;\n-import common::mode_run_fail;\n-import common::mode_compile_fail;\n-import common::mode_pretty;\n-import common::mode;\n-import util::logv;\n+use std::getopts;\n+use std::test;\n+\n+use core::result;\n+use result::{Ok, Err};\n+\n+use common::config;\n+use common::mode_run_pass;\n+use common::mode_run_fail;\n+use common::mode_compile_fail;\n+use common::mode_pretty;\n+use common::mode;\n+use util::logv;\n \n fn main(args: ~[~str]) {\n     let config = parse_config(args);"}, {"sha": "e7d6593061d70c06963780fb6b6879830a77b8e9", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1,5 +1,5 @@\n-import common::config;\n-import io::ReaderUtil;\n+use common::config;\n+use io::ReaderUtil;\n \n export load_errors;\n export expected_error;"}, {"sha": "521b603f1b434fd67c5519ba306dde514c307f78", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1,8 +1,5 @@\n-import option;\n-import str;\n-\n-import common::config;\n-import io::ReaderUtil;\n+use common::config;\n+use io::ReaderUtil;\n \n export test_props;\n export load_props;"}, {"sha": "90f88ea9d7a4bcd9ae2e1864895fb8e532509df8", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1,6 +1,6 @@\n-import run::spawn_process;\n-import io::{ReaderUtil, WriterUtil};\n-import libc::{c_int, pid_t};\n+use run::spawn_process;\n+use io::{ReaderUtil, WriterUtil};\n+use libc::{c_int, pid_t};\n \n export run;\n "}, {"sha": "55f17c245dc18e6d9262d0c293d14765379d18f2", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1,13 +1,13 @@\n-import io::WriterUtil;\n-\n-import common::mode_run_pass;\n-import common::mode_run_fail;\n-import common::mode_compile_fail;\n-import common::mode_pretty;\n-import common::config;\n-import header::load_props;\n-import header::test_props;\n-import util::logv;\n+use io::WriterUtil;\n+\n+use common::mode_run_pass;\n+use common::mode_run_fail;\n+use common::mode_compile_fail;\n+use common::mode_pretty;\n+use common::config;\n+use header::load_props;\n+use header::test_props;\n+use util::logv;\n \n export run;\n "}, {"sha": "ac0b4b03596eaf3a6d23024ad5191ab5c4dca44c", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1,7 +1,6 @@\n-import option;\n-import os::getenv;\n+use os::getenv;\n \n-import common::config;\n+use common::config;\n \n fn make_new_path(path: ~str) -> ~str {\n "}, {"sha": "ea736d81a9546df7997578164cb1f1b6f03bb8ec", "filename": "src/libcore/core.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -75,7 +75,7 @@ export priv;\n /// Operations and constants for `int`\n #[path = \"int-template\"]\n mod int {\n-    import inst::{ hash, pow };\n+    use inst::{ hash, pow };\n     export hash, pow;\n     #[path = \"int.rs\"]\n     mod inst;\n@@ -112,7 +112,7 @@ mod i64 {\n /// Operations and constants for `uint`\n #[path = \"uint-template\"]\n mod uint {\n-    import inst::{\n+    use inst::{\n         div_ceil, div_round, div_floor, hash, iterate,\n         next_power_of_two\n     };\n@@ -126,7 +126,7 @@ mod uint {\n /// Operations and constants for `u8`\n #[path = \"uint-template\"]\n mod u8 {\n-    import inst::is_ascii;\n+    use inst::is_ascii;\n     export is_ascii;\n \n     #[path = \"u8.rs\"]"}, {"sha": "6f2e5516c06dac7c17ae788b82ea15817c5dfc8a", "filename": "src/libcore/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -97,7 +97,7 @@ mod core {\n #[cfg(test)]\n mod std {\n     use std(vers = \"0.4\");\n-    import std::test;\n+    use std::test;\n }\n \n /**"}, {"sha": "94bf4808352ba45a24690e4d7284e5812390f649", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -25,10 +25,10 @@ with destructors.\n \n */\n \n-import stackwalk::Word;\n-import libc::size_t;\n-import libc::uintptr_t;\n-import send_map::linear::LinearMap;\n+use stackwalk::Word;\n+use libc::size_t;\n+use libc::uintptr_t;\n+use send_map::linear::LinearMap;\n \n export Word;\n export gc;"}, {"sha": "7adf92f96b3e57971385b634c3cd51e1cbed00ad", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -210,7 +210,7 @@ fn test_from_str() {\n #[test]\n #[ignore]\n fn test_parse_buf() {\n-    import str::to_bytes;\n+    use str::to_bytes;\n     assert parse_buf(to_bytes(~\"123\"), 10u) == Some(123 as T);\n     assert parse_buf(to_bytes(~\"1001\"), 2u) == Some(9 as T);\n     assert parse_buf(to_bytes(~\"123\"), 8u) == Some(83 as T);\n@@ -263,7 +263,7 @@ fn test_interfaces() {\n \n #[test]\n fn test_times() {\n-    import iter::Times;\n+    use iter::Times;\n     let ten = 10 as T;\n     let mut accum = 0;\n     for ten.times { accum += 1; }\n@@ -274,6 +274,6 @@ fn test_times() {\n #[should_fail]\n #[ignore(cfg(windows))]\n fn test_times_negative() {\n-    import iter::Times;\n+    use iter::Times;\n     for (-10).times { log(error, ~\"nope!\"); }\n }"}, {"sha": "491fe02ec31f9b3557812ffc1e0cbf2743177f11", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1143,7 +1143,7 @@ mod funcs {\n \n     #[cfg(target_os = \"win32\")]\n     mod extra {\n-        import types::os::arch::extra::*;\n+        use types::os::arch::extra::*;\n \n         #[abi = \"stdcall\"]\n         extern mod kernel32 {"}, {"sha": "3967f549e4c2bf455374602a840be4c19bcd13a5", "filename": "src/libcore/os.rs", "status": "modified", "additions": 39, "deletions": 40, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -78,14 +78,14 @@ fn fill_charp_buf(f: fn(*mut c_char, size_t) -> bool)\n \n #[cfg(windows)]\n mod win32 {\n-    import dword = libc::types::os::arch::extra::DWORD;\n+    use dword = libc::types::os::arch::extra::DWORD;\n \n     fn fill_utf16_buf_and_decode(f: fn(*mut u16, dword) -> dword)\n         -> Option<~str> {\n \n         // FIXME: remove these when export globs work properly. #1238\n-        import libc::funcs::extra::kernel32::*;\n-        import libc::consts::os::extra::*;\n+        use libc::funcs::extra::kernel32::*;\n+        use libc::consts::os::extra::*;\n \n         let mut n = tmpbuf_sz as dword;\n         let mut res = None;\n@@ -233,9 +233,9 @@ mod global_env {\n \n         #[cfg(windows)]\n         fn getenv(n: &str) -> Option<~str> {\n-            import libc::types::os::arch::extra::*;\n-            import libc::funcs::extra::kernel32::*;\n-            import win32::*;\n+            use libc::types::os::arch::extra::*;\n+            use libc::funcs::extra::kernel32::*;\n+            use win32::*;\n             do as_utf16_p(n) |u| {\n                 do fill_utf16_buf_and_decode() |buf, sz| {\n                     GetEnvironmentVariableW(u, buf, sz)\n@@ -248,7 +248,7 @@ mod global_env {\n         fn setenv(n: &str, v: &str) {\n \n             // FIXME: remove this when export globs work properly. #1238\n-            import libc::funcs::posix01::unistd::setenv;\n+            use libc::funcs::posix01::unistd::setenv;\n             do str::as_c_str(n) |nbuf| {\n                 do str::as_c_str(v) |vbuf| {\n                     setenv(nbuf, vbuf, 1i32);\n@@ -260,8 +260,8 @@ mod global_env {\n         #[cfg(windows)]\n         fn setenv(n: &str, v: &str) {\n             // FIXME: remove imports when export globs work properly. #1238\n-            import libc::funcs::extra::kernel32::*;\n-            import win32::*;\n+            use libc::funcs::extra::kernel32::*;\n+            use win32::*;\n             do as_utf16_p(n) |nbuf| {\n                 do as_utf16_p(v) |vbuf| {\n                     SetEnvironmentVariableW(nbuf, vbuf);\n@@ -283,13 +283,13 @@ fn fdopen(fd: c_int) -> *FILE {\n \n #[cfg(windows)]\n fn fsync_fd(fd: c_int, _level: io::fsync::Level) -> c_int {\n-    import libc::funcs::extra::msvcrt::*;\n+    use libc::funcs::extra::msvcrt::*;\n     return commit(fd);\n }\n \n #[cfg(target_os = \"linux\")]\n fn fsync_fd(fd: c_int, level: io::fsync::Level) -> c_int {\n-    import libc::funcs::posix01::unistd::*;\n+    use libc::funcs::posix01::unistd::*;\n     match level {\n       io::fsync::FSync\n       | io::fsync::FullFSync => return fsync(fd),\n@@ -299,9 +299,9 @@ fn fsync_fd(fd: c_int, level: io::fsync::Level) -> c_int {\n \n #[cfg(target_os = \"macos\")]\n fn fsync_fd(fd: c_int, level: io::fsync::Level) -> c_int {\n-    import libc::consts::os::extra::*;\n-    import libc::funcs::posix88::fcntl::*;\n-    import libc::funcs::posix01::unistd::*;\n+    use libc::consts::os::extra::*;\n+    use libc::funcs::posix88::fcntl::*;\n+    use libc::funcs::posix01::unistd::*;\n     match level {\n       io::fsync::FSync => return fsync(fd),\n       _ => {\n@@ -316,7 +316,7 @@ fn fsync_fd(fd: c_int, level: io::fsync::Level) -> c_int {\n \n #[cfg(target_os = \"freebsd\")]\n fn fsync_fd(fd: c_int, _l: io::fsync::Level) -> c_int {\n-    import libc::funcs::posix01::unistd::*;\n+    use libc::funcs::posix01::unistd::*;\n     return fsync(fd);\n }\n \n@@ -328,7 +328,7 @@ fn waitpid(pid: pid_t) -> c_int {\n \n #[cfg(unix)]\n fn waitpid(pid: pid_t) -> c_int {\n-    import libc::funcs::posix01::wait::*;\n+    use libc::funcs::posix01::wait::*;\n     let status = 0 as c_int;\n \n     assert (waitpid(pid, ptr::mut_addr_of(status),\n@@ -350,7 +350,7 @@ fn pipe() -> {in: c_int, out: c_int} {\n #[cfg(windows)]\n fn pipe() -> {in: c_int, out: c_int} {\n     // FIXME: remove this when export globs work properly. #1238\n-    import libc::consts::os::extra::*;\n+    use libc::consts::os::extra::*;\n     // Windows pipes work subtly differently than unix pipes, and their\n     // inheritance has to be handled in a different way that I do not fully\n     // understand. Here we explicitly make the pipe non-inheritable, which\n@@ -388,8 +388,8 @@ fn self_exe_path() -> Option<Path> {\n     #[cfg(target_os = \"freebsd\")]\n     fn load_self() -> Option<~str> {\n         unsafe {\n-            import libc::funcs::bsd44::*;\n-            import libc::consts::os::extra::*;\n+            use libc::funcs::bsd44::*;\n+            use libc::consts::os::extra::*;\n             do fill_charp_buf() |buf, sz| {\n                 let mib = ~[CTL_KERN as c_int,\n                            KERN_PROC as c_int,\n@@ -403,7 +403,7 @@ fn self_exe_path() -> Option<Path> {\n \n     #[cfg(target_os = \"linux\")]\n     fn load_self() -> Option<~str> {\n-        import libc::funcs::posix01::unistd::readlink;\n+        use libc::funcs::posix01::unistd::readlink;\n         do fill_charp_buf() |buf, sz| {\n             do as_c_charp(\"/proc/self/exe\") |proc_self_buf| {\n                 readlink(proc_self_buf, buf, sz) != (-1 as ssize_t)\n@@ -414,7 +414,7 @@ fn self_exe_path() -> Option<Path> {\n     #[cfg(target_os = \"macos\")]\n     fn load_self() -> Option<~str> {\n         // FIXME: remove imports when export globs work properly. #1238\n-        import libc::funcs::extra::*;\n+        use libc::funcs::extra::*;\n         do fill_charp_buf() |buf, sz| {\n             _NSGetExecutablePath(buf, ptr::mut_addr_of(sz as u32))\n                 == (0 as c_int)\n@@ -424,9 +424,9 @@ fn self_exe_path() -> Option<Path> {\n     #[cfg(windows)]\n     fn load_self() -> Option<~str> {\n         // FIXME: remove imports when export globs work properly. #1238\n-        import libc::types::os::arch::extra::*;\n-        import libc::funcs::extra::kernel32::*;\n-        import win32::*;\n+        use libc::types::os::arch::extra::*;\n+        use libc::funcs::extra::kernel32::*;\n+        use win32::*;\n         do fill_utf16_buf_and_decode() |buf, sz| {\n             GetModuleFileNameW(0u as dword, buf, sz)\n         }\n@@ -592,9 +592,9 @@ fn make_dir(p: &Path, mode: c_int) -> bool {\n     #[cfg(windows)]\n     fn mkdir(p: &Path, _mode: c_int) -> bool {\n         // FIXME: remove imports when export globs work properly. #1238\n-        import libc::types::os::arch::extra::*;\n-        import libc::funcs::extra::kernel32::*;\n-        import win32::*;\n+        use libc::types::os::arch::extra::*;\n+        use libc::funcs::extra::kernel32::*;\n+        use win32::*;\n         // FIXME: turn mode into something useful? #2623\n         do as_utf16_p(p.to_str()) |buf| {\n             CreateDirectoryW(buf, unsafe { unsafe::reinterpret_cast(&0) })\n@@ -641,9 +641,9 @@ fn remove_dir(p: &Path) -> bool {\n     #[cfg(windows)]\n     fn rmdir(p: &Path) -> bool {\n         // FIXME: remove imports when export globs work properly. #1238\n-        import libc::funcs::extra::kernel32::*;\n-        import libc::types::os::arch::extra::*;\n-        import win32::*;\n+        use libc::funcs::extra::kernel32::*;\n+        use libc::types::os::arch::extra::*;\n+        use win32::*;\n         return do as_utf16_p(p.to_str()) |buf| {\n             RemoveDirectoryW(buf) != (0 as BOOL)\n         };\n@@ -663,9 +663,9 @@ fn change_dir(p: &Path) -> bool {\n     #[cfg(windows)]\n     fn chdir(p: &Path) -> bool {\n         // FIXME: remove imports when export globs work properly. #1238\n-        import libc::funcs::extra::kernel32::*;\n-        import libc::types::os::arch::extra::*;\n-        import win32::*;\n+        use libc::funcs::extra::kernel32::*;\n+        use libc::types::os::arch::extra::*;\n+        use win32::*;\n         return do as_utf16_p(p.to_str()) |buf| {\n             SetCurrentDirectoryW(buf) != (0 as BOOL)\n         };\n@@ -686,9 +686,9 @@ fn copy_file(from: &Path, to: &Path) -> bool {\n     #[cfg(windows)]\n     fn do_copy_file(from: &Path, to: &Path) -> bool {\n         // FIXME: remove imports when export globs work properly. #1238\n-        import libc::funcs::extra::kernel32::*;\n-        import libc::types::os::arch::extra::*;\n-        import win32::*;\n+        use libc::funcs::extra::kernel32::*;\n+        use libc::types::os::arch::extra::*;\n+        use win32::*;\n         return do as_utf16_p(from.to_str()) |fromp| {\n             do as_utf16_p(to.to_str()) |top| {\n                 CopyFileW(fromp, top, (0 as BOOL)) != (0 as BOOL)\n@@ -750,9 +750,9 @@ fn remove_file(p: &Path) -> bool {\n     fn unlink(p: &Path) -> bool {\n         // FIXME (similar to Issue #2006): remove imports when export globs\n         // work properly.\n-        import libc::funcs::extra::kernel32::*;\n-        import libc::types::os::arch::extra::*;\n-        import win32::*;\n+        use libc::funcs::extra::kernel32::*;\n+        use libc::types::os::arch::extra::*;\n+        use win32::*;\n         return do as_utf16_p(p.to_str()) |buf| {\n             DeleteFileW(buf) != (0 as BOOL)\n         };\n@@ -836,7 +836,6 @@ mod tests {\n     }\n \n     fn make_rand_name() -> ~str {\n-        import rand;\n         let rng: rand::Rng = rand::Rng();\n         let n = ~\"TEST\" + rng.gen_str(10u);\n         assert option::is_none(getenv(n));"}, {"sha": "be3ab40dfcd1881c34396a72b09d94adc0747bc2", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -263,8 +263,8 @@ fn test() {\n \n #[test]\n fn test_position() {\n-    import str::as_c_str;\n-    import libc::c_char;\n+    use str::as_c_str;\n+    use libc::c_char;\n \n     let s = ~\"hello\";\n     unsafe {"}, {"sha": "357c3fba7448eb783333f55300d2808113721812", "filename": "src/libcore/rt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -8,7 +8,7 @@ use libc::c_void;\n use libc::size_t;\n use libc::uintptr_t;\n \n-import gc::{cleanup_stack_for_failure, gc, Word};\n+use gc::{cleanup_stack_for_failure, gc, Word};\n \n #[allow(non_camel_case_types)]\n type rust_task = c_void;"}, {"sha": "aedc67b00f57b348319141bfbe18c668254fe140", "filename": "src/libcore/run.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -336,7 +336,7 @@ fn program_output(prog: &str, args: &[~str]) ->\n }\n \n fn writeclose(fd: c_int, s: &str) {\n-    import io::WriterUtil;\n+    use io::WriterUtil;\n \n     error!(\"writeclose %d, %s\", fd as int, s);\n     let writer = io::fd_writer(fd, false);\n@@ -402,7 +402,7 @@ fn waitpid(pid: pid_t) -> int {\n #[cfg(test)]\n mod tests {\n \n-    import io::WriterUtil;\n+    use io::WriterUtil;\n \n     // Regression test for memory leaks\n     #[ignore(cfg(windows))] // FIXME (#2626)"}, {"sha": "3fe921aa1e7858a542180253c09c8ed8a2aa8c22", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -362,7 +362,7 @@ mod linear {\n #[test]\n mod test {\n \n-    import linear::LinearMap;\n+    use linear::LinearMap;\n \n     fn int_linear_map<V>() -> LinearMap<uint,V> {\n         return LinearMap();"}, {"sha": "86073915f41ee634c0b62e8481ce4bd16c809af1", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -2303,7 +2303,7 @@ impl &str: StrSlice {\n #[cfg(test)]\n mod tests {\n \n-    import libc::c_char;\n+    use libc::c_char;\n \n     #[test]\n     fn test_eq() {"}, {"sha": "1da46d780bee4f5d50b2f3e3e37e5f8616f1d959", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -276,7 +276,7 @@ fn test_from_str() {\n #[test]\n #[ignore]\n fn test_parse_buf() {\n-    import str::to_bytes;\n+    use str::to_bytes;\n     assert parse_buf(to_bytes(~\"123\"), 10u) == Some(123u as T);\n     assert parse_buf(to_bytes(~\"1001\"), 2u) == Some(9u as T);\n     assert parse_buf(to_bytes(~\"123\"), 8u) == Some(83u as T);\n@@ -304,7 +304,7 @@ fn to_str_radix17() {\n \n #[test]\n fn test_times() {\n-    import iter::Times;\n+    use iter::Times;\n     let ten = 10 as T;\n     let mut accum = 0;\n     for ten.times { accum += 1; }"}, {"sha": "a1f7beb57a7119bee2c883fbe970b999c60890c0", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -444,7 +444,7 @@ impl<T: Const Send> &RWReadMode<T> {\n \n #[cfg(test)]\n mod tests {\n-    import comm::*;\n+    use comm::*;\n \n     #[test]\n     fn manually_share_arc() {"}, {"sha": "c02fb9d75fcc0f7166ab702893ee0f7ba8950e5d", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -138,7 +138,7 @@ unsafe fn ptr<T>(t: CVec<T>) -> *mut T {\n \n #[cfg(test)]\n mod tests {\n-    import libc::*;\n+    use libc::*;\n \n     fn malloc(n: size_t) -> CVec<u8> {\n         let mem = libc::malloc(n);"}, {"sha": "36492834c2ac3818224bd87aa2feb44fc71daf12", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -456,8 +456,8 @@ impl FailType : Eq {\n \n #[cfg(test)]\n mod tests {\n-    import opt = getopts;\n-    import result::{Err, Ok};\n+    use opt = getopts;\n+    use result::{Err, Ok};\n \n     fn check_fail_type(+f: Fail_, ft: FailType) {\n         match f {"}, {"sha": "5652b81b55e455fb902ec1d797c3a5551ba4b990", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1087,7 +1087,7 @@ mod tests {\n \n     #[test]\n     fn test_decode_form_urlencoded() {\n-        import map::hash_from_strs;\n+        use map::hash_from_strs;\n \n         assert decode_form_urlencoded(~[]).size() == 0;\n "}, {"sha": "84d4e49ef90d3dde0ad8cbeddb832c51bc34901a", "filename": "src/libstd/time.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -848,7 +848,6 @@ impl Tm {\n \n #[cfg(test)]\n mod tests {\n-    import task;\n \n     #[test]\n     fn test_get_time() {"}, {"sha": "9b6a2b85852000e44f058f367bc173835349c8cf", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -181,7 +181,7 @@ mod test {\n             for spec.each |spec| {\n                 let (times, maxms) = spec;\n                 do task::spawn {\n-                    import rand::*;\n+                    use rand::*;\n                     let rng = Rng();\n                     for iter::repeat(times) {\n                         sleep(hl_loop, rng.next() as uint % maxms);"}, {"sha": "6a31dac2e8f9a1e0af02f926b62ebcaee5c8641a", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -78,10 +78,8 @@ export expand;\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {\n-    import ext;\n-    export ext;\n-    import parse;\n-    export parse;\n+    pub use ext;\n+    pub use parse;\n }\n \n type ser_tps_map = map::HashMap<ast::ident, fn@(@ast::expr) -> ~[@ast::stmt]>;"}, {"sha": "7894a8d05d34fabfa55d51eaa9ef71253e0a4e7f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -299,9 +299,9 @@ fn get_mac_body(cx: ext_ctxt, sp: span, args: ast::mac_body)\n // using new syntax. This will be obsolete when #old_macros go away.\n fn tt_args_to_original_flavor(cx: ext_ctxt, sp: span, arg: ~[ast::token_tree])\n     -> ast::mac_arg {\n-    import ast::{matcher, matcher_, match_tok, match_seq, match_nonterminal};\n-    import parse::lexer::{new_tt_reader, reader};\n-    import tt::macro_parser::{parse_or_else, matched_seq,\n+    use ast::{matcher, matcher_, match_tok, match_seq, match_nonterminal};\n+    use parse::lexer::{new_tt_reader, reader};\n+    use tt::macro_parser::{parse_or_else, matched_seq,\n                               matched_nonterminal};\n \n     // these spans won't matter, anyways"}, {"sha": "a4512b7b0989497772d6900ebce4a20ee9ef04a3", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -10,10 +10,8 @@ use ext::base::mk_ctxt;\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {\n-    import ext;\n-    export ext;\n-    import parse;\n-    export parse;\n+    pub use ext;\n+    pub use parse;\n }\n \n fn path(ids: ~[ident], span: span) -> @ast::path {"}, {"sha": "600c30f1f8b3cd6aad1e18144e239e702417a6fd", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -16,10 +16,8 @@ use ast_builder::{append_types, path, empty_span};\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {\n-    import ext;\n-    export ext;\n-    import parse;\n-    export parse;\n+    pub use ext;\n+    pub use parse;\n }\n \n trait gen_send {\n@@ -321,7 +319,7 @@ impl protocol: gen_init {\n         };\n \n         cx.parse_item(fmt!(\"fn init%s() -> (client::%s, server::%s)\\\n-                            { import pipes::HasBuffer; %s }\",\n+                            { use pipes::HasBuffer; %s }\",\n                            start_state.ty_params.to_source(cx),\n                            start_state.to_ty(cx).to_source(cx),\n                            start_state.to_ty(cx).to_source(cx),"}, {"sha": "74370d005ce75844ef08a9ee3a96440f29c734e3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -3345,15 +3345,6 @@ impl parser {\n                 vis: visibility,\n                 span: mk_sp(lo, self.last_span.hi)\n             });\n-        } else if self.eat_keyword(~\"import\") {\n-            let view_paths = self.parse_view_paths();\n-            self.expect(token::SEMI);\n-            return iovi_view_item(@{\n-                node: view_item_import(view_paths),\n-                attrs: attrs,\n-                vis: visibility,\n-                span: mk_sp(lo, self.last_span.hi)\n-            });\n         } else if self.eat_keyword(~\"export\") {\n             let view_paths = self.parse_view_paths();\n             self.expect(token::SEMI);\n@@ -3506,7 +3497,6 @@ impl parser {\n             next_tok = self.look_ahead(2);\n         };\n         self.token_is_keyword(~\"use\", tok)\n-            || self.token_is_keyword(~\"import\", tok)\n             || self.token_is_keyword(~\"export\", tok)\n             || (self.token_is_keyword(~\"extern\", tok) &&\n                 self.token_is_keyword(~\"mod\", next_tok))\n@@ -3516,8 +3506,6 @@ impl parser {\n         let lo = self.span.lo, vis = self.parse_visibility();\n         let node = if self.eat_keyword(~\"use\") {\n             self.parse_use(vis)\n-        } else if self.eat_keyword(~\"import\") {\n-            view_item_import(self.parse_view_paths())\n         } else if self.eat_keyword(~\"export\") {\n             view_item_export(self.parse_view_paths())\n         } else if self.eat_keyword(~\"extern\") {"}, {"sha": "cfef2f96581cbb05e0cc118289674b6bdbe3ab32", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -279,7 +279,7 @@ pure fn is_bar(t: token) -> bool {\n \n \n mod special_idents {\n-    import ast::ident;\n+    use ast::ident;\n     const underscore : ident = 0u;\n     const anon : ident = 1u;\n     const dtor : ident = 2u; // 'drop', but that's reserved\n@@ -433,7 +433,7 @@ fn strict_keyword_table() -> HashMap<~str, ()> {\n         ~\"do\", ~\"drop\",\n         ~\"else\", ~\"enum\", ~\"export\", ~\"extern\",\n         ~\"false\", ~\"for\",\n-        ~\"if\", ~\"import\",\n+        ~\"if\",\n         ~\"let\", ~\"log\", ~\"loop\",\n         ~\"match\", ~\"mod\", ~\"move\", ~\"mut\",\n         ~\"pure\","}, {"sha": "62ec882e3457c4ee0708a858fe87f0dfb7f39a11", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1757,7 +1757,7 @@ fn print_view_item(s: ps, item: @ast::view_item) {\n       }\n \n       ast::view_item_import(vps) => {\n-        head(s, ~\"import\");\n+        head(s, ~\"use\");\n         print_view_paths(s, vps);\n       }\n "}, {"sha": "ec41d144ce1dec9fe3c6d46f68e6fedfcefc44d7", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -296,7 +296,7 @@ fn building_library(req_crate_type: crate_type, crate: @ast::crate,\n }\n \n fn sess_os_to_meta_os(os: os) -> metadata::loader::os {\n-    import metadata::loader;\n+    use metadata::loader;\n \n     match os {\n       os_win32 => loader::os_win32,\n@@ -308,7 +308,7 @@ fn sess_os_to_meta_os(os: os) -> metadata::loader::os {\n \n #[cfg(test)]\n mod test {\n-    import syntax::ast_util;\n+    use syntax::ast_util;\n \n     fn make_crate_type_attr(t: ~str) -> ast::attribute {\n         ast_util::respan(ast_util::dummy_sp(), {"}, {"sha": "66e53cf4540c2f2fa7cf4dc643ecd0f5fe3c9799", "filename": "src/rustc/metadata.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -3,10 +3,8 @@\n // no dependencies on rustc it can move into its own crate.\n \n mod middle {\n-    import ty = middle_::ty;\n-    export ty;\n-    import resolve = middle_::resolve;\n-    export resolve;\n+    pub use middle_::ty;\n+    pub use middle_::resolve;\n }\n \n mod front {\n@@ -19,11 +17,9 @@ mod driver {\n }\n \n mod util {\n-    import ppaux = util_::ppaux;\n-    export ppaux;\n+    pub use util_::ppaux;\n }\n \n mod lib {\n-    import llvm = lib_::llvm;\n-    export llvm;\n+    pub use lib_::llvm;\n }"}, {"sha": "1d007fbfdd0deaaf9703bc35fc16fb70d07da340", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -55,7 +55,7 @@ fn dump_crates(crate_cache: DVec<cache_entry>) {\n \n fn warn_if_multiple_versions(e: env, diag: span_handler,\n                              crate_cache: ~[cache_entry]) {\n-    import either::*;\n+    use either::*;\n \n     if crate_cache.len() != 0u {\n         let name = loader::crate_name_from_metas(*crate_cache.last().metas);"}, {"sha": "d51d07259a3d201cfc22224e62e5a0f19023154c", "filename": "src/rustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fconst_eval.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -206,7 +206,7 @@ impl const_val: cmp::Eq {\n \n // FIXME: issue #1417\n fn eval_const_expr(tcx: middle::ty::ctxt, e: @expr) -> const_val {\n-    import middle::ty;\n+    use middle::ty;\n     fn fromb(b: bool) -> const_val { const_int(b as i64) }\n     match e.node {\n       expr_unary(neg, inner) => {"}, {"sha": "2f2d0392a7fa779d01ea06e7299f2be78526a7bc", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1220,7 +1220,7 @@ fn with_scope_datumblock(bcx: block, opt_node_info: Option<node_info>,\n                          name: ~str, f: fn(block) -> datum::DatumBlock)\n     -> datum::DatumBlock\n {\n-    import datum::DatumBlock;\n+    use datum::DatumBlock;\n \n     let _icx = bcx.insn_ctxt(\"with_scope_result\");\n     let scope_cx = scope_block(bcx, opt_node_info, name);"}, {"sha": "e29d69562613b5267518f6d01acf2d507f09be4e", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -293,7 +293,7 @@ impl reflector {\n fn emit_calls_to_trait_visit_ty(bcx: block, t: ty::t,\n                                 visitor_val: ValueRef,\n                                 visitor_trait_id: def_id) -> block {\n-    import syntax::parse::token::special_idents::tydesc;\n+    use syntax::parse::token::special_idents::tydesc;\n     let final = sub_block(bcx, ~\"final\");\n     assert bcx.ccx().tcx.intrinsic_defs.contains_key(tydesc);\n     let (_, tydesc_ty) = bcx.ccx().tcx.intrinsic_defs.get(tydesc);"}, {"sha": "cda89e3b08338a9e9f03108bfe6873d6d9d7cfbd", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -104,7 +104,7 @@ fn exec<T:Send>(\n fn build_ctxt(sess: session,\n               ast: @ast::crate) -> ctxt {\n \n-    import rustc::front::config;\n+    use rustc::front::config;\n \n     let ast = config::strip_unconfigured_items(ast);\n     let ast = syntax::ext::expand::expand_crate(sess.parse_sess,\n@@ -201,7 +201,7 @@ fn srv_should_build_ast_map() {\n \n #[test]\n fn should_ignore_external_import_paths_that_dont_exist() {\n-    let source = ~\"use forble; import forble::bippy;\";\n+    let source = ~\"use forble; use forble::bippy;\";\n     from_str(source, |_srv| { } )\n }\n "}, {"sha": "ebb892e5212153948acde3380731e53bb95d630b", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -21,11 +21,11 @@ type crate_attrs = {\n mod test {\n \n     fn parse_attributes(source: ~str) -> ~[ast::attribute] {\n-        import syntax::parse;\n-        import parse::parser;\n-        import parse::attr::parser_attr;\n-        import syntax::codemap;\n-        import syntax::diagnostic;\n+        use syntax::parse;\n+        use parse::parser;\n+        use parse::attr::parser_attr;\n+        use syntax::codemap;\n+        use syntax::diagnostic;\n \n         let parse_sess = syntax::parse::new_parse_sess(None);\n         let parser = parse::new_parser_from_source_str("}, {"sha": "3e6f46dbe265e23255068a6191d0b82e74c67d5a", "filename": "src/rustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fconfig.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -71,7 +71,7 @@ fn opts() -> ~[(getopts::Opt, ~str)] {\n }\n \n fn usage() {\n-    import io::println;\n+    use io::println;\n \n     println(~\"Usage: rustdoc ~[options] <cratefile>\\n\");\n     println(~\"Options:\\n\");"}, {"sha": "5e895c73674a7d677aa07beb9fa35af287f5fdee", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -89,7 +89,7 @@ fn pandoc_writer(\n     ];\n \n     do generic_writer |markdown| {\n-        import io::WriterUtil;\n+        use io::WriterUtil;\n \n         debug!(\"pandoc cmd: %s\", pandoc_cmd);\n         debug!(\"pandoc args: %s\", str::connect(pandoc_args, ~\" \"));\n@@ -255,7 +255,7 @@ mod test {\n }\n \n fn write_file(path: &Path, s: ~str) {\n-    import io::WriterUtil;\n+    use io::WriterUtil;\n \n     match io::file_writer(path, ~[io::Create, io::Truncate]) {\n       result::Ok(writer) => {"}, {"sha": "9125cadd69316698982ea3fcf5af6d3c1f516749", "filename": "src/rustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_hidden_pass.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -34,7 +34,7 @@ fn fold_mod(\n }\n \n fn is_hidden(srv: astsrv::srv, doc: doc::itemdoc) -> bool {\n-    import syntax::ast_map;\n+    use syntax::ast_map;\n \n     let id = doc.id;\n     do astsrv::exec(srv) |ctxt| {"}, {"sha": "d0e073986ef122b4f6cf6475064574127f337412", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -19,8 +19,8 @@ use std(vers = \"0.4\");\n use rustc(vers = \"0.4\");\n use syntax(vers = \"0.4\");\n \n-import core::*;\n-import std::par;\n+use core::*;\n+use std::par;\n \n mod config;\n mod parse;"}, {"sha": "9ffe3a14b3439f7705d5a68464b0276da51bbe1f", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -72,7 +72,7 @@ fn switch<T: Send, Tb: Send, U>(+endp: pipes::RecvPacketBuffered<T, Tb>,\n // Here's the benchmark\n \n fn bounded(count: uint) {\n-    import pingpong::*;\n+    use pingpong::*;\n \n     let mut ch = do spawn_service(init) |ch| {\n         let mut count = count;\n@@ -99,7 +99,7 @@ fn bounded(count: uint) {\n }\n \n fn unbounded(count: uint) {\n-    import pingpong_unbounded::*;\n+    use pingpong_unbounded::*;\n \n     let mut ch = do spawn_service(init) |ch| {\n         let mut count = count;"}, {"sha": "6f5fe08d0ef0cd6fc05502a9877eb90105f3aca9", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -4,7 +4,7 @@ use std;\n const n_threads: int = 503;\n \n fn start(+token: int) {\n-    import iter::*;\n+    use iter::*;\n \n     let p = comm::Port();\n     let mut ch = comm::Chan(p);"}, {"sha": "a3847c989d1ab3d8b79470c89667a438141a8a7b", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: unresolved\n \n mod circ1 {\n-    import circ1::*;\n+    use circ1::*;\n     export f1;\n     export f2;\n     export common;\n@@ -10,7 +10,7 @@ mod circ1 {\n }\n \n mod circ2 {\n-    import circ2::*;\n+    use circ2::*;\n     export f1;\n     export f2;\n     export common;\n@@ -19,7 +19,7 @@ mod circ2 {\n }\n \n mod test {\n-    import circ1::*;\n+    use circ1::*;\n \n     fn test() { f1066(); }\n }"}, {"sha": "786e2a99a941d2eadb752afe666dfbcf6b76a3dd", "filename": "src/test/compile-fail/issue-2611-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-3.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -3,8 +3,7 @@\n // we let an impl method can have more permissive bounds than the trait\n // method it's implementing, the return type might be less specific than\n // needed. Just punt and make it invariant.\n-import iter;\n-import iter::BaseIter;\n+use iter::BaseIter;\n \n trait A {\n   fn b<C:Copy Const, D>(x: C) -> C;"}, {"sha": "777c89d5862446e8653d0d295c52f1c399c890f0", "filename": "src/test/compile-fail/issue-2611-4.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-4.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1,7 +1,6 @@\n // Tests that an impl method's bounds aren't *more* restrictive\n // than the trait method it's implementing\n-import iter;\n-import iter::BaseIter;\n+use iter::BaseIter;\n \n trait A {\n   fn b<C:Copy, D>(x: C) -> C;"}, {"sha": "e125aa61578adaeac1d0c0db1d7da53dc7d19d11", "filename": "src/test/compile-fail/issue-2611-5.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2611-5.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1,7 +1,6 @@\n // Tests that ty params get matched correctly when comparing\n // an impl against a trait\n-import iter;\n-import iter::BaseIter;\n+use iter::BaseIter;\n \n trait A {\n   fn b<C:Copy, D>(x: C) -> C;"}, {"sha": "b091dc71357c35fcc96b5ce2e4384db1efbefbf8", "filename": "src/test/compile-fail/issue-2848.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2848.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -7,7 +7,7 @@ mod bar {\n }\n \n fn main() {\n-    import bar::{alpha, charlie};\n+    use bar::{alpha, charlie};\n     match alpha {\n       alpha | beta => {} //~ ERROR variable `beta` from pattern #2 is not bound in pattern #1\n       charlie => {}"}, {"sha": "9edf19cf514c3514607f64a29b7956d39c602472", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1,7 +1,7 @@\n mod argparse {\n     use std;\n \n-    import either::{Either, Left, Right};\n+    use either::{Either, Left, Right};\n \n     struct Flag {\n         name: &str,"}, {"sha": "da1fb692c064dd1024f9b44b41520cb9254af5a4", "filename": "src/test/compile-fail/unused-imports-warn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -9,8 +9,8 @@ mod foo {\n \n mod bar {\n     mod c {\n-        import foo::point;\n-        import foo::square;\n+        use foo::point;\n+        use foo::square;\n         fn cc(p: point) -> str { return 2 * (p.x + p.y); }\n     }\n }"}, {"sha": "915393f05e1362ccebe142ecc973803f52ff35c9", "filename": "src/test/run-pass/export-glob-imports-target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -4,7 +4,7 @@\n // Modified to not use export since it's going away. --pcw\n \n mod foo {\n-    import bar::*;\n+    use bar::*;\n     mod bar {\n         const a : int = 10;\n     }"}, {"sha": "666bc7ef3ac14c04b6fa2ff168cd80b927e665d2", "filename": "src/test/run-pass/export-glob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fexport-glob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fexport-glob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-glob.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -4,7 +4,7 @@\n // Modified to not use export since it's going away. --pcw\n \n mod foo {\n-    import bar::*;\n+    use bar::*;\n     export a;\n     mod bar {\n         const a : int = 10;"}, {"sha": "5498be31b1dc4402ef3698842971665caf595d86", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -6,7 +6,6 @@\n \n use std;\n \n-use option = option;\n use option::Some;\n use option::None;\n use std::map;"}, {"sha": "9b71b0862dd9439d35f9f2faad5b52763f6b5fec", "filename": "src/test/run-pass/import-from-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -5,7 +5,7 @@ mod spam {\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n-    import spam::{ham, eggs};\n+    use spam::{ham, eggs};\n     export ham;\n     export eggs;\n }"}, {"sha": "49bbc7d58816bf68209169e110129e4f8ae2c604", "filename": "src/test/run-pass/import-glob-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -4,14 +4,14 @@ mod a1 {\n     //\n     mod b1 {\n         //\n-        import a2::b1::*;\n+        use a2::b1::*;\n         //         <-\\\n         export word_traveler; //           |\n     }\n     //           |\n     mod b2 {\n         //           |\n-        import a2::b2::*;\n+        use a2::b2::*;\n         // <-\\  -\\   |\n         export word_traveler; //   |   |   |\n     } //   |   |   |\n@@ -24,7 +24,7 @@ mod a2 {\n     #[nolink]\n     extern mod b1 {\n         //   |   |   |\n-        import a1::b2::*;\n+        use a1::b2::*;\n         //   | <-/  -/\n         export word_traveler; //   |\n     }"}, {"sha": "e2c893c725b48a890f2655c7e0e7a7921e211d7c", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1,11 +1,10 @@\n use std;\n \n fn main() {\n-    import vec;\n-    import vec::to_mut;\n+    use vec::to_mut;\n     log(debug, vec::len(to_mut(~[1, 2])));\n     {\n-        import vec::*;\n+        use vec::*;\n         log(debug, len(~[2]));\n     }\n }"}, {"sha": "b0ee5439370a306442b0a49a1a13a9a661d9274c", "filename": "src/test/run-pass/import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -3,8 +3,8 @@ mod foo {\n }\n \n mod bar {\n-    import foo::x;\n-    import z = foo::x;\n+    use foo::x;\n+    use z = foo::x;\n     fn thing() { x(10); z(10); }\n }\n "}, {"sha": "3fab08badb9239e74966a5b0cdec263a1ccc1a84", "filename": "src/test/run-pass/import5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fimport5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fimport5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport5.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1,6 +1,6 @@\n use foo::bar;\n mod foo {\n-    import zed::bar;\n+    use zed::bar;\n     export bar;\n     mod zed {\n         fn bar() { debug!(\"foo\"); }"}, {"sha": "800429857e847d722fe98546afc404f5ca421194", "filename": "src/test/run-pass/import6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fimport6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fimport6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport6.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -6,7 +6,7 @@ mod foo {\n     }\n }\n mod bar {\n-    import zed::baz;\n+    use zed::baz;\n     export baz;\n }\n fn main() { baz(); }"}, {"sha": "5f2e8caaa79b09de473fedc140b3c14ea12e664b", "filename": "src/test/run-pass/import7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -6,7 +6,7 @@ mod foo {\n     }\n }\n mod bar {\n-    import zed::baz;\n+    use zed::baz;\n     export baz;\n     mod foo {\n         mod zed { }"}, {"sha": "053cc0abce05bb664efed1492cc302c176cb02ed", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -1,5 +1,5 @@\n mod pipes {\n-    import unsafe::{forget, transmute};\n+    use unsafe::{forget, transmute};\n \n     enum state {\n         empty,"}, {"sha": "cb99d211baf078504194421a998f508a1fe271a6", "filename": "src/test/run-pass/mod-view-items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-view-items.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -5,8 +5,7 @@\n // begin failing.\n \n mod m {\n-    use std;\n-    import vec;\n+    use core::vec;\n     fn f() -> ~[int] { vec::from_elem(1u, 0) }\n }\n "}, {"sha": "938a594ccaef977ac912a21e0cc440cdb65cca2f", "filename": "src/test/run-pass/module-polymorphism.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -2,7 +2,7 @@\n mod my_float {\n \n     // The type of the float\n-    import inst::T;\n+    use inst::T;\n \n     // Define T as float\n     #[path = \"inst_float.rs\"]\n@@ -17,7 +17,7 @@ mod my_float {\n #[path = \"module-polymorphism-files\"]\n mod my_f64 {\n \n-    import inst::T;\n+    use inst::T;\n \n     // Define T as f64\n     #[path = \"inst_f64.rs\"]\n@@ -31,7 +31,7 @@ mod my_f64 {\n \n #[path = \"module-polymorphism-files\"]\n mod my_f32 {\n-    import inst::T;\n+    use inst::T;\n \n     #[path = \"inst_f32.rs\"]\n     mod inst;"}, {"sha": "0c25f4546250ce038018ed4469744f8fd1fa6ddc", "filename": "src/test/run-pass/module-polymorphism2.rc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fmodule-polymorphism2.rc", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fmodule-polymorphism2.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism2.rc?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -4,10 +4,10 @@ mod mystd {\n     #[path = \"float-template\"]\n     mod float {\n         // The type of the float\n-        import inst::T;\n+        use inst::T;\n \n         // Unfortunate\n-        import template::*;\n+        use template::*;\n         export plus;\n \n         // Define T as float\n@@ -23,10 +23,10 @@ mod mystd {\n     #[path = \"float-template\"]\n     mod f64 {\n \n-        import inst::T;\n+        use inst::T;\n \n         // Unfortunate\n-        import template::*;\n+        use template::*;\n         export plus;\n \n         // Define T as f64\n@@ -41,10 +41,10 @@ mod mystd {\n \n     #[path = \"float-template\"]\n     mod f32 {\n-        import inst::T;\n+        use inst::T;\n \n         // Unfortunate\n-        import template::*;\n+        use template::*;\n         export plus;\n \n         #[path = \"inst_f32.rs\"]"}, {"sha": "3b3a5133b52e06108b9965dbc2718dc61f158e9a", "filename": "src/test/run-pass/module-polymorphism3.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fmodule-polymorphism3.rc", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fmodule-polymorphism3.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism3.rc?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -8,7 +8,7 @@ mod mystd {\n     #[path = \"float-template\"]\n     mod float {\n         // The type of the float\n-        import inst::T;\n+        use inst::T;\n \n         // Define T as appropriate for platform\n         #[path = \"inst_float.rs\"]\n@@ -19,7 +19,7 @@ mod mystd {\n     #[path = \"float-template\"]\n     mod f64 {\n \n-        import inst::T;\n+        use inst::T;\n \n         // Define T as f64\n         #[path = \"inst_f64.rs\"]\n@@ -28,7 +28,7 @@ mod mystd {\n \n     #[path = \"float-template\"]\n     mod f32 {\n-        import inst::T;\n+        use inst::T;\n \n         #[path = \"inst_f32.rs\"]\n         mod inst;"}, {"sha": "6218948b81443e2d9a0e17252e7e07263ec35966", "filename": "src/test/run-pass/module-polymorphism4.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4.rc", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism4.rc?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -2,7 +2,7 @@\n #[path = \"module-polymorphism4-files\"]\n mod cat {\n \n-    import inst::*;\n+    use inst::*;\n \n     #[path = \"cat.rs\"]\n     mod inst;\n@@ -15,7 +15,7 @@ mod cat {\n #[path = \"module-polymorphism4-files\"]\n mod dog {\n \n-    import inst::*;\n+    use inst::*;\n \n     #[path = \"dog.rs\"]\n     mod inst;"}, {"sha": "bf8338e5ee597153e2a9ef5eea2f6bfa4ce89caa", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -57,7 +57,7 @@ macro_rules! follow (\n )\n \n fn client_follow(+bank: bank::client::login) {\n-    import bank::*;\n+    use bank::*;\n \n     let bank = client::login(bank, ~\"theincredibleholk\", ~\"1234\");\n     let bank = switch(bank, follow! (\n@@ -78,7 +78,7 @@ fn client_follow(+bank: bank::client::login) {\n }\n \n fn bank_client(+bank: bank::client::login) {\n-    import bank::*;\n+    use bank::*;\n \n     let bank = client::login(bank, ~\"theincredibleholk\", ~\"1234\");\n     let bank = match try_recv(bank) {"}, {"sha": "2c8359991de7c1a3747a81973aa8f725e8147e0c", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -7,7 +7,7 @@\n // This was generated initially by the pipe compiler, but it's been\n // modified in hopefully straightforward ways.\n mod pingpong {\n-    import pipes::*;\n+    use pipes::*;\n \n     type packets = {\n         // This is probably a resolve bug, I forgot to export packet,\n@@ -67,11 +67,11 @@ mod pingpong {\n }\n \n mod test {\n-    import pipes::recv;\n-    import pingpong::{ping, pong};\n+    use pipes::recv;\n+    use pingpong::{ping, pong};\n \n     fn client(-chan: pingpong::client::ping) {\n-        import pingpong::client;\n+        use pingpong::client;\n \n         let chan = client::ping(chan); return;\n         log(error, \"Sent ping\");\n@@ -80,7 +80,7 @@ mod test {\n     }\n     \n     fn server(-chan: pingpong::server::ping) {\n-        import pingpong::server;\n+        use pingpong::server;\n \n         let ping(chan) = recv(chan); return;\n         log(error, \"Received ping\");"}, {"sha": "7d70e2bdb687ca7ba498589a8ee6a6c998dfb14a", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -13,11 +13,11 @@ proto! pingpong (\n )\n \n mod test {\n-    import pipes::recv;\n-    import pingpong::{ping, pong};\n+    use pipes::recv;\n+    use pingpong::{ping, pong};\n \n     fn client(-chan: pingpong::client::ping) {\n-        import pingpong::client;\n+        use pingpong::client;\n \n         let chan = client::ping(chan);\n         log(error, ~\"Sent ping\");\n@@ -26,7 +26,7 @@ mod test {\n     }\n     \n     fn server(-chan: pingpong::server::ping) {\n-        import pingpong::server;\n+        use pingpong::server;\n \n         let ping(chan) = recv(chan);\n         log(error, ~\"Received ping\");"}, {"sha": "8554659a2eeb2f6e450069a98d50794408875910", "filename": "src/test/run-pass/pipe-select-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -28,7 +28,7 @@ fn macros() {\n \n // Code\n fn test(+foo: foo::client::foo, +bar: bar::client::bar) {\n-    import bar::do_baz;\n+    use bar::do_baz;\n \n     select! (\n         foo => {"}, {"sha": "a963736f28bcb7f4528b001a90db668b97a22589", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -20,8 +20,8 @@ proto! stream (\n )\n \n fn main() {\n-    import oneshot::client::*;\n-    import stream::client::*;\n+    use oneshot::client::*;\n+    use stream::client::*;\n \n     let iotask = uv::global_loop::get();\n     "}, {"sha": "5bdb38c7d3dac6121ba5a71ade0037a4a307a098", "filename": "src/test/run-pass/pipe-sleep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -12,7 +12,7 @@ proto! oneshot (\n )\n \n fn main() {\n-    import oneshot::client::*;\n+    use oneshot::client::*;\n \n     let c = pipes::spawn_service(oneshot::init, |p| { recv(p); });\n "}, {"sha": "0fec03d6b9bec78f568e49fc9a060790b442b0a1", "filename": "src/test/run-pass/self-shadowing-import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -7,7 +7,7 @@ mod a {\n }\n \n mod c {\n-    import a::b::a;\n+    use a::b::a;\n     fn bar() { assert (a::foo() == 1); }\n }\n "}, {"sha": "6ecf742275789d0a5914f72c265906c63f8af11a", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "patch": "@@ -7,8 +7,8 @@ use bar(name = \"core\", vers = \"0.4\");\n use core::str;\n use x = zed::str;\n mod baz {\n-    import bar::str;\n-    import x = core::str;\n+    use bar::str;\n+    use x = core::str;\n }\n \n fn main() { }\n\\ No newline at end of file"}]}