{"sha": "efb56160c91f0c1db511423fad8cc09fdd73d618", "node_id": "C_kwDOAAsO6NoAKGVmYjU2MTYwYzkxZjBjMWRiNTExNDIzZmFkOGNjMDlmZGQ3M2Q2MTg", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-09-12T12:56:46Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-09-12T13:52:58Z"}, "message": "fix: handle lifetime variables in projection normalization", "tree": {"sha": "928beb85375aa553b88772c373679656a1691add", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/928beb85375aa553b88772c373679656a1691add"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efb56160c91f0c1db511423fad8cc09fdd73d618", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmMfOcYACgkQ4laYqTBY\nYXFz/BAApZDLEnn4t0Y4cFWv6aNYp8Ij2GDlFMDPD7AUe2ZzWR2BTIONFJj1fTra\nx8FZXRQuwfgyRWlu41TmT9oIhKjEv/xQF5t5rnetHO6ue2u42ojt8Me4zisoWYYr\nLhiggaCCn0j1h9OepwdXgMiDVtKq9fBQww1ltySCd5cbLa/WvU/DgcLQwT7kvqZa\ntavEDiW3QD5tQJ2DwgrkhCqqtRPntoyCi1eEumrh9WuIlzSyS4ciROMjofk+q3Zt\n5v90HwPJHrvjSlItj1fL+oG7uVqExyU8/dELqOVW1w4TZ3BzAWKIL8DamvbIZ9Hp\nJhK8zv+Kz6hAcJHGEskCUmLD1gkjY4BHFkIPmt6OfowlSQgsr/EIgk7niiVuSwEO\nwWShM1feuklvdIvQl5wLJR9+uu4ipP9j1orU665x9XQg4wUXb1PYPKHD4lRuaDHe\n7V1EvQc3yFql4TYah8LCly4r61t+aiYT7kyPmnR9+7Kf7fCZRCaVHQBYgLDhjGz2\nvmuXLfVYV20ZmmU+WMM3WkS13faQh8e4G96cLRcCKLdPcUU/EKj2UdM7TpauhjN5\n8o4MeL/73G1N9e/2pU26Ui92VBZwZMdc3qcNOGwB87xEXoyLevYg3Fxs7vcj3pzd\nRchqQjZz9/pIm9aIECuvnpaCDosfs5UGfB9b/ImH33u8Gmk0x9M=\n=CfSs\n-----END PGP SIGNATURE-----", "payload": "tree 928beb85375aa553b88772c373679656a1691add\nparent 2e9f1204ca01c3e20898d4a67c8b84899d394a88\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1662987406 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1662990778 +0900\n\nfix: handle lifetime variables in projection normalization\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efb56160c91f0c1db511423fad8cc09fdd73d618", "html_url": "https://github.com/rust-lang/rust/commit/efb56160c91f0c1db511423fad8cc09fdd73d618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efb56160c91f0c1db511423fad8cc09fdd73d618/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e9f1204ca01c3e20898d4a67c8b84899d394a88", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9f1204ca01c3e20898d4a67c8b84899d394a88", "html_url": "https://github.com/rust-lang/rust/commit/2e9f1204ca01c3e20898d4a67c8b84899d394a88"}], "stats": {"total": 136, "additions": 94, "deletions": 42}, "files": [{"sha": "dd5639f00d21904bbdcae044eeeaeeb4801e00fe", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efb56160c91f0c1db511423fad8cc09fdd73d618/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb56160c91f0c1db511423fad8cc09fdd73d618/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=efb56160c91f0c1db511423fad8cc09fdd73d618", "patch": "@@ -150,6 +150,14 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n         id: chalk_db::AssociatedTyValueId,\n     ) -> Arc<chalk_db::AssociatedTyValue>;\n \n+    #[salsa::invoke(crate::traits::normalize_projection_query)]\n+    #[salsa::transparent]\n+    fn normalize_projection(\n+        &self,\n+        projection: crate::ProjectionTy,\n+        env: Arc<crate::TraitEnvironment>,\n+    ) -> Option<crate::Ty>;\n+\n     #[salsa::invoke(trait_solve_wait)]\n     #[salsa::transparent]\n     fn trait_solve("}, {"sha": "de4a5446e57f00e948bee718ae6013dcddbb99b7", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/efb56160c91f0c1db511423fad8cc09fdd73d618/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb56160c91f0c1db511423fad8cc09fdd73d618/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=efb56160c91f0c1db511423fad8cc09fdd73d618", "patch": "@@ -196,20 +196,6 @@ pub(crate) fn make_binders<T: HasInterner<Interner = Interner>>(\n     make_binders_with_count(db, usize::MAX, generics, value)\n }\n \n-// FIXME: get rid of this\n-pub fn make_canonical<T: HasInterner<Interner = Interner>>(\n-    value: T,\n-    kinds: impl IntoIterator<Item = TyVariableKind>,\n-) -> Canonical<T> {\n-    let kinds = kinds.into_iter().map(|tk| {\n-        chalk_ir::CanonicalVarKind::new(\n-            chalk_ir::VariableKind::Ty(tk),\n-            chalk_ir::UniverseIndex::ROOT,\n-        )\n-    });\n-    Canonical { value, binders: chalk_ir::CanonicalVarKinds::from_iter(Interner, kinds) }\n-}\n-\n // FIXME: get rid of this, just replace it by FnPointer\n /// A function signature as seen by type inference: Several parameter types and\n /// one return type."}, {"sha": "aaff894b34ffc4de8c61c5e2b7a17a39e818ba97", "filename": "crates/hir-ty/src/traits.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/efb56160c91f0c1db511423fad8cc09fdd73d618/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb56160c91f0c1db511423fad8cc09fdd73d618/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftraits.rs?ref=efb56160c91f0c1db511423fad8cc09fdd73d618", "patch": "@@ -1,6 +1,6 @@\n //! Trait solving using Chalk.\n \n-use std::env::var;\n+use std::{env::var, sync::Arc};\n \n use chalk_ir::GoalData;\n use chalk_recursive::Cache;\n@@ -12,8 +12,9 @@ use stdx::panic_context;\n use syntax::SmolStr;\n \n use crate::{\n-    db::HirDatabase, AliasEq, AliasTy, Canonical, DomainGoal, Goal, Guidance, InEnvironment,\n-    Interner, Solution, TraitRefExt, Ty, TyKind, WhereClause,\n+    db::HirDatabase, infer::unify::InferenceTable, AliasEq, AliasTy, Canonical, DomainGoal, Goal,\n+    Guidance, InEnvironment, Interner, ProjectionTy, Solution, TraitRefExt, Ty, TyKind,\n+    WhereClause,\n };\n \n /// This controls how much 'time' we give the Chalk solver before giving up.\n@@ -64,6 +65,16 @@ impl TraitEnvironment {\n     }\n }\n \n+pub(crate) fn normalize_projection_query(\n+    db: &dyn HirDatabase,\n+    projection: ProjectionTy,\n+    env: Arc<TraitEnvironment>,\n+) -> Option<Ty> {\n+    let mut table = InferenceTable::new(db, env.clone());\n+    let ty = table.normalize_projection_ty(projection);\n+    Some(table.resolve_completely(ty))\n+}\n+\n /// Solve a trait goal using Chalk.\n pub(crate) fn trait_solve_query(\n     db: &dyn HirDatabase,"}, {"sha": "d49d2e1ca3aceccf9abec5544dcb5d7832ec5f6c", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/efb56160c91f0c1db511423fad8cc09fdd73d618/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb56160c91f0c1db511423fad8cc09fdd73d618/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=efb56160c91f0c1db511423fad8cc09fdd73d618", "patch": "@@ -63,10 +63,9 @@ use hir_ty::{\n     primitive::UintTy,\n     subst_prefix,\n     traits::FnTrait,\n-    AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast,\n-    ClosureId, DebruijnIndex, GenericArgData, InEnvironment, Interner, ParamKind,\n-    QuantifiedWhereClause, Scalar, Solution, Substitution, TraitEnvironment, TraitRefExt, Ty,\n-    TyBuilder, TyDefId, TyExt, TyKind, TyVariableKind, WhereClause,\n+    AliasTy, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast, ClosureId,\n+    GenericArgData, Interner, ParamKind, QuantifiedWhereClause, Scalar, Substitution,\n+    TraitEnvironment, TraitRefExt, Ty, TyBuilder, TyDefId, TyExt, TyKind, WhereClause,\n };\n use itertools::Itertools;\n use nameres::diagnostics::DefDiagnosticKind;\n@@ -2880,28 +2879,8 @@ impl Type {\n                 }\n             })\n             .build();\n-        let goal = hir_ty::make_canonical(\n-            InEnvironment::new(\n-                &self.env.env,\n-                AliasEq {\n-                    alias: AliasTy::Projection(projection),\n-                    ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))\n-                        .intern(Interner),\n-                }\n-                .cast(Interner),\n-            ),\n-            [TyVariableKind::General].into_iter(),\n-        );\n \n-        match db.trait_solve(self.env.krate, goal)? {\n-            Solution::Unique(s) => s\n-                .value\n-                .subst\n-                .as_slice(Interner)\n-                .first()\n-                .map(|ty| self.derived(ty.assert_ty_ref(Interner).clone())),\n-            Solution::Ambig(_) => None,\n-        }\n+        db.normalize_projection(projection, self.env.clone()).map(|ty| self.derived(ty))\n     }\n \n     pub fn is_copy(&self, db: &dyn HirDatabase) -> bool {"}, {"sha": "93fcd7cad7a18e976a5a0ea98f389ac4aa02b8ba", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/efb56160c91f0c1db511423fad8cc09fdd73d618/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb56160c91f0c1db511423fad8cc09fdd73d618/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=efb56160c91f0c1db511423fad8cc09fdd73d618", "patch": "@@ -1687,6 +1687,74 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn iterator_hint_regression_issue_12674() {\n+        // Ensure we don't crash while solving the projection type of iterators.\n+        check_expect(\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n+            r#\"\n+//- minicore: iterators\n+struct S<T>(T);\n+impl<T> S<T> {\n+    fn iter(&self) -> Iter<'_, T> { loop {} }\n+}\n+struct Iter<'a, T: 'a>(&'a T);\n+impl<'a, T> Iterator for Iter<'a, T> {\n+    type Item = &'a T;\n+    fn next(&mut self) -> Option<Self::Item> { loop {} }\n+}\n+struct Container<'a> {\n+    elements: S<&'a str>,\n+}\n+struct SliceIter<'a, T>(&'a T);\n+impl<'a, T> Iterator for SliceIter<'a, T> {\n+    type Item = &'a T;\n+    fn next(&mut self) -> Option<Self::Item> { loop {} }\n+}\n+\n+fn main(a: SliceIter<'_, Container>) {\n+    a\n+    .filter_map(|c| Some(c.elements.iter().filter_map(|v| Some(v))))\n+    .map(|e| e);\n+}\n+            \"#,\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 484..554,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"impl Iterator<Item = impl Iterator<Item = &&str>>\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                484..554,\n+                            ),\n+                        ),\n+                    },\n+                    InlayHint {\n+                        range: 484..485,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"SliceIter<Container>\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                484..485,\n+                            ),\n+                        ),\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn infer_call_method_return_associated_types_with_generic() {\n         check_types("}]}