{"sha": "4688aadfde7fa84d5a6cffbcfb309a653ae24441", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ODhhYWRmZGU3ZmE4NGQ1YTZjZmZiY2ZiMzA5YTY1M2FlMjQ0NDE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-24T07:05:30Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-25T21:16:24Z"}, "message": "Update tests to use `?Sized`", "tree": {"sha": "6cd04c7033965f2603d85281a9ac6867f6008358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cd04c7033965f2603d85281a9ac6867f6008358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4688aadfde7fa84d5a6cffbcfb309a653ae24441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4688aadfde7fa84d5a6cffbcfb309a653ae24441", "html_url": "https://github.com/rust-lang/rust/commit/4688aadfde7fa84d5a6cffbcfb309a653ae24441", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4688aadfde7fa84d5a6cffbcfb309a653ae24441/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e656081b700b949bc914fedd6ad29b1ca3197660", "url": "https://api.github.com/repos/rust-lang/rust/commits/e656081b700b949bc914fedd6ad29b1ca3197660", "html_url": "https://github.com/rust-lang/rust/commit/e656081b700b949bc914fedd6ad29b1ca3197660"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "d3d2e3581aaf7e08ac4f9f7008ea0b2a7c17966d", "filename": "src/test/run-pass/dst-raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-raw.rs?ref=4688aadfde7fa84d5a6cffbcfb309a653ae24441", "patch": "@@ -23,7 +23,7 @@ impl Trait for A {\n     }\n }\n \n-struct Foo<Sized? T> {\n+struct Foo<T: ?Sized> {\n     f: T\n }\n "}, {"sha": "47547bb7e5a27958859a5a4ad068f41cc448f56c", "filename": "src/test/run-pass/dst-struct-sole.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs?ref=4688aadfde7fa84d5a6cffbcfb309a653ae24441", "patch": "@@ -10,7 +10,7 @@\n \n // As dst-struct.rs, but the unsized field is the only field in the struct.\n \n-struct Fat<Sized? T> {\n+struct Fat<T: ?Sized> {\n     ptr: T\n }\n "}, {"sha": "fb536904ac80f4d197d483fb632f72890d1e1a1e", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=4688aadfde7fa84d5a6cffbcfb309a653ae24441", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Fat<Sized? T> {\n+struct Fat<T: ?Sized> {\n     f1: int,\n     f2: &'static str,\n     ptr: T"}, {"sha": "abe55d78ac69a4bb00f9b7f99b7d4ead00694929", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=4688aadfde7fa84d5a6cffbcfb309a653ae24441", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Fat<Sized? T> {\n+struct Fat<T: ?Sized> {\n     f1: int,\n     f2: &'static str,\n     ptr: T"}, {"sha": "3a63e63355cd09b0eda51acee61a0bd6dd8d7f28", "filename": "src/test/run-pass/issue-15155.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Fissue-15155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Fissue-15155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15155.rs?ref=4688aadfde7fa84d5a6cffbcfb309a653ae24441", "patch": "@@ -22,7 +22,7 @@ struct IndirectBlah { x: Box<IndirectTraitWithSend> }\n impl TraitWithSend for IndirectBlah {}\n impl IndirectTraitWithSend for IndirectBlah {}\n \n-fn test_trait<Sized? T: Send>() { println!(\"got here!\") }\n+fn test_trait<T: Send + ?Sized>() { println!(\"got here!\") }\n \n fn main() {\n     test_trait::<TraitWithSend>();"}, {"sha": "092bcf661a76a2b5e2ecd7a4cef68790f0fd4196", "filename": "src/test/run-pass/issue-17361.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Fissue-17361.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Fissue-17361.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17361.rs?ref=4688aadfde7fa84d5a6cffbcfb309a653ae24441", "patch": "@@ -11,6 +11,6 @@\n // Test that astconv doesn't forget about mutability of &mut str\n \n fn main() {\n-    fn foo<Sized? T>(_: &mut T) {}\n+    fn foo<T: ?Sized>(_: &mut T) {}\n     let _f: fn(&mut str) = foo;\n }"}, {"sha": "4e4fb75b428cc84f055a3a59a953b86f9771b488", "filename": "src/test/run-pass/method-recursive-blanket-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-recursive-blanket-impl.rs?ref=4688aadfde7fa84d5a6cffbcfb309a653ae24441", "patch": "@@ -16,7 +16,7 @@\n use std::kinds::Sized;\n \n // Note: this must be generic for the problem to show up\n-trait Foo<A> for Sized? {\n+trait Foo<A> for ?Sized {\n     fn foo(&self);\n }\n "}, {"sha": "07b9fac66554e0730ba063c5fe9f924ce4e07539", "filename": "src/test/run-pass/unsized.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized.rs?ref=4688aadfde7fa84d5a6cffbcfb309a653ae24441", "patch": "@@ -10,21 +10,22 @@\n //\n // ignore-lexer-test FIXME #15879\n \n-// Test syntax checks for `Sized?` syntax.\n+// Test syntax checks for `?Sized` syntax.\n \n-trait T1 for Sized? {}\n-pub trait T2 for Sized? {}\n-trait T3<X: T1> for Sized?: T2 {}\n-trait T4<Sized? X> {}\n-trait T5<Sized? X, Y> {}\n-trait T6<Y, Sized? X> {}\n-trait T7<Sized? X, Sized? Y> {}\n-trait T8<Sized? X: T2> {}\n-struct S1<Sized? X>;\n-enum E<Sized? X> {}\n-impl <Sized? X> T1 for S1<X> {}\n-fn f<Sized? X>() {}\n-type TT<Sized? T> = T;\n+trait T1 for ?Sized {}\n+pub trait T2 for ?Sized {}\n+trait T3<X: T1> for ?Sized: T2 {}\n+trait T4<X: ?Sized> {}\n+trait T5<X: ?Sized, Y> {}\n+trait T6<Y, X: ?Sized> {}\n+trait T7<X: ?Sized, Y: ?Sized> {}\n+trait T8<X: ?Sized+T2> {}\n+trait T9<X: T2 + ?Sized> {}\n+struct S1<X: ?Sized>;\n+enum E<X: ?Sized> {}\n+impl <X: ?Sized> T1 for S1<X> {}\n+fn f<X: ?Sized>() {}\n+type TT<T: ?Sized> = T;\n \n pub fn main() {\n }"}, {"sha": "8d2c99d4414c9921bf2110f15c86ac1a7ba3ceaf", "filename": "src/test/run-pass/unsized2.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4688aadfde7fa84d5a6cffbcfb309a653ae24441/src%2Ftest%2Frun-pass%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized2.rs?ref=4688aadfde7fa84d5a6cffbcfb309a653ae24441", "patch": "@@ -13,7 +13,7 @@\n // Test sized-ness checking in substitution.\n \n // Unbounded.\n-fn f1<Sized? X>(x: &X) {\n+fn f1<X: ?Sized>(x: &X) {\n     f1::<X>(x);\n }\n fn f2<X>(x: &X) {\n@@ -22,8 +22,8 @@ fn f2<X>(x: &X) {\n }\n \n // Bounded.\n-trait T for Sized? {}\n-fn f3<Sized? X: T>(x: &X) {\n+trait T for ?Sized {}\n+fn f3<X: T+?Sized>(x: &X) {\n     f3::<X>(x);\n }\n fn f4<X: T>(x: &X) {\n@@ -32,7 +32,7 @@ fn f4<X: T>(x: &X) {\n }\n \n // Self type.\n-trait T2 for Sized? {\n+trait T2 for ?Sized {\n     fn f() -> Box<Self>;\n }\n struct S;\n@@ -41,22 +41,22 @@ impl T2 for S {\n         box S\n     }\n }\n-fn f5<Sized? X: T2>(x: &X) {\n+fn f5<X: ?Sized+T2>(x: &X) {\n     let _: Box<X> = T2::f();\n }\n fn f6<X: T2>(x: &X) {\n     let _: Box<X> = T2::f();\n }\n \n-trait T3 for Sized? {\n+trait T3 for ?Sized {\n     fn f() -> Box<Self>;\n }\n impl T3 for S {\n     fn f() -> Box<S> {\n         box S\n     }\n }\n-fn f7<Sized? X: T3>(x: &X) {\n+fn f7<X: ?Sized+T3>(x: &X) {\n     // This is valid, but the unsized bound on X is irrelevant because any type\n     // which implements T3 must have statically known size.\n     let _: Box<X> = T3::f();\n@@ -66,7 +66,7 @@ trait T4<X> {\n     fn m1(x: &T4<X>);\n     fn m2(x: &T5<X>);\n }\n-trait T5<Sized? X> {\n+trait T5<X: ?Sized> {\n     // not an error (for now)\n     fn m1(x: &T4<X>);\n     fn m2(x: &T5<X>);\n@@ -76,21 +76,21 @@ trait T6<X: T> {\n     fn m1(x: &T4<X>);\n     fn m2(x: &T5<X>);\n }\n-trait T7<Sized? X: T> {\n+trait T7<X: ?Sized+T> {\n     // not an error (for now)\n     fn m1(x: &T4<X>);\n     fn m2(x: &T5<X>);\n }\n \n // The last field in a struct or variant may be unsized\n-struct S2<Sized? X> {\n+struct S2<X: ?Sized> {\n     f: X,\n }\n-struct S3<Sized? X> {\n+struct S3<X: ?Sized> {\n     f1: int,\n     f2: X,\n }\n-enum E<Sized? X> {\n+enum E<X: ?Sized> {\n     V1(X),\n     V2{x: X},\n     V3(int, X),"}]}