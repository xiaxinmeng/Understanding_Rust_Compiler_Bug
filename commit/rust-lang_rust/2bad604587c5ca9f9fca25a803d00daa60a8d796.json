{"sha": "2bad604587c5ca9f9fca25a803d00daa60a8d796", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYWQ2MDQ1ODdjNWNhOWY5ZmNhMjVhODAzZDAwZGFhNjBhOGQ3OTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-02T07:17:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-02T07:20:41Z"}, "message": "request at least ptr-size alignment from posix_memalign", "tree": {"sha": "84633eb53ceee227e019fbe75edb6d057f00b483", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84633eb53ceee227e019fbe75edb6d057f00b483"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bad604587c5ca9f9fca25a803d00daa60a8d796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bad604587c5ca9f9fca25a803d00daa60a8d796", "html_url": "https://github.com/rust-lang/rust/commit/2bad604587c5ca9f9fca25a803d00daa60a8d796", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bad604587c5ca9f9fca25a803d00daa60a8d796/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ea4036cd20a4b1ab1d56e555108c21735ff6946", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea4036cd20a4b1ab1d56e555108c21735ff6946", "html_url": "https://github.com/rust-lang/rust/commit/6ea4036cd20a4b1ab1d56e555108c21735ff6946"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "c5b6a360dd3449bc936afc62b45ae0e3f929fdb1", "filename": "src/libstd/sys/unix/alloc.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bad604587c5ca9f9fca25a803d00daa60a8d796/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bad604587c5ca9f9fca25a803d00daa60a8d796/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Falloc.rs?ref=2bad604587c5ca9f9fca25a803d00daa60a8d796", "patch": "@@ -1,11 +1,15 @@\n use crate::ptr;\n use crate::sys_common::alloc::{MIN_ALIGN, realloc_fallback};\n use crate::alloc::{GlobalAlloc, Layout, System};\n+use crate::mem;\n \n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n unsafe impl GlobalAlloc for System {\n     #[inline]\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+        // jemalloc provides alignment less than MIN_ALIGN for small allocations.\n+        // So only rely on MIN_ALIGN if size >= align.\n+        // Also see <https://github.com/rust-lang/rust/issues/45955>.\n         if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n             libc::malloc(layout.size()) as *mut u8\n         } else {\n@@ -21,6 +25,9 @@ unsafe impl GlobalAlloc for System {\n \n     #[inline]\n     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n+        // jemalloc provides alignment less than MIN_ALIGN for small allocations.\n+        // So only rely on MIN_ALIGN if size >= align.\n+        // Also see <https://github.com/rust-lang/rust/issues/45955>.\n         if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n             libc::calloc(layout.size(), 1) as *mut u8\n         } else {\n@@ -80,7 +87,10 @@ unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n #[inline]\n unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n     let mut out = ptr::null_mut();\n-    let ret = libc::posix_memalign(&mut out, layout.align(), layout.size());\n+    // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.\n+    // Since these are all powers of 2, we can just use max.\n+    let align = layout.align().max(mem::size_of::<usize>());\n+    let ret = libc::posix_memalign(&mut out, align, layout.size());\n     if ret != 0 {\n         ptr::null_mut()\n     } else {"}]}