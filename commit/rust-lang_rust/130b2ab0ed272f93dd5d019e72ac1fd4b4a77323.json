{"sha": "130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMGIyYWIwZWQyNzJmOTNkZDVkMDE5ZTcyYWMxZmQ0YjRhNzczMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-28T01:15:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-28T01:15:16Z"}, "message": "Auto merge of #82611 - Dylan-DPC:rollup-l7xlpks, r=Dylan-DPC\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #81856 (Suggest character encoding is incorrect when encountering random null bytes)\n - #82395 (Add missing \"see its documentation for more\" stdio)\n - #82401 (Remove a redundant macro)\n - #82498 (Use log level to control partitioning debug output)\n - #82534 (Link crtbegin/crtend on musl to terminate .eh_frame)\n - #82537 (Update measureme dependency to the latest version)\n - #82561 (doc: cube root, not cubic root)\n - #82563 (Fix intra-doc handling of `Self` in enum)\n - #82584 (Add ARIA role to sidebar toggle in Rustdoc)\n - #82596 (clarify RW lock's priority gotcha)\n - #82607 (Add a getter for Frame.loc)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2f473a556bbf5bad361cc84af6a1ac0f57d0b7f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f473a556bbf5bad361cc84af6a1ac0f57d0b7f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "html_url": "https://github.com/rust-lang/rust/commit/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94736c434ee154b30e2ec22ec112b79e3f6c5884", "url": "https://api.github.com/repos/rust-lang/rust/commits/94736c434ee154b30e2ec22ec112b79e3f6c5884", "html_url": "https://github.com/rust-lang/rust/commit/94736c434ee154b30e2ec22ec112b79e3f6c5884"}, {"sha": "7847f690fd5d2a92cad833564fc05305d85c5634", "url": "https://api.github.com/repos/rust-lang/rust/commits/7847f690fd5d2a92cad833564fc05305d85c5634", "html_url": "https://github.com/rust-lang/rust/commit/7847f690fd5d2a92cad833564fc05305d85c5634"}], "stats": {"total": 135, "additions": 102, "deletions": 33}, "files": [{"sha": "6e95fd6af273fb4a0637b9e28b82c0bd391b18a1", "filename": "Cargo.lock", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -2149,11 +2149,14 @@ dependencies = [\n \n [[package]]\n name = \"measureme\"\n-version = \"9.0.0\"\n+version = \"9.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"22bf8d885d073610aee20e7fa205c4341ed32a761dbde96da5fd96301a8d3e82\"\n+checksum = \"4a98e07fe802486895addb2b5467f33f205e82c426bfaf350f5d8109b137767c\"\n dependencies = [\n+ \"log\",\n+ \"memmap\",\n  \"parking_lot\",\n+ \"perf-event-open-sys\",\n  \"rustc-hash\",\n  \"smallvec 1.6.1\",\n ]\n@@ -2550,6 +2553,15 @@ version = \"2.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n \n+[[package]]\n+name = \"perf-event-open-sys\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ce9bedf5da2c234fdf2391ede2b90fabf585355f33100689bc364a3ea558561a\"\n+dependencies = [\n+ \"libc\",\n+]\n+\n [[package]]\n name = \"pest\"\n version = \"2.1.3\""}, {"sha": "4999cb3c7ab42e3303e74139aede92b0d88cb0bc", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -12,7 +12,7 @@ doctest = false\n bitflags = \"1.0\"\n cstr = \"0.2\"\n libc = \"0.2\"\n-measureme = \"9.0.0\"\n+measureme = \"9.1.0\"\n snap = \"1\"\n tracing = \"0.1\"\n rustc_middle = { path = \"../rustc_middle\" }"}, {"sha": "818c43642566c202b1aced7ead19b605a7e2bd07", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -25,7 +25,7 @@ rustc-hash = \"1.1.0\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }\n bitflags = \"1.2.1\"\n-measureme = \"9.0.0\"\n+measureme = \"9.1.0\"\n libc = \"0.2\"\n stacker = \"0.1.12\"\n tempfile = \"3.0.5\""}, {"sha": "06742331655015355a5de98de5ed2f75d7346f28", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -28,6 +28,6 @@ rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n chalk-ir = \"0.55.0\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n-measureme = \"9.0.0\"\n+measureme = \"9.1.0\"\n rustc_session = { path = \"../rustc_session\" }\n rustc_type_ir = { path = \"../rustc_type_ir\" }"}, {"sha": "6b796eb372199aeb6ab317f7657e8d03e7a1ecd5", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -226,6 +226,16 @@ impl<'mir, 'tcx, Tag> Frame<'mir, 'tcx, Tag> {\n }\n \n impl<'mir, 'tcx, Tag, Extra> Frame<'mir, 'tcx, Tag, Extra> {\n+    /// Get the current location within the Frame.\n+    ///\n+    /// If this is `Err`, we are not currently executing any particular statement in\n+    /// this frame (can happen e.g. during frame initialization, and during unwinding on\n+    /// frames without cleanup code).\n+    /// We basically abuse `Result` as `Either`.\n+    pub fn current_loc(&self) -> Result<mir::Location, Span> {\n+        self.loc\n+    }\n+\n     /// Return the `SourceInfo` of the current instruction.\n     pub fn current_source_info(&self) -> Option<&mir::SourceInfo> {\n         self.loc.ok().map(|loc| self.body.source_info(loc))"}, {"sha": "b68a8104fba725bafafbb4470804e51975a0588c", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -239,17 +239,22 @@ where\n     I: Iterator<Item = &'a CodegenUnit<'tcx>>,\n     'tcx: 'a,\n {\n-    if cfg!(debug_assertions) {\n-        debug!(\"{}\", label);\n+    let dump = move || {\n+        use std::fmt::Write;\n+\n+        let s = &mut String::new();\n+        let _ = writeln!(s, \"{}\", label);\n         for cgu in cgus {\n-            debug!(\"CodegenUnit {} estimated size {} :\", cgu.name(), cgu.size_estimate());\n+            let _ =\n+                writeln!(s, \"CodegenUnit {} estimated size {} :\", cgu.name(), cgu.size_estimate());\n \n             for (mono_item, linkage) in cgu.items() {\n                 let symbol_name = mono_item.symbol_name(tcx).name;\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash = symbol_hash_start.map_or(\"<no hash>\", |i| &symbol_name[i..]);\n \n-                debug!(\n+                let _ = writeln!(\n+                    s,\n                     \" - {} [{:?}] [{}] estimated size {}\",\n                     mono_item,\n                     linkage,\n@@ -258,9 +263,13 @@ where\n                 );\n             }\n \n-            debug!(\"\");\n+            let _ = writeln!(s, \"\");\n         }\n-    }\n+\n+        std::mem::take(s)\n+    };\n+\n+    debug!(\"{}\", dump());\n }\n \n #[inline(never)] // give this a place in the profiler"}, {"sha": "4bf870eb7ce7e71fcf46cf8e8c43dfef960680cf", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -268,6 +268,9 @@ impl<'a> StringReader<'a> {\n                 // tokens like `<<` from `rustc_lexer`, and then add fancier error recovery to it,\n                 // as there will be less overall work to do this way.\n                 let token = unicode_chars::check_for_substitution(self, start, c, &mut err);\n+                if c == '\\x00' {\n+                    err.help(\"source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used\");\n+                }\n                 err.emit();\n                 token?\n             }"}, {"sha": "51a48147e6b629a3631e1172d5f01a453b7571ce", "filename": "compiler/rustc_target/src/spec/crt_objects.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcrt_objects.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -64,17 +64,24 @@ pub(super) fn all(obj: &str) -> CrtObjects {\n \n pub(super) fn pre_musl_fallback() -> CrtObjects {\n     new(&[\n-        (LinkOutputKind::DynamicNoPicExe, &[\"crt1.o\", \"crti.o\"]),\n-        (LinkOutputKind::DynamicPicExe, &[\"Scrt1.o\", \"crti.o\"]),\n-        (LinkOutputKind::StaticNoPicExe, &[\"crt1.o\", \"crti.o\"]),\n-        (LinkOutputKind::StaticPicExe, &[\"rcrt1.o\", \"crti.o\"]),\n-        (LinkOutputKind::DynamicDylib, &[\"crti.o\"]),\n-        (LinkOutputKind::StaticDylib, &[\"crti.o\"]),\n+        (LinkOutputKind::DynamicNoPicExe, &[\"crt1.o\", \"crti.o\", \"crtbegin.o\"]),\n+        (LinkOutputKind::DynamicPicExe, &[\"Scrt1.o\", \"crti.o\", \"crtbeginS.o\"]),\n+        (LinkOutputKind::StaticNoPicExe, &[\"crt1.o\", \"crti.o\", \"crtbegin.o\"]),\n+        (LinkOutputKind::StaticPicExe, &[\"rcrt1.o\", \"crti.o\", \"crtbeginS.o\"]),\n+        (LinkOutputKind::DynamicDylib, &[\"crti.o\", \"crtbeginS.o\"]),\n+        (LinkOutputKind::StaticDylib, &[\"crti.o\", \"crtbeginS.o\"]),\n     ])\n }\n \n pub(super) fn post_musl_fallback() -> CrtObjects {\n-    all(\"crtn.o\")\n+    new(&[\n+        (LinkOutputKind::DynamicNoPicExe, &[\"crtend.o\", \"crtn.o\"]),\n+        (LinkOutputKind::DynamicPicExe, &[\"crtendS.o\", \"crtn.o\"]),\n+        (LinkOutputKind::StaticNoPicExe, &[\"crtend.o\", \"crtn.o\"]),\n+        (LinkOutputKind::StaticPicExe, &[\"crtendS.o\", \"crtn.o\"]),\n+        (LinkOutputKind::DynamicDylib, &[\"crtendS.o\", \"crtn.o\"]),\n+        (LinkOutputKind::StaticDylib, &[\"crtendS.o\", \"crtn.o\"]),\n+    ])\n }\n \n pub(super) fn pre_mingw_fallback() -> CrtObjects {"}, {"sha": "e6c551ff4d41bb8b2373dfe53040237cb1a2ee24", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -517,21 +517,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n \n                 if self.is_fn_ty(&rcvr_ty, span) {\n-                    macro_rules! report_function {\n-                        ($span:expr, $name:expr) => {\n-                            err.note(&format!(\n-                                \"`{}` is a function, perhaps you wish to call it\",\n-                                $name\n-                            ));\n-                        };\n+                    fn report_function<T: std::fmt::Display>(\n+                        err: &mut DiagnosticBuilder<'_>,\n+                        name: T,\n+                    ) {\n+                        err.note(\n+                            &format!(\"`{}` is a function, perhaps you wish to call it\", name,),\n+                        );\n                     }\n \n                     if let SelfSource::MethodCall(expr) = source {\n                         if let Ok(expr_string) = tcx.sess.source_map().span_to_snippet(expr.span) {\n-                            report_function!(expr.span, expr_string);\n+                            report_function(&mut err, expr_string);\n                         } else if let ExprKind::Path(QPath::Resolved(_, ref path)) = expr.kind {\n                             if let Some(segment) = path.segments.last() {\n-                                report_function!(expr.span, segment.ident);\n+                                report_function(&mut err, segment.ident);\n                             }\n                         }\n                     }"}, {"sha": "c16d27fa1f58c15de7834b4637cf3a6e4cbadfe8", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -503,7 +503,7 @@ impl f32 {\n         unsafe { cmath::fdimf(self, other) }\n     }\n \n-    /// Returns the cubic root of a number.\n+    /// Returns the cube root of a number.\n     ///\n     /// # Examples\n     ///"}, {"sha": "4c95df5ffe04a95be8a56d8fa261379d81da3e2d", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -505,7 +505,7 @@ impl f64 {\n         unsafe { cmath::fdim(self, other) }\n     }\n \n-    /// Returns the cubic root of a number.\n+    /// Returns the cube root of a number.\n     ///\n     /// # Examples\n     ///"}, {"sha": "1e72c9e0611eaf565bb4d82670fdecdc538e1e93", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -497,7 +497,7 @@ pub struct Stdout {\n /// A locked reference to the [`Stdout`] handle.\n ///\n /// This handle implements the [`Write`] trait, and is constructed via\n-/// the [`Stdout::lock`] method.\n+/// the [`Stdout::lock`] method. See its documentation for more.\n ///\n /// ### Note: Windows Portability Consideration\n /// When operating in a console, the Windows implementation of this stream does not support\n@@ -711,7 +711,7 @@ pub struct Stderr {\n /// A locked reference to the [`Stderr`] handle.\n ///\n /// This handle implements the [`Write`] trait and is constructed via\n-/// the [`Stderr::lock`] method.\n+/// the [`Stderr::lock`] method. See its documentation for more.\n ///\n /// ### Note: Windows Portability Consideration\n /// When operating in a console, the Windows implementation of this stream does not support"}, {"sha": "0298f59228cbeb45420d5a01673f3c32c54d6431", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -23,7 +23,9 @@ use crate::sys_common::rwlock as sys;\n ///\n /// The priority policy of the lock is dependent on the underlying operating\n /// system's implementation, and this type does not guarantee that any\n-/// particular policy will be used.\n+/// particular policy will be used. In particular, a writer which is waiting to\n+/// acquire the lock in `write` might or might not block concurrent calls to\n+/// `read`.\n ///\n /// The type parameter `T` represents the data that this lock protects. It is\n /// required that `T` satisfies [`Send`] to be shared across threads and"}, {"sha": "859e38dc34647d3ab520801351735b2723fbbf69", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -189,6 +189,12 @@ fn copy_self_contained_objects(\n                 DependencyType::TargetSelfContained,\n             );\n         }\n+        for &obj in &[\"crtbegin.o\", \"crtbeginS.o\", \"crtend.o\", \"crtendS.o\"] {\n+            let src = compiler_file(builder, builder.cc(target), target, obj);\n+            let target = libdir_self_contained.join(obj);\n+            builder.copy(&src, &target);\n+            target_deps.push((target, DependencyType::TargetSelfContained));\n+        }\n     } else if target.ends_with(\"-wasi\") {\n         let srcdir = builder.wasi_root(target).unwrap().join(\"lib/wasm32-wasi\");\n         for &obj in &[\"crt1.o\", \"crt1-reactor.o\"] {"}, {"sha": "73c106f5ae03240b3ebf764ab0ce5dff532b8140", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -75,7 +75,7 @@ crate fn render<T: Print, S: Print>(\n     <![endif]-->\\\n     {before_content}\\\n     <nav class=\\\"sidebar\\\">\\\n-        <div class=\\\"sidebar-menu\\\">&#9776;</div>\\\n+        <div class=\\\"sidebar-menu\\\" role=\\\"button\\\">&#9776;</div>\\\n         {logo}\\\n         {sidebar}\\\n     </nav>\\"}, {"sha": "c047f8729adc1fff1b92d244d868f2912b3c6eeb", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -838,6 +838,14 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n         debug!(\"looking for the `Self` type\");\n         let self_id = if item.is_fake() {\n             None\n+        // Checking if the item is a field in an enum variant\n+        } else if (matches!(self.cx.tcx.def_kind(item.def_id), DefKind::Field)\n+            && matches!(\n+                self.cx.tcx.def_kind(self.cx.tcx.parent(item.def_id).unwrap()),\n+                DefKind::Variant\n+            ))\n+        {\n+            self.cx.tcx.parent(item.def_id).and_then(|item_id| self.cx.tcx.parent(item_id))\n         } else if matches!(\n             self.cx.tcx.def_kind(item.def_id),\n             DefKind::AssocConst"}, {"sha": "76618cdce4cd29355a7dc38300f0ffbab43c3db4", "filename": "src/test/rustdoc/intra-doc/issue-82209.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Frustdoc%2Fintra-doc%2Fissue-82209.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Frustdoc%2Fintra-doc%2Fissue-82209.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fissue-82209.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -0,0 +1,11 @@\n+#![crate_name = \"foo\"]\n+#![deny(broken_intra_doc_links)]\n+pub enum Foo {\n+    Bar {\n+        abc: i32,\n+        /// [Self::Bar::abc]\n+        xyz: i32,\n+    },\n+}\n+\n+// @has foo/enum.Foo.html '//a/@href' '../foo/enum.Foo.html#variant.Bar.field.abc'"}, {"sha": "8a16d7f955129811997464d47c4e10238db77340", "filename": "src/test/ui/parser/issue-66473.stderr", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Fui%2Fparser%2Fissue-66473.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Fui%2Fparser%2Fissue-66473.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-66473.stderr?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323"}, {"sha": "19c9ef30f9049537fca85864287462c8f875eee4", "filename": "src/test/ui/parser/issue-68629.stderr", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Fui%2Fparser%2Fissue-68629.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Fui%2Fparser%2Fissue-68629.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68629.stderr?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323"}, {"sha": "8602abacabd325988d4f2b8a9116d85688365341", "filename": "src/test/ui/parser/issue-68730.stderr", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Fui%2Fparser%2Fissue-68730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Fui%2Fparser%2Fissue-68730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68730.stderr?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323"}, {"sha": "22aa19717873a58a19379fb56c99177e018ecf06", "filename": "src/test/ui/parser/utf16-be-without-bom.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Fui%2Fparser%2Futf16-be-without-bom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Fui%2Fparser%2Futf16-be-without-bom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Futf16-be-without-bom.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323"}, {"sha": "768d2c531641732c05cff6bd77f1662976f9f6e0", "filename": "src/test/ui/parser/utf16-be-without-bom.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Fui%2Fparser%2Futf16-be-without-bom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Fui%2Fparser%2Futf16-be-without-bom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Futf16-be-without-bom.stderr?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323"}, {"sha": "3c1049929e115384628d558c37aaded524fecf7f", "filename": "src/test/ui/parser/utf16-le-without-bom.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Fui%2Fparser%2Futf16-le-without-bom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Fui%2Fparser%2Futf16-le-without-bom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Futf16-le-without-bom.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323"}, {"sha": "4f4b91e39ed8779be5e03134b51ade7a8154ff05", "filename": "src/test/ui/parser/utf16-le-without-bom.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Fui%2Fparser%2Futf16-le-without-bom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftest%2Fui%2Fparser%2Futf16-le-without-bom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Futf16-le-without-bom.stderr?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323"}, {"sha": "651b478e79467f95afae1b1146ec7f943ccfe4d2", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b2ab0ed272f93dd5d019e72ac1fd4b4a77323/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=130b2ab0ed272f93dd5d019e72ac1fd4b4a77323", "patch": "@@ -132,6 +132,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"parking_lot\",\n     \"parking_lot_core\",\n     \"pathdiff\",\n+    \"perf-event-open-sys\",\n     \"pkg-config\",\n     \"polonius-engine\",\n     \"ppv-lite86\","}]}