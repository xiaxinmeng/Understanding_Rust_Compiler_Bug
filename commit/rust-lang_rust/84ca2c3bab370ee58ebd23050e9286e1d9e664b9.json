{"sha": "84ca2c3bab370ee58ebd23050e9286e1d9e664b9", "node_id": "C_kwDOAAsO6NoAKDg0Y2EyYzNiYWIzNzBlZTU4ZWJkMjMwNTBlOTI4NmUxZDllNjY0Yjk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-03T01:15:55Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-03T04:58:03Z"}, "message": "Clarify range calculations.\n\nThere is some subtlety here.", "tree": {"sha": "d9c80dff82a56e38a50ee9d3a8df651fd6b9d08b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9c80dff82a56e38a50ee9d3a8df651fd6b9d08b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84ca2c3bab370ee58ebd23050e9286e1d9e664b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84ca2c3bab370ee58ebd23050e9286e1d9e664b9", "html_url": "https://github.com/rust-lang/rust/commit/84ca2c3bab370ee58ebd23050e9286e1d9e664b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84ca2c3bab370ee58ebd23050e9286e1d9e664b9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f32e6781b2932aed55342ad8a4a7f1023acb30b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f32e6781b2932aed55342ad8a4a7f1023acb30b4", "html_url": "https://github.com/rust-lang/rust/commit/f32e6781b2932aed55342ad8a4a7f1023acb30b4"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "dc2fd359e278ec2a5000a8742bebaef70b1ba990", "filename": "compiler/rustc_lexer/src/unescape.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/84ca2c3bab370ee58ebd23050e9286e1d9e664b9/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84ca2c3bab370ee58ebd23050e9286e1d9e664b9/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape.rs?ref=84ca2c3bab370ee58ebd23050e9286e1d9e664b9", "patch": "@@ -275,11 +275,13 @@ where\n     F: FnMut(Range<usize>, Result<char, EscapeError>),\n {\n     debug_assert!(mode == Mode::Str || mode == Mode::ByteStr);\n-    let initial_len = src.len();\n     let mut chars = src.chars();\n-    while let Some(c) = chars.next() {\n-        let start = initial_len - chars.as_str().len() - c.len_utf8();\n \n+    // The `start` and `end` computation here is complicated because\n+    // `skip_ascii_whitespace` makes us to skip over chars without counting\n+    // them in the range computation.\n+    while let Some(c) = chars.next() {\n+        let start = src.len() - chars.as_str().len() - c.len_utf8();\n         let result = match c {\n             '\\\\' => {\n                 match chars.clone().next() {\n@@ -300,7 +302,7 @@ where\n             '\\r' => Err(EscapeError::BareCarriageReturn),\n             _ => ascii_check(c, mode),\n         };\n-        let end = initial_len - chars.as_str().len();\n+        let end = src.len() - chars.as_str().len();\n         callback(start..end, result);\n     }\n \n@@ -340,19 +342,19 @@ where\n     F: FnMut(Range<usize>, Result<char, EscapeError>),\n {\n     debug_assert!(mode == Mode::RawStr || mode == Mode::RawByteStr);\n-    let initial_len = src.len();\n-\n     let mut chars = src.chars();\n-    while let Some(c) = chars.next() {\n-        let start = initial_len - chars.as_str().len() - c.len_utf8();\n \n+    // The `start` and `end` computation here matches the one in\n+    // `unescape_str_or_byte_str` for consistency, even though this function\n+    // doesn't have to worry about skipping any chars.\n+    while let Some(c) = chars.next() {\n+        let start = src.len() - chars.as_str().len() - c.len_utf8();\n         let result = match c {\n             '\\r' => Err(EscapeError::BareCarriageReturnInRawString),\n             c if mode.is_bytes() && !c.is_ascii() => Err(EscapeError::NonAsciiCharInByteString),\n             c => Ok(c),\n         };\n-        let end = initial_len - chars.as_str().len();\n-\n+        let end = src.len() - chars.as_str().len();\n         callback(start..end, result);\n     }\n }"}]}