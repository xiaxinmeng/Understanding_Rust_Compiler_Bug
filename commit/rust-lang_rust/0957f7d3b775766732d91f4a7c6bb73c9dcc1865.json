{"sha": "0957f7d3b775766732d91f4a7c6bb73c9dcc1865", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NTdmN2QzYjc3NTc2NjczMmQ5MWY0YTdjNmJiNzNjOWRjYzE4NjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-26T15:51:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-26T15:51:40Z"}, "message": "Auto merge of #3817 - rust-lang:fix-bool_comparison-on-non-bool, r=oli-obk\n\nFix `bool_comparison` with non-`bool` expressions\n\nFixes #3703.\nIt just moves around the type check that was already there for some comparison to all of them, because if one type isn't `bool`, none of those comparison can be simplified.", "tree": {"sha": "48aac358861d8e2d83ae0cbedaab74e6565c49f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48aac358861d8e2d83ae0cbedaab74e6565c49f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0957f7d3b775766732d91f4a7c6bb73c9dcc1865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0957f7d3b775766732d91f4a7c6bb73c9dcc1865", "html_url": "https://github.com/rust-lang/rust/commit/0957f7d3b775766732d91f4a7c6bb73c9dcc1865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0957f7d3b775766732d91f4a7c6bb73c9dcc1865/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "412d41ae86bf90af21676af17e24cf745177d903", "url": "https://api.github.com/repos/rust-lang/rust/commits/412d41ae86bf90af21676af17e24cf745177d903", "html_url": "https://github.com/rust-lang/rust/commit/412d41ae86bf90af21676af17e24cf745177d903"}, {"sha": "c0c0686a6571492da6b6fdf8bed0e8527c2d19c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c0686a6571492da6b6fdf8bed0e8527c2d19c5", "html_url": "https://github.com/rust-lang/rust/commit/c0c0686a6571492da6b6fdf8bed0e8527c2d19c5"}], "stats": {"total": 76, "additions": 56, "deletions": 20}, "files": [{"sha": "ec9e0bb169441bfce2515b0db5400daef5e1ad14", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0957f7d3b775766732d91f4a7c6bb73c9dcc1865/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0957f7d3b775766732d91f4a7c6bb73c9dcc1865/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=0957f7d3b775766732d91f4a7c6bb73c9dcc1865", "patch": "@@ -225,23 +225,23 @@ fn check_comparison<'a, 'tcx>(\n     use self::Expression::*;\n \n     if let ExprKind::Binary(_, ref left_side, ref right_side) = e.node {\n-        let mut applicability = Applicability::MachineApplicable;\n-        match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n-            (Bool(true), Other) => left_true.map_or((), |(h, m)| {\n-                suggest_bool_comparison(cx, e, right_side, applicability, m, h)\n-            }),\n-            (Other, Bool(true)) => right_true.map_or((), |(h, m)| {\n-                suggest_bool_comparison(cx, e, left_side, applicability, m, h)\n-            }),\n-            (Bool(false), Other) => left_false.map_or((), |(h, m)| {\n-                suggest_bool_comparison(cx, e, right_side, applicability, m, h)\n-            }),\n-            (Other, Bool(false)) => right_false.map_or((), |(h, m)| {\n-                suggest_bool_comparison(cx, e, left_side, applicability, m, h)\n-            }),\n-            (Other, Other) => no_literal.map_or((), |(h, m)| {\n-                let (l_ty, r_ty) = (cx.tables.expr_ty(left_side), cx.tables.expr_ty(right_side));\n-                if l_ty.is_bool() && r_ty.is_bool() {\n+        let (l_ty, r_ty) = (cx.tables.expr_ty(left_side), cx.tables.expr_ty(right_side));\n+        if l_ty.is_bool() && r_ty.is_bool() {\n+            let mut applicability = Applicability::MachineApplicable;\n+            match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n+                (Bool(true), Other) => left_true.map_or((), |(h, m)| {\n+                    suggest_bool_comparison(cx, e, right_side, applicability, m, h)\n+                }),\n+                (Other, Bool(true)) => right_true.map_or((), |(h, m)| {\n+                    suggest_bool_comparison(cx, e, left_side, applicability, m, h)\n+                }),\n+                (Bool(false), Other) => left_false.map_or((), |(h, m)| {\n+                    suggest_bool_comparison(cx, e, right_side, applicability, m, h)\n+                }),\n+                (Other, Bool(false)) => right_false.map_or((), |(h, m)| {\n+                    suggest_bool_comparison(cx, e, left_side, applicability, m, h)\n+                }),\n+                (Other, Other) => no_literal.map_or((), |(h, m)| {\n                     let left_side = Sugg::hir_with_applicability(cx, left_side, \"..\", &mut applicability);\n                     let right_side = Sugg::hir_with_applicability(cx, right_side, \"..\", &mut applicability);\n                     span_lint_and_sugg(\n@@ -253,9 +253,9 @@ fn check_comparison<'a, 'tcx>(\n                         h(left_side, right_side).to_string(),\n                         applicability,\n                     )\n-                }\n-            }),\n-            _ => (),\n+                }),\n+                _ => (),\n+            }\n         }\n     }\n }"}, {"sha": "36d31aa043bb9ec700bcd6e0f216fa1816521f33", "filename": "tests/ui/bool_comparison.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0957f7d3b775766732d91f4a7c6bb73c9dcc1865/tests%2Fui%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0957f7d3b775766732d91f4a7c6bb73c9dcc1865/tests%2Fui%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.rs?ref=0957f7d3b775766732d91f4a7c6bb73c9dcc1865", "patch": "@@ -73,3 +73,39 @@ fn main() {\n         \"no\"\n     };\n }\n+\n+#[allow(dead_code)]\n+fn issue3703() {\n+    struct Foo;\n+    impl PartialEq<bool> for Foo {\n+        fn eq(&self, _: &bool) -> bool {\n+            true\n+        }\n+    }\n+    impl PartialEq<Foo> for bool {\n+        fn eq(&self, _: &Foo) -> bool {\n+            true\n+        }\n+    }\n+    impl PartialOrd<bool> for Foo {\n+        fn partial_cmp(&self, _: &bool) -> Option<std::cmp::Ordering> {\n+            None\n+        }\n+    }\n+    impl PartialOrd<Foo> for bool {\n+        fn partial_cmp(&self, _: &Foo) -> Option<std::cmp::Ordering> {\n+            None\n+        }\n+    }\n+\n+    if Foo == true {}\n+    if true == Foo {}\n+    if Foo != true {}\n+    if true != Foo {}\n+    if Foo == false {}\n+    if false == Foo {}\n+    if Foo != false {}\n+    if false != Foo {}\n+    if Foo < false {}\n+    if false < Foo {}\n+}"}]}