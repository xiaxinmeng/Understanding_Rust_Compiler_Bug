{"sha": "11d96b59307b1702fffe871bfc2d0145d070881e", "node_id": "C_kwDOAAsO6NoAKDExZDk2YjU5MzA3YjE3MDJmZmZlODcxYmZjMmQwMTQ1ZDA3MDg4MWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-01T11:37:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-01T11:37:24Z"}, "message": "Auto merge of #107257 - inquisitivecrystal:ffi-attr, r=davidtwco\n\nStrengthen validation of FFI attributes\n\nPreviously, `codegen_attrs` validated the attributes `#[ffi_pure]`, `#[ffi_const]`, and `#[ffi_returns_twice]` to make sure that they were only used on foreign functions. However, this validation was insufficient in two ways:\n\n1. `codegen_attrs` only sees items for which code must be generated, so it was unable to raise errors when the attribute was incorrectly applied to macros and the like.\n2. the validation code only checked that the item with the attr was foreign, but not that it was a foreign function, allowing these attributes to be applied to foreign statics as well.\n\nThis PR moves the validation to `check_attr`, which sees all items. It additionally changes the validation to ensure that the attribute's target is `Target::ForeignFunction`, only allowing the attributes on foreign functions and not foreign statics. Because these attributes are unstable, there is no risk for backwards compatibility. The changes also ending up making the code much easier to read.\n\nThis PR is best reviewed commit by commit. Additionally, I was considering moving the tests to the `attribute` subdirectory, to get them out of the general UI directory. I could do that as part of this PR or a follow-up, as the reviewer prefers.\n\nCC: #58328, #58329", "tree": {"sha": "af26139253d2807f229208f8301714afc803c306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af26139253d2807f229208f8301714afc803c306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11d96b59307b1702fffe871bfc2d0145d070881e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11d96b59307b1702fffe871bfc2d0145d070881e", "html_url": "https://github.com/rust-lang/rust/commit/11d96b59307b1702fffe871bfc2d0145d070881e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11d96b59307b1702fffe871bfc2d0145d070881e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b639486c17e9144a9176382ecb2a0b801263935", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b639486c17e9144a9176382ecb2a0b801263935", "html_url": "https://github.com/rust-lang/rust/commit/3b639486c17e9144a9176382ecb2a0b801263935"}, {"sha": "bc23e9aa4c78066043be246a47627746341480dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc23e9aa4c78066043be246a47627746341480dd", "html_url": "https://github.com/rust-lang/rust/commit/bc23e9aa4c78066043be246a47627746341480dd"}], "stats": {"total": 197, "additions": 147, "deletions": 50}, "files": [{"sha": "9831e98fe371c33466e86f939fa8d36492872f27", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 3, "deletions": 47, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/11d96b59307b1702fffe871bfc2d0145d070881e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d96b59307b1702fffe871bfc2d0145d070881e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=11d96b59307b1702fffe871bfc2d0145d070881e", "patch": "@@ -85,55 +85,11 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n         } else if attr.has_name(sym::rustc_allocator) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR;\n         } else if attr.has_name(sym::ffi_returns_twice) {\n-            if tcx.is_foreign_item(did) {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_RETURNS_TWICE;\n-            } else {\n-                // `#[ffi_returns_twice]` is only allowed `extern fn`s.\n-                struct_span_err!(\n-                    tcx.sess,\n-                    attr.span,\n-                    E0724,\n-                    \"`#[ffi_returns_twice]` may only be used on foreign functions\"\n-                )\n-                .emit();\n-            }\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_RETURNS_TWICE;\n         } else if attr.has_name(sym::ffi_pure) {\n-            if tcx.is_foreign_item(did) {\n-                if attrs.iter().any(|a| a.has_name(sym::ffi_const)) {\n-                    // `#[ffi_const]` functions cannot be `#[ffi_pure]`\n-                    struct_span_err!(\n-                        tcx.sess,\n-                        attr.span,\n-                        E0757,\n-                        \"`#[ffi_const]` function cannot be `#[ffi_pure]`\"\n-                    )\n-                    .emit();\n-                } else {\n-                    codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_PURE;\n-                }\n-            } else {\n-                // `#[ffi_pure]` is only allowed on foreign functions\n-                struct_span_err!(\n-                    tcx.sess,\n-                    attr.span,\n-                    E0755,\n-                    \"`#[ffi_pure]` may only be used on foreign functions\"\n-                )\n-                .emit();\n-            }\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_PURE;\n         } else if attr.has_name(sym::ffi_const) {\n-            if tcx.is_foreign_item(did) {\n-                codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_CONST;\n-            } else {\n-                // `#[ffi_const]` is only allowed on foreign functions\n-                struct_span_err!(\n-                    tcx.sess,\n-                    attr.span,\n-                    E0756,\n-                    \"`#[ffi_const]` may only be used on foreign functions\"\n-                )\n-                .emit();\n-            }\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_CONST;\n         } else if attr.has_name(sym::rustc_nounwind) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND;\n         } else if attr.has_name(sym::rustc_reallocator) {"}, {"sha": "0c7e02912d4ef5af76dd39e631a5c3d32de306aa", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11d96b59307b1702fffe871bfc2d0145d070881e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/11d96b59307b1702fffe871bfc2d0145d070881e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=11d96b59307b1702fffe871bfc2d0145d070881e", "patch": "@@ -182,6 +182,18 @@ passes_has_incoherent_inherent_impl =\n     `rustc_has_incoherent_inherent_impls` attribute should be applied to types or traits.\n     .label = only adts, extern types and traits are supported\n \n+passes_both_ffi_const_and_pure =\n+    `#[ffi_const]` function cannot be `#[ffi_pure]`\n+\n+passes_ffi_pure_invalid_target =\n+    `#[ffi_pure]` may only be used on foreign functions\n+\n+passes_ffi_const_invalid_target =\n+    `#[ffi_const]` may only be used on foreign functions\n+\n+passes_ffi_returns_twice_invalid_target =\n+    `#[ffi_returns_twice]` may only be used on foreign functions\n+\n passes_must_use_async =\n     `must_use` attribute on `async` functions applies to the anonymous `Future` returned by the function, not the value within\n     .label = this attribute does nothing, the `Future`s returned by async functions are already `must_use`"}, {"sha": "644d701be0caa79ddcbfcb7e04bcc321309db8de", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/11d96b59307b1702fffe871bfc2d0145d070881e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d96b59307b1702fffe871bfc2d0145d070881e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=11d96b59307b1702fffe871bfc2d0145d070881e", "patch": "@@ -174,6 +174,9 @@ impl CheckAttrVisitor<'_> {\n                 sym::rustc_has_incoherent_inherent_impls => {\n                     self.check_has_incoherent_inherent_impls(&attr, span, target)\n                 }\n+                sym::ffi_pure => self.check_ffi_pure(attr.span, attrs, target),\n+                sym::ffi_const => self.check_ffi_const(attr.span, target),\n+                sym::ffi_returns_twice => self.check_ffi_returns_twice(attr.span, target),\n                 sym::rustc_const_unstable\n                 | sym::rustc_const_stable\n                 | sym::unstable\n@@ -1213,6 +1216,38 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    fn check_ffi_pure(&self, attr_span: Span, attrs: &[Attribute], target: Target) -> bool {\n+        if target != Target::ForeignFn {\n+            self.tcx.sess.emit_err(errors::FfiPureInvalidTarget { attr_span });\n+            return false;\n+        }\n+        if attrs.iter().any(|a| a.has_name(sym::ffi_const)) {\n+            // `#[ffi_const]` functions cannot be `#[ffi_pure]`\n+            self.tcx.sess.emit_err(errors::BothFfiConstAndPure { attr_span });\n+            false\n+        } else {\n+            true\n+        }\n+    }\n+\n+    fn check_ffi_const(&self, attr_span: Span, target: Target) -> bool {\n+        if target == Target::ForeignFn {\n+            true\n+        } else {\n+            self.tcx.sess.emit_err(errors::FfiConstInvalidTarget { attr_span });\n+            false\n+        }\n+    }\n+\n+    fn check_ffi_returns_twice(&self, attr_span: Span, target: Target) -> bool {\n+        if target == Target::ForeignFn {\n+            true\n+        } else {\n+            self.tcx.sess.emit_err(errors::FfiReturnsTwiceInvalidTarget { attr_span });\n+            false\n+        }\n+    }\n+\n     /// Warns against some misuses of `#[must_use]`\n     fn check_must_use(&self, hir_id: HirId, attr: &Attribute, target: Target) -> bool {\n         if !matches!("}, {"sha": "68b098e3457b7b77fd6c1d455aef2065cbf121a2", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11d96b59307b1702fffe871bfc2d0145d070881e/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d96b59307b1702fffe871bfc2d0145d070881e/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=11d96b59307b1702fffe871bfc2d0145d070881e", "patch": "@@ -348,6 +348,34 @@ pub struct HasIncoherentInherentImpl {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(passes_both_ffi_const_and_pure, code = \"E0757\")]\n+pub struct BothFfiConstAndPure {\n+    #[primary_span]\n+    pub attr_span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_ffi_pure_invalid_target, code = \"E0755\")]\n+pub struct FfiPureInvalidTarget {\n+    #[primary_span]\n+    pub attr_span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_ffi_const_invalid_target, code = \"E0756\")]\n+pub struct FfiConstInvalidTarget {\n+    #[primary_span]\n+    pub attr_span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes_ffi_returns_twice_invalid_target, code = \"E0724\")]\n+pub struct FfiReturnsTwiceInvalidTarget {\n+    #[primary_span]\n+    pub attr_span: Span,\n+}\n+\n #[derive(LintDiagnostic)]\n #[diag(passes_must_use_async)]\n pub struct MustUseAsync {"}, {"sha": "aa20a4d4c653a871d276fdf45ed00f7fae764ccf", "filename": "tests/ui/ffi_const.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11d96b59307b1702fffe871bfc2d0145d070881e/tests%2Fui%2Fffi_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d96b59307b1702fffe871bfc2d0145d070881e/tests%2Fui%2Fffi_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fffi_const.rs?ref=11d96b59307b1702fffe871bfc2d0145d070881e", "patch": "@@ -3,3 +3,13 @@\n \n #[ffi_const] //~ ERROR `#[ffi_const]` may only be used on foreign functions\n pub fn foo() {}\n+\n+#[ffi_const] //~ ERROR `#[ffi_const]` may only be used on foreign functions\n+macro_rules! bar {\n+    () => ()\n+}\n+\n+extern \"C\" {\n+    #[ffi_const] //~ ERROR `#[ffi_const]` may only be used on foreign functions\n+    static INT: i32;\n+}"}, {"sha": "394b98f89712a6f7380d1921e24132a89f4b0b52", "filename": "tests/ui/ffi_const.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11d96b59307b1702fffe871bfc2d0145d070881e/tests%2Fui%2Fffi_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11d96b59307b1702fffe871bfc2d0145d070881e/tests%2Fui%2Fffi_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fffi_const.stderr?ref=11d96b59307b1702fffe871bfc2d0145d070881e", "patch": "@@ -4,6 +4,18 @@ error[E0756]: `#[ffi_const]` may only be used on foreign functions\n LL | #[ffi_const]\n    | ^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0756]: `#[ffi_const]` may only be used on foreign functions\n+  --> $DIR/ffi_const.rs:7:1\n+   |\n+LL | #[ffi_const]\n+   | ^^^^^^^^^^^^\n+\n+error[E0756]: `#[ffi_const]` may only be used on foreign functions\n+  --> $DIR/ffi_const.rs:13:5\n+   |\n+LL |     #[ffi_const]\n+   |     ^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0756`."}, {"sha": "6d2f3a614ec97154f344223a35be02d6c8ed216e", "filename": "tests/ui/ffi_pure.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11d96b59307b1702fffe871bfc2d0145d070881e/tests%2Fui%2Fffi_pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d96b59307b1702fffe871bfc2d0145d070881e/tests%2Fui%2Fffi_pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fffi_pure.rs?ref=11d96b59307b1702fffe871bfc2d0145d070881e", "patch": "@@ -3,3 +3,13 @@\n \n #[ffi_pure] //~ ERROR `#[ffi_pure]` may only be used on foreign functions\n pub fn foo() {}\n+\n+#[ffi_pure] //~ ERROR `#[ffi_pure]` may only be used on foreign functions\n+macro_rules! bar {\n+    () => ()\n+}\n+\n+extern \"C\" {\n+    #[ffi_pure] //~ ERROR `#[ffi_pure]` may only be used on foreign functions\n+    static INT: i32;\n+}"}, {"sha": "8b61a4b609fc08e9e1f1dffbbf9e0be36615147d", "filename": "tests/ui/ffi_pure.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11d96b59307b1702fffe871bfc2d0145d070881e/tests%2Fui%2Fffi_pure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11d96b59307b1702fffe871bfc2d0145d070881e/tests%2Fui%2Fffi_pure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fffi_pure.stderr?ref=11d96b59307b1702fffe871bfc2d0145d070881e", "patch": "@@ -4,6 +4,18 @@ error[E0755]: `#[ffi_pure]` may only be used on foreign functions\n LL | #[ffi_pure]\n    | ^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0755]: `#[ffi_pure]` may only be used on foreign functions\n+  --> $DIR/ffi_pure.rs:7:1\n+   |\n+LL | #[ffi_pure]\n+   | ^^^^^^^^^^^\n+\n+error[E0755]: `#[ffi_pure]` may only be used on foreign functions\n+  --> $DIR/ffi_pure.rs:13:5\n+   |\n+LL |     #[ffi_pure]\n+   |     ^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0755`."}, {"sha": "8195d0e48636927b6a7410c18637a451c516773b", "filename": "tests/ui/ffi_returns_twice.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11d96b59307b1702fffe871bfc2d0145d070881e/tests%2Fui%2Fffi_returns_twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d96b59307b1702fffe871bfc2d0145d070881e/tests%2Fui%2Fffi_returns_twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fffi_returns_twice.rs?ref=11d96b59307b1702fffe871bfc2d0145d070881e", "patch": "@@ -3,3 +3,13 @@\n \n #[ffi_returns_twice] //~ ERROR `#[ffi_returns_twice]` may only be used on foreign functions\n pub fn foo() {}\n+\n+#[ffi_returns_twice] //~ ERROR `#[ffi_returns_twice]` may only be used on foreign functions\n+macro_rules! bar {\n+    () => ()\n+}\n+\n+extern \"C\" {\n+    #[ffi_returns_twice] //~ ERROR `#[ffi_returns_twice]` may only be used on foreign functions\n+    static INT: i32;\n+}"}, {"sha": "0abe7613f1493a0ce7521c374577b92509ea80f9", "filename": "tests/ui/ffi_returns_twice.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11d96b59307b1702fffe871bfc2d0145d070881e/tests%2Fui%2Fffi_returns_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11d96b59307b1702fffe871bfc2d0145d070881e/tests%2Fui%2Fffi_returns_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fffi_returns_twice.stderr?ref=11d96b59307b1702fffe871bfc2d0145d070881e", "patch": "@@ -4,6 +4,18 @@ error[E0724]: `#[ffi_returns_twice]` may only be used on foreign functions\n LL | #[ffi_returns_twice]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0724]: `#[ffi_returns_twice]` may only be used on foreign functions\n+  --> $DIR/ffi_returns_twice.rs:7:1\n+   |\n+LL | #[ffi_returns_twice]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0724]: `#[ffi_returns_twice]` may only be used on foreign functions\n+  --> $DIR/ffi_returns_twice.rs:13:5\n+   |\n+LL |     #[ffi_returns_twice]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0724`."}]}