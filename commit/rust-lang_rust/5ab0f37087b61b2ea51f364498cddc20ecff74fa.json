{"sha": "5ab0f37087b61b2ea51f364498cddc20ecff74fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYjBmMzcwODdiNjFiMmVhNTFmMzY0NDk4Y2RkYzIwZWNmZjc0ZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-20T04:58:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-20T04:58:13Z"}, "message": "Auto merge of #84697 - CDirkx:util, r=m-ou-se\n\nIntroduce `sys_common::rt::rtprintpanic!` to replace `sys_common::util` functionality\n\nThis PR introduces a new macro `rtprintpanic!`, similar to `sys_common::util::dumb_print` and uses that macro to replace all `sys_common::util` functionality.", "tree": {"sha": "6a91baf3a776ee830c8fd604503f04d95f567340", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a91baf3a776ee830c8fd604503f04d95f567340"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ab0f37087b61b2ea51f364498cddc20ecff74fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab0f37087b61b2ea51f364498cddc20ecff74fa", "html_url": "https://github.com/rust-lang/rust/commit/5ab0f37087b61b2ea51f364498cddc20ecff74fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ab0f37087b61b2ea51f364498cddc20ecff74fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a426fc37f2269093ef1a4dbb3e31b3247980fccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a426fc37f2269093ef1a4dbb3e31b3247980fccc", "html_url": "https://github.com/rust-lang/rust/commit/a426fc37f2269093ef1a4dbb3e31b3247980fccc"}, {"sha": "4ff5ab52966203b8ad8da96f897566e4a218308a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff5ab52966203b8ad8da96f897566e4a218308a", "html_url": "https://github.com/rust-lang/rust/commit/4ff5ab52966203b8ad8da96f897566e4a218308a"}], "stats": {"total": 80, "additions": 34, "deletions": 46}, "files": [{"sha": "8ee55234cea430e788fb8b03dbe5b6ab477a587e", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ab0f37087b61b2ea51f364498cddc20ecff74fa/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab0f37087b61b2ea51f364498cddc20ecff74fa/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=5ab0f37087b61b2ea51f364498cddc20ecff74fa", "patch": "@@ -63,8 +63,6 @@ use core::ptr::NonNull;\n use core::sync::atomic::{AtomicPtr, Ordering};\n use core::{mem, ptr};\n \n-use crate::sys_common::util::dumb_print;\n-\n #[stable(feature = \"alloc_module\", since = \"1.28.0\")]\n #[doc(inline)]\n pub use alloc_crate::alloc::*;\n@@ -317,7 +315,7 @@ pub fn take_alloc_error_hook() -> fn(Layout) {\n }\n \n fn default_alloc_error_hook(layout: Layout) {\n-    dumb_print(format_args!(\"memory allocation of {} bytes failed\\n\", layout.size()));\n+    rtprintpanic!(\"memory allocation of {} bytes failed\\n\", layout.size());\n }\n \n #[cfg(not(test))]"}, {"sha": "02957e75a7409f8aa1955927aa6e177203e1342c", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ab0f37087b61b2ea51f364498cddc20ecff74fa/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab0f37087b61b2ea51f364498cddc20ecff74fa/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=5ab0f37087b61b2ea51f364498cddc20ecff74fa", "patch": "@@ -20,7 +20,7 @@ use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::stdio::panic_output;\n use crate::sys_common::backtrace::{self, RustBacktrace};\n use crate::sys_common::rwlock::RWLock;\n-use crate::sys_common::{thread_info, util};\n+use crate::sys_common::thread_info;\n use crate::thread;\n \n #[cfg(not(test))]\n@@ -596,15 +596,12 @@ fn rust_panic_with_hook(\n         if panics > 2 {\n             // Don't try to print the message in this case\n             // - perhaps that is causing the recursive panics.\n-            util::dumb_print(format_args!(\"thread panicked while processing panic. aborting.\\n\"));\n+            rtprintpanic!(\"thread panicked while processing panic. aborting.\\n\");\n         } else {\n             // Unfortunately, this does not print a backtrace, because creating\n             // a `Backtrace` will allocate, which we must to avoid here.\n             let panicinfo = PanicInfo::internal_constructor(message, location);\n-            util::dumb_print(format_args!(\n-                \"{}\\npanicked after panic::always_abort(), aborting.\\n\",\n-                panicinfo\n-            ));\n+            rtprintpanic!(\"{}\\npanicked after panic::always_abort(), aborting.\\n\", panicinfo);\n         }\n         intrinsics::abort()\n     }\n@@ -637,7 +634,7 @@ fn rust_panic_with_hook(\n         // have limited options. Currently our preference is to\n         // just abort. In the future we may consider resuming\n         // unwinding or otherwise exiting the thread cleanly.\n-        util::dumb_print(format_args!(\"thread panicked while panicking. aborting.\\n\"));\n+        rtprintpanic!(\"thread panicked while panicking. aborting.\\n\");\n         intrinsics::abort()\n     }\n "}, {"sha": "81f47a779d33b46e94f4c92b172c07560bb552f3", "filename": "library/std/src/sys/unix/stack_overflow.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ab0f37087b61b2ea51f364498cddc20ecff74fa/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab0f37087b61b2ea51f364498cddc20ecff74fa/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs?ref=5ab0f37087b61b2ea51f364498cddc20ecff74fa", "patch": "@@ -42,6 +42,7 @@ mod imp {\n     use crate::io;\n     use crate::mem;\n     use crate::ptr;\n+    use crate::thread;\n \n     use libc::MAP_FAILED;\n     use libc::{mmap, munmap};\n@@ -95,15 +96,16 @@ mod imp {\n         info: *mut libc::siginfo_t,\n         _data: *mut libc::c_void,\n     ) {\n-        use crate::sys_common::util::report_overflow;\n-\n         let guard = thread_info::stack_guard().unwrap_or(0..0);\n         let addr = siginfo_si_addr(info);\n \n         // If the faulting address is within the guard page, then we print a\n         // message saying so and abort.\n         if guard.start <= addr && addr < guard.end {\n-            report_overflow();\n+            rtprintpanic!(\n+                \"\\nthread '{}' has overflowed its stack\\n\",\n+                thread::current().name().unwrap_or(\"<unknown>\")\n+            );\n             rtabort!(\"stack overflow\");\n         } else {\n             // Unregister ourselves by reverting back to the default behavior."}, {"sha": "755dc0a6c8b47045a5ce45149d0f1762a454a3bc", "filename": "library/std/src/sys/windows/stack_overflow.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ab0f37087b61b2ea51f364498cddc20ecff74fa/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab0f37087b61b2ea51f364498cddc20ecff74fa/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstack_overflow.rs?ref=5ab0f37087b61b2ea51f364498cddc20ecff74fa", "patch": "@@ -1,7 +1,7 @@\n #![cfg_attr(test, allow(dead_code))]\n \n use crate::sys::c;\n-use crate::sys_common::util::report_overflow;\n+use crate::thread;\n \n pub struct Handler;\n \n@@ -24,7 +24,10 @@ extern \"system\" fn vectored_handler(ExceptionInfo: *mut c::EXCEPTION_POINTERS) -\n         let code = rec.ExceptionCode;\n \n         if code == c::EXCEPTION_STACK_OVERFLOW {\n-            report_overflow();\n+            rtprintpanic!(\n+                \"\\nthread '{}' has overflowed its stack\\n\",\n+                thread::current().name().unwrap_or(\"<unknown>\")\n+            );\n         }\n         c::EXCEPTION_CONTINUE_SEARCH\n     }"}, {"sha": "4ef0e72adf020a0143a472b6d1e6836952f474e9", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ab0f37087b61b2ea51f364498cddc20ecff74fa/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab0f37087b61b2ea51f364498cddc20ecff74fa/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=5ab0f37087b61b2ea51f364498cddc20ecff74fa", "patch": "@@ -40,7 +40,6 @@ pub mod thread_info;\n pub mod thread_local_dtor;\n pub mod thread_local_key;\n pub mod thread_parker;\n-pub mod util;\n pub mod wtf8;\n \n cfg_if::cfg_if! {"}, {"sha": "02013ecc4ced6b8769f3a4f7c8b6b1c2ecfaf8b7", "filename": "library/std/src/sys_common/rt.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5ab0f37087b61b2ea51f364498cddc20ecff74fa/library%2Fstd%2Fsrc%2Fsys_common%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab0f37087b61b2ea51f364498cddc20ecff74fa/library%2Fstd%2Fsrc%2Fsys_common%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frt.rs?ref=5ab0f37087b61b2ea51f364498cddc20ecff74fa", "patch": "@@ -1,4 +1,5 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n+#![allow(unused_macros)]\n \n use crate::sync::Once;\n use crate::sys;\n@@ -38,8 +39,25 @@ pub fn cleanup() {\n     });\n }\n \n+// Prints to the \"panic output\", depending on the platform this may be:\n+// - the standard error output\n+// - some dedicated platform specific output\n+// - nothing (so this macro is a no-op)\n+macro_rules! rtprintpanic {\n+    ($($t:tt)*) => {\n+        if let Some(mut out) = crate::sys::stdio::panic_output() {\n+            let _ = crate::io::Write::write_fmt(&mut out, format_args!($($t)*));\n+        }\n+    }\n+}\n+\n macro_rules! rtabort {\n-    ($($t:tt)*) => (crate::sys_common::util::abort(format_args!($($t)*)))\n+    ($($t:tt)*) => {\n+        {\n+            rtprintpanic!(\"fatal runtime error: {}\\n\", format_args!($($t)*));\n+            crate::sys::abort_internal();\n+        }\n+    }\n }\n \n macro_rules! rtassert {\n@@ -50,7 +68,6 @@ macro_rules! rtassert {\n     };\n }\n \n-#[allow(unused_macros)] // not used on all platforms\n macro_rules! rtunwrap {\n     ($ok:ident, $e:expr) => {\n         match $e {"}, {"sha": "9f7c3bd87952f31fcab40fa22d9034425df5d04e", "filename": "library/std/src/sys_common/util.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a426fc37f2269093ef1a4dbb3e31b3247980fccc/library%2Fstd%2Fsrc%2Fsys_common%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a426fc37f2269093ef1a4dbb3e31b3247980fccc/library%2Fstd%2Fsrc%2Fsys_common%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Futil.rs?ref=a426fc37f2269093ef1a4dbb3e31b3247980fccc", "patch": "@@ -1,28 +0,0 @@\n-use crate::fmt;\n-use crate::io::prelude::*;\n-use crate::sys::stdio::panic_output;\n-use crate::thread;\n-\n-pub fn dumb_print(args: fmt::Arguments<'_>) {\n-    if let Some(mut out) = panic_output() {\n-        let _ = out.write_fmt(args);\n-    }\n-}\n-\n-// Other platforms should use the appropriate platform-specific mechanism for\n-// aborting the process.  If no platform-specific mechanism is available,\n-// crate::intrinsics::abort() may be used instead.  The above implementations cover\n-// all targets currently supported by libstd.\n-\n-pub fn abort(args: fmt::Arguments<'_>) -> ! {\n-    dumb_print(format_args!(\"fatal runtime error: {}\\n\", args));\n-    crate::sys::abort_internal();\n-}\n-\n-#[allow(dead_code)] // stack overflow detection not enabled on all platforms\n-pub unsafe fn report_overflow() {\n-    dumb_print(format_args!(\n-        \"\\nthread '{}' has overflowed its stack\\n\",\n-        thread::current().name().unwrap_or(\"<unknown>\")\n-    ));\n-}"}]}