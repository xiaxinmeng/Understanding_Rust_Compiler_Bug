{"sha": "3f69c1b523b4606d09dfdb3c8d9cb7d05e239595", "node_id": "C_kwDOAAsO6NoAKDNmNjljMWI1MjNiNDYwNmQwOWRmZGIzYzhkOWNiN2QwNWUyMzk1OTU", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-09-05T19:05:19Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T22:07:25Z"}, "message": "migrate: `non_ascii_idents.rs`", "tree": {"sha": "05094c37bf2efb629473348502d245cb927ce23d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05094c37bf2efb629473348502d245cb927ce23d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f69c1b523b4606d09dfdb3c8d9cb7d05e239595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f69c1b523b4606d09dfdb3c8d9cb7d05e239595", "html_url": "https://github.com/rust-lang/rust/commit/3f69c1b523b4606d09dfdb3c8d9cb7d05e239595", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f69c1b523b4606d09dfdb3c8d9cb7d05e239595/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "384010b9f47e6747e6f0b21439666cfe19e2573c", "url": "https://api.github.com/repos/rust-lang/rust/commits/384010b9f47e6747e6f0b21439666cfe19e2573c", "html_url": "https://github.com/rust-lang/rust/commit/384010b9f47e6747e6f0b21439666cfe19e2573c"}], "stats": {"total": 84, "additions": 49, "deletions": 35}, "files": [{"sha": "47582e6a1c68b687f8e9e2ff44e564d44220e625", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3f69c1b523b4606d09dfdb3c8d9cb7d05e239595/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f69c1b523b4606d09dfdb3c8d9cb7d05e239595/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=3f69c1b523b4606d09dfdb3c8d9cb7d05e239595", "patch": "@@ -6,6 +6,32 @@ use rustc_span::{symbol::Ident, Span, Symbol};\n \n use crate::LateContext;\n \n+#[derive(LintDiagnostic)]\n+#[diag(lint_identifier_non_ascii_char)]\n+pub struct IdentifierNonAsciiChar;\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_identifier_uncommon_codepoints)]\n+pub struct IdentifierUncommonCodepoints;\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_confusable_identifier_pair)]\n+pub struct ConfusableIdentifierPair {\n+    pub existing_sym: Symbol,\n+    pub sym: Symbol,\n+    #[label]\n+    pub label: Span,\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_mixed_script_confusables)]\n+#[note(includes_note)]\n+#[note]\n+pub struct MixedScriptConfusables {\n+    pub set: String,\n+    pub includes: String,\n+}\n+\n pub struct NonFmtPanicUnused {\n     pub count: usize,\n     pub suggestion: Option<Span>,"}, {"sha": "1cac1508bbd6b13bee9b5e7542f61d10f2c611a8", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 23, "deletions": 35, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3f69c1b523b4606d09dfdb3c8d9cb7d05e239595/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f69c1b523b4606d09dfdb3c8d9cb7d05e239595/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=3f69c1b523b4606d09dfdb3c8d9cb7d05e239595", "patch": "@@ -1,7 +1,12 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+use crate::lints::{\n+    ConfusableIdentifierPair, IdentifierNonAsciiChar, IdentifierUncommonCodepoints,\n+    MixedScriptConfusables,\n+};\n use crate::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::fluent;\n use rustc_span::symbol::Symbol;\n \n declare_lint! {\n@@ -180,21 +185,11 @@ impl EarlyLintPass for NonAsciiIdents {\n                 continue;\n             }\n             has_non_ascii_idents = true;\n-            cx.struct_span_lint(\n-                NON_ASCII_IDENTS,\n-                sp,\n-                fluent::lint_identifier_non_ascii_char,\n-                |lint| lint,\n-            );\n+            cx.emit_spanned_lint(NON_ASCII_IDENTS, sp, IdentifierNonAsciiChar);\n             if check_uncommon_codepoints\n                 && !symbol_str.chars().all(GeneralSecurityProfile::identifier_allowed)\n             {\n-                cx.struct_span_lint(\n-                    UNCOMMON_CODEPOINTS,\n-                    sp,\n-                    fluent::lint_identifier_uncommon_codepoints,\n-                    |lint| lint,\n-                )\n+                cx.emit_spanned_lint(UNCOMMON_CODEPOINTS, sp, IdentifierUncommonCodepoints);\n             }\n         }\n \n@@ -222,14 +217,13 @@ impl EarlyLintPass for NonAsciiIdents {\n                     .entry(skeleton_sym)\n                     .and_modify(|(existing_symbol, existing_span, existing_is_ascii)| {\n                         if !*existing_is_ascii || !is_ascii {\n-                            cx.struct_span_lint(\n+                            cx.emit_spanned_lint(\n                                 CONFUSABLE_IDENTS,\n                                 sp,\n-                                fluent::lint_confusable_identifier_pair,\n-                                |lint| {\n-                                    lint.set_arg(\"existing_sym\", *existing_symbol)\n-                                        .set_arg(\"sym\", symbol)\n-                                        .span_label(*existing_span, fluent::label)\n+                                ConfusableIdentifierPair {\n+                                    existing_sym: *existing_symbol,\n+                                    sym: symbol,\n+                                    label: *existing_span,\n                                 },\n                             );\n                         }\n@@ -331,24 +325,18 @@ impl EarlyLintPass for NonAsciiIdents {\n                 }\n \n                 for ((sp, ch_list), script_set) in lint_reports {\n-                    cx.struct_span_lint(\n+                    let mut includes = String::new();\n+                    for (idx, ch) in ch_list.into_iter().enumerate() {\n+                        if idx != 0 {\n+                            includes += \", \";\n+                        }\n+                        let char_info = format!(\"'{}' (U+{:04X})\", ch, ch as u32);\n+                        includes += &char_info;\n+                    }\n+                    cx.emit_spanned_lint(\n                         MIXED_SCRIPT_CONFUSABLES,\n                         sp,\n-                        fluent::lint_mixed_script_confusables,\n-                        |lint| {\n-                            let mut includes = String::new();\n-                            for (idx, ch) in ch_list.into_iter().enumerate() {\n-                                if idx != 0 {\n-                                    includes += \", \";\n-                                }\n-                                let char_info = format!(\"'{}' (U+{:04X})\", ch, ch as u32);\n-                                includes += &char_info;\n-                            }\n-                            lint.set_arg(\"set\", script_set.to_string())\n-                                .set_arg(\"includes\", includes)\n-                                .note(fluent::includes_note)\n-                                .note(fluent::note)\n-                        },\n+                        MixedScriptConfusables { set: script_set.to_string(), includes },\n                     );\n                 }\n             }"}]}