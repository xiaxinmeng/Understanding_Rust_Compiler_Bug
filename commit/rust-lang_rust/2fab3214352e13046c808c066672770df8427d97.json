{"sha": "2fab3214352e13046c808c066672770df8427d97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYWIzMjE0MzUyZTEzMDQ2YzgwOGMwNjY2NzI3NzBkZjg0MjdkOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-27T13:11:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-27T13:11:06Z"}, "message": "Auto merge of #79134 - ohadravid:nzint-div, r=dtolnay\n\nAdd `impl Div<NonZeroU{0}> for u{0}` which cannot panic\n\nDividing an unsigned int by a `NonZeroUxx` requires a user to write (for example, in [this SO question](https://stackoverflow.com/questions/64855738/how-to-inform-the-optimizer-that-nonzerou32get-will-never-return-zero)):\n\n```\npub fn safe_div(x: u32, y: std::num::NonZeroU32) -> u32 {\n    x / y.get()\n}\n```\n\nwhich generates a panicking-checked-div [assembly](https://godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(fontScale:14,j:1,lang:rust,selection:(endColumn:2,endLineNumber:6,positionColumn:2,positionLineNumber:6,selectionStartColumn:2,selectionStartLineNumber:6,startColumn:2,startLineNumber:6),source:%27pub+fn+div(x:+u32,+y:+u32)+-%3E+u32+%7B%0A++++x+/+y%0A%7D%0Apub+fn+safe_div(x:+u32,+y:+std::num::NonZeroU32)+-%3E+u32+%7B%0A++++x+/+y.get()+//+an+unchecked+division+expected%0A%7D%27),l:%275%27,n:%270%27,o:%27Rust+source+%231%27,t:%270%27)),k:50,l:%274%27,n:%270%27,o:%27%27,s:0,t:%270%27),(g:!((h:compiler,i:(compiler:r1470,filters:(b:%270%27,binary:%271%27,commentOnly:%270%27,demangle:%270%27,directives:%270%27,execute:%271%27,intel:%270%27,libraryCode:%271%27,trim:%271%27),fontScale:14,j:1,lang:rust,libs:!(),options:%27-O%27,selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1),l:%275%27,n:%270%27,o:%27rustc+1.47.0+(Editor+%231,+Compiler+%231)+Rust%27,t:%270%27)),k:50,l:%274%27,n:%270%27,o:%27%27,s:0,t:%270%27)),l:%272%27,n:%270%27,o:%27%27,t:%270%27)),version:4).\nAvoiding the `panic` currently requires `unsafe` code.\n\nThis PR adds an `impl Div<NonZeroU{0}> for u{0}` (and `impl Rem<NonZeroU{0}> for u{0}`) which calls the `unchecked_div` (and `unchecked_rem`) intrinsic without any additional checks,\nmaking the following code compile:\n\n```\npub fn safe_div(x: u32, y: std::num::NonZeroU32) -> u32 {\n    x / y\n}\n\npub fn safe_rem(x: u32, y: std::num::NonZeroU32) -> u32 {\n    x % y\n}\n```\n\nThe doc is set to match the regular div impl [docs](https://doc.rust-lang.org/beta/src/core/ops/arith.rs.html#460).\n\nI've marked these as stable because (as I understand it) trait impls are automatically stable. I'm happy to change it to unstable if needed.\n\nFollowing `@dtolnay` template from a similar issue:\nthis adds the following **stable** impls, which rely on dividing unsigned integers by nonzero integers being well defined and previously would have involved unsafe code to encode that knowledge:\n```\nimpl Div<NonZeroU8> for u8 {\n    type Output = u8;\n}\n\nimpl Rem<NonZeroU8> for u8 {\n    type Output = u8;\n}\n```\nand equivalent for u16, u32, u64, u128, usize, but **not** for i8, i16, i32, i64, i128, isize (since -1/MIN is undefined).\n\nr? `@dtolnay`", "tree": {"sha": "4fcd409323ee308d3ac372e6043be7155c2f1385", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fcd409323ee308d3ac372e6043be7155c2f1385"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fab3214352e13046c808c066672770df8427d97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fab3214352e13046c808c066672770df8427d97", "html_url": "https://github.com/rust-lang/rust/commit/2fab3214352e13046c808c066672770df8427d97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fab3214352e13046c808c066672770df8427d97/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc6121ca681e3aef09b93afb13637632dcdc0e9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6121ca681e3aef09b93afb13637632dcdc0e9a", "html_url": "https://github.com/rust-lang/rust/commit/dc6121ca681e3aef09b93afb13637632dcdc0e9a"}, {"sha": "95866439125c1f81e9eb7a242d7e9f99e6d921b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/95866439125c1f81e9eb7a242d7e9f99e6d921b6", "html_url": "https://github.com/rust-lang/rust/commit/95866439125c1f81e9eb7a242d7e9f99e6d921b6"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "5eb70026d7e77e7bca7706d1cfe363ecca23d188", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2fab3214352e13046c808c066672770df8427d97/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fab3214352e13046c808c066672770df8427d97/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=2fab3214352e13046c808c066672770df8427d97", "patch": "@@ -1,7 +1,7 @@\n //! Definitions of integer that is known not to equal zero.\n \n use crate::fmt;\n-use crate::ops::{BitOr, BitOrAssign};\n+use crate::ops::{BitOr, BitOrAssign, Div, Rem};\n use crate::str::FromStr;\n \n use super::from_str_radix;\n@@ -263,3 +263,43 @@ nonzero_leading_trailing_zeros! {\n     NonZeroI128(u128), -1i128;\n     NonZeroIsize(usize), -1isize;\n }\n+\n+macro_rules! nonzero_integers_div {\n+    ( $( $Ty: ident($Int: ty); )+ ) => {\n+        $(\n+            #[stable(feature = \"nonzero_div\", since = \"1.51.0\")]\n+            impl Div<$Ty> for $Int {\n+                type Output = $Int;\n+                /// This operation rounds towards zero,\n+                /// truncating any fractional part of the exact result, and cannot panic.\n+                #[inline]\n+                fn div(self, other: $Ty) -> $Int {\n+                    // SAFETY: div by zero is checked because `other` is a nonzero,\n+                    // and MIN/-1 is checked because `self` is an unsigned int.\n+                    unsafe { crate::intrinsics::unchecked_div(self, other.get()) }\n+                }\n+            }\n+\n+            #[stable(feature = \"nonzero_div\", since = \"1.51.0\")]\n+            impl Rem<$Ty> for $Int {\n+                type Output = $Int;\n+                /// This operation satisfies `n % d == n - (n / d) * d`, and cannot panic.\n+                #[inline]\n+                fn rem(self, other: $Ty) -> $Int {\n+                    // SAFETY: rem by zero is checked because `other` is a nonzero,\n+                    // and MIN/-1 is checked because `self` is an unsigned int.\n+                    unsafe { crate::intrinsics::unchecked_rem(self, other.get()) }\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+nonzero_integers_div! {\n+    NonZeroU8(u8);\n+    NonZeroU16(u16);\n+    NonZeroU32(u32);\n+    NonZeroU64(u64);\n+    NonZeroU128(u128);\n+    NonZeroUsize(usize);\n+}"}, {"sha": "c2c08522d0cae13d058b3f32d94f0040d071cb9b", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2fab3214352e13046c808c066672770df8427d97/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fab3214352e13046c808c066672770df8427d97/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=2fab3214352e13046c808c066672770df8427d97", "patch": "@@ -312,3 +312,19 @@ fn nonzero_trailing_zeros() {\n     const TRAILING_ZEROS: u32 = NonZeroU16::new(1 << 2).unwrap().trailing_zeros();\n     assert_eq!(TRAILING_ZEROS, 2);\n }\n+\n+#[test]\n+fn test_nonzero_uint_div() {\n+    let nz = NonZeroU32::new(1).unwrap();\n+\n+    let x: u32 = 42u32 / nz;\n+    assert_eq!(x, 42u32);\n+}\n+\n+#[test]\n+fn test_nonzero_uint_rem() {\n+    let nz = NonZeroU32::new(10).unwrap();\n+\n+    let x: u32 = 42u32 % nz;\n+    assert_eq!(x, 2u32);\n+}"}]}