{"sha": "0bd11f817136f372b30a328ccf71c0bb0c68ef21", "node_id": "C_kwDOAAsO6NoAKDBiZDExZjgxNzEzNmYzNzJiMzBhMzI4Y2NmNzFjMGJiMGM2OGVmMjE", "commit": {"author": {"name": "Mihail Mihov", "email": "mmihov.personal@gmail.com", "date": "2022-11-09T22:01:29Z"}, "committer": {"name": "Mihail Mihov", "email": "mmihov.personal@gmail.com", "date": "2022-11-21T20:27:26Z"}, "message": "Reduce trigger range of `generate_impl` assist and update tests", "tree": {"sha": "cd10dd8261b8c5bdc49d1b94c9df8f87ecdbba37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd10dd8261b8c5bdc49d1b94c9df8f87ecdbba37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bd11f817136f372b30a328ccf71c0bb0c68ef21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd11f817136f372b30a328ccf71c0bb0c68ef21", "html_url": "https://github.com/rust-lang/rust/commit/0bd11f817136f372b30a328ccf71c0bb0c68ef21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bd11f817136f372b30a328ccf71c0bb0c68ef21/comments", "author": null, "committer": null, "parents": [{"sha": "ecb15ca7173a6d416c9f74af06f71cf003cdd597", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb15ca7173a6d416c9f74af06f71cf003cdd597", "html_url": "https://github.com/rust-lang/rust/commit/ecb15ca7173a6d416c9f74af06f71cf003cdd597"}], "stats": {"total": 200, "additions": 118, "deletions": 82}, "files": [{"sha": "1bea220f38936fd9067e919a19f361364a220cdc", "filename": "crates/ide-assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 116, "deletions": 80, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/0bd11f817136f372b30a328ccf71c0bb0c68ef21/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd11f817136f372b30a328ccf71c0bb0c68ef21/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=0bd11f817136f372b30a328ccf71c0bb0c68ef21", "patch": "@@ -7,8 +7,8 @@ use crate::{utils::generate_impl_text, AssistContext, AssistId, AssistKind, Assi\n // Adds a new inherent impl for a type.\n //\n // ```\n-// struct Ctx<T: Clone> {\n-//     data: T,$0\n+// struct Ctx$0<T: Clone> {\n+//     data: T,\n // }\n // ```\n // ->\n@@ -26,6 +26,10 @@ pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext<'_>) -> Optio\n     let name = nominal.name()?;\n     let target = nominal.syntax().text_range();\n \n+    if let Some(_) = ctx.find_node_at_offset::<ast::RecordFieldList>() {\n+        return None;\n+    }\n+\n     acc.add(\n         AssistId(\"generate_impl\", AssistKind::Generate),\n         format!(\"Generate impl for `{name}`\"),\n@@ -52,139 +56,171 @@ mod tests {\n \n     use super::*;\n \n-    // FIXME: break up into separate test fns\n     #[test]\n     fn test_add_impl() {\n         check_assist(\n             generate_impl,\n-            \"struct Foo {$0}\\n\",\n-            \"struct Foo {}\\n\\nimpl Foo {\\n    $0\\n}\\n\",\n-        );\n-        check_assist(\n-            generate_impl,\n-            \"struct Foo<T: Clone> {$0}\",\n-            \"struct Foo<T: Clone> {}\\n\\nimpl<T: Clone> Foo<T> {\\n    $0\\n}\",\n-        );\n-        check_assist(\n-            generate_impl,\n-            \"struct Foo<'a, T: Foo<'a>> {$0}\",\n-            \"struct Foo<'a, T: Foo<'a>> {}\\n\\nimpl<'a, T: Foo<'a>> Foo<'a, T> {\\n    $0\\n}\",\n+            r#\"\n+                struct Foo$0 {}\n+            \"#,\n+            r#\"\n+                struct Foo {}\n+\n+                impl Foo {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n+\n+    #[test]\n+    fn test_add_impl_with_generics() {\n         check_assist(\n             generate_impl,\n             r#\"\n-            struct MyOwnArray<T, const S: usize> {}$0\"#,\n+                struct Foo$0<T: Clone> {}\n+            \"#,\n             r#\"\n-            struct MyOwnArray<T, const S: usize> {}\n+                struct Foo<T: Clone> {}\n \n-            impl<T, const S: usize> MyOwnArray<T, S> {\n-                $0\n-            }\"#,\n+                impl<T: Clone> Foo<T> {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n+\n+    #[test]\n+    fn test_add_impl_with_generics_and_lifetime_parameters() {\n         check_assist(\n             generate_impl,\n             r#\"\n-            #[cfg(feature = \"foo\")]\n-            struct Foo<'a, T: Foo<'a>> {$0}\"#,\n+                struct Foo<'a, T: Foo<'a>>$0 {}\n+            \"#,\n             r#\"\n-            #[cfg(feature = \"foo\")]\n-            struct Foo<'a, T: Foo<'a>> {}\n+                struct Foo<'a, T: Foo<'a>> {}\n \n-            #[cfg(feature = \"foo\")]\n-            impl<'a, T: Foo<'a>> Foo<'a, T> {\n-                $0\n-            }\"#,\n+                impl<'a, T: Foo<'a>> Foo<'a, T> {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n \n+    #[test]\n+    fn test_add_impl_with_attributes() {\n         check_assist(\n             generate_impl,\n             r#\"\n-            #[cfg(not(feature = \"foo\"))]\n-            struct Foo<'a, T: Foo<'a>> {$0}\"#,\n+                #[cfg(feature = \"foo\")]\n+                struct Foo<'a, T: Foo$0<'a>> {}\n+            \"#,\n             r#\"\n-            #[cfg(not(feature = \"foo\"))]\n-            struct Foo<'a, T: Foo<'a>> {}\n+                #[cfg(feature = \"foo\")]\n+                struct Foo<'a, T: Foo<'a>> {}\n \n-            #[cfg(not(feature = \"foo\"))]\n-            impl<'a, T: Foo<'a>> Foo<'a, T> {\n-                $0\n-            }\"#,\n+                #[cfg(feature = \"foo\")]\n+                impl<'a, T: Foo<'a>> Foo<'a, T> {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n \n+    #[test]\n+    fn test_add_impl_with_default_generic() {\n         check_assist(\n             generate_impl,\n             r#\"\n-            struct Defaulted<T = i32> {}$0\"#,\n+                struct Defaulted$0<T = i32> {}\n+            \"#,\n             r#\"\n-            struct Defaulted<T = i32> {}\n+                struct Defaulted<T = i32> {}\n \n-            impl<T> Defaulted<T> {\n-                $0\n-            }\"#,\n+                impl<T> Defaulted<T> {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n \n+    #[test]\n+    fn test_add_impl_with_constrained_default_generic() {\n         check_assist(\n             generate_impl,\n             r#\"\n-            struct Defaulted<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}$0\"#,\n+                struct Defaulted$0<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}\n+            \"#,\n             r#\"\n-            struct Defaulted<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}\n+                struct Defaulted<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}\n \n-            impl<'a, 'b: 'a, T: Debug + Clone + 'a + 'b, const S: usize> Defaulted<'a, 'b, T, S> {\n-                $0\n-            }\"#,\n+                impl<'a, 'b: 'a, T: Debug + Clone + 'a + 'b, const S: usize> Defaulted<'a, 'b, T, S> {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n \n+    #[test]\n+    fn test_add_impl_with_const_defaulted_generic() {\n         check_assist(\n             generate_impl,\n             r#\"\n-            struct Defaulted<const N: i32 = 0> {}$0\"#,\n+                struct Defaulted$0<const N: i32 = 0> {}\n+            \"#,\n             r#\"\n-            struct Defaulted<const N: i32 = 0> {}\n+                struct Defaulted<const N: i32 = 0> {}\n \n-            impl<const N: i32> Defaulted<N> {\n-                $0\n-            }\"#,\n+                impl<const N: i32> Defaulted<N> {\n+                    $0\n+                }\n+            \"#,\n         );\n+    }\n \n+    #[test]\n+    fn test_add_impl_with_trait_constraint() {\n         check_assist(\n             generate_impl,\n-            r#\"pub trait Trait {}\n-struct Struct<T>$0\n-where\n-    T: Trait,\n-{\n-    inner: T,\n-}\"#,\n-            r#\"pub trait Trait {}\n-struct Struct<T>\n-where\n-    T: Trait,\n-{\n-    inner: T,\n-}\n+            r#\"\n+                pub trait Trait {}\n+                struct Struct$0<T>\n+                where\n+                    T: Trait,\n+                {\n+                    inner: T,\n+                }\n+            \"#,\n+            r#\"\n+                pub trait Trait {}\n+                struct Struct<T>\n+                where\n+                    T: Trait,\n+                {\n+                    inner: T,\n+                }\n \n-impl<T> Struct<T>\n-where\n-    T: Trait,\n-{\n-    $0\n-}\"#,\n+                impl<T> Struct<T>\n+                where\n+                    T: Trait,\n+                {\n+                    $0\n+                }\n+            \"#,\n         );\n     }\n \n     #[test]\n-    fn add_impl_target() {\n+    fn add_trait_impl_target() {\n         check_assist_target(\n             generate_impl,\n-            \"\n-struct SomeThingIrrelevant;\n-/// Has a lifetime parameter\n-struct Foo<'a, T: Foo<'a>> {$0}\n-struct EvenMoreIrrelevant;\n-\",\n-            \"/// Has a lifetime parameter\n-struct Foo<'a, T: Foo<'a>> {}\",\n+            r#\"\n+                struct SomeThingIrrelevant;\n+                /// Has a lifetime parameter\n+                struct Foo$0<'a, T: Foo<'a>> {}\n+                struct EvenMoreIrrelevant;\n+            \"#,\n+            \"/// Has a lifetime parameter\\nstruct Foo<'a, T: Foo<'a>> {}\",\n         );\n     }\n }"}, {"sha": "d797f077672da5d35c3a9139f5675a207575db0d", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bd11f817136f372b30a328ccf71c0bb0c68ef21/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd11f817136f372b30a328ccf71c0bb0c68ef21/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=0bd11f817136f372b30a328ccf71c0bb0c68ef21", "patch": "@@ -1249,8 +1249,8 @@ fn doctest_generate_impl() {\n     check_doc_test(\n         \"generate_impl\",\n         r#####\"\n-struct Ctx<T: Clone> {\n-    data: T,$0\n+struct Ctx$0<T: Clone> {\n+    data: T,\n }\n \"#####,\n         r#####\""}]}