{"sha": "b781c8b08e5b6b207c0422454ab8f319c90fe64d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ODFjOGIwOGU1YjZiMjA3YzA0MjI0NTRhYjhmMzE5YzkwZmU2NGQ=", "commit": {"author": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2014-11-10T17:14:31Z"}, "committer": {"name": "Ruud van Asseldonk", "email": "dev@veniogames.com", "date": "2014-11-21T16:49:11Z"}, "message": "rustc: Unify fat pointer ABI constants.\n\nThis merges the `trt_field_*`, `fn_field_*` and `slice_elt_*` constants\ninto two `FAT_PTR_*` constants. This resolves the first part of #18590.", "tree": {"sha": "6d67642ef973c9b1257d22532c03299056846a10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d67642ef973c9b1257d22532c03299056846a10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b781c8b08e5b6b207c0422454ab8f319c90fe64d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b781c8b08e5b6b207c0422454ab8f319c90fe64d", "html_url": "https://github.com/rust-lang/rust/commit/b781c8b08e5b6b207c0422454ab8f319c90fe64d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b781c8b08e5b6b207c0422454ab8f319c90fe64d/comments", "author": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ruuda", "id": 506953, "node_id": "MDQ6VXNlcjUwNjk1Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/506953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruuda", "html_url": "https://github.com/ruuda", "followers_url": "https://api.github.com/users/ruuda/followers", "following_url": "https://api.github.com/users/ruuda/following{/other_user}", "gists_url": "https://api.github.com/users/ruuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruuda/subscriptions", "organizations_url": "https://api.github.com/users/ruuda/orgs", "repos_url": "https://api.github.com/users/ruuda/repos", "events_url": "https://api.github.com/users/ruuda/events{/privacy}", "received_events_url": "https://api.github.com/users/ruuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47c1d437c93872e6776570beac839f2587782f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c1d437c93872e6776570beac839f2587782f94", "html_url": "https://github.com/rust-lang/rust/commit/47c1d437c93872e6776570beac839f2587782f94"}], "stats": {"total": 103, "additions": 50, "deletions": 53}, "files": [{"sha": "f89d5d826f5bc1c449d2249d7aaedab5e0996feb", "filename": "src/librustc_back/abi.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_back%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_back%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fabi.rs?ref=b781c8b08e5b6b207c0422454ab8f319c90fe64d", "patch": "@@ -14,17 +14,14 @@ pub const box_field_refcnt: uint = 0u;\n pub const box_field_drop_glue: uint = 1u;\n pub const box_field_body: uint = 4u;\n \n-// FIXME(18590) although we have three different layouts here, the compiler relies on\n-// them being the same. We should replace them with one set of constants.\n+/// The first half of a fat pointer.\n+/// - For a closure, this is the code address.\n+/// - For an object or trait instance, this is the address of the box.\n+/// - For a slice, this is the base address.\n+pub const FAT_PTR_ADDR: uint = 0;\n \n-// The two halves of a closure: code and environment.\n-pub const fn_field_code: uint = 0u;\n-pub const fn_field_box: uint = 1u;\n-\n-// The two fields of a trait object/trait instance: vtable and box.\n-// The vtable contains the type descriptor as first element.\n-pub const trt_field_box: uint = 0u;\n-pub const trt_field_vtable: uint = 1u;\n-\n-pub const slice_elt_base: uint = 0u;\n-pub const slice_elt_len: uint = 1u;\n+/// The second half of a fat pointer.\n+/// - For a closure, this is the address of the environment.\n+/// - For an object or trait instance, this is the address of the vtable.\n+/// - For a slice, this is the length.\n+pub const FAT_PTR_EXTRA: uint = 1u;"}, {"sha": "d23e53d2e69bf2bbacf55ae9964162c2dac75168", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=b781c8b08e5b6b207c0422454ab8f319c90fe64d", "patch": "@@ -649,8 +649,8 @@ fn bind_subslice_pat(bcx: Block,\n                                 ty::mt {ty: vt.unit_ty, mutbl: ast::MutImmutable});\n     let scratch = rvalue_scratch_datum(bcx, slice_ty, \"\");\n     Store(bcx, slice_begin,\n-          GEPi(bcx, scratch.val, &[0u, abi::slice_elt_base]));\n-    Store(bcx, slice_len, GEPi(bcx, scratch.val, &[0u, abi::slice_elt_len]));\n+          GEPi(bcx, scratch.val, &[0u, abi::FAT_PTR_ADDR]));\n+    Store(bcx, slice_len, GEPi(bcx, scratch.val, &[0u, abi::FAT_PTR_EXTRA]));\n     scratch.val\n }\n "}, {"sha": "e7d1b9726a1b199a61804a46a23280fcb59a8279", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=b781c8b08e5b6b207c0422454ab8f319c90fe64d", "patch": "@@ -52,7 +52,7 @@ use std::num::Int;\n use std::rc::Rc;\n \n use llvm::{ValueRef, True, IntEQ, IntNE};\n-use back::abi::slice_elt_base;\n+use back::abi;\n use middle::subst;\n use middle::subst::Subst;\n use trans::_match;\n@@ -684,7 +684,7 @@ fn struct_wrapped_nullable_bitdiscr(bcx: Block, nndiscr: Disr, ptrfield: Pointer\n                                     scrutinee: ValueRef) -> ValueRef {\n     let llptrptr = match ptrfield {\n         ThinPointer(field) => GEPi(bcx, scrutinee, &[0, field]),\n-        FatPointer(field) => GEPi(bcx, scrutinee, &[0, field, slice_elt_base])\n+        FatPointer(field) => GEPi(bcx, scrutinee, &[0, field, abi::FAT_PTR_ADDR])\n     };\n     let llptr = Load(bcx, llptrptr);\n     let cmp = if nndiscr == 0 { IntEQ } else { IntNE };\n@@ -782,7 +782,7 @@ pub fn trans_set_discr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, r: &Repr<'tcx>,\n                         (GEPi(bcx, val, &[0, field]),\n                          type_of::type_of(bcx.ccx(), nonnull.fields[field])),\n                     FatPointer(field) => {\n-                        let v = GEPi(bcx, val, &[0, field, slice_elt_base]);\n+                        let v = GEPi(bcx, val, &[0, field, abi::FAT_PTR_ADDR]);\n                         (v, val_ty(v).element_type())\n                     }\n                 };\n@@ -1118,7 +1118,7 @@ pub fn const_get_discrim(ccx: &CrateContext, r: &Repr, val: ValueRef)\n         StructWrappedNullablePointer { nndiscr, ptrfield, .. } => {\n             let (idx, sub_idx) = match ptrfield {\n                 ThinPointer(field) => (field, None),\n-                FatPointer(field) => (field, Some(slice_elt_base))\n+                FatPointer(field) => (field, Some(abi::FAT_PTR_ADDR))\n             };\n             if is_null(const_struct_field(ccx, val, idx, sub_idx)) {\n                 /* subtraction as uint is ok because nndiscr is either 0 or 1 */"}, {"sha": "a6f35c2966235cafeb181af566f164259a9ee198", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=b781c8b08e5b6b207c0422454ab8f319c90fe64d", "patch": "@@ -705,8 +705,8 @@ pub fn iter_structural_ty<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n     let (data_ptr, info) = if ty::type_is_sized(cx.tcx(), t) {\n         (av, None)\n     } else {\n-        let data = GEPi(cx, av, &[0, abi::slice_elt_base]);\n-        let info = GEPi(cx, av, &[0, abi::slice_elt_len]);\n+        let data = GEPi(cx, av, &[0, abi::FAT_PTR_ADDR]);\n+        let info = GEPi(cx, av, &[0, abi::FAT_PTR_EXTRA]);\n         (Load(cx, data), Some(Load(cx, info)))\n     };\n \n@@ -724,8 +724,8 @@ pub fn iter_structural_ty<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                   } else {\n                       let boxed_ty = ty::mk_open(cx.tcx(), field_ty);\n                       let scratch = datum::rvalue_scratch_datum(cx, boxed_ty, \"__fat_ptr_iter\");\n-                      Store(cx, llfld_a, GEPi(cx, scratch.val, &[0, abi::slice_elt_base]));\n-                      Store(cx, info.unwrap(), GEPi(cx, scratch.val, &[0, abi::slice_elt_len]));\n+                      Store(cx, llfld_a, GEPi(cx, scratch.val, &[0, abi::FAT_PTR_ADDR]));\n+                      Store(cx, info.unwrap(), GEPi(cx, scratch.val, &[0, abi::FAT_PTR_EXTRA]));\n                       scratch.val\n                   };\n                   cx = f(cx, val, field_ty);"}, {"sha": "6d0f598044235a520da926c946f9976d4ccba229", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=b781c8b08e5b6b207c0422454ab8f319c90fe64d", "patch": "@@ -724,9 +724,9 @@ pub fn trans_call_inner<'a, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // Closures are represented as (llfn, llclosure) pair:\n             // load the requisite values out.\n             let pair = d.to_llref();\n-            let llfn = GEPi(bcx, pair, &[0u, abi::fn_field_code]);\n+            let llfn = GEPi(bcx, pair, &[0u, abi::FAT_PTR_ADDR]);\n             let llfn = Load(bcx, llfn);\n-            let llenv = GEPi(bcx, pair, &[0u, abi::fn_field_box]);\n+            let llenv = GEPi(bcx, pair, &[0u, abi::FAT_PTR_EXTRA]);\n             let llenv = Load(bcx, llenv);\n             (llfn, Some(llenv), None)\n         }"}, {"sha": "c0c46ed57cc362d24da9d73863f2b290f11b39bc", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=b781c8b08e5b6b207c0422454ab8f319c90fe64d", "patch": "@@ -339,9 +339,9 @@ fn load_unboxed_closure_environment<'blk, 'tcx>(\n }\n \n fn fill_fn_pair(bcx: Block, pair: ValueRef, llfn: ValueRef, llenvptr: ValueRef) {\n-    Store(bcx, llfn, GEPi(bcx, pair, &[0u, abi::fn_field_code]));\n+    Store(bcx, llfn, GEPi(bcx, pair, &[0u, abi::FAT_PTR_ADDR]));\n     let llenvptr = PointerCast(bcx, llenvptr, Type::i8p(bcx.ccx()));\n-    Store(bcx, llenvptr, GEPi(bcx, pair, &[0u, abi::fn_field_box]));\n+    Store(bcx, llenvptr, GEPi(bcx, pair, &[0u, abi::FAT_PTR_EXTRA]));\n }\n \n #[deriving(PartialEq)]"}, {"sha": "c119cf16328b07e27a7575505c54d14d1b748f02", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=b781c8b08e5b6b207c0422454ab8f319c90fe64d", "patch": "@@ -264,8 +264,8 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, e: &ast::Expr)\n                                         ty::ty_vec(unit_ty, Some(len)) => {\n                                             let llunitty = type_of::type_of(cx, unit_ty);\n                                             let llptr = const_ptrcast(cx, llconst, llunitty);\n-                                            assert_eq!(abi::slice_elt_base, 0);\n-                                            assert_eq!(abi::slice_elt_len, 1);\n+                                            assert_eq!(abi::FAT_PTR_ADDR, 0);\n+                                            assert_eq!(abi::FAT_PTR_EXTRA, 1);\n                                             llconst = C_struct(cx, &[\n                                                 llptr,\n                                                 C_uint(cx, len)"}, {"sha": "b4751578dd182f4e098b294b9b4cb8a37ddb035b", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=b781c8b08e5b6b207c0422454ab8f319c90fe64d", "patch": "@@ -171,11 +171,11 @@ pub fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n }\n \n pub fn get_len(bcx: Block, fat_ptr: ValueRef) -> ValueRef {\n-    GEPi(bcx, fat_ptr, &[0u, abi::slice_elt_len])\n+    GEPi(bcx, fat_ptr, &[0u, abi::FAT_PTR_EXTRA])\n }\n \n pub fn get_dataptr(bcx: Block, fat_ptr: ValueRef) -> ValueRef {\n-    GEPi(bcx, fat_ptr, &[0u, abi::slice_elt_base])\n+    GEPi(bcx, fat_ptr, &[0u, abi::FAT_PTR_ADDR])\n }\n \n fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,"}, {"sha": "f4799d7536dfa76483248f068e7c4462bdb43507", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=b781c8b08e5b6b207c0422454ab8f319c90fe64d", "patch": "@@ -196,7 +196,7 @@ fn trans_struct_drop_flag<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let struct_data = if ty::type_is_sized(bcx.tcx(), t) {\n         v0\n     } else {\n-        let llval = GEPi(bcx, v0, &[0, abi::slice_elt_base]);\n+        let llval = GEPi(bcx, v0, &[0, abi::FAT_PTR_ADDR]);\n         Load(bcx, llval)\n     };\n     let drop_flag = unpack_datum!(bcx, adt::trans_drop_flag_ptr(bcx, &*repr, struct_data));\n@@ -237,8 +237,8 @@ fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let (struct_data, info) = if ty::type_is_sized(bcx.tcx(), t) {\n         (v0, None)\n     } else {\n-        let data = GEPi(bcx, v0, &[0, abi::slice_elt_base]);\n-        let info = GEPi(bcx, v0, &[0, abi::slice_elt_len]);\n+        let data = GEPi(bcx, v0, &[0, abi::FAT_PTR_ADDR]);\n+        let info = GEPi(bcx, v0, &[0, abi::FAT_PTR_EXTRA]);\n         (Load(bcx, data), Some(Load(bcx, info)))\n     };\n \n@@ -255,14 +255,14 @@ fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // The dtor expects a fat pointer, so make one, even if we have to fake it.\n             let boxed_ty = ty::mk_open(bcx.tcx(), t);\n             let scratch = datum::rvalue_scratch_datum(bcx, boxed_ty, \"__fat_ptr_drop_self\");\n-            Store(bcx, value, GEPi(bcx, scratch.val, &[0, abi::slice_elt_base]));\n+            Store(bcx, value, GEPi(bcx, scratch.val, &[0, abi::FAT_PTR_ADDR]));\n             Store(bcx,\n                   // If we just had a thin pointer, make a fat pointer by sticking\n                   // null where we put the unsizing info. This works because t\n                   // is a sized type, so we will only unpack the fat pointer, never\n                   // use the fake info.\n                   info.unwrap_or(C_null(Type::i8p(bcx.ccx()))),\n-                  GEPi(bcx, scratch.val, &[0, abi::slice_elt_len]));\n+                  GEPi(bcx, scratch.val, &[0, abi::FAT_PTR_EXTRA]));\n             PointerCast(variant_cx, scratch.val, params[0])\n         } else {\n             PointerCast(variant_cx, value, params[0])\n@@ -280,8 +280,8 @@ fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             } else {\n                 let boxed_ty = ty::mk_open(bcx.tcx(), *ty);\n                 let scratch = datum::rvalue_scratch_datum(bcx, boxed_ty, \"__fat_ptr_drop_field\");\n-                Store(bcx, llfld_a, GEPi(bcx, scratch.val, &[0, abi::slice_elt_base]));\n-                Store(bcx, info.unwrap(), GEPi(bcx, scratch.val, &[0, abi::slice_elt_len]));\n+                Store(bcx, llfld_a, GEPi(bcx, scratch.val, &[0, abi::FAT_PTR_ADDR]));\n+                Store(bcx, info.unwrap(), GEPi(bcx, scratch.val, &[0, abi::FAT_PTR_EXTRA]));\n                 scratch.val\n             };\n             variant_cx.fcx.schedule_drop_mem(cleanup::CustomScope(field_scope),\n@@ -369,11 +369,11 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: Ty<'tcx>)\n                     tvec::make_drop_glue_unboxed(bcx, v0, unit_ty, true)\n                 }\n                 ty::ty_trait(..) => {\n-                    let lluniquevalue = GEPi(bcx, v0, &[0, abi::trt_field_box]);\n+                    let lluniquevalue = GEPi(bcx, v0, &[0, abi::FAT_PTR_ADDR]);\n                     // Only drop the value when it is non-null\n                     let concrete_ptr = Load(bcx, lluniquevalue);\n                     with_cond(bcx, IsNotNull(bcx, concrete_ptr), |bcx| {\n-                        let dtor_ptr = Load(bcx, GEPi(bcx, v0, &[0, abi::trt_field_vtable]));\n+                        let dtor_ptr = Load(bcx, GEPi(bcx, v0, &[0, abi::FAT_PTR_EXTRA]));\n                         let dtor = Load(bcx, dtor_ptr);\n                         Call(bcx,\n                              dtor,\n@@ -383,12 +383,12 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: Ty<'tcx>)\n                     })\n                 }\n                 ty::ty_struct(..) if !ty::type_is_sized(bcx.tcx(), content_ty) => {\n-                    let llval = GEPi(bcx, v0, &[0, abi::slice_elt_base]);\n+                    let llval = GEPi(bcx, v0, &[0, abi::FAT_PTR_ADDR]);\n                     let llbox = Load(bcx, llval);\n                     let not_null = IsNotNull(bcx, llbox);\n                     with_cond(bcx, not_null, |bcx| {\n                         let bcx = drop_ty(bcx, v0, content_ty, None);\n-                        let info = GEPi(bcx, v0, &[0, abi::slice_elt_len]);\n+                        let info = GEPi(bcx, v0, &[0, abi::FAT_PTR_EXTRA]);\n                         let info = Load(bcx, info);\n                         let (llsize, llalign) = size_and_align_of_dst(bcx, content_ty, info);\n                         trans_exchange_free_dyn(bcx, llbox, llsize, llalign)\n@@ -440,7 +440,7 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: Ty<'tcx>)\n                                                          t,\n                                                          |bb, vv, tt| drop_ty(bb, vv, tt, None)),\n         ty::ty_closure(ref f) if f.store == ty::UniqTraitStore => {\n-            let box_cell_v = GEPi(bcx, v0, &[0u, abi::fn_field_box]);\n+            let box_cell_v = GEPi(bcx, v0, &[0u, abi::FAT_PTR_EXTRA]);\n             let env = Load(bcx, box_cell_v);\n             let env_ptr_ty = Type::at_box(bcx.ccx(), Type::i8(bcx.ccx())).ptr_to();\n             let env = PointerCast(bcx, env, env_ptr_ty);\n@@ -456,8 +456,8 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: Ty<'tcx>)\n             // above), because this happens for a trait field in an unsized\n             // struct. If anything is null, it is the whole struct and we won't\n             // get here.\n-            let lluniquevalue = GEPi(bcx, v0, &[0, abi::trt_field_box]);\n-            let dtor_ptr = Load(bcx, GEPi(bcx, v0, &[0, abi::trt_field_vtable]));\n+            let lluniquevalue = GEPi(bcx, v0, &[0, abi::FAT_PTR_ADDR]);\n+            let dtor_ptr = Load(bcx, GEPi(bcx, v0, &[0, abi::FAT_PTR_EXTRA]));\n             let dtor = Load(bcx, dtor_ptr);\n             Call(bcx,\n                  dtor,"}, {"sha": "0ff7f3ee71cc6ee4f9fefbe859ddcf78b7138775", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=b781c8b08e5b6b207c0422454ab8f319c90fe64d", "patch": "@@ -481,7 +481,7 @@ pub fn trans_trait_callee_from_llval<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     // Load the data pointer from the object.\n     debug!(\"(translating trait callee) loading second index from pair\");\n-    let llboxptr = GEPi(bcx, llpair, &[0u, abi::trt_field_box]);\n+    let llboxptr = GEPi(bcx, llpair, &[0u, abi::FAT_PTR_ADDR]);\n     let llbox = Load(bcx, llboxptr);\n     let llself = PointerCast(bcx, llbox, Type::i8p(ccx));\n \n@@ -503,7 +503,7 @@ pub fn trans_trait_callee_from_llval<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let llvtable = Load(bcx,\n                         PointerCast(bcx,\n                                     GEPi(bcx, llpair,\n-                                         &[0u, abi::trt_field_vtable]),\n+                                         &[0u, abi::FAT_PTR_EXTRA]),\n                                     Type::vtable(ccx).ptr_to().ptr_to()));\n     let mptr = Load(bcx, GEPi(bcx, llvtable, &[0u, n_method + VTABLE_OFFSET]));\n     let mptr = PointerCast(bcx, mptr, llcallee_ty.ptr_to());\n@@ -761,13 +761,13 @@ pub fn trans_trait_cast<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let llbox_ty = type_of(bcx.ccx(), datum_ty);\n \n     // Store the pointer into the first half of pair.\n-    let llboxdest = GEPi(bcx, lldest, &[0u, abi::trt_field_box]);\n+    let llboxdest = GEPi(bcx, lldest, &[0u, abi::FAT_PTR_ADDR]);\n     let llboxdest = PointerCast(bcx, llboxdest, llbox_ty.ptr_to());\n     bcx = datum.store_to(bcx, llboxdest);\n \n     // Store the vtable into the second half of pair.\n     let vtable = get_vtable(bcx, datum_ty, trait_ref);\n-    let llvtabledest = GEPi(bcx, lldest, &[0u, abi::trt_field_vtable]);\n+    let llvtabledest = GEPi(bcx, lldest, &[0u, abi::FAT_PTR_EXTRA]);\n     let llvtabledest = PointerCast(bcx, llvtabledest, val_ty(vtable).ptr_to());\n     Store(bcx, vtable, llvtabledest);\n "}, {"sha": "8e986defb6a361aaa1a630fbdafa0aa4bc28fdcf", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b781c8b08e5b6b207c0422454ab8f319c90fe64d/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=b781c8b08e5b6b207c0422454ab8f319c90fe64d", "patch": "@@ -231,8 +231,8 @@ pub fn trans_lit_str<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 let llbytes = C_uint(bcx.ccx(), bytes);\n                 let llcstr = C_cstr(bcx.ccx(), str_lit, false);\n                 let llcstr = llvm::LLVMConstPointerCast(llcstr, Type::i8p(bcx.ccx()).to_ref());\n-                Store(bcx, llcstr, GEPi(bcx, lldest, &[0u, abi::slice_elt_base]));\n-                Store(bcx, llbytes, GEPi(bcx, lldest, &[0u, abi::slice_elt_len]));\n+                Store(bcx, llcstr, GEPi(bcx, lldest, &[0u, abi::FAT_PTR_ADDR]));\n+                Store(bcx, llbytes, GEPi(bcx, lldest, &[0u, abi::FAT_PTR_EXTRA]));\n                 bcx\n             }\n         }\n@@ -401,8 +401,8 @@ pub fn get_fixed_base_and_len(bcx: Block,\n fn get_slice_base_and_len(bcx: Block,\n                           llval: ValueRef)\n                           -> (ValueRef, ValueRef) {\n-    let base = Load(bcx, GEPi(bcx, llval, &[0u, abi::slice_elt_base]));\n-    let len = Load(bcx, GEPi(bcx, llval, &[0u, abi::slice_elt_len]));\n+    let base = Load(bcx, GEPi(bcx, llval, &[0u, abi::FAT_PTR_ADDR]));\n+    let len = Load(bcx, GEPi(bcx, llval, &[0u, abi::FAT_PTR_EXTRA]));\n     (base, len)\n }\n "}]}