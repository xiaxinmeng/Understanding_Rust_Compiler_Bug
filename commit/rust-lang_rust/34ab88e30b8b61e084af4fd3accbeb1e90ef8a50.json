{"sha": "34ab88e30b8b61e084af4fd3accbeb1e90ef8a50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YWI4OGUzMGI4YjYxZTA4NGFmNGZkM2FjY2JlYjFlOTBlZjhhNTA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T10:11:33Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T12:03:17Z"}, "message": "Rollup merge of #22385 - dotdash:slice_by_val_copy, r=nikomatsakis\n\nWhen matching against strings/slices, we call the comparison function\nfor strings, which takes two string slices by value. The slices are\npassed in memory, and currently we just pass in a pointer to the\noriginal slice. That can cause misoptimizations because we emit a call\nto llvm.lifetime.end for all by-value arguments at the end of a\nfunction, which in this case marks the original slice as dead.\n\nSo we need to properly create copies of the slices to pass them to the\ncomparison function.\n\nFixes #22008", "tree": {"sha": "4738d9f2e8bba52c871c2b7228adcace7053321c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4738d9f2e8bba52c871c2b7228adcace7053321c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ab88e30b8b61e084af4fd3accbeb1e90ef8a50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ab88e30b8b61e084af4fd3accbeb1e90ef8a50", "html_url": "https://github.com/rust-lang/rust/commit/34ab88e30b8b61e084af4fd3accbeb1e90ef8a50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ab88e30b8b61e084af4fd3accbeb1e90ef8a50/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a7eed1e01c5961199e8a125ef80d133c9c0f3d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a7eed1e01c5961199e8a125ef80d133c9c0f3d4", "html_url": "https://github.com/rust-lang/rust/commit/4a7eed1e01c5961199e8a125ef80d133c9c0f3d4"}, {"sha": "4808561c45df77b6a7f8721f22b2f1e324cbeb3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4808561c45df77b6a7f8721f22b2f1e324cbeb3d", "html_url": "https://github.com/rust-lang/rust/commit/4808561c45df77b6a7f8721f22b2f1e324cbeb3d"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "b0ed6f9e727a2fdf5f64b3050df0b12bf1a66f98", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34ab88e30b8b61e084af4fd3accbeb1e90ef8a50/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ab88e30b8b61e084af4fd3accbeb1e90ef8a50/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=34ab88e30b8b61e084af4fd3accbeb1e90ef8a50", "patch": "@@ -827,7 +827,19 @@ fn compare_values<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                            &format!(\"comparison of `{}`\",\n                                    cx.ty_to_string(rhs_t))[],\n                            StrEqFnLangItem);\n-        callee::trans_lang_call(cx, did, &[lhs, rhs], None, debug_loc)\n+        let t = ty::mk_str_slice(cx.tcx(), cx.tcx().mk_region(ty::ReStatic), ast::MutImmutable);\n+        // The comparison function gets the slices by value, so we have to make copies here. Even\n+        // if the function doesn't write through the pointer, things like lifetime intrinsics\n+        // require that we do this properly\n+        let lhs_arg = alloc_ty(cx, t, \"lhs\");\n+        let rhs_arg = alloc_ty(cx, t, \"rhs\");\n+        memcpy_ty(cx, lhs_arg, lhs, t);\n+        memcpy_ty(cx, rhs_arg, rhs, t);\n+        let res = callee::trans_lang_call(cx, did, &[lhs_arg, rhs_arg], None, debug_loc);\n+        call_lifetime_end(res.bcx, lhs_arg);\n+        call_lifetime_end(res.bcx, rhs_arg);\n+\n+        res\n     }\n \n     let _icx = push_ctxt(\"compare_values\");"}, {"sha": "3e145122e5aeb12a4acf5e84c0504c4af4d56967", "filename": "src/test/run-pass/issue22008.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/34ab88e30b8b61e084af4fd3accbeb1e90ef8a50/src%2Ftest%2Frun-pass%2Fissue22008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ab88e30b8b61e084af4fd3accbeb1e90ef8a50/src%2Ftest%2Frun-pass%2Fissue22008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue22008.rs?ref=34ab88e30b8b61e084af4fd3accbeb1e90ef8a50", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    let command = \"a\";\n+\n+    match command {\n+        \"foo\" => println!(\"foo\"),\n+        _     => println!(\"{}\", command),\n+    }\n+}"}]}