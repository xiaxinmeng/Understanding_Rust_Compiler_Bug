{"sha": "8036d7f7842e77fde3be49b4c475665a61d9f560", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMzZkN2Y3ODQyZTc3ZmRlM2JlNDliNGM0NzU2NjVhNjFkOWY1NjA=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-19T14:32:09Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-19T14:42:21Z"}, "message": "Adding the default lint level to the metadata collection\n\nAnd stripping the clippy:: prefix from the group", "tree": {"sha": "62e3e978320ee33e7f42c13cfe773ff65670b99c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62e3e978320ee33e7f42c13cfe773ff65670b99c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8036d7f7842e77fde3be49b4c475665a61d9f560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8036d7f7842e77fde3be49b4c475665a61d9f560", "html_url": "https://github.com/rust-lang/rust/commit/8036d7f7842e77fde3be49b4c475665a61d9f560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8036d7f7842e77fde3be49b4c475665a61d9f560/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1959b90c42e307612b757469c8c27f87985473", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1959b90c42e307612b757469c8c27f87985473", "html_url": "https://github.com/rust-lang/rust/commit/aa1959b90c42e307612b757469c8c27f87985473"}], "stats": {"total": 72, "additions": 59, "deletions": 13}, "files": [{"sha": "19f20376c6f168c1cddf61fe64bb359cb3e448e9", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 59, "deletions": 13, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8036d7f7842e77fde3be49b4c475665a61d9f560/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8036d7f7842e77fde3be49b4c475665a61d9f560/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=8036d7f7842e77fde3be49b4c475665a61d9f560", "patch": "@@ -37,10 +37,28 @@ const BLACK_LISTED_LINTS: [&str; 3] = [\"lint_author\", \"deep_code_inspection\", \"i\n /// These groups will be ignored by the lint group matcher. This is useful for collections like\n /// `clippy::all`\n const IGNORED_LINT_GROUPS: [&str; 1] = [\"clippy::all\"];\n-/// Lints within this group will be excluded from the collection\n-const EXCLUDED_LINT_GROUPS: [&str; 1] = [\"clippy::internal\"];\n+/// Lints within this group will be excluded from the collection. These groups\n+/// have to be defined without the `clippy::` prefix.\n+const EXCLUDED_LINT_GROUPS: [&str; 1] = [\"internal\"];\n /// Collected deprecated lint will be assigned to this group in the JSON output\n-const DEPRECATED_LINT_GROUP_STR: &str = \"DEPRECATED\";\n+const DEPRECATED_LINT_GROUP_STR: &str = \"deprecated\";\n+/// This is the lint level for deprecated lints that will be displayed in the lint list\n+const DEPRECATED_LINT_LEVEL: &str = \"none\";\n+/// This array holds Clippy's lint groups with their corresponding default lint level. The\n+/// lint level for deprecated lints is set in `DEPRECATED_LINT_LEVEL`.\n+const DEFAULT_LINT_LEVELS: [(&str, &str); 8] = [\n+    (\"correctness\", \"deny\"),\n+    (\"restriction\", \"allow\"),\n+    (\"style\", \"warm\"),\n+    (\"pedantic\", \"allow\"),\n+    (\"complexity\", \"warn\"),\n+    (\"perf\", \"warn\"),\n+    (\"cargo\", \"allow\"),\n+    (\"nursery\", \"allow\"),\n+];\n+/// This prefix is in front of the lint groups in the lint store. The prefix will be trimmed\n+/// to only keep the actual lint group in the output.\n+const CLIPPY_LINT_GROUP_PREFIX: &str = \"clippy::\";\n \n /// This template will be used to format the configuration section in the lint documentation.\n /// The `configurations` parameter will be replaced with one or multiple formatted\n@@ -188,18 +206,20 @@ struct LintMetadata {\n     id: String,\n     id_span: SerializableSpan,\n     group: String,\n+    level: &'static str,\n     docs: String,\n     /// This field is only used in the output and will only be\n     /// mapped shortly before the actual output.\n     applicability: Option<ApplicabilityInfo>,\n }\n \n impl LintMetadata {\n-    fn new(id: String, id_span: SerializableSpan, group: String, docs: String) -> Self {\n+    fn new(id: String, id_span: SerializableSpan, group: String, level: &'static str, docs: String) -> Self {\n         Self {\n             id,\n             id_span,\n             group,\n+            level,\n             docs,\n             applicability: None,\n         }\n@@ -368,7 +388,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                 let lint_name = sym_to_string(item.ident.name).to_ascii_lowercase();\n                 if !BLACK_LISTED_LINTS.contains(&lint_name.as_str());\n                 // metadata extraction\n-                if let Some(group) = get_lint_group_or_lint(cx, &lint_name, item);\n+                if let Some((group, level)) = get_lint_group_and_level_or_lint(cx, &lint_name, item);\n                 if let Some(mut docs) = extract_attr_docs_or_lint(cx, item);\n                 then {\n                     if let Some(configuration_section) = self.get_lint_configs(&lint_name) {\n@@ -379,6 +399,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                         lint_name,\n                         SerializableSpan::from_item(cx, item),\n                         group,\n+                        level,\n                         docs,\n                     ));\n                 }\n@@ -396,6 +417,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                         lint_name,\n                         SerializableSpan::from_item(cx, item),\n                         DEPRECATED_LINT_GROUP_STR.to_string(),\n+                        DEPRECATED_LINT_LEVEL,\n                         docs,\n                     ));\n                 }\n@@ -475,15 +497,32 @@ fn extract_attr_docs(cx: &LateContext<'_>, item: &Item<'_>) -> Option<String> {\n         })\n }\n \n-fn get_lint_group_or_lint(cx: &LateContext<'_>, lint_name: &str, item: &'hir Item<'_>) -> Option<String> {\n+fn get_lint_group_and_level_or_lint(\n+    cx: &LateContext<'_>,\n+    lint_name: &str,\n+    item: &'hir Item<'_>,\n+) -> Option<(String, &'static str)> {\n     let result = cx.lint_store.check_lint_name(lint_name, Some(sym::clippy));\n     if let CheckLintNameResult::Tool(Ok(lint_lst)) = result {\n-        get_lint_group(cx, lint_lst[0])\n-            .or_else(|| {\n-                lint_collection_error_item(cx, item, \"Unable to determine lint group\");\n+        if let Some(group) = get_lint_group(cx, lint_lst[0]) {\n+            if EXCLUDED_LINT_GROUPS.contains(&group.as_str()) {\n+                return None;\n+            }\n+\n+            if let Some(level) = get_lint_level_from_group(&group) {\n+                Some((group, level))\n+            } else {\n+                lint_collection_error_item(\n+                    cx,\n+                    item,\n+                    &format!(\"Unable to determine lint level for found group `{}`\", group),\n+                );\n                 None\n-            })\n-            .filter(|group| !EXCLUDED_LINT_GROUPS.contains(&group.as_str()))\n+            }\n+        } else {\n+            lint_collection_error_item(cx, item, \"Unable to determine lint group\");\n+            None\n+        }\n     } else {\n         lint_collection_error_item(cx, item, \"Unable to find lint in lint_store\");\n         None\n@@ -496,14 +535,21 @@ fn get_lint_group(cx: &LateContext<'_>, lint_id: LintId) -> Option<String> {\n             continue;\n         }\n \n-        if lints.iter().any(|x| *x == lint_id) {\n-            return Some((*group_name).to_string());\n+        if lints.iter().any(|group_lint| *group_lint == lint_id) {\n+            let group = group_name.strip_prefix(CLIPPY_LINT_GROUP_PREFIX).unwrap_or(group_name);\n+            return Some((*group).to_string());\n         }\n     }\n \n     None\n }\n \n+fn get_lint_level_from_group(lint_group: &str) -> Option<&'static str> {\n+    DEFAULT_LINT_LEVELS\n+        .iter()\n+        .find_map(|(group_name, group_level)| (*group_name == lint_group).then(|| *group_level))\n+}\n+\n fn is_deprecated_lint(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n     if let hir::TyKind::Path(ref path) = ty.kind {\n         if let hir::def::Res::Def(DefKind::Struct, def_id) = cx.qpath_res(path, ty.hir_id) {"}]}