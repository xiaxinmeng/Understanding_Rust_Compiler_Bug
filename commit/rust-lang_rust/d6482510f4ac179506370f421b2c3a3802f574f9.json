{"sha": "d6482510f4ac179506370f421b2c3a3802f574f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NDgyNTEwZjRhYzE3OTUwNjM3MGY0MjFiMmMzYTM4MDJmNTc0Zjk=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-09-14T15:58:58Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-11-22T05:21:21Z"}, "message": "Expand `is_uninhabited` to recurse into datatypes", "tree": {"sha": "b966dea67daf808e318f0be2c3e28616b9b4aba1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b966dea67daf808e318f0be2c3e28616b9b4aba1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6482510f4ac179506370f421b2c3a3802f574f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6482510f4ac179506370f421b2c3a3802f574f9", "html_url": "https://github.com/rust-lang/rust/commit/d6482510f4ac179506370f421b2c3a3802f574f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6482510f4ac179506370f421b2c3a3802f574f9/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69bb5fa85203e264387806bbb05acaffb1e95559", "url": "https://api.github.com/repos/rust-lang/rust/commits/69bb5fa85203e264387806bbb05acaffb1e95559", "html_url": "https://github.com/rust-lang/rust/commit/69bb5fa85203e264387806bbb05acaffb1e95559"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "5737f776422d7f64a30e9911f5793d2f6b223422", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d6482510f4ac179506370f421b2c3a3802f574f9/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6482510f4ac179506370f421b2c3a3802f574f9/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d6482510f4ac179506370f421b2c3a3802f574f9", "patch": "@@ -16,6 +16,7 @@ pub use self::IntVarValue::*;\n pub use self::LvaluePreference::*;\n pub use self::fold::TypeFoldable;\n \n+use std::collections::{hash_map, HashMap};\n use dep_graph::{self, DepNode};\n use hir::map as ast_map;\n use middle;\n@@ -1389,6 +1390,20 @@ impl<'tcx> serialize::UseSpecializedEncodable for AdtDef<'tcx> {\n \n impl<'tcx> serialize::UseSpecializedDecodable for AdtDef<'tcx> {}\n \n+impl<'a, 'gcx, 'tcx> AdtDefData<'tcx, 'static> {\n+    #[inline]\n+    pub fn is_uninhabited_recurse(&'tcx self,\n+                                  visited: &mut HashMap<(DefId, &'tcx Substs<'tcx>), ()>, \n+                                  cx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                  substs: &'tcx Substs<'tcx>) -> bool {\n+        match visited.entry((self.did, substs)) {\n+            hash_map::Entry::Occupied(_) => return true,\n+            hash_map::Entry::Vacant(ve) => ve.insert(()),\n+        };\n+        self.variants.iter().all(|v| v.is_uninhabited_recurse(visited, cx, substs, self.is_union()))\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum AdtKind { Struct, Union, Enum }\n \n@@ -1531,11 +1546,6 @@ impl<'a, 'gcx, 'tcx, 'container> AdtDefData<'gcx, 'container> {\n         self.variants.iter().flat_map(VariantDefData::fields_iter)\n     }\n \n-    #[inline]\n-    pub fn is_empty(&self) -> bool {\n-        self.variants.is_empty()\n-    }\n-\n     #[inline]\n     pub fn is_univariant(&self) -> bool {\n         self.variants.len() == 1\n@@ -1795,6 +1805,21 @@ impl<'tcx, 'container> VariantDefData<'tcx, 'container> {\n     }\n }\n \n+impl<'a, 'gcx, 'tcx> VariantDefData<'tcx, 'static> {\n+    #[inline]\n+    pub fn is_uninhabited_recurse(&'tcx self,\n+                                  visited: &mut HashMap<(DefId, &'tcx Substs<'tcx>), ()>,\n+                                  cx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                  substs: &'tcx Substs<'tcx>,\n+                                  is_union: bool) -> bool {\n+        if is_union {\n+            self.fields.iter().all(|f| f.is_uninhabited_recurse(visited, cx, substs))\n+        } else {\n+            self.fields.iter().any(|f| f.is_uninhabited_recurse(visited, cx, substs))\n+        }\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx, 'container> FieldDefData<'tcx, 'container> {\n     pub fn new(did: DefId,\n                name: Name,\n@@ -1820,6 +1845,16 @@ impl<'a, 'gcx, 'tcx, 'container> FieldDefData<'tcx, 'container> {\n     }\n }\n \n+impl<'a, 'gcx, 'tcx> FieldDefData<'tcx, 'static> {\n+    #[inline]\n+    pub fn is_uninhabited_recurse(&'tcx self,\n+                                  visited: &mut HashMap<(DefId, &'tcx Substs<'tcx>), ()>,\n+                                  tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                  substs: &'tcx Substs<'tcx>) -> bool {\n+        self.ty(tcx, substs).is_uninhabited_recurse(visited, tcx)\n+    }\n+}\n+\n /// Records the substitutions used to translate the polytype for an\n /// item into the monotype of an item reference.\n #[derive(Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "53230eaf59dd3b6537ed1f33a5ef572f0bb477f2", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d6482510f4ac179506370f421b2c3a3802f574f9/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6482510f4ac179506370f421b2c3a3802f574f9/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=d6482510f4ac179506370f421b2c3a3802f574f9", "patch": "@@ -21,6 +21,7 @@ use util::common::ErrorReported;\n use collections::enum_set::{self, EnumSet, CLike};\n use std::fmt;\n use std::ops;\n+use std::collections::HashMap;\n use syntax::abi;\n use syntax::ast::{self, Name};\n use syntax::symbol::{keywords, InternedString};\n@@ -929,14 +930,24 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn is_uninhabited(&self, cx: TyCtxt) -> bool {\n+    pub fn is_uninhabited(&self, cx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n+        let mut visited = HashMap::new();\n+        self.is_uninhabited_recurse(&mut visited, cx)\n+    }\n+\n+    pub fn is_uninhabited_recurse(&self,\n+                                  visited: &mut HashMap<(DefId, &'tcx Substs<'tcx>), ()>,\n+                                  cx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n         // FIXME(#24885): be smarter here, the AdtDefData::is_empty method could easily be made\n         // more complete.\n         match self.sty {\n-            TyAdt(def, _) => def.is_empty(),\n+            TyAdt(def, substs) => {\n+                def.is_uninhabited_recurse(visited, cx, substs)\n+            },\n \n             TyNever => true,\n             TyTuple(ref tys) => tys.iter().any(|ty| ty.is_uninhabited(cx)),\n+            TyArray(ty, len) => len > 0 && ty.is_uninhabited(cx),\n \n             // FIXME(canndrew): this line breaks core::fmt\n             //TyRef(_, ref tm) => tm.ty.is_uninhabited(cx),"}]}