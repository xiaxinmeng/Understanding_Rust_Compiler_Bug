{"sha": "435c189c803486a30d3fa0cdcc354e04b9993310", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNWMxODljODAzNDg2YTMwZDNmYTBjZGNjMzU0ZTA0Yjk5OTMzMTA=", "commit": {"author": {"name": "AdnoC", "email": "adam.r.cutler@gmail.com", "date": "2020-12-31T20:41:49Z"}, "committer": {"name": "AdnoC", "email": "adam.r.cutler@gmail.com", "date": "2020-12-31T20:41:49Z"}, "message": "deduplicate macro completions from legacy macros and prelude", "tree": {"sha": "b824f8866fb1997354ea5386a47e234a5b8a45d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b824f8866fb1997354ea5386a47e234a5b8a45d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/435c189c803486a30d3fa0cdcc354e04b9993310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/435c189c803486a30d3fa0cdcc354e04b9993310", "html_url": "https://github.com/rust-lang/rust/commit/435c189c803486a30d3fa0cdcc354e04b9993310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/435c189c803486a30d3fa0cdcc354e04b9993310/comments", "author": {"login": "AdnoC", "id": 4079454, "node_id": "MDQ6VXNlcjQwNzk0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4079454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdnoC", "html_url": "https://github.com/AdnoC", "followers_url": "https://api.github.com/users/AdnoC/followers", "following_url": "https://api.github.com/users/AdnoC/following{/other_user}", "gists_url": "https://api.github.com/users/AdnoC/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdnoC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdnoC/subscriptions", "organizations_url": "https://api.github.com/users/AdnoC/orgs", "repos_url": "https://api.github.com/users/AdnoC/repos", "events_url": "https://api.github.com/users/AdnoC/events{/privacy}", "received_events_url": "https://api.github.com/users/AdnoC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AdnoC", "id": 4079454, "node_id": "MDQ6VXNlcjQwNzk0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4079454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdnoC", "html_url": "https://github.com/AdnoC", "followers_url": "https://api.github.com/users/AdnoC/followers", "following_url": "https://api.github.com/users/AdnoC/following{/other_user}", "gists_url": "https://api.github.com/users/AdnoC/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdnoC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdnoC/subscriptions", "organizations_url": "https://api.github.com/users/AdnoC/orgs", "repos_url": "https://api.github.com/users/AdnoC/repos", "events_url": "https://api.github.com/users/AdnoC/events{/privacy}", "received_events_url": "https://api.github.com/users/AdnoC/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddbf484acf15efd73b61ac80a941730b507c01de", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddbf484acf15efd73b61ac80a941730b507c01de", "html_url": "https://github.com/rust-lang/rust/commit/ddbf484acf15efd73b61ac80a941730b507c01de"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "a594afce6686761f409ad25fdd4832cb61139596", "filename": "crates/hir_def/src/per_ns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435c189c803486a30d3fa0cdcc354e04b9993310/crates%2Fhir_def%2Fsrc%2Fper_ns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435c189c803486a30d3fa0cdcc354e04b9993310/crates%2Fhir_def%2Fsrc%2Fper_ns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fper_ns.rs?ref=435c189c803486a30d3fa0cdcc354e04b9993310", "patch": "@@ -7,7 +7,7 @@ use hir_expand::MacroDefId;\n \n use crate::{item_scope::ItemInNs, visibility::Visibility, ModuleDefId};\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct PerNs {\n     pub types: Option<(ModuleDefId, Visibility)>,\n     pub values: Option<(ModuleDefId, Visibility)>,"}, {"sha": "cc66dcf31967ed5c854555a22e986a2f726db234", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/435c189c803486a30d3fa0cdcc354e04b9993310/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435c189c803486a30d3fa0cdcc354e04b9993310/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=435c189c803486a30d3fa0cdcc354e04b9993310", "patch": "@@ -483,6 +483,7 @@ pub enum ScopeDef {\n \n impl Scope {\n     fn process_names(&self, db: &dyn DefDatabase, f: &mut dyn FnMut(Name, ScopeDef)) {\n+        let mut seen = FxHashSet::default();\n         match self {\n             Scope::ModuleScope(m) => {\n                 // FIXME: should we provide `self` here?\n@@ -496,7 +497,9 @@ impl Scope {\n                     f(name.clone(), ScopeDef::PerNs(def));\n                 });\n                 m.crate_def_map[m.module_id].scope.legacy_macros().for_each(|(name, macro_)| {\n-                    f(name.clone(), ScopeDef::PerNs(PerNs::macros(macro_, Visibility::Public)));\n+                    let scope = PerNs::macros(macro_, Visibility::Public);\n+                    seen.insert((name.clone(), scope));\n+                    f(name.clone(), ScopeDef::PerNs(scope));\n                 });\n                 m.crate_def_map.extern_prelude.iter().for_each(|(name, &def)| {\n                     f(name.clone(), ScopeDef::PerNs(PerNs::types(def, Visibility::Public)));\n@@ -507,7 +510,9 @@ impl Scope {\n                 if let Some(prelude) = m.crate_def_map.prelude {\n                     let prelude_def_map = db.crate_def_map(prelude.krate);\n                     prelude_def_map[prelude.local_id].scope.entries().for_each(|(name, def)| {\n-                        f(name.clone(), ScopeDef::PerNs(def));\n+                        if !seen.contains(&(name.clone(), def)) {\n+                            f(name.clone(), ScopeDef::PerNs(def));\n+                        }\n                     });\n                 }\n             }"}, {"sha": "f3bc9d680039b98067386f64e3d6b92a3efd510c", "filename": "crates/hir_def/src/visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/435c189c803486a30d3fa0cdcc354e04b9993310/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435c189c803486a30d3fa0cdcc354e04b9993310/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fvisibility.rs?ref=435c189c803486a30d3fa0cdcc354e04b9993310", "patch": "@@ -85,7 +85,7 @@ impl RawVisibility {\n }\n \n /// Visibility of an item, with the path resolved.\n-#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub enum Visibility {\n     /// Visibility is restricted to a certain module.\n     Module(ModuleId),"}]}