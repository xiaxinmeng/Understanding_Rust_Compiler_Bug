{"sha": "ded08e44c65ebabc0bcc45bba8ec88143d6be93c", "node_id": "C_kwDOAAsO6NoAKGRlZDA4ZTQ0YzY1ZWJhYmMwYmNjNDViYmE4ZWM4ODE0M2Q2YmU5M2M", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-26T16:29:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-10-02T15:31:50Z"}, "message": "resolve: Avoid comparing modules by optional def-id\n\nIt makes all block modules identical during comparison", "tree": {"sha": "a20cc0cae9e78466ff42f97c807d9474fb157a06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a20cc0cae9e78466ff42f97c807d9474fb157a06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ded08e44c65ebabc0bcc45bba8ec88143d6be93c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ded08e44c65ebabc0bcc45bba8ec88143d6be93c", "html_url": "https://github.com/rust-lang/rust/commit/ded08e44c65ebabc0bcc45bba8ec88143d6be93c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ded08e44c65ebabc0bcc45bba8ec88143d6be93c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aa732a364651010de8f8c5c7bada11e1da7fce1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa732a364651010de8f8c5c7bada11e1da7fce1", "html_url": "https://github.com/rust-lang/rust/commit/5aa732a364651010de8f8c5c7bada11e1da7fce1"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "8dfa839453dba8324cc698971d03fd6d49ed2790", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ded08e44c65ebabc0bcc45bba8ec88143d6be93c/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded08e44c65ebabc0bcc45bba8ec88143d6be93c/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=ded08e44c65ebabc0bcc45bba8ec88143d6be93c", "patch": "@@ -220,8 +220,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     crate fn build_reduced_graph_external(&mut self, module: Module<'a>) {\n-        let def_id = module.def_id().expect(\"unpopulated module without a def-id\");\n-        for child in self.cstore().item_children_untracked(def_id, self.session) {\n+        for child in self.cstore().item_children_untracked(module.def_id(), self.session) {\n             let parent_scope = ParentScope::module(module, self);\n             BuildReducedGraphVisitor { r: self, parent_scope }\n                 .build_reduced_graph_for_external_crate_res(child);"}, {"sha": "dea47c25a8e0a2721b672de05daf8b15604eb688", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ded08e44c65ebabc0bcc45bba8ec88143d6be93c/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded08e44c65ebabc0bcc45bba8ec88143d6be93c/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=ded08e44c65ebabc0bcc45bba8ec88143d6be93c", "patch": "@@ -801,7 +801,7 @@ impl<'a> Resolver<'a> {\n             None => worklist_via_import.pop(),\n             Some(x) => Some(x),\n         } {\n-            let in_module_is_extern = !in_module.def_id().unwrap().is_local();\n+            let in_module_is_extern = !in_module.def_id().is_local();\n             // We have to visit module children in deterministic order to avoid\n             // instabilities in reported imports (#43552).\n             in_module.for_each_child(self, |this, ident, ns, name_binding| {\n@@ -884,7 +884,7 @@ impl<'a> Resolver<'a> {\n \n                     if !is_extern_crate_that_also_appears_in_prelude {\n                         // add the module to the lookup\n-                        if seen_modules.insert(module.def_id().unwrap()) {\n+                        if seen_modules.insert(module.def_id()) {\n                             if via_import { &mut worklist_via_import } else { &mut worklist }\n                                 .push((module, path_segments, child_accessible));\n                         }"}, {"sha": "bb34776f0b02d86c8e35493257103490b74ead0b", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ded08e44c65ebabc0bcc45bba8ec88143d6be93c/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded08e44c65ebabc0bcc45bba8ec88143d6be93c/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=ded08e44c65ebabc0bcc45bba8ec88143d6be93c", "patch": "@@ -989,7 +989,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 }\n \n                 if let ModuleOrUniformRoot::Module(module) = module {\n-                    if module.def_id() == import.parent_scope.module.def_id() {\n+                    if ptr::eq(module, import.parent_scope.module) {\n                         // Importing a module into itself is not allowed.\n                         return Some(UnresolvedImportError {\n                             span: import.span,\n@@ -1341,7 +1341,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         if module.is_trait() {\n             self.r.session.span_err(import.span, \"items in traits are not importable.\");\n             return;\n-        } else if module.def_id() == import.parent_scope.module.def_id() {\n+        } else if ptr::eq(module, import.parent_scope.module) {\n             return;\n         } else if let ImportKind::Glob { is_prelude: true, .. } = import.kind {\n             self.r.prelude = Some(module);\n@@ -1400,7 +1400,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         });\n \n         if !reexports.is_empty() {\n-            if let Some(def_id) = module.def_id() {\n+            if let Some(def_id) = module.opt_def_id() {\n                 // Call to `expect_local` should be fine because current\n                 // code is only called for local modules.\n                 self.r.export_map.insert(def_id.expect_local(), reexports);"}, {"sha": "7b0dd82f0e6d1fde33cbbec9cdbcd7b81d07a97c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ded08e44c65ebabc0bcc45bba8ec88143d6be93c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded08e44c65ebabc0bcc45bba8ec88143d6be93c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=ded08e44c65ebabc0bcc45bba8ec88143d6be93c", "patch": "@@ -1491,7 +1491,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     // form the path\n                     let mut path_segments = path_segments.clone();\n                     path_segments.push(ast::PathSegment::from_ident(ident));\n-                    let module_def_id = module.def_id().unwrap();\n+                    let module_def_id = module.def_id();\n                     if module_def_id == def_id {\n                         let path =\n                             Path { span: name_binding.span, segments: path_segments, tokens: None };"}, {"sha": "04a1fae8fb73091b22215f2d2883ccc791219971", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ded08e44c65ebabc0bcc45bba8ec88143d6be93c/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ded08e44c65ebabc0bcc45bba8ec88143d6be93c/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=ded08e44c65ebabc0bcc45bba8ec88143d6be93c", "patch": "@@ -413,7 +413,7 @@ impl ModuleOrUniformRoot<'_> {\n     fn same_def(lhs: Self, rhs: Self) -> bool {\n         match (lhs, rhs) {\n             (ModuleOrUniformRoot::Module(lhs), ModuleOrUniformRoot::Module(rhs)) => {\n-                lhs.def_id() == rhs.def_id()\n+                ptr::eq(lhs, rhs)\n             }\n             (\n                 ModuleOrUniformRoot::CrateRootAndExternPrelude,\n@@ -602,7 +602,11 @@ impl<'a> ModuleData<'a> {\n         }\n     }\n \n-    fn def_id(&self) -> Option<DefId> {\n+    fn def_id(&self) -> DefId {\n+        self.opt_def_id().expect(\"`ModuleData::def_id` is called on a block module\")\n+    }\n+\n+    fn opt_def_id(&self) -> Option<DefId> {\n         match self.kind {\n             ModuleKind::Def(_, def_id, _) => Some(def_id),\n             _ => None,\n@@ -1075,7 +1079,7 @@ impl<'a> ResolverArenas<'a> {\n     ) -> Module<'a> {\n         let module =\n             self.modules.alloc(ModuleData::new(parent, kind, expn_id, span, no_implicit_prelude));\n-        let def_id = module.def_id();\n+        let def_id = module.opt_def_id();\n         if def_id.map_or(true, |def_id| def_id.is_local()) {\n             self.local_modules.borrow_mut().push(module);\n         }\n@@ -1588,7 +1592,7 @@ impl<'a> Resolver<'a> {\n \n         if let Some(module) = current_trait {\n             if self.trait_may_have_item(Some(module), assoc_item) {\n-                let def_id = module.def_id().unwrap();\n+                let def_id = module.def_id();\n                 found_traits.push(TraitCandidate { def_id, import_ids: smallvec![] });\n             }\n         }\n@@ -2189,8 +2193,9 @@ impl<'a> Resolver<'a> {\n                 return self.graph_root;\n             }\n         };\n-        let module = self\n-            .expect_module(module.def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id());\n+        let module = self.expect_module(\n+            module.opt_def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id(),\n+        );\n         debug!(\n             \"resolve_crate_root({:?}): got module {:?} ({:?}) (ident.span = {:?})\",\n             ident,\n@@ -3017,7 +3022,7 @@ impl<'a> Resolver<'a> {\n         }\n \n         let container = match parent.kind {\n-            ModuleKind::Def(kind, _, _) => kind.descr(parent.def_id().unwrap()),\n+            ModuleKind::Def(kind, _, _) => kind.descr(parent.def_id()),\n             ModuleKind::Block(..) => \"block\",\n         };\n "}]}