{"sha": "e98d8cd255ab5c2fee873a58af6c2c3ad561dab4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OGQ4Y2QyNTVhYjVjMmZlZTg3M2E1OGFmNmMyYzNhZDU2MWRhYjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T13:36:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T13:36:03Z"}, "message": "nail down runnables", "tree": {"sha": "04869b8fe93e724d8aa266177e48644051331ab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04869b8fe93e724d8aa266177e48644051331ab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4", "html_url": "https://github.com/rust-lang/rust/commit/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1329dd4e287c137ec0a90abeec0272275b2b2c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1329dd4e287c137ec0a90abeec0272275b2b2c8d", "html_url": "https://github.com/rust-lang/rust/commit/1329dd4e287c137ec0a90abeec0272275b2b2c8d"}], "stats": {"total": 167, "additions": 142, "deletions": 25}, "files": [{"sha": "b80ce1ab5c82d88025d380184a3e13949e54f74a", "filename": "crates/libanalysis/src/imp.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Flibanalysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fimp.rs?ref=e98d8cd255ab5c2fee873a58af6c2c3ad561dab4", "patch": "@@ -151,7 +151,7 @@ impl AnalysisImpl {\n             .collect()\n     }\n \n-    pub fn crate_root(&self, id: FileId) -> Vec<CrateId> {\n+    pub fn crate_for(&self, id: FileId) -> Vec<CrateId> {\n         let module_map = &self.data.module_map;\n         let crate_graph = &self.data.crate_graph;\n         let mut res = Vec::new();\n@@ -177,7 +177,9 @@ impl AnalysisImpl {\n         }\n         res\n     }\n-\n+    pub fn crate_root(&self, crate_id: CrateId) -> FileId {\n+        self.data.crate_graph.crate_roots[&crate_id]\n+    }\n     pub fn approximately_resolve_symbol(\n         &self,\n         id: FileId,"}, {"sha": "ba290f1e0197d346c95048a647fb2867314ccf1b", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=e98d8cd255ab5c2fee873a58af6c2c3ad561dab4", "patch": "@@ -182,8 +182,11 @@ impl Analysis {\n     pub fn parent_module(&self, file_id: FileId) -> Vec<(FileId, FileSymbol)> {\n         self.imp.parent_module(file_id)\n     }\n-    pub fn crate_root(&self, file_id: FileId) -> Vec<CrateId> {\n-        self.imp.crate_root(file_id)\n+    pub fn crate_for(&self, file_id: FileId) -> Vec<CrateId> {\n+        self.imp.crate_for(file_id)\n+    }\n+    pub fn crate_root(&self, crate_id: CrateId) -> FileId {\n+        self.imp.crate_root(crate_id)\n     }\n     pub fn runnables(&self, file_id: FileId) -> Vec<Runnable> {\n         let file = self.file_syntax(file_id);"}, {"sha": "4fae7c313766d7f3b7ea78b348afd270727f9373", "filename": "crates/libanalysis/tests/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Flibanalysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Flibanalysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Ftests%2Ftests.rs?ref=e98d8cd255ab5c2fee873a58af6c2c3ad561dab4", "patch": "@@ -126,7 +126,7 @@ fn test_resolve_crate_root() {\n         (1, \"/lib.rs\"),\n         (2, \"/foo.rs\"),\n     ]));\n-    assert!(snap.crate_root(FileId(2)).is_empty());\n+    assert!(snap.crate_for(FileId(2)).is_empty());\n \n     let crate_graph = CrateGraph {\n         crate_roots: {\n@@ -142,7 +142,7 @@ fn test_resolve_crate_root() {\n         (2, \"/foo.rs\"),\n     ]));\n     assert_eq!(\n-        snap.crate_root(FileId(2)),\n+        snap.crate_for(FileId(2)),\n         vec![CrateId(1)],\n     );\n }"}, {"sha": "93d8bd9fe897dc68353c96a8ee3358a5b8b8da58", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 65, "deletions": 11, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=e98d8cd255ab5c2fee873a58af6c2c3ad561dab4", "patch": "@@ -16,6 +16,7 @@ use ::{\n     req::{self, Decoration}, Result,\n     conv::{Conv, ConvWith, TryConvWith, MapConvWith, to_location},\n     server_world::ServerWorld,\n+    project_model::TargetKind,\n };\n \n pub fn handle_syntax_tree(\n@@ -233,6 +234,8 @@ pub fn handle_runnables(\n             }\n         }\n \n+        let args = runnable_args(&world, file_id, &runnable.kind);\n+\n         let r = req::Runnable {\n             range: runnable.range.conv_with(&line_index),\n             label: match &runnable.kind {\n@@ -242,17 +245,7 @@ pub fn handle_runnables(\n                     \"run binary\".to_string(),\n             },\n             bin: \"cargo\".to_string(),\n-            args: match runnable.kind {\n-                RunnableKind::Test { name } => {\n-                    vec![\n-                        \"test\".to_string(),\n-                        \"--\".to_string(),\n-                        name,\n-                        \"--nocapture\".to_string(),\n-                    ]\n-                }\n-                RunnableKind::Bin => vec![\"run\".to_string()]\n-            },\n+            args,\n             env: {\n                 let mut m = HashMap::new();\n                 m.insert(\n@@ -265,6 +258,67 @@ pub fn handle_runnables(\n         res.push(r);\n     }\n     return Ok(res);\n+\n+    fn runnable_args(world: &ServerWorld, file_id: FileId, kind: &RunnableKind) -> Vec<String> {\n+        let spec = if let Some(&crate_id) = world.analysis().crate_for(file_id).first() {\n+            let file_id = world.analysis().crate_root(crate_id);\n+            let path = world.path_map.get_path(file_id);\n+            world.workspaces.iter()\n+                .filter_map(|ws| {\n+                    let tgt = ws.target_by_root(path)?;\n+                    Some((tgt.package(ws).name(ws).clone(), tgt.name(ws).clone(), tgt.kind(ws)))\n+                })\n+                .next()\n+        } else {\n+            None\n+        };\n+        let mut res = Vec::new();\n+        match kind {\n+                RunnableKind::Test { name } => {\n+                    res.push(\"test\".to_string());\n+                    if let Some((pkg_name, tgt_name, tgt_kind)) = spec {\n+                        spec_args(pkg_name, tgt_name, tgt_kind, &mut res);\n+                    }\n+                    res.push(\"--\".to_string());\n+                    res.push(name.to_string());\n+                    res.push(\"--nocapture\".to_string());\n+                }\n+                RunnableKind::Bin => {\n+                    res.push(\"run\".to_string());\n+                    if let Some((pkg_name, tgt_name, tgt_kind)) = spec {\n+                        spec_args(pkg_name, tgt_name, tgt_kind, &mut res);\n+                    }\n+                }\n+            }\n+        res\n+    }\n+\n+    fn spec_args(pkg_name: &str, tgt_name: &str, tgt_kind: TargetKind, buf: &mut Vec<String>) {\n+        buf.push(\"--package\".to_string());\n+        buf.push(pkg_name.to_string());\n+        match tgt_kind {\n+            TargetKind::Bin => {\n+                buf.push(\"--bin\".to_string());\n+                buf.push(tgt_name.to_string());\n+            }\n+            TargetKind::Test => {\n+                buf.push(\"--test\".to_string());\n+                buf.push(tgt_name.to_string());\n+            }\n+            TargetKind::Bench => {\n+                buf.push(\"--bench\".to_string());\n+                buf.push(tgt_name.to_string());\n+            }\n+            TargetKind::Example => {\n+                buf.push(\"--example\".to_string());\n+                buf.push(tgt_name.to_string());\n+            }\n+            TargetKind::Lib => {\n+                buf.push(\"--lib\".to_string());\n+            }\n+            TargetKind::Other => (),\n+        }\n+    }\n }\n \n pub fn handle_decorations("}, {"sha": "12233f2580a8b484db138bfd63063c35ace36ae0", "filename": "crates/server/src/project_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Fserver%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Fserver%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fproject_model.rs?ref=e98d8cd255ab5c2fee873a58af6c2c3ad561dab4", "patch": "@@ -56,7 +56,7 @@ impl Package {\n }\n \n impl Target {\n-    pub fn pkg(self, ws: &CargoWorkspace) -> Package {\n+    pub fn package(self, ws: &CargoWorkspace) -> Package {\n         ws.tgt(self).pkg\n     }\n     pub fn name(self, ws: &CargoWorkspace) -> &str {\n@@ -114,7 +114,7 @@ impl CargoWorkspace {\n     pub fn ws_members<'a>(&'a self) -> impl Iterator<Item=Package> + 'a {\n         self.ws_members.iter().cloned()\n     }\n-    pub fn target_by_roo(&self, root: &Path) -> Option<Target> {\n+    pub fn target_by_root(&self, root: &Path) -> Option<Target> {\n         self.packages()\n             .filter_map(|pkg| pkg.targets(self).find(|it| it.root(self) == root))\n             .next()"}, {"sha": "f78b56cf8ddec3e4280b6d3db13445a567f03455", "filename": "crates/server/src/server_world.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Fserver%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Fserver%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fserver_world.rs?ref=e98d8cd255ab5c2fee873a58af6c2c3ad561dab4", "patch": "@@ -6,7 +6,7 @@ use std::{\n };\n \n use languageserver_types::Url;\n-use libanalysis::{FileId, AnalysisHost, Analysis};\n+use libanalysis::{FileId, AnalysisHost, Analysis, CrateGraph, CrateId};\n \n use {\n     Result,\n@@ -95,7 +95,22 @@ impl ServerWorldState {\n         Ok(file_id)\n     }\n     pub fn set_workspaces(&mut self, ws: Vec<CargoWorkspace>) {\n+        let mut crate_roots = HashMap::new();\n+        ws.iter()\n+          .flat_map(|ws| {\n+              ws.packages()\n+                .flat_map(move |pkg| pkg.targets(ws))\n+                .map(move |tgt| tgt.root(ws))\n+          })\n+          .for_each(|root| {\n+              if let Some(file_id) = self.path_map.get_id(root) {\n+                  let crate_id = CrateId(crate_roots.len() as u32);\n+                  crate_roots.insert(crate_id, file_id);\n+              }\n+          });\n+        let crate_graph = CrateGraph { crate_roots };\n         self.workspaces = Arc::new(ws);\n+        self.analysis_host.set_crate_graph(crate_graph);\n     }\n     pub fn snapshot(&self) -> ServerWorld {\n         ServerWorld {"}, {"sha": "0dc6074b2bb9548cee6e05e18a6b6f2c0f97ec87", "filename": "crates/server/tests/heavy_tests/main.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs?ref=e98d8cd255ab5c2fee873a58af6c2c3ad561dab4", "patch": "@@ -14,10 +14,10 @@ use m::req::{Runnables, RunnablesParams, DidReloadWorkspace};\n \n use support::project;\n \n-const LOG: &'static str = \"WARN\";\n+const LOG: &'static str = \"\";\n \n #[test]\n-fn test_runnables() {\n+fn test_runnables_no_project() {\n     let server = project(r\"\n //- lib.rs\n #[test]\n@@ -44,6 +44,42 @@ fn foo() {\n     );\n }\n \n+#[test]\n+fn test_runnables_project() {\n+    let server = project(r#\"\n+//- Cargo.toml\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+\n+//- src/lib.rs\n+pub fn foo() {}\n+\n+//- tests/spam.rs\n+#[test]\n+fn test_eggs() {}\n+\"#);\n+    server.wait_for_notification::<DidReloadWorkspace>();\n+    server.request::<Runnables>(\n+        RunnablesParams {\n+            text_document: server.doc_id(\"tests/spam.rs\"),\n+            position: None,\n+        },\n+        r#\"[\n+          {\n+            \"args\": [ \"test\", \"--package\", \"foo\", \"--test\", \"spam\", \"--\", \"test_eggs\", \"--nocapture\" ],\n+            \"bin\": \"cargo\",\n+            \"env\": { \"RUST_BACKTRACE\": \"short\" },\n+            \"label\": \"test test_eggs\",\n+            \"range\": {\n+              \"end\": { \"character\": 17, \"line\": 1 },\n+              \"start\": { \"character\": 0, \"line\": 0 }\n+            }\n+          }\n+        ]\"#\n+    );\n+}\n+\n #[test]\n fn test_project_model() {\n     let server = project(r#\""}, {"sha": "38a9e6c7658c3d692b4e9919025624b5e80e102f", "filename": "crates/server/tests/heavy_tests/support.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98d8cd255ab5c2fee873a58af6c2c3ad561dab4/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=e98d8cd255ab5c2fee873a58af6c2c3ad561dab4", "patch": "@@ -134,7 +134,7 @@ impl Server {\n     {\n         let expected = expected.replace(\"$PROJECT_ROOT$\", &self.dir.path().display().to_string());\n         let expected: Value = from_str(&expected).unwrap();\n-        let actual = self.wait_for_notification(N::METHOD);\n+        let actual = self.wait_for_notification::<N>();\n         assert_eq!(\n             expected, actual,\n             \"Expected:\\n{}\\n\\\n@@ -150,6 +150,11 @@ impl Server {\n         R::Params: Serialize,\n     {\n         let r = RawRequest::new::<R>(id, &params);\n+        self.send_request_(r)\n+    }\n+    fn send_request_(&self, r: RawRequest) -> Value\n+    {\n+        let id = r.id;\n         self.sender.as_ref()\n             .unwrap()\n             .send(RawMessage::Request(r));\n@@ -168,7 +173,10 @@ impl Server {\n         }\n         panic!(\"no response\");\n     }\n-    fn wait_for_notification(&self, method: &str) -> Value {\n+    pub fn wait_for_notification<N: Notification>(&self) -> Value {\n+        self.wait_for_notification_(N::METHOD)\n+    }\n+    fn wait_for_notification_(&self, method: &str) -> Value {\n         let f = |msg: &RawMessage| match msg {\n                 RawMessage::Notification(n) if n.method == method => {\n                     Some(n.params.clone())\n@@ -215,7 +223,6 @@ impl Drop for Server {\n                 drop(msg);\n             }\n         }\n-        eprintln!(\"joining server\");\n         self.server.take()\n             .unwrap()\n             .join().unwrap().unwrap();"}]}