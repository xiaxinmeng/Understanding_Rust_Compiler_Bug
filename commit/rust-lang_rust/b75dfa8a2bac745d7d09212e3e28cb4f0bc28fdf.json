{"sha": "b75dfa8a2bac745d7d09212e3e28cb4f0bc28fdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NWRmYThhMmJhYzc0NWQ3ZDA5MjEyZTNlMjhjYjRmMGJjMjhmZGY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-07-25T17:29:48Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-07-25T17:29:48Z"}, "message": "Don't access a static just for its size and alignment", "tree": {"sha": "23b4a57b801ebd793ef3eb09c191833eedbe0905", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23b4a57b801ebd793ef3eb09c191833eedbe0905"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b75dfa8a2bac745d7d09212e3e28cb4f0bc28fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b75dfa8a2bac745d7d09212e3e28cb4f0bc28fdf", "html_url": "https://github.com/rust-lang/rust/commit/b75dfa8a2bac745d7d09212e3e28cb4f0bc28fdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b75dfa8a2bac745d7d09212e3e28cb4f0bc28fdf/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eedf6ce4ef54bb03818ab21d714f1b9f13a6b31c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eedf6ce4ef54bb03818ab21d714f1b9f13a6b31c", "html_url": "https://github.com/rust-lang/rust/commit/eedf6ce4ef54bb03818ab21d714f1b9f13a6b31c"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "674ae29070644f4ac866911e1a1ec9079a094583", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b75dfa8a2bac745d7d09212e3e28cb4f0bc28fdf/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75dfa8a2bac745d7d09212e3e28cb4f0bc28fdf/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=b75dfa8a2bac745d7d09212e3e28cb4f0bc28fdf", "patch": "@@ -535,6 +535,19 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         id: AllocId,\n         liveness: AllocCheck,\n     ) -> InterpResult<'static, (Size, Align)> {\n+        // Allocations of `static` items\n+        // Can't do this in the match argument, we may get cycle errors since the lock would\n+        // be held throughout the match.\n+        let alloc = self.tcx.alloc_map.lock().get(id);\n+        match alloc {\n+            Some(GlobalAlloc::Static(did)) => {\n+                // Use size and align of the type\n+                let ty = self.tcx.type_of(did);\n+                let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n+                return Ok((layout.size, layout.align.abi));\n+            }\n+            _ => {}\n+        }\n         // Regular allocations.\n         if let Ok(alloc) = self.get(id) {\n             return Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align));\n@@ -548,20 +561,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n             };\n         }\n-        // Foreign statics.\n-        // Can't do this in the match argument, we may get cycle errors since the lock would\n-        // be held throughout the match.\n-        let alloc = self.tcx.alloc_map.lock().get(id);\n-        match alloc {\n-            Some(GlobalAlloc::Static(did)) => {\n-                assert!(self.tcx.is_foreign_item(did));\n-                // Use size and align of the type\n-                let ty = self.tcx.type_of(did);\n-                let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n-                return Ok((layout.size, layout.align.abi));\n-            }\n-            _ => {}\n-        }\n         // The rest must be dead.\n         if let AllocCheck::MaybeDead = liveness {\n             // Deallocated pointers are allowed, we should be able to find"}, {"sha": "9ce050aae218174de810976cf2cff825bbd86c75", "filename": "src/test/ui/consts/static-cycle-error.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b75dfa8a2bac745d7d09212e3e28cb4f0bc28fdf/src%2Ftest%2Fui%2Fconsts%2Fstatic-cycle-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75dfa8a2bac745d7d09212e3e28cb4f0bc28fdf/src%2Ftest%2Fui%2Fconsts%2Fstatic-cycle-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic-cycle-error.rs?ref=b75dfa8a2bac745d7d09212e3e28cb4f0bc28fdf", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+\n+struct Foo {\n+    foo: Option<&'static Foo>\n+}\n+\n+static FOO: Foo = Foo {\n+    foo: Some(&FOO),\n+};\n+\n+fn main() {}"}]}