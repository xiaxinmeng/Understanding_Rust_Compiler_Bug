{"sha": "533247c1c843ebafed07de995ee33fef388a3676", "node_id": "C_kwDOAAsO6NoAKDUzMzI0N2MxYzg0M2ViYWZlZDA3ZGU5OTVlZTMzZmVmMzg4YTM2NzY", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2021-10-28T21:38:21Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2021-10-28T21:38:21Z"}, "message": "Add -Zunstable-options instead of feature", "tree": {"sha": "de7bffef7d029370a44224baf60431a51bc1483a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de7bffef7d029370a44224baf60431a51bc1483a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/533247c1c843ebafed07de995ee33fef388a3676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/533247c1c843ebafed07de995ee33fef388a3676", "html_url": "https://github.com/rust-lang/rust/commit/533247c1c843ebafed07de995ee33fef388a3676", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/533247c1c843ebafed07de995ee33fef388a3676/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a076f2b9b48af47a2f85f579069424d88d850915", "url": "https://api.github.com/repos/rust-lang/rust/commits/a076f2b9b48af47a2f85f579069424d88d850915", "html_url": "https://github.com/rust-lang/rust/commit/a076f2b9b48af47a2f85f579069424d88d850915"}], "stats": {"total": 9, "additions": 2, "deletions": 7}, "files": [{"sha": "dd3b7c76f28675b8d0d77321f9607193fe843119", "filename": "src/test/run-make-fulldeps/foreign-exceptions/foo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/533247c1c843ebafed07de995ee33fef388a3676/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/533247c1c843ebafed07de995ee33fef388a3676/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fforeign-exceptions%2Ffoo.rs?ref=533247c1c843ebafed07de995ee33fef388a3676", "patch": "@@ -2,8 +2,6 @@\n // are caught by catch_unwind. Also tests that Rust panics can unwind through\n // C++ code.\n \n-// For linking libstdc++ on MinGW\n-#![cfg_attr(all(windows, target_env = \"gnu\"), feature(native_link_modifiers))]\n #![feature(c_unwind)]\n \n use std::panic::{catch_unwind, AssertUnwindSafe};"}, {"sha": "9655d09df0f2a021ff78835395c411d308d1694f", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/533247c1c843ebafed07de995ee33fef388a3676/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/533247c1c843ebafed07de995ee33fef388a3676/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=533247c1c843ebafed07de995ee33fef388a3676", "patch": "@@ -117,10 +117,10 @@ else\n \t# that it is compiled with the expectation that pthreads is dynamically\n \t# linked as a DLL and will fail to link with a statically linked libpthread.\n \t#\n-\t# So we end up with the following hack: we link use static-nobundle to only\n+\t# So we end up with the following hack: we link use static:-bundle to only\n \t# link the parts of libstdc++ that we actually use, which doesn't include\n \t# the dependency on the pthreads DLL.\n-\tEXTRARSCXXFLAGS := -l static:-bundle=stdc++\n+\tEXTRARSCXXFLAGS := -l static:-bundle=stdc++ -Z unstable-options\n endif\n else\n ifeq ($(UNAME),Darwin)"}, {"sha": "f30a35e27c0bcc7f596fda1de1e8007e2798c109", "filename": "src/test/run-make/issue-36710/foo.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/533247c1c843ebafed07de995ee33fef388a3676/src%2Ftest%2Frun-make%2Fissue-36710%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/533247c1c843ebafed07de995ee33fef388a3676/src%2Ftest%2Frun-make%2Fissue-36710%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-36710%2Ffoo.rs?ref=533247c1c843ebafed07de995ee33fef388a3676", "patch": "@@ -1,8 +1,5 @@\n // Tests that linking to C++ code with global destructors works.\n \n-// For linking libstdc++ on MinGW\n-#![cfg_attr(all(windows, target_env = \"gnu\"), feature(native_link_modifiers))]\n-\n extern \"C\" {\n     fn get() -> u32;\n }"}]}