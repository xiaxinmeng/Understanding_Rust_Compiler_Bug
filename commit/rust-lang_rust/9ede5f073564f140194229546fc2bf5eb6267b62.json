{"sha": "9ede5f073564f140194229546fc2bf5eb6267b62", "node_id": "C_kwDOAAsO6NoAKDllZGU1ZjA3MzU2NGYxNDAxOTQyMjk1NDZmYzJiZjVlYjYyNjdiNjI", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-09-21T13:04:55Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-09-21T13:04:55Z"}, "message": "Implement `HirDisplay` for `TyKind::Generator`", "tree": {"sha": "d36c991c4b811a6679a3475d7b8a7bb57b144f47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d36c991c4b811a6679a3475d7b8a7bb57b144f47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ede5f073564f140194229546fc2bf5eb6267b62", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmMrDBIACgkQ4laYqTBY\nYXGtaw//YvB7o4X89BFnSWMZ5BnwCS/QxVn94J7pZ693s8n8MCfcy79JQy3buRdR\nf8UqBK7DZa0h6+dExiNJObBj9l4dypcVccstp4j+yTg9N7iFkBVoLZ/D3nBT8URu\niC5xdRaaOovVepR3iifKdQJVS5N90y+7G6HpRpNqxEloPegCdpArxcAQwILuIzx6\njXAkIKpItObVypWrZV3KtyXA1Fvw1F7ceFUjEqekthhLDa5/ayP6ihaS0f8SfSHR\nSsDN7IwhG2wi++PB/mPx1C+wqGXj9Yji3xWr4PUWNekkZ25W3dvTf4Z+i/nDtKbE\nr4WEa4nBJlXw3DNPersU2c8c2CCSZZs5qobPNoZZ6DTjvNZdYhXaNnwCUxKW1Fv7\nuaJUCyitqs0FKydQcGx440WLfHUyiLvgUGrjsIRwtn00h7ysfY0w0FYgCJ00b++i\nAWHtWkw67TNm+NqjQdr8FAx1yd9Sle2wHkDxT6UD/z46hucBq2E3Hebgu7XFZVmm\n4JhIUa2E3T+Na9aXV+Fy9IbyDScaZ6apbNxRKC34tZ89fMXv+exHp9OoYSJ2B7bW\nJ5PD/ChLmQatHzijWLYrZgUnbhk09tWr1tWVbi4Zqpg7XoejIlTbhptoNm0TSX7I\nl7+7wprwUyaEZlAR3cZE6kAxZk+iLL1si49seO+02k54fHpmRDk=\n=AQ0Y\n-----END PGP SIGNATURE-----", "payload": "tree d36c991c4b811a6679a3475d7b8a7bb57b144f47\nparent 4b5a66e0bc621aa6d152f286ce064bcaff3217be\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1663765495 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1663765495 +0900\n\nImplement `HirDisplay` for `TyKind::Generator`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ede5f073564f140194229546fc2bf5eb6267b62", "html_url": "https://github.com/rust-lang/rust/commit/9ede5f073564f140194229546fc2bf5eb6267b62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ede5f073564f140194229546fc2bf5eb6267b62/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b5a66e0bc621aa6d152f286ce064bcaff3217be", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5a66e0bc621aa6d152f286ce064bcaff3217be", "html_url": "https://github.com/rust-lang/rust/commit/4b5a66e0bc621aa6d152f286ce064bcaff3217be"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "71763430ea38929f9814e02abefe6466112dd8d8", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9ede5f073564f140194229546fc2bf5eb6267b62/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ede5f073564f140194229546fc2bf5eb6267b62/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=9ede5f073564f140194229546fc2bf5eb6267b62", "patch": "@@ -20,6 +20,7 @@ use hir_def::{\n };\n use hir_expand::{hygiene::Hygiene, name::Name};\n use itertools::Itertools;\n+use smallvec::SmallVec;\n use syntax::SmolStr;\n \n use crate::{\n@@ -221,6 +222,7 @@ pub enum DisplaySourceCodeError {\n     PathNotFound,\n     UnknownType,\n     Closure,\n+    Generator,\n }\n \n pub enum HirDisplayError {\n@@ -782,7 +784,34 @@ impl HirDisplay for Ty {\n                 write!(f, \"{{unknown}}\")?;\n             }\n             TyKind::InferenceVar(..) => write!(f, \"_\")?,\n-            TyKind::Generator(..) => write!(f, \"{{generator}}\")?,\n+            TyKind::Generator(_, subst) => {\n+                if f.display_target.is_source_code() {\n+                    return Err(HirDisplayError::DisplaySourceCodeError(\n+                        DisplaySourceCodeError::Generator,\n+                    ));\n+                }\n+\n+                let subst = subst.as_slice(Interner);\n+                let a: Option<SmallVec<[&Ty; 3]>> = subst\n+                    .get(subst.len() - 3..)\n+                    .map(|args| args.iter().map(|arg| arg.ty(Interner)).collect())\n+                    .flatten();\n+\n+                if let Some([resume_ty, yield_ty, ret_ty]) = a.as_deref() {\n+                    write!(f, \"|\")?;\n+                    resume_ty.hir_fmt(f)?;\n+                    write!(f, \"|\")?;\n+\n+                    write!(f, \" yields \")?;\n+                    yield_ty.hir_fmt(f)?;\n+\n+                    write!(f, \" -> \")?;\n+                    ret_ty.hir_fmt(f)?;\n+                } else {\n+                    // This *should* be unreachable, but fallback just in case.\n+                    write!(f, \"{{generator}}\")?;\n+                }\n+            }\n             TyKind::GeneratorWitness(..) => write!(f, \"{{generator witness}}\")?,\n         }\n         Ok(())"}, {"sha": "b42c5fe7fc41fdc8810ad7bca0f444619222d0b4", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ede5f073564f140194229546fc2bf5eb6267b62/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ede5f073564f140194229546fc2bf5eb6267b62/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=9ede5f073564f140194229546fc2bf5eb6267b62", "patch": "@@ -1944,8 +1944,8 @@ fn test() {\n             70..71 'v': i64\n             78..80 '{}': ()\n             91..362 '{     ...   } }': ()\n-            101..106 'mut g': {generator}\n-            109..218 '|r| { ...     }': {generator}\n+            101..106 'mut g': |usize| yields i64 -> &str\n+            109..218 '|r| { ...     }': |usize| yields i64 -> &str\n             110..111 'r': usize\n             113..218 '{     ...     }': &str\n             127..128 'a': usize\n@@ -1959,11 +1959,11 @@ fn test() {\n             187..188 '2': i64\n             198..212 '\"return value\"': &str\n             225..360 'match ...     }': ()\n-            231..239 'Pin::new': fn new<&mut {generator}>(&mut {generator}) -> Pin<&mut {generator}>\n-            231..247 'Pin::n...mut g)': Pin<&mut {generator}>\n+            231..239 'Pin::new': fn new<&mut |usize| yields i64 -> &str>(&mut |usize| yields i64 -> &str) -> Pin<&mut |usize| yields i64 -> &str>\n+            231..247 'Pin::n...mut g)': Pin<&mut |usize| yields i64 -> &str>\n             231..262 'Pin::n...usize)': GeneratorState<i64, &str>\n-            240..246 '&mut g': &mut {generator}\n-            245..246 'g': {generator}\n+            240..246 '&mut g': &mut |usize| yields i64 -> &str\n+            245..246 'g': |usize| yields i64 -> &str\n             255..261 '0usize': usize\n             273..299 'Genera...ded(y)': GeneratorState<i64, &str>\n             297..298 'y': i64"}]}