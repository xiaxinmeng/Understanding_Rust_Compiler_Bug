{"sha": "d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc", "node_id": "C_kwDOAAsO6NoAKGQwYzdlZDNiZWFhZWY2MTNkMmIwNjc2Yzc4MDhlZTgxOGNiOGM4YmM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-22T18:24:50Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-27T07:18:36Z"}, "message": "Remove `ty::ClosureKind::from_def_id`\n\n\u2026in favour of `TyCtxt::fn_trait_kind_from_def_id`", "tree": {"sha": "63e257529f1be062f531b71ed5bb98a9258a9376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63e257529f1be062f531b71ed5bb98a9258a9376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc", "html_url": "https://github.com/rust-lang/rust/commit/d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "881862ecb79a447c9631becb7f35c1c47b406346", "url": "https://api.github.com/repos/rust-lang/rust/commits/881862ecb79a447c9631becb7f35c1c47b406346", "html_url": "https://github.com/rust-lang/rust/commit/881862ecb79a447c9631becb7f35c1c47b406346"}], "stats": {"total": 32, "additions": 12, "deletions": 20}, "files": [{"sha": "5c7d21fc2e41895b42fba35c7266b48b72302223", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc", "patch": "@@ -2089,7 +2089,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && let maybe_trait_item_def_id = assoc_item.trait_item_def_id.unwrap_or(def_id)\n             && let maybe_trait_def_id = self.tcx.parent(maybe_trait_item_def_id)\n             // Just an easy way to check \"trait_def_id == Fn/FnMut/FnOnce\"\n-            && let Some(call_kind) = ty::ClosureKind::from_def_id(self.tcx, maybe_trait_def_id)\n+            && let Some(call_kind) = self.tcx.fn_trait_kind_from_def_id(maybe_trait_def_id)\n             && let Some(callee_ty) = callee_ty\n         {\n             let callee_ty = callee_ty.peel_refs();\n@@ -2115,7 +2115,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         {\n                             if let ty::PredicateKind::Clause(ty::Clause::Trait(pred)) = predicate.kind().skip_binder()\n                                 && pred.self_ty().peel_refs() == callee_ty\n-                                && ty::ClosureKind::from_def_id(self.tcx, pred.def_id()).is_some()\n+                                && self.tcx.fn_trait_kind_from_def_id(pred.def_id()).is_some()\n                             {\n                                 err.span_note(span, \"callable defined here\");\n                                 return;"}, {"sha": "2653c8576de6cc4ea0cb017cbf34319d232dc513", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc", "patch": "@@ -118,18 +118,9 @@ impl<'tcx> ClosureKind {\n         }\n     }\n \n-    pub fn from_def_id(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ClosureKind> {\n-        if Some(def_id) == tcx.lang_items().fn_once_trait() {\n-            Some(ClosureKind::FnOnce)\n-        } else if Some(def_id) == tcx.lang_items().fn_mut_trait() {\n-            Some(ClosureKind::FnMut)\n-        } else if Some(def_id) == tcx.lang_items().fn_trait() {\n-            Some(ClosureKind::Fn)\n-        } else {\n-            None\n-        }\n-    }\n-\n+    /// Converts `self` to a [`DefId`] of the corresponding trait.\n+    ///\n+    /// Note: the inverse of this function is [`TyCtxt::fn_trait_kind_from_def_id`]\n     pub fn to_def_id(&self, tcx: TyCtxt<'_>) -> DefId {\n         tcx.require_lang_item(\n             match self {"}, {"sha": "de35fbfe6d0dbd5918579e7249944f46e2d02e9b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc", "patch": "@@ -357,7 +357,8 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                 ocx.register_obligation(obligation);\n                 if ocx.select_all_or_error().is_empty() {\n                     return Ok((\n-                        ty::ClosureKind::from_def_id(self.tcx, trait_def_id)\n+                        self.tcx\n+                            .fn_trait_kind_from_def_id(trait_def_id)\n                             .expect(\"expected to map DefId to ClosureKind\"),\n                         ty.rebind(self.resolve_vars_if_possible(var)),\n                     ));\n@@ -686,7 +687,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 }\n                                 ObligationCauseCode::BindingObligation(def_id, _)\n                                 | ObligationCauseCode::ItemObligation(def_id)\n-                                    if ty::ClosureKind::from_def_id(tcx, *def_id).is_some() =>\n+                                    if tcx.fn_trait_kind_from_def_id(*def_id).is_some() =>\n                                 {\n                                     err.code(rustc_errors::error_code!(E0059));\n                                     err.set_primary_message(format!(\n@@ -847,7 +848,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         }\n \n                         let is_fn_trait =\n-                            ty::ClosureKind::from_def_id(tcx, trait_ref.def_id()).is_some();\n+                            tcx.fn_trait_kind_from_def_id(trait_ref.def_id()).is_some();\n                         let is_target_feature_fn = if let ty::FnDef(def_id, _) =\n                             *trait_ref.skip_binder().self_ty().kind()\n                         {\n@@ -877,7 +878,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             // Note if the `FnMut` or `FnOnce` is less general than the trait we're trying\n                             // to implement.\n                             let selected_kind =\n-                                ty::ClosureKind::from_def_id(self.tcx, trait_ref.def_id())\n+                                self.tcx.fn_trait_kind_from_def_id(trait_ref.def_id())\n                                     .expect(\"expected to map DefId to ClosureKind\");\n                             if !implemented_kind.extends(selected_kind) {\n                                 err.note("}, {"sha": "4ae9b22f22171e42d862c3b75f17040a4a9b7e5c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d0c7ed3beaaef613d2b0676c7808ee818cb8c8bc", "patch": "@@ -1752,7 +1752,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             && let predicates = self.tcx.predicates_of(def_id).instantiate_identity(self.tcx)\n             && let Some(pred) = predicates.predicates.get(*idx)\n             && let ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) = pred.kind().skip_binder()\n-            && ty::ClosureKind::from_def_id(self.tcx, trait_pred.def_id()).is_some()\n+            && self.tcx.fn_trait_kind_from_def_id(trait_pred.def_id()).is_some()\n         {\n             let expected_self =\n                 self.tcx.anonymize_late_bound_regions(pred.kind().rebind(trait_pred.self_ty()));\n@@ -1766,7 +1766,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 .enumerate()\n                 .find(|(other_idx, (pred, _))| match pred.kind().skip_binder() {\n                     ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred))\n-                        if ty::ClosureKind::from_def_id(self.tcx, trait_pred.def_id())\n+                        if self.tcx.fn_trait_kind_from_def_id(trait_pred.def_id())\n                             .is_some()\n                             && other_idx != idx\n                             // Make sure that the self type matches"}]}