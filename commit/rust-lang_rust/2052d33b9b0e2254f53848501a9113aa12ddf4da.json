{"sha": "2052d33b9b0e2254f53848501a9113aa12ddf4da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNTJkMzNiOWIwZTIyNTRmNTM4NDg1MDFhOTExM2FhMTJkZGY0ZGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-15T16:22:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-15T16:22:16Z"}, "message": "Remove deprecated Path::from_ast\n\nLong term, we probably should make hir::Path private to hir.", "tree": {"sha": "3aad42f8befaf43435e2e485498d432ef1419390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aad42f8befaf43435e2e485498d432ef1419390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2052d33b9b0e2254f53848501a9113aa12ddf4da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2052d33b9b0e2254f53848501a9113aa12ddf4da", "html_url": "https://github.com/rust-lang/rust/commit/2052d33b9b0e2254f53848501a9113aa12ddf4da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2052d33b9b0e2254f53848501a9113aa12ddf4da/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0ad68b96292bf6f8a1380b9af9cadc1c9b1a5f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0ad68b96292bf6f8a1380b9af9cadc1c9b1a5f6", "html_url": "https://github.com/rust-lang/rust/commit/f0ad68b96292bf6f8a1380b9af9cadc1c9b1a5f6"}], "stats": {"total": 38, "additions": 13, "deletions": 25}, "files": [{"sha": "5216862ba52d2f767ba0a3350f7d8d1e88d2bc93", "filename": "crates/assists/src/ast_transform.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2052d33b9b0e2254f53848501a9113aa12ddf4da/crates%2Fassists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2052d33b9b0e2254f53848501a9113aa12ddf4da/crates%2Fassists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fast_transform.rs?ref=2052d33b9b0e2254f53848501a9113aa12ddf4da", "patch": "@@ -7,6 +7,17 @@ use syntax::{\n     ast::{self, AstNode},\n };\n \n+pub fn apply<'a, N: AstNode>(transformer: &dyn AstTransform<'a>, node: N) -> N {\n+    SyntaxRewriter::from_fn(|element| match element {\n+        syntax::SyntaxElement::Node(n) => {\n+            let replacement = transformer.get_substitution(&n)?;\n+            Some(replacement.into())\n+        }\n+        _ => None,\n+    })\n+    .rewrite_ast(&node)\n+}\n+\n pub trait AstTransform<'a> {\n     fn get_substitution(&self, node: &syntax::SyntaxNode) -> Option<syntax::SyntaxNode>;\n \n@@ -107,10 +118,7 @@ impl<'a> SubstituteTypeParams<'a> {\n             ast::Type::PathType(path_type) => path_type.path()?,\n             _ => return None,\n         };\n-        // FIXME: use `hir::Path::from_src` instead.\n-        #[allow(deprecated)]\n-        let path = hir::Path::from_ast(path)?;\n-        let resolution = self.source_scope.resolve_hir_path(&path)?;\n+        let resolution = self.source_scope.speculative_resolve(&path)?;\n         match resolution {\n             hir::PathResolution::TypeParam(tp) => Some(self.substs.get(&tp)?.syntax().clone()),\n             _ => None,\n@@ -146,10 +154,7 @@ impl<'a> QualifyPaths<'a> {\n             // don't try to qualify `Fn(Foo) -> Bar` paths, they are in prelude anyway\n             return None;\n         }\n-        // FIXME: use `hir::Path::from_src` instead.\n-        #[allow(deprecated)]\n-        let hir_path = hir::Path::from_ast(p.clone());\n-        let resolution = self.source_scope.resolve_hir_path(&hir_path?)?;\n+        let resolution = self.source_scope.speculative_resolve(&p)?;\n         match resolution {\n             PathResolution::Def(def) => {\n                 let found_path = from.find_use_path(self.source_scope.db.upcast(), def)?;\n@@ -175,17 +180,6 @@ impl<'a> QualifyPaths<'a> {\n     }\n }\n \n-pub fn apply<'a, N: AstNode>(transformer: &dyn AstTransform<'a>, node: N) -> N {\n-    SyntaxRewriter::from_fn(|element| match element {\n-        syntax::SyntaxElement::Node(n) => {\n-            let replacement = transformer.get_substitution(&n)?;\n-            Some(replacement.into())\n-        }\n-        _ => None,\n-    })\n-    .rewrite_ast(&node)\n-}\n-\n impl<'a> AstTransform<'a> for QualifyPaths<'a> {\n     fn get_substitution(&self, node: &syntax::SyntaxNode) -> Option<syntax::SyntaxNode> {\n         self.get_substitution_inner(node).or_else(|| self.previous.get_substitution(node))"}, {"sha": "99395667defcde5c9e23fc5d2ffa5ee48cd3f62f", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2052d33b9b0e2254f53848501a9113aa12ddf4da/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2052d33b9b0e2254f53848501a9113aa12ddf4da/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=2052d33b9b0e2254f53848501a9113aa12ddf4da", "patch": "@@ -153,12 +153,6 @@ pub enum GenericArg {\n }\n \n impl Path {\n-    /// Converts an `ast::Path` to `Path`. Works with use trees.\n-    #[deprecated = \"Doesn't handle hygiene, don't add new calls, remove old ones\"]\n-    pub fn from_ast(path: ast::Path) -> Option<Path> {\n-        lower::lower_path(path, &Hygiene::new_unhygienic())\n-    }\n-\n     /// Converts an `ast::Path` to `Path`. Works with use trees.\n     /// It correctly handles `$crate` based path from macro call.\n     pub fn from_src(path: ast::Path, hygiene: &Hygiene) -> Option<Path> {"}]}