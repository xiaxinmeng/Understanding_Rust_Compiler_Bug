{"sha": "72a21027f5bee367bd9ccbeecc2528986f85d90b", "node_id": "C_kwDOAAsO6NoAKDcyYTIxMDI3ZjViZWUzNjdiZDljY2JlZWNjMjUyODk4NmY4NWQ5MGI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-19T13:07:01Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-19T13:13:34Z"}, "message": "add test", "tree": {"sha": "4fb61fb717c43ecb8307bb016789051d485c16b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb61fb717c43ecb8307bb016789051d485c16b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72a21027f5bee367bd9ccbeecc2528986f85d90b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72a21027f5bee367bd9ccbeecc2528986f85d90b", "html_url": "https://github.com/rust-lang/rust/commit/72a21027f5bee367bd9ccbeecc2528986f85d90b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72a21027f5bee367bd9ccbeecc2528986f85d90b/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71f8fd5c5859fa09587486351f849277a910e4d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f8fd5c5859fa09587486351f849277a910e4d9", "html_url": "https://github.com/rust-lang/rust/commit/71f8fd5c5859fa09587486351f849277a910e4d9"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "108fef8a15fb313bf9c698e84e43b85ee0aab48b", "filename": "src/test/ui/implied-bounds/issue-101951.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/72a21027f5bee367bd9ccbeecc2528986f85d90b/src%2Ftest%2Fui%2Fimplied-bounds%2Fissue-101951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a21027f5bee367bd9ccbeecc2528986f85d90b/src%2Ftest%2Fui%2Fimplied-bounds%2Fissue-101951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fissue-101951.rs?ref=72a21027f5bee367bd9ccbeecc2528986f85d90b", "patch": "@@ -0,0 +1,50 @@\n+// Taken directly from that issue.\n+//\n+// This test detected that we didn't correctly resolve\n+// inference variables when computing implied bounds.\n+//\n+// check-pass\n+pub trait BuilderFn<'a> {\n+    type Output;\n+}\n+\n+impl<'a, F, Out> BuilderFn<'a> for F\n+where\n+    F: FnOnce(&'a mut ()) -> Out,\n+{\n+    type Output = Out;\n+}\n+\n+pub trait ConstructionFirm {\n+    type Builder: for<'a> BuilderFn<'a>;\n+}\n+\n+pub trait Campus<T>\n+where\n+    T: ConstructionFirm,\n+{\n+    fn add_building(\n+        &mut self,\n+        building: &mut <<T as ConstructionFirm>::Builder as BuilderFn<'_>>::Output,\n+    );\n+}\n+\n+struct ArchitectsInc {}\n+\n+impl ConstructionFirm for ArchitectsInc {\n+    type Builder = fn(&mut ()) -> PrettyCondo<'_>;\n+}\n+\n+struct PrettyCondo<'a> {\n+    _marker: &'a mut (),\n+}\n+\n+struct CondoEstate {}\n+\n+impl Campus<ArchitectsInc> for CondoEstate {\n+    fn add_building(&mut self, _building: &mut PrettyCondo<'_>) {\n+        todo!()\n+    }\n+}\n+\n+fn main() {}"}]}