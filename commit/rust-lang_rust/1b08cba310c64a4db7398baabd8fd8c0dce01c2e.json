{"sha": "1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "node_id": "C_kwDOAAsO6NoAKDFiMDhjYmEzMTBjNjRhNGRiNzM5OGJhYWJkOGZkOGMwZGNlMDFjMmU", "commit": {"author": {"name": "Fausto", "email": "mi9uel9@gmail.com", "date": "2022-03-01T18:07:53Z"}, "committer": {"name": "Fausto", "email": "mi9uel9@gmail.com", "date": "2022-03-01T18:07:53Z"}, "message": "update (bless) test results", "tree": {"sha": "32cca4d08dae434cb75e909c115e9f8d5567f6f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32cca4d08dae434cb75e909c115e9f8d5567f6f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "html_url": "https://github.com/rust-lang/rust/commit/1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "270730f51403f1e134d918fa0ec1312702569e20", "url": "https://api.github.com/repos/rust-lang/rust/commits/270730f51403f1e134d918fa0ec1312702569e20", "html_url": "https://github.com/rust-lang/rust/commit/270730f51403f1e134d918fa0ec1312702569e20"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "636904aefb47ed446034959535e261b22d3b93a6", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.stderr?ref=1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "patch": "@@ -9,7 +9,7 @@ LL |     x\n    |     ^ ...but data from `x` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |   fn foo<'a>(&'a self, x: &'a i32) -> &i32 {\n    |               ++           ++"}, {"sha": "474eadb7f9236ac5ed1bdc516abc305f6d5a1437", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.stderr?ref=1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "patch": "@@ -9,7 +9,7 @@ LL |         if true { x } else { self }\n    |                   ^ ...but data from `x` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn foo<'a>(&'a self, x: &'a Foo) -> &Foo {\n    |                 ++           ++"}, {"sha": "68893781dc2913419bef3eb4306a7a54426a35e3", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-impl-items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.stderr?ref=1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "patch": "@@ -7,7 +7,7 @@ LL |         x.push(y);\n    |                ^ ...but data from `y` flows into `x` here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn foo<'a>(x: &mut Vec<&'a u8>, y: &'a u8) {\n    |           ++++              ++          ++"}, {"sha": "64a574695105a8559d62f09cf5fddbb953172227", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.stderr?ref=1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "patch": "@@ -7,7 +7,7 @@ LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                              this parameter and the return type are declared with different lifetimes...\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn a<'a>(self: Pin<&'a Foo>, f: &'a Foo) -> &Foo { f }\n    |         ++++            ++           ++\n@@ -21,7 +21,7 @@ LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self,\n    |                               this parameter and the return type are declared with different lifetimes...\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn c<'a>(self: Pin<&'a Self>, f: &'a Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |         ++++            ++            ++"}, {"sha": "5764ab03c5519b0345a3c12ade27f285886007bf", "filename": "src/test/ui/self/elision/lt-ref-self.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.stderr?ref=1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "patch": "@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn ref_self<'a>(&'a self, f: &'a u32) -> &u32 {\n    |                ++++  ++           ++\n@@ -25,7 +25,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn ref_Self<'a>(self: &'a Self, f: &'a u32) -> &u32 {\n    |                ++++        ++           ++\n@@ -41,7 +41,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_ref_Self<'a>(self: Box<&'a Self>, f: &'a u32) -> &u32 {\n    |                    ++++            ++            ++\n@@ -57,7 +57,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn pin_ref_Self<'a>(self: Pin<&'a Self>, f: &'a u32) -> &u32 {\n    |                    ++++            ++            ++\n@@ -73,7 +73,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_box_ref_Self<'a>(self: Box<Box<&'a Self>>, f: &'a u32) -> &u32 {\n    |                        ++++                ++             ++\n@@ -89,7 +89,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_pin_Self<'a>(self: Box<Pin<&'a Self>>, f: &'a u32) -> &u32 {\n    |                    ++++                ++             ++"}, {"sha": "416719a08e033b0c1425b7c5c1ff5ec17897e35d", "filename": "src/test/ui/self/elision/ref-mut-self.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.stderr?ref=1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "patch": "@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn ref_self<'a>(&'a mut self, f: &'a u32) -> &u32 {\n    |                ++++  ++               ++\n@@ -25,7 +25,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn ref_Self<'a>(self: &'a mut Self, f: &'a u32) -> &u32 {\n    |                ++++        ++               ++\n@@ -41,7 +41,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_ref_Self<'a>(self: Box<&'a mut Self>, f: &'a u32) -> &u32 {\n    |                    ++++            ++                ++\n@@ -57,7 +57,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn pin_ref_Self<'a>(self: Pin<&'a mut Self>, f: &'a u32) -> &u32 {\n    |                    ++++            ++                ++\n@@ -73,7 +73,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_box_ref_Self<'a>(self: Box<Box<&'a mut Self>>, f: &'a u32) -> &u32 {\n    |                        ++++                ++                 ++\n@@ -89,7 +89,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_pin_ref_Self<'a>(self: Box<Pin<&'a mut Self>>, f: &'a u32) -> &u32 {\n    |                        ++++                ++                 ++"}, {"sha": "6ca9ab1b2c775fee1248722849e15be6bcd4ede1", "filename": "src/test/ui/self/elision/ref-mut-struct.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.stderr?ref=1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "patch": "@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn ref_Struct<'a>(self: &'a mut Struct, f: &'a u32) -> &u32 {\n    |                  ++++        ++                 ++\n@@ -25,7 +25,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_ref_Struct<'a>(self: Box<&'a mut Struct>, f: &'a u32) -> &u32 {\n    |                      ++++            ++                  ++\n@@ -41,7 +41,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn pin_ref_Struct<'a>(self: Pin<&'a mut Struct>, f: &'a u32) -> &u32 {\n    |                      ++++            ++                  ++\n@@ -57,7 +57,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_box_ref_Struct<'a>(self: Box<Box<&'a mut Struct>>, f: &'a u32) -> &u32 {\n    |                          ++++                ++                   ++\n@@ -73,7 +73,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_pin_ref_Struct<'a>(self: Box<Pin<&'a mut Struct>>, f: &'a u32) -> &u32 {\n    |                          ++++                ++                   ++"}, {"sha": "955222f765599d2cb1169416d65e8fb970a021d9", "filename": "src/test/ui/self/elision/ref-self.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.stderr?ref=1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "patch": "@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn ref_self<'a>(&'a self, f: &'a u32) -> &u32 {\n    |                ++++  ++           ++\n@@ -25,7 +25,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn ref_Self<'a>(self: &'a Self, f: &'a u32) -> &u32 {\n    |                ++++        ++           ++\n@@ -41,7 +41,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_ref_Self<'a>(self: Box<&'a Self>, f: &'a u32) -> &u32 {\n    |                    ++++            ++            ++\n@@ -57,7 +57,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn pin_ref_Self<'a>(self: Pin<&'a Self>, f: &'a u32) -> &u32 {\n    |                    ++++            ++            ++\n@@ -73,7 +73,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_box_ref_Self<'a>(self: Box<Box<&'a Self>>, f: &'a u32) -> &u32 {\n    |                        ++++                ++             ++\n@@ -89,7 +89,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_pin_ref_Self<'a>(self: Box<Pin<&'a Self>>, f: &'a u32) -> &u32 {\n    |                        ++++                ++             ++\n@@ -105,7 +105,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn wrap_ref_Self_Self<'a>(self: Wrap<&'a Self, Self>, f: &'a u8) -> &u8 {\n    |                          ++++             ++                  ++"}, {"sha": "c80993fe8c4552f1bff9a0eb35cc4a1cb1bff628", "filename": "src/test/ui/self/elision/ref-struct.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b08cba310c64a4db7398baabd8fd8c0dce01c2e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.stderr?ref=1b08cba310c64a4db7398baabd8fd8c0dce01c2e", "patch": "@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn ref_Struct<'a>(self: &'a Struct, f: &'a u32) -> &u32 {\n    |                  ++++        ++             ++\n@@ -25,7 +25,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_ref_Struct<'a>(self: Box<&'a Struct>, f: &'a u32) -> &u32 {\n    |                      ++++            ++              ++\n@@ -41,7 +41,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn pin_ref_Struct<'a>(self: Pin<&'a Struct>, f: &'a u32) -> &u32 {\n    |                      ++++            ++              ++\n@@ -57,7 +57,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_box_ref_Struct<'a>(self: Box<Box<&'a Struct>>, f: &'a u32) -> &u32 {\n    |                          ++++                ++               ++\n@@ -73,7 +73,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n    |\n    = note: each elided lifetime in input position becomes a distinct lifetime\n-help: consider introducing a named lifetime parameter\n+help: consider introducing a named lifetime parameter and update trait if needed\n    |\n LL |     fn box_pin_Struct<'a>(self: Box<Pin<&'a Struct>>, f: &'a u32) -> &u32 {\n    |                      ++++                ++               ++"}]}