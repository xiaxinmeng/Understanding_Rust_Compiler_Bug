{"sha": "6aa45b71b11823a3140736536a93c5eac11ceecb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYTQ1YjcxYjExODIzYTMxNDA3MzY1MzZhOTNjNWVhYzExY2VlY2I=", "commit": {"author": {"name": "Richard Cobbe", "email": "ricobbe@microsoft.com", "date": "2021-03-08T20:42:54Z"}, "committer": {"name": "Richard Cobbe", "email": "ricobbe@microsoft.com", "date": "2021-06-05T01:01:35Z"}, "message": "Add first cut of functionality for #58713: support for #[link(kind = \"raw-dylib\")].\n\nThis does not yet support #[link_name] attributes on functions, the #[link_ordinal]\nattribute, #[link(kind = \"raw-dylib\")] on extern blocks in bin crates, or\nstdcall functions on 32-bit x86.", "tree": {"sha": "05e4c4665f34ac3bd0713239586d1e9341e4dda6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05e4c4665f34ac3bd0713239586d1e9341e4dda6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6aa45b71b11823a3140736536a93c5eac11ceecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6aa45b71b11823a3140736536a93c5eac11ceecb", "html_url": "https://github.com/rust-lang/rust/commit/6aa45b71b11823a3140736536a93c5eac11ceecb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6aa45b71b11823a3140736536a93c5eac11ceecb/comments", "author": {"login": "ricobbe", "id": 30275542, "node_id": "MDQ6VXNlcjMwMjc1NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/30275542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricobbe", "html_url": "https://github.com/ricobbe", "followers_url": "https://api.github.com/users/ricobbe/followers", "following_url": "https://api.github.com/users/ricobbe/following{/other_user}", "gists_url": "https://api.github.com/users/ricobbe/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricobbe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricobbe/subscriptions", "organizations_url": "https://api.github.com/users/ricobbe/orgs", "repos_url": "https://api.github.com/users/ricobbe/repos", "events_url": "https://api.github.com/users/ricobbe/events{/privacy}", "received_events_url": "https://api.github.com/users/ricobbe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ricobbe", "id": 30275542, "node_id": "MDQ6VXNlcjMwMjc1NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/30275542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricobbe", "html_url": "https://github.com/ricobbe", "followers_url": "https://api.github.com/users/ricobbe/followers", "following_url": "https://api.github.com/users/ricobbe/following{/other_user}", "gists_url": "https://api.github.com/users/ricobbe/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricobbe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricobbe/subscriptions", "organizations_url": "https://api.github.com/users/ricobbe/orgs", "repos_url": "https://api.github.com/users/ricobbe/repos", "events_url": "https://api.github.com/users/ricobbe/events{/privacy}", "received_events_url": "https://api.github.com/users/ricobbe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c79419af0721c614d050f09b95f076da09d37b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c79419af0721c614d050f09b95f076da09d37b0d", "html_url": "https://github.com/rust-lang/rust/commit/c79419af0721c614d050f09b95f076da09d37b0d"}], "stats": {"total": 501, "additions": 481, "deletions": 20}, "files": [{"sha": "22897c43e7ef917cdc456010c9129d35aca97c1e", "filename": "compiler/rustc_codegen_cranelift/src/archive.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -254,6 +254,15 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             }\n         }\n     }\n+\n+    fn inject_dll_import_lib(\n+        &mut self,\n+        _lib_name: &str,\n+        _dll_imports: &[rustc_middle::middle::cstore::DllImport],\n+        _tmpdir: &rustc_data_structures::temp_dir::MaybeTempDir,\n+    ) {\n+        bug!(\"injecting dll imports is not supported\");\n+    }\n }\n \n impl<'a> ArArchiveBuilder<'a> {"}, {"sha": "64416bced31d024dcd8819dbeaa6f35e0f2cf8ad", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -8,9 +8,11 @@ use std::ptr;\n use std::str;\n \n use crate::llvm::archive_ro::{ArchiveRO, Child};\n-use crate::llvm::{self, ArchiveKind};\n+use crate::llvm::{self, ArchiveKind, LLVMMachineType, LLVMRustCOFFShortExport};\n use rustc_codegen_ssa::back::archive::{find_library, ArchiveBuilder};\n use rustc_codegen_ssa::{looks_like_rust_object_file, METADATA_FILENAME};\n+use rustc_data_structures::temp_dir::MaybeTempDir;\n+use rustc_middle::middle::cstore::DllImport;\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n \n@@ -61,6 +63,17 @@ fn archive_config<'a>(sess: &'a Session, output: &Path, input: Option<&Path>) ->\n     }\n }\n \n+/// Map machine type strings to values of LLVM's MachineTypes enum.\n+fn llvm_machine_type(cpu: &str) -> LLVMMachineType {\n+    match cpu {\n+        \"x86_64\" => LLVMMachineType::AMD64,\n+        \"x86\" => LLVMMachineType::I386,\n+        \"aarch64\" => LLVMMachineType::ARM64,\n+        \"arm\" => LLVMMachineType::ARM,\n+        _ => panic!(\"unsupported cpu type {}\", cpu),\n+    }\n+}\n+\n impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n     /// Creates a new static archive, ready for modifying the archive specified\n     /// by `config`.\n@@ -175,6 +188,74 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n             self.config.sess.fatal(&format!(\"failed to build archive: {}\", e));\n         }\n     }\n+\n+    fn inject_dll_import_lib(\n+        &mut self,\n+        lib_name: &str,\n+        dll_imports: &[DllImport],\n+        tmpdir: &MaybeTempDir,\n+    ) {\n+        let output_path = {\n+            let mut output_path: PathBuf = tmpdir.as_ref().to_path_buf();\n+            output_path.push(format!(\"{}_imports\", lib_name));\n+            output_path.with_extension(\"lib\")\n+        };\n+\n+        // we've checked for \\0 characters in the library name already\n+        let dll_name_z = CString::new(lib_name).unwrap();\n+        // All import names are Rust identifiers and therefore cannot contain \\0 characters.\n+        // FIXME: when support for #[link_name] implemented, ensure that import.name values don't\n+        // have any \\0 characters\n+        let import_name_vector: Vec<CString> = dll_imports\n+            .iter()\n+            .map(if self.config.sess.target.arch == \"x86\" {\n+                |import: &DllImport| CString::new(format!(\"_{}\", import.name.to_string())).unwrap()\n+            } else {\n+                |import: &DllImport| CString::new(import.name.to_string()).unwrap()\n+            })\n+            .collect();\n+\n+        let output_path_z = rustc_fs_util::path_to_c_string(&output_path);\n+\n+        tracing::trace!(\"invoking LLVMRustWriteImportLibrary\");\n+        tracing::trace!(\"  dll_name {:#?}\", dll_name_z);\n+        tracing::trace!(\"  output_path {}\", output_path.display());\n+        tracing::trace!(\n+            \"  import names: {}\",\n+            dll_imports.iter().map(|import| import.name.to_string()).collect::<Vec<_>>().join(\", \"),\n+        );\n+\n+        let ffi_exports: Vec<LLVMRustCOFFShortExport> = import_name_vector\n+            .iter()\n+            .map(|name_z| LLVMRustCOFFShortExport::from_name(name_z.as_ptr()))\n+            .collect();\n+        let result = unsafe {\n+            crate::llvm::LLVMRustWriteImportLibrary(\n+                dll_name_z.as_ptr(),\n+                output_path_z.as_ptr(),\n+                ffi_exports.as_ptr(),\n+                ffi_exports.len(),\n+                llvm_machine_type(&self.config.sess.target.arch) as u16,\n+                !self.config.sess.target.is_like_msvc,\n+            )\n+        };\n+\n+        if result == crate::llvm::LLVMRustResult::Failure {\n+            self.config.sess.fatal(&format!(\n+                \"Error creating import library for {}: {}\",\n+                lib_name,\n+                llvm::last_error().unwrap_or(\"unknown LLVM error\".to_string())\n+            ));\n+        }\n+\n+        self.add_archive(&output_path, |_| false).unwrap_or_else(|e| {\n+            self.config.sess.fatal(&format!(\n+                \"failed to add native library {}: {}\",\n+                output_path.display(),\n+                e\n+            ));\n+        });\n+    }\n }\n \n impl<'a> LlvmArchiveBuilder<'a> {"}, {"sha": "91923251018a898671319bc486f5b3e98f651f5e", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -29,6 +29,31 @@ pub enum LLVMRustResult {\n     Success,\n     Failure,\n }\n+\n+// Rust version of the C struct with the same name in rustc_llvm/llvm-wrapper/RustWrapper.cpp.\n+#[repr(C)]\n+pub struct LLVMRustCOFFShortExport {\n+    pub name: *const c_char,\n+}\n+\n+impl LLVMRustCOFFShortExport {\n+    pub fn from_name(name: *const c_char) -> LLVMRustCOFFShortExport {\n+        LLVMRustCOFFShortExport { name }\n+    }\n+}\n+\n+/// Translation of LLVM's MachineTypes enum, defined in llvm\\include\\llvm\\BinaryFormat\\COFF.h.\n+///\n+/// We include only architectures supported on Windows.\n+#[derive(Copy, Clone, PartialEq)]\n+#[repr(C)]\n+pub enum LLVMMachineType {\n+    AMD64 = 0x8664,\n+    I386 = 0x14c,\n+    ARM64 = 0xaa64,\n+    ARM = 0x01c0,\n+}\n+\n // Consts for the LLVM CallConv type, pre-cast to usize.\n \n /// LLVM CallingConv::ID. Should we wrap this?\n@@ -2265,6 +2290,15 @@ extern \"C\" {\n     ) -> &'a mut RustArchiveMember<'a>;\n     pub fn LLVMRustArchiveMemberFree(Member: &'a mut RustArchiveMember<'a>);\n \n+    pub fn LLVMRustWriteImportLibrary(\n+        ImportName: *const c_char,\n+        Path: *const c_char,\n+        Exports: *const LLVMRustCOFFShortExport,\n+        NumExports: usize,\n+        Machine: u16,\n+        MinGW: bool,\n+    ) -> LLVMRustResult;\n+\n     pub fn LLVMRustSetDataLayoutFromTargetMachine(M: &'a Module, TM: &'a TargetMachine);\n \n     pub fn LLVMRustBuildOperandBundleDef("}, {"sha": "63f457bb979e3ff693f0702c228ca693545a9553", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -1,3 +1,5 @@\n+use rustc_data_structures::temp_dir::MaybeTempDir;\n+use rustc_middle::middle::cstore::DllImport;\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n \n@@ -57,4 +59,11 @@ pub trait ArchiveBuilder<'a> {\n     fn update_symbols(&mut self);\n \n     fn build(self);\n+\n+    fn inject_dll_import_lib(\n+        &mut self,\n+        lib_name: &str,\n+        dll_imports: &[DllImport],\n+        tmpdir: &MaybeTempDir,\n+    );\n }"}, {"sha": "aeaf435e4c056ac52f9cbe4767f18b0b4cc987c5", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 61, "deletions": 6, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -1,9 +1,9 @@\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::Handler;\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n-use rustc_middle::middle::cstore::LibSource;\n+use rustc_middle::middle::cstore::{DllImport, LibSource};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest};\n@@ -34,6 +34,7 @@ use object::write::Object;\n use object::{Architecture, BinaryFormat, Endianness, FileFlags, SectionFlags, SectionKind};\n use tempfile::Builder as TempFileBuilder;\n \n+use std::cmp::Ordering;\n use std::ffi::OsString;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n@@ -343,6 +344,12 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n         }\n     }\n \n+    for (raw_dylib_name, raw_dylib_imports) in\n+        collate_raw_dylibs(&codegen_results.crate_info.used_libraries)\n+    {\n+        ab.inject_dll_import_lib(&raw_dylib_name, &raw_dylib_imports, tmpdir);\n+    }\n+\n     // After adding all files to the archive, we need to update the\n     // symbol table of the archive.\n     ab.update_symbols();\n@@ -524,6 +531,57 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n     }\n }\n \n+/// Extract all symbols defined in raw-dylib libraries, collated by library name.\n+///\n+/// If we have multiple extern blocks that specify symbols defined in the same raw-dylib library,\n+/// then the CodegenResults value contains one NativeLib instance for each block.  However, the\n+/// linker appears to expect only a single import library for each library used, so we need to\n+/// collate the symbols together by library name before generating the import libraries.\n+fn collate_raw_dylibs(used_libraries: &[NativeLib]) -> Vec<(String, Vec<DllImport>)> {\n+    let mut dylib_table: FxHashMap<String, FxHashSet<Symbol>> = FxHashMap::default();\n+\n+    for lib in used_libraries {\n+        if lib.kind == NativeLibKind::RawDylib {\n+            let name = lib.name.unwrap_or_else(||\n+                bug!(\"`link` attribute with kind = \\\"raw-dylib\\\" and no name should have caused error earlier\")\n+            );\n+            let name = if matches!(lib.verbatim, Some(true)) {\n+                name.to_string()\n+            } else {\n+                format!(\"{}.dll\", name)\n+            };\n+            dylib_table\n+                .entry(name)\n+                .or_default()\n+                .extend(lib.dll_imports.iter().map(|import| import.name));\n+        }\n+    }\n+\n+    // FIXME: when we add support for ordinals, fix this to propagate ordinals.  Also figure out\n+    // what we should do if we have two DllImport values with the same name but different\n+    // ordinals.\n+    let mut result = dylib_table\n+        .into_iter()\n+        .map(|(lib_name, imported_names)| {\n+            let mut names = imported_names\n+                .iter()\n+                .map(|name| DllImport { name: *name, ordinal: None })\n+                .collect::<Vec<_>>();\n+            names.sort_unstable_by(|a: &DllImport, b: &DllImport| {\n+                match a.name.as_str().cmp(&b.name.as_str()) {\n+                    Ordering::Equal => a.ordinal.cmp(&b.ordinal),\n+                    x => x,\n+                }\n+            });\n+            (lib_name, names)\n+        })\n+        .collect::<Vec<_>>();\n+    result.sort_unstable_by(|a: &(String, Vec<DllImport>), b: &(String, Vec<DllImport>)| {\n+        a.0.cmp(&b.0)\n+    });\n+    result\n+}\n+\n /// Create a static archive.\n ///\n /// This is essentially the same thing as an rlib, but it also involves adding all of the upstream\n@@ -2302,10 +2360,7 @@ fn add_upstream_native_libraries(\n                 // already included them when we included the rust library\n                 // previously\n                 NativeLibKind::Static { bundle: None | Some(true), .. } => {}\n-                NativeLibKind::RawDylib => {\n-                    // FIXME(#58713): Proper handling for raw dylibs.\n-                    bug!(\"raw_dylib feature not yet implemented\");\n-                }\n+                NativeLibKind::RawDylib => {}\n             }\n         }\n     }"}, {"sha": "48171ccd2fda40c871b7c95d454bc07902a2f642", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -110,11 +110,18 @@ pub struct NativeLib {\n     pub name: Option<Symbol>,\n     pub cfg: Option<ast::MetaItem>,\n     pub verbatim: Option<bool>,\n+    pub dll_imports: Vec<cstore::DllImport>,\n }\n \n impl From<&cstore::NativeLib> for NativeLib {\n     fn from(lib: &cstore::NativeLib) -> Self {\n-        NativeLib { kind: lib.kind, name: lib.name, cfg: lib.cfg.clone(), verbatim: lib.verbatim }\n+        NativeLib {\n+            kind: lib.kind,\n+            name: lib.name,\n+            cfg: lib.cfg.clone(),\n+            verbatim: lib.verbatim,\n+            dll_imports: lib.dll_imports.clone(),\n+        }\n     }\n }\n "}, {"sha": "9b757eb40c1840b64834fac51a76a36f58f1ed4e", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -6,6 +6,7 @@\n #include \"llvm/IR/Instructions.h\"\n #include \"llvm/IR/Intrinsics.h\"\n #include \"llvm/Object/Archive.h\"\n+#include \"llvm/Object/COFFImportFile.h\"\n #include \"llvm/Object/ObjectFile.h\"\n #include \"llvm/Bitcode/BitcodeWriterPass.h\"\n #include \"llvm/Support/Signals.h\"\n@@ -1722,3 +1723,54 @@ extern \"C\" LLVMValueRef\n LLVMRustBuildMaxNum(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS) {\n     return wrap(unwrap(B)->CreateMaxNum(unwrap(LHS),unwrap(RHS)));\n }\n+\n+// This struct contains all necessary info about a symbol exported from a DLL.\n+// At the moment, it's just the symbol's name, but we use a separate struct to\n+// make it easier to add other information like ordinal later.\n+struct LLVMRustCOFFShortExport {\n+  const char* name;\n+};\n+\n+// Machine must be a COFF machine type, as defined in PE specs.\n+extern \"C\" LLVMRustResult LLVMRustWriteImportLibrary(\n+  const char* ImportName,\n+  const char* Path,\n+  const LLVMRustCOFFShortExport* Exports,\n+  size_t NumExports,\n+  uint16_t Machine,\n+  bool MinGW)\n+{\n+  std::vector<llvm::object::COFFShortExport> ConvertedExports;\n+  ConvertedExports.reserve(NumExports);\n+\n+  for (size_t i = 0; i < NumExports; ++i) {\n+    ConvertedExports.push_back(llvm::object::COFFShortExport{\n+      Exports[i].name,  // Name\n+      std::string{},    // ExtName\n+      std::string{},    // SymbolName\n+      std::string{},    // AliasTarget\n+      0,                // Ordinal\n+      false,            // Noname\n+      false,            // Data\n+      false,            // Private\n+      false             // Constant\n+    });\n+  }\n+\n+  auto Error = llvm::object::writeImportLibrary(\n+    ImportName,\n+    Path,\n+    ConvertedExports,\n+    static_cast<llvm::COFF::MachineTypes>(Machine),\n+    MinGW);\n+  if (Error) {\n+    std::string errorString;\n+    llvm::raw_string_ostream stream(errorString);\n+    stream << Error;\n+    stream.flush();\n+    LLVMRustSetLastError(errorString.c_str());\n+    return LLVMRustResult::Failure;\n+  } else {\n+    return LLVMRustResult::Success;\n+  }\n+}"}, {"sha": "cd4c394ae14ecf752d1deba6ff36927be57ca8ab", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 61, "deletions": 11, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_middle::middle::cstore::NativeLib;\n+use rustc_middle::middle::cstore::{DllImport, NativeLib};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::parse::feature_err;\n use rustc_session::utils::NativeLibKind;\n@@ -33,8 +33,8 @@ struct Collector<'tcx> {\n \n impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n     fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n-        let abi = match it.kind {\n-            hir::ItemKind::ForeignMod { abi, .. } => abi,\n+        let (abi, foreign_mod_items) = match it.kind {\n+            hir::ItemKind::ForeignMod { abi, items } => (abi, items),\n             _ => return,\n         };\n \n@@ -57,6 +57,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                 foreign_module: Some(it.def_id.to_def_id()),\n                 wasm_import_module: None,\n                 verbatim: None,\n+                dll_imports: Vec::new(),\n             };\n             let mut kind_specified = false;\n \n@@ -196,6 +197,27 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                 .span_label(m.span, \"missing `name` argument\")\n                 .emit();\n             }\n+\n+            if lib.kind == NativeLibKind::RawDylib {\n+                match abi {\n+                    Abi::C { .. } => (),\n+                    Abi::Cdecl => (),\n+                    _ => {\n+                        if sess.target.arch == \"x86\" {\n+                            sess.span_fatal(\n+                                it.span,\n+                                r#\"`#[link(kind = \"raw-dylib\")]` only supports C and Cdecl ABIs\"#,\n+                            );\n+                        }\n+                    }\n+                };\n+                lib.dll_imports.extend(\n+                    foreign_mod_items\n+                        .iter()\n+                        .map(|child_item| DllImport { name: child_item.ident.name, ordinal: None }),\n+                );\n+            }\n+\n             self.register_native_lib(Some(m.span), lib);\n         }\n     }\n@@ -253,15 +275,42 @@ impl Collector<'tcx> {\n             )\n             .emit();\n         }\n-        if lib.kind == NativeLibKind::RawDylib && !self.tcx.features().raw_dylib {\n-            feature_err(\n-                &self.tcx.sess.parse_sess,\n-                sym::raw_dylib,\n-                span.unwrap_or(rustc_span::DUMMY_SP),\n-                \"kind=\\\"raw-dylib\\\" is unstable\",\n-            )\n-            .emit();\n+        // this just unwraps lib.name; we already established that it isn't empty above.\n+        if let (NativeLibKind::RawDylib, Some(lib_name)) = (lib.kind, lib.name) {\n+            let span = match span {\n+                Some(s) => s,\n+                None => {\n+                    bug!(\"raw-dylib libraries are not supported on the command line\");\n+                }\n+            };\n+\n+            if !self.tcx.sess.target.options.is_like_windows {\n+                self.tcx.sess.span_fatal(\n+                    span,\n+                    \"`#[link(...)]` with `kind = \\\"raw-dylib\\\"` only supported on Windows\",\n+                );\n+            } else if !self.tcx.sess.target.options.is_like_msvc {\n+                self.tcx.sess.span_warn(\n+                    span,\n+                    \"`#[link(...)]` with `kind = \\\"raw-dylib\\\"` not supported on windows-gnu\",\n+                );\n+            }\n+\n+            if lib_name.as_str().contains('\\0') {\n+                self.tcx.sess.span_err(span, \"library name may not contain NUL characters\");\n+            }\n+\n+            if !self.tcx.features().raw_dylib {\n+                feature_err(\n+                    &self.tcx.sess.parse_sess,\n+                    sym::raw_dylib,\n+                    span,\n+                    \"kind=\\\"raw-dylib\\\" is unstable\",\n+                )\n+                .emit();\n+            }\n         }\n+\n         self.libs.push(lib);\n     }\n \n@@ -337,6 +386,7 @@ impl Collector<'tcx> {\n                     foreign_module: None,\n                     wasm_import_module: None,\n                     verbatim: passed_lib.verbatim,\n+                    dll_imports: Vec::new(),\n                 };\n                 self.register_native_lib(None, lib);\n             } else {"}, {"sha": "df578708931fc724f3110cf0c9f0759c979e3b4f", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -95,6 +95,13 @@ pub struct NativeLib {\n     pub foreign_module: Option<DefId>,\n     pub wasm_import_module: Option<Symbol>,\n     pub verbatim: Option<bool>,\n+    pub dll_imports: Vec<DllImport>,\n+}\n+\n+#[derive(Clone, Debug, Encodable, Decodable, HashStable)]\n+pub struct DllImport {\n+    pub name: Symbol,\n+    pub ordinal: Option<u16>,\n }\n \n #[derive(Clone, TyEncodable, TyDecodable, HashStable, Debug)]"}, {"sha": "7ce46fd93318bbf80036091d56a461fde18dda9e", "filename": "src/test/run-make/raw-dylib/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Frun-make%2Fraw-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Frun-make%2Fraw-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib%2FMakefile?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -0,0 +1,21 @@\n+# Test the behavior of #[link(.., kind = \"raw-dylib\")] on windows-msvc\n+\n+# only-windows\n+# only-msvc\n+\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(call COMPILE_OBJ,\"$(TMPDIR)\"/extern_1.obj,extern_1.c)\n+\t$(call COMPILE_OBJ,\"$(TMPDIR)\"/extern_2.obj,extern_2.c)\n+\t$(CC) \"$(TMPDIR)\"/extern_1.obj -link -dll -out:\"$(TMPDIR)\"/extern_1.dll\n+\t$(CC) \"$(TMPDIR)\"/extern_2.obj -link -dll -out:\"$(TMPDIR)\"/extern_2.dll\n+\t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n+\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n+\t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/output.txt\n+\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/output.txt output.txt\n+else\n+\t$(DIFF) output.txt \"$(TMPDIR)\"/output.txt\n+endif"}, {"sha": "4059ede11fc96ec7363aefdc0209442030390d80", "filename": "src/test/run-make/raw-dylib/driver.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Frun-make%2Fraw-dylib%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Frun-make%2Fraw-dylib%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib%2Fdriver.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -0,0 +1,5 @@\n+extern crate raw_dylib_test;\n+\n+fn main() {\n+    raw_dylib_test::library_function();\n+}"}, {"sha": "72737c086ebe292b9622bd778f4dd0c91f448f7a", "filename": "src/test/run-make/raw-dylib/extern_1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Frun-make%2Fraw-dylib%2Fextern_1.c", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Frun-make%2Fraw-dylib%2Fextern_1.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib%2Fextern_1.c?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -0,0 +1,16 @@\n+#include <stdio.h>\n+\n+__declspec(dllexport) void extern_fn_1() {\n+    printf(\"extern_fn_1\\n\");\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void extern_fn_2() {\n+    printf(\"extern_fn_2; didn't get the rename\\n\");\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void extern_fn_with_long_name() {\n+    printf(\"extern_fn_with_long_name; got the rename\\n\");\n+    fflush(stdout);\n+}"}, {"sha": "ae87fc3f8218b41730b9b9463fc2444bc3cec388", "filename": "src/test/run-make/raw-dylib/extern_2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Frun-make%2Fraw-dylib%2Fextern_2.c", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Frun-make%2Fraw-dylib%2Fextern_2.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib%2Fextern_2.c?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -0,0 +1,6 @@\n+#include <stdio.h>\n+\n+__declspec(dllexport) void extern_fn_3() {\n+    printf(\"extern_fn_3\\n\");\n+    fflush(stdout);\n+}"}, {"sha": "d8e6301f38eb815fcce7ec7d78e169acc40713a4", "filename": "src/test/run-make/raw-dylib/lib.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Frun-make%2Fraw-dylib%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Frun-make%2Fraw-dylib%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib%2Flib.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -0,0 +1,22 @@\n+#![feature(raw_dylib, native_link_modifiers, native_link_modifiers_verbatim)]\n+\n+#[link(name = \"extern_1.dll\", kind = \"raw-dylib\", modifiers = \"+verbatim\")]\n+extern {\n+    fn extern_fn_1();\n+}\n+\n+#[link(name = \"extern_2\", kind = \"raw-dylib\")]\n+extern {\n+    fn extern_fn_3();\n+}\n+\n+pub fn library_function() {\n+    #[link(name = \"extern_1\", kind = \"raw-dylib\")]\n+    extern { fn extern_fn_2(); }\n+\n+    unsafe {\n+        extern_fn_1();\n+        extern_fn_2();\n+        extern_fn_3();\n+    }\n+}"}, {"sha": "7800cba18729023478fbc5c90c98e5bd079963bb", "filename": "src/test/run-make/raw-dylib/output.txt", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Frun-make%2Fraw-dylib%2Foutput.txt", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Frun-make%2Fraw-dylib%2Foutput.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib%2Foutput.txt?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -0,0 +1,3 @@\n+extern_fn_1\n+extern_fn_2; didn't get the rename\n+extern_fn_3"}, {"sha": "518aa20dd68ceefc4ae314f044eac8a496ee9d5f", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "previous_filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib-2.rs"}, {"sha": "dbee5f316b0a9559b13f3eb309744f89d184f013", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-2.stderr?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "previous_filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib-2.stderr"}, {"sha": "33f9c5393135f237370b5ccd5f3fc90af06e4251", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-windows-gnu.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -0,0 +1,8 @@\n+// gate-test-raw_dylib\n+// only-windows-gnu\n+#[link(name = \"foo\", kind = \"raw-dylib\")]\n+//~^ ERROR: kind=\"raw-dylib\" is unstable\n+//~| WARNING: `#[link(...)]` with `kind = \"raw-dylib\"` not supported on windows-gnu\n+extern \"C\" {}\n+\n+fn main() {}"}, {"sha": "14dfadf4126f3d105a52f230bdb5b6f8d012957e", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-windows-gnu.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.stderr?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -0,0 +1,18 @@\n+warning: `#[link(...)]` with `kind = \"raw-dylib\"` not supported on windows-gnu\n+  --> $DIR/feature-gate-raw-dylib-windows-gnu.rs:3:1\n+   |\n+LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0658]: kind=\"raw-dylib\" is unstable\n+  --> $DIR/feature-gate-raw-dylib-windows-gnu.rs:3:1\n+   |\n+LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+   = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "49de24ea9ab429fcaeeba1c8fd3bead6120a76df", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-windows-msvc.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-msvc.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -1,3 +1,5 @@\n+// gate-test-raw_dylib\n+// only-windows-msvc\n #[link(name = \"foo\", kind = \"raw-dylib\")]\n //~^ ERROR: kind=\"raw-dylib\" is unstable\n extern \"C\" {}", "previous_filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib.rs"}, {"sha": "1198808081213da27071664fc6a61cbe5bb1dafc", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-windows-msvc.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-msvc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-msvc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-msvc.stderr?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: kind=\"raw-dylib\" is unstable\n-  --> $DIR/feature-gate-raw-dylib.rs:1:1\n+  --> $DIR/feature-gate-raw-dylib-windows-msvc.rs:3:1\n    |\n LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/rfc-2627-raw-dylib/feature-gate-raw-dylib.stderr"}, {"sha": "34814db593f3dad97d48a5dfd51f39633f3459dc", "filename": "src/test/ui/manual/manual-link-unsupported-kind.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-unsupported-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-unsupported-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-unsupported-kind.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags:-l raw-dylib=foo\n+// error-pattern: unknown library kind `raw-dylib`, expected one of dylib, framework, or static\n+\n+fn main() {\n+}"}, {"sha": "acb4463cb04a7eb0e36b39d601bf091d13bb11c6", "filename": "src/test/ui/manual/manual-link-unsupported-kind.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-unsupported-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-unsupported-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmanual%2Fmanual-link-unsupported-kind.stderr?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -0,0 +1,2 @@\n+error: unknown library kind `raw-dylib`, expected one of dylib, framework, or static\n+"}, {"sha": "e9690f03f45c9832081b99968ce475b43ca01908", "filename": "src/test/ui/rfc-2627-raw-dylib/raw-dylib-msvc-only.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -0,0 +1,8 @@\n+// only-windows-gnu\n+// check-pass\n+// compile-flags: --crate-type lib\n+#![feature(raw_dylib)]\n+//~^ WARNING: the feature `raw_dylib` is incomplete\n+#[link(name = \"foo\", kind = \"raw-dylib\")]\n+//~^ WARNING: `#[link(...)]` with `kind = \"raw-dylib\"` not supported on windows-gnu\n+extern \"C\" {}"}, {"sha": "6e24112b3c3e50857f11cd109f57da7312f71415", "filename": "src/test/ui/rfc-2627-raw-dylib/raw-dylib-msvc-only.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.stderr?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/raw-dylib-msvc-only.rs:4:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+warning: `#[link(...)]` with `kind = \"raw-dylib\"` not supported on windows-gnu\n+  --> $DIR/raw-dylib-msvc-only.rs:6:1\n+   |\n+LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "7a5d7ac293483f91ea7541f50390865a5a7cb208", "filename": "src/test/ui/rfc-2627-raw-dylib/raw-dylib-windows-only.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.rs?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -0,0 +1,7 @@\n+// ignore-windows\n+// compile-flags: --crate-type lib\n+#![feature(raw_dylib)]\n+//~^ WARNING: the feature `raw_dylib` is incomplete\n+#[link(name = \"foo\", kind = \"raw-dylib\")]\n+//~^ ERROR: `#[link(...)]` with `kind = \"raw-dylib\"` only supported on Windows\n+extern \"C\" {}"}, {"sha": "f3879b63f91f7f0841989c7df933d739606c8730", "filename": "src/test/ui/rfc-2627-raw-dylib/raw-dylib-windows-only.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6aa45b71b11823a3140736536a93c5eac11ceecb/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-windows-only.stderr?ref=6aa45b71b11823a3140736536a93c5eac11ceecb", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/raw-dylib-windows-only.rs:3:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: `#[link(...)]` with `kind = \"raw-dylib\"` only supported on Windows\n+  --> $DIR/raw-dylib-windows-only.rs:5:1\n+   |\n+LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}