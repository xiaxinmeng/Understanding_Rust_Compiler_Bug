{"sha": "5547105f6b030c3cfb42850213d0ad94726937a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NDcxMDVmNmIwMzBjM2NmYjQyODUwMjEzZDBhZDk0NzI2OTM3YTg=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-12-22T11:21:34Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-01-24T20:28:29Z"}, "message": "Don't expose `Usefulness` in the api", "tree": {"sha": "eb9cc72bc2d6068396fc5174acd9652c83146e3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb9cc72bc2d6068396fc5174acd9652c83146e3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5547105f6b030c3cfb42850213d0ad94726937a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5547105f6b030c3cfb42850213d0ad94726937a8", "html_url": "https://github.com/rust-lang/rust/commit/5547105f6b030c3cfb42850213d0ad94726937a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5547105f6b030c3cfb42850213d0ad94726937a8/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a4c135a2f3b4a79319bb21405ebd166b1f38a29", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a4c135a2f3b4a79319bb21405ebd166b1f38a29", "html_url": "https://github.com/rust-lang/rust/commit/3a4c135a2f3b4a79319bb21405ebd166b1f38a29"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "47456f469f10491959c5c07f736d6bdd386de14e", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5547105f6b030c3cfb42850213d0ad94726937a8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5547105f6b030c3cfb42850213d0ad94726937a8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=5547105f6b030c3cfb42850213d0ad94726937a8", "patch": "@@ -1,6 +1,6 @@\n-use super::usefulness::Usefulness::*;\n use super::usefulness::{\n-    compute_match_usefulness, expand_pattern, MatchArm, MatchCheckCtxt, UsefulnessReport,\n+    compute_match_usefulness, expand_pattern, MatchArm, MatchCheckCtxt, Reachability,\n+    UsefulnessReport,\n };\n use super::{PatCtxt, PatKind, PatternError};\n \n@@ -398,10 +398,11 @@ fn report_arm_reachability<'p, 'tcx>(\n     report: &UsefulnessReport<'p, 'tcx>,\n     source: hir::MatchSource,\n ) {\n+    use Reachability::*;\n     let mut catchall = None;\n     for (arm_index, (arm, is_useful)) in report.arm_usefulness.iter().enumerate() {\n         match is_useful {\n-            NotUseful => {\n+            Unreachable => {\n                 match source {\n                     hir::MatchSource::WhileDesugar => bug!(),\n \n@@ -430,17 +431,16 @@ fn report_arm_reachability<'p, 'tcx>(\n                     hir::MatchSource::AwaitDesugar | hir::MatchSource::TryDesugar => {}\n                 }\n             }\n-            Useful(unreachables) if unreachables.is_empty() => {}\n+            Reachable(unreachables) if unreachables.is_empty() => {}\n             // The arm is reachable, but contains unreachable subpatterns (from or-patterns).\n-            Useful(unreachables) => {\n+            Reachable(unreachables) => {\n                 let mut unreachables: Vec<_> = unreachables.iter().collect();\n                 // Emit lints in the order in which they occur in the file.\n                 unreachables.sort_unstable();\n                 for span in unreachables {\n                     unreachable_pattern(cx.tcx, span, arm.hir_id, None);\n                 }\n             }\n-            UsefulWithWitness(_) => bug!(),\n         }\n         if !arm.has_guard && catchall.is_none() && pat_is_catchall(arm.pat) {\n             catchall = Some(arm.pat.span);"}, {"sha": "d8195eee4b817fcf31faacfb09d6ac42bb6cade1", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5547105f6b030c3cfb42850213d0ad94726937a8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5547105f6b030c3cfb42850213d0ad94726937a8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=5547105f6b030c3cfb42850213d0ad94726937a8", "patch": "@@ -679,7 +679,7 @@ impl SpanSet {\n }\n \n #[derive(Clone, Debug)]\n-crate enum Usefulness<'tcx> {\n+enum Usefulness<'tcx> {\n     /// Pontentially carries a set of sub-branches that have been found to be unreachable. Used\n     /// only in the presence of or-patterns, otherwise it stays empty.\n     Useful(SpanSet),\n@@ -1024,10 +1024,18 @@ crate struct MatchArm<'p, 'tcx> {\n     crate has_guard: bool,\n }\n \n+#[derive(Clone, Debug)]\n+crate enum Reachability {\n+    /// Potentially carries a set of sub-branches that have been found to be unreachable. Used only\n+    /// in the presence of or-patterns, otherwise it stays empty.\n+    Reachable(SpanSet),\n+    Unreachable,\n+}\n+\n /// The output of checking a match for exhaustiveness and arm reachability.\n crate struct UsefulnessReport<'p, 'tcx> {\n     /// For each arm of the input, whether that arm is reachable after the arms above it.\n-    crate arm_usefulness: Vec<(MatchArm<'p, 'tcx>, Usefulness<'tcx>)>,\n+    crate arm_usefulness: Vec<(MatchArm<'p, 'tcx>, Reachability)>,\n     /// If the match is exhaustive, this is empty. If not, this contains witnesses for the lack of\n     /// exhaustiveness.\n     crate non_exhaustiveness_witnesses: Vec<super::Pat<'tcx>>,\n@@ -1055,7 +1063,12 @@ crate fn compute_match_usefulness<'p, 'tcx>(\n             if !arm.has_guard {\n                 matrix.push(v);\n             }\n-            (arm, usefulness)\n+            let reachability = match usefulness {\n+                Useful(spans) => Reachability::Reachable(spans),\n+                NotUseful => Reachability::Unreachable,\n+                UsefulWithWitness(..) => bug!(),\n+            };\n+            (arm, reachability)\n         })\n         .collect();\n "}]}