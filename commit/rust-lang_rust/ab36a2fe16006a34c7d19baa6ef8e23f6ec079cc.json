{"sha": "ab36a2fe16006a34c7d19baa6ef8e23f6ec079cc", "node_id": "C_kwDOAAsO6NoAKGFiMzZhMmZlMTYwMDZhMzRjN2QxOWJhYTZlZjhlMjNmNmVjMDc5Y2M", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-19T18:34:01Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-20T03:44:12Z"}, "message": "Revert \"Unify tcx.constness and param env constness checks\"\n\nThis reverts commit bef8681a1837790f2745c1f6a7f8214af2fd7f5d.\nThis reverts commit c646c4d403d8c88cd3450f859fbdc34ec26d5bb5.", "tree": {"sha": "76f3e8a0bc1fcf7d43221945759362eebe660b2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76f3e8a0bc1fcf7d43221945759362eebe660b2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab36a2fe16006a34c7d19baa6ef8e23f6ec079cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab36a2fe16006a34c7d19baa6ef8e23f6ec079cc", "html_url": "https://github.com/rust-lang/rust/commit/ab36a2fe16006a34c7d19baa6ef8e23f6ec079cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab36a2fe16006a34c7d19baa6ef8e23f6ec079cc/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb9467515b5a9b15aaa905683c6b4dd9e851056c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb9467515b5a9b15aaa905683c6b4dd9e851056c", "html_url": "https://github.com/rust-lang/rust/commit/cb9467515b5a9b15aaa905683c6b4dd9e851056c"}], "stats": {"total": 197, "additions": 99, "deletions": 98}, "files": [{"sha": "f1674d04f8d15f16be1f3011eaead81daad003e7", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 16, "deletions": 56, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ab36a2fe16006a34c7d19baa6ef8e23f6ec079cc/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab36a2fe16006a34c7d19baa6ef8e23f6ec079cc/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=ab36a2fe16006a34c7d19baa6ef8e23f6ec079cc", "patch": "@@ -25,10 +25,12 @@ pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n /// report whether said intrinsic has a `rustc_const_{un,}stable` attribute. Otherwise, return\n /// `Constness::NotConst`.\n fn constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-    match tcx.hir().get(hir_id) {\n-        hir::Node::Ctor(_) => hir::Constness::Const,\n+    let def_id = def_id.expect_local();\n+    let node = tcx.hir().get_by_def_id(def_id);\n \n+    match node {\n+        hir::Node::Ctor(_) => hir::Constness::Const,\n+        hir::Node::Item(hir::Item { kind: hir::ItemKind::Impl(impl_), .. }) => impl_.constness,\n         hir::Node::ForeignItem(hir::ForeignItem { kind: hir::ForeignItemKind::Fn(..), .. }) => {\n             // Intrinsics use `rustc_const_{un,}stable` attributes to indicate constness. All other\n             // foreign items cannot be evaluated at compile-time.\n@@ -39,62 +41,20 @@ fn constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n             };\n             if is_const { hir::Constness::Const } else { hir::Constness::NotConst }\n         }\n+        _ => {\n+            if let Some(fn_kind) = node.fn_kind() {\n+                if fn_kind.constness() == hir::Constness::Const {\n+                    return hir::Constness::Const;\n+                }\n \n-        hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Fn(..), .. })\n-            if tcx.is_const_default_method(def_id) =>\n-        {\n-            hir::Constness::Const\n-        }\n-\n-        hir::Node::Item(hir::Item { kind: hir::ItemKind::Const(..), .. })\n-        | hir::Node::Item(hir::Item { kind: hir::ItemKind::Static(..), .. })\n-        | hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Const(..), .. })\n-        | hir::Node::AnonConst(_)\n-        | hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(..), .. })\n-        | hir::Node::ImplItem(hir::ImplItem {\n-            kind:\n-                hir::ImplItemKind::Fn(\n-                    hir::FnSig {\n-                        header: hir::FnHeader { constness: hir::Constness::Const, .. },\n-                        ..\n-                    },\n-                    ..,\n-                ),\n-            ..\n-        }) => hir::Constness::Const,\n-\n-        hir::Node::ImplItem(hir::ImplItem {\n-            kind: hir::ImplItemKind::Type(..) | hir::ImplItemKind::Fn(..),\n-            ..\n-        }) => {\n-            let parent_hir_id = tcx.hir().get_parent_node(hir_id);\n-            match tcx.hir().get(parent_hir_id) {\n-                hir::Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n-                    ..\n-                }) => *constness,\n-                _ => span_bug!(\n-                    tcx.def_span(parent_hir_id.owner),\n-                    \"impl item's parent node is not an impl\",\n-                ),\n+                // If the function itself is not annotated with `const`, it may still be a `const fn`\n+                // if it resides in a const trait impl.\n+                let is_const = is_parent_const_impl_raw(tcx, def_id);\n+                if is_const { hir::Constness::Const } else { hir::Constness::NotConst }\n+            } else {\n+                hir::Constness::NotConst\n             }\n         }\n-\n-        hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::Fn(hir::FnSig { header: hir::FnHeader { constness, .. }, .. }, ..),\n-            ..\n-        })\n-        | hir::Node::TraitItem(hir::TraitItem {\n-            kind:\n-                hir::TraitItemKind::Fn(hir::FnSig { header: hir::FnHeader { constness, .. }, .. }, ..),\n-            ..\n-        })\n-        | hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n-            ..\n-        }) => *constness,\n-\n-        _ => hir::Constness::NotConst,\n     }\n }\n "}, {"sha": "3fc10197b91292fcf8f18317097df179b917fc68", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 15, "deletions": 41, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ab36a2fe16006a34c7d19baa6ef8e23f6ec079cc/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab36a2fe16006a34c7d19baa6ef8e23f6ec079cc/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ab36a2fe16006a34c7d19baa6ef8e23f6ec079cc", "patch": "@@ -1059,43 +1059,6 @@ fn should_encode_const(def_kind: DefKind) -> bool {\n     }\n }\n \n-fn should_encode_constness(def_kind: DefKind) -> bool {\n-    match def_kind {\n-        DefKind::Struct\n-        | DefKind::Union\n-        | DefKind::Enum\n-        | DefKind::Trait\n-        | DefKind::AssocTy\n-        | DefKind::Fn\n-        | DefKind::Const\n-        | DefKind::Static(..)\n-        | DefKind::Ctor(..)\n-        | DefKind::AssocFn\n-        | DefKind::AssocConst\n-        | DefKind::AnonConst\n-        | DefKind::InlineConst\n-        | DefKind::OpaqueTy\n-        | DefKind::ImplTraitPlaceholder\n-        | DefKind::Impl\n-        | DefKind::Closure\n-        | DefKind::Generator\n-        | DefKind::TyAlias => true,\n-        DefKind::Variant\n-        | DefKind::TraitAlias\n-        | DefKind::ForeignTy\n-        | DefKind::Field\n-        | DefKind::TyParam\n-        | DefKind::Mod\n-        | DefKind::ForeignMod\n-        | DefKind::ConstParam\n-        | DefKind::Macro(..)\n-        | DefKind::Use\n-        | DefKind::LifetimeParam\n-        | DefKind::GlobalAsm\n-        | DefKind::ExternCrate => false,\n-    }\n-}\n-\n fn should_encode_trait_impl_trait_tys<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n     if tcx.def_kind(def_id) != DefKind::AssocFn {\n         return false;\n@@ -1202,9 +1165,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             {\n                 record!(self.tables.trait_impl_trait_tys[def_id] <- table);\n             }\n-            if should_encode_constness(def_kind) {\n-                self.tables.constness.set(def_id.index, tcx.constness(def_id));\n-            }\n         }\n         let inherent_impls = tcx.crate_inherent_impls(());\n         for (def_id, implementations) in inherent_impls.inherent_impls.iter() {\n@@ -1232,6 +1192,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.variant_data[def_id] <- data);\n+        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         record_array!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {\n             assert!(f.did.is_local());\n             f.did.index\n@@ -1259,6 +1220,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.variant_data[def_id] <- data);\n+        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n@@ -1322,6 +1284,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         record!(self.tables.repr_options[def_id] <- adt_def.repr());\n         record!(self.tables.variant_data[def_id] <- data);\n+        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n@@ -1357,6 +1320,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     }\n                 };\n                 self.tables.asyncness.set(def_id.index, m_sig.header.asyncness);\n+                self.tables.constness.set(def_id.index, hir::Constness::NotConst);\n             }\n             ty::AssocKind::Type => {\n                 self.encode_explicit_item_bounds(def_id);\n@@ -1381,6 +1345,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind else { bug!() };\n                 self.tables.asyncness.set(def_id.index, sig.header.asyncness);\n                 record_array!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n+                // Can be inside `impl const Trait`, so using sig.header.constness is not reliable\n+                let constness = if self.tcx.is_const_fn_raw(def_id) {\n+                    hir::Constness::Const\n+                } else {\n+                    hir::Constness::NotConst\n+                };\n+                self.tables.constness.set(def_id.index, constness);\n             }\n             ty::AssocKind::Const | ty::AssocKind::Type => {}\n         }\n@@ -1503,6 +1474,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Fn(ref sig, .., body) => {\n                 self.tables.asyncness.set(def_id.index, sig.header.asyncness);\n                 record_array!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n+                self.tables.constness.set(def_id.index, sig.header.constness);\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n                 if macro_def.macro_rules {\n@@ -1523,6 +1495,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Struct(ref struct_def, _) => {\n                 let adt_def = self.tcx.adt_def(def_id);\n                 record!(self.tables.repr_options[def_id] <- adt_def.repr());\n+                self.tables.constness.set(def_id.index, hir::Constness::Const);\n \n                 // Encode def_ids for each field and method\n                 // for methods, write all the stuff get_trait_method\n@@ -1551,8 +1524,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n                 });\n             }\n-            hir::ItemKind::Impl(hir::Impl { defaultness, .. }) => {\n+            hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n                 self.tables.impl_defaultness.set(def_id.index, *defaultness);\n+                self.tables.constness.set(def_id.index, *constness);\n \n                 let trait_ref = self.tcx.impl_trait_ref(def_id);\n                 if let Some(trait_ref) = trait_ref {"}, {"sha": "cd9d229640571e08a65902f690fe860aab67ea0f", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ab36a2fe16006a34c7d19baa6ef8e23f6ec079cc/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab36a2fe16006a34c7d19baa6ef8e23f6ec079cc/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=ab36a2fe16006a34c7d19baa6ef8e23f6ec079cc", "patch": "@@ -137,10 +137,77 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     let local_did = def_id.as_local();\n     let hir_id = local_did.map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id));\n \n+    let constness = match hir_id {\n+        Some(hir_id) => match tcx.hir().get(hir_id) {\n+            hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Fn(..), .. })\n+                if tcx.is_const_default_method(def_id) =>\n+            {\n+                hir::Constness::Const\n+            }\n+\n+            hir::Node::Item(hir::Item { kind: hir::ItemKind::Const(..), .. })\n+            | hir::Node::Item(hir::Item { kind: hir::ItemKind::Static(..), .. })\n+            | hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Const(..), ..\n+            })\n+            | hir::Node::AnonConst(_)\n+            | hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(..), .. })\n+            | hir::Node::ImplItem(hir::ImplItem {\n+                kind:\n+                    hir::ImplItemKind::Fn(\n+                        hir::FnSig {\n+                            header: hir::FnHeader { constness: hir::Constness::Const, .. },\n+                            ..\n+                        },\n+                        ..,\n+                    ),\n+                ..\n+            }) => hir::Constness::Const,\n+\n+            hir::Node::ImplItem(hir::ImplItem {\n+                kind: hir::ImplItemKind::Type(..) | hir::ImplItemKind::Fn(..),\n+                ..\n+            }) => {\n+                let parent_hir_id = tcx.hir().get_parent_node(hir_id);\n+                match tcx.hir().get(parent_hir_id) {\n+                    hir::Node::Item(hir::Item {\n+                        kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n+                        ..\n+                    }) => *constness,\n+                    _ => span_bug!(\n+                        tcx.def_span(parent_hir_id.owner),\n+                        \"impl item's parent node is not an impl\",\n+                    ),\n+                }\n+            }\n+\n+            hir::Node::Item(hir::Item {\n+                kind:\n+                    hir::ItemKind::Fn(hir::FnSig { header: hir::FnHeader { constness, .. }, .. }, ..),\n+                ..\n+            })\n+            | hir::Node::TraitItem(hir::TraitItem {\n+                kind:\n+                    hir::TraitItemKind::Fn(\n+                        hir::FnSig { header: hir::FnHeader { constness, .. }, .. },\n+                        ..,\n+                    ),\n+                ..\n+            })\n+            | hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n+                ..\n+            }) => *constness,\n+\n+            _ => hir::Constness::NotConst,\n+        },\n+        None => hir::Constness::NotConst,\n+    };\n+\n     let unnormalized_env = ty::ParamEnv::new(\n         tcx.intern_predicates(&predicates),\n         traits::Reveal::UserFacing,\n-        tcx.constness(def_id),\n+        constness,\n     );\n \n     let body_id ="}]}