{"sha": "c2d46037fa6617408155dcba6251d7c4e123b4f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZDQ2MDM3ZmE2NjE3NDA4MTU1ZGNiYTYyNTFkN2M0ZTEyM2I0ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-24T20:58:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-24T20:58:12Z"}, "message": "Auto merge of #50984 - cramertj:unpin-changes, r=aturon\n\nUnpin changes\n\nr? @aturon\n\ncc @withoutboats, @RalfJung, @pythonesque, #49150", "tree": {"sha": "6e77f0ba80651beec17a80dfe7ca33923056e949", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e77f0ba80651beec17a80dfe7ca33923056e949"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2d46037fa6617408155dcba6251d7c4e123b4f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d46037fa6617408155dcba6251d7c4e123b4f5", "html_url": "https://github.com/rust-lang/rust/commit/c2d46037fa6617408155dcba6251d7c4e123b4f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2d46037fa6617408155dcba6251d7c4e123b4f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07465222ca9454d7c274908424a5e084710efd7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/07465222ca9454d7c274908424a5e084710efd7e", "html_url": "https://github.com/rust-lang/rust/commit/07465222ca9454d7c274908424a5e084710efd7e"}, {"sha": "15d2f965d83672dc8e7edc972ab256e587878332", "url": "https://api.github.com/repos/rust-lang/rust/commits/15d2f965d83672dc8e7edc972ab256e587878332", "html_url": "https://github.com/rust-lang/rust/commit/15d2f965d83672dc8e7edc972ab256e587878332"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "a83ce7f379fbc220063a3258b27be8ce112b58ee", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2d46037fa6617408155dcba6251d7c4e123b4f5/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d46037fa6617408155dcba6251d7c4e123b4f5/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=c2d46037fa6617408155dcba6251d7c4e123b4f5", "patch": "@@ -850,4 +850,4 @@ impl<T: ?Sized> fmt::Pointer for PinBox<T> {\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinBox<U>> for PinBox<T> {}\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n-unsafe impl<T: ?Sized> Unpin for PinBox<T> {}\n+impl<T: ?Sized> Unpin for PinBox<T> {}"}, {"sha": "2121bc4438056f09cd7ee29827c290b1627c2416", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2d46037fa6617408155dcba6251d7c4e123b4f5/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d46037fa6617408155dcba6251d7c4e123b4f5/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c2d46037fa6617408155dcba6251d7c4e123b4f5", "patch": "@@ -74,6 +74,7 @@\n #![deny(missing_debug_implementations)]\n \n #![feature(allow_internal_unstable)]\n+#![feature(arbitrary_self_types)]\n #![feature(asm)]\n #![feature(associated_type_defaults)]\n #![feature(attr_literals)]"}, {"sha": "77db165bcbde31ef9762d6569b86a104c7bc5900", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2d46037fa6617408155dcba6251d7c4e123b4f5/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d46037fa6617408155dcba6251d7c4e123b4f5/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=c2d46037fa6617408155dcba6251d7c4e123b4f5", "patch": "@@ -605,7 +605,17 @@ unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n ///\n /// [`PinMut`]: ../mem/struct.PinMut.html\n #[unstable(feature = \"pin\", issue = \"49150\")]\n-pub unsafe auto trait Unpin {}\n+pub auto trait Unpin {}\n+\n+/// A type which does not implement `Unpin`.\n+///\n+/// If a type contains a `Pinned`, it will not implement `Unpin` by default.\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+pub struct Pinned;\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl !Unpin for Pinned {}\n \n /// Implementations of `Copy` for primitive types.\n ///"}, {"sha": "059c099d66b5635db0ad6cf1d6d550863191b023", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2d46037fa6617408155dcba6251d7c4e123b4f5/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d46037fa6617408155dcba6251d7c4e123b4f5/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=c2d46037fa6617408155dcba6251d7c4e123b4f5", "patch": "@@ -1164,6 +1164,14 @@ impl<'a, T: ?Sized> PinMut<'a, T> {\n     {\n         PinMut { inner: f(this.inner) }\n     }\n+\n+    /// Assign a new value to the memory behind the pinned reference.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub fn set(this: PinMut<'a, T>, value: T)\n+        where T: Sized,\n+    {\n+        *this.inner = value;\n+    }\n }\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n@@ -1207,4 +1215,4 @@ impl<'a, T: ?Sized> fmt::Pointer for PinMut<'a, T> {\n impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinMut<'a, U>> for PinMut<'a, T> {}\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n-unsafe impl<'a, T: ?Sized> Unpin for PinMut<'a, T> {}\n+impl<'a, T: ?Sized> Unpin for PinMut<'a, T> {}"}, {"sha": "1e615042a6d88361257d1868fc05a5f4d2f631ab", "filename": "src/libcore/option.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2d46037fa6617408155dcba6251d7c4e123b4f5/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d46037fa6617408155dcba6251d7c4e123b4f5/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=c2d46037fa6617408155dcba6251d7c4e123b4f5", "patch": "@@ -147,6 +147,7 @@\n \n use iter::{FromIterator, FusedIterator, TrustedLen};\n use {mem, ops};\n+use mem::PinMut;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n // `Iterator`, which is one. The compiler assumes that the `next` method of\n@@ -269,6 +270,15 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Converts from `Option<T>` to `Option<PinMut<'_, T>>`\n+    #[inline]\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub fn as_pin_mut<'a>(self: PinMut<'a, Self>) -> Option<PinMut<'a, T>> {\n+        unsafe {\n+            PinMut::get_mut(self).as_mut().map(|x| PinMut::new_unchecked(x))\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Getting to contained values\n     /////////////////////////////////////////////////////////////////////////"}]}