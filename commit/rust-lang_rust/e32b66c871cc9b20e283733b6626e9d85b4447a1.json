{"sha": "e32b66c871cc9b20e283733b6626e9d85b4447a1", "node_id": "C_kwDOAAsO6NoAKGUzMmI2NmM4NzFjYzliMjBlMjgzNzMzYjY2MjZlOWQ4NWI0NDQ3YTE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-02T16:37:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-02T16:37:09Z"}, "message": "Auto merge of #8906 - rust-lang:copy-large-enum-variants, r=Jarcho\n\nremove `large_enum_variant` suggestion for `Copy` types\n\nReplaces the (erroneous) suggestion on `large_enum_variant` for `Copy` types by a note. This fixes #8894.\n\n---\n\nchangelog: none", "tree": {"sha": "e6e580e8bb1a1aaf845504d5fc7e78d9f55b90c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6e580e8bb1a1aaf845504d5fc7e78d9f55b90c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e32b66c871cc9b20e283733b6626e9d85b4447a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e32b66c871cc9b20e283733b6626e9d85b4447a1", "html_url": "https://github.com/rust-lang/rust/commit/e32b66c871cc9b20e283733b6626e9d85b4447a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e32b66c871cc9b20e283733b6626e9d85b4447a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9428e2e25e95009648b63fa142e85f643a6fbf2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9428e2e25e95009648b63fa142e85f643a6fbf2d", "html_url": "https://github.com/rust-lang/rust/commit/9428e2e25e95009648b63fa142e85f643a6fbf2d"}, {"sha": "756caf79e64598886551325dbf9ab7eccee03328", "url": "https://api.github.com/repos/rust-lang/rust/commits/756caf79e64598886551325dbf9ab7eccee03328", "html_url": "https://github.com/rust-lang/rust/commit/756caf79e64598886551325dbf9ab7eccee03328"}], "stats": {"total": 188, "additions": 156, "deletions": 32}, "files": [{"sha": "63ac092dfaf1230b0239da8f8dbdd89270673b2d", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 57, "deletions": 31, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e32b66c871cc9b20e283733b6626e9d85b4447a1/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32b66c871cc9b20e283733b6626e9d85b4447a1/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=e32b66c871cc9b20e283733b6626e9d85b4447a1", "patch": "@@ -1,12 +1,13 @@\n //! lint when there is a large size difference between variants on an enum\n \n-use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{diagnostics::span_lint_and_then, ty::is_copy};\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::layout::LayoutOf;\n+use rustc_middle::ty::{Adt, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n \n@@ -26,6 +27,15 @@ declare_clippy_lint! {\n     /// the overhead is negligible and the boxing is counter-productive. Always\n     /// measure the change this lint suggests.\n     ///\n+    /// For types that implement `Copy`, the suggestion to `Box` a variant's\n+    /// data would require removing the trait impl. The types can of course\n+    /// still be `Clone`, but that is worse ergonomically. Depending on the\n+    /// use case it may be possible to store the large data in an auxillary\n+    /// structure (e.g. Arena or ECS).\n+    ///\n+    /// The lint will ignore generic types if the layout depends on the\n+    /// generics, even if the size difference will be large anyway.\n+    ///\n     /// ### Example\n     /// ```rust\n     /// // Bad\n@@ -74,7 +84,7 @@ struct VariantInfo {\n impl_lint_pass!(LargeEnumVariant => [LARGE_ENUM_VARIANT]);\n \n impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n-    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &Item<'tcx>) {\n         if in_external_macro(cx.tcx.sess, item.span) {\n             return;\n         }\n@@ -132,41 +142,57 @@ impl<'tcx> LateLintPass<'tcx> for LargeEnumVariant {\n                         let fields = def.variants[variants_size[0].ind].data.fields();\n                         variants_size[0].fields_size.sort_by(|a, b| (a.size.cmp(&b.size)));\n                         let mut applicability = Applicability::MaybeIncorrect;\n-                        let sugg: Vec<(Span, String)> = variants_size[0]\n-                            .fields_size\n-                            .iter()\n-                            .rev()\n-                            .map_while(|val| {\n-                                if difference > self.maximum_size_difference_allowed {\n-                                    difference = difference.saturating_sub(val.size);\n-                                    Some((\n-                                        fields[val.ind].ty.span,\n-                                        format!(\n-                                            \"Box<{}>\",\n-                                            snippet_with_applicability(\n-                                                cx,\n-                                                fields[val.ind].ty.span,\n-                                                \"..\",\n-                                                &mut applicability\n-                                            )\n-                                            .into_owned()\n-                                        ),\n-                                    ))\n-                                } else {\n-                                    None\n-                                }\n-                            })\n-                            .collect();\n+                        if is_copy(cx, ty) || maybe_copy(cx, ty) {\n+                            diag.span_note(\n+                                item.ident.span,\n+                                \"boxing a variant would require the type no longer be `Copy`\",\n+                            );\n+                        } else {\n+                            let sugg: Vec<(Span, String)> = variants_size[0]\n+                                .fields_size\n+                                .iter()\n+                                .rev()\n+                                .map_while(|val| {\n+                                    if difference > self.maximum_size_difference_allowed {\n+                                        difference = difference.saturating_sub(val.size);\n+                                        Some((\n+                                            fields[val.ind].ty.span,\n+                                            format!(\n+                                                \"Box<{}>\",\n+                                                snippet_with_applicability(\n+                                                    cx,\n+                                                    fields[val.ind].ty.span,\n+                                                    \"..\",\n+                                                    &mut applicability\n+                                                )\n+                                                .into_owned()\n+                                            ),\n+                                        ))\n+                                    } else {\n+                                        None\n+                                    }\n+                                })\n+                                .collect();\n \n-                        if !sugg.is_empty() {\n-                            diag.multipart_suggestion(help_text, sugg, Applicability::MaybeIncorrect);\n-                            return;\n+                            if !sugg.is_empty() {\n+                                diag.multipart_suggestion(help_text, sugg, Applicability::MaybeIncorrect);\n+                                return;\n+                            }\n                         }\n-\n                         diag.span_help(def.variants[variants_size[0].ind].span, help_text);\n                     },\n                 );\n             }\n         }\n     }\n }\n+\n+fn maybe_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    if let Adt(_def, substs) = ty.kind()\n+        && substs.types().next().is_some()\n+        && let Some(copy_trait) = cx.tcx.lang_items().copy_trait()\n+    {\n+        return cx.tcx.non_blanket_impls_for_ty(copy_trait, ty).next().is_some();\n+    }\n+    false\n+}"}, {"sha": "23152a13322e82ab3b73d7bb4481db22cc1f9668", "filename": "tests/ui/large_enum_variant.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e32b66c871cc9b20e283733b6626e9d85b4447a1/tests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32b66c871cc9b20e283733b6626e9d85b4447a1/tests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.rs?ref=e32b66c871cc9b20e283733b6626e9d85b4447a1", "patch": "@@ -98,6 +98,38 @@ struct Struct2 {\n     a: [i32; 8000],\n }\n \n+#[derive(Copy, Clone)]\n+enum CopyableLargeEnum {\n+    A(bool),\n+    B([u128; 4000]),\n+}\n+\n+enum ManuallyCopyLargeEnum {\n+    A(bool),\n+    B([u128; 4000]),\n+}\n+\n+impl Clone for ManuallyCopyLargeEnum {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+impl Copy for ManuallyCopyLargeEnum {}\n+\n+enum SomeGenericPossiblyCopyEnum<T> {\n+    A(bool, std::marker::PhantomData<T>),\n+    B([u64; 4000]),\n+}\n+\n+impl<T: Copy> Clone for SomeGenericPossiblyCopyEnum<T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+impl<T: Copy> Copy for SomeGenericPossiblyCopyEnum<T> {}\n+\n fn main() {\n     large_enum_variant!();\n }"}, {"sha": "0248327262da0f63852ecfa684f6b38c058670f7", "filename": "tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e32b66c871cc9b20e283733b6626e9d85b4447a1/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e32b66c871cc9b20e283733b6626e9d85b4447a1/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=e32b66c871cc9b20e283733b6626e9d85b4447a1", "patch": "@@ -127,5 +127,71 @@ help: consider boxing the large fields to reduce the total size of the enum\n LL |     B(Box<Struct2>),\n    |       ~~~~~~~~~~~~\n \n-error: aborting due to 8 previous errors\n+error: large size difference between variants\n+  --> $DIR/large_enum_variant.rs:104:5\n+   |\n+LL |     B([u128; 4000]),\n+   |     ^^^^^^^^^^^^^^^ this variant is 64000 bytes\n+   |\n+note: and the second-largest variant is 1 bytes:\n+  --> $DIR/large_enum_variant.rs:103:5\n+   |\n+LL |     A(bool),\n+   |     ^^^^^^^\n+note: boxing a variant would require the type no longer be `Copy`\n+  --> $DIR/large_enum_variant.rs:102:6\n+   |\n+LL | enum CopyableLargeEnum {\n+   |      ^^^^^^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:104:5\n+   |\n+LL |     B([u128; 4000]),\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: large size difference between variants\n+  --> $DIR/large_enum_variant.rs:109:5\n+   |\n+LL |     B([u128; 4000]),\n+   |     ^^^^^^^^^^^^^^^ this variant is 64000 bytes\n+   |\n+note: and the second-largest variant is 1 bytes:\n+  --> $DIR/large_enum_variant.rs:108:5\n+   |\n+LL |     A(bool),\n+   |     ^^^^^^^\n+note: boxing a variant would require the type no longer be `Copy`\n+  --> $DIR/large_enum_variant.rs:107:6\n+   |\n+LL | enum ManuallyCopyLargeEnum {\n+   |      ^^^^^^^^^^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:109:5\n+   |\n+LL |     B([u128; 4000]),\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: large size difference between variants\n+  --> $DIR/large_enum_variant.rs:122:5\n+   |\n+LL |     B([u64; 4000]),\n+   |     ^^^^^^^^^^^^^^ this variant is 32000 bytes\n+   |\n+note: and the second-largest variant is 1 bytes:\n+  --> $DIR/large_enum_variant.rs:121:5\n+   |\n+LL |     A(bool, std::marker::PhantomData<T>),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: boxing a variant would require the type no longer be `Copy`\n+  --> $DIR/large_enum_variant.rs:120:6\n+   |\n+LL | enum SomeGenericPossiblyCopyEnum<T> {\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:122:5\n+   |\n+LL |     B([u64; 4000]),\n+   |     ^^^^^^^^^^^^^^\n+\n+error: aborting due to 11 previous errors\n "}]}