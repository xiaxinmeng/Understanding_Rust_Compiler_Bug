{"sha": "e0871ed318e2e6706f81c98cc348bcb99e78b4bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwODcxZWQzMThlMmU2NzA2ZjgxYzk4Y2MzNDhiY2I5OWU3OGI0YmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-19T21:24:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-22T14:04:47Z"}, "message": "record supplied sig of closure", "tree": {"sha": "c8ae46bf5ae053bef2c57beec30e917e1bf7ed6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8ae46bf5ae053bef2c57beec30e917e1bf7ed6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0871ed318e2e6706f81c98cc348bcb99e78b4bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0871ed318e2e6706f81c98cc348bcb99e78b4bf", "html_url": "https://github.com/rust-lang/rust/commit/e0871ed318e2e6706f81c98cc348bcb99e78b4bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0871ed318e2e6706f81c98cc348bcb99e78b4bf/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8f3d6dafcecd85941a04958cac38fe05573945e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f3d6dafcecd85941a04958cac38fe05573945e", "html_url": "https://github.com/rust-lang/rust/commit/a8f3d6dafcecd85941a04958cac38fe05573945e"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "3f4d187813d5d087185bf8a51a5cfa733bc99297", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e0871ed318e2e6706f81c98cc348bcb99e78b4bf/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0871ed318e2e6706f81c98cc348bcb99e78b4bf/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=e0871ed318e2e6706f81c98cc348bcb99e78b4bf", "patch": "@@ -377,7 +377,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     ) -> ClosureSignatures<'tcx> {\n         debug!(\"sig_of_closure_no_expectation()\");\n \n-        let bound_sig = self.supplied_sig_of_closure(decl);\n+        let bound_sig = self.supplied_sig_of_closure(expr_def_id, decl);\n \n         self.closure_sigs(expr_def_id, body, bound_sig)\n     }\n@@ -479,7 +479,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Along the way, it also writes out entries for types that the user\n         // wrote into our tables, which are then later used by the privacy\n         // check.\n-        match self.check_supplied_sig_against_expectation(decl, &closure_sigs) {\n+        match self.check_supplied_sig_against_expectation(expr_def_id, decl, &closure_sigs) {\n             Ok(infer_ok) => self.register_infer_ok_obligations(infer_ok),\n             Err(_) => return self.sig_of_closure_no_expectation(expr_def_id, decl, body),\n         }\n@@ -521,14 +521,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// strategy.\n     fn check_supplied_sig_against_expectation(\n         &self,\n+        expr_def_id: DefId,\n         decl: &hir::FnDecl,\n         expected_sigs: &ClosureSignatures<'tcx>,\n     ) -> InferResult<'tcx, ()> {\n         // Get the signature S that the user gave.\n         //\n         // (See comment on `sig_of_closure_with_expectation` for the\n         // meaning of these letters.)\n-        let supplied_sig = self.supplied_sig_of_closure(decl);\n+        let supplied_sig = self.supplied_sig_of_closure(expr_def_id, decl);\n \n         debug!(\n             \"check_supplied_sig_against_expectation: supplied_sig={:?}\",\n@@ -598,7 +599,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     /// If there is no expected signature, then we will convert the\n     /// types that the user gave into a signature.\n-    fn supplied_sig_of_closure(&self, decl: &hir::FnDecl) -> ty::PolyFnSig<'tcx> {\n+    ///\n+    /// Also, record this closure signature for later.\n+    fn supplied_sig_of_closure(\n+        &self,\n+        expr_def_id: DefId,\n+        decl: &hir::FnDecl,\n+    ) -> ty::PolyFnSig<'tcx> {\n         let astconv: &dyn AstConv = self;\n \n         // First, convert the types that the user supplied (if any).\n@@ -618,6 +625,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         debug!(\"supplied_sig_of_closure: result={:?}\", result);\n \n+        let c_result = self.inh.infcx.canonicalize_response(&result);\n+        self.tables.borrow_mut().user_provided_sigs.insert(\n+            expr_def_id,\n+            c_result,\n+        );\n+\n         result\n     }\n "}]}