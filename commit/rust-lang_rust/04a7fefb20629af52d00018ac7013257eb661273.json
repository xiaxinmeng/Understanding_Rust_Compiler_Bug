{"sha": "04a7fefb20629af52d00018ac7013257eb661273", "node_id": "C_kwDOAAsO6NoAKDA0YTdmZWZiMjA2MjlhZjUyZDAwMDE4YWM3MDEzMjU3ZWI2NjEyNzM", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-07-31T19:00:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-07-31T19:09:41Z"}, "message": "linker: Update some outdated comments", "tree": {"sha": "d0ac01d0a2812263ab48de243ddac33368c112c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ac01d0a2812263ab48de243ddac33368c112c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04a7fefb20629af52d00018ac7013257eb661273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04a7fefb20629af52d00018ac7013257eb661273", "html_url": "https://github.com/rust-lang/rust/commit/04a7fefb20629af52d00018ac7013257eb661273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04a7fefb20629af52d00018ac7013257eb661273/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3405e402faf413ef4633142225228c260a91dd9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3405e402faf413ef4633142225228c260a91dd9d", "html_url": "https://github.com/rust-lang/rust/commit/3405e402faf413ef4633142225228c260a91dd9d"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "8cd2ba548648ddfff0dc5ec27f93922a9ff63c16", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/04a7fefb20629af52d00018ac7013257eb661273/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a7fefb20629af52d00018ac7013257eb661273/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=04a7fefb20629af52d00018ac7013257eb661273", "patch": "@@ -1947,7 +1947,6 @@ fn linker_with_args<'a>(\n     // Upstream rust libraries are not supposed to depend on our local native\n     // libraries as that would violate the structure of the DAG, in that\n     // scenario they are required to link to them as well in a shared fashion.\n-    // (The current implementation still doesn't prevent it though, see the FIXME below.)\n     //\n     // Note that upstream rust libraries may contain native dependencies as\n     // well, but they also can't depend on what we just started to add to the\n@@ -1968,15 +1967,16 @@ fn linker_with_args<'a>(\n     // and move this option back to the top.\n     cmd.add_as_needed();\n \n-    // FIXME: Move this below to other native libraries\n-    // (or alternatively link all native libraries after their respective crates).\n-    // This change is somewhat breaking in practice due to local static libraries being linked\n-    // as whole-archive (#85144), so removing whole-archive may be a pre-requisite.\n+    // Local native libraries of all kinds.\n+    //\n+    // If `-Zlink-native-libraries=false` is set, then the assumption is that an\n+    // external build system already has the native dependencies defined, and it\n+    // will provide them to the linker itself.\n     if sess.opts.unstable_opts.link_native_libraries {\n         add_local_native_libraries(cmd, sess, codegen_results);\n     }\n \n-    // Upstream rust libraries and their non-bundled static libraries\n+    // Upstream rust libraries and their (possibly bundled) static native libraries.\n     add_upstream_rust_crates(\n         cmd,\n         sess,\n@@ -1986,11 +1986,11 @@ fn linker_with_args<'a>(\n         tmpdir,\n     );\n \n-    // Upstream dynamic native libraries linked with `#[link]` attributes at and `-l`\n-    // command line options.\n-    // If -Zlink-native-libraries=false is set, then the assumption is that an\n-    // external build system already has the native dependencies defined, and it\n-    // will provide them to the linker itself.\n+    // Dynamic native libraries from upstream crates.\n+    //\n+    // FIXME: Merge this to `add_upstream_rust_crates` so that all native libraries are linked\n+    // together with their respective upstream crates, and in their originally specified order.\n+    // This may be slightly breaking due to our use of `--as-needed` and needs a crater run.\n     if sess.opts.unstable_opts.link_native_libraries {\n         add_upstream_native_libraries(cmd, sess, codegen_results);\n     }\n@@ -2401,7 +2401,7 @@ fn add_upstream_rust_crates<'a>(\n                 // or is an rlib already included via some other dylib crate, the symbols from\n                 // native libs will have already been included in that dylib.\n                 //\n-                // If -Zlink-native-libraries=false is set, then the assumption is that an\n+                // If `-Zlink-native-libraries=false` is set, then the assumption is that an\n                 // external build system already has the native dependencies defined, and it\n                 // will provide them to the linker itself.\n                 if sess.opts.unstable_opts.link_native_libraries {"}, {"sha": "b92e146bee2af5a95b1461d7a7da35813be74971", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04a7fefb20629af52d00018ac7013257eb661273/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a7fefb20629af52d00018ac7013257eb661273/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=04a7fefb20629af52d00018ac7013257eb661273", "patch": "@@ -187,12 +187,12 @@ pub enum MetadataPosition {\n     Last,\n }\n \n-// For rlibs we \"pack\" rustc metadata into a dummy object file. When rustc\n-// creates a dylib crate type it will pass `--whole-archive` (or the\n-// platform equivalent) to include all object files from an rlib into the\n-// final dylib itself. This causes linkers to iterate and try to include all\n-// files located in an archive, so if metadata is stored in an archive then\n-// it needs to be of a form that the linker will be able to process.\n+// For rlibs we \"pack\" rustc metadata into a dummy object file.\n+//\n+// Historically it was needed because rustc linked rlibs as whole-archive in some cases.\n+// In that case linkers try to include all files located in an archive, so if metadata is stored\n+// in an archive then it needs to be of a form that the linker is able to process.\n+// Now it's not clear whether metadata still needs to be wrapped into an object file or not.\n //\n // Note, though, that we don't actually want this metadata to show up in any\n // final output of the compiler. Instead this is purely for rustc's own"}]}