{"sha": "7402519c6303000d49f67a57c96b6863c88a9163", "node_id": "C_kwDOAAsO6NoAKDc0MDI1MTljNjMwMzAwMGQ0OWY2N2E1N2M5NmI2ODYzYzg4YTkxNjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-31T18:04:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-31T18:04:12Z"}, "message": "Auto merge of #109010 - compiler-errors:rtn, r=eholk\n\nInitial support for return type notation (RTN)\n\nSee: https://smallcultfollowing.com/babysteps/blog/2023/02/13/return-type-notation-send-bounds-part-2/\n\n1. Only supports `T: Trait<method(): Send>` style bounds, not `<T as Trait>::method(): Send`. Checking validity and injecting an implicit binder for all of the late-bound method generics is harder to do for the latter.\n    * I'd add this in a follow-up.\n3. ~Doesn't support RTN in general type position, i.e. no `let x: <T as Trait>::method() = ...`~\n    * I don't think we actually want this.\n5. Doesn't add syntax for \"eliding\" the function args -- i.e. for now, we write `method(): Send` instead of `method(..): Send`.\n    * May be a hazard if we try to add it in the future. I'll probably add it in a follow-up later, with a structured suggestion to change `method()` to `method(..)` once we add it.\n7. ~I'm not in love with the feature gate name \ud83d\ude3a~\n    * I renamed it to `return_type_notation` :heavy_check_mark:\n\nFollow-up PRs will probably add support for `where T::method(): Send` bounds. I'm not sure if we ever want to support return-type-notation in arbitrary type positions. I may also make the bounds require `..` in the args list later.\n\nr? `@ghost`", "tree": {"sha": "d96f0a14a6c2dd6aeafe33278687acd12b6e2cca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d96f0a14a6c2dd6aeafe33278687acd12b6e2cca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7402519c6303000d49f67a57c96b6863c88a9163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7402519c6303000d49f67a57c96b6863c88a9163", "html_url": "https://github.com/rust-lang/rust/commit/7402519c6303000d49f67a57c96b6863c88a9163", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7402519c6303000d49f67a57c96b6863c88a9163/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "480068c2359ea65df4481788b5ce717a548ce171", "url": "https://api.github.com/repos/rust-lang/rust/commits/480068c2359ea65df4481788b5ce717a548ce171", "html_url": "https://github.com/rust-lang/rust/commit/480068c2359ea65df4481788b5ce717a548ce171"}, {"sha": "8b592db27afdc9edac084520bca98508da53c996", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b592db27afdc9edac084520bca98508da53c996", "html_url": "https://github.com/rust-lang/rust/commit/8b592db27afdc9edac084520bca98508da53c996"}], "stats": {"total": 1054, "additions": 880, "deletions": 174}, "files": [{"sha": "9b6bfaadef05a1ccd551fc5f8ff841de3aa292f0", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -167,6 +167,9 @@ pub enum GenericArgs {\n     AngleBracketed(AngleBracketedArgs),\n     /// The `(A, B)` and `C` in `Foo(A, B) -> C`.\n     Parenthesized(ParenthesizedArgs),\n+    /// Associated return type bounds, like `T: Trait<method(..): Send>`\n+    /// which applies the `Send` bound to the return-type of `method`.\n+    ReturnTypeNotation(Span),\n }\n \n impl GenericArgs {\n@@ -178,6 +181,7 @@ impl GenericArgs {\n         match self {\n             AngleBracketed(data) => data.span,\n             Parenthesized(data) => data.span,\n+            ReturnTypeNotation(span) => *span,\n         }\n     }\n }\n@@ -231,15 +235,15 @@ impl AngleBracketedArg {\n     }\n }\n \n-impl Into<Option<P<GenericArgs>>> for AngleBracketedArgs {\n-    fn into(self) -> Option<P<GenericArgs>> {\n-        Some(P(GenericArgs::AngleBracketed(self)))\n+impl Into<P<GenericArgs>> for AngleBracketedArgs {\n+    fn into(self) -> P<GenericArgs> {\n+        P(GenericArgs::AngleBracketed(self))\n     }\n }\n \n-impl Into<Option<P<GenericArgs>>> for ParenthesizedArgs {\n-    fn into(self) -> Option<P<GenericArgs>> {\n-        Some(P(GenericArgs::Parenthesized(self)))\n+impl Into<P<GenericArgs>> for ParenthesizedArgs {\n+    fn into(self) -> P<GenericArgs> {\n+        P(GenericArgs::Parenthesized(self))\n     }\n }\n "}, {"sha": "514978f5569a76fe48d3234c44fa384a5bc382de", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -561,6 +561,7 @@ pub fn noop_visit_generic_args<T: MutVisitor>(generic_args: &mut GenericArgs, vi\n     match generic_args {\n         GenericArgs::AngleBracketed(data) => vis.visit_angle_bracketed_parameter_data(data),\n         GenericArgs::Parenthesized(data) => vis.visit_parenthesized_parameter_data(data),\n+        GenericArgs::ReturnTypeNotation(_span) => {}\n     }\n }\n "}, {"sha": "e5a0ad1f1e48186e5aaf553aece374d60ee18767", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -481,6 +481,7 @@ where\n             walk_list!(visitor, visit_ty, &data.inputs);\n             walk_fn_ret_ty(visitor, &data.output);\n         }\n+        GenericArgs::ReturnTypeNotation(_span) => {}\n     }\n }\n "}, {"sha": "21b2a3c22fa10eb7eb53b8c2c59c073eff23bc88", "filename": "compiler/rustc_ast_lowering/messages.ftl", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast_lowering%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast_lowering%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fmessages.ftl?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -139,3 +139,15 @@ ast_lowering_trait_fn_async =\n     .label = `async` because of this\n     .note = `async` trait functions are not currently supported\n     .note2 = consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+\n+ast_lowering_bad_return_type_notation_inputs =\n+    argument types not allowed with return type notation\n+    .suggestion = remove the input types\n+\n+ast_lowering_bad_return_type_notation_needs_dots =\n+    return type notation arguments must be elided with `..`\n+    .suggestion = add `..`\n+\n+ast_lowering_bad_return_type_notation_output =\n+    return type not allowed with return type notation\n+    .suggestion = remove the return type"}, {"sha": "f4e55619ebb189e1f38062091dbd46ba8b0af406", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -347,3 +347,25 @@ pub struct TraitFnAsync {\n     #[label]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+pub enum BadReturnTypeNotation {\n+    #[diag(ast_lowering_bad_return_type_notation_inputs)]\n+    Inputs {\n+        #[primary_span]\n+        #[suggestion(code = \"(..)\", applicability = \"maybe-incorrect\")]\n+        span: Span,\n+    },\n+    #[diag(ast_lowering_bad_return_type_notation_needs_dots)]\n+    NeedsDots {\n+        #[primary_span]\n+        #[suggestion(code = \"(..)\", applicability = \"maybe-incorrect\")]\n+        span: Span,\n+    },\n+    #[diag(ast_lowering_bad_return_type_notation_output)]\n+    Output {\n+        #[primary_span]\n+        #[suggestion(code = \"\", applicability = \"maybe-incorrect\")]\n+        span: Span,\n+    },\n+}"}, {"sha": "c5d39634c44b7fb7060dd625594c86b84aaa57bc", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 56, "deletions": 12, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -66,7 +66,7 @@ use rustc_middle::{\n     span_bug,\n     ty::{ResolverAstLowering, TyCtxt},\n };\n-use rustc_session::parse::feature_err;\n+use rustc_session::parse::{add_feature_diagnostics, feature_err};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -482,7 +482,7 @@ enum ParamMode {\n }\n \n enum ParenthesizedGenericArgs {\n-    Ok,\n+    ParenSugar,\n     Err,\n }\n \n@@ -987,14 +987,56 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 GenericArgs::AngleBracketed(data) => {\n                     self.lower_angle_bracketed_parameter_data(data, ParamMode::Explicit, itctx).0\n                 }\n+                &GenericArgs::ReturnTypeNotation(span) => GenericArgsCtor {\n+                    args: Default::default(),\n+                    bindings: &[],\n+                    parenthesized: hir::GenericArgsParentheses::ReturnTypeNotation,\n+                    span,\n+                },\n                 GenericArgs::Parenthesized(data) => {\n-                    self.emit_bad_parenthesized_trait_in_assoc_ty(data);\n-                    self.lower_angle_bracketed_parameter_data(\n-                        &data.as_angle_bracketed_args(),\n-                        ParamMode::Explicit,\n-                        itctx,\n-                    )\n-                    .0\n+                    if let Some(start_char) = constraint.ident.as_str().chars().next()\n+                        && start_char.is_ascii_lowercase()\n+                    {\n+                        let mut err = if !data.inputs.is_empty() {\n+                            self.tcx.sess.create_err(errors::BadReturnTypeNotation::Inputs {\n+                                span: data.inputs_span,\n+                            })\n+                        } else if let FnRetTy::Ty(ty) = &data.output {\n+                            self.tcx.sess.create_err(errors::BadReturnTypeNotation::Output {\n+                                span: data.inputs_span.shrink_to_hi().to(ty.span),\n+                            })\n+                        } else {\n+                            self.tcx.sess.create_err(errors::BadReturnTypeNotation::NeedsDots {\n+                                span: data.inputs_span,\n+                            })\n+                        };\n+                        if !self.tcx.features().return_type_notation\n+                            && self.tcx.sess.is_nightly_build()\n+                        {\n+                            add_feature_diagnostics(\n+                                &mut err,\n+                                &self.tcx.sess.parse_sess,\n+                                sym::return_type_notation,\n+                            );\n+                        }\n+                        err.emit();\n+                        GenericArgsCtor {\n+                            args: Default::default(),\n+                            bindings: &[],\n+                            parenthesized: hir::GenericArgsParentheses::ReturnTypeNotation,\n+                            span: data.span,\n+                        }\n+                    } else {\n+                        self.emit_bad_parenthesized_trait_in_assoc_ty(data);\n+                        // FIXME(return_type_notation): we could issue a feature error\n+                        // if the parens are empty and there's no return type.\n+                        self.lower_angle_bracketed_parameter_data(\n+                            &data.as_angle_bracketed_args(),\n+                            ParamMode::Explicit,\n+                            itctx,\n+                        )\n+                        .0\n+                    }\n                 }\n             };\n             gen_args_ctor.into_generic_args(self)\n@@ -2075,7 +2117,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let future_args = self.arena.alloc(hir::GenericArgs {\n             args: &[],\n             bindings: arena_vec![self; self.output_ty_binding(span, output_ty)],\n-            parenthesized: false,\n+            parenthesized: hir::GenericArgsParentheses::No,\n             span_ext: DUMMY_SP,\n         });\n \n@@ -2595,13 +2637,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n struct GenericArgsCtor<'hir> {\n     args: SmallVec<[hir::GenericArg<'hir>; 4]>,\n     bindings: &'hir [hir::TypeBinding<'hir>],\n-    parenthesized: bool,\n+    parenthesized: hir::GenericArgsParentheses,\n     span: Span,\n }\n \n impl<'hir> GenericArgsCtor<'hir> {\n     fn is_empty(&self) -> bool {\n-        self.args.is_empty() && self.bindings.is_empty() && !self.parenthesized\n+        self.args.is_empty()\n+            && self.bindings.is_empty()\n+            && self.parenthesized == hir::GenericArgsParentheses::No\n     }\n \n     fn into_generic_args(self, this: &LoweringContext<'_, 'hir>) -> &'hir hir::GenericArgs<'hir> {"}, {"sha": "1c47a969696d76695fbd45da7991db252339e8dc", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -13,6 +13,7 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{BytePos, Span, DUMMY_SP};\n \n use smallvec::{smallvec, SmallVec};\n+use thin_vec::ThinVec;\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     #[instrument(level = \"trace\", skip(self))]\n@@ -51,18 +52,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     let parenthesized_generic_args = match base_res {\n                         // `a::b::Trait(Args)`\n                         Res::Def(DefKind::Trait, _) if i + 1 == proj_start => {\n-                            ParenthesizedGenericArgs::Ok\n+                            ParenthesizedGenericArgs::ParenSugar\n                         }\n                         // `a::b::Trait(Args)::TraitItem`\n                         Res::Def(DefKind::AssocFn, _)\n                         | Res::Def(DefKind::AssocConst, _)\n                         | Res::Def(DefKind::AssocTy, _)\n                             if i + 2 == proj_start =>\n                         {\n-                            ParenthesizedGenericArgs::Ok\n+                            ParenthesizedGenericArgs::ParenSugar\n                         }\n                         // Avoid duplicated errors.\n-                        Res::Err => ParenthesizedGenericArgs::Ok,\n+                        Res::Err => ParenthesizedGenericArgs::ParenSugar,\n                         // An error\n                         _ => ParenthesizedGenericArgs::Err,\n                     };\n@@ -180,7 +181,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     self.lower_angle_bracketed_parameter_data(data, param_mode, itctx)\n                 }\n                 GenericArgs::Parenthesized(data) => match parenthesized_generic_args {\n-                    ParenthesizedGenericArgs::Ok => {\n+                    ParenthesizedGenericArgs::ParenSugar => {\n                         self.lower_parenthesized_parameter_data(data, itctx)\n                     }\n                     ParenthesizedGenericArgs::Err => {\n@@ -218,13 +219,25 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         )\n                     }\n                 },\n+                &GenericArgs::ReturnTypeNotation(span) => {\n+                    self.tcx.sess.emit_err(GenericTypeWithParentheses { span, sub: None });\n+                    (\n+                        self.lower_angle_bracketed_parameter_data(\n+                            &AngleBracketedArgs { span, args: ThinVec::default() },\n+                            param_mode,\n+                            itctx,\n+                        )\n+                        .0,\n+                        false,\n+                    )\n+                }\n             }\n         } else {\n             (\n                 GenericArgsCtor {\n                     args: Default::default(),\n                     bindings: &[],\n-                    parenthesized: false,\n+                    parenthesized: hir::GenericArgsParentheses::No,\n                     span: path_span.shrink_to_hi(),\n                 },\n                 param_mode == ParamMode::Optional,\n@@ -233,7 +246,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let has_lifetimes =\n             generic_args.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)));\n-        if !generic_args.parenthesized && !has_lifetimes {\n+\n+        // FIXME(return_type_notation): Is this correct? I think so.\n+        if generic_args.parenthesized != hir::GenericArgsParentheses::ParenSugar && !has_lifetimes {\n             self.maybe_insert_elided_lifetimes_in_path(\n                 path_span,\n                 segment.id,\n@@ -328,7 +343,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             AngleBracketedArg::Constraint(c) => Some(self.lower_assoc_ty_constraint(c, itctx)),\n             AngleBracketedArg::Arg(_) => None,\n         }));\n-        let ctor = GenericArgsCtor { args, bindings, parenthesized: false, span: data.span };\n+        let ctor = GenericArgsCtor {\n+            args,\n+            bindings,\n+            parenthesized: hir::GenericArgsParentheses::No,\n+            span: data.span,\n+        };\n         (ctor, !has_non_lt_args && param_mode == ParamMode::Optional)\n     }\n \n@@ -376,7 +396,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             GenericArgsCtor {\n                 args,\n                 bindings: arena_vec![self; binding],\n-                parenthesized: true,\n+                parenthesized: hir::GenericArgsParentheses::ParenSugar,\n                 span: data.inputs_span,\n             },\n             false,\n@@ -396,7 +416,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let gen_args = self.arena.alloc(hir::GenericArgs {\n             args,\n             bindings,\n-            parenthesized: false,\n+            parenthesized: hir::GenericArgsParentheses::No,\n             span_ext: DUMMY_SP,\n         });\n         hir::TypeBinding {"}, {"sha": "44b6c77fc4195b18e9f028a28722d94114e41430", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -1075,6 +1075,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.with_impl_trait(None, |this| this.visit_ty(ty));\n                 }\n             }\n+            GenericArgs::ReturnTypeNotation(_span) => {}\n         }\n     }\n \n@@ -1387,16 +1388,19 @@ fn deny_equality_constraints(\n                                     match &mut assoc_path.segments[len].args {\n                                         Some(args) => match args.deref_mut() {\n                                             GenericArgs::Parenthesized(_) => continue,\n+                                            GenericArgs::ReturnTypeNotation(_span) => continue,\n                                             GenericArgs::AngleBracketed(args) => {\n                                                 args.args.push(arg);\n                                             }\n                                         },\n                                         empty_args => {\n-                                            *empty_args = AngleBracketedArgs {\n-                                                span: ident.span,\n-                                                args: thin_vec![arg],\n-                                            }\n-                                            .into();\n+                                            *empty_args = Some(\n+                                                AngleBracketedArgs {\n+                                                    span: ident.span,\n+                                                    args: thin_vec![arg],\n+                                                }\n+                                                .into(),\n+                                            );\n                                         }\n                                     }\n                                     err.assoc = Some(errors::AssociatedSuggestion {"}, {"sha": "de94c1bc47794e06f13c2537fcebb6376f8a1a77", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -482,12 +482,28 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_assoc_constraint(&mut self, constraint: &'a AssocConstraint) {\n         if let AssocConstraintKind::Bound { .. } = constraint.kind {\n-            gate_feature_post!(\n-                &self,\n-                associated_type_bounds,\n-                constraint.span,\n-                \"associated type bounds are unstable\"\n-            )\n+            if let Some(args) = constraint.gen_args.as_ref()\n+                && matches!(\n+                    args,\n+                    ast::GenericArgs::ReturnTypeNotation(..) | ast::GenericArgs::Parenthesized(..)\n+                )\n+            {\n+                // RTN is gated elsewhere, and parenthesized args will turn into\n+                // another error.\n+                if matches!(args, ast::GenericArgs::Parenthesized(..)) {\n+                    self.sess.delay_span_bug(\n+                        constraint.span,\n+                        \"should have emitted a parenthesized generics error\",\n+                    );\n+                }\n+            } else {\n+                gate_feature_post!(\n+                    &self,\n+                    associated_type_bounds,\n+                    constraint.span,\n+                    \"associated type bounds are unstable\"\n+                )\n+            }\n         }\n         visit::walk_assoc_constraint(self, constraint)\n     }\n@@ -577,6 +593,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(yeet_expr, \"`do yeet` expression is experimental\");\n     gate_all!(dyn_star, \"`dyn*` trait objects are experimental\");\n     gate_all!(const_closures, \"const closures are experimental\");\n+    gate_all!(return_type_notation, \"return type notation is experimental\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "80c451d675355564d4b42c3c95739a85d58e50d5", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -936,6 +936,10 @@ impl<'a> PrintState<'a> for State<'a> {\n                 self.word(\")\");\n                 self.print_fn_ret_ty(&data.output);\n             }\n+\n+            ast::GenericArgs::ReturnTypeNotation(_span) => {\n+                self.word(\"(..)\");\n+            }\n         }\n     }\n }"}, {"sha": "8a16143311b8f7a0497dede556f616254cf53ba3", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -36,7 +36,7 @@ impl<'a> ExtCtxt<'a> {\n         );\n         let args = if !args.is_empty() {\n             let args = args.into_iter().map(ast::AngleBracketedArg::Arg).collect();\n-            ast::AngleBracketedArgs { args, span }.into()\n+            Some(ast::AngleBracketedArgs { args, span }.into())\n         } else {\n             None\n         };"}, {"sha": "9c0dc938635a35361b79b99ac08957aa78de7944", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -495,6 +495,8 @@ declare_features! (\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n     /// Allows return-position `impl Trait` in traits.\n     (incomplete, return_position_impl_trait_in_trait, \"1.65.0\", Some(91611), None),\n+    /// Allows bounding the return type of AFIT/RPITIT.\n+    (incomplete, return_type_notation, \"CURRENT_RUSTC_VERSION\", Some(109417), None),\n     /// Allows `extern \"rust-cold\"`.\n     (active, rust_cold_cc, \"1.63.0\", Some(97544), None),\n     /// Allows the use of SIMD types in functions declared in `extern` blocks."}, {"sha": "35a72f868fbcc31df0f616b1094a3d2c9ca23335", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -328,7 +328,7 @@ pub struct GenericArgs<'hir> {\n     /// Were arguments written in parenthesized form `Fn(T) -> U`?\n     /// This is required mostly for pretty-printing and diagnostics,\n     /// but also for changing lifetime elision rules to be \"function-like\".\n-    pub parenthesized: bool,\n+    pub parenthesized: GenericArgsParentheses,\n     /// The span encompassing arguments and the surrounding brackets `<>` or `()`\n     ///       Foo<A, B, AssocTy = D>           Fn(T, U, V) -> W\n     ///          ^^^^^^^^^^^^^^^^^^^             ^^^^^^^^^\n@@ -340,11 +340,16 @@ pub struct GenericArgs<'hir> {\n \n impl<'hir> GenericArgs<'hir> {\n     pub const fn none() -> Self {\n-        Self { args: &[], bindings: &[], parenthesized: false, span_ext: DUMMY_SP }\n+        Self {\n+            args: &[],\n+            bindings: &[],\n+            parenthesized: GenericArgsParentheses::No,\n+            span_ext: DUMMY_SP,\n+        }\n     }\n \n     pub fn inputs(&self) -> &[Ty<'hir>] {\n-        if self.parenthesized {\n+        if self.parenthesized == GenericArgsParentheses::ParenSugar {\n             for arg in self.args {\n                 match arg {\n                     GenericArg::Lifetime(_) => {}\n@@ -417,6 +422,17 @@ impl<'hir> GenericArgs<'hir> {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n+pub enum GenericArgsParentheses {\n+    No,\n+    /// Bounds for `feature(return_type_notation)`, like `T: Trait<method(..): Send>`,\n+    /// where the args are explicitly elided with `..`\n+    ReturnTypeNotation,\n+    /// parenthesized function-family traits, like `T: Fn(u32) -> i32`\n+    ParenSugar,\n+}\n+\n /// A modifier on a bound, currently this is only used for `?Sized`, where the\n /// modifier is `Maybe`. Negative bounds should also be handled here.\n #[derive(Copy, Clone, PartialEq, Eq, Encodable, Hash, Debug)]"}, {"sha": "a57f3987849161a64a6475c5eac35a906e779c03", "filename": "compiler/rustc_hir_analysis/messages.ftl", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fmessages.ftl?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -178,3 +178,14 @@ hir_analysis_invalid_union_field =\n \n hir_analysis_invalid_union_field_sugg =\n     wrap the field type in `ManuallyDrop<...>`\n+\n+hir_analysis_return_type_notation_on_non_rpitit =\n+    return type notation used on function that is not `async` and does not return `impl Trait`\n+    .note = function returns `{$ty}`, which is not compatible with associated type return bounds\n+    .label = this function must be `async` or return `impl Trait`\n+\n+hir_analysis_return_type_notation_equality_bound =\n+    return type notation is not allowed to use type equality\n+\n+hir_analysis_return_type_notation_missing_method =\n+    cannot find associated function `{$assoc_name}` in trait `{$trait_name}`"}, {"sha": "672e7176fde09661d75d9fb194bf33dbff61ed84", "filename": "compiler/rustc_hir_analysis/src/astconv/errors.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -55,7 +55,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let trait_def = self.tcx().trait_def(trait_def_id);\n         if !trait_def.paren_sugar {\n-            if trait_segment.args().parenthesized {\n+            if trait_segment.args().parenthesized == hir::GenericArgsParentheses::ParenSugar {\n                 // For now, require that parenthetical notation be used only with `Fn()` etc.\n                 let mut err = feature_err(\n                     &self.tcx().sess.parse_sess,\n@@ -71,7 +71,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let sess = self.tcx().sess;\n \n-        if !trait_segment.args().parenthesized {\n+        if trait_segment.args().parenthesized != hir::GenericArgsParentheses::ParenSugar {\n             // For now, require that parenthetical notation be used only with `Fn()` etc.\n             let mut err = feature_err(\n                 &sess.parse_sess,\n@@ -607,11 +607,19 @@ pub fn prohibit_assoc_ty_binding(\n     span: Span,\n     segment: Option<(&hir::PathSegment<'_>, Span)>,\n ) {\n-    tcx.sess.emit_err(AssocTypeBindingNotAllowed { span, fn_trait_expansion: if let Some((segment, span)) = segment && segment.args().parenthesized {\n-        Some(ParenthesizedFnTraitExpansion { span, expanded_type: fn_trait_to_string(tcx, segment, false) })\n-    } else {\n-        None\n-    }});\n+    tcx.sess.emit_err(AssocTypeBindingNotAllowed {\n+        span,\n+        fn_trait_expansion: if let Some((segment, span)) = segment\n+            && segment.args().parenthesized == hir::GenericArgsParentheses::ParenSugar\n+        {\n+            Some(ParenthesizedFnTraitExpansion {\n+                span,\n+                expanded_type: fn_trait_to_string(tcx, segment, false),\n+            })\n+        } else {\n+            None\n+        },\n+    });\n }\n \n pub(crate) fn fn_trait_to_string("}, {"sha": "e25b07d93922ebbf5b532c53d53dfe88e6d52fe6", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 153, "deletions": 51, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -854,16 +854,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         )\n     }\n \n-    fn trait_defines_associated_type_named(&self, trait_def_id: DefId, assoc_name: Ident) -> bool {\n-        self.tcx()\n-            .associated_items(trait_def_id)\n-            .find_by_name_and_kind(self.tcx(), assoc_name, ty::AssocKind::Type, trait_def_id)\n-            .is_some()\n-    }\n-    fn trait_defines_associated_const_named(&self, trait_def_id: DefId, assoc_name: Ident) -> bool {\n+    fn trait_defines_associated_item_named(\n+        &self,\n+        trait_def_id: DefId,\n+        assoc_kind: ty::AssocKind,\n+        assoc_name: Ident,\n+    ) -> bool {\n         self.tcx()\n             .associated_items(trait_def_id)\n-            .find_by_name_and_kind(self.tcx(), assoc_name, ty::AssocKind::Const, trait_def_id)\n+            .find_by_name_and_kind(self.tcx(), assoc_name, assoc_kind, trait_def_id)\n             .is_some()\n     }\n \n@@ -1087,24 +1086,44 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let tcx = self.tcx();\n \n-        let candidate =\n-            if self.trait_defines_associated_type_named(trait_ref.def_id(), binding.item_name) {\n-                // Simple case: X is defined in the current trait.\n+        let return_type_notation =\n+            binding.gen_args.parenthesized == hir::GenericArgsParentheses::ReturnTypeNotation;\n+\n+        let candidate = if return_type_notation {\n+            if self.trait_defines_associated_item_named(\n+                trait_ref.def_id(),\n+                ty::AssocKind::Fn,\n+                binding.item_name,\n+            ) {\n                 trait_ref\n             } else {\n-                // Otherwise, we have to walk through the supertraits to find\n-                // those that do.\n-                self.one_bound_for_assoc_type(\n-                    || traits::supertraits(tcx, trait_ref),\n-                    trait_ref.print_only_trait_path(),\n-                    binding.item_name,\n-                    path_span,\n-                    match binding.kind {\n-                        ConvertedBindingKind::Equality(term) => Some(term),\n-                        _ => None,\n-                    },\n-                )?\n-            };\n+                return Err(tcx.sess.emit_err(crate::errors::ReturnTypeNotationMissingMethod {\n+                    span: binding.span,\n+                    trait_name: tcx.item_name(trait_ref.def_id()),\n+                    assoc_name: binding.item_name.name,\n+                }));\n+            }\n+        } else if self.trait_defines_associated_item_named(\n+            trait_ref.def_id(),\n+            ty::AssocKind::Type,\n+            binding.item_name,\n+        ) {\n+            // Simple case: X is defined in the current trait.\n+            trait_ref\n+        } else {\n+            // Otherwise, we have to walk through the supertraits to find\n+            // those that do.\n+            self.one_bound_for_assoc_type(\n+                || traits::supertraits(tcx, trait_ref),\n+                trait_ref.print_only_trait_path(),\n+                binding.item_name,\n+                path_span,\n+                match binding.kind {\n+                    ConvertedBindingKind::Equality(term) => Some(term),\n+                    _ => None,\n+                },\n+            )?\n+        };\n \n         let (assoc_ident, def_scope) =\n             tcx.adjust_ident_and_get_scope(binding.item_name, candidate.def_id(), hir_ref_id);\n@@ -1116,9 +1135,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .filter_by_name_unhygienic(assoc_ident.name)\n                 .find(|i| i.kind == kind && i.ident(tcx).normalize_to_macros_2_0() == assoc_ident)\n         };\n-        let assoc_item = find_item_of_kind(ty::AssocKind::Type)\n-            .or_else(|| find_item_of_kind(ty::AssocKind::Const))\n-            .expect(\"missing associated type\");\n+        let assoc_item = if return_type_notation {\n+            find_item_of_kind(ty::AssocKind::Fn)\n+        } else {\n+            find_item_of_kind(ty::AssocKind::Type)\n+                .or_else(|| find_item_of_kind(ty::AssocKind::Const))\n+        }\n+        .expect(\"missing associated type\");\n \n         if !assoc_item.visibility(tcx).is_accessible_from(def_scope, tcx) {\n             tcx.sess\n@@ -1135,7 +1158,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             dup_bindings\n                 .entry(assoc_item.def_id)\n                 .and_modify(|prev_span| {\n-                    self.tcx().sess.emit_err(ValueOfAssociatedStructAlreadySpecified {\n+                    tcx.sess.emit_err(ValueOfAssociatedStructAlreadySpecified {\n                         span: binding.span,\n                         prev_span: *prev_span,\n                         item_name: binding.item_name,\n@@ -1145,28 +1168,100 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .or_insert(binding.span);\n         }\n \n-        // Include substitutions for generic parameters of associated types\n-        let projection_ty = candidate.map_bound(|trait_ref| {\n-            let ident = Ident::new(assoc_item.name, binding.item_name.span);\n-            let item_segment = hir::PathSegment {\n-                ident,\n-                hir_id: binding.hir_id,\n-                res: Res::Err,\n-                args: Some(binding.gen_args),\n-                infer_args: false,\n+        let projection_ty = if return_type_notation {\n+            // If we have an method return type bound, then we need to substitute\n+            // the method's early bound params with suitable late-bound params.\n+            let mut num_bound_vars = candidate.bound_vars().len();\n+            let substs =\n+                candidate.skip_binder().substs.extend_to(tcx, assoc_item.def_id, |param, _| {\n+                    let subst = match param.kind {\n+                        GenericParamDefKind::Lifetime => tcx\n+                            .mk_re_late_bound(\n+                                ty::INNERMOST,\n+                                ty::BoundRegion {\n+                                    var: ty::BoundVar::from_usize(num_bound_vars),\n+                                    kind: ty::BoundRegionKind::BrNamed(param.def_id, param.name),\n+                                },\n+                            )\n+                            .into(),\n+                        GenericParamDefKind::Type { .. } => tcx\n+                            .mk_bound(\n+                                ty::INNERMOST,\n+                                ty::BoundTy {\n+                                    var: ty::BoundVar::from_usize(num_bound_vars),\n+                                    kind: ty::BoundTyKind::Param(param.def_id, param.name),\n+                                },\n+                            )\n+                            .into(),\n+                        GenericParamDefKind::Const { .. } => {\n+                            let ty = tcx\n+                                .type_of(param.def_id)\n+                                .no_bound_vars()\n+                                .expect(\"ct params cannot have early bound vars\");\n+                            tcx.mk_const(\n+                                ty::ConstKind::Bound(\n+                                    ty::INNERMOST,\n+                                    ty::BoundVar::from_usize(num_bound_vars),\n+                                ),\n+                                ty,\n+                            )\n+                            .into()\n+                        }\n+                    };\n+                    num_bound_vars += 1;\n+                    subst\n+                });\n+\n+            // Next, we need to check that the return-type notation is being used on\n+            // an RPITIT (return-position impl trait in trait) or AFIT (async fn in trait).\n+            let output = tcx.fn_sig(assoc_item.def_id).skip_binder().output();\n+            let output = if let ty::Alias(ty::Projection, alias_ty) = *output.skip_binder().kind()\n+                && tcx.def_kind(alias_ty.def_id) == DefKind::ImplTraitPlaceholder\n+            {\n+                alias_ty\n+            } else {\n+                return Err(self.tcx().sess.emit_err(\n+                    crate::errors::ReturnTypeNotationOnNonRpitit {\n+                        span: binding.span,\n+                        ty: tcx.liberate_late_bound_regions(assoc_item.def_id, output),\n+                        fn_span: tcx.hir().span_if_local(assoc_item.def_id),\n+                        note: (),\n+                    },\n+                ));\n             };\n \n-            let substs_trait_ref_and_assoc_item = self.create_substs_for_associated_item(\n-                path_span,\n-                assoc_item.def_id,\n-                &item_segment,\n-                trait_ref.substs,\n-            );\n+            // Finally, move the fn return type's bound vars over to account for the early bound\n+            // params (and trait ref's late bound params). This logic is very similar to\n+            // `Predicate::subst_supertrait`, and it's no coincidence why.\n+            let shifted_output = tcx.shift_bound_var_indices(num_bound_vars, output);\n+            let subst_output = ty::EarlyBinder(shifted_output).subst(tcx, substs);\n+\n+            let bound_vars = tcx.late_bound_vars(binding.hir_id);\n+            ty::Binder::bind_with_vars(subst_output, bound_vars)\n+        } else {\n+            // Include substitutions for generic parameters of associated types\n+            candidate.map_bound(|trait_ref| {\n+                let ident = Ident::new(assoc_item.name, binding.item_name.span);\n+                let item_segment = hir::PathSegment {\n+                    ident,\n+                    hir_id: binding.hir_id,\n+                    res: Res::Err,\n+                    args: Some(binding.gen_args),\n+                    infer_args: false,\n+                };\n \n-            debug!(?substs_trait_ref_and_assoc_item);\n+                let substs_trait_ref_and_assoc_item = self.create_substs_for_associated_item(\n+                    path_span,\n+                    assoc_item.def_id,\n+                    &item_segment,\n+                    trait_ref.substs,\n+                );\n \n-            self.tcx().mk_alias_ty(assoc_item.def_id, substs_trait_ref_and_assoc_item)\n-        });\n+                debug!(?substs_trait_ref_and_assoc_item);\n+\n+                tcx.mk_alias_ty(assoc_item.def_id, substs_trait_ref_and_assoc_item)\n+            })\n+        };\n \n         if !speculative {\n             // Find any late-bound regions declared in `ty` that are not\n@@ -1206,6 +1301,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n \n         match binding.kind {\n+            ConvertedBindingKind::Equality(..) if return_type_notation => {\n+                return Err(self.tcx().sess.emit_err(\n+                    crate::errors::ReturnTypeNotationEqualityBound { span: binding.span },\n+                ));\n+            }\n             ConvertedBindingKind::Equality(mut term) => {\n                 // \"Desugar\" a constraint like `T: Iterator<Item = u32>` this to\n                 // the \"projection predicate\" for:\n@@ -1267,7 +1367,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // Calling `skip_binder` is okay, because `add_bounds` expects the `param_ty`\n                 // parameter to have a skipped binder.\n                 let param_ty = tcx.mk_alias(ty::Projection, projection_ty.skip_binder());\n-                self.add_bounds(param_ty, ast_bounds.iter(), bounds, candidate.bound_vars());\n+                self.add_bounds(param_ty, ast_bounds.iter(), bounds, projection_ty.bound_vars());\n             }\n         }\n         Ok(())\n@@ -1808,10 +1908,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     where\n         I: Iterator<Item = ty::PolyTraitRef<'tcx>>,\n     {\n-        let mut matching_candidates = all_candidates()\n-            .filter(|r| self.trait_defines_associated_type_named(r.def_id(), assoc_name));\n-        let mut const_candidates = all_candidates()\n-            .filter(|r| self.trait_defines_associated_const_named(r.def_id(), assoc_name));\n+        let mut matching_candidates = all_candidates().filter(|r| {\n+            self.trait_defines_associated_item_named(r.def_id(), ty::AssocKind::Type, assoc_name)\n+        });\n+        let mut const_candidates = all_candidates().filter(|r| {\n+            self.trait_defines_associated_item_named(r.def_id(), ty::AssocKind::Const, assoc_name)\n+        });\n \n         let (bound, next_cand) = match (matching_candidates.next(), const_candidates.next()) {\n             (Some(bound), _) => (bound, matching_candidates.next()),"}, {"sha": "5e4f377a1e7eae72908d505fdd844d8aea6fb9ab", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -1461,7 +1461,7 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n         depth: usize,\n         generic_args: &'tcx hir::GenericArgs<'tcx>,\n     ) {\n-        if generic_args.parenthesized {\n+        if generic_args.parenthesized == hir::GenericArgsParentheses::ParenSugar {\n             self.visit_fn_like_elision(\n                 generic_args.inputs(),\n                 Some(generic_args.bindings[0].ty()),\n@@ -1640,7 +1640,59 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n                 },\n                 s: self.scope,\n             };\n-            if let Some(type_def_id) = type_def_id {\n+            // If the binding is parenthesized, then this must be `feature(return_type_notation)`.\n+            // In that case, introduce a binder over all of the function's early and late bound vars.\n+            //\n+            // For example, given\n+            // ```\n+            // trait Foo {\n+            //     async fn x<'r, T>();\n+            // }\n+            // ```\n+            // and a bound that looks like:\n+            //    `for<'a> T::Trait<'a, x(): for<'b> Other<'b>>`\n+            // this is going to expand to something like:\n+            //    `for<'a> for<'r, T> <T as Trait<'a>>::x::<'r, T>::{opaque#0}: for<'b> Other<'b>`.\n+            if binding.gen_args.parenthesized == hir::GenericArgsParentheses::ReturnTypeNotation {\n+                let bound_vars = if let Some(type_def_id) = type_def_id\n+                    && self.tcx.def_kind(type_def_id) == DefKind::Trait\n+                    // FIXME(return_type_notation): We could bound supertrait methods.\n+                    && let Some(assoc_fn) = self\n+                        .tcx\n+                        .associated_items(type_def_id)\n+                        .find_by_name_and_kind(self.tcx, binding.ident, ty::AssocKind::Fn, type_def_id)\n+                {\n+                    self.tcx\n+                        .generics_of(assoc_fn.def_id)\n+                        .params\n+                        .iter()\n+                        .map(|param| match param.kind {\n+                            ty::GenericParamDefKind::Lifetime => ty::BoundVariableKind::Region(\n+                                ty::BoundRegionKind::BrNamed(param.def_id, param.name),\n+                            ),\n+                            ty::GenericParamDefKind::Type { .. } => ty::BoundVariableKind::Ty(\n+                                ty::BoundTyKind::Param(param.def_id, param.name),\n+                            ),\n+                            ty::GenericParamDefKind::Const { .. } => ty::BoundVariableKind::Const,\n+                        })\n+                        .chain(self.tcx.fn_sig(assoc_fn.def_id).subst_identity().bound_vars())\n+                        .collect()\n+                } else {\n+                    self.tcx.sess.delay_span_bug(\n+                        binding.ident.span,\n+                        \"bad return type notation here\",\n+                    );\n+                    vec![]\n+                };\n+                self.with(scope, |this| {\n+                    let scope = Scope::Supertrait { bound_vars, s: this.scope };\n+                    this.with(scope, |this| {\n+                        let (bound_vars, _) = this.poly_trait_ref_binder_info();\n+                        this.record_late_bound_vars(binding.hir_id, bound_vars);\n+                        this.visit_assoc_type_binding(binding)\n+                    });\n+                });\n+            } else if let Some(type_def_id) = type_def_id {\n                 let bound_vars =\n                     BoundVarContext::supertrait_hrtb_vars(self.tcx, type_def_id, binding.ident);\n                 self.with(scope, |this| {"}, {"sha": "c71ce9a0bc7cd388b4cd4b9d5bc179804cb75997", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -471,6 +471,18 @@ pub(crate) struct InvalidUnionField {\n     pub note: (),\n }\n \n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_return_type_notation_on_non_rpitit)]\n+pub(crate) struct ReturnTypeNotationOnNonRpitit<'tcx> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub ty: Ty<'tcx>,\n+    #[label]\n+    pub fn_span: Option<Span>,\n+    #[note]\n+    pub note: (),\n+}\n+\n #[derive(Subdiagnostic)]\n #[multipart_suggestion(hir_analysis_invalid_union_field_sugg, applicability = \"machine-applicable\")]\n pub(crate) struct InvalidUnionFieldSuggestion {\n@@ -479,3 +491,19 @@ pub(crate) struct InvalidUnionFieldSuggestion {\n     #[suggestion_part(code = \">\")]\n     pub hi: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_return_type_notation_equality_bound)]\n+pub(crate) struct ReturnTypeNotationEqualityBound {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_return_type_notation_missing_method)]\n+pub(crate) struct ReturnTypeNotationMissingMethod {\n+    #[primary_span]\n+    pub span: Span,\n+    pub trait_name: Symbol,\n+    pub assoc_name: Symbol,\n+}"}, {"sha": "8f4d81ec3a935a13128d70597081a5938be46b15", "filename": "compiler/rustc_hir_analysis/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -565,7 +565,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     /// type Map = HashMap<String>;\n     /// ```\n     fn suggest_adding_args(&self, err: &mut Diagnostic) {\n-        if self.gen_args.parenthesized {\n+        if self.gen_args.parenthesized != hir::GenericArgsParentheses::No {\n             return;\n         }\n \n@@ -962,7 +962,11 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n \n             let msg = format!(\n                 \"remove these {}generics\",\n-                if self.gen_args.parenthesized { \"parenthetical \" } else { \"\" },\n+                if self.gen_args.parenthesized == hir::GenericArgsParentheses::ParenSugar {\n+                    \"parenthetical \"\n+                } else {\n+                    \"\"\n+                },\n             );\n \n             err.span_suggestion(span, &msg, \"\", Applicability::MaybeIncorrect);"}, {"sha": "4f27c01fad2c9d2d3794f18bc2126fbf9c4529e7", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 52, "deletions": 48, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -1652,61 +1652,65 @@ impl<'a> State<'a> {\n         generic_args: &hir::GenericArgs<'_>,\n         colons_before_params: bool,\n     ) {\n-        if generic_args.parenthesized {\n-            self.word(\"(\");\n-            self.commasep(Inconsistent, generic_args.inputs(), |s, ty| s.print_type(ty));\n-            self.word(\")\");\n+        match generic_args.parenthesized {\n+            hir::GenericArgsParentheses::No => {\n+                let start = if colons_before_params { \"::<\" } else { \"<\" };\n+                let empty = Cell::new(true);\n+                let start_or_comma = |this: &mut Self| {\n+                    if empty.get() {\n+                        empty.set(false);\n+                        this.word(start)\n+                    } else {\n+                        this.word_space(\",\")\n+                    }\n+                };\n+\n+                let mut nonelided_generic_args: bool = false;\n+                let elide_lifetimes = generic_args.args.iter().all(|arg| match arg {\n+                    GenericArg::Lifetime(lt) if lt.is_elided() => true,\n+                    GenericArg::Lifetime(_) => {\n+                        nonelided_generic_args = true;\n+                        false\n+                    }\n+                    _ => {\n+                        nonelided_generic_args = true;\n+                        true\n+                    }\n+                });\n \n-            self.space_if_not_bol();\n-            self.word_space(\"->\");\n-            self.print_type(generic_args.bindings[0].ty());\n-        } else {\n-            let start = if colons_before_params { \"::<\" } else { \"<\" };\n-            let empty = Cell::new(true);\n-            let start_or_comma = |this: &mut Self| {\n-                if empty.get() {\n-                    empty.set(false);\n-                    this.word(start)\n-                } else {\n-                    this.word_space(\",\")\n+                if nonelided_generic_args {\n+                    start_or_comma(self);\n+                    self.commasep(Inconsistent, generic_args.args, |s, generic_arg| {\n+                        match generic_arg {\n+                            GenericArg::Lifetime(lt) if !elide_lifetimes => s.print_lifetime(lt),\n+                            GenericArg::Lifetime(_) => {}\n+                            GenericArg::Type(ty) => s.print_type(ty),\n+                            GenericArg::Const(ct) => s.print_anon_const(&ct.value),\n+                            GenericArg::Infer(_inf) => s.word(\"_\"),\n+                        }\n+                    });\n                 }\n-            };\n \n-            let mut nonelided_generic_args: bool = false;\n-            let elide_lifetimes = generic_args.args.iter().all(|arg| match arg {\n-                GenericArg::Lifetime(lt) if lt.is_elided() => true,\n-                GenericArg::Lifetime(_) => {\n-                    nonelided_generic_args = true;\n-                    false\n+                for binding in generic_args.bindings {\n+                    start_or_comma(self);\n+                    self.print_type_binding(binding);\n                 }\n-                _ => {\n-                    nonelided_generic_args = true;\n-                    true\n-                }\n-            });\n-\n-            if nonelided_generic_args {\n-                start_or_comma(self);\n-                self.commasep(\n-                    Inconsistent,\n-                    generic_args.args,\n-                    |s, generic_arg| match generic_arg {\n-                        GenericArg::Lifetime(lt) if !elide_lifetimes => s.print_lifetime(lt),\n-                        GenericArg::Lifetime(_) => {}\n-                        GenericArg::Type(ty) => s.print_type(ty),\n-                        GenericArg::Const(ct) => s.print_anon_const(&ct.value),\n-                        GenericArg::Infer(_inf) => s.word(\"_\"),\n-                    },\n-                );\n-            }\n \n-            for binding in generic_args.bindings {\n-                start_or_comma(self);\n-                self.print_type_binding(binding);\n+                if !empty.get() {\n+                    self.word(\">\")\n+                }\n             }\n+            hir::GenericArgsParentheses::ParenSugar => {\n+                self.word(\"(\");\n+                self.commasep(Inconsistent, generic_args.inputs(), |s, ty| s.print_type(ty));\n+                self.word(\")\");\n \n-            if !empty.get() {\n-                self.word(\">\")\n+                self.space_if_not_bol();\n+                self.word_space(\"->\");\n+                self.print_type(generic_args.bindings[0].ty());\n+            }\n+            hir::GenericArgsParentheses::ReturnTypeNotation => {\n+                self.word(\"(..)\");\n             }\n         }\n     }"}, {"sha": "e21bbd0217bd5c849a50d4a7c6f9966c0ce56594", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -734,3 +734,7 @@ parse_unknown_start_of_token = unknown start of token: {$escaped}\n \n parse_box_syntax_removed = `box_syntax` has been removed\n     .suggestion = use `Box::new()` instead\n+\n+parse_bad_return_type_notation_output =\n+    return type not allowed with return type notation\n+    .suggestion = remove the return type"}, {"sha": "aead216b61cd6c626c6adea665c7b3232dab00d8", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -2316,3 +2316,11 @@ pub struct BoxSyntaxRemoved<'a> {\n     pub span: Span,\n     pub code: &'a str,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_bad_return_type_notation_output)]\n+pub(crate) struct BadReturnTypeNotationOutput {\n+    #[primary_span]\n+    #[suggestion(code = \"\", applicability = \"maybe-incorrect\")]\n+    pub span: Span,\n+}"}, {"sha": "5210b8fe69d6e4e7510171b63201f2b22dbab687", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -989,8 +989,7 @@ impl<'a> Parser<'a> {\n                     }\n                     if self.token.kind == token::OpenDelim(Delimiter::Parenthesis) {\n                         // Recover from bad turbofish: `foo.collect::Vec<_>()`.\n-                        let args = AngleBracketedArgs { args, span }.into();\n-                        segment.args = args;\n+                        segment.args = Some(AngleBracketedArgs { args, span }.into());\n \n                         self.sess.emit_err(GenericParamsWithoutAngleBrackets {\n                             span,"}, {"sha": "f1c9f0109f82f4bafa7083ebd0ef788b2cca027c", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -1,6 +1,6 @@\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{Parser, Restrictions, TokenType};\n-use crate::maybe_whole;\n+use crate::{errors, maybe_whole};\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n use rustc_ast::{\n@@ -290,6 +290,25 @@ impl<'a> Parser<'a> {\n                     })?;\n                     let span = lo.to(self.prev_token.span);\n                     AngleBracketedArgs { args, span }.into()\n+                } else if self.token.kind == token::OpenDelim(Delimiter::Parenthesis)\n+                    // FIXME(return_type_notation): Could also recover `...` here.\n+                    && self.look_ahead(1, |tok| tok.kind == token::DotDot)\n+                {\n+                    let lo = self.token.span;\n+                    self.bump();\n+                    self.bump();\n+                    self.expect(&token::CloseDelim(Delimiter::Parenthesis))?;\n+                    let span = lo.to(self.prev_token.span);\n+                    self.sess.gated_spans.gate(sym::return_type_notation, span);\n+\n+                    if self.eat_noexpect(&token::RArrow) {\n+                        let lo = self.prev_token.span;\n+                        let ty = self.parse_ty()?;\n+                        self.sess\n+                            .emit_err(errors::BadReturnTypeNotationOutput { span: lo.to(ty.span) });\n+                    }\n+\n+                    P(GenericArgs::ReturnTypeNotation(span))\n                 } else {\n                     // `(T, U) -> R`\n                     let (inputs, _) = self.parse_paren_comma_seq(|p| p.parse_ty())?;\n@@ -300,7 +319,7 @@ impl<'a> Parser<'a> {\n                     ParenthesizedArgs { span, inputs, inputs_span, output }.into()\n                 };\n \n-                PathSegment { ident, args, id: ast::DUMMY_NODE_ID }\n+                PathSegment { ident, args: Some(args), id: ast::DUMMY_NODE_ID }\n             } else {\n                 // Generic arguments are not found.\n                 PathSegment::from_ident(ident)\n@@ -550,7 +569,13 @@ impl<'a> Parser<'a> {\n \n                     // Gate associated type bounds, e.g., `Iterator<Item: Ord>`.\n                     if let AssocConstraintKind::Bound { .. } = kind {\n-                        self.sess.gated_spans.gate(sym::associated_type_bounds, span);\n+                        if gen_args.as_ref().map_or(false, |args| {\n+                            matches!(args, GenericArgs::ReturnTypeNotation(..))\n+                        }) {\n+                            // This is already gated in `parse_path_segment`\n+                        } else {\n+                            self.sess.gated_spans.gate(sym::associated_type_bounds, span);\n+                        }\n                     }\n                     let constraint =\n                         AssocConstraint { id: ast::DUMMY_NODE_ID, ident, gen_args, kind, span };"}, {"sha": "400c8dbe9bc6b83d85a307cb78dc0acf655dc227", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -1059,8 +1059,11 @@ impl<'a> Parser<'a> {\n             output,\n         }\n         .into();\n-        *fn_path_segment =\n-            ast::PathSegment { ident: fn_path_segment.ident, args, id: ast::DUMMY_NODE_ID };\n+        *fn_path_segment = ast::PathSegment {\n+            ident: fn_path_segment.ident,\n+            args: Some(args),\n+            id: ast::DUMMY_NODE_ID,\n+        };\n \n         // Convert parsed `<'a>` in `Fn<'a>` into `for<'a>`.\n         let mut generic_params = lifetimes"}, {"sha": "ce44f709f3b7c09c4b2ed87e681de0816789c371", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -666,7 +666,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n     fn visit_generic_args(&mut self, g: &'v ast::GenericArgs) {\n         record_variants!(\n             (self, g, g, Id::None, ast, GenericArgs, GenericArgs),\n-            [AngleBracketed, Parenthesized]\n+            [AngleBracketed, Parenthesized, ReturnTypeNotation]\n         );\n         ast_visit::walk_generic_args(self, g)\n     }"}, {"sha": "f66bad1d429a9cdd4120eb0c8d8cec4615e0c82e", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -1110,6 +1110,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                         }\n                     }\n                 }\n+                GenericArgs::ReturnTypeNotation(_span) => {}\n             }\n         }\n     }"}, {"sha": "99fad22d4a12d9d1d8c05141e1a7ae6e0b2022b8", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -312,6 +312,7 @@ impl<'a> From<&'a ast::PathSegment> for Segment {\n                     (args.span, found_lifetimes)\n                 }\n                 GenericArgs::Parenthesized(args) => (args.span, true),\n+                GenericArgs::ReturnTypeNotation(span) => (*span, false),\n             }\n         } else {\n             (DUMMY_SP, false)"}, {"sha": "1bccc7d627ada54a712f7cbccd7aa818f0a014d2", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -1196,6 +1196,7 @@ symbols! {\n         residual,\n         result,\n         return_position_impl_trait_in_trait,\n+        return_type_notation,\n         rhs,\n         rintf32,\n         rintf64,"}, {"sha": "1c57cd7a9461cc1f371d6f588abac75a5967c123", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -2002,7 +2002,8 @@ fn clean_generic_args<'tcx>(\n     generic_args: &hir::GenericArgs<'tcx>,\n     cx: &mut DocContext<'tcx>,\n ) -> GenericArgs {\n-    if generic_args.parenthesized {\n+    // FIXME(return_type_notation): Fix RTN parens rendering\n+    if generic_args.parenthesized == hir::GenericArgsParentheses::ParenSugar {\n         let output = clean_ty(generic_args.bindings[0].ty(), cx);\n         let output = if output != Type::Tuple(Vec::new()) { Some(Box::new(output)) } else { None };\n         let inputs ="}, {"sha": "c984a8286eb88ab1bc7ab3bc0a766c8499a09b09", "filename": "src/tools/clippy/clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::last_path_segment;\n use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{GenericArg, Mutability, Ty, TyKind};\n+use rustc_hir::{GenericArg, GenericArgsParentheses, Mutability, Ty, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n@@ -47,7 +47,7 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n \n             if cx.tcx.is_diagnostic_item(sym::Option, def_id);\n             if let Some(params) = last_path_segment(qpath).args ;\n-            if !params.parenthesized;\n+            if params.parenthesized == GenericArgsParentheses::No;\n             if let Some(inner_ty) = params.args.iter().find_map(|arg| match arg {\n                 GenericArg::Type(inner_ty) => Some(inner_ty),\n                 _ => None,"}, {"sha": "acdf54710691e5dbab98131cc679421f8ead050e", "filename": "src/tools/clippy/clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -20,7 +20,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n                 if let QPath::Resolved(None, path) = *qpath;\n                 if let [ref bx] = *path.segments;\n                 if let Some(params) = bx.args;\n-                if !params.parenthesized;\n+                if params.parenthesized == hir::GenericArgsParentheses::No;\n                 if let Some(inner) = params.args.iter().find_map(|arg| match arg {\n                     GenericArg::Type(ty) => Some(ty),\n                     _ => None,"}, {"sha": "a30748db88fc94cce03a884e1dff2e43821dcd98", "filename": "src/tools/clippy/clippy_lints/src/types/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Futils.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -1,14 +1,14 @@\n use clippy_utils::last_path_segment;\n use if_chain::if_chain;\n-use rustc_hir::{GenericArg, QPath, TyKind};\n+use rustc_hir::{GenericArg, GenericArgsParentheses, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n \n pub(super) fn match_borrows_parameter(_cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<Span> {\n     let last = last_path_segment(qpath);\n     if_chain! {\n         if let Some(params) = last.args;\n-        if !params.parenthesized;\n+        if params.parenthesized == GenericArgsParentheses::No;\n         if let Some(ty) = params.args.iter().find_map(|arg| match arg {\n             GenericArg::Type(ty) => Some(ty),\n             _ => None,"}, {"sha": "7dfb0956077e4e7b6b0152263023f48cf2eef3fd", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n     intravisit::{walk_inf, walk_ty, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, GenericParam, GenericParamKind, HirId, Impl, ImplItemKind, Item,\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, GenericArgsParentheses, GenericParam, GenericParamKind, HirId, Impl, ImplItemKind, Item,\n     ItemKind, Pat, PatKind, Path, QPath, Ty, TyKind,\n };\n use rustc_hir_analysis::hir_ty_to_ty;\n@@ -100,7 +100,8 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if let TyKind::Path(QPath::Resolved(_, item_path)) = self_ty.kind;\n             let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n             if parameters.as_ref().map_or(true, |params| {\n-                !params.parenthesized && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n+                params.parenthesized  == GenericArgsParentheses::No\n+                    && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n             });\n             if !item.span.from_expansion();\n             if !is_from_proc_macro(cx, item); // expensive, should be last check"}, {"sha": "3ee7147828bd5f9010fc3056d92fc39a32987f4f", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -401,14 +401,9 @@ impl HirEqInterExpr<'_, '_, '_> {\n     }\n \n     fn eq_path_parameters(&mut self, left: &GenericArgs<'_>, right: &GenericArgs<'_>) -> bool {\n-        if !(left.parenthesized || right.parenthesized) {\n+        if left.parenthesized == right.parenthesized {\n             over(left.args, right.args, |l, r| self.eq_generic_arg(l, r)) // FIXME(flip1995): may not work\n                 && over(left.bindings, right.bindings, |l, r| self.eq_type_binding(l, r))\n-        } else if left.parenthesized && right.parenthesized {\n-            over(left.inputs(), right.inputs(), |l, r| self.eq_ty(l, r))\n-                && both(&Some(&left.bindings[0].ty()), &Some(&right.bindings[0].ty()), |l, r| {\n-                    self.eq_ty(l, r)\n-                })\n         } else {\n             false\n         }"}, {"sha": "75aa25906aa0fa2c28ba9d9f97c3cf9d97efe42d", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -0,0 +1,20 @@\n+// edition: 2021\n+\n+#![feature(return_type_notation, async_fn_in_trait)]\n+//~^ WARN the feature `return_type_notation` is incomplete\n+//~| WARN the feature `async_fn_in_trait` is incomplete\n+\n+trait Trait {\n+    async fn method() {}\n+}\n+\n+fn foo<T: Trait<method(i32): Send>>() {}\n+//~^ ERROR argument types not allowed with return type notation\n+\n+fn bar<T: Trait<method(..) -> (): Send>>() {}\n+//~^ ERROR return type not allowed with return type notation\n+\n+fn baz<T: Trait<method(): Send>>() {}\n+//~^ ERROR return type notation arguments must be elided with `..`\n+\n+fn main() {}"}, {"sha": "5b075a0fa2921c47edf4b40e6ede1a73bbdf1eb7", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -0,0 +1,37 @@\n+error: return type not allowed with return type notation\n+  --> $DIR/bad-inputs-and-output.rs:14:28\n+   |\n+LL | fn bar<T: Trait<method(..) -> (): Send>>() {}\n+   |                            ^^^^^ help: remove the return type\n+\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bad-inputs-and-output.rs:3:12\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bad-inputs-and-output.rs:3:34\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |                                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+\n+error: argument types not allowed with return type notation\n+  --> $DIR/bad-inputs-and-output.rs:11:23\n+   |\n+LL | fn foo<T: Trait<method(i32): Send>>() {}\n+   |                       ^^^^^ help: remove the input types: `(..)`\n+\n+error: return type notation arguments must be elided with `..`\n+  --> $DIR/bad-inputs-and-output.rs:17:23\n+   |\n+LL | fn baz<T: Trait<method(): Send>>() {}\n+   |                       ^^ help: add `..`: `(..)`\n+\n+error: aborting due to 3 previous errors; 2 warnings emitted\n+"}, {"sha": "75d1dc745d1d56bc8ef6374444c693f2cbf6df3b", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -0,0 +1,28 @@\n+// revisions: with without\n+// edition: 2021\n+//[with] check-pass\n+\n+#![feature(return_type_notation, async_fn_in_trait)]\n+//~^ WARN the feature `return_type_notation` is incomplete\n+//~| WARN the feature `async_fn_in_trait` is incomplete\n+\n+trait Foo {\n+    async fn method() -> Result<(), ()>;\n+}\n+\n+async fn foo<T: Foo>() -> Result<(), ()> {\n+    T::method().await?;\n+    Ok(())\n+}\n+\n+fn is_send(_: impl Send) {}\n+\n+fn test<\n+    #[cfg(with)] T: Foo<method(..): Send>,\n+    #[cfg(without)] T: Foo,\n+>() {\n+    is_send(foo::<T>());\n+    //[without]~^ ERROR future cannot be sent between threads safely\n+}\n+\n+fn main() {}"}, {"sha": "722c774cb3394e2960917cd54c9812bd3cc7ca2c", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.with.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.with.stderr?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/basic.rs:5:12\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/basic.rs:5:34\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |                                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "1645d8c26502ade1168a84b8f208bcc000e537cd", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.without.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.without.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.without.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.without.stderr?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -0,0 +1,37 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/basic.rs:5:12\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/basic.rs:5:34\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |                                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/basic.rs:24:13\n+   |\n+LL |     is_send(foo::<T>());\n+   |             ^^^^^^^^^^ future returned by `foo` is not `Send`\n+   |\n+   = help: within `impl Future<Output = Result<(), ()>>`, the trait `Send` is not implemented for `impl Future<Output = Result<(), ()>>`\n+note: future is not `Send` as it awaits another future which is not `Send`\n+  --> $DIR/basic.rs:14:5\n+   |\n+LL |     T::method().await?;\n+   |     ^^^^^^^^^^^ await occurs here on type `impl Future<Output = Result<(), ()>>`, which is not `Send`\n+note: required by a bound in `is_send`\n+  --> $DIR/basic.rs:18:20\n+   |\n+LL | fn is_send(_: impl Send) {}\n+   |                    ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to previous error; 2 warnings emitted\n+"}, {"sha": "c8fc980974ed707a6182675237092d2529bf8488", "filename": "tests/ui/associated-type-bounds/return-type-notation/equality.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -0,0 +1,16 @@\n+// edition: 2021\n+\n+#![feature(return_type_notation, async_fn_in_trait)]\n+//~^ WARN the feature `return_type_notation` is incomplete\n+//~| WARN the feature `async_fn_in_trait` is incomplete\n+\n+use std::future::Future;\n+\n+trait Trait {\n+    async fn method() {}\n+}\n+\n+fn test<T: Trait<method(..) = Box<dyn Future<Output = ()>>>>() {}\n+//~^ ERROR return type notation is not allowed to use type equality\n+\n+fn main() {}"}, {"sha": "cd50ff3869460890f18512bf924f66d5a72ac9d0", "filename": "tests/ui/associated-type-bounds/return-type-notation/equality.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -0,0 +1,25 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/equality.rs:3:12\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/equality.rs:3:34\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |                                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+\n+error: return type notation is not allowed to use type equality\n+  --> $DIR/equality.rs:13:18\n+   |\n+LL | fn test<T: Trait<method(..) = Box<dyn Future<Output = ()>>>>() {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 2 warnings emitted\n+"}, {"sha": "1263cae44775e97dde456204999de731d3bffc5a", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -0,0 +1,14 @@\n+// edition: 2021\n+\n+#![feature(return_type_notation, async_fn_in_trait)]\n+//~^ WARN the feature `return_type_notation` is incomplete\n+//~| WARN the feature `async_fn_in_trait` is incomplete\n+\n+trait Trait {\n+    async fn method() {}\n+}\n+\n+fn bar<T: Trait<methid(..): Send>>() {}\n+//~^ ERROR cannot find associated function `methid` in trait `Trait`\n+\n+fn main() {}"}, {"sha": "93111b5c36b13f399f0b3849949e4e4019b9e911", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -0,0 +1,25 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/missing.rs:3:12\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/missing.rs:3:34\n+   |\n+LL | #![feature(return_type_notation, async_fn_in_trait)]\n+   |                                  ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+\n+error: cannot find associated function `methid` in trait `Trait`\n+  --> $DIR/missing.rs:11:17\n+   |\n+LL | fn bar<T: Trait<methid(..): Send>>() {}\n+   |                 ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 2 warnings emitted\n+"}, {"sha": "d283c6eab370d6b2d93bc52ada5d9c3921bc5b43", "filename": "tests/ui/associated-type-bounds/return-type-notation/non-rpitit.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -0,0 +1,11 @@\n+#![feature(return_type_notation)]\n+//~^ WARN the feature `return_type_notation` is incomplete\n+\n+trait Trait {\n+    fn method() {}\n+}\n+\n+fn test<T: Trait<method(..): Send>>() {}\n+//~^ ERROR  return type notation used on function that is not `async` and does not return `impl Trait`\n+\n+fn main() {}"}, {"sha": "38c498bc2fbf91c98d2576611549608f4b5e7ecb", "filename": "tests/ui/associated-type-bounds/return-type-notation/non-rpitit.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fnon-rpitit.stderr?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -0,0 +1,22 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/non-rpitit.rs:1:12\n+   |\n+LL | #![feature(return_type_notation)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: return type notation used on function that is not `async` and does not return `impl Trait`\n+  --> $DIR/non-rpitit.rs:8:18\n+   |\n+LL |     fn method() {}\n+   |     ----------- this function must be `async` or return `impl Trait`\n+...\n+LL | fn test<T: Trait<method(..): Send>>() {}\n+   |                  ^^^^^^^^^^^^^^^^\n+   |\n+   = note: function returns `()`, which is not compatible with associated type return bounds\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "85728f8e1ad4da02483be4987e14bc14fa7ce307", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.cfg.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: return type notation is experimental\n+  --> $DIR/feature-gate-return_type_notation.rs:12:18\n+   |\n+LL | fn foo<T: Trait<m(..): Send>>() {}\n+   |                  ^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/feature-gate-return_type_notation.rs:4:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "85728f8e1ad4da02483be4987e14bc14fa7ce307", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.no.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: return type notation is experimental\n+  --> $DIR/feature-gate-return_type_notation.rs:12:18\n+   |\n+LL | fn foo<T: Trait<m(..): Send>>() {}\n+   |                  ^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = help: add `#![feature(return_type_notation)]` to the crate attributes to enable\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/feature-gate-return_type_notation.rs:4:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b75feb130a63e229f83a7ffad06fdbd64a8d1483", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7402519c6303000d49f67a57c96b6863c88a9163/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs?ref=7402519c6303000d49f67a57c96b6863c88a9163", "patch": "@@ -0,0 +1,15 @@\n+// edition: 2021\n+// revisions: cfg no\n+\n+#![feature(async_fn_in_trait)]\n+//~^ WARN the feature `async_fn_in_trait` is incomplete\n+\n+trait Trait {\n+    async fn m();\n+}\n+\n+#[cfg(cfg)]\n+fn foo<T: Trait<m(..): Send>>() {}\n+//~^ ERROR return type notation is experimental\n+\n+fn main() {}"}]}