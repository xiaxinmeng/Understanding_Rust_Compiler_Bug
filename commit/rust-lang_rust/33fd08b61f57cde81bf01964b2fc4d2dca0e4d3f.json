{"sha": "33fd08b61f57cde81bf01964b2fc4d2dca0e4d3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZmQwOGI2MWY1N2NkZTgxYmYwMTk2NGIyZmM0ZDJkY2EwZTRkM2Y=", "commit": {"author": {"name": "Stefan Lankes", "email": "slankes@eonerc.rwth-aachen.de", "date": "2020-10-12T04:51:52Z"}, "committer": {"name": "Stefan Lankes", "email": "slankes@eonerc.rwth-aachen.de", "date": "2020-10-12T04:51:52Z"}, "message": "remove obsolete function diverge", "tree": {"sha": "a9fede811bd5dbe4730edc8fc6be905702487c91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9fede811bd5dbe4730edc8fc6be905702487c91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33fd08b61f57cde81bf01964b2fc4d2dca0e4d3f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJSBAABCAA8FiEEGkIfPZjnqQD6B3IuKFeOu3ie9isFAl+D4PYeHHNsYW5rZXNA\nZW9uZXJjLnJ3dGgtYWFjaGVuLmRlAAoJEChXjrt4nvYrrggP/3j8TgWqq0vgF5N2\nTXj6evMb2/9MUiDHNCA3GeGWBSwXtzny5EuMLGQthiTsgEuFJIhvazAfaHmIyV/Z\ngFuIjfGmF2xgiTNACyIcsLleOhncEyQYtFWytLS96uJahEgsiHYWKYYnuRdEV5rC\nNFT+MJCFbZGr97mqld+i/B/MFO8aLuP8IuwKJvDT+RtkvagvIWMa+FKL/LyPvGnn\nQ79as+LezDVsYPsAtALx/kekSVyJKP8hiDrkzXg7ChDpSABOcSF2AL4vht7Vm4aL\nC4osIJ9StfiQqkBn434vFb8pzOtECBxv3zELCCdK5J8Kqxuc2daRF/jiesqgY34m\nhS6yb1WlE03fzzdCf9zdh/RbSBfBI7Ow1yfPgy6vU0/ayaSY1sJLNTwT89xvI5Xc\nGR/qzqIeMVKvoWuZuw2M99r0JI2Q2IU7JaKOSe9IrwgmbLZiTWIe1ze+H8dFOB+t\nUKUd0R7HT3xyjFwgnBzLey84XeRuqY/mhBm45xyrF74rHtMJd6MiP3TsmoJfvoes\n/DjDxZo212QAXGF+fa9GJrGJyg5a6uux9UufzDNQF7bXWgK5CEPAlRaNIxFxaVv4\n1BRxNtgpu6kvHp4PEJ2lCltQlmFct/jqtn54h4T11PdM3d7AIfBkaF4QttexpAys\nLLwKLlcPEfhQcY8Z/4eykGLLqHF5\n=ul+i\n-----END PGP SIGNATURE-----", "payload": "tree a9fede811bd5dbe4730edc8fc6be905702487c91\nparent 8d8a290c691db7a8ee566edbd485a729eb41d4ba\nauthor Stefan Lankes <slankes@eonerc.rwth-aachen.de> 1602478312 +0200\ncommitter Stefan Lankes <slankes@eonerc.rwth-aachen.de> 1602478312 +0200\n\nremove obsolete function diverge\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33fd08b61f57cde81bf01964b2fc4d2dca0e4d3f", "html_url": "https://github.com/rust-lang/rust/commit/33fd08b61f57cde81bf01964b2fc4d2dca0e4d3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33fd08b61f57cde81bf01964b2fc4d2dca0e4d3f/comments", "author": {"login": "stlankes", "id": 5888473, "node_id": "MDQ6VXNlcjU4ODg0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5888473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlankes", "html_url": "https://github.com/stlankes", "followers_url": "https://api.github.com/users/stlankes/followers", "following_url": "https://api.github.com/users/stlankes/following{/other_user}", "gists_url": "https://api.github.com/users/stlankes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlankes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlankes/subscriptions", "organizations_url": "https://api.github.com/users/stlankes/orgs", "repos_url": "https://api.github.com/users/stlankes/repos", "events_url": "https://api.github.com/users/stlankes/events{/privacy}", "received_events_url": "https://api.github.com/users/stlankes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stlankes", "id": 5888473, "node_id": "MDQ6VXNlcjU4ODg0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5888473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlankes", "html_url": "https://github.com/stlankes", "followers_url": "https://api.github.com/users/stlankes/followers", "following_url": "https://api.github.com/users/stlankes/following{/other_user}", "gists_url": "https://api.github.com/users/stlankes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlankes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlankes/subscriptions", "organizations_url": "https://api.github.com/users/stlankes/orgs", "repos_url": "https://api.github.com/users/stlankes/repos", "events_url": "https://api.github.com/users/stlankes/events{/privacy}", "received_events_url": "https://api.github.com/users/stlankes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d8a290c691db7a8ee566edbd485a729eb41d4ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d8a290c691db7a8ee566edbd485a729eb41d4ba", "html_url": "https://github.com/rust-lang/rust/commit/8d8a290c691db7a8ee566edbd485a729eb41d4ba"}], "stats": {"total": 153, "additions": 0, "deletions": 153}, "files": [{"sha": "829d4c943f11b2b33d743def77331af5136e1270", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33fd08b61f57cde81bf01964b2fc4d2dca0e4d3f/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33fd08b61f57cde81bf01964b2fc4d2dca0e4d3f/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=33fd08b61f57cde81bf01964b2fc4d2dca0e4d3f", "patch": "@@ -334,10 +334,6 @@ impl File {\n     pub fn set_permissions(&self, _perm: FilePermissions) -> io::Result<()> {\n         Err(Error::from_raw_os_error(22))\n     }\n-\n-    pub fn diverge(&self) -> ! {\n-        loop {}\n-    }\n }\n \n impl DirBuilder {"}, {"sha": "4702e5c549228ea27e5c59777cb707b34ea5d248", "filename": "library/std/src/sys/hermit/process.rs", "status": "removed", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/8d8a290c691db7a8ee566edbd485a729eb41d4ba/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d8a290c691db7a8ee566edbd485a729eb41d4ba/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fprocess.rs?ref=8d8a290c691db7a8ee566edbd485a729eb41d4ba", "patch": "@@ -1,149 +0,0 @@\n-use crate::ffi::OsStr;\n-use crate::fmt;\n-use crate::io;\n-use crate::sys::fs::File;\n-use crate::sys::pipe::AnonPipe;\n-use crate::sys::{unsupported, Void};\n-use crate::sys_common::process::CommandEnv;\n-\n-pub use crate::ffi::OsString as EnvKey;\n-\n-////////////////////////////////////////////////////////////////////////////////\n-// Command\n-////////////////////////////////////////////////////////////////////////////////\n-\n-pub struct Command {\n-    env: CommandEnv,\n-}\n-\n-// passed back to std::process with the pipes connected to the child, if any\n-// were requested\n-pub struct StdioPipes {\n-    pub stdin: Option<AnonPipe>,\n-    pub stdout: Option<AnonPipe>,\n-    pub stderr: Option<AnonPipe>,\n-}\n-\n-pub enum Stdio {\n-    Inherit,\n-    Null,\n-    MakePipe,\n-}\n-\n-impl Command {\n-    pub fn new(_program: &OsStr) -> Command {\n-        Command { env: Default::default() }\n-    }\n-\n-    pub fn arg(&mut self, _arg: &OsStr) {}\n-\n-    pub fn env_mut(&mut self) -> &mut CommandEnv {\n-        &mut self.env\n-    }\n-\n-    pub fn cwd(&mut self, _dir: &OsStr) {}\n-\n-    pub fn stdin(&mut self, _stdin: Stdio) {}\n-\n-    pub fn stdout(&mut self, _stdout: Stdio) {}\n-\n-    pub fn stderr(&mut self, _stderr: Stdio) {}\n-\n-    pub fn spawn(\n-        &mut self,\n-        _default: Stdio,\n-        _needs_stdin: bool,\n-    ) -> io::Result<(Process, StdioPipes)> {\n-        unsupported()\n-    }\n-}\n-\n-impl From<AnonPipe> for Stdio {\n-    fn from(pipe: AnonPipe) -> Stdio {\n-        pipe.diverge()\n-    }\n-}\n-\n-impl From<File> for Stdio {\n-    fn from(file: File) -> Stdio {\n-        file.diverge()\n-    }\n-}\n-\n-impl fmt::Debug for Command {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        Ok(())\n-    }\n-}\n-\n-pub struct ExitStatus(Void);\n-\n-impl ExitStatus {\n-    pub fn success(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn code(&self) -> Option<i32> {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Clone for ExitStatus {\n-    fn clone(&self) -> ExitStatus {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Copy for ExitStatus {}\n-\n-impl PartialEq for ExitStatus {\n-    fn eq(&self, _other: &ExitStatus) -> bool {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Eq for ExitStatus {}\n-\n-impl fmt::Debug for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-impl fmt::Display for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n-pub struct ExitCode(bool);\n-\n-impl ExitCode {\n-    pub const SUCCESS: ExitCode = ExitCode(false);\n-    pub const FAILURE: ExitCode = ExitCode(true);\n-\n-    pub fn as_i32(&self) -> i32 {\n-        self.0 as i32\n-    }\n-}\n-\n-pub struct Process(Void);\n-\n-impl Process {\n-    pub fn id(&self) -> u32 {\n-        match self.0 {}\n-    }\n-\n-    pub fn kill(&mut self) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn wait(&mut self) -> io::Result<ExitStatus> {\n-        match self.0 {}\n-    }\n-\n-    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n-        match self.0 {}\n-    }\n-}"}]}