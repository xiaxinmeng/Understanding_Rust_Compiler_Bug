{"sha": "cfd768e2e69a3ca8f28d7bc49f2ae3ca744841c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZDc2OGUyZTY5YTNjYThmMjhkN2JjNDlmMmFlM2NhNzQ0ODQxYzg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-10T02:12:36Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T20:48:07Z"}, "message": "hir_map: Provide expression and statement attributes.", "tree": {"sha": "7e47d0ad2bbcd6e5d417c1b1f60b64ec014de506", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e47d0ad2bbcd6e5d417c1b1f60b64ec014de506"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfd768e2e69a3ca8f28d7bc49f2ae3ca744841c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd768e2e69a3ca8f28d7bc49f2ae3ca744841c8", "html_url": "https://github.com/rust-lang/rust/commit/cfd768e2e69a3ca8f28d7bc49f2ae3ca744841c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfd768e2e69a3ca8f28d7bc49f2ae3ca744841c8/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5739ed1f8018943236826b4c0ce8b4ddebaad4e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5739ed1f8018943236826b4c0ce8b4ddebaad4e7", "html_url": "https://github.com/rust-lang/rust/commit/5739ed1f8018943236826b4c0ce8b4ddebaad4e7"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "dfc8560b58de0268dd3fb09ebf3327e117e6b0e7", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfd768e2e69a3ca8f28d7bc49f2ae3ca744841c8/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd768e2e69a3ca8f28d7bc49f2ae3ca744841c8/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=cfd768e2e69a3ca8f28d7bc49f2ae3ca744841c8", "patch": "@@ -22,6 +22,7 @@ use middle::def_id::DefId;\n \n use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId, DUMMY_NODE_ID};\n+use syntax::attr::ThinAttributesExt;\n use syntax::codemap::{Span, Spanned};\n use syntax::parse::token;\n \n@@ -718,6 +719,8 @@ impl<'ast> Map<'ast> {\n             Some(NodeTraitItem(ref ti)) => Some(&ti.attrs[..]),\n             Some(NodeImplItem(ref ii)) => Some(&ii.attrs[..]),\n             Some(NodeVariant(ref v)) => Some(&v.node.attrs[..]),\n+            Some(NodeExpr(ref e)) => Some(e.attrs.as_attr_slice()),\n+            Some(NodeStmt(ref s)) => Some(s.node.attrs()),\n             // unit/tuple structs take the attributes straight from\n             // the struct definition.\n             Some(NodeStructCtor(_)) => {"}, {"sha": "ee530677b60cd7ffb26dcb858c879156cacc4953", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cfd768e2e69a3ca8f28d7bc49f2ae3ca744841c8/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfd768e2e69a3ca8f28d7bc49f2ae3ca744841c8/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=cfd768e2e69a3ca8f28d7bc49f2ae3ca744841c8", "patch": "@@ -39,7 +39,7 @@ use syntax::codemap::{self, Span, Spanned, DUMMY_SP, ExpnId};\n use syntax::abi::Abi;\n use syntax::ast::{Name, NodeId, DUMMY_NODE_ID, TokenTree, AsmDialect};\n use syntax::ast::{Attribute, Lit, StrStyle, FloatTy, IntTy, UintTy, MetaItem};\n-use syntax::attr::ThinAttributes;\n+use syntax::attr::{ThinAttributes, ThinAttributesExt};\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n \n@@ -635,6 +635,16 @@ pub enum Stmt_ {\n     StmtSemi(P<Expr>, NodeId),\n }\n \n+impl Stmt_ {\n+    pub fn attrs(&self) -> &[Attribute] {\n+        match *self {\n+            StmtDecl(ref d, _) => d.node.attrs(),\n+            StmtExpr(ref e, _) |\n+            StmtSemi(ref e, _) => e.attrs.as_attr_slice(),\n+        }\n+    }\n+}\n+\n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n@@ -659,6 +669,15 @@ pub enum Decl_ {\n     DeclItem(ItemId),\n }\n \n+impl Decl_ {\n+    pub fn attrs(&self) -> &[Attribute] {\n+        match *self {\n+            DeclLocal(ref l) => l.attrs.as_attr_slice(),\n+            DeclItem(_) => &[]\n+        }\n+    }\n+}\n+\n /// represents one arm of a 'match'\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Arm {"}]}