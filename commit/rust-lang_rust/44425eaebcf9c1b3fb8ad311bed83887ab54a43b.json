{"sha": "44425eaebcf9c1b3fb8ad311bed83887ab54a43b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NDI1ZWFlYmNmOWMxYjNmYjhhZDMxMWJlZDgzODg3YWI1NGE0M2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-11T08:46:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-11T08:46:45Z"}, "message": "Better error messages while deserializing", "tree": {"sha": "64011248f5c92002bda04fc990d46363bf0e1967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64011248f5c92002bda04fc990d46363bf0e1967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44425eaebcf9c1b3fb8ad311bed83887ab54a43b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44425eaebcf9c1b3fb8ad311bed83887ab54a43b", "html_url": "https://github.com/rust-lang/rust/commit/44425eaebcf9c1b3fb8ad311bed83887ab54a43b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44425eaebcf9c1b3fb8ad311bed83887ab54a43b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8d6d6f23bfb15021be91031ba983da19f0d3ada", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d6d6f23bfb15021be91031ba983da19f0d3ada", "html_url": "https://github.com/rust-lang/rust/commit/f8d6d6f23bfb15021be91031ba983da19f0d3ada"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "a3464a5a3c689b94baa5758be7ec016107b243b5", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44425eaebcf9c1b3fb8ad311bed83887ab54a43b/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44425eaebcf9c1b3fb8ad311bed83887ab54a43b/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=44425eaebcf9c1b3fb8ad311bed83887ab54a43b", "patch": "@@ -31,10 +31,18 @@ mod config;\n mod world;\n mod diagnostics;\n \n+use serde::de::DeserializeOwned;\n+\n pub type Result<T> = std::result::Result<T, Box<dyn std::error::Error + Send + Sync>>;\n pub use crate::{\n     caps::server_capabilities,\n     config::ServerConfig,\n     main_loop::LspError,\n     main_loop::{main_loop, show_message},\n };\n+\n+pub fn from_json<T: DeserializeOwned>(what: &'static str, json: serde_json::Value) -> Result<T> {\n+    let res = T::deserialize(&json)\n+        .map_err(|e| format!(\"Failed to deserialize {}: {}; {}\", what, e, json))?;\n+    Ok(res)\n+}"}, {"sha": "c8a017c5c80c30ea51636c0d55833a24a171be99", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/44425eaebcf9c1b3fb8ad311bed83887ab54a43b/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44425eaebcf9c1b3fb8ad311bed83887ab54a43b/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=44425eaebcf9c1b3fb8ad311bed83887ab54a43b", "patch": "@@ -1,7 +1,7 @@\n //! `ra_lsp_server` binary\n \n use lsp_server::Connection;\n-use ra_lsp_server::{show_message, Result, ServerConfig};\n+use ra_lsp_server::{from_json, show_message, Result, ServerConfig};\n use ra_prof;\n \n fn main() -> Result<()> {\n@@ -45,7 +45,8 @@ fn run_server() -> Result<()> {\n     let server_capabilities = serde_json::to_value(ra_lsp_server::server_capabilities()).unwrap();\n \n     let initialize_params = connection.initialize(server_capabilities)?;\n-    let initialize_params: lsp_types::InitializeParams = serde_json::from_value(initialize_params)?;\n+    let initialize_params =\n+        from_json::<lsp_types::InitializeParams>(\"InitializeParams\", initialize_params)?;\n \n     if let Some(client_info) = initialize_params.client_info {\n         log::info!(\"Client '{}' {}\", client_info.name, client_info.version.unwrap_or_default());\n@@ -62,17 +63,13 @@ fn run_server() -> Result<()> {\n         .filter(|workspaces| !workspaces.is_empty())\n         .unwrap_or_else(|| vec![root]);\n \n-    let server_config: ServerConfig = initialize_params\n+    let server_config = initialize_params\n         .initialization_options\n         .and_then(|v| {\n-            serde_json::from_value(v)\n+            from_json::<ServerConfig>(\"config\", v)\n                 .map_err(|e| {\n-                    log::error!(\"failed to deserialize config: {}\", e);\n-                    show_message(\n-                        lsp_types::MessageType::Error,\n-                        format!(\"failed to deserialize config: {}\", e),\n-                        &connection.sender,\n-                    );\n+                    log::error!(\"{}\", e);\n+                    show_message(lsp_types::MessageType::Error, e.to_string(), &connection.sender);\n                 })\n                 .ok()\n         })"}, {"sha": "59c86bbfa46ee2f362e92f28bec13a19e5173a35", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/44425eaebcf9c1b3fb8ad311bed83887ab54a43b/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44425eaebcf9c1b3fb8ad311bed83887ab54a43b/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=44425eaebcf9c1b3fb8ad311bed83887ab54a43b", "patch": "@@ -35,6 +35,7 @@ use crate::{\n         TryConvWithToVec,\n     },\n     diagnostics::DiagnosticTask,\n+    from_json,\n     req::{self, Decoration, InlayHint, InlayHintsParams, InlayKind},\n     world::WorldSnapshot,\n     LspError, Result,\n@@ -811,7 +812,7 @@ enum CodeLensResolveData {\n pub fn handle_code_lens_resolve(world: WorldSnapshot, code_lens: CodeLens) -> Result<CodeLens> {\n     let _p = profile(\"handle_code_lens_resolve\");\n     let data = code_lens.data.unwrap();\n-    let resolve = serde_json::from_value(data)?;\n+    let resolve = from_json::<Option<CodeLensResolveData>>(\"CodeLensResolveData\", data)?;\n     match resolve {\n         Some(CodeLensResolveData::Impls(lens_params)) => {\n             let locations: Vec<Location> ="}]}