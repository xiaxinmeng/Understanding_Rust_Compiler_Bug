{"sha": "7962b5ae4504d8a76a11521d5d3f5fd89d474806", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NjJiNWFlNDUwNGQ4YTc2YTExNTIxZDVkM2Y1ZmQ4OWQ0NzQ4MDY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-17T11:30:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-17T11:30:16Z"}, "message": "remove size field from Allocation", "tree": {"sha": "634d74a2de50b13b794eabf5623445c857874589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/634d74a2de50b13b794eabf5623445c857874589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7962b5ae4504d8a76a11521d5d3f5fd89d474806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7962b5ae4504d8a76a11521d5d3f5fd89d474806", "html_url": "https://github.com/rust-lang/rust/commit/7962b5ae4504d8a76a11521d5d3f5fd89d474806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7962b5ae4504d8a76a11521d5d3f5fd89d474806/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44ec846f4ea68ffa6d06e7d68f078bd3cc59d4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/44ec846f4ea68ffa6d06e7d68f078bd3cc59d4ec", "html_url": "https://github.com/rust-lang/rust/commit/44ec846f4ea68ffa6d06e7d68f078bd3cc59d4ec"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "2b510dc5962c665c9d220ed93ca70c69340d509d", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7962b5ae4504d8a76a11521d5d3f5fd89d474806/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7962b5ae4504d8a76a11521d5d3f5fd89d474806/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=7962b5ae4504d8a76a11521d5d3f5fd89d474806", "patch": "@@ -27,8 +27,6 @@ pub struct Allocation<Tag = (), Extra = ()> {\n     relocations: Relocations<Tag>,\n     /// Denotes which part of this allocation is initialized.\n     init_mask: InitMask,\n-    /// The size of the allocation. Currently, must always equal `bytes.len()`.\n-    pub size: Size,\n     /// The alignment of the allocation to detect unaligned reads.\n     /// (`Align` guarantees that this is a power of two.)\n     pub align: Align,\n@@ -94,7 +92,6 @@ impl<Tag> Allocation<Tag> {\n             bytes,\n             relocations: Relocations::new(),\n             init_mask: InitMask::new(size, true),\n-            size,\n             align,\n             mutability: Mutability::Not,\n             extra: (),\n@@ -110,7 +107,6 @@ impl<Tag> Allocation<Tag> {\n             bytes: vec![0; size.bytes_usize()],\n             relocations: Relocations::new(),\n             init_mask: InitMask::new(size, false),\n-            size,\n             align,\n             mutability: Mutability::Mut,\n             extra: (),\n@@ -127,7 +123,6 @@ impl Allocation<(), ()> {\n     ) -> Allocation<T, E> {\n         Allocation {\n             bytes: self.bytes,\n-            size: self.size,\n             relocations: Relocations::from_presorted(\n                 self.relocations\n                     .iter()\n@@ -150,7 +145,11 @@ impl Allocation<(), ()> {\n /// Raw accessors. Provide access to otherwise private bytes.\n impl<Tag, Extra> Allocation<Tag, Extra> {\n     pub fn len(&self) -> usize {\n-        self.size.bytes_usize()\n+        self.bytes.len()\n+    }\n+\n+    pub fn size(&self) -> Size {\n+        Size::from_bytes(self.len())\n     }\n \n     /// Looks at a slice which may describe uninitialized bytes or describe a relocation. This differs"}, {"sha": "528f2512afaeb70923a679472449a25d2f147584", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7962b5ae4504d8a76a11521d5d3f5fd89d474806/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7962b5ae4504d8a76a11521d5d3f5fd89d474806/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=7962b5ae4504d8a76a11521d5d3f5fd89d474806", "patch": "@@ -244,7 +244,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         let new_ptr = self.allocate(new_size, new_align, kind);\n         let old_size = match old_size_and_align {\n             Some((size, _align)) => size,\n-            None => self.get_raw(ptr.alloc_id)?.size,\n+            None => self.get_raw(ptr.alloc_id)?.size(),\n         };\n         self.copy(ptr, new_ptr, old_size.min(new_size), /*nonoverlapping*/ true)?;\n         self.deallocate(ptr, old_size_and_align, kind)?;\n@@ -306,11 +306,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             );\n         }\n         if let Some((size, align)) = old_size_and_align {\n-            if size != alloc.size || align != alloc.align {\n+            if size != alloc.size() || align != alloc.align {\n                 throw_ub_format!(\n                     \"incorrect layout on deallocation: {} has size {} and alignment {}, but gave size {} and alignment {}\",\n                     ptr.alloc_id,\n-                    alloc.size.bytes(),\n+                    alloc.size().bytes(),\n                     alloc.align.bytes(),\n                     size.bytes(),\n                     align.bytes(),\n@@ -319,11 +319,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n \n         // Let the machine take some extra action\n-        let size = alloc.size;\n+        let size = alloc.size();\n         AllocationExtra::memory_deallocated(&mut alloc, ptr, size)?;\n \n         // Don't forget to remember size and align of this now-dead allocation\n-        let old = self.dead_alloc_map.insert(ptr.alloc_id, (alloc.size, alloc.align));\n+        let old = self.dead_alloc_map.insert(ptr.alloc_id, (alloc.size(), alloc.align));\n         if old.is_some() {\n             bug!(\"Nothing can be deallocated twice\");\n         }\n@@ -586,7 +586,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // a) cause cycles in case `id` refers to a static\n         // b) duplicate a global's allocation in miri\n         if let Some((_, alloc)) = self.alloc_map.get(id) {\n-            return Ok((alloc.size, alloc.align));\n+            return Ok((alloc.size(), alloc.align));\n         }\n \n         // # Function pointers\n@@ -614,7 +614,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             Some(GlobalAlloc::Memory(alloc)) => {\n                 // Need to duplicate the logic here, because the global allocations have\n                 // different associated types than the interpreter-local ones.\n-                Ok((alloc.size, alloc.align))\n+                Ok((alloc.size(), alloc.align))\n             }\n             Some(GlobalAlloc::Function(_)) => bug!(\"We already checked function pointers above\"),\n             // The rest must be dead."}, {"sha": "c4e1e184ac52a34ebfae2e8e54baa757a3e4b8f4", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7962b5ae4504d8a76a11521d5d3f5fd89d474806/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7962b5ae4504d8a76a11521d5d3f5fd89d474806/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=7962b5ae4504d8a76a11521d5d3f5fd89d474806", "patch": "@@ -776,8 +776,8 @@ pub struct RenderAllocation<'a, 'tcx, Tag, Extra> {\n impl<Tag: Copy + Debug, Extra> std::fmt::Display for RenderAllocation<'a, 'tcx, Tag, Extra> {\n     fn fmt(&self, w: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         let RenderAllocation { tcx, alloc } = *self;\n-        write!(w, \"size: {}, align: {})\", alloc.size.bytes(), alloc.align.bytes())?;\n-        if alloc.size == Size::ZERO {\n+        write!(w, \"size: {}, align: {})\", alloc.size().bytes(), alloc.align.bytes())?;\n+        if alloc.size() == Size::ZERO {\n             // We are done.\n             return write!(w, \" {{}}\");\n         }\n@@ -822,9 +822,9 @@ fn write_allocation_bytes<Tag: Copy + Debug, Extra>(\n     w: &mut dyn std::fmt::Write,\n     prefix: &str,\n ) -> std::fmt::Result {\n-    let num_lines = alloc.size.bytes_usize().saturating_sub(BYTES_PER_LINE);\n+    let num_lines = alloc.size().bytes_usize().saturating_sub(BYTES_PER_LINE);\n     // Number of chars needed to represent all line numbers.\n-    let pos_width = format!(\"{:x}\", alloc.size.bytes()).len();\n+    let pos_width = format!(\"{:x}\", alloc.size().bytes()).len();\n \n     if num_lines > 0 {\n         write!(w, \"{}0x{:02$x} \u2502 \", prefix, 0, pos_width)?;\n@@ -845,7 +845,7 @@ fn write_allocation_bytes<Tag: Copy + Debug, Extra>(\n         }\n     };\n \n-    while i < alloc.size {\n+    while i < alloc.size() {\n         // The line start already has a space. While we could remove that space from the line start\n         // printing and unconditionally print a space here, that would cause the single-line case\n         // to have a single space before it, which looks weird.\n@@ -929,7 +929,7 @@ fn write_allocation_bytes<Tag: Copy + Debug, Extra>(\n             i += Size::from_bytes(1);\n         }\n         // Print a new line header if the next line still has some bytes to print.\n-        if i == line_start + Size::from_bytes(BYTES_PER_LINE) && i != alloc.size {\n+        if i == line_start + Size::from_bytes(BYTES_PER_LINE) && i != alloc.size() {\n             line_start = write_allocation_newline(w, line_start, &ascii, pos_width, prefix)?;\n             ascii.clear();\n         }"}]}