{"sha": "0def954aab97701075317a507995af3d57719b61", "node_id": "C_kwDOAAsO6NoAKDBkZWY5NTRhYWI5NzcwMTA3NTMxN2E1MDc5OTVhZjNkNTc3MTliNjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-19T14:51:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-19T14:51:43Z"}, "message": "Auto merge of #2547 - RalfJung:fake-apis, r=saethlin\n\nnote on deterministic 'fake' API implementations\n\nNow that we also have fake clocks, it seems prudent to warn about this at the top of the readme.\n\nr? `@rust-lang/miri`", "tree": {"sha": "cb047c6fdb3c92edcfc8fcd6afb7b2e8787f1fdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb047c6fdb3c92edcfc8fcd6afb7b2e8787f1fdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0def954aab97701075317a507995af3d57719b61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0def954aab97701075317a507995af3d57719b61", "html_url": "https://github.com/rust-lang/rust/commit/0def954aab97701075317a507995af3d57719b61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0def954aab97701075317a507995af3d57719b61/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd05ff5290afb19e9c79984e3802dca1cb2800f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd05ff5290afb19e9c79984e3802dca1cb2800f3", "html_url": "https://github.com/rust-lang/rust/commit/fd05ff5290afb19e9c79984e3802dca1cb2800f3"}, {"sha": "1a955567d00ae8a1f4e64c2c155c400e7c73cd40", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a955567d00ae8a1f4e64c2c155c400e7c73cd40", "html_url": "https://github.com/rust-lang/rust/commit/1a955567d00ae8a1f4e64c2c155c400e7c73cd40"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "eedc6c7c3c33071cf6da56f66459c9deb09ebd2d", "filename": "README.md", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0def954aab97701075317a507995af3d57719b61/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0def954aab97701075317a507995af3d57719b61/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0def954aab97701075317a507995af3d57719b61", "patch": "@@ -40,8 +40,16 @@ Miri has already discovered some [real-world bugs](#bugs-found-by-miri). If you\n found a bug with Miri, we'd appreciate if you tell us and we'll add it to the\n list!\n \n-However, be aware that Miri will **not catch all cases of undefined behavior**\n-in your program, and cannot run all programs:\n+By default, Miri ensures a fully deterministic execution and isolates the\n+program from the host system. Some APIs that would usually access the host, such\n+as gathering entropy for random number generators, environment variables, and\n+clocks, are replaced by deterministic \"fake\" implementations. Set\n+`MIRIFLAGS=\"-Zmiri-disable-isolation\"` to access the real system APIs instead.\n+(In particular, the \"fake\" system RNG APIs make Miri **not suited for\n+cryptographic use**! Do not generate keys using Miri.)\n+\n+All that said, be aware that Miri will **not catch all cases of undefined\n+behavior** in your program, and cannot run all programs:\n \n * There are still plenty of open questions around the basic invariants for some\n   types and when these invariants even have to hold. Miri tries to avoid false\n@@ -306,9 +314,7 @@ environment variable. We first document the most relevant and most commonly used\n   RNG is used to pick base addresses for allocations, to determine preemption and failure of\n   `compare_exchange_weak`, and to control store buffering for weak memory emulation. When isolation\n   is enabled (the default), this is also used to emulate system entropy. The default seed is 0. You\n-  can increase test coverage by running Miri multiple times with different seeds. **NOTE**: This\n-  entropy is not good enough for cryptographic use! Do not generate secret keys in Miri or perform\n-  other kinds of cryptographic operations that rely on proper random numbers.\n+  can increase test coverage by running Miri multiple times with different seeds.\n * `-Zmiri-strict-provenance` enables [strict\n   provenance](https://github.com/rust-lang/rust/issues/95228) checking in Miri. This means that\n   casting an integer to a pointer yields a result with 'invalid' provenance, i.e., with provenance"}]}