{"sha": "899d193c9dc4d1dbe13698baf76c5368ad117b34", "node_id": "C_kwDOAAsO6NoAKDg5OWQxOTNjOWRjNGQxZGJlMTM2OThiYWY3NmM1MzY4YWQxMTdiMzQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-12T17:07:31Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-12T17:07:31Z"}, "message": "Implement a couple more platform intrinsics", "tree": {"sha": "e052c3a3655f37632eaea81168d8a43cb150c030", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e052c3a3655f37632eaea81168d8a43cb150c030"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/899d193c9dc4d1dbe13698baf76c5368ad117b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/899d193c9dc4d1dbe13698baf76c5368ad117b34", "html_url": "https://github.com/rust-lang/rust/commit/899d193c9dc4d1dbe13698baf76c5368ad117b34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/899d193c9dc4d1dbe13698baf76c5368ad117b34/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecbb33a71b38498250bcc81b815331fbfde40736", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecbb33a71b38498250bcc81b815331fbfde40736", "html_url": "https://github.com/rust-lang/rust/commit/ecbb33a71b38498250bcc81b815331fbfde40736"}], "stats": {"total": 94, "additions": 85, "deletions": 9}, "files": [{"sha": "9e5aefb775324620f2b6789b6dad506180eefc01", "filename": "scripts/test_rustc_tests.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/899d193c9dc4d1dbe13698baf76c5368ad117b34/scripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/899d193c9dc4d1dbe13698baf76c5368ad117b34/scripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftest_rustc_tests.sh?ref=899d193c9dc4d1dbe13698baf76c5368ad117b34", "patch": "@@ -48,7 +48,6 @@ rm tests/ui/proc-macro/allowed-signatures.rs\n rm tests/ui/sse2.rs # cpuid not supported, so sse2 not detected\n rm tests/ui/intrinsics/const-eval-select-x86_64.rs # requires x86_64 vendor intrinsics\n rm tests/ui/simd/array-type.rs # \"Index argument for `simd_insert` is not a constant\"\n-rm tests/ui/simd/intrinsic/float-math-pass.rs # simd_fcos unimplemented\n \n # exotic linkages\n rm tests/ui/issues/issue-33992.rs # unsupported linkages"}, {"sha": "6741362e8b6c6ebcc112698365820d8b11cabd62", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 85, "deletions": 8, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/899d193c9dc4d1dbe13698baf76c5368ad117b34/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899d193c9dc4d1dbe13698baf76c5368ad117b34/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=899d193c9dc4d1dbe13698baf76c5368ad117b34", "patch": "@@ -434,8 +434,36 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         }\n \n-        sym::simd_round => {\n-            intrinsic_args!(fx, args => (a); intrinsic);\n+        sym::simd_fpow => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n+\n+            simd_pair_for_each_lane(fx, a, b, ret, &|fx, lane_ty, _ret_lane_ty, a_lane, b_lane| {\n+                match lane_ty.kind() {\n+                    ty::Float(FloatTy::F32) => fx.lib_call(\n+                        \"powf\",\n+                        vec![AbiParam::new(types::F32), AbiParam::new(types::F32)],\n+                        vec![AbiParam::new(types::F32)],\n+                        &[a_lane, b_lane],\n+                    )[0],\n+                    ty::Float(FloatTy::F64) => fx.lib_call(\n+                        \"pow\",\n+                        vec![AbiParam::new(types::F64), AbiParam::new(types::F64)],\n+                        vec![AbiParam::new(types::F64)],\n+                        &[a_lane, b_lane],\n+                    )[0],\n+                    _ => unreachable!(\"{:?}\", lane_ty),\n+                }\n+            });\n+        }\n+\n+        sym::simd_fpowi => {\n+            intrinsic_args!(fx, args => (a, exp); intrinsic);\n+            let exp = exp.load_scalar(fx);\n \n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n@@ -448,22 +476,71 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 ret,\n                 &|fx, lane_ty, _ret_lane_ty, lane| match lane_ty.kind() {\n                     ty::Float(FloatTy::F32) => fx.lib_call(\n-                        \"roundf\",\n-                        vec![AbiParam::new(types::F32)],\n+                        \"__powisf2\", // compiler-builtins\n+                        vec![AbiParam::new(types::F32), AbiParam::new(types::I32)],\n                         vec![AbiParam::new(types::F32)],\n-                        &[lane],\n+                        &[lane, exp],\n                     )[0],\n                     ty::Float(FloatTy::F64) => fx.lib_call(\n-                        \"round\",\n+                        \"__powidf2\", // compiler-builtins\n+                        vec![AbiParam::new(types::F64), AbiParam::new(types::I32)],\n                         vec![AbiParam::new(types::F64)],\n-                        vec![AbiParam::new(types::F64)],\n-                        &[lane],\n+                        &[lane, exp],\n                     )[0],\n                     _ => unreachable!(\"{:?}\", lane_ty),\n                 },\n             );\n         }\n \n+        sym::simd_fsin\n+        | sym::simd_fcos\n+        | sym::simd_fexp\n+        | sym::simd_fexp2\n+        | sym::simd_flog\n+        | sym::simd_flog10\n+        | sym::simd_flog2\n+        | sym::simd_round => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n+\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n+                let lane_ty = match lane_ty.kind() {\n+                    ty::Float(FloatTy::F32) => types::F32,\n+                    ty::Float(FloatTy::F64) => types::F64,\n+                    _ => unreachable!(\"{:?}\", lane_ty),\n+                };\n+                let name = match (intrinsic, lane_ty) {\n+                    (sym::simd_fsin, types::F32) => \"sinf\",\n+                    (sym::simd_fsin, types::F64) => \"sin\",\n+                    (sym::simd_fcos, types::F32) => \"cosf\",\n+                    (sym::simd_fcos, types::F64) => \"cos\",\n+                    (sym::simd_fexp, types::F32) => \"expf\",\n+                    (sym::simd_fexp, types::F64) => \"exp\",\n+                    (sym::simd_fexp2, types::F32) => \"exp2f\",\n+                    (sym::simd_fexp2, types::F64) => \"exp2\",\n+                    (sym::simd_flog, types::F32) => \"logf\",\n+                    (sym::simd_flog, types::F64) => \"log\",\n+                    (sym::simd_flog10, types::F32) => \"log10f\",\n+                    (sym::simd_flog10, types::F64) => \"log10\",\n+                    (sym::simd_flog2, types::F32) => \"log2f\",\n+                    (sym::simd_flog2, types::F64) => \"log2\",\n+                    (sym::simd_round, types::F32) => \"roundf\",\n+                    (sym::simd_round, types::F64) => \"round\",\n+                    _ => unreachable!(\"{:?}\", intrinsic),\n+                };\n+                fx.lib_call(\n+                    name,\n+                    vec![AbiParam::new(lane_ty)],\n+                    vec![AbiParam::new(lane_ty)],\n+                    &[lane],\n+                )[0]\n+            });\n+        }\n+\n         sym::simd_fabs | sym::simd_fsqrt | sym::simd_ceil | sym::simd_floor | sym::simd_trunc => {\n             intrinsic_args!(fx, args => (a); intrinsic);\n "}]}