{"sha": "2b3e98f4e389ddec4f4ebea4b500cffd73f4928a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiM2U5OGY0ZTM4OWRkZWM0ZjRlYmVhNGI1MDBjZmZkNzNmNDkyOGE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-13T02:11:13Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-09-13T02:11:13Z"}, "message": "resolve: Future proof derive helper attributes", "tree": {"sha": "a8421aa3c41628ddb964d1ff2785241d7f64c4cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8421aa3c41628ddb964d1ff2785241d7f64c4cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a", "html_url": "https://github.com/rust-lang/rust/commit/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b6be5a1ca6a699bfaa26947f905efbb665039a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b6be5a1ca6a699bfaa26947f905efbb665039a5", "html_url": "https://github.com/rust-lang/rust/commit/1b6be5a1ca6a699bfaa26947f905efbb665039a5"}], "stats": {"total": 155, "additions": 117, "deletions": 38}, "files": [{"sha": "f687e022a412cf646215307bf1c0dda60705c971", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 36, "deletions": 38, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=2b3e98f4e389ddec4f4ebea4b500cffd73f4928a", "patch": "@@ -532,41 +532,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         parent_scope.module.legacy_macro_resolutions.borrow_mut()\n             .push((path[0], kind, parent_scope.clone(), result.ok()));\n \n-        if let Ok(Def::NonMacroAttr(NonMacroAttrKind::Custom)) = result {} else {\n-            return result;\n-        }\n-\n-        // At this point we've found that the `attr` is determinately unresolved and thus can be\n-        // interpreted as a custom attribute. Normally custom attributes are feature gated, but\n-        // it may be a custom attribute whitelisted by a derive macro and they do not require\n-        // a feature gate.\n-        //\n-        // So here we look through all of the derive annotations in scope and try to resolve them.\n-        // If they themselves successfully resolve *and* one of the resolved derive macros\n-        // whitelists this attribute's name, then this is a registered attribute and we can convert\n-        // it from a \"generic custom attrite\" into a \"known derive helper attribute\".\n-        assert!(kind == MacroKind::Attr);\n-        enum ConvertToDeriveHelper { Yes, No, DontKnow }\n-        let mut convert_to_derive_helper = ConvertToDeriveHelper::No;\n-        for derive in &parent_scope.derives {\n-            match self.resolve_macro_to_def(derive, MacroKind::Derive, parent_scope, force) {\n-                Ok((_, ext)) => if let SyntaxExtension::ProcMacroDerive(_, inert_attrs, _) = &*ext {\n-                    if inert_attrs.contains(&path[0].name) {\n-                        convert_to_derive_helper = ConvertToDeriveHelper::Yes;\n-                        break\n-                    }\n-                },\n-                Err(Determinacy::Undetermined) =>\n-                    convert_to_derive_helper = ConvertToDeriveHelper::DontKnow,\n-                Err(Determinacy::Determined) => {}\n-            }\n-        }\n-\n-        match convert_to_derive_helper {\n-            ConvertToDeriveHelper::Yes => Ok(Def::NonMacroAttr(NonMacroAttrKind::DeriveHelper)),\n-            ConvertToDeriveHelper::No => result,\n-            ConvertToDeriveHelper::DontKnow => Err(Determinacy::determined(force)),\n-        }\n+        result\n     }\n \n     // Resolve the initial segment of a non-global macro path\n@@ -607,6 +573,13 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         // 2b. Standard library prelude is currently implemented as `macro-use` (closed, controlled)\n         // 3. Language prelude: builtin macros (closed, controlled, except for legacy plugins).\n         // 4. Language prelude: builtin attributes (closed, controlled).\n+        // N (unordered). Derive helpers (open, not controlled). All ambiguities with other names\n+        //    are currently reported as errors. They should be higher in priority than preludes\n+        //    and maybe even names in modules according to the \"general principles\" above. They\n+        //    also should be subject to restricted shadowing because are effectively produced by\n+        //    derives (you need to resolve the derive first to add helpers into scope), but they\n+        //    should be available before the derive is expanded for compatibility.\n+        //    It's mess in general, so we are being conservative for now.\n \n         assert!(ns == TypeNS  || ns == MacroNS);\n         assert!(force || !record_used); // `record_used` implies `force`\n@@ -630,6 +603,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             MacroUsePrelude,\n             BuiltinMacros,\n             BuiltinAttrs,\n+            DeriveHelpers,\n             ExternPrelude,\n             ToolPrelude,\n             StdLibPrelude,\n@@ -679,6 +653,26 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                         Err(Determinacy::Determined)\n                     }\n                 }\n+                WhereToResolve::DeriveHelpers => {\n+                    let mut result = Err(Determinacy::Determined);\n+                    for derive in &parent_scope.derives {\n+                        let parent_scope = ParentScope { derives: Vec::new(), ..*parent_scope };\n+                        if let Ok((_, ext)) = self.resolve_macro_to_def(derive, MacroKind::Derive,\n+                                                                        &parent_scope, force) {\n+                            if let SyntaxExtension::ProcMacroDerive(_, helper_attrs, _) = &*ext {\n+                                if helper_attrs.contains(&ident.name) {\n+                                    let binding =\n+                                        (Def::NonMacroAttr(NonMacroAttrKind::DeriveHelper),\n+                                        ty::Visibility::Public, derive.span, Mark::root())\n+                                        .to_name_binding(self.arenas);\n+                                    result = Ok((binding, FromPrelude(false)));\n+                                    break;\n+                                }\n+                            }\n+                        }\n+                    }\n+                    result\n+                }\n                 WhereToResolve::ExternPrelude => {\n                     if use_prelude && self.extern_prelude.contains(&ident.name) {\n                         if !self.session.features_untracked().extern_prelude &&\n@@ -758,7 +752,8 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     }\n                     WhereToResolve::MacroUsePrelude => WhereToResolve::BuiltinMacros,\n                     WhereToResolve::BuiltinMacros => WhereToResolve::BuiltinAttrs,\n-                    WhereToResolve::BuiltinAttrs => break, // nowhere else to search\n+                    WhereToResolve::BuiltinAttrs => WhereToResolve::DeriveHelpers,\n+                    WhereToResolve::DeriveHelpers => break, // nowhere else to search\n                     WhereToResolve::ExternPrelude => WhereToResolve::ToolPrelude,\n                     WhereToResolve::ToolPrelude => WhereToResolve::StdLibPrelude,\n                     WhereToResolve::StdLibPrelude => WhereToResolve::BuiltinTypes,\n@@ -780,9 +775,12 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n \n                     if let Some(innermost_result) = innermost_result {\n                         // Found another solution, if the first one was \"weak\", report an error.\n-                        if result.0.def() != innermost_result.0.def() &&\n+                        let (def, innermost_def) = (result.0.def(), innermost_result.0.def());\n+                        if def != innermost_def &&\n                            (innermost_result.0.is_glob_import() ||\n-                            innermost_result.0.may_appear_after(parent_scope.expansion, result.0)) {\n+                            innermost_result.0.may_appear_after(parent_scope.expansion, result.0) ||\n+                            innermost_def == Def::NonMacroAttr(NonMacroAttrKind::DeriveHelper) ||\n+                            def == Def::NonMacroAttr(NonMacroAttrKind::DeriveHelper)) {\n                             self.ambiguity_errors.push(AmbiguityError {\n                                 ident,\n                                 b1: innermost_result.0,"}, {"sha": "0fd8aa5638a50c76cde1ded5fc51c49f9039df9a", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/derive-helper-shadowing.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowing.rs?ref=2b3e98f4e389ddec4f4ebea4b500cffd73f4928a", "patch": "@@ -0,0 +1,16 @@\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro_attribute]\n+pub fn my_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_derive(MyTrait, attributes(my_attr))]\n+pub fn derive(input: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}"}, {"sha": "9554cdde4907eb7fcd932347a5790e7d80f03caf", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/issue-53481.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-53481.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-53481.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fissue-53481.rs?ref=2b3e98f4e389ddec4f4ebea4b500cffd73f4928a", "patch": "@@ -0,0 +1,12 @@\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::*;\n+\n+#[proc_macro_derive(MyTrait, attributes(my_attr))]\n+pub fn foo(_: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}"}, {"sha": "c2357d501ee447045c53b84776518f67419c6204", "filename": "src/test/ui-fulldeps/proc-macro/derive-helper-shadowing.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fderive-helper-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fderive-helper-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fderive-helper-shadowing.rs?ref=2b3e98f4e389ddec4f4ebea4b500cffd73f4928a", "patch": "@@ -0,0 +1,10 @@\n+// aux-build:derive-helper-shadowing.rs\n+\n+extern crate derive_helper_shadowing;\n+use derive_helper_shadowing::*;\n+\n+#[derive(MyTrait)]\n+#[my_attr] //~ ERROR `my_attr` is ambiguous\n+struct S;\n+\n+fn main() {}"}, {"sha": "d597b577bb790b82b2af5fff0c365cd31608b15e", "filename": "src/test/ui-fulldeps/proc-macro/derive-helper-shadowing.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fderive-helper-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fderive-helper-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fderive-helper-shadowing.stderr?ref=2b3e98f4e389ddec4f4ebea4b500cffd73f4928a", "patch": "@@ -0,0 +1,21 @@\n+error[E0659]: `my_attr` is ambiguous\n+  --> $DIR/derive-helper-shadowing.rs:7:3\n+   |\n+LL | #[my_attr] //~ ERROR `my_attr` is ambiguous\n+   |   ^^^^^^^ ambiguous name\n+   |\n+note: `my_attr` could refer to the name imported here\n+  --> $DIR/derive-helper-shadowing.rs:4:5\n+   |\n+LL | use derive_helper_shadowing::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: `my_attr` could also refer to the name defined here\n+  --> $DIR/derive-helper-shadowing.rs:6:10\n+   |\n+LL | #[derive(MyTrait)]\n+   |          ^^^^^^^\n+   = note: consider adding an explicit import of `my_attr` to disambiguate\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0659`."}, {"sha": "479fd1db630a392b2350f637279650e954e43573", "filename": "src/test/ui-fulldeps/proc-macro/issue-53481.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fissue-53481.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3e98f4e389ddec4f4ebea4b500cffd73f4928a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fissue-53481.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fissue-53481.rs?ref=2b3e98f4e389ddec4f4ebea4b500cffd73f4928a", "patch": "@@ -0,0 +1,22 @@\n+// compile-pass\n+// aux-build:issue-53481.rs\n+\n+#[macro_use]\n+extern crate issue_53481;\n+\n+mod m1 {\n+    use m2::MyTrait;\n+\n+    #[derive(MyTrait)]\n+    struct A {}\n+}\n+\n+mod m2 {\n+    pub type MyTrait = u8;\n+\n+    #[derive(MyTrait)]\n+    #[my_attr]\n+    struct B {}\n+}\n+\n+fn main() {}"}]}