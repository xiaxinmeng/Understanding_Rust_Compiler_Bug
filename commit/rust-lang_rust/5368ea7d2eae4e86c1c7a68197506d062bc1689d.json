{"sha": "5368ea7d2eae4e86c1c7a68197506d062bc1689d", "node_id": "C_kwDOAAsO6NoAKDUzNjhlYTdkMmVhZTRlODZjMWM3YTY4MTk3NTA2ZDA2MmJjMTY4OWQ", "commit": {"author": {"name": "unknown", "email": "abramlujan@gmail.com", "date": "2022-05-10T05:41:19Z"}, "committer": {"name": "unknown", "email": "abramlujan@gmail.com", "date": "2022-05-10T05:41:19Z"}, "message": "Expose process main_thread_handle on Windows", "tree": {"sha": "57e63729d7bae198d015857768da064b886364e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57e63729d7bae198d015857768da064b886364e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5368ea7d2eae4e86c1c7a68197506d062bc1689d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5368ea7d2eae4e86c1c7a68197506d062bc1689d", "html_url": "https://github.com/rust-lang/rust/commit/5368ea7d2eae4e86c1c7a68197506d062bc1689d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5368ea7d2eae4e86c1c7a68197506d062bc1689d/comments", "author": {"login": "nico-abram", "id": 24706838, "node_id": "MDQ6VXNlcjI0NzA2ODM4", "avatar_url": "https://avatars.githubusercontent.com/u/24706838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nico-abram", "html_url": "https://github.com/nico-abram", "followers_url": "https://api.github.com/users/nico-abram/followers", "following_url": "https://api.github.com/users/nico-abram/following{/other_user}", "gists_url": "https://api.github.com/users/nico-abram/gists{/gist_id}", "starred_url": "https://api.github.com/users/nico-abram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nico-abram/subscriptions", "organizations_url": "https://api.github.com/users/nico-abram/orgs", "repos_url": "https://api.github.com/users/nico-abram/repos", "events_url": "https://api.github.com/users/nico-abram/events{/privacy}", "received_events_url": "https://api.github.com/users/nico-abram/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nico-abram", "id": 24706838, "node_id": "MDQ6VXNlcjI0NzA2ODM4", "avatar_url": "https://avatars.githubusercontent.com/u/24706838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nico-abram", "html_url": "https://github.com/nico-abram", "followers_url": "https://api.github.com/users/nico-abram/followers", "following_url": "https://api.github.com/users/nico-abram/following{/other_user}", "gists_url": "https://api.github.com/users/nico-abram/gists{/gist_id}", "starred_url": "https://api.github.com/users/nico-abram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nico-abram/subscriptions", "organizations_url": "https://api.github.com/users/nico-abram/orgs", "repos_url": "https://api.github.com/users/nico-abram/repos", "events_url": "https://api.github.com/users/nico-abram/events{/privacy}", "received_events_url": "https://api.github.com/users/nico-abram/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dd7e10282aaa7a3e1f5660f8bb043ee4ea07355", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd7e10282aaa7a3e1f5660f8bb043ee4ea07355", "html_url": "https://github.com/rust-lang/rust/commit/0dd7e10282aaa7a3e1f5660f8bb043ee4ea07355"}], "stats": {"total": 59, "additions": 52, "deletions": 7}, "files": [{"sha": "1c7e361c2a4a8d3767ea98b9e140ffce68c71c2c", "filename": "library/std/src/os/windows/process.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5368ea7d2eae4e86c1c7a68197506d062bc1689d/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5368ea7d2eae4e86c1c7a68197506d062bc1689d/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fprocess.rs?ref=5368ea7d2eae4e86c1c7a68197506d062bc1689d", "patch": "@@ -180,3 +180,17 @@ impl CommandExt for process::Command {\n         self\n     }\n }\n+\n+#[unstable(feature = \"windows_process_extensions_main_thread_handle\", issue = \"96723\")]\n+pub trait ChildExt: Sealed {\n+    /// Extracts the main thread raw handle, without taking ownership\n+    #[unstable(feature = \"windows_process_extensions_main_thread_handle\", issue = \"96723\")]\n+    fn main_thread_handle(&self) -> BorrowedHandle<'_>;\n+}\n+\n+#[unstable(feature = \"windows_process_extensions_main_thread_handle\", issue = \"96723\")]\n+impl ChildExt for process::Child {\n+    fn main_thread_handle(&self) -> BorrowedHandle<'_> {\n+        self.handle.main_thread_handle()\n+    }\n+}"}, {"sha": "476b4b21cb1c0e7b90888d7ec51e1581b3b702d7", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5368ea7d2eae4e86c1c7a68197506d062bc1689d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5368ea7d2eae4e86c1c7a68197506d062bc1689d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=5368ea7d2eae4e86c1c7a68197506d062bc1689d", "patch": "@@ -14,7 +14,7 @@ use crate::io::{self, Error, ErrorKind};\n use crate::mem;\n use crate::num::NonZeroI32;\n use crate::os::windows::ffi::{OsStrExt, OsStringExt};\n-use crate::os::windows::io::{AsRawHandle, FromRawHandle, IntoRawHandle};\n+use crate::os::windows::io::{AsHandle, AsRawHandle, BorrowedHandle, FromRawHandle, IntoRawHandle};\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n use crate::sys::args::{self, Arg};\n@@ -334,13 +334,14 @@ impl Command {\n             ))\n         }?;\n \n-        // We close the thread handle because we don't care about keeping\n-        // the thread id valid, and we aren't keeping the thread handle\n-        // around to be able to close it later.\n         unsafe {\n-            drop(Handle::from_raw_handle(pi.hThread));\n-\n-            Ok((Process { handle: Handle::from_raw_handle(pi.hProcess) }, pipes))\n+            Ok((\n+                Process {\n+                    handle: Handle::from_raw_handle(pi.hProcess),\n+                    main_thread_handle: Handle::from_raw_handle(pi.hThread),\n+                },\n+                pipes,\n+            ))\n         }\n     }\n }\n@@ -609,6 +610,7 @@ impl From<File> for Stdio {\n /// for the process to terminate.\n pub struct Process {\n     handle: Handle,\n+    main_thread_handle: Handle,\n }\n \n impl Process {\n@@ -621,6 +623,10 @@ impl Process {\n         unsafe { c::GetProcessId(self.handle.as_raw_handle()) as u32 }\n     }\n \n+    pub fn main_thread_handle(&self) -> BorrowedHandle<'_> {\n+        self.main_thread_handle.as_handle()\n+    }\n+\n     pub fn wait(&mut self) -> io::Result<ExitStatus> {\n         unsafe {\n             let res = c::WaitForSingleObject(self.handle.as_raw_handle(), c::INFINITE);"}, {"sha": "3fc0c75240c33c0adede4c91f73c1d77fcde74e2", "filename": "library/std/src/sys/windows/process/tests.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5368ea7d2eae4e86c1c7a68197506d062bc1689d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5368ea7d2eae4e86c1c7a68197506d062bc1689d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs?ref=5368ea7d2eae4e86c1c7a68197506d062bc1689d", "patch": "@@ -24,6 +24,31 @@ fn test_raw_args() {\n     );\n }\n \n+#[test]\n+fn test_thread_handle() {\n+    use crate::os::windows::io::BorrowedHandle;\n+    use crate::os::windows::process::{ChildExt, CommandExt};\n+    const CREATE_SUSPENDED: u32 = 0x00000004;\n+\n+    let p = Command::new(\"cmd\").args(&[\"/C\", \"exit 0\"]).creation_flags(CREATE_SUSPENDED).spawn();\n+    assert!(p.is_ok());\n+    let mut p = p.unwrap();\n+\n+    extern \"system\" {\n+        fn ResumeThread(_: BorrowedHandle<'_>) -> u32;\n+    }\n+    unsafe {\n+        ResumeThread(p.main_thread_handle());\n+    }\n+\n+    crate::thread::sleep(crate::time::Duration::from_millis(100));\n+\n+    let res = p.try_wait();\n+    assert!(res.is_ok());\n+    assert!(res.unwrap().is_some());\n+    assert!(p.try_wait().unwrap().unwrap().success());\n+}\n+\n #[test]\n fn test_make_command_line() {\n     fn test_wrapper(prog: &str, args: &[&str], force_quotes: bool) -> String {"}]}