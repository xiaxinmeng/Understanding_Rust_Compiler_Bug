{"sha": "3e31ffda973d2fe8e314378a98d0b4633fce9485", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMzFmZmRhOTczZDJmZThlMzE0Mzc4YTk4ZDBiNDYzM2ZjZTk0ODU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-12-17T20:16:10Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-12-17T20:16:10Z"}, "message": "Revert change to evaluation order\n\nThis change breaks some code and doesn't appear to enable any new code.", "tree": {"sha": "8ffb761bfc72004bc1c6dfc7b353d0a07c5e8e7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ffb761bfc72004bc1c6dfc7b353d0a07c5e8e7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e31ffda973d2fe8e314378a98d0b4633fce9485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e31ffda973d2fe8e314378a98d0b4633fce9485", "html_url": "https://github.com/rust-lang/rust/commit/3e31ffda973d2fe8e314378a98d0b4633fce9485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e31ffda973d2fe8e314378a98d0b4633fce9485/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d23e08448332425a84ae23124bea4dbd685536ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/d23e08448332425a84ae23124bea4dbd685536ce", "html_url": "https://github.com/rust-lang/rust/commit/d23e08448332425a84ae23124bea4dbd685536ce"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "c40d781e17c890b6370f8f9e32cd99e9c40603c3", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e31ffda973d2fe8e314378a98d0b4633fce9485/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e31ffda973d2fe8e314378a98d0b4633fce9485/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=3e31ffda973d2fe8e314378a98d0b4633fce9485", "patch": "@@ -336,7 +336,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn vtable_impl(\n         &mut self,\n         impl_def_id: DefId,\n-        mut substs: Normalized<'tcx, SubstsRef<'tcx>>,\n+        substs: Normalized<'tcx, SubstsRef<'tcx>>,\n         cause: ObligationCause<'tcx>,\n         recursion_depth: usize,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -358,9 +358,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // relying on projections in the impl-trait-ref.\n         //\n         // e.g., `impl<U: Tr, V: Iterator<Item=U>> Foo<<U as Tr>::T> for V`\n-        substs.obligations.append(&mut impl_obligations);\n+        impl_obligations.extend(substs.obligations);\n \n-        ImplSourceUserDefinedData { impl_def_id, substs: substs.value, nested: substs.obligations }\n+        ImplSourceUserDefinedData { impl_def_id, substs: substs.value, nested: impl_obligations }\n     }\n \n     fn confirm_object_candidate("}, {"sha": "57809d89aa64cab75bf079a39f6977ca805868fe", "filename": "src/test/ui/traits/impl-evaluation-order.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3e31ffda973d2fe8e314378a98d0b4633fce9485/src%2Ftest%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e31ffda973d2fe8e314378a98d0b4633fce9485/src%2Ftest%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-evaluation-order.rs?ref=3e31ffda973d2fe8e314378a98d0b4633fce9485", "patch": "@@ -0,0 +1,39 @@\n+// Regression test for #79902\n+\n+// Check that evaluation (which is used to determine whether to copy a type in\n+// MIR building) evaluates bounds from normalizing an impl after evaluating\n+// any bounds on the impl.\n+\n+// check-pass\n+\n+trait A {\n+    type B;\n+}\n+trait M {}\n+\n+struct G<T, U>(*const T, *const U);\n+\n+impl<T, U> Clone for G<T, U> {\n+    fn clone(&self) -> Self {\n+        G { ..*self }\n+    }\n+}\n+\n+impl<T, U> Copy for G<T, U::B>\n+where\n+    T: A<B = U>,\n+    U: A,\n+{\n+}\n+\n+impl A for () {\n+    type B = ();\n+}\n+\n+fn is_m<T: M>(_: T) {}\n+\n+fn main() {\n+    let x = G(&(), &());\n+    drop(x);\n+    drop(x);\n+}"}]}