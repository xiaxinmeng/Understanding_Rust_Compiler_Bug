{"sha": "1f06ba486f9a7ac92aca81ab4960e251646f3b97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMDZiYTQ4NmY5YTdhYzkyYWNhODFhYjQ5NjBlMjUxNjQ2ZjNiOTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-24T17:32:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-31T16:41:38Z"}, "message": "extend liveness to compute intrablock liveness and add unit tests", "tree": {"sha": "c09c1d6eed41ee373d5ec700ac98d58e852c4f00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c09c1d6eed41ee373d5ec700ac98d58e852c4f00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f06ba486f9a7ac92aca81ab4960e251646f3b97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f06ba486f9a7ac92aca81ab4960e251646f3b97", "html_url": "https://github.com/rust-lang/rust/commit/1f06ba486f9a7ac92aca81ab4960e251646f3b97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f06ba486f9a7ac92aca81ab4960e251646f3b97/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea03a43fe67f06a13654dc7ddf89e62ba9dbe2e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea03a43fe67f06a13654dc7ddf89e62ba9dbe2e9", "html_url": "https://github.com/rust-lang/rust/commit/ea03a43fe67f06a13654dc7ddf89e62ba9dbe2e9"}], "stats": {"total": 151, "additions": 136, "deletions": 15}, "files": [{"sha": "fc42fd42b1584bf9966ae4883092479ef51e9e4f", "filename": "src/librustc_mir/transform/nll/mod.rs", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1f06ba486f9a7ac92aca81ab4960e251646f3b97/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f06ba486f9a7ac92aca81ab4960e251646f3b97/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs?ref=1f06ba486f9a7ac92aca81ab4960e251646f3b97", "patch": "@@ -16,7 +16,7 @@ use rustc::mir::{Mir, Location, Rvalue, BasicBlock, Statement, StatementKind};\n use rustc::mir::visit::{MutVisitor, Lookup};\n use rustc::mir::transform::{MirPass, MirSource};\n use rustc::infer::{self as rustc_infer, InferCtxt};\n-use rustc::util::nodemap::FxHashSet;\n+use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use syntax_pos::DUMMY_SP;\n use std::collections::HashMap;\n@@ -144,21 +144,34 @@ impl MirPass for NLL {\n     fn run_pass<'a, 'tcx>(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           source: MirSource,\n-                          mir: &mut Mir<'tcx>) {\n+                          input_mir: &mut Mir<'tcx>) {\n         if !tcx.sess.opts.debugging_opts.nll {\n             return;\n         }\n \n         tcx.infer_ctxt().enter(|infcx| {\n             // Clone mir so we can mutate it without disturbing the rest of the compiler\n-            let mut renumbered_mir = mir.clone();\n+            let mir = &mut input_mir.clone();\n \n             let mut visitor = NLLVisitor::new(&infcx);\n-            visitor.visit_mir(&mut renumbered_mir);\n-\n-            let liveness = liveness::liveness_of_locals(&renumbered_mir);\n-\n-            mir_util::dump_mir(tcx, None, \"nll\", &0, source, mir, |pass_where, out| {\n+            visitor.visit_mir(mir);\n+\n+            let liveness = liveness::liveness_of_locals(mir);\n+\n+            let liveness_per_location: FxHashMap<_, _> =\n+                mir\n+                .basic_blocks()\n+                .indices()\n+                .flat_map(|bb| {\n+                    let mut results = vec![];\n+                    liveness.simulate_block(&mir, bb, |location, local_set| {\n+                        results.push((location, local_set.clone()));\n+                    });\n+                    results\n+                })\n+                .collect();\n+\n+            mir_util::dump_mir(infcx.tcx, None, \"nll\", &0, source, mir, |pass_where, out| {\n                 match pass_where {\n                     // Before the CFG, dump out the values for each region variable.\n                     PassWhere::BeforeCFG => {\n@@ -177,15 +190,26 @@ impl MirPass for NLL {\n                         }\n                     }\n \n-                    PassWhere::InCFG(_) => { }\n+                    PassWhere::InCFG(location) => {\n+                        let local_set = &liveness_per_location[&location];\n+                        let mut string = String::new();\n+                        for local in local_set.iter() {\n+                            string.push_str(&format!(\", {:?}\", local));\n+                        }\n+                        if !string.is_empty() {\n+                            writeln!(out, \"        | Live variables here: [{}]\", &string[2..])?;\n+                        } else {\n+                            writeln!(out, \"        | Live variables here: []\")?;\n+                        }\n+                    }\n \n                     PassWhere::AfterCFG => { }\n                 }\n                 Ok(())\n             });\n             let (_lookup_map, regions) = visitor.into_results();\n             let mut inference_context = InferenceContext::new(regions);\n-            inference_context.solve(&infcx, &renumbered_mir);\n+            inference_context.solve(&infcx, mir);\n         })\n     }\n }"}, {"sha": "7e4529e9b5e520c9b0cab549ba54a328a6084ef4", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/1f06ba486f9a7ac92aca81ab4960e251646f3b97/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f06ba486f9a7ac92aca81ab4960e251646f3b97/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=1f06ba486f9a7ac92aca81ab4960e251646f3b97", "patch": "@@ -214,6 +214,90 @@ pub fn liveness_of_locals<'tcx>(mir: &Mir<'tcx>) -> LivenessResult {\n     }\n }\n \n+impl LivenessResult {\n+    /// Walks backwards through the statements/terminator in the given\n+    /// basic block `block`.  At each point within `block`, invokes\n+    /// the callback `op` with the current location and the set of\n+    /// variables that are live on entry to that location.\n+    pub fn simulate_block<'tcx, OP>(&self,\n+                                    mir: &Mir<'tcx>,\n+                                    block: BasicBlock,\n+                                    mut callback: OP)\n+        where OP: FnMut(Location, &LocalSet)\n+    {\n+        let data = &mir[block];\n+\n+        // Get a copy of the bits on exit from the block.\n+        let mut bits = self.outs[block].clone();\n+\n+        // Start with the maximal statement index -- i.e., right before\n+        // the terminator executes.\n+        let mut statement_index = data.statements.len();\n+\n+        // Compute liveness right before terminator and invoke callback.\n+        let terminator_location = Location { block, statement_index };\n+        let terminator_defs_uses = self.defs_uses(mir, terminator_location, &data.terminator);\n+        terminator_defs_uses.apply(&mut bits);\n+        callback(terminator_location, &bits);\n+\n+        // Compute liveness before each statement (in rev order) and invoke callback.\n+        for statement in data.statements.iter().rev() {\n+            statement_index -= 1;\n+            let statement_location = Location { block, statement_index };\n+            let statement_defs_uses = self.defs_uses(mir, statement_location, statement);\n+            statement_defs_uses.apply(&mut bits);\n+            callback(statement_location, &bits);\n+        }\n+\n+        assert_eq!(bits, self.ins[block]);\n+    }\n+\n+    fn defs_uses<'tcx, V>(&self,\n+                          mir: &Mir<'tcx>,\n+                          location: Location,\n+                          thing: &V)\n+                          -> DefsUses\n+        where V: MirVisitable<'tcx>,\n+    {\n+        let locals = mir.local_decls.len();\n+        let mut visitor = DefsUses {\n+            defs: LocalSet::new_empty(locals),\n+            uses: LocalSet::new_empty(locals),\n+        };\n+\n+        // Visit the various parts of the basic block in reverse. If we go\n+        // forward, the logic in `add_def` and `add_use` would be wrong.\n+        thing.apply(location, &mut visitor);\n+\n+        visitor\n+    }\n+}\n+\n+trait MirVisitable<'tcx> {\n+    fn apply<V>(&self, location: Location, visitor: &mut V)\n+        where V: Visitor<'tcx>;\n+}\n+\n+impl<'tcx> MirVisitable<'tcx> for Statement<'tcx> {\n+    fn apply<V>(&self, location: Location, visitor: &mut V)\n+        where V: Visitor<'tcx>\n+    {\n+        visitor.visit_statement(location.block,\n+                                self,\n+                                location)\n+    }\n+}\n+\n+impl<'tcx> MirVisitable<'tcx> for Option<Terminator<'tcx>> {\n+    fn apply<V>(&self, location: Location, visitor: &mut V)\n+        where V: Visitor<'tcx>\n+    {\n+        visitor.visit_terminator(location.block,\n+                                 self.as_ref().unwrap(),\n+                                 location)\n+    }\n+}\n+\n pub fn dump_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           pass_name: &str,\n                           source: MirSource,"}, {"sha": "f0d56db0573b6a27887754c9c1032b2a3cf70753", "filename": "src/test/mir-opt/nll/liveness-call-subtlety.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f06ba486f9a7ac92aca81ab4960e251646f3b97/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f06ba486f9a7ac92aca81ab4960e251646f3b97/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs?ref=1f06ba486f9a7ac92aca81ab4960e251646f3b97", "patch": "@@ -28,15 +28,19 @@ fn main() {\n // START rustc.node12.nll.0.mir\n //    | Variables live on entry to the block bb0:\n //    bb0: {\n-//        StorageLive(_1);                 // scope 1 at /Users/nmatsakis/versioned/rust-3/src/test/mir-opt/nll/liveness-call-subtlety.rs:18:9: 18:14\n-//        _1 = const <std::boxed::Box<T>>::new(const 22usize) -> bb1; // scope 1 at /Users/nmatsakis/versioned/rust-3/src/test/mir-opt/nll/liveness-call-subtlety.rs:18:17: 18:29\n+//        | Live variables here: []\n+//        StorageLive(_1);\n+//        | Live variables here: []\n+//        _1 = const <std::boxed::Box<T>>::new(const 22usize) -> bb1;\n //    }\n // END rustc.node12.nll.0.mir\n // START rustc.node12.nll.0.mir\n //    | Variables live on entry to the block bb1:\n //    | - _1\n //    bb1: {\n-//        StorageLive(_2);                 // scope 1 at /Users/nmatsakis/versioned/rust-3/src/test/mir-opt/nll/liveness-call-subtlety.rs:19:9: 19:20\n-//        _2 = const can_panic() -> [return: bb2, unwind: bb4]; // scope 1 at /Users/nmatsakis/versioned/rust-3/src/test/mir-opt/nll/liveness-call-subtlety.rs:19:9: 19:20\n+//        | Live variables here: [_1]\n+//        StorageLive(_2);\n+//        | Live variables here: [_1]\n+//        _2 = const can_panic() -> [return: bb2, unwind: bb4];\n //    }\n // END rustc.node12.nll.0.mir"}, {"sha": "1fac9484bdb3205875d8194b55f6a5e970f4916e", "filename": "src/test/mir-opt/nll/liveness-drop-intra-block.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f06ba486f9a7ac92aca81ab4960e251646f3b97/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f06ba486f9a7ac92aca81ab4960e251646f3b97/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-drop-intra-block.rs?ref=1f06ba486f9a7ac92aca81ab4960e251646f3b97", "patch": "@@ -27,10 +27,15 @@ fn main() {\n // START rustc.node12.nll.0.mir\n //    | Variables live on entry to the block bb1:\n //    bb1: {\n+//        | Live variables here: []\n //        _1 = const 55usize;\n+//        | Live variables here: [_1]\n //        StorageLive(_3);\n+//        | Live variables here: [_1]\n //        StorageLive(_4);\n+//        | Live variables here: [_1]\n //        _4 = _1;\n+//        | Live variables here: [_4]\n //        _3 = const use_x(_4) -> bb2;\n //    }\n // END rustc.node12.nll.0.mir"}, {"sha": "4380698e704f396b8cdf7b37f46ac6438de43c06", "filename": "src/test/mir-opt/nll/liveness-interblock.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f06ba486f9a7ac92aca81ab4960e251646f3b97/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f06ba486f9a7ac92aca81ab4960e251646f3b97/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-interblock.rs?ref=1f06ba486f9a7ac92aca81ab4960e251646f3b97", "patch": "@@ -12,7 +12,7 @@\n \n fn cond() -> bool { false }\n \n-fn make_live(x: usize) { }\n+fn make_live(_: usize) { }\n \n fn make_dead() { }\n \n@@ -32,14 +32,18 @@ fn main() {\n //     | Variables live on entry to the block bb2:\n //     | - _1\n //     bb2: {\n+//         | Live variables here: [_1]\n //         StorageLive(_4);\n+//         | Live variables here: [_1]\n //         _4 = _1;\n+//         | Live variables here: [_4]\n //         _3 = const make_live(_4) -> bb4;\n //     }\n // END rustc.node18.nll.0.mir\n // START rustc.node18.nll.0.mir\n //     | Variables live on entry to the block bb3:\n //     bb3: {\n+//         | Live variables here: []\n //         _5 = const make_dead() -> bb5;\n //     }\n // END rustc.node18.nll.0.mir"}]}