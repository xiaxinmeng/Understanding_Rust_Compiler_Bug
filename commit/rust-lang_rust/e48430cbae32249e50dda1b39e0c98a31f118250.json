{"sha": "e48430cbae32249e50dda1b39e0c98a31f118250", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ODQzMGNiYWUzMjI0OWU1MGRkYTFiMzllMGM5OGEzMWYxMTgyNTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T17:53:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T17:53:42Z"}, "message": "Simplify", "tree": {"sha": "18e4c33b4ca4dfbf8ea8a797bfb7b856865b21c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18e4c33b4ca4dfbf8ea8a797bfb7b856865b21c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e48430cbae32249e50dda1b39e0c98a31f118250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e48430cbae32249e50dda1b39e0c98a31f118250", "html_url": "https://github.com/rust-lang/rust/commit/e48430cbae32249e50dda1b39e0c98a31f118250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e48430cbae32249e50dda1b39e0c98a31f118250/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d157812cd16f58128646c05bf1b80522d43acfd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d157812cd16f58128646c05bf1b80522d43acfd8", "html_url": "https://github.com/rust-lang/rust/commit/d157812cd16f58128646c05bf1b80522d43acfd8"}], "stats": {"total": 134, "additions": 30, "deletions": 104}, "files": [{"sha": "c4eb28245b2937af491d84a3649cd597ec580b75", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=e48430cbae32249e50dda1b39e0c98a31f118250", "patch": "@@ -3,7 +3,7 @@\n use std::{collections::HashSet, fmt::Write, path::Path, time::Instant};\n \n use ra_db::SourceDatabaseExt;\n-use ra_hir::{AssocItem, Crate, HasBodySource, HasSource, HirDisplay, ModuleDef, Ty, TypeWalk};\n+use ra_hir::{AssocItem, Crate, HasSource, HirDisplay, ModuleDef, Ty, TypeWalk};\n use ra_syntax::AstNode;\n \n use crate::{Result, Verbosity};\n@@ -128,15 +128,16 @@ pub fn run(\n             if let Some(mismatch) = inference_result.type_mismatch_for_expr(expr_id) {\n                 num_type_mismatches += 1;\n                 if verbosity.is_verbose() {\n-                    let src = f.expr_source(db, expr_id);\n+                    let src = f.body_source_map(db).expr_syntax(expr_id);\n                     if let Some(src) = src {\n                         // FIXME: it might be nice to have a function (on Analysis?) that goes from Source<T> -> (LineCol, LineCol) directly\n                         let original_file = src.file_id.original_file(db);\n                         let path = db.file_relative_path(original_file);\n                         let line_index = host.analysis().file_line_index(original_file).unwrap();\n-                        let text_range = src\n-                            .value\n-                            .either(|it| it.syntax().text_range(), |it| it.syntax().text_range());\n+                        let text_range = src.value.either(\n+                            |it| it.syntax_node_ptr().range(),\n+                            |it| it.syntax_node_ptr().range(),\n+                        );\n                         let (start, end) = (\n                             line_index.line_col(text_range.start()),\n                             line_index.line_col(text_range.end()),"}, {"sha": "263c557f310242ffb8969850241382f1fdc5c3b1", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 52, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=e48430cbae32249e50dda1b39e0c98a31f118250", "patch": "@@ -6,7 +6,6 @@ use std::sync::Arc;\n \n use hir_def::{\n     adt::VariantData,\n-    body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n     docs::Documentation,\n     per_ns::PerNs,\n@@ -28,7 +27,7 @@ use crate::{\n     db::{DefDatabase, HirDatabase},\n     expr::{BindingAnnotation, Body, BodySourceMap, ExprValidator, Pat, PatId},\n     ty::{InferenceResult, Namespace, TraitRef},\n-    Either, HasSource, Name, Source, Ty,\n+    Either, Name, Source, Ty,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -560,52 +559,6 @@ impl DefWithBody {\n     }\n }\n \n-pub trait HasBody: Copy {\n-    fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult>;\n-    fn body(self, db: &impl HirDatabase) -> Arc<Body>;\n-    fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap>;\n-    fn expr_scopes(self, db: &impl HirDatabase) -> Arc<ExprScopes>;\n-}\n-\n-impl<T> HasBody for T\n-where\n-    T: Into<DefWithBody> + Copy + HasSource,\n-{\n-    fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n-        db.infer(self.into())\n-    }\n-\n-    fn body(self, db: &impl HirDatabase) -> Arc<Body> {\n-        self.into().body(db)\n-    }\n-\n-    fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n-        self.into().body_source_map(db)\n-    }\n-\n-    fn expr_scopes(self, db: &impl HirDatabase) -> Arc<ExprScopes> {\n-        self.into().expr_scopes(db)\n-    }\n-}\n-\n-impl HasBody for DefWithBody {\n-    fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n-        db.infer(self)\n-    }\n-\n-    fn body(self, db: &impl HirDatabase) -> Arc<Body> {\n-        db.body(self.into())\n-    }\n-\n-    fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n-        db.body_with_source_map(self.into()).1\n-    }\n-\n-    fn expr_scopes(self, db: &impl HirDatabase) -> Arc<ExprScopes> {\n-        db.expr_scopes(self.into())\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Function {\n     pub(crate) id: FunctionId,\n@@ -632,7 +585,7 @@ impl Function {\n         db.function_data(self.id).params.clone()\n     }\n \n-    pub(crate) fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+    pub fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n         db.body_with_source_map(self.id.into()).1\n     }\n \n@@ -966,7 +919,7 @@ pub struct Local {\n \n impl Local {\n     pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n-        let body = self.parent.body(db);\n+        let body = db.body(self.parent.into());\n         match &body[self.pat_id] {\n             Pat::Bind { name, .. } => Some(name.clone()),\n             _ => None,\n@@ -978,7 +931,7 @@ impl Local {\n     }\n \n     pub fn is_mut(self, db: &impl HirDatabase) -> bool {\n-        let body = self.parent.body(db);\n+        let body = db.body(self.parent.into());\n         match &body[self.pat_id] {\n             Pat::Bind { mode, .. } => match mode {\n                 BindingAnnotation::Mutable | BindingAnnotation::RefMut => true,\n@@ -1002,7 +955,7 @@ impl Local {\n     }\n \n     pub fn source(self, db: &impl HirDatabase) -> Source<Either<ast::BindPat, ast::SelfParam>> {\n-        let source_map = self.parent.body_source_map(db);\n+        let (_body, source_map) = db.body_with_source_map(self.parent.into());\n         let src = source_map.pat_syntax(self.pat_id).unwrap(); // Hmm...\n         let root = src.file_syntax(db);\n         src.map(|ast| ast.map(|it| it.cast().unwrap().to_node(&root), |it| it.to_node(&root)))"}, {"sha": "a0e60560306c93cf47f16f01263c6006f7d7674e", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=e48430cbae32249e50dda1b39e0c98a31f118250", "patch": "@@ -2,11 +2,10 @@\n \n use hir_def::{AstItemDef, HasChildSource, HasSource as _, Lookup, VariantId};\n use hir_expand::either::Either;\n-use ra_syntax::ast::{self, AstNode};\n+use ra_syntax::ast;\n \n use crate::{\n-    db::{DefDatabase, HirDatabase},\n-    Const, Enum, EnumVariant, FieldSource, Function, HasBody, Import, MacroDef, Module,\n+    db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, Import, MacroDef, Module,\n     ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n@@ -121,27 +120,3 @@ impl HasSource for Import {\n         src.with_value(ptr.map(|it| it.to_node(&root), |it| it.to_node(&root)))\n     }\n }\n-\n-pub trait HasBodySource: HasBody + HasSource\n-where\n-    Self::Ast: AstNode,\n-{\n-    fn expr_source(\n-        self,\n-        db: &impl HirDatabase,\n-        expr_id: crate::expr::ExprId,\n-    ) -> Option<Source<Either<ast::Expr, ast::RecordField>>> {\n-        let source_map = self.body_source_map(db);\n-        let source_ptr = source_map.expr_syntax(expr_id)?;\n-        let root = source_ptr.file_syntax(db);\n-        let source = source_ptr.map(|ast| ast.map(|it| it.to_node(&root), |it| it.to_node(&root)));\n-        Some(source)\n-    }\n-}\n-\n-impl<T> HasBodySource for T\n-where\n-    T: HasBody + HasSource,\n-    T::Ast: AstNode,\n-{\n-}"}, {"sha": "72d059a27057cbbab82274db7b45b836b73840ae", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=e48430cbae32249e50dda1b39e0c98a31f118250", "patch": "@@ -9,9 +9,9 @@ use ra_syntax::{\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    AssocItem, Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasBody, HasSource,\n-    ImplBlock, Local, MacroDef, Module, ModuleDef, ModuleSource, Source, Static, Struct,\n-    StructField, Trait, TypeAlias, Union, VariantDef,\n+    AssocItem, Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, HasSource, ImplBlock,\n+    Local, MacroDef, Module, ModuleDef, ModuleSource, Source, Static, Struct, StructField, Trait,\n+    TypeAlias, Union, VariantDef,\n };\n \n pub trait FromSource: Sized {\n@@ -221,7 +221,7 @@ impl Local {\n             };\n             Some(res)\n         })?;\n-        let source_map = parent.body_source_map(db);\n+        let (_body, source_map) = db.body_with_source_map(parent.into());\n         let src = src.map(ast::Pat::from);\n         let pat_id = source_map.node_pat(src.as_ref())?;\n         Some(Local { parent, pat_id })"}, {"sha": "70bba2efb13db943e3d2baecd486dcc89ff91ecd", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=e48430cbae32249e50dda1b39e0c98a31f118250", "patch": "@@ -49,11 +49,10 @@ mod marks;\n \n pub use crate::{\n     code_model::{\n-        src::{HasBodySource, HasSource},\n-        Adt, AssocItem, AttrDef, Const, Container, Crate, CrateDependency, DefWithBody, Docs, Enum,\n-        EnumVariant, FieldSource, Function, GenericDef, GenericParam, HasAttrs, HasBody, ImplBlock,\n-        Import, Local, MacroDef, Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct,\n-        StructField, Trait, TypeAlias, Union, VariantDef,\n+        src::HasSource, Adt, AssocItem, AttrDef, Const, Container, Crate, CrateDependency,\n+        DefWithBody, Docs, Enum, EnumVariant, FieldSource, Function, GenericDef, GenericParam,\n+        HasAttrs, ImplBlock, Import, Local, MacroDef, Module, ModuleDef, ModuleSource, ScopeDef,\n+        Static, Struct, StructField, Trait, TypeAlias, Union, VariantDef,\n     },\n     expr::ExprScopes,\n     from_source::FromSource,"}, {"sha": "31390bb7ff528de6580525f8b85bed63b31e774f", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=e48430cbae32249e50dda1b39e0c98a31f118250", "patch": "@@ -28,8 +28,7 @@ use crate::{\n     expr::{BodySourceMap, ExprScopes, ScopeId},\n     ty::method_resolution::{self, implements_trait},\n     Adt, AssocItem, Const, DefWithBody, Either, Enum, EnumVariant, FromSource, Function,\n-    GenericParam, HasBody, Local, MacroDef, Name, Path, ScopeDef, Static, Struct, Trait, Ty,\n-    TypeAlias,\n+    GenericParam, Local, MacroDef, Name, Path, ScopeDef, Static, Struct, Trait, Ty, TypeAlias,\n };\n \n fn try_get_resolver_for_node(db: &impl HirDatabase, node: Source<&SyntaxNode>) -> Option<Resolver> {\n@@ -155,8 +154,8 @@ impl SourceAnalyzer {\n     ) -> SourceAnalyzer {\n         let def_with_body = def_with_body_from_child_node(db, node);\n         if let Some(def) = def_with_body {\n-            let source_map = def.body_source_map(db);\n-            let scopes = def.expr_scopes(db);\n+            let (_body, source_map) = db.body_with_source_map(def.into());\n+            let scopes = db.expr_scopes(def.into());\n             let scope = match offset {\n                 None => scope_for(&scopes, &source_map, node),\n                 Some(offset) => scope_for_offset(&scopes, &source_map, node.with_value(offset)),\n@@ -166,7 +165,7 @@ impl SourceAnalyzer {\n                 resolver,\n                 body_owner: Some(def),\n                 body_source_map: Some(source_map),\n-                infer: Some(def.infer(db)),\n+                infer: Some(db.infer(def)),\n                 scopes: Some(scopes),\n                 file_id: node.file_id,\n             }"}, {"sha": "ddc7d262aa0ec8314ed562aaead9a7852bfbd754", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=e48430cbae32249e50dda1b39e0c98a31f118250", "patch": "@@ -44,8 +44,7 @@ use crate::{\n     db::HirDatabase,\n     expr::{BindingAnnotation, Body, ExprId, PatId},\n     ty::infer::diagnostics::InferenceDiagnostic,\n-    Adt, AssocItem, DefWithBody, FloatTy, Function, HasBody, IntTy, Path, StructField, Trait,\n-    VariantDef,\n+    Adt, AssocItem, DefWithBody, FloatTy, Function, IntTy, Path, StructField, Trait, VariantDef,\n };\n \n macro_rules! ty_app {\n@@ -221,7 +220,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             coerce_unsized_map: Self::init_coerce_unsized_map(db, &resolver),\n             db,\n             owner,\n-            body: owner.body(db),\n+            body: db.body(owner.into()),\n             resolver,\n         }\n     }"}, {"sha": "1a93e5e506756d03d77900a5348c0792d3c79dc6", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48430cbae32249e50dda1b39e0c98a31f118250/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=e48430cbae32249e50dda1b39e0c98a31f118250", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     db::HirDatabase,\n     ty::display::HirDisplay,\n     ty::{ApplicationTy, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk},\n-    Crate, GenericDef, HasBody, ImplBlock, Trait, TypeAlias,\n+    Crate, GenericDef, ImplBlock, Trait, TypeAlias,\n };\n \n /// This represents a trait whose name we could not resolve.\n@@ -715,7 +715,7 @@ fn closure_fn_trait_impl_datum(\n     let fn_once_trait = get_fn_trait(db, krate, super::FnTrait::FnOnce)?;\n     fn_once_trait.associated_type_by_name(db, &name::OUTPUT_TYPE)?;\n \n-    let num_args: u16 = match &data.def.body(db)[data.expr] {\n+    let num_args: u16 = match &db.body(data.def.into())[data.expr] {\n         crate::expr::Expr::Lambda { args, .. } => args.len() as u16,\n         _ => {\n             log::warn!(\"closure for closure type {:?} not found\", data);\n@@ -805,7 +805,7 @@ fn closure_fn_trait_output_assoc_ty_value(\n ) -> Arc<AssociatedTyValue<ChalkIr>> {\n     let impl_id = Impl::ClosureFnTraitImpl(data.clone()).to_chalk(db);\n \n-    let num_args: u16 = match &data.def.body(db)[data.expr] {\n+    let num_args: u16 = match &db.body(data.def.into())[data.expr] {\n         crate::expr::Expr::Lambda { args, .. } => args.len() as u16,\n         _ => {\n             log::warn!(\"closure for closure type {:?} not found\", data);"}]}