{"sha": "70805e6444c7519167c6fb386586bf1099b502eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwODA1ZTY0NDRjNzUxOTE2N2M2ZmIzODY1ODZiZjEwOTliNTAyZWI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-20T02:38:31Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-20T19:07:57Z"}, "message": "Delete ProcessCfgMod\n\nThe previous commit removes the use of this, and now we cleanup.", "tree": {"sha": "1334c81ce16fe89efb309554d12a2dd454df827d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1334c81ce16fe89efb309554d12a2dd454df827d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70805e6444c7519167c6fb386586bf1099b502eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70805e6444c7519167c6fb386586bf1099b502eb", "html_url": "https://github.com/rust-lang/rust/commit/70805e6444c7519167c6fb386586bf1099b502eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70805e6444c7519167c6fb386586bf1099b502eb/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39c0fa847e74e59f96dc6b01d912252f8cdb72eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/39c0fa847e74e59f96dc6b01d912252f8cdb72eb", "html_url": "https://github.com/rust-lang/rust/commit/39c0fa847e74e59f96dc6b01d912252f8cdb72eb"}], "stats": {"total": 70, "additions": 17, "deletions": 53}, "files": [{"sha": "af6522df61e04a8d9c04149f6ed410707505b5da", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -24,7 +24,7 @@ use syntax::edition::Edition;\n use syntax::feature_gate;\n use errors::json::JsonEmitter;\n use syntax::source_map;\n-use syntax::sess::{ParseSess, ProcessCfgMod};\n+use syntax::sess::ParseSess;\n use syntax_pos::{MultiSpan, Span};\n \n use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n@@ -925,7 +925,6 @@ pub fn build_session(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n     registry: errors::registry::Registry,\n-    process_cfg_mod: ProcessCfgMod,\n ) -> Session {\n     let file_path_mapping = sopts.file_path_mapping();\n \n@@ -936,7 +935,6 @@ pub fn build_session(\n         Lrc::new(source_map::SourceMap::new(file_path_mapping)),\n         DiagnosticOutput::Default,\n         Default::default(),\n-        process_cfg_mod,\n     )\n }\n \n@@ -1015,7 +1013,6 @@ pub fn build_session_with_source_map(\n     source_map: Lrc<source_map::SourceMap>,\n     diagnostics_output: DiagnosticOutput,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n-    process_cfg_mod: ProcessCfgMod,\n ) -> Session {\n     // FIXME: This is not general enough to make the warning lint completely override\n     // normal diagnostic warnings, since the warning lint can also be denied and changed\n@@ -1061,7 +1058,6 @@ pub fn build_session_with_source_map(\n         diagnostic_handler,\n         source_map,\n         lint_caps,\n-        process_cfg_mod,\n     )\n }\n \n@@ -1071,7 +1067,6 @@ fn build_session_(\n     span_diagnostic: errors::Handler,\n     source_map: Lrc<source_map::SourceMap>,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n-    process_cfg_mod: ProcessCfgMod,\n ) -> Session {\n     let self_profiler =\n         if let SwitchWithOptPath::Enabled(ref d) = sopts.debugging_opts.self_profile {\n@@ -1109,7 +1104,6 @@ fn build_session_(\n     let parse_sess = ParseSess::with_span_handler(\n         span_diagnostic,\n         source_map,\n-        process_cfg_mod,\n     );\n     let sysroot = match &sopts.maybe_sysroot {\n         Some(sysroot) => sysroot.clone(),"}, {"sha": "70ed4aad7b4aa99a32a619963afd0907f9e2c385", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -21,7 +21,6 @@ use syntax::ast::{self, MetaItemKind};\n use syntax::token;\n use syntax::source_map::{FileName, FileLoader, SourceMap};\n use syntax::sess::ParseSess;\n-use syntax_expand::config::process_configure_mod;\n use syntax_pos::edition;\n \n pub type Result<T> = result::Result<T, ErrorReported>;\n@@ -69,7 +68,7 @@ impl Compiler {\n pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String>)> {\n     syntax::with_default_globals(move || {\n         let cfg = cfgspecs.into_iter().map(|s| {\n-            let sess = ParseSess::with_silent_emitter(process_configure_mod);\n+            let sess = ParseSess::with_silent_emitter();\n             let filename = FileName::cfg_spec_source_code(&s);\n             let mut parser = new_parser_from_source_str(&sess, filename, s.to_string());\n "}, {"sha": "d39a5d3a073450a34ac27be7eda217dbb2c9354f", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -17,7 +17,6 @@ use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel};\n use syntax::symbol::sym;\n use syntax::edition::{Edition, DEFAULT_EDITION};\n use syntax;\n-use syntax_expand::config::process_configure_mod;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{ColorConfig, emitter::HumanReadableErrorType, registry};\n \n@@ -32,7 +31,7 @@ fn build_session_options_and_crate_config(matches: getopts::Matches) -> (Options\n fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n     let registry = registry::Registry::new(&[]);\n     let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n-    let sess = build_session(sessopts, None, registry, process_configure_mod);\n+    let sess = build_session(sessopts, None, registry);\n     (sess, cfg)\n }\n "}, {"sha": "d8e20e17ce835f927239b304185d818771f7e4a8", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -31,7 +31,6 @@ use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::source_map::{FileLoader, RealFileLoader, SourceMap};\n use syntax::symbol::{Symbol, sym};\n use syntax::{self, ast, attr};\n-use syntax_expand::config::process_configure_mod;\n use syntax_pos::edition::Edition;\n #[cfg(not(parallel_compiler))]\n use std::{thread, panic};\n@@ -81,7 +80,6 @@ pub fn create_session(\n         source_map.clone(),\n         diagnostic_output,\n         lint_caps,\n-        process_configure_mod,\n     );\n \n     sess.prof.register_queries(|profiler| {"}, {"sha": "59d7c2b423972c895d4fa1e70cf592286e472e7a", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -40,7 +40,6 @@ impl<'a> Parser<'a> {\n \n     /// Parses a `mod <foo> { ... }` or `mod <foo>;` item.\n     pub(super) fn parse_item_mod(&mut self, outer_attrs: &[Attribute]) -> PResult<'a, ItemInfo> {\n-        // HACK(Centril): See documentation on `ParseSess::process_cfg_mod`.\n         let (in_cfg, outer_attrs) = crate::config::process_configure_mod(\n             self.sess,\n             self.cfg_mods,"}, {"sha": "bfc82ad6e8b17318b1272a7dce6ea1c4ac1aa9ef", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -16,7 +16,6 @@ use syntax::token::{self, Token};\n use syntax::sess::ParseSess;\n use syntax::source_map::SourceMap;\n use syntax::symbol::{kw, sym};\n-use syntax_expand::config::process_configure_mod;\n use syntax_pos::{Span, FileName};\n \n /// Highlights `src`, returning the HTML output.\n@@ -34,7 +33,7 @@ pub fn render_with_highlighting(\n                class, tooltip).unwrap();\n     }\n \n-    let sess = ParseSess::with_silent_emitter(process_configure_mod);\n+    let sess = ParseSess::with_silent_emitter();\n     let fm = sess.source_map().new_source_file(\n         FileName::Custom(String::from(\"rustdoc-highlighting\")),\n         src.to_owned(),"}, {"sha": "8d5463ddbd764447276ef055b050df46f559b44f", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -3,7 +3,6 @@ use rustc_parse::lexer::{StringReader as Lexer};\n use syntax::token;\n use syntax::sess::ParseSess;\n use syntax::source_map::FilePathMapping;\n-use syntax_expand::config::process_configure_mod;\n use syntax_pos::{InnerSpan, FileName};\n \n use crate::clean;\n@@ -28,7 +27,7 @@ struct SyntaxChecker<'a, 'tcx> {\n \n impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n     fn check_rust_syntax(&self, item: &clean::Item, dox: &str, code_block: RustCodeBlock) {\n-        let sess = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n+        let sess = ParseSess::new(FilePathMapping::empty());\n         let source_file = sess.source_map().new_source_file(\n             FileName::Custom(String::from(\"doctest\")),\n             dox[code_block.code].to_owned(),"}, {"sha": "22f209b8bada1503f3d2531d0e95bbd396712492", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -17,7 +17,6 @@ use std::path::PathBuf;\n use std::process::{self, Command, Stdio};\n use std::str;\n use syntax::symbol::sym;\n-use syntax_expand::config::process_configure_mod;\n use syntax_pos::{BytePos, DUMMY_SP, Pos, Span, FileName};\n use tempfile::Builder as TempFileBuilder;\n use testing;\n@@ -415,7 +414,7 @@ pub fn make_test(s: &str,\n         let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n         // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n         let handler = Handler::with_emitter(false, None, box emitter);\n-        let sess = ParseSess::with_span_handler(handler, cm, process_configure_mod);\n+        let sess = ParseSess::with_span_handler(handler, cm);\n \n         let mut found_main = false;\n         let mut found_extern_crate = cratename.is_none();"}, {"sha": "740e9dfe45935909df20a56cc9512be812ef564c", "filename": "src/libsyntax/sess.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibsyntax%2Fsess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibsyntax%2Fsess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsess.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -1,7 +1,7 @@\n //! Contains `ParseSess` which holds state living beyond what one `Parser` might.\n //! It also serves as an input to the parser itself.\n \n-use crate::ast::{CrateConfig, NodeId, Attribute};\n+use crate::ast::{CrateConfig, NodeId};\n use crate::early_buffered_lints::{BufferedEarlyLint, BufferedEarlyLintId};\n use crate::source_map::{SourceMap, FilePathMapping};\n use crate::feature_gate::UnstableFeatures;\n@@ -89,40 +89,26 @@ pub struct ParseSess {\n     pub gated_spans: GatedSpans,\n     /// The parser has reached `Eof` due to an unclosed brace. Used to silence unnecessary errors.\n     pub reached_eof: Lock<bool>,\n-    /// Process the potential `cfg` attributes on a module.\n-    /// Also determine if the module should be included in this configuration.\n-    ///\n-    /// HACK(Centril): This is used to break a cyclic dependency between\n-    /// the parser and cfg-stripping as defined in `syntax_expand::config`.\n-    /// The dependency edge from the parser comes from `parse_item_mod`.\n-    /// A principled solution to this hack would be to implement [#64197].\n-    ///\n-    /// [#64197]: https://github.com/rust-lang/rust/issues/64197\n-    pub process_cfg_mod: ProcessCfgMod,\n }\n \n-pub type ProcessCfgMod = fn(&ParseSess, bool, &[Attribute]) -> (bool, Vec<Attribute>);\n-\n impl ParseSess {\n-    pub fn new(file_path_mapping: FilePathMapping, process_cfg_mod: ProcessCfgMod) -> Self {\n+    pub fn new(file_path_mapping: FilePathMapping) -> Self {\n         let cm = Lrc::new(SourceMap::new(file_path_mapping));\n         let handler = Handler::with_tty_emitter(\n             ColorConfig::Auto,\n             true,\n             None,\n             Some(cm.clone()),\n         );\n-        ParseSess::with_span_handler(handler, cm, process_cfg_mod)\n+        ParseSess::with_span_handler(handler, cm)\n     }\n \n     pub fn with_span_handler(\n         handler: Handler,\n         source_map: Lrc<SourceMap>,\n-        process_cfg_mod: ProcessCfgMod,\n     ) -> Self {\n         Self {\n             span_diagnostic: handler,\n-            process_cfg_mod,\n             unstable_features: UnstableFeatures::from_environment(),\n             config: FxHashSet::default(),\n             edition: ExpnId::root().expn_data().edition,\n@@ -138,10 +124,10 @@ impl ParseSess {\n         }\n     }\n \n-    pub fn with_silent_emitter(process_cfg_mod: ProcessCfgMod) -> Self {\n+    pub fn with_silent_emitter() -> Self {\n         let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let handler = Handler::with_emitter(false, None, Box::new(SilentEmitter));\n-        ParseSess::with_span_handler(handler, cm, process_cfg_mod)\n+        ParseSess::with_span_handler(handler, cm)\n     }\n \n     #[inline]"}, {"sha": "75e4ee805b200b71d5ea5357ae68e550f0546f48", "filename": "src/libsyntax_expand/parse/lexer/tests.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibsyntax_expand%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibsyntax_expand%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fparse%2Flexer%2Ftests.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -1,5 +1,3 @@\n-use crate::config::process_configure_mod;\n-\n use rustc_data_structures::sync::Lrc;\n use rustc_parse::lexer::StringReader;\n use syntax::token::{self, Token, TokenKind};\n@@ -27,7 +25,6 @@ fn mk_sess(sm: Lrc<SourceMap>) -> ParseSess {\n     ParseSess::with_span_handler(\n         Handler::with_emitter(true, None, Box::new(emitter)),\n         sm,\n-        process_configure_mod,\n     )\n }\n "}, {"sha": "08950ddefbaee3d03b73a9c9f6c80672ee063c3b", "filename": "src/libsyntax_expand/parse/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibsyntax_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibsyntax_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fparse%2Ftests.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -1,4 +1,3 @@\n-use crate::config::process_configure_mod;\n use crate::tests::{matches_codepattern, string_to_stream, with_error_checking_parse};\n \n use rustc_parse::new_parser_from_source_str;\n@@ -19,7 +18,7 @@ use errors::PResult;\n use std::path::PathBuf;\n \n fn sess() -> ParseSess {\n-    ParseSess::new(FilePathMapping::empty(), process_configure_mod)\n+    ParseSess::new(FilePathMapping::empty())\n }\n \n /// Parses an item."}, {"sha": "425eb305845b4c7c915e674d2d89d1b5275cd81d", "filename": "src/libsyntax_expand/tests.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibsyntax_expand%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Flibsyntax_expand%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Ftests.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -1,4 +1,3 @@\n-use crate::config::process_configure_mod;\n use rustc_parse::{source_file_to_stream, new_parser_from_source_str, parser::Parser};\n use syntax::ast;\n use syntax::tokenstream::TokenStream;\n@@ -34,7 +33,7 @@ crate fn with_error_checking_parse<'a, T, F>(s: String, ps: &'a ParseSess, f: F)\n \n /// Maps a string to tts, using a made-up filename.\n crate fn string_to_stream(source_str: String) -> TokenStream {\n-    let ps = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n+    let ps = ParseSess::new(FilePathMapping::empty());\n     source_file_to_stream(\n         &ps,\n         ps.source_map().new_source_file(PathBuf::from(\"bogofile\").into(),\n@@ -44,7 +43,7 @@ crate fn string_to_stream(source_str: String) -> TokenStream {\n \n /// Parses a string, returns a crate.\n crate fn string_to_crate(source_str : String) -> ast::Crate {\n-    let ps = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n+    let ps = ParseSess::new(FilePathMapping::empty());\n     with_error_checking_parse(source_str, &ps, |p| {\n         p.parse_crate_mod()\n     })"}, {"sha": "d6d49df63ef1556a5f7540fc0280b1fc96b5aa31", "filename": "src/test/ui-fulldeps/ast_stmt_expr_attr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -22,7 +22,6 @@ use syntax::source_map::{FilePathMapping, FileName};\n use syntax::ptr::P;\n use syntax::print::pprust;\n use syntax::token;\n-use syntax_expand::config::process_configure_mod;\n use std::fmt;\n \n // Copied out of syntax::util::parser_testing\n@@ -75,7 +74,7 @@ fn str_compare<T, F: Fn(&T) -> String>(e: &str, expected: &[T], actual: &[T], f:\n }\n \n fn sess() -> ParseSess {\n-    ParseSess::new(FilePathMapping::empty(), process_configure_mod)\n+    ParseSess::new(FilePathMapping::empty())\n }\n \n fn check_expr_attrs(es: &str, expected: &[&str]) {"}, {"sha": "cf675831cfe06e412e22adc17391a6f9ed1b65b4", "filename": "src/test/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -12,7 +12,6 @@ use rustc_parse::new_parser_from_file;\n use std::path::Path;\n use syntax::sess::ParseSess;\n use syntax::source_map::FilePathMapping;\n-use syntax_expand::config::process_configure_mod;\n \n #[path = \"mod_dir_simple/test.rs\"]\n mod gravy;\n@@ -24,7 +23,7 @@ pub fn main() {\n }\n \n fn parse() {\n-    let parse_session = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n+    let parse_session = ParseSess::new(FilePathMapping::empty());\n \n     let path = Path::new(file!());\n     let path = path.canonicalize().unwrap();"}, {"sha": "290562046e213df063851cf3c3d734b9ae76fdca", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70805e6444c7519167c6fb386586bf1099b502eb/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70805e6444c7519167c6fb386586bf1099b502eb/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=70805e6444c7519167c6fb386586bf1099b502eb", "patch": "@@ -33,7 +33,6 @@ use syntax::source_map::FilePathMapping;\n use syntax::mut_visit::{self, MutVisitor, visit_clobber};\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax_expand::config::process_configure_mod;\n \n fn parse_expr(ps: &ParseSess, src: &str) -> Option<P<Expr>> {\n     let src_as_string = src.to_string();\n@@ -205,7 +204,7 @@ fn main() {\n }\n \n fn run() {\n-    let ps = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n+    let ps = ParseSess::new(FilePathMapping::empty());\n \n     iter_exprs(2, &mut |mut e| {\n         // If the pretty printer is correct, then `parse(print(e))` should be identical to `e`,"}]}