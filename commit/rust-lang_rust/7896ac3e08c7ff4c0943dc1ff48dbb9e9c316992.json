{"sha": "7896ac3e08c7ff4c0943dc1ff48dbb9e9c316992", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4OTZhYzNlMDhjN2ZmNGMwOTQzZGMxZmY0OGRiYjllOWMzMTY5OTI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-21T03:08:28Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-21T09:51:54Z"}, "message": "Rollup merge of #53363 - llogiq:num-individual-nonzero-docs, r=steveklabnik\n\nadd individual docs to `core::num::NonZero*`", "tree": {"sha": "41b62996c65f81c7626b3988cfe25c0a181aeec3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41b62996c65f81c7626b3988cfe25c0a181aeec3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7896ac3e08c7ff4c0943dc1ff48dbb9e9c316992", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlt74L4ACgkQ/vbIBR0O\nATwvMg//Qq8FkDQd6M4apidO+N/FjTJM1uwx/CfuES4IXmuAqkbYHSFlvz/a/BpW\nwB4OQ9nu1KiFUk6mqfllhpsVzwlp9+Bs6rIRceimqEm5NaSmdxKygswYwOWaMwB9\nOO3mEtb+u/LO6y3c2WCVHSL9Wwh5RctsGmXFkhNBefLbhmaGxOWO7/YFxNamCLqN\na7OSqgBPOku3zx2MtAH2xOSKbKUWp8Z++XBsGcecRh/ls9dWftWUGONorGArC/yt\nZq6dN7GRdM9l9cdQso2BYohWe+lw/21cLFLMBtVIFwgPvl97E/qCJaOBA3WlMEMl\nK9uTD/RvAWWd7IcKf1XfzauNnqtOceKzGO1zhctUAiHAfD6aQkZUDv4gYrQLZsNM\nzyfSL14293dxHzwOh5Fxsrr8GuVTmcgQEdguyk3856v+A7tiYeqMuU9lR4jO4PWi\n9zQ25fGZ1G+I/1swCvEmQseas62CB3IG+7v2/bUaN/TPF5UH4eDy36oEgjOwufRu\ngv3T2HiEp+EKryubE5MR5HgrTqT0WtirJcWmZZFVcJF87m4AiPksl+frYR+xZuzt\nRTICPsdO451W7v76kN8DgkvPFa+Vmgb2mJEsfNvE5r6TSerae3Yf55qRyYVw+yp9\n/uFifnND/twSfNBljulKGtxu7F05LM3fGKeGSrMAaj36fRwIaNI=\n=k5H7\n-----END PGP SIGNATURE-----", "payload": "tree 41b62996c65f81c7626b3988cfe25c0a181aeec3\nparent 445718084f481956382f65f2020418f6ebeabcde\nparent 687cc989ca85f61f6244cabd281d91af2958bdf6\nauthor kennytm <kennytm@gmail.com> 1534820908 +0800\ncommitter kennytm <kennytm@gmail.com> 1534845114 +0800\n\nRollup merge of #53363 - llogiq:num-individual-nonzero-docs, r=steveklabnik\n\nadd individual docs to `core::num::NonZero*`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7896ac3e08c7ff4c0943dc1ff48dbb9e9c316992", "html_url": "https://github.com/rust-lang/rust/commit/7896ac3e08c7ff4c0943dc1ff48dbb9e9c316992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7896ac3e08c7ff4c0943dc1ff48dbb9e9c316992/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "445718084f481956382f65f2020418f6ebeabcde", "url": "https://api.github.com/repos/rust-lang/rust/commits/445718084f481956382f65f2020418f6ebeabcde", "html_url": "https://github.com/rust-lang/rust/commit/445718084f481956382f65f2020418f6ebeabcde"}, {"sha": "687cc989ca85f61f6244cabd281d91af2958bdf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/687cc989ca85f61f6244cabd281d91af2958bdf6", "html_url": "https://github.com/rust-lang/rust/commit/687cc989ca85f61f6244cabd281d91af2958bdf6"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "b93428c6321f61e27f8d4279b1c1e02cdd206379", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7896ac3e08c7ff4c0943dc1ff48dbb9e9c316992/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7896ac3e08c7ff4c0943dc1ff48dbb9e9c316992/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=7896ac3e08c7ff4c0943dc1ff48dbb9e9c316992", "patch": "@@ -34,22 +34,32 @@ macro_rules! impl_nonzero_fmt {\n     }\n }\n \n+macro_rules! doc_comment {\n+    ($x:expr, $($tt:tt)*) => {\n+        #[doc = $x]\n+        $($tt)*\n+    };\n+}\n+\n macro_rules! nonzero_integers {\n     ( $( $Ty: ident($Int: ty); )+ ) => {\n         $(\n-            /// An integer that is known not to equal zero.\n-            ///\n-            /// This enables some memory layout optimization.\n-            /// For example, `Option<NonZeroU32>` is the same size as `u32`:\n-            ///\n-            /// ```rust\n-            /// use std::mem::size_of;\n-            /// assert_eq!(size_of::<Option<std::num::NonZeroU32>>(), size_of::<u32>());\n-            /// ```\n-            #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n-            #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n-            #[repr(transparent)]\n-            pub struct $Ty(NonZero<$Int>);\n+            doc_comment! {\n+                concat!(\"An integer that is known not to equal zero.\n+\n+This enables some memory layout optimization.\n+For example, `Option<\", stringify!($Ty), \">` is the same size as `\", stringify!($Int), \"`:\n+\n+```rust\n+use std::mem::size_of;\n+assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", stringify!($Int),\n+\">());\n+```\"),\n+                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+                #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+                #[repr(transparent)]\n+                pub struct $Ty(NonZero<$Int>);\n+            }\n \n             impl $Ty {\n                 /// Create a non-zero without checking the value.\n@@ -176,13 +186,6 @@ pub mod dec2flt;\n pub mod bignum;\n pub mod diy_float;\n \n-macro_rules! doc_comment {\n-    ($x:expr, $($tt:tt)*) => {\n-        #[doc = $x]\n-        $($tt)*\n-    };\n-}\n-\n mod wrapping;\n \n // `Int` + `SignedInt` implemented for signed integers"}]}