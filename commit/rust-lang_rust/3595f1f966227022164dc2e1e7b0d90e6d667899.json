{"sha": "3595f1f966227022164dc2e1e7b0d90e6d667899", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1OTVmMWY5NjYyMjcwMjIxNjRkYzJlMWU3YjBkOTBlNmQ2Njc4OTk=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-29T20:42:02Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-29T20:44:34Z"}, "message": "Disallow overloading a method with one of different type. Closes #703.", "tree": {"sha": "9eb1feb228699b50396514e369bcdc71dd84ff06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9eb1feb228699b50396514e369bcdc71dd84ff06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3595f1f966227022164dc2e1e7b0d90e6d667899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3595f1f966227022164dc2e1e7b0d90e6d667899", "html_url": "https://github.com/rust-lang/rust/commit/3595f1f966227022164dc2e1e7b0d90e6d667899", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3595f1f966227022164dc2e1e7b0d90e6d667899/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3c05b9faec1f2801b3c1987afb7c4059e175007", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c05b9faec1f2801b3c1987afb7c4059e175007", "html_url": "https://github.com/rust-lang/rust/commit/f3c05b9faec1f2801b3c1987afb7c4059e175007"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "48a7e9abbb14afe6abcd81142f5d35a3ea036147", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3595f1f966227022164dc2e1e7b0d90e6d667899/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3595f1f966227022164dc2e1e7b0d90e6d667899/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3595f1f966227022164dc2e1e7b0d90e6d667899", "patch": "@@ -6777,11 +6777,6 @@ fn create_vtbl(cx: @local_ctxt, sp: &span, outer_obj_ty: ty::t,\n                 // member of addtl_meths.  Instead, we have to go\n                 // through addtl_meths and see if there's some method\n                 // in it that has the same name as fm.\n-\n-                // FIXME (part of #543): We're only checking names\n-                // here.  If a method is replacing another, it also\n-                // needs to have the same type, but this should\n-                // probably be enforced in typechecking.\n                 for am: @ast::method  in addtl_meths {\n                     if str::eq(am.node.ident, fm.ident) { ret none; }\n                 }"}, {"sha": "dc32e006287ab9ed9490d46b80e20429e0a02c5e", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3595f1f966227022164dc2e1e7b0d90e6d667899/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3595f1f966227022164dc2e1e7b0d90e6d667899/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=3595f1f966227022164dc2e1e7b0d90e6d667899", "patch": "@@ -2427,19 +2427,29 @@ fn check_expr(fcx: &@fn_ctxt, expr: &@ast::expr) -> bool {\n             // Whenever an outer method overrides an inner, we need to remove\n             // that inner from the type.  Filter inner_obj_methods to remove\n             // any methods that share a name with an outer method.\n-            fn filtering_fn(m: &ty::method,\n+            fn filtering_fn(ccx: @crate_ctxt,\n+                            m: &ty::method,\n                             outer_obj_methods: (@ast::method)[]) ->\n                 option::t[ty::method] {\n \n                 for om: @ast::method in outer_obj_methods {\n                     if str::eq(om.node.ident, m.ident) {\n+                        // We'd better be overriding with one of the same\n+                        // type.  Check to make sure.\n+                        let new_type = ty_of_method(ccx, om);\n+                        if new_type != m {\n+                            ccx.tcx.sess.span_fatal(\n+                                om.span,\n+                                \"Attempted to override method \" +\n+                                m.ident + \" with one of a different type\");\n+                        }\n                         ret none;\n                     }\n                 }\n                 ret some(m);\n             }\n \n-            let f = bind filtering_fn(_, ao.methods);\n+            let f = bind filtering_fn(fcx.ccx, _, ao.methods);\n             inner_obj_methods =\n                 std::ivec::filter_map[ty::method,\n                                       ty::method](f, inner_obj_methods);"}, {"sha": "5f8fa86e1c15bea499f3185d99f272351db6955b", "filename": "src/test/compile-fail/anon-obj-overriding-wrong-type.rs", "status": "renamed", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3595f1f966227022164dc2e1e7b0d90e6d667899/src%2Ftest%2Fcompile-fail%2Fanon-obj-overriding-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3595f1f966227022164dc2e1e7b0d90e6d667899/src%2Ftest%2Fcompile-fail%2Fanon-obj-overriding-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fanon-obj-overriding-wrong-type.rs?ref=3595f1f966227022164dc2e1e7b0d90e6d667899", "patch": "@@ -1,7 +1,4 @@\n-//xfail-stage0\n-//xfail-stage1\n-//xfail-stage2\n-//xfail-stage3\n+//error-pattern: with one of a different type\n use std;\n \n fn main() {\n@@ -13,8 +10,7 @@ fn main() {\n \n     let my_a = a();\n \n-    // This compiles and shouldn't.  You should only be able to\n-    // overload a method with one of the same type.  Issue #703.\n+    // Attempting to override a method with one of a different type.\n     let my_b =\n         obj () {\n             fn foo() -> str { ret \"hello\"; }\n@@ -23,4 +19,4 @@ fn main() {\n         };\n \n     log_err my_b.foo();\n-}\n\\ No newline at end of file\n+}", "previous_filename": "src/test/compile-fail/anon-obj-overloading-wrong-type.rs"}]}