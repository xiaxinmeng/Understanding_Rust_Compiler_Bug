{"sha": "734e68da4ceb1b15b3430302f233d4700d694728", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNGU2OGRhNGNlYjFiMTViMzQzMDMwMmYyMzNkNDcwMGQ2OTQ3Mjg=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-03-07T22:03:56Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-03-07T22:03:56Z"}, "message": "Handle visibility in method call completion", "tree": {"sha": "f204df2d3ce6ca801dafb4c68d0c916a7da597eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f204df2d3ce6ca801dafb4c68d0c916a7da597eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/734e68da4ceb1b15b3430302f233d4700d694728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/734e68da4ceb1b15b3430302f233d4700d694728", "html_url": "https://github.com/rust-lang/rust/commit/734e68da4ceb1b15b3430302f233d4700d694728", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/734e68da4ceb1b15b3430302f233d4700d694728/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aff82cf7ac172f213cb5dcca637cb2c5332294c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/aff82cf7ac172f213cb5dcca637cb2c5332294c1", "html_url": "https://github.com/rust-lang/rust/commit/aff82cf7ac172f213cb5dcca637cb2c5332294c1"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "f93b43fb64e1018f1d9889ca398ce3b4a00072f8", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/734e68da4ceb1b15b3430302f233d4700d694728/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734e68da4ceb1b15b3430302f233d4700d694728/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=734e68da4ceb1b15b3430302f233d4700d694728", "patch": "@@ -571,6 +571,14 @@ impl Function {\n     }\n }\n \n+impl HasVisibility for Function {\n+    fn visibility(&self, db: &impl HirDatabase) -> Visibility {\n+        let function_data = db.function_data(self.id);\n+        let visibility = &function_data.visibility;\n+        visibility.resolve(db, &self.id.resolver(db))\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Const {\n     pub(crate) id: ConstId,"}, {"sha": "8b343af9db5406ccc33864aba0f0fb3f8cf909da", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/734e68da4ceb1b15b3430302f233d4700d694728/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734e68da4ceb1b15b3430302f233d4700d694728/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=734e68da4ceb1b15b3430302f233d4700d694728", "patch": "@@ -7,13 +7,16 @@ use hir_expand::{\n     AstId, InFile,\n };\n use ra_prof::profile;\n-use ra_syntax::ast::{self, AstNode, ImplItem, ModuleItemOwner, NameOwner, TypeAscriptionOwner};\n+use ra_syntax::ast::{\n+    self, AstNode, ImplItem, ModuleItemOwner, NameOwner, TypeAscriptionOwner, VisibilityOwner,\n+};\n \n use crate::{\n     db::DefDatabase,\n     path::{path, GenericArgs, Path},\n     src::HasSource,\n     type_ref::{Mutability, TypeBound, TypeRef},\n+    visibility::RawVisibility,\n     AssocContainerId, AssocItemId, ConstId, ConstLoc, Expander, FunctionId, FunctionLoc, HasModule,\n     ImplId, Intern, Lookup, ModuleId, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n };\n@@ -26,6 +29,7 @@ pub struct FunctionData {\n     /// True if the first param is `self`. This is relevant to decide whether this\n     /// can be called as a method.\n     pub has_self_param: bool,\n+    pub visibility: RawVisibility,\n }\n \n impl FunctionData {\n@@ -72,7 +76,9 @@ impl FunctionData {\n             ret_type\n         };\n \n-        let sig = FunctionData { name, params, ret_type, has_self_param };\n+        let visibility = RawVisibility::from_ast(db, src.map(|s| s.visibility()));\n+\n+        let sig = FunctionData { name, params, ret_type, has_self_param, visibility };\n         Arc::new(sig)\n     }\n }\n@@ -230,7 +236,7 @@ impl ConstData {\n         Arc::new(ConstData::new(&node))\n     }\n \n-    fn new<N: NameOwner + TypeAscriptionOwner>(node: &N) -> ConstData {\n+    fn new<N: NameOwner + TypeAscriptionOwner + VisibilityOwner>(node: &N) -> ConstData {\n         let name = node.name().map(|n| n.as_name());\n         let type_ref = TypeRef::from_ast_opt(node.ascribed_type());\n         ConstData { name, type_ref }"}, {"sha": "acada48ae1102e652e369180767aa8d4b5ee446d", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/734e68da4ceb1b15b3430302f233d4700d694728/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/734e68da4ceb1b15b3430302f233d4700d694728/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=734e68da4ceb1b15b3430302f233d4700d694728", "patch": "@@ -57,7 +57,10 @@ fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: &T\n         let mut seen_methods = FxHashSet::default();\n         let traits_in_scope = ctx.scope().traits_in_scope();\n         receiver.iterate_method_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, func| {\n-            if func.has_self_param(ctx.db) && seen_methods.insert(func.name(ctx.db)) {\n+            if func.has_self_param(ctx.db)\n+                && ctx.scope().module().map_or(true, |m| func.is_visible_from(ctx.db, m))\n+                && seen_methods.insert(func.name(ctx.db))\n+            {\n                 acc.add_function(ctx, func);\n             }\n             None::<()>\n@@ -307,6 +310,39 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_method_completion_private() {\n+        assert_debug_snapshot!(\n+            do_ref_completion(\n+                r\"\n+            struct A {}\n+            mod m {\n+                impl super::A {\n+                    fn private_method(&self) {}\n+                    pub(super) fn the_method(&self) {}\n+                }\n+            }\n+            fn foo(a: A) {\n+               a.<|>\n+            }\n+            \",\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"the_method()\",\n+                source_range: [256; 256),\n+                delete: [256; 256),\n+                insert: \"the_method()$0\",\n+                kind: Method,\n+                lookup: \"the_method\",\n+                detail: \"pub(super) fn the_method(&self)\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n     #[test]\n     fn test_trait_method_completion() {\n         assert_debug_snapshot!("}]}