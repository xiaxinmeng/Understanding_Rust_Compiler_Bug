{"sha": "98a6e720d082b6c936758689c08c3c7dd2e9860e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YTZlNzIwZDA4MmI2YzkzNjc1ODY4OWMwOGMzYzdkZDJlOTg2MGU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-19T17:13:20Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-20T03:58:26Z"}, "message": "Rollup merge of #58392 - scottmcm:less-shifting-in-net-ip, r=oli-obk\n\nUse less explicit shifting in std::net::ip\n\nNow that we have `{to|from}_be_bytes` the code can be simpler.\n\n(Inspired by PR #57740)", "tree": {"sha": "80b4b32e8f9ac30071ffe597d20e48ee8888a9d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80b4b32e8f9ac30071ffe597d20e48ee8888a9d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98a6e720d082b6c936758689c08c3c7dd2e9860e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlxs0GMACgkQ/vbIBR0O\nATwezQ//e7hi2O1AO83rFxHh43vkGEB/boeGIYVbyYF3pUnJGCwltlbGEljJW1iX\nG9HGTPooe9RUwvA0Ixy840v061m7Q8VMh7Wb1igrx1dVKpX+MOisxDK33Q4XYUE2\n+67bbXBraAiIZKbNH3PyLWwnkNQSeKtRAQgq+/z4m8oxWjokq4snMBjI2vRFRvhM\nIn2K6TkMqR7F188bCkr6xzFvdtWmaxW8lWXhppFxMMEdKd/Yxvd/UwJKCH9E8BZJ\n/JDUEHO/iSa28aKftPDKYaCj0s+6eMb5apSStVS8ZsvTV4YPFMJmk15wT87hczCB\nilE/FZUu45hZa9ZyBpEAe2D2h6tuRryt4iUdzR1giwpSx1JzHMtI5jZCYXvUUnAh\n5Be9EanCGRQnIO4Ld5PvpW8uBmFlxAAxjQdX1iq8isU+LgSohqO+4XUD31Qvu/6D\n19VOGwqgGWY+zLS1PhGXMbMj2Zwe3b5z4PTqBudvy68QBmi/5PX4Dcj9HhX0ZABN\nk+FyuU2hy9PgtI7RFxZ6DgPsmkP1295oPDvMKGtOtga6kgEMzt5cCEp52jxUnMt7\n8WbuBM4lS2e6YSmtqoxYnka3LyLaXJLdPP18DPB/HseygR8Uk8SSXE4A4E8e55ek\n5aFMjd2SuopjeXtI1tAWWsE8v/lUn4leVNhn0B2e0PyGJEjAzc4=\n=mWRS\n-----END PGP SIGNATURE-----", "payload": "tree 80b4b32e8f9ac30071ffe597d20e48ee8888a9d0\nparent 07b6d1741683e253b046bc7f7f5c479a6413a931\nparent 5d8058477e9f3a6bbff696b97ae2c06ccbd9133f\nauthor kennytm <kennytm@gmail.com> 1550596400 +0800\ncommitter kennytm <kennytm@gmail.com> 1550635106 +0800\n\nRollup merge of #58392 - scottmcm:less-shifting-in-net-ip, r=oli-obk\n\nUse less explicit shifting in std::net::ip\n\nNow that we have `{to|from}_be_bytes` the code can be simpler.\n\n(Inspired by PR #57740)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98a6e720d082b6c936758689c08c3c7dd2e9860e", "html_url": "https://github.com/rust-lang/rust/commit/98a6e720d082b6c936758689c08c3c7dd2e9860e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98a6e720d082b6c936758689c08c3c7dd2e9860e/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07b6d1741683e253b046bc7f7f5c479a6413a931", "url": "https://api.github.com/repos/rust-lang/rust/commits/07b6d1741683e253b046bc7f7f5c479a6413a931", "html_url": "https://github.com/rust-lang/rust/commit/07b6d1741683e253b046bc7f7f5c479a6413a931"}, {"sha": "5d8058477e9f3a6bbff696b97ae2c06ccbd9133f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8058477e9f3a6bbff696b97ae2c06ccbd9133f", "html_url": "https://github.com/rust-lang/rust/commit/5d8058477e9f3a6bbff696b97ae2c06ccbd9133f"}], "stats": {"total": 83, "additions": 58, "deletions": 25}, "files": [{"sha": "c856129016814d922541b7b81ea7d7b6799b3922", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 58, "deletions": 25, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/98a6e720d082b6c936758689c08c3c7dd2e9860e/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a6e720d082b6c936758689c08c3c7dd2e9860e/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=98a6e720d082b6c936758689c08c3c7dd2e9860e", "patch": "@@ -329,6 +329,8 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n+        // FIXME: should just be u32::from_be_bytes([a, b, c, d]),\n+        // once that method is no longer rustc_const_unstable\n         Ipv4Addr {\n             inner: c::in_addr {\n                 s_addr: u32::to_be(\n@@ -392,6 +394,7 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn octets(&self) -> [u8; 4] {\n+        // This returns the order we want because s_addr is stored in big-endian.\n         self.inner.s_addr.to_ne_bytes()\n     }\n \n@@ -618,9 +621,13 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv6_compatible(&self) -> Ipv6Addr {\n-        Ipv6Addr::new(0, 0, 0, 0, 0, 0,\n-                      ((self.octets()[0] as u16) << 8) | self.octets()[1] as u16,\n-                      ((self.octets()[2] as u16) << 8) | self.octets()[3] as u16)\n+        let octets = self.octets();\n+        Ipv6Addr::from([\n+            0, 0, 0, 0,\n+            0, 0, 0, 0,\n+            0, 0, 0, 0,\n+            octets[0], octets[1], octets[2], octets[3],\n+        ])\n     }\n \n     /// Converts this address to an IPv4-mapped [IPv6 address].\n@@ -639,9 +646,13 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv6_mapped(&self) -> Ipv6Addr {\n-        Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff,\n-                      ((self.octets()[0] as u16) << 8) | self.octets()[1] as u16,\n-                      ((self.octets()[2] as u16) << 8) | self.octets()[3] as u16)\n+        let octets = self.octets();\n+        Ipv6Addr::from([\n+            0, 0, 0, 0,\n+            0, 0, 0, 0,\n+            0, 0, 0xFF, 0xFF,\n+            octets[0], octets[1], octets[2], octets[3],\n+        ])\n     }\n }\n \n@@ -784,7 +795,7 @@ impl From<Ipv4Addr> for u32 {\n     /// ```\n     fn from(ip: Ipv4Addr) -> u32 {\n         let ip = ip.octets();\n-        ((ip[0] as u32) << 24) + ((ip[1] as u32) << 16) + ((ip[2] as u32) << 8) + (ip[3] as u32)\n+        u32::from_be_bytes(ip)\n     }\n }\n \n@@ -801,7 +812,7 @@ impl From<u32> for Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(13, 12, 11, 10), addr);\n     /// ```\n     fn from(ip: u32) -> Ipv4Addr {\n-        Ipv4Addr::new((ip >> 24) as u8, (ip >> 16) as u8, (ip >> 8) as u8, ip as u8)\n+        Ipv4Addr::from(ip.to_be_bytes())\n     }\n }\n \n@@ -909,14 +920,14 @@ impl Ipv6Addr {\n     pub fn segments(&self) -> [u16; 8] {\n         let arr = &self.inner.s6_addr;\n         [\n-            (arr[0] as u16) << 8 | (arr[1] as u16),\n-            (arr[2] as u16) << 8 | (arr[3] as u16),\n-            (arr[4] as u16) << 8 | (arr[5] as u16),\n-            (arr[6] as u16) << 8 | (arr[7] as u16),\n-            (arr[8] as u16) << 8 | (arr[9] as u16),\n-            (arr[10] as u16) << 8 | (arr[11] as u16),\n-            (arr[12] as u16) << 8 | (arr[13] as u16),\n-            (arr[14] as u16) << 8 | (arr[15] as u16),\n+            u16::from_be_bytes([arr[0], arr[1]]),\n+            u16::from_be_bytes([arr[2], arr[3]]),\n+            u16::from_be_bytes([arr[4], arr[5]]),\n+            u16::from_be_bytes([arr[6], arr[7]]),\n+            u16::from_be_bytes([arr[8], arr[9]]),\n+            u16::from_be_bytes([arr[10], arr[11]]),\n+            u16::from_be_bytes([arr[12], arr[13]]),\n+            u16::from_be_bytes([arr[14], arr[15]]),\n         ]\n     }\n \n@@ -1382,21 +1393,43 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n \n #[stable(feature = \"i128\", since = \"1.26.0\")]\n impl From<Ipv6Addr> for u128 {\n+    /// Convert an `Ipv6Addr` into a host byte order `u128`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::new(\n+    ///     0x1020, 0x3040, 0x5060, 0x7080,\n+    ///     0x90A0, 0xB0C0, 0xD0E0, 0xF00D,\n+    /// );\n+    /// assert_eq!(0x102030405060708090A0B0C0D0E0F00D_u128, u128::from(addr));\n+    /// ```\n     fn from(ip: Ipv6Addr) -> u128 {\n-        let ip = ip.segments();\n-        ((ip[0] as u128) << 112) + ((ip[1] as u128) << 96) + ((ip[2] as u128) << 80) +\n-            ((ip[3] as u128) << 64) + ((ip[4] as u128) << 48) + ((ip[5] as u128) << 32) +\n-            ((ip[6] as u128) << 16) + (ip[7] as u128)\n+        let ip = ip.octets();\n+        u128::from_be_bytes(ip)\n     }\n }\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n impl From<u128> for Ipv6Addr {\n+    /// Convert a host byte order `u128` into an `Ipv6Addr`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// let addr = Ipv6Addr::from(0x102030405060708090A0B0C0D0E0F00D_u128);\n+    /// assert_eq!(\n+    ///     Ipv6Addr::new(\n+    ///         0x1020, 0x3040, 0x5060, 0x7080,\n+    ///         0x90A0, 0xB0C0, 0xD0E0, 0xF00D,\n+    ///     ),\n+    ///     addr);\n+    /// ```\n     fn from(ip: u128) -> Ipv6Addr {\n-        Ipv6Addr::new(\n-            (ip >> 112) as u16, (ip >> 96) as u16, (ip >> 80) as u16,\n-            (ip >> 64) as u16, (ip >> 48) as u16, (ip >> 32) as u16,\n-            (ip >> 16) as u16, ip as u16,\n-        )\n+        Ipv6Addr::from(ip.to_be_bytes())\n     }\n }\n "}]}