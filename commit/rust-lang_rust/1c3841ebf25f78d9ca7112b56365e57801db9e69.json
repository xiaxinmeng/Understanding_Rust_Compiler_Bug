{"sha": "1c3841ebf25f78d9ca7112b56365e57801db9e69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMzg0MWViZjI1Zjc4ZDljYTcxMTJiNTYzNjVlNTc4MDFkYjllNjk=", "commit": {"author": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-02-13T23:18:42Z"}, "committer": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-02-14T00:04:18Z"}, "message": "Edit `rustc_arena::DropArena` docs\n\n- Add a \"Safety\" section, edit formatting for clarity\n- Add missing punctuation in code comments", "tree": {"sha": "0d66684fe522df399e29a39190d332554538998c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d66684fe522df399e29a39190d332554538998c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c3841ebf25f78d9ca7112b56365e57801db9e69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3841ebf25f78d9ca7112b56365e57801db9e69", "html_url": "https://github.com/rust-lang/rust/commit/1c3841ebf25f78d9ca7112b56365e57801db9e69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c3841ebf25f78d9ca7112b56365e57801db9e69/comments", "author": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c10a880eca60379343a6c6d19dd5bda38ead55d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c10a880eca60379343a6c6d19dd5bda38ead55d", "html_url": "https://github.com/rust-lang/rust/commit/3c10a880eca60379343a6c6d19dd5bda38ead55d"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "f17c43ceaff73392f7d5abb01f73008ecfd14e99", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1c3841ebf25f78d9ca7112b56365e57801db9e69/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3841ebf25f78d9ca7112b56365e57801db9e69/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=1c3841ebf25f78d9ca7112b56365e57801db9e69", "patch": "@@ -568,10 +568,13 @@ impl Drop for DropType {\n }\n \n /// An arena which can be used to allocate any type.\n+///\n+/// # Safety\n+///\n /// Allocating in this arena is unsafe since the type system\n /// doesn't know which types it contains. In order to\n-/// allocate safely, you must store a PhantomData<T>\n-/// alongside this arena for each type T you allocate.\n+/// allocate safely, you must store a `PhantomData<T>`\n+/// alongside this arena for each type `T` you allocate.\n #[derive(Default)]\n pub struct DropArena {\n     /// A list of destructors to run when the arena drops.\n@@ -589,7 +592,7 @@ impl DropArena {\n         ptr::write(mem, object);\n         let result = &mut *mem;\n         // Record the destructor after doing the allocation as that may panic\n-        // and would cause `object`'s destructor to run twice if it was recorded before\n+        // and would cause `object`'s destructor to run twice if it was recorded before.\n         self.destructors\n             .borrow_mut()\n             .push(DropType { drop_fn: drop_for_type::<T>, obj: result as *mut T as *mut u8 });\n@@ -607,16 +610,16 @@ impl DropArena {\n         let start_ptr = self.arena.alloc_raw(Layout::array::<T>(len).unwrap()) as *mut T;\n \n         let mut destructors = self.destructors.borrow_mut();\n-        // Reserve space for the destructors so we can't panic while adding them\n+        // Reserve space for the destructors so we can't panic while adding them.\n         destructors.reserve(len);\n \n         // Move the content to the arena by copying it and then forgetting\n-        // the content of the SmallVec\n+        // the content of the SmallVec.\n         vec.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n         mem::forget(vec.drain(..));\n \n         // Record the destructors after doing the allocation as that may panic\n-        // and would cause `object`'s destructor to run twice if it was recorded before\n+        // and would cause `object`'s destructor to run twice if it was recorded before.\n         for i in 0..len {\n             destructors\n                 .push(DropType { drop_fn: drop_for_type::<T>, obj: start_ptr.add(i) as *mut u8 });"}]}