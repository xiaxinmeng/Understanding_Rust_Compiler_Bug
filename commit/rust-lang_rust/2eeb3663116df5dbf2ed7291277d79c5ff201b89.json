{"sha": "2eeb3663116df5dbf2ed7291277d79c5ff201b89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZWIzNjYzMTE2ZGY1ZGJmMmVkNzI5MTI3N2Q3OWM1ZmYyMDFiODk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-08-05T01:50:34Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-08-05T01:50:43Z"}, "message": "Ignore comment in wrap_str", "tree": {"sha": "749dae68a48785fbc8f9aecdef08251c233fa70d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/749dae68a48785fbc8f9aecdef08251c233fa70d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eeb3663116df5dbf2ed7291277d79c5ff201b89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eeb3663116df5dbf2ed7291277d79c5ff201b89", "html_url": "https://github.com/rust-lang/rust/commit/2eeb3663116df5dbf2ed7291277d79c5ff201b89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eeb3663116df5dbf2ed7291277d79c5ff201b89/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c19569c5d39862cda8458b3e5156d9686fea215e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c19569c5d39862cda8458b3e5156d9686fea215e", "html_url": "https://github.com/rust-lang/rust/commit/c19569c5d39862cda8458b3e5156d9686fea215e"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "2e7402ed17846232542ca60eb8bd380a56842d05", "filename": "src/comment.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2eeb3663116df5dbf2ed7291277d79c5ff201b89/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eeb3663116df5dbf2ed7291277d79c5ff201b89/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=2eeb3663116df5dbf2ed7291277d79c5ff201b89", "patch": "@@ -1139,6 +1139,21 @@ pub fn recover_comment_removed(\n     }\n }\n \n+pub fn filter_normal_code(code: &str) -> String {\n+    let mut buffer = String::with_capacity(code.len());\n+    LineClasses::new(code).for_each(|(kind, line)| match kind {\n+        FullCodeCharKind::Normal | FullCodeCharKind::InString => {\n+            buffer.push_str(&line);\n+            buffer.push('\\n');\n+        }\n+        _ => (),\n+    });\n+    if !code.ends_with(\"\\n\") && buffer.ends_with(\"\\n\") {\n+        buffer.pop();\n+    }\n+    buffer\n+}\n+\n /// Return true if the two strings of code have the same payload of comments.\n /// The payload of comments is everything in the string except:\n ///     - actual code (not comments)\n@@ -1392,4 +1407,21 @@ mod test {\n         let s = format!(\"    r#\\\"\\n        test\\n    \\\"#\");\n         assert_eq!(remove_trailing_white_spaces(&s), s);\n     }\n+\n+    #[test]\n+    fn test_filter_normal_code() {\n+        let s = r#\"\n+fn main() {\n+    println!(\"hello, world\");\n+}\n+\"#;\n+        assert_eq!(s, filter_normal_code(s));\n+        let s_with_comment = r#\"\n+fn main() {\n+    // hello, world\n+    println!(\"hello, world\");\n+}\n+\"#;\n+        assert_eq!(s, filter_normal_code(s_with_comment));\n+    }\n }"}, {"sha": "9eac3fd4f0ddd76d730f7ec91346c43ec153924d", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2eeb3663116df5dbf2ed7291277d79c5ff201b89/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eeb3663116df5dbf2ed7291277d79c5ff201b89/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=2eeb3663116df5dbf2ed7291277d79c5ff201b89", "patch": "@@ -18,6 +18,7 @@ use syntax::ast::{\n use syntax::codemap::{BytePos, Span, NO_EXPANSION};\n use syntax::ptr;\n \n+use comment::filter_normal_code;\n use rewrite::RewriteContext;\n use shape::Shape;\n \n@@ -350,7 +351,7 @@ macro_rules! skip_out_of_file_lines_range_visitor {\n // Wraps String in an Option. Returns Some when the string adheres to the\n // Rewrite constraints defined for the Rewrite trait and None otherwise.\n pub fn wrap_str(s: String, max_width: usize, shape: Shape) -> Option<String> {\n-    if is_valid_str(&s, max_width, shape) {\n+    if is_valid_str(&filter_normal_code(&s), max_width, shape) {\n         Some(s)\n     } else {\n         None"}]}