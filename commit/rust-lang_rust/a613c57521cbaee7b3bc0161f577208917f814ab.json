{"sha": "a613c57521cbaee7b3bc0161f577208917f814ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MTNjNTc1MjFjYmFlZTdiM2JjMDE2MWY1NzcyMDg5MTdmODE0YWI=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-11-11T02:07:42Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-11-12T00:26:13Z"}, "message": "feat: don't insert semi in macro_rules arm body", "tree": {"sha": "6a93ad53d7f3439ff97081c4f1b361fd937d98de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a93ad53d7f3439ff97081c4f1b361fd937d98de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a613c57521cbaee7b3bc0161f577208917f814ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a613c57521cbaee7b3bc0161f577208917f814ab", "html_url": "https://github.com/rust-lang/rust/commit/a613c57521cbaee7b3bc0161f577208917f814ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a613c57521cbaee7b3bc0161f577208917f814ab/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb894d53708122a67762de9489881c11aa8ce257", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb894d53708122a67762de9489881c11aa8ce257", "html_url": "https://github.com/rust-lang/rust/commit/eb894d53708122a67762de9489881c11aa8ce257"}], "stats": {"total": 83, "additions": 65, "deletions": 18}, "files": [{"sha": "9959ef7fd9e8405487b521d0ea918dce35726f86", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a613c57521cbaee7b3bc0161f577208917f814ab/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a613c57521cbaee7b3bc0161f577208917f814ab/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=a613c57521cbaee7b3bc0161f577208917f814ab", "patch": "@@ -659,7 +659,7 @@ impl<'a> CommentRewrite<'a> {\n                         config.set().wrap_comments(false);\n                         if config.format_code_in_doc_comments() {\n                             if let Some(s) =\n-                                crate::format_code_block(&self.code_block_buffer, &config)\n+                                crate::format_code_block(&self.code_block_buffer, &config, false)\n                             {\n                                 trim_custom_comment_prefix(&s.snippet)\n                             } else {"}, {"sha": "26ae494227d8cc4c6375af11c7cebf505b7d1267", "filename": "src/formatting.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a613c57521cbaee7b3bc0161f577208917f814ab/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a613c57521cbaee7b3bc0161f577208917f814ab/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=a613c57521cbaee7b3bc0161f577208917f814ab", "patch": "@@ -25,7 +25,11 @@ pub(crate) type SourceFile = Vec<FileRecord>;\n pub(crate) type FileRecord = (FileName, String);\n \n impl<'b, T: Write + 'b> Session<'b, T> {\n-    pub(crate) fn format_input_inner(&mut self, input: Input) -> Result<FormatReport, ErrorKind> {\n+    pub(crate) fn format_input_inner(\n+        &mut self,\n+        input: Input,\n+        is_macro_def: bool,\n+    ) -> Result<FormatReport, ErrorKind> {\n         if !self.config.version_meets_requirement() {\n             return Err(ErrorKind::VersionMismatch);\n         }\n@@ -42,7 +46,7 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n             }\n \n             let config = &self.config.clone();\n-            let format_result = format_project(input, config, self);\n+            let format_result = format_project(input, config, self, is_macro_def);\n \n             format_result.map(|report| {\n                 self.errors.add(&report.internal.borrow().1);\n@@ -57,6 +61,7 @@ fn format_project<T: FormatHandler>(\n     input: Input,\n     config: &Config,\n     handler: &mut T,\n+    is_macro_def: bool,\n ) -> Result<FormatReport, ErrorKind> {\n     let mut timer = Timer::start();\n \n@@ -103,7 +108,7 @@ fn format_project<T: FormatHandler>(\n             continue;\n         }\n         should_emit_verbose(input_is_stdin, config, || println!(\"Formatting {}\", path));\n-        context.format_file(path, &module)?;\n+        context.format_file(path, &module, is_macro_def)?;\n     }\n     timer = timer.done_formatting();\n \n@@ -134,7 +139,12 @@ impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n     }\n \n     // Formats a single file/module.\n-    fn format_file(&mut self, path: FileName, module: &Module<'_>) -> Result<(), ErrorKind> {\n+    fn format_file(\n+        &mut self,\n+        path: FileName,\n+        module: &Module<'_>,\n+        is_macro_def: bool,\n+    ) -> Result<(), ErrorKind> {\n         let snippet_provider = self.parse_session.snippet_provider(module.as_ref().inner);\n         let mut visitor = FmtVisitor::from_parse_sess(\n             &self.parse_session,\n@@ -143,7 +153,7 @@ impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n             self.report.clone(),\n         );\n         visitor.skip_context.update_with_attrs(&self.krate.attrs);\n-\n+        visitor.is_macro_def = is_macro_def;\n         visitor.last_pos = snippet_provider.start_pos();\n         visitor.skip_empty_lines(snippet_provider.end_pos());\n         visitor.format_separate_mod(module, snippet_provider.end_pos());"}, {"sha": "753840e065c968ff496c3d6dfba141e1e6e578cd", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a613c57521cbaee7b3bc0161f577208917f814ab/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a613c57521cbaee7b3bc0161f577208917f814ab/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a613c57521cbaee7b3bc0161f577208917f814ab", "patch": "@@ -286,7 +286,7 @@ impl fmt::Display for FormatReport {\n \n /// Format the given snippet. The snippet is expected to be *complete* code.\n /// When we cannot parse the given snippet, this function returns `None`.\n-fn format_snippet(snippet: &str, config: &Config) -> Option<FormattedSnippet> {\n+fn format_snippet(snippet: &str, config: &Config, is_macro_def: bool) -> Option<FormattedSnippet> {\n     let mut config = config.clone();\n     panic::catch_unwind(|| {\n         let mut out: Vec<u8> = Vec::with_capacity(snippet.len() * 2);\n@@ -297,7 +297,7 @@ fn format_snippet(snippet: &str, config: &Config) -> Option<FormattedSnippet> {\n         let (formatting_error, result) = {\n             let input = Input::Text(snippet.into());\n             let mut session = Session::new(config, Some(&mut out));\n-            let result = session.format(input);\n+            let result = session.format_input_inner(input, is_macro_def);\n             (\n                 session.errors.has_macro_format_failure\n                     || session.out.as_ref().unwrap().is_empty() && !snippet.is_empty()\n@@ -323,7 +323,11 @@ fn format_snippet(snippet: &str, config: &Config) -> Option<FormattedSnippet> {\n /// The code block may be incomplete (i.e., parser may be unable to parse it).\n /// To avoid panic in parser, we wrap the code block with a dummy function.\n /// The returned code block does **not** end with newline.\n-fn format_code_block(code_snippet: &str, config: &Config) -> Option<FormattedSnippet> {\n+fn format_code_block(\n+    code_snippet: &str,\n+    config: &Config,\n+    is_macro_def: bool,\n+) -> Option<FormattedSnippet> {\n     const FN_MAIN_PREFIX: &str = \"fn main() {\\n\";\n \n     fn enclose_in_main_block(s: &str, config: &Config) -> String {\n@@ -356,7 +360,7 @@ fn format_code_block(code_snippet: &str, config: &Config) -> Option<FormattedSni\n     config_with_unix_newline\n         .set()\n         .newline_style(NewlineStyle::Unix);\n-    let mut formatted = format_snippet(&snippet, &config_with_unix_newline)?;\n+    let mut formatted = format_snippet(&snippet, &config_with_unix_newline, is_macro_def)?;\n     // Remove wrapping main block\n     formatted.unwrap_code_block();\n \n@@ -435,7 +439,7 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n     /// The main entry point for Rustfmt. Formats the given input according to the\n     /// given config. `out` is only necessary if required by the configuration.\n     pub fn format(&mut self, input: Input) -> Result<FormatReport, ErrorKind> {\n-        self.format_input_inner(input)\n+        self.format_input_inner(input, false)\n     }\n \n     pub fn override_config<F, U>(&mut self, mut config: Config, f: F) -> U\n@@ -550,15 +554,15 @@ mod unit_tests {\n         // `format_snippet()` and `format_code_block()` should not panic\n         // even when we cannot parse the given snippet.\n         let snippet = \"let\";\n-        assert!(format_snippet(snippet, &Config::default()).is_none());\n-        assert!(format_code_block(snippet, &Config::default()).is_none());\n+        assert!(format_snippet(snippet, &Config::default(), false).is_none());\n+        assert!(format_code_block(snippet, &Config::default(), false).is_none());\n     }\n \n     fn test_format_inner<F>(formatter: F, input: &str, expected: &str) -> bool\n     where\n-        F: Fn(&str, &Config) -> Option<FormattedSnippet>,\n+        F: Fn(&str, &Config, bool) -> Option<FormattedSnippet>,\n     {\n-        let output = formatter(input, &Config::default());\n+        let output = formatter(input, &Config::default(), false);\n         output.is_some() && output.unwrap().snippet == expected\n     }\n \n@@ -580,7 +584,7 @@ mod unit_tests {\n     fn test_format_code_block_fail() {\n         #[rustfmt::skip]\n         let code_block = \"this_line_is_100_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(x, y, z);\";\n-        assert!(format_code_block(code_block, &Config::default()).is_none());\n+        assert!(format_code_block(code_block, &Config::default(), false).is_none());\n     }\n \n     #[test]"}, {"sha": "3bff059984f7de1e240ed1e983dc0263b3e2d73a", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a613c57521cbaee7b3bc0161f577208917f814ab/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a613c57521cbaee7b3bc0161f577208917f814ab/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=a613c57521cbaee7b3bc0161f577208917f814ab", "patch": "@@ -1363,12 +1363,12 @@ impl MacroBranch {\n         config.set().max_width(new_width);\n \n         // First try to format as items, then as statements.\n-        let new_body_snippet = match crate::format_snippet(&body_str, &config) {\n+        let new_body_snippet = match crate::format_snippet(&body_str, &config, true) {\n             Some(new_body) => new_body,\n             None => {\n                 let new_width = new_width + config.tab_spaces();\n                 config.set().max_width(new_width);\n-                match crate::format_code_block(&body_str, &config) {\n+                match crate::format_code_block(&body_str, &config, true) {\n                     Some(new_body) => new_body,\n                     None => return None,\n                 }"}, {"sha": "c8abe70141b5c90665b11ca7f0f0628869f7c060", "filename": "src/rewrite.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a613c57521cbaee7b3bc0161f577208917f814ab/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a613c57521cbaee7b3bc0161f577208917f814ab/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=a613c57521cbaee7b3bc0161f577208917f814ab", "patch": "@@ -39,6 +39,7 @@ pub(crate) struct RewriteContext<'a> {\n     pub(crate) snippet_provider: &'a SnippetProvider,\n     // Used for `format_snippet`\n     pub(crate) macro_rewrite_failure: Cell<bool>,\n+    pub(crate) is_macro_def: bool,\n     pub(crate) report: FormatReport,\n     pub(crate) skip_context: SkipContext,\n     pub(crate) skipped_range: Rc<RefCell<Vec<(usize, usize)>>>,"}, {"sha": "96d465608fad1a970538b3556408c7eeaf44ed42", "filename": "src/utils.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a613c57521cbaee7b3bc0161f577208917f814ab/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a613c57521cbaee7b3bc0161f577208917f814ab/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=a613c57521cbaee7b3bc0161f577208917f814ab", "patch": "@@ -279,6 +279,13 @@ pub(crate) fn contains_skip(attrs: &[Attribute]) -> bool {\n \n #[inline]\n pub(crate) fn semicolon_for_expr(context: &RewriteContext<'_>, expr: &ast::Expr) -> bool {\n+    // Never try to insert semicolons on expressions when we're inside\n+    // a macro definition - this can prevent the macro from compiling\n+    // when used in expression position\n+    if context.is_macro_def {\n+        return false;\n+    }\n+\n     match expr.kind {\n         ast::ExprKind::Ret(..) | ast::ExprKind::Continue(..) | ast::ExprKind::Break(..) => {\n             context.config.trailing_semicolon()"}, {"sha": "56d023d03a6067d714a30e70981afe59dcc8d6ca", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a613c57521cbaee7b3bc0161f577208917f814ab/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a613c57521cbaee7b3bc0161f577208917f814ab/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=a613c57521cbaee7b3bc0161f577208917f814ab", "patch": "@@ -86,6 +86,7 @@ pub(crate) struct FmtVisitor<'a> {\n     pub(crate) macro_rewrite_failure: bool,\n     pub(crate) report: FormatReport,\n     pub(crate) skip_context: SkipContext,\n+    pub(crate) is_macro_def: bool,\n }\n \n impl<'a> Drop for FmtVisitor<'a> {\n@@ -811,6 +812,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             snippet_provider,\n             line_number: 0,\n             skipped_range: Rc::new(RefCell::new(vec![])),\n+            is_macro_def: false,\n             macro_rewrite_failure: false,\n             report,\n             skip_context: Default::default(),\n@@ -1003,6 +1005,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             force_one_line_chain: Cell::new(false),\n             snippet_provider: self.snippet_provider,\n             macro_rewrite_failure: Cell::new(false),\n+            is_macro_def: self.is_macro_def,\n             report: self.report.clone(),\n             skip_context: self.skip_context.clone(),\n             skipped_range: self.skipped_range.clone(),"}, {"sha": "84e12d16e6e97f0e81bd825c5c81533c48a5db0d", "filename": "tests/target/macro_rules_semi.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a613c57521cbaee7b3bc0161f577208917f814ab/tests%2Ftarget%2Fmacro_rules_semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a613c57521cbaee7b3bc0161f577208917f814ab/tests%2Ftarget%2Fmacro_rules_semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacro_rules_semi.rs?ref=a613c57521cbaee7b3bc0161f577208917f814ab", "patch": "@@ -0,0 +1,22 @@\n+macro_rules! expr {\n+    (no_semi) => {\n+        return true\n+    };\n+    (semi) => {\n+        return true;\n+    };\n+}\n+\n+fn foo() -> bool {\n+    match true {\n+        true => expr!(no_semi),\n+        false if false => {\n+            expr!(semi)\n+        }\n+        false => {\n+            expr!(semi);\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}