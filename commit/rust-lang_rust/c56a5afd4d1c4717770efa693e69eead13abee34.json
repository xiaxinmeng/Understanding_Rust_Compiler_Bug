{"sha": "c56a5afd4d1c4717770efa693e69eead13abee34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NmE1YWZkNGQxYzQ3MTc3NzBlZmE2OTNlNjllZWFkMTNhYmVlMzQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-19T22:52:26Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-01T22:30:24Z"}, "message": "item_like_imports: Allow single imports with a given visibility\nto reexport some (but not all) namespaces with less visibility.", "tree": {"sha": "b0168faebf1cfe667474aac31cb59ac89552dd79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0168faebf1cfe667474aac31cb59ac89552dd79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c56a5afd4d1c4717770efa693e69eead13abee34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c56a5afd4d1c4717770efa693e69eead13abee34", "html_url": "https://github.com/rust-lang/rust/commit/c56a5afd4d1c4717770efa693e69eead13abee34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c56a5afd4d1c4717770efa693e69eead13abee34/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aad1f3cbf3340afd0685b79981a59f0ba3e83116", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad1f3cbf3340afd0685b79981a59f0ba3e83116", "html_url": "https://github.com/rust-lang/rust/commit/aad1f3cbf3340afd0685b79981a59f0ba3e83116"}], "stats": {"total": 88, "additions": 77, "deletions": 11}, "files": [{"sha": "7084aa685aec5664f9ae6f79832c0aa77cc38b9c", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c56a5afd4d1c4717770efa693e69eead13abee34/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56a5afd4d1c4717770efa693e69eead13abee34/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=c56a5afd4d1c4717770efa693e69eead13abee34", "patch": "@@ -285,13 +285,20 @@ impl<'a> Resolver<'a> {\n     // return the corresponding binding defined by the import directive.\n     fn import(&mut self, binding: &'a NameBinding<'a>, directive: &'a ImportDirective<'a>)\n               -> NameBinding<'a> {\n+        let vis = if binding.pseudo_vis().is_at_least(directive.vis.get(), self) ||\n+                     !directive.is_glob() && binding.is_extern_crate() { // c.f. `PRIVATE_IN_PUBLIC`\n+            directive.vis.get()\n+        } else {\n+            binding.pseudo_vis()\n+        };\n+\n         NameBinding {\n             kind: NameBindingKind::Import {\n                 binding: binding,\n                 directive: directive,\n             },\n             span: directive.span,\n-            vis: directive.vis.get(),\n+            vis: vis,\n         }\n     }\n \n@@ -597,22 +604,44 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             }\n         }\n \n+        let session = self.session;\n+        let reexport_error = || {\n+            let msg = format!(\"`{}` is private, and cannot be reexported\", name);\n+            let note_msg =\n+                format!(\"consider marking `{}` as `pub` in the imported module\", name);\n+            struct_span_err!(session, directive.span, E0364, \"{}\", &msg)\n+                .span_note(directive.span, &note_msg)\n+                .emit();\n+        };\n+\n+        let extern_crate_lint = || {\n+            let msg = format!(\"extern crate `{}` is private, and cannot be reexported \\\n+                               (error E0364), consider declaring with `pub`\",\n+                               name);\n+            session.add_lint(PRIVATE_IN_PUBLIC, directive.id, directive.span, msg);\n+        };\n+\n         match (value_result, type_result) {\n+            // With `#![feature(item_like_imports)]`, all namespaces\n+            // must be re-exported with extra visibility for an error to occur.\n+            (Ok(value_binding), Ok(type_binding)) if self.new_import_semantics => {\n+                let vis = directive.vis.get();\n+                if !value_binding.pseudo_vis().is_at_least(vis, self) &&\n+                   !type_binding.pseudo_vis().is_at_least(vis, self) {\n+                    reexport_error();\n+                } else if type_binding.is_extern_crate() &&\n+                          !type_binding.vis.is_at_least(vis, self) {\n+                    extern_crate_lint();\n+                }\n+            }\n+\n             (Ok(binding), _) if !binding.pseudo_vis().is_at_least(directive.vis.get(), self) => {\n-                let msg = format!(\"`{}` is private, and cannot be reexported\", name);\n-                let note_msg =\n-                    format!(\"consider marking `{}` as `pub` in the imported module\", name);\n-                struct_span_err!(self.session, directive.span, E0364, \"{}\", &msg)\n-                    .span_note(directive.span, &note_msg)\n-                    .emit();\n+                reexport_error();\n             }\n \n             (_, Ok(binding)) if !binding.pseudo_vis().is_at_least(directive.vis.get(), self) => {\n                 if binding.is_extern_crate() {\n-                    let msg = format!(\"extern crate `{}` is private, and cannot be reexported \\\n-                                       (error E0364), consider declaring with `pub`\",\n-                                       name);\n-                    self.session.add_lint(PRIVATE_IN_PUBLIC, directive.id, directive.span, msg);\n+                    extern_crate_lint();\n                 } else {\n                     struct_span_err!(self.session, directive.span, E0365,\n                                      \"`{}` is private, and cannot be reexported\", name)"}, {"sha": "f8dbb4d444886c44d9135d76a94df46a9690de83", "filename": "src/test/compile-fail/imports/reexports.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c56a5afd4d1c4717770efa693e69eead13abee34/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c56a5afd4d1c4717770efa693e69eead13abee34/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs?ref=c56a5afd4d1c4717770efa693e69eead13abee34", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(item_like_imports)]\n+\n+mod a {\n+    fn foo() {}\n+    mod foo {}\n+\n+    mod a {\n+        pub use super::foo; //~ ERROR cannot be reexported\n+    }\n+}\n+\n+mod b {\n+    pub fn foo() {}\n+    mod foo { pub struct S; }\n+\n+    pub mod a {\n+        pub use super::foo; // This is OK since the value `foo` is visible enough.\n+        fn f(_: foo::S) {} // `foo` is imported in the type namespace (but not `pub` reexported).\n+    }\n+}\n+\n+mod c {\n+    // Test that `foo` is not reexported.\n+    use b::a::foo::S; //~ ERROR `foo`\n+}\n+\n+fn main() {}"}]}