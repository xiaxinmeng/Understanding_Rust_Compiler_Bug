{"sha": "decf3d33d08ad6c89843421ffca543dceb00bb78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlY2YzZDMzZDA4YWQ2Yzg5ODQzNDIxZmZjYTU0M2RjZWIwMGJiNzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-08T13:50:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T12:47:36Z"}, "message": "make `ty::Predicate` carry a `ClosureSubsts`", "tree": {"sha": "88f345bac89a78c7c7458e01743ada1b6e392b34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88f345bac89a78c7c7458e01743ada1b6e392b34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/decf3d33d08ad6c89843421ffca543dceb00bb78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/decf3d33d08ad6c89843421ffca543dceb00bb78", "html_url": "https://github.com/rust-lang/rust/commit/decf3d33d08ad6c89843421ffca543dceb00bb78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/decf3d33d08ad6c89843421ffca543dceb00bb78/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ac8542abc0a2497cda02dcc0544c0da6f46644f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac8542abc0a2497cda02dcc0544c0da6f46644f", "html_url": "https://github.com/rust-lang/rust/commit/0ac8542abc0a2497cda02dcc0544c0da6f46644f"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "8f2ad98f85885bb1fb7db4c3a1eb2e59044ff95a", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=decf3d33d08ad6c89843421ffca543dceb00bb78", "patch": "@@ -236,8 +236,9 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::Predicate<'gcx> {\n             ty::Predicate::ObjectSafe(def_id) => {\n                 def_id.hash_stable(hcx, hasher);\n             }\n-            ty::Predicate::ClosureKind(def_id, closure_kind) => {\n+            ty::Predicate::ClosureKind(def_id, closure_substs, closure_kind) => {\n                 def_id.hash_stable(hcx, hasher);\n+                closure_substs.hash_stable(hcx, hasher);\n                 closure_kind.hash_stable(hcx, hasher);\n             }\n             ty::Predicate::ConstEvaluatable(def_id, substs) => {"}, {"sha": "caed3639b56360281aba815bd72cf7656eb31dec", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=decf3d33d08ad6c89843421ffca543dceb00bb78", "patch": "@@ -643,7 +643,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                             violations)\n                     }\n \n-                    ty::Predicate::ClosureKind(closure_def_id, kind) => {\n+                    ty::Predicate::ClosureKind(closure_def_id, _closure_substs, kind) => {\n                         let found_kind = self.closure_kind(closure_def_id).unwrap();\n                         let closure_span = self.tcx.hir.span_if_local(closure_def_id).unwrap();\n                         let node_id = self.tcx.hir.as_local_node_id(closure_def_id).unwrap();"}, {"sha": "0dbf7a6a1f0b1d6abe7b28ea72bab86e13740d46", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=decf3d33d08ad6c89843421ffca543dceb00bb78", "patch": "@@ -438,7 +438,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n             }\n         }\n \n-        ty::Predicate::ClosureKind(closure_def_id, kind) => {\n+        ty::Predicate::ClosureKind(closure_def_id, _closure_substs, kind) => {\n             match selcx.infcx().closure_kind(closure_def_id) {\n                 Some(closure_kind) => {\n                     if closure_kind.extends(kind) {"}, {"sha": "a0d51101d78947163041b8396fb94849a18bc750", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=decf3d33d08ad6c89843421ffca543dceb00bb78", "patch": "@@ -718,7 +718,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 }\n             }\n \n-            ty::Predicate::ClosureKind(closure_def_id, kind) => {\n+            ty::Predicate::ClosureKind(closure_def_id, _closure_substs, kind) => {\n                 match self.infcx.closure_kind(closure_def_id) {\n                     Some(closure_kind) => {\n                         if closure_kind.extends(kind) {\n@@ -2726,7 +2726,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         obligations.push(Obligation::new(\n             obligation.cause.clone(),\n             obligation.param_env,\n-            ty::Predicate::ClosureKind(closure_def_id, kind)));\n+            ty::Predicate::ClosureKind(closure_def_id, substs, kind)));\n \n         Ok(VtableClosureData {\n             closure_def_id,"}, {"sha": "898accb90215934e4006b3e81a982fa494e4bb75", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=decf3d33d08ad6c89843421ffca543dceb00bb78", "patch": "@@ -43,8 +43,8 @@ fn anonymize_predicate<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::Predicate::ObjectSafe(data) =>\n             ty::Predicate::ObjectSafe(data),\n \n-        ty::Predicate::ClosureKind(closure_def_id, kind) =>\n-            ty::Predicate::ClosureKind(closure_def_id, kind),\n+        ty::Predicate::ClosureKind(closure_def_id, closure_substs, kind) =>\n+            ty::Predicate::ClosureKind(closure_def_id, closure_substs, kind),\n \n         ty::Predicate::Subtype(ref data) =>\n             ty::Predicate::Subtype(tcx.anonymize_late_bound_regions(data)),"}, {"sha": "1ae49808d3f5e3548f51edeebe750e43f5d24e19", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=decf3d33d08ad6c89843421ffca543dceb00bb78", "patch": "@@ -896,7 +896,7 @@ pub enum Predicate<'tcx> {\n     /// No direct syntax. May be thought of as `where T : FnFoo<...>`\n     /// for some substitutions `...` and T being a closure type.\n     /// Satisfied (or refuted) once we know the closure's kind.\n-    ClosureKind(DefId, ClosureKind),\n+    ClosureKind(DefId, ClosureSubsts<'tcx>, ClosureKind),\n \n     /// `T1 <: T2`\n     Subtype(PolySubtypePredicate<'tcx>),\n@@ -999,8 +999,8 @@ impl<'a, 'gcx, 'tcx> Predicate<'tcx> {\n                 Predicate::WellFormed(data.subst(tcx, substs)),\n             Predicate::ObjectSafe(trait_def_id) =>\n                 Predicate::ObjectSafe(trait_def_id),\n-            Predicate::ClosureKind(closure_def_id, kind) =>\n-                Predicate::ClosureKind(closure_def_id, kind),\n+            Predicate::ClosureKind(closure_def_id, closure_substs, kind) =>\n+                Predicate::ClosureKind(closure_def_id, closure_substs.subst(tcx, substs), kind),\n             Predicate::ConstEvaluatable(def_id, const_substs) =>\n                 Predicate::ConstEvaluatable(def_id, const_substs.subst(tcx, substs)),\n         }\n@@ -1182,8 +1182,8 @@ impl<'tcx> Predicate<'tcx> {\n             ty::Predicate::ObjectSafe(_trait_def_id) => {\n                 vec![]\n             }\n-            ty::Predicate::ClosureKind(_closure_def_id, _kind) => {\n-                vec![]\n+            ty::Predicate::ClosureKind(_closure_def_id, closure_substs, _kind) => {\n+                closure_substs.substs.types().collect()\n             }\n             ty::Predicate::ConstEvaluatable(_, substs) => {\n                 substs.types().collect()"}, {"sha": "73d1b4c3400386d0da84730fb483207b85e6f0e4", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=decf3d33d08ad6c89843421ffca543dceb00bb78", "patch": "@@ -211,8 +211,11 @@ impl<'a, 'tcx> Lift<'tcx> for ty::Predicate<'a> {\n             ty::Predicate::WellFormed(ty) => {\n                 tcx.lift(&ty).map(ty::Predicate::WellFormed)\n             }\n-            ty::Predicate::ClosureKind(closure_def_id, kind) => {\n-                Some(ty::Predicate::ClosureKind(closure_def_id, kind))\n+            ty::Predicate::ClosureKind(closure_def_id, closure_substs, kind) => {\n+                tcx.lift(&closure_substs)\n+                   .map(|closure_substs| ty::Predicate::ClosureKind(closure_def_id,\n+                                                                    closure_substs,\n+                                                                    kind))\n             }\n             ty::Predicate::ObjectSafe(trait_def_id) => {\n                 Some(ty::Predicate::ObjectSafe(trait_def_id))\n@@ -966,8 +969,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n                 ty::Predicate::Projection(binder.fold_with(folder)),\n             ty::Predicate::WellFormed(data) =>\n                 ty::Predicate::WellFormed(data.fold_with(folder)),\n-            ty::Predicate::ClosureKind(closure_def_id, kind) =>\n-                ty::Predicate::ClosureKind(closure_def_id, kind),\n+            ty::Predicate::ClosureKind(closure_def_id, closure_substs, kind) =>\n+                ty::Predicate::ClosureKind(closure_def_id, closure_substs.fold_with(folder), kind),\n             ty::Predicate::ObjectSafe(trait_def_id) =>\n                 ty::Predicate::ObjectSafe(trait_def_id),\n             ty::Predicate::ConstEvaluatable(def_id, substs) =>\n@@ -984,7 +987,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n             ty::Predicate::TypeOutlives(ref binder) => binder.visit_with(visitor),\n             ty::Predicate::Projection(ref binder) => binder.visit_with(visitor),\n             ty::Predicate::WellFormed(data) => data.visit_with(visitor),\n-            ty::Predicate::ClosureKind(_closure_def_id, _kind) => false,\n+            ty::Predicate::ClosureKind(_closure_def_id, closure_substs, _kind) =>\n+                closure_substs.visit_with(visitor),\n             ty::Predicate::ObjectSafe(_trait_def_id) => false,\n             ty::Predicate::ConstEvaluatable(_def_id, substs) => substs.visit_with(visitor),\n         }"}, {"sha": "f130f28153e3ba93bca448cd71946e0c99c03f99", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decf3d33d08ad6c89843421ffca543dceb00bb78/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=decf3d33d08ad6c89843421ffca543dceb00bb78", "patch": "@@ -1257,7 +1257,7 @@ define_print! {\n                     ty::tls::with(|tcx| {\n                         write!(f, \"the trait `{}` is object-safe\", tcx.item_path_str(trait_def_id))\n                     }),\n-                ty::Predicate::ClosureKind(closure_def_id, kind) =>\n+                ty::Predicate::ClosureKind(closure_def_id, _closure_substs, kind) =>\n                     ty::tls::with(|tcx| {\n                         write!(f, \"the closure `{}` implements the trait `{}`\",\n                                tcx.item_path_str(closure_def_id), kind)\n@@ -1281,8 +1281,8 @@ define_print! {\n                 ty::Predicate::ObjectSafe(trait_def_id) => {\n                     write!(f, \"ObjectSafe({:?})\", trait_def_id)\n                 }\n-                ty::Predicate::ClosureKind(closure_def_id, kind) => {\n-                    write!(f, \"ClosureKind({:?}, {:?})\", closure_def_id, kind)\n+                ty::Predicate::ClosureKind(closure_def_id, closure_substs, kind) => {\n+                    write!(f, \"ClosureKind({:?}, {:?}, {:?})\", closure_def_id, closure_substs, kind)\n                 }\n                 ty::Predicate::ConstEvaluatable(def_id, substs) => {\n                     write!(f, \"ConstEvaluatable({:?}, {:?})\", def_id, substs)"}]}