{"sha": "d74d15345cab54860a6e8cf19021372665ce0577", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NGQxNTM0NWNhYjU0ODYwYTZlOGNmMTkwMjEzNzI2NjVjZTA1Nzc=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-09T16:29:01Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-12-09T16:29:01Z"}, "message": "move the check for instantiation from metadata encoding to the actual decision site\n\nbefore it was assumed that anything that had a MIR was fair game for local instatiation", "tree": {"sha": "847275119ff66dc7568d87bc94a8c451cd4e661e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/847275119ff66dc7568d87bc94a8c451cd4e661e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d74d15345cab54860a6e8cf19021372665ce0577", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYStvNAAoJEFbW7qD8Z6xGcO8P/15ixY6tY3r5WglRoFlB50MO\nQc0sZGdKuqsO914A1gNZ5/COoSZq0emHnqtpcXVACGcRbPVf5OkEEdYwWYC7+DGK\nfvJZP1rJN/64/UUOV+JzEiBYhQDV2ZjT7Df0ZB6OYqvjXbrdnXU38+ciNyWY6BO6\njJyOG1iBBkK15Mx88jFWL+Vdt7rcf7/t5oTZyJ85jdM5qj664IPfKc0f3J+G1GyR\nerc2doZjIzOOUYd9PTEesI34psJJ/IfNCiPb8fxRvcPkKwzdd54Ec+W2HvYjJAg7\niO8DcAbynhn81+Wm5CL8QVfgQkUWz1ciyS6ZIxbdUPfbQglDyOKVuDaYRchn6YjK\nKUjAK+0kAhdtyfN7utYGsopmbSYaLSV4baGfd9jsAuDkunWBOGoXb/PMOXsypYYu\nftHTILn+mDMIWEC3S9Ny+0cp66DMVuQo+jgP8MkF7DDek1qa+DPNynELBuipw0nE\nhb802oWxZHdUkqErYwWCaqQPexFJzu+kUtqcKHkVxFZmLdbDxePRi6K2SWFFRNzJ\nXstd6SZNcjxKCHVG3YilV+oR1adGdiPf5JxsPKQomJIMfJlhz1T+kO06MVlBCC8x\nsz+ITzudHz0ntO7i+b50eJhUYqwPhlFeKSxX4QVPJkUmcplxknGqQMNgaE2+ucps\nSTeGmjKA5Ydg4xI38JAV\n=kiNb\n-----END PGP SIGNATURE-----", "payload": "tree 847275119ff66dc7568d87bc94a8c451cd4e661e\nparent 910c369c9297b7e6a508bcc84b38fada8d5f4d7b\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1481300941 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1481300941 +0100\n\nmove the check for instantiation from metadata encoding to the actual decision site\n\nbefore it was assumed that anything that had a MIR was fair game for local instatiation"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d74d15345cab54860a6e8cf19021372665ce0577", "html_url": "https://github.com/rust-lang/rust/commit/d74d15345cab54860a6e8cf19021372665ce0577", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d74d15345cab54860a6e8cf19021372665ce0577/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "910c369c9297b7e6a508bcc84b38fada8d5f4d7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/910c369c9297b7e6a508bcc84b38fada8d5f4d7b", "html_url": "https://github.com/rust-lang/rust/commit/910c369c9297b7e6a508bcc84b38fada8d5f4d7b"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "f2be97c832370b2e5d5be2c0510d6ee9b9326dc2", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d74d15345cab54860a6e8cf19021372665ce0577/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d74d15345cab54860a6e8cf19021372665ce0577/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=d74d15345cab54860a6e8cf19021372665ce0577", "patch": "@@ -355,6 +355,11 @@ pub trait CrateStore<'tcx> {\n     fn get_item_mir<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> Mir<'tcx>;\n     fn is_item_mir_available(&self, def: DefId) -> bool;\n \n+    /// Take a look if we need to inline or monomorphize this. If so, we\n+    /// will emit code for this item in the local crate, and thus\n+    /// create a translation item for it.\n+    fn can_have_local_instance<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> bool;\n+\n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n     fn crates(&self) -> Vec<CrateNum>;\n@@ -528,6 +533,9 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn is_item_mir_available(&self, def: DefId) -> bool {\n         bug!(\"is_item_mir_available\")\n     }\n+    fn can_have_local_instance<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> bool {\n+        bug!(\"can_have_local_instance\")\n+    }\n \n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that."}, {"sha": "1a1bb1432eec1fc2b625178df786104cdda97ee0", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d74d15345cab54860a6e8cf19021372665ce0577/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d74d15345cab54860a6e8cf19021372665ce0577/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=d74d15345cab54860a6e8cf19021372665ce0577", "patch": "@@ -527,6 +527,11 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(def.krate).is_item_mir_available(def.index)\n     }\n \n+    fn can_have_local_instance<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> bool {\n+        self.dep_graph.read(DepNode::MetaData(def));\n+        def.is_local() || self.get_crate_data(def.krate).can_have_local_instance(tcx, def.index)\n+    }\n+\n     fn crates(&self) -> Vec<CrateNum>\n     {\n         let mut result = vec![];"}, {"sha": "54c195b1881622a2038e9d4563078934806ae133", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d74d15345cab54860a6e8cf19021372665ce0577/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d74d15345cab54860a6e8cf19021372665ce0577/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=d74d15345cab54860a6e8cf19021372665ce0577", "patch": "@@ -847,6 +847,29 @@ impl<'a, 'tcx> CrateMetadata {\n         self.maybe_entry(id).and_then(|item| item.decode(self).mir).is_some()\n     }\n \n+    pub fn can_have_local_instance(&self,\n+                                   tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                   id: DefIndex) -> bool {\n+        self.maybe_entry(id).map_or(false, |item| {\n+            let item = item.decode(self);\n+            // if we don't have a MIR, then this item was never meant to be locally instantiated\n+            // or we have a bug in the metadata serialization\n+            item.mir.is_some() && (\n+                // items with generics always can have local instances if monomorphized\n+                item.generics.map_or(false, |generics| {\n+                    let generics = generics.decode((self, tcx));\n+                    generics.parent_types != 0 || !generics.types.is_empty()\n+                }) ||\n+                match item.kind {\n+                    EntryKind::Closure(_) => true,\n+                    _ => false,\n+                } ||\n+                item.kind.is_const_fn(self) ||\n+                attr::requests_inline(&self.get_attributes(&item))\n+            )\n+        })\n+    }\n+\n     pub fn maybe_get_item_mir(&self,\n                               tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               id: DefIndex)"}, {"sha": "3af3ada66b3e9c2ba3c8709f4c4438ae3de58f35", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d74d15345cab54860a6e8cf19021372665ce0577/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d74d15345cab54860a6e8cf19021372665ce0577/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=d74d15345cab54860a6e8cf19021372665ce0577", "patch": "@@ -706,10 +706,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n fn can_have_local_instance<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      def_id: DefId)\n                                      -> bool {\n-    // Take a look if we have the definition available. If so, we\n-    // will emit code for this item in the local crate, and thus\n-    // create a translation item for it.\n-    def_id.is_local() || tcx.sess.cstore.is_item_mir_available(def_id)\n+    tcx.sess.cstore.can_have_local_instance(tcx, def_id)\n }\n \n fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,"}]}