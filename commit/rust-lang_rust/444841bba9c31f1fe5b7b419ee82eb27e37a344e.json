{"sha": "444841bba9c31f1fe5b7b419ee82eb27e37a344e", "node_id": "C_kwDOAAsO6NoAKDQ0NDg0MWJiYTljMzFmMWZlNWI3YjQxOWVlODJlYjI3ZTM3YTM0NGU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-17T07:56:57Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-17T07:56:57Z"}, "message": "Add test flag for running a test only on the host", "tree": {"sha": "237e2a87d7441b2cf4409b56fd269e709c68f9c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/237e2a87d7441b2cf4409b56fd269e709c68f9c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/444841bba9c31f1fe5b7b419ee82eb27e37a344e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/444841bba9c31f1fe5b7b419ee82eb27e37a344e", "html_url": "https://github.com/rust-lang/rust/commit/444841bba9c31f1fe5b7b419ee82eb27e37a344e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/444841bba9c31f1fe5b7b419ee82eb27e37a344e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43100f5f4b8b8c0b437bfe8b380198cb99e62cc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/43100f5f4b8b8c0b437bfe8b380198cb99e62cc3", "html_url": "https://github.com/rust-lang/rust/commit/43100f5f4b8b8c0b437bfe8b380198cb99e62cc3"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "4ecebcc8ddb24ed56f391a244d6cb159e6469d53", "filename": "ui_test/README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/444841bba9c31f1fe5b7b419ee82eb27e37a344e/ui_test%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/444841bba9c31f1fe5b7b419ee82eb27e37a344e/ui_test%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2FREADME.md?ref=444841bba9c31f1fe5b7b419ee82eb27e37a344e", "patch": "@@ -25,8 +25,10 @@ their command specifies, or the test will fail without even being run.\n \n * `//@ignore-XXX` avoids running the test on targets whose triple contains `XXX`\n     * `XXX` can also be one of `64bit`, `32bit` or `16bit`\n+    * `XXX` can also be `on-host`, which will only run the test during cross compilation testing.\n * `//@only-XXX` avoids running the test on targets whose triple **does not** contain `XXX`\n     * `XXX` can also be one of `64bit`, `32bit` or `16bit`\n+    * `XXX` can also be `on-host`, which will not run the test during cross compilation testing\n * `//@stderr-per-bitwidth` produces one stderr file per bitwidth, as they may differ significantly sometimes\n * `//@error-pattern: XXX` make sure the stderr output contains `XXX`\n * `//@revisions: XXX YYY` runs the test once for each space separated name in the list"}, {"sha": "16f7be30f8b2e6a65d920629e3929d2540819433", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/444841bba9c31f1fe5b7b419ee82eb27e37a344e/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444841bba9c31f1fe5b7b419ee82eb27e37a344e/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=444841bba9c31f1fe5b7b419ee82eb27e37a344e", "patch": "@@ -109,7 +109,7 @@ pub fn run_tests(config: Config) -> Result<()> {\n                     }\n                     let comments = Comments::parse_file(&path)?;\n                     // Ignore file if only/ignore rules do (not) apply\n-                    if !test_file_conditions(&comments, &target) {\n+                    if !test_file_conditions(&comments, &target, &config) {\n                         ignored.fetch_add(1, Ordering::Relaxed);\n                         eprintln!(\n                             \"{} ... {}\",\n@@ -499,19 +499,20 @@ fn output_path(path: &Path, comments: &Comments, kind: String, target: &str) ->\n     path.with_extension(kind)\n }\n \n-fn test_condition(condition: &Condition, target: &str) -> bool {\n+fn test_condition(condition: &Condition, target: &str, config: &Config) -> bool {\n     match condition {\n         Condition::Bitwidth(bits) => get_pointer_width(target) == *bits,\n         Condition::Target(t) => target.contains(t),\n+        Condition::OnHost => config.target.is_none(),\n     }\n }\n \n /// Returns whether according to the in-file conditions, this file should be run.\n-fn test_file_conditions(comments: &Comments, target: &str) -> bool {\n-    if comments.ignore.iter().any(|c| test_condition(c, target)) {\n+fn test_file_conditions(comments: &Comments, target: &str, config: &Config) -> bool {\n+    if comments.ignore.iter().any(|c| test_condition(c, target, config)) {\n         return false;\n     }\n-    comments.only.iter().all(|c| test_condition(c, target))\n+    comments.only.iter().all(|c| test_condition(c, target, config))\n }\n \n // Taken 1:1 from compiletest-rs"}, {"sha": "994c0800fcc1745754e6bdbce10dace7aae990ac", "filename": "ui_test/src/parser.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/444841bba9c31f1fe5b7b419ee82eb27e37a344e/ui_test%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444841bba9c31f1fe5b7b419ee82eb27e37a344e/ui_test%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fparser.rs?ref=444841bba9c31f1fe5b7b419ee82eb27e37a344e", "patch": "@@ -43,6 +43,8 @@ pub(crate) enum Condition {\n     Target(String),\n     /// Tests that the bitwidth is the given one.\n     Bitwidth(u8),\n+    /// Tests that the target is the host.\n+    OnHost,\n }\n \n #[derive(Debug, Clone)]\n@@ -64,6 +66,10 @@ pub(crate) struct ErrorMatch {\n \n impl Condition {\n     fn parse(c: &str) -> Self {\n+        match c {\n+            \"on-host\" => return Condition::OnHost,\n+            _ => {}\n+        }\n         if let Some(bits) = c.strip_suffix(\"bit\") {\n             let bits: u8 = bits.parse().expect(\n                 \"ignore/only filter ending in 'bit' must be of the form 'Nbit' for some integer N\","}]}