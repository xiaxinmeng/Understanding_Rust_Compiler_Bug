{"sha": "0194bed71070905e102a82e5f4643ad6ced62976", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOTRiZWQ3MTA3MDkwNWUxMDJhODJlNWY0NjQzYWQ2Y2VkNjI5NzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-07T06:17:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-07T06:17:37Z"}, "message": "Auto merge of #57394 - euclio:compiletest-optimization, r=Mark-Simulacrum\n\nslightly optimize compiletest test collection\n\nSave quite a few syscalls and avoiding pushing in a loop.", "tree": {"sha": "899d0e3f91de0e9020a301187623c0d56baf9210", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/899d0e3f91de0e9020a301187623c0d56baf9210"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0194bed71070905e102a82e5f4643ad6ced62976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0194bed71070905e102a82e5f4643ad6ced62976", "html_url": "https://github.com/rust-lang/rust/commit/0194bed71070905e102a82e5f4643ad6ced62976", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0194bed71070905e102a82e5f4643ad6ced62976/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6517772980cf1323393a74edc88f658d12ad038", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6517772980cf1323393a74edc88f658d12ad038", "html_url": "https://github.com/rust-lang/rust/commit/a6517772980cf1323393a74edc88f658d12ad038"}, {"sha": "2a9ad77d952d658b4566a3201b98598e7f1e2ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9ad77d952d658b4566a3201b98598e7f1e2ebd", "html_url": "https://github.com/rust-lang/rust/commit/2a9ad77d952d658b4566a3201b98598e7f1e2ebd"}], "stats": {"total": 61, "additions": 27, "deletions": 34}, "files": [{"sha": "2e5feca54151c99faebb0540e683fa10f2651733", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0194bed71070905e102a82e5f4643ad6ced62976/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0194bed71070905e102a82e5f4643ad6ced62976/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=0194bed71070905e102a82e5f4643ad6ced62976", "patch": "@@ -489,7 +489,7 @@ pub fn run_tests(config: &Config) {\n     // Let tests know which target they're running as\n     env::set_var(\"TARGET\", &config.target);\n \n-    let res = test::run_tests_console(&opts, tests.into_iter().collect());\n+    let res = test::run_tests_console(&opts, tests);\n     match res {\n         Ok(true) => {}\n         Ok(false) => panic!(\"Some tests failed\"),\n@@ -548,22 +548,18 @@ fn collect_tests_from_dir(\n     relative_dir_path: &Path,\n     tests: &mut Vec<test::TestDescAndFn>,\n ) -> io::Result<()> {\n-    // Ignore directories that contain a file\n-    // `compiletest-ignore-dir`.\n-    for file in fs::read_dir(dir)? {\n-        let file = file?;\n-        let name = file.file_name();\n-        if name == *\"compiletest-ignore-dir\" {\n-            return Ok(());\n-        }\n-        if name == *\"Makefile\" && config.mode == Mode::RunMake {\n-            let paths = TestPaths {\n-                file: dir.to_path_buf(),\n-                relative_dir: relative_dir_path.parent().unwrap().to_path_buf(),\n-            };\n-            tests.extend(make_test(config, &paths));\n-            return Ok(());\n-        }\n+    // Ignore directories that contain a file named `compiletest-ignore-dir`.\n+    if dir.join(\"compiletest-ignore-dir\").exists() {\n+        return Ok(());\n+    }\n+\n+    if config.mode == Mode::RunMake && dir.join(\"Makefile\").exists() {\n+        let paths = TestPaths {\n+            file: dir.to_path_buf(),\n+            relative_dir: relative_dir_path.parent().unwrap().to_path_buf(),\n+        };\n+        tests.extend(make_test(config, &paths));\n+        return Ok(());\n     }\n \n     // If we find a test foo/bar.rs, we have to build the\n@@ -577,8 +573,7 @@ fn collect_tests_from_dir(\n \n     // Add each `.rs` file as a test, and recurse further on any\n     // subdirectories we find, except for `aux` directories.\n-    let dirs = fs::read_dir(dir)?;\n-    for file in dirs {\n+    for file in fs::read_dir(dir)? {\n         let file = file?;\n         let file_path = file.path();\n         let file_name = file.file_name();\n@@ -679,7 +674,7 @@ fn collect_timestamps(path: &PathBuf) -> impl Iterator<Item=FileTime> {\n     WalkDir::new(path)\n         .into_iter()\n         .map(|entry| entry.unwrap())\n-        .filter(|entry| entry.metadata().unwrap().is_file())\n+        .filter(|entry| entry.file_type().is_file())\n         .map(|entry| mtime(entry.path()))\n }\n \n@@ -707,14 +702,12 @@ fn up_to_date(\n         .expect(\"Could not find Rust source root\");\n     let stamp = mtime(&stamp_name);\n     let mut inputs = vec![mtime(&testpaths.file), mtime(&config.rustc_path)];\n-    for aux in props.aux.iter() {\n-        inputs.push(mtime(&testpaths\n-            .file\n-            .parent()\n-            .unwrap()\n-            .join(\"auxiliary\")\n-            .join(aux)));\n-    }\n+    inputs.extend(\n+        props\n+            .aux\n+            .iter()\n+            .map(|aux| mtime(&testpaths.file.parent().unwrap().join(\"auxiliary\").join(aux))),\n+    );\n     // Relevant pretty printer files\n     let pretty_printer_files = [\n         \"src/etc/debugger_pretty_printers_common.py\",\n@@ -723,20 +716,20 @@ fn up_to_date(\n         \"src/etc/lldb_batchmode.py\",\n         \"src/etc/lldb_rust_formatters.py\",\n     ];\n-    for pretty_printer_file in &pretty_printer_files {\n-        inputs.push(mtime(&rust_src_dir.join(pretty_printer_file)));\n-    }\n+    inputs.extend(pretty_printer_files.iter().map(|pretty_printer_file| {\n+        mtime(&rust_src_dir.join(pretty_printer_file))\n+    }));\n     inputs.extend(collect_timestamps(&config.run_lib_path));\n     if let Some(ref rustdoc_path) = config.rustdoc_path {\n         inputs.push(mtime(&rustdoc_path));\n         inputs.push(mtime(&rust_src_dir.join(\"src/etc/htmldocck.py\")));\n     }\n \n     // UI test files.\n-    for extension in UI_EXTENSIONS {\n+    inputs.extend(UI_EXTENSIONS.iter().map(|extension| {\n         let path = &expected_output_path(testpaths, revision, &config.compare_mode, extension);\n-        inputs.push(mtime(path));\n-    }\n+        mtime(path)\n+    }));\n \n     // Compiletest itself.\n     inputs.extend(collect_timestamps(&rust_src_dir.join(\"src/tools/compiletest/\")));"}]}