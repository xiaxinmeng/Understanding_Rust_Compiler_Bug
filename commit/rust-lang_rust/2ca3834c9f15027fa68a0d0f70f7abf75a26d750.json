{"sha": "2ca3834c9f15027fa68a0d0f70f7abf75a26d750", "node_id": "C_kwDOAAsO6NoAKDJjYTM4MzRjOWYxNTAyN2ZhNjhhMGQwZjcwZjdhYmY3NWEyNmQ3NTA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-20T09:14:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-20T09:14:38Z"}, "message": "Merge #11062\n\n11062: fix: Don't say \"a reference to\" for `Copy` types in the generate getter assist r=Veykril a=patrick-gu\n\nThis changes the generate getter assist to not say \"a reference to\" in the documentation stub if the type is `Copy`, as the getter does not return a reference.\r\n\r\nTo determine whether the type is `Copy`, I have added an `is_copy` method to `ReferenceConversion`.\n\nCo-authored-by: patrick-gu <55641350+patrick-gu@users.noreply.github.com>", "tree": {"sha": "b9cdd0674d7cc5742eb069ef4b8c5928d11ad084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9cdd0674d7cc5742eb069ef4b8c5928d11ad084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ca3834c9f15027fa68a0d0f70f7abf75a26d750", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhwEl+CRBK7hj4Ov3rIwAAJZAIAJhc2dzAEPQZ4Ca90m/UlN6t\nabuWd534tXK25Fcc7NOeDrvBYVOoBdcyHot7YTiYA/y64GywLngQ7WOnD693suPa\n16dti3IlH4d+SHs7oUT5e7NvRiwFkJ6QS1FPIt3+diSafd32F15sCPBu+QQxCJaO\nvC7lvLYr8xLE/P7ch7SokQifkzufZUjLhozuvZ8r5g+vmWQygRQ1SYqYStfg4R1P\nwZ4C5AB79WxGFodSld5kmAGep++ZuMclDyBtr7WHhWLRcOhpIqtomRzvQil17WzJ\nqgXNhnSLhLF8D7SjeCM0qVaAsGp5dl+EUraIwU0/DREiYzUw5ZGccslaJ4WiC44=\n=LmJ5\n-----END PGP SIGNATURE-----\n", "payload": "tree b9cdd0674d7cc5742eb069ef4b8c5928d11ad084\nparent 0add6e95e58633fde2fff0bccaf6c7d71ebc130f\nparent 76b50f14f74dac4d26969517709b5837505bc1d7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1639991678 +0000\ncommitter GitHub <noreply@github.com> 1639991678 +0000\n\nMerge #11062\n\n11062: fix: Don't say \"a reference to\" for `Copy` types in the generate getter assist r=Veykril a=patrick-gu\n\nThis changes the generate getter assist to not say \"a reference to\" in the documentation stub if the type is `Copy`, as the getter does not return a reference.\r\n\r\nTo determine whether the type is `Copy`, I have added an `is_copy` method to `ReferenceConversion`.\n\nCo-authored-by: patrick-gu <55641350+patrick-gu@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca3834c9f15027fa68a0d0f70f7abf75a26d750", "html_url": "https://github.com/rust-lang/rust/commit/2ca3834c9f15027fa68a0d0f70f7abf75a26d750", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ca3834c9f15027fa68a0d0f70f7abf75a26d750/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0add6e95e58633fde2fff0bccaf6c7d71ebc130f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0add6e95e58633fde2fff0bccaf6c7d71ebc130f", "html_url": "https://github.com/rust-lang/rust/commit/0add6e95e58633fde2fff0bccaf6c7d71ebc130f"}, {"sha": "76b50f14f74dac4d26969517709b5837505bc1d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/76b50f14f74dac4d26969517709b5837505bc1d7", "html_url": "https://github.com/rust-lang/rust/commit/76b50f14f74dac4d26969517709b5837505bc1d7"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "653e448cbb0fed0042eee06524551786de0613ba", "filename": "crates/ide_assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2ca3834c9f15027fa68a0d0f70f7abf75a26d750/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca3834c9f15027fa68a0d0f70f7abf75a26d750/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=2ca3834c9f15027fa68a0d0f70f7abf75a26d750", "patch": "@@ -112,8 +112,12 @@ pub(crate) fn generate_getter_impl(\n             }\n \n             let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n-            let (ty, body) = if mutable {\n-                (format!(\"&mut {}\", field_ty), format!(\"&mut self.{}\", field_name))\n+            let (ty, body, description) = if mutable {\n+                (\n+                    format!(\"&mut {}\", field_ty),\n+                    format!(\"&mut self.{}\", field_name),\n+                    \"a mutable reference to \",\n+                )\n             } else {\n                 let famous_defs = &FamousDefs(&ctx.sema, ctx.sema.scope(field_ty.syntax()).krate());\n                 ctx.sema\n@@ -124,18 +128,25 @@ pub(crate) fn generate_getter_impl(\n                         (\n                             conversion.convert_type(ctx.db()),\n                             conversion.getter(field_name.to_string()),\n+                            if conversion.is_copy() { \"\" } else { \"a reference to \" },\n+                        )\n+                    })\n+                    .unwrap_or_else(|| {\n+                        (\n+                            format!(\"&{}\", field_ty),\n+                            format!(\"&self.{}\", field_name),\n+                            \"a reference to \",\n                         )\n                     })\n-                    .unwrap_or_else(|| (format!(\"&{}\", field_ty), format!(\"&self.{}\", field_name)))\n             };\n \n             format_to!(\n                 buf,\n-                \"    /// Get a {}reference to the {}'s {}.\n+                \"    /// Get {}the {}'s {}.\n     {}fn {}(&{}self) -> {} {{\n         {}\n     }}\",\n-                mutable.then(|| \"mutable \").unwrap_or_default(),\n+                description,\n                 to_lower_snake_case(&strukt_name.to_string()).replace('_', \" \"),\n                 fn_name.trim_end_matches(\"_mut\").replace('_', \" \"),\n                 vis,\n@@ -349,7 +360,7 @@ struct S { foo: $0bool }\n struct S { foo: bool }\n \n impl S {\n-    /// Get a reference to the s's foo.\n+    /// Get the s's foo.\n     fn $0foo(&self) -> bool {\n         self.foo\n     }"}, {"sha": "e1ee3f3ad45035216cfb2585a5c453f372938717", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca3834c9f15027fa68a0d0f70f7abf75a26d750/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca3834c9f15027fa68a0d0f70f7abf75a26d750/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=2ca3834c9f15027fa68a0d0f70f7abf75a26d750", "patch": "@@ -571,6 +571,10 @@ impl ReferenceConversion {\n             | ReferenceConversionType::Result => format!(\"self.{}.as_ref()\", field_name),\n         }\n     }\n+\n+    pub(crate) fn is_copy(&self) -> bool {\n+        matches!(self.conversion, ReferenceConversionType::Copy)\n+    }\n }\n \n // FIXME: It should return a new hir::Type, but currently constructing new types is too cumbersome"}]}