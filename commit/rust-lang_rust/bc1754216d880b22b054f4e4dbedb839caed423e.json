{"sha": "bc1754216d880b22b054f4e4dbedb839caed423e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMTc1NDIxNmQ4ODBiMjJiMDU0ZjRlNGRiZWRiODM5Y2FlZDQyM2U=", "commit": {"author": {"name": "Jeff Crocker", "email": "crockagile@gmail.com", "date": "2017-12-05T22:40:13Z"}, "committer": {"name": "Jeff Crocker", "email": "crockagile@gmail.com", "date": "2017-12-05T22:40:13Z"}, "message": "Update function interface fingerprint hash tests", "tree": {"sha": "39ad1c97656431c0755542d2ac3dd353b7a13584", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39ad1c97656431c0755542d2ac3dd353b7a13584"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc1754216d880b22b054f4e4dbedb839caed423e", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJaJyBNAAoJEAWZfbCdMLzWqmwP/2ZhlyTwCxb2aG0ZeNceIRZc\nJmNAAV3XkXQ7t3F4/lnvuEpfibR7O2iBLLNAMCOjVnxrAjgwTCjXMNe1ynQO+DXh\nJBSHX0Xn72ywwPeEmO+UXwW8DQgDq7mAsbfAtLeWqdjezMexIVEWna2sOHMqafcY\nMKdwyQxK9KckHpUC0k9IBXFJR0H8iSCT3I/EeRW7qTDQM8Nz3VITTeQT1a8hWTha\nfG0TahjOtJp1YfxkksyJLDc8D4s7WZPxClvFeAqAGtnHKrw5LqvqVdrPTwUpVMOa\nYgKj8+QaFopJKA3LCGjm0jDfeQIlH81/D/heG6Z5c1MdPM7hslRgfm3dCiRpYyl4\nwYH0QYGQVy6OJN71s5nN1MvgoH4Zt+2M9p9Pc+XxR3CKXUxMYE3r5wUhnQsaqOcH\nhYaKaHdorCaYZP2o/+fbZI0mezPlb/RHBsqsUogIbmxqrFlSH40JflIg29/ImtBM\nG1wD74E/O6zAYnakRBVx0c+xXoicBlGRlMbFWg3zBXmc8m8mYRjJcA15aa5a4vxa\n87YA6jdrWsltkTl267BSmykxINPOJ/gH2Ndlo/78TYkzF6V+d4mZmQC73Vx1KmfS\n/s65/fJX26aTCXBLt2B4m40tv3CfGnX2WEjRPcFMKyYxKUNr+2VUFnvRS/5kzhIU\nb5/RxYKm2cKxcw4EDbSo\n=hgjl\n-----END PGP SIGNATURE-----", "payload": "tree 39ad1c97656431c0755542d2ac3dd353b7a13584\nparent bf3246fa10532dbed304a30000749f35a4f7c81e\nauthor Jeff Crocker <crockagile@gmail.com> 1512513613 -0800\ncommitter Jeff Crocker <crockagile@gmail.com> 1512513613 -0800\n\nUpdate function interface fingerprint hash tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1754216d880b22b054f4e4dbedb839caed423e", "html_url": "https://github.com/rust-lang/rust/commit/bc1754216d880b22b054f4e4dbedb839caed423e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc1754216d880b22b054f4e4dbedb839caed423e/comments", "author": {"login": "CrockAgile", "id": 5395183, "node_id": "MDQ6VXNlcjUzOTUxODM=", "avatar_url": "https://avatars.githubusercontent.com/u/5395183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CrockAgile", "html_url": "https://github.com/CrockAgile", "followers_url": "https://api.github.com/users/CrockAgile/followers", "following_url": "https://api.github.com/users/CrockAgile/following{/other_user}", "gists_url": "https://api.github.com/users/CrockAgile/gists{/gist_id}", "starred_url": "https://api.github.com/users/CrockAgile/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CrockAgile/subscriptions", "organizations_url": "https://api.github.com/users/CrockAgile/orgs", "repos_url": "https://api.github.com/users/CrockAgile/repos", "events_url": "https://api.github.com/users/CrockAgile/events{/privacy}", "received_events_url": "https://api.github.com/users/CrockAgile/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CrockAgile", "id": 5395183, "node_id": "MDQ6VXNlcjUzOTUxODM=", "avatar_url": "https://avatars.githubusercontent.com/u/5395183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CrockAgile", "html_url": "https://github.com/CrockAgile", "followers_url": "https://api.github.com/users/CrockAgile/followers", "following_url": "https://api.github.com/users/CrockAgile/following{/other_user}", "gists_url": "https://api.github.com/users/CrockAgile/gists{/gist_id}", "starred_url": "https://api.github.com/users/CrockAgile/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CrockAgile/subscriptions", "organizations_url": "https://api.github.com/users/CrockAgile/orgs", "repos_url": "https://api.github.com/users/CrockAgile/repos", "events_url": "https://api.github.com/users/CrockAgile/events{/privacy}", "received_events_url": "https://api.github.com/users/CrockAgile/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf3246fa10532dbed304a30000749f35a4f7c81e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3246fa10532dbed304a30000749f35a4f7c81e", "html_url": "https://github.com/rust-lang/rust/commit/bf3246fa10532dbed304a30000749f35a4f7c81e"}], "stats": {"total": 216, "additions": 108, "deletions": 108}, "files": [{"sha": "896144db053c894af3fb4f0a9eedf3e195ec181a", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 108, "deletions": 108, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/bc1754216d880b22b054f4e4dbedb839caed423e/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1754216d880b22b054f4e4dbedb839caed423e/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=bc1754216d880b22b054f4e4dbedb839caed423e", "patch": "@@ -32,317 +32,317 @@\n // Add Parameter ---------------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn add_parameter() {}\n+pub fn add_parameter() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn add_parameter(p: i32) {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, MirValidated, MirOptimized, TypeckTables, FnSignature\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn add_parameter(p: i32) {}\n \n \n // Add Return Type -------------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn add_return_type() {}\n+pub fn add_return_type() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn add_return_type() -> () {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn add_return_type() -> () {}\n \n \n // Change Parameter Type -------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn type_of_parameter(p: i32) {}\n+pub fn type_of_parameter(p: i32) {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn type_of_parameter(p: i64) {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, MirValidated, MirOptimized, TypeckTables, FnSignature\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn type_of_parameter(p: i64) {}\n \n \n // Change Parameter Type Reference ---------------------------------------------\n \n #[cfg(cfail1)]\n-fn type_of_parameter_ref(p: &i32) {}\n+pub fn type_of_parameter_ref(p: &i32) {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn type_of_parameter_ref(p: &mut i32) {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, MirValidated, MirOptimized, TypeckTables, FnSignature\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn type_of_parameter_ref(p: &mut i32) {}\n \n \n // Change Parameter Order ------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn order_of_parameters(p1: i32, p2: i64) {}\n+pub fn order_of_parameters(p1: i32, p2: i64) {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn order_of_parameters(p2: i64, p1: i32) {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, MirValidated, MirOptimized, TypeckTables, FnSignature\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn order_of_parameters(p2: i64, p1: i32) {}\n \n \n // Unsafe ----------------------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn make_unsafe() {}\n+pub fn make_unsafe() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-unsafe fn make_unsafe() {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, MirValidated, MirOptimized, TypeckTables, FnSignature\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub unsafe fn make_unsafe() {}\n \n \n // Extern ----------------------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn make_extern() {}\n+pub fn make_extern() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-extern fn make_extern() {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, TypeckTables, FnSignature\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub extern fn make_extern() {}\n \n \n // Extern C Extern Rust-Intrinsic ----------------------------------------------\n \n #[cfg(cfail1)]\n-extern \"C\" fn make_intrinsic() {}\n+pub extern \"C\" fn make_intrinsic() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-extern \"rust-intrinsic\" fn make_intrinsic() {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, TypeckTables, FnSignature\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub extern \"rust-intrinsic\" fn make_intrinsic() {}\n \n \n // Type Parameter --------------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn type_parameter() {}\n+pub fn type_parameter() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn type_parameter<T>() {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, GenericsOfItem, TypeOfItem, PredicatesOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn type_parameter<T>() {}\n \n \n // Lifetime Parameter ----------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn lifetime_parameter() {}\n+pub fn lifetime_parameter() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn lifetime_parameter<'a>() {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, GenericsOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn lifetime_parameter<'a>() {}\n \n \n // Trait Bound -----------------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn trait_bound<T>() {}\n+pub fn trait_bound<T>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn trait_bound<T: Eq>() {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, PredicatesOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn trait_bound<T: Eq>() {}\n \n \n // Builtin Bound ---------------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn builtin_bound<T>() {}\n+pub fn builtin_bound<T>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn builtin_bound<T: Send>() {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, PredicatesOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn builtin_bound<T: Send>() {}\n \n \n // Lifetime Bound --------------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn lifetime_bound<'a, T>() {}\n+pub fn lifetime_bound<'a, T>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn lifetime_bound<'a, T: 'a>() {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, GenericsOfItem, TypeOfItem, PredicatesOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn lifetime_bound<'a, T: 'a>() {}\n \n \n // Second Trait Bound ----------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn second_trait_bound<T: Eq>() {}\n+pub fn second_trait_bound<T: Eq>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn second_trait_bound<T: Eq + Clone>() {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, PredicatesOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn second_trait_bound<T: Eq + Clone>() {}\n \n \n // Second Builtin Bound --------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn second_builtin_bound<T: Send>() {}\n+pub fn second_builtin_bound<T: Send>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn second_builtin_bound<T: Send + Sized>() {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, PredicatesOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn second_builtin_bound<T: Send + Sized>() {}\n \n \n // Second Lifetime Bound -------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn second_lifetime_bound<'a, 'b, T: 'a>() {}\n+pub fn second_lifetime_bound<'a, 'b, T: 'a>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn second_lifetime_bound<'a, 'b, T: 'a + 'b>() {}\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, GenericsOfItem, TypeOfItem, PredicatesOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn second_lifetime_bound<'a, 'b, T: 'a + 'b>() {}\n \n \n // Inline ----------------------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn inline() {}\n+pub fn inline() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[inline]\n-fn inline() {}\n+pub fn inline() {}\n \n \n // Inline Never ----------------------------------------------------------------\n \n #[cfg(cfail1)]\n #[inline(always)]\n-fn inline_never() {}\n+pub fn inline_never() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[inline(never)]\n-fn inline_never() {}\n+pub fn inline_never() {}\n \n \n // No Mangle -------------------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn no_mangle() {}\n+pub fn no_mangle() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[no_mangle]\n-fn no_mangle() {}\n+pub fn no_mangle() {}\n \n \n // Linkage ---------------------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn linkage() {}\n+pub fn linkage() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[linkage=\"weak_odr\"]\n-fn linkage() {}\n+pub fn linkage() {}\n \n \n // Return Impl Trait -----------------------------------------------------------\n \n #[cfg(cfail1)]\n-fn return_impl_trait() -> i32 {\n+pub fn return_impl_trait() -> i32 {\n     0\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn return_impl_trait() -> impl Clone {\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, TypeckTables, FnSignature\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn return_impl_trait() -> impl Clone {\n     0\n }\n \n \n // Change Return Impl Trait ----------------------------------------------------\n \n #[cfg(cfail1)]\n-fn change_return_impl_trait() -> impl Clone {\n+pub fn change_return_impl_trait() -> impl Clone {\n     0u32\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-fn change_return_impl_trait() -> impl Copy {\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n+pub fn change_return_impl_trait() -> impl Copy {\n     0u32\n }\n \n \n // Change Return Type Indirectly -----------------------------------------------\n \n-struct ReferencedType1;\n-struct ReferencedType2;\n+pub struct ReferencedType1;\n+pub struct ReferencedType2;\n \n-mod change_return_type_indirectly {\n+pub mod change_return_type_indirectly {\n     #[cfg(cfail1)]\n     use super::ReferencedType1 as ReturnType;\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as ReturnType;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    fn indirect_return_type() -> ReturnType {\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, MirValidated, MirOptimized, TypeckTables, FnSignature\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n+    pub fn indirect_return_type() -> ReturnType {\n         ReturnType {}\n     }\n }\n \n \n // Change Parameter Type Indirectly --------------------------------------------\n \n-mod change_parameter_type_indirectly {\n+pub mod change_parameter_type_indirectly {\n     #[cfg(cfail1)]\n     use super::ReferencedType1 as ParameterType;\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as ParameterType;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    fn indirect_parameter_type(p: ParameterType) {}\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, MirValidated, MirOptimized, TypeckTables, FnSignature\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n+    pub fn indirect_parameter_type(p: ParameterType) {}\n }\n \n \n // Change Trait Bound Indirectly -----------------------------------------------\n \n-trait ReferencedTrait1 {}\n-trait ReferencedTrait2 {}\n+pub trait ReferencedTrait1 {}\n+pub trait ReferencedTrait2 {}\n \n-mod change_trait_bound_indirectly {\n+pub mod change_trait_bound_indirectly {\n     #[cfg(cfail1)]\n     use super::ReferencedTrait1 as Trait;\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    fn indirect_trait_bound<T: Trait>(p: T) {}\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, PredicatesOfItem\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n+    pub fn indirect_trait_bound<T: Trait>(p: T) {}\n }\n \n \n // Change Trait Bound Indirectly In Where Clause -------------------------------\n \n-mod change_trait_bound_indirectly_in_where_clause {\n+pub mod change_trait_bound_indirectly_in_where_clause {\n     #[cfg(cfail1)]\n     use super::ReferencedTrait1 as Trait;\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    fn indirect_trait_bound_where<T>(p: T) where T: Trait {}\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir, HirBody, PredicatesOfItem\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n+    pub fn indirect_trait_bound_where<T>(p: T) where T: Trait {}\n }"}]}