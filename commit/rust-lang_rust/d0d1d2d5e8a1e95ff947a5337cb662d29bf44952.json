{"sha": "d0d1d2d5e8a1e95ff947a5337cb662d29bf44952", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZDFkMmQ1ZThhMWU5NWZmOTQ3YTUzMzdjYjY2MmQyOWJmNDQ5NTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-04T12:47:46Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-11T10:28:11Z"}, "message": "Remove `*offset*` methods from `PrimVal` onto `Pointer`", "tree": {"sha": "2c083b67402fc28ba9418493f4b6d998dca73cd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c083b67402fc28ba9418493f4b6d998dca73cd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0d1d2d5e8a1e95ff947a5337cb662d29bf44952", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAllkqDsACgkQpp+NIls6\n19kmoRAAq4+ivXzU3/mSfIq/pnYsUaztOe5Oj7hLHCezJC93yEoVUzou3dgTph01\nh4NFdaxteoRTfsrEPten0uZgmOiX8GnLDs84/n7Pz12W6m+sK9mf6aWLfsHlIwJl\nld/X2k31XXTww3m/m2nJIeP7x2MRD4q6xAVAyKMsxIFITdB49umOJ6G887g7oZXI\npKPvgr4vAC6sMKbcqO3l9ltFJTa1mAsBgGo9dz/WhTiHPwqEHF8sOXByzYhqVZ27\nB63TuRbWCs/geceRsnOvZEBNAObtahWs+URuuT1THJoOYtWKGoO1qGCYEZpYbMy9\nrcxHSJ4KXtFBf51PveKIGVXKgXM0mktfKg3UJNkajzqLPXuyKPmjyL4ydoLnnduY\noOscM0+uqrsBtmmrO1v/91qjIBXOCth5W84e7YJWx6oSt6oYXdcWh+ScPhRUIWj1\n125Khc/fgedUOAWww49qYtIgstTydStojURsvTbCQz3enEU4qHdguq8Fxq/iNwqH\nNNwsyGZAI46FhwmsCtzvxE2sPCDkA1OcMjanJx6lISxKmfXrc/BcF0EXplLmC5hl\n6zcwvNAxaD0g2YnXzycz3fSnIi74ffZJV4LT724SDtZ0t7ykhSYwoeZIcLi52QbU\ne9hbYD+0Qdiaw+nTorgPIJfkZrRdH20YPJxGcmVm25S5QoBZbUM=\n=YpHX\n-----END PGP SIGNATURE-----", "payload": "tree 2c083b67402fc28ba9418493f4b6d998dca73cd4\nparent 03f0a88002ad7c7ace7db5960cdb90150fd8ea29\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1499172466 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1499768891 +0200\n\nRemove `*offset*` methods from `PrimVal` onto `Pointer`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d1d2d5e8a1e95ff947a5337cb662d29bf44952", "html_url": "https://github.com/rust-lang/rust/commit/d0d1d2d5e8a1e95ff947a5337cb662d29bf44952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0d1d2d5e8a1e95ff947a5337cb662d29bf44952/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03f0a88002ad7c7ace7db5960cdb90150fd8ea29", "url": "https://api.github.com/repos/rust-lang/rust/commits/03f0a88002ad7c7ace7db5960cdb90150fd8ea29", "html_url": "https://github.com/rust-lang/rust/commit/03f0a88002ad7c7ace7db5960cdb90150fd8ea29"}], "stats": {"total": 60, "additions": 24, "deletions": 36}, "files": [{"sha": "a69c84aa083e002dcf691e7098a9e53c7c0a0e63", "filename": "src/value.rs", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d0d1d2d5e8a1e95ff947a5337cb662d29bf44952/src%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d1d2d5e8a1e95ff947a5337cb662d29bf44952/src%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue.rs?ref=d0d1d2d5e8a1e95ff947a5337cb662d29bf44952", "patch": "@@ -58,15 +58,36 @@ impl<'tcx> Pointer {\n     }\n \n     pub(crate) fn signed_offset(self, i: i64, layout: &TargetDataLayout) -> EvalResult<'tcx, Self> {\n-        self.primval.signed_offset(i, layout).map(Pointer::from)\n+        match self.primval {\n+            PrimVal::Bytes(b) => {\n+                assert_eq!(b as u64 as u128, b);\n+                Ok(Pointer::from(PrimVal::Bytes(signed_offset(b as u64, i, layout)? as u128)))\n+            },\n+            PrimVal::Ptr(ptr) => ptr.signed_offset(i, layout).map(Pointer::from),\n+            PrimVal::Undef => Err(EvalError::ReadUndefBytes),\n+        }\n     }\n \n     pub(crate) fn offset(self, i: u64, layout: &TargetDataLayout) -> EvalResult<'tcx, Self> {\n-        self.primval.offset(i, layout).map(Pointer::from)\n+        match self.primval {\n+            PrimVal::Bytes(b) => {\n+                assert_eq!(b as u64 as u128, b);\n+                Ok(Pointer::from(PrimVal::Bytes(offset(b as u64, i, layout)? as u128)))\n+            },\n+            PrimVal::Ptr(ptr) => ptr.offset(i, layout).map(Pointer::from),\n+            PrimVal::Undef => Err(EvalError::ReadUndefBytes),\n+        }\n     }\n \n     pub(crate) fn wrapping_signed_offset(self, i: i64, layout: &TargetDataLayout) -> EvalResult<'tcx, Self> {\n-        self.primval.wrapping_signed_offset(i, layout).map(Pointer::from)\n+        match self.primval {\n+            PrimVal::Bytes(b) => {\n+                assert_eq!(b as u64 as u128, b);\n+                Ok(Pointer::from(PrimVal::Bytes(wrapping_signed_offset(b as u64, i, layout) as u128)))\n+            },\n+            PrimVal::Ptr(ptr) => Ok(Pointer::from(ptr.wrapping_signed_offset(i, layout))),\n+            PrimVal::Undef => Err(EvalError::ReadUndefBytes),\n+        }\n     }\n \n     pub fn is_null(self) -> EvalResult<'tcx, bool> {\n@@ -278,39 +299,6 @@ impl<'tcx> PrimVal {\n             _ => Err(EvalError::InvalidBool),\n         }\n     }\n-\n-    pub(crate) fn signed_offset(self, i: i64, layout: &TargetDataLayout) -> EvalResult<'tcx, Self> {\n-        match self {\n-            PrimVal::Bytes(b) => {\n-                assert_eq!(b as u64 as u128, b);\n-                Ok(PrimVal::Bytes(signed_offset(b as u64, i, layout)? as u128))\n-            },\n-            PrimVal::Ptr(ptr) => ptr.signed_offset(i, layout).map(PrimVal::Ptr),\n-            PrimVal::Undef => Err(EvalError::ReadUndefBytes),\n-        }\n-    }\n-\n-    pub(crate) fn offset(self, i: u64, layout: &TargetDataLayout) -> EvalResult<'tcx, Self> {\n-        match self {\n-            PrimVal::Bytes(b) => {\n-                assert_eq!(b as u64 as u128, b);\n-                Ok(PrimVal::Bytes(offset(b as u64, i, layout)? as u128))\n-            },\n-            PrimVal::Ptr(ptr) => ptr.offset(i, layout).map(PrimVal::Ptr),\n-            PrimVal::Undef => Err(EvalError::ReadUndefBytes),\n-        }\n-    }\n-\n-    pub(crate) fn wrapping_signed_offset(self, i: i64, layout: &TargetDataLayout) -> EvalResult<'tcx, Self> {\n-        match self {\n-            PrimVal::Bytes(b) => {\n-                assert_eq!(b as u64 as u128, b);\n-                Ok(PrimVal::Bytes(wrapping_signed_offset(b as u64, i, layout) as u128))\n-            },\n-            PrimVal::Ptr(ptr) => Ok(PrimVal::Ptr(ptr.wrapping_signed_offset(i, layout))),\n-            PrimVal::Undef => Err(EvalError::ReadUndefBytes),\n-        }\n-    }\n }\n \n // Overflow checking only works properly on the range from -u64 to +u64."}]}