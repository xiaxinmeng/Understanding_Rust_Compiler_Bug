{"sha": "5179ebe2064e15196c5be1f8df950736140b8fdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNzllYmUyMDY0ZTE1MTk2YzViZTFmOGRmOTUwNzM2MTQwYjhmZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-13T12:50:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-13T12:50:43Z"}, "message": "Auto merge of #70961 - ecstatic-morse:into-def-id, r=eddyb\n\nTake `impl Into<DefId>` for query methods on `TyCtxt`\n\nAlternative implementation of #70956. cc #70853.", "tree": {"sha": "c315639b655f8bd1014db97b02364f12e89986a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c315639b655f8bd1014db97b02364f12e89986a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5179ebe2064e15196c5be1f8df950736140b8fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5179ebe2064e15196c5be1f8df950736140b8fdd", "html_url": "https://github.com/rust-lang/rust/commit/5179ebe2064e15196c5be1f8df950736140b8fdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5179ebe2064e15196c5be1f8df950736140b8fdd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d28a46444eacf066ea0e7fdf6eda066e315aaa4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d28a46444eacf066ea0e7fdf6eda066e315aaa4a", "html_url": "https://github.com/rust-lang/rust/commit/d28a46444eacf066ea0e7fdf6eda066e315aaa4a"}, {"sha": "04c91a0bba32d7c361b17ee8c5c0b3cc12c0d42b", "url": "https://api.github.com/repos/rust-lang/rust/commits/04c91a0bba32d7c361b17ee8c5c0b3cc12c0d42b", "html_url": "https://github.com/rust-lang/rust/commit/04c91a0bba32d7c361b17ee8c5c0b3cc12c0d42b"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "899479e65a732086dbea75660f45ce634d625907", "filename": "src/librustc_middle/ty/query/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5179ebe2064e15196c5be1f8df950736140b8fdd/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5179ebe2064e15196c5be1f8df950736140b8fdd/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs?ref=5179ebe2064e15196c5be1f8df950736140b8fdd", "patch": "@@ -189,3 +189,31 @@ pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool\n pub(crate) fn try_load_from_on_disk_cache<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) {\n     rustc_dep_node_try_load_from_on_disk_cache!(dep_node, tcx)\n }\n+\n+mod sealed {\n+    use super::{DefId, LocalDefId};\n+\n+    /// An analogue of the `Into` trait that's intended only for query paramaters.\n+    ///\n+    /// This exists to allow queries to accept either `DefId` or `LocalDefId` while requiring that the\n+    /// user call `to_def_id` to convert between them everywhere else.\n+    pub trait IntoQueryParam<P> {\n+        fn into_query_param(self) -> P;\n+    }\n+\n+    impl<P> IntoQueryParam<P> for P {\n+        #[inline(always)]\n+        fn into_query_param(self) -> P {\n+            self\n+        }\n+    }\n+\n+    impl IntoQueryParam<DefId> for LocalDefId {\n+        #[inline(always)]\n+        fn into_query_param(self) -> DefId {\n+            self.to_def_id()\n+        }\n+    }\n+}\n+\n+use sealed::IntoQueryParam;"}, {"sha": "068322b08b7a31a4eef5c1b8350aacacf31a4577", "filename": "src/librustc_middle/ty/query/plumbing.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5179ebe2064e15196c5be1f8df950736140b8fdd/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5179ebe2064e15196c5be1f8df950736140b8fdd/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs?ref=5179ebe2064e15196c5be1f8df950736140b8fdd", "patch": "@@ -234,18 +234,23 @@ macro_rules! hash_result {\n \n macro_rules! define_queries {\n     (<$tcx:tt> $($category:tt {\n-        $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident: $node:ident($K:ty) -> $V:ty,)*\n+        $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident: $node:ident($($K:tt)*) -> $V:ty,)*\n     },)*) => {\n         define_queries_inner! { <$tcx>\n-            $($( $(#[$attr])* category<$category> [$($modifiers)*] fn $name: $node($K) -> $V,)*)*\n+            $($( $(#[$attr])* category<$category> [$($modifiers)*] fn $name: $node($($K)*) -> $V,)*)*\n         }\n     }\n }\n \n+macro_rules! query_helper_param_ty {\n+    (DefId) => { impl IntoQueryParam<DefId> };\n+    ($K:ty) => { $K };\n+}\n+\n macro_rules! define_queries_inner {\n     (<$tcx:tt>\n      $($(#[$attr:meta])* category<$category:tt>\n-        [$($modifiers:tt)*] fn $name:ident: $node:ident($K:ty) -> $V:ty,)*) => {\n+        [$($modifiers:tt)*] fn $name:ident: $node:ident($($K:tt)*) -> $V:ty,)*) => {\n \n         use std::mem;\n         use crate::{\n@@ -263,7 +268,7 @@ macro_rules! define_queries_inner {\n         #[allow(nonstandard_style)]\n         #[derive(Clone, Debug)]\n         pub enum Query<$tcx> {\n-            $($(#[$attr])* $name($K)),*\n+            $($(#[$attr])* $name($($K)*)),*\n         }\n \n         impl<$tcx> Query<$tcx> {\n@@ -321,7 +326,7 @@ macro_rules! define_queries_inner {\n         }\n \n         $(impl<$tcx> QueryConfig<TyCtxt<$tcx>> for queries::$name<$tcx> {\n-            type Key = $K;\n+            type Key = $($K)*;\n             type Value = $V;\n             const NAME: &'static str = stringify!($name);\n             const CATEGORY: ProfileCategory = $category;\n@@ -332,7 +337,7 @@ macro_rules! define_queries_inner {\n             const EVAL_ALWAYS: bool = is_eval_always!([$($modifiers)*]);\n             const DEP_KIND: dep_graph::DepKind = dep_graph::DepKind::$node;\n \n-            type Cache = query_storage!([$($modifiers)*][$K, $V]);\n+            type Cache = query_storage!([$($modifiers)*][$($K)*, $V]);\n \n             #[inline(always)]\n             fn query_state<'a>(tcx: TyCtxt<$tcx>) -> &'a QueryState<TyCtxt<$tcx>, Self::Cache> {\n@@ -380,8 +385,8 @@ macro_rules! define_queries_inner {\n         impl TyCtxtEnsure<$tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n-            pub fn $name(self, key: $K) {\n-                ensure_query::<queries::$name<'_>, _>(self.tcx, key)\n+            pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n+                ensure_query::<queries::$name<'_>, _>(self.tcx, key.into_query_param())\n             })*\n         }\n \n@@ -421,7 +426,7 @@ macro_rules! define_queries_inner {\n \n             $($(#[$attr])*\n             #[inline(always)]\n-            pub fn $name(self, key: $K) -> $V {\n+            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> $V {\n                 self.at(DUMMY_SP).$name(key)\n             })*\n \n@@ -458,14 +463,14 @@ macro_rules! define_queries_inner {\n         impl TyCtxtAt<$tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n-            pub fn $name(self, key: $K) -> $V {\n-                get_query::<queries::$name<'_>, _>(self.tcx, self.span, key)\n+            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> $V {\n+                get_query::<queries::$name<'_>, _>(self.tcx, self.span, key.into_query_param())\n             })*\n         }\n \n         define_provider_struct! {\n             tcx: $tcx,\n-            input: ($(([$($modifiers)*] [$name] [$K] [$V]))*)\n+            input: ($(([$($modifiers)*] [$name] [$($K)*] [$V]))*)\n         }\n \n         impl<$tcx> Copy for Providers<$tcx> {}"}, {"sha": "912f8be1d3342a1a48443cec05d71467d7e2f7a4", "filename": "src/librustc_middle/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5179ebe2064e15196c5be1f8df950736140b8fdd/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5179ebe2064e15196c5be1f8df950736140b8fdd/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs?ref=5179ebe2064e15196c5be1f8df950736140b8fdd", "patch": "@@ -193,7 +193,7 @@ pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> &Trai\n     let mut impls = TraitImpls::default();\n \n     {\n-        let mut add_impl = |impl_def_id| {\n+        let mut add_impl = |impl_def_id: DefId| {\n             let impl_self_ty = tcx.type_of(impl_def_id);\n             if impl_def_id.is_local() && impl_self_ty.references_error() {\n                 return;"}, {"sha": "6b6e2bb329fc904aea3cd61ed8184fa0f52d4861", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5179ebe2064e15196c5be1f8df950736140b8fdd/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5179ebe2064e15196c5be1f8df950736140b8fdd/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=5179ebe2064e15196c5be1f8df950736140b8fdd", "patch": "@@ -335,7 +335,7 @@ fn for_id(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) -> CheckWfFcxBuilder<'_>\n         inherited: Inherited::build(tcx, def_id),\n         id,\n         span,\n-        param_env: tcx.param_env(def_id.to_def_id()),\n+        param_env: tcx.param_env(def_id),\n     }\n }\n "}]}