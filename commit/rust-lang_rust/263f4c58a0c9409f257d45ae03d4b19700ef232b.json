{"sha": "263f4c58a0c9409f257d45ae03d4b19700ef232b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2M2Y0YzU4YTBjOTQwOWYyNTdkNDVhZTAzZDRiMTk3MDBlZjIzMmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-12T17:28:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-12T21:47:38Z"}, "message": "add tydescs into shape, rewrite walk_fn_contents()", "tree": {"sha": "af164d0b5f13701880e15c6c6fb6701c064eb006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af164d0b5f13701880e15c6c6fb6701c064eb006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/263f4c58a0c9409f257d45ae03d4b19700ef232b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/263f4c58a0c9409f257d45ae03d4b19700ef232b", "html_url": "https://github.com/rust-lang/rust/commit/263f4c58a0c9409f257d45ae03d4b19700ef232b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/263f4c58a0c9409f257d45ae03d4b19700ef232b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e55aa6e5ef60369710d8b2e6f512b2ef84a8c548", "url": "https://api.github.com/repos/rust-lang/rust/commits/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548", "html_url": "https://github.com/rust-lang/rust/commit/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548"}], "stats": {"total": 194, "additions": 108, "deletions": 86}, "files": [{"sha": "dd064a60800673e50648d1b6d214126dda9a0cbd", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=263f4c58a0c9409f257d45ae03d4b19700ef232b", "patch": "@@ -959,9 +959,9 @@ fn trans_stack_local_derived_tydesc(cx: @block_ctxt, llsz: ValueRef,\n     ret llmyroottydesc;\n }\n \n-// Objects and closures store their type parameters differently (in the object\n-// or closure itself rather than in the type descriptor).\n-tag ty_param_storage { tps_normal; tps_obj(uint); tps_fn(uint); }\n+// Objects store their type parameters differently (in the object itself\n+// rather than in the type descriptor).\n+tag ty_param_storage { tps_normal; tps_obj(uint); }\n \n fn get_derived_tydesc(cx: @block_ctxt, t: ty::t, escapes: bool,\n                       storage: ty_param_storage,\n@@ -980,7 +980,7 @@ fn get_derived_tydesc(cx: @block_ctxt, t: ty::t, escapes: bool,\n     let is_obj_body;\n     alt storage {\n         tps_normal. { is_obj_body = false; }\n-        tps_obj(_) | tps_fn(_) { is_obj_body = true; }\n+        tps_obj(_) { is_obj_body = true; }\n     }\n \n     bcx_ccx(cx).stats.n_derived_tydescs += 1u;\n@@ -1028,7 +1028,6 @@ fn get_derived_tydesc(cx: @block_ctxt, t: ty::t, escapes: bool,\n     alt storage {\n       tps_normal. { obj_params = 0u; }\n       tps_obj(np) { obj_params = np; }\n-      tps_fn(np) { obj_params = 0x80000000u | np; }\n     }\n \n     let v;"}, {"sha": "4bd82d8b8032f6e1227327502508f3c3e8814af2", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=263f4c58a0c9409f257d45ae03d4b19700ef232b", "patch": "@@ -314,16 +314,8 @@ fn store_environment(\n         let bound_tydesc = GEPi(bcx, llbox, [0, abi::cbox_elt_tydesc]);\n         let ti = none;\n \n-        // NDM I believe this is the correct value,\n-        // but using it exposes bugs and limitations\n-        // in the shape code.  Therefore, I am using\n-        // tps_normal, which is what we used before.\n-        //\n-        // let tps = tps_fn(vec::len(lltyparams));\n-\n-        let tps = tps_normal;\n         let {result:closure_td, _} =\n-            trans::get_tydesc(bcx, cbox_ty, true, tps, ti);\n+            trans::get_tydesc(bcx, cbox_ty, true, tps_normal, ti);\n         trans::lazily_emit_tydesc_glue(bcx, abi::tydesc_field_take_glue, ti);\n         trans::lazily_emit_tydesc_glue(bcx, abi::tydesc_field_drop_glue, ti);\n         trans::lazily_emit_tydesc_glue(bcx, abi::tydesc_field_free_glue, ti);"}, {"sha": "78138434d73c4841be398a298de57379d9060471", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=263f4c58a0c9409f257d45ae03d4b19700ef232b", "patch": "@@ -357,7 +357,7 @@ class mark : public shape::data<mark,shape::ptr> {\n           case shape::SHAPE_BOX_FN: {\n               // Record an irc for the environment box, but don't descend\n               // into it since it will be walked via the box's allocation\n-              shape::data<mark,shape::ptr>::walk_fn_contents1(dp);\n+              shape::data<mark,shape::ptr>::walk_fn_contents1(dp, false);\n               break;\n           }\n           case shape::SHAPE_BARE_FN:        // Does not close over data.\n@@ -552,15 +552,14 @@ class sweep : public shape::data<sweep,shape::ptr> {\n               fn_env_pair pair = *(fn_env_pair*)dp;\n \n               // free closed over data:\n-              // \n-              // FIXME--this is a bit sketchy, since there is an\n-              // embedded tydesc that we will be using to walk the\n-              // data, but it will be freed as we walk.  In the\n-              // generated code we pull this desc out and free it\n-              // later.  We may well want to do the same.  However,\n-              // since all we use from the descr. is the \"shape\", I\n-              // think we're ok.\n-              shape::data<sweep,shape::ptr>::walk_fn_contents1(dp);\n+              shape::data<sweep,shape::ptr>::walk_fn_contents1(dp, true);\n+\n+              // now free the embedded type descr:\n+              //\n+              // see comment in walk_fn_contents1() concerning null_td\n+              // to understand why this does not occur during the normal\n+              // walk.\n+              upcall_s_free_shared_type_desc((type_desc*)pair.env->td);\n \n               // now free the ptr:\n               task->kernel->free(pair.env);"}, {"sha": "961cfe7bc461de77337a57c77891c78845e864a7", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=263f4c58a0c9409f257d45ae03d4b19700ef232b", "patch": "@@ -44,15 +44,7 @@ type_param::make(const type_desc **tydescs, unsigned n_tydescs,\n     return ptrs;\n }\n \n-// Constructs type parameters from a function shape. This is a bit messy,\n-// because it requires that the function shape have a specific format.\n-type_param *\n-type_param::from_fn_shape(rust_opaque_closure *env, arena &arena) {\n-    unsigned n_tydescs = env->td->n_obj_params & 0x7fffffff;\n-    return make(env->captured_tds, n_tydescs, arena);\n-}\n-\n-// Constructs type parameters from an object shape. This is also a bit messy,\n+// Constructs type parameters from an object shape. This is a bit messy,\n // because it requires that the object shape have a specific format.\n type_param *\n type_param::from_obj_shape(const uint8_t *sp, ptr dp, arena &arena) {\n@@ -354,6 +346,10 @@ class cmp : public data<cmp,ptr_pair> {\n         data<cmp,ptr_pair>::walk_box_contents1();\n     }\n \n+    void walk_tydesc2(char) {\n+        cmp_pointer();\n+    }\n+\n     void walk_fn2(char) { return cmp_two_pointers(); }\n     void walk_obj2()    { return cmp_two_pointers(); }\n "}, {"sha": "41cc9c11fb37a587ae94f3e0a759765c3aadcd5c", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=263f4c58a0c9409f257d45ae03d4b19700ef232b", "patch": "@@ -306,8 +306,6 @@ class type_param {\n     const rust_shape_tables *tables;\n     const type_param *params;   // subparameters\n \n-    // Constructs type parameters from a function shape.\n-    static type_param *from_fn_shape(rust_opaque_closure *env, arena &arena);\n     // Creates type parameters from an object shape description.\n     static type_param *from_obj_shape(const uint8_t *sp, ptr dp,\n                                       arena &arena);\n@@ -326,8 +324,8 @@ class type_param {\n         // have to actually have the data pointer, since we don't statically\n         // know from the type of an object or function which type parameters\n         // it closes over.\n-        assert(!tydesc->n_obj_params && \"Type-parametric objects and \"\n-               \"functions must go through from_tydesc_and_data() instead!\");\n+        assert(!tydesc->n_obj_params && \"Type-parametric objects \"\n+               \"must go through from_tydesc_and_data() instead!\");\n \n         return make(tydesc->first_param, tydesc->n_params, arena);\n     }\n@@ -337,20 +335,11 @@ class type_param {\n         if (tydesc->n_obj_params) {\n             uintptr_t n_obj_params = tydesc->n_obj_params;\n             const type_desc **first_param;\n-            if (n_obj_params & 0x80000000) {\n-                // Function closure.\n-                DPRINT(\"n_obj_params FN %lu, tydesc %p, starting at %p\\n\",\n-                       (unsigned long)n_obj_params, tydesc,\n-                       dp + sizeof(uintptr_t) + tydesc->size);\n-                n_obj_params &= 0x7fffffff;\n-                first_param = (const type_desc **)(dp + sizeof(uintptr_t));\n-            } else {\n-                // Object closure.\n-                DPRINT(\"n_obj_params OBJ %lu, tydesc %p, starting at %p\\n\",\n-                       (unsigned long)n_obj_params, tydesc,\n-                       dp + sizeof(uintptr_t) * 2);\n-                first_param = (const type_desc **)(dp + sizeof(uintptr_t) * 2);\n-            }\n+            // Object closure.\n+            DPRINT(\"n_obj_params OBJ %lu, tydesc %p, starting at %p\\n\",\n+                   (unsigned long)n_obj_params, tydesc,\n+                   dp + sizeof(uintptr_t) * 2);\n+            first_param = (const type_desc **)(dp + sizeof(uintptr_t) * 2);\n             return make(first_param, n_obj_params, arena);\n         }\n \n@@ -852,7 +841,7 @@ class data : public ctxt< data<T,U> > {\n \n     void walk_box_contents1();\n     void walk_uniq_contents1();\n-    void walk_fn_contents1(ptr &dp);\n+    void walk_fn_contents1(ptr &dp, bool null_td);\n     void walk_obj_contents1(ptr &dp);\n     void walk_iface_contents1(ptr &dp);\n     void walk_variant1(tag_info &tinfo, tag_variant_t variant);\n@@ -1008,20 +997,40 @@ data<T,U>::walk_tag1(tag_info &tinfo) {\n \n template<typename T,typename U>\n void\n-data<T,U>::walk_fn_contents1(ptr &dp) {\n+data<T,U>::walk_fn_contents1(ptr &dp, bool null_td) {\n     fn_env_pair pair = bump_dp<fn_env_pair>(dp);\n     if (!pair.env)\n         return;\n \n     arena arena;\n-    type_param *params =\n-      type_param::from_fn_shape(pair.env, arena);\n     const type_desc *closure_td = pair.env->td;\n+    type_param *params =\n+      type_param::from_tydesc(closure_td, arena);\n     ptr closure_dp((uintptr_t)pair.env);\n     T sub(*static_cast<T *>(this), closure_td->shape, params,\n           closure_td->shape_tables, closure_dp);\n     sub.align = true;\n+\n+    if (null_td) {\n+        // if null_td flag is true, null out the type descr from\n+        // the data structure while we walk.  This is used in cycle\n+        // collector when we are sweeping up data.  The idea is that\n+        // we are using the information in the embedded type desc to\n+        // walk the contents, so we do not want to free it during that\n+        // walk.  This is not *strictly* necessary today because\n+        // type_param::from_tydesc() actually pulls out the \"shape\"\n+        // string and other information and copies it into a new\n+        // location that is unaffected by the free.  But it seems\n+        // safer, particularly as this pulling out of information will\n+        // not cope with nested, derived type descriptors.\n+        pair.env->td = NULL;\n+    }\n+\n     sub.walk();\n+\n+    if (null_td) {\n+        pair.env->td = closure_td;\n+    }\n }\n \n template<typename T,typename U>\n@@ -1138,7 +1147,7 @@ class log : public data<log,ptr> {\n     void walk_fn2(char kind) {\n         out << prefix << \"fn\";\n         prefix = \"\";\n-        data<log,ptr>::walk_fn_contents1(dp);\n+        data<log,ptr>::walk_fn_contents1(dp, false);\n     }\n \n     void walk_obj2() {"}, {"sha": "65299a7d24453181b1df005047100232dcd21126", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=263f4c58a0c9409f257d45ae03d4b19700ef232b", "patch": "@@ -283,12 +283,14 @@ void upcall_s_free_shared_type_desc(type_desc *td)\n     rust_task *task = rust_scheduler::get_task();\n     LOG_UPCALL_ENTRY(task);\n \n-    // Recursively free any referenced descriptors:\n-    for (unsigned i = 0; i < td->n_params; i++) {\n-        upcall_s_free_shared_type_desc((type_desc*) td->first_param[i]);\n-    }\n+    if (td) {\n+        // Recursively free any referenced descriptors:\n+        for (unsigned i = 0; i < td->n_params; i++) {\n+            upcall_s_free_shared_type_desc((type_desc*) td->first_param[i]);\n+        }\n \n-    task->kernel->free(td);\n+        task->kernel->free(td);\n+    }\n }\n \n extern \"C\" CDECL void"}, {"sha": "46d02c45161d9f2df344cda46c7560fd8acd04c0", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=263f4c58a0c9409f257d45ae03d4b19700ef232b", "patch": "@@ -0,0 +1,26 @@\n+tag maybe_pointy {\n+    none;\n+    p(@pointy);\n+}\n+\n+type pointy = {\n+    mutable a : maybe_pointy,\n+    d : sendfn() -> uint,\n+};\n+\n+fn make_uniq_closure<A:send>(a: A) -> sendfn() -> uint {\n+    sendfn() -> uint { ptr::addr_of(a) as uint }\n+}\n+\n+fn empty_pointy() -> @pointy {\n+    ret @{\n+        mutable a : none,\n+        d : make_uniq_closure(\"hi\")\n+    }\n+}\n+\n+fn main()\n+{\n+    let v = empty_pointy();\n+    v.a = p(v);\n+}"}, {"sha": "a2d798fbb7c24f3b62c1af0c60d47711a09c2d21", "filename": "src/test/run-pass/uniq-cc.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263f4c58a0c9409f257d45ae03d4b19700ef232b/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc.rs?ref=263f4c58a0c9409f257d45ae03d4b19700ef232b", "patch": "@@ -0,0 +1,24 @@\n+tag maybe_pointy {\n+    none;\n+    p(@pointy);\n+}\n+\n+type pointy = {\n+    mutable a : maybe_pointy,\n+    c : ~int,\n+    d : sendfn()->(),\n+};\n+\n+fn empty_pointy() -> @pointy {\n+    ret @{\n+        mutable a : none,\n+        c : ~22,\n+        d : sendfn()->(){},\n+    }\n+}\n+\n+fn main()\n+{\n+    let v = empty_pointy();\n+    v.a = p(v);\n+}"}, {"sha": "adf13c49a1e48002035da299d1df383d6ccd9eb0", "filename": "src/test/run-pass/uniq-fn-leak.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/src%2Ftest%2Frun-pass%2Funiq-fn-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55aa6e5ef60369710d8b2e6f512b2ef84a8c548/src%2Ftest%2Frun-pass%2Funiq-fn-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-fn-leak.rs?ref=e55aa6e5ef60369710d8b2e6f512b2ef84a8c548", "patch": "@@ -1,25 +0,0 @@\n-// xfail-test\n-    tag maybe_pointy {\n-        none;\n-        p(@pointy);\n-    }\n-\n-    type pointy = {\n-        mutable a : maybe_pointy,\n-        c : ~int,\n-        d : sendfn()->(),\n-    };\n-\n-    fn empty_pointy() -> @pointy {\n-        ret @{\n-            mutable a : none,\n-            c : ~22,\n-            d : sendfn()->(){},\n-        }\n-    }\n-\n-    fn main()\n-    {\n-        let v = empty_pointy();\n-        v.a = p(v);\n-    }"}]}