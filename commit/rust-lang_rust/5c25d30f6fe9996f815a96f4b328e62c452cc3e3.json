{"sha": "5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "node_id": "C_kwDOAAsO6NoAKDVjMjVkMzBmNmZlOTk5NmY4MTVhOTZmNGIzMjhlNjJjNDUyY2MzZTM", "commit": {"author": {"name": "Ben Reeves", "email": "benwolverine2019@gmail.com", "date": "2022-03-25T00:24:40Z"}, "committer": {"name": "Ben Reeves", "email": "benwolverine2019@gmail.com", "date": "2022-11-10T18:37:06Z"}, "message": "Allow specialized const trait impls.\n\nFixes #95186.\nFixes #95187.", "tree": {"sha": "98352a30c7f1a10d302c2be70e56d43de7f2ca95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98352a30c7f1a10d302c2be70e56d43de7f2ca95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "html_url": "https://github.com/rust-lang/rust/commit/5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/comments", "author": {"login": "BGR360", "id": 13339928, "node_id": "MDQ6VXNlcjEzMzM5OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/13339928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BGR360", "html_url": "https://github.com/BGR360", "followers_url": "https://api.github.com/users/BGR360/followers", "following_url": "https://api.github.com/users/BGR360/following{/other_user}", "gists_url": "https://api.github.com/users/BGR360/gists{/gist_id}", "starred_url": "https://api.github.com/users/BGR360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BGR360/subscriptions", "organizations_url": "https://api.github.com/users/BGR360/orgs", "repos_url": "https://api.github.com/users/BGR360/repos", "events_url": "https://api.github.com/users/BGR360/events{/privacy}", "received_events_url": "https://api.github.com/users/BGR360/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BGR360", "id": 13339928, "node_id": "MDQ6VXNlcjEzMzM5OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/13339928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BGR360", "html_url": "https://github.com/BGR360", "followers_url": "https://api.github.com/users/BGR360/followers", "following_url": "https://api.github.com/users/BGR360/following{/other_user}", "gists_url": "https://api.github.com/users/BGR360/gists{/gist_id}", "starred_url": "https://api.github.com/users/BGR360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BGR360/subscriptions", "organizations_url": "https://api.github.com/users/BGR360/orgs", "repos_url": "https://api.github.com/users/BGR360/repos", "events_url": "https://api.github.com/users/BGR360/events{/privacy}", "received_events_url": "https://api.github.com/users/BGR360/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a6f30324deb8f9c9ec4a70c53690c5d073a244", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a6f30324deb8f9c9ec4a70c53690c5d073a244", "html_url": "https://github.com/rust-lang/rust/commit/01a6f30324deb8f9c9ec4a70c53690c5d073a244"}], "stats": {"total": 307, "additions": 286, "deletions": 21}, "files": [{"sha": "f65760b9c98caf3856e08f9f16964212787d931a", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "patch": "@@ -80,6 +80,7 @@ use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n use rustc_trait_selection::traits::outlives_bounds::InferCtxtExt as _;\n use rustc_trait_selection::traits::{self, translate_substs, wf, ObligationCtxt};\n+use tracing::instrument;\n \n pub(super) fn check_min_specialization(tcx: TyCtxt<'_>, impl_def_id: LocalDefId) {\n     if let Some(node) = parent_specialization_node(tcx, impl_def_id) {\n@@ -103,13 +104,11 @@ fn parent_specialization_node(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId) -> Opti\n }\n \n /// Check that `impl1` is a sound specialization\n+#[instrument(level = \"debug\", skip(tcx))]\n fn check_always_applicable(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node: Node) {\n     if let Some((impl1_substs, impl2_substs)) = get_impl_substs(tcx, impl1_def_id, impl2_node) {\n         let impl2_def_id = impl2_node.def_id();\n-        debug!(\n-            \"check_always_applicable(\\nimpl1_def_id={:?},\\nimpl2_def_id={:?},\\nimpl2_substs={:?}\\n)\",\n-            impl1_def_id, impl2_def_id, impl2_substs\n-        );\n+        debug!(?impl2_def_id, ?impl2_substs);\n \n         let parent_substs = if impl2_node.is_from_trait() {\n             impl2_substs.to_vec()\n@@ -280,13 +279,13 @@ fn check_static_lifetimes<'tcx>(\n ///\n /// Each predicate `P` must be:\n ///\n-/// * global (not reference any parameters)\n-/// * `T: Tr` predicate where `Tr` is an always-applicable trait\n-/// * on the base `impl impl2`\n-///     * Currently this check is done using syntactic equality, which is\n-///       conservative but generally sufficient.\n-/// * a well-formed predicate of a type argument of the trait being implemented,\n+/// * Global (not reference any parameters).\n+/// * A `T: Tr` predicate where `Tr` is an always-applicable trait.\n+/// * Present on the base impl `impl2`.\n+///     * This check is done using the `trait_predicates_eq` function below.\n+/// * A well-formed predicate of a type argument of the trait being implemented,\n ///   including the `Self`-type.\n+#[instrument(level = \"debug\", skip(tcx))]\n fn check_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl1_def_id: LocalDefId,\n@@ -322,10 +321,7 @@ fn check_predicates<'tcx>(\n         .map(|obligation| obligation.predicate)\n         .collect()\n     };\n-    debug!(\n-        \"check_always_applicable(\\nimpl1_predicates={:?},\\nimpl2_predicates={:?}\\n)\",\n-        impl1_predicates, impl2_predicates,\n-    );\n+    debug!(?impl1_predicates, ?impl2_predicates);\n \n     // Since impls of always applicable traits don't get to assume anything, we\n     // can also assume their supertraits apply.\n@@ -373,25 +369,52 @@ fn check_predicates<'tcx>(\n     );\n \n     for (predicate, span) in impl1_predicates {\n-        if !impl2_predicates.contains(&predicate) {\n+        if !impl2_predicates.iter().any(|pred2| trait_predicates_eq(predicate, *pred2)) {\n             check_specialization_on(tcx, predicate, span)\n         }\n     }\n }\n \n+/// Checks whether two predicates are the same for the purposes of specialization.\n+///\n+/// This is slightly more complicated than simple syntactic equivalence, since\n+/// we want to equate `T: Tr` with `T: ~const Tr` so this can work:\n+///\n+/// #[rustc_specialization_trait]\n+/// trait Specialize { }\n+///\n+/// impl<T: ~const Bound> const Tr for T { }\n+/// impl<T: Bound + Specialize> Tr for T { }\n+fn trait_predicates_eq<'tcx>(\n+    predicate1: ty::Predicate<'tcx>,\n+    predicate2: ty::Predicate<'tcx>,\n+) -> bool {\n+    let predicate_kind_without_constness = |kind: ty::PredicateKind<'tcx>| match kind {\n+        ty::PredicateKind::Trait(ty::TraitPredicate { trait_ref, constness: _, polarity }) => {\n+            ty::PredicateKind::Trait(ty::TraitPredicate {\n+                trait_ref,\n+                constness: ty::BoundConstness::NotConst,\n+                polarity,\n+            })\n+        }\n+        _ => kind,\n+    };\n+\n+    let pred1_kind_not_const = predicate1.kind().map_bound(predicate_kind_without_constness);\n+    let pred2_kind_not_const = predicate2.kind().map_bound(predicate_kind_without_constness);\n+\n+    pred1_kind_not_const == pred2_kind_not_const\n+}\n+\n+#[instrument(level = \"debug\", skip(tcx))]\n fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tcx>, span: Span) {\n-    debug!(\"can_specialize_on(predicate = {:?})\", predicate);\n     match predicate.kind().skip_binder() {\n         // Global predicates are either always true or always false, so we\n         // are fine to specialize on.\n         _ if predicate.is_global() => (),\n         // We allow specializing on explicitly marked traits with no associated\n         // items.\n-        ty::PredicateKind::Trait(ty::TraitPredicate {\n-            trait_ref,\n-            constness: ty::BoundConstness::NotConst,\n-            polarity: _,\n-        }) => {\n+        ty::PredicateKind::Trait(ty::TraitPredicate { trait_ref, constness: _, polarity: _ }) => {\n             if !matches!(\n                 trait_predicate_kind(tcx, predicate),\n                 Some(TraitSpecializationKind::Marker)"}, {"sha": "1eddfbf50f386835c2f5684547acde59cd51810d", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-const-specialized.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-const-specialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-const-specialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-const-specialized.rs?ref=5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "patch": "@@ -0,0 +1,38 @@\n+// Tests that a const default trait impl can be specialized by another const\n+// trait impl and that the specializing impl will be used during const-eval.\n+\n+// run-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(min_specialization)]\n+\n+trait Value {\n+    fn value() -> u32;\n+}\n+\n+const fn get_value<T: ~const Value>() -> u32 {\n+    T::value()\n+}\n+\n+impl<T> const Value for T {\n+    default fn value() -> u32 {\n+        0\n+    }\n+}\n+\n+struct FortyTwo;\n+\n+impl const Value for FortyTwo {\n+    fn value() -> u32 {\n+        42\n+    }\n+}\n+\n+const ZERO: u32 = get_value::<()>();\n+\n+const FORTY_TWO: u32 = get_value::<FortyTwo>();\n+\n+fn main() {\n+    assert_eq!(ZERO, 0);\n+    assert_eq!(FORTY_TWO, 42);\n+}"}, {"sha": "31de6fadeb7a272bf73c45778870d0c757a579b9", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-non-const-specialized.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-non-const-specialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-non-const-specialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-non-const-specialized.rs?ref=5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "patch": "@@ -0,0 +1,37 @@\n+// Tests that a const default trait impl can be specialized by a non-const trait\n+// impl, but that the specializing impl cannot be used in a const context.\n+\n+#![feature(const_trait_impl)]\n+#![feature(min_specialization)]\n+\n+trait Value {\n+    fn value() -> u32;\n+}\n+\n+const fn get_value<T: ~const Value>() -> u32 {\n+    T::value()\n+    //~^ ERROR any use of this value will cause an error [const_err]\n+    //~| WARNING this was previously accepted\n+}\n+\n+impl<T> const Value for T {\n+    default fn value() -> u32 {\n+        0\n+    }\n+}\n+\n+struct FortyTwo;\n+\n+impl Value for FortyTwo {\n+    fn value() -> u32 {\n+        println!(\"You can't do that (constly)\");\n+        42\n+    }\n+}\n+\n+const ZERO: u32 = get_value::<()>();\n+\n+const FORTY_TWO: u32 =\n+    get_value::<FortyTwo>(); // This is the line that causes the error, but it gets reported above\n+\n+fn main() {}"}, {"sha": "7dfd489ea65c6f0743ee4af66daa197ef84295f1", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/const-default-non-const-specialized.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-non-const-specialized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-non-const-specialized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-non-const-specialized.stderr?ref=5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "patch": "@@ -0,0 +1,37 @@\n+error: any use of this value will cause an error\n+  --> $DIR/const-default-non-const-specialized.rs:12:5\n+   |\n+LL |     T::value()\n+   |     ^^^^^^^^^^\n+   |     |\n+   |     calling non-const function `<FortyTwo as Value>::value`\n+   |     inside `get_value::<FortyTwo>` at $DIR/const-default-non-const-specialized.rs:12:5\n+   |     inside `FORTY_TWO` at $DIR/const-default-non-const-specialized.rs:35:5\n+...\n+LL | const FORTY_TWO: u32 =\n+   | --------------------\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to previous error\n+\n+Future incompatibility report: Future breakage diagnostic:\n+error: any use of this value will cause an error\n+  --> $DIR/const-default-non-const-specialized.rs:12:5\n+   |\n+LL |     T::value()\n+   |     ^^^^^^^^^^\n+   |     |\n+   |     calling non-const function `<FortyTwo as Value>::value`\n+   |     inside `get_value::<FortyTwo>` at $DIR/const-default-non-const-specialized.rs:12:5\n+   |     inside `FORTY_TWO` at $DIR/const-default-non-const-specialized.rs:35:5\n+...\n+LL | const FORTY_TWO: u32 =\n+   | --------------------\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+"}, {"sha": "c03b0a0d19ca5355ced069d7ccc5e0653f111506", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/default-keyword.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fdefault-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fdefault-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fdefault-keyword.rs?ref=5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(min_specialization)]\n+\n+trait Foo {\n+    fn foo();\n+}\n+\n+impl const Foo for u32 {\n+    default fn foo() {}\n+}\n+\n+fn main() {}"}, {"sha": "1f7f47879d78b399c997b09ca253494338574907", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/issue-95186-specialize-on-tilde-const.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95186-specialize-on-tilde-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95186-specialize-on-tilde-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95186-specialize-on-tilde-const.rs?ref=5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "patch": "@@ -0,0 +1,34 @@\n+// Tests that `~const` trait bounds can be used to specialize const trait impls.\n+\n+// check-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(rustc_attrs)]\n+#![feature(min_specialization)]\n+\n+#[rustc_specialization_trait]\n+trait Specialize {}\n+\n+trait Foo {}\n+\n+impl<T> const Foo for T {}\n+\n+impl<T> const Foo for T\n+where\n+    T: ~const Specialize,\n+{}\n+\n+trait Bar {}\n+\n+impl<T> const Bar for T\n+where\n+    T: ~const Foo,\n+{}\n+\n+impl<T> const Bar for T\n+where\n+    T: ~const Foo,\n+    T: ~const Specialize,\n+{}\n+\n+fn main() {}"}, {"sha": "f6daba5595a8ded9b41bd0ac42fbfcdf978b2423", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/issue-95187-same-trait-bound-different-constness.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs?ref=5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "patch": "@@ -0,0 +1,28 @@\n+// Tests that `T: ~const Foo` and `T: Foo` are treated as equivalent for the\n+// purposes of min_specialization.\n+\n+// check-pass\n+\n+#![feature(rustc_attrs)]\n+#![feature(min_specialization)]\n+#![feature(const_trait_impl)]\n+\n+#[rustc_specialization_trait]\n+trait Specialize {}\n+\n+trait Foo {}\n+\n+trait Bar {}\n+\n+impl<T> const Bar for T\n+where\n+    T: ~const Foo,\n+{}\n+\n+impl<T> Bar for T\n+where\n+    T: Foo,\n+    T: Specialize,\n+{}\n+\n+fn main() {}"}, {"sha": "cf6c292e8a46565c1cb607f9c6aa3559feca0fe6", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/non-const-default-const-specialized.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.rs?ref=5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "patch": "@@ -0,0 +1,34 @@\n+// Tests that a non-const default impl can be specialized by a const trait impl,\n+// but that the default impl cannot be used in a const context.\n+\n+#![feature(const_trait_impl)]\n+#![feature(min_specialization)]\n+\n+trait Value {\n+    fn value() -> u32;\n+}\n+\n+const fn get_value<T: ~const Value>() -> u32 {\n+    T::value()\n+}\n+\n+impl<T> Value for T {\n+    default fn value() -> u32 {\n+        println!(\"You can't do that (constly)\");\n+        0\n+    }\n+}\n+\n+struct FortyTwo;\n+\n+impl const Value for FortyTwo {\n+    fn value() -> u32 {\n+        42\n+    }\n+}\n+\n+const ZERO: u32 = get_value::<()>(); //~ ERROR the trait bound `(): ~const Value` is not satisfied\n+\n+const FORTY_TWO: u32 = get_value::<FortyTwo>();\n+\n+fn main() {}"}, {"sha": "1065009c8910ea7a07c2e70fd7a98fc096d3a9da", "filename": "src/test/ui/rfc-2632-const-trait-impl/specialization/non-const-default-const-specialized.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c25d30f6fe9996f815a96f4b328e62c452cc3e3/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fnon-const-default-const-specialized.stderr?ref=5c25d30f6fe9996f815a96f4b328e62c452cc3e3", "patch": "@@ -0,0 +1,20 @@\n+error[E0277]: the trait bound `(): ~const Value` is not satisfied\n+  --> $DIR/non-const-default-const-specialized.rs:30:31\n+   |\n+LL | const ZERO: u32 = get_value::<()>();\n+   |                               ^^ the trait `~const Value` is not implemented for `()`\n+   |\n+note: the trait `Value` is implemented for `()`, but that implementation is not `const`\n+  --> $DIR/non-const-default-const-specialized.rs:30:31\n+   |\n+LL | const ZERO: u32 = get_value::<()>();\n+   |                               ^^\n+note: required by a bound in `get_value`\n+  --> $DIR/non-const-default-const-specialized.rs:11:23\n+   |\n+LL | const fn get_value<T: ~const Value>() -> u32 {\n+   |                       ^^^^^^^^^^^^ required by this bound in `get_value`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}