{"sha": "e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NTQ2YmRiYWY1Nzk0ZThjYjlhMjA1NDFjNDgzYjhmOGY2ZWI1NmY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-23T00:32:39Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-24T19:04:32Z"}, "message": "Handle `Annotatable::Stmt` in some builtin macros\n\nThis is preparation for PR #78296, which will require us to handle\nstatement items in addition to normal items.", "tree": {"sha": "644a78af7c575cdebb8c5005c9c1429f81d721ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/644a78af7c575cdebb8c5005c9c1429f81d721ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+9WUAACgkQtAh+UQ6Y\nsWRZnBAAuKgq1LZFm4D7ia2WQXbECej5xLkO42QcyaP8meH62hYtnPXS3ZgIrvxh\nxtGtlUQQorjp/setd1tMkA39DlFJ849kgeHt6KskuKTsChe4lFEfy+fWzINH1/hs\nuPNBHrfTfe3Z0YxSjZ2wgp3uuk47H8uR07ep8AEifRNfb/8h/kYXPmmLtdaah9rA\nMvTe+KSnwnIjIJafKHs48Olyc633AcCYX3l/pPGCsAnDTG+lKYF04wISGtUZ8ea5\n96BfrkMOl2sWMXmPsBuag8DXg3BBU0sml6nFVqZi45zqvEzq1Y8+zZwUjH1Xaqs/\nVKp2/rfEaqHFZAyArQYo6Lavkz/JzZ/lJwTYJHldk6Z58m/OJk/ItziSC/ybc0Ya\nxkwVKNEeK5+xfPbO60n99DsBP3lP3rTyTPExBu8Us4fWYpQfCPH31nxi2gN5pqWq\nywfANcX663LdKNKM3YFziQhkrIDLa7Yz33rhg4WBbwrYybj6QFe7ZnHnUKtWnv3d\nzyEU0b7DRxnGcp3oonbNQ0yOf71uHAuPEfq5IrTVgsvepBPRm2QC7UteZIWPAgc0\nicVz7gQUBkb9M5SR5XsLQgq9UY/2Vx61x9RieQe7y+irG/PSt7oijiml3hXH4oKi\n1PiGSwMnI86Z0Wo6kKc2qiqCH+uP3e8UsV2x+5o6lW+p1k5CuFY=\n=R7Py\n-----END PGP SIGNATURE-----", "payload": "tree 644a78af7c575cdebb8c5005c9c1429f81d721ab\nparent 25a691003cf6676259ee7d4bed05b43cb6283cea\nauthor Aaron Hill <aa1ronham@gmail.com> 1606091559 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1606244672 -0500\n\nHandle `Annotatable::Stmt` in some builtin macros\n\nThis is preparation for PR #78296, which will require us to handle\nstatement items in addition to normal items.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f", "html_url": "https://github.com/rust-lang/rust/commit/e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a691003cf6676259ee7d4bed05b43cb6283cea", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a691003cf6676259ee7d4bed05b43cb6283cea", "html_url": "https://github.com/rust-lang/rust/commit/25a691003cf6676259ee7d4bed05b43cb6283cea"}], "stats": {"total": 84, "additions": 70, "deletions": 14}, "files": [{"sha": "8c7e85f1eeb775920a493e1974bf05294066bf49", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f", "patch": "@@ -54,7 +54,27 @@ impl MultiItemModifier for BuiltinDerive {\n         // so we are doing it here in a centralized way.\n         let span = ecx.with_def_site_ctxt(span);\n         let mut items = Vec::new();\n-        (self.0)(ecx, span, meta_item, &item, &mut |a| items.push(a));\n+        match item {\n+            Annotatable::Stmt(stmt) => {\n+                if let ast::StmtKind::Item(item) = stmt.into_inner().kind {\n+                    (self.0)(ecx, span, meta_item, &Annotatable::Item(item), &mut |a| {\n+                        // Cannot use 'ecx.stmt_item' here, because we need to pass 'ecx'\n+                        // to the function\n+                        items.push(Annotatable::Stmt(P(ast::Stmt {\n+                            id: ast::DUMMY_NODE_ID,\n+                            kind: ast::StmtKind::Item(a.expect_item()),\n+                            span,\n+                            tokens: None,\n+                        })));\n+                    });\n+                } else {\n+                    unreachable!(\"should have already errored on non-item statement\")\n+                }\n+            }\n+            _ => {\n+                (self.0)(ecx, span, meta_item, &item, &mut |a| items.push(a));\n+            }\n+        }\n         ExpandResult::Ready(items)\n     }\n }"}, {"sha": "e976805d9dd2070b58e3a1ee6cccfb1122602219", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::expand::allocator::{\n     AllocatorKind, AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS,\n };\n use rustc_ast::ptr::P;\n-use rustc_ast::{self as ast, Attribute, Expr, FnHeader, FnSig, Generics, Param};\n+use rustc_ast::{self as ast, Attribute, Expr, FnHeader, FnSig, Generics, Param, StmtKind};\n use rustc_ast::{ItemKind, Mutability, Stmt, Ty, TyKind, Unsafe};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -14,14 +14,25 @@ pub fn expand(\n     ecx: &mut ExtCtxt<'_>,\n     _span: Span,\n     meta_item: &ast::MetaItem,\n-    item: Annotatable,\n+    mut item: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(ecx, meta_item, sym::global_allocator);\n \n     let not_static = |item: Annotatable| {\n         ecx.sess.parse_sess.span_diagnostic.span_err(item.span(), \"allocators must be statics\");\n         vec![item]\n     };\n+    let orig_item = item.clone();\n+    let mut is_stmt = false;\n+\n+    // Allow using `#[global_allocator]` on an item statement\n+    if let Annotatable::Stmt(stmt) = &item {\n+        if let StmtKind::Item(item_) = &stmt.kind {\n+            item = Annotatable::Item(item_.clone());\n+            is_stmt = true;\n+        }\n+    }\n+\n     let item = match item {\n         Annotatable::Item(item) => match item.kind {\n             ItemKind::Static(..) => item,\n@@ -41,9 +52,14 @@ pub fn expand(\n     let const_ty = ecx.ty(span, TyKind::Tup(Vec::new()));\n     let const_body = ecx.expr_block(ecx.block(span, stmts));\n     let const_item = ecx.item_const(span, Ident::new(kw::Underscore, span), const_ty, const_body);\n+    let const_item = if is_stmt {\n+        Annotatable::Stmt(P(ecx.stmt_item(span, const_item)))\n+    } else {\n+        Annotatable::Item(const_item)\n+    };\n \n     // Return the original item and the new methods.\n-    vec![Annotatable::Item(item), Annotatable::Item(const_item)]\n+    vec![orig_item, const_item]\n }\n \n struct AllocFnFactory<'a, 'b> {"}, {"sha": "25d3f46da6cdc323f615c2476e29096c232a3a29", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=e9546bdbaf5794e8cb9a20541c483b8f8f6eb56f", "patch": "@@ -4,6 +4,7 @@ use crate::util::check_builtin_macro_attribute;\n \n use rustc_ast as ast;\n use rustc_ast::attr;\n+use rustc_ast::ptr::P;\n use rustc_ast_pretty::pprust;\n use rustc_expand::base::*;\n use rustc_session::Session;\n@@ -78,8 +79,16 @@ pub fn expand_test_or_bench(\n         return vec![];\n     }\n \n-    let item = match item {\n-        Annotatable::Item(i) => i,\n+    let (item, is_stmt) = match item {\n+        Annotatable::Item(i) => (i, false),\n+        Annotatable::Stmt(stmt) if matches!(stmt.kind, ast::StmtKind::Item(_)) => {\n+            // FIXME: Use an 'if let' guard once they are implemented\n+            if let ast::StmtKind::Item(i) = stmt.into_inner().kind {\n+                (i, true)\n+            } else {\n+                unreachable!()\n+            }\n+        }\n         other => {\n             cx.struct_span_err(\n                 other.span(),\n@@ -304,14 +313,25 @@ pub fn expand_test_or_bench(\n \n     tracing::debug!(\"synthetic test item:\\n{}\\n\", pprust::item_to_string(&test_const));\n \n-    vec![\n-        // Access to libtest under a hygienic name\n-        Annotatable::Item(test_extern),\n-        // The generated test case\n-        Annotatable::Item(test_const),\n-        // The original item\n-        Annotatable::Item(item),\n-    ]\n+    if is_stmt {\n+        vec![\n+            // Access to libtest under a hygienic name\n+            Annotatable::Stmt(P(cx.stmt_item(sp, test_extern))),\n+            // The generated test case\n+            Annotatable::Stmt(P(cx.stmt_item(sp, test_const))),\n+            // The original item\n+            Annotatable::Stmt(P(cx.stmt_item(sp, item))),\n+        ]\n+    } else {\n+        vec![\n+            // Access to libtest under a hygienic name\n+            Annotatable::Item(test_extern),\n+            // The generated test case\n+            Annotatable::Item(test_const),\n+            // The original item\n+            Annotatable::Item(item),\n+        ]\n+    }\n }\n \n fn item_path(mod_path: &[Ident], item_ident: &Ident) -> String {"}]}