{"sha": "68b554e6af18726fe6fa8de2134c59c441e0b019", "node_id": "C_kwDOAAsO6NoAKDY4YjU1NGU2YWYxODcyNmZlNmZhOGRlMjEzNGM1OWM0NDFlMGIwMTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-31T12:28:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-31T12:28:45Z"}, "message": "Auto merge of #90437 - matthiaskrgr:rollup-vd8uqm6, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #89068 (Restructure std::rt (part 2))\n - #89786 (Add #[must_use] to len and is_empty)\n - #90430 (Add #[must_use] to remaining std functions (A-N))\n - #90431 (Add #[must_use] to remaining std functions (O-Z))\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8361dcb08d27436f72fff5f61b8bd54c975e7ac7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8361dcb08d27436f72fff5f61b8bd54c975e7ac7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68b554e6af18726fe6fa8de2134c59c441e0b019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68b554e6af18726fe6fa8de2134c59c441e0b019", "html_url": "https://github.com/rust-lang/rust/commit/68b554e6af18726fe6fa8de2134c59c441e0b019", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68b554e6af18726fe6fa8de2134c59c441e0b019/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58899c4d9c63a6d27ac395ee9597ae797df7f026", "url": "https://api.github.com/repos/rust-lang/rust/commits/58899c4d9c63a6d27ac395ee9597ae797df7f026", "html_url": "https://github.com/rust-lang/rust/commit/58899c4d9c63a6d27ac395ee9597ae797df7f026"}, {"sha": "455a79acab1b2fe1263100a7889a1f2a52256c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/455a79acab1b2fe1263100a7889a1f2a52256c8d", "html_url": "https://github.com/rust-lang/rust/commit/455a79acab1b2fe1263100a7889a1f2a52256c8d"}], "stats": {"total": 270, "additions": 198, "deletions": 72}, "files": [{"sha": "7fb7686a6e29790a5320cddb774adcf73e92d91a", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -1052,6 +1052,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// assert_eq!(heap.len(), 2);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.data.len()\n@@ -1075,6 +1076,7 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// assert!(!heap.is_empty());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_empty(&self) -> bool {\n         self.len() == 0"}, {"sha": "2ff7b0fbb759c0c64cbb46210b749bc142afc94f", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -2212,6 +2212,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// a.insert(1, \"a\");\n     /// assert_eq!(a.len(), 1);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn len(&self) -> usize {\n@@ -2232,6 +2233,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// a.insert(1, \"a\");\n     /// assert!(!a.is_empty());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn is_empty(&self) -> bool {"}, {"sha": "0322cabccde4b0f830acaf9f423de435cc36f9db", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -1046,6 +1046,7 @@ impl<T> BTreeSet<T> {\n     /// v.insert(1);\n     /// assert_eq!(v.len(), 1);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn len(&self) -> usize {\n@@ -1064,6 +1065,7 @@ impl<T> BTreeSet<T> {\n     /// v.insert(1);\n     /// assert!(!v.is_empty());\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn is_empty(&self) -> bool {"}, {"sha": "2fc17a7c8603fc0b32afab1a79058d9043554d95", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -610,8 +610,8 @@ fn test_send() {\n #[test]\n fn test_ord_absence() {\n     fn set<K>(mut set: BTreeSet<K>) {\n-        set.is_empty();\n-        set.len();\n+        let _ = set.is_empty();\n+        let _ = set.len();\n         set.clear();\n         let _ = set.iter();\n         let _ = set.into_iter();"}, {"sha": "e4913b16adbe7722b14e755f25e5954ecda47168", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -583,6 +583,7 @@ impl<T> LinkedList<T> {\n     /// assert!(!dl.is_empty());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_empty(&self) -> bool {\n         self.head.is_none()\n@@ -609,6 +610,7 @@ impl<T> LinkedList<T> {\n     /// assert_eq!(dl.len(), 3);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.len"}, {"sha": "906b0187f7babf540932b2cd408f71b88b308782", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -1547,6 +1547,7 @@ impl String {\n     /// assert_eq!(fancy_f.chars().count(), 3);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.vec.len()\n@@ -1566,6 +1567,7 @@ impl String {\n     /// assert!(!v.is_empty());\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_empty(&self) -> bool {\n         self.len() == 0"}, {"sha": "58110b068094381e9ac2e74130dab235c9608bf2", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -449,6 +449,7 @@ impl<T> NonNull<[T]> {\n     /// ```\n     #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n     #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n+    #[must_use]\n     #[inline]\n     pub const fn len(self) -> usize {\n         self.as_ptr().len()"}, {"sha": "cd5ed35be79ba6769938b11624d94b99d941e7c8", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -140,6 +140,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn len(&self) -> usize {\n         self.as_bytes().len()\n@@ -158,9 +159,10 @@ impl str {\n     /// let s = \"not empty\";\n     /// assert!(!s.is_empty());\n     /// ```\n-    #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]\n+    #[must_use]\n+    #[inline]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}, {"sha": "0b86b4f30b959925834c25207fdb194ed434fda8", "filename": "library/std/src/backtrace.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fbacktrace.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -110,6 +110,7 @@ use crate::vec::Vec;\n /// previous point in time. In some instances the `Backtrace` type may\n /// internally be empty due to configuration. For more information see\n /// `Backtrace::capture`.\n+#[must_use]\n pub struct Backtrace {\n     inner: Inner,\n }\n@@ -355,6 +356,7 @@ impl Backtrace {\n     /// Returns the status of this backtrace, indicating whether this backtrace\n     /// request was unsupported, disabled, or a stack trace was actually\n     /// captured.\n+    #[must_use]\n     pub fn status(&self) -> BacktraceStatus {\n         match self.inner {\n             Inner::Unsupported => BacktraceStatus::Unsupported,\n@@ -366,6 +368,7 @@ impl Backtrace {\n \n impl<'a> Backtrace {\n     /// Returns an iterator over the backtrace frames.\n+    #[must_use]\n     #[unstable(feature = \"backtrace_frames\", issue = \"79676\")]\n     pub fn frames(&'a self) -> &'a [BacktraceFrame] {\n         if let Inner::Captured(c) = &self.inner { &c.force().frames } else { &[] }"}, {"sha": "12246b5173d394058c21dba7ef05acf70e110900", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -1707,13 +1707,15 @@ impl<'a, K, V, S> RawEntryMut<'a, K, V, S> {\n impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n     /// Gets a reference to the key in the entry.\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn key(&self) -> &K {\n         self.base.key()\n     }\n \n     /// Gets a mutable reference to the key in the entry.\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn key_mut(&mut self) -> &mut K {\n         self.base.key_mut()\n@@ -1730,6 +1732,7 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n \n     /// Gets a reference to the value in the entry.\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn get(&self) -> &V {\n         self.base.get()\n@@ -1746,13 +1749,15 @@ impl<'a, K, V, S> RawOccupiedEntryMut<'a, K, V, S> {\n \n     /// Gets a mutable reference to the value in the entry.\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn get_mut(&mut self) -> &mut V {\n         self.base.get_mut()\n     }\n \n     /// Gets a reference to the key and value in the entry.\n     #[inline]\n+    #[must_use]\n     #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n     pub fn get_key_value(&mut self) -> (&K, &V) {\n         self.base.get_key_value()"}, {"sha": "c6af708f6cd0a99c9884dffd266475a067d89749", "filename": "library/std/src/env.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -113,6 +113,7 @@ pub struct VarsOs {\n /// ```\n ///\n /// [`env::vars_os()`]: vars_os\n+#[must_use]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn vars() -> Vars {\n     Vars { inner: vars_os() }\n@@ -140,6 +141,7 @@ pub fn vars() -> Vars {\n ///     println!(\"{:?}: {:?}\", key, value);\n /// }\n /// ```\n+#[must_use]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn vars_os() -> VarsOs {\n     VarsOs { inner: os_imp::env() }\n@@ -244,6 +246,7 @@ fn _var(key: &OsStr) -> Result<String, VarError> {\n ///     None => println!(\"{} is not defined in the environment.\", key)\n /// }\n /// ```\n+#[must_use]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn var_os<K: AsRef<OsStr>>(key: K) -> Option<OsString> {\n     _var_os(key.as_ref())\n@@ -384,6 +387,7 @@ fn _remove_var(key: &OsStr) {\n /// documentation for more.\n ///\n /// [`env::split_paths()`]: split_paths\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct SplitPaths<'a> {\n     inner: os_imp::SplitPaths<'a>,\n@@ -564,6 +568,7 @@ impl Error for JoinPathsError {\n     reason = \"This function's behavior is unexpected and probably not what you want. \\\n               Consider using a crate from crates.io instead.\"\n )]\n+#[must_use]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn home_dir() -> Option<PathBuf> {\n     os_imp::home_dir()\n@@ -603,6 +608,7 @@ pub fn home_dir() -> Option<PathBuf> {\n ///     println!(\"Temporary directory: {}\", dir.display());\n /// }\n /// ```\n+#[must_use]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn temp_dir() -> PathBuf {\n     os_imp::temp_dir()\n@@ -690,6 +696,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n /// should not be relied upon for security purposes.\n ///\n /// [`env::args()`]: args\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Args {\n     inner: ArgsOs,\n@@ -706,6 +713,7 @@ pub struct Args {\n /// should not be relied upon for security purposes.\n ///\n /// [`env::args_os()`]: args_os\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct ArgsOs {\n     inner: sys::args::Args,"}, {"sha": "465bbae8631c519b591a7b33ddb0f496f9f9ec4b", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -1009,6 +1009,7 @@ impl NulError {\n     /// let nul_error = CString::new(\"foo bar\\0\").unwrap_err();\n     /// assert_eq!(nul_error.nul_position(), 7);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn nul_position(&self) -> usize {\n         self.0\n@@ -1107,6 +1108,7 @@ impl IntoStringError {\n     }\n \n     /// Access the underlying UTF-8 error that was the cause of this error.\n+    #[must_use]\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn utf8_error(&self) -> Utf8Error {\n         self.error\n@@ -1456,6 +1458,7 @@ impl CStr {\n     /// let boxed = c_string.into_boxed_c_str();\n     /// assert_eq!(boxed.into_c_string(), CString::new(\"foo\").expect(\"CString::new failed\"));\n     /// ```\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]\n     pub fn into_c_string(self: Box<CStr>) -> CString {\n         let raw = Box::into_raw(self) as *mut [u8];"}, {"sha": "0f9912fa64d8bef01dafbd44dfec39ca9da1f08f", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -239,6 +239,7 @@ impl OsString {\n     /// assert!(os_string.capacity() >= 10);\n     /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn capacity(&self) -> usize {\n         self.inner.capacity()\n@@ -669,6 +670,7 @@ impl OsStr {\n     /// assert!(!os_str.is_empty());\n     /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn is_empty(&self) -> bool {\n         self.inner.inner.is_empty()\n@@ -700,13 +702,15 @@ impl OsStr {\n     /// assert_eq!(os_str.len(), 3);\n     /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn len(&self) -> usize {\n         self.inner.inner.len()\n     }\n \n     /// Converts a <code>[Box]<[OsStr]></code> into an [`OsString`] without copying or allocating.\n     #[stable(feature = \"into_boxed_os_str\", since = \"1.20.0\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     pub fn into_os_string(self: Box<OsStr>) -> OsString {\n         let boxed = unsafe { Box::from_raw(Box::into_raw(self) as *mut Slice) };\n         OsString { inner: Buf::from_box(boxed) }"}, {"sha": "e13add799bcb97804559fc6d918ea16f0fbf24a4", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -374,6 +374,7 @@ impl File {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"with_options\", issue = \"65439\")]\n     pub fn with_options() -> OpenOptions {\n         OpenOptions::new()\n@@ -983,6 +984,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"file_type\", since = \"1.1.0\")]\n     pub fn file_type(&self) -> FileType {\n         FileType(self.0.file_type())\n@@ -1080,6 +1082,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> u64 {\n         self.0.size()\n@@ -1099,6 +1102,7 @@ impl Metadata {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn permissions(&self) -> Permissions {\n         Permissions(self.0.perm())\n@@ -1246,6 +1250,7 @@ impl Permissions {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use = \"call `set_readonly` to modify the readonly flag\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn readonly(&self) -> bool {\n         self.0.readonly()\n@@ -1440,6 +1445,7 @@ impl DirEntry {\n     /// ```\n     ///\n     /// The exact text, of course, depends on what files you have in `.`.\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn path(&self) -> PathBuf {\n         self.0.path()\n@@ -1535,6 +1541,7 @@ impl DirEntry {\n     ///     }\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n     pub fn file_name(&self) -> OsString {\n         self.0.file_name()"}, {"sha": "3da28695b34bd951e9e3b84a1e5e28a3c99fbe8e", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -442,6 +442,7 @@ impl Error {\n     /// println!(\"last OS error: {:?}\", Error::last_os_error());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn last_os_error() -> Error {\n         Error::from_raw_os_error(sys::os::errno() as i32)\n@@ -509,6 +510,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn raw_os_error(&self) -> Option<i32> {\n         match self.repr {\n@@ -547,6 +549,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn get_ref(&self) -> Option<&(dyn error::Error + Send + Sync + 'static)> {\n         match self.repr {\n@@ -620,6 +623,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn get_mut(&mut self) -> Option<&mut (dyn error::Error + Send + Sync + 'static)> {\n         match self.repr {\n@@ -688,6 +692,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn kind(&self) -> ErrorKind {\n         match self.repr {"}, {"sha": "8cc91566418dc957c57de39e3ca4f59e0ca8482b", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -299,9 +299,7 @@ mod util;\n \n const DEFAULT_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n-pub(crate) fn cleanup() {\n-    stdio::cleanup()\n-}\n+pub(crate) use stdio::cleanup;\n \n struct Guard<'a> {\n     buf: &'a mut Vec<u8>,\n@@ -1310,6 +1308,7 @@ pub struct Initializer(bool);\n impl Initializer {\n     /// Returns a new `Initializer` which will zero out buffers.\n     #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n+    #[must_use]\n     #[inline]\n     pub fn zeroing() -> Initializer {\n         Initializer(true)\n@@ -1324,13 +1323,15 @@ impl Initializer {\n     /// the method accurately reflects the number of bytes that have been\n     /// written to the head of the buffer.\n     #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n+    #[must_use]\n     #[inline]\n     pub unsafe fn nop() -> Initializer {\n         Initializer(false)\n     }\n \n     /// Indicates if a buffer should be initialized.\n     #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n+    #[must_use]\n     #[inline]\n     pub fn should_initialize(&self) -> bool {\n         self.0"}, {"sha": "f7fc23c1e829c47b4701ad8503890d586b3c0b9a", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -301,6 +301,7 @@ pub struct StdinLock<'a> {\n ///     Ok(())\n /// }\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdin() -> Stdin {\n     static INSTANCE: SyncOnceCell<Mutex<BufReader<StdinRaw>>> = SyncOnceCell::new();\n@@ -674,6 +675,7 @@ static STDOUT: SyncOnceCell<ReentrantMutex<RefCell<LineWriter<StdoutRaw>>>> = Sy\n ///     Ok(())\n /// }\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stdout() -> Stdout {\n     Stdout {\n@@ -954,6 +956,7 @@ pub struct StderrLock<'a> {\n ///     Ok(())\n /// }\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn stderr() -> Stderr {\n     // Note that unlike `stdout()` we don't use `at_exit` here to register a"}, {"sha": "9cd7c5148499db87b228f260139b06f002100e0d", "filename": "library/std/src/io/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -32,6 +32,7 @@ pub struct Empty;\n /// io::empty().read_to_string(&mut buffer).unwrap();\n /// assert!(buffer.is_empty());\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n pub const fn empty() -> Empty {\n@@ -112,6 +113,7 @@ pub struct Repeat {\n /// io::repeat(0b101).read_exact(&mut buffer).unwrap();\n /// assert_eq!(buffer, [0b101, 0b101, 0b101]);\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n pub const fn repeat(byte: u8) -> Repeat {\n@@ -192,6 +194,7 @@ pub struct Sink;\n /// let num_bytes = io::sink().write(&buffer).unwrap();\n /// assert_eq!(num_bytes, 5);\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_io_structs\", issue = \"78812\")]\n pub const fn sink() -> Sink {"}, {"sha": "201cbf3f08d28aad58e73f59350867298114f66f", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -149,6 +149,7 @@ impl SocketAddr {\n     /// let socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n     /// assert_eq!(socket.ip(), IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn ip(&self) -> IpAddr {\n@@ -189,6 +190,7 @@ impl SocketAddr {\n     /// let socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn port(&self) -> u16 {\n@@ -297,6 +299,7 @@ impl SocketAddrV4 {\n     /// let socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\n     /// assert_eq!(socket.ip(), &Ipv4Addr::new(127, 0, 0, 1));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn ip(&self) -> &Ipv4Addr {\n@@ -331,6 +334,7 @@ impl SocketAddrV4 {\n     /// let socket = SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080);\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn port(&self) -> u16 {\n@@ -396,6 +400,7 @@ impl SocketAddrV6 {\n     /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\n     /// assert_eq!(socket.ip(), &Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn ip(&self) -> &Ipv6Addr {\n@@ -428,6 +433,7 @@ impl SocketAddrV6 {\n     /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 0);\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn port(&self) -> u16 {\n@@ -470,6 +476,7 @@ impl SocketAddrV6 {\n     /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 10, 0);\n     /// assert_eq!(socket.flowinfo(), 10);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn flowinfo(&self) -> u32 {\n@@ -509,6 +516,7 @@ impl SocketAddrV6 {\n     /// let socket = SocketAddrV6::new(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1), 8080, 0, 78);\n     /// assert_eq!(socket.scope_id(), 78);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n     pub const fn scope_id(&self) -> u32 {"}, {"sha": "140647128a937d934b31d0c831c91f4593fce512", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -518,6 +518,7 @@ impl Ipv4Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn octets(&self) -> [u8; 4] {\n         // This returns the order we want because s_addr is stored in big-endian.\n@@ -1284,6 +1285,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn segments(&self) -> [u16; 8] {\n         // All elements in `s6_addr` must be big endian.\n@@ -1594,6 +1596,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[must_use]\n     #[inline]\n     pub const fn multicast_scope(&self) -> Option<Ipv6MulticastScope> {\n         if self.is_multicast() {\n@@ -1744,6 +1747,7 @@ impl Ipv6Addr {\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n     #[stable(feature = \"ipv6_to_octets\", since = \"1.12.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn octets(&self) -> [u8; 16] {\n         self.inner.s6_addr"}, {"sha": "5738862fb58b2c7f6d5dc41d5e7926ce9f223e21", "filename": "library/std/src/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Ftcp.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -90,6 +90,7 @@ pub struct TcpListener(net_imp::TcpListener);\n /// See its documentation for more.\n ///\n /// [`accept`]: TcpListener::accept\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Incoming<'a> {"}, {"sha": "6e6f5212b4651d934290ffbb4f07216b214be378", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -201,6 +201,7 @@ impl SocketCred {\n     }\n \n     /// Get the current PID.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn get_pid(&self) -> libc::pid_t {\n         self.0.pid\n@@ -213,6 +214,7 @@ impl SocketCred {\n     }\n \n     /// Get the current UID.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn get_uid(&self) -> libc::uid_t {\n         self.0.uid\n@@ -225,6 +227,7 @@ impl SocketCred {\n     }\n \n     /// Get the current GID.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn get_gid(&self) -> libc::gid_t {\n         self.0.gid\n@@ -330,6 +333,7 @@ impl<'a> AncillaryData<'a> {\n }\n \n /// This struct is used to iterate through the control messages.\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct Messages<'a> {\n     buffer: &'a [u8],\n@@ -425,18 +429,21 @@ impl<'a> SocketAncillary<'a> {\n     }\n \n     /// Returns the capacity of the buffer.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn capacity(&self) -> usize {\n         self.buffer.len()\n     }\n \n     /// Returns `true` if the ancillary data is empty.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn is_empty(&self) -> bool {\n         self.length == 0\n     }\n \n     /// Returns the number of used bytes.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn len(&self) -> usize {\n         self.length\n@@ -471,6 +478,7 @@ impl<'a> SocketAncillary<'a> {\n     ///     Ok(())\n     /// }\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn truncated(&self) -> bool {\n         self.truncated"}, {"sha": "b23dd6062f6822fce6576454ee8ec4ca0e33aaf3", "filename": "library/std/src/os/unix/net/listener.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -365,6 +365,7 @@ impl<'a> IntoIterator for &'a UnixListener {\n /// }\n /// ```\n #[derive(Debug)]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n pub struct Incoming<'a> {\n     listener: &'a UnixListener,"}, {"sha": "286a7c3b386f9d79e4d23c7db159242b91cdaa74", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -436,6 +436,7 @@ impl From<crate::process::ChildStderr> for OwnedFd {\n }\n \n /// Returns the OS-assigned process identifier associated with this process's parent.\n+#[must_use]\n #[stable(feature = \"unix_ppid\", since = \"1.27.0\")]\n pub fn parent_id() -> u32 {\n     crate::sys::os::getppid()"}, {"sha": "6fc6b8daec0a6c76a15100194315271beecfa7ba", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -160,6 +160,7 @@ pub fn set_hook(hook: Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>) {\n ///\n /// panic!(\"Normal panic\");\n /// ```\n+#[must_use]\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n     if thread::panicking() {\n@@ -284,11 +285,13 @@ pub mod panic_count {\n     }\n \n     // Disregards ALWAYS_ABORT_FLAG\n+    #[must_use]\n     pub fn get_count() -> usize {\n         LOCAL_PANIC_COUNT.with(|c| c.get())\n     }\n \n     // Disregards ALWAYS_ABORT_FLAG\n+    #[must_use]\n     #[inline]\n     pub fn count_is_zero() -> bool {\n         if GLOBAL_PANIC_COUNT.load(Ordering::Relaxed) & !ALWAYS_ABORT_FLAG == 0 {"}, {"sha": "dc0c735a06c6f5a4cd502ccc03cb228ea8d6be7a", "filename": "library/std/src/path.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -422,6 +422,7 @@ impl<'a> PrefixComponent<'a> {\n     /// See [`Prefix`]'s documentation for more information on the different\n     /// kinds of prefixes.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn kind(&self) -> Prefix<'a> {\n         self.parsed\n@@ -583,6 +584,7 @@ impl AsRef<Path> for Component<'_> {\n ///\n /// [`components`]: Path::components\n #[derive(Clone)]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Components<'a> {\n     // The path left to parse components from\n@@ -609,6 +611,7 @@ pub struct Components<'a> {\n ///\n /// [`iter`]: Path::iter\n #[derive(Clone)]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a> {\n     inner: Components<'a>,\n@@ -1051,6 +1054,7 @@ fn compare_components(mut left: Components<'_>, mut right: Components<'_>) -> cm\n ///\n /// [`ancestors`]: Path::ancestors\n #[derive(Copy, Clone, Debug)]\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"path_ancestors\", since = \"1.28.0\")]\n pub struct Ancestors<'a> {\n     next: Option<&'a Path>,\n@@ -1459,6 +1463,7 @@ impl PathBuf {\n     ///\n     /// [`capacity`]: OsString::capacity\n     #[stable(feature = \"path_buf_capacity\", since = \"1.44.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn capacity(&self) -> usize {\n         self.inner.capacity()\n@@ -2103,6 +2108,7 @@ impl Path {\n     /// assert_eq!(grand_parent.parent(), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn parent(&self) -> Option<&Path> {\n         let mut comps = self.components();\n         let comp = comps.next_back();\n@@ -2169,6 +2175,7 @@ impl Path {\n     /// assert_eq!(None, Path::new(\"/\").file_name());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn file_name(&self) -> Option<&OsStr> {\n         self.components().next_back().and_then(|p| match p {\n             Component::Normal(p) => Some(p),\n@@ -2241,6 +2248,7 @@ impl Path {\n     /// assert!(!Path::new(\"/etc/foo.rs\").starts_with(\"/etc/foo\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn starts_with<P: AsRef<Path>>(&self, base: P) -> bool {\n         self._starts_with(base.as_ref())\n     }\n@@ -2268,6 +2276,7 @@ impl Path {\n     /// assert!(!path.ends_with(\"conf\")); // use .extension() instead\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn ends_with<P: AsRef<Path>>(&self, child: P) -> bool {\n         self._ends_with(child.as_ref())\n     }\n@@ -2303,6 +2312,7 @@ impl Path {\n     /// [`Path::file_prefix`]: Path::file_prefix\n     ///\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn file_stem(&self) -> Option<&OsStr> {\n         self.file_name().map(rsplit_file_at_dot).and_then(|(before, after)| before.or(after))\n     }\n@@ -2336,6 +2346,7 @@ impl Path {\n     /// [`Path::file_stem`]: Path::file_stem\n     ///\n     #[unstable(feature = \"path_file_prefix\", issue = \"86319\")]\n+    #[must_use]\n     pub fn file_prefix(&self) -> Option<&OsStr> {\n         self.file_name().map(split_file_at_dot).and_then(|(before, _after)| Some(before))\n     }\n@@ -2360,6 +2371,7 @@ impl Path {\n     /// assert_eq!(\"gz\", Path::new(\"foo.tar.gz\").extension().unwrap());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn extension(&self) -> Option<&OsStr> {\n         self.file_name().map(rsplit_file_at_dot).and_then(|(before, after)| before.and(after))\n     }\n@@ -2403,6 +2415,7 @@ impl Path {\n     /// assert_eq!(path.with_file_name(\"var\"), PathBuf::from(\"/var\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn with_file_name<S: AsRef<OsStr>>(&self, file_name: S) -> PathBuf {\n         self._with_file_name(file_name.as_ref())\n     }\n@@ -2660,6 +2673,7 @@ impl Path {\n     /// This is a convenience function that coerces errors to false. If you want to\n     /// check errors, call [`fs::metadata`].\n     #[stable(feature = \"path_ext\", since = \"1.5.0\")]\n+    #[must_use]\n     #[inline]\n     pub fn exists(&self) -> bool {\n         fs::metadata(self).is_ok()\n@@ -2786,6 +2800,7 @@ impl Path {\n     /// Converts a [`Box<Path>`](Box) into a [`PathBuf`] without copying or\n     /// allocating.\n     #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]\n+    #[must_use = \"`self` will be dropped if the result is not used\"]\n     pub fn into_path_buf(self: Box<Path>) -> PathBuf {\n         let rw = Box::into_raw(self) as *mut OsStr;\n         let inner = unsafe { Box::from_raw(rw) };"}, {"sha": "9cc7fc2f0352e6e09b2fa7ab9565fc3936bc165a", "filename": "library/std/src/process.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -948,6 +948,7 @@ impl Command {\n     /// let cmd = Command::new(\"echo\");\n     /// assert_eq!(cmd.get_program(), \"echo\");\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"command_access\", since = \"1.57.0\")]\n     pub fn get_program(&self) -> &OsStr {\n         self.inner.get_program()\n@@ -1021,6 +1022,7 @@ impl Command {\n     /// cmd.current_dir(\"/bin\");\n     /// assert_eq!(cmd.get_current_dir(), Some(Path::new(\"/bin\")));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"command_access\", since = \"1.57.0\")]\n     pub fn get_current_dir(&self) -> Option<&Path> {\n         self.inner.get_current_dir()\n@@ -1053,6 +1055,7 @@ impl AsInnerMut<imp::Command> for Command {\n ///\n /// This struct is created by [`Command::get_args`]. See its documentation for\n /// more.\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"command_access\", since = \"1.57.0\")]\n #[derive(Debug)]\n pub struct CommandArgs<'a> {\n@@ -1183,6 +1186,7 @@ impl Stdio {\n     /// its entire stdin before writing more than a pipe buffer's worth of output.\n     /// The size of a pipe buffer varies on different targets.\n     ///\n+    #[must_use]\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn piped() -> Stdio {\n         Stdio(imp::Stdio::MakePipe)\n@@ -1222,6 +1226,7 @@ impl Stdio {\n     /// print!(\"You piped in the reverse of: \");\n     /// io::stdout().write_all(&output.stdout).unwrap();\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn inherit() -> Stdio {\n         Stdio(imp::Stdio::Inherit)\n@@ -1261,6 +1266,7 @@ impl Stdio {\n     /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n     /// // Ignores any piped-in input\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn null() -> Stdio {\n         Stdio(imp::Stdio::Null)\n@@ -1462,6 +1468,7 @@ impl ExitStatus {\n     ///     println!(\"failed to create 'projects/' directory: {}\", status);\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn success(&self) -> bool {\n         self.0.exit_ok().is_ok()\n@@ -1493,6 +1500,7 @@ impl ExitStatus {\n     ///     None       => println!(\"Process terminated by signal\")\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn code(&self) -> Option<i32> {\n         self.0.code()\n@@ -1580,6 +1588,7 @@ impl ExitStatusError {\n     /// assert_eq!(bad.code(), Some(1));\n     /// # } // #[cfg(unix)]\n     /// ```\n+    #[must_use]\n     pub fn code(&self) -> Option<i32> {\n         self.code_nonzero().map(Into::into)\n     }\n@@ -1605,11 +1614,13 @@ impl ExitStatusError {\n     /// assert_eq!(bad.code_nonzero().unwrap(), NonZeroI32::try_from(1).unwrap());\n     /// # } // cfg!(unix)\n     /// ```\n+    #[must_use]\n     pub fn code_nonzero(&self) -> Option<NonZeroI32> {\n         self.0.code()\n     }\n \n     /// Converts an `ExitStatusError` (back) to an `ExitStatus`.\n+    #[must_use]\n     pub fn into_status(&self) -> ExitStatus {\n         ExitStatus(self.0.into())\n     }\n@@ -1718,6 +1729,7 @@ impl Child {\n     ///     println!(\"ls command didn't start\");\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"process_id\", since = \"1.3.0\")]\n     pub fn id(&self) -> u32 {\n         self.handle.id()\n@@ -1988,6 +2000,7 @@ pub fn abort() -> ! {\n /// ```\n ///\n ///\n+#[must_use]\n #[stable(feature = \"getpid\", since = \"1.26.0\")]\n pub fn id() -> u32 {\n     crate::sys::os::getpid()"}, {"sha": "08e58257572b24fcfddeb1a18be409b6b124c8a6", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -128,8 +128,7 @@ fn lang_start_internal(\n     let ret_code = panic::catch_unwind(move || panic::catch_unwind(main).unwrap_or(101) as isize)\n         .map_err(move |e| {\n             mem::forget(e);\n-            rtprintpanic!(\"drop of the panic payload panicked\");\n-            sys::abort_internal()\n+            rtabort!(\"drop of the panic payload panicked\");\n         });\n     panic::catch_unwind(cleanup).map_err(rt_abort)?;\n     ret_code"}, {"sha": "b41918ec1cffc6c1f7613b70da2b4732026b87dc", "filename": "library/std/src/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fcondvar.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -61,6 +61,7 @@ impl WaitTimeoutResult {\n     ///     }\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"wait_timeout\", since = \"1.5.0\")]\n     pub fn timed_out(&self) -> bool {\n         self.0"}, {"sha": "2cf678ef69b073677b32a32774ba686272a0e4e6", "filename": "library/std/src/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -707,6 +707,7 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// // Let's see what that answer was\n /// println!(\"{:?}\", receiver.recv().unwrap());\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn channel<T>() -> (Sender<T>, Receiver<T>) {\n     let a = Arc::new(oneshot::Packet::new());\n@@ -755,6 +756,7 @@ pub fn channel<T>() -> (Sender<T>, Receiver<T>) {\n /// assert_eq!(receiver.recv().unwrap(), 1);\n /// assert_eq!(receiver.recv().unwrap(), 2);\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn sync_channel<T>(bound: usize) -> (SyncSender<T>, Receiver<T>) {\n     let a = Arc::new(sync::Packet::new(bound));"}, {"sha": "1e8d1137ac8b865f1a8bbb8a74d57baec9ded908", "filename": "library/std/src/sys/unix/stack_overflow.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstack_overflow.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -6,7 +6,7 @@ pub use self::imp::cleanup;\n pub use self::imp::init;\n \n pub struct Handler {\n-    _data: *mut libc::c_void,\n+    data: *mut libc::c_void,\n }\n \n impl Handler {\n@@ -15,14 +15,14 @@ impl Handler {\n     }\n \n     fn null() -> Handler {\n-        Handler { _data: crate::ptr::null_mut() }\n+        Handler { data: crate::ptr::null_mut() }\n     }\n }\n \n impl Drop for Handler {\n     fn drop(&mut self) {\n         unsafe {\n-            drop_handler(self);\n+            drop_handler(self.data);\n         }\n     }\n }\n@@ -134,12 +134,12 @@ mod imp {\n         }\n \n         let handler = make_handler();\n-        MAIN_ALTSTACK.store(handler._data, Ordering::Relaxed);\n+        MAIN_ALTSTACK.store(handler.data, Ordering::Relaxed);\n         mem::forget(handler);\n     }\n \n     pub unsafe fn cleanup() {\n-        Handler { _data: MAIN_ALTSTACK.load(Ordering::Relaxed) };\n+        drop_handler(MAIN_ALTSTACK.load(Ordering::Relaxed));\n     }\n \n     unsafe fn get_stackp() -> *mut libc::c_void {\n@@ -176,14 +176,14 @@ mod imp {\n         if stack.ss_flags & SS_DISABLE != 0 {\n             stack = get_stack();\n             sigaltstack(&stack, ptr::null_mut());\n-            Handler { _data: stack.ss_sp as *mut libc::c_void }\n+            Handler { data: stack.ss_sp as *mut libc::c_void }\n         } else {\n             Handler::null()\n         }\n     }\n \n-    pub unsafe fn drop_handler(handler: &mut Handler) {\n-        if !handler._data.is_null() {\n+    pub unsafe fn drop_handler(data: *mut libc::c_void) {\n+        if !data.is_null() {\n             let stack = libc::stack_t {\n                 ss_sp: ptr::null_mut(),\n                 ss_flags: SS_DISABLE,\n@@ -196,7 +196,7 @@ mod imp {\n             sigaltstack(&stack, ptr::null_mut());\n             // We know from `get_stackp` that the alternate stack we installed is part of a mapping\n             // that started one page earlier, so walk back a page and unmap from there.\n-            munmap(handler._data.sub(page_size()), SIGSTKSZ + page_size());\n+            munmap(data.sub(page_size()), SIGSTKSZ + page_size());\n         }\n     }\n }\n@@ -220,5 +220,5 @@ mod imp {\n         super::Handler::null()\n     }\n \n-    pub unsafe fn drop_handler(_handler: &mut super::Handler) {}\n+    pub unsafe fn drop_handler(_data: *mut libc::c_void) {}\n }"}, {"sha": "2cd1e29f6c45ddfcc05bb6b93c272e899fee6fca", "filename": "library/std/src/sys_common/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -106,6 +106,7 @@ impl CommandEnv {\n /// This struct is created by\n /// [`Command::get_envs`][crate::process::Command::get_envs]. See its\n /// documentation for more.\n+#[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"command_access\", since = \"1.57.0\")]\n #[derive(Debug)]\n pub struct CommandEnvs<'a> {"}, {"sha": "e7944c715ed6fb7106afc88d8983d99ae7369561", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -650,6 +650,7 @@ where\n ///\n /// handler.join().unwrap();\n /// ```\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn current() -> Thread {\n     thread_info::current_thread().expect(\n@@ -738,6 +739,7 @@ pub fn yield_now() {\n ///\n /// [Mutex]: crate::sync::Mutex\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn panicking() -> bool {\n     panicking::panicking()\n@@ -1132,6 +1134,7 @@ impl Thread {\n     /// assert!(thread::current().id() != other_thread_id);\n     /// ```\n     #[stable(feature = \"thread_id\", since = \"1.19.0\")]\n+    #[must_use]\n     pub fn id(&self) -> ThreadId {\n         self.inner.id\n     }\n@@ -1174,6 +1177,7 @@ impl Thread {\n     ///\n     /// [naming-threads]: ./index.html#naming-threads\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn name(&self) -> Option<&str> {\n         self.cname().map(|s| unsafe { str::from_utf8_unchecked(s.to_bytes()) })\n     }\n@@ -1361,6 +1365,7 @@ impl<T> JoinHandle<T> {\n     /// println!(\"thread id: {:?}\", thread.id());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use]\n     pub fn thread(&self) -> &Thread {\n         &self.0.thread\n     }"}, {"sha": "a5e3bd0c29030731aaba4e6cfe7aa16c0575d664", "filename": "library/std/src/time.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -239,6 +239,7 @@ impl Instant {\n     ///\n     /// let now = Instant::now();\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn now() -> Instant {\n         let os_now = time::Instant::now();\n@@ -306,6 +307,7 @@ impl Instant {\n     /// let new_now = Instant::now();\n     /// println!(\"{:?}\", new_now.duration_since(now));\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn duration_since(&self, earlier: Instant) -> Duration {\n         self.0.checked_sub_instant(&earlier.0).expect(\"supplied instant is later than self\")\n@@ -326,6 +328,7 @@ impl Instant {\n     /// println!(\"{:?}\", new_now.checked_duration_since(now));\n     /// println!(\"{:?}\", now.checked_duration_since(new_now)); // None\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"checked_duration_since\", since = \"1.39.0\")]\n     pub fn checked_duration_since(&self, earlier: Instant) -> Option<Duration> {\n         self.0.checked_sub_instant(&earlier.0)\n@@ -346,6 +349,7 @@ impl Instant {\n     /// println!(\"{:?}\", new_now.saturating_duration_since(now));\n     /// println!(\"{:?}\", now.saturating_duration_since(new_now)); // 0ns\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"checked_duration_since\", since = \"1.39.0\")]\n     pub fn saturating_duration_since(&self, earlier: Instant) -> Duration {\n         self.checked_duration_since(earlier).unwrap_or_default()\n@@ -370,6 +374,7 @@ impl Instant {\n     /// sleep(three_secs);\n     /// assert!(instant.elapsed() >= three_secs);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn elapsed(&self) -> Duration {\n         Instant::now() - *self\n@@ -476,6 +481,7 @@ impl SystemTime {\n     ///\n     /// let sys_time = SystemTime::now();\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn now() -> SystemTime {\n         SystemTime(time::SystemTime::now())\n@@ -644,6 +650,7 @@ impl SystemTimeError {\n     ///     Err(e) => println!(\"SystemTimeError difference: {:?}\", e.duration()),\n     /// }\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn duration(&self) -> Duration {\n         self.0"}, {"sha": "7279925a6d0bef166ad8b044d6b36bad1626afb8", "filename": "library/std/src/time/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -48,7 +48,7 @@ fn instant_monotonic_concurrent() -> crate::thread::Result<()> {\n #[test]\n fn instant_elapsed() {\n     let a = Instant::now();\n-    a.elapsed();\n+    let _ = a.elapsed();\n }\n \n #[test]\n@@ -93,7 +93,7 @@ fn instant_math_is_associative() {\n #[should_panic]\n fn instant_duration_since_panic() {\n     let a = Instant::now();\n-    (a - Duration::SECOND).duration_since(a);\n+    let _ = (a - Duration::SECOND).duration_since(a);\n }\n \n #[test]"}, {"sha": "dc193582c6a50bec8fe0184eb0a6a5bcc6fecc52", "filename": "src/test/ui/rt-explody-panic-payloads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftest%2Fui%2Frt-explody-panic-payloads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftest%2Fui%2Frt-explody-panic-payloads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frt-explody-panic-payloads.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -25,6 +25,6 @@ fn main() {\n     println!(\"{:#?}\", output);\n     let stderr = std::str::from_utf8(&output.stderr);\n     assert!(stderr.map(|v| {\n-        v.ends_with(\"drop of the panic payload panicked\")\n+        v.ends_with(\"fatal runtime error: drop of the panic payload panicked\\n\")\n     }).unwrap_or(false));\n }"}, {"sha": "fd7fc7fbd41b774dfc6ba266d2edd8f1d3825284", "filename": "src/test/ui/rust-2018/uniform-paths/redundant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -13,8 +13,8 @@ mod bar {\n }\n \n fn main() {\n-    io::stdout();\n-    self::std::io::stdout();\n-    foo::my_std::io::stdout();\n-    bar::std::io::stdout();\n+    let _ = io::stdout();\n+    let _ = self::std::io::stdout();\n+    let _ = foo::my_std::io::stdout();\n+    let _ = bar::std::io::stdout();\n }"}, {"sha": "dcf0eb646f3b0591a1df8b2cbb9dac1cfc46faa0", "filename": "src/test/ui/uniform-paths/basic-nested.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftest%2Fui%2Funiform-paths%2Fbasic-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftest%2Fui%2Funiform-paths%2Fbasic-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funiform-paths%2Fbasic-nested.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -44,10 +44,10 @@ mod bar {\n \n fn main() {\n     foo::Foo(());\n-    foo::std_io::stdout();\n+    let _ = foo::std_io::stdout();\n     foo::local_io(());\n-    io::stdout();\n-    bar::io::stdout();\n+    let _ = io::stdout();\n+    let _ = bar::io::stdout();\n     bar::std();\n     bar::std!();\n \n@@ -56,6 +56,6 @@ fn main() {\n         // scope is allowed, when both resolve to the same definition.\n         use std::io;\n         use io::stdout;\n-        stdout();\n+        let _ = stdout();\n     }\n }"}, {"sha": "ce611a7cacf38b887614240e2cfea8e076f86c5a", "filename": "src/test/ui/uniform-paths/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftest%2Fui%2Funiform-paths%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftest%2Fui%2Funiform-paths%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funiform-paths%2Fbasic.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -20,14 +20,14 @@ use self::std::io as local_io;\n \n fn main() {\n     Foo(());\n-    std_io::stdout();\n+    let _ = std_io::stdout();\n     local_io(());\n \n     {\n         // Test that having `std_io` in a module scope and a non-module\n         // scope is allowed, when both resolve to the same definition.\n         use ::std::io as std_io;\n         use std_io::stdout;\n-        stdout();\n+        let _ = stdout();\n     }\n }"}, {"sha": "175ccd34e98d92116d433f23bc2e15ab2720b269", "filename": "src/test/ui/uniform-paths/macros-nested.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftest%2Fui%2Funiform-paths%2Fmacros-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftest%2Fui%2Funiform-paths%2Fmacros-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funiform-paths%2Fmacros-nested.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -46,8 +46,8 @@ mod bar {\n \n fn main() {\n     foo::Foo(());\n-    foo::std_io::stdout();\n+    let _ = foo::std_io::stdout();\n     foo::local_io(());\n-    io::stdout();\n-    bar::io::stdout();\n+    let _ = io::stdout();\n+    let _ = bar::io::stdout();\n }"}, {"sha": "bf512b30560eb7ebd8cb1b2c1d99800d47a4325d", "filename": "src/test/ui/uniform-paths/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftest%2Fui%2Funiform-paths%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftest%2Fui%2Funiform-paths%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funiform-paths%2Fmacros.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -31,6 +31,6 @@ m2!();\n \n fn main() {\n     Foo(());\n-    std_io::stdout();\n+    let _ = std_io::stdout();\n     local_io(());\n }"}, {"sha": "90a6eef75261f505c6fd517b1280c548581f2d8e", "filename": "src/tools/clippy/tests/ui/iter_count.fixed", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.fixed?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -33,6 +33,7 @@ impl HasIter {\n     }\n }\n \n+#[allow(unused_must_use)]\n fn main() {\n     let mut vec = vec![0, 1, 2, 3];\n     let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n@@ -50,7 +51,7 @@ fn main() {\n     linked_list.push_back(1);\n     binary_heap.push(1);\n \n-    let _ = &vec[..].len();\n+    &vec[..].len();\n     vec.len();\n     boxed_slice.len();\n     vec_deque.len();\n@@ -62,13 +63,13 @@ fn main() {\n     binary_heap.len();\n \n     vec.len();\n-    let _ = &vec[..].len();\n+    &vec[..].len();\n     vec_deque.len();\n     hash_map.len();\n     b_tree_map.len();\n     linked_list.len();\n \n-    let _ = &vec[..].len();\n+    &vec[..].len();\n     vec.len();\n     vec_deque.len();\n     hash_set.len();"}, {"sha": "6681a480a28c817472eb5bdb1976bb5a948cd61b", "filename": "src/tools/clippy/tests/ui/iter_count.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.rs?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -33,6 +33,7 @@ impl HasIter {\n     }\n }\n \n+#[allow(unused_must_use)]\n fn main() {\n     let mut vec = vec![0, 1, 2, 3];\n     let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n@@ -50,7 +51,7 @@ fn main() {\n     linked_list.push_back(1);\n     binary_heap.push(1);\n \n-    let _ = &vec[..].iter().count();\n+    &vec[..].iter().count();\n     vec.iter().count();\n     boxed_slice.iter().count();\n     vec_deque.iter().count();\n@@ -62,13 +63,13 @@ fn main() {\n     binary_heap.iter().count();\n \n     vec.iter_mut().count();\n-    let _ = &vec[..].iter_mut().count();\n+    &vec[..].iter_mut().count();\n     vec_deque.iter_mut().count();\n     hash_map.iter_mut().count();\n     b_tree_map.iter_mut().count();\n     linked_list.iter_mut().count();\n \n-    let _ = &vec[..].into_iter().count();\n+    &vec[..].into_iter().count();\n     vec.into_iter().count();\n     vec_deque.into_iter().count();\n     hash_set.into_iter().count();"}, {"sha": "2e3d7fc35de9c0de17d3f712bbc87a892c90dbad", "filename": "src/tools/clippy/tests/ui/iter_count.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68b554e6af18726fe6fa8de2134c59c441e0b019/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_count.stderr?ref=68b554e6af18726fe6fa8de2134c59c441e0b019", "patch": "@@ -1,151 +1,151 @@\n error: called `.iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:53:14\n+  --> $DIR/iter_count.rs:54:6\n    |\n-LL |     let _ = &vec[..].iter().count();\n-   |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+LL |     &vec[..].iter().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n    |\n    = note: `-D clippy::iter-count` implied by `-D warnings`\n \n error: called `.iter().count()` on a `Vec`\n-  --> $DIR/iter_count.rs:54:5\n+  --> $DIR/iter_count.rs:55:5\n    |\n LL |     vec.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:55:5\n+  --> $DIR/iter_count.rs:56:5\n    |\n LL |     boxed_slice.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `boxed_slice.len()`\n \n error: called `.iter().count()` on a `VecDeque`\n-  --> $DIR/iter_count.rs:56:5\n+  --> $DIR/iter_count.rs:57:5\n    |\n LL |     vec_deque.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n \n error: called `.iter().count()` on a `HashSet`\n-  --> $DIR/iter_count.rs:57:5\n+  --> $DIR/iter_count.rs:58:5\n    |\n LL |     hash_set.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_set.len()`\n \n error: called `.iter().count()` on a `HashMap`\n-  --> $DIR/iter_count.rs:58:5\n+  --> $DIR/iter_count.rs:59:5\n    |\n LL |     hash_map.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n \n error: called `.iter().count()` on a `BTreeMap`\n-  --> $DIR/iter_count.rs:59:5\n+  --> $DIR/iter_count.rs:60:5\n    |\n LL |     b_tree_map.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n \n error: called `.iter().count()` on a `BTreeSet`\n-  --> $DIR/iter_count.rs:60:5\n+  --> $DIR/iter_count.rs:61:5\n    |\n LL |     b_tree_set.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_set.len()`\n \n error: called `.iter().count()` on a `LinkedList`\n-  --> $DIR/iter_count.rs:61:5\n+  --> $DIR/iter_count.rs:62:5\n    |\n LL |     linked_list.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n \n error: called `.iter().count()` on a `BinaryHeap`\n-  --> $DIR/iter_count.rs:62:5\n+  --> $DIR/iter_count.rs:63:5\n    |\n LL |     binary_heap.iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `binary_heap.len()`\n \n error: called `.iter_mut().count()` on a `Vec`\n-  --> $DIR/iter_count.rs:64:5\n+  --> $DIR/iter_count.rs:65:5\n    |\n LL |     vec.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.iter_mut().count()` on a `slice`\n-  --> $DIR/iter_count.rs:65:14\n+  --> $DIR/iter_count.rs:66:6\n    |\n-LL |     let _ = &vec[..].iter_mut().count();\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+LL |     &vec[..].iter_mut().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n \n error: called `.iter_mut().count()` on a `VecDeque`\n-  --> $DIR/iter_count.rs:66:5\n+  --> $DIR/iter_count.rs:67:5\n    |\n LL |     vec_deque.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n \n error: called `.iter_mut().count()` on a `HashMap`\n-  --> $DIR/iter_count.rs:67:5\n+  --> $DIR/iter_count.rs:68:5\n    |\n LL |     hash_map.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n \n error: called `.iter_mut().count()` on a `BTreeMap`\n-  --> $DIR/iter_count.rs:68:5\n+  --> $DIR/iter_count.rs:69:5\n    |\n LL |     b_tree_map.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n \n error: called `.iter_mut().count()` on a `LinkedList`\n-  --> $DIR/iter_count.rs:69:5\n+  --> $DIR/iter_count.rs:70:5\n    |\n LL |     linked_list.iter_mut().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n \n error: called `.into_iter().count()` on a `slice`\n-  --> $DIR/iter_count.rs:71:14\n+  --> $DIR/iter_count.rs:72:6\n    |\n-LL |     let _ = &vec[..].into_iter().count();\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n+LL |     &vec[..].into_iter().count();\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec[..].len()`\n \n error: called `.into_iter().count()` on a `Vec`\n-  --> $DIR/iter_count.rs:72:5\n+  --> $DIR/iter_count.rs:73:5\n    |\n LL |     vec.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec.len()`\n \n error: called `.into_iter().count()` on a `VecDeque`\n-  --> $DIR/iter_count.rs:73:5\n+  --> $DIR/iter_count.rs:74:5\n    |\n LL |     vec_deque.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `vec_deque.len()`\n \n error: called `.into_iter().count()` on a `HashSet`\n-  --> $DIR/iter_count.rs:74:5\n+  --> $DIR/iter_count.rs:75:5\n    |\n LL |     hash_set.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_set.len()`\n \n error: called `.into_iter().count()` on a `HashMap`\n-  --> $DIR/iter_count.rs:75:5\n+  --> $DIR/iter_count.rs:76:5\n    |\n LL |     hash_map.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `hash_map.len()`\n \n error: called `.into_iter().count()` on a `BTreeMap`\n-  --> $DIR/iter_count.rs:76:5\n+  --> $DIR/iter_count.rs:77:5\n    |\n LL |     b_tree_map.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_map.len()`\n \n error: called `.into_iter().count()` on a `BTreeSet`\n-  --> $DIR/iter_count.rs:77:5\n+  --> $DIR/iter_count.rs:78:5\n    |\n LL |     b_tree_set.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b_tree_set.len()`\n \n error: called `.into_iter().count()` on a `LinkedList`\n-  --> $DIR/iter_count.rs:78:5\n+  --> $DIR/iter_count.rs:79:5\n    |\n LL |     linked_list.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `linked_list.len()`\n \n error: called `.into_iter().count()` on a `BinaryHeap`\n-  --> $DIR/iter_count.rs:79:5\n+  --> $DIR/iter_count.rs:80:5\n    |\n LL |     binary_heap.into_iter().count();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `binary_heap.len()`"}]}