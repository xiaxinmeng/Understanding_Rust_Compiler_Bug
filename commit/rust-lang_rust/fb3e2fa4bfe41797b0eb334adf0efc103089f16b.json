{"sha": "fb3e2fa4bfe41797b0eb334adf0efc103089f16b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiM2UyZmE0YmZlNDE3OTdiMGViMzM0YWRmMGVmYzEwMzA4OWYxNmI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-27T20:48:25Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-27T20:48:25Z"}, "message": "Encode tag and iso types at dwarf level. Can't decode them yet.", "tree": {"sha": "895e483d7014fda70ce46653f4a085cbf4f85f5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/895e483d7014fda70ce46653f4a085cbf4f85f5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb3e2fa4bfe41797b0eb334adf0efc103089f16b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb3e2fa4bfe41797b0eb334adf0efc103089f16b", "html_url": "https://github.com/rust-lang/rust/commit/fb3e2fa4bfe41797b0eb334adf0efc103089f16b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb3e2fa4bfe41797b0eb334adf0efc103089f16b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ea416f4c33631d76fd5b12830c0d326803061c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea416f4c33631d76fd5b12830c0d326803061c1", "html_url": "https://github.com/rust-lang/rust/commit/7ea416f4c33631d76fd5b12830c0d326803061c1"}], "stats": {"total": 159, "additions": 142, "deletions": 17}, "files": [{"sha": "b3c66a87046de07ff5c06088bf29e2768451e185", "filename": "src/boot/me/dwarf.ml", "status": "modified", "additions": 142, "deletions": 17, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/fb3e2fa4bfe41797b0eb334adf0efc103089f16b/src%2Fboot%2Fme%2Fdwarf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/fb3e2fa4bfe41797b0eb334adf0efc103089f16b/src%2Fboot%2Fme%2Fdwarf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdwarf.ml?ref=fb3e2fa4bfe41797b0eb334adf0efc103089f16b", "patch": "@@ -745,8 +745,6 @@ type dw_rust_type =\n   | DW_RUST_chan\n   | DW_RUST_port\n   | DW_RUST_task\n-  | DW_RUST_tag\n-  | DW_RUST_iso\n   | DW_RUST_type\n   | DW_RUST_native\n ;;\n@@ -759,10 +757,8 @@ let dw_rust_type_to_int (pt:dw_rust_type) : int =\n     | DW_RUST_chan -> 0x4\n     | DW_RUST_port -> 0x5\n     | DW_RUST_task -> 0x6\n-    | DW_RUST_tag -> 0x7\n-    | DW_RUST_iso -> 0x8\n-    | DW_RUST_type -> 0x9\n-    | DW_RUST_native -> 0xa\n+    | DW_RUST_type -> 0x7\n+    | DW_RUST_native -> 0x8\n ;;\n \n let dw_rust_type_of_int (i:int) : dw_rust_type =\n@@ -773,10 +769,8 @@ let dw_rust_type_of_int (i:int) : dw_rust_type =\n     | 0x4 -> DW_RUST_chan\n     | 0x5 -> DW_RUST_port\n     | 0x6 -> DW_RUST_task\n-    | 0x7 -> DW_RUST_tag\n-    | 0x8 -> DW_RUST_iso\n-    | 0x9 -> DW_RUST_type\n-    | 0xa -> DW_RUST_native\n+    | 0x7 -> DW_RUST_type\n+    | 0x8 -> DW_RUST_native\n     | _ -> bug () \"bad DWARF rust-pointer-type code: %d\" i\n ;;\n \n@@ -1344,6 +1338,21 @@ let (abbrev_struct_type_member:abbrev) =\n      |])\n ;;\n \n+let (abbrev_variant_part:abbrev) =\n+    (DW_TAG_variant_part, DW_CHILDREN_yes,\n+     [|\n+       (DW_AT_discr, DW_FORM_ref_addr)\n+     |])\n+;;\n+\n+\n+let (abbrev_variant:abbrev) =\n+    (DW_TAG_variant, DW_CHILDREN_yes,\n+     [|\n+       (DW_AT_discr_value, DW_FORM_udata)\n+     |])\n+;;\n+\n let (abbrev_subroutine_type:abbrev) =\n     (DW_TAG_subroutine_type, DW_CHILDREN_yes,\n      [|\n@@ -1428,6 +1437,8 @@ let dwarf_visitor\n       | Il.Bits64 -> TY_i64\n   in\n \n+  let iso_stack = Stack.create () in\n+\n   let path_name _ = Fmt.fmt_to_str Ast.fmt_name (Walk.path_to_name path) in\n \n   let (abbrev_table:(abbrev, int) Hashtbl.t) = Hashtbl.create 0 in\n@@ -1720,6 +1731,12 @@ let dwarf_visitor\n           ref_addr_for_fix fix\n       in\n \n+      let tup ttup =\n+        record (Array.mapi (fun i s ->\n+                              (\"_\" ^ (string_of_int i), s))\n+                  ttup)\n+      in\n+\n       let string_type _ =\n         (* \n          * Strings, like vecs, are &[rc,alloc,fill,data...] \n@@ -1912,6 +1929,117 @@ let dwarf_visitor\n           ref_addr_for_fix fix\n       in\n \n+      let tag_type fix_opt ttag =\n+        (*\n+         * Tag-encoding is a bit complex. It's based on the pascal model.\n+         *\n+         * You have a structure (DW_TAG_structure_type) with 2 fields:\n+         *\n+         * 0 : the discriminant (type uint)\n+         * 1 : the variant-part of the structure (DW_TAG_variant_part)\n+         *     with DW_AT_discr pointing to the disctiminant, and kids:\n+         *     0 : variant 0 (DW_TAG_variant) with DW_AT_discr_value 0\n+         *         (with a tuple-type child)\n+         *     1 : variant 1 ...\n+         *     ...\n+         *     N : variant N (DW_TAG_variant) with DW_AT_discr_value N\n+         *\n+         * Curiously, DW_TAG_union_type doesn't seem to play into it.\n+         * I'm a bit surprised by that!\n+         *)\n+\n+        let rty = referent_type abi (Ast.TY_tag ttag) in\n+        let rty_sz = Il.referent_ty_size abi.Abi.abi_word_bits in\n+        let rtys =\n+          match rty with\n+              Il.StructTy rtys -> rtys\n+            | _ -> bug () \"tag type became non-struct referent_ty\"\n+        in\n+\n+        let outer_structure_fix =\n+          match fix_opt with\n+              None -> new_fixup \"tag type\"\n+            | Some f -> f\n+        in\n+        let outer_structure_die =\n+          DEF (outer_structure_fix, SEQ [|\n+                 uleb (get_abbrev_code abbrev_struct_type);\n+                 (* DW_AT_byte_size: DW_FORM_block4 *)\n+                 size_block4 (rty_sz rty) false\n+               |])\n+        in\n+\n+        let discr_fix = new_fixup \"tag discriminant\" in\n+        let discr_die =\n+          DEF (discr_fix, SEQ [|\n+                 uleb (get_abbrev_code abbrev_struct_type_member);\n+                 (* DW_AT_name: DW_FORM_string *)\n+                 ZSTRING \"tag\";\n+                 (* DW_AT_type: DW_FORM_ref_addr *)\n+                 (ref_slot_die (interior_slot Ast.TY_uint));\n+                 (* DW_AT_mutable: DW_FORM_flag *)\n+                 BYTE 0;\n+                 (* DW_AT_data_member_location: DW_FORM_block4 *)\n+                 size_block4\n+                   (Il.get_element_offset word_bits rtys 0)\n+                   true;\n+                 (* DW_AT_byte_size: DW_FORM_block4 *)\n+                 size_block4 (rty_sz rtys.(0)) false |]);\n+        in\n+\n+        let variant_part_die =\n+          SEQ [|\n+            uleb (get_abbrev_code abbrev_variant_part);\n+            (* DW_AT_discr: DW_FORM_ref_addr *)\n+            (dw_form_ref_addr discr_fix)\n+          |]\n+        in\n+\n+        let emit_variant i (*name*)_ ttup =\n+          (* FIXME: Possibly use a DW_TAG_enumeration_type here? *)\n+          (* Tag-names aren't getting encoded; I'm not sure if that's a\n+           * problem. Might be. *)\n+          emit_die (SEQ [|\n+                      uleb (get_abbrev_code abbrev_variant);\n+                      (* DW_AT_discr_value: DW_FORM_udata *)\n+                      uleb i;\n+                    |]);\n+          ignore (tup ttup);\n+          emit_null_die ();\n+        in\n+          emit_die outer_structure_die;\n+          emit_die discr_die;\n+          emit_die variant_part_die;\n+          let tag_keys = sorted_htab_keys ttag in\n+            Array.iteri\n+              (fun i k -> emit_variant i k (Hashtbl.find ttag k))\n+              tag_keys;\n+            emit_null_die (); (* end variant-part *)\n+            emit_null_die (); (* end outer struct *)\n+            ref_addr_for_fix outer_structure_fix\n+      in\n+\n+      let iso_type tiso =\n+        let iso_fixups =\n+          Array.map\n+            (fun _ -> new_fixup \"iso-member tag type\")\n+            tiso.Ast.iso_group\n+        in\n+          Stack.push iso_fixups iso_stack;\n+          let tag_dies =\n+            Array.mapi\n+              (fun i fix ->\n+                 tag_type (Some fix) tiso.Ast.iso_group.(i))\n+              iso_fixups\n+          in\n+            ignore (Stack.pop iso_stack);\n+            tag_dies.(tiso.Ast.iso_index)\n+      in\n+\n+      let idx_type i =\n+        ref_addr_for_fix (Stack.top iso_stack).(i)\n+      in\n+\n         match ty with\n             Ast.TY_nil -> unspecified_struct DW_RUST_nil\n           | Ast.TY_bool -> base (\"bool\", DW_ATE_boolean, 1)\n@@ -1928,18 +2056,15 @@ let dwarf_visitor\n           | Ast.TY_char -> base (\"char\", DW_ATE_unsigned_char, 4)\n           | Ast.TY_str -> string_type ()\n           | Ast.TY_rec trec -> record trec\n-          | Ast.TY_tup ttup ->\n-              record (Array.mapi (fun i s ->\n-                                    (\"_\" ^ (string_of_int i), s))\n-                        ttup)\n-\n+          | Ast.TY_tup ttup -> tup ttup\n+          | Ast.TY_tag ttag -> tag_type None ttag\n+          | Ast.TY_iso tiso -> iso_type tiso\n+          | Ast.TY_idx i -> idx_type i\n           | Ast.TY_vec s -> unspecified_ptr_with_ref_slot DW_RUST_vec s\n           | Ast.TY_chan t -> unspecified_ptr_with_ref_ty DW_RUST_chan t\n           | Ast.TY_port t -> unspecified_ptr_with_ref_ty DW_RUST_port t\n           | Ast.TY_task -> unspecified_ptr DW_RUST_task\n           | Ast.TY_fn fn -> fn_type fn\n-          | Ast.TY_tag _ -> unspecified_ptr DW_RUST_tag\n-          | Ast.TY_iso _ -> unspecified_ptr DW_RUST_iso\n           | Ast.TY_type -> unspecified_ptr DW_RUST_type\n           | Ast.TY_native i -> native_ptr_type i\n           | Ast.TY_param p -> rust_type_param p"}]}