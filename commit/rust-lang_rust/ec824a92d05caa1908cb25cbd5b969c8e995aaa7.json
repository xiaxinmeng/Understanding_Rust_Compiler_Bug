{"sha": "ec824a92d05caa1908cb25cbd5b969c8e995aaa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjODI0YTkyZDA1Y2FhMTkwOGNiMjVjYmQ1Yjk2OWM4ZTk5NWFhYTc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-17T13:38:11Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-17T13:48:57Z"}, "message": "Better handling of block doc comments", "tree": {"sha": "4d64f1a745735200fbdbc3df564f1471d1b44be1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d64f1a745735200fbdbc3df564f1471d1b44be1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec824a92d05caa1908cb25cbd5b969c8e995aaa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec824a92d05caa1908cb25cbd5b969c8e995aaa7", "html_url": "https://github.com/rust-lang/rust/commit/ec824a92d05caa1908cb25cbd5b969c8e995aaa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e", "html_url": "https://github.com/rust-lang/rust/commit/0fbfab3b45af7a02b1224bca4a53e9b8f6ec049e"}], "stats": {"total": 239, "additions": 158, "deletions": 81}, "files": [{"sha": "aeeb2c5cf9579c88eddfa8d79fa01c21e47b4ca1", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 45, "deletions": 38, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=ec824a92d05caa1908cb25cbd5b969c8e995aaa7", "patch": "@@ -77,33 +77,19 @@ impl RawAttrs {\n     pub(crate) const EMPTY: Self = Self { entries: None };\n \n     pub(crate) fn new(owner: &dyn AttrsOwner, hygiene: &Hygiene) -> Self {\n-        let attrs: Vec<_> = collect_attrs(owner).collect();\n-        let entries = if attrs.is_empty() {\n-            // Avoid heap allocation\n-            None\n-        } else {\n-            Some(\n-                attrs\n-                    .into_iter()\n-                    .enumerate()\n-                    .flat_map(|(i, attr)| match attr {\n-                        Either::Left(attr) => Attr::from_src(attr, hygiene).map(|attr| (i, attr)),\n-                        Either::Right(comment) => comment.doc_comment().map(|doc| {\n-                            (\n-                                i,\n-                                Attr {\n-                                    index: 0,\n-                                    input: Some(AttrInput::Literal(SmolStr::new(doc))),\n-                                    path: ModPath::from(hir_expand::name!(doc)),\n-                                },\n-                            )\n-                        }),\n-                    })\n-                    .map(|(i, attr)| Attr { index: i as u32, ..attr })\n-                    .collect(),\n-            )\n-        };\n-        Self { entries }\n+        let entries = collect_attrs(owner)\n+            .enumerate()\n+            .flat_map(|(i, attr)| match attr {\n+                Either::Left(attr) => Attr::from_src(attr, hygiene, i as u32),\n+                Either::Right(comment) => comment.doc_comment().map(|doc| Attr {\n+                    index: i as u32,\n+                    input: Some(AttrInput::Literal(SmolStr::new(doc))),\n+                    path: ModPath::from(hir_expand::name!(doc)),\n+                }),\n+            })\n+            .collect::<Arc<_>>();\n+\n+        Self { entries: if entries.is_empty() { None } else { Some(entries) } }\n     }\n \n     fn from_attrs_owner(db: &dyn DefDatabase, owner: InFile<&dyn AttrsOwner>) -> Self {\n@@ -162,7 +148,7 @@ impl RawAttrs {\n                     let attr = ast::Attr::parse(&format!(\"#[{}]\", tree)).ok()?;\n                     // FIXME hygiene\n                     let hygiene = Hygiene::new_unhygienic();\n-                    Attr::from_src(attr, &hygiene).map(|attr| Attr { index, ..attr })\n+                    Attr::from_src(attr, &hygiene, index)\n                 });\n \n                 let cfg_options = &crate_graph[krate].cfg_options;\n@@ -325,15 +311,36 @@ impl Attrs {\n             AttrInput::Literal(s) => Some(s),\n             AttrInput::TokenTree(_) => None,\n         });\n-        // FIXME: Replace `Itertools::intersperse` with `Iterator::intersperse[_with]` until the\n-        // libstd api gets stabilized (https://github.com/rust-lang/rust/issues/79524).\n-        let docs = Itertools::intersperse(docs, &SmolStr::new_inline(\"\\n\"))\n-            .map(|it| it.as_str())\n-            .collect::<String>();\n-        if docs.is_empty() {\n+        let indent = docs\n+            .clone()\n+            .flat_map(|s| s.lines())\n+            .filter(|line| !line.chars().all(|c| c.is_whitespace()))\n+            .map(|line| line.chars().take_while(|c| c.is_whitespace()).count())\n+            .min()\n+            .unwrap_or(0);\n+        let mut buf = String::new();\n+        for doc in docs {\n+            // str::lines doesn't yield anything for the empty string\n+            if doc.is_empty() {\n+                buf.push('\\n');\n+            } else {\n+                buf.extend(Itertools::intersperse(\n+                    doc.lines().map(|line| {\n+                        line.char_indices()\n+                            .nth(indent)\n+                            .map_or(line, |(offset, _)| &line[offset..])\n+                            .trim_end()\n+                    }),\n+                    \"\\n\",\n+                ));\n+            }\n+            buf.push('\\n');\n+        }\n+        buf.pop();\n+        if buf.is_empty() {\n             None\n         } else {\n-            Some(Documentation(docs))\n+            Some(Documentation(buf))\n         }\n     }\n }\n@@ -407,7 +414,7 @@ pub enum AttrInput {\n }\n \n impl Attr {\n-    fn from_src(ast: ast::Attr, hygiene: &Hygiene) -> Option<Attr> {\n+    fn from_src(ast: ast::Attr, hygiene: &Hygiene, index: u32) -> Option<Attr> {\n         let path = ModPath::from_src(ast.path()?, hygiene)?;\n         let input = if let Some(lit) = ast.literal() {\n             let value = match lit.kind() {\n@@ -420,7 +427,7 @@ impl Attr {\n         } else {\n             None\n         };\n-        Some(Attr { index: 0, path, input })\n+        Some(Attr { index, path, input })\n     }\n \n     /// Maps this lowered `Attr` back to its original syntax node.\n@@ -508,7 +515,7 @@ impl<'a> AttrQuery<'a> {\n         self.attrs().next().is_some()\n     }\n \n-    pub fn attrs(self) -> impl Iterator<Item = &'a Attr> {\n+    pub fn attrs(self) -> impl Iterator<Item = &'a Attr> + Clone {\n         let key = self.key;\n         self.attrs\n             .iter()"}, {"sha": "5072ecea025d76790894bc08e78389850f67a16c", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=ec824a92d05caa1908cb25cbd5b969c8e995aaa7", "patch": "@@ -95,12 +95,10 @@ fn extract_positioned_link_from_comment(\n     let comment_range = comment.syntax().text_range();\n     let doc_comment = comment.doc_comment()?;\n     let def_links = extract_definitions_from_markdown(doc_comment);\n+    let start = comment_range.start() + TextSize::from(comment.prefix().len() as u32);\n     let (def_link, ns, _) = def_links.iter().min_by_key(|(_, _, def_link_range)| {\n-        let matched_position = comment_range.start() + TextSize::from(def_link_range.start as u32);\n-        match position.offset.checked_sub(matched_position) {\n-            Some(distance) => distance,\n-            None => comment_range.end(),\n-        }\n+        let matched_position = start + TextSize::from(def_link_range.start as u32);\n+        position.offset.checked_sub(matched_position).unwrap_or_else(|| comment_range.end())\n     })?;\n     Some((def_link.to_string(), *ns))\n }"}, {"sha": "cc2b791244a8cb7ac7960f5ae3d2cd44f5eef3a4", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=ec824a92d05caa1908cb25cbd5b969c8e995aaa7", "patch": "@@ -3423,6 +3423,40 @@ mod Foo$0 {\n         );\n     }\n \n+    #[test]\n+    fn hover_doc_block_style_indentend() {\n+        check(\n+            r#\"\n+/**\n+    foo\n+    ```rust\n+    let x = 3;\n+    ```\n+*/\n+fn foo$0() {}\n+\"#,\n+            expect![[r#\"\n+                *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                fn foo()\n+                ```\n+\n+                ---\n+\n+                foo\n+\n+                ```rust\n+                let x = 3;\n+                ```\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn hover_comments_dont_highlight_parent() {\n         check_hover_no_result("}, {"sha": "bea020b06128f2c4c4944e652faec99b93f6d2ff", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=ec824a92d05caa1908cb25cbd5b969c8e995aaa7", "patch": "@@ -576,6 +576,20 @@ fn should_have_runnable_1() {}\n /// ```\n fn should_have_runnable_2() {}\n \n+/**\n+```rust\n+let z = 55;\n+```\n+*/\n+fn should_have_no_runnable_3() {}\n+\n+/**\n+    ```rust\n+    let z = 55;\n+    ```\n+*/\n+fn should_have_no_runnable_4() {}\n+\n /// ```no_run\n /// let z = 55;\n /// ```\n@@ -616,7 +630,7 @@ fn should_have_no_runnable_6() {}\n struct StructWithRunnable(String);\n \n \"#,\n-            &[&BIN, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST],\n+            &[&BIN, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST],\n             expect![[r#\"\n                 [\n                     Runnable {\n@@ -682,7 +696,37 @@ struct StructWithRunnable(String);\n                             file_id: FileId(\n                                 0,\n                             ),\n-                            full_range: 756..821,\n+                            full_range: 256..320,\n+                            name: \"should_have_no_runnable_3\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"should_have_no_runnable_3\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 322..398,\n+                            name: \"should_have_no_runnable_4\",\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"should_have_no_runnable_4\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 900..965,\n                             name: \"StructWithRunnable\",\n                         },\n                         kind: DocTest {"}, {"sha": "d9ea7b7ea10985e99d5b5d55cb0acf196d457e61", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=ec824a92d05caa1908cb25cbd5b969c8e995aaa7", "patch": "@@ -255,7 +255,7 @@ fn foo() {\n     bar.fo$0;\n }\n \"#,\n-            DetailAndDocumentation { detail: \"fn(&self)\", documentation: \" Do the foo\" },\n+            DetailAndDocumentation { detail: \"fn(&self)\", documentation: \"Do the foo\" },\n         );\n     }\n "}, {"sha": "38e0b04efbef90bc8d9afd456b415d5ba2e3ce60", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=ec824a92d05caa1908cb25cbd5b969c8e995aaa7", "patch": "@@ -118,7 +118,7 @@ fn test_doc_comment_none() {\n     .ok()\n     .unwrap();\n     let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n-    assert!(module.doc_comment_text().is_none());\n+    assert!(module.doc_comments().doc_comment_text().is_none());\n }\n \n #[test]\n@@ -133,7 +133,7 @@ fn test_outer_doc_comment_of_items() {\n     .ok()\n     .unwrap();\n     let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n-    assert_eq!(\"doc\", module.doc_comment_text().unwrap());\n+    assert_eq!(\" doc\", module.doc_comments().doc_comment_text().unwrap());\n }\n \n #[test]\n@@ -148,7 +148,7 @@ fn test_inner_doc_comment_of_items() {\n     .ok()\n     .unwrap();\n     let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n-    assert!(module.doc_comment_text().is_none());\n+    assert!(module.doc_comments().doc_comment_text().is_none());\n }\n \n #[test]\n@@ -162,7 +162,7 @@ fn test_doc_comment_of_statics() {\n     .ok()\n     .unwrap();\n     let st = file.syntax().descendants().find_map(Static::cast).unwrap();\n-    assert_eq!(\"Number of levels\", st.doc_comment_text().unwrap());\n+    assert_eq!(\" Number of levels\", st.doc_comments().doc_comment_text().unwrap());\n }\n \n #[test]\n@@ -181,7 +181,10 @@ fn test_doc_comment_preserves_indents() {\n     .ok()\n     .unwrap();\n     let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n-    assert_eq!(\"doc1\\n```\\nfn foo() {\\n    // ...\\n}\\n```\", module.doc_comment_text().unwrap());\n+    assert_eq!(\n+        \" doc1\\n ```\\n fn foo() {\\n     // ...\\n }\\n ```\",\n+        module.doc_comments().doc_comment_text().unwrap()\n+    );\n }\n \n #[test]\n@@ -198,7 +201,7 @@ fn test_doc_comment_preserves_newlines() {\n     .ok()\n     .unwrap();\n     let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n-    assert_eq!(\"this\\nis\\nmod\\nfoo\", module.doc_comment_text().unwrap());\n+    assert_eq!(\" this\\n is\\n mod\\n foo\", module.doc_comments().doc_comment_text().unwrap());\n }\n \n #[test]\n@@ -212,7 +215,7 @@ fn test_doc_comment_single_line_block_strips_suffix() {\n     .ok()\n     .unwrap();\n     let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n-    assert_eq!(\"this is mod foo\", module.doc_comment_text().unwrap());\n+    assert_eq!(\" this is mod foo\", module.doc_comments().doc_comment_text().unwrap());\n }\n \n #[test]\n@@ -226,7 +229,7 @@ fn test_doc_comment_single_line_block_strips_suffix_whitespace() {\n     .ok()\n     .unwrap();\n     let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n-    assert_eq!(\"this is mod foo \", module.doc_comment_text().unwrap());\n+    assert_eq!(\" this is mod foo \", module.doc_comments().doc_comment_text().unwrap());\n }\n \n #[test]\n@@ -245,8 +248,8 @@ fn test_doc_comment_multi_line_block_strips_suffix() {\n     .unwrap();\n     let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n     assert_eq!(\n-        \"        this\\n        is\\n        mod foo\\n        \",\n-        module.doc_comment_text().unwrap()\n+        \"\\n        this\\n        is\\n        mod foo\\n        \",\n+        module.doc_comments().doc_comment_text().unwrap()\n     );\n }\n \n@@ -259,8 +262,8 @@ fn test_comments_preserve_trailing_whitespace() {\n     .unwrap();\n     let def = file.syntax().descendants().find_map(Struct::cast).unwrap();\n     assert_eq!(\n-        \"Representation of a Realm.   \\nIn the specification these are called Realm Records.\",\n-        def.doc_comment_text().unwrap()\n+        \" Representation of a Realm.   \\n In the specification these are called Realm Records.\",\n+        def.doc_comments().doc_comment_text().unwrap()\n     );\n }\n \n@@ -276,7 +279,7 @@ fn test_four_slash_line_comment() {\n     .ok()\n     .unwrap();\n     let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n-    assert_eq!(\"doc comment\", module.doc_comment_text().unwrap());\n+    assert_eq!(\" doc comment\", module.doc_comments().doc_comment_text().unwrap());\n }\n \n #[test]"}, {"sha": "6c242d1265825b22859f62ce753a38afdd9030f0", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=ec824a92d05caa1908cb25cbd5b969c8e995aaa7", "patch": "@@ -33,23 +33,20 @@ impl ast::Comment {\n         prefix\n     }\n \n-    /// Returns the textual content of a doc comment block as a single string.\n-    /// That is, strips leading `///` (+ optional 1 character of whitespace),\n-    /// trailing `*/`, trailing whitespace and then joins the lines.\n+    /// Returns the textual content of a doc comment node as a single string with prefix and suffix\n+    /// removed.\n     pub fn doc_comment(&self) -> Option<&str> {\n         let kind = self.kind();\n         match kind {\n             CommentKind { shape, doc: Some(_) } => {\n                 let prefix = kind.prefix();\n                 let text = &self.text()[prefix.len()..];\n-                let ws = text.chars().next().filter(|c| c.is_whitespace());\n-                let text = ws.map_or(text, |ws| &text[ws.len_utf8()..]);\n-                match shape {\n-                    CommentShape::Block if text.ends_with(\"*/\") => {\n-                        Some(&text[..text.len() - \"*/\".len()])\n-                    }\n-                    _ => Some(text),\n-                }\n+                let text = if shape == CommentShape::Block {\n+                    text.strip_suffix(\"*/\").unwrap_or(text)\n+                } else {\n+                    text\n+                };\n+                Some(text)\n             }\n             _ => None,\n         }"}, {"sha": "ddd2136370bd1c9a132f51767a15eb090d72b476", "filename": "crates/syntax/src/ast/traits.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec824a92d05caa1908cb25cbd5b969c8e995aaa7/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs?ref=ec824a92d05caa1908cb25cbd5b969c8e995aaa7", "patch": "@@ -1,8 +1,6 @@\n //! Various traits that are implemented by ast nodes.\n //!\n //! The implementations are usually trivial, and live in generated.rs\n-use itertools::Itertools;\n-\n use crate::{\n     ast::{self, support, AstChildren, AstNode, AstToken},\n     syntax_node::SyntaxElementChildren,\n@@ -76,23 +74,19 @@ pub trait DocCommentsOwner: AttrsOwner {\n     fn doc_comments(&self) -> CommentIter {\n         CommentIter { iter: self.syntax().children_with_tokens() }\n     }\n-\n-    fn doc_comment_text(&self) -> Option<String> {\n-        self.doc_comments().doc_comment_text()\n-    }\n }\n \n impl CommentIter {\n     pub fn from_syntax_node(syntax_node: &ast::SyntaxNode) -> CommentIter {\n         CommentIter { iter: syntax_node.children_with_tokens() }\n     }\n \n-    /// Returns the textual content of a doc comment block as a single string.\n-    /// That is, strips leading `///` (+ optional 1 character of whitespace),\n-    /// trailing `*/`, trailing whitespace and then joins the lines.\n+    #[cfg(test)]\n     pub fn doc_comment_text(self) -> Option<String> {\n-        let docs =\n-            self.filter_map(|comment| comment.doc_comment().map(ToOwned::to_owned)).join(\"\\n\");\n+        let docs = itertools::Itertools::join(\n+            &mut self.filter_map(|comment| comment.doc_comment().map(ToOwned::to_owned)),\n+            \"\\n\",\n+        );\n         if docs.is_empty() {\n             None\n         } else {"}]}