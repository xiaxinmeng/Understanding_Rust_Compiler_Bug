{"sha": "c7a57d285517f1e22d34ace98fbb0c64e40b12bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YTU3ZDI4NTUxN2YxZTIyZDM0YWNlOThmYmIwYzY0ZTQwYjEyYmM=", "commit": {"author": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-22T00:11:57Z"}, "committer": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-26T11:26:39Z"}, "message": "Adds termination_trait feature gate", "tree": {"sha": "10d2643b4e5e8db44f46d77916dd899710b744f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10d2643b4e5e8db44f46d77916dd899710b744f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7a57d285517f1e22d34ace98fbb0c64e40b12bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a57d285517f1e22d34ace98fbb0c64e40b12bc", "html_url": "https://github.com/rust-lang/rust/commit/c7a57d285517f1e22d34ace98fbb0c64e40b12bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/comments", "author": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f539b09df7f47c3b962c28179803ae0289bfe5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f539b09df7f47c3b962c28179803ae0289bfe5e", "html_url": "https://github.com/rust-lang/rust/commit/8f539b09df7f47c3b962c28179803ae0289bfe5e"}], "stats": {"total": 75, "additions": 47, "deletions": 28}, "files": [{"sha": "7a49c3549abdfa8e10c3de97258930acf72228ca", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c7a57d285517f1e22d34ace98fbb0c64e40b12bc", "patch": "@@ -93,7 +93,6 @@ use rustc::infer::{self, InferCtxt, InferOk, RegionVariableOrigin};\n use rustc::infer::anon_types::AnonTypeDecl;\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region;\n-use rustc::middle::lang_items::TerminationTraitLangItem;\n use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits::{self, FulfillmentContext, ObligationCause, ObligationCauseCode};\n use rustc::ty::{ParamTy, LvaluePreference, NoPreference, PreferMutLvalue};\n@@ -1066,24 +1065,25 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     }\n     fcx.demand_suptype(span, ret_ty, actual_return_ty);\n \n-    // If the termination trait language item is activated, check that the main return type\n-    // implements the termination trait.\n-    if fcx.tcx.lang_items().termination().is_some() {\n-        if let Some((id, _)) = *fcx.tcx.sess.entry_fn.borrow() {\n-            if id == fn_id {\n-                match fcx.sess().entry_type.get() {\n-                    Some(config::EntryMain) => {\n-                        let term_id = fcx.tcx.require_lang_item(TerminationTraitLangItem);\n-\n-                        let substs = fcx.tcx.mk_substs(iter::once(Kind::from(ret_ty)));\n-                        let trait_ref = ty::TraitRef::new(term_id, substs);\n-                        let cause = traits::ObligationCause::new(\n-                            span, fn_id, ObligationCauseCode::MainFunctionType);\n-\n-                        inherited.register_predicate(\n-                            traits::Obligation::new(cause, param_env, trait_ref.to_predicate()));\n-                    },\n-                    _ => {},\n+    if fcx.tcx.sess.features.borrow().termination_trait {\n+        // If the termination trait language item is activated, check that the main return type\n+        // implements the termination trait.\n+        if let Some(term_id) = fcx.tcx.lang_items().termination() {\n+            if let Some((id, _)) = *fcx.tcx.sess.entry_fn.borrow() {\n+                if id == fn_id {\n+                    match fcx.sess().entry_type.get() {\n+                        Some(config::EntryMain) => {\n+                            let substs = fcx.tcx.mk_substs(iter::once(Kind::from(ret_ty)));\n+                            let trait_ref = ty::TraitRef::new(term_id, substs);\n+                            let cause = traits::ObligationCause::new(\n+                                span, fn_id, ObligationCauseCode::MainFunctionType);\n+\n+                            inherited.register_predicate(\n+                                traits::Obligation::new(\n+                                    cause, param_env, trait_ref.to_predicate()));\n+                        },\n+                        _ => {},\n+                    }\n                 }\n             }\n         }"}, {"sha": "0b2f59abf4f78a900147de85db016ad29871f8fe", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=c7a57d285517f1e22d34ace98fbb0c64e40b12bc", "patch": "@@ -203,7 +203,8 @@ fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n \n             let actual = tcx.fn_sig(main_def_id);\n-            let expected_return_type = if tcx.lang_items().termination().is_some() {\n+            let expected_return_type = if tcx.lang_items().termination().is_some()\n+                && tcx.sess.features.borrow().termination_trait {\n                 // we take the return type of the given main function, the real check is done\n                 // in `check_fn`\n                 actual.output().skip_binder()"}, {"sha": "171c108e3aa55cb15cf4cbcf88b13f1e45565363", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c7a57d285517f1e22d34ace98fbb0c64e40b12bc", "patch": "@@ -503,7 +503,7 @@ pub mod rt;\n // The trait to support returning arbitrary types in the main function\n mod termination;\n \n-#[unstable(feature = \"termination_trait\", issue = \"0\")]\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n pub use self::termination::Termination;\n \n // Include a number of private modules that exist solely to provide"}, {"sha": "ee1dc5470a84931f51a19cd9bf099b90eb8cfdae", "filename": "src/libstd/termination.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/src%2Flibstd%2Ftermination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/src%2Flibstd%2Ftermination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftermination.rs?ref=c7a57d285517f1e22d34ace98fbb0c64e40b12bc", "patch": "@@ -20,7 +20,7 @@ use libc;\n /// The default implementations are returning `libc::EXIT_SUCCESS` to indicate\n /// a successful execution. In case of a failure, `libc::EXIT_FAILURE` is returned.\n #[cfg_attr(not(stage0), lang = \"termination\")]\n-#[unstable(feature = \"termination_trait\", issue = \"0\")]\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n #[rustc_on_unimplemented =\n   \"`main` can only return types that implement {Termination}, not `{Self}`\"]\n pub trait Termination {\n@@ -29,12 +29,12 @@ pub trait Termination {\n     fn report(self) -> i32;\n }\n \n-#[unstable(feature = \"termination_trait\", issue = \"0\")]\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n impl Termination for () {\n     fn report(self) -> i32 { libc::EXIT_SUCCESS }\n }\n \n-#[unstable(feature = \"termination_trait\", issue = \"0\")]\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n impl<T: Termination, E: Error> Termination for Result<T, E> {\n     fn report(self) -> i32 {\n         match self {\n@@ -47,7 +47,7 @@ impl<T: Termination, E: Error> Termination for Result<T, E> {\n     }\n }\n \n-#[unstable(feature = \"termination_trait\", issue = \"0\")]\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n fn print_error<E: Error>(err: E) {\n     eprintln!(\"Error: {}\", err.description());\n \n@@ -56,19 +56,19 @@ fn print_error<E: Error>(err: E) {\n     }\n }\n \n-#[unstable(feature = \"termination_trait\", issue = \"0\")]\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n impl Termination for ! {\n     fn report(self) -> i32 { unreachable!(); }\n }\n \n-#[unstable(feature = \"termination_trait\", issue = \"0\")]\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n impl Termination for bool {\n     fn report(self) -> i32 {\n         if self { libc::EXIT_SUCCESS } else { libc::EXIT_FAILURE }\n     }\n }\n \n-#[unstable(feature = \"termination_trait\", issue = \"0\")]\n+#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n impl Termination for i32 {\n     fn report(self) -> i32 {\n         self"}, {"sha": "dde917b4d9591e6c750a15a3cc2ab75052d3575c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c7a57d285517f1e22d34ace98fbb0c64e40b12bc", "patch": "@@ -444,6 +444,9 @@ declare_features! (\n \n     // Nested `impl Trait`\n     (active, nested_impl_trait, \"1.24.0\", Some(34511)),\n+\n+    // Termination trait in main (RFC 1937)\n+    (active, termination_trait, \"1.24.0\", Some(43301)),\n );\n \n declare_features! ("}, {"sha": "5a56445b64e5717dbf280c2f7b72f275c0456188", "filename": "src/test/compile-fail/feature-gate-termination_trait.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/src%2Ftest%2Fcompile-fail%2Ffeature-gate-termination_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/src%2Ftest%2Fcompile-fail%2Ffeature-gate-termination_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-termination_trait.rs?ref=c7a57d285517f1e22d34ace98fbb0c64e40b12bc", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() -> i32 { //~ ERROR main function has wrong type [E0580]\n+    0\n+}"}, {"sha": "788c38c55be0a65bd167226d9a7342e84f4fddcd", "filename": "src/test/compile-fail/termination-trait-not-satisfied.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/src%2Ftest%2Fcompile-fail%2Ftermination-trait-not-satisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7a57d285517f1e22d34ace98fbb0c64e40b12bc/src%2Ftest%2Fcompile-fail%2Ftermination-trait-not-satisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftermination-trait-not-satisfied.rs?ref=c7a57d285517f1e22d34ace98fbb0c64e40b12bc", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(termination_trait)]\n+\n struct ReturnType {}\n \n fn main() -> ReturnType { //~ ERROR `ReturnType: std::Termination` is not satisfied"}]}