{"sha": "5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlODcwN2YzOWQ3ODFkZjljYzQwZTgxY2QxY2NkZmZjZmJlNWFmMWY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-18T07:59:21Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-28T19:37:58Z"}, "message": "Reduce vebosity of E0599", "tree": {"sha": "f1a828f7fc2f1f24f21347bc6f611d10e2a33418", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1a828f7fc2f1f24f21347bc6f611d10e2a33418"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "html_url": "https://github.com/rust-lang/rust/commit/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "url": "https://api.github.com/repos/rust-lang/rust/commits/f037d5ca1bf42108520a1fd3b07c5cec46bc94da", "html_url": "https://github.com/rust-lang/rust/commit/f037d5ca1bf42108520a1fd3b07c5cec46bc94da"}], "stats": {"total": 82, "additions": 20, "deletions": 62}, "files": [{"sha": "1bf173e3b13101add6de60d9c69a0a8eb0fb508d", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "patch": "@@ -1426,17 +1426,18 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                                             }\n                                         }\n                                     }\n-                                    _ => {}\n+                                    _ => {\n+                                        // Some nested subobligation of this predicate\n+                                        // failed.\n+                                        //\n+                                        // FIXME: try to find the exact nested subobligation\n+                                        // and point at it rather than reporting the entire\n+                                        // trait-ref?\n+                                        result = ProbeResult::NoMatch;\n+                                        let trait_ref = self.resolve_vars_if_possible(&trait_ref);\n+                                        possibly_unsatisfied_predicates.push(trait_ref);\n+                                    }\n                                 }\n-                                // Some nested subobligation of this predicate\n-                                // failed.\n-                                //\n-                                // FIXME: try to find the exact nested subobligation\n-                                // and point at it rather than reporting the entire\n-                                // trait-ref?\n-                                result = ProbeResult::NoMatch;\n-                                let trait_ref = self.resolve_vars_if_possible(&trait_ref);\n-                                possibly_unsatisfied_predicates.push(trait_ref);\n                             });\n                         }\n                     }"}, {"sha": "c6c404c5c7820551a1f0705512101c46bc907912", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "patch": "@@ -394,7 +394,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     tcx.sess.diagnostic().struct_dummy()\n                 };\n \n-                // FIXME: Unify with unmet bound label.\n                 if let Some(def) = actual.ty_adt_def() {\n                     if let Some(full_sp) = tcx.hir().span_if_local(def.did) {\n                         let def_sp = tcx.sess.source_map().def_span(full_sp);\n@@ -576,7 +575,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     bound_list.sort();\n                     bound_list.dedup(); // #35677\n                     bound_spans.sort();\n-                    bound_spans.dedup(); // #35677\n+                    bound_spans.dedup();\n                     for (span, msg) in bound_spans.into_iter() {\n                         err.span_label(span, &msg);\n                     }"}, {"sha": "0b55b3f2ec9c1cc8dcf49f5e76377046fd8d90ce", "filename": "src/test/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "patch": "@@ -2,10 +2,7 @@ error[E0599]: no method named `clone` found for struct `Bar<NotClone>` in the cu\n   --> $DIR/derive-assoc-type-not-impl.rs:18:30\n    |\n LL | struct Bar<T: Foo> {\n-   | ------------------\n-   | |\n-   | method `clone` not found for this\n-   | this type doesn't satisfy the bound `std::clone::Clone`\n+   | ------------------ method `clone` not found for this\n ...\n LL | struct NotClone;\n    | ---------------- this type doesn't satisfy the bound `std::clone::Clone`\n@@ -14,7 +11,6 @@ LL |     Bar::<NotClone> { x: 1 }.clone();\n    |                              ^^^^^ method not found in `Bar<NotClone>`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n-           `Bar<NotClone>: std::clone::Clone`\n            `NotClone: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:"}, {"sha": "10b634b46030909c3c7063be14a6396f5d57c96d", "filename": "src/test/ui/issues/issue-21596.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21596.stderr?ref=5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "patch": "@@ -8,7 +8,6 @@ LL |     println!(\"{}\", z.to_string());\n    = note: using `<*const T>::as_ref()` on a pointer which is unaligned or points to invalid or uninitialized memory is undefined behavior\n    = note: the method `to_string` exists but the following trait bounds were not satisfied:\n            `*const u8: std::fmt::Display`\n-           `*const u8: std::string::ToString`\n \n error: aborting due to previous error\n "}, {"sha": "28b3b872220b7348dadfb40955b4ef9fe9202847", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "patch": "@@ -19,7 +19,6 @@ LL | pub struct Cloned<I> {\n    | -------------------- this type doesn't satisfy the bound `std::iter::Iterator`\n    |\n    = note: the method `collect` exists but the following trait bounds were not satisfied:\n-           `&mut std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n            `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n \n error: aborting due to 2 previous errors"}, {"sha": "2b683f8aa2a58b6aaf95913b9612eab812427670", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "patch": "@@ -44,7 +44,6 @@ LL |      .take()\n    |       ^^^^ method not found in `Foo`\n    |\n    = note: the method `take` exists but the following trait bounds were not satisfied:\n-           `&mut Foo: std::iter::Iterator`\n            `Foo: std::iter::Iterator`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following traits define an item `take`, perhaps you need to implement one of them:"}, {"sha": "98d71b460db5dd7d324a762e15a3517a66437b57", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "patch": "@@ -10,7 +10,6 @@ LL | pub struct Filter<I, P> {\n    | ----------------------- this type doesn't satisfy the bound `std::iter::Iterator`\n    |\n    = note: the method `count` exists but the following trait bounds were not satisfied:\n-           `&mut std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n            `[closure@$DIR/issue-36053-2.rs:11:39: 11:53]: std::ops::FnMut<(&_,)>`\n            `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n "}, {"sha": "f8b86377187c589077d3ac33468f0cdae6ce5ce8", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.rs?ref=5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n use std::env::args;\n use std::fs::File;\n use std::io::{stdout, Write, BufWriter};"}, {"sha": "3a9fddc474a9fc837eae68ce3852fa54720acb30", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:21:29\n+  --> $DIR/mut-borrow-needed-by-trait.rs:17:29\n    |\n LL |     let fp = BufWriter::new(fp);\n    |                             ^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n@@ -8,7 +8,7 @@ LL |     let fp = BufWriter::new(fp);\n    = note: required by `std::io::BufWriter::<W>::new`\n \n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:21:14\n+  --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n    |\n LL |     let fp = BufWriter::new(fp);\n    |              ^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n@@ -17,7 +17,7 @@ LL |     let fp = BufWriter::new(fp);\n    = note: required by `std::io::BufWriter`\n \n error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satisfied\n-  --> $DIR/mut-borrow-needed-by-trait.rs:21:14\n+  --> $DIR/mut-borrow-needed-by-trait.rs:17:14\n    |\n LL |     let fp = BufWriter::new(fp);\n    |              ^^^^^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n@@ -26,19 +26,13 @@ LL |     let fp = BufWriter::new(fp);\n    = note: required by `std::io::BufWriter`\n \n error[E0599]: no method named `write_fmt` found for struct `std::io::BufWriter<&dyn std::io::Write>` in the current scope\n-  --> $DIR/mut-borrow-needed-by-trait.rs:26:5\n+  --> $DIR/mut-borrow-needed-by-trait.rs:22:5\n    |\n LL |     writeln!(fp, \"hello world\").unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `std::io::BufWriter<&dyn std::io::Write>`\n-   | \n-  ::: $SRC_DIR/libstd/io/buffered.rs:LL:COL\n-   |\n-LL | pub struct BufWriter<W: Write> {\n-   | ------------------------------ this type doesn't satisfy the bound `std::io::Write`\n    |\n    = note: the method `write_fmt` exists but the following trait bounds were not satisfied:\n            `&dyn std::io::Write: std::io::Write`\n-           `std::io::BufWriter<&dyn std::io::Write>: std::io::Write`\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors"}, {"sha": "c8537afd3bdead32a365c7608dd740d3cb346d49", "filename": "src/test/ui/union/union-derive-clone.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr?ref=5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "patch": "@@ -11,10 +11,7 @@ error[E0599]: no method named `clone` found for union `U5<CloneNoCopy>` in the c\n   --> $DIR/union-derive-clone.rs:37:15\n    |\n LL | union U5<T> {\n-   | -----------\n-   | |\n-   | method `clone` not found for this\n-   | this type doesn't satisfy the bound `std::clone::Clone`\n+   | ----------- method `clone` not found for this\n ...\n LL | struct CloneNoCopy;\n    | ------------------- this type doesn't satisfy the bound `std::marker::Copy`\n@@ -24,7 +21,6 @@ LL |     let w = u.clone();\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n            `CloneNoCopy: std::marker::Copy`\n-           `U5<CloneNoCopy>: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}, {"sha": "dd38a7190aa0e9d83b71c686a619097e7ff68404", "filename": "src/test/ui/unique-object-noncopyable.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Funique-object-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Funique-object-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.rs?ref=5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n #![feature(box_syntax)]\n \n trait Foo {"}, {"sha": "1ada663129fa00546e8d98af79897ee6356ae7bc", "filename": "src/test/ui/unique-object-noncopyable.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-object-noncopyable.stderr?ref=5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `clone` found for struct `std::boxed::Box<dyn Foo>` in the current scope\n-  --> $DIR/unique-object-noncopyable.rs:28:16\n+  --> $DIR/unique-object-noncopyable.rs:24:16\n    |\n LL | trait Foo {\n    | ---------\n@@ -9,16 +9,10 @@ LL | trait Foo {\n ...\n LL |     let _z = y.clone();\n    |                ^^^^^ method not found in `std::boxed::Box<dyn Foo>`\n-   | \n-  ::: $SRC_DIR/liballoc/boxed.rs:LL:COL\n-   |\n-LL | pub struct Box<T: ?Sized>(Unique<T>);\n-   | ------------------------------------- this type doesn't satisfy the bound `std::clone::Clone`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n            `dyn Foo: std::clone::Clone`\n            `dyn Foo: std::marker::Sized`\n-           `std::boxed::Box<dyn Foo>: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}, {"sha": "4c30450c70455fc45b1c87be9ca072d73c19b538", "filename": "src/test/ui/unique-pinned-nocopy.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.rs?ref=5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "patch": "@@ -1,7 +1,3 @@\n-// FIXME: missing sysroot spans (#53081)\n-// ignore-i586-unknown-linux-gnu\n-// ignore-i586-unknown-linux-musl\n-// ignore-i686-unknown-linux-musl\n #[derive(Debug)]\n struct R {\n   b: bool,"}, {"sha": "2557ea8acb8ef9d788e6f604f43406a7f9926fe7", "filename": "src/test/ui/unique-pinned-nocopy.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique-pinned-nocopy.stderr?ref=5e8707f39d781df9cc40e81cd1ccdffcfbe5af1f", "patch": "@@ -1,20 +1,14 @@\n error[E0599]: no method named `clone` found for struct `std::boxed::Box<R>` in the current scope\n-  --> $DIR/unique-pinned-nocopy.rs:16:16\n+  --> $DIR/unique-pinned-nocopy.rs:12:16\n    |\n LL | struct R {\n    | -------- this type doesn't satisfy the bound `std::clone::Clone`\n ...\n LL |     let _j = i.clone();\n    |                ^^^^^ method not found in `std::boxed::Box<R>`\n-   | \n-  ::: $SRC_DIR/liballoc/boxed.rs:LL:COL\n-   |\n-LL | pub struct Box<T: ?Sized>(Unique<T>);\n-   | ------------------------------------- this type doesn't satisfy the bound `std::clone::Clone`\n    |\n    = note: the method `clone` exists but the following trait bounds were not satisfied:\n            `R: std::clone::Clone`\n-           `std::boxed::Box<R>: std::clone::Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `std::clone::Clone`"}]}