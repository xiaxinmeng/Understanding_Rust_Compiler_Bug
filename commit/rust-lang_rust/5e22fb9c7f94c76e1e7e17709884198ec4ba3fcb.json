{"sha": "5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMjJmYjljN2Y5NGM3NmUxZTdlMTc3MDk4ODQxOThlYzRiYTNmY2I=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-25T04:03:51Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-25T05:28:12Z"}, "message": "Remove match check", "tree": {"sha": "3f8504b434daa0eea689faf3c09177ccd551d545", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f8504b434daa0eea689faf3c09177ccd551d545"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "html_url": "https://github.com/rust-lang/rust/commit/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7a3d0eb5820e63225b45a2e2c8c4e9b8f658601", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a3d0eb5820e63225b45a2e2c8c4e9b8f658601", "html_url": "https://github.com/rust-lang/rust/commit/c7a3d0eb5820e63225b45a2e2c8c4e9b8f658601"}], "stats": {"total": 62, "additions": 23, "deletions": 39}, "files": [{"sha": "2bd08d2b28241a27cd7157d8d1b9ee2970572beb", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "patch": "@@ -348,7 +348,7 @@ enum expr_ {\n        Same semantics as while(true) { body }, but typestate knows that the\n        (implicit) condition is always true. */\n     expr_loop(blk, option<ident>),\n-    expr_match(@expr, ~[arm], alt_mode),\n+    expr_match(@expr, ~[arm]),\n     expr_fn(proto, fn_decl, blk, capture_clause),\n     expr_fn_block(fn_decl, blk, capture_clause),\n     // Inner expr is always an expr_fn_block. We need the wrapping node to"}, {"sha": "f95a689f9c200d6fc50bdfffa75584236acd4100", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "patch": "@@ -250,7 +250,7 @@ impl ext_ctxt: ext_ctxt_helpers {\n         self.stmt(\n             self.expr(\n                 span,\n-                ast::expr_match(v, arms, ast::alt_exhaustive)))\n+                ast::expr_match(v, arms)))\n     }\n \n     fn lit_str(span: span, s: @~str) -> @ast::expr {\n@@ -944,7 +944,7 @@ fn deser_enum(cx: ext_ctxt, tps: deser_tps_map, e_name: ast::ident,\n     // Generate code like:\n     let e_name = cx.lit_str(e_span, @cx.str_of(e_name));\n     let alt_expr = cx.expr(e_span,\n-                   ast::expr_match(#ast{__i}, arms, ast::alt_exhaustive));\n+                           ast::expr_match(#ast{__i}, arms));\n     let var_lambda = #ast{ |__i| $(alt_expr) };\n     let read_var = #ast{ $(cx.clone(d)).read_enum_variant($(var_lambda)) };\n     let read_lambda = cx.lambda(cx.expr_blk(read_var));"}, {"sha": "ed41d6da694aaced96283904edf1e62f2fa73f45", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "patch": "@@ -456,9 +456,9 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n               expr_loop(fld.fold_block(body),\n                         option::map(opt_ident, |x| fld.fold_ident(x)))\n           }\n-          expr_match(expr, arms, mode) => {\n+          expr_match(expr, arms) => {\n             expr_match(fld.fold_expr(expr),\n-                     vec::map(arms, |x| fld.fold_arm(x)), mode)\n+                     vec::map(arms, |x| fld.fold_arm(x)))\n           }\n           expr_fn(proto, decl, body, captures) => {\n             expr_fn(proto, fold_fn_decl(decl, fld),"}, {"sha": "4656fc6b6fa7ae2f56970422295f10cfdbd0553b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "patch": "@@ -1668,8 +1668,6 @@ struct parser {\n \n     fn parse_alt_expr() -> @expr {\n         let lo = self.last_span.lo;\n-        let mode = if self.eat_keyword(~\"check\") { alt_check }\n-        else { alt_exhaustive };\n         let discriminant = self.parse_expr();\n         self.expect(token::LBRACE);\n         let mut arms: ~[arm] = ~[];\n@@ -1701,7 +1699,7 @@ struct parser {\n         }\n         let mut hi = self.span.hi;\n         self.bump();\n-        return self.mk_expr(lo, hi, expr_match(discriminant, arms, mode));\n+        return self.mk_expr(lo, hi, expr_match(discriminant, arms));\n     }\n \n     fn parse_expr() -> @expr {"}, {"sha": "835d71135d5f7182aef6d4ae39a61831bb9ba63c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "patch": "@@ -1128,11 +1128,10 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         option::iter(opt_ident, |ident| {print_ident(s, ident); space(s.s)});\n         print_block(s, blk);\n       }\n-      ast::expr_match(expr, arms, mode) => {\n+      ast::expr_match(expr, arms) => {\n         cbox(s, alt_indent_unit);\n         ibox(s, 4u);\n         word_nbsp(s, ~\"match\");\n-        if mode == ast::alt_check { word_nbsp(s, ~\"check\"); }\n         print_maybe_parens_discrim(s, expr);\n         space(s.s);\n         bopen(s);"}, {"sha": "bc98e40594ad3602bb7be617f0123928444328bd", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "patch": "@@ -430,7 +430,7 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n       }\n       expr_while(x, b) => { v.visit_expr(x, e, v); v.visit_block(b, e, v); }\n       expr_loop(b, _) => v.visit_block(b, e, v),\n-      expr_match(x, arms, _) => {\n+      expr_match(x, arms) => {\n         v.visit_expr(x, e, v);\n         for arms.each |a| { v.visit_arm(a, e, v); }\n       }"}, {"sha": "f289caafbc6b906adeff586eac7ef86763730cc6", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "patch": "@@ -171,7 +171,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n         visit::visit_expr(ex, self, vt);\n       }\n \n-      ast::expr_match(ex_v, arms, _) => {\n+      ast::expr_match(ex_v, arms) => {\n         let cmt = self.bccx.cat_expr(ex_v);\n         for arms.each |arm| {\n             for arm.pats.each |pat| {"}, {"sha": "c78b2c8419d2a5efd26440bcdec47ad0f9582441", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "patch": "@@ -24,7 +24,7 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n fn check_expr(tcx: ty::ctxt, ex: @expr, &&s: (), v: visit::vt<()>) {\n     visit::visit_expr(ex, s, v);\n     match ex.node {\n-      expr_match(scrut, arms, mode) => {\n+      expr_match(scrut, arms) => {\n         check_arms(tcx, arms);\n         /* Check for exhaustiveness */\n          // Check for empty enum, because is_useful only works on inhabited\n@@ -48,13 +48,10 @@ fn check_expr(tcx: ty::ctxt, ex: @expr, &&s: (), v: visit::vt<()>) {\n           }\n           _ => { /* We assume only enum types can be uninhabited */ }\n        }\n-\n-        if mode == alt_exhaustive {\n-            let arms = vec::concat(vec::filter_map(arms, unguarded_pat));\n-            check_exhaustive(tcx, ex.span, arms);\n-        }\n-      }\n-      _ => ()\n+       let arms = vec::concat(vec::filter_map(arms, unguarded_pat));\n+       check_exhaustive(tcx, ex.span, arms);\n+     }\n+     _ => ()\n     }\n }\n "}, {"sha": "c49c8f50bcdf141d916cce6784f8be792d0535f0", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "patch": "@@ -1048,7 +1048,7 @@ impl Liveness {\n             self.propagate_through_loop(expr, none, blk, succ)\n           }\n \n-          expr_match(e, arms, _) => {\n+          expr_match(e, arms) => {\n             //\n             //      (e)\n             //       |"}, {"sha": "7d04840593e274fa8b43acd4589eefb62d63719e", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "patch": "@@ -259,7 +259,7 @@ fn resolve_expr(expr: @ast::expr, cx: ctxt, visitor: visit::vt<ctxt>) {\n                                                            cx.sess.intr()));\n         new_cx.parent = some(expr.id);\n       }\n-      ast::expr_match(subexpr, _, _) => {\n+      ast::expr_match(subexpr, _) => {\n         debug!(\"node %d: %s\", expr.id, pprust::expr_to_str(expr,\n                                                            cx.sess.intr()));\n         new_cx.parent = some(expr.id);"}, {"sha": "31a6d5658f0144e315e1b8c203505cde70d70f5c", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "patch": "@@ -822,16 +822,15 @@ fn trans_alt(bcx: block,\n              alt_expr: @ast::expr,\n              expr: @ast::expr,\n              arms: ~[ast::arm],\n-             mode: ast::alt_mode,\n              dest: dest) -> block {\n     let _icx = bcx.insn_ctxt(\"alt::trans_alt\");\n     do with_scope(bcx, alt_expr.info(), ~\"alt\") |bcx| {\n-        trans_alt_inner(bcx, expr, arms, mode, dest)\n+        trans_alt_inner(bcx, expr, arms, dest)\n     }\n }\n \n fn trans_alt_inner(scope_cx: block, expr: @ast::expr, arms: ~[ast::arm],\n-                   mode: ast::alt_mode, dest: dest) -> block {\n+                   dest: dest) -> block {\n     let _icx = scope_cx.insn_ctxt(\"alt::trans_alt_inner\");\n     let bcx = scope_cx, tcx = bcx.tcx();\n     let mut bodies = ~[], matches = ~[];\n@@ -860,15 +859,7 @@ fn trans_alt_inner(scope_cx: block, expr: @ast::expr, arms: ~[ast::arm],\n             return fail_cx.llbb;\n     }\n     let t = node_id_type(bcx, expr.id);\n-    let mk_fail = match mode {\n-      ast::alt_check => {\n-        let fail_cx = @mut none;\n-        // Cached fail-on-fallthrough block\n-        some(|| mk_fail(scope_cx, expr.span, ~\"non-exhaustive match failure\",\n-                        fail_cx))\n-      }\n-      ast::alt_exhaustive => {\n-          let fail_cx = @mut none;\n+    let mk_fail = { let fail_cx = @mut none;\n           // special case for uninhabited type\n           if ty::type_is_empty(tcx, t) {\n                   some(|| mk_fail(scope_cx, expr.span,\n@@ -877,7 +868,6 @@ fn trans_alt_inner(scope_cx: block, expr: @ast::expr, arms: ~[ast::arm],\n           else {\n               none\n           }\n-      }\n     };\n     let mut exit_map = ~[];\n     let spilled = spill_if_immediate(bcx, val, t);"}, {"sha": "ab5c5a468bdfc8e29a9228be020ce163ed0f4b42", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "patch": "@@ -3798,8 +3798,8 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n           ast::expr_if(cond, thn, els) => {\n             return trans_if(bcx, cond, thn, els, dest);\n           }\n-          ast::expr_match(expr, arms, mode) => {\n-            return alt::trans_alt(bcx, e, expr, arms, mode, dest);\n+          ast::expr_match(expr, arms) => {\n+            return alt::trans_alt(bcx, e, expr, arms, dest);\n           }\n           ast::expr_block(blk) => {\n             return do with_scope(bcx, blk.info(), ~\"block-expr body\") |bcx| {\n@@ -4488,7 +4488,7 @@ fn trans_block_cleanups_(bcx: block,\n                 }\n               }\n             }\n-            }\n+        }\n     return bcx;\n }\n "}, {"sha": "5917574936fa474f2d22f08bf8ddedc8f17a2fb6", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=5e22fb9c7f94c76e1e7e17709884198ec4ba3fcb", "patch": "@@ -1599,7 +1599,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         fcx.write_ty(id, ty::mk_nil(tcx));\n         bot = !may_break(body);\n       }\n-      ast::expr_match(discrim, arms, mode) => {\n+      ast::expr_match(discrim, arms) => {\n         bot = alt::check_alt(fcx, expr, discrim, arms);\n       }\n       ast::expr_fn(proto, decl, body, cap_clause) => {"}]}