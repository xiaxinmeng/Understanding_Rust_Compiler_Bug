{"sha": "0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf", "node_id": "C_kwDOAAsO6NoAKDA2MDljMGYxZGExM2M4YjBhZWI5MGI1ZmY2NmY1MjdiYjE2ZDU4YmY", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-09-23T00:23:05Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T19:19:27Z"}, "message": "migrate diagnostic_items.rs to translateable diagnostics", "tree": {"sha": "3c38fa497dea8dc95be07c67c442999e5bdea16e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c38fa497dea8dc95be07c67c442999e5bdea16e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf", "html_url": "https://github.com/rust-lang/rust/commit/0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "3a748330af35ec9da4b07f55b78e8f08f2af0888", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a748330af35ec9da4b07f55b78e8f08f2af0888", "html_url": "https://github.com/rust-lang/rust/commit/3a748330af35ec9da4b07f55b78e8f08f2af0888"}], "stats": {"total": 68, "additions": 49, "deletions": 19}, "files": [{"sha": "04fd0a3a6ac22e1af3069506755a156f6d649666", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf", "patch": "@@ -357,7 +357,7 @@ passes_collapse_debuginfo =\n passes_deprecated_annotation_has_no_effect =\n     this `#[deprecated]` annotation has no effect\n     .suggestion = remove the unnecessary deprecation attribute\n-    \n+\n passes_unknown_external_lang_item =\n     unknown external lang item: `{$lang_item}`\n \n@@ -389,3 +389,13 @@ passes_local_duplicate_lang_item =\n passes_invalid_attr_at_crate_level =\n     `{$name}` attribute cannot be used at crate level\n     .suggestion = perhaps you meant to use an outer attribute\n+\n+passes_duplicate_diagnostic_item =\n+    duplicate diagnostic item found: `{$name}`.\n+\n+passes_duplicate_diagnostic_item_in_crate =\n+    duplicate diagnostic item in crate `{$crate_name}`: `{$name}`.\n+\n+passes_diagnostic_item_first_defined =\n+    the diagnostic item is first defined here\n+    .note = the diagnostic item is first defined in crate `{$orig_crate_name}`."}, {"sha": "c411a247165988bcbbb9b4f18e82724b6e6a3999", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf", "patch": "@@ -16,6 +16,8 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_span::symbol::{sym, Symbol};\n \n+use crate::errors::{DuplicateDiagnosticItem, DuplicateDiagnosticItemInCrate};\n+\n fn observe_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     diagnostic_items: &mut DiagnosticItems,\n@@ -33,25 +35,23 @@ fn collect_item(tcx: TyCtxt<'_>, items: &mut DiagnosticItems, name: Symbol, item\n     items.id_to_name.insert(item_def_id, name);\n     if let Some(original_def_id) = items.name_to_id.insert(name, item_def_id) {\n         if original_def_id != item_def_id {\n-            let mut err = match tcx.hir().span_if_local(item_def_id) {\n-                Some(span) => tcx\n-                    .sess\n-                    .struct_span_err(span, &format!(\"duplicate diagnostic item found: `{name}`.\")),\n-                None => tcx.sess.struct_err(&format!(\n-                    \"duplicate diagnostic item in crate `{}`: `{}`.\",\n-                    tcx.crate_name(item_def_id.krate),\n-                    name\n-                )),\n-            };\n-            if let Some(span) = tcx.hir().span_if_local(original_def_id) {\n-                err.span_note(span, \"the diagnostic item is first defined here\");\n+            let orig_span = tcx.hir().span_if_local(original_def_id);\n+            let orig_crate_name = if orig_span.is_some() {\n+                None\n             } else {\n-                err.note(&format!(\n-                    \"the diagnostic item is first defined in crate `{}`.\",\n-                    tcx.crate_name(original_def_id.krate)\n-                ));\n-            }\n-            err.emit();\n+                Some(tcx.crate_name(original_def_id.krate))\n+            };\n+            match tcx.hir().span_if_local(item_def_id) {\n+                Some(span) => tcx.sess.emit_err(DuplicateDiagnosticItem { span, name }),\n+                None => tcx.sess.emit_err(DuplicateDiagnosticItemInCrate {\n+                    span: orig_span,\n+                    // FIXME: We should not provide `name` to `orig_crate_name`. How do you create a blank/empty symbol?\n+                    orig_crate_name: orig_crate_name.unwrap_or(name),\n+                    have_orig_crate_name: orig_crate_name.map(|_| ()),\n+                    crate_name: tcx.crate_name(item_def_id.krate),\n+                    name,\n+                }),\n+            };\n         }\n     }\n }"}, {"sha": "a94cac8c79542aca6109a5f9f2a7eeaf6c839428", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=0609c0f1da13c8b0aeb90b5ff66f527bb16d58bf", "patch": "@@ -755,3 +755,23 @@ impl IntoDiagnostic<'_> for InvalidAttrAtCrateLevel {\n         diag\n     }\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::duplicate_diagnostic_item)]\n+pub struct DuplicateDiagnosticItem {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(passes::duplicate_diagnostic_item_in_crate)]\n+pub struct DuplicateDiagnosticItemInCrate {\n+    #[note(passes::diagnostic_item_first_defined)]\n+    pub span: Option<Span>,\n+    pub orig_crate_name: Symbol,\n+    #[note]\n+    pub have_orig_crate_name: Option<()>,\n+    pub crate_name: Symbol,\n+    pub name: Symbol,\n+}"}]}