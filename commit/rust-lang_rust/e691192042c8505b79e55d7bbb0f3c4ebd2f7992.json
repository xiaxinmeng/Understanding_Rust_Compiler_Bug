{"sha": "e691192042c8505b79e55d7bbb0f3c4ebd2f7992", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2OTExOTIwNDJjODUwNWI3OWU1NWQ3YmJiMGYzYzRlYmQyZjc5OTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-06T20:51:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-17T19:25:11Z"}, "message": "Substitute type/lifetimeInstatiate method type/early-bound lifetime parameters too when creating xform-self-type.\n\nFixes #18208.", "tree": {"sha": "c491475286844c15dc5f30de32e555cb97c4647d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c491475286844c15dc5f30de32e555cb97c4647d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e691192042c8505b79e55d7bbb0f3c4ebd2f7992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e691192042c8505b79e55d7bbb0f3c4ebd2f7992", "html_url": "https://github.com/rust-lang/rust/commit/e691192042c8505b79e55d7bbb0f3c4ebd2f7992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e691192042c8505b79e55d7bbb0f3c4ebd2f7992/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8403aac81d5720bb722a85a9120c14ceb763eb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8403aac81d5720bb722a85a9120c14ceb763eb9", "html_url": "https://github.com/rust-lang/rust/commit/f8403aac81d5720bb722a85a9120c14ceb763eb9"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "c07c6ebfc47c17ee4590e3f3dedc73cfc0204dc7", "filename": "src/librustc/middle/typeck/check/method/probe.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e691192042c8505b79e55d7bbb0f3c4ebd2f7992/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e691192042c8505b79e55d7bbb0f3c4ebd2f7992/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e691192042c8505b79e55d7bbb0f3c4ebd2f7992", "patch": "@@ -827,6 +827,32 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                method.fty.sig.inputs[0].repr(self.tcx()),\n                substs.repr(self.tcx()));\n \n+        // It is possible for type parameters or early-bound lifetimes\n+        // to appear in the signature of `self`. The substitutions we\n+        // are given do not include type/lifetime parameters for the\n+        // method yet. So create fresh variables here for those too,\n+        // if there are any.\n+        assert_eq!(substs.types.len(subst::FnSpace), 0);\n+        assert_eq!(substs.regions().len(subst::FnSpace), 0);\n+        let mut substs = substs;\n+        let placeholder;\n+        if\n+            !method.generics.types.is_empty_in(subst::FnSpace) ||\n+            !method.generics.regions.is_empty_in(subst::FnSpace)\n+        {\n+            let method_types =\n+                self.infcx().next_ty_vars(\n+                    method.generics.types.len(subst::FnSpace));\n+\n+            let method_regions =\n+                self.infcx().region_vars_for_defs(\n+                    self.span,\n+                    method.generics.regions.get_slice(subst::FnSpace));\n+\n+            placeholder = (*substs).clone().with_method(method_types, method_regions);\n+            substs = &placeholder;\n+        }\n+\n         let xform_self_ty = method.fty.sig.inputs[0].subst(self.tcx(), substs);\n         self.infcx().replace_late_bound_regions_with_fresh_var(method.fty.sig.binder_id,\n                                                                self.span,"}, {"sha": "25ce0d774ebc1caaf5a40987412ce7dc8cead135", "filename": "src/test/run-pass/method-early-bound-lifetimes-on-self.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e691192042c8505b79e55d7bbb0f3c4ebd2f7992/src%2Ftest%2Frun-pass%2Fmethod-early-bound-lifetimes-on-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e691192042c8505b79e55d7bbb0f3c4ebd2f7992/src%2Ftest%2Frun-pass%2Fmethod-early-bound-lifetimes-on-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-early-bound-lifetimes-on-self.rs?ref=e691192042c8505b79e55d7bbb0f3c4ebd2f7992", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we successfully handle methods where the `self` type has\n+// an early-bound lifetime. Issue #18208.\n+\n+#![allow(dead_code)]\n+\n+struct Cursor<'a>;\n+\n+trait CursorNavigator {\n+    fn init_cursor<'a, 'b:'a>(&'a self, cursor: &mut Cursor<'b>) -> bool;\n+}\n+\n+struct SimpleNavigator;\n+\n+impl CursorNavigator for SimpleNavigator {\n+    fn init_cursor<'a, 'b: 'a>(&'a self, _cursor: &mut Cursor<'b>) -> bool {\n+        false\n+    }\n+}\n+\n+fn main() {\n+    let mut c = Cursor;\n+    let n = SimpleNavigator;\n+    n.init_cursor(&mut c);\n+}"}]}