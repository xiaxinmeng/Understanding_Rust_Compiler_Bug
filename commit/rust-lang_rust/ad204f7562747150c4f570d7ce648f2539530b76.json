{"sha": "ad204f7562747150c4f570d7ce648f2539530b76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMjA0Zjc1NjI3NDcxNTBjNGY1NzBkN2NlNjQ4ZjI1Mzk1MzBiNzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T16:17:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T16:17:51Z"}, "message": "Mostly remove ImoportLocator infra", "tree": {"sha": "cfb4d43e5dac678eedf2537c9981111a2364f30c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb4d43e5dac678eedf2537c9981111a2364f30c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad204f7562747150c4f570d7ce648f2539530b76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad204f7562747150c4f570d7ce648f2539530b76", "html_url": "https://github.com/rust-lang/rust/commit/ad204f7562747150c4f570d7ce648f2539530b76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad204f7562747150c4f570d7ce648f2539530b76/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf812c12d1ac7944d1c18877ee93bea02d91e99f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf812c12d1ac7944d1c18877ee93bea02d91e99f", "html_url": "https://github.com/rust-lang/rust/commit/cf812c12d1ac7944d1c18877ee93bea02d91e99f"}], "stats": {"total": 199, "additions": 21, "deletions": 178}, "files": [{"sha": "21905106325bc489e749e0e7ee7b673265b71dc6", "filename": "crates/ra_assists/src/assists/auto_import.rs", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ad204f7562747150c4f570d7ce648f2539530b76/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad204f7562747150c4f570d7ce648f2539530b76/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs?ref=ad204f7562747150c4f570d7ce648f2539530b76", "patch": "@@ -6,8 +6,9 @@ use ra_syntax::{\n \n use crate::{\n     assist_ctx::{ActionBuilder, Assist, AssistCtx},\n-    auto_import_text_edit, AssistId, ImportsLocator,\n+    auto_import_text_edit, AssistId,\n };\n+use ra_ide_db::imports_locator::ImportsLocatorIde;\n \n // Assist: auto_import\n //\n@@ -26,10 +27,7 @@ use crate::{\n //     let map = HashMap<|>::new();\n // }\n // ```\n-pub(crate) fn auto_import<F: ImportsLocator>(\n-    ctx: AssistCtx,\n-    imports_locator: &mut F,\n-) -> Option<Assist> {\n+pub(crate) fn auto_import(ctx: AssistCtx) -> Option<Assist> {\n     let path_to_import: ast::Path = ctx.find_node_at_offset()?;\n     let path_to_import_syntax = path_to_import.syntax();\n     if path_to_import_syntax.ancestors().find_map(ast::UseItem::cast).is_some() {\n@@ -52,6 +50,8 @@ pub(crate) fn auto_import<F: ImportsLocator>(\n         return None;\n     }\n \n+    let mut imports_locator = ImportsLocatorIde::new(ctx.db);\n+\n     let proposed_imports = imports_locator\n         .find_imports(&name_to_import)\n         .into_iter()\n@@ -81,16 +81,12 @@ fn import_to_action(import: ModPath, position: &SyntaxNode, anchor: &SyntaxNode)\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{\n-        check_assist_with_imports_locator, check_assist_with_imports_locator_not_applicable,\n-        TestImportsLocator,\n-    };\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n \n     #[test]\n     fn applicable_when_found_an_import() {\n-        check_assist_with_imports_locator(\n+        check_assist(\n             auto_import,\n-            TestImportsLocator::new,\n             r\"\n             <|>PubStruct\n \n@@ -112,9 +108,8 @@ mod tests {\n \n     #[test]\n     fn auto_imports_are_merged() {\n-        check_assist_with_imports_locator(\n+        check_assist(\n             auto_import,\n-            TestImportsLocator::new,\n             r\"\n             use PubMod::PubStruct1;\n \n@@ -148,9 +143,8 @@ mod tests {\n \n     #[test]\n     fn applicable_when_found_multiple_imports() {\n-        check_assist_with_imports_locator(\n+        check_assist(\n             auto_import,\n-            TestImportsLocator::new,\n             r\"\n             PubSt<|>ruct\n \n@@ -184,9 +178,8 @@ mod tests {\n \n     #[test]\n     fn not_applicable_for_already_imported_types() {\n-        check_assist_with_imports_locator_not_applicable(\n+        check_assist_not_applicable(\n             auto_import,\n-            TestImportsLocator::new,\n             r\"\n             use PubMod::PubStruct;\n \n@@ -201,9 +194,8 @@ mod tests {\n \n     #[test]\n     fn not_applicable_for_types_with_private_paths() {\n-        check_assist_with_imports_locator_not_applicable(\n+        check_assist_not_applicable(\n             auto_import,\n-            TestImportsLocator::new,\n             r\"\n             PrivateStruct<|>\n \n@@ -216,19 +208,17 @@ mod tests {\n \n     #[test]\n     fn not_applicable_when_no_imports_found() {\n-        check_assist_with_imports_locator_not_applicable(\n+        check_assist_not_applicable(\n             auto_import,\n-            TestImportsLocator::new,\n             \"\n             PubStruct<|>\",\n         );\n     }\n \n     #[test]\n     fn not_applicable_in_import_statements() {\n-        check_assist_with_imports_locator_not_applicable(\n+        check_assist_not_applicable(\n             auto_import,\n-            TestImportsLocator::new,\n             r\"\n             use PubStruct<|>;\n \n@@ -240,9 +230,8 @@ mod tests {\n \n     #[test]\n     fn function_import() {\n-        check_assist_with_imports_locator(\n+        check_assist(\n             auto_import,\n-            TestImportsLocator::new,\n             r\"\n             test_function<|>\n "}, {"sha": "8285e93a469329d333e23248a432b7789e533d9a", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 6, "deletions": 152, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/ad204f7562747150c4f570d7ce648f2539530b76/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad204f7562747150c4f570d7ce648f2539530b76/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=ad204f7562747150c4f570d7ce648f2539530b76", "patch": "@@ -12,9 +12,8 @@ mod doc_tests;\n pub mod ast_transform;\n \n use either::Either;\n-use hir::ModuleDef;\n use ra_db::FileRange;\n-use ra_ide_db::{imports_locator::ImportsLocatorIde, RootDatabase};\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n \n@@ -73,50 +72,6 @@ pub fn applicable_assists(db: &RootDatabase, range: FileRange) -> Vec<AssistLabe\n     })\n }\n \n-/// A functionality for locating imports for the given name.\n-///\n-/// Currently has to be a trait with the real implementation provided by the ra_ide_api crate,\n-/// due to the search functionality located there.\n-/// Later, this trait should be removed completely and the search functionality moved to a separate crate,\n-/// accessible from the ra_assists crate.\n-pub trait ImportsLocator {\n-    /// Finds all imports for the given name and the module that contains this name.\n-    fn find_imports(&mut self, name_to_import: &str) -> Vec<ModuleDef>;\n-}\n-\n-impl ImportsLocator for ImportsLocatorIde<'_> {\n-    fn find_imports(&mut self, name_to_import: &str) -> Vec<ModuleDef> {\n-        self.find_imports(name_to_import)\n-    }\n-}\n-\n-/// Return all the assists applicable at the given position\n-/// and additional assists that need the imports locator functionality to work.\n-///\n-/// Assists are returned in the \"resolved\" state, that is with edit fully\n-/// computed.\n-pub fn assists_with_imports_locator(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssist> {\n-    let mut imports_locator = ImportsLocatorIde::new(db);\n-    AssistCtx::with_ctx(db, range, true, |ctx| {\n-        let mut assists = assists::all()\n-            .iter()\n-            .map(|f| f(ctx.clone()))\n-            .chain(\n-                assists::all_with_imports_locator()\n-                    .iter()\n-                    .map(|f| f(ctx.clone(), &mut imports_locator)),\n-            )\n-            .filter_map(std::convert::identity)\n-            .map(|a| match a {\n-                Assist::Resolved { assist } => assist,\n-                Assist::Unresolved { .. } => unreachable!(),\n-            })\n-            .collect();\n-        sort_assists(&mut assists);\n-        assists\n-    })\n-}\n-\n /// Return all the assists applicable at the given position.\n ///\n /// Assists are returned in the \"resolved\" state, that is with edit fully\n@@ -147,7 +102,7 @@ fn sort_assists(assists: &mut Vec<ResolvedAssist>) {\n }\n \n mod assists {\n-    use crate::{Assist, AssistCtx, ImportsLocator};\n+    use crate::{Assist, AssistCtx};\n \n     mod add_derive;\n     mod add_explicit_type;\n@@ -206,72 +161,19 @@ mod assists {\n             raw_string::make_usual_string,\n             raw_string::remove_hash,\n             early_return::convert_to_guarded_return,\n+            auto_import::auto_import,\n         ]\n     }\n-\n-    pub(crate) fn all_with_imports_locator<'a, F: ImportsLocator>(\n-    ) -> &'a [fn(AssistCtx, &mut F) -> Option<Assist>] {\n-        &[auto_import::auto_import]\n-    }\n }\n \n #[cfg(test)]\n mod helpers {\n-    use hir::db::DefDatabase;\n-    use ra_db::{fixture::WithFixture, FileId, FileRange};\n+    use ra_db::{fixture::WithFixture, FileRange};\n+    use ra_ide_db::RootDatabase;\n     use ra_syntax::TextRange;\n     use test_utils::{add_cursor, assert_eq_text, extract_offset, extract_range};\n \n-    use crate::{Assist, AssistCtx, ImportsLocator};\n-    use ra_ide_db::RootDatabase;\n-    use std::sync::Arc;\n-\n-    // FIXME remove the `ModuleDefId` reexport from `ra_hir` when this gets removed.\n-    pub(crate) struct TestImportsLocator {\n-        db: Arc<RootDatabase>,\n-        test_file_id: FileId,\n-    }\n-\n-    impl TestImportsLocator {\n-        pub(crate) fn new(db: Arc<RootDatabase>, test_file_id: FileId) -> Self {\n-            TestImportsLocator { db, test_file_id }\n-        }\n-    }\n-\n-    impl ImportsLocator for TestImportsLocator {\n-        fn find_imports(&mut self, name_to_import: &str) -> Vec<hir::ModuleDef> {\n-            let crate_def_map = self.db.crate_def_map(self.db.test_crate());\n-            let mut findings = Vec::new();\n-\n-            let mut module_ids_to_process =\n-                crate_def_map.modules_for_file(self.test_file_id).collect::<Vec<_>>();\n-\n-            while !module_ids_to_process.is_empty() {\n-                let mut more_ids_to_process = Vec::new();\n-                for local_module_id in module_ids_to_process.drain(..) {\n-                    for (name, namespace_data) in\n-                        crate_def_map[local_module_id].scope.entries_without_primitives()\n-                    {\n-                        let found_a_match = &name.to_string() == name_to_import;\n-                        vec![namespace_data.types, namespace_data.values]\n-                            .into_iter()\n-                            .filter_map(std::convert::identity)\n-                            .for_each(|(module_def_id, _)| {\n-                                if found_a_match {\n-                                    findings.push(module_def_id.into());\n-                                }\n-                                if let hir::ModuleDefId::ModuleId(module_id) = module_def_id {\n-                                    more_ids_to_process.push(module_id.local_id);\n-                                }\n-                            });\n-                    }\n-                }\n-                module_ids_to_process = more_ids_to_process;\n-            }\n-\n-            findings\n-        }\n-    }\n+    use crate::{Assist, AssistCtx};\n \n     pub(crate) fn check_assist(assist: fn(AssistCtx) -> Option<Assist>, before: &str, after: &str) {\n         let (before_cursor_pos, before) = extract_offset(before);\n@@ -297,38 +199,6 @@ mod helpers {\n         assert_eq_text!(after, &actual);\n     }\n \n-    pub(crate) fn check_assist_with_imports_locator<F: ImportsLocator>(\n-        assist: fn(AssistCtx, &mut F) -> Option<Assist>,\n-        imports_locator_provider: fn(db: Arc<RootDatabase>, file_id: FileId) -> F,\n-        before: &str,\n-        after: &str,\n-    ) {\n-        let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = RootDatabase::with_single_file(&before);\n-        let db = Arc::new(db);\n-        let mut imports_locator = imports_locator_provider(Arc::clone(&db), file_id);\n-        let frange =\n-            FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n-        let assist =\n-            AssistCtx::with_ctx(db.as_ref(), frange, true, |ctx| assist(ctx, &mut imports_locator))\n-                .expect(\"code action is not applicable\");\n-        let action = match assist {\n-            Assist::Unresolved { .. } => unreachable!(),\n-            Assist::Resolved { assist } => assist.get_first_action(),\n-        };\n-\n-        let actual = action.edit.apply(&before);\n-        let actual_cursor_pos = match action.cursor_position {\n-            None => action\n-                .edit\n-                .apply_to_offset(before_cursor_pos)\n-                .expect(\"cursor position is affected by the edit\"),\n-            Some(off) => off,\n-        };\n-        let actual = add_cursor(&actual, actual_cursor_pos);\n-        assert_eq_text!(after, &actual);\n-    }\n-\n     pub(crate) fn check_assist_range(\n         assist: fn(AssistCtx) -> Option<Assist>,\n         before: &str,\n@@ -402,22 +272,6 @@ mod helpers {\n         assert!(assist.is_none());\n     }\n \n-    pub(crate) fn check_assist_with_imports_locator_not_applicable<F: ImportsLocator>(\n-        assist: fn(AssistCtx, &mut F) -> Option<Assist>,\n-        imports_locator_provider: fn(db: Arc<RootDatabase>, file_id: FileId) -> F,\n-        before: &str,\n-    ) {\n-        let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = RootDatabase::with_single_file(&before);\n-        let db = Arc::new(db);\n-        let mut imports_locator = imports_locator_provider(Arc::clone(&db), file_id);\n-        let frange =\n-            FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n-        let assist =\n-            AssistCtx::with_ctx(db.as_ref(), frange, true, |ctx| assist(ctx, &mut imports_locator));\n-        assert!(assist.is_none());\n-    }\n-\n     pub(crate) fn check_assist_range_not_applicable(\n         assist: fn(AssistCtx) -> Option<Assist>,\n         before: &str,"}, {"sha": "c3b2c638b620ca6724e100b40bff07312d547f91", "filename": "crates/ra_ide/src/assists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad204f7562747150c4f570d7ce648f2539530b76/crates%2Fra_ide%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad204f7562747150c4f570d7ce648f2539530b76/crates%2Fra_ide%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fassists.rs?ref=ad204f7562747150c4f570d7ce648f2539530b76", "patch": "@@ -17,7 +17,7 @@ pub struct Assist {\n }\n \n pub(crate) fn assists(db: &RootDatabase, frange: FileRange) -> Vec<Assist> {\n-    ra_assists::assists_with_imports_locator(db, frange)\n+    ra_assists::assists(db, frange)\n         .into_iter()\n         .map(|assist| {\n             let file_id = frange.file_id;"}]}