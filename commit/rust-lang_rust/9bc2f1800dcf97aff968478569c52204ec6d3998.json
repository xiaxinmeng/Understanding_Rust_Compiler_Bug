{"sha": "9bc2f1800dcf97aff968478569c52204ec6d3998", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYzJmMTgwMGRjZjk3YWZmOTY4NDc4NTY5YzUyMjA0ZWM2ZDM5OTg=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-11-10T15:31:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-11T03:19:10Z"}, "message": "rustc: Add support of warning on unused imports\n\nFixes issue #889", "tree": {"sha": "c9320f95e83f1a87405470a37fc26f54f9a4ecc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9320f95e83f1a87405470a37fc26f54f9a4ecc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bc2f1800dcf97aff968478569c52204ec6d3998", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bc2f1800dcf97aff968478569c52204ec6d3998", "html_url": "https://github.com/rust-lang/rust/commit/9bc2f1800dcf97aff968478569c52204ec6d3998", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bc2f1800dcf97aff968478569c52204ec6d3998/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f705f681218f45a9d011a4bdd5575b31fdafce2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f705f681218f45a9d011a4bdd5575b31fdafce2d", "html_url": "https://github.com/rust-lang/rust/commit/f705f681218f45a9d011a4bdd5575b31fdafce2d"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "501d675564ace84291f410c094b3ff5ef137b8ec", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9bc2f1800dcf97aff968478569c52204ec6d3998/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc2f1800dcf97aff968478569c52204ec6d3998/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=9bc2f1800dcf97aff968478569c52204ec6d3998", "patch": "@@ -50,7 +50,9 @@ tag import_state {\n     resolving(span);\n     resolved(option::t<def>, /* value */\n              option::t<def>, /* type */\n-             option::t<def>); /* module */\n+             option::t<def>, /* module */\n+             /* used for reporting unused import warning */\n+             ast::ident, codemap::span);\n }\n \n type ext_hash = hashmap<{did: def_id, ident: str, ns: namespace}, def>;\n@@ -106,6 +108,7 @@ type env =\n      mod_map: hashmap<ast::node_id, @indexed_mod>,\n      ext_map: hashmap<def_id, [ident]>,\n      ext_cache: ext_hash,\n+     mutable used_imports: option::t<[ast::node_id]>,\n      mutable reported: [{ident: str, sc: scope}],\n      mutable currently_resolving: node_id,\n      sess: session};\n@@ -127,18 +130,20 @@ fn resolve_crate(sess: session, amap: ast_map::map, crate: @ast::crate) ->\n           mod_map: new_int_hash::<@indexed_mod>(),\n           ext_map: new_def_hash::<[ident]>(),\n           ext_cache: new_ext_hash(),\n+          mutable used_imports: none,\n           mutable reported: [],\n           mutable currently_resolving: -1,\n           sess: sess};\n     map_crate(e, crate);\n     resolve_imports(*e);\n     check_for_collisions(e, *crate);\n     check_bad_exports(e);\n+    e.used_imports = some([]);\n     resolve_names(e, crate);\n+    check_unused_imports(e);\n     ret {def_map: e.def_map, ext_map: e.ext_map};\n }\n \n-\n // Locate all modules and imports and index them, so that the next passes can\n // resolve through them.\n fn map_crate(e: @env, c: @ast::crate) {\n@@ -239,12 +244,26 @@ fn resolve_imports(e: env) {\n           todo(node_id, name, path, span, scopes) {\n             resolve_import(e, local_def(node_id), name, path, span, scopes);\n           }\n-          resolved(_, _, _) { }\n+          resolved(_, _, _, _, _) { }\n         }\n     };\n     e.sess.abort_if_errors();\n }\n \n+fn check_unused_imports(e: @env) {\n+    let used = option::get(e.used_imports);\n+    e.imports.items {|k, v|\n+        alt v {\n+            resolved(val, ty, md, name, sp) {\n+              if !vec::member(k, used) {\n+                e.sess.span_warn(sp, \"unused import \" + name);\n+              }\n+            }\n+            _ { }\n+        }\n+    };\n+}\n+\n fn resolve_names(e: @env, c: @ast::crate) {\n     let v =\n         @{visit_native_item: visit_native_item_with_scope,\n@@ -439,7 +458,7 @@ fn resolve_import(e: env, defid: ast::def_id, name: ast::ident,\n         if is_none(val) && is_none(typ) && is_none(md) {\n             unresolved_err(e, sc, sp, name, \"import\");\n         } else {\n-            e.imports.insert(id, resolved(val, typ, md));\n+            e.imports.insert(id, resolved(val, typ, md, name, sp));\n         }\n     }\n     // This function has cleanup code at the end. Do not return without going\n@@ -483,8 +502,8 @@ fn resolve_import(e: env, defid: ast::def_id, name: ast::ident,\n     // resolved state, to avoid having it reported later as a cyclic\n     // import\n     alt e.imports.find(defid.node) {\n-      some(resolving(_)) {\n-        e.imports.insert(defid.node, resolved(none, none, none));\n+      some(resolving(sp)) {\n+        e.imports.insert(defid.node, resolved(none, none, none, \"\", sp));\n       }\n       _ { }\n     }\n@@ -931,7 +950,14 @@ fn lookup_import(e: env, defid: def_id, ns: namespace) -> option::t<def> {\n         }\n         ret none;\n       }\n-      resolved(val, typ, md) {\n+      resolved(val, typ, md, _, _) {\n+        alt e.used_imports {\n+          none. { }\n+          some(lst_) {\n+            let lst = lst_ + [defid.node];\n+            e.used_imports = option::some(lst);\n+          }\n+        }\n         ret alt ns { ns_value. { val } ns_type. { typ } ns_module. { md } };\n       }\n     }\n@@ -1008,15 +1034,15 @@ fn lookup_glob_in_mod(e: env, info: @indexed_mod, sp: span, id: ident,\n         let val = per_ns(e, info, sp, id, ns_value, dr);\n         let typ = per_ns(e, info, sp, id, ns_type, dr);\n         let md = per_ns(e, info, sp, id, ns_module, dr);\n-        info.glob_imported_names.insert(id, resolved(val, typ, md));\n+        info.glob_imported_names.insert(id, resolved(val, typ, md, id, sp));\n     }\n     alt info.glob_imported_names.get(id) {\n       todo(_, _, _, _, _) { e.sess.bug(\"Shouldn't've put a todo in.\"); }\n       resolving(sp) {\n         ret none::<def>; //circularity is okay in import globs\n \n       }\n-      resolved(val, typ, md) {\n+      resolved(val, typ, md, _, _) {\n         ret alt wanted_ns {\n               ns_value. { val }\n               ns_type. { typ }"}, {"sha": "88e42e0490ada4a9636268a82e6a785259de11da", "filename": "src/test/compile-fail/unused-imports-warn.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9bc2f1800dcf97aff968478569c52204ec6d3998/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc2f1800dcf97aff968478569c52204ec6d3998/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs?ref=9bc2f1800dcf97aff968478569c52204ec6d3998", "patch": "@@ -0,0 +1,19 @@\n+// error-pattern:unused import\n+import cal = bar::c::cc;\n+\n+mod foo {\n+    type point = {x: int, y: int};\n+    type square = {p: point, h: uint, w: uint};\n+}\n+\n+mod bar {\n+    mod c {\n+        import foo::point;\n+        import foo::square;\n+        fn cc(p: point) -> str { ret 2 * (p.x + p.y); }\n+    }\n+}\n+\n+fn main() {\n+    cal({x:3, y:9});\n+}"}]}