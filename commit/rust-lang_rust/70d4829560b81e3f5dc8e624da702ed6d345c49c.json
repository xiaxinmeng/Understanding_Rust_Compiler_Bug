{"sha": "70d4829560b81e3f5dc8e624da702ed6d345c49c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZDQ4Mjk1NjBiODFlM2Y1ZGM4ZTYyNGRhNzAyZWQ2ZDM0NWM0OWM=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-24T13:30:54Z"}, "committer": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2020-06-25T13:23:34Z"}, "message": "Order of glob imports should not affect import shadowing", "tree": {"sha": "2757e7221b3955e4a2016717ef49280a5557a3c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2757e7221b3955e4a2016717ef49280a5557a3c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70d4829560b81e3f5dc8e624da702ed6d345c49c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70d4829560b81e3f5dc8e624da702ed6d345c49c", "html_url": "https://github.com/rust-lang/rust/commit/70d4829560b81e3f5dc8e624da702ed6d345c49c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70d4829560b81e3f5dc8e624da702ed6d345c49c/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be0094b5cc24d82541d98a7bd00187c18388fd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be0094b5cc24d82541d98a7bd00187c18388fd3", "html_url": "https://github.com/rust-lang/rust/commit/9be0094b5cc24d82541d98a7bd00187c18388fd3"}], "stats": {"total": 87, "additions": 71, "deletions": 16}, "files": [{"sha": "665dd106c79014ed41c4c0e3eb63b9c78e52de13", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/70d4829560b81e3f5dc8e624da702ed6d345c49c/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d4829560b81e3f5dc8e624da702ed6d345c49c/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=70d4829560b81e3f5dc8e624da702ed6d345c49c", "patch": "@@ -380,26 +380,35 @@ impl DefCollector<'_> {\n \n         while self.unresolved_imports.len() < n_previous_unresolved {\n             n_previous_unresolved = self.unresolved_imports.len();\n-            let imports = std::mem::replace(&mut self.unresolved_imports, Vec::new());\n-            for mut directive in imports {\n+            let mut imports = std::mem::replace(&mut self.unresolved_imports, Vec::new());\n+            for mut directive in &mut imports {\n                 directive.status = self.resolve_import(directive.module_id, &directive.import);\n+            }\n \n-                match directive.status {\n-                    PartialResolvedImport::Indeterminate(_) => {\n-                        self.record_resolved_import(&directive);\n-                        // FIXME: For avoid performance regression,\n-                        // we consider an imported resolved if it is indeterminate (i.e not all namespace resolved)\n-                        self.resolved_imports.push(directive)\n-                    }\n-                    PartialResolvedImport::Resolved(_) => {\n-                        self.record_resolved_import(&directive);\n-                        self.resolved_imports.push(directive)\n-                    }\n-                    PartialResolvedImport::Unresolved => {\n-                        self.unresolved_imports.push(directive);\n+            let (glob_imports, non_glob_imports): (Vec<_>, Vec<_>) =\n+                imports.into_iter().partition(|directive| directive.import.is_glob);\n+            let mut record = |imports: Vec<ImportDirective>| {\n+                for directive in imports {\n+                    match directive.status {\n+                        PartialResolvedImport::Indeterminate(_) => {\n+                            self.record_resolved_import(&directive);\n+                            // FIXME: For avoid performance regression,\n+                            // we consider an imported resolved if it is indeterminate (i.e not all namespace resolved)\n+                            self.resolved_imports.push(directive)\n+                        }\n+                        PartialResolvedImport::Resolved(_) => {\n+                            self.record_resolved_import(&directive);\n+                            self.resolved_imports.push(directive)\n+                        }\n+                        PartialResolvedImport::Unresolved => {\n+                            self.unresolved_imports.push(directive);\n+                        }\n                     }\n                 }\n-            }\n+            };\n+\n+            record(glob_imports);\n+            record(non_glob_imports);\n         }\n     }\n "}, {"sha": "d5a02137c2634978d370f483b609a30379bd2d9e", "filename": "crates/ra_hir_def/src/nameres/tests/globs.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/70d4829560b81e3f5dc8e624da702ed6d345c49c/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d4829560b81e3f5dc8e624da702ed6d345c49c/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs?ref=70d4829560b81e3f5dc8e624da702ed6d345c49c", "patch": "@@ -276,3 +276,49 @@ fn glob_shadowed_def() {\n     \"###\n     );\n }\n+\n+#[test]\n+fn glob_shadowed_def_reversed() {\n+    let map = def_map(\n+        r###\"\n+        //- /lib.rs\n+        mod foo;\n+        mod bar;\n+\n+        use bar::baz;\n+        use foo::*;\n+\n+        use baz::Bar;\n+\n+        //- /foo.rs\n+        pub mod baz {\n+            pub struct Foo;\n+        }\n+\n+        //- /bar.rs\n+        pub mod baz {\n+            pub struct Bar;\n+        }\n+        \"###,\n+    );\n+    assert_snapshot!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBar: t v\n+        \u22eebar: t\n+        \u22eebaz: t\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::bar\n+        \u22eebaz: t\n+        \u22ee\n+        \u22eecrate::bar::baz\n+        \u22eeBar: t v\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebaz: t\n+        \u22ee\n+        \u22eecrate::foo::baz\n+        \u22eeFoo: t v\n+    \"###\n+    );\n+}"}]}