{"sha": "3cc44a569ded1484b0ab4fcc5b8cfd545ea3a4b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYzQ0YTU2OWRlZDE0ODRiMGFiNGZjYzViOGNmZDU0NWVhM2E0YjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-04T09:37:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-15T21:49:22Z"}, "message": "do not invoke `required_region_bounds` in `region_obligations`\n\nInstead, just search the param env predicates directly. This is\nequivalent to what we were doing before but more efficient.", "tree": {"sha": "70f90a92270f5976af4e7445ae399cd18e294dad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f90a92270f5976af4e7445ae399cd18e294dad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cc44a569ded1484b0ab4fcc5b8cfd545ea3a4b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc44a569ded1484b0ab4fcc5b8cfd545ea3a4b5", "html_url": "https://github.com/rust-lang/rust/commit/3cc44a569ded1484b0ab4fcc5b8cfd545ea3a4b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cc44a569ded1484b0ab4fcc5b8cfd545ea3a4b5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0630e868320bc298da6f93ae06c8b32a829d01b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0630e868320bc298da6f93ae06c8b32a829d01b", "html_url": "https://github.com/rust-lang/rust/commit/e0630e868320bc298da6f93ae06c8b32a829d01b"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "05e14daa2813f42dcb9d740d94f94d0e3cce3a0b", "filename": "src/librustc/infer/region_obligations.rs", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3cc44a569ded1484b0ab4fcc5b8cfd545ea3a4b5/src%2Flibrustc%2Finfer%2Fregion_obligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc44a569ded1484b0ab4fcc5b8cfd545ea3a4b5/src%2Flibrustc%2Finfer%2Fregion_obligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_obligations.rs?ref=3cc44a569ded1484b0ab4fcc5b8cfd545ea3a4b5", "patch": "@@ -470,9 +470,16 @@ impl<'cx, 'gcx, 'tcx> TypeOutlives<'cx, 'gcx, 'tcx> {\n     ) -> Vec<ty::Region<'tcx>> {\n         let tcx = self.tcx();\n \n-        // To start, collect bounds from user:\n+        // To start, collect bounds from user environment. Note that\n+        // parameter environments are already elaborated, so we don't\n+        // have to worry about that. Comparing using `==` is a bit\n+        // dubious for projections, but it will work for simple cases\n+        // like `T` and `T::Item`. It may not work as well for things\n+        // like `<T as Foo<'a>>::Item`.\n         let mut param_bounds =\n-            tcx.required_region_bounds(generic.to_ty(tcx), self.param_env.caller_bounds.to_vec());\n+            self.collect_outlives_from_predicate_list(\n+                generic.to_ty(tcx),\n+                self.param_env.caller_bounds);\n \n         // Next, collect regions we scraped from the well-formedness\n         // constraints in the fn signature. To do that, we walk the list\n@@ -559,10 +566,31 @@ impl<'cx, 'gcx, 'tcx> TypeOutlives<'cx, 'gcx, 'tcx> {\n         let trait_predicates = tcx.predicates_of(trait_def_id);\n         let identity_substs = Substs::identity_for_item(tcx, assoc_item_def_id);\n         let identity_proj = tcx.mk_projection(assoc_item_def_id, identity_substs);\n-        traits::elaborate_predicates(tcx, trait_predicates.predicates)\n-            .filter_map(|p| p.to_opt_type_outlives())\n-            .filter_map(|p| tcx.no_late_bound_regions(&p))\n-            .filter(|p| p.0 == identity_proj)\n+        self.collect_outlives_from_predicate_list(\n+            identity_proj,\n+            traits::elaborate_predicates(tcx, trait_predicates.predicates))\n+    }\n+\n+    /// Searches through a predicate list for a predicate `T: 'a`.\n+    ///\n+    /// Careful: does not elaborate predicates, and just uses `==`\n+    /// when comparing `ty` for equality, so `ty` must be something\n+    /// that does not involve inference variables and where you\n+    /// otherwise want a precise match.\n+    fn collect_outlives_from_predicate_list<I, P>(\n+        &self,\n+        ty: Ty<'tcx>,\n+        predicates: I,\n+    ) -> Vec<ty::Region<'tcx>>\n+    where\n+        I: IntoIterator<Item = P>,\n+        P: AsRef<ty::Predicate<'tcx>>,\n+    {\n+        predicates\n+            .into_iter()\n+            .filter_map(|p| p.as_ref().to_opt_type_outlives())\n+            .filter_map(|p| self.tcx().no_late_bound_regions(&p))\n+            .filter(|p| p.0 == ty)\n             .map(|p| p.1)\n             .collect()\n     }"}, {"sha": "a9efb042f3d8cf2aebd086981fe005197194661e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cc44a569ded1484b0ab4fcc5b8cfd545ea3a4b5/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc44a569ded1484b0ab4fcc5b8cfd545ea3a4b5/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3cc44a569ded1484b0ab4fcc5b8cfd545ea3a4b5", "patch": "@@ -904,6 +904,12 @@ pub enum Predicate<'tcx> {\n     ConstEvaluatable(DefId, &'tcx Substs<'tcx>),\n }\n \n+impl<'tcx> AsRef<Predicate<'tcx>> for Predicate<'tcx> {\n+    fn as_ref(&self) -> &Predicate<'tcx> {\n+        self\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> Predicate<'tcx> {\n     /// Performs a substitution suitable for going from a\n     /// poly-trait-ref to supertraits that must hold if that"}]}