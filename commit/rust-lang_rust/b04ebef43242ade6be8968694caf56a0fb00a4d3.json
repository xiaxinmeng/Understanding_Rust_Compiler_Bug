{"sha": "b04ebef43242ade6be8968694caf56a0fb00a4d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNGViZWY0MzI0MmFkZTZiZTg5Njg2OTRjYWY1NmEwZmIwMGE0ZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-06T15:04:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-06T15:04:10Z"}, "message": "Auto merge of #40272 - jseyfried:fix_const_macro_invocations, r=petrochenkov\n\nmacros: fix const expression invocations\n\nFixes #40136.\nr? @nrc", "tree": {"sha": "b22a95c20eafa5ea2663f86f6f96db90fb03042f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b22a95c20eafa5ea2663f86f6f96db90fb03042f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b04ebef43242ade6be8968694caf56a0fb00a4d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b04ebef43242ade6be8968694caf56a0fb00a4d3", "html_url": "https://github.com/rust-lang/rust/commit/b04ebef43242ade6be8968694caf56a0fb00a4d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b04ebef43242ade6be8968694caf56a0fb00a4d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11bc48a15a7ef23ba795a77d6eb72e4f873373b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/11bc48a15a7ef23ba795a77d6eb72e4f873373b4", "html_url": "https://github.com/rust-lang/rust/commit/11bc48a15a7ef23ba795a77d6eb72e4f873373b4"}, {"sha": "9fe7d3ffe426082c0b519603becac0cc5dae35f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe7d3ffe426082c0b519603becac0cc5dae35f8", "html_url": "https://github.com/rust-lang/rust/commit/9fe7d3ffe426082c0b519603becac0cc5dae35f8"}], "stats": {"total": 66, "additions": 45, "deletions": 21}, "files": [{"sha": "ccaf663c7ad2ab03a844ca80e107b9a2e8c2719f", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b04ebef43242ade6be8968694caf56a0fb00a4d3/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04ebef43242ade6be8968694caf56a0fb00a4d3/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=b04ebef43242ade6be8968694caf56a0fb00a4d3", "patch": "@@ -26,7 +26,7 @@ pub struct DefCollector<'a> {\n pub struct MacroInvocationData {\n     pub mark: Mark,\n     pub def_index: DefIndex,\n-    pub const_integer: bool,\n+    pub const_expr: bool,\n }\n \n impl<'a> DefCollector<'a> {\n@@ -65,10 +65,10 @@ impl<'a> DefCollector<'a> {\n         self.parent_def = parent;\n     }\n \n-    pub fn visit_ast_const_integer(&mut self, expr: &Expr) {\n+    pub fn visit_const_expr(&mut self, expr: &Expr) {\n         match expr.node {\n             // Find the node which will be used after lowering.\n-            ExprKind::Paren(ref inner) => return self.visit_ast_const_integer(inner),\n+            ExprKind::Paren(ref inner) => return self.visit_const_expr(inner),\n             ExprKind::Mac(..) => return self.visit_macro_invoc(expr.id, true),\n             // FIXME(eddyb) Closures should have separate\n             // function definition IDs and expression IDs.\n@@ -79,11 +79,11 @@ impl<'a> DefCollector<'a> {\n         self.create_def(expr.id, DefPathData::Initializer);\n     }\n \n-    fn visit_macro_invoc(&mut self, id: NodeId, const_integer: bool) {\n+    fn visit_macro_invoc(&mut self, id: NodeId, const_expr: bool) {\n         if let Some(ref mut visit) = self.visit_macro_invoc {\n             visit(MacroInvocationData {\n                 mark: Mark::from_placeholder_id(id),\n-                const_integer: const_integer,\n+                const_expr: const_expr,\n                 def_index: self.parent_def.unwrap(),\n             })\n         }\n@@ -142,7 +142,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                             }\n \n                             if let Some(ref expr) = v.node.disr_expr {\n-                                this.visit_ast_const_integer(expr);\n+                                this.visit_const_expr(expr);\n                             }\n                         });\n                     }\n@@ -194,7 +194,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         let def = self.create_def(ti.id, def_data);\n         self.with_parent(def, |this| {\n             if let TraitItemKind::Const(_, Some(ref expr)) = ti.node {\n-                this.create_def(expr.id, DefPathData::Initializer);\n+                this.visit_const_expr(expr);\n             }\n \n             visit::walk_trait_item(this, ti);\n@@ -212,7 +212,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         let def = self.create_def(ii.id, def_data);\n         self.with_parent(def, |this| {\n             if let ImplItemKind::Const(_, ref expr) = ii.node {\n-                this.create_def(expr.id, DefPathData::Initializer);\n+                this.visit_const_expr(expr);\n             }\n \n             visit::walk_impl_item(this, ii);\n@@ -240,7 +240,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n \n         match expr.node {\n             ExprKind::Mac(..) => return self.visit_macro_invoc(expr.id, false),\n-            ExprKind::Repeat(_, ref count) => self.visit_ast_const_integer(count),\n+            ExprKind::Repeat(_, ref count) => self.visit_const_expr(count),\n             ExprKind::Closure(..) => {\n                 let def = self.create_def(expr.id, DefPathData::ClosureExpr);\n                 self.parent_def = Some(def);\n@@ -255,11 +255,11 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_ty(&mut self, ty: &'a Ty) {\n         match ty.node {\n             TyKind::Mac(..) => return self.visit_macro_invoc(ty.id, false),\n-            TyKind::Array(_, ref length) => self.visit_ast_const_integer(length),\n+            TyKind::Array(_, ref length) => self.visit_const_expr(length),\n             TyKind::ImplTrait(..) => {\n                 self.create_def(ty.id, DefPathData::ImplTrait);\n             }\n-            TyKind::Typeof(ref expr) => self.visit_ast_const_integer(expr),\n+            TyKind::Typeof(ref expr) => self.visit_const_expr(expr),\n             _ => {}\n         }\n         visit::walk_ty(self, ty);"}, {"sha": "da08d1b7c78e2d1edf302f74bf26fb05a4e820ae", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04ebef43242ade6be8968694caf56a0fb00a4d3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04ebef43242ade6be8968694caf56a0fb00a4d3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=b04ebef43242ade6be8968694caf56a0fb00a4d3", "patch": "@@ -511,7 +511,7 @@ impl<'a> Resolver<'a> {\n         let invocation = self.arenas.alloc_invocation_data(InvocationData {\n             module: Cell::new(self.get_extern_crate_root(def_id.krate)),\n             def_index: CRATE_DEF_INDEX,\n-            const_integer: false,\n+            const_expr: false,\n             legacy_scope: Cell::new(LegacyScope::Empty),\n             expansion: Cell::new(LegacyScope::Empty),\n         });"}, {"sha": "720d616e007d21ea5f6fc1d974756ea744bbca4e", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b04ebef43242ade6be8968694caf56a0fb00a4d3/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04ebef43242ade6be8968694caf56a0fb00a4d3/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=b04ebef43242ade6be8968694caf56a0fb00a4d3", "patch": "@@ -40,9 +40,9 @@ use syntax_pos::{Span, DUMMY_SP};\n pub struct InvocationData<'a> {\n     pub module: Cell<Module<'a>>,\n     pub def_index: DefIndex,\n-    // True if this expansion is in a `const_integer` position, for example `[u32; m!()]`.\n-    // c.f. `DefCollector::visit_ast_const_integer`.\n-    pub const_integer: bool,\n+    // True if this expansion is in a `const_expr` position, for example `[u32; m!()]`.\n+    // c.f. `DefCollector::visit_const_expr`.\n+    pub const_expr: bool,\n     // The scope in which the invocation path is resolved.\n     pub legacy_scope: Cell<LegacyScope<'a>>,\n     // The smallest scope that includes this invocation's expansion,\n@@ -55,7 +55,7 @@ impl<'a> InvocationData<'a> {\n         InvocationData {\n             module: Cell::new(graph_root),\n             def_index: CRATE_DEF_INDEX,\n-            const_integer: false,\n+            const_expr: false,\n             legacy_scope: Cell::new(LegacyScope::Empty),\n             expansion: Cell::new(LegacyScope::Empty),\n         }\n@@ -93,7 +93,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         self.invocations.insert(mark, self.arenas.alloc_invocation_data(InvocationData {\n             module: Cell::new(module),\n             def_index: module.def_id().unwrap().index,\n-            const_integer: false,\n+            const_expr: false,\n             legacy_scope: Cell::new(LegacyScope::Empty),\n             expansion: Cell::new(LegacyScope::Empty),\n         }));\n@@ -517,13 +517,13 @@ impl<'a> Resolver<'a> {\n \n     fn collect_def_ids(&mut self, invocation: &'a InvocationData<'a>, expansion: &Expansion) {\n         let Resolver { ref mut invocations, arenas, graph_root, .. } = *self;\n-        let InvocationData { def_index, const_integer, .. } = *invocation;\n+        let InvocationData { def_index, const_expr, .. } = *invocation;\n \n         let visit_macro_invoc = &mut |invoc: map::MacroInvocationData| {\n             invocations.entry(invoc.mark).or_insert_with(|| {\n                 arenas.alloc_invocation_data(InvocationData {\n                     def_index: invoc.def_index,\n-                    const_integer: invoc.const_integer,\n+                    const_expr: invoc.const_expr,\n                     module: Cell::new(graph_root),\n                     expansion: Cell::new(LegacyScope::Empty),\n                     legacy_scope: Cell::new(LegacyScope::Empty),\n@@ -534,9 +534,9 @@ impl<'a> Resolver<'a> {\n         let mut def_collector = DefCollector::new(&mut self.definitions);\n         def_collector.visit_macro_invoc = Some(visit_macro_invoc);\n         def_collector.with_parent(def_index, |def_collector| {\n-            if const_integer {\n+            if const_expr {\n                 if let Expansion::Expr(ref expr) = *expansion {\n-                    def_collector.visit_ast_const_integer(expr);\n+                    def_collector.visit_const_expr(expr);\n                 }\n             }\n             expansion.visit_with(def_collector)"}, {"sha": "db642812b4be4ae9402a356544ae54b3e561e0d3", "filename": "src/test/run-pass/issue-40136.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b04ebef43242ade6be8968694caf56a0fb00a4d3/src%2Ftest%2Frun-pass%2Fissue-40136.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04ebef43242ade6be8968694caf56a0fb00a4d3/src%2Ftest%2Frun-pass%2Fissue-40136.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-40136.rs?ref=b04ebef43242ade6be8968694caf56a0fb00a4d3", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+\n+macro_rules! m { () => { 0 } }\n+\n+trait T {\n+   const C: i32 = m!();\n+}\n+\n+struct S;\n+impl S {\n+    const C: i32 = m!();\n+}\n+\n+fn main() {}"}]}