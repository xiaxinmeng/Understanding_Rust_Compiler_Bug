{"sha": "2960a6cf0482ca45aab399836e8b46bad8f91a6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NjBhNmNmMDQ4MmNhNDVhYWIzOTk4MzZlOGI0NmJhZDhmOTFhNmU=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-02T00:43:50Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-15T16:25:21Z"}, "message": "Clarify the comments explaining the purpose of resolve_maybe_global_alloc.", "tree": {"sha": "2a631dbf23c4c208f772462f5339dbe2e7417a39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a631dbf23c4c208f772462f5339dbe2e7417a39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2960a6cf0482ca45aab399836e8b46bad8f91a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2960a6cf0482ca45aab399836e8b46bad8f91a6e", "html_url": "https://github.com/rust-lang/rust/commit/2960a6cf0482ca45aab399836e8b46bad8f91a6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2960a6cf0482ca45aab399836e8b46bad8f91a6e/comments", "author": null, "committer": null, "parents": [{"sha": "7e6dbd2b7f271aa773f754c4e5dd49ff046f12ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e6dbd2b7f271aa773f754c4e5dd49ff046f12ba", "html_url": "https://github.com/rust-lang/rust/commit/7e6dbd2b7f271aa773f754c4e5dd49ff046f12ba"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "8ac15bed689b346b981edfd9cb86ef8010034677", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2960a6cf0482ca45aab399836e8b46bad8f91a6e/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2960a6cf0482ca45aab399836e8b46bad8f91a6e/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=2960a6cf0482ca45aab399836e8b46bad8f91a6e", "patch": "@@ -243,8 +243,11 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     ///     locals in Miri is that in the internals of the compiler they look as\n     ///     normal statics, except that they have the `thread_local` attribute.\n     ///     However, in Miri we want to have a property that each allocation has\n-    ///     a unique id and, therefore, for these thread locals we generate a\n-    ///     fresh allocation id for each thread.\n+    ///     a unique id. Therefore, for these thread locals in\n+    ///     `canonical_alloc_id` we reserve fresh allocation ids for each\n+    ///     thread. Please note that `canonical_alloc_id` only reserves the\n+    ///     allocation ids, the actual allocation for the thread local statics\n+    ///     is done in the same way as for regular statics.\n     ///\n     /// This function must be idempotent.\n     #[inline]\n@@ -255,8 +258,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Called to obtain the `GlobalAlloc` associated with the allocation id.\n     ///\n     /// Miri uses this callback to resolve the information about the original\n-    /// thread local static for which `canonical_alloc_id` generated a fresh\n-    /// allocation id.\n+    /// thread local static for which `canonical_alloc_id` reserved a fresh\n+    /// allocation id. Since `canonical_alloc_id` does not create the actual\n+    /// allocation and the reserved allocation id has no reference to its\n+    /// parent, we need to ask Miri to retrieve information for us.\n     #[inline(always)]\n     fn resolve_maybe_global_alloc(\n         tcx: TyCtxtAt<'tcx>,"}, {"sha": "69ab96132b973f0120427434fb3961115d5c5363", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2960a6cf0482ca45aab399836e8b46bad8f91a6e/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2960a6cf0482ca45aab399836e8b46bad8f91a6e/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=2960a6cf0482ca45aab399836e8b46bad8f91a6e", "patch": "@@ -429,6 +429,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         id: AllocId,\n         is_write: bool,\n     ) -> InterpResult<'tcx, Cow<'tcx, Allocation<M::PointerTag, M::AllocExtra>>> {\n+        // The call to `resolve_maybe_global_alloc` is needed to enable Miri to\n+        // support thread local statics. In `M::canonical_alloc_id`, for a\n+        // thread local static, Miri reserves a fresh allocation id, but the\n+        // actual allocation is left to the code that handles statics which\n+        // calls this function (`get_global_alloc`). Since the allocation id is\n+        // fresh, it has no information about the original static. The call to\n+        // `resolve_maybe_global_alloc` allows Miri to retrieve this information\n+        // for us.\n         let (alloc, def_id) = match M::resolve_maybe_global_alloc(tcx, memory_extra, id) {\n             Some(GlobalAlloc::Memory(mem)) => {\n                 // Memory of a constant or promoted or anonymous memory referenced by a static.\n@@ -589,6 +597,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n \n         // # Statics\n+        // The call to `resolve_maybe_global_alloc` is needed here because Miri\n+        // via the call to `canonical_alloc_id` above reserves fresh allocation\n+        // ids for thread local statics. However, the actual allocation is done\n+        // not in `canonical_alloc_id`, but in `get_raw` and `get_raw_mut`.\n+        // Since this function may get called before `get_raw`, we need to allow\n+        // Miri to retrieve the information about the static for us.\n         match M::resolve_maybe_global_alloc(self.tcx, &self.extra, id) {\n             Some(GlobalAlloc::Static(did)) => {\n                 // Use size and align of the type."}]}