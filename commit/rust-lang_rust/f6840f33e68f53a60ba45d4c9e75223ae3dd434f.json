{"sha": "f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ODQwZjMzZTY4ZjUzYTYwYmE0NWQ0YzllNzUyMjNhZTNkZDQzNGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-05T20:56:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-05T20:56:09Z"}, "message": "Auto merge of #67060 - Centril:rollup-hwhdx4h, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #66710 (weak-into-raw: Clarify some details in Safety)\n - #66863 (Check break target availability when checking breaks with values)\n - #67002 (Fix documentation of pattern for str::matches())\n - #67005 (capitalize Rust)\n - #67010 (Accurately portray raw identifiers in error messages)\n - #67011 (Include a span in more `expected...found` notes)\n - #67044 (E0023: handle expected != tuple pattern type)\n - #67045 (rustc_parser: cleanup imports)\n - #67055 (Make const-qualification look at more `const fn`s)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "33941326d3aff9a3d71e06f012e66989fadf82e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33941326d3aff9a3d71e06f012e66989fadf82e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "html_url": "https://github.com/rust-lang/rust/commit/f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "710a362dc7634fce42885327b6b7b1b3a9b0c41a", "url": "https://api.github.com/repos/rust-lang/rust/commits/710a362dc7634fce42885327b6b7b1b3a9b0c41a", "html_url": "https://github.com/rust-lang/rust/commit/710a362dc7634fce42885327b6b7b1b3a9b0c41a"}, {"sha": "a008aff0758268c03496d25686cf74e270cef8ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/a008aff0758268c03496d25686cf74e270cef8ba", "html_url": "https://github.com/rust-lang/rust/commit/a008aff0758268c03496d25686cf74e270cef8ba"}], "stats": {"total": 892, "additions": 636, "deletions": 256}, "files": [{"sha": "26727c5c1db6039702653ed28a54400d13211777", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -3806,7 +3806,6 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_lexer\",\n- \"rustc_target\",\n  \"smallvec 1.0.0\",\n  \"syntax\",\n  \"syntax_pos\","}, {"sha": "1ff1c3c834f4ea4c10b3ed5133ec765601f040bf", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -1648,10 +1648,8 @@ impl<T> Weak<T> {\n \n     /// Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n     ///\n-    /// It is up to the caller to ensure that the object is still alive when accessing it through\n-    /// the pointer.\n-    ///\n-    /// The pointer may be [`null`] or be dangling in case the object has already been destroyed.\n+    /// The pointer is valid only if there are some strong references. The pointer may be dangling\n+    /// or even [`null`] otherwise.\n     ///\n     /// # Examples\n     ///\n@@ -1731,14 +1729,18 @@ impl<T> Weak<T> {\n     /// This can be used to safely get a strong reference (by calling [`upgrade`]\n     /// later) or to deallocate the weak count by dropping the `Weak<T>`.\n     ///\n-    /// It takes ownership of one weak count. In case a [`null`] is passed, a dangling [`Weak`] is\n-    /// returned.\n+    /// It takes ownership of one weak count (with the exception of pointers created by [`new`],\n+    /// as these don't have any corresponding weak count).\n     ///\n     /// # Safety\n     ///\n-    /// The pointer must represent one valid weak count. In other words, it must point to `T` which\n-    /// is or *was* managed by an [`Rc`] and the weak count of that [`Rc`] must not have reached\n-    /// 0. It is allowed for the strong count to be 0.\n+    /// The pointer must have originated from the [`into_raw`] (or [`as_raw`], provided there was\n+    /// a corresponding [`forget`] on the `Weak<T>`) and must still own its potential weak reference\n+    /// count.\n+    ///\n+    /// It is allowed for the strong count to be 0 at the time of calling this, but the weak count\n+    /// must be non-zero or the pointer must have originated from a dangling `Weak<T>` (one created\n+    /// by [`new`]).\n     ///\n     /// # Examples\n     ///\n@@ -1763,11 +1765,13 @@ impl<T> Weak<T> {\n     /// assert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n     /// ```\n     ///\n-    /// [`null`]: ../../std/ptr/fn.null.html\n     /// [`into_raw`]: struct.Weak.html#method.into_raw\n     /// [`upgrade`]: struct.Weak.html#method.upgrade\n     /// [`Rc`]: struct.Rc.html\n     /// [`Weak`]: struct.Weak.html\n+    /// [`as_raw`]: struct.Weak.html#method.as_raw\n+    /// [`new`]: struct.Weak.html#method.new\n+    /// [`forget`]: ../../std/mem/fn.forget.html\n     #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n         if ptr.is_null() {"}, {"sha": "19b0086fa333cc1a25005ff83c99b105c55232eb", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -1324,10 +1324,8 @@ impl<T> Weak<T> {\n \n     /// Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n     ///\n-    /// It is up to the caller to ensure that the object is still alive when accessing it through\n-    /// the pointer.\n-    ///\n-    /// The pointer may be [`null`] or be dangling in case the object has already been destroyed.\n+    /// The pointer is valid only if there are some strong references. The pointer may be dangling\n+    /// or even [`null`] otherwise.\n     ///\n     /// # Examples\n     ///\n@@ -1408,14 +1406,18 @@ impl<T> Weak<T> {\n     /// This can be used to safely get a strong reference (by calling [`upgrade`]\n     /// later) or to deallocate the weak count by dropping the `Weak<T>`.\n     ///\n-    /// It takes ownership of one weak count. In case a [`null`] is passed, a dangling [`Weak`] is\n-    /// returned.\n+    /// It takes ownership of one weak count (with the exception of pointers created by [`new`],\n+    /// as these don't have any corresponding weak count).\n     ///\n     /// # Safety\n     ///\n-    /// The pointer must represent one valid weak count. In other words, it must point to `T` which\n-    /// is or *was* managed by an [`Arc`] and the weak count of that [`Arc`] must not have reached\n-    /// 0. It is allowed for the strong count to be 0.\n+    /// The pointer must have originated from the [`into_raw`] (or [`as_raw'], provided there was\n+    /// a corresponding [`forget`] on the `Weak<T>`) and must still own its potential weak reference\n+    /// count.\n+    ///\n+    /// It is allowed for the strong count to be 0 at the time of calling this, but the weak count\n+    /// must be non-zero or the pointer must have originated from a dangling `Weak<T>` (one created\n+    /// by [`new`]).\n     ///\n     /// # Examples\n     ///\n@@ -1440,11 +1442,13 @@ impl<T> Weak<T> {\n     /// assert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n     /// ```\n     ///\n-    /// [`null`]: ../../std/ptr/fn.null.html\n+    /// [`as_raw`]: struct.Weak.html#method.as_raw\n+    /// [`new`]: struct.Weak.html#method.new\n     /// [`into_raw`]: struct.Weak.html#method.into_raw\n     /// [`upgrade`]: struct.Weak.html#method.upgrade\n     /// [`Weak`]: struct.Weak.html\n     /// [`Arc`]: struct.Arc.html\n+    /// [`forget`]: ../../std/mem/fn.forget.html\n     #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n         if ptr.is_null() {"}, {"sha": "188ea1a96311635c7ef5a3fd90daa960573bb6b7", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -74,6 +74,8 @@\n #![feature(const_fn)]\n #![feature(const_fn_union)]\n #![feature(const_generics)]\n+#![cfg_attr(not(bootstrap), feature(const_ptr_offset_from))]\n+#![cfg_attr(not(bootstrap), feature(const_type_name))]\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]"}, {"sha": "b2a420f3c43778cc06d992c62dbaaa89410f931a", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -3371,8 +3371,8 @@ impl str {\n     /// An iterator over the disjoint matches of a pattern within the given string\n     /// slice.\n     ///\n-    /// The pattern can be any type that implements the Pattern trait. Notable\n-    /// examples are `&str`, [`char`], and closures that determines the split.\n+    /// The pattern can be a `&str`, [`char`], or a closure that determines if\n+    /// a character matches.\n     ///\n     /// # Iterator behavior\n     ///"}, {"sha": "6e1aac00c7bc5401e536dcba652394b4afb6428e", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -27,7 +27,7 @@\n //!\n //! Atomic variables are safe to share between threads (they implement [`Sync`])\n //! but they do not themselves provide the mechanism for sharing and follow the\n-//! [threading model](../../../std/thread/index.html#the-threading-model) of rust.\n+//! [threading model](../../../std/thread/index.html#the-threading-model) of Rust.\n //! The most common way to share an atomic variable is to put it into an [`Arc`][arc] (an\n //! atomically-reference-counted shared pointer).\n //!"}, {"sha": "58c1498faa9dedbe017a69f05f810dcb2af0a3b0", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -1809,12 +1809,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             sub_region,\n                             \"...\",\n                         );\n-                        err.note(&format!(\n-                            \"...so that the {}:\\nexpected {}\\n   found {}\",\n-                            sup_trace.cause.as_requirement_str(),\n-                            sup_expected.content(),\n-                            sup_found.content()\n+                        err.span_note(sup_trace.cause.span, &format!(\n+                            \"...so that the {}\",\n+                            sup_trace.cause.as_requirement_str()\n                         ));\n+\n+                        err.note_expected_found(\n+                            &\"\",\n+                            sup_expected,\n+                            &\"\",\n+                            sup_found\n+                        );\n                         err.emit();\n                         return;\n                     }"}, {"sha": "4b933735fc75f4eb472869de845881a0b0750c20", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -13,12 +13,20 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         match *origin {\n             infer::Subtype(ref trace) => {\n                 if let Some((expected, found)) = self.values_str(&trace.values) {\n-                    let expected = expected.content();\n-                    let found = found.content();\n-                    err.note(&format!(\"...so that the {}:\\nexpected {}\\n   found {}\",\n-                                      trace.cause.as_requirement_str(),\n-                                      expected,\n-                                      found));\n+                    err.span_note(\n+                        trace.cause.span,\n+                        &format!(\n+                            \"...so that the {}\",\n+                            trace.cause.as_requirement_str()\n+                        )\n+                    );\n+\n+                    err.note_expected_found(\n+                        &\"\",\n+                        expected,\n+                        &\"\",\n+                        found\n+                    );\n                 } else {\n                     // FIXME: this really should be handled at some earlier stage. Our\n                     // handling of region checking when type errors are present is"}, {"sha": "745f7d0276d809b28df9739c6e67ef5cbbeba1e1", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -1282,6 +1282,9 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n             if !self.empty_path {\n                 write!(self, \"::\")?;\n             }\n+            if ast::Ident::from_str(&name).is_raw_guess() {\n+                write!(self, \"r#\")?;\n+            }\n             write!(self, \"{}\", name)?;\n \n             // FIXME(eddyb) this will print e.g. `{{closure}}#3`, but it"}, {"sha": "82ffafbedf858724571b055a50119eced8224008", "filename": "src/librustc_mir/transform/check_consts/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -77,7 +77,12 @@ impl ConstKind {\n         let mode = match tcx.hir().body_owner_kind(hir_id) {\n             HirKind::Closure => return None,\n \n-            HirKind::Fn if tcx.is_const_fn(def_id) => ConstKind::ConstFn,\n+            // Note: this is deliberately checking for `is_const_fn_raw`, as the `is_const_fn`\n+            // checks take into account the `rustc_const_unstable` attribute combined with enabled\n+            // feature gates. Otherwise, const qualification would _not check_ whether this\n+            // function body follows the `const fn` rules, as an unstable `const fn` would\n+            // be considered \"not const\". More details are available in issue #67053.\n+            HirKind::Fn if tcx.is_const_fn_raw(def_id) => ConstKind::ConstFn,\n             HirKind::Fn => return None,\n \n             HirKind::Const => ConstKind::Const,"}, {"sha": "fb5cb742ab651dbd5a4af95cc6489f57c7ba8367", "filename": "src/librustc_parse/Cargo.toml", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -12,12 +12,11 @@ doctest = false\n [dependencies]\n bitflags = \"1.0\"\n log = \"0.4\"\n-syntax_pos = { path = \"../libsyntax_pos\" }\n-syntax = { path = \"../libsyntax\" }\n-errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n-rustc_target = { path = \"../librustc_target\" }\n-smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n+syntax = { path = \"../libsyntax\" }"}, {"sha": "30e056e52d25acd58b770a1d27145e2cb81fc5fd", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -10,6 +10,7 @@\n \n use crate::validate_attr;\n use rustc_feature::Features;\n+use rustc_errors::Applicability;\n use syntax::attr::HasAttrs;\n use syntax::feature_gate::{feature_err, get_features};\n use syntax::attr;\n@@ -21,7 +22,6 @@ use syntax::sess::ParseSess;\n use syntax::util::map_in_place::MapInPlace;\n use syntax_pos::symbol::sym;\n \n-use errors::Applicability;\n use smallvec::SmallVec;\n \n /// A folder that strips out items that do not belong in the current configuration."}, {"sha": "ddcfea189800413e35c77da51d2a5e70bcaeacbd", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -1,16 +1,15 @@\n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{FatalError, DiagnosticBuilder};\n+use rustc_lexer::Base;\n+use rustc_lexer::unescape;\n use syntax::token::{self, Token, TokenKind};\n use syntax::sess::ParseSess;\n-use syntax::symbol::{sym, Symbol};\n use syntax::util::comments;\n-\n-use errors::{FatalError, DiagnosticBuilder};\n+use syntax_pos::symbol::{sym, Symbol};\n use syntax_pos::{BytePos, Pos, Span};\n-use rustc_lexer::Base;\n-use rustc_lexer::unescape;\n \n use std::char;\n use std::convert::TryInto;\n-use rustc_data_structures::sync::Lrc;\n use log::debug;\n \n mod tokentrees;"}, {"sha": "5791c6396c5840b351648ee0c4438215a76e0db0", "filename": "src/librustc_parse/lexer/tokentrees.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -1,13 +1,11 @@\n-use rustc_data_structures::fx::FxHashMap;\n-use syntax_pos::Span;\n-\n use super::{StringReader, UnmatchedBrace};\n \n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::PResult;\n use syntax::print::pprust::token_to_string;\n use syntax::token::{self, Token};\n use syntax::tokenstream::{DelimSpan, IsJoint::{self, *}, TokenStream, TokenTree, TreeAndJoint};\n-\n-use errors::PResult;\n+use syntax_pos::Span;\n \n impl<'a> StringReader<'a> {\n     crate fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {"}, {"sha": "edfebc7de94032ce457640ca893113b247db7d09", "filename": "src/librustc_parse/lexer/unicode_chars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Funicode_chars.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -2,9 +2,9 @@\n // http://www.unicode.org/Public/security/10.0.0/confusables.txt\n \n use super::StringReader;\n-use errors::{Applicability, DiagnosticBuilder};\n-use syntax_pos::{BytePos, Pos, Span, symbol::kw};\n use crate::token;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n+use syntax_pos::{BytePos, Pos, Span, symbol::kw};\n \n #[rustfmt::skip] // for line breaks\n const UNICODE_ARRAY: &[(char, &str, char)] = &["}, {"sha": "a222f3f00c4633fe4a0a47f2ad8d7be6b15d6944", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -8,7 +8,7 @@ use syntax::sess::ParseSess;\n use syntax::token::{self, Nonterminal};\n use syntax::tokenstream::{self, TokenStream, TokenTree};\n \n-use errors::{PResult, FatalError, Level, Diagnostic};\n+use rustc_errors::{PResult, FatalError, Level, Diagnostic};\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::{Span, SourceFile, FileName};\n \n@@ -53,7 +53,7 @@ pub enum DirectoryOwnership {\n macro_rules! panictry_buffer {\n     ($handler:expr, $e:expr) => ({\n         use std::result::Result::{Ok, Err};\n-        use errors::FatalError;\n+        use rustc_errors::FatalError;\n         match $e {\n             Ok(e) => e,\n             Err(errs) => {"}, {"sha": "b2ae934ce64746f879ab94d8e277205cb10ebd07", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -1,10 +1,10 @@\n use super::{SeqSep, Parser, TokenType, PathStyle};\n+use rustc_errors::PResult;\n use syntax::attr;\n use syntax::ast;\n use syntax::util::comments;\n use syntax::token::{self, Nonterminal};\n use syntax_pos::{Span, Symbol};\n-use errors::PResult;\n \n use log::debug;\n "}, {"sha": "ba125cacab48b78a79a7c4e4178dd89cd90d133e", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -1,25 +1,22 @@\n use super::{BlockMode, PathStyle, SemiColonMode, TokenType, TokenExpectType, SeqSep, Parser};\n \n-use syntax::ast::{\n-    self, Param, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, ItemKind,\n-    Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind,\n-};\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::{self, PResult, Applicability, DiagnosticBuilder, Handler, pluralize};\n+use rustc_error_codes::*;\n+use syntax::ast::{self, Param, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item};\n+use syntax::ast::{ItemKind, Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind};\n use syntax::token::{self, TokenKind, token_can_begin_expr};\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::symbol::{kw, sym};\n use syntax::ThinVec;\n use syntax::util::parser::AssocOp;\n use syntax::struct_span_err;\n-\n-use errors::{PResult, Applicability, DiagnosticBuilder, pluralize};\n-use rustc_data_structures::fx::FxHashSet;\n+use syntax_pos::symbol::{kw, sym};\n use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n+\n use log::{debug, trace};\n use std::mem;\n \n-use rustc_error_codes::*;\n-\n const TURBOFISH: &'static str = \"use `::<...>` instead of `<...>` to specify type arguments\";\n \n /// Creates a placeholder argument.\n@@ -61,10 +58,10 @@ pub enum Error {\n }\n \n impl Error {\n-    fn span_err<S: Into<MultiSpan>>(\n+    fn span_err(\n         self,\n-        sp: S,\n-        handler: &errors::Handler,\n+        sp: impl Into<MultiSpan>,\n+        handler: &Handler,\n     ) -> DiagnosticBuilder<'_> {\n         match self {\n             Error::FileNotFoundForModule {\n@@ -212,7 +209,7 @@ impl<'a> Parser<'a> {\n         self.sess.span_diagnostic.span_bug(sp, m)\n     }\n \n-    pub(super) fn diagnostic(&self) -> &'a errors::Handler {\n+    pub(super) fn diagnostic(&self) -> &'a Handler {\n         &self.sess.span_diagnostic\n     }\n "}, {"sha": "3cd4988ce0be5a5a505d2ce6dce5a1ce6dffb8e1", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -4,23 +4,20 @@ use super::pat::{GateOr, PARAM_EXPECTED};\n use super::diagnostics::Error;\n use crate::maybe_recover_from_interpolated_ty_qpath;\n \n-use syntax::ast::{\n-    self, DUMMY_NODE_ID, Attribute, AttrStyle, Ident, CaptureBy, BlockCheckMode,\n-    Expr, ExprKind, RangeLimits, Label, Movability, IsAsync, Arm, Ty, TyKind,\n-    FunctionRetTy, Param, FnDecl, BinOpKind, BinOp, UnOp, Mac, AnonConst, Field, Lit,\n-};\n+use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_errors::{PResult, Applicability};\n+use syntax::ast::{self, DUMMY_NODE_ID, Attribute, AttrStyle, Ident, CaptureBy, BlockCheckMode};\n+use syntax::ast::{Expr, ExprKind, RangeLimits, Label, Movability, IsAsync, Arm, Ty, TyKind};\n+use syntax::ast::{FunctionRetTy, Param, FnDecl, BinOpKind, BinOp, UnOp, Mac, AnonConst, Field, Lit};\n use syntax::token::{self, Token, TokenKind};\n use syntax::print::pprust;\n use syntax::ptr::P;\n-use syntax::source_map::{self, Span};\n use syntax::util::classify;\n use syntax::util::literal::LitError;\n use syntax::util::parser::{AssocOp, Fixity, prec_let_scrutinee_needs_par};\n-use syntax_pos::symbol::{kw, sym};\n-use syntax_pos::Symbol;\n-use errors::{PResult, Applicability};\n+use syntax_pos::source_map::{self, Span};\n+use syntax_pos::symbol::{kw, sym, Symbol};\n use std::mem;\n-use rustc_data_structures::thin_vec::ThinVec;\n \n /// Possibly accepts an `token::Interpolated` expression (a pre-parsed expression\n /// dropped into the token stream, which happens while parsing the result of"}, {"sha": "32819cca42b23f3300e985efa220335125d21621", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -1,11 +1,11 @@\n use super::Parser;\n \n+use rustc_errors::PResult;\n use syntax::ast::{self, WhereClause, GenericParam, GenericParamKind, GenericBounds, Attribute};\n use syntax::token;\n use syntax::source_map::DUMMY_SP;\n use syntax_pos::symbol::{kw, sym};\n \n-use errors::PResult;\n \n impl<'a> Parser<'a> {\n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`."}, {"sha": "ccf78e6402b3c06c789384c4f763c5a85640d25f", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -3,6 +3,8 @@ use super::diagnostics::{Error, dummy_arg, ConsumeClosingDelim};\n \n use crate::maybe_whole;\n \n+use rustc_errors::{PResult, Applicability, DiagnosticBuilder, StashKey};\n+use rustc_error_codes::*;\n use syntax::ast::{self, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyle, AnonConst, Item};\n use syntax::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, UseTree, UseTreeKind};\n use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness, Extern, StrLit};\n@@ -14,16 +16,13 @@ use syntax::ptr::P;\n use syntax::ThinVec;\n use syntax::token;\n use syntax::tokenstream::{DelimSpan, TokenTree, TokenStream};\n-use syntax::source_map::{self, respan, Span};\n use syntax::struct_span_err;\n use syntax_pos::BytePos;\n+use syntax_pos::source_map::{self, respan, Span};\n use syntax_pos::symbol::{kw, sym, Symbol};\n \n-use rustc_error_codes::*;\n-\n use log::debug;\n use std::mem;\n-use errors::{PResult, Applicability, DiagnosticBuilder, StashKey};\n \n pub(super) type ItemInfo = (Ident, ItemKind, Option<Vec<Attribute>>);\n "}, {"sha": "07e99cfe01292cab7ed680b28ebe1f50d019f711", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -14,23 +14,20 @@ use diagnostics::Error;\n use crate::{Directory, DirectoryOwnership};\n use crate::lexer::UnmatchedBrace;\n \n-use syntax::ast::{\n-    self, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Extern, Ident, StrLit,\n-    IsAsync, MacArgs, MacDelimiter, Mutability, Visibility, VisibilityKind, Unsafety,\n-};\n-\n+use rustc_errors::{PResult, Applicability, DiagnosticBuilder, FatalError};\n+use rustc_data_structures::thin_vec::ThinVec;\n+use syntax::ast::{self, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Extern, Ident, StrLit};\n+use syntax::ast::{IsAsync, MacArgs, MacDelimiter, Mutability, Visibility, VisibilityKind, Unsafety};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::token::{self, Token, TokenKind, DelimToken};\n use syntax::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};\n use syntax::sess::ParseSess;\n-use syntax::source_map::respan;\n use syntax::struct_span_err;\n use syntax::util::comments::{doc_comment_style, strip_doc_comment_decoration};\n+use syntax_pos::source_map::respan;\n use syntax_pos::symbol::{kw, sym, Symbol};\n use syntax_pos::{Span, BytePos, DUMMY_SP, FileName};\n-use rustc_data_structures::thin_vec::ThinVec;\n-use errors::{PResult, Applicability, DiagnosticBuilder, FatalError};\n use log::debug;\n \n use std::borrow::Cow;"}, {"sha": "3777e17b5a15d95daa232c416cd844ebc773c446", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -4,13 +4,12 @@ use super::diagnostics::Error;\n \n use crate::{new_sub_parser_from_file, DirectoryOwnership};\n \n+use rustc_errors::PResult;\n use syntax::attr;\n use syntax::ast::{self, Ident, Attribute, ItemKind, Mod, Crate};\n use syntax::token::{self, TokenKind};\n-use syntax::source_map::{SourceMap, Span, DUMMY_SP, FileName};\n-\n+use syntax_pos::source_map::{SourceMap, Span, DUMMY_SP, FileName};\n use syntax_pos::symbol::sym;\n-use errors::PResult;\n \n use std::path::{self, Path, PathBuf};\n \n@@ -212,13 +211,13 @@ impl<'a> Parser<'a> {\n         // `./<id>.rs` and `./<id>/mod.rs`.\n         let relative_prefix_string;\n         let relative_prefix = if let Some(ident) = relative {\n-            relative_prefix_string = format!(\"{}{}\", ident, path::MAIN_SEPARATOR);\n+            relative_prefix_string = format!(\"{}{}\", ident.name, path::MAIN_SEPARATOR);\n             &relative_prefix_string\n         } else {\n             \"\"\n         };\n \n-        let mod_name = id.to_string();\n+        let mod_name = id.name.to_string();\n         let default_path_str = format!(\"{}{}.rs\", relative_prefix, mod_name);\n         let secondary_path_str = format!(\"{}{}{}mod.rs\",\n                                          relative_prefix, mod_name, path::MAIN_SEPARATOR);"}, {"sha": "42ece96adb99ab1dc8a261e89ec22b7ebb08a19a", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -1,15 +1,15 @@\n use super::{Parser, PathStyle};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n+use rustc_errors::{PResult, Applicability, DiagnosticBuilder};\n use syntax::ast::{self, Attribute, Pat, PatKind, FieldPat, RangeEnd, RangeSyntax, Mac};\n use syntax::ast::{BindingMode, Ident, Mutability, Path, QSelf, Expr, ExprKind};\n use syntax::mut_visit::{noop_visit_pat, noop_visit_mac, MutVisitor};\n use syntax::ptr::P;\n use syntax::print::pprust;\n use syntax::ThinVec;\n use syntax::token;\n-use syntax::source_map::{respan, Span, Spanned};\n+use syntax_pos::source_map::{respan, Span, Spanned};\n use syntax_pos::symbol::{kw, sym};\n-use errors::{PResult, Applicability, DiagnosticBuilder};\n \n type Expected = Option<&'static str>;\n "}, {"sha": "70c3458e7c0203095c5cb53249a94c741f95e56e", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -1,16 +1,16 @@\n use super::{Parser, TokenType};\n use crate::maybe_whole;\n+use rustc_errors::{PResult, Applicability, pluralize};\n use syntax::ast::{self, QSelf, Path, PathSegment, Ident, ParenthesizedArgs, AngleBracketedArgs};\n use syntax::ast::{AnonConst, GenericArg, AssocTyConstraint, AssocTyConstraintKind, BlockCheckMode};\n use syntax::ast::MacArgs;\n use syntax::ThinVec;\n use syntax::token::{self, Token};\n-use syntax::source_map::{Span, BytePos};\n+use syntax_pos::source_map::{Span, BytePos};\n use syntax_pos::symbol::{kw, sym};\n \n use std::mem;\n use log::debug;\n-use errors::{PResult, Applicability, pluralize};\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]"}, {"sha": "943b6ecc8255456feaa86f8f260608fc2d7a67f3", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -6,18 +6,18 @@ use super::diagnostics::Error;\n use crate::maybe_whole;\n use crate::DirectoryOwnership;\n \n+use rustc_errors::{PResult, Applicability};\n use syntax::ThinVec;\n use syntax::ptr::P;\n use syntax::ast;\n use syntax::ast::{DUMMY_NODE_ID, Stmt, StmtKind, Local, Block, BlockCheckMode, Expr, ExprKind};\n use syntax::ast::{Attribute, AttrStyle, VisibilityKind, MacStmtStyle, Mac};\n use syntax::util::classify;\n use syntax::token;\n-use syntax::source_map::{respan, Span};\n-use syntax::symbol::{kw, sym};\n+use syntax_pos::source_map::{respan, Span};\n+use syntax_pos::symbol::{kw, sym};\n \n use std::mem;\n-use errors::{PResult, Applicability};\n \n impl<'a> Parser<'a> {\n     /// Parses a statement. This stops just before trailing semicolons on everything but items."}, {"sha": "84ffef68e9a661af0cbe72851c9d2118aadb5da9", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -3,19 +3,17 @@ use super::item::ParamCfg;\n \n use crate::{maybe_whole, maybe_recover_from_interpolated_ty_qpath};\n \n+use rustc_errors::{PResult, Applicability, pluralize};\n+use rustc_error_codes::*;\n use syntax::ptr::P;\n use syntax::ast::{self, Ty, TyKind, MutTy, BareFnTy, FunctionRetTy, GenericParam, Lifetime, Ident};\n use syntax::ast::{TraitBoundModifier, TraitObjectSyntax, GenericBound, GenericBounds, PolyTraitRef};\n use syntax::ast::{Mutability, AnonConst, Mac};\n use syntax::token::{self, Token};\n-use syntax::source_map::Span;\n use syntax::struct_span_fatal;\n+use syntax_pos::source_map::Span;\n use syntax_pos::symbol::kw;\n \n-use errors::{PResult, Applicability, pluralize};\n-\n-use rustc_error_codes::*;\n-\n /// Returns `true` if `IDENT t` can start a type -- `IDENT::a::b`, `IDENT<u8, u8>`,\n /// `IDENT<<u8 as Trait>::AssocTy>`.\n ///"}, {"sha": "97e9cb8dcdf6fc9bf339a513de5166c23001db59", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -1,6 +1,6 @@\n //! Meta-syntax validation logic of attributes for post-expansion.\n \n-use errors::{PResult, Applicability};\n+use rustc_errors::{PResult, Applicability};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n use syntax::ast::{self, Attribute, AttrKind, Ident, MacArgs, MetaItem, MetaItemKind};\n use syntax::attr::mk_name_value_item_str;"}, {"sha": "32df6c4636c2d88338e4a791e0622f9de924d9af", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -65,13 +65,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub fn demand_eqtype_pat(\n+    pub fn demand_eqtype_pat_diag(\n         &self,\n         cause_span: Span,\n         expected: Ty<'tcx>,\n         actual: Ty<'tcx>,\n         match_expr_span: Option<Span>,\n-    ) {\n+    ) -> Option<DiagnosticBuilder<'tcx>> {\n         let cause = if let Some(span) = match_expr_span {\n             self.cause(\n                 cause_span,\n@@ -80,9 +80,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             self.misc(cause_span)\n         };\n-        self.demand_eqtype_with_origin(&cause, expected, actual).map(|mut err| err.emit());\n+        self.demand_eqtype_with_origin(&cause, expected, actual)\n     }\n \n+    pub fn demand_eqtype_pat(\n+        &self,\n+        cause_span: Span,\n+        expected: Ty<'tcx>,\n+        actual: Ty<'tcx>,\n+        match_expr_span: Option<Span>,\n+    ) {\n+        self.demand_eqtype_pat_diag(cause_span, expected, actual, match_expr_span)\n+            .map(|mut err| err.emit());\n+    }\n \n     pub fn demand_coerce(&self,\n                          expr: &hir::Expr,"}, {"sha": "5bfc60c75406745e0c0a7ac2c2db42eca0599edf", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -582,11 +582,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // If this is a break with a value, we need to type-check\n                 // the expression. Get an expected type from the loop context.\n                 let opt_coerce_to = {\n+                    // We should release `enclosing_breakables` before the `check_expr_with_hint`\n+                    // below, so can't move this block of code to the enclosing scope and share\n+                    // `ctxt` with the second `encloding_breakables` borrow below.\n                     let mut enclosing_breakables = self.enclosing_breakables.borrow_mut();\n-                    enclosing_breakables.find_breakable(target_id)\n-                                        .coerce\n-                                        .as_ref()\n-                                        .map(|coerce| coerce.expected_ty())\n+                    match enclosing_breakables.opt_find_breakable(target_id) {\n+                        Some(ctxt) =>\n+                            ctxt.coerce.as_ref().map(|coerce| coerce.expected_ty()),\n+                        None => { // Avoid ICE when `break` is inside a closure (#65383).\n+                            self.tcx.sess.delay_span_bug(\n+                                expr.span,\n+                                \"break was outside loop, but no error was emitted\",\n+                            );\n+                            return tcx.types.err;\n+                        }\n+                    }\n                 };\n \n                 // If the loop context is not a `loop { }`, then break with"}, {"sha": "71d1cd869a6a2df33e25deb6c199e4763699ff44", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -703,7 +703,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let pat_ty = pat_ty.fn_sig(tcx).output();\n         let pat_ty = pat_ty.no_bound_vars().expect(\"expected fn type\");\n \n-        self.demand_eqtype_pat(pat.span, expected, pat_ty, match_arm_pat_span);\n+        // Type-check the tuple struct pattern against the expected type.\n+        let diag = self.demand_eqtype_pat_diag(pat.span, expected, pat_ty, match_arm_pat_span);\n+        let had_err = diag.is_some();\n+        diag.map(|mut err| err.emit());\n \n         // Type-check subpatterns.\n         if subpats.len() == variant.fields.len()\n@@ -721,7 +724,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         } else {\n             // Pattern has wrong number of fields.\n-            self.e0023(pat.span, res, qpath, subpats, &variant.fields, expected);\n+            self.e0023(pat.span, res, qpath, subpats, &variant.fields, expected, had_err);\n             on_error();\n             return tcx.types.err;\n         }\n@@ -734,8 +737,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         res: Res,\n         qpath: &hir::QPath,\n         subpats: &'tcx [P<Pat>],\n-        fields: &[ty::FieldDef],\n-        expected: Ty<'tcx>\n+        fields: &'tcx [ty::FieldDef],\n+        expected: Ty<'tcx>,\n+        had_err: bool,\n     ) {\n         let subpats_ending = pluralize!(subpats.len());\n         let fields_ending = pluralize!(fields.len());\n@@ -763,9 +767,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // More generally, the expected type wants a tuple variant with one field of an\n         // N-arity-tuple, e.g., `V_i((p_0, .., p_N))`. Meanwhile, the user supplied a pattern\n         // with the subpatterns directly in the tuple variant pattern, e.g., `V_i(p_0, .., p_N)`.\n-        let missing_parenthesis = match expected.kind {\n-            ty::Adt(_, substs) if fields.len() == 1 => {\n-                let field_ty = fields[0].ty(self.tcx, substs);\n+        let missing_parenthesis = match (&expected.kind, fields, had_err) {\n+            // #67037: only do this if we could sucessfully type-check the expected type against\n+            // the tuple struct pattern. Otherwise the substs could get out of range on e.g.,\n+            // `let P() = U;` where `P != U` with `struct P<T>(T);`.\n+            (ty::Adt(_, substs), [field], false) => {\n+                let field_ty = self.field_ty(pat_span, field, substs);\n                 match field_ty.kind {\n                     ty::Tuple(_) => field_ty.tuple_fields().count() == subpats.len(),\n                     _ => false,"}, {"sha": "c68e03be88c045fb2de599346b6c95c5bef278dd", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -869,12 +869,18 @@ impl Hash for Ident {\n \n impl fmt::Debug for Ident {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        if self.is_raw_guess() {\n+            write!(f, \"r#\")?;\n+        }\n         write!(f, \"{}{:?}\", self.name, self.span.ctxt())\n     }\n }\n \n impl fmt::Display for Ident {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        if self.is_raw_guess() {\n+            write!(f, \"r#\")?;\n+        }\n         fmt::Display::fmt(&self.name, f)\n     }\n }"}, {"sha": "3e39c8a7924467918d8b96c642199c002f5c61b1", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -9,13 +9,21 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the fun\n    |\n LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n    |        ^^\n-   = note: ...so that the expression is assignable:\n-           expected Type<'_>\n-              found Type<'a>\n+note: ...so that the expression is assignable\n+  --> $DIR/project-fn-ret-invariant.rs:48:13\n+   |\n+LL |    bar(foo, x)\n+   |             ^\n+   = note: expected  `Type<'_>`\n+              found  `Type<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the expression is assignable:\n-           expected Type<'static>\n-              found Type<'_>\n+note: ...so that the expression is assignable\n+  --> $DIR/project-fn-ret-invariant.rs:48:4\n+   |\n+LL |    bar(foo, x)\n+   |    ^^^^^^^^^^^\n+   = note: expected  `Type<'static>`\n+              found  `Type<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "cd4cd8b198de8b4ee3ad4d8dc4864397589260d6", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -49,9 +49,13 @@ note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on th\n    |\n LL |     let _ = ap.with_copy(|ap| { ap });\n    |                          ^^^^^^^^^^^\n-   = note: ...so that the expression is assignable:\n-           expected core::ffi::VaList<'_, '_>\n-              found core::ffi::VaList<'_, '_>\n+note: ...so that the expression is assignable\n+  --> $DIR/variadic-ffi-4.rs:16:33\n+   |\n+LL |     let _ = ap.with_copy(|ap| { ap });\n+   |                                 ^^\n+   = note: expected  `core::ffi::VaList<'_, '_>`\n+              found  `core::ffi::VaList<'_, '_>`\n note: but, the lifetime must be valid for the method call at 16:13...\n   --> $DIR/variadic-ffi-4.rs:16:13\n    |"}, {"sha": "cad1516fc78d0bec0b883983ce5fe2215e8ce53e", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -0,0 +1,29 @@\n+// This is a non-regression test for const-qualification of unstable items in libcore\n+// as explained in issue #67053.\n+// const-qualification could miss some `const fn`s if they were unstable and the feature\n+// gate was not enabled in libcore.\n+\n+#![stable(feature = \"core\", since = \"1.6.0\")]\n+#![feature(const_if_match)]\n+#![feature(rustc_const_unstable)]\n+#![feature(staged_api)]\n+\n+enum Opt<T> {\n+    Some(T),\n+    None,\n+}\n+\n+impl<T> Opt<T> {\n+    #[rustc_const_unstable(feature = \"foo\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n+    //~^ ERROR destructors cannot be evaluated at compile-time\n+    //~| ERROR destructors cannot be evaluated at compile-time\n+        match self {\n+            Opt::Some(t) => t,\n+            Opt::None => f(), //~ ERROR E0015\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a8455cefd01cf94a8d45caaae57d0c5b42dcf64e", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -0,0 +1,22 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/unstable-const-fn-in-libcore.rs:24:26\n+   |\n+LL |             Opt::None => f(),\n+   |                          ^^^\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/unstable-const-fn-in-libcore.rs:19:53\n+   |\n+LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n+   |                                                     ^ constant functions cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/unstable-const-fn-in-libcore.rs:19:47\n+   |\n+LL |     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n+   |                                               ^^^^ constant functions cannot evaluate destructors\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0015, E0493.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "3300293bb36caf2e8822d7b89b53f472c5b0cdd4", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -9,13 +9,21 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the fun\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    |                          ^^\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<dyn std::fmt::Debug>\n-              found std::boxed::Box<(dyn std::fmt::Debug + 'a)>\n+note: ...so that the expression is assignable\n+  --> $DIR/dyn-trait.rs:20:16\n+   |\n+LL |     static_val(x);\n+   |                ^\n+   = note: expected  `std::boxed::Box<dyn std::fmt::Debug>`\n+              found  `std::boxed::Box<(dyn std::fmt::Debug + 'a)>`\n    = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the types are compatible:\n-           expected StaticTrait\n-              found StaticTrait\n+note: ...so that the types are compatible\n+  --> $DIR/dyn-trait.rs:20:5\n+   |\n+LL |     static_val(x);\n+   |     ^^^^^^^^^^\n+   = note: expected  `StaticTrait`\n+              found  `StaticTrait`\n \n error: aborting due to previous error\n "}, {"sha": "99700f2084e4a23aa6d159b7b1e83724dfcf2521", "filename": "src/test/ui/issues/issue-16683.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -21,9 +21,13 @@ note: but, the lifetime must be valid for the lifetime `'a` as defined on the tr\n    |\n LL | trait T<'a> {\n    |         ^^\n-   = note: ...so that the types are compatible:\n-           expected &'a Self\n-              found &Self\n+note: ...so that the types are compatible\n+  --> $DIR/issue-16683.rs:4:14\n+   |\n+LL |         self.a();\n+   |              ^\n+   = note: expected  `&'a Self`\n+              found  `&Self`\n \n error: aborting due to previous error\n "}, {"sha": "adfc3f5085826b020f35e2bc688eec204833b4a3", "filename": "src/test/ui/issues/issue-17758.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -22,9 +22,13 @@ note: but, the lifetime must be valid for the lifetime `'a` as defined on the tr\n    |\n LL | trait Foo<'a> {\n    |           ^^\n-   = note: ...so that the types are compatible:\n-           expected &'a Self\n-              found &Self\n+note: ...so that the types are compatible\n+  --> $DIR/issue-17758.rs:7:14\n+   |\n+LL |         self.foo();\n+   |              ^^^\n+   = note: expected  `&'a Self`\n+              found  `&Self`\n \n error: aborting due to previous error\n "}, {"sha": "c7fd134a129decdd7352545c9946fd7fedb4a70d", "filename": "src/test/ui/issues/issue-20831-debruijn.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20831-debruijn.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -88,9 +88,19 @@ note: ...but the lifetime must also be valid for the lifetime `'a` as defined on\n    |\n LL | impl<'a> Publisher<'a> for MyStruct<'a> {\n    |      ^^\n-   = note: ...so that the types are compatible:\n-           expected Publisher<'_>\n-              found Publisher<'_>\n+note: ...so that the types are compatible\n+  --> $DIR/issue-20831-debruijn.rs:28:5\n+   |\n+LL | /     fn subscribe(&mut self, t : Box<dyn Subscriber<Input=<Self as Publisher>::Output> + 'a>) {\n+LL | |         // Not obvious, but there is an implicit lifetime here -------^\n+LL | |\n+LL | |\n+...  |\n+LL | |         self.sub = t;\n+LL | |     }\n+   | |_____^\n+   = note: expected  `Publisher<'_>`\n+              found  `Publisher<'_>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a8960f7756367c6fecfa173ebec89a4ee5b2abc5", "filename": "src/test/ui/issues/issue-52213.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the fun\n    |\n LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n    |                       ^^\n-   = note: ...so that the types are compatible:\n-           expected (&&(T,),)\n-              found (&&'a (T,),)\n+note: ...so that the types are compatible\n+  --> $DIR/issue-52213.rs:2:11\n+   |\n+LL |     match (&t,) {\n+   |           ^^^^^\n+   = note: expected  `(&&(T,),)`\n+              found  `(&&'a (T,),)`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 1:27...\n   --> $DIR/issue-52213.rs:1:27\n    |"}, {"sha": "b8cafdc5c14b5e8a89a2bd6aab63f2a2a19aea0c", "filename": "src/test/ui/issues/issue-55796.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -15,9 +15,13 @@ note: ...so that the type `std::iter::Map<<Self as Graph<'a>>::EdgesIter, [closu\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>\n-              found std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>\n+note: ...so that the expression is assignable\n+  --> $DIR/issue-55796.rs:16:9\n+   |\n+LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n+              found  `std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/issue-55796.rs:21:9\n@@ -36,9 +40,13 @@ note: ...so that the type `std::iter::Map<<Self as Graph<'a>>::EdgesIter, [closu\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>\n-              found std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>\n+note: ...so that the expression is assignable\n+  --> $DIR/issue-55796.rs:21:9\n+   |\n+LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `std::boxed::Box<(dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node> + 'static)>`\n+              found  `std::boxed::Box<dyn std::iter::Iterator<Item = <Self as Graph<'a>>::Node>>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b928510258b2f4a13fb4601473ff5d2d71e9a362", "filename": "src/test/ui/issues/issue-65634-raw-ident-suggestion.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -0,0 +1,22 @@\n+#![allow(non_camel_case_types)]\n+\n+trait r#async {\n+    fn r#struct(&self) {\n+        println!(\"async\");\n+    }\n+}\n+\n+trait r#await {\n+    fn r#struct(&self) {\n+        println!(\"await\");\n+    }\n+}\n+\n+struct r#fn {}\n+\n+impl r#async for r#fn {}\n+impl r#await for r#fn {}\n+\n+fn main() {\n+    r#fn {}.r#struct(); //~ ERROR multiple applicable items in scope\n+}"}, {"sha": "c7bb653dc1f147b46c2aa718b54ea1211c2ce2ea", "filename": "src/test/ui/issues/issue-65634-raw-ident-suggestion.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -0,0 +1,22 @@\n+error[E0034]: multiple applicable items in scope\n+  --> $DIR/issue-65634-raw-ident-suggestion.rs:21:13\n+   |\n+LL |     r#fn {}.r#struct();\n+   |             ^^^^^^^^ multiple `r#struct` found\n+   |\n+note: candidate #1 is defined in an impl of the trait `async` for the type `r#fn`\n+  --> $DIR/issue-65634-raw-ident-suggestion.rs:4:5\n+   |\n+LL |     fn r#struct(&self) {\n+   |     ^^^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `async::r#struct(r#fn {})` instead\n+note: candidate #2 is defined in an impl of the trait `await` for the type `r#fn`\n+  --> $DIR/issue-65634-raw-ident-suggestion.rs:10:5\n+   |\n+LL |     fn r#struct(&self) {\n+   |     ^^^^^^^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `await::r#struct(r#fn {})` instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0034`."}, {"sha": "bd3c00d2621282576c2585ce3d483b3f3458cb3f", "filename": "src/test/ui/issues/issue-66702-break-outside-loop-val.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-66702-break-outside-loop-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-66702-break-outside-loop-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66702-break-outside-loop-val.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -0,0 +1,7 @@\n+// Breaks with values inside closures used to ICE (#66863)\n+\n+fn main() {\n+    'some_label: loop {\n+        || break 'some_label (); //~ ERROR: `break` inside of a closure\n+    }\n+}"}, {"sha": "83bde9775b2ec11cb53df9682a4c24717849f2cd", "filename": "src/test/ui/issues/issue-66702-break-outside-loop-val.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-66702-break-outside-loop-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-66702-break-outside-loop-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66702-break-outside-loop-val.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -0,0 +1,11 @@\n+error[E0267]: `break` inside of a closure\n+  --> $DIR/issue-66702-break-outside-loop-val.rs:5:12\n+   |\n+LL |         || break 'some_label ();\n+   |         -- ^^^^^^^^^^^^^^^^^^^^ cannot `break` inside of a closure\n+   |         |\n+   |         enclosing closure\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0267`."}, {"sha": "44bd645598ae05c5962c8b6a9782e16c1c964227", "filename": "src/test/ui/issues/issue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #67037.\n+//\n+// In type checking patterns, E0023 occurs when the tuple pattern and the expected\n+// tuple pattern have different number of fields. For example, as below, `P()`,\n+// the tuple struct pattern, has 0 fields, but requires 1 field.\n+//\n+// In emitting E0023, we try to see if this is a case of e.g., `Some(a, b, c)` but where\n+// the scrutinee was of type `Some((a, b, c))`, and suggest that parenthesis be added.\n+//\n+// However, we did not account for the expected type being different than the tuple pattern type.\n+// This caused an issue when the tuple pattern type (`P<T>`) was generic.\n+// Specifically, we tried deriving the 0th field's type using the `substs` of the expected type.\n+// When attempting to substitute `T`, there was no such substitution, so \"out of range\" occured.\n+\n+struct U {} // 0 type parameters offered\n+struct P<T>(T); // 1 type parameter wanted\n+\n+fn main() {\n+    let P() = U {}; //~ ERROR mismatched types\n+    //~^ ERROR this pattern has 0 fields, but the corresponding tuple struct has 1 field\n+}"}, {"sha": "521dd0256f7d52285e4030cb882d57ab46e67649", "filename": "src/test/ui/issues/issue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-67037-pat-tup-scrut-ty-diff-less-fields.rs:19:9\n+   |\n+LL |     let P() = U {};\n+   |         ^^^ expected struct `U`, found struct `P`\n+   |\n+   = note: expected struct `U`\n+              found struct `P<_>`\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has 1 field\n+  --> $DIR/issue-67037-pat-tup-scrut-ty-diff-less-fields.rs:19:9\n+   |\n+LL | struct P<T>(T); // 1 type parameter wanted\n+   | --------------- tuple struct defined here\n+...\n+LL |     let P() = U {};\n+   |         ^^^ expected 1 field, found 0\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0023, E0308.\n+For more information about an error, try `rustc --explain E0023`."}, {"sha": "69a6ab004fd915ae014acfc5c238a9b124e9a079", "filename": "src/test/ui/nll/issue-55394.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55394.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -21,9 +21,13 @@ note: but, the lifetime must be valid for the lifetime `'_` as defined on the im\n    |\n LL | impl Foo<'_> {\n    |          ^^\n-   = note: ...so that the expression is assignable:\n-           expected Foo<'_>\n-              found Foo<'_>\n+note: ...so that the expression is assignable\n+  --> $DIR/issue-55394.rs:9:9\n+   |\n+LL |         Foo { bar }\n+   |         ^^^^^^^^^^^\n+   = note: expected  `Foo<'_>`\n+              found  `Foo<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "58f206742f4f57b71192cf9742d22d9a78e852ac", "filename": "src/test/ui/nll/normalization-bounds-error.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fnormalization-bounds-error.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -14,9 +14,13 @@ note: ...but the lifetime must also be valid for the lifetime `'a` as defined on\n    |\n LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n    |                  ^^\n-   = note: ...so that the types are compatible:\n-           expected Visitor<'d>\n-              found Visitor<'_>\n+note: ...so that the types are compatible\n+  --> $DIR/normalization-bounds-error.rs:12:1\n+   |\n+LL | fn visit_seq<'d, 'a: 'd>() -> <&'a () as Visitor<'d>>::Value {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `Visitor<'d>`\n+              found  `Visitor<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "5191deca281ccea48c667a48ef0fff5475b84c94", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -11,17 +11,25 @@ LL | /     fn from_box(b: Box<B>) -> Self {\n LL | |         C { f: b }\n LL | |     }\n    | |_____^\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<std::boxed::Box<&isize>>\n-              found std::boxed::Box<std::boxed::Box<&isize>>\n+note: ...so that the expression is assignable\n+  --> $DIR/type-alias-free-regions.rs:17:16\n+   |\n+LL |         C { f: b }\n+   |                ^\n+   = note: expected  `std::boxed::Box<std::boxed::Box<&isize>>`\n+              found  `std::boxed::Box<std::boxed::Box<&isize>>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 15:6...\n   --> $DIR/type-alias-free-regions.rs:15:6\n    |\n LL | impl<'a> FromBox<'a> for C<'a> {\n    |      ^^\n-   = note: ...so that the expression is assignable:\n-           expected C<'a>\n-              found C<'_>\n+note: ...so that the expression is assignable\n+  --> $DIR/type-alias-free-regions.rs:17:9\n+   |\n+LL |         C { f: b }\n+   |         ^^^^^^^^^^\n+   = note: expected  `C<'a>`\n+              found  `C<'_>`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/type-alias-free-regions.rs:27:16\n@@ -36,17 +44,25 @@ LL | /     fn from_tuple(b: (B,)) -> Self {\n LL | |         C { f: Box::new(b.0) }\n LL | |     }\n    | |_____^\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<&isize>\n-              found std::boxed::Box<&isize>\n+note: ...so that the expression is assignable\n+  --> $DIR/type-alias-free-regions.rs:27:25\n+   |\n+LL |         C { f: Box::new(b.0) }\n+   |                         ^^^\n+   = note: expected  `std::boxed::Box<&isize>`\n+              found  `std::boxed::Box<&isize>`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the impl at 25:6...\n   --> $DIR/type-alias-free-regions.rs:25:6\n    |\n LL | impl<'a> FromTuple<'a> for C<'a> {\n    |      ^^\n-   = note: ...so that the expression is assignable:\n-           expected C<'a>\n-              found C<'_>\n+note: ...so that the expression is assignable\n+  --> $DIR/type-alias-free-regions.rs:27:9\n+   |\n+LL |         C { f: Box::new(b.0) }\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `C<'a>`\n+              found  `C<'_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "37be450fd0a791aedab7a58226feefb4c3d1827c", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the fun\n    |\n LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        ^^\n-   = note: ...so that the types are compatible:\n-           expected Foo<'_>\n-              found Foo<'a>\n+note: ...so that the types are compatible\n+  --> $DIR/constant-in-expr-inherent-1.rs:8:5\n+   |\n+LL |     <Foo<'a>>::C\n+   |     ^^^^^^^^^^^^\n+   = note: expected  `Foo<'_>`\n+              found  `Foo<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/constant-in-expr-inherent-1.rs:8:5"}, {"sha": "4ee32847c5ec8555771612d5f29545ef8b7bfa78", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the fun\n    |\n LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        ^^\n-   = note: ...so that the types are compatible:\n-           expected Foo<'_>\n-              found Foo<'a>\n+note: ...so that the types are compatible\n+  --> $DIR/constant-in-expr-trait-item-3.rs:10:5\n+   |\n+LL |     T::C\n+   |     ^^^^\n+   = note: expected  `Foo<'_>`\n+              found  `Foo<'a>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that reference does not outlive borrowed content\n   --> $DIR/constant-in-expr-trait-item-3.rs:10:5"}, {"sha": "1952ee8269d5b1a912d005b8c5170287d3723ef4", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -19,9 +19,13 @@ note: but, the lifetime must be valid for the lifetime `'b` as defined on the fu\n    |\n LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n    |             ^^\n-   = note: ...so that the expression is assignable:\n-           expected &'b (dyn SomeTrait + 'b)\n-              found &dyn SomeTrait\n+note: ...so that the expression is assignable\n+  --> $DIR/object-lifetime-default-elision.rs:71:5\n+   |\n+LL |     ss\n+   |     ^^\n+   = note: expected  `&'b (dyn SomeTrait + 'b)`\n+              found  `&dyn SomeTrait`\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/object-lifetime-default-elision.rs:71:5\n@@ -44,9 +48,13 @@ note: but, the lifetime must be valid for the lifetime `'b` as defined on the fu\n    |\n LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n    |             ^^\n-   = note: ...so that the expression is assignable:\n-           expected &'b (dyn SomeTrait + 'b)\n-              found &dyn SomeTrait\n+note: ...so that the expression is assignable\n+  --> $DIR/object-lifetime-default-elision.rs:71:5\n+   |\n+LL |     ss\n+   |     ^^\n+   = note: expected  `&'b (dyn SomeTrait + 'b)`\n+              found  `&dyn SomeTrait`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a986980fab97b1d742ef74851ea10dc8234fd12c", "filename": "src/test/ui/parser/raw/raw-literal-keywords.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -11,11 +11,11 @@ fn test_union() {\n }\n \n fn test_if_2() {\n-    let _ = r#if; //~ ERROR cannot find value `if` in this scope\n+    let _ = r#if; //~ ERROR cannot find value `r#if` in this scope\n }\n \n fn test_struct_2() {\n-    let _ = r#struct; //~ ERROR cannot find value `struct` in this scope\n+    let _ = r#struct; //~ ERROR cannot find value `r#struct` in this scope\n }\n \n fn test_union_2() {"}, {"sha": "f7b6c894a90fea2ade2bd5a9692ed5cf4cf1b66f", "filename": "src/test/ui/parser/raw/raw-literal-keywords.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-keywords.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -16,13 +16,13 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n LL |     r#union Test;\n    |             ^^^^ expected one of 8 possible tokens\n \n-error[E0425]: cannot find value `if` in this scope\n+error[E0425]: cannot find value `r#if` in this scope\n   --> $DIR/raw-literal-keywords.rs:14:13\n    |\n LL |     let _ = r#if;\n    |             ^^^^ not found in this scope\n \n-error[E0425]: cannot find value `struct` in this scope\n+error[E0425]: cannot find value `r#struct` in this scope\n   --> $DIR/raw-literal-keywords.rs:18:13\n    |\n LL |     let _ = r#struct;"}, {"sha": "e889651647034ec245574e92fda12d8792b16d8f", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -34,17 +34,25 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the fun\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |      ^^\n-   = note: ...so that the expression is assignable:\n-           expected &[u8]\n-              found &'a [u8]\n+note: ...so that the expression is assignable\n+  --> $DIR/region-object-lifetime-in-coercion.rs:26:14\n+   |\n+LL |     Box::new(v)\n+   |              ^\n+   = note: expected  `&[u8]`\n+              found  `&'a [u8]`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 25:9...\n   --> $DIR/region-object-lifetime-in-coercion.rs:25:9\n    |\n LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |         ^^\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn Foo + 'b)>\n-              found std::boxed::Box<dyn Foo>\n+note: ...so that the expression is assignable\n+  --> $DIR/region-object-lifetime-in-coercion.rs:26:5\n+   |\n+LL |     Box::new(v)\n+   |     ^^^^^^^^^^^\n+   = note: expected  `std::boxed::Box<(dyn Foo + 'b)>`\n+              found  `std::boxed::Box<dyn Foo>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "865e967fba32e963b3e0dbdb3007de5a3f67e36a", "filename": "src/test/ui/regions/regions-assoc-type-region-bound-in-trait-not-met.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the imp\n    |\n LL | impl<'a> Foo<'static> for &'a i32 {\n    |      ^^\n-   = note: ...so that the types are compatible:\n-           expected Foo<'static>\n-              found Foo<'static>\n+note: ...so that the types are compatible\n+  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:14:10\n+   |\n+LL | impl<'a> Foo<'static> for &'a i32 {\n+   |          ^^^^^^^^^^^^\n+   = note: expected  `Foo<'static>`\n+              found  `Foo<'static>`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the type `&i32` will meet its required lifetime bounds\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:14:10\n@@ -30,9 +34,13 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the imp\n    |\n LL | impl<'a,'b> Foo<'b> for &'a i64 {\n    |      ^^\n-   = note: ...so that the types are compatible:\n-           expected Foo<'b>\n-              found Foo<'_>\n+note: ...so that the types are compatible\n+  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:13\n+   |\n+LL | impl<'a,'b> Foo<'b> for &'a i64 {\n+   |             ^^^^^^^\n+   = note: expected  `Foo<'b>`\n+              found  `Foo<'_>`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the impl at 19:9...\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:9\n    |"}, {"sha": "6a34871c07efdfdfeb8075d6dcb3f856ee2a3f1f", "filename": "src/test/ui/regions/regions-assoc-type-static-bound-in-trait-not-met.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the imp\n    |\n LL | impl<'a> Foo for &'a i32 {\n    |      ^^\n-   = note: ...so that the types are compatible:\n-           expected Foo\n-              found Foo\n+note: ...so that the types are compatible\n+  --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:9:10\n+   |\n+LL | impl<'a> Foo for &'a i32 {\n+   |          ^^^\n+   = note: expected  `Foo`\n+              found  `Foo`\n    = note: but, the lifetime must be valid for the static lifetime...\n note: ...so that the type `&i32` will meet its required lifetime bounds\n   --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:9:10"}, {"sha": "28873ab807f8d7bcff4eb1068232875e7384a14b", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -15,9 +15,13 @@ note: ...so that the type `(dyn A<T> + 'a)` is not borrowed for too long\n LL |     box B(&*v) as Box<dyn X>\n    |           ^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn X + 'static)>\n-              found std::boxed::Box<dyn X>\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-close-object-into-object-2.rs:10:5\n+   |\n+LL |     box B(&*v) as Box<dyn X>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `std::boxed::Box<(dyn X + 'static)>`\n+              found  `std::boxed::Box<dyn X>`\n \n error: aborting due to previous error\n "}, {"sha": "449a5b5fdd4d654c69ebcd8e2314284674ce09fa", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -15,9 +15,13 @@ note: ...so that the type `(dyn A<U> + 'a)` is not borrowed for too long\n LL |     box B(&*v) as Box<dyn X>\n    |           ^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn X + 'static)>\n-              found std::boxed::Box<dyn X>\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-close-object-into-object-4.rs:10:5\n+   |\n+LL |     box B(&*v) as Box<dyn X>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `std::boxed::Box<(dyn X + 'static)>`\n+              found  `std::boxed::Box<dyn X>`\n \n error: aborting due to previous error\n "}, {"sha": "b2a7afaf1b452ff3f37257a031dd4a81b5ff6df2", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -19,9 +19,13 @@ note: but, the lifetime must be valid for the lifetime `'c` as defined on the fu\n    |\n LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait + 'c> {\n    |                          ^^\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn SomeTrait + 'c)>\n-              found std::boxed::Box<dyn SomeTrait>\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-close-over-type-parameter-multiple.rs:20:5\n+   |\n+LL |     box v as Box<dyn SomeTrait + 'a>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `std::boxed::Box<(dyn SomeTrait + 'c)>`\n+              found  `std::boxed::Box<dyn SomeTrait>`\n \n error: aborting due to previous error\n "}, {"sha": "58f74e4ee142d67f412634030199e04cc90ba3d6", "filename": "src/test/ui/regions/regions-creating-enums4.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -9,17 +9,25 @@ note: first, the lifetime cannot outlive the lifetime `'a` as defined on the fun\n    |\n LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n    |                ^^\n-   = note: ...so that the expression is assignable:\n-           expected &Ast<'_>\n-              found &Ast<'a>\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-creating-enums4.rs:7:14\n+   |\n+LL |     Ast::Add(x, y)\n+   |              ^\n+   = note: expected  `&Ast<'_>`\n+              found  `&Ast<'a>`\n note: but, the lifetime must be valid for the lifetime `'b` as defined on the function body at 6:19...\n   --> $DIR/regions-creating-enums4.rs:6:19\n    |\n LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n    |                   ^^\n-   = note: ...so that the expression is assignable:\n-           expected Ast<'b>\n-              found Ast<'_>\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-creating-enums4.rs:7:5\n+   |\n+LL |     Ast::Add(x, y)\n+   |     ^^^^^^^^^^^^^^\n+   = note: expected  `Ast<'b>`\n+              found  `Ast<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "ffc2a259485aa77afb467fbc07a36520a7836553", "filename": "src/test/ui/regions/regions-escape-method.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on th\n    |\n LL |     s.f(|p| p)\n    |         ^^^^^\n-   = note: ...so that the expression is assignable:\n-           expected &i32\n-              found &i32\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-escape-method.rs:15:13\n+   |\n+LL |     s.f(|p| p)\n+   |             ^\n+   = note: expected  `&i32`\n+              found  `&i32`\n note: but, the lifetime must be valid for the method call at 15:5...\n   --> $DIR/regions-escape-method.rs:15:5\n    |"}, {"sha": "90823464c56d26ee8fef1219cda652aa071a9c33", "filename": "src/test/ui/regions/regions-escape-via-trait-or-not.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on th\n    |\n LL |     with(|o| o)\n    |          ^^^^^\n-   = note: ...so that the expression is assignable:\n-           expected &isize\n-              found &isize\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-escape-via-trait-or-not.rs:18:14\n+   |\n+LL |     with(|o| o)\n+   |              ^\n+   = note: expected  `&isize`\n+              found  `&isize`\n note: but, the lifetime must be valid for the expression at 18:5...\n   --> $DIR/regions-escape-via-trait-or-not.rs:18:5\n    |"}, {"sha": "8fce1609d78305d64d441dac01685f33e7b1dfeb", "filename": "src/test/ui/regions/regions-nested-fns.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -29,9 +29,18 @@ LL | |         if false { return ay; }\n LL | |         return z;\n LL | |     }));\n    | |_____^\n-   = note: ...so that the types are compatible:\n-           expected &isize\n-              found &isize\n+note: ...so that the types are compatible\n+  --> $DIR/regions-nested-fns.rs:13:76\n+   |\n+LL |       ignore::< Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n+   |  ____________________________________________________________________________^\n+LL | |         if false { return x; }\n+LL | |         if false { return ay; }\n+LL | |         return z;\n+LL | |     }));\n+   | |_____^\n+   = note: expected  `&isize`\n+              found  `&isize`\n \n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n   --> $DIR/regions-nested-fns.rs:14:27"}, {"sha": "8a600d2a1e6955166e78ccdf17a3f424abbf2790", "filename": "src/test/ui/regions/regions-normalize-in-where-clause-list.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-normalize-in-where-clause-list.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -17,9 +17,16 @@ note: ...but the lifetime must also be valid for the lifetime `'b` as defined on\n    |\n LL | fn bar<'a, 'b>()\n    |            ^^\n-   = note: ...so that the types are compatible:\n-           expected Project<'a, 'b>\n-              found Project<'_, '_>\n+note: ...so that the types are compatible\n+  --> $DIR/regions-normalize-in-where-clause-list.rs:22:1\n+   |\n+LL | / fn bar<'a, 'b>()\n+LL | |     where <() as Project<'a, 'b>>::Item : Eq\n+LL | | {\n+LL | | }\n+   | |_^\n+   = note: expected  `Project<'a, 'b>`\n+              found  `Project<'_, '_>`\n \n error: aborting due to previous error\n "}, {"sha": "2895a0ccdeec8f40d10768028000e9addcedc807", "filename": "src/test/ui/regions/regions-ret-borrowed-1.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on th\n    |\n LL |     with(|o| o)\n    |          ^^^^^\n-   = note: ...so that the expression is assignable:\n-           expected &isize\n-              found &isize\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-ret-borrowed-1.rs:10:14\n+   |\n+LL |     with(|o| o)\n+   |              ^\n+   = note: expected  `&isize`\n+              found  `&isize`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 9:14...\n   --> $DIR/regions-ret-borrowed-1.rs:9:14\n    |"}, {"sha": "b74f10f5075ebdf2db4f45e518eef0435f6fb853", "filename": "src/test/ui/regions/regions-ret-borrowed.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -9,9 +9,13 @@ note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on th\n    |\n LL |     with(|o| o)\n    |          ^^^^^\n-   = note: ...so that the expression is assignable:\n-           expected &isize\n-              found &isize\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-ret-borrowed.rs:13:14\n+   |\n+LL |     with(|o| o)\n+   |              ^\n+   = note: expected  `&isize`\n+              found  `&isize`\n note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 12:14...\n   --> $DIR/regions-ret-borrowed.rs:12:14\n    |"}, {"sha": "58b79d212700cfd81c385af01abe8f297705ca89", "filename": "src/test/ui/regions/regions-trait-object-subtyping.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -36,9 +36,13 @@ note: but, the lifetime must be valid for the lifetime `'b` as defined on the fu\n    |\n LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n    |            ^^\n-   = note: ...so that the expression is assignable:\n-           expected &'b mut (dyn Dummy + 'b)\n-              found &mut (dyn Dummy + 'b)\n+note: ...so that the expression is assignable\n+  --> $DIR/regions-trait-object-subtyping.rs:15:5\n+   |\n+LL |     x\n+   |     ^\n+   = note: expected  `&'b mut (dyn Dummy + 'b)`\n+              found  `&mut (dyn Dummy + 'b)`\n \n error[E0308]: mismatched types\n   --> $DIR/regions-trait-object-subtyping.rs:22:5"}, {"sha": "527babb01208f3a6003060689c284db4dab0d34c", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -105,9 +105,13 @@ note: ...but the lifetime must also be valid for the lifetime `'l2` as defined o\n    |\n LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n    |               ^^^\n-   = note: ...so that the types are compatible:\n-           expected W<'l1, 'l2>\n-              found W<'_, '_>\n+note: ...so that the types are compatible\n+  --> $DIR/reject-specialized-drops-8142.rs:54:1\n+   |\n+LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `W<'l1, 'l2>`\n+              found  `W<'_, '_>`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "0a8073c0be2ea627cdd59d843d88af9fc9f02db1", "filename": "src/test/ui/suggestions/raw-name-use-suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.rs?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -5,5 +5,5 @@ mod foo {\n \n fn main() {\n     foo::let(); //~ ERROR expected identifier, found keyword `let`\n-    r#break(); //~ ERROR cannot find function `break` in this scope\n+    r#break(); //~ ERROR cannot find function `r#break` in this scope\n }"}, {"sha": "62b76318e09b5424f1ebab7a3c03c2c55a720237", "filename": "src/test/ui/suggestions/raw-name-use-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -20,7 +20,7 @@ help: you can escape reserved keywords to use them as identifiers\n LL |     foo::r#let();\n    |          ^^^^^\n \n-error[E0425]: cannot find function `break` in this scope\n+error[E0425]: cannot find function `r#break` in this scope\n   --> $DIR/raw-name-use-suggestion.rs:8:5\n    |\n LL |     r#break();"}, {"sha": "9fdcd4de495c017c0d026d77acf56c8210184fa1", "filename": "src/test/ui/traits/trait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-of-supertrait-has-wrong-lifetime-parameters.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -14,9 +14,13 @@ note: ...but the lifetime must also be valid for the lifetime `'b` as defined on\n    |\n LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n    |         ^^\n-   = note: ...so that the types are compatible:\n-           expected T1<'a>\n-              found T1<'_>\n+note: ...so that the types are compatible\n+  --> $DIR/trait-impl-of-supertrait-has-wrong-lifetime-parameters.rs:24:13\n+   |\n+LL | impl<'a,'b> T2<'a, 'b> for S<'a, 'b> {\n+   |             ^^^^^^^^^^\n+   = note: expected  `T1<'a>`\n+              found  `T1<'_>`\n \n error: aborting due to previous error\n "}, {"sha": "e6029e0d4623ae73523bb6f763a8484345980de2", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6840f33e68f53a60ba45d4c9e75223ae3dd434f/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=f6840f33e68f53a60ba45d4c9e75223ae3dd434f", "patch": "@@ -18,9 +18,13 @@ note: ...so that reference does not outlive borrowed content\n LL |     Box::new(items.iter())\n    |              ^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<(dyn std::iter::Iterator<Item = &T> + 'static)>\n-              found std::boxed::Box<dyn std::iter::Iterator<Item = &T>>\n+note: ...so that the expression is assignable\n+  --> $DIR/dyn-trait-underscore.rs:8:5\n+   |\n+LL |     Box::new(items.iter())\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected  `std::boxed::Box<(dyn std::iter::Iterator<Item = &T> + 'static)>`\n+              found  `std::boxed::Box<dyn std::iter::Iterator<Item = &T>>`\n \n error: aborting due to previous error\n "}]}