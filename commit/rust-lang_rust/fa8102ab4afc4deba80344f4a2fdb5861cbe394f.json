{"sha": "fa8102ab4afc4deba80344f4a2fdb5861cbe394f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhODEwMmFiNGFmYzRkZWJhODAzNDRmNGEyZmRiNTg2MWNiZTM5NGY=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-23T00:14:15Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-30T17:19:25Z"}, "message": "Unkillable is not unsafe. Close #7832.", "tree": {"sha": "85acffb6b6c1e8a36039d49973d14de830a69c41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85acffb6b6c1e8a36039d49973d14de830a69c41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa8102ab4afc4deba80344f4a2fdb5861cbe394f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa8102ab4afc4deba80344f4a2fdb5861cbe394f", "html_url": "https://github.com/rust-lang/rust/commit/fa8102ab4afc4deba80344f4a2fdb5861cbe394f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa8102ab4afc4deba80344f4a2fdb5861cbe394f/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9675cd311a405bd5222597a69825733029a2a040", "url": "https://api.github.com/repos/rust-lang/rust/commits/9675cd311a405bd5222597a69825733029a2a040", "html_url": "https://github.com/rust-lang/rust/commit/9675cd311a405bd5222597a69825733029a2a040"}], "stats": {"total": 138, "additions": 65, "deletions": 73}, "files": [{"sha": "47fd4cccb9f98552cb3c23e3253530823d828409", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fa8102ab4afc4deba80344f4a2fdb5861cbe394f/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8102ab4afc4deba80344f4a2fdb5861cbe394f/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=fa8102ab4afc4deba80344f4a2fdb5861cbe394f", "patch": "@@ -130,11 +130,9 @@ impl<Q:Send> Sem<Q> {\n impl Sem<()> {\n     pub fn access<U>(&self, blk: &fn() -> U) -> U {\n         let mut release = None;\n-        unsafe {\n-            do task::unkillable {\n-                self.acquire();\n-                release = Some(SemRelease(self));\n-            }\n+        do task::unkillable {\n+            self.acquire();\n+            release = Some(SemRelease(self));\n         }\n         blk()\n     }\n@@ -153,11 +151,9 @@ impl Sem<~[WaitQueue]> {\n \n     pub fn access_waitqueue<U>(&self, blk: &fn() -> U) -> U {\n         let mut release = None;\n-        unsafe {\n-            do task::unkillable {\n-                self.acquire();\n-                release = Some(SemAndSignalRelease(self));\n-            }\n+        do task::unkillable {\n+            self.acquire();\n+            release = Some(SemAndSignalRelease(self));\n         }\n         blk()\n     }\n@@ -294,17 +290,15 @@ impl<'self> Condvar<'self> {\n         #[unsafe_destructor]\n         impl<'self> Drop for CondvarReacquire<'self> {\n             fn drop(&self) {\n-                unsafe {\n-                    // Needs to succeed, instead of itself dying.\n-                    do task::unkillable {\n-                        match self.order {\n-                            Just(lock) => do lock.access {\n-                                self.sem.acquire();\n-                            },\n-                            Nothing => {\n-                                self.sem.acquire();\n-                            },\n-                        }\n+                // Needs to succeed, instead of itself dying.\n+                do task::unkillable {\n+                    match self.order {\n+                        Just(lock) => do lock.access {\n+                            self.sem.acquire();\n+                        },\n+                        Nothing => {\n+                            self.sem.acquire();\n+                        },\n                     }\n                 }\n             }\n@@ -644,14 +638,12 @@ impl RWLock {\n         // Implementation slightly different from the slicker 'write's above.\n         // The exit path is conditional on whether the caller downgrades.\n         let mut _release = None;\n-        unsafe {\n-            do task::unkillable {\n-                (&self.order_lock).acquire();\n-                (&self.access_lock).acquire();\n-                (&self.order_lock).release();\n-            }\n-            _release = Some(RWLockReleaseDowngrade(self));\n+        do task::unkillable {\n+            (&self.order_lock).acquire();\n+            (&self.access_lock).acquire();\n+            (&self.order_lock).release();\n         }\n+        _release = Some(RWLockReleaseDowngrade(self));\n         blk(RWLockWriteMode { lock: self })\n     }\n "}, {"sha": "bc9e265c8d99825ca219e099184316324a3799c0", "filename": "src/libstd/rt/select.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fa8102ab4afc4deba80344f4a2fdb5861cbe394f/src%2Flibstd%2Frt%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8102ab4afc4deba80344f4a2fdb5861cbe394f/src%2Flibstd%2Frt%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fselect.rs?ref=fa8102ab4afc4deba80344f4a2fdb5861cbe394f", "patch": "@@ -208,7 +208,7 @@ mod test {\n     #[test]\n     fn select_unkillable() {\n         do run_in_newsched_task {\n-            unsafe { do task::unkillable { select_helper(2, [1]) } }\n+            do task::unkillable { select_helper(2, [1]) }\n         }\n     }\n \n@@ -243,7 +243,7 @@ mod test {\n                 if killable {\n                     assert!(select(ports) == 1);\n                 } else {\n-                    unsafe { do task::unkillable { assert!(select(ports) == 1); } }\n+                    do task::unkillable { assert!(select(ports) == 1); }\n                 }\n             }\n         }\n@@ -287,7 +287,7 @@ mod test {\n                         if killable {\n                             select(ports);\n                         } else {\n-                            unsafe { do task::unkillable { select(ports); } }\n+                            do task::unkillable { select(ports); }\n                         }\n                     }\n                 }\n@@ -301,27 +301,25 @@ mod test {\n             let (success_p, success_c) = oneshot::<bool>();\n             let success_c = Cell::new(success_c);\n             do task::try {\n-                unsafe {\n-                    let success_c = Cell::new(success_c.take());\n-                    do task::unkillable {\n-                        let (p,c) = oneshot();\n-                        let c = Cell::new(c);\n-                        do task::spawn {\n-                            let (dead_ps, dead_cs) = unzip(from_fn(5, |_| oneshot::<()>()));\n-                            let mut ports = dead_ps;\n-                            select(ports); // should get killed; nothing should leak\n-                            c.take().send(()); // must not happen\n-                            // Make sure dead_cs doesn't get closed until after select.\n-                            let _ = dead_cs;\n-                        }\n-                        do task::spawn {\n-                            fail!(); // should kill sibling awake\n-                        }\n-\n-                        // wait for killed selector to close (NOT send on) its c.\n-                        // hope to send 'true'.\n-                        success_c.take().send(p.try_recv().is_none());\n+                let success_c = Cell::new(success_c.take());\n+                do task::unkillable {\n+                    let (p,c) = oneshot();\n+                    let c = Cell::new(c);\n+                    do task::spawn {\n+                        let (dead_ps, dead_cs) = unzip(from_fn(5, |_| oneshot::<()>()));\n+                        let mut ports = dead_ps;\n+                        select(ports); // should get killed; nothing should leak\n+                        c.take().send(()); // must not happen\n+                        // Make sure dead_cs doesn't get closed until after select.\n+                        let _ = dead_cs;\n                     }\n+                    do task::spawn {\n+                        fail!(); // should kill sibling awake\n+                    }\n+\n+                    // wait for killed selector to close (NOT send on) its c.\n+                    // hope to send 'true'.\n+                    success_c.take().send(p.try_recv().is_none());\n                 }\n             };\n             assert!(success_p.recv());"}, {"sha": "c26349b220d9438a219bbecf07b47c8664e219a7", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fa8102ab4afc4deba80344f4a2fdb5861cbe394f/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8102ab4afc4deba80344f4a2fdb5861cbe394f/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=fa8102ab4afc4deba80344f4a2fdb5861cbe394f", "patch": "@@ -618,32 +618,34 @@ pub fn get_scheduler() -> Scheduler {\n  * }\n  * ~~~\n  */\n-pub unsafe fn unkillable<U>(f: &fn() -> U) -> U {\n+pub fn unkillable<U>(f: &fn() -> U) -> U {\n     use rt::task::Task;\n \n-    match context() {\n-        OldTaskContext => {\n-            let t = rt::rust_get_task();\n-            do (|| {\n-                rt::rust_task_inhibit_kill(t);\n-                f()\n-            }).finally {\n-                rt::rust_task_allow_kill(t);\n+    unsafe {\n+        match context() {\n+            OldTaskContext => {\n+                let t = rt::rust_get_task();\n+                do (|| {\n+                    rt::rust_task_inhibit_kill(t);\n+                    f()\n+                }).finally {\n+                    rt::rust_task_allow_kill(t);\n+                }\n             }\n-        }\n-        TaskContext => {\n-            // The inhibits/allows might fail and need to borrow the task.\n-            let t = Local::unsafe_borrow::<Task>();\n-            do (|| {\n-                (*t).death.inhibit_kill((*t).unwinder.unwinding);\n-                f()\n-            }).finally {\n-                (*t).death.allow_kill((*t).unwinder.unwinding);\n+            TaskContext => {\n+                // The inhibits/allows might fail and need to borrow the task.\n+                let t = Local::unsafe_borrow::<Task>();\n+                do (|| {\n+                    (*t).death.inhibit_kill((*t).unwinder.unwinding);\n+                    f()\n+                }).finally {\n+                    (*t).death.allow_kill((*t).unwinder.unwinding);\n+                }\n             }\n+            // FIXME(#3095): This should be an rtabort as soon as the scheduler\n+            // no longer uses a workqueue implemented with an Exclusive.\n+            _ => f()\n         }\n-        // FIXME(#3095): This should be an rtabort as soon as the scheduler\n-        // no longer uses a workqueue implemented with an Exclusive.\n-        _ => f()\n     }\n }\n "}, {"sha": "749db307012312a6ecad0b1630d1d995babf487d", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa8102ab4afc4deba80344f4a2fdb5861cbe394f/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa8102ab4afc4deba80344f4a2fdb5861cbe394f/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=fa8102ab4afc4deba80344f4a2fdb5861cbe394f", "patch": "@@ -694,7 +694,7 @@ fn spawn_raw_newsched(mut opts: TaskOpts, f: ~fn()) {\n         // Should be run after the local-borrowed task is returned.\n         if enlist_success {\n             if indestructible {\n-                unsafe { do unkillable { f() } }\n+                do unkillable { f() }\n             } else {\n                 f()\n             }"}]}