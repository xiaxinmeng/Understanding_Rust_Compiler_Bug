{"sha": "8e6a193946eea931c44caecfdd3c3353d036335b", "node_id": "C_kwDOAAsO6NoAKDhlNmExOTM5NDZlZWE5MzFjNDRjYWVjZmRkM2MzMzUzZDAzNjMzNWI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-06-13T12:07:12Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-06-13T12:07:12Z"}, "message": "Tweak names and docs for vtable\u00a0stats", "tree": {"sha": "8fcafc2404d0aa1f300ae024e8aedfebf4af0de8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fcafc2404d0aa1f300ae024e8aedfebf4af0de8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e6a193946eea931c44caecfdd3c3353d036335b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e6a193946eea931c44caecfdd3c3353d036335b", "html_url": "https://github.com/rust-lang/rust/commit/8e6a193946eea931c44caecfdd3c3353d036335b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e6a193946eea931c44caecfdd3c3353d036335b/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5008a08acf6d3e8e01e6b1768850579da6058aea", "url": "https://api.github.com/repos/rust-lang/rust/commits/5008a08acf6d3e8e01e6b1768850579da6058aea", "html_url": "https://github.com/rust-lang/rust/commit/5008a08acf6d3e8e01e6b1768850579da6058aea"}], "stats": {"total": 72, "additions": 43, "deletions": 29}, "files": [{"sha": "be2af94961ffa9b39bebc742e6590d9d38c8eaed", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8e6a193946eea931c44caecfdd3c3353d036335b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6a193946eea931c44caecfdd3c3353d036335b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=8e6a193946eea931c44caecfdd3c3353d036335b", "patch": "@@ -880,9 +880,9 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n             let mut first_dsa = true;\n \n             // Number of vtable entries, if we didn't have upcasting\n-            let mut unupcasted_cost = 0;\n+            let mut entries_ignoring_upcasting = 0;\n             // Number of vtable entries needed solely for upcasting\n-            let mut upcast_cost = 0;\n+            let mut entries_for_upcasting = 0;\n \n             let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(tcx, tr));\n \n@@ -911,9 +911,9 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                         // If this is the first dsa, it would be included either way,\n                         // otherwise it's needed for upcasting\n                         if std::mem::take(&mut first_dsa) {\n-                            unupcasted_cost += 3;\n+                            entries_ignoring_upcasting += 3;\n                         } else {\n-                            upcast_cost += 3;\n+                            entries_for_upcasting += 3;\n                         }\n                     }\n \n@@ -926,10 +926,10 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                         // We can't really do that as, for example, all not trivial bounds on generic\n                         // parameters are impossible (since we don't know the parameters...),\n                         // see the comment above.\n-                        unupcasted_cost += own_existential_entries.len();\n+                        entries_ignoring_upcasting += own_existential_entries.len();\n \n                         if emit_vptr {\n-                            upcast_cost += 1;\n+                            entries_for_upcasting += 1;\n                         }\n                     }\n                 }\n@@ -942,10 +942,12 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                 &name,\n                 VTableSizeInfo {\n                     trait_name: name.clone(),\n-                    size_words_without_upcasting: unupcasted_cost,\n-                    size_words_with_upcasting: unupcasted_cost + upcast_cost,\n-                    difference_words: upcast_cost,\n-                    difference_percent: upcast_cost as f64 / unupcasted_cost as f64 * 100.,\n+                    entries: entries_ignoring_upcasting + entries_for_upcasting,\n+                    entries_ignoring_upcasting,\n+                    entries_for_upcasting,\n+                    upcasting_cost_percent: entries_for_upcasting as f64\n+                        / entries_ignoring_upcasting as f64\n+                        * 100.,\n                 },\n             )\n         }"}, {"sha": "51cac328c3a310602b2a963b438c16d96b415971", "filename": "compiler/rustc_session/src/code_stats.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8e6a193946eea931c44caecfdd3c3353d036335b/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e6a193946eea931c44caecfdd3c3353d036335b/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs?ref=8e6a193946eea931c44caecfdd3c3353d036335b", "patch": "@@ -68,10 +68,21 @@ pub struct TypeSizeInfo {\n \n pub struct VTableSizeInfo {\n     pub trait_name: String,\n-    pub size_words_without_upcasting: usize,\n-    pub size_words_with_upcasting: usize,\n-    pub difference_words: usize,\n-    pub difference_percent: f64,\n+\n+    /// Number of entries in a vtable with the current algorithm\n+    /// (i.e. with upcasting).\n+    pub entries: usize,\n+\n+    /// Number of entries in a vtable, as-if we did not have trait upcasting.\n+    pub entries_ignoring_upcasting: usize,\n+\n+    /// Number of entries in a vtable needed solely for upcasting\n+    /// (i.e. `entries - entries_ignoring_upcasting`).\n+    pub entries_for_upcasting: usize,\n+\n+    /// Cost of having upcasting in % relative to the number of entries without\n+    /// upcasting (i.e. `entries_for_upcasting / entries_ignoring_upcasting * 100%`).\n+    pub upcasting_cost_percent: f64,\n }\n \n #[derive(Default)]\n@@ -216,25 +227,26 @@ impl CodeStats {\n     }\n \n     pub fn print_vtable_sizes(&self, crate_name: &str) {\n-        let mut rr = std::mem::take(&mut *self.vtable_sizes.lock()).into_iter().collect::<Vec<_>>();\n-\n-        rr.sort_by(|(_, stats_a), (_, stats_b)| {\n-            stats_b.difference_percent.total_cmp(&stats_a.difference_percent)\n+        let mut infos = std::mem::take(&mut *self.vtable_sizes.lock())\n+            .into_iter()\n+            .map(|(_did, stats)| stats)\n+            .collect::<Vec<_>>();\n+\n+        // Sort by the cost % in reverse order (from biggest to smallest)\n+        infos.sort_by(|a, b| {\n+            a.upcasting_cost_percent.total_cmp(&b.upcasting_cost_percent).reverse()\n         });\n \n-        for (\n-            _,\n-            VTableSizeInfo {\n-                trait_name,\n-                size_words_without_upcasting,\n-                size_words_with_upcasting,\n-                difference_words,\n-                difference_percent,\n-            },\n-        ) in rr\n+        for VTableSizeInfo {\n+            trait_name,\n+            entries,\n+            entries_ignoring_upcasting,\n+            entries_for_upcasting,\n+            upcasting_cost_percent,\n+        } in infos\n         {\n             println!(\n-                r#\"print-vtable-sizes {{ \"crate_name\": \"{crate_name}\", \"trait_name\": \"{trait_name}\", \"size_unupcastable_words\": \"{size_words_without_upcasting}\", \"size_upcastable_words\": \"{size_words_with_upcasting}\", diff: \"{difference_words}\", diff_p: \"{difference_percent}\" }}\"#\n+                r#\"print-vtable-sizes {{ \"crate_name\": \"{crate_name}\", \"trait_name\": \"{trait_name}\", \"entries\": \"{entries}\", \"entries_ignoring_upcasting\": \"{entries_ignoring_upcasting}\", \"entries_for_upcasting\": \"{entries_for_upcasting}\", \"upcasting_cost_percent\": \"{upcasting_cost_percent}\" }}\"#\n             );\n         }\n     }"}]}