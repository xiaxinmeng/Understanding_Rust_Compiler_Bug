{"sha": "fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYzJiYWRmOWIxZTZkNjNjNTIyMWQyMDY2MjhhYjFhYWYzYjViZGM=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-08-25T09:21:39Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-30T09:00:21Z"}, "message": "rename const_evaluatable_checked to generic_const_exprs\n\n:sparkles:", "tree": {"sha": "22cb7d48f1b3958d1edd0a15f3f4cba23907f93e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22cb7d48f1b3958d1edd0a15f3f4cba23907f93e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "html_url": "https://github.com/rust-lang/rust/commit/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbb0fe9d803f7fa8688b33306266a6b054c2c3f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb0fe9d803f7fa8688b33306266a6b054c2c3f4", "html_url": "https://github.com/rust-lang/rust/commit/dbb0fe9d803f7fa8688b33306266a6b054c2c3f4"}], "stats": {"total": 391, "additions": 178, "deletions": 213}, "files": [{"sha": "0e09a3fe93e8344a1ed0435aa74272a4d0acd9e1", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -551,9 +551,6 @@ declare_features! (\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n \n-    /// Allows non-trivial generic constants which have to be manually propagated upwards.\n-    (incomplete, const_evaluatable_checked, \"1.48.0\", Some(76560), None),\n-\n     /// Allows basic arithmetic on floating point types in a `const fn`.\n     (active, const_fn_floating_point_arithmetic, \"1.48.0\", Some(57241), None),\n \n@@ -679,6 +676,9 @@ declare_features! (\n     /// Allows using doc(primitive) without a future-incompat warning\n     (active, doc_primitive, \"1.56.0\", Some(88070), None),\n \n+    /// Allows non-trivial generic constants which have to have wfness manually propagated to callers\n+    (incomplete, generic_const_exprs, \"1.56.0\", Some(76560), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "326daf21e40e107c706c5a4db4902cbb6c220eb5", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -128,9 +128,13 @@ declare_features! (\n      Some(\"Removed in favor of `~const` bound in #![feature(const_trait_impl)]\")),\n     /// Allows `#[no_debug]`.\n     (removed, no_debug, \"1.43.0\", Some(29721), None, Some(\"removed due to lack of demand\")),\n+    /// Lazily evaluate constants. This allows constants to depend on type parameters.\n+    (removed, lazy_normalization_consts, \"1.46.0\", Some(72219), None, Some(\"superseded by `generic_const_exprs`\")),\n     /// Allows comparing raw pointers during const eval.\n     (removed, const_compare_raw_pointers, \"1.46.0\", Some(53020), None,\n      Some(\"cannot be allowed in const eval in any meaningful way\")),\n+    /// Allows non-trivial generic constants which have to be manually propagated upwards.\n+    (removed, const_evaluatable_checked, \"1.48.0\", Some(76560), None, Some(\"renamed to `generic_const_exprs`\")),\n     /// Allows using the `#[link_args]` attribute.\n     (removed, link_args, \"1.53.0\", Some(29596), None,\n      Some(\"removed in favor of using `-C link-arg=ARG` on command line, \\"}, {"sha": "9d1be212f5b8c49771a62de47cc48263bc8032f7", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -577,13 +577,13 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         }\n \n         (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n-            if tcx.features().const_evaluatable_checked =>\n+            if tcx.features().generic_const_exprs =>\n         {\n             tcx.try_unify_abstract_consts((au.shrink(), bu.shrink()))\n         }\n \n         // While this is slightly incorrect, it shouldn't matter for `min_const_generics`\n-        // and is the better alternative to waiting until `const_evaluatable_checked` can\n+        // and is the better alternative to waiting until `generic_const_exprs` can\n         // be stabilized.\n         (ty::ConstKind::Unevaluated(au), ty::ConstKind::Unevaluated(bu))\n             if au.def == bu.def && au.promoted == bu.promoted =>"}, {"sha": "9c376c6c93e2e009f128a966e10f48d81d479086", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -136,7 +136,7 @@ where\n             }\n             ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,\n             ty::PredicateKind::ConstEvaluatable(uv)\n-                if self.def_id_visitor.tcx().features().const_evaluatable_checked =>\n+                if self.def_id_visitor.tcx().features().generic_const_exprs =>\n             {\n                 let tcx = self.def_id_visitor.tcx();\n                 if let Ok(Some(ct)) = AbstractConst::new(tcx, uv) {\n@@ -1809,7 +1809,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'tcx> {\n                         self.visit(self.tcx.type_of(param.def_id));\n                     }\n                 }\n-                // FIXME(const_evaluatable_checked): May want to look inside const here\n+                // FIXME(generic_const_exprs): May want to look inside const here\n                 GenericParamDefKind::Const { .. } => {\n                     self.visit(self.tcx.type_of(param.def_id));\n                 }"}, {"sha": "a4f7549423813ad86c8a50b553e81740e77bfff4", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -506,8 +506,8 @@ impl<'a> Resolver<'a> {\n \n                 if self.session.is_nightly_build() {\n                     err.help(\n-                        \"use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` \\\n-                        to allow generic const expressions\"\n+                        \"use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` \\\n+                        to allow generic const expressions\",\n                     );\n                 }\n "}, {"sha": "fc8fcf759adbb58c6bd477fd6af4481399d9f119", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -2734,9 +2734,7 @@ impl<'a> Resolver<'a> {\n                         ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !(trivial\n-                                || features.const_generics\n-                                || features.lazy_normalization_consts)\n+                            if !(trivial || features.const_generics || features.generic_const_exprs)\n                             {\n                                 // HACK(min_const_generics): If we encounter `Self` in an anonymous constant\n                                 // we can't easily tell if it's generic at this stage, so we instead remember\n@@ -2809,9 +2807,7 @@ impl<'a> Resolver<'a> {\n                         ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n-                            if !(trivial\n-                                || features.const_generics\n-                                || features.lazy_normalization_consts)\n+                            if !(trivial || features.const_generics || features.generic_const_exprs)\n                             {\n                                 if record_used {\n                                     self.report_error("}, {"sha": "417d38e9f593942c13ac3ba4e4d56d6874ffe7b2", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -662,6 +662,7 @@ symbols! {\n         generators,\n         generic_arg_infer,\n         generic_associated_types,\n+        generic_const_exprs,\n         generic_param_attrs,\n         get_context,\n         global_allocator,"}, {"sha": "ddabe5967d79cf9566fd923249ce4bfcc4658bae", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -34,7 +34,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     span: Span,\n ) -> Result<(), NotConstEvaluatable> {\n     debug!(\"is_const_evaluatable({:?})\", uv);\n-    if infcx.tcx.features().const_evaluatable_checked {\n+    if infcx.tcx.features().generic_const_exprs {\n         let tcx = infcx.tcx;\n         match AbstractConst::new(tcx, uv)? {\n             // We are looking at a generic abstract constant.\n@@ -537,9 +537,9 @@ pub(super) fn mir_abstract_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def: ty::WithOptConstParam<LocalDefId>,\n ) -> Result<Option<&'tcx [mir::abstract_const::Node<'tcx>]>, ErrorReported> {\n-    if tcx.features().const_evaluatable_checked {\n+    if tcx.features().generic_const_exprs {\n         match tcx.def_kind(def.did) {\n-            // FIXME(const_evaluatable_checked): We currently only do this for anonymous constants,\n+            // FIXME(generic_const_exprs): We currently only do this for anonymous constants,\n             // meaning that we do not look into associated constants. I(@lcnr) am not yet sure whether\n             // we want to look into them or treat them as opaque projections.\n             //\n@@ -568,7 +568,7 @@ pub(super) fn try_unify_abstract_consts<'tcx>(\n         Ok(false)\n     })()\n     .unwrap_or_else(|ErrorReported| true)\n-    // FIXME(const_evaluatable_checked): We should instead have this\n+    // FIXME(generic_const_exprs): We should instead have this\n     // method return the resulting `ty::Const` and return `ConstKind::Error`\n     // on `ErrorReported`.\n }\n@@ -656,13 +656,13 @@ pub(super) fn try_unify<'tcx>(\n                 // branch should only be taking when dealing with associated constants, at\n                 // which point directly comparing them seems like the desired behavior.\n                 //\n-                // FIXME(const_evaluatable_checked): This isn't actually the case.\n+                // FIXME(generic_const_exprs): This isn't actually the case.\n                 // We also take this branch for concrete anonymous constants and\n                 // expand generic anonymous constants with concrete substs.\n                 (ty::ConstKind::Unevaluated(a_uv), ty::ConstKind::Unevaluated(b_uv)) => {\n                     a_uv == b_uv\n                 }\n-                // FIXME(const_evaluatable_checked): We may want to either actually try\n+                // FIXME(generic_const_exprs): We may want to either actually try\n                 // to evaluate `a_ct` and `b_ct` if they are are fully concrete or something like\n                 // this, for now we just return false here.\n                 _ => false,"}, {"sha": "9fd5cb2a0b33c5d36c2e083f7db3956e24311b20", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -794,7 +794,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 )\n             }\n             SelectionError::NotConstEvaluatable(NotConstEvaluatable::MentionsParam) => {\n-                if !self.tcx.features().const_evaluatable_checked {\n+                if !self.tcx.features().generic_const_exprs {\n                     let mut err = self.tcx.sess.struct_span_err(\n                         span,\n                         \"constant expression depends on a generic parameter\",\n@@ -803,7 +803,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     // issue. However, this is currently not actually possible\n                     // (see https://github.com/rust-lang/rust/issues/66962#issuecomment-575907083).\n                     //\n-                    // Note that with `feature(const_evaluatable_checked)` this case should not\n+                    // Note that with `feature(generic_const_exprs)` this case should not\n                     // be reachable.\n                     err.note(\"this may fail depending on what value the parameter takes\");\n                     err.emit();"}, {"sha": "18abcc72bcee8d013950671b67c558c7f305c163", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -572,7 +572,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n                     debug!(?c1, ?c2, \"equating consts\");\n                     let tcx = self.selcx.tcx();\n-                    if tcx.features().const_evaluatable_checked {\n+                    if tcx.features().generic_const_exprs {\n                         // FIXME: we probably should only try to unify abstract constants\n                         // if the constants depend on generic parameters.\n                         //"}, {"sha": "041fd65e8fa495ad83ecdb862fb3a8f54340eb1e", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -855,7 +855,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n \n         fn visit_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::PredicateKind::ConstEvaluatable(ct) = pred.kind().skip_binder() {\n-                // FIXME(const_evaluatable_checked): We should probably deduplicate the logic for\n+                // FIXME(generic_const_exprs): We should probably deduplicate the logic for\n                 // `AbstractConst`s here, it might make sense to change `ConstEvaluatable` to\n                 // take a `ty::Const` instead.\n                 use rustc_middle::mir::abstract_const::Node;"}, {"sha": "5214277a37d5387155301573cd5d1319d3e7c9e1", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -619,7 +619,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n                     debug!(?c1, ?c2, \"evaluate_predicate_recursively: equating consts\");\n \n-                    if self.tcx().features().const_evaluatable_checked {\n+                    if self.tcx().features().generic_const_exprs {\n                         // FIXME: we probably should only try to unify abstract constants\n                         // if the constants depend on generic parameters.\n                         //"}, {"sha": "ff0b47abca9f5e91c0f68472ecb48285c13a8ea7", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -2300,7 +2300,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n         }\n     }\n \n-    if tcx.features().const_evaluatable_checked {\n+    if tcx.features().generic_const_exprs {\n         predicates.extend(const_evaluatable_predicates_of(tcx, def_id.expect_local()));\n     }\n "}, {"sha": "4fe9dfc35bfd962bccefc6364f092c8a4dfaab11", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n // regression test for #77650\n fn c<T, const N: std::num::NonZeroUsize>()"}, {"sha": "32dbf0b45b9bdc9629ff86dae3ae593134aa76b5", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n // regression test for #77650\n struct C<T, const N: core::num::NonZeroUsize>([T; N.get()])"}, {"sha": "9097d1e98f800e24e059edec0994393f864ab4fe", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-3.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n // regression test for #79251\n struct Node<const D: usize>"}, {"sha": "9cfc0012576d956e90254a0f7d0c581d811e8751", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-4.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n // regression test for #79251\n #[derive(Debug)]"}, {"sha": "af77b1cedade56ecca5e55cf2918513ec70d1d11", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-77708-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-1.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features, unused_braces)]\n \n trait Delegates<T> {}"}, {"sha": "46f18ce2309ced00aa92801cb2d5b20694ef0b21", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-77708-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-2.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // revisions: rpass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Z;"}, {"sha": "b01f31b916029156a6dfac50054ec093689daf17", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-77708-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-3.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // revisions: rpass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n use std::{convert::TryFrom, num::NonZeroUsize};"}, {"sha": "81b71cdf88133ee2bf60fa08f6e84cb69f8b7c19", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-82034.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-82034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-82034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-82034.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // revisions: rpass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n pub trait IsTrue {}\n pub trait IsFalse {}"}, {"sha": "b468fd071fe1235deee2272a1d7eaf2e86270f92", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-85031-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-1.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // revisions: rpass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n pub struct Ref<'a, const NUM: usize>(&'a i32);"}, {"sha": "7c7d14a30c97902954f6cc29af41cd50be611f1b", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-85031-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-2.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,6 +1,6 @@\n // revisions: cfail\n #![allow(incomplete_features)]\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n \n pub struct Ref<'a>(&'a i32);\n "}, {"sha": "b86ad01d99d8da47111d4ee3599f2c6150cc99e1", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-85031-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-85031-3.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // revisions: rpass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n fn test<const SIZE: usize>() {}"}, {"sha": "487154e7aba3c2f640358db2f80c16a6907def7d", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-86953.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-86953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-86953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-86953.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // revisions: rpass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo;"}, {"sha": "c28f6e17bef4f433329530b79af3337b3a532e7c", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-88022.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-88022.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-88022.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-88022.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features, unused_braces)]\n \n struct Buffer<T, const S: usize>"}, {"sha": "d435082e759f964175d824b853fa9a266c7353c6", "filename": "src/test/rustdoc/const-generics/const-evaluatable-checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-evaluatable-checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-evaluatable-checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-evaluatable-checked.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n-#![feature(const_evaluatable_checked, const_generics)]\n+#![feature(generic_const_exprs, const_generics)]\n #![allow(incomplete_features)]\n // make sure that `ConstEvaluatable` predicates dont cause rustdoc to ICE #77647\n // @has foo/struct.Ice.html '//pre[@class=\"rust struct\"]' \\"}, {"sha": "3f97474d65f09c37d0e41a0b09459f5635d4921d", "filename": "src/test/ui/associated-consts/associated-const-type-parameter-arrays.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-type-parameter-arrays.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     let _array: [u32; <A as Foo>::Y];\n    |                        ^ cannot perform const operation using `A`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "bffdeb9a336a25d0d7c4a7f4342b861267b72394", "filename": "src/test/ui/associated-item/associated-item-duplicate-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-bounds.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     links: [u32; A::LINKS], // Shouldn't suggest bounds already there.\n    |                  ^^^^^^^^ cannot perform const operation using `A`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "5312a22c2289b98c90016fe68d4181776020cb0c", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    |                                                ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/array-size-in-generic-struct-param.rs:19:15\n@@ -14,7 +14,7 @@ LL |     arr: [u8; CFG.arr_size],\n    |               ^^^ cannot perform const operation using `CFG`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `CFG`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: `Config` is forbidden as the type of a const generic parameter\n   --> $DIR/array-size-in-generic-struct-param.rs:17:21"}, {"sha": "ff686c5e767df833cfb2f6669d7d142b80e11c15", "filename": "src/test/ui/const-generics/auxiliary/generics_of_parent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fgenerics_of_parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fgenerics_of_parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fgenerics_of_parent.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // library portion of regression test for #87674"}, {"sha": "bc3c304cfd88cd3de192ad4f5fc9ef5bc7606ba6", "filename": "src/test/ui/const-generics/auxiliary/generics_of_parent_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fgenerics_of_parent_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fgenerics_of_parent_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fauxiliary%2Fgenerics_of_parent_impl_trait.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // library portion of testing that `impl Trait<{ expr }>` doesnt"}, {"sha": "f01bda84bf5132306221000fa6735bd0647ea42c", "filename": "src/test/ui/const-generics/conservative_is_privately_uninhabited_uses_correct_param_env-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-1.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // This tests that the `conservative_is_privately_uninhabited` fn doesn't cause"}, {"sha": "c48830f01a96f0eef430a4cd223ffc3a731c0db0", "filename": "src/test/ui/const-generics/conservative_is_privately_uninhabited_uses_correct_param_env-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconservative_is_privately_uninhabited_uses_correct_param_env-2.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // This tests that the `conservative_is_privately_uninhabited` fn doesn't cause"}, {"sha": "6805b4a187e2b0bb02ed4fdef925500878bbbee0", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     let _: [u8; foo::<T>()];\n    |                       ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:14:23\n@@ -14,7 +14,7 @@ LL |     let _: [u8; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:24:23\n@@ -23,7 +23,7 @@ LL |     let _ = [0; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:29:24\n@@ -32,7 +32,7 @@ LL |     let _: Foo<{ foo::<T>() }>;\n    |                        ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:30:24\n@@ -41,7 +41,7 @@ LL |     let _: Foo<{ bar::<N>() }>;\n    |                        ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:35:27\n@@ -50,7 +50,7 @@ LL |     let _ = Foo::<{ foo::<T>() }>;\n    |                           ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/const-arg-in-const-arg.rs:36:27\n@@ -59,7 +59,7 @@ LL |     let _ = Foo::<{ bar::<N>() }>;\n    |                           ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n   --> $DIR/const-arg-in-const-arg.rs:15:23"}, {"sha": "ef6bb69e9973a9463f5f2b5360d52cc7bb61e318", "filename": "src/test/ui/const-generics/const-argument-if-length.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     pad: [u8; is_zst::<T>()],\n    |                        ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/const-argument-if-length.rs:16:12"}, {"sha": "9f3d94bbd8abef87c9b89734c5f809b6c095b3ab", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.min.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dbb0fe9d803f7fa8688b33306266a6b054c2c3f4/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbb0fe9d803f7fa8688b33306266a6b054c2c3f4/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr?ref=dbb0fe9d803f7fa8688b33306266a6b054c2c3f4", "patch": "@@ -1,20 +0,0 @@\n-error: generic parameters may not be used in const operations\n-  --> $DIR/simple.rs:7:53\n-   |\n-LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n-   |                                                     ^ cannot perform const operation using `N`\n-   |\n-   = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n-\n-error: generic parameters may not be used in const operations\n-  --> $DIR/simple.rs:7:35\n-   |\n-LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n-   |                                   ^ cannot perform const operation using `N`\n-   |\n-   = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "94ad71b6c1ac9cfa2d31cba6550c71a2dd6f39e2", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dbb0fe9d803f7fa8688b33306266a6b054c2c3f4/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbb0fe9d803f7fa8688b33306266a6b054c2c3f4/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs?ref=dbb0fe9d803f7fa8688b33306266a6b054c2c3f4", "patch": "@@ -1,16 +0,0 @@\n-// [full] run-pass\n-// revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n-#![feature(const_evaluatable_checked)]\n-#![allow(incomplete_features)]\n-\n-fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n-    //[min]~^ ERROR generic parameters\n-    //[min]~| ERROR generic parameters\n-    Default::default()\n-}\n-\n-fn main() {\n-    let x = test::<33>();\n-    assert_eq!(x, [0; 32]);\n-}"}, {"sha": "80359476d6cca787bbbf3a2002b95a85de470500", "filename": "src/test/ui/const-generics/defaults/cec-concrete-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-concrete-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-concrete-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-concrete-default.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked, const_generics_defaults)]\n+#![feature(const_generics, generic_const_exprs, const_generics_defaults)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: usize, const M: usize = { N + 1 }>;"}, {"sha": "eb4a0cec0a6a72f02b13e3334bba973ebfc86540", "filename": "src/test/ui/const-generics/defaults/cec-generic-default-mismatched-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default-mismatched-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default-mismatched-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default-mismatched-types.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked, const_generics_defaults)]\n+#![feature(const_generics, generic_const_exprs, const_generics_defaults)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: usize, const M: usize = { N + 1 }>;"}, {"sha": "02f21adb0d59ed8e0f7fd07f14ade44a04fa10dd", "filename": "src/test/ui/const-generics/defaults/cec-generic-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_evaluatable_checked, const_generics, const_generics_defaults)]\n+#![feature(generic_const_exprs, const_generics, const_generics_defaults)]\n #![allow(incomplete_features)]\n \n pub struct Foo<const N: usize, const M: usize = { N + 1 }>;"}, {"sha": "25004faee6f98298017f76797b8d47a70dbe8a59", "filename": "src/test/ui/const-generics/defaults/complex-generic-default-expr.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-generic-default-expr.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo<const N: usize, const M: usize = { N + 1 }>;\n    |                                               ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-generic-default-expr.rs:10:62\n@@ -14,7 +14,7 @@ LL | struct Bar<T, const TYPE_SIZE: usize = { std::mem::size_of::<T>() }>(T);\n    |                                                              ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eb272e3c9b498508e81389e8b30a3fe267254c02", "filename": "src/test/ui/const-generics/dont-evaluate-array-len-on-err-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdont-evaluate-array-len-on-err-1.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // This tests that during error handling for the \"trait not implemented\" error"}, {"sha": "dd4de9bc1b7a75d444e7c2490ea28b07048fbf18", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n    |                                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/generic-function-call-in-array-length.rs:11:13\n@@ -14,7 +14,7 @@ LL |     [0; foo(N)]\n    |             ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d80d38cf8b1099d4968f3153b5a33e045a1d3481", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n    |                                                     ^ cannot perform const operation using `A`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `A`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/generic-sum-in-array-length.rs:6:57\n@@ -14,7 +14,7 @@ LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n    |                                                         ^ cannot perform const operation using `B`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `B`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4d7c4e003d00e75f25ace5c4277c702837740693", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-1.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(const_evaluatable_checked, const_generics)]\n+#![feature(generic_const_exprs, const_generics)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: u8>([u8; N as usize])", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-1.rs"}, {"sha": "08b46c4c4a358ae719b8aa9817b5bcd23e251697", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-2.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_evaluatable_checked, const_generics)]\n+#![feature(generic_const_exprs, const_generics)]\n #![allow(incomplete_features)]\n \n struct Evaluatable<const N: u128> {}", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-2.rs"}, {"sha": "5ca04d25e556e3a2f89298ca9da58410691b9ac1", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-2.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-2.stderr"}, {"sha": "0cb5410ed26e38060db307c099847bf1110ce491", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-3.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait Trait {}", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-3.rs"}, {"sha": "f235eb443b829c872179ed5ac8642011e4cbcba9", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-3.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-3.stderr"}, {"sha": "66afe517835de4de44040e0f484d7949e98d8e91", "filename": "src/test/ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fabstract-const-as-cast-4.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(const_evaluatable_checked, const_generics)]\n+#![feature(generic_const_exprs, const_generics)]\n #![allow(incomplete_features)]\n \n trait Trait {}", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-4.rs"}, {"sha": "967d1b0f2acb57d2a933185f31b2c22abc3f9af1", "filename": "src/test/ui/const-generics/generic_const_exprs/associated-consts.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassociated-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassociated-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassociated-consts.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n pub trait BlockCipher {", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/associated-consts.rs"}, {"sha": "ce92f908e067706837a927ebeaf917fbb082f90b", "filename": "src/test/ui/const-generics/generic_const_exprs/auxiliary/const_evaluatable_lib.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fconst_evaluatable_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fconst_evaluatable_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fconst_evaluatable_lib.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/auxiliary/const_evaluatable_lib.rs"}, {"sha": "c682fee4fab63b96ec0bd2c8c8525ae5e355750f", "filename": "src/test/ui/const-generics/generic_const_exprs/closures.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n fn test<const N: usize>() -> [u8; N + (|| 42)()] {}\n //~^ ERROR overly complex generic constant", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/closures.rs"}, {"sha": "9f0b7252e8326ff2893c633d2ea735670ed8de3c", "filename": "src/test/ui/const-generics/generic_const_exprs/closures.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/closures.stderr"}, {"sha": "a8388fc541cabdea393b96032d9e8664f2caa626", "filename": "src/test/ui/const-generics/generic_const_exprs/cross_crate.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,6 +1,6 @@\n // aux-build:const_evaluatable_lib.rs\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n extern crate const_evaluatable_lib;\n ", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate.rs"}, {"sha": "4e3aeec9c5de6de492a4193811a92a4e70bf95c0", "filename": "src/test/ui/const-generics/generic_const_exprs/cross_crate_predicate.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // aux-build:const_evaluatable_lib.rs\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n extern crate const_evaluatable_lib;\n ", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate_predicate.rs"}, {"sha": "7b4d46b82097654b67a0e16f76f30298bf4df0d9", "filename": "src/test/ui/const-generics/generic_const_exprs/cross_crate_predicate.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fcross_crate_predicate.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate_predicate.stderr"}, {"sha": "0dcafc6a789c45b2a758d303997bf285106b27f5", "filename": "src/test/ui/const-generics/generic_const_exprs/different-fn.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdifferent-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdifferent-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdifferent-fn.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n use std::mem::size_of;", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/different-fn.rs"}, {"sha": "2aeb9b961ffde2717ea55e673b0b5ce0013baeff", "filename": "src/test/ui/const-generics/generic_const_exprs/different-fn.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdifferent-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdifferent-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdifferent-fn.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/different-fn.stderr"}, {"sha": "c10ed834f0f7c1abf418feacf3efd26d03d95570", "filename": "src/test/ui/const-generics/generic_const_exprs/division.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdivision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdivision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdivision.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n fn with_bound<const N: usize>() where [u8; N / 2]: Sized {", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/division.rs"}, {"sha": "c99cfa6f52ff03d564620db714cdff5f9e64e66e", "filename": "src/test/ui/const-generics/generic_const_exprs/dont-eagerly-error-in-is-const-evaluatable.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdont-eagerly-error-in-is-const-evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdont-eagerly-error-in-is-const-evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdont-eagerly-error-in-is-const-evaluatable.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![feature(const_generics)]\n-#![feature(const_evaluatable_checked)]\n+#![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // This test is a repro for #82279. It checks that we don't error", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/dont-eagerly-error-in-is-const-evaluatable.rs"}, {"sha": "45f63bad6fee2bcfc9fe1e6e934e0f9a5e8d56a5", "filename": "src/test/ui/const-generics/generic_const_exprs/drop_impl.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdrop_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdrop_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdrop_impl.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n //check-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo<const N: usize>", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/drop_impl.rs"}, {"sha": "3c6f01b6160e8a40c95210c4b1951d27197ef2ca", "filename": "src/test/ui/const-generics/generic_const_exprs/elaborate-trait-pred.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Felaborate-trait-pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Felaborate-trait-pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Felaborate-trait-pred.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // Test that we use the elaborated predicates from traits\n // to satisfy const evaluatable predicates.\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n use std::mem::size_of;\n ", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/elaborate-trait-pred.rs"}, {"sha": "f9d78fd708c8723a5daf33f3362766fc2ad20214", "filename": "src/test/ui/const-generics/generic_const_exprs/eval-privacy.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n #![crate_type = \"lib\"]\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n pub struct Const<const U: u8>;", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/eval-privacy.rs"}, {"sha": "842c22c5c677535791c0acef791decbc1d72448a", "filename": "src/test/ui/const-generics/generic_const_exprs/eval-privacy.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-privacy.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/eval-privacy.stderr"}, {"sha": "8acb7aaf34ee858015051969df5cc6124370218a", "filename": "src/test/ui/const-generics/generic_const_exprs/evaluated-to-ambig.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fevaluated-to-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fevaluated-to-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fevaluated-to-ambig.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -4,7 +4,7 @@\n // only contain generic parameters. This is incorrect as trying to unify `N > 1` with `M > 1`\n // should fail.\n #![allow(incomplete_features)]\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n \n enum Assert<const COND: bool> {}\n trait IsTrue {}", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/evaluated-to-ambig.rs"}, {"sha": "26dfcff5d3e38645be886ff324fc235fee9a299a", "filename": "src/test/ui/const-generics/generic_const_exprs/feature-gate-generic_const_exprs.full.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.full.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n error: constant expression depends on a generic parameter\n-  --> $DIR/feature-gate-const_evaluatable_checked.rs:8:30\n+  --> $DIR/feature-gate-generic_const_exprs.rs:8:30\n    |\n LL | fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n    |                              ^^^^^^", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.full.stderr"}, {"sha": "fccd6ea144b00dda864f89ac631cb187036722dc", "filename": "src/test/ui/const-generics/generic_const_exprs/feature-gate-generic_const_exprs.min.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,11 +1,11 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/feature-gate-const_evaluatable_checked.rs:5:33\n+  --> $DIR/feature-gate-generic_const_exprs.rs:5:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n    |                                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n ", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.min.stderr"}, {"sha": "f49ca0251aa93820e0cb0201dabf2aedd65b2bdc", "filename": "src/test/ui/const-generics/generic_const_exprs/feature-gate-generic_const_exprs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffeature-gate-generic_const_exprs.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.rs"}, {"sha": "a1b2a52a5a12ff159fc28fb64a5e0fc97e21148a", "filename": "src/test/ui/const-generics/generic_const_exprs/fn_call.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffn_call.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n const fn test_me<T>(a: usize, b: usize) -> usize {", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/fn_call.rs"}, {"sha": "db097567a152916396b8eeb6eef464981cce3f4f", "filename": "src/test/ui/const-generics/generic_const_exprs/from-sig-fail.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n fn test<const N: usize>() -> [u8; N - 1] {", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/from-sig-fail.rs"}, {"sha": "31ccf9796947267784d546bf3e51492a372209a2", "filename": "src/test/ui/const-generics/generic_const_exprs/from-sig-fail.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig-fail.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/from-sig-fail.stderr"}, {"sha": "d2e672bae4d866cf1dc29c9cf0b7f620a9ffcee9", "filename": "src/test/ui/const-generics/generic_const_exprs/from-sig.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffrom-sig.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo<const B: bool>;", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/from-sig.rs"}, {"sha": "d3f140755f7a3caf511752918b959a1fbc8b2b6c", "filename": "src/test/ui/const-generics/generic_const_exprs/impl-bounds.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fimpl-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fimpl-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fimpl-bounds.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n use std::mem::size_of;", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/impl-bounds.rs"}, {"sha": "4c8fc7a3554ce8dc1fae63537a484ef8e23b19b7", "filename": "src/test/ui/const-generics/generic_const_exprs/infer-too-generic.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Finfer-too-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Finfer-too-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Finfer-too-generic.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n use std::{mem, ptr};", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/infer-too-generic.rs"}, {"sha": "31fe9a53f034c3e45979340ee1653c7c6c1ba9ae", "filename": "src/test/ui/const-generics/generic_const_exprs/less_than.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fless_than.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fless_than.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fless_than.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo<const B: bool>;", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/less_than.rs"}, {"sha": "ea5c95a7444630716134afc3a80a3a12fe0922ea", "filename": "src/test/ui/const-generics/generic_const_exprs/let-bindings.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // We do not yet want to support let-bindings in abstract consts,", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/let-bindings.rs"}, {"sha": "5749defb3e12c679227424fb7eef06d8bf66ad61", "filename": "src/test/ui/const-generics/generic_const_exprs/let-bindings.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/let-bindings.stderr"}, {"sha": "e70bdad908477a4cf30a7e62c577890b61a602d4", "filename": "src/test/ui/const-generics/generic_const_exprs/nested-abstract-consts-1.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested-abstract-consts-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested-abstract-consts-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested-abstract-consts-1.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n fn callee<const M2: usize>() -> usize", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/nested-abstract-consts-1.rs"}, {"sha": "aed3f476f1dfd819859fb527938a53985d457914", "filename": "src/test/ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested-abstract-consts-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested-abstract-consts-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested-abstract-consts-2.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_evaluatable_checked, const_generics)]\n+#![feature(generic_const_exprs, const_generics)]\n #![allow(incomplete_features)]\n \n struct Generic<const K: u64>;", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/nested-abstract-consts-2.rs"}, {"sha": "a86918adfa76f601f78b3c9b9f444773fb424535", "filename": "src/test/ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-1.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n fn zero_init<const N: usize>() -> Substs1<N>", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/nested_uneval_unification-1.rs"}, {"sha": "72fd39b96f8830c0277a9d728d36ce55b8123722", "filename": "src/test/ui/const-generics/generic_const_exprs/nested_uneval_unification-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features, unused_parens, unused_braces)]\n \n fn zero_init<const N: usize>() -> Substs1<{ (N) }>", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/nested_uneval_unification-2.rs"}, {"sha": "81a634a41738b91c5de620ec40e8e35134bf9a88", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-err-ret.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n ", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/object-safety-err-ret.rs"}, {"sha": "319e6c2c032a0e067bf9fd2009cfe3416fbc63f9", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-err-ret.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-ret.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/object-safety-err-ret.stderr"}, {"sha": "22ff9f41276b893387a3b0e779b63a7be6d06ff3", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-err-where-bounds.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n #![deny(where_clauses_object_safety)]\n ", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/object-safety-err-where-bounds.rs"}, {"sha": "45c7d835f339a9321a2f2656939e45c5f8b6de6c", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-err-where-bounds.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-err-where-bounds.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/object-safety-err-where-bounds.stderr"}, {"sha": "e421c43dd94860731f622669a83ebad961c69d89", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-ok-infer-err.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait Foo<const N: usize> {\n@@ -16,7 +16,7 @@ fn use_dyn<const N: usize>(v: &dyn Foo<N>) where [u8; N + 1]: Sized {\n }\n \n fn main() {\n-    // FIXME(const_evaluatable_checked): Improve the error message here.\n+    // FIXME(generic_const_exprs): Improve the error message here.\n     use_dyn(&());\n     //~^ ERROR type annotations needed\n }", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/object-safety-ok-infer-err.rs"}, {"sha": "ce75314ada769e4f476b0c34fe174f6baed91989", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-ok-infer-err.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok-infer-err.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/object-safety-ok-infer-err.stderr"}, {"sha": "0ab8be80f373b0d64104b0ccda71a04631d25dea", "filename": "src/test/ui/const-generics/generic_const_exprs/object-safety-ok.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobject-safety-ok.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait Foo<const N: usize> {", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/object-safety-ok.rs"}, {"sha": "1f2313a6028d1bc4678687abf76dd65300679a4e", "filename": "src/test/ui/const-generics/generic_const_exprs/simple_fail.full.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.full.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.full.stderr"}, {"sha": "f6192bbe9caffbdded334b3619607e0ab505ac15", "filename": "src/test/ui/const-generics/generic_const_exprs/simple_fail.min.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL | type Arr<const N: usize> = [u8; N - 1];\n    |                                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/simple_fail.rs:10:48\n@@ -14,7 +14,7 @@ LL | fn test<const N: usize>() -> Arr<N> where [u8; N - 1]: Sized {\n    |                                                ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n ", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.min.stderr"}, {"sha": "db2f94b7fce10c86193aecd634c48a5a4ee85c9d", "filename": "src/test/ui/const-generics/generic_const_exprs/simple_fail.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsimple_fail.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,6 +1,6 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n-#![cfg_attr(full, feature(const_evaluatable_checked))]\n+#![cfg_attr(full, feature(generic_const_exprs))]\n #![allow(incomplete_features)]\n \n type Arr<const N: usize> = [u8; N - 1];", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.rs"}, {"sha": "71c594657e033b0095c1f4b86d5628d74a74406c", "filename": "src/test/ui/const-generics/generic_const_exprs/subexprs_are_const_evalutable.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsubexprs_are_const_evalutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsubexprs_are_const_evalutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fsubexprs_are_const_evalutable.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n fn make_array<const M: usize>() -> [(); M + 1] {", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/subexprs_are_const_evalutable.rs"}, {"sha": "abb9df162884510a7e3e34f6644e5b5048cc750a", "filename": "src/test/ui/const-generics/generic_const_exprs/ty-alias-substitution.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fty-alias-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fty-alias-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fty-alias-substitution.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n // Test that we correctly substitute generic arguments for type aliases.\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n type Alias<T, const N: usize> = [T; N + 1];", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/ty-alias-substitution.rs"}, {"sha": "e0e373b62f94c4f25ff1b01b26b4d3bbe8ca0298", "filename": "src/test/ui/const-generics/generic_const_exprs/unop.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funop.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Foo<const B: bool>;", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/unop.rs"}, {"sha": "c0da46d6d5f792d2bd1c5424878798cd8abb302f", "filename": "src/test/ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused-complex-default-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused-complex-default-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused-complex-default-expr.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(const_generics, const_evaluatable_checked, const_generics_defaults)]\n+#![feature(const_generics, generic_const_exprs, const_generics_defaults)]\n #![allow(incomplete_features)]\n struct Foo<const N: usize, const M: usize = { N + 1 }>;\n struct Bar<const N: usize>(Foo<N, 3>);", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/unused-complex-default-expr.rs"}, {"sha": "44b6530f22e832f9512ce786bcf87f478b653e8a", "filename": "src/test/ui/const-generics/generic_const_exprs/unused_expr.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n fn add<const N: usize>() -> [u8; { N + 1; 5 }] {", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/unused_expr.rs"}, {"sha": "1687dbbcbe3f8c3fedef497409a5aec01dfb0586", "filename": "src/test/ui/const-generics/generic_const_exprs/unused_expr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "previous_filename": "src/test/ui/const-generics/const_evaluatable_checked/unused_expr.stderr"}, {"sha": "f1ea52825e03abcc6e3d6cdae5b520bb8e1dd269", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n    |                                            ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: `&'static str` is forbidden as the type of a const generic parameter\n   --> $DIR/intrinsics-type_name-as-const-argument.rs:9:22"}, {"sha": "6d6bca4255ac7662ea048d71f7a452ccf8b6e074", "filename": "src/test/ui/const-generics/issues/issue-61522-array-len-succ.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61522-array-len-succ.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61522-array-len-succ.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61522-array-len-succ.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n    |                                             ^^^^^ cannot perform const operation using `COUNT`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `COUNT`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-61522-array-len-succ.rs:11:30\n@@ -14,7 +14,7 @@ LL |     fn inner(&self) -> &[u8; COUNT + 1] {\n    |                              ^^^^^ cannot perform const operation using `COUNT`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `COUNT`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cc8c4db9c396066196ffb5e97f99b5e524712127", "filename": "src/test/ui/const-generics/issues/issue-61747.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     fn successor() -> Const<{C + 1}> {\n    |                              ^ cannot perform const operation using `C`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `C`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "a635d5e84a2e5b42fff42a6d84ed61e6760ad593", "filename": "src/test/ui/const-generics/issues/issue-61935.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |         Self:FooImpl<{N==0}>\n    |                       ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "54a93733f3225b105e0d62f3cec3a12f4e7e5828", "filename": "src/test/ui/const-generics/issues/issue-62220.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL | pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n    |                                                           ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "1e90d0b3f5027c203104e47f284eb644c8420bb4", "filename": "src/test/ui/const-generics/issues/issue-62456.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = [0u64; N + 1];\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "8cb9981a534cc8e891192017186a963a39922d7a", "filename": "src/test/ui/const-generics/issues/issue-64494.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n    |                                      ^^^^^^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-64494.rs:18:38\n@@ -14,7 +14,7 @@ LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n    |                                      ^^^^^^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0119]: conflicting implementations of trait `MyTrait`\n   --> $DIR/issue-64494.rs:18:1"}, {"sha": "1dd4baaa5b5773872be4084c4fc9a2a05cfca002", "filename": "src/test/ui/const-generics/issues/issue-66205.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     fact::<{ N - 1 }>();\n    |              ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "c005e03f20c351b34531a22b2c8b718be792492b", "filename": "src/test/ui/const-generics/issues/issue-67375.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n    |                         ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/issue-67375.rs:6:12"}, {"sha": "70e2518ca2af0909fd2938639f133791141bc9b9", "filename": "src/test/ui/const-generics/issues/issue-67945-1.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |         let x: S = MaybeUninit::uninit();\n    |                ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-67945-1.rs:16:45\n@@ -14,7 +14,7 @@ LL |         let b = &*(&x as *const _ as *const S);\n    |                                             ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-1.rs:10:12"}, {"sha": "24476d4fac8fed216ae22af8145d229efb83368e", "filename": "src/test/ui/const-generics/issues/issue-67945-2.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |         let x: S = MaybeUninit::uninit();\n    |                ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-67945-2.rs:14:45\n@@ -14,7 +14,7 @@ LL |         let b = &*(&x as *const _ as *const S);\n    |                                             ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-2.rs:8:12"}, {"sha": "9519b23b48445c6aa35849ea2e784ddf1794c188", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    |                                     ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n   --> $DIR/issue-68366.rs:11:13"}, {"sha": "78da8412cdfbd8d1910f4de23028f875d5814046", "filename": "src/test/ui/const-generics/issues/issue-68977.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n    |                 ^^^^^^^^ cannot perform const operation using `INT_BITS`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `INT_BITS`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-68977.rs:28:28\n@@ -14,7 +14,7 @@ LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n    |                            ^^^^^^^^^ cannot perform const operation using `FRAC_BITS`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `FRAC_BITS`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6314650e0d8b61861647b9001fb54af8f1c6b2c3", "filename": "src/test/ui/const-generics/issues/issue-72787.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     Condition<{ LHS <= RHS }>: True\n    |                 ^^^ cannot perform const operation using `LHS`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `LHS`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:10:24\n@@ -14,7 +14,7 @@ LL |     Condition<{ LHS <= RHS }>: True\n    |                        ^^^ cannot perform const operation using `RHS`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `RHS`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:25:25\n@@ -23,7 +23,7 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                         ^ cannot perform const operation using `I`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `I`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:25:36\n@@ -32,7 +32,7 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                    ^ cannot perform const operation using `J`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `J`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72787.rs:21:26"}, {"sha": "70adabea56105c07cf38b67d3f66d5d063bf73d4", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL | where Assert::<{N < usize::MAX / 2}>: IsTrue,\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "ece8eb2c9ec90de135a227b888a7fabf784f241c", "filename": "src/test/ui/const-generics/issues/issue-73899.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73899.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(const_evaluatable_checked)]\n+#![feature(generic_const_exprs)]\n #![feature(const_generics)]\n #![allow(incomplete_features)]\n "}, {"sha": "6e9af5bbb30574f167d5d99186557719383f0907", "filename": "src/test/ui/const-generics/issues/issue-76595.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n struct Bool<const B: bool>;"}, {"sha": "efff3f42a3e5cd5ee08d63f54dc6e7428d2f168d", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL | fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n    |                                              ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/issue-76701-ty-param-in-const.rs:11:42\n@@ -14,7 +14,7 @@ LL | fn const_param<const N: usize>() -> [u8; N + 1] {\n    |                                          ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b0bd3d8a2c93545164db36ae87f1e571e0ea28e4", "filename": "src/test/ui/const-generics/issues/issue-79518-default_trait_method_normalization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79518-default_trait_method_normalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79518-default_trait_method_normalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-79518-default_trait_method_normalization.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // This test is a minimized reproduction for #79518 where"}, {"sha": "c714253b909d950a33d019526aa272e98ef842d4", "filename": "src/test/ui/const-generics/issues/issue-80062.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-80062.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-80062.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-80062.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     let _: [u8; sof::<T>()];\n    |                       ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "f80029680ff9a491560a5437b81329a81cf0f928", "filename": "src/test/ui/const-generics/issues/issue-80375.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-80375.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-80375.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-80375.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL | struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n    |                                         ^^^^^ cannot perform const operation using `COUNT`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `COUNT`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "1b9967a7b49be122a50f3217ae4d0880b8760358", "filename": "src/test/ui/const-generics/issues/issue-80561-incorrect-param-env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-80561-incorrect-param-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-80561-incorrect-param-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-80561-incorrect-param-env.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // This tests that the correct `param_env` is used so that"}, {"sha": "e2b859c0f859e942e6f9ac1f61fee42df95f4d22", "filename": "src/test/ui/const-generics/issues/issue-83765.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait TensorDimension {"}, {"sha": "fb49cba2a34c084afd354234e60f3711bfad90dd", "filename": "src/test/ui/const-generics/issues/issue-84408.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84408.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84408.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84408.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,7 +1,7 @@\n // Regression test for #84408.\n // check-pass\n \n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait Melon<const X: usize> {"}, {"sha": "4d75fdb7d1df98af9b98a8ce78d1b466f5e9bf7d", "filename": "src/test/ui/const-generics/issues/issue-85848.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_fn_trait_bound, const_evaluatable_checked)]\n+#![feature(const_generics, const_fn_trait_bound, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n trait _Contains<T> {"}, {"sha": "f6d8020f3fbb9275d5adcfefcfc47fe1cb2cc520", "filename": "src/test/ui/const-generics/macro_rules-braces.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -27,7 +27,7 @@ LL |     let _: foo!({{ N }});\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/macro_rules-braces.rs:40:19\n@@ -36,7 +36,7 @@ LL |     let _: bar!({ N });\n    |                   ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/macro_rules-braces.rs:45:20\n@@ -45,7 +45,7 @@ LL |     let _: baz!({{ N }});\n    |                    ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/macro_rules-braces.rs:50:19\n@@ -54,7 +54,7 @@ LL |     let _: biz!({ N });\n    |                   ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to 6 previous errors\n "}, {"sha": "8d9246fe56f447ea53f0e22d6efdd2315026633d", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n    |                                      ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:12:40\n@@ -14,7 +14,7 @@ LL | struct Break1<const N: usize>([u8; { { N } }]);\n    |                                        ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:16:17\n@@ -23,7 +23,7 @@ LL |     let _: [u8; N + 1];\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:21:17\n@@ -32,7 +32,7 @@ LL |     let _ = [0; N + 1];\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:25:45\n@@ -41,7 +41,7 @@ LL | struct BreakTy0<T>(T, [u8; { size_of::<*mut T>() }]);\n    |                                             ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:28:47\n@@ -50,7 +50,7 @@ LL | struct BreakTy1<T>(T, [u8; { { size_of::<*mut T>() } }]);\n    |                                               ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:32:32\n@@ -59,7 +59,7 @@ LL |     let _: [u8; size_of::<*mut T>() + 1];\n    |                                ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n warning: cannot use constants which depend on generic parameters in types\n   --> $DIR/complex-expression.rs:37:17"}, {"sha": "cc114f702392269d994f498cf398d171ef9bece9", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     fn t1() -> [u8; std::mem::size_of::<Self>()];\n    |                                         ^^^^ cannot perform const operation using `Self`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic `Self` types are currently not permitted in anonymous constants\n   --> $DIR/self-ty-in-const-1.rs:12:41"}, {"sha": "961aeefd5505abb8b443de191e9269d79ab4d9c5", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n // `N + 1` also depends on `T` here even if it doesn't use it."}, {"sha": "1c5ff9175f37e6a5bfe48f518e10707e469c101a", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -13,7 +13,7 @@ LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n    |                                            ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0128]: generic parameters with a default cannot use forward declared identifiers\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:8:21"}, {"sha": "4d94b789a6c91cb6c8eebdc9b7bfd43b34ba2270", "filename": "src/test/ui/const-generics/parent_generics_of_encoding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,6 +1,6 @@\n // aux-build:generics_of_parent.rs\n // check-pass\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n extern crate generics_of_parent;"}, {"sha": "5ac5161ca8f721ec90ef2785c9702a30cb9f2d8f", "filename": "src/test/ui/const-generics/parent_generics_of_encoding_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding_impl_trait.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n // aux-build:generics_of_parent_impl_trait.rs\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n extern crate generics_of_parent_impl_trait;"}, {"sha": "bc4c3f01ea9c1d445a93f5f441dd050fadb1977e", "filename": "src/test/ui/const-generics/wf-misc.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     let _: [u8; N + 1];\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n   --> $DIR/wf-misc.rs:16:21\n@@ -14,7 +14,7 @@ LL |     let _: Const::<{N + 1}>;\n    |                     ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e8a625101d6b6b07dba35be45f4db253abcb5503", "filename": "src/test/ui/const_evaluatable/needs_where_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,5 +1,5 @@\n #![crate_type = \"lib\"]\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features)]\n \n const fn complex_maths<T>(n : usize) -> usize {"}, {"sha": "6ae517af0d5b1650805e019538caf48f669b7ec8", "filename": "src/test/ui/const_evaluatable/no_where_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_generics, const_evaluatable_checked)]\n+#![feature(const_generics, generic_const_exprs)]\n #![allow(incomplete_features, unused)]\n \n const fn complex_maths(n : usize) -> usize {"}, {"sha": "c7677f81b5fa1ef2f84caf908f9b3f5a0f442482", "filename": "src/test/ui/enum-discriminant/issue-70453-generics-in-discr-ice-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     Some(T) = std::mem::size_of::<T>(),\n    |                                   ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "c3735658aa7d812505a69f27cf04cec12468de8d", "filename": "src/test/ui/enum-discriminant/issue-70453-generics-in-discr-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     Some = std::mem::size_of::<T>(),\n    |                                ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/issue-70453-generics-in-discr-ice.rs:7:20"}, {"sha": "ee0c3525b62d5e2c3bd6d690c6e874cd47a9682f", "filename": "src/test/ui/enum-discriminant/issue-70453-polymorphic-ctfe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     Some(T) = core::mem::size_of::<*mut T>(),\n    |                                         ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "21f005aa49f0008c79d88efe15c5704f290a8ab7", "filename": "src/test/ui/enum/issue-67945-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fenum%2Fissue-67945-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fenum%2Fissue-67945-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fissue-67945-1.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |         let x: S = 0;\n    |                ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-1.rs:1:10"}, {"sha": "8996df8ae10e96b3e50ba97ae84d27339c04b1ce", "filename": "src/test/ui/enum/issue-67945-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fissue-67945-2.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     Var = 0: S,\n    |              ^ cannot perform const operation using `S`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-2.rs:3:10"}, {"sha": "7ea12e74e1edbcd5ebb8a7b25f7958c1384cf6b8", "filename": "src/test/ui/generics/param-in-ct-in-ty-param-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fgenerics%2Fparam-in-ct-in-ty-param-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fgenerics%2Fparam-in-ct-in-ty-param-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fparam-in-ct-in-ty-param-default.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n    |                                            ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "d71844eafde249c62a53ac5174ef295f79827967", "filename": "src/test/ui/issues/issue-39559.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     entries: [T; D::dim()],\n    |                  ^^^^^^ cannot perform const operation using `D`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "fdbde21a41089fd34c6454628ab8e0ca6ee3c36c", "filename": "src/test/ui/lazy_normalization_consts/feature-gate-lazy_normalization_consts.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Ffeature-gate-lazy_normalization_consts.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -5,7 +5,7 @@ LL |     let _: [u8; sof::<T>()];\n    |                       ^ cannot perform const operation using `T`\n    |\n    = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to previous error\n "}, {"sha": "d65e9f05904bb5d1cac2184e7f8158e0cfdd5474", "filename": "src/test/ui/legacy-const-generics-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flegacy-const-generics-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Flegacy-const-generics-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flegacy-const-generics-bad.stderr?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -13,7 +13,7 @@ LL |     legacy_const_generics::foo(0, N + 1, 2);\n    |                                   ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n-   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+   = help: use `#![feature(const_generics)]` and `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cfd87bd9769bd636747d1d2154072b8a3df48e24", "filename": "src/test/ui/mir/issue-80742.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fmir%2Fissue-80742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fmir%2Fissue-80742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-80742.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -3,7 +3,7 @@\n // This test used to cause an ICE in rustc_mir::interpret::step::eval_rvalue_into_place\n \n #![allow(incomplete_features)]\n-#![feature(const_evaluatable_checked)]\n+#![feature(generic_const_exprs)]\n #![feature(const_generics)]\n \n use std::fmt::Debug;"}, {"sha": "e82d40d33cd7960e88446a442aa75f379c79620f", "filename": "src/test/ui/specialization/issue-51892.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -1,6 +1,6 @@\n #![allow(incomplete_features)]\n #![feature(const_generics)]\n-#![feature(const_evaluatable_checked)]\n+#![feature(generic_const_exprs)]\n #![feature(specialization)]\n \n pub trait Trait {"}, {"sha": "8b20997fdf8d82d63dd37b96e329ba45e1528790", "filename": "src/tools/clippy/tests/ui/doc/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdoc%2Fdoc.rs?ref=fcc2badf9b1e6d63c5221d206628ab1aaf3b5bdc", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(dead_code, incomplete_features)]\n #![warn(clippy::doc_markdown)]\n-#![feature(custom_inner_attributes, const_generics, const_evaluatable_checked, const_option)]\n+#![feature(custom_inner_attributes, const_generics, generic_const_exprs, const_option)]\n #![rustfmt::skip]\n \n /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n@@ -203,7 +203,7 @@ fn issue_2343() {}\n /// __|_ _|__||_|\n fn pulldown_cmark_crash() {}\n \n-// issue #7033 - const_evaluatable_checked ICE\n+// issue #7033 - generic_const_exprs ICE\n struct S<T, const N: usize>\n where [(); N.checked_next_power_of_two().unwrap()]: {\n     arr: [T; N.checked_next_power_of_two().unwrap()],"}]}