{"sha": "90f8277fe3ce6d0e238feac3bf10891f8c18f23a", "node_id": "C_kwDOAAsO6NoAKDkwZjgyNzdmZTNjZTZkMGUyMzhmZWFjM2JmMTA4OTFmOGMxOGYyM2E", "commit": {"author": {"name": "Evan Typanski", "email": "evan.typanski@microfocus.com", "date": "2022-06-22T18:08:47Z"}, "committer": {"name": "Evan Typanski", "email": "evan.typanski@microfocus.com", "date": "2022-06-22T18:23:04Z"}, "message": "Fix case for function params", "tree": {"sha": "3260ea77d05c7e3e6f59bbad54cf79cfd6e19e56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3260ea77d05c7e3e6f59bbad54cf79cfd6e19e56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90f8277fe3ce6d0e238feac3bf10891f8c18f23a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90f8277fe3ce6d0e238feac3bf10891f8c18f23a", "html_url": "https://github.com/rust-lang/rust/commit/90f8277fe3ce6d0e238feac3bf10891f8c18f23a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90f8277fe3ce6d0e238feac3bf10891f8c18f23a/comments", "author": null, "committer": null, "parents": [{"sha": "c8df6d6970749abc8ee3b3b5f78d4c1a9ad33bb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8df6d6970749abc8ee3b3b5f78d4c1a9ad33bb6", "html_url": "https://github.com/rust-lang/rust/commit/c8df6d6970749abc8ee3b3b5f78d4c1a9ad33bb6"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "c338447686f27044a240a64a88d2ac8f4b5df32b", "filename": "clippy_lints/src/manual_rem_euclid.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/90f8277fe3ce6d0e238feac3bf10891f8c18f23a/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f8277fe3ce6d0e238feac3bf10891f8c18f23a/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=90f8277fe3ce6d0e238feac3bf10891f8c18f23a", "patch": "@@ -61,12 +61,23 @@ impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n             && op3.node == BinOpKind::Rem\n             && let Some((const3, expr3)) = check_for_positive_int_constant(cx, expr2, false)\n             && const1 == const2 && const2 == const3\n-            // Only apply if we see an explicit type annotation on the local.\n             && let Some(hir_id) = path_to_local(expr3)\n-            && let Some(Node::Binding(_)) = cx.tcx.hir().find(hir_id)\n-            && let Some(Node::Local(local)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id))\n-            && let Some(ty) = local.ty\n-            && !matches!(ty.kind, TyKind::Infer) {\n+            && let Some(Node::Binding(_)) = cx.tcx.hir().find(hir_id) {\n+                // Apply only to params or locals with annotated types\n+                match cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+                    Some(Node::Param(..)) => (),\n+                    Some(Node::Local(local)) => {\n+                        if let Some(ty) = local.ty {\n+                            if matches!(ty.kind, TyKind::Infer) {\n+                                return;\n+                            }\n+                        } else {\n+                            return;\n+                        }\n+                    }\n+                    _ => return,\n+                };\n+\n                 let mut app = Applicability::MachineApplicable;\n                 let rem_of = snippet_with_applicability(cx, expr3.span, \"_\", &mut app);\n                 span_lint_and_sugg("}, {"sha": "7dcd78f463360cf39d38de33da02a86ea54ff33c", "filename": "tests/ui/manual_rem_euclid.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90f8277fe3ce6d0e238feac3bf10891f8c18f23a/tests%2Fui%2Fmanual_rem_euclid.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/90f8277fe3ce6d0e238feac3bf10891f8c18f23a/tests%2Fui%2Fmanual_rem_euclid.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.fixed?ref=90f8277fe3ce6d0e238feac3bf10891f8c18f23a", "patch": "@@ -26,3 +26,8 @@ fn main() {\n     let _: i32 = 4 % ((value % 4) + 4);\n     let _: i32 = ((4 % value) + 4) % 4;\n }\n+\n+// Should lint for params too\n+pub fn rem_euclid_4(num: i32) -> i32 {\n+    num.rem_euclid(4)\n+}"}, {"sha": "f5d88ed6dfc57982c513ef0c1bf5ed42e4cb6d27", "filename": "tests/ui/manual_rem_euclid.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90f8277fe3ce6d0e238feac3bf10891f8c18f23a/tests%2Fui%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f8277fe3ce6d0e238feac3bf10891f8c18f23a/tests%2Fui%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.rs?ref=90f8277fe3ce6d0e238feac3bf10891f8c18f23a", "patch": "@@ -26,3 +26,8 @@ fn main() {\n     let _: i32 = 4 % ((value % 4) + 4);\n     let _: i32 = ((4 % value) + 4) % 4;\n }\n+\n+// Should lint for params too\n+pub fn rem_euclid_4(num: i32) -> i32 {\n+    ((num % 4) + 4) % 4\n+}"}, {"sha": "bad6e66beef70e85549ee25f941cb8ed223e121d", "filename": "tests/ui/manual_rem_euclid.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90f8277fe3ce6d0e238feac3bf10891f8c18f23a/tests%2Fui%2Fmanual_rem_euclid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f8277fe3ce6d0e238feac3bf10891f8c18f23a/tests%2Fui%2Fmanual_rem_euclid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_rem_euclid.stderr?ref=90f8277fe3ce6d0e238feac3bf10891f8c18f23a", "patch": "@@ -30,5 +30,11 @@ error: manual `rem_euclid` implementation\n LL |     let _: i32 = 1 + (4 + value % 4) % 4;\n    |                      ^^^^^^^^^^^^^^^^^^^ help: consider using: `value.rem_euclid(4)`\n \n-error: aborting due to 5 previous errors\n+error: manual `rem_euclid` implementation\n+  --> $DIR/manual_rem_euclid.rs:32:5\n+   |\n+LL |     ((num % 4) + 4) % 4\n+   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `num.rem_euclid(4)`\n+\n+error: aborting due to 6 previous errors\n "}]}