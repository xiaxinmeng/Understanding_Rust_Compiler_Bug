{"sha": "6e6fe30d0f7e3dcbbf3988650311cee179992e5d", "node_id": "C_kwDOAAsO6NoAKDZlNmZlMzBkMGY3ZTNkY2JiZjM5ODg2NTAzMTFjZWUxNzk5OTJlNWQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-20T17:53:29Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-23T17:23:35Z"}, "message": "Comment why normalization is needed for debug assertions", "tree": {"sha": "31530f216f64efa6a19ad6352d432430ed2e2216", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31530f216f64efa6a19ad6352d432430ed2e2216"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e6fe30d0f7e3dcbbf3988650311cee179992e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e6fe30d0f7e3dcbbf3988650311cee179992e5d", "html_url": "https://github.com/rust-lang/rust/commit/6e6fe30d0f7e3dcbbf3988650311cee179992e5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e6fe30d0f7e3dcbbf3988650311cee179992e5d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd51b36fb261513a0886d98c16be7fcc43c66272", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd51b36fb261513a0886d98c16be7fcc43c66272", "html_url": "https://github.com/rust-lang/rust/commit/dd51b36fb261513a0886d98c16be7fcc43c66272"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "0c212cf59e17fe1d5b2e26eccd8fa04699289a8c", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e6fe30d0f7e3dcbbf3988650311cee179992e5d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6fe30d0f7e3dcbbf3988650311cee179992e5d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=6e6fe30d0f7e3dcbbf3988650311cee179992e5d", "patch": "@@ -554,6 +554,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         val: &mir::ConstantKind<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::Provenance>> {\n+        // FIXME(const_prop): normalization needed b/c const prop lint in\n+        // `mir_drops_elaborated_and_const_checked`, which happens before\n+        // optimized MIR. Only after optimizing the MIR can we guarantee\n+        // that the `RevealAll` pass has happened and that the body's consts\n+        // are normalized, so any call to resolve before that needs to be\n+        // manually normalized.\n+        let val = self.tcx.normalize_erasing_regions(self.param_env, *val);\n         match val {\n             mir::ConstantKind::Ty(ct) => {\n                 match ct.kind() {\n@@ -585,7 +592,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     }\n                 }\n             }\n-            mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, *ty, layout),\n+            mir::ConstantKind::Val(val, ty) => self.const_val_to_op(val, ty, layout),\n             mir::ConstantKind::Unevaluated(uv, _) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;\n                 Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())"}, {"sha": "2526522a25c8c882aa536d9864245aeb6c555c15", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e6fe30d0f7e3dcbbf3988650311cee179992e5d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e6fe30d0f7e3dcbbf3988650311cee179992e5d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=6e6fe30d0f7e3dcbbf3988650311cee179992e5d", "patch": "@@ -483,7 +483,12 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         // Use `Reveal::All` here because patterns are always monomorphic even if their function\n         // isn't.\n         let param_env_reveal_all = self.param_env.with_reveal_all_normalized(self.tcx);\n-        let substs = self.typeck_results.node_substs(id);\n+        // N.B. There is no guarantee that substs collected in typeck results are fully normalized,\n+        // so they need to be normalized in order to pass to `Instance::resolve`, which will ICE\n+        // if given unnormalized types.\n+        let substs = self\n+            .tcx\n+            .normalize_erasing_regions(param_env_reveal_all, self.typeck_results.node_substs(id));\n         let instance = match ty::Instance::resolve(self.tcx, param_env_reveal_all, def_id, substs) {\n             Ok(Some(i)) => i,\n             Ok(None) => {"}]}