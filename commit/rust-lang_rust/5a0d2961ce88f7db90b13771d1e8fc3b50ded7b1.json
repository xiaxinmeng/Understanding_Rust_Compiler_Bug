{"sha": "5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMGQyOTYxY2U4OGY3ZGI5MGIxMzc3MWQxZThmYzNiNTBkZWQ3YjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-12T21:52:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-12T21:52:22Z"}, "message": "Auto merge of #53297 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #52955 (Update compiler test documentation)\n - #53019 (Don't collect() when size_hint is useless)\n - #53025 (Consider changing assert! to debug_assert! when it calls visit_with)\n - #53059 (Remove explicit returns where unnecessary)\n - #53165 ( Add aarch64-unknown-netbsd target)\n - #53210 (Deny future duplication of rustc-ap-syntax)\n - #53223 (A few cleanups for rustc_data_structures)\n - #53230 ([nll] enable feature(nll) on various crates for bootstrap: part 4)\n - #53231 (Add let keyword doc)\n - #53240 (Add individual documentation for <integer>`.swap_bytes`/.`reverse_bits`)\n - #53253 (Remove unwanted console log)\n - #53264 (Show that Command can be reused and remodified)\n - #53267 (Fix styles)\n - #53273 (Add links to std::char::REPLACEMENT_CHARACTER from docs.)\n - #53283 (wherein we suggest float for integer literals where a float was expected)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "ced0be3c60e37e3c4dd697e2a9da8148c48fddc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ced0be3c60e37e3c4dd697e2a9da8148c48fddc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "html_url": "https://github.com/rust-lang/rust/commit/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aa8d0320266b5579428312095fe49af05ada972", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa8d0320266b5579428312095fe49af05ada972", "html_url": "https://github.com/rust-lang/rust/commit/0aa8d0320266b5579428312095fe49af05ada972"}, {"sha": "3959dca205003ecc4f3f7b3f4ad26eec33a6bdf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3959dca205003ecc4f3f7b3f4ad26eec33a6bdf8", "html_url": "https://github.com/rust-lang/rust/commit/3959dca205003ecc4f3f7b3f4ad26eec33a6bdf8"}], "stats": {"total": 870, "additions": 465, "deletions": 405}, "files": [{"sha": "d5e1ed02b44c173d5e4159b35e92f70a7de0b4b0", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -607,6 +607,7 @@ impl Step for Openssl {\n             \"aarch64-linux-android\" => \"linux-aarch64\",\n             \"aarch64-unknown-linux-gnu\" => \"linux-aarch64\",\n             \"aarch64-unknown-linux-musl\" => \"linux-aarch64\",\n+            \"aarch64-unknown-netbsd\" => \"BSD-generic64\",\n             \"arm-linux-androideabi\" => \"android\",\n             \"arm-unknown-linux-gnueabi\" => \"linux-armv4\",\n             \"arm-unknown-linux-gnueabihf\" => \"linux-armv4\","}, {"sha": "dd559df08cce6b356e77e8efa9e538018f0f3507", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -519,10 +519,11 @@ impl String {\n     /// between the two. Not all byte slices are valid strings, however: strings\n     /// are required to be valid UTF-8. During this conversion,\n     /// `from_utf8_lossy()` will replace any invalid UTF-8 sequences with\n-    /// `U+FFFD REPLACEMENT CHARACTER`, which looks like this: \ufffd\n+    /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD], which looks like this: \ufffd\n     ///\n     /// [`u8`]: ../../std/primitive.u8.html\n     /// [byteslice]: ../../std/primitive.slice.html\n+    /// [U+FFFD]: ../char/constant.REPLACEMENT_CHARACTER.html\n     ///\n     /// If you are sure that the byte slice is valid UTF-8, and you don't want\n     /// to incur the overhead of the conversion, there is an unsafe version\n@@ -621,14 +622,15 @@ impl String {\n     }\n \n     /// Decode a UTF-16 encoded slice `v` into a `String`, replacing\n-    /// invalid data with the replacement character (U+FFFD).\n+    /// invalid data with [the replacement character (`U+FFFD`)][U+FFFD].\n     ///\n     /// Unlike [`from_utf8_lossy`] which returns a [`Cow<'a, str>`],\n     /// `from_utf16_lossy` returns a `String` since the UTF-16 to UTF-8\n     /// conversion requires a memory allocation.\n     ///\n     /// [`from_utf8_lossy`]: #method.from_utf8_lossy\n     /// [`Cow<'a, str>`]: ../borrow/enum.Cow.html\n+    /// [U+FFFD]: ../char/constant.REPLACEMENT_CHARACTER.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "35e4eea756d41ca0cceef932b15751a3928f1331", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -217,7 +217,7 @@ impl Layout {\n \n         let len_rounded_up = len.wrapping_add(align).wrapping_sub(1)\n             & !align.wrapping_sub(1);\n-        return len_rounded_up.wrapping_sub(len);\n+        len_rounded_up.wrapping_sub(len)\n     }\n \n     /// Creates a layout describing the record for `n` instances of\n@@ -971,9 +971,9 @@ pub unsafe trait Alloc {\n         // _l <= layout.size()                       [guaranteed by usable_size()]\n         //       layout.size() <= new_layout.size()  [required by this method]\n         if new_size <= u {\n-            return Ok(());\n+            Ok(())\n         } else {\n-            return Err(CannotReallocInPlace);\n+            Err(CannotReallocInPlace)\n         }\n     }\n \n@@ -1026,9 +1026,9 @@ pub unsafe trait Alloc {\n         //                      layout.size() <= _u  [guaranteed by usable_size()]\n         // new_layout.size() <= layout.size()        [required by this method]\n         if l <= new_size {\n-            return Ok(());\n+            Ok(())\n         } else {\n-            return Err(CannotReallocInPlace);\n+            Err(CannotReallocInPlace)\n         }\n     }\n "}, {"sha": "7e1313747eef205f2d92d6e54645b8914159216a", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -312,8 +312,8 @@ impl Iterator for EscapeDefault {\n                     None\n                 }\n             },\n-            EscapeDefaultState::Done => return None,\n-            EscapeDefaultState::Unicode(ref mut i) => return i.nth(n),\n+            EscapeDefaultState::Done => None,\n+            EscapeDefaultState::Unicode(ref mut i) => i.nth(n),\n         }\n     }\n "}, {"sha": "178ae62dd3dfa88efdd89de7e878d645e9a6bd22", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -92,6 +92,7 @@\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n #![feature(never_type)]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(exhaustive_patterns)]\n #![feature(macro_at_most_once_rep)]\n #![feature(no_core)]"}, {"sha": "eb63966354b8644f86a8dcc373403b0d566d7d87", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 112, "deletions": 113, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -188,7 +188,8 @@ mod wrapping;\n // `Int` + `SignedInt` implemented for signed integers\n macro_rules! int_impl {\n     ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr, $Min:expr, $Max:expr, $Feature:expr,\n-     $EndFeature:expr, $rot:expr, $rot_op:expr, $rot_result:expr) => {\n+     $EndFeature:expr, $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n+     $reversed:expr) => {\n         doc_comment! {\n             concat!(\"Returns the smallest value that can be represented by this integer type.\n \n@@ -380,55 +381,48 @@ assert_eq!(n.rotate_right(\", $rot, \"), m);\n                 (self as $UnsignedT).rotate_right(n) as Self\n             }\n         }\n-        /// Reverses the byte order of the integer.\n-        ///\n-        /// # Examples\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `i16` is used here.\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// ```\n-        /// let n: i16 = 0b0000000_01010101;\n-        /// assert_eq!(n, 85);\n-        ///\n-        /// let m = n.swap_bytes();\n-        ///\n-        /// assert_eq!(m, 0b01010101_00000000);\n-        /// assert_eq!(m, 21760);\n-        /// ```\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_int_ops\")]\n-        #[inline]\n-        pub const fn swap_bytes(self) -> Self {\n-            (self as $UnsignedT).swap_bytes() as Self\n+        doc_comment! {\n+            concat!(\"Reverses the byte order of the integer.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+let n = \", $swap_op, stringify!($SelfT), \";\n+\n+let m = n.swap_bytes();\n+\n+assert_eq!(m, \", $swapped, \");\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn swap_bytes(self) -> Self {\n+                (self as $UnsignedT).swap_bytes() as Self\n+            }\n         }\n \n-        /// Reverses the bit pattern of the integer.\n-        ///\n-        /// # Examples\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `i16` is used here.\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// ```\n-        /// #![feature(reverse_bits)]\n-        ///\n-        /// let n: i16 = 0b0000000_01010101;\n-        /// assert_eq!(n, 85);\n-        ///\n-        /// let m = n.reverse_bits();\n-        ///\n-        /// assert_eq!(m as u16, 0b10101010_00000000);\n-        /// assert_eq!(m, -22016);\n-        /// ```\n-        #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n-        #[inline]\n-        pub fn reverse_bits(self) -> Self {\n-            (self as $UnsignedT).reverse_bits() as Self\n+        doc_comment! {\n+            concat!(\"Reverses the bit pattern of the integer.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(reverse_bits)]\n+\n+let n = \", $swap_op, stringify!($SelfT), \";\n+let m = n.reverse_bits();\n+\n+assert_eq!(m, \", $reversed, \");\n+```\"),\n+            #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n+            #[inline]\n+            pub fn reverse_bits(self) -> Self {\n+                (self as $UnsignedT).reverse_bits() as Self\n+            }\n         }\n \n         doc_comment! {\n@@ -2009,50 +2003,57 @@ $EndFeature, \"\n \n #[lang = \"i8\"]\n impl i8 {\n-    int_impl! { i8, i8, u8, 8, -128, 127, \"\", \"\", 2, \"-0x7e\", \"0xa\" }\n+    int_impl! { i8, i8, u8, 8, -128, 127, \"\", \"\", 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\" }\n }\n \n #[lang = \"i16\"]\n impl i16 {\n-    int_impl! { i16, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\" }\n+    int_impl! { i16, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n+        \"0x2c48\" }\n }\n \n #[lang = \"i32\"]\n impl i32 {\n-    int_impl! { i32, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n+    int_impl! { i32, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\",\n+        \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\" }\n }\n \n #[lang = \"i64\"]\n impl i64 {\n     int_impl! { i64, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\", 12,\n-                \"0xaa00000000006e1\", \"0x6e10aa\" }\n+         \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n+         \"0x6a2c48091e6a2c48\" }\n }\n \n #[lang = \"i128\"]\n impl i128 {\n     int_impl! { i128, i128, u128, 128, -170141183460469231731687303715884105728,\n         170141183460469231731687303715884105727, \"\", \"\", 16,\n-        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\"\n+        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n+        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\"\n     }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\" }\n+    int_impl! { isize, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n+        \"0x3412\", \"0x2c48\" }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n+    int_impl! { isize, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\",\n+        \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\" }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"isize\"]\n impl isize {\n     int_impl! { isize, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\",\n-        12, \"0xaa00000000006e1\", \"0x6e10aa\" }\n+        12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n+         \"0x6a2c48091e6a2c48\" }\n }\n \n // Emits the correct `cttz` call, depending on the size of the type.\n@@ -2071,7 +2072,8 @@ macro_rules! uint_cttz_call {\n // `Int` + `UnsignedInt` implemented for unsigned integers\n macro_rules! uint_impl {\n     ($SelfT:ty, $ActualT:ty, $BITS:expr, $MaxV:expr, $Feature:expr, $EndFeature:expr,\n-        $rot:expr, $rot_op:expr, $rot_result:expr) => {\n+        $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n+        $reversed:expr ) => {\n         doc_comment! {\n             concat!(\"Returns the smallest value that can be represented by this integer type.\n \n@@ -2263,55 +2265,48 @@ assert_eq!(n.rotate_right(\", $rot, \"), m);\n             }\n         }\n \n-        /// Reverses the byte order of the integer.\n-        ///\n-        /// # Examples\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `u16` is used here.\n-        ///\n-        /// ```\n-        /// let n: u16 = 0b0000000_01010101;\n-        /// assert_eq!(n, 85);\n-        ///\n-        /// let m = n.swap_bytes();\n-        ///\n-        /// assert_eq!(m, 0b01010101_00000000);\n-        /// assert_eq!(m, 21760);\n-        /// ```\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_int_ops\")]\n-        #[inline]\n-        pub const fn swap_bytes(self) -> Self {\n-            unsafe { intrinsics::bswap(self as $ActualT) as Self }\n+        doc_comment! {\n+            concat!(\"\n+Reverses the byte order of the integer.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+let n = \", $swap_op, stringify!($SelfT), \";\n+let m = n.swap_bytes();\n+\n+assert_eq!(m, \", $swapped, \");\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn swap_bytes(self) -> Self {\n+                unsafe { intrinsics::bswap(self as $ActualT) as Self }\n+            }\n         }\n \n-        /// Reverses the bit pattern of the integer.\n-        ///\n-        /// # Examples\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `u16` is used here.\n-        ///\n-        /// ```\n-        /// #![feature(reverse_bits)]\n-        ///\n-        /// let n: u16 = 0b0000000_01010101;\n-        /// assert_eq!(n, 85);\n-        ///\n-        /// let m = n.reverse_bits();\n-        ///\n-        /// assert_eq!(m, 0b10101010_00000000);\n-        /// assert_eq!(m, 43520);\n-        /// ```\n-        #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n-        #[inline]\n-        pub fn reverse_bits(self) -> Self {\n-            unsafe { intrinsics::bitreverse(self as $ActualT) as Self }\n+        doc_comment! {\n+            concat!(\"Reverses the bit pattern of the integer.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(reverse_bits)]\n+\n+let n = \", $swap_op, stringify!($SelfT), \";\n+let m = n.reverse_bits();\n+\n+assert_eq!(m, \", $reversed, \");\n+```\"),\n+            #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n+            #[inline]\n+            pub fn reverse_bits(self) -> Self {\n+                unsafe { intrinsics::bitreverse(self as $ActualT) as Self }\n+            }\n         }\n \n         doc_comment! {\n@@ -3621,7 +3616,7 @@ $EndFeature, \"\n \n #[lang = \"u8\"]\n impl u8 {\n-    uint_impl! { u8, u8, 8, 255, \"\", \"\", 2, \"0x82\", \"0xa\" }\n+    uint_impl! { u8, u8, 8, 255, \"\", \"\", 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\" }\n \n \n     /// Checks if the value is within the ASCII range.\n@@ -4147,41 +4142,45 @@ impl u8 {\n \n #[lang = \"u16\"]\n impl u16 {\n-    uint_impl! { u16, u16, 16, 65535, \"\", \"\", 4, \"0xa003\", \"0x3a\" }\n+    uint_impl! { u16, u16, 16, 65535, \"\", \"\", 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\" }\n }\n \n #[lang = \"u32\"]\n impl u32 {\n-    uint_impl! { u32, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n+    uint_impl! { u32, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n+        \"0x78563412\", \"0x1e6a2c48\" }\n }\n \n #[lang = \"u64\"]\n impl u64 {\n-    uint_impl! { u64, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\", \"0x6e10aa\" }\n+    uint_impl! { u64, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n+        \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\" }\n }\n \n #[lang = \"u128\"]\n impl u128 {\n     uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"\", \"\", 16,\n-        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\" }\n+        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n+        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\" }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u16, 16, 65536, \"\", \"\", 4, \"0xa003\", \"0x3a\" }\n+    uint_impl! { usize, u16, 16, 65536, \"\", \"\", 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\" }\n }\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n+    uint_impl! { usize, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n+        \"0x78563412\", \"0x1e6a2c48\" }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\",\n-        \"0x6e10aa\" }\n+    uint_impl! { usize, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n+        \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\" }\n }\n \n /// A classification of floating point numbers."}, {"sha": "61033e7511253c858ee790bbbd2d0f292b48c121", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -2318,7 +2318,7 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n \n         let table_inverse = INV_TABLE_MOD_16[(x & (INV_TABLE_MOD - 1)) >> 1];\n         if m <= INV_TABLE_MOD {\n-            return table_inverse & (m - 1);\n+            table_inverse & (m - 1)\n         } else {\n             // We iterate \"up\" using the following formula:\n             //\n@@ -2405,7 +2405,7 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n     }\n \n     // Cannot be aligned at all.\n-    return usize::max_value();\n+    usize::max_value()\n }\n \n "}, {"sha": "88fdd767638934774afb20d85215c624f13001f0", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -1727,7 +1727,7 @@ impl<T> [T] {\n                     ctz_b = ::intrinsics::cttz_nonzero(b);\n                 }\n             }\n-            return a << k;\n+            a << k\n         }\n         let gcd: usize = gcd(::mem::size_of::<T>(), ::mem::size_of::<U>());\n         let ts: usize = ::mem::size_of::<U>() / gcd;\n@@ -1737,7 +1737,7 @@ impl<T> [T] {\n         let us_len = self.len() / ts * us;\n         // And how many `T`s will be in the trailing slice!\n         let ts_len = self.len() % ts;\n-        return (us_len, ts_len);\n+        (us_len, ts_len)\n     }\n \n     /// Transmute the slice to a slice of another type, ensuring aligment of the types is\n@@ -1782,13 +1782,13 @@ impl<T> [T] {\n         let ptr = self.as_ptr();\n         let offset = ::ptr::align_offset(ptr, ::mem::align_of::<U>());\n         if offset > self.len() {\n-            return (self, &[], &[]);\n+            (self, &[], &[])\n         } else {\n             let (left, rest) = self.split_at(offset);\n             let (us_len, ts_len) = rest.align_to_offsets::<U>();\n-            return (left,\n-                    from_raw_parts(rest.as_ptr() as *const U, us_len),\n-                    from_raw_parts(rest.as_ptr().offset((rest.len() - ts_len) as isize), ts_len))\n+            (left,\n+             from_raw_parts(rest.as_ptr() as *const U, us_len),\n+             from_raw_parts(rest.as_ptr().offset((rest.len() - ts_len) as isize), ts_len))\n         }\n     }\n \n@@ -1834,14 +1834,14 @@ impl<T> [T] {\n         let ptr = self.as_ptr();\n         let offset = ::ptr::align_offset(ptr, ::mem::align_of::<U>());\n         if offset > self.len() {\n-            return (self, &mut [], &mut []);\n+            (self, &mut [], &mut [])\n         } else {\n             let (left, rest) = self.split_at_mut(offset);\n             let (us_len, ts_len) = rest.align_to_offsets::<U>();\n             let mut_ptr = rest.as_mut_ptr();\n-            return (left,\n-                    from_raw_parts_mut(mut_ptr as *mut U, us_len),\n-                    from_raw_parts_mut(mut_ptr.offset((rest.len() - ts_len) as isize), ts_len))\n+            (left,\n+             from_raw_parts_mut(mut_ptr as *mut U, us_len),\n+             from_raw_parts_mut(mut_ptr.offset((rest.len() - ts_len) as isize), ts_len))\n         }\n     }\n }"}, {"sha": "186d6adbc91cf67ecb6c88df1acf286c943cebf4", "filename": "src/libcore/str/lossy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Flossy.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -146,7 +146,7 @@ impl<'a> Iterator for Utf8LossyChunksIter<'a> {\n             broken: &[],\n         };\n         self.source = &[];\n-        return Some(r);\n+        Some(r)\n     }\n }\n "}, {"sha": "810d19df0c5ba460a8dd707193c406c4af08a13f", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -244,7 +244,10 @@ impl Utf8Error {\n     ///   The length provided is that of the invalid byte sequence\n     ///   that starts at the index given by `valid_up_to()`.\n     ///   Decoding should resume after that sequence\n-    ///   (after inserting a U+FFFD REPLACEMENT CHARACTER) in case of lossy decoding.\n+    ///   (after inserting a [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD]) in case of\n+    ///   lossy decoding.\n+    ///\n+    /// [U+FFFD]: ../../std/char/constant.REPLACEMENT_CHARACTER.html\n     #[stable(feature = \"utf8_error_error_len\", since = \"1.20.0\")]\n     pub fn error_len(&self) -> Option<usize> {\n         self.error_len.map(|len| len as usize)\n@@ -1567,7 +1570,7 @@ static UTF8_CHAR_WIDTH: [u8; 256] = [\n #[unstable(feature = \"str_internals\", issue = \"0\")]\n #[inline]\n pub fn utf8_char_width(b: u8) -> usize {\n-    return UTF8_CHAR_WIDTH[b as usize] as usize;\n+    UTF8_CHAR_WIDTH[b as usize] as usize\n }\n \n /// Mask of the value bits of a continuation byte."}, {"sha": "fec90008c6701ec2d074091d68c8302cf58ca8fd", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -31,6 +31,7 @@\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(lang_items)]"}, {"sha": "a85593253b100f8f184ab7a336335ef7961ea5e8", "filename": "src/libprofiler_builtins/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibprofiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibprofiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -15,4 +15,5 @@\n             reason = \"internal implementation detail of rustc right now\",\n             issue = \"0\")]\n #![allow(unused_features)]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(staged_api)]"}, {"sha": "eed6215150fdbf829eafa24d7b22fcf7d54d1e0b", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -709,7 +709,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         self.projection_cache\n             .borrow_mut()\n-            .commit(projection_cache_snapshot);\n+            .commit(&projection_cache_snapshot);\n         self.type_variables\n             .borrow_mut()\n             .commit(type_snapshot);"}, {"sha": "3598d66060bf227363a3277073369dd30b21f7fc", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -151,12 +151,14 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         debug!(\"process_registered_region_obligations()\");\n \n         // pull out the region obligations with the given `body_id` (leaving the rest)\n-        let my_region_obligations = {\n+        let mut my_region_obligations = Vec::with_capacity(self.region_obligations.borrow().len());\n+        {\n             let mut r_o = self.region_obligations.borrow_mut();\n-            let my_r_o = r_o.drain_filter(|(ro_body_id, _)| *ro_body_id == body_id)\n-                            .map(|(_, obligation)| obligation).collect::<Vec<_>>();\n-            my_r_o\n-        };\n+            my_region_obligations.extend(\n+                r_o.drain_filter(|(ro_body_id, _)| *ro_body_id == body_id)\n+                   .map(|(_, obligation)| obligation)\n+            );\n+        }\n \n         let outlives = &mut TypeOutlives::new(\n             self,"}, {"sha": "e250b7549a0520484e6ee7e02da32d4ec1f36c5c", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -51,6 +51,7 @@\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(extern_types)]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(non_exhaustive)]\n #![feature(proc_macro_internals)]\n #![feature(quote)]"}, {"sha": "5113f3cde32843b588faee72e8e485fd5d0e2677", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -146,7 +146,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         debug!(\"normalize_projection_type(projection_ty={:?})\",\n                projection_ty);\n \n-        assert!(!projection_ty.has_escaping_regions());\n+        debug_assert!(!projection_ty.has_escaping_regions());\n \n         // FIXME(#20304) -- cache\n "}, {"sha": "1224cdd76d85ba4891f1fea429392fd73bab3d62", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -1142,7 +1142,7 @@ fn assemble_candidates_from_impls<'cx, 'gcx, 'tcx>(\n                 if !is_default {\n                     true\n                 } else if obligation.param_env.reveal == Reveal::All {\n-                    assert!(!poly_trait_ref.needs_infer());\n+                    debug_assert!(!poly_trait_ref.needs_infer());\n                     if !poly_trait_ref.needs_subst() {\n                         true\n                     } else {\n@@ -1668,15 +1668,15 @@ impl<'tcx> ProjectionCache<'tcx> {\n     }\n \n     pub fn rollback_to(&mut self, snapshot: ProjectionCacheSnapshot) {\n-        self.map.rollback_to(snapshot.snapshot);\n+        self.map.rollback_to(&snapshot.snapshot);\n     }\n \n     pub fn rollback_skolemized(&mut self, snapshot: &ProjectionCacheSnapshot) {\n         self.map.partial_rollback(&snapshot.snapshot, &|k| k.ty.has_re_skol());\n     }\n \n-    pub fn commit(&mut self, snapshot: ProjectionCacheSnapshot) {\n-        self.map.commit(snapshot.snapshot);\n+    pub fn commit(&mut self, snapshot: &ProjectionCacheSnapshot) {\n+        self.map.commit(&snapshot.snapshot);\n     }\n \n     /// Try to start normalize `key`; returns an error if"}, {"sha": "fbd12c9fe8ecaf796a8f2be66c3c5944fa69d979", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -563,7 +563,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     pub fn select(&mut self, obligation: &TraitObligation<'tcx>)\n                   -> SelectionResult<'tcx, Selection<'tcx>> {\n         debug!(\"select({:?})\", obligation);\n-        assert!(!obligation.predicate.has_escaping_regions());\n+        debug_assert!(!obligation.predicate.has_escaping_regions());\n \n         let stack = self.push_stack(TraitObligationStackList::empty(), obligation);\n \n@@ -662,7 +662,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         match obligation.predicate {\n             ty::Predicate::Trait(ref t) => {\n-                assert!(!t.has_escaping_regions());\n+                debug_assert!(!t.has_escaping_regions());\n                 let obligation = obligation.with(t.clone());\n                 self.evaluate_trait_predicate_recursively(previous_stack, obligation)\n             }\n@@ -1076,7 +1076,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         debug!(\"candidate_from_obligation(cache_fresh_trait_pred={:?}, obligation={:?})\",\n                cache_fresh_trait_pred,\n                stack);\n-        assert!(!stack.obligation.predicate.has_escaping_regions());\n+        debug_assert!(!stack.obligation.predicate.has_escaping_regions());\n \n         if let Some(c) = self.check_candidate_cache(stack.obligation.param_env,\n                                                     &cache_fresh_trait_pred) {\n@@ -1586,7 +1586,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                         snapshot: &infer::CombinedSnapshot<'cx, 'tcx>)\n                         -> bool\n     {\n-        assert!(!skol_trait_ref.has_escaping_regions());\n+        debug_assert!(!skol_trait_ref.has_escaping_regions());\n         if self.infcx.at(&obligation.cause, obligation.param_env)\n                      .sup(ty::Binder::dummy(skol_trait_ref), trait_bound).is_err() {\n             return false;"}, {"sha": "49fffaa375b2f705c91f891cdbdb24d38cb57433", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -13,7 +13,7 @@ use ty::{self, BoundRegion, Region, Ty, TyCtxt};\n use std::fmt;\n use rustc_target::spec::abi;\n use syntax::ast;\n-use errors::DiagnosticBuilder;\n+use errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n \n use hir;\n@@ -250,6 +250,21 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     db.note(\"no two closures, even if identical, have the same type\");\n                     db.help(\"consider boxing your closure and/or using it as a trait object\");\n                 }\n+                match (&values.found.sty, &values.expected.sty) { // Issue #53280\n+                    (ty::TyInfer(ty::IntVar(_)), ty::TyFloat(_)) => {\n+                        if let Ok(snippet) = self.sess.codemap().span_to_snippet(sp) {\n+                            if snippet.chars().all(|c| c.is_digit(10) || c == '-' || c == '_') {\n+                                db.span_suggestion_with_applicability(\n+                                    sp,\n+                                    \"use a float literal\",\n+                                    format!(\"{}.0\", snippet),\n+                                    Applicability::MachineApplicable\n+                                );\n+                            }\n+                        }\n+                    },\n+                    _ => {}\n+                }\n             },\n             OldStyleLUB(err) => {\n                 db.note(\"this was previously accepted by the compiler but has been phased out\");"}, {"sha": "0da4d5ddea2f264a5bea4abb08f7d51866f6ef1a", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -466,7 +466,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n         let univariant = |fields: &[TyLayout], repr: &ReprOptions, kind| {\n             Ok(tcx.intern_layout(univariant_uninterned(fields, repr, kind)?))\n         };\n-        assert!(!ty.has_infer_types());\n+        debug_assert!(!ty.has_infer_types());\n \n         Ok(match ty.sty {\n             // Basic scalars.\n@@ -1283,7 +1283,7 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                    param_env: ty::ParamEnv<'tcx>)\n                    -> Result<SizeSkeleton<'tcx>, LayoutError<'tcx>> {\n-        assert!(!ty.has_infer_types());\n+        debug_assert!(!ty.has_infer_types());\n \n         // First try computing a static layout.\n         let err = match tcx.layout_of(param_env.and(ty)) {\n@@ -1300,7 +1300,7 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n                 let tail = tcx.struct_tail(pointee);\n                 match tail.sty {\n                     ty::TyParam(_) | ty::TyProjection(_) => {\n-                        assert!(tail.has_param_types() || tail.has_self_ty());\n+                        debug_assert!(tail.has_param_types() || tail.has_self_ty());\n                         Ok(SizeSkeleton::Pointer {\n                             non_zero,\n                             tail: tcx.erase_regions(&tail)"}, {"sha": "65e31f21792d209fc42d3fddbbff94f98db1d094", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -708,7 +708,7 @@ impl<'a, 'gcx, 'tcx> ExistentialTraitRef<'tcx> {\n     pub fn with_self_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, self_ty: Ty<'tcx>)\n         -> ty::TraitRef<'tcx>  {\n         // otherwise the escaping regions would be captured by the binder\n-        assert!(!self_ty.has_escaping_regions());\n+        debug_assert!(!self_ty.has_escaping_regions());\n \n         ty::TraitRef {\n             def_id: self.def_id,\n@@ -753,7 +753,7 @@ impl<T> Binder<T> {\n     pub fn dummy<'tcx>(value: T) -> Binder<T>\n         where T: TypeFoldable<'tcx>\n     {\n-        assert!(!value.has_escaping_regions());\n+        debug_assert!(!value.has_escaping_regions());\n         Binder(value)\n     }\n \n@@ -1247,7 +1247,7 @@ impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n                         -> ty::ProjectionPredicate<'tcx>\n     {\n         // otherwise the escaping regions would be captured by the binders\n-        assert!(!self_ty.has_escaping_regions());\n+        debug_assert!(!self_ty.has_escaping_regions());\n \n         ty::ProjectionPredicate {\n             projection_ty: ty::ProjectionTy {"}, {"sha": "a920bb0f2b91800522f83a5722bf63aa1138405d", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(rustc_private)]\n \n #[macro_use] extern crate log;"}, {"sha": "390a1df02b88ef0055db39744b0cde198e3b4792", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -26,6 +26,7 @@\n #![feature(in_band_lifetimes)]\n #![allow(unused_attributes)]\n #![feature(libc)]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(quote)]\n #![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "68a21a537070bb8d24672b531159796a82a2677a", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -1564,7 +1564,7 @@ extern \"C\" {\n                                 -> LLVMRustResult;\n     pub fn LLVMRustArchiveMemberNew(Filename: *const c_char,\n                                     Name: *const c_char,\n-                                    Child: Option<&'a ArchiveChild>)\n+                                    Child: Option<&ArchiveChild<'a>>)\n                                     -> &'a mut RustArchiveMember<'a>;\n     pub fn LLVMRustArchiveMemberFree(Member: &'a mut RustArchiveMember<'a>);\n "}, {"sha": "69d91b327283d87050616d6b3494423c367cadb9", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -89,7 +89,7 @@ fn uncached_llvm_type<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                     Type::struct_(cx, &[fill], packed)\n                 }\n                 Some(ref name) => {\n-                    let mut llty = Type::named_struct(cx, name);\n+                    let llty = Type::named_struct(cx, name);\n                     llty.set_struct_body(&[fill], packed);\n                     llty\n                 }"}, {"sha": "635819e94e8679bfed6b729350c25cb400ce79c9", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -19,6 +19,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(custom_attribute)]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![allow(unused_attributes)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "d3b47daa5b4b89aa7569b7167736bfe924270fb7", "filename": "src/librustc_data_structures/base_n.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fbase_n.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fbase_n.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbase_n.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -17,7 +17,7 @@ pub const MAX_BASE: usize = 64;\n pub const ALPHANUMERIC_ONLY: usize = 62;\n pub const CASE_INSENSITIVE: usize = 36;\n \n-const BASE_64: &'static [u8; MAX_BASE as usize] =\n+const BASE_64: &[u8; MAX_BASE as usize] =\n     b\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@$\";\n \n #[inline]\n@@ -37,7 +37,8 @@ pub fn push_str(mut n: u128, base: usize, output: &mut String) {\n             break;\n         }\n     }\n-    &mut s[0..index].reverse();\n+    s[0..index].reverse();\n+\n     output.push_str(str::from_utf8(&s[0..index]).unwrap());\n }\n "}, {"sha": "a63033c436528bc866e32f5877f17f86be911a32", "filename": "src/librustc_data_structures/bitslice.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fbitslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fbitslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitslice.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -75,7 +75,7 @@ fn bit_lookup(bit: usize) -> BitLookup {\n     let word = bit / word_bits;\n     let bit_in_word = bit % word_bits;\n     let bit_mask = 1 << bit_in_word;\n-    BitLookup { word: word, bit_in_word: bit_in_word, bit_mask: bit_mask }\n+    BitLookup { word, bit_in_word, bit_mask }\n }\n \n pub fn bits_to_string(words: &[Word], bits: usize) -> String {\n@@ -105,7 +105,8 @@ pub fn bits_to_string(words: &[Word], bits: usize) -> String {\n         sep = '|';\n     }\n     result.push(']');\n-    return result\n+\n+    result\n }\n \n #[inline]"}, {"sha": "49ab3e58812dcfb703ea926798cc610a7ed57024", "filename": "src/librustc_data_structures/bitvec.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fbitvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fbitvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitvec.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -196,7 +196,8 @@ impl<'a, C: Idx> Iterator for BitIter<'a, C> {\n         self.current >>= offset;\n         self.current >>= 1; // shift otherwise overflows for 0b1000_0000_\u2026_0000\n         self.idx += offset + 1;\n-        return Some(C::new(self.idx - 1));\n+\n+        Some(C::new(self.idx - 1))\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n@@ -299,7 +300,7 @@ impl<R: Idx, C: Idx> BitMatrix<R, C> {\n             let v1 = vector[write_index];\n             let v2 = v1 | vector[read_index];\n             vector[write_index] = v2;\n-            changed = changed | (v1 != v2);\n+            changed |= v1 != v2;\n         }\n         changed\n     }"}, {"sha": "3f248dadb66c14b02a556996ffacc77abb4a29bd", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -254,8 +254,8 @@ mod imp {\n     type ULONG_PTR = usize;\n \n     type LPOVERLAPPED = *mut OVERLAPPED;\n-    const LOCKFILE_EXCLUSIVE_LOCK: DWORD = 0x00000002;\n-    const LOCKFILE_FAIL_IMMEDIATELY: DWORD = 0x00000001;\n+    const LOCKFILE_EXCLUSIVE_LOCK: DWORD = 0x0000_0002;\n+    const LOCKFILE_FAIL_IMMEDIATELY: DWORD = 0x0000_0001;\n \n     const FILE_SHARE_DELETE: DWORD = 0x4;\n     const FILE_SHARE_READ: DWORD = 0x1;"}, {"sha": "e54147cbe7c8793a9e4d36925f14c5d5c296d4e7", "filename": "src/librustc_data_structures/graph/dominators/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -107,7 +107,8 @@ fn intersect<Node: Idx>(\n             node2 = immediate_dominators[node2].unwrap();\n         }\n     }\n-    return node1;\n+\n+    node1\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "baac75658686545e0eddd4f3ee84b7163b4fc7eb", "filename": "src/librustc_data_structures/graph/implementation/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -90,7 +90,7 @@ pub const INCOMING: Direction = Direction { repr: 1 };\n \n impl NodeIndex {\n     /// Returns unique id (unique with respect to the graph holding associated node).\n-    pub fn node_id(&self) -> usize {\n+    pub fn node_id(self) -> usize {\n         self.0\n     }\n }\n@@ -187,7 +187,7 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         self.nodes[source.0].first_edge[OUTGOING.repr] = idx;\n         self.nodes[target.0].first_edge[INCOMING.repr] = idx;\n \n-        return idx;\n+        idx\n     }\n \n     pub fn edge(&self, idx: EdgeIndex) -> &Edge<E> {\n@@ -261,8 +261,8 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         DepthFirstTraversal::with_start_node(self, start, direction)\n     }\n \n-    pub fn nodes_in_postorder<'a>(\n-        &'a self,\n+    pub fn nodes_in_postorder(\n+        &self,\n         direction: Direction,\n         entry_node: NodeIndex,\n     ) -> Vec<NodeIndex> {"}, {"sha": "404272d69c863e6314efba24865a92971878fac9", "filename": "src/librustc_data_structures/indexed_set.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_set.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -59,16 +59,13 @@ impl<T: Idx> rustc_serialize::Decodable for IdxSetBuf<T> {\n \n // pnkfelix wants to have this be `IdxSet<T>([Word]) and then pass\n // around `&mut IdxSet<T>` or `&IdxSet<T>`.\n-//\n-// WARNING: Mapping a `&IdxSetBuf<T>` to `&IdxSet<T>` (at least today)\n-// requires a transmute relying on representation guarantees that may\n-// not hold in the future.\n \n /// Represents a set (or packed family of sets), of some element type\n /// E, where each E is identified by some unique index type `T`.\n ///\n /// In other words, `T` is the type used to index into the bitslice\n /// this type uses to represent the set of object it holds.\n+#[repr(transparent)]\n pub struct IdxSet<T: Idx> {\n     _pd: PhantomData<fn(&T)>,\n     bits: [Word],\n@@ -134,11 +131,11 @@ impl<T: Idx> IdxSetBuf<T> {\n \n impl<T: Idx> IdxSet<T> {\n     unsafe fn from_slice(s: &[Word]) -> &Self {\n-        mem::transmute(s) // (see above WARNING)\n+        &*(s as *const [Word] as *const Self)\n     }\n \n     unsafe fn from_slice_mut(s: &mut [Word]) -> &mut Self {\n-        mem::transmute(s) // (see above WARNING)\n+        &mut *(s as *mut [Word] as *mut Self)\n     }\n }\n \n@@ -326,7 +323,7 @@ fn test_set_up_to() {\n #[test]\n fn test_new_filled() {\n     for i in 0..128 {\n-        let mut idx_buf = IdxSetBuf::new_filled(i);\n+        let idx_buf = IdxSetBuf::new_filled(i);\n         let elems: Vec<usize> = idx_buf.iter().collect();\n         let expected: Vec<usize> = (0..i).collect();\n         assert_eq!(elems, expected);"}, {"sha": "bfe7273dc4c7a4762181def645b0fc1eda2a0add", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -26,6 +26,7 @@\n #![feature(specialization)]\n #![feature(optin_builtin_traits)]\n #![feature(macro_vis_matcher)]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(allow_internal_unstable)]\n #![feature(vec_resize_with)]\n "}, {"sha": "7ef88852685d5bd33a836f193e20bad0b6834c2b", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -573,7 +573,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n         }\n \n         let mut kill_list = vec![];\n-        for (predicate, index) in self.waiting_cache.iter_mut() {\n+        for (predicate, index) in &mut self.waiting_cache {\n             let new_index = node_rewrites[index.get()];\n             if new_index >= nodes_len {\n                 kill_list.push(predicate.clone());"}, {"sha": "e958fd7da613e4ab54c5ef58d21ec1a1fd50cbb5", "filename": "src/librustc_data_structures/small_vec.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsmall_vec.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -210,7 +210,12 @@ impl<A> Decodable for SmallVec<A>\n           A::Element: Decodable {\n     fn decode<D: Decoder>(d: &mut D) -> Result<SmallVec<A>, D::Error> {\n         d.read_seq(|d, len| {\n-            (0..len).map(|i| d.read_seq_elt(i, |d| Decodable::decode(d))).collect()\n+            let mut vec = SmallVec::with_capacity(len);\n+            // FIXME(#48994) - could just be collected into a Result<SmallVec, D::Error>\n+            for i in 0..len {\n+                vec.push(d.read_seq_elt(i, |d| Decodable::decode(d))?);\n+            }\n+            Ok(vec)\n         })\n     }\n }"}, {"sha": "5030bf98dffd54f0b90e5bb5195da0e0bc3e72c9", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -92,7 +92,7 @@ impl<K, V> SnapshotMap<K, V>\n     pub fn snapshot(&mut self) -> Snapshot {\n         self.undo_log.push(UndoLog::OpenSnapshot);\n         let len = self.undo_log.len() - 1;\n-        Snapshot { len: len }\n+        Snapshot { len }\n     }\n \n     fn assert_open_snapshot(&self, snapshot: &Snapshot) {\n@@ -103,8 +103,8 @@ impl<K, V> SnapshotMap<K, V>\n         });\n     }\n \n-    pub fn commit(&mut self, snapshot: Snapshot) {\n-        self.assert_open_snapshot(&snapshot);\n+    pub fn commit(&mut self, snapshot: &Snapshot) {\n+        self.assert_open_snapshot(snapshot);\n         if snapshot.len == 0 {\n             // The root snapshot.\n             self.undo_log.truncate(0);\n@@ -135,8 +135,8 @@ impl<K, V> SnapshotMap<K, V>\n         }\n     }\n \n-    pub fn rollback_to(&mut self, snapshot: Snapshot) {\n-        self.assert_open_snapshot(&snapshot);\n+    pub fn rollback_to(&mut self, snapshot: &Snapshot) {\n+        self.assert_open_snapshot(snapshot);\n         while self.undo_log.len() > snapshot.len + 1 {\n             let entry = self.undo_log.pop().unwrap();\n             self.reverse(entry);"}, {"sha": "b163e0fe420ec7f222338c7b4dfc9c7e52679576", "filename": "src/librustc_data_structures/snapshot_map/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Ftest.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -20,7 +20,7 @@ fn basic() {\n     map.insert(44, \"fourty-four\");\n     assert_eq!(map[&44], \"fourty-four\");\n     assert_eq!(map.get(&33), None);\n-    map.rollback_to(snapshot);\n+    map.rollback_to(&snapshot);\n     assert_eq!(map[&22], \"twenty-two\");\n     assert_eq!(map.get(&33), None);\n     assert_eq!(map.get(&44), None);\n@@ -33,7 +33,7 @@ fn out_of_order() {\n     map.insert(22, \"twenty-two\");\n     let snapshot1 = map.snapshot();\n     let _snapshot2 = map.snapshot();\n-    map.rollback_to(snapshot1);\n+    map.rollback_to(&snapshot1);\n }\n \n #[test]\n@@ -43,8 +43,8 @@ fn nested_commit_then_rollback() {\n     let snapshot1 = map.snapshot();\n     let snapshot2 = map.snapshot();\n     map.insert(22, \"thirty-three\");\n-    map.commit(snapshot2);\n+    map.commit(&snapshot2);\n     assert_eq!(map[&22], \"thirty-three\");\n-    map.rollback_to(snapshot1);\n+    map.rollback_to(&snapshot1);\n     assert_eq!(map[&22], \"twenty-two\");\n }"}, {"sha": "e1bfdf35b274e0d31ff7be040948e0319cf9d0bb", "filename": "src/librustc_data_structures/tiny_list.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Ftiny_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Ftiny_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftiny_list.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -107,7 +107,8 @@ impl<T: PartialEq> Element<T> {\n         };\n \n         self.next = new_next;\n-        return true\n+\n+        true\n     }\n \n     fn len(&self) -> usize {"}, {"sha": "18a1e9129b34284bd6949794742d7b83bedba6ef", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -77,7 +77,7 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n             ..\n         } = self;\n \n-        map.entry(a.clone())\n+        *map.entry(a.clone())\n            .or_insert_with(|| {\n                elements.push(a);\n \n@@ -86,7 +86,6 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n \n                Index(elements.len() - 1)\n            })\n-           .clone()\n     }\n \n     /// Applies the (partial) function to each edge and returns a new\n@@ -98,14 +97,12 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n     {\n         let mut result = TransitiveRelation::new();\n         for edge in &self.edges {\n-            let r = f(&self.elements[edge.source.0]).and_then(|source| {\n+            f(&self.elements[edge.source.0]).and_then(|source| {\n                 f(&self.elements[edge.target.0]).and_then(|target| {\n-                    Some(result.add(source, target))\n+                    result.add(source, target);\n+                    Some(())\n                 })\n-            });\n-            if r.is_none() {\n-                return None;\n-            }\n+            })?;\n         }\n         Some(result)\n     }\n@@ -372,7 +369,7 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n         let mut changed = true;\n         while changed {\n             changed = false;\n-            for edge in self.edges.iter() {\n+            for edge in &self.edges {\n                 // add an edge from S -> T\n                 changed |= matrix.add(edge.source.0, edge.target.0);\n "}, {"sha": "387660473a887dea0a2524a4bdceefbd0b78b515", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(static_nobundle)]\n \n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "b3ba86ad8a4b32af8f7f6629cca53f8891221b8f", "filename": "src/librustc_lsan/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -10,6 +10,7 @@\n \n #![sanitizer_runtime]\n #![feature(alloc_system)]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "42682c34407cab08c713731ac8fc89d4dadbc097", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -14,6 +14,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n */\n \n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(infer_outlives_requirements)]\n #![feature(in_band_lifetimes)]\n #![feature(slice_patterns)]"}, {"sha": "b3ba86ad8a4b32af8f7f6629cca53f8891221b8f", "filename": "src/librustc_msan/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_msan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_msan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -10,6 +10,7 @@\n \n #![sanitizer_runtime]\n #![feature(alloc_system)]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "d41f4cd61f763a5e95da78c570ab07690d55b7b0", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -10,6 +10,8 @@\n \n #![allow(bad_style)]\n \n+#![cfg_attr(not(stage0), feature(nll))]\n+\n pub struct Intrinsic {\n     pub inputs: &'static [&'static Type],\n     pub output: &'static Type,"}, {"sha": "c300855b02187441afe6a6ead769f95c7f2c5ec1", "filename": "src/librustc_target/spec/aarch64_unknown_netbsd.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_netbsd.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::netbsd_base::opts();\n+    base.max_atomic_width = Some(128);\n+    base.abi_blacklist = super::arm_base::abi_blacklist();\n+\n+    Ok(Target {\n+        llvm_target: \"aarch64-unknown-netbsd\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        target_os: \"netbsd\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "ce3d61cecbb691dbebd12aa02198c1b2f9f4e601", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -319,6 +319,7 @@ supported_targets! {\n     (\"i686-unknown-openbsd\", i686_unknown_openbsd),\n     (\"x86_64-unknown-openbsd\", x86_64_unknown_openbsd),\n \n+    (\"aarch64-unknown-netbsd\", aarch64_unknown_netbsd),\n     (\"armv6-unknown-netbsd-eabihf\", armv6_unknown_netbsd_eabihf),\n     (\"armv7-unknown-netbsd-eabihf\", armv7_unknown_netbsd_eabihf),\n     (\"i686-unknown-netbsd\", i686_unknown_netbsd),"}, {"sha": "62f93ea20e48cc09dbaf3ec2c816d45ca221c5c0", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -76,6 +76,7 @@ This API is completely unstable and subject to change.\n #![feature(crate_visibility_modifier)]\n #![feature(exhaustive_patterns)]\n #![feature(iterator_find_map)]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(quote)]\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "b63abec1f0e8b0cc145e27a57bca142d257bddab", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -2214,7 +2214,6 @@\n         if (hash !== null) {\n             var elem = document.getElementById(hash);\n             if (elem && elem.offsetParent === null) {\n-                console.log(elem, elem.parentNode);\n                 if (elem.parentNode && elem.parentNode.previousSibling) {\n                     var collapses = elem.parentNode\n                                         .previousSibling"}, {"sha": "a2cb79582a14c94cd6aa5da7335ce5a4ee054dc5", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -165,8 +165,8 @@ a {\n \tcolor: #ddd;\n }\n \n-.docblock a:not(.srclink):not(.test-arrow), .docblock-short a:not(.srclink):not(.test-arrow),\n-.stability a {\n+.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow), .docblock-short\n+a:not(.srclink):not(.test-arrow), .stability a {\n \tcolor: #D2991D;\n }\n "}, {"sha": "6a3c1988977e7a66c87705316fec21eda58a16c6", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -165,8 +165,8 @@ a {\n \tcolor: #000;\n }\n \n-.docblock a:not(.srclink):not(.test-arrow), .docblock-short a:not(.srclink):not(.test-arrow),\n-.stability a {\n+.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow), .docblock-short\n+a:not(.srclink):not(.test-arrow), .stability a {\n \tcolor: #3873AD;\n }\n "}, {"sha": "7581965cc0cadc49c6d8a860f2f23c637b711d49", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -17,6 +17,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(iterator_find_map)]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(set_stdio)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(test)]"}, {"sha": "794fc095096a479c754f07e26562fc8ae6989ca7", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -24,6 +24,7 @@ Core encoding and decoding interfaces.\n #![feature(core_intrinsics)]\n #![feature(specialization)]\n #![feature(never_type)]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![cfg_attr(test, feature(test))]\n \n pub use self::serialize::{Decoder, Encoder, Decodable, Encodable};"}, {"sha": "2b87094926cf5f012c28bcb52aa3c388841c634b", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -1175,9 +1175,9 @@ impl CStr {\n     /// If the contents of the `CStr` are valid UTF-8 data, this\n     /// function will return a [`Cow`]`::`[`Borrowed`]`(`[`&str`]`)`\n     /// with the the corresponding [`&str`] slice. Otherwise, it will\n-    /// replace any invalid UTF-8 sequences with `U+FFFD REPLACEMENT\n-    /// CHARACTER` and return a [`Cow`]`::`[`Owned`]`(`[`String`]`)`\n-    /// with the result.\n+    /// replace any invalid UTF-8 sequences with\n+    /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD] and return a\n+    /// [`Cow`]`::`[`Owned`]`(`[`String`]`)` with the result.\n     ///\n     /// > **Note**: This method is currently implemented to check for validity\n     /// > after a constant-time cast, but it is planned to alter its definition\n@@ -1189,6 +1189,7 @@ impl CStr {\n     /// [`Owned`]: ../borrow/enum.Cow.html#variant.Owned\n     /// [`str`]: ../primitive.str.html\n     /// [`String`]: ../string/struct.String.html\n+    /// [U+FFFD]: ../char/constant.REPLACEMENT_CHARACTER.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "6bcd62dbd59c27052063bdc44389a7768b516afa", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -520,10 +520,12 @@ impl OsStr {\n \n     /// Converts an `OsStr` to a [`Cow`]`<`[`str`]`>`.\n     ///\n-    /// Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n+    /// Any non-Unicode sequences are replaced with\n+    /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD].\n     ///\n     /// [`Cow`]: ../../std/borrow/enum.Cow.html\n     /// [`str`]: ../../std/primitive.str.html\n+    /// [U+FFFD]: ../../std/char/constant.REPLACEMENT_CHARACTER.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "4f6bda6cfe3798337bcf44c79f9b4fba54208684", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -26,3 +26,33 @@\n ///\n /// [book]: https://doc.rust-lang.org/book/second-edition/ch03-03-how-functions-work.html\n mod fn_keyword { }\n+\n+#[doc(keyword = \"let\")]\n+//\n+/// The `let` keyword.\n+///\n+/// The `let` keyword is used to declare a variable.\n+///\n+/// Example:\n+///\n+/// ```rust\n+/// # #![allow(unused_assignments)]\n+/// let x = 3; // We create a variable named `x` with the value `3`.\n+/// ```\n+///\n+/// By default, all variables are **not** mutable. If you want a mutable variable,\n+/// you'll have to use the `mut` keyword.\n+///\n+/// Example:\n+///\n+/// ```rust\n+/// # #![allow(unused_assignments)]\n+/// let mut x = 3; // We create a mutable variable named `x` with the value `3`.\n+///\n+/// x += 4; // `x` is now equal to `7`.\n+/// ```\n+///\n+/// For more information about the `let` keyword, take a look at the [Rust Book][book].\n+///\n+/// [book]: https://doc.rust-lang.org/book/second-edition/ch03-01-variables-and-mutability.html\n+mod let_keyword { }"}, {"sha": "5d463225ae93b646f3ef3e8612806a6870e9f2b5", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -273,6 +273,7 @@\n #![feature(macro_vis_matcher)]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(exhaustive_patterns)]\n #![feature(on_unimplemented)]\n #![feature(optin_builtin_traits)]"}, {"sha": "dc33747c05b0670da0c514c6f8dd098efa6b591a", "filename": "src/libstd/os/raw/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fmod.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -29,7 +29,8 @@ use fmt;\n           all(target_os = \"android\", any(target_arch = \"aarch64\",\n                                          target_arch = \"arm\")),\n           all(target_os = \"l4re\", target_arch = \"x86_64\"),\n-          all(target_os = \"netbsd\", any(target_arch = \"arm\",\n+          all(target_os = \"netbsd\", any(target_arch = \"aarch64\",\n+                                        target_arch = \"arm\",\n                                         target_arch = \"powerpc\")),\n           all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n           all(target_os = \"fuchsia\", target_arch = \"aarch64\")))]\n@@ -43,7 +44,8 @@ use fmt;\n               all(target_os = \"android\", any(target_arch = \"aarch64\",\n                                              target_arch = \"arm\")),\n               all(target_os = \"l4re\", target_arch = \"x86_64\"),\n-              all(target_os = \"netbsd\", any(target_arch = \"arm\",\n+              all(target_os = \"netbsd\", any(target_arch = \"aarch64\",\n+                                            target_arch = \"arm\",\n                                             target_arch = \"powerpc\")),\n               all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n               all(target_os = \"fuchsia\", target_arch = \"aarch64\"))))]"}, {"sha": "ca8be75fab5beee3a11841b3b79870c23c615a1a", "filename": "src/libstd/path.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -1737,9 +1737,11 @@ impl Path {\n \n     /// Converts a `Path` to a [`Cow<str>`].\n     ///\n-    /// Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n+    /// Any non-Unicode sequences are replaced with\n+    /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD].\n     ///\n     /// [`Cow<str>`]: ../borrow/enum.Cow.html\n+    /// [U+FFFD]: ../char/constant.REPLACEMENT_CHARACTER.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "53babd449a992fbfe5653a67b1e3d36525cafdd3", "filename": "src/libstd/process.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -381,6 +381,39 @@ impl fmt::Debug for ChildStderr {\n ///\n /// let hello = output.stdout;\n /// ```\n+///\n+/// `Command` can be reused to spawn multiple processes. The builder methods\n+/// change the command without needing to immediately spawn the process.\n+///\n+/// ```no_run\n+/// use std::process::Command;\n+///\n+/// let mut echo_hello = Command::new(\"sh\");\n+/// echo_hello.arg(\"-c\")\n+///           .arg(\"echo hello\");\n+/// let hello_1 = echo_hello.output().expect(\"failed to execute process\");\n+/// let hello_2 = echo_hello.output().expect(\"failed to execute process\");\n+/// ```\n+///\n+/// Similarly, you can call builder methods after spawning a process and then\n+/// spawn a new process with the modified settings.\n+///\n+/// ```no_run\n+/// use std::process::Command;\n+///\n+/// let mut list_dir = Command::new(\"ls\");\n+///\n+/// // Execute `ls` in the current directory of the program.\n+/// list_dir.status().expect(\"process failed to execute\");\n+///\n+/// println!(\"\");\n+///\n+/// // Change `ls` to execute in the root directory.\n+/// list_dir.current_dir(\"/\");\n+///\n+/// // And then execute `ls` again but in the root directory.\n+/// list_dir.status().expect(\"process failed to execute\");\n+/// ```\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Command {\n     inner: imp::Command,"}, {"sha": "bae0d02786a092dd8134a428fb2ab7a2fbf0cbd5", "filename": "src/libstd/sys/windows/ext/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -31,7 +31,7 @@\n //!\n //! If Rust code *does* need to look into those strings, it can\n //! convert them to valid UTF-8, possibly lossily, by substituting\n-//! invalid sequences with U+FFFD REPLACEMENT CHARACTER, as is\n+//! invalid sequences with [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD], as is\n //! conventionally done in other Rust APIs that deal with string\n //! encodings.\n //!\n@@ -65,6 +65,7 @@\n //! [`from_wide`]: trait.OsStringExt.html#tymethod.from_wide\n //! [`encode_wide`]: trait.OsStrExt.html#tymethod.encode_wide\n //! [`collect`]: ../../../iter/trait.Iterator.html#method.collect\n+//! [U+FFFD]: ../../../char/constant.REPLACEMENT_CHARACTER.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "6925ed2afb83b51e947b108bc1a2c8aa4562070c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -501,7 +501,11 @@ impl Pat {\n             PatKind::Slice(pats, None, _) if pats.len() == 1 =>\n                 pats[0].to_ty().map(TyKind::Slice)?,\n             PatKind::Tuple(pats, None) => {\n-                let tys = pats.iter().map(|pat| pat.to_ty()).collect::<Option<Vec<_>>>()?;\n+                let mut tys = Vec::with_capacity(pats.len());\n+                // FIXME(#48994) - could just be collected into an Option<Vec>\n+                for pat in pats {\n+                    tys.push(pat.to_ty()?);\n+                }\n                 TyKind::Tup(tys)\n             }\n             _ => return None,"}, {"sha": "0948ebea15df4886959e6dcf7fc241f2ecd12516", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -21,6 +21,7 @@\n \n #![feature(crate_visibility_modifier)]\n #![feature(macro_at_most_once_rep)]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(rustc_attrs)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]"}, {"sha": "f5e607fc23d22ea45acfa0f921c4483c1c57edec", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -554,7 +554,7 @@ impl<'a> TraitDef<'a> {\n             GenericParamKind::Type { .. } => {\n                 // I don't think this can be moved out of the loop, since\n                 // a GenericBound requires an ast id\n-                let mut bounds: Vec<_> =\n+                let bounds: Vec<_> =\n                     // extra restrictions on the generics parameters to the\n                     // type being derived upon\n                     self.additional_bounds.iter().map(|p| {"}, {"sha": "1ba4ab474258c76939a18a9ee8e6d0c81b78a667", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -16,6 +16,7 @@\n \n #![feature(proc_macro_internals)]\n #![feature(decl_macro)]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(str_escape)]\n \n #![feature(rustc_diagnostic_macros)]"}, {"sha": "30094223d08585c81e7beb4d0d0044acdeb4a615", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -35,6 +35,7 @@\n #![feature(asm)]\n #![feature(fnbox)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc))]\n+#![cfg_attr(not(stage0), feature(nll))]\n #![feature(set_stdio)]\n #![feature(panic_unwind)]\n #![feature(staged_api)]"}, {"sha": "81a46ea0fe718b1ff5e90b4a06422dcb49091afe", "filename": "src/test/COMPILER_TESTS.md", "status": "modified", "additions": 2, "deletions": 184, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Ftest%2FCOMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Ftest%2FCOMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2FCOMPILER_TESTS.md?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -1,186 +1,4 @@\n # Compiler Test Documentation\n \n-In the Rust project, we use a special set of commands embedded in\n-comments to test the Rust compiler. There are two groups of commands:\n-\n-1. Header commands\n-2. Error info commands\n-\n-Both types of commands are inside comments, but header commands should\n-be in a comment before any code.\n-\n-## Summary of Error Info Commands\n-\n-Error commands specify something about certain lines of the\n-program. They tell the test what kind of error and what message you\n-are expecting.\n-\n-* `~`: Associates the following error level and message with the\n-  current line\n-* `~|`: Associates the following error level and message with the same\n-  line as the previous comment\n-* `~^`: Associates the following error level and message with the\n-  previous line. Each caret (`^`) that you add adds a line to this, so\n-  `~^^^^^^^` is seven lines up.\n-\n-The error levels that you can have are:\n-\n-1. `ERROR`\n-2. `WARNING`\n-3. `NOTE`\n-4. `HELP` and `SUGGESTION`*\n-\n-\\* **Note**: `SUGGESTION` must follow immediately after `HELP`.\n-\n-## Summary of Header Commands\n-\n-Header commands specify something about the entire test file as a\n-whole. They are normally put right after the copyright comment, e.g.:\n-\n-```Rust\n-// Copyright blah blah blah\n-// except according to those terms.\n-\n-// ignore-test This doesn't actually work\n-```\n-\n-### Ignoring tests\n-\n-These are used to ignore the test in some situations, which means the test won't\n-be compiled or run.\n-\n-* `ignore-X` where `X` is a target detail or stage will ignore the test accordingly (see below)\n-* `ignore-pretty` will not compile the pretty-printed test (this is done to test the pretty-printer, but might not always work)\n-* `ignore-test` always ignores the test\n-* `ignore-lldb` and `ignore-gdb` will skip a debuginfo test on that debugger.\n-\n-`only-X` is the opposite. The test will run only when `X` matches.\n-\n-Some examples of `X` in `ignore-X`:\n-\n-* Architecture: `aarch64`, `arm`, `asmjs`, `mips`, `wasm32`, `x86_64`, `x86`, ...\n-* OS: `android`, `emscripten`, `freebsd`, `ios`, `linux`, `macos`, `windows`, ...\n-* Environment (fourth word of the target triple): `gnu`, `msvc`, `musl`.\n-* Pointer width: `32bit`, `64bit`.\n-* Stage: `stage0`, `stage1`, `stage2`.\n-\n-### Other Header Commands\n-\n-* `min-{gdb,lldb}-version`\n-* `min-llvm-version`\n-* `compile-pass` for UI tests, indicates that the test is supposed\n-  to compile, as opposed to the default where the test is supposed to error out.\n-* `compile-flags` passes extra command-line args to the compiler,\n-  e.g. `compile-flags -g` which forces debuginfo to be enabled.\n-* `should-fail` indicates that the test should fail; used for \"meta testing\",\n-  where we test the compiletest program itself to check that it will generate\n-  errors in appropriate scenarios. This header is ignored for pretty-printer tests.\n-* `gate-test-X` where `X` is a feature marks the test as \"gate test\" for feature X.\n-  Such tests are supposed to ensure that the compiler errors when usage of a gated\n-  feature is attempted without the proper `#![feature(X)]` tag.\n-  Each unstable lang feature is required to have a gate test.\n-\n-## Revisions\n-\n-Certain classes of tests support \"revisions\" (as of the time of this\n-writing, this includes run-pass, compile-fail, run-fail, and\n-incremental, though incremental tests are somewhat\n-different). Revisions allow a single test file to be used for multiple\n-tests. This is done by adding a special header at the top of the file:\n-\n-```\n-// revisions: foo bar baz\n-```\n-\n-This will result in the test being compiled (and tested) three times,\n-once with `--cfg foo`, once with `--cfg bar`, and once with `--cfg\n-baz`. You can therefore use `#[cfg(foo)]` etc within the test to tweak\n-each of these results.\n-\n-You can also customize headers and expected error messages to a particular\n-revision. To do this, add `[foo]` (or `bar`, `baz`, etc) after the `//`\n-comment, like so:\n-\n-```\n-// A flag to pass in only for cfg `foo`:\n-//[foo]compile-flags: -Z verbose\n-\n-#[cfg(foo)]\n-fn test_foo() {\n-    let x: usize = 32_u32; //[foo]~ ERROR mismatched types\n-}\n-```\n-\n-Note that not all headers have meaning when customized to a revision.\n-For example, the `ignore-test` header (and all \"ignore\" headers)\n-currently only apply to the test as a whole, not to particular\n-revisions. The only headers that are intended to really work when\n-customized to a revision are error patterns and compiler flags.\n-\n-## Guide to the UI Tests\n-\n-The UI tests are intended to capture the compiler's complete output,\n-so that we can test all aspects of the presentation. They work by\n-compiling a file (e.g., `ui/hello_world/main.rs`), capturing the output,\n-and then applying some normalization (see below). This normalized\n-result is then compared against reference files named\n-`ui/hello_world/main.stderr` and `ui/hello_world/main.stdout`. If either of\n-those files doesn't exist, the output must be empty. If the test run\n-fails, we will print out the current output, but it is also saved in\n-`build/<target-triple>/test/ui/hello_world/main.stdout` (this path is\n-printed as part of the test failure message), so you can run `diff` and\n-so forth.\n-\n-Normally, the test-runner checks that UI tests fail compilation. If you want\n-to do a UI test for code that *compiles* (e.g. to test warnings, or if you\n-have a collection of tests, only some of which error out), you can use the\n-`// compile-pass` header command to have the test runner instead\n-check that the test compiles successfully.\n-\n-### Editing and updating the reference files\n-\n-If you have changed the compiler's output intentionally, or you are\n-making a new test, you can pass `--bless` to the command you used to\n-run the tests. This will then copy over the files\n-from the build directory and use them as the new reference.\n-\n-### Normalization\n-\n-The normalization applied is aimed at eliminating output difference\n-between platforms, mainly about filenames:\n-\n-- the test directory is replaced with `$DIR`\n-- all backslashes (`\\`) are converted to forward slashes (`/`) (for Windows)\n-- all CR LF newlines are converted to LF\n-\n-Sometimes these built-in normalizations are not enough. In such cases, you\n-may provide custom normalization rules using the header commands, e.g.\n-\n-```\n-// normalize-stdout-test: \"foo\" -> \"bar\"\n-// normalize-stderr-32bit: \"fn\\(\\) \\(32 bits\\)\" -> \"fn\\(\\) \\($$PTR bits\\)\"\n-// normalize-stderr-64bit: \"fn\\(\\) \\(64 bits\\)\" -> \"fn\\(\\) \\($$PTR bits\\)\"\n-```\n-\n-This tells the test, on 32-bit platforms, whenever the compiler writes\n-`fn() (32 bits)` to stderr, it should be normalized to read `fn() ($PTR bits)`\n-instead. Similar for 64-bit. The replacement is performed by regexes using\n-default regex flavor provided by `regex` crate.\n-\n-The corresponding reference file will use the normalized output to test both\n-32-bit and 64-bit platforms:\n-\n-```\n-...\n-   |\n-   = note: source type: fn() ($PTR bits)\n-   = note: target type: u16 (16 bits)\n-...\n-```\n-\n-Please see `ui/transmute/main.rs` and `.stderr` for a concrete usage example.\n-\n-Besides `normalize-stderr-32bit` and `-64bit`, one may use any target\n-information or stage supported by `ignore-X` here as well (e.g.\n-`normalize-stderr-windows` or simply `normalize-stderr-test` for unconditional\n-replacement).\n+Documentation the compiler testing framework has moved to\n+[the rustc guide](https://rust-lang-nursery.github.io/rustc-guide/tests/intro.html)."}, {"sha": "288168c699263e07871593c8c149a09954c5da00", "filename": "src/test/ui/catch-block-type-error.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Ftest%2Fui%2Fcatch-block-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Ftest%2Fui%2Fcatch-block-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch-block-type-error.stderr?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -2,7 +2,10 @@ error[E0271]: type mismatch resolving `<std::option::Option<f32> as std::ops::Tr\n   --> $DIR/catch-block-type-error.rs:18:9\n    |\n LL |         42\n-   |         ^^ expected f32, found integral variable\n+   |         ^^\n+   |         |\n+   |         expected f32, found integral variable\n+   |         help: use a float literal: `42.0`\n    |\n    = note: expected type `f32`\n               found type `{integer}`"}, {"sha": "243e3a65f391a7205939d14e1877abe91d093b64", "filename": "src/test/ui/did_you_mean/issue-53280-expected-float-found-integer-literal.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let sixteen: f32 = 16;\n+    //~^ ERROR mismatched types\n+    //~| HELP use a float literal\n+    let a_million_and_seventy: f64 = 1_000_070;\n+    //~^ ERROR mismatched types\n+    //~| HELP use a float literal\n+    let negative_nine: f32 = -9;\n+    //~^ ERROR mismatched types\n+    //~| HELP use a float literal\n+\n+\n+    // only base-10 literals get the suggestion\n+\n+    let sixteen_again: f64 = 0x10;\n+    //~^ ERROR mismatched types\n+    let and_once_more: f32 = 0o20;\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "caaa9541417fb90c99b2ee6997f4f66e7a1543e5", "filename": "src/test/ui/did_you_mean/issue-53280-expected-float-found-integer-literal.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-53280-expected-float-found-integer-literal.stderr?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -0,0 +1,57 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-53280-expected-float-found-integer-literal.rs:12:24\n+   |\n+LL |     let sixteen: f32 = 16;\n+   |                        ^^\n+   |                        |\n+   |                        expected f32, found integral variable\n+   |                        help: use a float literal: `16.0`\n+   |\n+   = note: expected type `f32`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-53280-expected-float-found-integer-literal.rs:15:38\n+   |\n+LL |     let a_million_and_seventy: f64 = 1_000_070;\n+   |                                      ^^^^^^^^^\n+   |                                      |\n+   |                                      expected f64, found integral variable\n+   |                                      help: use a float literal: `1_000_070.0`\n+   |\n+   = note: expected type `f64`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-53280-expected-float-found-integer-literal.rs:18:30\n+   |\n+LL |     let negative_nine: f32 = -9;\n+   |                              ^^\n+   |                              |\n+   |                              expected f32, found integral variable\n+   |                              help: use a float literal: `-9.0`\n+   |\n+   = note: expected type `f32`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-53280-expected-float-found-integer-literal.rs:25:30\n+   |\n+LL |     let sixteen_again: f64 = 0x10;\n+   |                              ^^^^ expected f64, found integral variable\n+   |\n+   = note: expected type `f64`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-53280-expected-float-found-integer-literal.rs:27:30\n+   |\n+LL |     let and_once_more: f32 = 0o20;\n+   |                              ^^^^ expected f32, found integral variable\n+   |\n+   = note: expected type `f32`\n+              found type `{integer}`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "9501adb938616de359b3e44ce9c41f7b4d8d5860", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -267,7 +267,7 @@ fn recv<B: BufRead>(dir: &Path, io: &mut B) -> PathBuf {\n     t!(io::copy(&mut io.take(amt),\n                 &mut t!(File::create(&dst))));\n     t!(fs::set_permissions(&dst, Permissions::from_mode(0o755)));\n-    return dst\n+    dst\n }\n \n fn my_copy(src: &mut dyn Read, which: u8, dst: &Mutex<dyn Write>) {"}, {"sha": "d63f479f29d9467c67f0fbb798960b771f4aab78", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=5a0d2961ce88f7db90b13771d1e8fc3b50ded7b1", "patch": "@@ -353,7 +353,7 @@ fn check_crate_duplicate(resolve: &Resolve, bad: &mut bool) {\n         // versions of them accidentally sneak into our dependency graph to\n         // ensure we keep our CI times under control\n         // \"cargo\", // FIXME(#53005)\n-        // \"rustc-ap-syntax\", // FIXME(#53006)\n+        \"rustc-ap-syntax\",\n     ];\n     let mut name_to_id = HashMap::new();\n     for node in resolve.nodes.iter() {"}]}