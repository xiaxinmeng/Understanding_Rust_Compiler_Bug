{"sha": "4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhN2FhNzViNWRmMmRiYTE0ZWUwM2ZiM2E0ZDg3YTMzZWMwZmQ2ZGQ=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-20T00:37:22Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-20T00:37:22Z"}, "message": "Make _io.buf_reader read more than 0 bytes at a time.", "tree": {"sha": "e32837f9692a47d4415d8bd80e8f53aaa64d781d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e32837f9692a47d4415d8bd80e8f53aaa64d781d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd", "html_url": "https://github.com/rust-lang/rust/commit/4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6b348a13ce33227a01839d41b8ae055a9eacdca", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6b348a13ce33227a01839d41b8ae055a9eacdca", "html_url": "https://github.com/rust-lang/rust/commit/b6b348a13ce33227a01839d41b8ae055a9eacdca"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "5583815fd59a22539d2eb6fa63bee8c2d78139a7", "filename": "src/lib/_io.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd/src%2Flib%2F_io.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd/src%2Flib%2F_io.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_io.rs?ref=4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd", "patch": "@@ -48,17 +48,18 @@ fn new_buf_reader(str path) -> buf_reader {\n         buf = new_buf();\n       }\n \n-      auto len = _vec.len[u8](buf);\n+      auto len = default_bufsz();\n       auto vbuf = _vec.buf[u8](buf);\n       auto count = os.libc.read(fd, vbuf, len);\n \n       if (count < 0) {\n         log \"error filling buffer\";\n         log sys.rustrt.last_os_error();\n         fail;\n-      } else {\n-        ret buf;\n       }\n+\n+      _vec.len_set[u8](buf, count as uint);\n+      ret buf;\n     }\n \n     drop {"}, {"sha": "5f1d2baaeb48c23602f1acc3540a3521709e4c94", "filename": "src/lib/_vec.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd/src%2Flib%2F_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd/src%2Flib%2F_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_vec.rs?ref=4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd", "patch": "@@ -3,13 +3,25 @@ import op = util.operator;\n \n native \"rust\" mod rustrt {\n   type vbuf;\n+\n   fn vec_buf[T](vec[T] v, uint offset) -> vbuf;\n+\n   fn vec_len[T](vec[T] v) -> uint;\n-  /* The T in vec_alloc[T, U] is the type of the vec to allocate.  The\n+  /**\n+   * Sometimes we modify the vec internal data via vec_buf and need to update\n+   * the vec's fill length accordingly.\n+   */\n+  fn vec_len_set[T](vec[T] v, uint n);\n+\n+  /**\n+   * The T in vec_alloc[T, U] is the type of the vec to allocate.  The\n    * U is the type of an element in the vec.  So to allocate a vec[U] we\n-   * want to invoke this as vec_alloc[vec[U], U]. */\n+   * want to invoke this as vec_alloc[vec[U], U].\n+   */\n   fn vec_alloc[T, U](uint n_elts) -> vec[U];\n+\n   fn refcount[T](vec[T] v) -> uint;\n+\n   fn vec_print_debug_info[T](vec[T] v);\n }\n \n@@ -46,12 +58,16 @@ fn init_elt[T](&T t, uint n_elts) -> vec[T] {\n   ret v;\n }\n \n+fn buf[T](vec[T] v) -> vbuf {\n+  ret rustrt.vec_buf[T](v, 0u);\n+}\n+\n fn len[T](vec[T] v) -> uint {\n   ret rustrt.vec_len[T](v);\n }\n \n-fn buf[T](vec[T] v) -> vbuf {\n-  ret rustrt.vec_buf[T](v, 0u);\n+fn len_set[T](vec[T] v, uint n) {\n+  rustrt.vec_len_set[T](v, n);\n }\n \n fn buf_off[T](vec[T] v, uint offset) -> vbuf {"}, {"sha": "d2bad05401467d6e524195b7f161c817e8b750d4", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=4a7aa75b5df2dba14ee03fb3a4d87a33ec0fd6dd", "patch": "@@ -108,15 +108,35 @@ vec_len(rust_task *task, type_desc *ty, rust_vec *v)\n     return v->fill / ty->size;\n }\n \n+extern \"C\" CDECL void\n+vec_len_set(rust_task *task, type_desc *ty, rust_vec *v, size_t len)\n+{\n+    task->log(rust_log::STDLIB,\n+              \"vec_len_set(0x%\" PRIxPTR \", %\" PRIdPTR \") on vec with \"\n+              \"alloc = %\" PRIdPTR\n+              \", fill = %\" PRIdPTR\n+              \", len = %\" PRIdPTR\n+              \".  New fill is %\" PRIdPTR,\n+              v, len, v->alloc, v->fill, v->fill / ty->size, len * ty->size);\n+    v->fill = len * ty->size;\n+}\n+\n extern \"C\" CDECL void\n vec_print_debug_info(rust_task *task, type_desc *ty, rust_vec *v)\n {\n     task->log(rust_log::STDLIB,\n               \"vec_print_debug_info(0x%\" PRIxPTR \")\"\n               \" with tydesc 0x%\" PRIxPTR\n               \" (size = %\" PRIdPTR \", align = %\" PRIdPTR \")\"\n-              \" alloc = %\" PRIdPTR \", fill = %\" PRIdPTR\n-              \" , data = ...\", v, ty, ty->size, ty->align, v->alloc, v->fill);\n+              \" alloc = %\" PRIdPTR \", fill = %\" PRIdPTR \", len = %\" PRIdPTR\n+              \" , data = ...\",\n+              v,\n+              ty,\n+              ty->size,\n+              ty->align,\n+              v->alloc,\n+              v->fill,\n+              v->fill / ty->size);\n \n     for (size_t i = 0; i < v->fill; ++i) {\n         task->log(rust_log::STDLIB,"}]}