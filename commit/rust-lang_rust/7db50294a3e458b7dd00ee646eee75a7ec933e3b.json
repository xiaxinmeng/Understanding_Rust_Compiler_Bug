{"sha": "7db50294a3e458b7dd00ee646eee75a7ec933e3b", "node_id": "C_kwDOAAsO6NoAKDdkYjUwMjk0YTNlNDU4YjdkZDAwZWU2NDZlZWU3NWE3ZWM5MzNlM2I", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-26T13:58:55Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-19T21:21:34Z"}, "message": "{manifest-path} interpolation", "tree": {"sha": "b8697b951be76aac4437bb77da2a2756ce028fda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8697b951be76aac4437bb77da2a2756ce028fda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7db50294a3e458b7dd00ee646eee75a7ec933e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7db50294a3e458b7dd00ee646eee75a7ec933e3b", "html_url": "https://github.com/rust-lang/rust/commit/7db50294a3e458b7dd00ee646eee75a7ec933e3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7db50294a3e458b7dd00ee646eee75a7ec933e3b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5174b65ed8ada51977b5621bc070fe5bf9137dc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5174b65ed8ada51977b5621bc070fe5bf9137dc4", "html_url": "https://github.com/rust-lang/rust/commit/5174b65ed8ada51977b5621bc070fe5bf9137dc4"}], "stats": {"total": 221, "additions": 118, "deletions": 103}, "files": [{"sha": "cdb3c2969c8523bc867fa71a527092c0635da648", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 32, "deletions": 37, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7db50294a3e458b7dd00ee646eee75a7ec933e3b/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db50294a3e458b7dd00ee646eee75a7ec933e3b/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=7db50294a3e458b7dd00ee646eee75a7ec933e3b", "patch": "@@ -6,7 +6,6 @@\n \n use std::{\n     fmt, io,\n-    path::Path,\n     process::{ChildStderr, ChildStdout, Command, Stdio},\n     time::Duration,\n };\n@@ -25,7 +24,6 @@ pub use cargo_metadata::diagnostic::{\n #[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]\n pub enum InvocationStrategy {\n     OnceInRoot,\n-    PerWorkspaceWithManifestPath,\n     #[default]\n     PerWorkspace,\n }\n@@ -153,7 +151,9 @@ struct FlycheckActor {\n     id: usize,\n     sender: Box<dyn Fn(Message) + Send>,\n     config: FlycheckConfig,\n-    workspace_root: AbsPathBuf,\n+    /// Either the workspace root of the workspace we are flychecking,\n+    /// or the project root of the project.\n+    root: AbsPathBuf,\n     /// CargoHandle exists to wrap around the communication needed to be able to\n     /// run `cargo check` without blocking. Currently the Rust standard library\n     /// doesn't provide a way to read sub-process output without blocking, so we\n@@ -175,7 +175,7 @@ impl FlycheckActor {\n         workspace_root: AbsPathBuf,\n     ) -> FlycheckActor {\n         tracing::info!(%id, ?workspace_root, \"Spawning flycheck\");\n-        FlycheckActor { id, sender, config, workspace_root, cargo_handle: None }\n+        FlycheckActor { id, sender, config, root: workspace_root, cargo_handle: None }\n     }\n \n     fn report_progress(&self, progress: Progress) {\n@@ -210,20 +210,7 @@ impl FlycheckActor {\n                         }\n                     }\n \n-                    let mut command = self.check_command();\n-                    let invocation_strategy = self.invocation_strategy();\n-                    match invocation_strategy {\n-                        InvocationStrategy::OnceInRoot => (),\n-                        InvocationStrategy::PerWorkspaceWithManifestPath => {\n-                            command.arg(\"--manifest-path\");\n-                            command.arg(<_ as AsRef<Path>>::as_ref(\n-                                &self.workspace_root.join(\"Cargo.toml\"),\n-                            ));\n-                        }\n-                        InvocationStrategy::PerWorkspace => {\n-                            command.current_dir(&self.workspace_root);\n-                        }\n-                    }\n+                    let command = self.check_command();\n                     tracing::debug!(?command, \"will restart flycheck\");\n                     match CargoHandle::spawn(command) {\n                         Ok(cargo_handle) => {\n@@ -265,7 +252,7 @@ impl FlycheckActor {\n                     CargoMessage::Diagnostic(msg) => {\n                         self.send(Message::AddDiagnostic {\n                             id: self.id,\n-                            workspace_root: self.workspace_root.clone(),\n+                            workspace_root: self.root.clone(),\n                             diagnostic: msg,\n                         });\n                     }\n@@ -287,15 +274,8 @@ impl FlycheckActor {\n         }\n     }\n \n-    fn invocation_strategy(&self) -> InvocationStrategy {\n-        match self.config {\n-            FlycheckConfig::CargoCommand { invocation_strategy, .. }\n-            | FlycheckConfig::CustomCommand { invocation_strategy, .. } => invocation_strategy,\n-        }\n-    }\n-\n     fn check_command(&self) -> Command {\n-        let mut cmd = match &self.config {\n+        let (mut cmd, args, invocation_strategy) = match &self.config {\n             FlycheckConfig::CargoCommand {\n                 command,\n                 target_triple,\n@@ -305,13 +285,11 @@ impl FlycheckActor {\n                 extra_args,\n                 features,\n                 extra_env,\n-                invocation_strategy: _,\n+                invocation_strategy,\n             } => {\n                 let mut cmd = Command::new(toolchain::cargo());\n                 cmd.arg(command);\n-                cmd.current_dir(&self.workspace_root);\n-                cmd.args(&[\"--workspace\", \"--message-format=json\", \"--manifest-path\"])\n-                    .arg(self.workspace_root.join(\"Cargo.toml\").as_os_str());\n+                cmd.args(&[\"--workspace\", \"--message-format=json\"]);\n \n                 if let Some(target) = target_triple {\n                     cmd.args(&[\"--target\", target.as_str()]);\n@@ -330,18 +308,35 @@ impl FlycheckActor {\n                         cmd.arg(features.join(\" \"));\n                     }\n                 }\n-                cmd.args(extra_args);\n                 cmd.envs(extra_env);\n-                cmd\n+                (cmd, extra_args, invocation_strategy)\n             }\n-            FlycheckConfig::CustomCommand { command, args, extra_env, invocation_strategy: _ } => {\n+            FlycheckConfig::CustomCommand { command, args, extra_env, invocation_strategy } => {\n                 let mut cmd = Command::new(command);\n-                cmd.args(args);\n                 cmd.envs(extra_env);\n-                cmd\n+                (cmd, args, invocation_strategy)\n             }\n         };\n-        cmd.current_dir(&self.workspace_root);\n+        if let InvocationStrategy::PerWorkspace = invocation_strategy {\n+            let mut with_manifest_path = false;\n+            for arg in args {\n+                if let Some(_) = arg.find(\"$manifest_path\") {\n+                    with_manifest_path = true;\n+                    cmd.arg(arg.replace(\n+                        \"$manifest_path\",\n+                        &self.root.join(\"Cargo.toml\").display().to_string(),\n+                    ));\n+                } else {\n+                    cmd.arg(arg);\n+                }\n+            }\n+\n+            if !with_manifest_path {\n+                cmd.current_dir(&self.root);\n+            }\n+        } else {\n+            cmd.args(args);\n+        }\n         cmd\n     }\n "}, {"sha": "12be67d9a0cb2bedd28d645d1081eff48bb86c1b", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 45, "deletions": 21, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7db50294a3e458b7dd00ee646eee75a7ec933e3b/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db50294a3e458b7dd00ee646eee75a7ec933e3b/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=7db50294a3e458b7dd00ee646eee75a7ec933e3b", "patch": "@@ -55,11 +55,37 @@ impl BuildScriptOutput {\n }\n \n impl WorkspaceBuildScripts {\n-    fn build_command(config: &CargoConfig) -> io::Result<Command> {\n+    fn build_command(\n+        config: &CargoConfig,\n+        workspace_root: Option<&path::Path>,\n+    ) -> io::Result<Command> {\n         let mut cmd = match config.run_build_script_command.as_deref() {\n             Some([program, args @ ..]) => {\n                 let mut cmd = Command::new(program);\n-                cmd.args(args);\n+\n+                // FIXME: strategy and workspace root are coupled, express that in code\n+                if let (InvocationStrategy::PerWorkspace, Some(workspace_root)) =\n+                    (config.invocation_strategy, workspace_root)\n+                {\n+                    let mut with_manifest_path = false;\n+                    for arg in args {\n+                        if let Some(_) = arg.find(\"$manifest_path\") {\n+                            with_manifest_path = true;\n+                            cmd.arg(arg.replace(\n+                                \"$manifest_path\",\n+                                &workspace_root.join(\"Cargo.toml\").display().to_string(),\n+                            ));\n+                        } else {\n+                            cmd.arg(arg);\n+                        }\n+                    }\n+\n+                    if !with_manifest_path {\n+                        cmd.current_dir(workspace_root);\n+                    }\n+                } else {\n+                    cmd.args(args);\n+                }\n                 cmd\n             }\n             _ => {\n@@ -90,9 +116,15 @@ impl WorkspaceBuildScripts {\n                         }\n                     }\n                 }\n+\n+                if let Some(workspace_root) = workspace_root {\n+                    cmd.current_dir(workspace_root);\n+                }\n+\n                 cmd\n             }\n         };\n+\n         cmd.envs(&config.extra_env);\n         if config.wrap_rustc_in_build_scripts {\n             // Setup RUSTC_WRAPPER to point to `rust-analyzer` binary itself. We use\n@@ -115,15 +147,21 @@ impl WorkspaceBuildScripts {\n     ) -> io::Result<WorkspaceBuildScripts> {\n         const RUST_1_62: Version = Version::new(1, 62, 0);\n \n-        match Self::run_per_ws(Self::build_command(config)?, config, workspace, progress) {\n+        let workspace_root: &path::Path = &workspace.workspace_root().as_ref();\n+\n+        match Self::run_per_ws(\n+            Self::build_command(config, Some(workspace_root))?,\n+            workspace,\n+            progress,\n+        ) {\n             Ok(WorkspaceBuildScripts { error: Some(error), .. })\n                 if toolchain.as_ref().map_or(false, |it| *it >= RUST_1_62) =>\n             {\n                 // building build scripts failed, attempt to build with --keep-going so\n                 // that we potentially get more build data\n-                let mut cmd = Self::build_command(config)?;\n+                let mut cmd = Self::build_command(config, Some(workspace_root))?;\n                 cmd.args(&[\"-Z\", \"unstable-options\", \"--keep-going\"]).env(\"RUSTC_BOOTSTRAP\", \"1\");\n-                let mut res = Self::run_per_ws(cmd, config, workspace, progress)?;\n+                let mut res = Self::run_per_ws(cmd, workspace, progress)?;\n                 res.error = Some(error);\n                 Ok(res)\n             }\n@@ -139,7 +177,7 @@ impl WorkspaceBuildScripts {\n         progress: &dyn Fn(String),\n     ) -> io::Result<Vec<WorkspaceBuildScripts>> {\n         assert_eq!(config.invocation_strategy, InvocationStrategy::OnceInRoot);\n-        let cmd = Self::build_command(config)?;\n+        let cmd = Self::build_command(config, None)?;\n         // NB: Cargo.toml could have been modified between `cargo metadata` and\n         // `cargo check`. We shouldn't assume that package ids we see here are\n         // exactly those from `config`.\n@@ -187,24 +225,10 @@ impl WorkspaceBuildScripts {\n     }\n \n     fn run_per_ws(\n-        mut cmd: Command,\n-        config: &CargoConfig,\n+        cmd: Command,\n         workspace: &CargoWorkspace,\n         progress: &dyn Fn(String),\n     ) -> io::Result<WorkspaceBuildScripts> {\n-        let workspace_root: &path::Path = &workspace.workspace_root().as_ref();\n-\n-        match config.invocation_strategy {\n-            InvocationStrategy::OnceInRoot => (),\n-            InvocationStrategy::PerWorkspaceWithManifestPath => {\n-                cmd.arg(\"--manifest-path\");\n-                cmd.arg(workspace_root.join(\"Cargo.toml\"));\n-            }\n-            InvocationStrategy::PerWorkspace => {\n-                cmd.current_dir(workspace_root);\n-            }\n-        }\n-\n         let mut res = WorkspaceBuildScripts::default();\n         let outputs = &mut res.outputs;\n         // NB: Cargo.toml could have been modified between `cargo metadata` and"}, {"sha": "956c872ccc627ef28f2792d048b8e6cd40cc06aa", "filename": "crates/project-model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7db50294a3e458b7dd00ee646eee75a7ec933e3b/crates%2Fproject-model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db50294a3e458b7dd00ee646eee75a7ec933e3b/crates%2Fproject-model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Flib.rs?ref=7db50294a3e458b7dd00ee646eee75a7ec933e3b", "patch": "@@ -158,10 +158,9 @@ fn utf8_stdout(mut cmd: Command) -> Result<String> {\n     Ok(stdout.trim().to_string())\n }\n \n-#[derive(Clone, Debug, Default, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]\n pub enum InvocationStrategy {\n     OnceInRoot,\n-    PerWorkspaceWithManifestPath,\n     #[default]\n     PerWorkspace,\n }"}, {"sha": "561bad3a6abbb536def70fd74088d3d9a4b92652", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7db50294a3e458b7dd00ee646eee75a7ec933e3b/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db50294a3e458b7dd00ee646eee75a7ec933e3b/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=7db50294a3e458b7dd00ee646eee75a7ec933e3b", "patch": "@@ -323,9 +323,7 @@ impl ProjectWorkspace {\n         config: &CargoConfig,\n         progress: &dyn Fn(String),\n     ) -> Vec<Result<WorkspaceBuildScripts>> {\n-        if let InvocationStrategy::PerWorkspaceWithManifestPath | InvocationStrategy::PerWorkspace =\n-            config.invocation_strategy\n-        {\n+        if let InvocationStrategy::PerWorkspace = config.invocation_strategy {\n             return workspaces.iter().map(|it| it.run_build_scripts(config, progress)).collect();\n         }\n "}, {"sha": "3bf28cb7b472f3f8b59cba6265677d4d9e2bfcaa", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7db50294a3e458b7dd00ee646eee75a7ec933e3b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db50294a3e458b7dd00ee646eee75a7ec933e3b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=7db50294a3e458b7dd00ee646eee75a7ec933e3b", "patch": "@@ -70,12 +70,15 @@ config_data! {\n         /// Run build scripts (`build.rs`) for more precise code analysis.\n         cargo_buildScripts_enable: bool  = \"true\",\n         /// Specifies the invocation strategy to use when running the build scripts command.\n-        /// If `per_workspace_with_manifest_path` is set, the command will be executed for each\n-        /// workspace, `--manifest-path {workspace-dir}` will be passed to the invoked command and\n-        /// the command will be executed from the project root.\n-        /// If `per_workspace` is set, the command will be executed for each workspace and the\n-        /// command will be executed from the corresponding workspace root.\n+        /// If `per_workspace` is set, the command will be executed for each workspace and all\n+        /// occurrences of `$manifest_path` in the command will be replaced by the corresponding\n+        /// manifest path of the workspace that the command is being invoked for. If interpolation\n+        /// for the manifest path happens at least once, the commands will be executed from the\n+        /// project root, otherwise the commands will be executed from the corresponding workspace\n+        /// root.\n         /// If `once_in_root` is set, the command will be executed once in the project root.\n+        /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+        /// is set.\n         cargo_buildScripts_invocationStrategy: InvocationStrategy = \"\\\"per_workspace\\\"\",\n         /// Override the command rust-analyzer uses to run build scripts and\n         /// build procedural macros. The command is required to output json\n@@ -131,12 +134,15 @@ config_data! {\n         /// Set to `\"all\"` to pass `--all-features` to Cargo.\n         checkOnSave_features: Option<CargoFeaturesDef>      = \"null\",\n         /// Specifies the invocation strategy to use when running the checkOnSave command.\n-        /// If `per_workspace_with_manifest_path` is set, the command will be executed for each\n-        /// workspace, `--manifest-path {workspace-dir}` will be passed to the invoked command and\n-        /// the command will be executed from the project root.\n-        /// If `per_workspace` is set, the command will be executed for each workspace and the\n-        /// command will be executed from the corresponding workspace root.\n+        /// If `per_workspace` is set, the command will be executed for each workspace and all\n+        /// occurrences of `$manifest_path` in the command will be replaced by the corresponding\n+        /// manifest path of the workspace that the command is being invoked for. If interpolation\n+        /// for the manifest path happens at least once, the commands will be executed from the\n+        /// project root, otherwise the commands will be executed from the corresponding workspace\n+        /// root.\n         /// If `once_in_root` is set, the command will be executed once in the project root.\n+        /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+        /// is set.\n         checkOnSave_invocationStrategy: InvocationStrategy = \"\\\"per_workspace\\\"\",\n         /// Whether to pass `--no-default-features` to Cargo. Defaults to\n         /// `#rust-analyzer.cargo.noDefaultFeatures#`.\n@@ -1074,9 +1080,6 @@ impl Config {\n             wrap_rustc_in_build_scripts: self.data.cargo_buildScripts_useRustcWrapper,\n             invocation_strategy: match self.data.cargo_buildScripts_invocationStrategy {\n                 InvocationStrategy::OnceInRoot => project_model::InvocationStrategy::OnceInRoot,\n-                InvocationStrategy::PerWorkspaceWithManifestPath => {\n-                    project_model::InvocationStrategy::PerWorkspaceWithManifestPath\n-                }\n                 InvocationStrategy::PerWorkspace => project_model::InvocationStrategy::PerWorkspace,\n             },\n             run_build_script_command: self.data.cargo_buildScripts_overrideCommand.clone(),\n@@ -1104,9 +1107,6 @@ impl Config {\n         }\n         let invocation_strategy = match self.data.checkOnSave_invocationStrategy {\n             InvocationStrategy::OnceInRoot => flycheck::InvocationStrategy::OnceInRoot,\n-            InvocationStrategy::PerWorkspaceWithManifestPath => {\n-                flycheck::InvocationStrategy::PerWorkspaceWithManifestPath\n-            }\n             InvocationStrategy::PerWorkspace => flycheck::InvocationStrategy::PerWorkspace,\n         };\n         let flycheck_config = match &self.data.checkOnSave_overrideCommand {\n@@ -1623,7 +1623,6 @@ enum CargoFeaturesDef {\n #[serde(rename_all = \"snake_case\")]\n enum InvocationStrategy {\n     OnceInRoot,\n-    PerWorkspaceWithManifestPath,\n     PerWorkspace,\n }\n \n@@ -2043,10 +2042,9 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n         },\n         \"InvocationStrategy\" => set! {\n             \"type\": \"string\",\n-            \"enum\": [\"per_workspace\", \"per_workspace_with_manifest_path\", \"once_in_root\"],\n+            \"enum\": [\"per_workspace\", \"once_in_root\"],\n             \"enumDescriptions\": [\n-                \"The command will be executed for each workspace, `--manifest-path {workspace-dir}` will be passed to the invoked command and the command will be executed from the project root.\",\n-                \"The command will be executed for each workspace and the command will be executed from the corresponding workspace root.\",\n+                \"The command will be executed for each workspace and `{manifest-path}` usages will be interpolated with the corresponding workspace manifests. If `{manifest-path}` is used, the commands will be executed in the project root, otherwise in the corresponding workspace roots.\",\n                 \"The command will be executed once in the project root.\"\n             ],\n         },"}, {"sha": "af7a51a68ef52c0c605bb450bcccbc5da0d412ba", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7db50294a3e458b7dd00ee646eee75a7ec933e3b/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db50294a3e458b7dd00ee646eee75a7ec933e3b/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=7db50294a3e458b7dd00ee646eee75a7ec933e3b", "patch": "@@ -483,8 +483,7 @@ impl GlobalState {\n                 config.clone(),\n                 self.config.root_path().clone(),\n             )],\n-            flycheck::InvocationStrategy::PerWorkspaceWithManifestPath\n-            | flycheck::InvocationStrategy::PerWorkspace => {\n+            flycheck::InvocationStrategy::PerWorkspace => {\n                 self.workspaces\n                     .iter()\n                     .enumerate()"}, {"sha": "3948d8f7e72eedbeb1d85747deecaa295f306fd8", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7db50294a3e458b7dd00ee646eee75a7ec933e3b/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/7db50294a3e458b7dd00ee646eee75a7ec933e3b/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=7db50294a3e458b7dd00ee646eee75a7ec933e3b", "patch": "@@ -28,12 +28,15 @@ Run build scripts (`build.rs`) for more precise code analysis.\n +\n --\n Specifies the invocation strategy to use when running the build scripts command.\n-If `per_workspace_with_manifest_path` is set, the command will be executed for each\n-workspace, `--manifest-path {workspace-dir}` will be passed to the invoked command and\n-the command will be executed from the project root.\n-If `per_workspace` is set, the command will be executed for each workspace and the\n-command will be executed from the corresponding workspace root.\n+If `per_workspace` is set, the command will be executed for each workspace and all\n+occurrences of `$manifest_path` in the command will be replaced by the corresponding\n+manifest path of the workspace that the command is being invoked for. If interpolation\n+for the manifest path happens at least once, the commands will be executed from the\n+project root, otherwise the commands will be executed from the corresponding workspace\n+root.\n If `once_in_root` is set, the command will be executed once in the project root.\n+This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+is set.\n --\n [[rust-analyzer.cargo.buildScripts.overrideCommand]]rust-analyzer.cargo.buildScripts.overrideCommand (default: `null`)::\n +\n@@ -133,12 +136,15 @@ Set to `\"all\"` to pass `--all-features` to Cargo.\n +\n --\n Specifies the invocation strategy to use when running the checkOnSave command.\n-If `per_workspace_with_manifest_path` is set, the command will be executed for each\n-workspace, `--manifest-path {workspace-dir}` will be passed to the invoked command and\n-the command will be executed from the project root.\n-If `per_workspace` is set, the command will be executed for each workspace and the\n-command will be executed from the corresponding workspace root.\n+If `per_workspace` is set, the command will be executed for each workspace and all\n+occurrences of `$manifest_path` in the command will be replaced by the corresponding\n+manifest path of the workspace that the command is being invoked for. If interpolation\n+for the manifest path happens at least once, the commands will be executed from the\n+project root, otherwise the commands will be executed from the corresponding workspace\n+root.\n If `once_in_root` is set, the command will be executed once in the project root.\n+This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+is set.\n --\n [[rust-analyzer.checkOnSave.noDefaultFeatures]]rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n +"}, {"sha": "8c40a3878f5b1476e439c6a4dfba1e843e3cbb3b", "filename": "editors/code/package.json", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7db50294a3e458b7dd00ee646eee75a7ec933e3b/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/7db50294a3e458b7dd00ee646eee75a7ec933e3b/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=7db50294a3e458b7dd00ee646eee75a7ec933e3b", "patch": "@@ -422,17 +422,15 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.cargo.buildScripts.invocationStrategy\": {\n-                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the build scripts command.\\nIf `per_workspace_with_manifest_path` is set, the command will be executed for each\\nworkspace, `--manifest-path {workspace-dir}` will be passed to the invoked command and\\nthe command will be executed from the project root.\\nIf `per_workspace` is set, the command will be executed for each workspace and the\\ncommand will be executed from the corresponding workspace root.\\nIf `once_in_root` is set, the command will be executed once in the project root.\",\n+                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the build scripts command.\\nIf `per_workspace` is set, the command will be executed for each workspace and all\\noccurrences of `$manifest_path` in the command will be replaced by the corresponding\\nmanifest path of the workspace that the command is being invoked for. If interpolation\\nfor the manifest path happens at least once, the commands will be executed from the\\nproject root, otherwise the commands will be executed from the corresponding workspace\\nroot.\\nIf `once_in_root` is set, the command will be executed once in the project root.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n                     \"default\": \"per_workspace\",\n                     \"type\": \"string\",\n                     \"enum\": [\n                         \"per_workspace\",\n-                        \"per_workspace_with_manifest_path\",\n                         \"once_in_root\"\n                     ],\n                     \"enumDescriptions\": [\n-                        \"The command will be executed for each workspace, `--manifest-path {workspace-dir}` will be passed to the invoked command and the command will be executed from the project root.\",\n-                        \"The command will be executed for each workspace and the command will be executed from the corresponding workspace root.\",\n+                        \"The command will be executed for each workspace and `{manifest-path}` usages will be interpolated with the corresponding workspace manifests. If `{manifest-path}` is used, the commands will be executed in the project root, otherwise in the corresponding workspace roots.\",\n                         \"The command will be executed once in the project root.\"\n                     ]\n                 },\n@@ -562,17 +560,15 @@\n                     ]\n                 },\n                 \"rust-analyzer.checkOnSave.invocationStrategy\": {\n-                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the checkOnSave command.\\nIf `per_workspace_with_manifest_path` is set, the command will be executed for each\\nworkspace, `--manifest-path {workspace-dir}` will be passed to the invoked command and\\nthe command will be executed from the project root.\\nIf `per_workspace` is set, the command will be executed for each workspace and the\\ncommand will be executed from the corresponding workspace root.\\nIf `once_in_root` is set, the command will be executed once in the project root.\",\n+                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the checkOnSave command.\\nIf `per_workspace` is set, the command will be executed for each workspace and all\\noccurrences of `$manifest_path` in the command will be replaced by the corresponding\\nmanifest path of the workspace that the command is being invoked for. If interpolation\\nfor the manifest path happens at least once, the commands will be executed from the\\nproject root, otherwise the commands will be executed from the corresponding workspace\\nroot.\\nIf `once_in_root` is set, the command will be executed once in the project root.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n                     \"default\": \"per_workspace\",\n                     \"type\": \"string\",\n                     \"enum\": [\n                         \"per_workspace\",\n-                        \"per_workspace_with_manifest_path\",\n                         \"once_in_root\"\n                     ],\n                     \"enumDescriptions\": [\n-                        \"The command will be executed for each workspace, `--manifest-path {workspace-dir}` will be passed to the invoked command and the command will be executed from the project root.\",\n-                        \"The command will be executed for each workspace and the command will be executed from the corresponding workspace root.\",\n+                        \"The command will be executed for each workspace and `{manifest-path}` usages will be interpolated with the corresponding workspace manifests. If `{manifest-path}` is used, the commands will be executed in the project root, otherwise in the corresponding workspace roots.\",\n                         \"The command will be executed once in the project root.\"\n                     ]\n                 },"}]}