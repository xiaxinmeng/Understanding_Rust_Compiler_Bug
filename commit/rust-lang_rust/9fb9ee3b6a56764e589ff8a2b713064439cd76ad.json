{"sha": "9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "node_id": "C_kwDOAAsO6NoAKDlmYjllZTNiNmE1Njc2NGU1ODlmZjhhMmI3MTMwNjQ0MzljZDc2YWQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-13T15:33:52Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-13T15:35:41Z"}, "message": "internal: Rename AstDatabase to ExpandDatabase", "tree": {"sha": "d8469e7157f92ce7230681d8354c107359c7b9ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8469e7157f92ce7230681d8354c107359c7b9ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "html_url": "https://github.com/rust-lang/rust/commit/9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fca0a4afefead3daf8f66fd357999d7cd520880", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fca0a4afefead3daf8f66fd357999d7cd520880", "html_url": "https://github.com/rust-lang/rust/commit/9fca0a4afefead3daf8f66fd357999d7cd520880"}], "stats": {"total": 309, "additions": 161, "deletions": 148}, "files": [{"sha": "7610a3ae1e3cb5237504e9697a8064a1fac96b46", "filename": "bench_data/numerous_macro_rules", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/bench_data%2Fnumerous_macro_rules", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/bench_data%2Fnumerous_macro_rules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/bench_data%2Fnumerous_macro_rules?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -341,8 +341,8 @@ macro_rules! __ra_macro_fixture339 {($name :  ident )=>{ impl  Clone  for $name\n macro_rules! __ra_macro_fixture340 {([$($stack :  tt )*])=>{$($stack )* }; ([$($stack :  tt )*]{$($tail :  tt )* })=>{$($stack )* { remove_sections_inner ! ([]$($tail )*); }}; ([$($stack :  tt )*]$t :  tt $($tail :  tt )*)=>{ remove_sections ! ([$($stack )* $t ]$($tail )*); }; }\n macro_rules! __ra_macro_fixture341 {($t :  ty ,$z :  expr )=>{ impl  Zero  for $t { fn  zero ()->  Self {$z  as $t } fn  is_zero (&  self )->  bool { self == &  Self ::  zero ()}}}; }\n macro_rules! __ra_macro_fixture342 {($($ident :  ident ),* $(,)?)=>{$(# [ allow ( bad_style )] pub  const $ident :  super ::  Name =  super ::  Name ::  new_inline ( stringify ! ($ident )); )* }; }\n-macro_rules! __ra_macro_fixture343 {($($trait :  ident =>$expand :  ident ),* )=>{# [ derive ( Debug ,  Clone ,  Copy ,  PartialEq ,  Eq ,  Hash )] pub  enum  BuiltinDeriveExpander {$($trait ),* } impl  BuiltinDeriveExpander { pub  fn  expand (&  self ,  db : &  dyn  AstDatabase ,  id :  LazyMacroId ,  tt : &  tt ::  Subtree , )->  Result <  tt ::  Subtree ,  mbe ::  ExpandError > { let  expander =  match *  self {$(BuiltinDeriveExpander ::$trait =>$expand , )* };  expander ( db ,  id ,  tt )} fn  find_by_name ( name : &  name ::  Name )->  Option <  Self > { match  name {$(id  if  id == &  name ::  name ! [$trait ]=> Some ( BuiltinDeriveExpander ::$trait ), )* _ => None , }}}}; }\n-macro_rules! __ra_macro_fixture344 {( LAZY : $(($name :  ident , $kind :  ident )=>$expand :  ident ),* ,  EAGER : $(($e_name :  ident , $e_kind :  ident )=>$e_expand :  ident ),* )=>{# [ derive ( Debug ,  Clone ,  Copy ,  PartialEq ,  Eq ,  Hash )] pub  enum  BuiltinFnLikeExpander {$($kind ),* }# [ derive ( Debug ,  Clone ,  Copy ,  PartialEq ,  Eq ,  Hash )] pub  enum  EagerExpander {$($e_kind ),* } impl  BuiltinFnLikeExpander { pub  fn  expand (&  self ,  db : &  dyn  AstDatabase ,  id :  LazyMacroId ,  tt : &  tt ::  Subtree , )->  ExpandResult <  tt ::  Subtree > { let  expander =  match *  self {$(BuiltinFnLikeExpander ::$kind =>$expand , )* };  expander ( db ,  id ,  tt )}} impl  EagerExpander { pub  fn  expand (&  self ,  db : &  dyn  AstDatabase ,  arg_id :  EagerMacroId ,  tt : &  tt ::  Subtree , )->  ExpandResult <  Option < ( tt ::  Subtree ,  FragmentKind )>> { let  expander =  match *  self {$(EagerExpander ::$e_kind =>$e_expand , )* };  expander ( db ,  arg_id ,  tt )}} fn  find_by_name ( ident : &  name ::  Name )->  Option <  Either <  BuiltinFnLikeExpander ,  EagerExpander >> { match  ident {$(id  if  id == &  name ::  name ! [$name ]=> Some ( Either ::  Left ( BuiltinFnLikeExpander ::$kind )), )* $(id  if  id == &  name ::  name ! [$e_name ]=> Some ( Either ::  Right ( EagerExpander ::$e_kind )), )* _ => return  None , }}}; }\n+macro_rules! __ra_macro_fixture343 {($($trait :  ident =>$expand :  ident ),* )=>{# [ derive ( Debug ,  Clone ,  Copy ,  PartialEq ,  Eq ,  Hash )] pub  enum  BuiltinDeriveExpander {$($trait ),* } impl  BuiltinDeriveExpander { pub  fn  expand (&  self ,  db : &  dyn  ExpandDatabase ,  id :  LazyMacroId ,  tt : &  tt ::  Subtree , )->  Result <  tt ::  Subtree ,  mbe ::  ExpandError > { let  expander =  match *  self {$(BuiltinDeriveExpander ::$trait =>$expand , )* };  expander ( db ,  id ,  tt )} fn  find_by_name ( name : &  name ::  Name )->  Option <  Self > { match  name {$(id  if  id == &  name ::  name ! [$trait ]=> Some ( BuiltinDeriveExpander ::$trait ), )* _ => None , }}}}; }\n+macro_rules! __ra_macro_fixture344 {( LAZY : $(($name :  ident , $kind :  ident )=>$expand :  ident ),* ,  EAGER : $(($e_name :  ident , $e_kind :  ident )=>$e_expand :  ident ),* )=>{# [ derive ( Debug ,  Clone ,  Copy ,  PartialEq ,  Eq ,  Hash )] pub  enum  BuiltinFnLikeExpander {$($kind ),* }# [ derive ( Debug ,  Clone ,  Copy ,  PartialEq ,  Eq ,  Hash )] pub  enum  EagerExpander {$($e_kind ),* } impl  BuiltinFnLikeExpander { pub  fn  expand (&  self ,  db : &  dyn  ExpandDatabase ,  id :  LazyMacroId ,  tt : &  tt ::  Subtree , )->  ExpandResult <  tt ::  Subtree > { let  expander =  match *  self {$(BuiltinFnLikeExpander ::$kind =>$expand , )* };  expander ( db ,  id ,  tt )}} impl  EagerExpander { pub  fn  expand (&  self ,  db : &  dyn  ExpandDatabase ,  arg_id :  EagerMacroId ,  tt : &  tt ::  Subtree , )->  ExpandResult <  Option < ( tt ::  Subtree ,  FragmentKind )>> { let  expander =  match *  self {$(EagerExpander ::$e_kind =>$e_expand , )* };  expander ( db ,  arg_id ,  tt )}} fn  find_by_name ( ident : &  name ::  Name )->  Option <  Either <  BuiltinFnLikeExpander ,  EagerExpander >> { match  ident {$(id  if  id == &  name ::  name ! [$name ]=> Some ( Either ::  Left ( BuiltinFnLikeExpander ::$kind )), )* $(id  if  id == &  name ::  name ! [$e_name ]=> Some ( Either ::  Right ( EagerExpander ::$e_kind )), )* _ => return  None , }}}; }\n macro_rules! __ra_macro_fixture345 {($($ty :  ty =>$this :  ident $im :  block );*)=>{$(impl  ToTokenTree  for $ty { fn  to_token ($this )->  tt ::  TokenTree { let  leaf :  tt ::  Leaf = $im .  into ();  leaf .  into ()}} impl  ToTokenTree  for &$ty { fn  to_token ($this )->  tt ::  TokenTree { let  leaf :  tt ::  Leaf = $im .  clone ().  into ();  leaf .  into ()}})* }}\n macro_rules! __ra_macro_fixture346 {($name :  ident )=>{ impl $crate ::  salsa ::  InternKey  for $name { fn  from_intern_id ( v : $crate ::  salsa ::  InternId )->  Self {$name ( v )} fn  as_intern_id (&  self )-> $crate ::  salsa ::  InternId { self .  0 }}}; }\n macro_rules! __ra_macro_fixture347 {($($var :  ident ($t :  ty )),+ )=>{$(impl  From <$t >  for  AttrOwner { fn  from ( t : $t )->  AttrOwner { AttrOwner ::$var ( t )}})+ }; }"}, {"sha": "9371fc14dd8a0d3bd27e355c69cf69dd2a66066f", "filename": "crates/hir-def/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdb.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use base_db::{salsa, CrateId, SourceDatabase, Upcast};\n use either::Either;\n-use hir_expand::{db::AstDatabase, HirFileId};\n+use hir_expand::{db::ExpandDatabase, HirFileId};\n use intern::Interned;\n use la_arena::ArenaMap;\n use syntax::{ast, AstPtr};\n@@ -64,7 +64,7 @@ pub trait InternDatabase: SourceDatabase {\n }\n \n #[salsa::query_group(DefDatabaseStorage)]\n-pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n+pub trait DefDatabase: InternDatabase + ExpandDatabase + Upcast<dyn ExpandDatabase> {\n     #[salsa::input]\n     fn enable_proc_attr_macros(&self) -> bool;\n "}, {"sha": "314bf22b95ee76428066b412da9574ee5f09a6e4", "filename": "crates/hir-def/src/macro_expansion_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -20,7 +20,7 @@ use ::mbe::TokenMap;\n use base_db::{fixture::WithFixture, ProcMacro, SourceDatabase};\n use expect_test::Expect;\n use hir_expand::{\n-    db::{AstDatabase, TokenExpander},\n+    db::{ExpandDatabase, TokenExpander},\n     AstId, InFile, MacroDefId, MacroDefKind, MacroFile,\n };\n use stdx::format_to;"}, {"sha": "ee143b19ae5b38e7bbd32712a79590ac5e775205", "filename": "crates/hir-def/src/test_db.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftest_db.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -9,7 +9,7 @@ use base_db::{\n     salsa, AnchoredPath, CrateId, FileId, FileLoader, FileLoaderDelegate, FilePosition,\n     SourceDatabase, Upcast,\n };\n-use hir_expand::{db::AstDatabase, InFile};\n+use hir_expand::{db::ExpandDatabase, InFile};\n use stdx::hash::NoHashHashSet;\n use syntax::{algo, ast, AstNode};\n \n@@ -23,7 +23,7 @@ use crate::{\n #[salsa::database(\n     base_db::SourceDatabaseExtStorage,\n     base_db::SourceDatabaseStorage,\n-    hir_expand::db::AstDatabaseStorage,\n+    hir_expand::db::ExpandDatabaseStorage,\n     crate::db::InternDatabaseStorage,\n     crate::db::DefDatabaseStorage\n )]\n@@ -40,8 +40,8 @@ impl Default for TestDB {\n     }\n }\n \n-impl Upcast<dyn AstDatabase> for TestDB {\n-    fn upcast(&self) -> &(dyn AstDatabase + 'static) {\n+impl Upcast<dyn ExpandDatabase> for TestDB {\n+    fn upcast(&self) -> &(dyn ExpandDatabase + 'static) {\n         &*self\n     }\n }"}, {"sha": "8d1e88725ecbf2509abb9b12ffc54f3982da35a0", "filename": "crates/hir-expand/src/attrs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fattrs.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -10,7 +10,7 @@ use smallvec::{smallvec, SmallVec};\n use syntax::{ast, match_ast, AstNode, SmolStr, SyntaxNode};\n \n use crate::{\n-    db::AstDatabase,\n+    db::ExpandDatabase,\n     hygiene::Hygiene,\n     mod_path::{ModPath, PathKind},\n     name::AsName,\n@@ -38,7 +38,7 @@ impl ops::Deref for RawAttrs {\n impl RawAttrs {\n     pub const EMPTY: Self = Self { entries: None };\n \n-    pub fn new(db: &dyn AstDatabase, owner: &dyn ast::HasAttrs, hygiene: &Hygiene) -> Self {\n+    pub fn new(db: &dyn ExpandDatabase, owner: &dyn ast::HasAttrs, hygiene: &Hygiene) -> Self {\n         let entries = collect_attrs(owner)\n             .filter_map(|(id, attr)| match attr {\n                 Either::Left(attr) => {\n@@ -55,7 +55,7 @@ impl RawAttrs {\n         Self { entries: if entries.is_empty() { None } else { Some(entries) } }\n     }\n \n-    pub fn from_attrs_owner(db: &dyn AstDatabase, owner: InFile<&dyn ast::HasAttrs>) -> Self {\n+    pub fn from_attrs_owner(db: &dyn ExpandDatabase, owner: InFile<&dyn ast::HasAttrs>) -> Self {\n         let hygiene = Hygiene::new(db, owner.file_id);\n         Self::new(db, owner.value, &hygiene)\n     }\n@@ -87,7 +87,7 @@ impl RawAttrs {\n \n     /// Processes `cfg_attr`s, returning the resulting semantic `Attrs`.\n     // FIXME: This should return a different type\n-    pub fn filter(self, db: &dyn AstDatabase, krate: CrateId) -> RawAttrs {\n+    pub fn filter(self, db: &dyn ExpandDatabase, krate: CrateId) -> RawAttrs {\n         let has_cfg_attrs = self\n             .iter()\n             .any(|attr| attr.path.as_ident().map_or(false, |name| *name == crate::name![cfg_attr]));\n@@ -199,7 +199,7 @@ impl fmt::Display for AttrInput {\n \n impl Attr {\n     fn from_src(\n-        db: &dyn AstDatabase,\n+        db: &dyn ExpandDatabase,\n         ast: ast::Meta,\n         hygiene: &Hygiene,\n         id: AttrId,\n@@ -221,7 +221,7 @@ impl Attr {\n     }\n \n     fn from_tt(\n-        db: &dyn AstDatabase,\n+        db: &dyn ExpandDatabase,\n         tt: &tt::Subtree,\n         hygiene: &Hygiene,\n         id: AttrId,"}, {"sha": "277ecd93994225ba4ffa3ed5e26cf718ca0cd334", "filename": "crates/hir-expand/src/builtin_attr_macro.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fbuiltin_attr_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fbuiltin_attr_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_attr_macro.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -1,6 +1,6 @@\n //! Builtin attributes.\n \n-use crate::{db::AstDatabase, name, tt, ExpandResult, MacroCallId, MacroCallKind};\n+use crate::{db::ExpandDatabase, name, tt, ExpandResult, MacroCallId, MacroCallKind};\n \n macro_rules! register_builtin {\n     ( $(($name:ident, $variant:ident) => $expand:ident),* ) => {\n@@ -12,7 +12,7 @@ macro_rules! register_builtin {\n         impl BuiltinAttrExpander {\n             pub fn expand(\n                 &self,\n-                db: &dyn AstDatabase,\n+                db: &dyn ExpandDatabase,\n                 id: MacroCallId,\n                 tt: &tt::Subtree,\n             ) -> ExpandResult<tt::Subtree> {\n@@ -60,7 +60,7 @@ pub fn find_builtin_attr(ident: &name::Name) -> Option<BuiltinAttrExpander> {\n }\n \n fn dummy_attr_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -90,7 +90,7 @@ fn dummy_attr_expand(\n /// So this hacky approach is a lot more friendly for us, though it does require a bit of support in\n /// [`hir::Semantics`] to make this work.\n fn derive_attr_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {"}, {"sha": "5c1a75132ee94f19bd42e4c144003969d8fbb10e", "filename": "crates/hir-expand/src/builtin_derive_macro.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -9,7 +9,7 @@ use syntax::{\n     match_ast,\n };\n \n-use crate::{db::AstDatabase, name, quote, ExpandError, ExpandResult, MacroCallId};\n+use crate::{db::ExpandDatabase, name, quote, ExpandError, ExpandResult, MacroCallId};\n \n macro_rules! register_builtin {\n     ( $($trait:ident => $expand:ident),* ) => {\n@@ -21,7 +21,7 @@ macro_rules! register_builtin {\n         impl BuiltinDeriveExpander {\n             pub fn expand(\n                 &self,\n-                db: &dyn AstDatabase,\n+                db: &dyn ExpandDatabase,\n                 id: MacroCallId,\n                 tt: &tt::Subtree,\n             ) -> ExpandResult<tt::Subtree> {\n@@ -141,7 +141,7 @@ fn expand_simple_derive(tt: &tt::Subtree, trait_path: tt::Subtree) -> ExpandResu\n     ExpandResult::ok(expanded)\n }\n \n-fn find_builtin_crate(db: &dyn AstDatabase, id: MacroCallId) -> tt::TokenTree {\n+fn find_builtin_crate(db: &dyn ExpandDatabase, id: MacroCallId) -> tt::TokenTree {\n     // FIXME: make hygiene works for builtin derive macro\n     // such that $crate can be used here.\n     let cg = db.crate_graph();\n@@ -158,7 +158,7 @@ fn find_builtin_crate(db: &dyn AstDatabase, id: MacroCallId) -> tt::TokenTree {\n }\n \n fn copy_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -167,7 +167,7 @@ fn copy_expand(\n }\n \n fn clone_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -176,7 +176,7 @@ fn clone_expand(\n }\n \n fn default_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -185,7 +185,7 @@ fn default_expand(\n }\n \n fn debug_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -194,21 +194,25 @@ fn debug_expand(\n }\n \n fn hash_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::hash::Hash })\n }\n \n-fn eq_expand(db: &dyn AstDatabase, id: MacroCallId, tt: &tt::Subtree) -> ExpandResult<tt::Subtree> {\n+fn eq_expand(\n+    db: &dyn ExpandDatabase,\n+    id: MacroCallId,\n+    tt: &tt::Subtree,\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::cmp::Eq })\n }\n \n fn partial_eq_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -217,7 +221,7 @@ fn partial_eq_expand(\n }\n \n fn ord_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -226,7 +230,7 @@ fn ord_expand(\n }\n \n fn partial_ord_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {"}, {"sha": "44510f2b7ff680c765d73055d2ecf470b9deefb4", "filename": "crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -10,7 +10,7 @@ use syntax::{\n };\n \n use crate::{\n-    db::AstDatabase, name, quote, tt, ExpandError, ExpandResult, MacroCallId, MacroCallLoc,\n+    db::ExpandDatabase, name, quote, tt, ExpandError, ExpandResult, MacroCallId, MacroCallLoc,\n };\n \n macro_rules! register_builtin {\n@@ -28,7 +28,7 @@ macro_rules! register_builtin {\n         impl BuiltinFnLikeExpander {\n             pub fn expand(\n                 &self,\n-                db: &dyn AstDatabase,\n+                db: &dyn ExpandDatabase,\n                 id: MacroCallId,\n                 tt: &tt::Subtree,\n             ) -> ExpandResult<tt::Subtree> {\n@@ -42,7 +42,7 @@ macro_rules! register_builtin {\n         impl EagerExpander {\n             pub fn expand(\n                 &self,\n-                db: &dyn AstDatabase,\n+                db: &dyn ExpandDatabase,\n                 arg_id: MacroCallId,\n                 tt: &tt::Subtree,\n             ) -> ExpandResult<ExpandedEager> {\n@@ -121,7 +121,7 @@ const DOLLAR_CRATE: tt::Ident =\n     tt::Ident { text: SmolStr::new_inline(\"$crate\"), span: tt::TokenId::unspecified() };\n \n fn module_path_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _id: MacroCallId,\n     _tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -130,7 +130,7 @@ fn module_path_expand(\n }\n \n fn line_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _id: MacroCallId,\n     _tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -144,23 +144,23 @@ fn line_expand(\n }\n \n fn log_syntax_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _id: MacroCallId,\n     _tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n     ExpandResult::ok(quote! {})\n }\n \n fn trace_macros_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _id: MacroCallId,\n     _tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n     ExpandResult::ok(quote! {})\n }\n \n fn stringify_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -174,7 +174,7 @@ fn stringify_expand(\n }\n \n fn column_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _id: MacroCallId,\n     _tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -188,7 +188,7 @@ fn column_expand(\n }\n \n fn assert_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -218,7 +218,7 @@ fn assert_expand(\n }\n \n fn file_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _id: MacroCallId,\n     _tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -234,7 +234,7 @@ fn file_expand(\n }\n \n fn format_args_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -276,7 +276,7 @@ fn format_args_expand(\n }\n \n fn asm_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -304,7 +304,7 @@ fn asm_expand(\n }\n \n fn global_asm_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _id: MacroCallId,\n     _tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -313,7 +313,7 @@ fn global_asm_expand(\n }\n \n fn cfg_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -325,7 +325,7 @@ fn cfg_expand(\n }\n \n fn panic_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -343,7 +343,7 @@ fn panic_expand(\n }\n \n fn unreachable_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<tt::Subtree> {\n@@ -379,7 +379,7 @@ fn unquote_byte_string(lit: &tt::Literal) -> Option<Vec<u8>> {\n }\n \n fn compile_error_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<ExpandedEager> {\n@@ -395,7 +395,7 @@ fn compile_error_expand(\n }\n \n fn concat_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _arg_id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<ExpandedEager> {\n@@ -441,7 +441,7 @@ fn concat_expand(\n }\n \n fn concat_bytes_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _arg_id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<ExpandedEager> {\n@@ -507,7 +507,7 @@ fn concat_bytes_expand_subtree(\n }\n \n fn concat_idents_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _arg_id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<ExpandedEager> {\n@@ -529,7 +529,7 @@ fn concat_idents_expand(\n }\n \n fn relative_file(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     call_id: MacroCallId,\n     path_str: &str,\n     allow_recursion: bool,\n@@ -558,7 +558,7 @@ fn parse_string(tt: &tt::Subtree) -> Result<String, ExpandError> {\n }\n \n fn include_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     arg_id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<ExpandedEager> {\n@@ -583,7 +583,7 @@ fn include_expand(\n }\n \n fn include_bytes_expand(\n-    _db: &dyn AstDatabase,\n+    _db: &dyn ExpandDatabase,\n     _arg_id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<ExpandedEager> {\n@@ -606,7 +606,7 @@ fn include_bytes_expand(\n }\n \n fn include_str_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     arg_id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<ExpandedEager> {\n@@ -637,13 +637,13 @@ fn include_str_expand(\n     ExpandResult::ok(ExpandedEager::new(quote!(#text)))\n }\n \n-fn get_env_inner(db: &dyn AstDatabase, arg_id: MacroCallId, key: &str) -> Option<String> {\n+fn get_env_inner(db: &dyn ExpandDatabase, arg_id: MacroCallId, key: &str) -> Option<String> {\n     let krate = db.lookup_intern_macro_call(arg_id).krate;\n     db.crate_graph()[krate].env.get(key)\n }\n \n fn env_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     arg_id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<ExpandedEager> {\n@@ -679,7 +679,7 @@ fn env_expand(\n }\n \n fn option_env_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     arg_id: MacroCallId,\n     tt: &tt::Subtree,\n ) -> ExpandResult<ExpandedEager> {"}, {"sha": "afa7b6c2461c599498c9679d7eb10cfcd45041c0", "filename": "crates/hir-expand/src/db.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fdb.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -44,7 +44,7 @@ pub enum TokenExpander {\n impl TokenExpander {\n     fn expand(\n         &self,\n-        db: &dyn AstDatabase,\n+        db: &dyn ExpandDatabase,\n         id: MacroCallId,\n         tt: &tt::Subtree,\n     ) -> ExpandResult<tt::Subtree> {\n@@ -83,9 +83,8 @@ impl TokenExpander {\n     }\n }\n \n-// FIXME: rename to ExpandDatabase\n-#[salsa::query_group(AstDatabaseStorage)]\n-pub trait AstDatabase: SourceDatabase {\n+#[salsa::query_group(ExpandDatabaseStorage)]\n+pub trait ExpandDatabase: SourceDatabase {\n     fn ast_id_map(&self, file_id: HirFileId) -> Arc<AstIdMap>;\n \n     /// Main public API -- parses a hir file, not caring whether it's a real\n@@ -138,7 +137,7 @@ pub trait AstDatabase: SourceDatabase {\n /// token. The `token_to_map` mapped down into the expansion, with the mapped\n /// token returned.\n pub fn expand_speculative(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     actual_macro_call: MacroCallId,\n     speculative_args: &SyntaxNode,\n     token_to_map: SyntaxToken,\n@@ -236,12 +235,12 @@ pub fn expand_speculative(\n     Some((node.syntax_node(), token))\n }\n \n-fn ast_id_map(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n+fn ast_id_map(db: &dyn ExpandDatabase, file_id: HirFileId) -> Arc<AstIdMap> {\n     let map = db.parse_or_expand(file_id).map(|it| AstIdMap::from_source(&it)).unwrap_or_default();\n     Arc::new(map)\n }\n \n-fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Option<SyntaxNode> {\n+fn parse_or_expand(db: &dyn ExpandDatabase, file_id: HirFileId) -> Option<SyntaxNode> {\n     match file_id.repr() {\n         HirFileIdRepr::FileId(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n         HirFileIdRepr::MacroFile(macro_file) => {\n@@ -253,7 +252,7 @@ fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Option<SyntaxNod\n }\n \n fn parse_macro_expansion(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     macro_file: MacroFile,\n ) -> ExpandResult<Option<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)>> {\n     let _p = profile::span(\"parse_macro_expansion\");\n@@ -296,7 +295,7 @@ fn parse_macro_expansion(\n }\n \n fn macro_arg(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     id: MacroCallId,\n ) -> Option<Arc<(tt::Subtree, mbe::TokenMap, fixup::SyntaxFixupUndoInfo)>> {\n     let arg = db.macro_arg_text(id)?;\n@@ -357,7 +356,7 @@ fn censor_for_macro_input(loc: &MacroCallLoc, node: &SyntaxNode) -> FxHashSet<Sy\n     .unwrap_or_default()\n }\n \n-fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {\n+fn macro_arg_text(db: &dyn ExpandDatabase, id: MacroCallId) -> Option<GreenNode> {\n     let loc = db.lookup_intern_macro_call(id);\n     let arg = loc.kind.arg(db)?;\n     if matches!(loc.kind, MacroCallKind::FnLike { .. }) {\n@@ -380,7 +379,10 @@ fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {\n     Some(arg.green().into())\n }\n \n-fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Result<Arc<TokenExpander>, mbe::ParseError> {\n+fn macro_def(\n+    db: &dyn ExpandDatabase,\n+    id: MacroDefId,\n+) -> Result<Arc<TokenExpander>, mbe::ParseError> {\n     match id.kind {\n         MacroDefKind::Declarative(ast_id) => {\n             let (mac, def_site_token_map) = match ast_id.to_node(db) {\n@@ -419,7 +421,10 @@ fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Result<Arc<TokenExpander>,\n     }\n }\n \n-fn macro_expand(db: &dyn AstDatabase, id: MacroCallId) -> ExpandResult<Option<Arc<tt::Subtree>>> {\n+fn macro_expand(\n+    db: &dyn ExpandDatabase,\n+    id: MacroCallId,\n+) -> ExpandResult<Option<Arc<tt::Subtree>>> {\n     let _p = profile::span(\"macro_expand\");\n     let loc: MacroCallLoc = db.lookup_intern_macro_call(id);\n     if let Some(eager) = &loc.eager {\n@@ -469,11 +474,11 @@ fn macro_expand(db: &dyn AstDatabase, id: MacroCallId) -> ExpandResult<Option<Ar\n     ExpandResult { value: Some(Arc::new(tt)), err }\n }\n \n-fn macro_expand_error(db: &dyn AstDatabase, macro_call: MacroCallId) -> Option<ExpandError> {\n+fn macro_expand_error(db: &dyn ExpandDatabase, macro_call: MacroCallId) -> Option<ExpandError> {\n     db.macro_expand(macro_call).err\n }\n \n-fn expand_proc_macro(db: &dyn AstDatabase, id: MacroCallId) -> ExpandResult<tt::Subtree> {\n+fn expand_proc_macro(db: &dyn ExpandDatabase, id: MacroCallId) -> ExpandResult<tt::Subtree> {\n     let loc: MacroCallLoc = db.lookup_intern_macro_call(id);\n     let macro_arg = match db.macro_arg(id) {\n         Some(it) => it,\n@@ -502,11 +507,11 @@ fn expand_proc_macro(db: &dyn AstDatabase, id: MacroCallId) -> ExpandResult<tt::\n     expander.expand(db, loc.krate, &macro_arg.0, attr_arg.as_ref())\n }\n \n-fn hygiene_frame(db: &dyn AstDatabase, file_id: HirFileId) -> Arc<HygieneFrame> {\n+fn hygiene_frame(db: &dyn ExpandDatabase, file_id: HirFileId) -> Arc<HygieneFrame> {\n     Arc::new(HygieneFrame::new(db, file_id))\n }\n \n-fn macro_expand_to(db: &dyn AstDatabase, id: MacroCallId) -> ExpandTo {\n+fn macro_expand_to(db: &dyn ExpandDatabase, id: MacroCallId) -> ExpandTo {\n     let loc: MacroCallLoc = db.lookup_intern_macro_call(id);\n     loc.kind.expand_to()\n }"}, {"sha": "aca41b11f926eb3e6152ad95a1edf4bb36d2a779", "filename": "crates/hir-expand/src/eager.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Feager.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -25,7 +25,7 @@ use syntax::{ted, SyntaxNode};\n \n use crate::{\n     ast::{self, AstNode},\n-    db::AstDatabase,\n+    db::ExpandDatabase,\n     hygiene::Hygiene,\n     mod_path::ModPath,\n     EagerCallInfo, ExpandError, ExpandResult, ExpandTo, InFile, MacroCallId, MacroCallKind,\n@@ -96,7 +96,7 @@ impl ErrorSink for &'_ mut dyn FnMut(ExpandError) {\n }\n \n pub fn expand_eager_macro(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     krate: CrateId,\n     macro_call: InFile<ast::MacroCall>,\n     def: MacroDefId,\n@@ -172,7 +172,7 @@ fn to_subtree(node: &SyntaxNode) -> crate::tt::Subtree {\n }\n \n fn lazy_expand(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     def: &MacroDefId,\n     macro_call: InFile<ast::MacroCall>,\n     krate: CrateId,\n@@ -193,7 +193,7 @@ fn lazy_expand(\n }\n \n fn eager_macro_recur(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     hygiene: &Hygiene,\n     curr: InFile<SyntaxNode>,\n     krate: CrateId,"}, {"sha": "2eb56fc9e8b266124fc4b244faa91fe492597ffb", "filename": "crates/hir-expand/src/hygiene.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fhygiene.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -14,7 +14,7 @@ use syntax::{\n };\n \n use crate::{\n-    db::{self, AstDatabase},\n+    db::{self, ExpandDatabase},\n     fixup,\n     name::{AsName, Name},\n     HirFileId, InFile, MacroCallKind, MacroCallLoc, MacroDefKind, MacroFile,\n@@ -26,7 +26,7 @@ pub struct Hygiene {\n }\n \n impl Hygiene {\n-    pub fn new(db: &dyn AstDatabase, file_id: HirFileId) -> Hygiene {\n+    pub fn new(db: &dyn ExpandDatabase, file_id: HirFileId) -> Hygiene {\n         Hygiene { frames: Some(HygieneFrames::new(db, file_id)) }\n     }\n \n@@ -37,7 +37,7 @@ impl Hygiene {\n     // FIXME: this should just return name\n     pub fn name_ref_to_name(\n         &self,\n-        db: &dyn AstDatabase,\n+        db: &dyn ExpandDatabase,\n         name_ref: ast::NameRef,\n     ) -> Either<Name, CrateId> {\n         if let Some(frames) = &self.frames {\n@@ -51,7 +51,7 @@ impl Hygiene {\n         Either::Left(name_ref.as_name())\n     }\n \n-    pub fn local_inner_macros(&self, db: &dyn AstDatabase, path: ast::Path) -> Option<CrateId> {\n+    pub fn local_inner_macros(&self, db: &dyn ExpandDatabase, path: ast::Path) -> Option<CrateId> {\n         let mut token = path.syntax().first_token()?.text_range();\n         let frames = self.frames.as_ref()?;\n         let mut current = &frames.0;\n@@ -87,13 +87,13 @@ pub struct HygieneFrame {\n }\n \n impl HygieneFrames {\n-    fn new(db: &dyn AstDatabase, file_id: HirFileId) -> Self {\n+    fn new(db: &dyn ExpandDatabase, file_id: HirFileId) -> Self {\n         // Note that this intentionally avoids the `hygiene_frame` query to avoid blowing up memory\n         // usage. The query is only helpful for nested `HygieneFrame`s as it avoids redundant work.\n         HygieneFrames(Arc::new(HygieneFrame::new(db, file_id)))\n     }\n \n-    fn root_crate(&self, db: &dyn AstDatabase, node: &SyntaxNode) -> Option<CrateId> {\n+    fn root_crate(&self, db: &dyn ExpandDatabase, node: &SyntaxNode) -> Option<CrateId> {\n         let mut token = node.first_token()?.text_range();\n         let mut result = self.0.krate;\n         let mut current = self.0.clone();\n@@ -136,7 +136,7 @@ struct HygieneInfo {\n impl HygieneInfo {\n     fn map_ident_up(\n         &self,\n-        db: &dyn AstDatabase,\n+        db: &dyn ExpandDatabase,\n         token: TextRange,\n     ) -> Option<(InFile<TextRange>, Origin)> {\n         let token_id = self.exp_map.token_by_range(token)?;\n@@ -175,7 +175,7 @@ impl HygieneInfo {\n }\n \n fn make_hygiene_info(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     macro_file: MacroFile,\n     loc: &MacroCallLoc,\n ) -> Option<HygieneInfo> {\n@@ -215,7 +215,7 @@ fn make_hygiene_info(\n }\n \n impl HygieneFrame {\n-    pub(crate) fn new(db: &dyn AstDatabase, file_id: HirFileId) -> HygieneFrame {\n+    pub(crate) fn new(db: &dyn ExpandDatabase, file_id: HirFileId) -> HygieneFrame {\n         let (info, krate, local_inner) = match file_id.macro_file() {\n             None => (None, None, false),\n             Some(macro_file) => {"}, {"sha": "5e99eacc1b619696d59aa11ecb7f356338cae4a5", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -198,7 +198,7 @@ impl HirFileId {\n \n     /// For macro-expansion files, returns the file original source file the\n     /// expansion originated from.\n-    pub fn original_file(self, db: &dyn db::AstDatabase) -> FileId {\n+    pub fn original_file(self, db: &dyn db::ExpandDatabase) -> FileId {\n         let mut file_id = self;\n         loop {\n             match file_id.repr() {\n@@ -214,7 +214,7 @@ impl HirFileId {\n         }\n     }\n \n-    pub fn expansion_level(self, db: &dyn db::AstDatabase) -> u32 {\n+    pub fn expansion_level(self, db: &dyn db::ExpandDatabase) -> u32 {\n         let mut level = 0;\n         let mut curr = self;\n         while let Some(macro_file) = curr.macro_file() {\n@@ -227,14 +227,14 @@ impl HirFileId {\n     }\n \n     /// If this is a macro call, returns the syntax node of the call.\n-    pub fn call_node(self, db: &dyn db::AstDatabase) -> Option<InFile<SyntaxNode>> {\n+    pub fn call_node(self, db: &dyn db::ExpandDatabase) -> Option<InFile<SyntaxNode>> {\n         let macro_file = self.macro_file()?;\n         let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n         Some(loc.kind.to_node(db))\n     }\n \n     /// If this is a macro call, returns the syntax node of the very first macro call this file resides in.\n-    pub fn original_call_node(self, db: &dyn db::AstDatabase) -> Option<(FileId, SyntaxNode)> {\n+    pub fn original_call_node(self, db: &dyn db::ExpandDatabase) -> Option<(FileId, SyntaxNode)> {\n         let mut call =\n             db.lookup_intern_macro_call(self.macro_file()?.macro_call_id).kind.to_node(db);\n         loop {\n@@ -248,7 +248,7 @@ impl HirFileId {\n     }\n \n     /// Return expansion information if it is a macro-expansion file\n-    pub fn expansion_info(self, db: &dyn db::AstDatabase) -> Option<ExpansionInfo> {\n+    pub fn expansion_info(self, db: &dyn db::ExpandDatabase) -> Option<ExpansionInfo> {\n         let macro_file = self.macro_file()?;\n         let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n \n@@ -294,7 +294,7 @@ impl HirFileId {\n     }\n \n     /// Indicate it is macro file generated for builtin derive\n-    pub fn is_builtin_derive(&self, db: &dyn db::AstDatabase) -> Option<InFile<ast::Attr>> {\n+    pub fn is_builtin_derive(&self, db: &dyn db::ExpandDatabase) -> Option<InFile<ast::Attr>> {\n         let macro_file = self.macro_file()?;\n         let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n         let attr = match loc.def.kind {\n@@ -304,7 +304,7 @@ impl HirFileId {\n         Some(attr.with_value(ast::Attr::cast(attr.value.clone())?))\n     }\n \n-    pub fn is_custom_derive(&self, db: &dyn db::AstDatabase) -> bool {\n+    pub fn is_custom_derive(&self, db: &dyn db::ExpandDatabase) -> bool {\n         match self.macro_file() {\n             Some(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n@@ -315,7 +315,7 @@ impl HirFileId {\n     }\n \n     /// Return whether this file is an include macro\n-    pub fn is_include_macro(&self, db: &dyn db::AstDatabase) -> bool {\n+    pub fn is_include_macro(&self, db: &dyn db::ExpandDatabase) -> bool {\n         match self.macro_file() {\n             Some(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n@@ -326,7 +326,7 @@ impl HirFileId {\n     }\n \n     /// Return whether this file is an attr macro\n-    pub fn is_attr_macro(&self, db: &dyn db::AstDatabase) -> bool {\n+    pub fn is_attr_macro(&self, db: &dyn db::ExpandDatabase) -> bool {\n         match self.macro_file() {\n             Some(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n@@ -338,7 +338,7 @@ impl HirFileId {\n \n     /// Return whether this file is the pseudo expansion of the derive attribute.\n     /// See [`crate::builtin_attr_macro::derive_attr_expand`].\n-    pub fn is_derive_attr_pseudo_expansion(&self, db: &dyn db::AstDatabase) -> bool {\n+    pub fn is_derive_attr_pseudo_expansion(&self, db: &dyn db::ExpandDatabase) -> bool {\n         match self.macro_file() {\n             Some(macro_file) => {\n                 let loc: MacroCallLoc = db.lookup_intern_macro_call(macro_file.macro_call_id);\n@@ -384,7 +384,7 @@ impl HirFileId {\n impl MacroDefId {\n     pub fn as_lazy_macro(\n         self,\n-        db: &dyn db::AstDatabase,\n+        db: &dyn db::ExpandDatabase,\n         krate: CrateId,\n         kind: MacroCallKind,\n     ) -> MacroCallId {\n@@ -427,7 +427,7 @@ impl MacroCallKind {\n         }\n     }\n \n-    pub fn to_node(&self, db: &dyn db::AstDatabase) -> InFile<SyntaxNode> {\n+    pub fn to_node(&self, db: &dyn db::ExpandDatabase) -> InFile<SyntaxNode> {\n         match self {\n             MacroCallKind::FnLike { ast_id, .. } => {\n                 ast_id.with_value(ast_id.to_node(db).syntax().clone())\n@@ -465,7 +465,7 @@ impl MacroCallKind {\n     /// Returns the original file range that best describes the location of this macro call.\n     ///\n     /// Unlike `MacroCallKind::original_call_range`, this also spans the item of attributes and derives.\n-    pub fn original_call_range_with_body(self, db: &dyn db::AstDatabase) -> FileRange {\n+    pub fn original_call_range_with_body(self, db: &dyn db::ExpandDatabase) -> FileRange {\n         let mut kind = self;\n         let file_id = loop {\n             match kind.file_id().repr() {\n@@ -490,7 +490,7 @@ impl MacroCallKind {\n     /// Here we try to roughly match what rustc does to improve diagnostics: fn-like macros\n     /// get the whole `ast::MacroCall`, attribute macros get the attribute's range, and derives\n     /// get only the specific derive that is being referred to.\n-    pub fn original_call_range(self, db: &dyn db::AstDatabase) -> FileRange {\n+    pub fn original_call_range(self, db: &dyn db::ExpandDatabase) -> FileRange {\n         let mut kind = self;\n         let file_id = loop {\n             match kind.file_id().repr() {\n@@ -529,7 +529,7 @@ impl MacroCallKind {\n         FileRange { range, file_id }\n     }\n \n-    fn arg(&self, db: &dyn db::AstDatabase) -> Option<SyntaxNode> {\n+    fn arg(&self, db: &dyn db::ExpandDatabase) -> Option<SyntaxNode> {\n         match self {\n             MacroCallKind::FnLike { ast_id, .. } => {\n                 Some(ast_id.to_node(db).token_tree()?.syntax().clone())\n@@ -597,7 +597,7 @@ impl ExpansionInfo {\n     ///     Both of these only have one simple call site input so no special handling is required here.\n     pub fn map_token_down(\n         &self,\n-        db: &dyn db::AstDatabase,\n+        db: &dyn db::ExpandDatabase,\n         item: Option<ast::Item>,\n         token: InFile<&SyntaxToken>,\n     ) -> Option<impl Iterator<Item = InFile<SyntaxToken>> + '_> {\n@@ -666,7 +666,7 @@ impl ExpansionInfo {\n     /// Map a token up out of the expansion it resides in into the arguments of the macro call of the expansion.\n     pub fn map_token_up(\n         &self,\n-        db: &dyn db::AstDatabase,\n+        db: &dyn db::ExpandDatabase,\n         token: InFile<&SyntaxToken>,\n     ) -> Option<(InFile<SyntaxToken>, Origin)> {\n         // Fetch the id through its text range,\n@@ -717,7 +717,7 @@ impl ExpansionInfo {\n pub type AstId<N> = InFile<FileAstId<N>>;\n \n impl<N: AstNode> AstId<N> {\n-    pub fn to_node(&self, db: &dyn db::AstDatabase) -> N {\n+    pub fn to_node(&self, db: &dyn db::ExpandDatabase) -> N {\n         let root = db.parse_or_expand(self.file_id).unwrap();\n         db.ast_id_map(self.file_id).get(self.value).to_node(&root)\n     }\n@@ -753,7 +753,7 @@ impl<T> InFile<T> {\n         self.with_value(&self.value)\n     }\n \n-    pub fn file_syntax(&self, db: &dyn db::AstDatabase) -> SyntaxNode {\n+    pub fn file_syntax(&self, db: &dyn db::ExpandDatabase) -> SyntaxNode {\n         db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")\n     }\n }\n@@ -783,7 +783,7 @@ impl<L, R> InFile<Either<L, R>> {\n impl<'a> InFile<&'a SyntaxNode> {\n     pub fn ancestors_with_macros(\n         self,\n-        db: &dyn db::AstDatabase,\n+        db: &dyn db::ExpandDatabase,\n     ) -> impl Iterator<Item = InFile<SyntaxNode>> + Clone + '_ {\n         iter::successors(Some(self.cloned()), move |node| match node.value.parent() {\n             Some(parent) => Some(node.with_value(parent)),\n@@ -794,7 +794,7 @@ impl<'a> InFile<&'a SyntaxNode> {\n     /// Skips the attributed item that caused the macro invocation we are climbing up\n     pub fn ancestors_with_macros_skip_attr_item(\n         self,\n-        db: &dyn db::AstDatabase,\n+        db: &dyn db::ExpandDatabase,\n     ) -> impl Iterator<Item = InFile<SyntaxNode>> + '_ {\n         let succ = move |node: &InFile<SyntaxNode>| match node.value.parent() {\n             Some(parent) => Some(node.with_value(parent)),\n@@ -816,7 +816,7 @@ impl<'a> InFile<&'a SyntaxNode> {\n     ///\n     /// For attributes and derives, this will point back to the attribute only.\n     /// For the entire item use [`InFile::original_file_range_full`].\n-    pub fn original_file_range(self, db: &dyn db::AstDatabase) -> FileRange {\n+    pub fn original_file_range(self, db: &dyn db::ExpandDatabase) -> FileRange {\n         match self.file_id.repr() {\n             HirFileIdRepr::FileId(file_id) => FileRange { file_id, range: self.value.text_range() },\n             HirFileIdRepr::MacroFile(mac_file) => {\n@@ -831,7 +831,7 @@ impl<'a> InFile<&'a SyntaxNode> {\n     }\n \n     /// Falls back to the macro call range if the node cannot be mapped up fully.\n-    pub fn original_file_range_full(self, db: &dyn db::AstDatabase) -> FileRange {\n+    pub fn original_file_range_full(self, db: &dyn db::ExpandDatabase) -> FileRange {\n         match self.file_id.repr() {\n             HirFileIdRepr::FileId(file_id) => FileRange { file_id, range: self.value.text_range() },\n             HirFileIdRepr::MacroFile(mac_file) => {\n@@ -846,7 +846,7 @@ impl<'a> InFile<&'a SyntaxNode> {\n     }\n \n     /// Attempts to map the syntax node back up its macro calls.\n-    pub fn original_file_range_opt(self, db: &dyn db::AstDatabase) -> Option<FileRange> {\n+    pub fn original_file_range_opt(self, db: &dyn db::ExpandDatabase) -> Option<FileRange> {\n         match ascend_node_border_tokens(db, self) {\n             Some(InFile { file_id, value: (first, last) }) => {\n                 let original_file = file_id.original_file(db);\n@@ -865,7 +865,7 @@ impl<'a> InFile<&'a SyntaxNode> {\n         }\n     }\n \n-    pub fn original_syntax_node(self, db: &dyn db::AstDatabase) -> Option<InFile<SyntaxNode>> {\n+    pub fn original_syntax_node(self, db: &dyn db::ExpandDatabase) -> Option<InFile<SyntaxNode>> {\n         // This kind of upmapping can only be achieved in attribute expanded files,\n         // as we don't have node inputs otherwise and therefore can't find an `N` node in the input\n         if !self.file_id.is_macro() {\n@@ -892,13 +892,13 @@ impl<'a> InFile<&'a SyntaxNode> {\n }\n \n impl InFile<SyntaxToken> {\n-    pub fn upmap(self, db: &dyn db::AstDatabase) -> Option<InFile<SyntaxToken>> {\n+    pub fn upmap(self, db: &dyn db::ExpandDatabase) -> Option<InFile<SyntaxToken>> {\n         let expansion = self.file_id.expansion_info(db)?;\n         expansion.map_token_up(db, self.as_ref()).map(|(it, _)| it)\n     }\n \n     /// Falls back to the macro call range if the node cannot be mapped up fully.\n-    pub fn original_file_range(self, db: &dyn db::AstDatabase) -> FileRange {\n+    pub fn original_file_range(self, db: &dyn db::ExpandDatabase) -> FileRange {\n         match self.file_id.repr() {\n             HirFileIdRepr::FileId(file_id) => FileRange { file_id, range: self.value.text_range() },\n             HirFileIdRepr::MacroFile(mac_file) => {\n@@ -913,7 +913,7 @@ impl InFile<SyntaxToken> {\n     }\n \n     /// Attempts to map the syntax node back up its macro calls.\n-    pub fn original_file_range_opt(self, db: &dyn db::AstDatabase) -> Option<FileRange> {\n+    pub fn original_file_range_opt(self, db: &dyn db::ExpandDatabase) -> Option<FileRange> {\n         match self.file_id.repr() {\n             HirFileIdRepr::FileId(file_id) => {\n                 Some(FileRange { file_id, range: self.value.text_range() })\n@@ -932,7 +932,7 @@ impl InFile<SyntaxToken> {\n \n     pub fn ancestors_with_macros(\n         self,\n-        db: &dyn db::AstDatabase,\n+        db: &dyn db::ExpandDatabase,\n     ) -> impl Iterator<Item = InFile<SyntaxNode>> + '_ {\n         self.value.parent().into_iter().flat_map({\n             let file_id = self.file_id;\n@@ -942,7 +942,7 @@ impl InFile<SyntaxToken> {\n }\n \n fn ascend_node_border_tokens(\n-    db: &dyn db::AstDatabase,\n+    db: &dyn db::ExpandDatabase,\n     InFile { file_id, value: node }: InFile<&SyntaxNode>,\n ) -> Option<InFile<(SyntaxToken, SyntaxToken)>> {\n     let expansion = file_id.expansion_info(db)?;\n@@ -958,7 +958,7 @@ fn ascend_node_border_tokens(\n }\n \n fn ascend_call_token(\n-    db: &dyn db::AstDatabase,\n+    db: &dyn db::ExpandDatabase,\n     expansion: &ExpansionInfo,\n     token: InFile<SyntaxToken>,\n ) -> Option<InFile<SyntaxToken>> {\n@@ -977,7 +977,7 @@ impl<N: AstNode> InFile<N> {\n         self.value.syntax().descendants().filter_map(T::cast).map(move |n| self.with_value(n))\n     }\n \n-    pub fn original_ast_node(self, db: &dyn db::AstDatabase) -> Option<InFile<N>> {\n+    pub fn original_ast_node(self, db: &dyn db::ExpandDatabase) -> Option<InFile<N>> {\n         // This kind of upmapping can only be achieved in attribute expanded files,\n         // as we don't have node inputs otherwise and therefore can't find an `N` node in the input\n         if !self.file_id.is_macro() {"}, {"sha": "e9393cc89aedf021ad3a6533fd79d0be6537fc7e", "filename": "crates/hir-expand/src/mod_path.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -6,7 +6,7 @@ use std::{\n };\n \n use crate::{\n-    db::AstDatabase,\n+    db::ExpandDatabase,\n     hygiene::Hygiene,\n     name::{known, Name},\n };\n@@ -37,7 +37,11 @@ pub enum PathKind {\n }\n \n impl ModPath {\n-    pub fn from_src(db: &dyn AstDatabase, path: ast::Path, hygiene: &Hygiene) -> Option<ModPath> {\n+    pub fn from_src(\n+        db: &dyn ExpandDatabase,\n+        path: ast::Path,\n+        hygiene: &Hygiene,\n+    ) -> Option<ModPath> {\n         convert_path(db, None, path, hygiene)\n     }\n \n@@ -162,7 +166,7 @@ impl From<Name> for ModPath {\n }\n \n fn convert_path(\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     prefix: Option<ModPath>,\n     path: ast::Path,\n     hygiene: &Hygiene,"}, {"sha": "eb0af7c28c1dffd6a4b9af2f208fe075c7cd70b7", "filename": "crates/hir-expand/src/proc_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -3,7 +3,7 @@\n use base_db::{CrateId, ProcMacroExpansionError, ProcMacroId, ProcMacroKind};\n use stdx::never;\n \n-use crate::{db::AstDatabase, tt, ExpandError, ExpandResult};\n+use crate::{db::ExpandDatabase, tt, ExpandError, ExpandResult};\n \n #[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]\n pub struct ProcMacroExpander {\n@@ -27,7 +27,7 @@ impl ProcMacroExpander {\n \n     pub fn expand(\n         self,\n-        db: &dyn AstDatabase,\n+        db: &dyn ExpandDatabase,\n         calling_crate: CrateId,\n         tt: &tt::Subtree,\n         attr_arg: Option<&tt::Subtree>,"}, {"sha": "8c48331b94b53769721fe7688813545aecd0a8b3", "filename": "crates/hir-ty/src/test_db.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -9,15 +9,15 @@ use base_db::{\n     salsa, AnchoredPath, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase, Upcast,\n };\n use hir_def::{db::DefDatabase, ModuleId};\n-use hir_expand::db::AstDatabase;\n+use hir_expand::db::ExpandDatabase;\n use stdx::hash::{NoHashHashMap, NoHashHashSet};\n use syntax::TextRange;\n use test_utils::extract_annotations;\n \n #[salsa::database(\n     base_db::SourceDatabaseExtStorage,\n     base_db::SourceDatabaseStorage,\n-    hir_expand::db::AstDatabaseStorage,\n+    hir_expand::db::ExpandDatabaseStorage,\n     hir_def::db::InternDatabaseStorage,\n     hir_def::db::DefDatabaseStorage,\n     crate::db::HirDatabaseStorage\n@@ -41,8 +41,8 @@ impl fmt::Debug for TestDB {\n     }\n }\n \n-impl Upcast<dyn AstDatabase> for TestDB {\n-    fn upcast(&self) -> &(dyn AstDatabase + 'static) {\n+impl Upcast<dyn ExpandDatabase> for TestDB {\n+    fn upcast(&self) -> &(dyn ExpandDatabase + 'static) {\n         &*self\n     }\n }"}, {"sha": "83d31f002a1dcae6b336cac179ac8e97eddf16cf", "filename": "crates/hir-ty/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir-ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -23,7 +23,7 @@ use hir_def::{\n     src::HasSource,\n     AssocItemId, DefWithBodyId, HasModule, LocalModuleId, Lookup, ModuleDefId,\n };\n-use hir_expand::{db::AstDatabase, InFile};\n+use hir_expand::{db::ExpandDatabase, InFile};\n use once_cell::race::OnceBool;\n use stdx::format_to;\n use syntax::{"}, {"sha": "0935b5ea51945de6557d07af7a7aff41e1974151", "filename": "crates/hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdb.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -5,7 +5,7 @@\n //! But we need this for at least LRU caching at the query level.\n pub use hir_def::db::*;\n pub use hir_expand::db::{\n-    AstDatabase, AstDatabaseStorage, AstIdMapQuery, ExpandProcMacroQuery, HygieneFrameQuery,\n+    AstIdMapQuery, ExpandDatabase, ExpandDatabaseStorage, ExpandProcMacroQuery, HygieneFrameQuery,\n     InternMacroCallQuery, MacroArgTextQuery, MacroDefQuery, MacroExpandErrorQuery,\n     MacroExpandQuery, ParseMacroExpansionQuery,\n };"}, {"sha": "ab39542f9fa4be6d6c0bd39d4abd4b3489769649", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -15,7 +15,7 @@ use hir_def::{\n     AsMacroCall, DefWithBodyId, FieldId, FunctionId, MacroId, TraitId, VariantId,\n };\n use hir_expand::{\n-    db::AstDatabase,\n+    db::ExpandDatabase,\n     name::{known, AsName},\n     ExpansionInfo, MacroCallId,\n };\n@@ -1536,7 +1536,7 @@ impl<'db> SemanticsImpl<'db> {\n \n fn macro_call_to_macro_id(\n     ctx: &mut SourceToDefCtx<'_, '_>,\n-    db: &dyn AstDatabase,\n+    db: &dyn ExpandDatabase,\n     macro_call_id: MacroCallId,\n ) -> Option<MacroId> {\n     let loc = db.lookup_intern_macro_call(macro_call_id);"}, {"sha": "0768389281ca303826e574c430cf1d5a9e584158", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -1027,7 +1027,7 @@ fn next_space_for_fn_after_call_site(expr: ast::CallableExpr) -> Option<Generate\n }\n \n fn next_space_for_fn_in_module(\n-    db: &dyn hir::db::AstDatabase,\n+    db: &dyn hir::db::ExpandDatabase,\n     module_source: &hir::InFile<hir::ModuleSource>,\n ) -> Option<(FileId, GeneratedFunctionTarget)> {\n     let file = module_source.file_id.original_file(db);"}, {"sha": "ea1d9cc4919d37648b94df09f628eadc08dacc48", "filename": "crates/ide-db/src/apply_change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-db%2Fsrc%2Fapply_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-db%2Fsrc%2Fapply_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fapply_change.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -71,7 +71,7 @@ impl RootDatabase {\n             base_db::SourceRootQuery\n             base_db::SourceRootCratesQuery\n \n-            // AstDatabase\n+            // ExpandDatabase\n             hir::db::AstIdMapQuery\n             hir::db::ParseMacroExpansionQuery\n             hir::db::InternMacroCallQuery"}, {"sha": "b1df11bf911722433036e1aa9e5c71f831337228", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -50,7 +50,7 @@ use base_db::{\n     AnchoredPath, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase, Upcast,\n };\n use hir::{\n-    db::{AstDatabase, DefDatabase, HirDatabase},\n+    db::{DefDatabase, ExpandDatabase, HirDatabase},\n     symbols::FileSymbolKind,\n };\n use stdx::hash::NoHashHashSet;\n@@ -68,7 +68,7 @@ pub type FxIndexMap<K, V> =\n #[salsa::database(\n     base_db::SourceDatabaseExtStorage,\n     base_db::SourceDatabaseStorage,\n-    hir::db::AstDatabaseStorage,\n+    hir::db::ExpandDatabaseStorage,\n     hir::db::DefDatabaseStorage,\n     hir::db::HirDatabaseStorage,\n     hir::db::InternDatabaseStorage,\n@@ -95,8 +95,8 @@ impl fmt::Debug for RootDatabase {\n     }\n }\n \n-impl Upcast<dyn AstDatabase> for RootDatabase {\n-    fn upcast(&self) -> &(dyn AstDatabase + 'static) {\n+impl Upcast<dyn ExpandDatabase> for RootDatabase {\n+    fn upcast(&self) -> &(dyn ExpandDatabase + 'static) {\n         &*self\n     }\n }"}, {"sha": "db88bf7b9313dad008a423c3f7c134b24b6dde4e", "filename": "crates/ide-diagnostics/src/handlers/incorrect_case.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -1,4 +1,4 @@\n-use hir::{db::AstDatabase, InFile};\n+use hir::{db::ExpandDatabase, InFile};\n use ide_db::{assists::Assist, defs::NameClass};\n use syntax::AstNode;\n "}, {"sha": "5c4327ff93413b17af3ac26c7191c82218f0e8b3", "filename": "crates/ide-diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -1,6 +1,6 @@\n use either::Either;\n use hir::{\n-    db::{AstDatabase, HirDatabase},\n+    db::{ExpandDatabase, HirDatabase},\n     known, AssocItem, HirDisplay, InFile, Type,\n };\n use ide_db::{"}, {"sha": "24c521ed1a8a41827b23726b90046e90a9de39a9", "filename": "crates/ide-diagnostics/src/handlers/no_such_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fno_such_field.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -1,4 +1,4 @@\n-use hir::{db::AstDatabase, HasSource, HirDisplay, Semantics};\n+use hir::{db::ExpandDatabase, HasSource, HirDisplay, Semantics};\n use ide_db::{base_db::FileId, source_change::SourceChange, RootDatabase};\n use syntax::{\n     ast::{self, edit::IndentLevel, make},"}, {"sha": "9b1c65983e615fd18b55d6380dfb090a16484231", "filename": "crates/ide-diagnostics/src/handlers/replace_filter_map_next_with_find_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -1,4 +1,4 @@\n-use hir::{db::AstDatabase, InFile};\n+use hir::{db::ExpandDatabase, InFile};\n use ide_db::source_change::SourceChange;\n use syntax::{\n     ast::{self, HasArgList},"}, {"sha": "4abc25a28fbc040f4130899ae0bcf7f9d8af17da", "filename": "crates/ide-diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -1,5 +1,5 @@\n use either::Either;\n-use hir::{db::AstDatabase, HirDisplay, InFile, Type};\n+use hir::{db::ExpandDatabase, HirDisplay, InFile, Type};\n use ide_db::{famous_defs::FamousDefs, source_change::SourceChange};\n use syntax::{\n     ast::{self, BlockExpr, ExprStmt},"}, {"sha": "cefa74e523e8f13a37d206e18700ff779f9fab8d", "filename": "crates/ide-diagnostics/src/handlers/unresolved_field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_field.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -1,4 +1,4 @@\n-use hir::{db::AstDatabase, HirDisplay, InFile};\n+use hir::{db::ExpandDatabase, HirDisplay, InFile};\n use ide_db::{\n     assists::{Assist, AssistId, AssistKind},\n     base_db::FileRange,"}, {"sha": "f3ec6efa75215c9c132d4935420047057226ed70", "filename": "crates/ide-diagnostics/src/handlers/unresolved_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_method.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -1,4 +1,4 @@\n-use hir::{db::AstDatabase, HirDisplay};\n+use hir::{db::ExpandDatabase, HirDisplay};\n use ide_db::{\n     assists::{Assist, AssistId, AssistKind},\n     base_db::FileRange,"}, {"sha": "94614f11c33497d65733dbf306be3d65f5918ebd", "filename": "crates/ide-diagnostics/src/handlers/unresolved_module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_module.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -1,4 +1,4 @@\n-use hir::db::AstDatabase;\n+use hir::db::ExpandDatabase;\n use ide_db::{assists::Assist, base_db::AnchoredPathBuf, source_change::FileSystemEdit};\n use itertools::Itertools;\n use syntax::AstNode;"}, {"sha": "8187b1ba4e9de59d09b583fbfd02acee9948e074", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb9ee3b6a56764e589ff8a2b713064439cd76ad/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=9fb9ee3b6a56764e589ff8a2b713064439cd76ad", "patch": "@@ -7,7 +7,7 @@ use std::{\n };\n \n use hir::{\n-    db::{AstDatabase, DefDatabase, HirDatabase},\n+    db::{DefDatabase, ExpandDatabase, HirDatabase},\n     AssocItem, Crate, Function, HasSource, HirDisplay, ModuleDef,\n };\n use hir_def::{"}]}