{"sha": "0a4d43379ead9ca3014ba71bb68b0db08e7e7e94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNGQ0MzM3OWVhZDljYTMwMTRiYTcxYmI2OGIwZGIwOGU3ZTdlOTQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-29T22:27:01Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-29T23:24:03Z"}, "message": "rt: Move to a custom alignof since __alignof__ returns the \"preferred\" alignment rather than the one that gets used in structs", "tree": {"sha": "db8cd2451dc58ce9cd1dd1677610321f7afca799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db8cd2451dc58ce9cd1dd1677610321f7afca799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a4d43379ead9ca3014ba71bb68b0db08e7e7e94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4d43379ead9ca3014ba71bb68b0db08e7e7e94", "html_url": "https://github.com/rust-lang/rust/commit/0a4d43379ead9ca3014ba71bb68b0db08e7e7e94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a4d43379ead9ca3014ba71bb68b0db08e7e7e94/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b16a9a984a23ec607ec652286df8bd60ada83047", "url": "https://api.github.com/repos/rust-lang/rust/commits/b16a9a984a23ec607ec652286df8bd60ada83047", "html_url": "https://github.com/rust-lang/rust/commit/b16a9a984a23ec607ec652286df8bd60ada83047"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "e80512b92a0192f999e282a93adfd93b42463a99", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a4d43379ead9ca3014ba71bb68b0db08e7e7e94/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0a4d43379ead9ca3014ba71bb68b0db08e7e7e94/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=0a4d43379ead9ca3014ba71bb68b0db08e7e7e94", "patch": "@@ -199,7 +199,7 @@ size_of::compute_tag_size(tag_info &tinfo) {\n             tinfo.tag_sa.set(1, 1);\n     } else {\n         // Add in space for the tag.\n-        tinfo.tag_sa.add(sizeof(uint32_t), ALIGNOF(uint32_t));\n+        tinfo.tag_sa.add(sizeof(uint32_t), alignof<uint32_t>());\n     }\n }\n \n@@ -259,7 +259,7 @@ class cmp : public data<cmp,ptr_pair> {\n     }\n \n     inline void cmp_two_pointers(bool align) {\n-        if (align) dp = align_to(dp, ALIGNOF(uint8_t *) * 2);\n+        if (align) dp = align_to(dp, alignof<uint8_t *>() * 2);\n         data_pair<uint8_t *> fst = bump_dp<uint8_t *>(dp);\n         data_pair<uint8_t *> snd = bump_dp<uint8_t *>(dp);\n         cmp_number(fst);\n@@ -268,7 +268,7 @@ class cmp : public data<cmp,ptr_pair> {\n     }\n \n     inline void cmp_pointer(bool align) {\n-        if (align) dp = align_to(dp, ALIGNOF(uint8_t *));\n+        if (align) dp = align_to(dp, alignof<uint8_t *>());\n         cmp_number(bump_dp<uint8_t *>(dp));\n     }\n "}, {"sha": "789d54c71fa90e845643cc721679506335328b20", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0a4d43379ead9ca3014ba71bb68b0db08e7e7e94/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/0a4d43379ead9ca3014ba71bb68b0db08e7e7e94/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=0a4d43379ead9ca3014ba71bb68b0db08e7e7e94", "patch": "@@ -6,12 +6,6 @@\n \n #include \"rust_internal.h\"\n \n-#ifdef _MSC_VER\n-#define ALIGNOF     __alignof\n-#else\n-#define ALIGNOF     __alignof__\n-#endif\n-\n #define ARENA_SIZE          256\n \n #define DPRINT(fmt,...)     fprintf(stderr, fmt, ##__VA_ARGS__)\n@@ -86,6 +80,30 @@ class arena {\n };\n \n \n+// Alignment inquiries\n+//\n+// We can't directly use __alignof__ everywhere because that returns the\n+// preferred alignment of the type, which is different from the ABI-mandated\n+// alignment of the type in some cases (e.g. doubles on x86). The latter is\n+// what actually gets used for struct elements.\n+\n+template<typename T>\n+inline size_t\n+alignof() {\n+#ifdef _MSC_VER\n+    return __alignof(T);\n+#else\n+    return __alignof__(T);\n+#endif\n+}\n+\n+template<>\n+inline size_t\n+alignof<double>() {\n+    return 4;\n+}\n+\n+\n // Utility classes\n \n struct size_align {\n@@ -546,7 +564,7 @@ class size_of : public ctxt<size_of> {\n     }\n \n     template<typename T>\n-    void walk_number(bool align) { sa.set(sizeof(T), ALIGNOF(T)); }\n+    void walk_number(bool align) { sa.set(sizeof(T), alignof<T>()); }\n \n     void compute_tag_size(tag_info &tinfo);\n \n@@ -709,7 +727,7 @@ namespace shape {\n // for methods that actually manipulate the data involved.\n \n #define DATA_SIMPLE(ty, call) \\\n-    if (align) dp = align_to(dp, sizeof(ty)); \\\n+    if (align) dp = align_to(dp, alignof<ty>()); \\\n     U end_dp = dp + sizeof(ty); \\\n     static_cast<T *>(this)->call; \\\n     dp = end_dp;\n@@ -847,7 +865,7 @@ data<T,U>::walk_tag(bool align, tag_info &tinfo) {\n     size_of::compute_tag_size(*this, tinfo);\n \n     if (tinfo.variant_count > 1 && align)\n-        dp = align_to(dp, ALIGNOF(uint32_t));\n+        dp = align_to(dp, alignof<uint32_t>());\n \n     U end_dp = dp + tinfo.tag_sa.size;\n "}]}