{"sha": "bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "node_id": "C_kwDOAAsO6NoAKGJjYThiNGRjMzJlYzIwZjlhNGUwY2E1NWY1NGU1YjJhNTMxOTM2ZmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-28T13:12:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-28T13:12:59Z"}, "message": "Auto merge of #107408 - matthiaskrgr:rollup-b5vz2ow, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #104012 (Improve unexpected close and mismatch delimiter hint in TokenTreesReader)\n - #104252 (Stabilize the const_socketaddr feature)\n - #105524 (Replace libc::{type} with crate::ffi::{type})\n - #107096 (Detect references to non-existant messages in Fluent resources)\n - #107355 (Add regression test for #60755)\n - #107384 (Remove `BOOL_TY_FOR_UNIT_TESTING`)\n - #107385 (Use `FallibleTypeFolder` for `ConstInferUnifier` not `TypeRelation`)\n - #107391 (rustdoc: remove inline javascript from copy-path button)\n - #107398 (Remove `ControlFlow::{BREAK, CONTINUE}`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6c75e784dba00b978875639be89aaf4d844bdc68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c75e784dba00b978875639be89aaf4d844bdc68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "html_url": "https://github.com/rust-lang/rust/commit/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8da51366817317d19be9bd138943eafb30bc987", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8da51366817317d19be9bd138943eafb30bc987", "html_url": "https://github.com/rust-lang/rust/commit/d8da51366817317d19be9bd138943eafb30bc987"}, {"sha": "c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "url": "https://api.github.com/repos/rust-lang/rust/commits/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25", "html_url": "https://github.com/rust-lang/rust/commit/c95707a29bc7fdc4f6ee65d4734b17424fdc7d25"}], "stats": {"total": 869, "additions": 557, "deletions": 312}, "files": [{"sha": "6101b28ab0cdde9a42b69834de91ea4bff2d6198", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_gcc.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_gcc.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_gcc.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_gcc.ftl?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -23,7 +23,7 @@ codegen_gcc_invalid_monomorphization_unsupported_element =\n     invalid monomorphization of `{$name}` intrinsic: unsupported {$name} from `{$in_ty}` with element `{$elem_ty}` to `{$ret_ty}`\n \n codegen_gcc_invalid_monomorphization_invalid_bitmask =\n-    invalid monomorphization of `{$name}` intrinsic: invalid bitmask `{ty}`, expected `u{$expected_int_bits}` or `[u8; {$expected_bytes}]`\n+    invalid monomorphization of `{$name}` intrinsic: invalid bitmask `{$ty}`, expected `u{$expected_int_bits}` or `[u8; {$expected_bytes}]`\n \n codegen_gcc_invalid_monomorphization_simd_shuffle =\n     invalid monomorphization of `{$name}` intrinsic: simd_shuffle index must be an array of `u32`, got `{$ty}`"}, {"sha": "4924105128db6eb1d55afa46efdb612999b7fd5b", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -179,9 +179,9 @@ codegen_ssa_extract_bundled_libs_write_file = failed to write file '{$rlib}': {$\n \n codegen_ssa_unsupported_arch = unsupported arch `{$arch}` for os `{$os}`\n \n-codegen_ssa_apple_sdk_error_sdk_path = failed to get {$sdk_name} SDK path: {error}\n+codegen_ssa_apple_sdk_error_sdk_path = failed to get {$sdk_name} SDK path: {$error}\n \n-codegen_ssa_read_file = failed to read file: {message}\n+codegen_ssa_read_file = failed to read file: {$message}\n \n codegen_ssa_unsupported_link_self_contained = option `-C link-self-contained` is not supported on this target\n "}, {"sha": "a567b6acdbeeb2dc802175bea078a979d6795a7c", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 26, "deletions": 88, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -37,7 +37,10 @@ use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, InferConst, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{\n+    self, FallibleTypeFolder, InferConst, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n+    TypeVisitable,\n+};\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -140,8 +143,6 @@ impl<'tcx> InferCtxt<'tcx> {\n         let a = self.shallow_resolve(a);\n         let b = self.shallow_resolve(b);\n \n-        let a_is_expected = relation.a_is_expected();\n-\n         match (a.kind(), b.kind()) {\n             (\n                 ty::ConstKind::Infer(InferConst::Var(a_vid)),\n@@ -158,11 +159,11 @@ impl<'tcx> InferCtxt<'tcx> {\n             }\n \n             (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {\n-                return self.unify_const_variable(relation.param_env(), vid, b, a_is_expected);\n+                return self.unify_const_variable(vid, b);\n             }\n \n             (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {\n-                return self.unify_const_variable(relation.param_env(), vid, a, !a_is_expected);\n+                return self.unify_const_variable(vid, a);\n             }\n             (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {\n                 // FIXME(#59490): Need to remove the leak check to accommodate\n@@ -223,10 +224,8 @@ impl<'tcx> InferCtxt<'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn unify_const_variable(\n         &self,\n-        param_env: ty::ParamEnv<'tcx>,\n         target_vid: ty::ConstVid<'tcx>,\n         ct: ty::Const<'tcx>,\n-        vid_is_expected: bool,\n     ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n         let (for_universe, span) = {\n             let mut inner = self.inner.borrow_mut();\n@@ -239,8 +238,12 @@ impl<'tcx> InferCtxt<'tcx> {\n                 ConstVariableValue::Unknown { universe } => (universe, var_value.origin.span),\n             }\n         };\n-        let value = ConstInferUnifier { infcx: self, span, param_env, for_universe, target_vid }\n-            .relate(ct, ct)?;\n+        let value = ct.try_fold_with(&mut ConstInferUnifier {\n+            infcx: self,\n+            span,\n+            for_universe,\n+            target_vid,\n+        })?;\n \n         self.inner.borrow_mut().const_unification_table().union_value(\n             target_vid,\n@@ -800,8 +803,6 @@ struct ConstInferUnifier<'cx, 'tcx> {\n \n     span: Span,\n \n-    param_env: ty::ParamEnv<'tcx>,\n-\n     for_universe: ty::UniverseIndex,\n \n     /// The vid of the const variable that is in the process of being\n@@ -810,69 +811,23 @@ struct ConstInferUnifier<'cx, 'tcx> {\n     target_vid: ty::ConstVid<'tcx>,\n }\n \n-// We use `TypeRelation` here to propagate `RelateResult` upwards.\n-//\n-// Both inputs are expected to be the same.\n-impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.infcx.tcx\n-    }\n-\n-    fn intercrate(&self) -> bool {\n-        assert!(!self.infcx.intercrate);\n-        false\n-    }\n-\n-    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-        self.param_env\n-    }\n-\n-    fn tag(&self) -> &'static str {\n-        \"ConstInferUnifier\"\n-    }\n-\n-    fn a_is_expected(&self) -> bool {\n-        true\n-    }\n-\n-    fn mark_ambiguous(&mut self) {\n-        bug!()\n-    }\n-\n-    fn relate_with_variance<T: Relate<'tcx>>(\n-        &mut self,\n-        _variance: ty::Variance,\n-        _info: ty::VarianceDiagInfo<'tcx>,\n-        a: T,\n-        b: T,\n-    ) -> RelateResult<'tcx, T> {\n-        // We don't care about variance here.\n-        self.relate(a, b)\n-    }\n+impl<'tcx> FallibleTypeFolder<'tcx> for ConstInferUnifier<'_, 'tcx> {\n+    type Error = TypeError<'tcx>;\n \n-    fn binders<T>(\n-        &mut self,\n-        a: ty::Binder<'tcx, T>,\n-        b: ty::Binder<'tcx, T>,\n-    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>\n-    where\n-        T: Relate<'tcx>,\n-    {\n-        Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+        self.infcx.tcx\n     }\n \n     #[instrument(level = \"debug\", skip(self), ret)]\n-    fn tys(&mut self, t: Ty<'tcx>, _t: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n-        debug_assert_eq!(t, _t);\n-\n+    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, TypeError<'tcx>> {\n         match t.kind() {\n             &ty::Infer(ty::TyVar(vid)) => {\n                 let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);\n                 let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);\n                 match probe {\n                     TypeVariableValue::Known { value: u } => {\n                         debug!(\"ConstOccursChecker: known value {:?}\", u);\n-                        self.tys(u, u)\n+                        u.try_fold_with(self)\n                     }\n                     TypeVariableValue::Unknown { universe } => {\n                         if self.for_universe.can_name(universe) {\n@@ -892,16 +847,15 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                 }\n             }\n             ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => Ok(t),\n-            _ => relate::super_relate_tys(self, t, t),\n+            _ => t.try_super_fold_with(self),\n         }\n     }\n \n-    fn regions(\n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    fn try_fold_region(\n         &mut self,\n         r: ty::Region<'tcx>,\n-        _r: ty::Region<'tcx>,\n-    ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n-        debug_assert_eq!(r, _r);\n+    ) -> Result<ty::Region<'tcx>, TypeError<'tcx>> {\n         debug!(\"ConstInferUnifier: r={:?}\", r);\n \n         match *r {\n@@ -930,14 +884,8 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         }\n     }\n \n-    #[instrument(level = \"debug\", skip(self))]\n-    fn consts(\n-        &mut self,\n-        c: ty::Const<'tcx>,\n-        _c: ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n-        debug_assert_eq!(c, _c);\n-\n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, TypeError<'tcx>> {\n         match c.kind() {\n             ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                 // Check if the current unification would end up\n@@ -958,7 +906,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                 let var_value =\n                     self.infcx.inner.borrow_mut().const_unification_table().probe_value(vid);\n                 match var_value.val {\n-                    ConstVariableValue::Known { value: u } => self.consts(u, u),\n+                    ConstVariableValue::Known { value: u } => u.try_fold_with(self),\n                     ConstVariableValue::Unknown { universe } => {\n                         if self.for_universe.can_name(universe) {\n                             Ok(c)\n@@ -977,17 +925,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }) => {\n-                let substs = self.relate_with_variance(\n-                    ty::Variance::Invariant,\n-                    ty::VarianceDiagInfo::default(),\n-                    substs,\n-                    substs,\n-                )?;\n-\n-                Ok(self.tcx().mk_const(ty::UnevaluatedConst { def, substs }, c.ty()))\n-            }\n-            _ => relate::super_relate_consts(self, c, c),\n+            _ => c.try_super_fold_with(self),\n         }\n     }\n }"}, {"sha": "08098c9bb2a85c5a2c37b7a557e7b91fc5f4a2bc", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -4,7 +4,10 @@ use annotate_snippets::{\n };\n use fluent_bundle::{FluentBundle, FluentError, FluentResource};\n use fluent_syntax::{\n-    ast::{Attribute, Entry, Identifier, Message},\n+    ast::{\n+        Attribute, Entry, Expression, Identifier, InlineExpression, Message, Pattern,\n+        PatternElement,\n+    },\n     parser::ParserError,\n };\n use proc_macro::{Diagnostic, Level, Span};\n@@ -185,9 +188,12 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n         };\n \n         let mut constants = TokenStream::new();\n+        let mut messagerefs = Vec::new();\n         for entry in resource.entries() {\n             let span = res.krate.span();\n-            if let Entry::Message(Message { id: Identifier { name }, attributes, .. }) = entry {\n+            if let Entry::Message(Message { id: Identifier { name }, attributes, value, .. }) =\n+                entry\n+            {\n                 let _ = previous_defns.entry(name.to_string()).or_insert(path_span);\n \n                 if name.contains('-') {\n@@ -200,6 +206,18 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n                     .emit();\n                 }\n \n+                if let Some(Pattern { elements }) = value {\n+                    for elt in elements {\n+                        if let PatternElement::Placeable {\n+                            expression:\n+                                Expression::Inline(InlineExpression::MessageReference { id, .. }),\n+                        } = elt\n+                        {\n+                            messagerefs.push((id.name, *name));\n+                        }\n+                    }\n+                }\n+\n                 // Require that the message name starts with the crate name\n                 // `hir_typeck_foo_bar` (in `hir_typeck.ftl`)\n                 // `const_eval_baz` (in `const_eval.ftl`)\n@@ -258,6 +276,18 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n             }\n         }\n \n+        for (mref, name) in messagerefs.into_iter() {\n+            if !previous_defns.contains_key(mref) {\n+                Diagnostic::spanned(\n+                    path_span,\n+                    Level::Error,\n+                    format!(\"referenced message `{mref}` does not exist (in message `{name}`)\"),\n+                )\n+                .help(&format!(\"you may have meant to use a variable reference (`{{${mref}}}`)\"))\n+                .emit();\n+            }\n+        }\n+\n         if let Err(errs) = bundle.add_resource(resource) {\n             for e in errs {\n                 match e {"}, {"sha": "7001f81aa77502fea419f94595502fadbedd26b0", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -31,7 +31,6 @@ pub use generics::*;\n use rustc_ast as ast;\n use rustc_ast::node_id::NodeMap;\n use rustc_attr as attr;\n-use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -453,18 +452,6 @@ pub struct CReaderCacheKey {\n #[rustc_pass_by_value]\n pub struct Ty<'tcx>(Interned<'tcx, WithCachedTypeInfo<TyKind<'tcx>>>);\n \n-impl<'tcx> TyCtxt<'tcx> {\n-    /// A \"bool\" type used in rustc_mir_transform unit tests when we\n-    /// have not spun up a TyCtxt.\n-    pub const BOOL_TY_FOR_UNIT_TESTING: Ty<'tcx> =\n-        Ty(Interned::new_unchecked(&WithCachedTypeInfo {\n-            internee: ty::Bool,\n-            stable_hash: Fingerprint::ZERO,\n-            flags: TypeFlags::empty(),\n-            outer_exclusive_binder: DebruijnIndex::from_usize(0),\n-        }));\n-}\n-\n impl ty::EarlyBoundRegion {\n     /// Does this early bound region have a name? Early bound regions normally\n     /// always have names except when using anonymous lifetimes (`'_`)."}, {"sha": "386bf026bb4afcefccc134408bc16918c3850844", "filename": "compiler/rustc_parse/src/lexer/diagnostics.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fdiagnostics.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,119 @@\n+use super::UnmatchedBrace;\n+use rustc_ast::token::Delimiter;\n+use rustc_errors::Diagnostic;\n+use rustc_span::source_map::SourceMap;\n+use rustc_span::Span;\n+\n+#[derive(Default)]\n+pub struct TokenTreeDiagInfo {\n+    /// Stack of open delimiters and their spans. Used for error message.\n+    pub open_braces: Vec<(Delimiter, Span)>,\n+    pub unmatched_braces: Vec<UnmatchedBrace>,\n+\n+    /// Used only for error recovery when arriving to EOF with mismatched braces.\n+    pub last_unclosed_found_span: Option<Span>,\n+\n+    /// Collect empty block spans that might have been auto-inserted by editors.\n+    pub empty_block_spans: Vec<Span>,\n+\n+    /// Collect the spans of braces (Open, Close). Used only\n+    /// for detecting if blocks are empty and only braces.\n+    pub matching_block_spans: Vec<(Span, Span)>,\n+}\n+\n+pub fn same_identation_level(sm: &SourceMap, open_sp: Span, close_sp: Span) -> bool {\n+    match (sm.span_to_margin(open_sp), sm.span_to_margin(close_sp)) {\n+        (Some(open_padding), Some(close_padding)) => open_padding == close_padding,\n+        _ => false,\n+    }\n+}\n+\n+// When we get a `)` or `]` for `{`, we should emit help message here\n+// it's more friendly compared to report `unmatched error` in later phase\n+pub fn report_missing_open_delim(\n+    err: &mut Diagnostic,\n+    unmatched_braces: &[UnmatchedBrace],\n+) -> bool {\n+    let mut reported_missing_open = false;\n+    for unmatch_brace in unmatched_braces.iter() {\n+        if let Some(delim) = unmatch_brace.found_delim\n+            && matches!(delim, Delimiter::Parenthesis | Delimiter::Bracket)\n+        {\n+            let missed_open = match delim {\n+                Delimiter::Parenthesis => \"(\",\n+                Delimiter::Bracket => \"[\",\n+                _ => unreachable!(),\n+            };\n+            err.span_label(\n+                unmatch_brace.found_span.shrink_to_lo(),\n+                format!(\"missing open `{}` for this delimiter\", missed_open),\n+            );\n+            reported_missing_open = true;\n+        }\n+    }\n+    reported_missing_open\n+}\n+\n+pub fn report_suspicious_mismatch_block(\n+    err: &mut Diagnostic,\n+    diag_info: &TokenTreeDiagInfo,\n+    sm: &SourceMap,\n+    delim: Delimiter,\n+) {\n+    if report_missing_open_delim(err, &diag_info.unmatched_braces) {\n+        return;\n+    }\n+\n+    let mut matched_spans: Vec<(Span, bool)> = diag_info\n+        .matching_block_spans\n+        .iter()\n+        .map(|&(open, close)| (open.with_hi(close.lo()), same_identation_level(sm, open, close)))\n+        .collect();\n+\n+    // sort by `lo`, so the large block spans in the front\n+    matched_spans.sort_by(|a, b| a.0.lo().cmp(&b.0.lo()));\n+\n+    // We use larger block whose identation is well to cover those inner mismatched blocks\n+    // O(N^2) here, but we are on error reporting path, so it is fine\n+    for i in 0..matched_spans.len() {\n+        let (block_span, same_ident) = matched_spans[i];\n+        if same_ident {\n+            for j in i + 1..matched_spans.len() {\n+                let (inner_block, inner_same_ident) = matched_spans[j];\n+                if block_span.contains(inner_block) && !inner_same_ident {\n+                    matched_spans[j] = (inner_block, true);\n+                }\n+            }\n+        }\n+    }\n+\n+    // Find the inner-most span candidate for final report\n+    let candidate_span =\n+        matched_spans.into_iter().rev().find(|&(_, same_ident)| !same_ident).map(|(span, _)| span);\n+\n+    if let Some(block_span) = candidate_span {\n+        err.span_label(block_span.shrink_to_lo(), \"this delimiter might not be properly closed...\");\n+        err.span_label(\n+            block_span.shrink_to_hi(),\n+            \"...as it matches this but it has different indentation\",\n+        );\n+\n+        // If there is a empty block in the mismatched span, note it\n+        if delim == Delimiter::Brace {\n+            for span in diag_info.empty_block_spans.iter() {\n+                if block_span.contains(*span) {\n+                    err.span_label(*span, \"block is empty, you might have not meant to close it\");\n+                    break;\n+                }\n+            }\n+        }\n+    } else {\n+        // If there is no suspicious span, give the last properly closed block may help\n+        if let Some(parent) = diag_info.matching_block_spans.last()\n+            && diag_info.open_braces.last().is_none()\n+            && diag_info.empty_block_spans.iter().all(|&sp| sp != parent.0.to(parent.1)) {\n+                err.span_label(parent.0, \"this opening brace...\");\n+                err.span_label(parent.1, \"...matches this closing brace\");\n+        }\n+    }\n+}"}, {"sha": "e957224a03377805bbfb7fa666d60df3c29cb607", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -17,6 +17,7 @@ use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{edition::Edition, BytePos, Pos, Span};\n \n+mod diagnostics;\n mod tokentrees;\n mod unescape_error_reporting;\n mod unicode_chars;"}, {"sha": "0de8f79112c654033ef64b8efe0441ff0cb152cf", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 42, "deletions": 87, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -1,29 +1,18 @@\n+use super::diagnostics::report_suspicious_mismatch_block;\n+use super::diagnostics::same_identation_level;\n+use super::diagnostics::TokenTreeDiagInfo;\n use super::{StringReader, UnmatchedBrace};\n use rustc_ast::token::{self, Delimiter, Token};\n use rustc_ast::tokenstream::{DelimSpan, Spacing, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust::token_to_string;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{PErr, PResult};\n-use rustc_span::Span;\n \n pub(super) struct TokenTreesReader<'a> {\n     string_reader: StringReader<'a>,\n     /// The \"next\" token, which has been obtained from the `StringReader` but\n     /// not yet handled by the `TokenTreesReader`.\n     token: Token,\n-    /// Stack of open delimiters and their spans. Used for error message.\n-    open_braces: Vec<(Delimiter, Span)>,\n-    unmatched_braces: Vec<UnmatchedBrace>,\n-    /// The type and spans for all braces\n-    ///\n-    /// Used only for error recovery when arriving to EOF with mismatched braces.\n-    matching_delim_spans: Vec<(Delimiter, Span, Span)>,\n-    last_unclosed_found_span: Option<Span>,\n-    /// Collect empty block spans that might have been auto-inserted by editors.\n-    last_delim_empty_block_spans: FxHashMap<Delimiter, Span>,\n-    /// Collect the spans of braces (Open, Close). Used only\n-    /// for detecting if blocks are empty and only braces.\n-    matching_block_spans: Vec<(Span, Span)>,\n+    diag_info: TokenTreeDiagInfo,\n }\n \n impl<'a> TokenTreesReader<'a> {\n@@ -33,15 +22,10 @@ impl<'a> TokenTreesReader<'a> {\n         let mut tt_reader = TokenTreesReader {\n             string_reader,\n             token: Token::dummy(),\n-            open_braces: Vec::new(),\n-            unmatched_braces: Vec::new(),\n-            matching_delim_spans: Vec::new(),\n-            last_unclosed_found_span: None,\n-            last_delim_empty_block_spans: FxHashMap::default(),\n-            matching_block_spans: Vec::new(),\n+            diag_info: TokenTreeDiagInfo::default(),\n         };\n         let res = tt_reader.parse_token_trees(/* is_delimited */ false);\n-        (res, tt_reader.unmatched_braces)\n+        (res, tt_reader.diag_info.unmatched_braces)\n     }\n \n     // Parse a stream of tokens into a list of `TokenTree`s.\n@@ -92,9 +76,9 @@ impl<'a> TokenTreesReader<'a> {\n     fn eof_err(&mut self) -> PErr<'a> {\n         let msg = \"this file contains an unclosed delimiter\";\n         let mut err = self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);\n-        for &(_, sp) in &self.open_braces {\n+        for &(_, sp) in &self.diag_info.open_braces {\n             err.span_label(sp, \"unclosed delimiter\");\n-            self.unmatched_braces.push(UnmatchedBrace {\n+            self.diag_info.unmatched_braces.push(UnmatchedBrace {\n                 expected_delim: Delimiter::Brace,\n                 found_delim: None,\n                 found_span: self.token.span,\n@@ -103,23 +87,13 @@ impl<'a> TokenTreesReader<'a> {\n             });\n         }\n \n-        if let Some((delim, _)) = self.open_braces.last() {\n-            if let Some((_, open_sp, close_sp)) =\n-                self.matching_delim_spans.iter().find(|(d, open_sp, close_sp)| {\n-                    let sm = self.string_reader.sess.source_map();\n-                    if let Some(close_padding) = sm.span_to_margin(*close_sp) {\n-                        if let Some(open_padding) = sm.span_to_margin(*open_sp) {\n-                            return delim == d && close_padding != open_padding;\n-                        }\n-                    }\n-                    false\n-                })\n-            // these are in reverse order as they get inserted on close, but\n-            {\n-                // we want the last open/first close\n-                err.span_label(*open_sp, \"this delimiter might not be properly closed...\");\n-                err.span_label(*close_sp, \"...as it matches this but it has different indentation\");\n-            }\n+        if let Some((delim, _)) = self.diag_info.open_braces.last() {\n+            report_suspicious_mismatch_block(\n+                &mut err,\n+                &self.diag_info,\n+                &self.string_reader.sess.source_map(),\n+                *delim,\n+            )\n         }\n         err\n     }\n@@ -128,7 +102,7 @@ impl<'a> TokenTreesReader<'a> {\n         // The span for beginning of the delimited section\n         let pre_span = self.token.span;\n \n-        self.open_braces.push((open_delim, self.token.span));\n+        self.diag_info.open_braces.push((open_delim, self.token.span));\n \n         // Parse the token trees within the delimiters.\n         // We stop at any delimiter so we can try to recover if the user\n@@ -137,35 +111,29 @@ impl<'a> TokenTreesReader<'a> {\n \n         // Expand to cover the entire delimited token tree\n         let delim_span = DelimSpan::from_pair(pre_span, self.token.span);\n+        let sm = self.string_reader.sess.source_map();\n \n         match self.token.kind {\n             // Correct delimiter.\n             token::CloseDelim(close_delim) if close_delim == open_delim => {\n-                let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();\n+                let (open_brace, open_brace_span) = self.diag_info.open_braces.pop().unwrap();\n                 let close_brace_span = self.token.span;\n \n-                if tts.is_empty() {\n+                if tts.is_empty() && close_delim == Delimiter::Brace {\n                     let empty_block_span = open_brace_span.to(close_brace_span);\n-                    let sm = self.string_reader.sess.source_map();\n                     if !sm.is_multiline(empty_block_span) {\n                         // Only track if the block is in the form of `{}`, otherwise it is\n                         // likely that it was written on purpose.\n-                        self.last_delim_empty_block_spans.insert(open_delim, empty_block_span);\n+                        self.diag_info.empty_block_spans.push(empty_block_span);\n                     }\n                 }\n \n-                //only add braces\n+                // only add braces\n                 if let (Delimiter::Brace, Delimiter::Brace) = (open_brace, open_delim) {\n-                    self.matching_block_spans.push((open_brace_span, close_brace_span));\n+                    // Add all the matching spans, we will sort by span later\n+                    self.diag_info.matching_block_spans.push((open_brace_span, close_brace_span));\n                 }\n \n-                if self.open_braces.is_empty() {\n-                    // Clear up these spans to avoid suggesting them as we've found\n-                    // properly matched delimiters so far for an entire block.\n-                    self.matching_delim_spans.clear();\n-                } else {\n-                    self.matching_delim_spans.push((open_brace, open_brace_span, close_brace_span));\n-                }\n                 // Move past the closing delimiter.\n                 self.token = self.string_reader.next_token().0;\n             }\n@@ -174,36 +142,33 @@ impl<'a> TokenTreesReader<'a> {\n                 let mut unclosed_delimiter = None;\n                 let mut candidate = None;\n \n-                if self.last_unclosed_found_span != Some(self.token.span) {\n+                if self.diag_info.last_unclosed_found_span != Some(self.token.span) {\n                     // do not complain about the same unclosed delimiter multiple times\n-                    self.last_unclosed_found_span = Some(self.token.span);\n+                    self.diag_info.last_unclosed_found_span = Some(self.token.span);\n                     // This is a conservative error: only report the last unclosed\n                     // delimiter. The previous unclosed delimiters could actually be\n                     // closed! The parser just hasn't gotten to them yet.\n-                    if let Some(&(_, sp)) = self.open_braces.last() {\n+                    if let Some(&(_, sp)) = self.diag_info.open_braces.last() {\n                         unclosed_delimiter = Some(sp);\n                     };\n-                    let sm = self.string_reader.sess.source_map();\n-                    if let Some(current_padding) = sm.span_to_margin(self.token.span) {\n-                        for (brace, brace_span) in &self.open_braces {\n-                            if let Some(padding) = sm.span_to_margin(*brace_span) {\n-                                // high likelihood of these two corresponding\n-                                if current_padding == padding && brace == &close_delim {\n-                                    candidate = Some(*brace_span);\n-                                }\n-                            }\n+                    for (brace, brace_span) in &self.diag_info.open_braces {\n+                        if same_identation_level(&sm, self.token.span, *brace_span)\n+                            && brace == &close_delim\n+                        {\n+                            // high likelihood of these two corresponding\n+                            candidate = Some(*brace_span);\n                         }\n                     }\n-                    let (tok, _) = self.open_braces.pop().unwrap();\n-                    self.unmatched_braces.push(UnmatchedBrace {\n+                    let (tok, _) = self.diag_info.open_braces.pop().unwrap();\n+                    self.diag_info.unmatched_braces.push(UnmatchedBrace {\n                         expected_delim: tok,\n                         found_delim: Some(close_delim),\n                         found_span: self.token.span,\n                         unclosed_span: unclosed_delimiter,\n                         candidate_span: candidate,\n                     });\n                 } else {\n-                    self.open_braces.pop();\n+                    self.diag_info.open_braces.pop();\n                 }\n \n                 // If the incorrect delimiter matches an earlier opening\n@@ -213,7 +178,7 @@ impl<'a> TokenTreesReader<'a> {\n                 // fn foo() {\n                 //     bar(baz(\n                 // }  // Incorrect delimiter but matches the earlier `{`\n-                if !self.open_braces.iter().any(|&(b, _)| b == close_delim) {\n+                if !self.diag_info.open_braces.iter().any(|&(b, _)| b == close_delim) {\n                     self.token = self.string_reader.next_token().0;\n                 }\n             }\n@@ -236,22 +201,12 @@ impl<'a> TokenTreesReader<'a> {\n         let mut err =\n             self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);\n \n-        // Braces are added at the end, so the last element is the biggest block\n-        if let Some(parent) = self.matching_block_spans.last() {\n-            if let Some(span) = self.last_delim_empty_block_spans.remove(&delim) {\n-                // Check if the (empty block) is in the last properly closed block\n-                if (parent.0.to(parent.1)).contains(span) {\n-                    err.span_label(span, \"block is empty, you might have not meant to close it\");\n-                } else {\n-                    err.span_label(parent.0, \"this opening brace...\");\n-                    err.span_label(parent.1, \"...matches this closing brace\");\n-                }\n-            } else {\n-                err.span_label(parent.0, \"this opening brace...\");\n-                err.span_label(parent.1, \"...matches this closing brace\");\n-            }\n-        }\n-\n+        report_suspicious_mismatch_block(\n+            &mut err,\n+            &self.diag_info,\n+            &self.string_reader.sess.source_map(),\n+            delim,\n+        );\n         err.span_label(self.token.span, \"unexpected closing delimiter\");\n         err\n     }"}, {"sha": "1961344e8385f18e9aa938369dae9c4c4cdfdd2a", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -93,24 +93,24 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if t.needs_infer() {\n                     if ty::Term::from(t) == self.term {\n-                        ControlFlow::BREAK\n+                        ControlFlow::Break(())\n                     } else {\n                         t.super_visit_with(self)\n                     }\n                 } else {\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n             }\n \n             fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if c.needs_infer() {\n                     if ty::Term::from(c) == self.term {\n-                        ControlFlow::BREAK\n+                        ControlFlow::Break(())\n                     } else {\n                         c.super_visit_with(self)\n                     }\n                 } else {\n-                    ControlFlow::CONTINUE\n+                    ControlFlow::Continue(())\n                 }\n             }\n         }"}, {"sha": "6bdf53f7fc9dd8a0d0a0ced46f5dd9ea2941bf7d", "filename": "library/core/src/iter/adapters/filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -99,7 +99,7 @@ where\n         ) -> impl FnMut((), T) -> ControlFlow<B> + '_ {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n-                None => ControlFlow::CONTINUE,\n+                None => ControlFlow::Continue(()),\n             }\n         }\n "}, {"sha": "b040a0ea9011bb88ae1fc35fe153367be3eec980", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -539,7 +539,7 @@ where\n         #[rustc_inherit_overflow_checks]\n         fn advance<U: Iterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n             match iter.advance_by(n) {\n-                Ok(()) => ControlFlow::BREAK,\n+                Ok(()) => ControlFlow::Break(()),\n                 Err(advanced) => ControlFlow::Continue(n - advanced),\n             }\n         }\n@@ -629,7 +629,7 @@ where\n         #[rustc_inherit_overflow_checks]\n         fn advance<U: DoubleEndedIterator>(n: usize, iter: &mut U) -> ControlFlow<(), usize> {\n             match iter.advance_back_by(n) {\n-                Ok(()) => ControlFlow::BREAK,\n+                Ok(()) => ControlFlow::Break(()),\n                 Err(advanced) => ControlFlow::Continue(n - advanced),\n             }\n         }"}, {"sha": "ed23873cdde7cc7e0ae7232504265d5494b96842", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -352,7 +352,7 @@ pub trait DoubleEndedIterator: Iterator {\n         #[inline]\n         fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {\n             move |(), x| {\n-                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n+                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }\n             }\n         }\n "}, {"sha": "5a0b8594104ee1d1d5e120f5704539205d8bf946", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -2601,10 +2601,10 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {\n             move |(), x| {\n-                if f(x) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }\n+                if f(x) { ControlFlow::Continue(()) } else { ControlFlow::Break(()) }\n             }\n         }\n-        self.try_fold((), check(f)) == ControlFlow::CONTINUE\n+        self.try_fold((), check(f)) == ControlFlow::Continue(())\n     }\n \n     /// Tests if any element of the iterator matches a predicate.\n@@ -2654,11 +2654,11 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {\n             move |(), x| {\n-                if f(x) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n+                if f(x) { ControlFlow::Break(()) } else { ControlFlow::Continue(()) }\n             }\n         }\n \n-        self.try_fold((), check(f)) == ControlFlow::BREAK\n+        self.try_fold((), check(f)) == ControlFlow::Break(())\n     }\n \n     /// Searches for an element of an iterator that satisfies a predicate.\n@@ -2717,7 +2717,7 @@ pub trait Iterator {\n         #[inline]\n         fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {\n             move |(), x| {\n-                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }\n+                if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }\n             }\n         }\n \n@@ -2749,7 +2749,7 @@ pub trait Iterator {\n         fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> ControlFlow<B> {\n             move |(), x| match f(x) {\n                 Some(x) => ControlFlow::Break(x),\n-                None => ControlFlow::CONTINUE,\n+                None => ControlFlow::Continue(()),\n             }\n         }\n \n@@ -2812,7 +2812,7 @@ pub trait Iterator {\n             R: Residual<Option<I>>,\n         {\n             move |(), x| match f(&x).branch() {\n-                ControlFlow::Continue(false) => ControlFlow::CONTINUE,\n+                ControlFlow::Continue(false) => ControlFlow::Continue(()),\n                 ControlFlow::Continue(true) => ControlFlow::Break(Try::from_output(Some(x))),\n                 ControlFlow::Break(r) => ControlFlow::Break(FromResidual::from_residual(r)),\n             }\n@@ -3491,7 +3491,7 @@ pub trait Iterator {\n             F: FnMut(X, Y) -> Ordering,\n         {\n             move |x, y| match cmp(x, y) {\n-                Ordering::Equal => ControlFlow::CONTINUE,\n+                Ordering::Equal => ControlFlow::Continue(()),\n                 non_eq => ControlFlow::Break(non_eq),\n             }\n         }\n@@ -3567,7 +3567,7 @@ pub trait Iterator {\n             F: FnMut(X, Y) -> Option<Ordering>,\n         {\n             move |x, y| match partial_cmp(x, y) {\n-                Some(Ordering::Equal) => ControlFlow::CONTINUE,\n+                Some(Ordering::Equal) => ControlFlow::Continue(()),\n                 non_eq => ControlFlow::Break(non_eq),\n             }\n         }\n@@ -3625,7 +3625,7 @@ pub trait Iterator {\n             F: FnMut(X, Y) -> bool,\n         {\n             move |x, y| {\n-                if eq(x, y) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }\n+                if eq(x, y) { ControlFlow::Continue(()) } else { ControlFlow::Break(()) }\n             }\n         }\n \n@@ -3859,7 +3859,7 @@ pub trait Iterator {\n \n /// Compares two iterators element-wise using the given function.\n ///\n-/// If `ControlFlow::CONTINUE` is returned from the function, the comparison moves on to the next\n+/// If `ControlFlow::Continue(())` is returned from the function, the comparison moves on to the next\n /// elements of both iterators. Returning `ControlFlow::Break(x)` short-circuits the iteration and\n /// returns `ControlFlow::Break(x)`. If one of the iterators runs out of elements,\n /// `ControlFlow::Continue(ord)` is returned where `ord` is the result of comparing the lengths of"}, {"sha": "117706fb4b28d3379bf1d8176a4cf9bbc2832018", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -259,46 +259,3 @@ impl<R: ops::Try> ControlFlow<R, R::Output> {\n         }\n     }\n }\n-\n-impl<B> ControlFlow<B, ()> {\n-    /// It's frequently the case that there's no value needed with `Continue`,\n-    /// so this provides a way to avoid typing `(())`, if you prefer it.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(control_flow_enum)]\n-    /// use std::ops::ControlFlow;\n-    ///\n-    /// let mut partial_sum = 0;\n-    /// let last_used = (1..10).chain(20..25).try_for_each(|x| {\n-    ///     partial_sum += x;\n-    ///     if partial_sum > 100 { ControlFlow::Break(x) }\n-    ///     else { ControlFlow::CONTINUE }\n-    /// });\n-    /// assert_eq!(last_used.break_value(), Some(22));\n-    /// ```\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n-    pub const CONTINUE: Self = ControlFlow::Continue(());\n-}\n-\n-impl<C> ControlFlow<(), C> {\n-    /// APIs like `try_for_each` don't need values with `Break`,\n-    /// so this provides a way to avoid typing `(())`, if you prefer it.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(control_flow_enum)]\n-    /// use std::ops::ControlFlow;\n-    ///\n-    /// let mut partial_sum = 0;\n-    /// (1..10).chain(20..25).try_for_each(|x| {\n-    ///     if partial_sum > 100 { ControlFlow::BREAK }\n-    ///     else { partial_sum += x; ControlFlow::CONTINUE }\n-    /// });\n-    /// assert_eq!(partial_sum, 108);\n-    /// ```\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n-    pub const BREAK: Self = ControlFlow::Break(());\n-}"}, {"sha": "839fdc96632d1eea31a5e621d9ed66a24848d320", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -12,6 +12,8 @@ use crate::time::{Duration, Instant};\n \n use rand::RngCore;\n \n+#[cfg(target_os = \"macos\")]\n+use crate::ffi::{c_char, c_int};\n #[cfg(unix)]\n use crate::os::unix::fs::symlink as symlink_dir;\n #[cfg(unix)]\n@@ -24,8 +26,6 @@ use crate::os::windows::fs::{symlink_dir, symlink_file};\n use crate::sys::fs::symlink_junction;\n #[cfg(target_os = \"macos\")]\n use crate::sys::weak::weak;\n-#[cfg(target_os = \"macos\")]\n-use libc::{c_char, c_int};\n \n macro_rules! check {\n     ($e:expr) => {"}, {"sha": "762f7a7c9a1a0a5907b4c6f39a9bb29b8796f96b", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -358,7 +358,6 @@\n #![feature(const_ip)]\n #![feature(const_ipv4)]\n #![feature(const_ipv6)]\n-#![feature(const_socketaddr)]\n #![feature(thread_local_internals)]\n //\n #![default_lib_allocator]"}, {"sha": "1264bae809b264c21015bcbdc3f0d632dae93c46", "filename": "library/std/src/net/socket_addr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fstd%2Fsrc%2Fnet%2Fsocket_addr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fstd%2Fsrc%2Fnet%2Fsocket_addr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fsocket_addr.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -133,7 +133,7 @@ impl SocketAddr {\n     /// ```\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n     #[must_use]\n-    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn new(ip: IpAddr, port: u16) -> SocketAddr {\n         match ip {\n             IpAddr::V4(a) => SocketAddr::V4(SocketAddrV4::new(a, port)),\n@@ -153,7 +153,7 @@ impl SocketAddr {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n-    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn ip(&self) -> IpAddr {\n         match *self {\n             SocketAddr::V4(ref a) => IpAddr::V4(*a.ip()),\n@@ -194,7 +194,7 @@ impl SocketAddr {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn port(&self) -> u16 {\n         match *self {\n             SocketAddr::V4(ref a) => a.port(),\n@@ -238,7 +238,7 @@ impl SocketAddr {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n-    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn is_ipv4(&self) -> bool {\n         matches!(*self, SocketAddr::V4(_))\n     }\n@@ -260,7 +260,7 @@ impl SocketAddr {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n-    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn is_ipv6(&self) -> bool {\n         matches!(*self, SocketAddr::V6(_))\n     }\n@@ -280,7 +280,7 @@ impl SocketAddrV4 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n-    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn new(ip: Ipv4Addr, port: u16) -> SocketAddrV4 {\n         SocketAddrV4 { ip, port }\n     }\n@@ -297,7 +297,7 @@ impl SocketAddrV4 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn ip(&self) -> &Ipv4Addr {\n         &self.ip\n     }\n@@ -330,7 +330,7 @@ impl SocketAddrV4 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn port(&self) -> u16 {\n         self.port\n     }\n@@ -371,7 +371,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n-    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn new(ip: Ipv6Addr, port: u16, flowinfo: u32, scope_id: u32) -> SocketAddrV6 {\n         SocketAddrV6 { ip, port, flowinfo, scope_id }\n     }\n@@ -388,7 +388,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn ip(&self) -> &Ipv6Addr {\n         &self.ip\n     }\n@@ -421,7 +421,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn port(&self) -> u16 {\n         self.port\n     }\n@@ -464,7 +464,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn flowinfo(&self) -> u32 {\n         self.flowinfo\n     }\n@@ -504,7 +504,7 @@ impl SocketAddrV6 {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    #[rustc_const_stable(feature = \"const_socketaddr\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn scope_id(&self) -> u32 {\n         self.scope_id\n     }"}, {"sha": "cb52ae89b1911e06a59acc2e047dc565ed1c225b", "filename": "library/std/src/personality/emcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fstd%2Fsrc%2Fpersonality%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fstd%2Fsrc%2Fpersonality%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Femcc.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -1,7 +1,7 @@\n //! On Emscripten Rust panics are wrapped in C++ exceptions, so we just forward\n //! to `__gxx_personality_v0` which is provided by Emscripten.\n \n-use libc::c_int;\n+use crate::ffi::c_int;\n use unwind as uw;\n \n // This is required by the compiler to exist (e.g., it's a lang item), but it's"}, {"sha": "41c0fe725a540bff6e99936f30b25ac29ebbb966", "filename": "library/std/src/personality/gcc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -37,7 +37,8 @@\n //! and the last personality routine transfers control to the catch block.\n \n use super::dwarf::eh::{self, EHAction, EHContext};\n-use libc::{c_int, uintptr_t};\n+use crate::ffi::c_int;\n+use libc::uintptr_t;\n use unwind as uw;\n \n // Register ids were lifted from LLVM's TargetLowering::getExceptionPointerRegister()"}, {"sha": "eb9167cd8552bb047fd7ef1a4707fd43b15a6be4", "filename": "library/std/src/sys/windows/thread_parking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parking.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -221,7 +221,7 @@ impl Parker {\n \n fn keyed_event_handle() -> c::HANDLE {\n     const INVALID: c::HANDLE = ptr::invalid_mut(!0);\n-    static HANDLE: AtomicPtr<libc::c_void> = AtomicPtr::new(INVALID);\n+    static HANDLE: AtomicPtr<crate::ffi::c_void> = AtomicPtr::new(INVALID);\n     match HANDLE.load(Relaxed) {\n         INVALID => {\n             let mut handle = c::INVALID_HANDLE_VALUE;"}, {"sha": "2c38dfecf9734d75048cf2c3f2d92cb261ab8e75", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -14,7 +14,7 @@ use crate::sys::net::{cvt, cvt_gai, cvt_r, init, wrlen_t, Socket};\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n use crate::time::Duration;\n \n-use libc::{c_int, c_void};\n+use crate::ffi::{c_int, c_void};\n \n cfg_if::cfg_if! {\n     if #[cfg(any(\n@@ -47,7 +47,7 @@ cfg_if::cfg_if! {\n         target_os = \"dragonfly\", target_os = \"freebsd\",\n         target_os = \"openbsd\", target_os = \"netbsd\",\n         target_os = \"solaris\", target_os = \"illumos\"))] {\n-        use libc::c_uchar;\n+        use crate::ffi::c_uchar;\n         type IpV4MultiCastType = c_uchar;\n     } else {\n         type IpV4MultiCastType = c_int;\n@@ -127,8 +127,8 @@ fn to_ipv6mr_interface(value: u32) -> c_int {\n }\n \n #[cfg(not(target_os = \"android\"))]\n-fn to_ipv6mr_interface(value: u32) -> libc::c_uint {\n-    value as libc::c_uint\n+fn to_ipv6mr_interface(value: u32) -> crate::ffi::c_uint {\n+    value as crate::ffi::c_uint\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "4c8db2c6784a52267c06cfb68db3c2382296624c", "filename": "src/librustdoc/html/length_limit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -61,14 +61,14 @@ impl HtmlWithLimit {\n     /// and returns [`ControlFlow::Break`].\n     pub(super) fn push(&mut self, text: &str) -> ControlFlow<(), ()> {\n         if self.len + text.len() > self.limit {\n-            return ControlFlow::BREAK;\n+            return ControlFlow::Break(());\n         }\n \n         self.flush_queue();\n         write!(self.buf, \"{}\", Escape(text)).unwrap();\n         self.len += text.len();\n \n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     }\n \n     /// Open an HTML tag."}, {"sha": "2185c034890fa3de43c28546d9a6844f465a2d99", "filename": "src/librustdoc/html/length_limit/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -83,7 +83,7 @@ fn past_the_limit() {\n         buf.push(\"word#\")?;\n         buf.push(&n.to_string())?;\n         buf.close_tag();\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     });\n     buf.close_tag();\n     assert_eq!("}, {"sha": "00e3f859bfcb30dd62dd1f1cde00a9ba41a294ea", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -1188,18 +1188,18 @@ fn markdown_summary_with_limit(\n             Event::Start(tag) => match tag {\n                 Tag::Emphasis => buf.open_tag(\"em\"),\n                 Tag::Strong => buf.open_tag(\"strong\"),\n-                Tag::CodeBlock(..) => return ControlFlow::BREAK,\n+                Tag::CodeBlock(..) => return ControlFlow::Break(()),\n                 _ => {}\n             },\n             Event::End(tag) => match tag {\n                 Tag::Emphasis | Tag::Strong => buf.close_tag(),\n-                Tag::Paragraph | Tag::Heading(..) => return ControlFlow::BREAK,\n+                Tag::Paragraph | Tag::Heading(..) => return ControlFlow::Break(()),\n                 _ => {}\n             },\n             Event::HardBreak | Event::SoftBreak => buf.push(\" \")?,\n             _ => {}\n         };\n-        ControlFlow::CONTINUE\n+        ControlFlow::Continue(())\n     });\n \n     (buf.finish(), stopped_early)"}, {"sha": "b9ad8ef70e917af855f4857ed46fbc40c5056194", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -1142,7 +1142,11 @@ function loadCss(cssUrl) {\n (function() {\n     let reset_button_timeout = null;\n \n-    window.copy_path = but => {\n+    const but = document.getElementById(\"copy-path\");\n+    if (!but) {\n+        return;\n+    }\n+    but.onclick = () => {\n         const parent = but.parentElement;\n         const path = [];\n "}, {"sha": "3a1867b7feba3eda5980b0b3d8235fe59c8ab234", "filename": "src/librustdoc/html/templates/print_item.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -6,7 +6,7 @@ <h1> {#- -#}\n         <a href=\"{{component.path|safe}}index.html\">{{component.name}}</a>::<wbr>\n         {%- endfor -%}\n         <a class=\"{{item_type}}\" href=\"#\">{{name}}</a> {#- -#}\n-        <button id=\"copy-path\" onclick=\"copy_path(this)\" title=\"Copy item path to clipboard\"> {#- -#}\n+        <button id=\"copy-path\" title=\"Copy item path to clipboard\"> {#- -#}\n         <img src=\"{{static_root_path|safe}}{{clipboard_svg}}\" {# -#}\n                 width=\"19\" height=\"18\" {# -#}\n                 alt=\"Copy item path\"> {#- -#}"}, {"sha": "64108c882851838286923356613f93490bf5e7a2", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -6,7 +6,6 @@\n #![feature(array_methods)]\n #![feature(assert_matches)]\n #![feature(box_patterns)]\n-#![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(is_terminal)]\n #![feature(let_chains)]"}, {"sha": "d06830397761bd4b9d52997caaaf2c024820c34a", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -1,7 +1,6 @@\n #![feature(array_windows)]\n #![feature(binary_heap_into_iter_sorted)]\n #![feature(box_patterns)]\n-#![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]"}, {"sha": "5e01ed90ff0997402337ae9cba753f55495c2fb4", "filename": "src/tools/clippy/clippy_lints/src/methods/collapsible_str_replace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcollapsible_str_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcollapsible_str_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcollapsible_str_replace.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -54,7 +54,7 @@ fn collect_replace_calls<'tcx>(\n                 from_args.push_front(from);\n                 ControlFlow::Continue(())\n             } else {\n-                ControlFlow::BREAK\n+                ControlFlow::Break(())\n             }\n         } else {\n             ControlFlow::Continue(())"}, {"sha": "a246291f9a9bdab545c0372bc3e2d0d96774580b", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -1,6 +1,5 @@\n #![feature(array_chunks)]\n #![feature(box_patterns)]\n-#![feature(control_flow_enum)]\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(never_type)]"}, {"sha": "d7f466c1976361bb293a087f657f7478c9537ca5", "filename": "src/tools/clippy/clippy_utils/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -327,7 +327,7 @@ fn is_assert_arg(cx: &LateContext<'_>, expr: &Expr<'_>, assert_expn: ExpnId) ->\n         } else {\n             match cx.tcx.item_name(macro_call.def_id) {\n                 // `cfg!(debug_assertions)` in `debug_assert!`\n-                sym::cfg => ControlFlow::CONTINUE,\n+                sym::cfg => ControlFlow::Continue(()),\n                 // assert!(other_macro!(..))\n                 _ => ControlFlow::Break(true),\n             }"}, {"sha": "5836eb73bd94c30e2a833250ddd538689a53b7ff", "filename": "src/tools/clippy/clippy_utils/src/mir/possible_borrower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -140,7 +140,7 @@ impl TypeVisitor<'_> for ContainsRegion {\n     type BreakTy = ();\n \n     fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<Self::BreakTy> {\n-        ControlFlow::BREAK\n+        ControlFlow::Break(())\n     }\n }\n "}, {"sha": "0cd8229b23010923dd646848aa61b859014a1c6d", "filename": "tests/ui-fulldeps/fluent-messages/missing-message-ref.ftl", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message-ref.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message-ref.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message-ref.ftl?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1 @@\n+missing_message_ref = {message}"}, {"sha": "74303e97dba947c5b9b1e4605c3566eb865f9eb8", "filename": "tests/ui-fulldeps/fluent-messages/test.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -96,3 +96,12 @@ mod missing_crate_name {\n \n     use self::fluent_generated::{DEFAULT_LOCALE_RESOURCES, test_crate_foo, with_hyphens};\n }\n+\n+mod missing_message_ref {\n+    use super::fluent_messages;\n+\n+    fluent_messages! {\n+        missing => \"./missing-message-ref.ftl\"\n+//~^ ERROR referenced message `message` does not exist\n+    }\n+}"}, {"sha": "2631b0a623275a08382774ba415aec60889574f9", "filename": "tests/ui-fulldeps/fluent-messages/test.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -93,6 +93,14 @@ LL |         test_crate => \"./missing-crate-name.ftl\",\n    |\n    = help: replace any '-'s with '_'s\n \n-error: aborting due to 10 previous errors\n+error: referenced message `message` does not exist (in message `missing_message_ref`)\n+  --> $DIR/test.rs:104:20\n+   |\n+LL |         missing => \"./missing-message-ref.ftl\"\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: you may have meant to use a variable reference (`{$message}`)\n+\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0428`."}, {"sha": "54485262a0cc89aabda246fb37d2170b51516d26", "filename": "tests/ui/parser/deli-ident-issue-1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fdeli-ident-issue-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fdeli-ident-issue-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdeli-ident-issue-1.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,24 @@\n+#![feature(let_chains)]\n+trait Demo {}\n+\n+impl dyn Demo {\n+    pub fn report(&self) -> u32 {\n+        let sum = |a: u32,\n+                   b: u32,\n+                   c: u32| {\n+            a + b + c\n+        };\n+        sum(1, 2, 3)\n+    }\n+\n+    fn check(&self, val: Option<u32>, num: Option<u32>) {\n+        if let Some(b) = val\n+        && let Some(c) = num {\n+        && b == c {\n+            //~^ ERROR expected struct\n+            //~| ERROR mismatched types\n+        }\n+    }\n+}\n+\n+fn main() { } //~ ERROR this file contains an unclosed delimiter"}, {"sha": "1119edb199f05e8435047d9133f85060c73e03c1", "filename": "tests/ui/parser/deli-ident-issue-1.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fdeli-ident-issue-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fdeli-ident-issue-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdeli-ident-issue-1.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,37 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/deli-ident-issue-1.rs:24:66\n+   |\n+LL | impl dyn Demo {\n+   |               - unclosed delimiter\n+...\n+LL |         && let Some(c) = num {\n+   |                              - this delimiter might not be properly closed...\n+...\n+LL |     }\n+   |     - ...as it matches this but it has different indentation\n+...\n+LL | fn main() { }\n+   |                                                                  ^\n+\n+error[E0574]: expected struct, variant or union type, found local variable `c`\n+  --> $DIR/deli-ident-issue-1.rs:17:17\n+   |\n+LL |         && b == c {\n+   |                 ^ not a struct, variant or union type\n+\n+error[E0308]: mismatched types\n+  --> $DIR/deli-ident-issue-1.rs:17:9\n+   |\n+LL |       fn check(&self, val: Option<u32>, num: Option<u32>) {\n+   |                                                           - expected `()` because of default return type\n+...\n+LL | /         && b == c {\n+LL | |\n+LL | |\n+LL | |         }\n+   | |_________^ expected `()`, found `bool`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0308, E0574.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "5394760df702642db0ce23baa89db0badbaa3560", "filename": "tests/ui/parser/deli-ident-issue-2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fdeli-ident-issue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fdeli-ident-issue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdeli-ident-issue-2.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    if 1 < 2 {\n+        let _a = vec!]; //~ ERROR mismatched closing delimiter\n+    }\n+} //~ ERROR unexpected closing delimiter\n+\n+fn main() {}"}, {"sha": "c8f59c9d32b5f1b98fb17a553e050398943a92e1", "filename": "tests/ui/parser/deli-ident-issue-2.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fdeli-ident-issue-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fdeli-ident-issue-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fdeli-ident-issue-2.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,19 @@\n+error: unexpected closing delimiter: `}`\n+  --> $DIR/deli-ident-issue-2.rs:5:1\n+   |\n+LL |         let _a = vec!];\n+   |                      - missing open `[` for this delimiter\n+LL |     }\n+LL | }\n+   | ^ unexpected closing delimiter\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/deli-ident-issue-2.rs:2:14\n+   |\n+LL |     if 1 < 2 {\n+   |              ^ unclosed delimiter\n+LL |         let _a = vec!];\n+   |                      ^ mismatched closing delimiter\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "30e7ef467368a0b5b6398a613535b100959845e5", "filename": "tests/ui/parser/issue-68987-unmatch-issue-1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-1.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,12 @@\n+// This file has unexpected closing delimiter,\n+\n+fn func(o: Option<u32>) {\n+    match o {\n+        Some(_x) => {}   // Extra '}'\n+            let _ = if true {};\n+        }\n+        None => {}\n+    }\n+} //~ ERROR unexpected closing delimiter\n+\n+fn main() {}"}, {"sha": "2d873b46193ce2a1c1ede2c265fe711f10f2a513", "filename": "tests/ui/parser/issue-68987-unmatch-issue-1.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-1.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,16 @@\n+error: unexpected closing delimiter: `}`\n+  --> $DIR/issue-68987-unmatch-issue-1.rs:10:1\n+   |\n+LL |     match o {\n+   |             - this delimiter might not be properly closed...\n+LL |         Some(_x) => {}   // Extra '}'\n+   |                     -- block is empty, you might have not meant to close it\n+LL |             let _ = if true {};\n+LL |         }\n+   |         - ...as it matches this but it has different indentation\n+...\n+LL | }\n+   | ^ unexpected closing delimiter\n+\n+error: aborting due to previous error\n+"}, {"sha": "89aaa68ba40955e55b0ad4be22b36919a030d0bc", "filename": "tests/ui/parser/issue-68987-unmatch-issue-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-2.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,14 @@\n+// FIXME: this case need more work to fix\n+// currently the TokenTree matching ')' with '{', which is not user friendly for diagnostics\n+async fn obstest() -> Result<> {\n+    let obs_connect = || -> Result<(), MyError) { //~ ERROR mismatched closing delimiter\n+        async {\n+        }\n+    }\n+\n+    if let Ok(version, scene_list) = obs_connect() {\n+\n+    } else {\n+\n+    }\n+} //~ ERROR unexpected closing delimiter"}, {"sha": "2c08d41a15f1bfe7218561f3db9a0c8913e4f478", "filename": "tests/ui/parser/issue-68987-unmatch-issue-2.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-2.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,19 @@\n+error: unexpected closing delimiter: `}`\n+  --> $DIR/issue-68987-unmatch-issue-2.rs:14:1\n+   |\n+LL |     let obs_connect = || -> Result<(), MyError) {\n+   |                                               - missing open `(` for this delimiter\n+...\n+LL | }\n+   | ^ unexpected closing delimiter\n+\n+error: mismatched closing delimiter: `)`\n+  --> $DIR/issue-68987-unmatch-issue-2.rs:3:32\n+   |\n+LL | async fn obstest() -> Result<> {\n+   |                                ^ unclosed delimiter\n+LL |     let obs_connect = || -> Result<(), MyError) {\n+   |                                               ^ mismatched closing delimiter\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e98df8d7c3c4ee534f2865559c4cf72ea1b23eea", "filename": "tests/ui/parser/issue-68987-unmatch-issue-3.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-3.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,8 @@\n+// the `{` is closed with `)`, there is a missing `(`\n+fn f(i: u32, j: u32) {\n+    let res = String::new();\n+    let mut cnt = i;\n+    while cnt < j {\n+        write!&mut res, \" \"); //~ ERROR mismatched closing delimiter\n+    }\n+} //~ ERROR unexpected closing delimiter"}, {"sha": "a3fc46a1e883ccdc362a1e549f656f5903f98924", "filename": "tests/ui/parser/issue-68987-unmatch-issue-3.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue-3.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,19 @@\n+error: unexpected closing delimiter: `}`\n+  --> $DIR/issue-68987-unmatch-issue-3.rs:8:1\n+   |\n+LL |         write!&mut res, \" \");\n+   |                            - missing open `(` for this delimiter\n+LL |     }\n+LL | }\n+   | ^ unexpected closing delimiter\n+\n+error: mismatched closing delimiter: `)`\n+  --> $DIR/issue-68987-unmatch-issue-3.rs:5:19\n+   |\n+LL |     while cnt < j {\n+   |                   ^ unclosed delimiter\n+LL |         write!&mut res, \" \");\n+   |                            ^ mismatched closing delimiter\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5a3620bf24bd4bbf23eb734793a45ed26e1c8014", "filename": "tests/ui/parser/issue-68987-unmatch-issue.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,12 @@\n+// This file has unexpected closing delimiter,\n+\n+fn func(o: Option<u32>) {\n+    match o {\n+        Some(_x) =>   // Missing '{'\n+            let _ = if true {};\n+        }\n+        None => {}\n+    }\n+} //~ ERROR unexpected closing delimiter\n+\n+fn main() {}"}, {"sha": "cabd133242f609c0d98aac91e8d34dae0ba799b0", "filename": "tests/ui/parser/issue-68987-unmatch-issue.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-68987-unmatch-issue.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,16 @@\n+error: unexpected closing delimiter: `}`\n+  --> $DIR/issue-68987-unmatch-issue.rs:10:1\n+   |\n+LL |     match o {\n+   |             - this delimiter might not be properly closed...\n+LL |         Some(_x) =>   // Missing '{'\n+LL |             let _ = if true {};\n+   |                             -- block is empty, you might have not meant to close it\n+LL |         }\n+   |         - ...as it matches this but it has different indentation\n+...\n+LL | }\n+   | ^ unexpected closing delimiter\n+\n+error: aborting due to previous error\n+"}, {"sha": "867244b72e8493a0c59974d331c2500ed2e74c17", "filename": "tests/ui/parser/issue-81827.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-81827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissue-81827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-81827.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -2,17 +2,19 @@ error: this file contains an unclosed delimiter\n   --> $DIR/issue-81827.rs:11:27\n    |\n LL | fn r()->i{0|{#[cfg(r(0{]0\n-   |          -  -             ^\n-   |          |  |\n+   |          -  -          -  ^\n+   |          |  |          |\n+   |          |  |          missing open `[` for this delimiter\n    |          |  unclosed delimiter\n    |          unclosed delimiter\n \n error: this file contains an unclosed delimiter\n   --> $DIR/issue-81827.rs:11:27\n    |\n LL | fn r()->i{0|{#[cfg(r(0{]0\n-   |          -  -             ^\n-   |          |  |\n+   |          -  -          -  ^\n+   |          |  |          |\n+   |          |  |          missing open `[` for this delimiter\n    |          |  unclosed delimiter\n    |          unclosed delimiter\n "}, {"sha": "3cb6d75a6754b343c3be2e2ff72e7469038cb7a0", "filename": "tests/ui/parser/issues/issue-62973.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -2,8 +2,10 @@ error: this file contains an unclosed delimiter\n   --> $DIR/issue-62973.rs:8:2\n    |\n LL | fn p() { match s { v, E { [) {) }\n-   |        -         - unclosed delimiter\n-   |        |\n+   |        -         -         -  - missing open `(` for this delimiter\n+   |        |         |         |\n+   |        |         |         missing open `(` for this delimiter\n+   |        |         unclosed delimiter\n    |        unclosed delimiter\n LL |\n LL |\n@@ -13,8 +15,10 @@ error: this file contains an unclosed delimiter\n   --> $DIR/issue-62973.rs:8:2\n    |\n LL | fn p() { match s { v, E { [) {) }\n-   |        -         - unclosed delimiter\n-   |        |\n+   |        -         -         -  - missing open `(` for this delimiter\n+   |        |         |         |\n+   |        |         |         missing open `(` for this delimiter\n+   |        |         unclosed delimiter\n    |        unclosed delimiter\n LL |\n LL |"}, {"sha": "a1f8a77ffa7c6cec978d163dbe15b1489b8341ed", "filename": "tests/ui/parser/issues/issue-63116.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissues%2Fissue-63116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissues%2Fissue-63116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-63116.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -2,8 +2,9 @@ error: this file contains an unclosed delimiter\n   --> $DIR/issue-63116.rs:3:18\n    |\n LL | impl W <s(f;Y(;]\n-   |          -       ^\n-   |          |\n+   |          -     - ^\n+   |          |     |\n+   |          |     missing open `[` for this delimiter\n    |          unclosed delimiter\n \n error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found `;`"}, {"sha": "01fc2c08546479907e03a08b9a8d3751ce7ec444", "filename": "tests/ui/parser/issues/issue-69259.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissues%2Fissue-69259.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissues%2Fissue-69259.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-69259.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,3 @@\n+fn main() {}\n+\n+fn f) {} //~ ERROR unexpected closing delimiter"}, {"sha": "604b7de33194669552e8991e95014e1f5357e5c4", "filename": "tests/ui/parser/issues/issue-69259.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissues%2Fissue-69259.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissues%2Fissue-69259.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-69259.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,8 @@\n+error: unexpected closing delimiter: `)`\n+  --> $DIR/issue-69259.rs:3:5\n+   |\n+LL | fn f) {}\n+   |     ^ unexpected closing delimiter\n+\n+error: aborting due to previous error\n+"}, {"sha": "46cbb056d1d880d798604ed18783d0e59da96856", "filename": "tests/ui/parser/issues/issue-70583-block-is-empty-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissues%2Fissue-70583-block-is-empty-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissues%2Fissue-70583-block-is-empty-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-70583-block-is-empty-1.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -2,10 +2,10 @@ error: unexpected closing delimiter: `}`\n   --> $DIR/issue-70583-block-is-empty-1.rs:20:1\n    |\n LL | fn struct_generic(x: Vec<i32>) {\n-   |                                - this opening brace...\n+   |                                - this delimiter might not be properly closed...\n ...\n LL |     }\n-   |     - ...matches this closing brace\n+   |     - ...as it matches this but it has different indentation\n LL | }\n    | ^ unexpected closing delimiter\n "}, {"sha": "9ae94c701869b8c0effb6031d24b6ce51a6dba2d", "filename": "tests/ui/parser/issues/issue-70583-block-is-empty-2.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissues%2Fissue-70583-block-is-empty-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fissues%2Fissue-70583-block-is-empty-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-70583-block-is-empty-2.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -1,8 +1,12 @@\n error: unexpected closing delimiter: `}`\n   --> $DIR/issue-70583-block-is-empty-2.rs:14:1\n    |\n+LL |         match self {\n+   |                    - this delimiter might not be properly closed...\n LL |             ErrorHandled::Reported => {}}\n-   |                                       -- block is empty, you might have not meant to close it\n+   |                                       --- ...as it matches this but it has different indentation\n+   |                                       |\n+   |                                       block is empty, you might have not meant to close it\n ...\n LL | }\n    | ^ unexpected closing delimiter"}, {"sha": "689ce1eb6b70462c7f0f0c988efc73c3c2f0b1d5", "filename": "tests/ui/parser/macro-mismatched-delim-paren-brace.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fmacro-mismatched-delim-paren-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Fparser%2Fmacro-mismatched-delim-paren-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmacro-mismatched-delim-paren-brace.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -2,10 +2,10 @@ error: unexpected closing delimiter: `}`\n   --> $DIR/macro-mismatched-delim-paren-brace.rs:5:1\n    |\n LL | fn main() {\n-   |           - this opening brace...\n+   |           - this delimiter might not be properly closed...\n ...\n LL |     }\n-   |     - ...matches this closing brace\n+   |     - ...as it matches this but it has different indentation\n LL | }\n    | ^ unexpected closing delimiter\n "}, {"sha": "6b955a752479f60fca04b9a83a78e91de6c68c5a", "filename": "tests/ui/traits/alias/issue-60755.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Ftraits%2Falias%2Fissue-60755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Ftraits%2Falias%2Fissue-60755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Falias%2Fissue-60755.rs?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![feature(trait_alias)]\n+\n+struct MyStruct {}\n+trait MyFn = Fn(&MyStruct);\n+\n+fn foo(_: impl MyFn) {}\n+\n+fn main() {\n+    foo(|_| {});\n+}"}, {"sha": "78f392c9a8acc87913e01acb5c4dcbdf067391f6", "filename": "tests/ui/typeck/issue-91334.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Ftypeck%2Fissue-91334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc/tests%2Fui%2Ftypeck%2Fissue-91334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-91334.stderr?ref=bca8b4dc32ec20f9a4e0ca55f54e5b2a531936fc", "patch": "@@ -2,17 +2,19 @@ error: this file contains an unclosed delimiter\n   --> $DIR/issue-91334.rs:10:23\n    |\n LL | fn f(){||yield(((){),\n-   |       -       -       ^\n-   |       |       |\n+   |       -       -    -  ^\n+   |       |       |    |\n+   |       |       |    missing open `(` for this delimiter\n    |       |       unclosed delimiter\n    |       unclosed delimiter\n \n error: this file contains an unclosed delimiter\n   --> $DIR/issue-91334.rs:10:23\n    |\n LL | fn f(){||yield(((){),\n-   |       -       -       ^\n-   |       |       |\n+   |       -       -    -  ^\n+   |       |       |    |\n+   |       |       |    missing open `(` for this delimiter\n    |       |       unclosed delimiter\n    |       unclosed delimiter\n "}]}