{"sha": "19e72a24ae43084d8bb2b14ad3ff88391e1148d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZTcyYTI0YWU0MzA4NGQ4YmIyYjE0YWQzZmY4ODM5MWUxMTQ4ZDk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-03-10T20:40:53Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-03-10T20:41:11Z"}, "message": "Move links to the end of each chapter on CONTRIBUTING", "tree": {"sha": "0a8adb3d3b8aedea016298f0a13f7cfbcb8d5601", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a8adb3d3b8aedea016298f0a13f7cfbcb8d5601"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19e72a24ae43084d8bb2b14ad3ff88391e1148d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXmatGLoofN5+9u4rsJhshcDi2qEFAl5n+3UACgkQsJhshcDi\n2qGdaw/+JloMJDwQKElDyYmdcCBv1BJIL0AUnoMmEXgNvhhH+CO4gg6TF4/HnOYa\ne3aq+7iZXjEmaZeeQrp9figoI17xN1k7AA+c0hjpic/0KQKLyB7e+LLzY41HwIRx\nRKjAQJSgzllYpzAZKSkaxl2PePwEQ9i12gkllyy/HuVqt52ft1yg5WYgKCpoJQgG\nc0Bf7oRMgxZ5vFqXENRL93kSlxO0dDTaaxtOQoCesiD0JtiSfLs9J4+6QeYfThBe\nLWVfKtmtyxYt3m5Q0NM1SZmRaHwH/+KBOpCb7ahu0AP2alYUYF+U4b0DBlGFzMqv\nNBiYKMpw+3XiXOQmRuB0mqn7oOsUHDM8tguJ1IQkBAlNkGw2CY1sywT/GxAYbzJa\nMpa3hdrT9MyXAWkFTHMrw3twBwOpor57Go7Hxh62yLtjl3YSN0QnSxtZImt/6JCk\nkz26pFLBAyan8nKMRYyplNc+HtMnwWWMmtdkIeFZlHots04nR+tG04MLSxMwYeqX\n7y4FR8AlUrdM86RPP7KGEEQl+SPFOOgcfTTMQMRqaZ/dtzsU5iPwG2VGVHfxQWh9\nGFHj+z9Y+6GvtQhIgbZjxJUjU+QM+2maAugiFJ6kHVzKUzjbF3WunK8NyloFv3+a\nMdXF5KRaPqYEJwW9Kfgs00DW7fTF2+DVX9Ik9aMMvU1xEEQvlzs=\n=kcfD\n-----END PGP SIGNATURE-----", "payload": "tree 0a8adb3d3b8aedea016298f0a13f7cfbcb8d5601\nparent 459fb53f8d3f3d4a5c6145b9940a04979ee83e71\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1583872853 +0900\ncommitter Yuki Okushi <huyuumi.dev@gmail.com> 1583872871 +0900\n\nMove links to the end of each chapter on CONTRIBUTING\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19e72a24ae43084d8bb2b14ad3ff88391e1148d9", "html_url": "https://github.com/rust-lang/rust/commit/19e72a24ae43084d8bb2b14ad3ff88391e1148d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19e72a24ae43084d8bb2b14ad3ff88391e1148d9/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "459fb53f8d3f3d4a5c6145b9940a04979ee83e71", "url": "https://api.github.com/repos/rust-lang/rust/commits/459fb53f8d3f3d4a5c6145b9940a04979ee83e71", "html_url": "https://github.com/rust-lang/rust/commit/459fb53f8d3f3d4a5c6145b9940a04979ee83e71"}], "stats": {"total": 112, "additions": 59, "deletions": 53}, "files": [{"sha": "b52266ac4f1b86fa45a1ddea322a8a742a7e73a4", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 59, "deletions": 53, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/19e72a24ae43084d8bb2b14ad3ff88391e1148d9/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/19e72a24ae43084d8bb2b14ad3ff88391e1148d9/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=19e72a24ae43084d8bb2b14ad3ff88391e1148d9", "patch": "@@ -8,9 +8,9 @@ something. We appreciate any sort of contributions, and don't want a wall of rul\n \n Clippy welcomes contributions from everyone. There are many ways to contribute to Clippy and the following document\n explains how you can contribute and how to get started.  If you have any questions about contributing or need help with\n-anything, feel free to ask questions on issues or visit the `#clippy` on [Discord](https://discord.gg/rust-lang).\n+anything, feel free to ask questions on issues or visit the `#clippy` on [Discord].\n \n-All contributors are expected to follow the [Rust Code of Conduct](http://www.rust-lang.org/conduct.html).\n+All contributors are expected to follow the [Rust Code of Conduct].\n \n * [Getting started](#getting-started)\n   * [Finding something to fix/improve](#finding-something-to-fiximprove)\n@@ -21,6 +21,9 @@ All contributors are expected to follow the [Rust Code of Conduct](http://www.ru\n * [Bors and Homu](#bors-and-homu)\n * [Contributions](#contributions)\n \n+[Discord]: https://discord.gg/rust-lang\n+[Rust Code of Conduct]: https://www.rust-lang.org/policies/code-of-conduct\n+\n ## Getting started\n \n High level approach:\n@@ -35,51 +38,57 @@ High level approach:\n \n All issues on Clippy are mentored, if you want help with a bug just ask @Manishearth, @llogiq, @mcarton or @oli-obk.\n \n-Some issues are easier than others. The [`good first issue`](https://github.com/rust-lang/rust-clippy/labels/good%20first%20issue)\n-label can be used to find the easy issues. If you want to work on an issue, please leave a comment\n-so that we can assign it to you!\n+Some issues are easier than others. The [`good first issue`] label can be used to find the easy issues.\n+If you want to work on an issue, please leave a comment so that we can assign it to you!\n \n-There are also some abandoned PRs, marked with\n-[`S-inactive-closed`](https://github.com/rust-lang/rust-clippy/pulls?q=is%3Aclosed+label%3AS-inactive-closed).\n+There are also some abandoned PRs, marked with [`S-inactive-closed`].\n Pretty often these PRs are nearly completed and just need some extra steps\n (formatting, addressing review comments, ...) to be merged. If you want to\n complete such a PR, please leave a comment in the PR and open a new one based\n on it.\n \n-Issues marked [`T-AST`](https://github.com/rust-lang/rust-clippy/labels/T-AST) involve simple\n-matching of the syntax tree structure, and are generally easier than\n-[`T-middle`](https://github.com/rust-lang/rust-clippy/labels/T-middle) issues, which involve types\n+Issues marked [`T-AST`] involve simple matching of the syntax tree structure,\n+and are generally easier than [`T-middle`] issues, which involve types\n and resolved paths.\n \n-[`T-AST`](https://github.com/rust-lang/rust-clippy/labels/T-AST) issues will generally need you to match against a\n-predefined syntax structure. To figure out how this syntax structure is encoded in the AST, it is recommended to run\n-`rustc -Z ast-json` on an example of the structure and compare with the [nodes in the AST\n-docs]. Usually the lint will end up to be a nested series of matches and ifs, [like\n-so](https://github.com/rust-lang/rust-clippy/blob/de5ccdfab68a5e37689f3c950ed1532ba9d652a0/src/misc.rs#L34).\n+[`T-AST`] issues will generally need you to match against a predefined syntax structure.\n+To figure out how this syntax structure is encoded in the AST, it is recommended to run\n+`rustc -Z ast-json` on an example of the structure and compare with the [nodes in the AST docs].\n+Usually the lint will end up to be a nested series of matches and ifs, [like so].\n \n-[`E-medium`](https://github.com/rust-lang/rust-clippy/labels/E-medium) issues are generally\n-pretty easy too, though it's recommended you work on an E-easy issue first. They are mostly classified\n-as `E-medium`, since they might be somewhat involved code wise, but not difficult per-se.\n+[`E-medium`] issues are generally pretty easy too, though it's recommended you work on an E-easy issue first.\n+They are mostly classified as [`E-medium`], since they might be somewhat involved code wise,\n+but not difficult per-se.\n \n-[`T-middle`](https://github.com/rust-lang/rust-clippy/labels/T-middle) issues can\n-be more involved and require verifying types. The\n-[`ty`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty) module contains a\n+[`T-middle`] issues can be more involved and require verifying types. The [`ty`] module contains a\n lot of methods that are useful, though one of the most useful would be `expr_ty` (gives the type of\n an AST expression). `match_def_path()` in Clippy's `utils` module can also be useful.\n \n+[`good first issue`]: https://github.com/rust-lang/rust-clippy/labels/good%20first%20issue\n+[`S-inactive-closed`]: https://github.com/rust-lang/rust-clippy/pulls?q=is%3Aclosed+label%3AS-inactive-closed\n+[`T-AST`]: https://github.com/rust-lang/rust-clippy/labels/T-AST\n+[`T-middle`]: https://github.com/rust-lang/rust-clippy/labels/T-middle\n+[`E-medium`]: https://github.com/rust-lang/rust-clippy/labels/E-medium\n+[`ty`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty\n [nodes in the AST docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/\n+[like so]: https://github.com/rust-lang/rust-clippy/blob/de5ccdfab68a5e37689f3c950ed1532ba9d652a0/src/misc.rs#L34\n \n ## Writing code\n \n-Have a look at the [docs for writing lints](doc/adding_lints.md) for more details. [Llogiq's blog post on\n-lints](https://llogiq.github.io/2015/06/04/workflows.html) is also a nice primer to lint-writing, though it does get\n-into advanced stuff and may be a bit outdated.\n+Have a look at the [docs for writing lints][adding_lints] for more details. [Llogiq's blog post on lints]\n+is also a nice primer to lint-writing, though it does get into advanced stuff and may be a bit outdated.\n \n If you want to add a new lint or change existing ones apart from bugfixing, it's\n also a good idea to give the [stability guarantees][rfc_stability] and\n [lint categories][rfc_lint_cats] sections of the [Clippy 1.0 RFC][clippy_rfc] a\n quick read.\n \n+[adding_lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n+[Llogiq's blog post on lints]: https://llogiq.github.io/2015/06/04/workflows.html\n+[clippy_rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md\n+[rfc_stability]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#stability-guarantees\n+[rfc_lint_cats]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories\n+\n ## How Clippy works\n \n [`clippy_lints/src/lib.rs`][lint_crate_entry] imports all the different lint modules and registers in the [`LintStore`].\n@@ -131,13 +140,16 @@ The difference between `EarlyLintPass` and `LateLintPass` is that the methods of\n AST information. The methods of the `LateLintPass` trait are executed after type checking and contain type information\n via the `LateContext` parameter.\n \n-That's why the `else_if_without_else` example uses the `register_early_pass` function. Because the [actual lint\n-logic][else_if_without_else] does not depend on any type information.\n-\n-See also [the adding lints doc].\n+That's why the `else_if_without_else` example uses the `register_early_pass` function. Because the\n+[actual lint logic][else_if_without_else] does not depend on any type information.\n \n-[the adding lints doc]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n+[lint_crate_entry]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/lib.rs\n+[else_if_without_else]: https://github.com/rust-lang/rust-clippy/blob/4253aa7137cb7378acc96133c787e49a345c2b3c/clippy_lints/src/else_if_without_else.rs\n [`LintStore`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LintStore.html\n+[reg_early_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LintStore.html#method.register_early_pass\n+[reg_late_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LintStore.html#method.register_late_pass\n+[early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html\n+[late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n \n ## Fixing build failures caused by Rust\n \n@@ -146,8 +158,8 @@ the times we have to adapt to the changes and only very rarely there's an actual\n caused by Rust updates, can be a good way to learn about Rust internals.\n \n In order to find out why Clippy does not work properly with a new Rust commit, you can use the [rust-toolstate commit\n-history][toolstate_commit_history].  You will then have to look for the last commit that contains\n-`test-pass -> build-fail` or `test-pass` -> `test-fail` for the `clippy-driver` component.\n+history][toolstate_commit_history]. You will then have to look for the last commit that contains\n+`test-pass -> build-fail` or `test-pass -> test-fail` for the `clippy-driver` component.\n [Here][toolstate_commit] is an example.\n \n The commit message contains a link to the PR. The PRs are usually small enough to discover the breaking API change and\n@@ -178,6 +190,12 @@ git commit -m \"Update Clippy\"\n # Open a PR in rust-lang/rust\n ```\n \n+[rustup_component_history]: https://rust-lang.github.io/rustup-components-history\n+[toolstate_commit_history]: https://github.com/rust-lang-nursery/rust-toolstate/commits/master\n+[toolstate_commit]: https://github.com/rust-lang-nursery/rust-toolstate/commit/aad74d8294e198a7cf8ac81a91aebb7f3bbcf727\n+[rtim]: https://github.com/kennytm/rustup-toolchain-install-master\n+[`rust-lang/rust`]: https://github.com/rust-lang/rust\n+\n ## Issue and PR triage\n \n Clippy is following the [Rust triage procedure][triage] for issues and pull\n@@ -202,34 +220,22 @@ You can find the Clippy bors queue [here][homu_queue].\n If you have @bors permissions, you can find an overview of the available\n commands [here][homu_instructions].\n \n+[triage]: https://forge.rust-lang.org/triage-procedure.html\n+[l-crash]: https://github.com/rust-lang/rust-clippy/labels/L-crash%20%3Aboom%3A\n+[l-bug]: https://github.com/rust-lang/rust-clippy/labels/L-bug%20%3Abeetle%3A\n+[homu]: https://github.com/rust-lang/homu\n+[homu_instructions]: https://buildbot2.rust-lang.org/homu/\n+[homu_queue]: https://buildbot2.rust-lang.org/homu/queue/clippy\n+\n ## Contributions\n \n Contributions to Clippy should be made in the form of GitHub pull requests. Each pull request will\n be reviewed by a core contributor (someone with permission to land patches) and either landed in the\n main tree or given feedback for changes that would be required.\n \n-All code in this repository is under the [Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)\n-or the [MIT](https://opensource.org/licenses/MIT) license.\n+All code in this repository is under the [Apache-2.0] or the [MIT] license.\n \n <!-- adapted from https://github.com/servo/servo/blob/master/CONTRIBUTING.md -->\n \n-[lint_crate_entry]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/lib.rs\n-[else_if_without_else]: https://github.com/rust-lang/rust-clippy/blob/4253aa7137cb7378acc96133c787e49a345c2b3c/clippy_lints/src/else_if_without_else.rs\n-[reg_early_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LintStore.html#method.register_early_pass\n-[reg_late_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LintStore.html#method.register_late_pass\n-[early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html\n-[late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n-[toolstate_commit_history]: https://github.com/rust-lang-nursery/rust-toolstate/commits/master\n-[toolstate_commit]: https://github.com/rust-lang-nursery/rust-toolstate/commit/aad74d8294e198a7cf8ac81a91aebb7f3bbcf727\n-[rtim]: https://github.com/kennytm/rustup-toolchain-install-master\n-[rustup_component_history]: https://rust-lang.github.io/rustup-components-history\n-[clippy_rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md\n-[rfc_stability]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#stability-guarantees\n-[rfc_lint_cats]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories\n-[triage]: https://forge.rust-lang.org/triage-procedure.html\n-[l-crash]: https://github.com/rust-lang/rust-clippy/labels/L-crash%20%3Aboom%3A\n-[l-bug]: https://github.com/rust-lang/rust-clippy/labels/L-bug%20%3Abeetle%3A\n-[homu]: https://github.com/rust-lang/homu\n-[homu_instructions]: https://buildbot2.rust-lang.org/homu/\n-[homu_queue]: https://buildbot2.rust-lang.org/homu/queue/clippy\n-[`rust-lang/rust`]: https://github.com/rust-lang/rust\n+[Apache-2.0]: https://www.apache.org/licenses/LICENSE-2.0\n+[MIT]: https://opensource.org/licenses/MIT"}]}