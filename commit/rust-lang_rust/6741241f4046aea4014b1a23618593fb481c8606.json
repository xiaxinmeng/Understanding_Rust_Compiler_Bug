{"sha": "6741241f4046aea4014b1a23618593fb481c8606", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NDEyNDFmNDA0NmFlYTQwMTRiMWEyMzYxODU5M2ZiNDgxYzg2MDY=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-01T21:03:41Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-16T03:10:11Z"}, "message": "path2: Add format helpers .display() and .filename_display()\n\nThese methods return an object that can be formatted using {} to print\ndisplay strings.\n\nPath itself does not implement fmt::Default to avoid accidental usage of\ndisplay strings in incorrect places (e.g. process arguments).", "tree": {"sha": "0e7c17333e81edc80df9e56ea32984ad7d79ee22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e7c17333e81edc80df9e56ea32984ad7d79ee22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6741241f4046aea4014b1a23618593fb481c8606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6741241f4046aea4014b1a23618593fb481c8606", "html_url": "https://github.com/rust-lang/rust/commit/6741241f4046aea4014b1a23618593fb481c8606", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6741241f4046aea4014b1a23618593fb481c8606/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a2735cb11efc997aa02646c13c008a883de6792", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a2735cb11efc997aa02646c13c008a883de6792", "html_url": "https://github.com/rust-lang/rust/commit/3a2735cb11efc997aa02646c13c008a883de6792"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "38a48866e2248e30d9895ecbf89e3958a67bfa49", "filename": "src/libstd/path2/mod.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6741241f4046aea4014b1a23618593fb481c8606/src%2Flibstd%2Fpath2%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6741241f4046aea4014b1a23618593fb481c8606/src%2Flibstd%2Fpath2%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fmod.rs?ref=6741241f4046aea4014b1a23618593fb481c8606", "patch": "@@ -13,6 +13,7 @@\n use container::Container;\n use c_str::CString;\n use clone::Clone;\n+use fmt;\n use iter::Iterator;\n use option::{Option, None, Some};\n use str;\n@@ -185,6 +186,21 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n         s\n     }\n \n+    /// Returns an object that implements `fmt::Default` for printing paths\n+    ///\n+    /// This will print the equivalent of `to_display_str()` when used with a {} format parameter.\n+    fn display<'a>(&'a self) -> Display<'a, Self> {\n+        Display{ path: self }\n+    }\n+\n+    /// Returns an object that implements `fmt::Default` for printing filenames\n+    ///\n+    /// This will print the equivalent of `to_filename_display_str()` when used with a {}\n+    /// format parameter. If there is no filename, nothing will be printed.\n+    fn filename_display<'a>(&'a self) -> FilenameDisplay<'a, Self> {\n+        FilenameDisplay{ path: self }\n+    }\n+\n     /// Returns the directory component of `self`, as a byte vector (with no trailing separator).\n     /// If `self` has no directory component, returns ['.'].\n     fn dirname<'a>(&'a self) -> &'a [u8];\n@@ -661,6 +677,31 @@ pub trait GenericPathUnsafe {\n     }\n }\n \n+/// Helper struct for printing paths with format!()\n+pub struct Display<'self, P> {\n+    priv path: &'self P\n+}\n+/// Helper struct for printing filenames with format!()\n+pub struct FilenameDisplay<'self, P> {\n+    priv path: &'self P\n+}\n+\n+impl<'self, P: GenericPath> fmt::Default for Display<'self, P> {\n+    fn fmt(d: &Display<P>, f: &mut fmt::Formatter) {\n+        do d.path.with_display_str |s| {\n+            f.pad(s)\n+        }\n+    }\n+}\n+\n+impl<'self, P: GenericPath> fmt::Default for FilenameDisplay<'self, P> {\n+    fn fmt(d: &FilenameDisplay<P>, f: &mut fmt::Formatter) {\n+        do d.path.with_filename_display_str |s| {\n+            f.pad(s.unwrap_or(\"\"))\n+        }\n+    }\n+}\n+\n #[inline(always)]\n fn contains_nul(v: &[u8]) -> bool {\n     v.iter().any(|&x| x == 0)"}, {"sha": "4aa2eb531e5c398769395ff414fae29d5c19529a", "filename": "src/libstd/path2/posix.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6741241f4046aea4014b1a23618593fb481c8606/src%2Flibstd%2Fpath2%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6741241f4046aea4014b1a23618593fb481c8606/src%2Flibstd%2Fpath2%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fposix.rs?ref=6741241f4046aea4014b1a23618593fb481c8606", "patch": "@@ -730,6 +730,29 @@ mod tests {\n         assert!(called);\n     }\n \n+    #[test]\n+    fn test_display() {\n+        macro_rules! t(\n+            ($path:expr, $exp:expr, $expf:expr) => (\n+                {\n+                    let path = Path::from_vec($path);\n+                    let f = format!(\"{}\", path.display());\n+                    assert_eq!(f.as_slice(), $exp);\n+                    let f = format!(\"{}\", path.filename_display());\n+                    assert_eq!(f.as_slice(), $expf);\n+                }\n+            )\n+        )\n+\n+        t!(b!(\"foo\"), \"foo\", \"foo\");\n+        t!(b!(\"foo/bar\"), \"foo/bar\", \"bar\");\n+        t!(b!(\"/\"), \"/\", \"\");\n+        t!(b!(\"foo\", 0xff), \"foo\\uFFFD\", \"foo\\uFFFD\");\n+        t!(b!(\"foo\", 0xff, \"/bar\"), \"foo\\uFFFD/bar\", \"bar\");\n+        t!(b!(\"foo/\", 0xff, \"bar\"), \"foo/\\uFFFDbar\", \"\\uFFFDbar\");\n+        t!(b!(0xff, \"foo/bar\", 0xff), \"\\uFFFDfoo/bar\\uFFFD\", \"bar\\uFFFD\");\n+    }\n+\n     #[test]\n     fn test_components() {\n         macro_rules! t("}, {"sha": "7cc7a5610bde5afe99b4216a85c397e62ef2cd48", "filename": "src/libstd/path2/windows.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6741241f4046aea4014b1a23618593fb481c8606/src%2Flibstd%2Fpath2%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6741241f4046aea4014b1a23618593fb481c8606/src%2Flibstd%2Fpath2%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2%2Fwindows.rs?ref=6741241f4046aea4014b1a23618593fb481c8606", "patch": "@@ -1457,6 +1457,25 @@ mod tests {\n         assert!(called);\n     }\n \n+    #[test]\n+    fn test_display() {\n+        macro_rules! t(\n+            ($path:expr, $exp:expr, $expf:expr) => (\n+                {\n+                    let path = Path::from_str($path);\n+                    let f = format!(\"{}\", path.display());\n+                    assert_eq!(f.as_slice(), $exp);\n+                    let f = format!(\"{}\", path.filename_display());\n+                    assert_eq!(f.as_slice(), $expf);\n+                }\n+            )\n+        )\n+\n+        t!(\"foo\", \"foo\", \"foo\");\n+        t!(\"foo\\\\bar\", \"foo\\\\bar\", \"bar\");\n+        t!(\"\\\\\", \"\\\\\", \"\");\n+    }\n+\n     #[test]\n     fn test_components() {\n         macro_rules! t("}]}