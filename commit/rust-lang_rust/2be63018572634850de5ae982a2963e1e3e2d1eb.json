{"sha": "2be63018572634850de5ae982a2963e1e3e2d1eb", "node_id": "C_kwDOAAsO6NoAKDJiZTYzMDE4NTcyNjM0ODUwZGU1YWU5ODJhMjk2M2UxZTNlMmQxZWI", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-08-30T01:01:30Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-13T23:58:53Z"}, "message": "Remove unused body args", "tree": {"sha": "3584194b1fd1dcb41b2b1e7ecbceed52b1809e00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3584194b1fd1dcb41b2b1e7ecbceed52b1809e00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2be63018572634850de5ae982a2963e1e3e2d1eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2be63018572634850de5ae982a2963e1e3e2d1eb", "html_url": "https://github.com/rust-lang/rust/commit/2be63018572634850de5ae982a2963e1e3e2d1eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2be63018572634850de5ae982a2963e1e3e2d1eb/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17cbdfd07178349d0a3cecb8e7dde8f915666ced", "url": "https://api.github.com/repos/rust-lang/rust/commits/17cbdfd07178349d0a3cecb8e7dde8f915666ced", "html_url": "https://github.com/rust-lang/rust/commit/17cbdfd07178349d0a3cecb8e7dde8f915666ced"}], "stats": {"total": 41, "additions": 10, "deletions": 31}, "files": [{"sha": "3b58da11e84a0edf7c20143c4f34714aacfd2c38", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2be63018572634850de5ae982a2963e1e3e2d1eb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be63018572634850de5ae982a2963e1e3e2d1eb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=2be63018572634850de5ae982a2963e1e3e2d1eb", "patch": "@@ -310,13 +310,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         borrow_region: RegionVid,\n         outlived_region: RegionVid,\n     ) -> (ConstraintCategory<'tcx>, bool, Span, Option<RegionName>) {\n-        let BlameConstraint { category, from_closure, cause, variance_info: _ } =\n-            self.regioncx.best_blame_constraint(\n-                &self.body,\n-                borrow_region,\n-                NllRegionVariableOrigin::FreeRegion,\n-                |r| self.regioncx.provides_universal_region(r, borrow_region, outlived_region),\n-            );\n+        let BlameConstraint { category, from_closure, cause, variance_info: _ } = self\n+            .regioncx\n+            .best_blame_constraint(borrow_region, NllRegionVariableOrigin::FreeRegion, |r| {\n+                self.regioncx.provides_universal_region(r, borrow_region, outlived_region)\n+            });\n \n         let outlived_fr_name = self.give_region_a_name(outlived_region);\n "}, {"sha": "e7681222fc1f0d0e40528787e30fc587d589f676", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2be63018572634850de5ae982a2963e1e3e2d1eb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be63018572634850de5ae982a2963e1e3e2d1eb/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=2be63018572634850de5ae982a2963e1e3e2d1eb", "patch": "@@ -234,7 +234,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                     // Find the code to blame for the fact that `longer_fr` outlives `error_fr`.\n                     let (_, cause) = self.regioncx.find_outlives_blame_span(\n-                        &self.body,\n                         longer_fr,\n                         NllRegionVariableOrigin::Placeholder(placeholder),\n                         error_vid,\n@@ -356,7 +355,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         debug!(\"report_region_error(fr={:?}, outlived_fr={:?})\", fr, outlived_fr);\n \n         let BlameConstraint { category, cause, variance_info, from_closure: _ } =\n-            self.regioncx.best_blame_constraint(&self.body, fr, fr_origin, |r| {\n+            self.regioncx.best_blame_constraint(fr, fr_origin, |r| {\n                 self.regioncx.provides_universal_region(r, fr, outlived_fr)\n             });\n "}, {"sha": "d0c896854ade06a32d05a740fe902f52339e9cfd", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2be63018572634850de5ae982a2963e1e3e2d1eb/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be63018572634850de5ae982a2963e1e3e2d1eb/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=2be63018572634850de5ae982a2963e1e3e2d1eb", "patch": "@@ -590,13 +590,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // constraints were too strong, and if so, emit or propagate those errors.\n         if infcx.tcx.sess.opts.unstable_opts.polonius {\n             self.check_polonius_subset_errors(\n-                body,\n                 outlives_requirements.as_mut(),\n                 &mut errors_buffer,\n                 polonius_output.expect(\"Polonius output is unavailable despite `-Z polonius`\"),\n             );\n         } else {\n-            self.check_universal_regions(body, outlives_requirements.as_mut(), &mut errors_buffer);\n+            self.check_universal_regions(outlives_requirements.as_mut(), &mut errors_buffer);\n         }\n \n         if errors_buffer.is_empty() {\n@@ -1409,7 +1408,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// report them as errors.\n     fn check_universal_regions(\n         &self,\n-        body: &Body<'tcx>,\n         mut propagated_outlives_requirements: Option<&mut Vec<ClosureOutlivesRequirement<'tcx>>>,\n         errors_buffer: &mut RegionErrors<'tcx>,\n     ) {\n@@ -1420,7 +1418,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     // they did not grow too large, accumulating any requirements\n                     // for our caller into the `outlives_requirements` vector.\n                     self.check_universal_region(\n-                        body,\n                         fr,\n                         &mut propagated_outlives_requirements,\n                         errors_buffer,\n@@ -1461,7 +1458,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// report them as errors.\n     fn check_polonius_subset_errors(\n         &self,\n-        body: &Body<'tcx>,\n         mut propagated_outlives_requirements: Option<&mut Vec<ClosureOutlivesRequirement<'tcx>>>,\n         errors_buffer: &mut RegionErrors<'tcx>,\n         polonius_output: Rc<PoloniusOutput>,\n@@ -1508,7 +1504,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             let propagated = self.try_propagate_universal_region_error(\n                 *longer_fr,\n                 *shorter_fr,\n-                body,\n                 &mut propagated_outlives_requirements,\n             );\n             if propagated == RegionRelationCheckResult::Error {\n@@ -1548,13 +1543,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ///\n     /// Things that are to be propagated are accumulated into the\n     /// `outlives_requirements` vector.\n-    #[instrument(\n-        skip(self, body, propagated_outlives_requirements, errors_buffer),\n-        level = \"debug\"\n-    )]\n+    #[instrument(skip(self, propagated_outlives_requirements, errors_buffer), level = \"debug\")]\n     fn check_universal_region(\n         &self,\n-        body: &Body<'tcx>,\n         longer_fr: RegionVid,\n         propagated_outlives_requirements: &mut Option<&mut Vec<ClosureOutlivesRequirement<'tcx>>>,\n         errors_buffer: &mut RegionErrors<'tcx>,\n@@ -1577,7 +1568,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             if let RegionRelationCheckResult::Error = self.check_universal_region_relation(\n                 longer_fr,\n                 representative,\n-                body,\n                 propagated_outlives_requirements,\n             ) {\n                 errors_buffer.push(RegionErrorKind::RegionError {\n@@ -1597,7 +1587,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             if let RegionRelationCheckResult::Error = self.check_universal_region_relation(\n                 longer_fr,\n                 shorter_fr,\n-                body,\n                 propagated_outlives_requirements,\n             ) {\n                 // We only report the first region error. Subsequent errors are hidden so as\n@@ -1622,7 +1611,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         longer_fr: RegionVid,\n         shorter_fr: RegionVid,\n-        body: &Body<'tcx>,\n         propagated_outlives_requirements: &mut Option<&mut Vec<ClosureOutlivesRequirement<'tcx>>>,\n     ) -> RegionRelationCheckResult {\n         // If it is known that `fr: o`, carry on.\n@@ -1638,7 +1626,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             self.try_propagate_universal_region_error(\n                 longer_fr,\n                 shorter_fr,\n-                body,\n                 propagated_outlives_requirements,\n             )\n         }\n@@ -1650,7 +1637,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         longer_fr: RegionVid,\n         shorter_fr: RegionVid,\n-        body: &Body<'tcx>,\n         propagated_outlives_requirements: &mut Option<&mut Vec<ClosureOutlivesRequirement<'tcx>>>,\n     ) -> RegionRelationCheckResult {\n         if let Some(propagated_outlives_requirements) = propagated_outlives_requirements {\n@@ -1662,7 +1648,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 debug!(\"try_propagate_universal_region_error: fr_minus={:?}\", fr_minus);\n \n                 let blame_span_category = self.find_outlives_blame_span(\n-                    body,\n                     longer_fr,\n                     NllRegionVariableOrigin::FreeRegion,\n                     shorter_fr,\n@@ -1816,7 +1801,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n     pub(crate) fn retrieve_closure_constraint_info(\n         &self,\n-        _body: &Body<'tcx>,\n         constraint: &OutlivesConstraint<'tcx>,\n     ) -> BlameConstraint<'tcx> {\n         let loc = match constraint.locations {\n@@ -1851,13 +1835,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Finds a good `ObligationCause` to blame for the fact that `fr1` outlives `fr2`.\n     pub(crate) fn find_outlives_blame_span(\n         &self,\n-        body: &Body<'tcx>,\n         fr1: RegionVid,\n         fr1_origin: NllRegionVariableOrigin,\n         fr2: RegionVid,\n     ) -> (ConstraintCategory<'tcx>, ObligationCause<'tcx>) {\n         let BlameConstraint { category, cause, .. } =\n-            self.best_blame_constraint(body, fr1, fr1_origin, |r| {\n+            self.best_blame_constraint(fr1, fr1_origin, |r| {\n                 self.provides_universal_region(r, fr1, fr2)\n             });\n         (category, cause)\n@@ -2045,7 +2028,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     #[instrument(level = \"debug\", skip(self, target_test))]\n     pub(crate) fn best_blame_constraint(\n         &self,\n-        body: &Body<'tcx>,\n         from_region: RegionVid,\n         from_region_origin: NllRegionVariableOrigin,\n         target_test: impl Fn(RegionVid) -> bool,\n@@ -2091,7 +2073,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             .iter()\n             .map(|constraint| {\n                 if constraint.category == ConstraintCategory::ClosureBounds {\n-                    self.retrieve_closure_constraint_info(body, &constraint)\n+                    self.retrieve_closure_constraint_info(&constraint)\n                 } else {\n                     BlameConstraint {\n                         category: constraint.category,"}]}