{"sha": "856acbf66d21a20bd115f11c55c7abecd1f4c92e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NmFjYmY2NmQyMWEyMGJkMTE1ZjExYzU1YzdhYmVjZDFmNGM5MmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-24T01:50:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-24T19:36:51Z"}, "message": "Vectors containing pinned kinds become pinned\n\nOtherwise they could be copied", "tree": {"sha": "a72941a31d110bf53eb9d99d86a56c636576ceca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a72941a31d110bf53eb9d99d86a56c636576ceca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/856acbf66d21a20bd115f11c55c7abecd1f4c92e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/856acbf66d21a20bd115f11c55c7abecd1f4c92e", "html_url": "https://github.com/rust-lang/rust/commit/856acbf66d21a20bd115f11c55c7abecd1f4c92e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/856acbf66d21a20bd115f11c55c7abecd1f4c92e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5d5682065eac04322bb1cc21c1cd672393c6c33", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d5682065eac04322bb1cc21c1cd672393c6c33", "html_url": "https://github.com/rust-lang/rust/commit/e5d5682065eac04322bb1cc21c1cd672393c6c33"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "bf43b158be7266549ccf6ea719ee45ab6b455e7e", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=856acbf66d21a20bd115f11c55c7abecd1f4c92e", "patch": "@@ -385,7 +385,7 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: ebml::writer) ->\n \n // Path and definition ID indexing\n \n-fn create_index<T>(index: [entry<T>], hash_fn: fn(T) -> uint) ->\n+fn create_index<@T>(index: [entry<T>], hash_fn: fn(T) -> uint) ->\n    [@[entry<T>]] {\n     let buckets: [@mutable [entry<T>]] = [];\n     for each i: uint in uint::range(0u, 256u) { buckets += [@mutable []]; }"}, {"sha": "a013359f3b0d0529cabd24ce36f53ac815a55b76", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=856acbf66d21a20bd115f11c55c7abecd1f4c92e", "patch": "@@ -1019,17 +1019,14 @@ fn type_kind(cx: ctxt, ty: t) -> ast::kind {\n       ty_box(mt) {\n         result = ast::kind_shared;\n       }\n-      // Pointers and unique boxes / vecs raise pinned to shared,\n-      // otherwise pass through their pointee kind.\n-      ty_ptr(tm) | ty_vec(tm) {\n+      // Pointers raise pinned to shared.\n+      ty_ptr(tm) {\n         let k = type_kind(cx, tm.ty);\n         if k == ast::kind_pinned { k = ast::kind_shared; }\n         result = kind::lower_kind(result, k);\n       }\n-      // Unique boxes pass through their pointee kind. FIXME: Shouldn't\n-      // pointers and vecs do this too to avoid copying vectors of pinned\n-      // things?\n-      ty_uniq(tm) {\n+      // Unique containers pass through their pointee kind.\n+      ty_vec(tm) | ty_uniq(tm) {\n         let k = type_kind(cx, tm.ty);\n         result = kind::lower_kind(result, k);\n       }"}, {"sha": "528b2cdc7565b7725b2df0e9cc07da0182ac3154", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=856acbf66d21a20bd115f11c55c7abecd1f4c92e", "patch": "@@ -104,7 +104,7 @@ fn elts_to_ell(cx: ext_ctxt, elts: [@expr]) ->\n         }\n }\n \n-fn option_flatten_map<T, U>(f: fn(T) -> option::t<U>, v: [T]) ->\n+fn option_flatten_map<T, @U>(f: fn(T) -> option::t<U>, v: [T]) ->\n    option::t<[U]> {\n     let res = [];\n     for elem: T in v {"}, {"sha": "ba01d4e4a1e149fe6ca148c636ab21c09b4f97a4", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=856acbf66d21a20bd115f11c55c7abecd1f4c92e", "patch": "@@ -609,8 +609,9 @@ fn parse_fn_block_arg(p: parser) -> ast::arg {\n     ret {mode: m, ty: t, ident: i, id: p.get_id()};\n }\n \n-fn parse_seq_to_before_gt<T>(sep: option::t<token::token>, f: fn(parser) -> T,\n-                             p: parser) -> [T] {\n+fn parse_seq_to_before_gt<@T>(sep: option::t<token::token>,\n+                              f: fn(parser) -> T,\n+                              p: parser) -> [T] {\n     let first = true;\n     let v = [];\n     while p.peek() != token::GT && p.peek() != token::BINOP(token::LSR) &&\n@@ -625,15 +626,15 @@ fn parse_seq_to_before_gt<T>(sep: option::t<token::token>, f: fn(parser) -> T,\n     ret v;\n }\n \n-fn parse_seq_to_gt<T>(sep: option::t<token::token>, f: fn(parser) -> T,\n+fn parse_seq_to_gt<@T>(sep: option::t<token::token>, f: fn(parser) -> T,\n                       p: parser) -> [T] {\n     let v = parse_seq_to_before_gt(sep, f, p);\n     expect_gt(p);\n \n     ret v;\n }\n \n-fn parse_seq_lt_gt<T>(sep: option::t<token::token>, f: fn(parser) -> T,\n+fn parse_seq_lt_gt<@T>(sep: option::t<token::token>, f: fn(parser) -> T,\n                       p: parser) -> spanned<[T]> {\n     let lo = p.get_lo_pos();\n     expect(p, token::LT);\n@@ -643,15 +644,16 @@ fn parse_seq_lt_gt<T>(sep: option::t<token::token>, f: fn(parser) -> T,\n     ret spanned(lo, hi, result);\n }\n \n-fn parse_seq_to_end<T>(ket: token::token, sep: option::t<token::token>,\n+fn parse_seq_to_end<@T>(ket: token::token, sep: option::t<token::token>,\n                        f: fn(parser) -> T, p: parser) -> [T] {\n     let val = parse_seq_to_before_end(ket, sep, f, p);\n     p.bump();\n     ret val;\n }\n \n-fn parse_seq_to_before_end<T>(ket: token::token, sep: option::t<token::token>,\n-                              f: fn(parser) -> T, p: parser) -> [T] {\n+fn parse_seq_to_before_end<@T>(ket: token::token,\n+                               sep: option::t<token::token>,\n+                               f: fn(parser) -> T, p: parser) -> [T] {\n     let first: bool = true;\n     let v: [T] = [];\n     while p.peek() != ket {\n@@ -665,7 +667,7 @@ fn parse_seq_to_before_end<T>(ket: token::token, sep: option::t<token::token>,\n }\n \n \n-fn parse_seq<T>(bra: token::token, ket: token::token,\n+fn parse_seq<@T>(bra: token::token, ket: token::token,\n                 sep: option::t<token::token>, f: fn(parser) -> T, p: parser)\n    -> spanned<[T]> {\n     let lo = p.get_lo_pos();"}, {"sha": "d20b124a9682f2cd9d45003ff69fa39b15b93462", "filename": "src/lib/either.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Flib%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Flib%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Feither.rs?ref=856acbf66d21a20bd115f11c55c7abecd1f4c92e", "patch": "@@ -10,23 +10,23 @@ fn either<T, U,\n     alt value { left(l) { f_left(l) } right(r) { f_right(r) } }\n }\n \n-fn lefts<T, U>(eithers: [t<T, U>]) -> [T] {\n+fn lefts<@T, U>(eithers: [t<T, U>]) -> [T] {\n     let result: [T] = [];\n     for elt: t<T, U> in eithers {\n         alt elt { left(l) { result += [l]; } _ {/* fallthrough */ } }\n     }\n     ret result;\n }\n \n-fn rights<T, U>(eithers: [t<T, U>]) -> [U] {\n+fn rights<T, @U>(eithers: [t<T, U>]) -> [U] {\n     let result: [U] = [];\n     for elt: t<T, U> in eithers {\n         alt elt { right(r) { result += [r]; } _ {/* fallthrough */ } }\n     }\n     ret result;\n }\n \n-fn partition<T, U>(eithers: [t<T, U>]) -> {lefts: [T], rights: [U]} {\n+fn partition<@T, @U>(eithers: [t<T, U>]) -> {lefts: [T], rights: [U]} {\n     let lefts: [T] = [];\n     let rights: [U] = [];\n     for elt: t<T, U> in eithers {"}, {"sha": "84bd02e3689f0d211f745706b3ceb696a25fdd6b", "filename": "src/lib/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=856acbf66d21a20bd115f11c55c7abecd1f4c92e", "patch": "@@ -343,7 +343,7 @@ iter iter2<@T>(v: [T]) -> (uint, T) {\n mod unsafe {\n     type vec_repr = {mutable fill: uint, mutable alloc: uint, data: u8};\n \n-    fn from_buf<T>(ptr: *T, elts: uint) -> [T] {\n+    fn from_buf<@T>(ptr: *T, elts: uint) -> [T] {\n         ret rustrt::vec_from_buf_shared(ptr, elts);\n     }\n "}, {"sha": "57e3193573843bd5a6fac4c9b2da6db8fb6b244d", "filename": "src/test/run-pass/alloca-from-derived-tydesc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs?ref=856acbf66d21a20bd115f11c55c7abecd1f4c92e", "patch": "@@ -2,6 +2,6 @@ tag option<T> { some(T); none; }\n \n type r<T> = {mutable v: [option<T>]};\n \n-fn f<T>() -> [T] { ret []; }\n+fn f<@T>() -> [T] { ret []; }\n \n fn main() { let r: r<int> = {mutable v: []}; r.v = f(); }"}, {"sha": "e13b2557b09ced8c40caa5390cb5d3bbb6945e72", "filename": "src/test/run-pass/ivec-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Ftest%2Frun-pass%2Fivec-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Ftest%2Frun-pass%2Fivec-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-add.rs?ref=856acbf66d21a20bd115f11c55c7abecd1f4c92e", "patch": "@@ -1,4 +1,4 @@\n-fn double<T>(a: T) -> [T] { ret [a] + [a]; }\n+fn double<@T>(a: T) -> [T] { ret [a] + [a]; }\n \n fn double_int(a: int) -> [int] { ret [a] + [a]; }\n "}, {"sha": "bb7b6805f148ccc09c24d7617e507ba5d2f54c92", "filename": "src/test/run-pass/vec-push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Ftest%2Frun-pass%2Fvec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/856acbf66d21a20bd115f11c55c7abecd1f4c92e/src%2Ftest%2Frun-pass%2Fvec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-push.rs?ref=856acbf66d21a20bd115f11c55c7abecd1f4c92e", "patch": "@@ -1,5 +1,5 @@\n \n \n-fn push<T>(&v: [mutable? T], t: T) { v += [t]; }\n+fn push<@T>(&v: [mutable? T], t: T) { v += [t]; }\n \n fn main() { let v = [1, 2, 3]; push(v, 1); }"}]}