{"sha": "13675a57c75b2e08827c1674b050bc241f1bf4aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNjc1YTU3Yzc1YjJlMDg4MjdjMTY3NGIwNTBiYzI0MWYxYmY0YWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-15T22:41:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-15T22:41:02Z"}, "message": "Auto merge of #31646 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #31551, #31581, #31614, #31626, #31632, #31642\n- Failed merges:", "tree": {"sha": "6e6b64fbcdd68eca09f82b5c2c0304836a934356", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e6b64fbcdd68eca09f82b5c2c0304836a934356"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13675a57c75b2e08827c1674b050bc241f1bf4aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13675a57c75b2e08827c1674b050bc241f1bf4aa", "html_url": "https://github.com/rust-lang/rust/commit/13675a57c75b2e08827c1674b050bc241f1bf4aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13675a57c75b2e08827c1674b050bc241f1bf4aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17d284b4b5af8aa2d58c3bf05b937d5b9d1adeb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/17d284b4b5af8aa2d58c3bf05b937d5b9d1adeb0", "html_url": "https://github.com/rust-lang/rust/commit/17d284b4b5af8aa2d58c3bf05b937d5b9d1adeb0"}, {"sha": "39c2d8534ee31c2893ffd0c7c31d5a89479555da", "url": "https://api.github.com/repos/rust-lang/rust/commits/39c2d8534ee31c2893ffd0c7c31d5a89479555da", "html_url": "https://github.com/rust-lang/rust/commit/39c2d8534ee31c2893ffd0c7c31d5a89479555da"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "f5a543d75b1b40baecb74f5605172b36157a4c0c", "filename": "src/doc/book/vectors.md", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/13675a57c75b2e08827c1674b050bc241f1bf4aa/src%2Fdoc%2Fbook%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/13675a57c75b2e08827c1674b050bc241f1bf4aa/src%2Fdoc%2Fbook%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fvectors.md?ref=13675a57c75b2e08827c1674b050bc241f1bf4aa", "patch": "@@ -11,15 +11,21 @@ let v = vec![1, 2, 3, 4, 5]; // v: Vec<i32>\n ```\n \n (Notice that unlike the `println!` macro we\u2019ve used in the past, we use square\n-brackets `[]` with `vec!` macro. Rust allows you to use either in either situation,\n-this is just convention.)\n+brackets `[]` with `vec!` macro. Rust allows you to use either in either\n+situation, this is just convention.)\n \n There\u2019s an alternate form of `vec!` for repeating an initial value:\n \n ```rust\n let v = vec![0; 10]; // ten zeroes\n ```\n \n+Vectors store their contents as contiguous arrays of `T` on the heap. This means\n+that they must be able to know the size of `T` at compile time (that is, how\n+many bytes are needed to store a `T`?). The size of some things can't be known\n+at compile time. For these you'll have to store a pointer to that thing:\n+thankfully, the [`Box`][box] type works perfectly for this.\n+\n ## Accessing elements\n \n To get the value at a particular index in the vector, we use `[]`s:\n@@ -113,6 +119,7 @@ Vectors have many more useful methods, which you can read about in [their\n API documentation][vec].\n \n [vec]: ../std/vec/index.html\n+[box]: ../std/boxed/index.html\n [generic]: generics.html\n [panic]: concurrency.html#panics\n [get]: http://doc.rust-lang.org/std/vec/struct.Vec.html#method.get"}, {"sha": "ea34a803ccb4054a18c133ca8436cbb3cd920f08", "filename": "src/etc/tidy.py", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13675a57c75b2e08827c1674b050bc241f1bf4aa/src%2Fetc%2Ftidy.py", "raw_url": "https://github.com/rust-lang/rust/raw/13675a57c75b2e08827c1674b050bc241f1bf4aa/src%2Fetc%2Ftidy.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftidy.py?ref=13675a57c75b2e08827c1674b050bc241f1bf4aa", "patch": "@@ -24,6 +24,15 @@\n \n interesting_files = ['.rs', '.py', '.js', '.sh', '.c', '.h']\n uninteresting_files = ['miniz.c', 'jquery', 'rust_android_dummy']\n+stable_whitelist = {\n+    'src/bootstrap',\n+    'src/build_helper',\n+    'src/libcollectionstest',\n+    'src/libcore',\n+    'src/libstd',\n+    'src/rustc/std_shim',\n+    'src/test'\n+}\n \n \n def report_error_name_no(name, no, s):\n@@ -93,6 +102,7 @@ def interesting_file(f):\n file_counts = {ext: 0 for ext in interesting_files}\n \n all_paths = set()\n+needs_unstable_attr = set()\n \n try:\n     for (dirpath, dirnames, filenames) in os.walk(src_dir):\n@@ -149,6 +159,9 @@ def interesting_file(f):\n                 else:\n                     if \"SNAP \" in line:\n                         report_warn(\"unmatched SNAP line: \" + line)\n+                search = re.search(r'^#!\\[unstable', line)\n+                if search:\n+                    needs_unstable_attr.discard(filename)\n \n             if cr_flag in line:\n                 check_cr = False\n@@ -181,6 +194,9 @@ def interesting_file(f):\n                 check_cr = True\n                 check_tab = True\n                 check_linelength = True\n+                if all(f not in filename for f in stable_whitelist) and \\\n+                   re.search(r'src/.*/lib\\.rs', filename):\n+                    needs_unstable_attr.add(filename)\n \n             # Put a reasonable limit on the amount of header data we use for\n             # the licenseck\n@@ -195,6 +211,8 @@ def interesting_file(f):\n         update_counts(current_name)\n         assert len(current_contents) > 0\n         do_license_check(current_name, current_contents)\n+    for f in needs_unstable_attr:\n+        report_error_name_no(f, 1, \"requires unstable attribute\")\n \n except UnicodeDecodeError as e:\n     report_err(\"UTF-8 decoding error \" + str(e))"}, {"sha": "270a01014c14b0051523f0ce2c2800e1317113ca", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13675a57c75b2e08827c1674b050bc241f1bf4aa/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13675a57c75b2e08827c1674b050bc241f1bf4aa/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=13675a57c75b2e08827c1674b050bc241f1bf4aa", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! A growable list type with heap-allocated contents, written `Vec<T>` but\n-//! pronounced 'vector.'\n+//! A contiguous growable array type with heap-allocated contents, written\n+//! `Vec<T>` but pronounced 'vector.'\n //!\n //! Vectors have `O(1)` indexing, amortized `O(1)` push (to the end) and\n //! `O(1)` pop (from the end).\n@@ -78,7 +78,7 @@ use borrow::{Cow, IntoCow};\n \n use super::range::RangeArgument;\n \n-/// A growable list type, written `Vec<T>` but pronounced 'vector.'\n+/// A contiguous growable array type, written `Vec<T>` but pronounced 'vector.'\n ///\n /// # Examples\n ///"}, {"sha": "864ff40fe10748479c01939c744e0f39afe8240b", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13675a57c75b2e08827c1674b050bc241f1bf4aa/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13675a57c75b2e08827c1674b050bc241f1bf4aa/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=13675a57c75b2e08827c1674b050bc241f1bf4aa", "patch": "@@ -510,7 +510,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     link_args: Option<Vec<String>> = (None, parse_opt_list,\n         \"extra arguments to pass to the linker (space separated)\"),\n     link_dead_code: bool = (false, parse_bool,\n-        \"let the linker strip dead coded (turning it on can be used for code coverage)\"),\n+        \"don't let linker strip dead code (turning it on can be used for code coverage)\"),\n     lto: bool = (false, parse_bool,\n         \"perform LLVM link-time optimizations\"),\n     target_cpu: Option<String> = (None, parse_opt_string,"}, {"sha": "975b4d3636f2d10b983fb0a79c61b6d92d550c01", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13675a57c75b2e08827c1674b050bc241f1bf4aa/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13675a57c75b2e08827c1674b050bc241f1bf4aa/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=13675a57c75b2e08827c1674b050bc241f1bf4aa", "patch": "@@ -122,7 +122,7 @@ r##\"<!DOCTYPE html>\n \n                 <p>\n                     Search functions by type signature (e.g.\n-                    <code>vec -> usize</code>)\n+                    <code>vec -> usize</code> or <code>* -> vec</code>)\n                 </p>\n             </div>\n         </div>"}, {"sha": "08f70ae9ce7a0ec1896c7442a2cf50b43566ddfa", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13675a57c75b2e08827c1674b050bc241f1bf4aa/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/13675a57c75b2e08827c1674b050bc241f1bf4aa/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=13675a57c75b2e08827c1674b050bc241f1bf4aa", "patch": "@@ -280,7 +280,7 @@\n                 var parts = val.split(\"->\").map(trimmer);\n                 var input = parts[0];\n                 // sort inputs so that order does not matter\n-                var inputs = input.split(\",\").map(trimmer).sort();\n+                var inputs = input.split(\",\").map(trimmer).sort().toString();\n                 var output = parts[1];\n \n                 for (var i = 0; i < nSearchWords; ++i) {\n@@ -296,8 +296,8 @@\n \n                     // allow searching for void (no output) functions as well\n                     var typeOutput = type.output ? type.output.name : \"\";\n-                    if (inputs.toString() === typeInputs.toString() &&\n-                        output == typeOutput) {\n+                    if ((inputs === \"*\" || inputs === typeInputs.toString()) &&\n+                        (output === \"*\" || output == typeOutput)) {\n                         results.push({id: i, index: -1, dontValidate: true});\n                     }\n                 }"}]}