{"sha": "e2afa1cd5caef171353707c9d1acde78541b40f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYWZhMWNkNWNhZWYxNzEzNTM3MDdjOWQxYWNkZTc4NTQxYjQwZjc=", "commit": {"author": {"name": "chromatic", "email": "chromatic@wgz.org", "date": "2014-03-01T02:21:22Z"}, "committer": {"name": "chromatic", "email": "chromatic@wgz.org", "date": "2014-03-01T05:54:07Z"}, "message": "Cleaned up trans_fail functions, per eddyb request.", "tree": {"sha": "3d71cdd04d5053e3370f928d0095f3c03f7f2c92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d71cdd04d5053e3370f928d0095f3c03f7f2c92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2afa1cd5caef171353707c9d1acde78541b40f7", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2afa1cd5caef171353707c9d1acde78541b40f7", "html_url": "https://github.com/rust-lang/rust/commit/e2afa1cd5caef171353707c9d1acde78541b40f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2afa1cd5caef171353707c9d1acde78541b40f7/comments", "author": {"login": "chromatic", "id": 50255, "node_id": "MDQ6VXNlcjUwMjU1", "avatar_url": "https://avatars.githubusercontent.com/u/50255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chromatic", "html_url": "https://github.com/chromatic", "followers_url": "https://api.github.com/users/chromatic/followers", "following_url": "https://api.github.com/users/chromatic/following{/other_user}", "gists_url": "https://api.github.com/users/chromatic/gists{/gist_id}", "starred_url": "https://api.github.com/users/chromatic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chromatic/subscriptions", "organizations_url": "https://api.github.com/users/chromatic/orgs", "repos_url": "https://api.github.com/users/chromatic/repos", "events_url": "https://api.github.com/users/chromatic/events{/privacy}", "received_events_url": "https://api.github.com/users/chromatic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chromatic", "id": 50255, "node_id": "MDQ6VXNlcjUwMjU1", "avatar_url": "https://avatars.githubusercontent.com/u/50255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chromatic", "html_url": "https://github.com/chromatic", "followers_url": "https://api.github.com/users/chromatic/followers", "following_url": "https://api.github.com/users/chromatic/following{/other_user}", "gists_url": "https://api.github.com/users/chromatic/gists{/gist_id}", "starred_url": "https://api.github.com/users/chromatic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chromatic/subscriptions", "organizations_url": "https://api.github.com/users/chromatic/orgs", "repos_url": "https://api.github.com/users/chromatic/repos", "events_url": "https://api.github.com/users/chromatic/events{/privacy}", "received_events_url": "https://api.github.com/users/chromatic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "123eb4ebea695f724a2375a73db53b91273e5ce0", "url": "https://api.github.com/repos/rust-lang/rust/commits/123eb4ebea695f724a2375a73db53b91273e5ce0", "html_url": "https://github.com/rust-lang/rust/commit/123eb4ebea695f724a2375a73db53b91273e5ce0"}], "stats": {"total": 64, "additions": 9, "deletions": 55}, "files": [{"sha": "b92670b75f01a01e23a7fe35466aaeb995b14917", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2afa1cd5caef171353707c9d1acde78541b40f7/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2afa1cd5caef171353707c9d1acde78541b40f7/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=e2afa1cd5caef171353707c9d1acde78541b40f7", "patch": "@@ -1188,7 +1188,7 @@ impl<'a> DynamicFailureHandler<'a> {\n \n         let fcx = self.bcx.fcx;\n         let fail_cx = fcx.new_block(false, \"case_fallthrough\", None);\n-        controlflow::trans_fail(fail_cx, Some(self.sp), self.msg.clone());\n+        controlflow::trans_fail(fail_cx, self.sp, self.msg.clone());\n         self.finished.set(Some(fail_cx.llbb));\n         fail_cx.llbb\n     }"}, {"sha": "2bebba8c404636fc1868a6cba56d4f07050a7ee2", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2afa1cd5caef171353707c9d1acde78541b40f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2afa1cd5caef171353707c9d1acde78541b40f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=e2afa1cd5caef171353707c9d1acde78541b40f7", "patch": "@@ -864,7 +864,7 @@ pub fn fail_if_zero<'a>(\n       }\n     };\n     with_cond(cx, is_zero, |bcx| {\n-        controlflow::trans_fail(bcx, Some(span), InternedString::new(text))\n+        controlflow::trans_fail(bcx, span, InternedString::new(text))\n     })\n }\n "}, {"sha": "d57f0fc0d333a7c2810dde71797bea88e348605b", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 7, "deletions": 53, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e2afa1cd5caef171353707c9d1acde78541b40f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2afa1cd5caef171353707c9d1acde78541b40f7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=e2afa1cd5caef171353707c9d1acde78541b40f7", "patch": "@@ -18,8 +18,6 @@ use middle::trans::debuginfo;\n use middle::trans::cleanup;\n use middle::trans::cleanup::CleanupMethods;\n use middle::trans::expr;\n-use middle::ty;\n-use util::ppaux;\n use util::ppaux::Repr;\n \n use middle::trans::type_::Type;\n@@ -327,67 +325,23 @@ pub fn trans_ret<'a>(bcx: &'a Block<'a>,\n     return bcx;\n }\n \n-pub fn trans_fail_expr<'a>(\n-                       bcx: &'a Block<'a>,\n-                       sp_opt: Option<Span>,\n-                       fail_expr: Option<@ast::Expr>)\n-                       -> &'a Block<'a> {\n-    let _icx = push_ctxt(\"trans_fail_expr\");\n-    let mut bcx = bcx;\n-    match fail_expr {\n-        Some(arg_expr) => {\n-            let ccx = bcx.ccx();\n-            let tcx = ccx.tcx;\n-            let arg_datum =\n-                unpack_datum!(bcx, expr::trans_to_lvalue(bcx, arg_expr, \"fail\"));\n-\n-            if ty::type_is_str(arg_datum.ty) {\n-                let (lldata, _) = arg_datum.get_vec_base_and_len(bcx);\n-                return trans_fail_value(bcx, sp_opt, lldata);\n-            } else if bcx.unreachable.get() || ty::type_is_bot(arg_datum.ty) {\n-                return bcx;\n-            } else {\n-                bcx.sess().span_bug(\n-                    arg_expr.span, ~\"fail called with unsupported type \" +\n-                    ppaux::ty_to_str(tcx, arg_datum.ty));\n-            }\n-        }\n-        _ => trans_fail(bcx, sp_opt, InternedString::new(\"explicit failure\"))\n-    }\n-}\n-\n pub fn trans_fail<'a>(\n                   bcx: &'a Block<'a>,\n-                  sp_opt: Option<Span>,\n+                  sp: Span,\n                   fail_str: InternedString)\n                   -> &'a Block<'a> {\n-    let _icx = push_ctxt(\"trans_fail\");\n     let V_fail_str = C_cstr(bcx.ccx(), fail_str);\n-    return trans_fail_value(bcx, sp_opt, V_fail_str);\n-}\n-\n-fn trans_fail_value<'a>(\n-                    bcx: &'a Block<'a>,\n-                    sp_opt: Option<Span>,\n-                    V_fail_str: ValueRef)\n-                    -> &'a Block<'a> {\n     let _icx = push_ctxt(\"trans_fail_value\");\n     let ccx = bcx.ccx();\n-    let (V_filename, V_line) = match sp_opt {\n-      Some(sp) => {\n-        let sess = bcx.sess();\n-        let loc = sess.parse_sess.cm.lookup_char_pos(sp.lo);\n-        (C_cstr(bcx.ccx(), token::intern_and_get_ident(loc.file.name)),\n-         loc.line as int)\n-      }\n-      None => {\n-        (C_cstr(bcx.ccx(), InternedString::new(\"<runtime>\")), 0)\n-      }\n-    };\n+    let sess = bcx.sess();\n+    let loc = sess.parse_sess.cm.lookup_char_pos(sp.lo);\n+    let V_filename = C_cstr(bcx.ccx(),\n+                            token::intern_and_get_ident(loc.file.name));\n+    let V_line = loc.line as int;\n     let V_str = PointerCast(bcx, V_fail_str, Type::i8p());\n     let V_filename = PointerCast(bcx, V_filename, Type::i8p());\n     let args = ~[V_str, V_filename, C_int(ccx, V_line)];\n-    let did = langcall(bcx, sp_opt, \"\", FailFnLangItem);\n+    let did = langcall(bcx, Some(sp), \"\", FailFnLangItem);\n     let bcx = callee::trans_lang_call(bcx, did, args, Some(expr::Ignore)).bcx;\n     Unreachable(bcx);\n     return bcx;"}]}