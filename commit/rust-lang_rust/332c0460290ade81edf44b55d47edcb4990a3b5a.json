{"sha": "332c0460290ade81edf44b55d47edcb4990a3b5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMmMwNDYwMjkwYWRlODFlZGY0NGI1NWQ0N2VkY2I0OTkwYTNiNWE=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2013-03-01T22:48:17Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2013-03-01T23:25:44Z"}, "message": "docs/rust.md: Mention unit-like structs along with other struct types", "tree": {"sha": "c8dd6781a7e75d9d8369472459121a45d6e1ed6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8dd6781a7e75d9d8369472459121a45d6e1ed6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/332c0460290ade81edf44b55d47edcb4990a3b5a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/332c0460290ade81edf44b55d47edcb4990a3b5a", "html_url": "https://github.com/rust-lang/rust/commit/332c0460290ade81edf44b55d47edcb4990a3b5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/332c0460290ade81edf44b55d47edcb4990a3b5a/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab8ec242bc34dceb8aded6ec71ddf17e5966d86", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab8ec242bc34dceb8aded6ec71ddf17e5966d86", "html_url": "https://github.com/rust-lang/rust/commit/cab8ec242bc34dceb8aded6ec71ddf17e5966d86"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "e928a5d5fb4bf62ae7b6260ae804e8e15a588be3", "filename": "doc/rust.md", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/332c0460290ade81edf44b55d47edcb4990a3b5a/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/332c0460290ade81edf44b55d47edcb4990a3b5a/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=332c0460290ade81edf44b55d47edcb4990a3b5a", "patch": "@@ -1085,6 +1085,15 @@ let p = Point(10, 11);\n let px: int = match p { Point(x, _) => x };\n ~~~~\n \n+A _unit-like struct_ is a structure without any fields, defined by leaving off the fields list entirely.\n+Such types will have a single value, just like the [unit value `()`](#unit-and-boolean-literals) of the unit type.\n+For example:\n+\n+~~~~\n+struct Cookie;\n+let c = [Cookie, Cookie, Cookie, Cookie];\n+~~~~\n+\n ### Enumerations\n \n An _enumeration_ is a simultaneous definition of a nominal [enumerated type](#enumerated-types) as well as a set of *constructors*,\n@@ -1590,7 +1599,8 @@ struct_expr : expr_path '{' ident ':' expr\n                       [ ',' ident ':' expr ] *\n                       [ \"..\" expr ] '}' |\n               expr_path '(' expr\n-                      [ ',' expr ] * ')'\n+                      [ ',' expr ] * ')' |\n+              expr_path\n ~~~~~~~~\n \n There are several forms of structure expressions.\n@@ -1600,23 +1610,28 @@ providing the field values of a new instance of the structure.\n A field name can be any identifier, and is separated from its value expression by a colon.\n To indicate that a field is mutable, the `mut` keyword is written before its name.\n \n-A _tuple structure expression_ constists of the [path](#paths) of a [structure item](#structures),\n+A _tuple structure expression_ consists of the [path](#paths) of a [structure item](#structures),\n followed by a parenthesized list of one or more comma-separated expressions\n (in other words, the path of a structured item followed by a tuple expression).\n The structure item must be a tuple structure item.\n \n+A _unit-like structure expression_ consists only of the [path](#paths) of a [structure item](#structures).\n+\n The following are examples of structure expressions:\n \n ~~~~\n # struct Point { x: float, y: float }\n # struct TuplePoint(float, float);\n # mod game { pub struct User { name: &str, age: uint, score: uint } }\n+# struct Cookie; fn some_fn<T>(t: T) {}\n Point {x: 10f, y: 20f};\n TuplePoint(10f, 20f);\n let u = game::User {name: \"Joe\", age: 35u, score: 100_000};\n+some_fn::<Cookie>(Cookie);\n ~~~~\n \n A structure expression forms a new value of the named structure type.\n+Note that for a given *unit-like* structure type, this will always be the same value.\n \n A structure expression can terminate with the syntax `..` followed by an expression to denote a functional update.\n The expression following `..` (the base) must be of the same structure type as the new structure type being formed.\n@@ -2643,7 +2658,10 @@ the resulting `struct` value will always be laid out in memory in the order spec\n The fields of a `struct` may be qualified by [visibility modifiers](#visibility-modifiers),\n to restrict access to implementation-private data in a structure.\n \n-A `tuple struct` type is just like a structure type, except that the fields are anonymous.\n+A _tuple struct_ type is just like a structure type, except that the fields are anonymous.\n+\n+A _unit-like struct_ type is like a structure type, except that it has no fields.\n+The one value constructed by the associated [structure expression](#structure-expression) is the only value that inhabits such a type.\n \n ### Enumerated types\n "}]}