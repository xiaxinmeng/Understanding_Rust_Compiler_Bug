{"sha": "ee2b16100e2fad2c08f01f913b826c00024f85a8", "node_id": "C_kwDOAAsO6NoAKGVlMmIxNjEwMGUyZmFkMmMwOGYwMWY5MTNiODI2YzAwMDI0Zjg1YTg", "commit": {"author": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2022-08-19T09:21:14Z"}, "committer": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2022-08-23T10:24:51Z"}, "message": "Migrate rustc_mir_dataflow to diagnostic structs", "tree": {"sha": "a307e427dd7b2ef5cf19259e88ec9d03d454d170", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a307e427dd7b2ef5cf19259e88ec9d03d454d170"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee2b16100e2fad2c08f01f913b826c00024f85a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2b16100e2fad2c08f01f913b826c00024f85a8", "html_url": "https://github.com/rust-lang/rust/commit/ee2b16100e2fad2c08f01f913b826c00024f85a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee2b16100e2fad2c08f01f913b826c00024f85a8/comments", "author": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "committer": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38528d4dc0a0c079069764f23f11ef9f4fba2f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/38528d4dc0a0c079069764f23f11ef9f4fba2f95", "html_url": "https://github.com/rust-lang/rust/commit/38528d4dc0a0c079069764f23f11ef9f4fba2f95"}], "stats": {"total": 151, "additions": 129, "deletions": 22}, "files": [{"sha": "a7905a12e0feb6b11612424ee5a4ea4668199e7b", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2b16100e2fad2c08f01f913b826c00024f85a8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ee2b16100e2fad2c08f01f913b826c00024f85a8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ee2b16100e2fad2c08f01f913b826c00024f85a8", "patch": "@@ -4213,11 +4213,14 @@ dependencies = [\n  \"regex\",\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n+ \"rustc_errors\",\n  \"rustc_graphviz\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_serialize\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec\","}, {"sha": "bfc9470bbdf30a6b4ecbb3f8b767bc3e8519e4be", "filename": "compiler/rustc_error_messages/locales/en-US/rustc_mir_dataflow.ftl", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ee2b16100e2fad2c08f01f913b826c00024f85a8/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Frustc_mir_dataflow.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ee2b16100e2fad2c08f01f913b826c00024f85a8/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Frustc_mir_dataflow.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Frustc_mir_dataflow.ftl?ref=ee2b16100e2fad2c08f01f913b826c00024f85a8", "patch": "@@ -0,0 +1,29 @@\n+rustc_mir_dataflow_path_must_end_in_filename =\n+    path must end in a filename\n+\n+rustc_mir_dataflow_unknown_formatter =\n+    unknown formatter\n+\n+rustc_mir_dataflow_duplicate_values_for =\n+    duplicate values for `{$name}`\n+\n+rustc_mir_dataflow_requires_an_argument =\n+    `{$name}` requires an argument\n+\n+rustc_mir_dataflow_stop_after_dataflow_ended_compilation =\n+    stop_after_dataflow ended compilation\n+\n+rustc_mir_dataflow_peek_must_be_place_or_ref_place =\n+    rustc_peek: argument expression must be either `place` or `&place`\n+\n+rustc_mir_dataflow_peek_must_be_not_temporary =\n+    dataflow::sanity_check cannot feed a non-temp to rustc_peek.\n+\n+rustc_mir_dataflow_peek_bit_not_set =\n+    rustc_peek: bit not set\n+\n+rustc_mir_dataflow_peek_argument_not_a_local =\n+    rustc_peek: argument was not a local\n+\n+rustc_mir_dataflow_peek_argument_untracked =\n+    rustc_peek: argument untracked"}, {"sha": "bcbaa649a01fc6561cbc84b969daf58eccf5d971", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee2b16100e2fad2c08f01f913b826c00024f85a8/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2b16100e2fad2c08f01f913b826c00024f85a8/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=ee2b16100e2fad2c08f01f913b826c00024f85a8", "patch": "@@ -43,6 +43,7 @@ fluent_messages! {\n     passes => \"../locales/en-US/passes.ftl\",\n     privacy => \"../locales/en-US/privacy.ftl\",\n     typeck => \"../locales/en-US/typeck.ftl\",\n+    rustc_mir_dataflow => \"../locales/en-US/rustc_mir_dataflow.ftl\",\n }\n \n pub use fluent_generated::{self as fluent, DEFAULT_LOCALE_RESOURCES};"}, {"sha": "385e9ba748fb9eeb6af6ad2bdaa2873118cb4e00", "filename": "compiler/rustc_mir_dataflow/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2b16100e2fad2c08f01f913b826c00024f85a8/compiler%2Frustc_mir_dataflow%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ee2b16100e2fad2c08f01f913b826c00024f85a8/compiler%2Frustc_mir_dataflow%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2FCargo.toml?ref=ee2b16100e2fad2c08f01f913b826c00024f85a8", "patch": "@@ -13,10 +13,13 @@ smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n tracing = \"0.1\"\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_errors = { path = \"../rustc_errors\" }\n rustc_graphviz = { path = \"../rustc_graphviz\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n+rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_span = { path = \"../rustc_span\" }"}, {"sha": "a30bf35fa1a2db54a2f7ef18e8a4c5ce0923149c", "filename": "compiler/rustc_mir_dataflow/src/errors.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/ee2b16100e2fad2c08f01f913b826c00024f85a8/compiler%2Frustc_mir_dataflow%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2b16100e2fad2c08f01f913b826c00024f85a8/compiler%2Frustc_mir_dataflow%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Ferrors.rs?ref=ee2b16100e2fad2c08f01f913b826c00024f85a8", "patch": "@@ -0,0 +1,71 @@\n+use rustc_macros::SessionDiagnostic;\n+use rustc_span::{Span, Symbol};\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(rustc_mir_dataflow::path_must_end_in_filename)]\n+pub(crate) struct PathMustEndInFilename {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(rustc_mir_dataflow::unknown_formatter)]\n+pub(crate) struct UnknownFormatter {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(rustc_mir_dataflow::duplicate_values_for)]\n+pub(crate) struct DuplicateValuesFor {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Symbol,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(rustc_mir_dataflow::requires_an_argument)]\n+pub(crate) struct RequiresAnArgument {\n+    #[primary_span]\n+    pub span: Span,\n+    pub name: Symbol,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(rustc_mir_dataflow::stop_after_dataflow_ended_compilation)]\n+pub(crate) struct StopAfterDataFlowEndedCompilation;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(rustc_mir_dataflow::peek_must_be_place_or_ref_place)]\n+pub(crate) struct PeekMustBePlaceOrRefPlace {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(rustc_mir_dataflow::peek_must_be_not_temporary)]\n+pub(crate) struct PeekMustBeNotTemporary {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(rustc_mir_dataflow::peek_bit_not_set)]\n+pub(crate) struct PeekBitNotSet {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(rustc_mir_dataflow::peek_argument_not_a_local)]\n+pub(crate) struct PeekArgumentNotALocal {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(rustc_mir_dataflow::peek_argument_untracked)]\n+pub(crate) struct PeekArgumentUntracked {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "112204c7599beb232fd34c27e60cb81dfa8858bf", "filename": "compiler/rustc_mir_dataflow/src/framework/engine.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee2b16100e2fad2c08f01f913b826c00024f85a8/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2b16100e2fad2c08f01f913b826c00024f85a8/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs?ref=ee2b16100e2fad2c08f01f913b826c00024f85a8", "patch": "@@ -1,5 +1,8 @@\n //! A solver for dataflow problems.\n \n+use crate::errors::{\n+    DuplicateValuesFor, PathMustEndInFilename, RequiresAnArgument, UnknownFormatter,\n+};\n use crate::framework::BitSetExt;\n \n use std::ffi::OsString;\n@@ -347,7 +350,7 @@ impl RustcMirAttrs {\n                     match path.file_name() {\n                         Some(_) => Ok(path),\n                         None => {\n-                            tcx.sess.span_err(attr.span(), \"path must end in a filename\");\n+                            tcx.sess.emit_err(PathMustEndInFilename { span: attr.span() });\n                             Err(())\n                         }\n                     }\n@@ -356,7 +359,7 @@ impl RustcMirAttrs {\n                 Self::set_field(&mut ret.formatter, tcx, &attr, |s| match s {\n                     sym::gen_kill | sym::two_phase => Ok(s),\n                     _ => {\n-                        tcx.sess.span_err(attr.span(), \"unknown formatter\");\n+                        tcx.sess.emit_err(UnknownFormatter { span: attr.span() });\n                         Err(())\n                     }\n                 })\n@@ -377,8 +380,7 @@ impl RustcMirAttrs {\n         mapper: impl FnOnce(Symbol) -> Result<T, ()>,\n     ) -> Result<(), ()> {\n         if field.is_some() {\n-            tcx.sess\n-                .span_err(attr.span(), &format!(\"duplicate values for `{}`\", attr.name_or_empty()));\n+            tcx.sess.emit_err(DuplicateValuesFor { span: attr.span(), name: attr.name_or_empty() });\n \n             return Err(());\n         }\n@@ -387,8 +389,7 @@ impl RustcMirAttrs {\n             *field = Some(mapper(s)?);\n             Ok(())\n         } else {\n-            tcx.sess\n-                .span_err(attr.span(), &format!(\"`{}` requires an argument\", attr.name_or_empty()));\n+            tcx.sess.emit_err(RequiresAnArgument { span: attr.span(), name: attr.name_or_empty() });\n             Err(())\n         }\n     }"}, {"sha": "62b712f7b8dbd32155e00ad4d2e9d94700c425c6", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2b16100e2fad2c08f01f913b826c00024f85a8/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2b16100e2fad2c08f01f913b826c00024f85a8/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=ee2b16100e2fad2c08f01f913b826c00024f85a8", "patch": "@@ -7,6 +7,8 @@\n #![feature(stmt_expr_attributes)]\n #![feature(trusted_step)]\n #![recursion_limit = \"256\"]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate tracing;\n@@ -33,6 +35,7 @@ use self::move_paths::MoveData;\n \n pub mod drop_flag_effects;\n pub mod elaborate_drops;\n+mod errors;\n mod framework;\n pub mod impls;\n pub mod move_paths;"}, {"sha": "5fb7cb6584beb159a82602718380201e25fbf85a", "filename": "compiler/rustc_mir_dataflow/src/rustc_peek.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ee2b16100e2fad2c08f01f913b826c00024f85a8/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2b16100e2fad2c08f01f913b826c00024f85a8/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs?ref=ee2b16100e2fad2c08f01f913b826c00024f85a8", "patch": "@@ -6,6 +6,10 @@ use rustc_middle::mir::MirPass;\n use rustc_middle::mir::{self, Body, Local, Location};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n+use crate::errors::{\n+    PeekArgumentNotALocal, PeekArgumentUntracked, PeekBitNotSet, PeekMustBeNotTemporary,\n+    PeekMustBePlaceOrRefPlace, StopAfterDataFlowEndedCompilation,\n+};\n use crate::framework::BitSetExt;\n use crate::impls::{\n     DefinitelyInitializedPlaces, MaybeInitializedPlaces, MaybeLiveLocals, MaybeUninitializedPlaces,\n@@ -64,7 +68,7 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n         }\n \n         if has_rustc_mir_with(tcx, def_id, sym::stop_after_dataflow).is_some() {\n-            tcx.sess.fatal(\"stop_after_dataflow ended compilation\");\n+            tcx.sess.emit_fatal(StopAfterDataFlowEndedCompilation);\n         }\n     }\n }\n@@ -133,9 +137,7 @@ pub fn sanity_check_via_rustc_peek<'tcx, A>(\n             }\n \n             _ => {\n-                let msg = \"rustc_peek: argument expression \\\n-                           must be either `place` or `&place`\";\n-                tcx.sess.span_err(call.span, msg);\n+                tcx.sess.emit_err(PeekMustBePlaceOrRefPlace { span: call.span });\n             }\n         }\n     }\n@@ -204,18 +206,12 @@ impl PeekCall {\n                         if let Some(local) = place.as_local() {\n                             local\n                         } else {\n-                            tcx.sess.diagnostic().span_err(\n-                                span,\n-                                \"dataflow::sanity_check cannot feed a non-temp to rustc_peek.\",\n-                            );\n+                            tcx.sess.emit_err(PeekMustBeNotTemporary { span });\n                             return None;\n                         }\n                     }\n                     _ => {\n-                        tcx.sess.diagnostic().span_err(\n-                            span,\n-                            \"dataflow::sanity_check cannot feed a non-temp to rustc_peek.\",\n-                        );\n+                        tcx.sess.emit_err(PeekMustBeNotTemporary { span });\n                         return None;\n                     }\n                 };\n@@ -255,12 +251,12 @@ where\n                 let bit_state = flow_state.contains(peek_mpi);\n                 debug!(\"rustc_peek({:?} = &{:?}) bit_state: {}\", call.arg, place, bit_state);\n                 if !bit_state {\n-                    tcx.sess.span_err(call.span, \"rustc_peek: bit not set\");\n+                    tcx.sess.emit_err(PeekBitNotSet { span: call.span });\n                 }\n             }\n \n             LookupResult::Parent(..) => {\n-                tcx.sess.span_err(call.span, \"rustc_peek: argument untracked\");\n+                tcx.sess.emit_err(PeekArgumentUntracked { span: call.span });\n             }\n         }\n     }\n@@ -276,12 +272,12 @@ impl<'tcx> RustcPeekAt<'tcx> for MaybeLiveLocals {\n     ) {\n         info!(?place, \"peek_at\");\n         let Some(local) = place.as_local() else {\n-            tcx.sess.span_err(call.span, \"rustc_peek: argument was not a local\");\n+            tcx.sess.emit_err(PeekArgumentNotALocal { span: call.span });\n             return;\n         };\n \n         if !flow_state.contains(local) {\n-            tcx.sess.span_err(call.span, \"rustc_peek: bit not set\");\n+            tcx.sess.emit_err(PeekBitNotSet { span: call.span });\n         }\n     }\n }"}]}