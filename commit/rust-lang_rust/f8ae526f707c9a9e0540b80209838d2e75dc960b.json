{"sha": "f8ae526f707c9a9e0540b80209838d2e75dc960b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YWU1MjZmNzA3YzlhOWUwNTQwYjgwMjA5ODM4ZDJlNzVkYzk2MGI=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-30T00:06:49Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-30T00:06:49Z"}, "message": "extra: Implement iterator::Extendable", "tree": {"sha": "9b01ce63dd1fc07cec2a118a855a3b227eb971d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b01ce63dd1fc07cec2a118a855a3b227eb971d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8ae526f707c9a9e0540b80209838d2e75dc960b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ae526f707c9a9e0540b80209838d2e75dc960b", "html_url": "https://github.com/rust-lang/rust/commit/f8ae526f707c9a9e0540b80209838d2e75dc960b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8ae526f707c9a9e0540b80209838d2e75dc960b/comments", "author": null, "committer": null, "parents": [{"sha": "f68621326ec295de6fd383a5230b807049ec4820", "url": "https://api.github.com/repos/rust-lang/rust/commits/f68621326ec295de6fd383a5230b807049ec4820", "html_url": "https://github.com/rust-lang/rust/commit/f68621326ec295de6fd383a5230b807049ec4820"}], "stats": {"total": 72, "additions": 51, "deletions": 21}, "files": [{"sha": "88159ce55525687a084e9707ca07aea8cf880973", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8ae526f707c9a9e0540b80209838d2e75dc960b/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ae526f707c9a9e0540b80209838d2e75dc960b/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=f8ae526f707c9a9e0540b80209838d2e75dc960b", "patch": "@@ -25,7 +25,7 @@\n use std::cast;\n use std::ptr;\n use std::util;\n-use std::iterator::{FromIterator, Invert};\n+use std::iterator::{FromIterator, Extendable, Invert};\n \n use container::Deque;\n \n@@ -541,11 +541,17 @@ impl<A> DoubleEndedIterator<A> for ConsumeIterator<A> {\n impl<A, T: Iterator<A>> FromIterator<A, T> for DList<A> {\n     fn from_iterator(iterator: &mut T) -> DList<A> {\n         let mut ret = DList::new();\n-        for iterator.advance |elt| { ret.push_back(elt); }\n+        ret.extend(iterator);\n         ret\n     }\n }\n \n+impl<A, T: Iterator<A>> Extendable<A, T> for DList<A> {\n+    fn extend(&mut self, iterator: &mut T) {\n+        for iterator.advance |elt| { self.push_back(elt); }\n+    }\n+}\n+\n impl<A: Eq> Eq for DList<A> {\n     fn eq(&self, other: &DList<A>) -> bool {\n         self.len() == other.len() &&"}, {"sha": "1c92a4f34e524503da3759c48c1537e7a346946e", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8ae526f707c9a9e0540b80209838d2e75dc960b/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ae526f707c9a9e0540b80209838d2e75dc960b/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=f8ae526f707c9a9e0540b80209838d2e75dc960b", "patch": "@@ -16,7 +16,7 @@ use std::clone::Clone;\n use std::unstable::intrinsics::{move_val_init, init};\n use std::util::{replace, swap};\n use std::vec;\n-use std::iterator::FromIterator;\n+use std::iterator::{FromIterator, Extendable};\n \n /// A priority queue implemented with a binary heap\n #[deriving(Clone)]\n@@ -191,17 +191,24 @@ impl<'self, T> Iterator<&'self T> for PriorityQueueIterator<'self, T> {\n }\n \n impl<T: Ord, Iter: Iterator<T>> FromIterator<T, Iter> for PriorityQueue<T> {\n-    pub fn from_iterator(iter: &mut Iter) -> PriorityQueue<T> {\n+    fn from_iterator(iter: &mut Iter) -> PriorityQueue<T> {\n+        let mut q = PriorityQueue::new();\n+        q.extend(iter);\n+\n+        q\n+    }\n+}\n+\n+impl<T: Ord, Iter: Iterator<T>> Extendable<T, Iter> for PriorityQueue<T> {\n+    fn extend(&mut self, iter: &mut Iter) {\n         let (lower, _) = iter.size_hint();\n \n-        let mut q = PriorityQueue::new();\n-        q.reserve_at_least(lower);\n+        let len = self.capacity();\n+        self.reserve_at_least(len + lower);\n \n         for iter.advance |elem| {\n-            q.push(elem);\n+            self.push(elem);\n         }\n-\n-        q\n     }\n }\n "}, {"sha": "92183f22d3b27df96695e602ee4a9910478e2621", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8ae526f707c9a9e0540b80209838d2e75dc960b/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ae526f707c9a9e0540b80209838d2e75dc960b/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=f8ae526f707c9a9e0540b80209838d2e75dc960b", "patch": "@@ -16,7 +16,7 @@\n use std::num;\n use std::uint;\n use std::vec;\n-use std::iterator::{FromIterator, Invert, RandomAccessIterator};\n+use std::iterator::{FromIterator, Invert, RandomAccessIterator, Extendable};\n \n use container::Deque;\n \n@@ -325,11 +325,18 @@ impl<A: Eq> Eq for RingBuf<A> {\n \n impl<A, T: Iterator<A>> FromIterator<A, T> for RingBuf<A> {\n     fn from_iterator(iterator: &mut T) -> RingBuf<A> {\n-        let mut deq = RingBuf::new();\n+        let (lower, _) = iterator.size_hint();\n+        let mut deq = RingBuf::with_capacity(lower);\n+        deq.extend(iterator);\n+        deq\n+    }\n+}\n+\n+impl<A, T: Iterator<A>> Extendable<A, T> for RingBuf<A> {\n+    fn extend(&mut self, iterator: &mut T) {\n         for iterator.advance |elt| {\n-            deq.push_back(elt);\n+            self.push_back(elt);\n         }\n-        deq\n     }\n }\n "}, {"sha": "6148e14b79f3fe9e627d1ce1d060e827db0b8637", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f8ae526f707c9a9e0540b80209838d2e75dc960b/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ae526f707c9a9e0540b80209838d2e75dc960b/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=f8ae526f707c9a9e0540b80209838d2e75dc960b", "patch": "@@ -15,7 +15,7 @@\n \n use std::num;\n use std::util::{swap, replace};\n-use std::iterator::FromIterator;\n+use std::iterator::{FromIterator, Extendable};\n \n // This is implemented as an AA tree, which is a simplified variation of\n // a red-black tree where red (horizontal) nodes can only be added\n@@ -753,26 +753,36 @@ fn remove<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>,\n }\n \n impl<K: TotalOrd, V, T: Iterator<(K, V)>> FromIterator<(K, V), T> for TreeMap<K, V> {\n-    pub fn from_iterator(iter: &mut T) -> TreeMap<K, V> {\n+    fn from_iterator(iter: &mut T) -> TreeMap<K, V> {\n         let mut map = TreeMap::new();\n+        map.extend(iter);\n+        map\n+    }\n+}\n \n+impl<K: TotalOrd, V, T: Iterator<(K, V)>> Extendable<(K, V), T> for TreeMap<K, V> {\n+    #[inline]\n+    fn extend(&mut self, iter: &mut T) {\n         for iter.advance |(k, v)| {\n-            map.insert(k, v);\n+            self.insert(k, v);\n         }\n-\n-        map\n     }\n }\n \n impl<T: TotalOrd, Iter: Iterator<T>> FromIterator<T, Iter> for TreeSet<T> {\n     pub fn from_iterator(iter: &mut Iter) -> TreeSet<T> {\n         let mut set = TreeSet::new();\n+        set.extend(iter);\n+        set\n+    }\n+}\n \n+impl<T: TotalOrd, Iter: Iterator<T>> Extendable<T, Iter> for TreeSet<T> {\n+    #[inline]\n+    fn extend(&mut self, iter: &mut Iter) {\n         for iter.advance |elem| {\n-            set.insert(elem);\n+            self.insert(elem);\n         }\n-\n-        set\n     }\n }\n "}]}