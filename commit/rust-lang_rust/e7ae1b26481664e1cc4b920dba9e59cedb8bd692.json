{"sha": "e7ae1b26481664e1cc4b920dba9e59cedb8bd692", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YWUxYjI2NDgxNjY0ZTFjYzRiOTIwZGJhOWU1OWNlZGI4YmQ2OTI=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-06-04T00:18:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-04T00:18:05Z"}, "message": "Rollup merge of #51323 - nikic:switch-int-lowering, r=nagisa\n\nGenerate br for all two target SwitchInts\n\nInstead of only for booleans. This means that `if let` also becomes a br.\n\nApart from making the IR slightly simpler, this is supported by FastISel (#4353).", "tree": {"sha": "dc5b4257a6a733735fa31c4a125d7b01bcfa3fa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc5b4257a6a733735fa31c4a125d7b01bcfa3fa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7ae1b26481664e1cc4b920dba9e59cedb8bd692", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbFIU9CRBK7hj4Ov3rIwAAdHIIABlfKEZ9+0uAujzGl4n3iOEM\nut7j/95khDrQC2udUzpz1ClrqETQ7nSRbRpK5cBmzVFegz8IC1f48LA3n1BvjmG9\naYQL/uIvFNWW6vGmWqRvCGvmpt3xNR+lTHyVxQ+ADuhyVv6A4TIt5KZqe/+kSOWv\nQk6BLNS4jSIH6GF/An+UZmTcKYVA31cqKVex1gVtweMOkzbPgFOQz6sReMv/o5yZ\nDwJwqln/dl5OSg/2JxkU7RvmjZvqcF9XbMr/AxLbecg601a99F0VhRQtYPzau5aN\n0FMNQCBiWodJcSwm90WiJ5qTfvoaEaVtdC8AnHoJ2MYxZr/X0yXaoP6FPhDDhSU=\n=JQXv\n-----END PGP SIGNATURE-----\n", "payload": "tree dc5b4257a6a733735fa31c4a125d7b01bcfa3fa1\nparent 79dd148458ba2e4756fcd86c8e48afbb29ece15d\nparent 4f4f7dfc00d69b8a94638ed1d9e666ada9911217\nauthor Mark Simulacrum <mark.simulacrum@gmail.com> 1528071485 -0600\ncommitter GitHub <noreply@github.com> 1528071485 -0600\n\nRollup merge of #51323 - nikic:switch-int-lowering, r=nagisa\n\nGenerate br for all two target SwitchInts\n\nInstead of only for booleans. This means that `if let` also becomes a br.\n\nApart from making the IR slightly simpler, this is supported by FastISel (#4353).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7ae1b26481664e1cc4b920dba9e59cedb8bd692", "html_url": "https://github.com/rust-lang/rust/commit/e7ae1b26481664e1cc4b920dba9e59cedb8bd692", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7ae1b26481664e1cc4b920dba9e59cedb8bd692/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79dd148458ba2e4756fcd86c8e48afbb29ece15d", "url": "https://api.github.com/repos/rust-lang/rust/commits/79dd148458ba2e4756fcd86c8e48afbb29ece15d", "html_url": "https://github.com/rust-lang/rust/commit/79dd148458ba2e4756fcd86c8e48afbb29ece15d"}, {"sha": "4f4f7dfc00d69b8a94638ed1d9e666ada9911217", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4f7dfc00d69b8a94638ed1d9e666ada9911217", "html_url": "https://github.com/rust-lang/rust/commit/4f4f7dfc00d69b8a94638ed1d9e666ada9911217"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "14d20b6dbe2973a53597fbf2579ee9a9f473bddf", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e7ae1b26481664e1cc4b920dba9e59cedb8bd692/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ae1b26481664e1cc4b920dba9e59cedb8bd692/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=e7ae1b26481664e1cc4b920dba9e59cedb8bd692", "patch": "@@ -191,14 +191,23 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n \n             mir::TerminatorKind::SwitchInt { ref discr, switch_ty, ref values, ref targets } => {\n                 let discr = self.codegen_operand(&bx, discr);\n-                if switch_ty == bx.tcx().types.bool {\n+                if targets.len() == 2 {\n+                    // If there are two targets, emit br instead of switch\n                     let lltrue = llblock(self, targets[0]);\n                     let llfalse = llblock(self, targets[1]);\n-                    if let [0] = values[..] {\n-                        bx.cond_br(discr.immediate(), llfalse, lltrue);\n+                    if switch_ty == bx.tcx().types.bool {\n+                        // Don't generate trivial icmps when switching on bool\n+                        if let [0] = values[..] {\n+                            bx.cond_br(discr.immediate(), llfalse, lltrue);\n+                        } else {\n+                            assert_eq!(&values[..], &[1]);\n+                            bx.cond_br(discr.immediate(), lltrue, llfalse);\n+                        }\n                     } else {\n-                        assert_eq!(&values[..], &[1]);\n-                        bx.cond_br(discr.immediate(), lltrue, llfalse);\n+                        let switch_llty = bx.cx.layout_of(switch_ty).immediate_llvm_type(bx.cx);\n+                        let llval = C_uint_big(switch_llty, values[0]);\n+                        let cmp = bx.icmp(llvm::IntEQ, discr.immediate(), llval);\n+                        bx.cond_br(cmp, lltrue, llfalse);\n                     }\n                 } else {\n                     let (otherwise, targets) = targets.split_last().unwrap();"}]}