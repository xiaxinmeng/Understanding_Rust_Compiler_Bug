{"sha": "977ac5b4dd48aab9c41d380a3fb141d9c120ad29", "node_id": "C_kwDOAAsO6NoAKDk3N2FjNWI0ZGQ0OGFhYjljNDFkMzgwYTNmYjE0MWQ5YzEyMGFkMjk", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-22T00:38:34Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-22T00:48:36Z"}, "message": "MIR: opt-in normalization of `BasicBlock` and `Local` numbering", "tree": {"sha": "bdbff758ebfecc1e2d03ffc654ad68eb7d16a4d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdbff758ebfecc1e2d03ffc654ad68eb7d16a4d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/977ac5b4dd48aab9c41d380a3fb141d9c120ad29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/977ac5b4dd48aab9c41d380a3fb141d9c120ad29", "html_url": "https://github.com/rust-lang/rust/commit/977ac5b4dd48aab9c41d380a3fb141d9c120ad29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/977ac5b4dd48aab9c41d380a3fb141d9c120ad29/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c5ac7894cae042678b98f239c412f4710071c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c5ac7894cae042678b98f239c412f4710071c2", "html_url": "https://github.com/rust-lang/rust/commit/57c5ac7894cae042678b98f239c412f4710071c2"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "54c138b6fbd4cf481957c72216359ac07dba95e4", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/977ac5b4dd48aab9c41d380a3fb141d9c120ad29/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977ac5b4dd48aab9c41d380a3fb141d9c120ad29/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=977ac5b4dd48aab9c41d380a3fb141d9c120ad29", "patch": "@@ -3,6 +3,7 @@\n #![deny(rustc::diagnostic_outside_of_impl)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n+#![feature(is_sorted)]\n #![feature(let_chains)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n@@ -84,6 +85,7 @@ mod match_branches;\n mod multiple_return_terminators;\n mod normalize_array_len;\n mod nrvo;\n+mod prettify;\n mod ref_prop;\n mod remove_noop_landing_pads;\n mod remove_storage_markers;\n@@ -581,6 +583,9 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &large_enums::EnumSizeOpt { discrepancy: 128 },\n             // Some cleanup necessary at least for LLVM and potentially other codegen backends.\n             &add_call_guards::CriticalCallEdges,\n+            // Cleanup for human readability, off by default.\n+            &prettify::ReorderBasicBlocks,\n+            &prettify::ReorderLocals,\n             // Dump the end result for testing and debugging purposes.\n             &dump_mir::Marker(\"PreCodegen\"),\n         ],"}, {"sha": "d3637405edc84b2cd8980d57262ca19f6533b782", "filename": "compiler/rustc_mir_transform/src/prettify.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/977ac5b4dd48aab9c41d380a3fb141d9c120ad29/compiler%2Frustc_mir_transform%2Fsrc%2Fprettify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977ac5b4dd48aab9c41d380a3fb141d9c120ad29/compiler%2Frustc_mir_transform%2Fsrc%2Fprettify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fprettify.rs?ref=977ac5b4dd48aab9c41d380a3fb141d9c120ad29", "patch": "@@ -0,0 +1,134 @@\n+//! These two passes provide no value to the compiler, so are off at every level.\n+//!\n+//! However, they can be enabled on the command line\n+//! (`-Zmir-enable-passes=+ReorderBasicBlocks,+ReorderLocals`)\n+//! to make the MIR easier to read for humans.\n+\n+use crate::MirPass;\n+use rustc_index::{bit_set::BitSet, IndexSlice, IndexVec};\n+use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+use rustc_session::Session;\n+\n+pub struct ReorderBasicBlocks;\n+\n+impl<'tcx> MirPass<'tcx> for ReorderBasicBlocks {\n+    fn is_enabled(&self, _session: &Session) -> bool {\n+        false\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        let rpo: IndexVec<BasicBlock, BasicBlock> =\n+            body.basic_blocks.postorder().iter().copied().rev().collect();\n+        if rpo.iter().is_sorted() {\n+            return;\n+        }\n+\n+        let mut updater = BasicBlockUpdater { map: rpo.invert_bijective_mapping(), tcx };\n+        debug_assert_eq!(updater.map[START_BLOCK], START_BLOCK);\n+        updater.visit_body(body);\n+\n+        permute(body.basic_blocks.as_mut(), &updater.map);\n+    }\n+}\n+\n+pub struct ReorderLocals;\n+\n+impl<'tcx> MirPass<'tcx> for ReorderLocals {\n+    fn is_enabled(&self, _session: &Session) -> bool {\n+        false\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        let mut finder =\n+            LocalFinder { map: IndexVec::new(), seen: BitSet::new_empty(body.local_decls.len()) };\n+\n+        // We can't reorder the return place or the arguments\n+        for i in 0..=body.arg_count {\n+            finder.track(Local::from_usize(i));\n+        }\n+\n+        for (bb, bbd) in body.basic_blocks.iter_enumerated() {\n+            finder.visit_basic_block_data(bb, bbd);\n+        }\n+\n+        // track everything in case there are some locals that we never saw,\n+        // such as in non-block things like debug info or in non-uses.\n+        for local in body.local_decls.indices() {\n+            finder.track(local);\n+        }\n+\n+        if finder.map.iter().is_sorted() {\n+            return;\n+        }\n+\n+        let mut updater = LocalUpdater { map: finder.map.invert_bijective_mapping(), tcx };\n+        debug_assert_eq!(updater.map[RETURN_PLACE], RETURN_PLACE);\n+        updater.visit_body_preserves_cfg(body);\n+\n+        permute(&mut body.local_decls, &updater.map);\n+    }\n+}\n+\n+fn permute<I: rustc_index::Idx + Ord, T>(data: &mut IndexVec<I, T>, map: &IndexSlice<I, I>) {\n+    // FIXME: It would be nice to have a less-awkward way to apply permutations,\n+    // but I don't know one that exists.  `sort_by_cached_key` has logic for it\n+    // internally, but not in a way that we're allowed to use here.\n+    let mut enumerated: Vec<_> = std::mem::take(data).into_iter_enumerated().collect();\n+    enumerated.sort_by_key(|p| map[p.0]);\n+    *data = enumerated.into_iter().map(|p| p.1).collect();\n+}\n+\n+struct BasicBlockUpdater<'tcx> {\n+    map: IndexVec<BasicBlock, BasicBlock>,\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for BasicBlockUpdater<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn visit_terminator(&mut self, terminator: &mut Terminator<'tcx>, _location: Location) {\n+        for succ in terminator.successors_mut() {\n+            *succ = self.map[*succ];\n+        }\n+    }\n+}\n+\n+struct LocalFinder {\n+    map: IndexVec<Local, Local>,\n+    seen: BitSet<Local>,\n+}\n+\n+impl LocalFinder {\n+    fn track(&mut self, l: Local) {\n+        if self.seen.insert(l) {\n+            self.map.push(l);\n+        }\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for LocalFinder {\n+    fn visit_local(&mut self, l: Local, context: PlaceContext, _location: Location) {\n+        if context.is_use() {\n+            self.track(l);\n+        }\n+    }\n+}\n+\n+struct LocalUpdater<'tcx> {\n+    pub map: IndexVec<Local, Local>,\n+    pub tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for LocalUpdater<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn visit_local(&mut self, l: &mut Local, _: PlaceContext, _: Location) {\n+        *l = self.map[*l];\n+    }\n+}"}]}