{"sha": "9b3bc7a9e9e35537823bc2a10fc078c1222ee7fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliM2JjN2E5ZTllMzU1Mzc4MjNiYzJhMTBmYzA3OGMxMjIyZWU3ZmQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-31T23:39:16Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-05T04:53:16Z"}, "message": "Remove `syntax::config::strip_unconfigured`, add `syntax::config::features`.", "tree": {"sha": "1698bab31e5af0348bbb99f1a2def0b9262be3c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1698bab31e5af0348bbb99f1a2def0b9262be3c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b3bc7a9e9e35537823bc2a10fc078c1222ee7fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3bc7a9e9e35537823bc2a10fc078c1222ee7fd", "html_url": "https://github.com/rust-lang/rust/commit/9b3bc7a9e9e35537823bc2a10fc078c1222ee7fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b3bc7a9e9e35537823bc2a10fc078c1222ee7fd/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "234d68b7d35687999c36bc39ffd414bca7373a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/234d68b7d35687999c36bc39ffd414bca7373a48", "html_url": "https://github.com/rust-lang/rust/commit/234d68b7d35687999c36bc39ffd414bca7373a48"}], "stats": {"total": 88, "additions": 41, "deletions": 47}, "files": [{"sha": "8ed5b579ffc3fdf19e01c976415abcb087f6fdc4", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b3bc7a9e9e35537823bc2a10fc078c1222ee7fd/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3bc7a9e9e35537823bc2a10fc078c1222ee7fd/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=9b3bc7a9e9e35537823bc2a10fc078c1222ee7fd", "patch": "@@ -551,7 +551,7 @@ pub struct ExpansionResult<'a> {\n /// Returns `None` if we're aborting after handling -W help.\n pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n                                            cstore: &CStore,\n-                                           mut krate: ast::Crate,\n+                                           krate: ast::Crate,\n                                            registry: Option<Registry>,\n                                            crate_name: &'a str,\n                                            addl_plugins: Option<Vec<String>>,\n@@ -562,21 +562,9 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n {\n     let time_passes = sess.time_passes();\n \n-    // strip before anything else because crate metadata may use #[cfg_attr]\n-    // and so macros can depend on configuration variables, such as\n-    //\n-    //   #[macro_use] #[cfg(foo)]\n-    //   mod bar { macro_rules! baz!(() => {{}}) }\n-    //\n-    // baz! should not use this definition unless foo is enabled.\n-\n-    krate = time(time_passes, \"configuration\", || {\n-        let (krate, features) =\n-            syntax::config::strip_unconfigured_items(krate, &sess.parse_sess, sess.opts.test);\n-        // these need to be set \"early\" so that expansion sees `quote` if enabled.\n-        *sess.features.borrow_mut() = features;\n-        krate\n-    });\n+    let (mut krate, features) = syntax::config::features(krate, &sess.parse_sess, sess.opts.test);\n+    // these need to be set \"early\" so that expansion sees `quote` if enabled.\n+    *sess.features.borrow_mut() = features;\n \n     *sess.crate_types.borrow_mut() = collect_crate_types(sess, &krate.attrs);\n     *sess.crate_disambiguator.borrow_mut() ="}, {"sha": "7f6395997abe1cc28cb0535c7b36601579ca716f", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/9b3bc7a9e9e35537823bc2a10fc078c1222ee7fd/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3bc7a9e9e35537823bc2a10fc078c1222ee7fd/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=9b3bc7a9e9e35537823bc2a10fc078c1222ee7fd", "patch": "@@ -10,7 +10,6 @@\n \n use attr::HasAttrs;\n use feature_gate::{emit_feature_err, EXPLAIN_STMT_ATTR_SYNTAX, Features, get_features, GateIssue};\n-use fold::Folder;\n use {fold, attr};\n use ast;\n use codemap::{Spanned, respan};\n@@ -27,6 +26,40 @@ pub struct StripUnconfigured<'a> {\n     pub features: Option<&'a Features>,\n }\n \n+// `cfg_attr`-process the crate's attributes and compute the crate's features.\n+pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool)\n+                -> (ast::Crate, Features) {\n+    let features;\n+    {\n+        let mut strip_unconfigured = StripUnconfigured {\n+            config: &krate.config.clone(),\n+            should_test: should_test,\n+            sess: sess,\n+            features: None,\n+        };\n+\n+        let unconfigured_attrs = krate.attrs.clone();\n+        let err_count = sess.span_diagnostic.err_count();\n+        if let Some(attrs) = strip_unconfigured.configure(krate.attrs) {\n+            krate.attrs = attrs;\n+        } else { // the entire crate is unconfigured\n+            krate.attrs = Vec::new();\n+            krate.module.items = Vec::new();\n+            return (krate, Features::new());\n+        }\n+\n+        features = get_features(&sess.span_diagnostic, &krate.attrs);\n+\n+        // Avoid reconfiguring malformed `cfg_attr`s\n+        if err_count == sess.span_diagnostic.err_count() {\n+            strip_unconfigured.features = Some(&features);\n+            strip_unconfigured.configure(unconfigured_attrs);\n+        }\n+    }\n+\n+    (krate, features)\n+}\n+\n impl<'a> StripUnconfigured<'a> {\n     fn configure<T: HasAttrs>(&mut self, node: T) -> Option<T> {\n         let node = self.process_cfg_attrs(node);\n@@ -125,34 +158,6 @@ impl<'a> StripUnconfigured<'a> {\n     }\n }\n \n-// Support conditional compilation by transforming the AST, stripping out\n-// any items that do not belong in the current configuration\n-pub fn strip_unconfigured_items(mut krate: ast::Crate, sess: &ParseSess, should_test: bool)\n-                                -> (ast::Crate, Features) {\n-    let features;\n-    {\n-        let mut strip_unconfigured = StripUnconfigured {\n-            config: &krate.config.clone(),\n-            should_test: should_test,\n-            sess: sess,\n-            features: None,\n-        };\n-\n-        let err_count = sess.span_diagnostic.err_count();\n-        let krate_attrs = strip_unconfigured.configure(krate.attrs.clone()).unwrap_or_default();\n-        features = get_features(&sess.span_diagnostic, &krate_attrs);\n-        if err_count < sess.span_diagnostic.err_count() {\n-            krate.attrs = krate_attrs.clone(); // Avoid reconfiguring malformed `cfg_attr`s\n-        }\n-\n-        strip_unconfigured.features = Some(&features);\n-        krate = strip_unconfigured.fold_crate(krate);\n-        krate.attrs = krate_attrs;\n-    }\n-\n-    (krate, features)\n-}\n-\n impl<'a> fold::Folder for StripUnconfigured<'a> {\n     fn fold_foreign_mod(&mut self, foreign_mod: ast::ForeignMod) -> ast::ForeignMod {\n         ast::ForeignMod {"}, {"sha": "92d053fd21b0183d3cf2bc4dbb1c747b486c7456", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b3bc7a9e9e35537823bc2a10fc078c1222ee7fd/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b3bc7a9e9e35537823bc2a10fc078c1222ee7fd/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9b3bc7a9e9e35537823bc2a10fc078c1222ee7fd", "patch": "@@ -719,8 +719,9 @@ pub fn expand_crate_with_expander(expander: &mut MacroExpander,\n     }\n \n     let items = SmallVector::many(c.module.items);\n-    expander.load_macros(&items);\n-    c.module.items = items.into();\n+    let configured = items.fold_with(&mut expander.strip_unconfigured());\n+    expander.load_macros(&configured);\n+    c.module.items = configured.into();\n \n     let err_count = expander.cx.parse_sess.span_diagnostic.err_count();\n     let mut ret = expander.fold_crate(c);"}]}