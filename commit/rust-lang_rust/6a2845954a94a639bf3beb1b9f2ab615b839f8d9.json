{"sha": "6a2845954a94a639bf3beb1b9f2ab615b839f8d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMjg0NTk1NGE5NGE2MzliZjNiZWIxYjlmMmFiNjE1YjgzOWY4ZDk=", "commit": {"author": {"name": "Clar Fon", "email": "them@lightdark.xyz", "date": "2018-12-17T22:28:27Z"}, "committer": {"name": "Clar Fon", "email": "them@lightdark.xyz", "date": "2019-01-22T22:45:11Z"}, "message": "Move ExactSizeIterator to own module", "tree": {"sha": "18a90fbce0efb59acc4874be74738e11ed8738eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18a90fbce0efb59acc4874be74738e11ed8738eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a2845954a94a639bf3beb1b9f2ab615b839f8d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2845954a94a639bf3beb1b9f2ab615b839f8d9", "html_url": "https://github.com/rust-lang/rust/commit/6a2845954a94a639bf3beb1b9f2ab615b839f8d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a2845954a94a639bf3beb1b9f2ab615b839f8d9/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34d5624255737db8478dab62d9dc3940495062e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/34d5624255737db8478dab62d9dc3940495062e6", "html_url": "https://github.com/rust-lang/rust/commit/34d5624255737db8478dab62d9dc3940495062e6"}], "stats": {"total": 288, "additions": 145, "deletions": 143}, "files": [{"sha": "3bfba29e2196026c40ab2836958ccd75ac8b1441", "filename": "src/libcore/iter/traits/exact_size.rs", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/6a2845954a94a639bf3beb1b9f2ab615b839f8d9/src%2Flibcore%2Fiter%2Ftraits%2Fexact_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2845954a94a639bf3beb1b9f2ab615b839f8d9/src%2Flibcore%2Fiter%2Ftraits%2Fexact_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fexact_size.rs?ref=6a2845954a94a639bf3beb1b9f2ab615b839f8d9", "patch": "@@ -0,0 +1,143 @@\n+/// An iterator that knows its exact length.\n+///\n+/// Many [`Iterator`]s don't know how many times they will iterate, but some do.\n+/// If an iterator knows how many times it can iterate, providing access to\n+/// that information can be useful. For example, if you want to iterate\n+/// backwards, a good start is to know where the end is.\n+///\n+/// When implementing an `ExactSizeIterator`, you must also implement\n+/// [`Iterator`]. When doing so, the implementation of [`size_hint`] *must*\n+/// return the exact size of the iterator.\n+///\n+/// [`Iterator`]: trait.Iterator.html\n+/// [`size_hint`]: trait.Iterator.html#method.size_hint\n+///\n+/// The [`len`] method has a default implementation, so you usually shouldn't\n+/// implement it. However, you may be able to provide a more performant\n+/// implementation than the default, so overriding it in this case makes sense.\n+///\n+/// [`len`]: #method.len\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// // a finite range knows exactly how many times it will iterate\n+/// let five = 0..5;\n+///\n+/// assert_eq!(5, five.len());\n+/// ```\n+///\n+/// In the [module level docs][moddocs], we implemented an [`Iterator`],\n+/// `Counter`. Let's implement `ExactSizeIterator` for it as well:\n+///\n+/// [moddocs]: index.html\n+///\n+/// ```\n+/// # struct Counter {\n+/// #     count: usize,\n+/// # }\n+/// # impl Counter {\n+/// #     fn new() -> Counter {\n+/// #         Counter { count: 0 }\n+/// #     }\n+/// # }\n+/// # impl Iterator for Counter {\n+/// #     type Item = usize;\n+/// #     fn next(&mut self) -> Option<usize> {\n+/// #         self.count += 1;\n+/// #         if self.count < 6 {\n+/// #             Some(self.count)\n+/// #         } else {\n+/// #             None\n+/// #         }\n+/// #     }\n+/// # }\n+/// impl ExactSizeIterator for Counter {\n+///     // We can easily calculate the remaining number of iterations.\n+///     fn len(&self) -> usize {\n+///         5 - self.count\n+///     }\n+/// }\n+///\n+/// // And now we can use it!\n+///\n+/// let counter = Counter::new();\n+///\n+/// assert_eq!(5, counter.len());\n+/// ```\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait ExactSizeIterator: Iterator {\n+    /// Returns the exact number of times the iterator will iterate.\n+    ///\n+    /// This method has a default implementation, so you usually should not\n+    /// implement it directly. However, if you can provide a more efficient\n+    /// implementation, you can do so. See the [trait-level] docs for an\n+    /// example.\n+    ///\n+    /// This function has the same safety guarantees as the [`size_hint`]\n+    /// function.\n+    ///\n+    /// [trait-level]: trait.ExactSizeIterator.html\n+    /// [`size_hint`]: trait.Iterator.html#method.size_hint\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// // a finite range knows exactly how many times it will iterate\n+    /// let five = 0..5;\n+    ///\n+    /// assert_eq!(5, five.len());\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn len(&self) -> usize {\n+        let (lower, upper) = self.size_hint();\n+        // Note: This assertion is overly defensive, but it checks the invariant\n+        // guaranteed by the trait. If this trait were rust-internal,\n+        // we could use debug_assert!; assert_eq! will check all Rust user\n+        // implementations too.\n+        assert_eq!(upper, Some(lower));\n+        lower\n+    }\n+\n+    /// Returns whether the iterator is empty.\n+    ///\n+    /// This method has a default implementation using `self.len()`, so you\n+    /// don't need to implement it yourself.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(exact_size_is_empty)]\n+    ///\n+    /// let mut one_element = std::iter::once(0);\n+    /// assert!(!one_element.is_empty());\n+    ///\n+    /// assert_eq!(one_element.next(), Some(0));\n+    /// assert!(one_element.is_empty());\n+    ///\n+    /// assert_eq!(one_element.next(), None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"exact_size_is_empty\", issue = \"35428\")]\n+    fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for &mut I {\n+    fn len(&self) -> usize {\n+        (**self).len()\n+    }\n+    fn is_empty(&self) -> bool {\n+        (**self).is_empty()\n+    }\n+}\n+"}, {"sha": "5df3b0f69a5630aed9f1cf2088bb97bdf6216462", "filename": "src/libcore/iter/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 143, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/6a2845954a94a639bf3beb1b9f2ab615b839f8d9/src%2Flibcore%2Fiter%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2845954a94a639bf3beb1b9f2ab615b839f8d9/src%2Flibcore%2Fiter%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fmod.rs?ref=6a2845954a94a639bf3beb1b9f2ab615b839f8d9", "patch": "@@ -3,9 +3,11 @@ use num::Wrapping;\n \n mod iterator;\n mod double_ended;\n+mod exact_size;\n \n pub use self::iterator::Iterator;\n pub use self::double_ended::DoubleEndedIterator;\n+pub use self::exact_size::ExactSizeIterator;\n \n /// Conversion from an `Iterator`.\n ///\n@@ -357,149 +359,6 @@ impl Extend<()> for () {\n     }\n }\n \n-/// An iterator that knows its exact length.\n-///\n-/// Many [`Iterator`]s don't know how many times they will iterate, but some do.\n-/// If an iterator knows how many times it can iterate, providing access to\n-/// that information can be useful. For example, if you want to iterate\n-/// backwards, a good start is to know where the end is.\n-///\n-/// When implementing an `ExactSizeIterator`, you must also implement\n-/// [`Iterator`]. When doing so, the implementation of [`size_hint`] *must*\n-/// return the exact size of the iterator.\n-///\n-/// [`Iterator`]: trait.Iterator.html\n-/// [`size_hint`]: trait.Iterator.html#method.size_hint\n-///\n-/// The [`len`] method has a default implementation, so you usually shouldn't\n-/// implement it. However, you may be able to provide a more performant\n-/// implementation than the default, so overriding it in this case makes sense.\n-///\n-/// [`len`]: #method.len\n-///\n-/// # Examples\n-///\n-/// Basic usage:\n-///\n-/// ```\n-/// // a finite range knows exactly how many times it will iterate\n-/// let five = 0..5;\n-///\n-/// assert_eq!(5, five.len());\n-/// ```\n-///\n-/// In the [module level docs][moddocs], we implemented an [`Iterator`],\n-/// `Counter`. Let's implement `ExactSizeIterator` for it as well:\n-///\n-/// [moddocs]: index.html\n-///\n-/// ```\n-/// # struct Counter {\n-/// #     count: usize,\n-/// # }\n-/// # impl Counter {\n-/// #     fn new() -> Counter {\n-/// #         Counter { count: 0 }\n-/// #     }\n-/// # }\n-/// # impl Iterator for Counter {\n-/// #     type Item = usize;\n-/// #     fn next(&mut self) -> Option<usize> {\n-/// #         self.count += 1;\n-/// #         if self.count < 6 {\n-/// #             Some(self.count)\n-/// #         } else {\n-/// #             None\n-/// #         }\n-/// #     }\n-/// # }\n-/// impl ExactSizeIterator for Counter {\n-///     // We can easily calculate the remaining number of iterations.\n-///     fn len(&self) -> usize {\n-///         5 - self.count\n-///     }\n-/// }\n-///\n-/// // And now we can use it!\n-///\n-/// let counter = Counter::new();\n-///\n-/// assert_eq!(5, counter.len());\n-/// ```\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait ExactSizeIterator: Iterator {\n-    /// Returns the exact number of times the iterator will iterate.\n-    ///\n-    /// This method has a default implementation, so you usually should not\n-    /// implement it directly. However, if you can provide a more efficient\n-    /// implementation, you can do so. See the [trait-level] docs for an\n-    /// example.\n-    ///\n-    /// This function has the same safety guarantees as the [`size_hint`]\n-    /// function.\n-    ///\n-    /// [trait-level]: trait.ExactSizeIterator.html\n-    /// [`size_hint`]: trait.Iterator.html#method.size_hint\n-    ///\n-    /// # Examples\n-    ///\n-    /// Basic usage:\n-    ///\n-    /// ```\n-    /// // a finite range knows exactly how many times it will iterate\n-    /// let five = 0..5;\n-    ///\n-    /// assert_eq!(5, five.len());\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn len(&self) -> usize {\n-        let (lower, upper) = self.size_hint();\n-        // Note: This assertion is overly defensive, but it checks the invariant\n-        // guaranteed by the trait. If this trait were rust-internal,\n-        // we could use debug_assert!; assert_eq! will check all Rust user\n-        // implementations too.\n-        assert_eq!(upper, Some(lower));\n-        lower\n-    }\n-\n-    /// Returns whether the iterator is empty.\n-    ///\n-    /// This method has a default implementation using `self.len()`, so you\n-    /// don't need to implement it yourself.\n-    ///\n-    /// # Examples\n-    ///\n-    /// Basic usage:\n-    ///\n-    /// ```\n-    /// #![feature(exact_size_is_empty)]\n-    ///\n-    /// let mut one_element = std::iter::once(0);\n-    /// assert!(!one_element.is_empty());\n-    ///\n-    /// assert_eq!(one_element.next(), Some(0));\n-    /// assert!(one_element.is_empty());\n-    ///\n-    /// assert_eq!(one_element.next(), None);\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"exact_size_is_empty\", issue = \"35428\")]\n-    fn is_empty(&self) -> bool {\n-        self.len() == 0\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for &mut I {\n-    fn len(&self) -> usize {\n-        (**self).len()\n-    }\n-    fn is_empty(&self) -> bool {\n-        (**self).is_empty()\n-    }\n-}\n-\n /// Trait to represent types that can be created by summing up an iterator.\n ///\n /// This trait is used to implement the [`sum`] method on iterators. Types which"}]}