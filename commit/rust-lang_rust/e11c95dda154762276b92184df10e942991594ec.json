{"sha": "e11c95dda154762276b92184df10e942991594ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMWM5NWRkYTE1NDc2MjI3NmI5MjE4NGRmMTBlOTQyOTkxNTk0ZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-21T11:28:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-21T11:28:14Z"}, "message": "Auto merge of #50336 - japaric:llvm-tools, r=Mark-Simulacrum\n\nship LLVM tools with the toolchain\n\nthis PR adds llvm-{nm,objcopy,objdump,size} to the rustc sysroot (right next to LLD)\n\nthis slightly increases the size of the rustc component. I measured these numbers on x86_64 Linux:\n\n- rustc-1.27.0-dev-x86_64-unknown-linux-gnu.tar.gz 180M -> 193M (+7%)\n- rustc-1.27.0-dev-x86_64-unknown-linux-gnu.tar.xz 129M -> 137M (+6%)\n\nr? @alexcrichton\ncc #49584", "tree": {"sha": "6c2e7ac9808913d426b936d341629b02858aef6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c2e7ac9808913d426b936d341629b02858aef6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e11c95dda154762276b92184df10e942991594ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e11c95dda154762276b92184df10e942991594ec", "html_url": "https://github.com/rust-lang/rust/commit/e11c95dda154762276b92184df10e942991594ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e11c95dda154762276b92184df10e942991594ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95979dcfb201f1d6906a2f256e5e311513cab4ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/95979dcfb201f1d6906a2f256e5e311513cab4ea", "html_url": "https://github.com/rust-lang/rust/commit/95979dcfb201f1d6906a2f256e5e311513cab4ea"}, {"sha": "9a96876d2d1f8e2a4ca066f132c4b6ddec1b94ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a96876d2d1f8e2a4ca066f132c4b6ddec1b94ff", "html_url": "https://github.com/rust-lang/rust/commit/9a96876d2d1f8e2a4ca066f132c4b6ddec1b94ff"}], "stats": {"total": 138, "additions": 134, "deletions": 4}, "files": [{"sha": "0578f929224d99a0cbbaf97e64a2f29477dc7b60", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11c95dda154762276b92184df10e942991594ec/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/e11c95dda154762276b92184df10e942991594ec/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=e11c95dda154762276b92184df10e942991594ec", "patch": "@@ -350,6 +350,10 @@\n # rustc to execute.\n #lld = false\n \n+# Indicates whether some LLVM tools, like llvm-objdump, will be made available in the\n+# sysroot.\n+#llvm-tools = false\n+\n # Whether to deny warnings in crates\n #deny-warnings = true\n "}, {"sha": "08bdff364f84be0315e7e10e100bc717eb46dbc5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e11c95dda154762276b92184df10e942991594ec/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11c95dda154762276b92184df10e942991594ec/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e11c95dda154762276b92184df10e942991594ec", "patch": "@@ -453,6 +453,7 @@ impl<'a> Builder<'a> {\n                 dist::Cargo,\n                 dist::Rls,\n                 dist::Rustfmt,\n+                dist::LlvmTools,\n                 dist::Extended,\n                 dist::HashSign\n             ),"}, {"sha": "e4d467c9272458b17813452ac9a8ec466cdba9c0", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e11c95dda154762276b92184df10e942991594ec/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11c95dda154762276b92184df10e942991594ec/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=e11c95dda154762276b92184df10e942991594ec", "patch": "@@ -88,6 +88,7 @@ pub struct Config {\n     pub llvm_link_jobs: Option<u32>,\n \n     pub lld_enabled: bool,\n+    pub llvm_tools_enabled: bool,\n \n     // rust codegen options\n     pub rust_optimize: bool,\n@@ -309,6 +310,7 @@ struct Rust {\n     codegen_backends_dir: Option<String>,\n     wasm_syscall: Option<bool>,\n     lld: Option<bool>,\n+    llvm_tools: Option<bool>,\n     deny_warnings: Option<bool>,\n     backtrace_on_ice: Option<bool>,\n }\n@@ -536,6 +538,7 @@ impl Config {\n             }\n             set(&mut config.wasm_syscall, rust.wasm_syscall);\n             set(&mut config.lld_enabled, rust.lld);\n+            set(&mut config.llvm_tools_enabled, rust.llvm_tools);\n             config.rustc_parallel_queries = rust.experimental_parallel_queries.unwrap_or(false);\n             config.rustc_default_linker = rust.default_linker.clone();\n             config.musl_root = rust.musl_root.clone().map(PathBuf::from);"}, {"sha": "80fa96509bd87f2a13cd563ebfd4086fdef2a306", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e11c95dda154762276b92184df10e942991594ec/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/e11c95dda154762276b92184df10e942991594ec/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=e11c95dda154762276b92184df10e942991594ec", "patch": "@@ -335,6 +335,7 @@ def set(key, value):\n     elif option.name == 'full-tools':\n         set('rust.codegen-backends', ['llvm', 'emscripten'])\n         set('rust.lld', True)\n+        set('rust.llvm-tools', True)\n         set('build.extended', True)\n     elif option.name == 'option-checking':\n         # this was handled above"}, {"sha": "cbb42a04bdd52a838f2a3433f396193ee6e394c8", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e11c95dda154762276b92184df10e942991594ec/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11c95dda154762276b92184df10e942991594ec/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=e11c95dda154762276b92184df10e942991594ec", "patch": "@@ -26,7 +26,7 @@ use std::process::{Command, Stdio};\n \n use build_helper::output;\n \n-use {Compiler, Mode};\n+use {Compiler, Mode, LLVM_TOOLS};\n use channel;\n use util::{libdir, is_dylib, exe};\n use builder::{Builder, RunConfig, ShouldRun, Step};\n@@ -43,6 +43,8 @@ pub fn pkgname(builder: &Builder, component: &str) -> String {\n         format!(\"{}-{}\", component, builder.rls_package_vers())\n     } else if component == \"rustfmt\" {\n         format!(\"{}-{}\", component, builder.rustfmt_package_vers())\n+    } else if component == \"llvm-tools\" {\n+        format!(\"{}-{}\", component, builder.llvm_tools_vers())\n     } else {\n         assert!(component.starts_with(\"rust\"));\n         format!(\"{}-{}\", component, builder.rust_package_vers())\n@@ -394,7 +396,7 @@ impl Step for Rustc {\n         let compiler = self.compiler;\n         let host = self.compiler.host;\n \n-        builder.info(&format!(\"Dist rustc stage{} ({})\", compiler.stage, compiler.host));\n+        builder.info(&format!(\"Dist rustc stage{} ({})\", compiler.stage, host));\n         let name = pkgname(builder, \"rustc\");\n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, host));\n         let _ = fs::remove_dir_all(&image);\n@@ -1738,6 +1740,7 @@ impl Step for HashSign {\n         cmd.arg(builder.package_vers(&builder.release_num(\"cargo\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rls\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rustfmt\")));\n+        cmd.arg(builder.llvm_tools_vers());\n         cmd.arg(addr);\n \n         builder.create_dir(&distdir(builder));\n@@ -1748,3 +1751,78 @@ impl Step for HashSign {\n         assert!(status.success());\n     }\n }\n+\n+#[derive(Clone, Debug, Eq, Hash, PartialEq)]\n+pub struct LlvmTools {\n+    pub stage: u32,\n+    pub compiler: Compiler,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for LlvmTools {\n+    type Output = Option<PathBuf>;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"llvm-tools\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(LlvmTools {\n+            stage: run.builder.top_stage,\n+            compiler: run.builder.compiler(run.builder.top_stage, run.target),\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) -> Option<PathBuf> {\n+        let compiler = self.compiler;\n+        let host = compiler.host;\n+\n+        let stage = self.stage;\n+        assert!(builder.config.extended);\n+\n+        builder.info(&format!(\"Dist LlvmTools stage{} ({})\", stage, host));\n+        let src = builder.src.join(\"src/llvm\");\n+        let name = pkgname(builder, \"llvm-tools\");\n+\n+        let tmp = tmpdir(builder);\n+        let image = tmp.join(\"llvm-tools-image\");\n+        drop(fs::remove_dir_all(&image));\n+        t!(fs::create_dir_all(&image.join(\"bin\")));\n+\n+        // Prepare the image directory\n+        for tool in LLVM_TOOLS {\n+            let exe = builder\n+                .llvm_out(host)\n+                .join(\"bin\")\n+                .join(exe(tool, &compiler.host));\n+            builder.install(&exe, &image.join(\"bin\"), 0o755);\n+        }\n+\n+        // Prepare the overlay\n+        let overlay = tmp.join(\"llvm-tools-overlay\");\n+        drop(fs::remove_dir_all(&overlay));\n+        builder.create_dir(&overlay);\n+        builder.install(&src.join(\"README.txt\"), &overlay, 0o644);\n+        builder.install(&src.join(\"LICENSE.TXT\"), &overlay, 0o644);\n+\n+        // Generate the installer tarball\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+            .arg(\"--product-name=Rust\")\n+            .arg(\"--rel-manifest-dir=rustlib\")\n+            .arg(\"--success-message=llvm-tools-installed.\")\n+            .arg(\"--image-dir\").arg(&image)\n+            .arg(\"--work-dir\").arg(&tmpdir(builder))\n+            .arg(\"--output-dir\").arg(&distdir(builder))\n+            .arg(\"--non-installed-overlay\").arg(&overlay)\n+            .arg(format!(\"--package-name={}-{}\", name, host))\n+            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n+            .arg(\"--component-name=llvm-tools\");\n+\n+\n+        builder.run(&mut cmd);\n+        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host)))\n+    }\n+}"}, {"sha": "ae37d67e5d7bc8310ccd9af5598be8ce70d00902", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e11c95dda154762276b92184df10e942991594ec/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11c95dda154762276b92184df10e942991594ec/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=e11c95dda154762276b92184df10e942991594ec", "patch": "@@ -199,6 +199,14 @@ use flags::Subcommand;\n use cache::{Interned, INTERNER};\n use toolstate::ToolState;\n \n+const LLVM_TOOLS: &[&str] = &[\n+    \"llvm-nm\", // used to inspect binaries; it shows symbol names, their sizes and visibility\n+    \"llvm-objcopy\", // used to transform ELFs into binary format which flashing tools consume\n+    \"llvm-objdump\", // used to disassemble programs\n+    \"llvm-profdata\", // used to inspect and merge files generated by profiles\n+    \"llvm-size\", // prints the size of the linker sections of a program\n+];\n+\n /// A structure representing a Rust compiler.\n ///\n /// Each compiler has a `stage` that it is associated with and a `host` that\n@@ -965,6 +973,27 @@ impl Build {\n         self.package_vers(&self.release_num(\"rustfmt\"))\n     }\n \n+    fn llvm_tools_vers(&self) -> String {\n+        // japaric: should we use LLVM version here?\n+        // let stdout = build_helper::output(\n+        //     Command::new(self.llvm_out(self.config.build).join(\"build/bin/llvm-size\"))\n+        //         .arg(\"--version\"),\n+        // );\n+\n+        // for line in stdout.lines() {\n+        //     if line.contains(\"LLVM version\") {\n+        //         if let Some(vers) = line.split_whitespace().nth(2) {\n+        //             return vers.to_string();\n+        //         }\n+        //     }\n+        // }\n+\n+        // panic!(\"The output of $LLVM_TOOL has changed; \\\n+        //         please fix `bootstrap::Build.llvm_tools_vers`\");\n+\n+        self.rust_version()\n+    }\n+\n     /// Returns the `version` string associated with this compiler for Rust\n     /// itself.\n     ///"}, {"sha": "7dcdbe9c931cf23984fa9816759f51ddac79b098", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e11c95dda154762276b92184df10e942991594ec/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11c95dda154762276b92184df10e942991594ec/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=e11c95dda154762276b92184df10e942991594ec", "patch": "@@ -167,8 +167,22 @@ impl Step for Llvm {\n         // which saves both memory during parallel links and overall disk space\n         // for the tools.  We don't distribute any of those tools, so this is\n         // just a local concern.  However, it doesn't work well everywhere.\n-        if target.contains(\"linux-gnu\") || target.contains(\"apple-darwin\") {\n-           cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n+        //\n+        // If we are shipping llvm tools then we statically link them LLVM\n+        if (target.contains(\"linux-gnu\") || target.contains(\"apple-darwin\")) &&\n+            !builder.config.llvm_tools_enabled {\n+                cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n+        }\n+\n+        // For distribution we want the LLVM tools to be *statically* linked to libstdc++\n+        if builder.config.llvm_tools_enabled {\n+            if !target.contains(\"windows\") {\n+                if target.contains(\"apple\") {\n+                    cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", \"-static-libstdc++\");\n+                } else {\n+                    cfg.define(\"CMAKE_EXE_LINKER_FLAGS\", \"-Wl,-Bsymbolic -static-libstdc++\");\n+                }\n+            }\n         }\n \n         if target.contains(\"msvc\") {"}]}