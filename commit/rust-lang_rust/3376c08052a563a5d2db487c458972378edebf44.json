{"sha": "3376c08052a563a5d2db487c458972378edebf44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNzZjMDgwNTJhNTYzYTVkMmRiNDg3YzQ1ODk3MjM3OGVkZWJmNDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-02T15:52:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-02T15:52:11Z"}, "message": "Merge #2018\n\n2018: assists: add assist for custom implementation for derived trait r=matklad a=paulolieuthier\n\nPlease, tell me if something could be more idiomatic or efficient.\r\n\r\nFixes #1256.\n\nCo-authored-by: Paulo Lieuthier <paulolieuthier@gmail.com>", "tree": {"sha": "b36bc027c62ac8dd4cf89fe8415b89666f501b5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b36bc027c62ac8dd4cf89fe8415b89666f501b5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3376c08052a563a5d2db487c458972378edebf44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd5TMrCRBK7hj4Ov3rIwAAdHIIAGLQRNH8/SiqgWLVZErcoPRD\n+7gaE3bMqNJtc4J9gTfrKA9MGsELU0oAxQoJfcza25gn3L+eoO40uKQ4g1S2G7Pj\nXhnBpgwvypLVPNtF7KADjzp8JTPWzH1DzsU8Wy4X2LhmKZo/Qrill3Br1IZdOW0c\nVqcRjeGs+stzD1Ns0s4YteCM/8ZfNBeUGTE7QZTSbDp+LYZwTriW1euCWTWyJAEJ\nSTvkPt4+DAMJf+CjtN3dcvmtpGtxYoxKWQrJz1WdZY7NX0jD0d0R0TSK73u4j/8q\nKlmAqe2WyFokmMrlxcToBKBP1UxmFumHECZUwHIJ1Ds+AcLFyXQChA8RW9j36f8=\n=/a8+\n-----END PGP SIGNATURE-----\n", "payload": "tree b36bc027c62ac8dd4cf89fe8415b89666f501b5d\nparent c5b322e3df0f3c9d81676bece76bcb76eac6e1ba\nparent 5b2d52c8df5235fce9d2ae78adc3182a9659b268\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1575301931 +0000\ncommitter GitHub <noreply@github.com> 1575301931 +0000\n\nMerge #2018\n\n2018: assists: add assist for custom implementation for derived trait r=matklad a=paulolieuthier\n\nPlease, tell me if something could be more idiomatic or efficient.\r\n\r\nFixes #1256.\n\nCo-authored-by: Paulo Lieuthier <paulolieuthier@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3376c08052a563a5d2db487c458972378edebf44", "html_url": "https://github.com/rust-lang/rust/commit/3376c08052a563a5d2db487c458972378edebf44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3376c08052a563a5d2db487c458972378edebf44/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5b322e3df0f3c9d81676bece76bcb76eac6e1ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b322e3df0f3c9d81676bece76bcb76eac6e1ba", "html_url": "https://github.com/rust-lang/rust/commit/c5b322e3df0f3c9d81676bece76bcb76eac6e1ba"}, {"sha": "5b2d52c8df5235fce9d2ae78adc3182a9659b268", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b2d52c8df5235fce9d2ae78adc3182a9659b268", "html_url": "https://github.com/rust-lang/rust/commit/5b2d52c8df5235fce9d2ae78adc3182a9659b268"}], "stats": {"total": 245, "additions": 245, "deletions": 0}, "files": [{"sha": "037306fd67d237e7a90385c6b967599694b92b5c", "filename": "crates/ra_assists/src/assists/add_custom_impl.rs", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/3376c08052a563a5d2db487c458972378edebf44/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3376c08052a563a5d2db487c458972378edebf44/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs?ref=3376c08052a563a5d2db487c458972378edebf44", "patch": "@@ -0,0 +1,206 @@\n+//! FIXME: write short doc here\n+\n+use crate::{Assist, AssistCtx, AssistId};\n+use hir::db::HirDatabase;\n+use join_to_string::join;\n+use ra_syntax::{\n+    ast::{self, AstNode},\n+    Direction, SmolStr,\n+    SyntaxKind::{IDENT, WHITESPACE},\n+    TextRange, TextUnit,\n+};\n+\n+const DERIVE_TRAIT: &'static str = \"derive\";\n+\n+// Assist: add_custom_impl\n+//\n+// Adds impl block for derived trait.\n+//\n+// ```\n+// #[derive(Deb<|>ug, Display)]\n+// struct S;\n+// ```\n+// ->\n+// ```\n+// #[derive(Display)]\n+// struct S;\n+//\n+// impl Debug for S {\n+//\n+// }\n+// ```\n+pub(crate) fn add_custom_impl(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let input = ctx.find_node_at_offset::<ast::AttrInput>()?;\n+    let attr = input.syntax().parent().and_then(ast::Attr::cast)?;\n+\n+    let attr_name = attr\n+        .syntax()\n+        .descendants_with_tokens()\n+        .filter(|t| t.kind() == IDENT)\n+        .find_map(|i| i.into_token())\n+        .filter(|t| *t.text() == DERIVE_TRAIT)?\n+        .text()\n+        .clone();\n+\n+    let trait_token =\n+        ctx.token_at_offset().filter(|t| t.kind() == IDENT && *t.text() != attr_name).next()?;\n+\n+    let annotated = attr.syntax().siblings(Direction::Next).find_map(|s| ast::Name::cast(s))?;\n+    let annotated_name = annotated.syntax().text().to_string();\n+    let start_offset = annotated.syntax().parent()?.text_range().end();\n+\n+    ctx.add_assist(AssistId(\"add_custom_impl\"), \"add custom impl\", |edit| {\n+        edit.target(attr.syntax().text_range());\n+\n+        let new_attr_input = input\n+            .syntax()\n+            .descendants_with_tokens()\n+            .filter(|t| t.kind() == IDENT)\n+            .filter_map(|t| t.into_token().map(|t| t.text().clone()))\n+            .filter(|t| t != trait_token.text())\n+            .collect::<Vec<SmolStr>>();\n+        let has_more_derives = new_attr_input.len() > 0;\n+        let new_attr_input =\n+            join(new_attr_input.iter()).separator(\", \").surround_with(\"(\", \")\").to_string();\n+        let new_attr_input_len = new_attr_input.len();\n+\n+        let mut buf = String::new();\n+        buf.push_str(\"\\n\\nimpl \");\n+        buf.push_str(trait_token.text().as_str());\n+        buf.push_str(\" for \");\n+        buf.push_str(annotated_name.as_str());\n+        buf.push_str(\" {\\n\");\n+\n+        let cursor_delta = if has_more_derives {\n+            edit.replace(input.syntax().text_range(), new_attr_input);\n+            input.syntax().text_range().len() - TextUnit::from_usize(new_attr_input_len)\n+        } else {\n+            let attr_range = attr.syntax().text_range();\n+            edit.delete(attr_range);\n+\n+            let line_break_range = attr\n+                .syntax()\n+                .next_sibling_or_token()\n+                .filter(|t| t.kind() == WHITESPACE)\n+                .map(|t| t.text_range())\n+                .unwrap_or(TextRange::from_to(TextUnit::from(0), TextUnit::from(0)));\n+            edit.delete(line_break_range);\n+\n+            attr_range.len() + line_break_range.len()\n+        };\n+\n+        edit.set_cursor(start_offset + TextUnit::of_str(&buf) - cursor_delta);\n+        buf.push_str(\"\\n}\");\n+        edit.insert(start_offset, buf);\n+    })\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n+\n+    #[test]\n+    fn add_custom_impl_for_unique_input() {\n+        check_assist(\n+            add_custom_impl,\n+            \"\n+#[derive(Debu<|>g)]\n+struct Foo {\n+    bar: String,\n+}\n+            \",\n+            \"\n+struct Foo {\n+    bar: String,\n+}\n+\n+impl Debug for Foo {\n+<|>\n+}\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_for_with_visibility_modifier() {\n+        check_assist(\n+            add_custom_impl,\n+            \"\n+#[derive(Debug<|>)]\n+pub struct Foo {\n+    bar: String,\n+}\n+            \",\n+            \"\n+pub struct Foo {\n+    bar: String,\n+}\n+\n+impl Debug for Foo {\n+<|>\n+}\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_when_multiple_inputs() {\n+        check_assist(\n+            add_custom_impl,\n+            \"\n+#[derive(Display, Debug<|>, Serialize)]\n+struct Foo {}\n+            \",\n+            \"\n+#[derive(Display, Serialize)]\n+struct Foo {}\n+\n+impl Debug for Foo {\n+<|>\n+}\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_ignore_derive_macro_without_input() {\n+        check_assist_not_applicable(\n+            add_custom_impl,\n+            \"\n+#[derive(<|>)]\n+struct Foo {}\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_ignore_if_cursor_on_param() {\n+        check_assist_not_applicable(\n+            add_custom_impl,\n+            \"\n+#[derive<|>(Debug)]\n+struct Foo {}\n+            \",\n+        );\n+\n+        check_assist_not_applicable(\n+            add_custom_impl,\n+            \"\n+#[derive(Debug)<|>]\n+struct Foo {}\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_ignore_if_not_derive() {\n+        check_assist_not_applicable(\n+            add_custom_impl,\n+            \"\n+#[allow(non_camel_<|>case_types)]\n+struct Foo {}\n+            \",\n+        )\n+    }\n+}"}, {"sha": "4586eeb5923fe5a9cc39b714da98d5220934d895", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3376c08052a563a5d2db487c458972378edebf44/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3376c08052a563a5d2db487c458972378edebf44/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=3376c08052a563a5d2db487c458972378edebf44", "patch": "@@ -2,6 +2,25 @@\n \n use super::check;\n \n+#[test]\n+fn doctest_add_custom_impl() {\n+    check(\n+        \"add_custom_impl\",\n+        r#####\"\n+#[derive(Deb<|>ug, Display)]\n+struct S;\n+\"#####,\n+        r#####\"\n+#[derive(Display)]\n+struct S;\n+\n+impl Debug for S {\n+\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_add_derive() {\n     check("}, {"sha": "98fb20b227f98f0e4b32029ec4d7396a64872754", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3376c08052a563a5d2db487c458972378edebf44/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3376c08052a563a5d2db487c458972378edebf44/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=3376c08052a563a5d2db487c458972378edebf44", "patch": "@@ -95,6 +95,7 @@ mod assists {\n     mod add_derive;\n     mod add_explicit_type;\n     mod add_impl;\n+    mod add_custom_impl;\n     mod add_new;\n     mod apply_demorgan;\n     mod invert_if;\n@@ -121,6 +122,7 @@ mod assists {\n             add_derive::add_derive,\n             add_explicit_type::add_explicit_type,\n             add_impl::add_impl,\n+            add_custom_impl::add_custom_impl,\n             add_new::add_new,\n             apply_demorgan::apply_demorgan,\n             invert_if::invert_if,"}, {"sha": "334ba450f5a17e3feda99287683cbd5052ac1c4a", "filename": "docs/user/assists.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3376c08052a563a5d2db487c458972378edebf44/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/3376c08052a563a5d2db487c458972378edebf44/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=3376c08052a563a5d2db487c458972378edebf44", "patch": "@@ -3,6 +3,24 @@\n Cursor position or selection is signified by `\u2503` character.\n \n \n+## `add_custom_impl`\n+\n+Adds impl block for derived trait.\n+\n+```rust\n+// BEFORE\n+#[derive(Deb\u2503ug, Display)]\n+struct S;\n+\n+// AFTER\n+#[derive(Display)]\n+struct S;\n+\n+impl Debug for S {\n+\n+}\n+```\n+\n ## `add_derive`\n \n Adds a new `#[derive()]` clause to a struct or enum."}]}