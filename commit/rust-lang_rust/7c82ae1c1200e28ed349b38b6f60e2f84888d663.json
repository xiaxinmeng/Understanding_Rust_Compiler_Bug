{"sha": "7c82ae1c1200e28ed349b38b6f60e2f84888d663", "node_id": "C_kwDOAAsO6NoAKDdjODJhZTFjMTIwMGUyOGVkMzQ5YjM4YjZmNjBlMmY4NDg4OGQ2NjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-12T16:21:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-12T16:21:14Z"}, "message": "Auto merge of #8213 - paolobarbolini:size-of-as-bits, r=flip1995\n\nAdd `manual_bits` lint\n\nCloses #6670\n\n---\n\nchangelog: new lint: [`manual_bits`]", "tree": {"sha": "508f66c972877cfd98bf09a41f8e6923afa6c222", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/508f66c972877cfd98bf09a41f8e6923afa6c222"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c82ae1c1200e28ed349b38b6f60e2f84888d663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c82ae1c1200e28ed349b38b6f60e2f84888d663", "html_url": "https://github.com/rust-lang/rust/commit/7c82ae1c1200e28ed349b38b6f60e2f84888d663", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c82ae1c1200e28ed349b38b6f60e2f84888d663/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9cae79d7fb18d797ae1472ac03b89a5fda17091", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9cae79d7fb18d797ae1472ac03b89a5fda17091", "html_url": "https://github.com/rust-lang/rust/commit/b9cae79d7fb18d797ae1472ac03b89a5fda17091"}, {"sha": "166737f3cbbe2157454c759cb56662c941c6031c", "url": "https://api.github.com/repos/rust-lang/rust/commits/166737f3cbbe2157454c759cb56662c941c6031c", "html_url": "https://github.com/rust-lang/rust/commit/166737f3cbbe2157454c759cb56662c941c6031c"}], "stats": {"total": 365, "additions": 364, "deletions": 1}, "files": [{"sha": "8f4da9a382792a31443c9a81c6db1794ff2a04d1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c82ae1c1200e28ed349b38b6f60e2f84888d663/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c82ae1c1200e28ed349b38b6f60e2f84888d663/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=7c82ae1c1200e28ed349b38b6f60e2f84888d663", "patch": "@@ -3071,6 +3071,7 @@ Released 2018-09-13\n [`main_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion\n [`manual_assert`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_assert\n [`manual_async_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_async_fn\n+[`manual_bits`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_bits\n [`manual_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_filter_map\n [`manual_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find_map\n [`manual_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_flatten"}, {"sha": "26fb4259952b6ac5b971179f41b36ad0b86d3c7b", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c82ae1c1200e28ed349b38b6f60e2f84888d663/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c82ae1c1200e28ed349b38b6f60e2f84888d663/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=7c82ae1c1200e28ed349b38b6f60e2f84888d663", "patch": "@@ -115,6 +115,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(loops::WHILE_LET_ON_ITERATOR),\n     LintId::of(main_recursion::MAIN_RECURSION),\n     LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n+    LintId::of(manual_bits::MANUAL_BITS),\n     LintId::of(manual_map::MANUAL_MAP),\n     LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n     LintId::of(manual_strip::MANUAL_STRIP),"}, {"sha": "746bdb19c3d927c71003c869be6f41ef6774a82c", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c82ae1c1200e28ed349b38b6f60e2f84888d663/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c82ae1c1200e28ed349b38b6f60e2f84888d663/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=7c82ae1c1200e28ed349b38b6f60e2f84888d663", "patch": "@@ -226,6 +226,7 @@ store.register_lints(&[\n     main_recursion::MAIN_RECURSION,\n     manual_assert::MANUAL_ASSERT,\n     manual_async_fn::MANUAL_ASYNC_FN,\n+    manual_bits::MANUAL_BITS,\n     manual_map::MANUAL_MAP,\n     manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n     manual_ok_or::MANUAL_OK_OR,"}, {"sha": "05211476ff2300df79103d25e801f600f2cb692b", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c82ae1c1200e28ed349b38b6f60e2f84888d663/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c82ae1c1200e28ed349b38b6f60e2f84888d663/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=7c82ae1c1200e28ed349b38b6f60e2f84888d663", "patch": "@@ -43,6 +43,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(loops::WHILE_LET_ON_ITERATOR),\n     LintId::of(main_recursion::MAIN_RECURSION),\n     LintId::of(manual_async_fn::MANUAL_ASYNC_FN),\n+    LintId::of(manual_bits::MANUAL_BITS),\n     LintId::of(manual_map::MANUAL_MAP),\n     LintId::of(manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n     LintId::of(map_clone::MAP_CLONE),"}, {"sha": "79e9882fef4c49c42c2d6fb4bca32878a42f23bf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c82ae1c1200e28ed349b38b6f60e2f84888d663/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c82ae1c1200e28ed349b38b6f60e2f84888d663/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7c82ae1c1200e28ed349b38b6f60e2f84888d663", "patch": "@@ -261,6 +261,7 @@ mod macro_use;\n mod main_recursion;\n mod manual_assert;\n mod manual_async_fn;\n+mod manual_bits;\n mod manual_map;\n mod manual_non_exhaustive;\n mod manual_ok_or;\n@@ -858,6 +859,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(init_numbered_fields::NumberedFields));\n     store.register_early_pass(|| Box::new(single_char_lifetime_names::SingleCharLifetimeNames));\n     store.register_late_pass(move || Box::new(borrow_as_ptr::BorrowAsPtr::new(msrv)));\n+    store.register_late_pass(move || Box::new(manual_bits::ManualBits::new(msrv)));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "50bf2527e39a8f4c26cdaac9774949c0542975d7", "filename": "clippy_lints/src/manual_bits.rs", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/7c82ae1c1200e28ed349b38b6f60e2f84888d663/clippy_lints%2Fsrc%2Fmanual_bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c82ae1c1200e28ed349b38b6f60e2f84888d663/clippy_lints%2Fsrc%2Fmanual_bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_bits.rs?ref=7c82ae1c1200e28ed349b38b6f60e2f84888d663", "patch": "@@ -0,0 +1,107 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::{match_def_path, meets_msrv, msrvs, paths};\n+use rustc_ast::ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind, GenericArg, QPath};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, Ty};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for uses of `std::mem::size_of::<T>() * 8` when\n+    /// `T::BITS` is available.\n+    ///\n+    /// ### Why is this bad?\n+    /// Can be written as the shorter `T::BITS`.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// std::mem::size_of::<usize>() * 8;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// usize::BITS;\n+    /// ```\n+    #[clippy::version = \"1.60.0\"]\n+    pub MANUAL_BITS,\n+    style,\n+    \"manual implementation of `size_of::<T>() * 8` can be simplified with `T::BITS`\"\n+}\n+\n+#[derive(Clone)]\n+pub struct ManualBits {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl ManualBits {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(ManualBits => [MANUAL_BITS]);\n+\n+impl<'tcx> LateLintPass<'tcx> for ManualBits {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if !meets_msrv(self.msrv.as_ref(), &msrvs::MANUAL_BITS) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::Binary(bin_op, left_expr, right_expr) = expr.kind;\n+            if let BinOpKind::Mul = &bin_op.node;\n+            if let Some((real_ty, resolved_ty, other_expr)) = get_one_size_of_ty(cx, left_expr, right_expr);\n+            if matches!(resolved_ty.kind(), ty::Int(_) | ty::Uint(_));\n+            if let ExprKind::Lit(lit) = &other_expr.kind;\n+            if let LitKind::Int(8, _) = lit.node;\n+\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    MANUAL_BITS,\n+                    expr.span,\n+                    \"usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\",\n+                    \"consider using\",\n+                    format!(\"{}::BITS\", snippet_opt(cx, real_ty.span).unwrap()),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn get_one_size_of_ty<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr1: &'tcx Expr<'_>,\n+    expr2: &'tcx Expr<'_>,\n+) -> Option<(&'tcx rustc_hir::Ty<'tcx>, Ty<'tcx>, &'tcx Expr<'tcx>)> {\n+    match (get_size_of_ty(cx, expr1), get_size_of_ty(cx, expr2)) {\n+        (Some((real_ty, resolved_ty)), None) => Some((real_ty, resolved_ty, expr2)),\n+        (None, Some((real_ty, resolved_ty))) => Some((real_ty, resolved_ty, expr1)),\n+        _ => None,\n+    }\n+}\n+\n+fn get_size_of_ty<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<(&'tcx rustc_hir::Ty<'tcx>, Ty<'tcx>)> {\n+    if_chain! {\n+        if let ExprKind::Call(count_func, _func_args) = expr.kind;\n+        if let ExprKind::Path(ref count_func_qpath) = count_func.kind;\n+\n+        if let QPath::Resolved(_, count_func_path) = count_func_qpath;\n+        if let Some(segment_zero) = count_func_path.segments.get(0);\n+        if let Some(args) = segment_zero.args;\n+        if let Some(GenericArg::Type(real_ty)) = args.args.get(0);\n+\n+        if let Some(def_id) = cx.qpath_res(count_func_qpath, count_func.hir_id).opt_def_id();\n+        if match_def_path(cx, def_id, &paths::MEM_SIZE_OF);\n+        then {\n+            cx.typeck_results().node_substs(count_func.hir_id).types().next().map(|resolved_ty| (real_ty, resolved_ty))\n+        } else {\n+            None\n+        }\n+    }\n+}"}, {"sha": "a5b409ad96bbbd3125a50005e77430b93339b7df", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c82ae1c1200e28ed349b38b6f60e2f84888d663/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c82ae1c1200e28ed349b38b6f60e2f84888d663/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=7c82ae1c1200e28ed349b38b6f60e2f84888d663", "patch": "@@ -12,7 +12,7 @@ macro_rules! msrv_aliases {\n \n // names may refer to stabilized feature flags or library items\n msrv_aliases! {\n-    1,53,0 { OR_PATTERNS }\n+    1,53,0 { OR_PATTERNS, MANUAL_BITS }\n     1,52,0 { STR_SPLIT_ONCE }\n     1,51,0 { BORROW_AS_PTR }\n     1,50,0 { BOOL_THEN }"}, {"sha": "4f1b19b75b8a1014d388b2a7097b3e34d7dc8b8c", "filename": "tests/ui/manual_bits.fixed", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7c82ae1c1200e28ed349b38b6f60e2f84888d663/tests%2Fui%2Fmanual_bits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7c82ae1c1200e28ed349b38b6f60e2f84888d663/tests%2Fui%2Fmanual_bits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_bits.fixed?ref=7c82ae1c1200e28ed349b38b6f60e2f84888d663", "patch": "@@ -0,0 +1,48 @@\n+// run-rustfix\n+\n+#![warn(clippy::manual_bits)]\n+#![allow(clippy::no_effect, path_statements, unused_must_use, clippy::unnecessary_operation)]\n+\n+use std::mem::{size_of, size_of_val};\n+\n+fn main() {\n+    i8::BITS;\n+    i16::BITS;\n+    i32::BITS;\n+    i64::BITS;\n+    i128::BITS;\n+    isize::BITS;\n+\n+    u8::BITS;\n+    u16::BITS;\n+    u32::BITS;\n+    u64::BITS;\n+    u128::BITS;\n+    usize::BITS;\n+\n+    i8::BITS;\n+    i16::BITS;\n+    i32::BITS;\n+    i64::BITS;\n+    i128::BITS;\n+    isize::BITS;\n+\n+    u8::BITS;\n+    u16::BITS;\n+    u32::BITS;\n+    u64::BITS;\n+    u128::BITS;\n+    usize::BITS;\n+\n+    size_of::<usize>() * 4;\n+    4 * size_of::<usize>();\n+    size_of::<bool>() * 8;\n+    8 * size_of::<bool>();\n+\n+    size_of_val(&0u32) * 8;\n+\n+    type Word = u32;\n+    Word::BITS;\n+    type Bool = bool;\n+    size_of::<Bool>() * 8;\n+}"}, {"sha": "f8a01313e6ad02117bfb9c3a7bb69a7430878d73", "filename": "tests/ui/manual_bits.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7c82ae1c1200e28ed349b38b6f60e2f84888d663/tests%2Fui%2Fmanual_bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c82ae1c1200e28ed349b38b6f60e2f84888d663/tests%2Fui%2Fmanual_bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_bits.rs?ref=7c82ae1c1200e28ed349b38b6f60e2f84888d663", "patch": "@@ -0,0 +1,48 @@\n+// run-rustfix\n+\n+#![warn(clippy::manual_bits)]\n+#![allow(clippy::no_effect, path_statements, unused_must_use, clippy::unnecessary_operation)]\n+\n+use std::mem::{size_of, size_of_val};\n+\n+fn main() {\n+    size_of::<i8>() * 8;\n+    size_of::<i16>() * 8;\n+    size_of::<i32>() * 8;\n+    size_of::<i64>() * 8;\n+    size_of::<i128>() * 8;\n+    size_of::<isize>() * 8;\n+\n+    size_of::<u8>() * 8;\n+    size_of::<u16>() * 8;\n+    size_of::<u32>() * 8;\n+    size_of::<u64>() * 8;\n+    size_of::<u128>() * 8;\n+    size_of::<usize>() * 8;\n+\n+    8 * size_of::<i8>();\n+    8 * size_of::<i16>();\n+    8 * size_of::<i32>();\n+    8 * size_of::<i64>();\n+    8 * size_of::<i128>();\n+    8 * size_of::<isize>();\n+\n+    8 * size_of::<u8>();\n+    8 * size_of::<u16>();\n+    8 * size_of::<u32>();\n+    8 * size_of::<u64>();\n+    8 * size_of::<u128>();\n+    8 * size_of::<usize>();\n+\n+    size_of::<usize>() * 4;\n+    4 * size_of::<usize>();\n+    size_of::<bool>() * 8;\n+    8 * size_of::<bool>();\n+\n+    size_of_val(&0u32) * 8;\n+\n+    type Word = u32;\n+    size_of::<Word>() * 8;\n+    type Bool = bool;\n+    size_of::<Bool>() * 8;\n+}"}, {"sha": "c4f5af2dcb0ec464192b497776482ac0f36ecc2b", "filename": "tests/ui/manual_bits.stderr", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/7c82ae1c1200e28ed349b38b6f60e2f84888d663/tests%2Fui%2Fmanual_bits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c82ae1c1200e28ed349b38b6f60e2f84888d663/tests%2Fui%2Fmanual_bits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_bits.stderr?ref=7c82ae1c1200e28ed349b38b6f60e2f84888d663", "patch": "@@ -0,0 +1,154 @@\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:9:5\n+   |\n+LL |     size_of::<i8>() * 8;\n+   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `i8::BITS`\n+   |\n+   = note: `-D clippy::manual-bits` implied by `-D warnings`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:10:5\n+   |\n+LL |     size_of::<i16>() * 8;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i16::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:11:5\n+   |\n+LL |     size_of::<i32>() * 8;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i32::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:12:5\n+   |\n+LL |     size_of::<i64>() * 8;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i64::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:13:5\n+   |\n+LL |     size_of::<i128>() * 8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `i128::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:14:5\n+   |\n+LL |     size_of::<isize>() * 8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `isize::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:16:5\n+   |\n+LL |     size_of::<u8>() * 8;\n+   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `u8::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:17:5\n+   |\n+LL |     size_of::<u16>() * 8;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u16::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:18:5\n+   |\n+LL |     size_of::<u32>() * 8;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u32::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:19:5\n+   |\n+LL |     size_of::<u64>() * 8;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u64::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:20:5\n+   |\n+LL |     size_of::<u128>() * 8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `u128::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:21:5\n+   |\n+LL |     size_of::<usize>() * 8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `usize::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:23:5\n+   |\n+LL |     8 * size_of::<i8>();\n+   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `i8::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:24:5\n+   |\n+LL |     8 * size_of::<i16>();\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i16::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:25:5\n+   |\n+LL |     8 * size_of::<i32>();\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i32::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:26:5\n+   |\n+LL |     8 * size_of::<i64>();\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `i64::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:27:5\n+   |\n+LL |     8 * size_of::<i128>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `i128::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:28:5\n+   |\n+LL |     8 * size_of::<isize>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `isize::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:30:5\n+   |\n+LL |     8 * size_of::<u8>();\n+   |     ^^^^^^^^^^^^^^^^^^^ help: consider using: `u8::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:31:5\n+   |\n+LL |     8 * size_of::<u16>();\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u16::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:32:5\n+   |\n+LL |     8 * size_of::<u32>();\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u32::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:33:5\n+   |\n+LL |     8 * size_of::<u64>();\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using: `u64::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:34:5\n+   |\n+LL |     8 * size_of::<u128>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `u128::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:35:5\n+   |\n+LL |     8 * size_of::<usize>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `usize::BITS`\n+\n+error: usage of `mem::size_of::<T>()` to obtain the size of `T` in bits\n+  --> $DIR/manual_bits.rs:45:5\n+   |\n+LL |     size_of::<Word>() * 8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `Word::BITS`\n+\n+error: aborting due to 25 previous errors\n+"}]}