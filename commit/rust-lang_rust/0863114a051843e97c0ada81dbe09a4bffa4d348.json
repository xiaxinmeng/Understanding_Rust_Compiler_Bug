{"sha": "0863114a051843e97c0ada81dbe09a4bffa4d348", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NjMxMTRhMDUxODQzZTk3YzBhZGE4MWRiZTA5YTRiZmZhNGQzNDg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-07-20T00:18:53Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-07-20T00:52:31Z"}, "message": "Include the statements on the LHS of a binop when desugaring. Closes #117.", "tree": {"sha": "34dba68fea9484a024335f27cadfd7b9f71eb789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34dba68fea9484a024335f27cadfd7b9f71eb789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0863114a051843e97c0ada81dbe09a4bffa4d348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0863114a051843e97c0ada81dbe09a4bffa4d348", "html_url": "https://github.com/rust-lang/rust/commit/0863114a051843e97c0ada81dbe09a4bffa4d348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0863114a051843e97c0ada81dbe09a4bffa4d348/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6fa75a124e4b92d0fc97e611a294cc26b8d0a51", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6fa75a124e4b92d0fc97e611a294cc26b8d0a51", "html_url": "https://github.com/rust-lang/rust/commit/e6fa75a124e4b92d0fc97e611a294cc26b8d0a51"}], "stats": {"total": 113, "additions": 57, "deletions": 56}, "files": [{"sha": "69fe5fc225de4f44f836456224697cae2b3708c9", "filename": "src/boot/fe/item.ml", "status": "modified", "additions": 57, "deletions": 56, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/0863114a051843e97c0ada81dbe09a4bffa4d348/src%2Fboot%2Ffe%2Fitem.ml", "raw_url": "https://github.com/rust-lang/rust/raw/0863114a051843e97c0ada81dbe09a4bffa4d348/src%2Fboot%2Ffe%2Fitem.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fitem.ml?ref=0863114a051843e97c0ada81dbe09a4bffa4d348", "patch": "@@ -507,68 +507,69 @@ and parse_stmts (ps:pstate) : Ast.stmt array =\n \n       | _ ->\n           let (lstmts, lval) = ctxt \"stmt: lval\" parse_lval ps in\n-            begin\n-              match peek ps with\n+          let stmts =\n+            match peek ps with\n \n-                  SEMI -> (bump ps; lstmts)\n+                SEMI -> (bump ps; [| |])\n \n-                | EQ -> parse_init lval ps\n+              | EQ -> parse_init lval ps\n \n-                | OPEQ binop_token ->\n-                    bump ps;\n-                    let (stmts, rhs) =\n-                      ctxt \"stmt: opeq rhs\" parse_expr_atom ps\n-                    in\n-                    let binop =\n-                      match binop_token with\n-                          PLUS    -> Ast.BINOP_add\n-                        | MINUS   -> Ast.BINOP_sub\n-                        | STAR    -> Ast.BINOP_mul\n-                        | SLASH   -> Ast.BINOP_div\n-                        | PERCENT -> Ast.BINOP_mod\n-                        | AND     -> Ast.BINOP_and\n-                        | OR      -> Ast.BINOP_or\n-                        | CARET   -> Ast.BINOP_xor\n-                        | LSL     -> Ast.BINOP_lsl\n-                        | LSR     -> Ast.BINOP_lsr\n-                        | ASR     -> Ast.BINOP_asr\n-                        | _       -> raise (err \"unknown opeq token\" ps)\n-                    in\n-                      expect ps SEMI;\n-                      spans ps stmts apos\n-                        (Ast.STMT_copy_binop (lval, binop, rhs))\n+              | OPEQ binop_token ->\n+                  bump ps;\n+                  let (stmts, rhs) =\n+                    ctxt \"stmt: opeq rhs\" parse_expr_atom ps\n+                  in\n+                  let binop =\n+                    match binop_token with\n+                        PLUS    -> Ast.BINOP_add\n+                      | MINUS   -> Ast.BINOP_sub\n+                      | STAR    -> Ast.BINOP_mul\n+                      | SLASH   -> Ast.BINOP_div\n+                      | PERCENT -> Ast.BINOP_mod\n+                      | AND     -> Ast.BINOP_and\n+                      | OR      -> Ast.BINOP_or\n+                      | CARET   -> Ast.BINOP_xor\n+                      | LSL     -> Ast.BINOP_lsl\n+                      | LSR     -> Ast.BINOP_lsr\n+                      | ASR     -> Ast.BINOP_asr\n+                      | _       -> raise (err \"unknown opeq token\" ps)\n+                  in\n+                    expect ps SEMI;\n+                    spans ps stmts apos\n+                      (Ast.STMT_copy_binop (lval, binop, rhs))\n \n-                | LARROW ->\n-                    bump ps;\n-                    let (stmts, rhs) = ctxt \"stmt: recv rhs\" parse_lval ps in\n-                    let _ = expect ps SEMI in\n-                      spans ps stmts apos (Ast.STMT_recv (lval, rhs))\n+              | LARROW ->\n+                  bump ps;\n+                  let (stmts, rhs) = ctxt \"stmt: recv rhs\" parse_lval ps in\n+                  let _ = expect ps SEMI in\n+                    spans ps stmts apos (Ast.STMT_recv (lval, rhs))\n \n-                | SEND ->\n-                    bump ps;\n-                    let (stmts, rhs) =\n-                      ctxt \"stmt: send rhs\" parse_expr_atom ps\n-                    in\n-                    let _ = expect ps SEMI in\n-                    let bpos = lexpos ps in\n-                    let (src, copy) = match rhs with\n-                        Ast.ATOM_lval lv -> (lv, [| |])\n-                      | _ ->\n-                          let (_, tmp, tempdecl) =\n-                            build_tmp ps slot_auto apos bpos\n-                          in\n-                          let copy = span ps apos bpos\n-                            (Ast.STMT_copy (tmp, Ast.EXPR_atom rhs)) in\n-                              ((clone_lval ps tmp), [| tempdecl; copy |])\n-                    in\n-                    let send =\n-                      span ps apos bpos\n-                        (Ast.STMT_send (lval, src))\n-                    in\n-                      Array.concat [ stmts; copy; [| send |] ]\n+              | SEND ->\n+                  bump ps;\n+                  let (stmts, rhs) =\n+                    ctxt \"stmt: send rhs\" parse_expr_atom ps\n+                  in\n+                  let _ = expect ps SEMI in\n+                  let bpos = lexpos ps in\n+                  let (src, copy) = match rhs with\n+                      Ast.ATOM_lval lv -> (lv, [| |])\n+                    | _ ->\n+                        let (_, tmp, tempdecl) =\n+                          build_tmp ps slot_auto apos bpos\n+                        in\n+                        let copy = span ps apos bpos\n+                          (Ast.STMT_copy (tmp, Ast.EXPR_atom rhs)) in\n+                            ((clone_lval ps tmp), [| tempdecl; copy |])\n+                  in\n+                  let send =\n+                    span ps apos bpos\n+                      (Ast.STMT_send (lval, src))\n+                  in\n+                    Array.concat [ stmts; copy; [| send |] ]\n \n-                | _ -> raise (unexpected ps)\n-            end\n+              | _ -> raise (unexpected ps)\n+          in\n+          Array.append lstmts stmts\n \n \n and parse_ty_param (iref:int ref) (ps:pstate) : Ast.ty_param identified ="}]}