{"sha": "80ac15f667c32b1e441cffaa3237cae2990cc152", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYWMxNWY2NjdjMzJiMWU0NDFjZmZhYTMyMzdjYWUyOTkwY2MxNTI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-05-17T01:31:18Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-05-17T13:29:02Z"}, "message": "Optimize default ToString impl\n\nThis avoids a zero-length write_str call, which boils down to a zero-length\nmemmove and ultimately costs quite a few instructions on some workloads.\n\nThis is approximately a 0.33% instruction count win on diesel-check.", "tree": {"sha": "a86a48b4fa77c0b767b6a70073532b0e9366367a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a86a48b4fa77c0b767b6a70073532b0e9366367a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80ac15f667c32b1e441cffaa3237cae2990cc152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80ac15f667c32b1e441cffaa3237cae2990cc152", "html_url": "https://github.com/rust-lang/rust/commit/80ac15f667c32b1e441cffaa3237cae2990cc152", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80ac15f667c32b1e441cffaa3237cae2990cc152/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a245f40a19c9a60b3be33c959eb5cfb0ad163c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a245f40a19c9a60b3be33c959eb5cfb0ad163c6", "html_url": "https://github.com/rust-lang/rust/commit/2a245f40a19c9a60b3be33c959eb5cfb0ad163c6"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "ec09595e357a637280098c56221279dd63ac0484", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/80ac15f667c32b1e441cffaa3237cae2990cc152/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ac15f667c32b1e441cffaa3237cae2990cc152/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=80ac15f667c32b1e441cffaa3237cae2990cc152", "patch": "@@ -2323,9 +2323,10 @@ impl<T: fmt::Display + ?Sized> ToString for T {\n     // to try to remove it.\n     #[inline]\n     default fn to_string(&self) -> String {\n-        use fmt::Write;\n         let mut buf = String::new();\n-        buf.write_fmt(format_args!(\"{}\", self))\n+        let mut formatter = core::fmt::Formatter::new(&mut buf);\n+        // Bypass format_args!() to avoid write_str with zero-length strs\n+        fmt::Display::fmt(self, &mut formatter)\n             .expect(\"a Display implementation returned an error unexpectedly\");\n         buf\n     }"}, {"sha": "5cb3c9062fe731b8e97236a3560bb53f8a69e6e3", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/80ac15f667c32b1e441cffaa3237cae2990cc152/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ac15f667c32b1e441cffaa3237cae2990cc152/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=80ac15f667c32b1e441cffaa3237cae2990cc152", "patch": "@@ -221,6 +221,28 @@ pub struct Formatter<'a> {\n     buf: &'a mut (dyn Write + 'a),\n }\n \n+impl<'a> Formatter<'a> {\n+    /// Creates a new formatter with default settings.\n+    ///\n+    /// This can be used as a micro-optimization in cases where a full `Arguments`\n+    /// structure (as created by `format_args!`) is not necessary; `Arguments`\n+    /// is a little more expensive to use in simple formatting scenarios.\n+    ///\n+    /// Currently not intended for use outside of the standard library.\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to standard library\", issue = \"none\")]\n+    #[doc(hidden)]\n+    pub fn new(buf: &'a mut (dyn Write + 'a)) -> Formatter<'a> {\n+        Formatter {\n+            flags: 0,\n+            fill: ' ',\n+            align: rt::v1::Alignment::Unknown,\n+            width: None,\n+            precision: None,\n+            buf,\n+        }\n+    }\n+}\n+\n // NB. Argument is essentially an optimized partially applied formatting function,\n // equivalent to `exists T.(&T, fn(&T, &mut Formatter<'_>) -> Result`.\n \n@@ -1075,15 +1097,7 @@ pub trait UpperExp {\n /// [`write!`]: crate::write!\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n-    let mut formatter = Formatter {\n-        flags: 0,\n-        width: None,\n-        precision: None,\n-        buf: output,\n-        align: rt::v1::Alignment::Unknown,\n-        fill: ' ',\n-    };\n-\n+    let mut formatter = Formatter::new(output);\n     let mut idx = 0;\n \n     match args.fmt {"}]}