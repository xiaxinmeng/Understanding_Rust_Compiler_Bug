{"sha": "2ceee724270f2186e5e85acff49acd35bf8a652a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZWVlNzI0MjcwZjIxODZlNWU4NWFjZmY0OWFjZDM1YmY4YTY1MmE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-22T14:30:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-22T14:30:16Z"}, "message": "Rollup merge of #81227 - CraftSpider:struct-type-clean, r=jyn514\n\nRemove doctree::StructType\n\nAlso removes it from the Union type, as unions can only ever be 'Plain'. Adds a new StructType to JSON, 'union', as the easiest way to encode the type of a union there. This leaves only one item in doctree, `Module`.\n\nr? `@jyn514`", "tree": {"sha": "bfa6e0acd7028f38e9327aa3b8d037b308d2b41f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfa6e0acd7028f38e9327aa3b8d037b308d2b41f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ceee724270f2186e5e85acff49acd35bf8a652a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCuF4CRBK7hj4Ov3rIwAAdHIIAKL4kqY//7B0A/GTP0jZOEVc\nxsr2eDQ9GbPugRtiv8rfR+l5zdX4NBCb4jBG0qzaNREsfLy7dpt4I8I3Q9azuHeQ\nMiJlEGjOmMLPPvNdqNYmMhhlIovSH71bjw/jq0MDFdIAZJO/3z1foeGxlMkCk2ju\nO31jrGqpR//cOot6WXemEXJ4bBZ0COm9ivtlSf8EMNpQnHsUhXRI7DmbjM+YD8NA\nPnYwUlngaPhtfR7LZTENv6nu4YywoPyWc7MuJQigfvYmox6KxJ8vBFKdp5qTOPjt\n1q0IZzH7Xlc62YlScWoHd2EcdGIzLbjRilzxeShgy/XHl0cOHp6U+dtSOdd5Rhk=\n=Ed68\n-----END PGP SIGNATURE-----\n", "payload": "tree bfa6e0acd7028f38e9327aa3b8d037b308d2b41f\nparent 1cc13b4f5a576e4517813ca47de316271f1e26b3\nparent 3349b40d471bea1e1b154213b19fbeb5a965943c\nauthor Mara Bos <m-ou.se@m-ou.se> 1611325816 +0000\ncommitter GitHub <noreply@github.com> 1611325816 +0000\n\nRollup merge of #81227 - CraftSpider:struct-type-clean, r=jyn514\n\nRemove doctree::StructType\n\nAlso removes it from the Union type, as unions can only ever be 'Plain'. Adds a new StructType to JSON, 'union', as the easiest way to encode the type of a union there. This leaves only one item in doctree, `Module`.\n\nr? `@jyn514`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ceee724270f2186e5e85acff49acd35bf8a652a", "html_url": "https://github.com/rust-lang/rust/commit/2ceee724270f2186e5e85acff49acd35bf8a652a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ceee724270f2186e5e85acff49acd35bf8a652a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cc13b4f5a576e4517813ca47de316271f1e26b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc13b4f5a576e4517813ca47de316271f1e26b3", "html_url": "https://github.com/rust-lang/rust/commit/1cc13b4f5a576e4517813ca47de316271f1e26b3"}, {"sha": "3349b40d471bea1e1b154213b19fbeb5a965943c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3349b40d471bea1e1b154213b19fbeb5a965943c", "html_url": "https://github.com/rust-lang/rust/commit/3349b40d471bea1e1b154213b19fbeb5a965943c"}], "stats": {"total": 77, "additions": 24, "deletions": 53}, "files": [{"sha": "1f9e7f8ae5cd424be37326c3fc198a1c336b03e4", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ceee724270f2186e5e85acff49acd35bf8a652a/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceee724270f2186e5e85acff49acd35bf8a652a/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=2ceee724270f2186e5e85acff49acd35bf8a652a", "patch": "@@ -5,7 +5,7 @@ use std::iter::once;\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorKind, DefKind, Res};\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::Mutability;\n use rustc_metadata::creader::LoadedMacro;\n@@ -17,7 +17,6 @@ use rustc_span::Span;\n \n use crate::clean::{self, Attributes, GetDefId, ToSource, TypeKind};\n use crate::core::DocContext;\n-use crate::doctree;\n \n use super::Clean;\n \n@@ -246,11 +245,7 @@ fn build_struct(cx: &DocContext<'_>, did: DefId) -> clean::Struct {\n     let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     clean::Struct {\n-        struct_type: match variant.ctor_kind {\n-            CtorKind::Fictive => doctree::Plain,\n-            CtorKind::Fn => doctree::Tuple,\n-            CtorKind::Const => doctree::Unit,\n-        },\n+        struct_type: variant.ctor_kind,\n         generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n         fields: variant.fields.clean(cx),\n         fields_stripped: false,\n@@ -262,7 +257,6 @@ fn build_union(cx: &DocContext<'_>, did: DefId) -> clean::Union {\n     let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     clean::Union {\n-        struct_type: doctree::Plain,\n         generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n         fields: variant.fields.clean(cx),\n         fields_stripped: false,"}, {"sha": "8fa60fa7178ae3d136c09b240c8bfc2b7cab7bd3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2ceee724270f2186e5e85acff49acd35bf8a652a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceee724270f2186e5e85acff49acd35bf8a652a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2ceee724270f2186e5e85acff49acd35bf8a652a", "patch": "@@ -1827,7 +1827,7 @@ impl Clean<Visibility> for ty::Visibility {\n impl Clean<VariantStruct> for rustc_hir::VariantData<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> VariantStruct {\n         VariantStruct {\n-            struct_type: doctree::struct_type_from_def(self),\n+            struct_type: CtorKind::from_hir(self),\n             fields: self.fields().iter().map(|x| x.clean(cx)).collect(),\n             fields_stripped: false,\n         }\n@@ -1842,7 +1842,7 @@ impl Clean<Item> for ty::VariantDef {\n                 self.fields.iter().map(|f| cx.tcx.type_of(f.did).clean(cx)).collect(),\n             ),\n             CtorKind::Fictive => Variant::Struct(VariantStruct {\n-                struct_type: doctree::Plain,\n+                struct_type: CtorKind::Fictive,\n                 fields_stripped: false,\n                 fields: self\n                     .fields\n@@ -1996,13 +1996,12 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                     bounds: bounds.clean(cx),\n                 }),\n                 ItemKind::Union(ref variant_data, ref generics) => UnionItem(Union {\n-                    struct_type: doctree::struct_type_from_def(&variant_data),\n                     generics: generics.clean(cx),\n                     fields: variant_data.fields().clean(cx),\n                     fields_stripped: false,\n                 }),\n                 ItemKind::Struct(ref variant_data, ref generics) => StructItem(Struct {\n-                    struct_type: doctree::struct_type_from_def(&variant_data),\n+                    struct_type: CtorKind::from_hir(variant_data),\n                     generics: generics.clean(cx),\n                     fields: variant_data.fields().clean(cx),\n                     fields_stripped: false,"}, {"sha": "c767b9dd85bf906a9f86da896ac10efc1be062b8", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ceee724270f2186e5e85acff49acd35bf8a652a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceee724270f2186e5e85acff49acd35bf8a652a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=2ceee724270f2186e5e85acff49acd35bf8a652a", "patch": "@@ -16,7 +16,7 @@ use rustc_attr::{ConstStability, Deprecation, Stability, StabilityLevel};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n-use rustc_hir::def::Res;\n+use rustc_hir::def::{CtorKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::Mutability;\n@@ -37,7 +37,6 @@ use crate::clean::inline;\n use crate::clean::types::Type::{QPath, ResolvedPath};\n use crate::clean::Clean;\n use crate::core::DocContext;\n-use crate::doctree;\n use crate::formats::cache::cache;\n use crate::formats::item_type::ItemType;\n use crate::html::render::cache::ExternalLocation;\n@@ -1685,15 +1684,14 @@ impl Visibility {\n \n #[derive(Clone, Debug)]\n crate struct Struct {\n-    crate struct_type: doctree::StructType,\n+    crate struct_type: CtorKind,\n     crate generics: Generics,\n     crate fields: Vec<Item>,\n     crate fields_stripped: bool,\n }\n \n #[derive(Clone, Debug)]\n crate struct Union {\n-    crate struct_type: doctree::StructType,\n     crate generics: Generics,\n     crate fields: Vec<Item>,\n     crate fields_stripped: bool,\n@@ -1704,7 +1702,7 @@ crate struct Union {\n /// only as a variant in an enum.\n #[derive(Clone, Debug)]\n crate struct VariantStruct {\n-    crate struct_type: doctree::StructType,\n+    crate struct_type: CtorKind,\n     crate fields: Vec<Item>,\n     crate fields_stripped: bool,\n }"}, {"sha": "645b2bb193ec258c3da5d58a6dceb0714c908b1a", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2ceee724270f2186e5e85acff49acd35bf8a652a/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceee724270f2186e5e85acff49acd35bf8a652a/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=2ceee724270f2186e5e85acff49acd35bf8a652a", "patch": "@@ -1,7 +1,5 @@\n //! This module is used to store stuff from Rust's AST in a more convenient\n //! manner (and with prettier names) before cleaning.\n-crate use self::StructType::*;\n-\n use rustc_span::{self, Span, Symbol};\n \n use rustc_hir as hir;\n@@ -34,21 +32,3 @@ impl Module<'hir> {\n         }\n     }\n }\n-\n-#[derive(Debug, Clone, Copy)]\n-crate enum StructType {\n-    /// A braced struct\n-    Plain,\n-    /// A tuple struct\n-    Tuple,\n-    /// A unit struct\n-    Unit,\n-}\n-\n-crate fn struct_type_from_def(vdata: &hir::VariantData<'_>) -> StructType {\n-    match *vdata {\n-        hir::VariantData::Struct(..) => Plain,\n-        hir::VariantData::Tuple(..) => Tuple,\n-        hir::VariantData::Unit(..) => Unit,\n-    }\n-}"}, {"sha": "6167b75ee50d398a5f39a1367b0e5357ea7fa747", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2ceee724270f2186e5e85acff49acd35bf8a652a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceee724270f2186e5e85acff49acd35bf8a652a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=2ceee724270f2186e5e85acff49acd35bf8a652a", "patch": "@@ -52,6 +52,7 @@ use rustc_attr::{Deprecation, StabilityLevel};\n use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n+use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Mutability;\n use rustc_middle::middle::stability;\n@@ -67,7 +68,6 @@ use serde::{Serialize, Serializer};\n use crate::clean::{self, AttributesExt, GetDefId, RenderedLink, SelfTy, TypeKind};\n use crate::config::{RenderInfo, RenderOptions};\n use crate::docfs::{DocFS, PathError};\n-use crate::doctree;\n use crate::error::Error;\n use crate::formats::cache::{cache, Cache};\n use crate::formats::item_type::ItemType;\n@@ -3103,7 +3103,7 @@ fn item_struct(\n             _ => None,\n         })\n         .peekable();\n-    if let doctree::Plain = s.struct_type {\n+    if let CtorKind::Fictive = s.struct_type {\n         if fields.peek().is_some() {\n             write!(\n                 w,\n@@ -3353,7 +3353,7 @@ fn render_struct(\n     w: &mut Buffer,\n     it: &clean::Item,\n     g: Option<&clean::Generics>,\n-    ty: doctree::StructType,\n+    ty: CtorKind,\n     fields: &[clean::Item],\n     tab: &str,\n     structhead: bool,\n@@ -3370,7 +3370,7 @@ fn render_struct(\n         write!(w, \"{}\", g.print())\n     }\n     match ty {\n-        doctree::Plain => {\n+        CtorKind::Fictive => {\n             if let Some(g) = g {\n                 write!(w, \"{}\", WhereClause { gens: g, indent: 0, end_newline: true })\n             }\n@@ -3402,7 +3402,7 @@ fn render_struct(\n             }\n             write!(w, \"}}\");\n         }\n-        doctree::Tuple => {\n+        CtorKind::Fn => {\n             write!(w, \"(\");\n             for (i, field) in fields.iter().enumerate() {\n                 if i > 0 {\n@@ -3427,7 +3427,7 @@ fn render_struct(\n             }\n             write!(w, \";\");\n         }\n-        doctree::Unit => {\n+        CtorKind::Const => {\n             // Needed for PhantomData.\n             if let Some(g) = g {\n                 write!(w, \"{}\", WhereClause { gens: g, indent: 0, end_newline: false })\n@@ -4462,7 +4462,7 @@ fn sidebar_struct(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, s: &clea\n     let fields = get_struct_fields_name(&s.fields);\n \n     if !fields.is_empty() {\n-        if let doctree::Plain = s.struct_type {\n+        if let CtorKind::Fictive = s.struct_type {\n             sidebar.push_str(&format!(\n                 \"<a class=\\\"sidebar-title\\\" href=\\\"#fields\\\">Fields</a>\\\n                  <div class=\\\"sidebar-links\\\">{}</div>\","}, {"sha": "bfd2141d9a1745214d423700b77f5e2176e69ed0", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2ceee724270f2186e5e85acff49acd35bf8a652a/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceee724270f2186e5e85acff49acd35bf8a652a/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=2ceee724270f2186e5e85acff49acd35bf8a652a", "patch": "@@ -5,11 +5,11 @@\n use std::convert::From;\n \n use rustc_ast::ast;\n+use rustc_hir::def::CtorKind;\n use rustc_span::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_span::Pos;\n \n use crate::clean;\n-use crate::doctree;\n use crate::formats::item_type::ItemType;\n use crate::json::types::*;\n use crate::json::JsonRenderer;\n@@ -210,9 +210,9 @@ impl From<clean::Struct> for Struct {\n \n impl From<clean::Union> for Struct {\n     fn from(struct_: clean::Union) -> Self {\n-        let clean::Union { struct_type, generics, fields, fields_stripped } = struct_;\n+        let clean::Union { generics, fields, fields_stripped } = struct_;\n         Struct {\n-            struct_type: struct_type.into(),\n+            struct_type: StructType::Union,\n             generics: generics.into(),\n             fields_stripped,\n             fields: ids(fields),\n@@ -221,13 +221,12 @@ impl From<clean::Union> for Struct {\n     }\n }\n \n-impl From<doctree::StructType> for StructType {\n-    fn from(struct_type: doctree::StructType) -> Self {\n-        use doctree::StructType::*;\n+impl From<CtorKind> for StructType {\n+    fn from(struct_type: CtorKind) -> Self {\n         match struct_type {\n-            Plain => StructType::Plain,\n-            Tuple => StructType::Tuple,\n-            Unit => StructType::Unit,\n+            CtorKind::Fictive => StructType::Plain,\n+            CtorKind::Fn => StructType::Tuple,\n+            CtorKind::Const => StructType::Unit,\n         }\n     }\n }"}, {"sha": "66cf12954dd0bbc6bfe3fef6f969423ea6e47a6b", "filename": "src/librustdoc/json/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ceee724270f2186e5e85acff49acd35bf8a652a/src%2Flibrustdoc%2Fjson%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ceee724270f2186e5e85acff49acd35bf8a652a/src%2Flibrustdoc%2Fjson%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Ftypes.rs?ref=2ceee724270f2186e5e85acff49acd35bf8a652a", "patch": "@@ -270,6 +270,7 @@ pub enum StructType {\n     Plain,\n     Tuple,\n     Unit,\n+    Union,\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]"}]}