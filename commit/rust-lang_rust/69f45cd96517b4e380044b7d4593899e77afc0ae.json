{"sha": "69f45cd96517b4e380044b7d4593899e77afc0ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZjQ1Y2Q5NjUxN2I0ZTM4MDA0NGI3ZDQ1OTM4OTllNzdhZmMwYWU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-10T13:14:58Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-10T13:14:58Z"}, "message": "Move save_work_product_index call out of cg_llvm", "tree": {"sha": "90b79803fdb55651e958100cab0d2b0707eca499", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90b79803fdb55651e958100cab0d2b0707eca499"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69f45cd96517b4e380044b7d4593899e77afc0ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69f45cd96517b4e380044b7d4593899e77afc0ae", "html_url": "https://github.com/rust-lang/rust/commit/69f45cd96517b4e380044b7d4593899e77afc0ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69f45cd96517b4e380044b7d4593899e77afc0ae/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46f2f023b0d02502a5a9b64b23247207b2279bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/46f2f023b0d02502a5a9b64b23247207b2279bfe", "html_url": "https://github.com/rust-lang/rust/commit/46f2f023b0d02502a5a9b64b23247207b2279bfe"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "b3328deebe8bf2f432a53e20ad44d109c1dd7a88", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69f45cd96517b4e380044b7d4593899e77afc0ae/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f45cd96517b4e380044b7d4593899e77afc0ae/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=69f45cd96517b4e380044b7d4593899e77afc0ae", "patch": "@@ -23,8 +23,9 @@ use rustc_codegen_ssa::back::write::{CodegenContext, FatLTOInput, ModuleConfig};\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{ErrorReported, FatalError, Handler};\n-use rustc_middle::dep_graph::{DepGraph, WorkProduct};\n+use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_serialize::json;\n@@ -274,8 +275,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n-        dep_graph: &DepGraph,\n-    ) -> Result<Box<dyn Any>, ErrorReported> {\n+    ) -> Result<(Box<dyn Any>, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n         let (codegen_results, work_products) = ongoing_codegen\n             .downcast::<rustc_codegen_ssa::back::write::OngoingCodegen<LlvmCodegenBackend>>()\n             .expect(\"Expected LlvmCodegenBackend's OngoingCodegen, found Box<Any>\")\n@@ -284,13 +284,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n             rustc_codegen_ssa::back::write::dump_incremental_data(&codegen_results);\n         }\n \n-        sess.time(\"serialize_work_products\", move || {\n-            rustc_incremental::save_work_product_index(sess, &dep_graph, work_products)\n-        });\n-\n-        sess.compile_status()?;\n-\n-        Ok(Box::new(codegen_results))\n+        Ok((Box::new(codegen_results), work_products))\n     }\n \n     fn link("}, {"sha": "4a88f747a17ffa71e51b36a9669e479b3b655322", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69f45cd96517b4e380044b7d4593899e77afc0ae/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f45cd96517b4e380044b7d4593899e77afc0ae/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=69f45cd96517b4e380044b7d4593899e77afc0ae", "patch": "@@ -3,8 +3,9 @@ use super::CodegenObject;\n use crate::ModuleCodegen;\n \n use rustc_ast::expand::allocator::AllocatorKind;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::ErrorReported;\n-use rustc_middle::dep_graph::DepGraph;\n+use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n use rustc_middle::ty::layout::{HasTyCtxt, TyAndLayout};\n use rustc_middle::ty::query::Providers;\n@@ -80,8 +81,7 @@ pub trait CodegenBackend {\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n-        dep_graph: &DepGraph,\n-    ) -> Result<Box<dyn Any>, ErrorReported>;\n+    ) -> Result<(Box<dyn Any>, FxHashMap<WorkProductId, WorkProduct>), ErrorReported>;\n \n     /// This is called on the returned `Box<dyn Any>` from `join_codegen`\n     ///"}, {"sha": "b7e4c097c900d09ff1ec5d615ae7c745fde57a0a", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69f45cd96517b4e380044b7d4593899e77afc0ae/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f45cd96517b4e380044b7d4593899e77afc0ae/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=69f45cd96517b4e380044b7d4593899e77afc0ae", "patch": "@@ -356,10 +356,18 @@ pub struct Linker {\n \n impl Linker {\n     pub fn link(self) -> Result<()> {\n-        let codegen_results =\n-            self.codegen_backend.join_codegen(self.ongoing_codegen, &self.sess, &self.dep_graph)?;\n-        let prof = self.sess.prof.clone();\n+        let (codegen_results, work_products) =\n+            self.codegen_backend.join_codegen(self.ongoing_codegen, &self.sess)?;\n+\n+        self.sess.compile_status()?;\n+\n+        let sess = &self.sess;\n         let dep_graph = self.dep_graph;\n+        sess.time(\"serialize_work_products\", || {\n+            rustc_incremental::save_work_product_index(&sess, &dep_graph, work_products)\n+        });\n+\n+        let prof = self.sess.prof.clone();\n         prof.generic_activity(\"drop_dep_graph\").run(move || drop(dep_graph));\n \n         if !self"}]}