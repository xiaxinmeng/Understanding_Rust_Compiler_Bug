{"sha": "5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNzFlNGVmOTBlZjc5YzFhYzc5YzQxMzIzMzNjYmM4MGY1Yjg1Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-30T01:40:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-30T01:40:11Z"}, "message": "Auto merge of #43551 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 8 pull requests\n\n- Successful merges: #43409, #43501, #43509, #43512, #43513, #43536, #43544, #43549\n- Failed merges:", "tree": {"sha": "1efdfb555e8266e747a7e2c453d0ff84d5613c90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1efdfb555e8266e747a7e2c453d0ff84d5613c90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "html_url": "https://github.com/rust-lang/rust/commit/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53bf7903fa7ebabca85f5937667956177989e345", "url": "https://api.github.com/repos/rust-lang/rust/commits/53bf7903fa7ebabca85f5937667956177989e345", "html_url": "https://github.com/rust-lang/rust/commit/53bf7903fa7ebabca85f5937667956177989e345"}, {"sha": "16c3fd9f3d3dd6667c1966d6a62e56bf9deed0fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/16c3fd9f3d3dd6667c1966d6a62e56bf9deed0fd", "html_url": "https://github.com/rust-lang/rust/commit/16c3fd9f3d3dd6667c1966d6a62e56bf9deed0fd"}], "stats": {"total": 218, "additions": 160, "deletions": 58}, "files": [{"sha": "811c7df5d9978a002e5764b43d03d2ba36ff929f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -28,6 +28,7 @@ use check;\n use flags::Subcommand;\n use doc;\n use tool;\n+use native;\n \n pub use Compiler;\n \n@@ -256,7 +257,8 @@ impl<'a> Builder<'a> {\n                 compile::StartupObjects, tool::BuildManifest, tool::Rustbook, tool::ErrorIndex,\n                 tool::UnstableBookGen, tool::Tidy, tool::Linkchecker, tool::CargoTest,\n                 tool::Compiletest, tool::RemoteTestServer, tool::RemoteTestClient,\n-                tool::RustInstaller, tool::Cargo, tool::Rls, tool::Rustdoc),\n+                tool::RustInstaller, tool::Cargo, tool::Rls, tool::Rustdoc,\n+                native::Llvm),\n             Kind::Test => describe!(check::Tidy, check::Bootstrap, check::DefaultCompiletest,\n                 check::HostCompiletest, check::Crate, check::CrateLibrustc, check::Linkcheck,\n                 check::Cargotest, check::Cargo, check::Rls, check::Docs, check::ErrorIndex,"}, {"sha": "1da277cf1812c8c6dd5c984f3577d4510c952610", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -48,6 +48,10 @@ impl Step for Llvm {\n         run.path(\"src/llvm\")\n     }\n \n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Llvm { target: run.target })\n+    }\n+\n     /// Compile LLVM for `target`.\n     fn run(self, builder: &Builder) {\n         let build = builder.build;"}, {"sha": "d3f339bc15f75c0c8ba7f70a621a7d21a49e3e84", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -67,6 +67,13 @@ else\n     args=\"$args --env SCCACHE_DIR=/sccache --volume $HOME/.cache/sccache:/sccache\"\n fi\n \n+# Run containers as privileged as it should give them access to some more\n+# syscalls such as ptrace and whatnot. In the upgrade to LLVM 5.0 it was\n+# discovered that the leak sanitizer apparently needs these syscalls nowadays so\n+# we'll need `--privileged` for at least the `x86_64-gnu` builder, so this just\n+# goes ahead and sets it for all builders.\n+args=\"$args --privileged\"\n+\n exec docker \\\n   run \\\n   --volume \"$root_dir:/checkout:ro\" \\"}, {"sha": "42111301a9fe899f111a54c3b83dec7567ca4717", "filename": "src/liballoc/allocator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Fliballoc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Fliballoc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fallocator.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -215,6 +215,7 @@ impl Layout {\n     /// of each element in the array.\n     ///\n     /// On arithmetic overflow, returns `None`.\n+    #[inline]\n     pub fn repeat(&self, n: usize) -> Option<(Self, usize)> {\n         let padded_size = match self.size.checked_add(self.padding_needed_for(self.align)) {\n             None => return None,"}, {"sha": "ccfeb91aff1474ce8e265f860b4ab2c548ce7b6b", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -147,22 +147,13 @@ pub trait FromIterator<A>: Sized {\n ///\n /// ```\n /// let v = vec![1, 2, 3];\n-///\n /// let mut iter = v.into_iter();\n ///\n-/// let n = iter.next();\n-/// assert_eq!(Some(1), n);\n-///\n-/// let n = iter.next();\n-/// assert_eq!(Some(2), n);\n-///\n-/// let n = iter.next();\n-/// assert_eq!(Some(3), n);\n-///\n-/// let n = iter.next();\n-/// assert_eq!(None, n);\n+/// assert_eq!(Some(1), iter.next());\n+/// assert_eq!(Some(2), iter.next());\n+/// assert_eq!(Some(3), iter.next());\n+/// assert_eq!(None, iter.next());\n /// ```\n-///\n /// Implementing `IntoIterator` for your type:\n ///\n /// ```\n@@ -227,20 +218,12 @@ pub trait IntoIterator {\n     ///\n     /// ```\n     /// let v = vec![1, 2, 3];\n-    ///\n     /// let mut iter = v.into_iter();\n     ///\n-    /// let n = iter.next();\n-    /// assert_eq!(Some(1), n);\n-    ///\n-    /// let n = iter.next();\n-    /// assert_eq!(Some(2), n);\n-    ///\n-    /// let n = iter.next();\n-    /// assert_eq!(Some(3), n);\n-    ///\n-    /// let n = iter.next();\n-    /// assert_eq!(None, n);\n+    /// assert_eq!(Some(1), iter.next());\n+    /// assert_eq!(Some(2), iter.next());\n+    /// assert_eq!(Some(3), iter.next());\n+    /// assert_eq!(None, iter.next());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn into_iter(self) -> Self::IntoIter;"}, {"sha": "6dadb702b9f24ada8ae4db46356787303b582afd", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -258,10 +258,11 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for mir::L\n     }\n }\n \n-impl<'a, 'gcx, 'tcx, B, V> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for mir::Projection<'tcx, B, V>\n+impl<'a, 'gcx, 'tcx, B, V, T> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n+for mir::Projection<'tcx, B, V, T>\n     where B: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>,\n-          V: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n+          V: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>,\n+          T: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n@@ -276,17 +277,18 @@ for mir::Projection<'tcx, B, V>\n     }\n }\n \n-impl<'a, 'gcx, 'tcx, V> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for mir::ProjectionElem<'tcx, V>\n-    where V: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n+impl<'a, 'gcx, 'tcx, V, T> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n+for mir::ProjectionElem<'tcx, V, T>\n+    where V: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>,\n+          T: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n             mir::ProjectionElem::Deref => {}\n-            mir::ProjectionElem::Field(field, ty) => {\n+            mir::ProjectionElem::Field(field, ref ty) => {\n                 field.hash_stable(hcx, hasher);\n                 ty.hash_stable(hcx, hasher);\n             }"}, {"sha": "3dcd64af2ede07a8db7f3ade91aba2078480b9fe", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -887,15 +887,15 @@ impl_stable_hash_for!(struct Static<'tcx> {\n /// shared between `Constant` and `Lvalue`. See the aliases\n /// `LvalueProjection` etc below.\n #[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n-pub struct Projection<'tcx, B, V> {\n+pub struct Projection<'tcx, B, V, T> {\n     pub base: B,\n-    pub elem: ProjectionElem<'tcx, V>,\n+    pub elem: ProjectionElem<'tcx, V, T>,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n-pub enum ProjectionElem<'tcx, V> {\n+pub enum ProjectionElem<'tcx, V, T> {\n     Deref,\n-    Field(Field, Ty<'tcx>),\n+    Field(Field, T),\n     Index(V),\n \n     /// These indices are generated by slice patterns. Easiest to explain\n@@ -932,11 +932,11 @@ pub enum ProjectionElem<'tcx, V> {\n \n /// Alias for projections as they appear in lvalues, where the base is an lvalue\n /// and the index is an operand.\n-pub type LvalueProjection<'tcx> = Projection<'tcx, Lvalue<'tcx>, Operand<'tcx>>;\n+pub type LvalueProjection<'tcx> = Projection<'tcx, Lvalue<'tcx>, Operand<'tcx>, Ty<'tcx>>;\n \n /// Alias for projections as they appear in lvalues, where the base is an lvalue\n /// and the index is an operand.\n-pub type LvalueElem<'tcx> = ProjectionElem<'tcx, Operand<'tcx>>;\n+pub type LvalueElem<'tcx> = ProjectionElem<'tcx, Operand<'tcx>, Ty<'tcx>>;\n \n newtype_index!(Field, \"field\");\n \n@@ -1720,16 +1720,16 @@ impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n     }\n }\n \n-impl<'tcx, B, V> TypeFoldable<'tcx> for Projection<'tcx, B, V>\n-    where B: TypeFoldable<'tcx>, V: TypeFoldable<'tcx>\n+impl<'tcx, B, V, T> TypeFoldable<'tcx> for Projection<'tcx, B, V, T>\n+    where B: TypeFoldable<'tcx>, V: TypeFoldable<'tcx>, T: TypeFoldable<'tcx>\n {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         use mir::ProjectionElem::*;\n \n         let base = self.base.fold_with(folder);\n         let elem = match self.elem {\n             Deref => Deref,\n-            Field(f, ty) => Field(f, ty.fold_with(folder)),\n+            Field(f, ref ty) => Field(f, ty.fold_with(folder)),\n             Index(ref v) => Index(v.fold_with(folder)),\n             ref elem => elem.clone()\n         };\n@@ -1745,7 +1745,7 @@ impl<'tcx, B, V> TypeFoldable<'tcx> for Projection<'tcx, B, V>\n \n         self.base.visit_with(visitor) ||\n             match self.elem {\n-                Field(_, ty) => ty.visit_with(visitor),\n+                Field(_, ref ty) => ty.visit_with(visitor),\n                 Index(ref v) => v.visit_with(visitor),\n                 _ => false\n             }"}, {"sha": "1255209322b0ee4245384f21138bb5cb9e5d8c47", "filename": "src/librustc_mir/dataflow/move_paths/abs_domain.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fabs_domain.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -23,11 +23,14 @@\n \n use rustc::mir::LvalueElem;\n use rustc::mir::{Operand, ProjectionElem};\n+use rustc::ty::Ty;\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct AbstractOperand;\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+pub struct AbstractType;\n pub type AbstractElem<'tcx> =\n-    ProjectionElem<'tcx, AbstractOperand>;\n+    ProjectionElem<'tcx, AbstractOperand, AbstractType>;\n \n pub trait Lift {\n     type Abstract;\n@@ -37,14 +40,18 @@ impl<'tcx> Lift for Operand<'tcx> {\n     type Abstract = AbstractOperand;\n     fn lift(&self) -> Self::Abstract { AbstractOperand }\n }\n+impl<'tcx> Lift for Ty<'tcx> {\n+    type Abstract = AbstractType;\n+    fn lift(&self) -> Self::Abstract { AbstractType }\n+}\n impl<'tcx> Lift for LvalueElem<'tcx> {\n     type Abstract = AbstractElem<'tcx>;\n     fn lift(&self) -> Self::Abstract {\n         match *self {\n             ProjectionElem::Deref =>\n                 ProjectionElem::Deref,\n             ProjectionElem::Field(ref f, ty) =>\n-                ProjectionElem::Field(f.clone(), ty.clone()),\n+                ProjectionElem::Field(f.clone(), ty.lift()),\n             ProjectionElem::Index(ref i) =>\n                 ProjectionElem::Index(i.lift()),\n             ProjectionElem::Subslice {from, to} =>"}, {"sha": "bf524705dc772d88e05349bd844570c2f5119a53", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -2962,7 +2962,15 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                     write!(w, \"<code>\")?;\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl)?;\n                     write!(w, \"</code>\")?;\n-                    render_stability_since_raw(w, item.stable_since(), outer_version)?;\n+                    if let Some(l) = (Item { cx, item }).src_href() {\n+                        write!(w, \"</span><span class='out-of-band'>\")?;\n+                        write!(w, \"<div class='ghost'></div>\")?;\n+                        render_stability_since_raw(w, item.stable_since(), outer_version)?;\n+                        write!(w, \"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n+                               l, \"goto source code\")?;\n+                    } else {\n+                        render_stability_since_raw(w, item.stable_since(), outer_version)?;\n+                    }\n                     write!(w, \"</span></h4>\\n\")?;\n                 }\n             }"}, {"sha": "858ef3bf411d481ee6b5b68db2b1d45918a9ea07", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -297,6 +297,10 @@ h3.impl > .out-of-band {\n \tfont-size: 21px;\n }\n \n+h4.method > .out-of-band {\n+\tfont-size: 19px;\n+}\n+\n h4 > code, h3 > code, .invisible > code {\n \tposition: inherit;\n }"}, {"sha": "0c1bf9e9557609d96e54892aa2eaa661d1459397", "filename": "src/libstd/sys/redox/ext/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fmod.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -33,6 +33,7 @@ pub mod ffi;\n pub mod fs;\n pub mod io;\n pub mod process;\n+pub mod thread;\n \n /// A prelude for conveniently writing platform-specific code.\n ///\n@@ -46,5 +47,7 @@ pub mod prelude {\n     #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::fs::{FileTypeExt, PermissionsExt, OpenOptionsExt, MetadataExt};\n     #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub use super::thread::JoinHandleExt;\n+    #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::process::{CommandExt, ExitStatusExt};\n }"}, {"sha": "52be2ccd9f964b43906c8e935018555cba131760", "filename": "src/libstd/sys/redox/ext/thread.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Unix-specific extensions to primitives in the `std::thread` module.\n+\n+#![stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n+\n+use sys_common::{AsInner, IntoInner};\n+use thread::JoinHandle;\n+\n+#[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n+#[allow(deprecated)]\n+pub type RawPthread = usize;\n+\n+/// Unix-specific extensions to `std::thread::JoinHandle`\n+#[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n+pub trait JoinHandleExt {\n+    /// Extracts the raw pthread_t without taking ownership\n+    #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n+    fn as_pthread_t(&self) -> RawPthread;\n+\n+    /// Consumes the thread, returning the raw pthread_t\n+    ///\n+    /// This function **transfers ownership** of the underlying pthread_t to\n+    /// the caller. Callers are then the unique owners of the pthread_t and\n+    /// must either detach or join the pthread_t once it's no longer needed.\n+    #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n+    fn into_pthread_t(self) -> RawPthread;\n+}\n+\n+#[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n+impl<T> JoinHandleExt for JoinHandle<T> {\n+    fn as_pthread_t(&self) -> RawPthread {\n+        self.as_inner().id() as RawPthread\n+    }\n+\n+    fn into_pthread_t(self) -> RawPthread {\n+        self.into_inner().into_id() as RawPthread\n+    }\n+}"}, {"sha": "ba7bbdc657fcf90240696b46d5a28b3d8a0b5f77", "filename": "src/libstd/sys/redox/fd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -57,9 +57,9 @@ impl FileDesc {\n     }\n \n     pub fn set_cloexec(&self) -> io::Result<()> {\n-        let mut flags = cvt(syscall::fcntl(self.fd, syscall::F_GETFL, 0))?;\n+        let mut flags = cvt(syscall::fcntl(self.fd, syscall::F_GETFD, 0))?;\n         flags |= syscall::O_CLOEXEC;\n-        cvt(syscall::fcntl(self.fd, syscall::F_SETFL, flags)).and(Ok(()))\n+        cvt(syscall::fcntl(self.fd, syscall::F_SETFD, flags)).and(Ok(()))\n     }\n \n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {"}, {"sha": "17fa07b99ae39cbf1f3776c5c0d05d5c223d221f", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -272,21 +272,21 @@ impl Command {\n \n         if let Some(fd) = stdio.stderr.fd() {\n             t!(cvt(syscall::dup2(fd, 2, &[])));\n-            let mut flags = t!(cvt(syscall::fcntl(2, syscall::F_GETFL, 0)));\n+            let mut flags = t!(cvt(syscall::fcntl(2, syscall::F_GETFD, 0)));\n             flags &= ! syscall::O_CLOEXEC;\n-            t!(cvt(syscall::fcntl(2, syscall::F_SETFL, flags)));\n+            t!(cvt(syscall::fcntl(2, syscall::F_SETFD, flags)));\n         }\n         if let Some(fd) = stdio.stdout.fd() {\n             t!(cvt(syscall::dup2(fd, 1, &[])));\n-            let mut flags = t!(cvt(syscall::fcntl(1, syscall::F_GETFL, 0)));\n+            let mut flags = t!(cvt(syscall::fcntl(1, syscall::F_GETFD, 0)));\n             flags &= ! syscall::O_CLOEXEC;\n-            t!(cvt(syscall::fcntl(1, syscall::F_SETFL, flags)));\n+            t!(cvt(syscall::fcntl(1, syscall::F_SETFD, flags)));\n         }\n         if let Some(fd) = stdio.stdin.fd() {\n             t!(cvt(syscall::dup2(fd, 0, &[])));\n-            let mut flags = t!(cvt(syscall::fcntl(0, syscall::F_GETFL, 0)));\n+            let mut flags = t!(cvt(syscall::fcntl(0, syscall::F_GETFD, 0)));\n             flags &= ! syscall::O_CLOEXEC;\n-            t!(cvt(syscall::fcntl(0, syscall::F_SETFL, flags)));\n+            t!(cvt(syscall::fcntl(0, syscall::F_SETFD, flags)));\n         }\n \n         if let Some(g) = self.gid {"}, {"sha": "892007df2b7c66c0dc70a4e3e969c3e0929b92be", "filename": "src/libstd/sys/redox/syscall/flag.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fflag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fflag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fflag.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -20,8 +20,10 @@ pub const EVENT_NONE: usize = 0;\n pub const EVENT_READ: usize = 1;\n pub const EVENT_WRITE: usize = 2;\n \n-pub const F_GETFL: usize = 1;\n-pub const F_SETFL: usize = 2;\n+pub const F_GETFD: usize = 1;\n+pub const F_SETFD: usize = 2;\n+pub const F_GETFL: usize = 3;\n+pub const F_SETFL: usize = 4;\n \n pub const FUTEX_WAIT: usize = 0;\n pub const FUTEX_WAKE: usize = 1;"}, {"sha": "857d9a753cc4e8c9de9181d26176e3392a97b04e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -336,6 +336,7 @@ impl Default for Generics {\n             where_clause: WhereClause {\n                 id: DUMMY_NODE_ID,\n                 predicates: Vec::new(),\n+                span: DUMMY_SP,\n             },\n             span: DUMMY_SP,\n         }\n@@ -347,6 +348,7 @@ impl Default for Generics {\n pub struct WhereClause {\n     pub id: NodeId,\n     pub predicates: Vec<WherePredicate>,\n+    pub span: Span,\n }\n \n /// A single predicate in a `where` clause"}, {"sha": "a54e2573af40a7fe2e34858f94ec6146113139b3", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -737,14 +737,15 @@ pub fn noop_fold_generics<T: Folder>(Generics {ty_params, lifetimes, where_claus\n }\n \n pub fn noop_fold_where_clause<T: Folder>(\n-                              WhereClause {id, predicates}: WhereClause,\n+                              WhereClause {id, predicates, span}: WhereClause,\n                               fld: &mut T)\n                               -> WhereClause {\n     WhereClause {\n         id: fld.new_id(id),\n         predicates: predicates.move_map(|predicate| {\n             fld.fold_where_predicate(predicate)\n-        })\n+        }),\n+        span: span,\n     }\n }\n "}, {"sha": "7b105a8fa14c2f5bdca2f0739d4233a8e288875f", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -892,6 +892,7 @@ mod tests {\n                                         where_clause: ast::WhereClause {\n                                             id: ast::DUMMY_NODE_ID,\n                                             predicates: Vec::new(),\n+                                            span: syntax_pos::DUMMY_SP,\n                                         },\n                                         span: syntax_pos::DUMMY_SP,\n                                     },"}, {"sha": "ca362ec93683d62c001e3f4f28ff395a6e7322e0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -4301,6 +4301,7 @@ impl<'a> Parser<'a> {\n                 where_clause: WhereClause {\n                     id: ast::DUMMY_NODE_ID,\n                     predicates: Vec::new(),\n+                    span: syntax_pos::DUMMY_SP,\n                 },\n                 span: span_lo.to(self.prev_span),\n             })\n@@ -4368,11 +4369,13 @@ impl<'a> Parser<'a> {\n         let mut where_clause = WhereClause {\n             id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),\n+            span: syntax_pos::DUMMY_SP,\n         };\n \n         if !self.eat_keyword(keywords::Where) {\n             return Ok(where_clause);\n         }\n+        let lo = self.prev_span;\n \n         // This is a temporary future proofing.\n         //\n@@ -4450,6 +4453,7 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n+        where_clause.span = lo.to(self.prev_span);\n         Ok(where_clause)\n     }\n "}, {"sha": "e9d11e73837aa7d32c0f9c21fad8207e6741b616", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -1041,6 +1041,7 @@ impl<'a> State<'a> {\n                     where_clause: ast::WhereClause {\n                         id: ast::DUMMY_NODE_ID,\n                         predicates: Vec::new(),\n+                        span: syntax_pos::DUMMY_SP,\n                     },\n                     span: syntax_pos::DUMMY_SP,\n                 };\n@@ -2983,6 +2984,7 @@ impl<'a> State<'a> {\n             where_clause: ast::WhereClause {\n                 id: ast::DUMMY_NODE_ID,\n                 predicates: Vec::new(),\n+                span: syntax_pos::DUMMY_SP,\n             },\n             span: syntax_pos::DUMMY_SP,\n         };"}, {"sha": "f5ac1743920c11874eabf7164b7458840d868ec2", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -216,6 +216,7 @@ fn mk_generics(lifetimes: Vec<ast::LifetimeDef>, ty_params: Vec<ast::TyParam>, s\n         where_clause: ast::WhereClause {\n             id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),\n+            span: span,\n         },\n         span: span,\n     }"}, {"sha": "261564ed51aedf1b27dc8c90e877ca0c4d19f50c", "filename": "src/test/codegen/vec-optimizes-away.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Ftest%2Fcodegen%2Fvec-optimizes-away.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9/src%2Ftest%2Fcodegen%2Fvec-optimizes-away.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-optimizes-away.rs?ref=5c71e4ef90ef79c1ac79c4132333cbc80f5b85b9", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// no-system-llvm\n+// compile-flags: -O\n+#![crate_type=\"lib\"]\n+\n+#[no_mangle]\n+pub fn sum_me() -> i32 {\n+    // CHECK-LABEL: @sum_me\n+    // CHECK-NEXT: {{^.*:$}}\n+    // CHECK-NEXT: ret i32 6\n+    vec![1, 2, 3].iter().sum::<i32>()\n+}"}]}