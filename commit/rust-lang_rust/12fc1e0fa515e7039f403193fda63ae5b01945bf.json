{"sha": "12fc1e0fa515e7039f403193fda63ae5b01945bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZmMxZTBmYTUxNWU3MDM5ZjQwMzE5M2ZkYTYzYWU1YjAxOTQ1YmY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-05T10:55:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-05T10:55:08Z"}, "message": "Rollup merge of #69984 - lenary:lenary/force-uwtables, r=hanna-kruppe\n\nAdd Option to Force Unwind Tables\n\nWhen panic != unwind, `nounwind` is added to all functions for a target.\nThis can cause issues when a panic happens with RUST_BACKTRACE=1, as\nthere needs to be a way to reconstruct the backtrace. There are three\npossible sources of this information: forcing frame pointers (for which\nan option exists already), debug info (for which an option exists), or\nunwind tables.\n\nEspecially for embedded devices, forcing frame pointers can have code\nsize overheads (RISC-V sees ~10% overheads, ARM sees ~2-3% overheads).\nIn production code, it can be the case that debug info is not kept, so it is useful\nto provide this third option, unwind tables, that users can use to\nreconstruct the call stack. Reconstructing this stack is harder than\nwith frame pointers, but it is still possible.\n\n---\n\nThis came up in discussion on #69890, and turned out to be a fairly simple addition.\n\nr? @hanna-kruppe", "tree": {"sha": "815daa18ddde7dafc52fd94a3612360772ddb0f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/815daa18ddde7dafc52fd94a3612360772ddb0f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12fc1e0fa515e7039f403193fda63ae5b01945bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesUYMCRBK7hj4Ov3rIwAAdHIIAG5omzRRP4ynbh+rv2KrJNGT\nOMl7R2ZoMQ/KSKvLH2eahZe4MKkX/baEip8EX9mdPdyrvlAmt1fDBV9YDi8N8iw0\nRxcJmppLVfToKC0rQYwnJHZ2UqF8Q1X4EbmfeuxMoctxUutSzZVvdtUCk5i6f8Hn\n3phD2N+hfp0uE5AoMk4nue4VL5cKf8jztwDPBzp+kmj38XmbhtyLI4gSFt39eznF\npkPkAR2+kuIAGrqT4r2ht535Cm1VGOWlIIJ1kq9cao68akMvlOJZkbqmUtROhK5P\nVQqBi7sByBnZetPjP4OvThJgpwbm/HzTHurK3nY95QTnELEEE7t0xonfWoM6o1w=\n=XIFE\n-----END PGP SIGNATURE-----\n", "payload": "tree 815daa18ddde7dafc52fd94a3612360772ddb0f9\nparent de27cd7649e4182c63c770d18a561bda0d88cfc6\nparent cda994633ee109639b9c4c12c20e2aacb6a879cd\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588676108 +0200\ncommitter GitHub <noreply@github.com> 1588676108 +0200\n\nRollup merge of #69984 - lenary:lenary/force-uwtables, r=hanna-kruppe\n\nAdd Option to Force Unwind Tables\n\nWhen panic != unwind, `nounwind` is added to all functions for a target.\nThis can cause issues when a panic happens with RUST_BACKTRACE=1, as\nthere needs to be a way to reconstruct the backtrace. There are three\npossible sources of this information: forcing frame pointers (for which\nan option exists already), debug info (for which an option exists), or\nunwind tables.\n\nEspecially for embedded devices, forcing frame pointers can have code\nsize overheads (RISC-V sees ~10% overheads, ARM sees ~2-3% overheads).\nIn production code, it can be the case that debug info is not kept, so it is useful\nto provide this third option, unwind tables, that users can use to\nreconstruct the call stack. Reconstructing this stack is harder than\nwith frame pointers, but it is still possible.\n\n---\n\nThis came up in discussion on #69890, and turned out to be a fairly simple addition.\n\nr? @hanna-kruppe\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12fc1e0fa515e7039f403193fda63ae5b01945bf", "html_url": "https://github.com/rust-lang/rust/commit/12fc1e0fa515e7039f403193fda63ae5b01945bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12fc1e0fa515e7039f403193fda63ae5b01945bf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de27cd7649e4182c63c770d18a561bda0d88cfc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/de27cd7649e4182c63c770d18a561bda0d88cfc6", "html_url": "https://github.com/rust-lang/rust/commit/de27cd7649e4182c63c770d18a561bda0d88cfc6"}, {"sha": "cda994633ee109639b9c4c12c20e2aacb6a879cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda994633ee109639b9c4c12c20e2aacb6a879cd", "html_url": "https://github.com/rust-lang/rust/commit/cda994633ee109639b9c4c12c20e2aacb6a879cd"}], "stats": {"total": 94, "additions": 89, "deletions": 5}, "files": [{"sha": "4ffa6207b97b1569b348ca3b6529f7efa5775446", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=12fc1e0fa515e7039f403193fda63ae5b01945bf", "patch": "@@ -98,6 +98,18 @@ values:\n The default behaviour, if frame pointers are not force-enabled, depends on the\n target.\n \n+## force-unwind-tables\n+\n+This flag forces the generation of unwind tables. It takes one of the following\n+values:\n+\n+* `y`, `yes`, `on`, or no value: Unwind tables are forced to be generated.\n+* `n`, `no`, or `off`: Unwind tables are not forced to be generated. If unwind\n+  tables are required by the target or `-C panic=unwind`, an error will be\n+  emitted.\n+\n+The default if not specified depends on the target.\n+\n ## incremental\n \n This flag allows you to enable incremental compilation, which allows `rustc`"}, {"sha": "bc1d9e1818c2f63d975787f921d8f2b71789a3b3", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=12fc1e0fa515e7039f403193fda63ae5b01945bf", "patch": "@@ -54,7 +54,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut ModuleLlvm, kind: Alloc\n         if tcx.sess.target.target.options.default_hidden_visibility {\n             llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n         }\n-        if tcx.sess.target.target.options.requires_uwtable {\n+        if tcx.sess.must_emit_unwind_tables() {\n             attributes::emit_uwtable(llfn, true);\n         }\n "}, {"sha": "64412843f6def5cf1fa382497b1d2c808d2e23b4", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=12fc1e0fa515e7039f403193fda63ae5b01945bf", "patch": "@@ -13,7 +13,6 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::config::{OptLevel, Sanitizer};\n use rustc_session::Session;\n-use rustc_target::spec::PanicStrategy;\n \n use crate::attributes;\n use crate::llvm::AttributePlace::Function;\n@@ -271,9 +270,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     //\n     // You can also find more info on why Windows is whitelisted here in:\n     //      https://bugzilla.mozilla.org/show_bug.cgi?id=1302078\n-    if cx.sess().panic_strategy() == PanicStrategy::Unwind\n-        || cx.sess().target.target.options.requires_uwtable\n-    {\n+    if cx.sess().must_emit_unwind_tables() {\n         attributes::emit_uwtable(llfn, true);\n     }\n "}, {"sha": "f600b1dbf54ac65f09c08b205ba133ac6b74f7ac", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=12fc1e0fa515e7039f403193fda63ae5b01945bf", "patch": "@@ -415,6 +415,7 @@ fn test_codegen_options_tracking_hash() {\n     tracked!(debuginfo, 0xdeadbeef);\n     tracked!(embed_bitcode, false);\n     tracked!(force_frame_pointers, Some(false));\n+    tracked!(force_unwind_tables, Some(true));\n     tracked!(inline_threshold, Some(0xf007ba11));\n     tracked!(linker_plugin_lto, LinkerPluginLto::LinkerPluginAuto);\n     tracked!(llvm_args, vec![String::from(\"1\"), String::from(\"2\")]);"}, {"sha": "984d47956ca59a22cec7b0d415079d2c2fcead15", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=12fc1e0fa515e7039f403193fda63ae5b01945bf", "patch": "@@ -668,6 +668,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"extra data to put in each output filename\"),\n     force_frame_pointers: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"force use of the frame pointers\"),\n+    force_unwind_tables: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"force use of unwind tables\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"enable incremental compilation\"),\n     inline_threshold: Option<usize> = (None, parse_opt_uint, [TRACKED],"}, {"sha": "48e36fdb3d4999de3bd7e4719ca2271c26ac80bc", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=12fc1e0fa515e7039f403193fda63ae5b01945bf", "patch": "@@ -646,6 +646,33 @@ impl Session {\n         }\n     }\n \n+    pub fn must_emit_unwind_tables(&self) -> bool {\n+        // This is used to control the emission of the `uwtable` attribute on\n+        // LLVM functions.\n+        //\n+        // At the very least, unwind tables are needed when compiling with\n+        // `-C panic=unwind`.\n+        //\n+        // On some targets (including windows), however, exceptions include\n+        // other events such as illegal instructions, segfaults, etc. This means\n+        // that on Windows we end up still needing unwind tables even if the `-C\n+        // panic=abort` flag is passed.\n+        //\n+        // You can also find more info on why Windows needs unwind tables in:\n+        //      https://bugzilla.mozilla.org/show_bug.cgi?id=1302078\n+        //\n+        // If a target requires unwind tables, then they must be emitted.\n+        // Otherwise, we can defer to the `-C force-unwind-tables=<yes/no>`\n+        // value, if it is provided, or disable them, if not.\n+        if self.panic_strategy() == PanicStrategy::Unwind {\n+            true\n+        } else if self.target.target.options.requires_uwtable {\n+            true\n+        } else {\n+            self.opts.cg.force_unwind_tables.unwrap_or(false)\n+        }\n+    }\n+\n     /// Returns the symbol name for the registrar function,\n     /// given the crate `Svh` and the function `DefIndex`.\n     pub fn generate_plugin_registrar_symbol(&self, disambiguator: CrateDisambiguator) -> String {\n@@ -1224,6 +1251,23 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         }\n     }\n \n+    // Unwind tables cannot be disabled if the target requires them.\n+    if let Some(include_uwtables) = sess.opts.cg.force_unwind_tables {\n+        if sess.panic_strategy() == PanicStrategy::Unwind && !include_uwtables {\n+            sess.err(\n+                \"panic=unwind requires unwind tables, they cannot be disabled \\\n+                     with `-C force-unwind-tables=no`.\",\n+            );\n+        }\n+\n+        if sess.target.target.options.requires_uwtable && !include_uwtables {\n+            sess.err(\n+                \"target requires unwind tables, they cannot be disabled with \\\n+                     `-C force-unwind-tables=no`.\",\n+            );\n+        }\n+    }\n+\n     // PGO does not work reliably with panic=unwind on Windows. Let's make it\n     // an error to combine the two for now. It always runs into an assertions\n     // if LLVM is built with assertions, but without assertions it sometimes"}, {"sha": "fbaf38d69df7fc2608e92060fe69bdc50b3bcefd", "filename": "src/test/codegen/force-unwind-tables.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Ftest%2Fcodegen%2Fforce-unwind-tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Ftest%2Fcodegen%2Fforce-unwind-tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fforce-unwind-tables.rs?ref=12fc1e0fa515e7039f403193fda63ae5b01945bf", "patch": "@@ -0,0 +1,7 @@\n+// min-llvm-version 8.0\n+// compile-flags: -C no-prepopulate-passes -C force-unwind-tables=y\n+\n+#![crate_type=\"lib\"]\n+\n+// CHECK: attributes #{{.*}} uwtable\n+pub fn foo() {}"}, {"sha": "314d9e778d5ae4c5580a30b915d0a78e00e443ee", "filename": "src/test/compile-fail/unwind-tables-panic-required.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Ftest%2Fcompile-fail%2Funwind-tables-panic-required.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Ftest%2Fcompile-fail%2Funwind-tables-panic-required.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funwind-tables-panic-required.rs?ref=12fc1e0fa515e7039f403193fda63ae5b01945bf", "patch": "@@ -0,0 +1,10 @@\n+// Tests that the compiler errors if the user tries to turn off unwind tables\n+// when they are required.\n+//\n+// compile-flags: -C panic=unwind -C force-unwind-tables=no\n+// ignore-tidy-linelength\n+//\n+// error-pattern: panic=unwind requires unwind tables, they cannot be disabled with `-C force-unwind-tables=no`.\n+\n+pub fn main() {\n+}"}, {"sha": "14c17893764145d49df5ceec4b9e0939cdaec524", "filename": "src/test/compile-fail/unwind-tables-target-required.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Ftest%2Fcompile-fail%2Funwind-tables-target-required.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12fc1e0fa515e7039f403193fda63ae5b01945bf/src%2Ftest%2Fcompile-fail%2Funwind-tables-target-required.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funwind-tables-target-required.rs?ref=12fc1e0fa515e7039f403193fda63ae5b01945bf", "patch": "@@ -0,0 +1,11 @@\n+// Tests that the compiler errors if the user tries to turn off unwind tables\n+// when they are required.\n+//\n+// only-x86_64-windows-msvc\n+// compile-flags: -C force-unwind-tables=no\n+// ignore-tidy-linelength\n+//\n+// error-pattern: target requires unwind tables, they cannot be disabled with `-C force-unwind-tables=no`.\n+\n+pub fn main() {\n+}"}]}