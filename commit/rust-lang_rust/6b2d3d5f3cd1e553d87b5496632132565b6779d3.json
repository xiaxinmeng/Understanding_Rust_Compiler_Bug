{"sha": "6b2d3d5f3cd1e553d87b5496632132565b6779d3", "node_id": "C_kwDOAAsO6NoAKDZiMmQzZDVmM2NkMWU1NTNkODdiNTQ5NjYzMjEzMjU2NWI2Nzc5ZDM", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-07-01T13:48:23Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-07-01T13:48:23Z"}, "message": "update cfg(bootstrap)s", "tree": {"sha": "184caf6abcd5f408509af8a9b6ecb23079f3ab00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/184caf6abcd5f408509af8a9b6ecb23079f3ab00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b2d3d5f3cd1e553d87b5496632132565b6779d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmK++zMACgkQzXazX3c0\ndp6xIA//ZpR7EoZLt/1CPHEeB+n3yjBQlNbmTiwtzbutdEiHwFLn+dZmN7X1dh8p\n/jtqCJYdTC/9/tyEs+e+13jdMV1nj1AixqFFFgsAXHXw7NMRCeezxXT3Xb9pPP5E\nOUyvE8jhHDb5is/xuc/VRhQ/2hhAux/tGCuW0qKjg3Deu4hO7/FOHwX+xxCycRhz\n+naiXavriBXUAJHhEgfnKCyO4jGUOqY2mVVir5vBI2a7znaeO1PUOiw5PThB8Sh2\niRpJbz9x7bl7VVcWlnPyf/9txh7PgyyWca1WiiUV+7HhVVepktXtAyfJ44NaY/hZ\nSlpXVPlQjw+qQwzYwfWqqOEdY6Hw3XjiJVH/XX/3qmYQSY4Wl7a5GsvRC41uSU7N\n9pMj7/LfE2BxbZhn8oe6WyhRBNMj0XOVdxdGVs0W784RQyGWsqBbx8WEHSWNKk1Q\neaVfPNRT0BrdOFDFQ90kmNxuG9kTxUSJhTWfAcaezhC+XmijeX8C60SwPb8BFQiK\nNqH3Q4+zJ+mAn4bDCY8KJ8kWr2mRuOA7X4Zh1yModckpDNt1zl4NAd/qnGuuJQN+\n0D3cnPj+JgG7D7kiqtKpE7I6X9R+YxNH3v8zIn2j265oRjytMHKgS1APX4aBL7tj\nxOqSdDvq4bllZ8JvHatIam+zJ9fvnU4P61sfsfuPLTPlHX7j/wE=\n=22rW\n-----END PGP SIGNATURE-----", "payload": "tree 184caf6abcd5f408509af8a9b6ecb23079f3ab00\nparent da957f62c2c7ac8cea9d66ab36994ce8660b1aed\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1656683303 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1656683303 +0200\n\nupdate cfg(bootstrap)s\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2d3d5f3cd1e553d87b5496632132565b6779d3", "html_url": "https://github.com/rust-lang/rust/commit/6b2d3d5f3cd1e553d87b5496632132565b6779d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b2d3d5f3cd1e553d87b5496632132565b6779d3/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da957f62c2c7ac8cea9d66ab36994ce8660b1aed", "url": "https://api.github.com/repos/rust-lang/rust/commits/da957f62c2c7ac8cea9d66ab36994ce8660b1aed", "html_url": "https://github.com/rust-lang/rust/commit/da957f62c2c7ac8cea9d66ab36994ce8660b1aed"}], "stats": {"total": 304, "additions": 84, "deletions": 220}, "files": [{"sha": "a5d9a2bc597fa8f2ef817fa9f26cad9a0b1ff4a6", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -478,7 +478,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         struct_span_err!(self, span, E0716, \"temporary value dropped while borrowed\",)\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}, {"sha": "f9fc526b5e4963b0fdc56174f25099779cb11cfc", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -286,7 +286,7 @@ impl Diagnostic {\n     ///\n     /// This span is *not* considered a [\"primary span\"][`MultiSpan`]; only\n     /// the `Span` supplied when creating the diagnostic is primary.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_label(&mut self, span: Span, label: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.span.push_span_label(span, self.subdiagnostic_message_to_diagnostic_message(label));\n         self\n@@ -405,7 +405,7 @@ impl Diagnostic {\n     }\n \n     /// Add a note attached to this diagnostic.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn note(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.sub(Level::Note, msg, MultiSpan::new(), None);\n         self\n@@ -428,7 +428,7 @@ impl Diagnostic {\n \n     /// Prints the span with a note above it.\n     /// This is like [`Diagnostic::note()`], but it gets its own span.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_note<S: Into<MultiSpan>>(\n         &mut self,\n         sp: S,\n@@ -450,15 +450,15 @@ impl Diagnostic {\n     }\n \n     /// Add a warning attached to this diagnostic.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn warn(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.sub(Level::Warning(None), msg, MultiSpan::new(), None);\n         self\n     }\n \n     /// Prints the span with a warning above it.\n     /// This is like [`Diagnostic::warn()`], but it gets its own span.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_warn<S: Into<MultiSpan>>(\n         &mut self,\n         sp: S,\n@@ -469,7 +469,7 @@ impl Diagnostic {\n     }\n \n     /// Add a help message attached to this diagnostic.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn help(&mut self, msg: impl Into<SubdiagnosticMessage>) -> &mut Self {\n         self.sub(Level::Help, msg, MultiSpan::new(), None);\n         self\n@@ -483,7 +483,7 @@ impl Diagnostic {\n \n     /// Prints the span with some help above it.\n     /// This is like [`Diagnostic::help()`], but it gets its own span.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_help<S: Into<MultiSpan>>(\n         &mut self,\n         sp: S,"}, {"sha": "1c7cbf8a16238472e55047d4fda4bc2ed70872bd", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -649,7 +649,7 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_warn(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -678,7 +678,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Allow` level at the given `span` and with the `msg`.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_allow(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -691,7 +691,7 @@ impl Handler {\n \n     /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n     /// Also include a code.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_warn_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -708,7 +708,7 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Warning(None), msg)\n     }\n@@ -728,13 +728,13 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Allow` level with the `msg`.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Allow, msg)\n     }\n \n     /// Construct a builder at the `Expect` level with the `msg`.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -744,7 +744,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Error` level at the given `span` and with the `msg`.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_err(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -756,7 +756,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Error` level at the given `span`, with the `msg`, and `code`.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_err_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -770,7 +770,7 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level with the `msg`.\n     // FIXME: This method should be removed (every error should have an associated error code).\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -785,7 +785,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Error` level with the `msg` and the `code`.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -797,7 +797,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Warn` level with the `msg` and the `code`.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -809,7 +809,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Fatal` level at the given `span` and with the `msg`.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_fatal(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -821,7 +821,7 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Fatal` level at the given `span`, with the `msg`, and `code`.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_fatal_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -834,33 +834,33 @@ impl Handler {\n     }\n \n     /// Construct a builder at the `Error` level with the `msg`.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         DiagnosticBuilder::new_fatal(self, msg)\n     }\n \n     /// Construct a builder at the `Help` level with the `msg`.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_help(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Help, msg)\n     }\n \n     /// Construct a builder at the `Note` level with the `msg`.\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_note_without_error(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Note, msg)\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_fatal(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.emit_diag_at_span(Diagnostic::new(Fatal, msg), span);\n         FatalError.raise()\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_fatal_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -871,7 +871,7 @@ impl Handler {\n         FatalError.raise()\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_err(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -880,7 +880,7 @@ impl Handler {\n         self.emit_diag_at_span(Diagnostic::new(Error { lint: false }, msg), span).unwrap()\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_err_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -893,12 +893,12 @@ impl Handler {\n         );\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_warn(&self, span: impl Into<MultiSpan>, msg: impl Into<DiagnosticMessage>) {\n         self.emit_diag_at_span(Diagnostic::new(Warning(None), msg), span);\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_warn_with_code(\n         &self,\n         span: impl Into<MultiSpan>,"}, {"sha": "bfe2d77378896cf9b37c813e7bd838e9a73389df", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -1077,7 +1077,7 @@ impl<'a> ExtCtxt<'a> {\n         self.current_expansion.id.expansion_cause()\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -1102,11 +1102,11 @@ impl<'a> ExtCtxt<'a> {\n     ///\n     /// Compilation will be stopped in the near future (at the end of\n     /// the macro expansion phase).\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.sess.parse_sess.span_diagnostic.span_err(sp, msg);\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.sess.parse_sess.span_diagnostic.span_warn(sp, msg);\n     }"}, {"sha": "63055c56c5c6d29cda840d8756efc92f481e3788", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -357,7 +357,7 @@ impl<'a> DerefMut for SnapshotParser<'a> {\n }\n \n impl<'a> Parser<'a> {\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub(super) fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -366,7 +366,7 @@ impl<'a> Parser<'a> {\n         err.span_err(sp, self.diagnostic())\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}, {"sha": "28ef384f2c5ad62aad6a187921b8f9838dbab528", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -13,7 +13,6 @@\n #![feature(let_chains)]\n #![feature(let_else)]\n #![feature(never_type)]\n-#![cfg_attr(bootstrap, feature(nll))]\n #![recursion_limit = \"256\"]\n #![allow(rustdoc::private_intra_doc_links)]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "74cd88ea0dd24e02ea08a1ec99fa0fbe04d9d10e", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -1102,49 +1102,6 @@ impl CrateCheckConfig {\n             .extend(atomic_values);\n \n         // Target specific values\n-        #[cfg(bootstrap)]\n-        {\n-            for target in TARGETS\n-                .iter()\n-                .map(|target| Target::expect_builtin(&TargetTriple::from_triple(target)))\n-            {\n-                self.values_valid\n-                    .entry(sym::target_os)\n-                    .or_default()\n-                    .insert(Symbol::intern(&target.options.os));\n-                self.values_valid\n-                    .entry(sym::target_family)\n-                    .or_default()\n-                    .extend(target.options.families.iter().map(|family| Symbol::intern(family)));\n-                self.values_valid\n-                    .entry(sym::target_arch)\n-                    .or_default()\n-                    .insert(Symbol::intern(&target.arch));\n-                self.values_valid\n-                    .entry(sym::target_endian)\n-                    .or_default()\n-                    .insert(Symbol::intern(&target.options.endian.as_str()));\n-                self.values_valid\n-                    .entry(sym::target_env)\n-                    .or_default()\n-                    .insert(Symbol::intern(&target.options.env));\n-                self.values_valid\n-                    .entry(sym::target_abi)\n-                    .or_default()\n-                    .insert(Symbol::intern(&target.options.abi));\n-                self.values_valid\n-                    .entry(sym::target_vendor)\n-                    .or_default()\n-                    .insert(Symbol::intern(&target.options.vendor));\n-                self.values_valid\n-                    .entry(sym::target_pointer_width)\n-                    .or_default()\n-                    .insert(sym::integer(target.pointer_width));\n-            }\n-        }\n-\n-        // Target specific values\n-        #[cfg(not(bootstrap))]\n         {\n             const VALUES: [&Symbol; 8] = [\n                 &sym::target_os,"}, {"sha": "7353c1ca0e2089025dd59d5a0a4331a578eb0307", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -6,7 +6,7 @@\n #![feature(once_cell)]\n #![feature(option_get_or_insert_default)]\n #![feature(rustc_attrs)]\n-#![cfg_attr(not(bootstrap), feature(map_many_mut))]\n+#![feature(map_many_mut)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "f31d52147b47b5f33279c8eacf2c7336aaed5f6b", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -311,15 +311,15 @@ impl ParseSess {\n         self.create_warning(warning).emit()\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.span_diagnostic.struct_err(msg)\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.span_diagnostic.struct_warn(msg)\n     }"}, {"sha": "2a5ddd4e9e42016f606aec114d49d4c27776d240", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -280,15 +280,15 @@ impl Session {\n         self.crate_types.set(crate_types).expect(\"`crate_types` was initialized twice\")\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_warn<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_warn_with_expectation<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -297,7 +297,7 @@ impl Session {\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_warn_with_expectation(sp, msg, id)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -306,47 +306,47 @@ impl Session {\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn(msg)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_warn_with_expectation(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n         id: lint::LintExpectationId,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn_with_expectation(msg, id)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_allow<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_allow(sp, msg)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n         id: lint::LintExpectationId,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_expect(msg, id)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -356,38 +356,38 @@ impl Session {\n         self.diagnostic().struct_span_err_with_code(sp, msg, code)\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.parse_sess.struct_err(msg)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n         code: DiagnosticId,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n         code: DiagnosticId,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn_with_code(msg, code)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_fatal<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -396,16 +396,16 @@ impl Session {\n     ) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().span_fatal(sp, msg)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -414,11 +414,11 @@ impl Session {\n     ) -> ! {\n         self.diagnostic().span_fatal_with_code(sp, msg, code)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn fatal(&self, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().fatal(msg).raise()\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_err_or_warn<S: Into<MultiSpan>>(\n         &self,\n         is_warning: bool,\n@@ -431,15 +431,15 @@ impl Session {\n             self.span_err(sp, msg);\n         }\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> ErrorGuaranteed {\n         self.diagnostic().span_err(sp, msg)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -448,7 +448,7 @@ impl Session {\n     ) {\n         self.diagnostic().span_err_with_code(sp, msg, code)\n     }\n-    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n+    #[rustc_lint_diagnostics]\n     pub fn err(&self, msg: impl Into<DiagnosticMessage>) -> ErrorGuaranteed {\n         self.diagnostic().err(msg)\n     }"}, {"sha": "d83bab7bbbdadd2d41bf9ef0e9bd8557dbb809ce", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -206,7 +206,7 @@ impl<T> Box<T> {\n     /// ```\n     /// let five = Box::new(5);\n     /// ```\n-    #[cfg(all(not(no_global_oom_handling), not(bootstrap)))]\n+    #[cfg(all(not(no_global_oom_handling)))]\n     #[inline(always)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n@@ -215,23 +215,6 @@ impl<T> Box<T> {\n         Box::new(x)\n     }\n \n-    /// Allocates memory on the heap and then places `x` into it.\n-    ///\n-    /// This doesn't actually allocate if `T` is zero-sized.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// let five = Box::new(5);\n-    /// ```\n-    #[cfg(all(not(no_global_oom_handling), bootstrap))]\n-    #[inline(always)]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[must_use]\n-    pub fn new(x: T) -> Self {\n-        box x\n-    }\n-\n     /// Constructs a new box with uninitialized contents.\n     ///\n     /// # Examples\n@@ -296,7 +279,7 @@ impl<T> Box<T> {\n     #[must_use]\n     #[inline(always)]\n     pub fn pin(x: T) -> Pin<Box<T>> {\n-        (#[cfg_attr(not(bootstrap), rustc_box)]\n+        (#[rustc_box]\n         Box::new(x))\n         .into()\n     }\n@@ -1255,7 +1238,7 @@ unsafe impl<#[may_dangle] T: ?Sized, A: Allocator> Drop for Box<T, A> {\n impl<T: Default> Default for Box<T> {\n     /// Creates a `Box<T>`, with the `Default` value for T.\n     fn default() -> Self {\n-        #[cfg_attr(not(bootstrap), rustc_box)]\n+        #[rustc_box]\n         Box::new(T::default())\n     }\n }\n@@ -1628,7 +1611,7 @@ impl<T, const N: usize> From<[T; N]> for Box<[T]> {\n     /// println!(\"{boxed:?}\");\n     /// ```\n     fn from(array: [T; N]) -> Box<[T]> {\n-        #[cfg_attr(not(bootstrap), rustc_box)]\n+        #[rustc_box]\n         Box::new(array)\n     }\n }"}, {"sha": "d3816d70b635da4110e4172762f0316120ee13c3", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -149,7 +149,6 @@\n #![feature(allocator_internals)]\n #![feature(allow_internal_unstable)]\n #![feature(associated_type_bounds)]\n-#![cfg_attr(bootstrap, feature(box_syntax))]\n #![feature(cfg_sanitize)]\n #![feature(const_deref)]\n #![feature(const_mut_refs)]"}, {"sha": "88eb6aa7a83c11ee77fb8e3495116af511e1bde7", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -34,7 +34,7 @@\n /// be mindful of side effects.\n ///\n /// [`Vec`]: crate::vec::Vec\n-#[cfg(all(not(no_global_oom_handling), not(test), not(bootstrap)))]\n+#[cfg(all(not(no_global_oom_handling), not(test)))]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"vec_macro\"]\n@@ -54,24 +54,6 @@ macro_rules! vec {\n     );\n }\n \n-/// Creates a `Vec` containing the arguments (bootstrap version).\n-#[cfg(all(not(no_global_oom_handling), not(test), bootstrap))]\n-#[macro_export]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_diagnostic_item = \"vec_macro\"]\n-#[allow_internal_unstable(box_syntax, liballoc_internals)]\n-macro_rules! vec {\n-    () => (\n-        $crate::__rust_force_expr!($crate::vec::Vec::new())\n-    );\n-    ($elem:expr; $n:expr) => (\n-        $crate::__rust_force_expr!($crate::vec::from_elem($elem, $n))\n-    );\n-    ($($x:expr),+ $(,)?) => (\n-        $crate::__rust_force_expr!(<[_]>::into_vec(box [$($x),+]))\n-    );\n-}\n-\n // HACK(japaric): with cfg(test) the inherent `[T]::into_vec` method, which is\n // required for this macro definition, is not available. Instead use the\n // `slice::into_vec`  function which is only available with cfg(test)"}, {"sha": "0537057666175bea5a5347cabbb8ccb0a2a26fc3", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -3017,7 +3017,7 @@ impl<T, const N: usize> From<[T; N]> for Vec<T> {\n     #[cfg(not(test))]\n     fn from(s: [T; N]) -> Vec<T> {\n         <[T]>::into_vec(\n-            #[cfg_attr(not(bootstrap), rustc_box)]\n+            #[rustc_box]\n             Box::new(s),\n         )\n     }"}, {"sha": "06dca7e59a2a696088e76775aa814bd14299b9c6", "filename": "library/core/src/clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Fsrc%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Fsrc%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fclone.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -106,7 +106,7 @@ use crate::marker::Destruct;\n #[lang = \"clone\"]\n #[rustc_diagnostic_item = \"Clone\"]\n #[rustc_trivial_field_reads]\n-#[cfg_attr(not(bootstrap), const_trait)]\n+#[const_trait]\n pub trait Clone: Sized {\n     /// Returns a copy of the value.\n     ///\n@@ -129,7 +129,6 @@ pub trait Clone: Sized {\n     /// allocations.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(bootstrap, default_method_body_is_const)]\n     fn clone_from(&mut self, source: &Self)\n     where\n         Self: ~const Destruct,"}, {"sha": "1d3466696ed0429a640dfd7b590b707b8f2abab3", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -214,7 +214,7 @@ use self::Ordering::*;\n         append_const_msg,\n     )\n )]\n-#[cfg_attr(not(bootstrap), const_trait)]\n+#[const_trait]\n #[rustc_diagnostic_item = \"PartialEq\"]\n pub trait PartialEq<Rhs: ?Sized = Self> {\n     /// This method tests for `self` and `other` values to be equal, and is used\n@@ -227,7 +227,6 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(bootstrap, default_method_body_is_const)]\n     fn ne(&self, other: &Rhs) -> bool {\n         !self.eq(other)\n     }\n@@ -1054,7 +1053,7 @@ impl PartialOrd for Ordering {\n         append_const_msg,\n     )\n )]\n-#[cfg_attr(not(bootstrap), const_trait)]\n+#[const_trait]\n #[rustc_diagnostic_item = \"PartialOrd\"]\n pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// This method returns an ordering between `self` and `other` values if one exists.\n@@ -1098,7 +1097,6 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(bootstrap, default_method_body_is_const)]\n     fn lt(&self, other: &Rhs) -> bool {\n         matches!(self.partial_cmp(other), Some(Less))\n     }\n@@ -1118,7 +1116,6 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(bootstrap, default_method_body_is_const)]\n     fn le(&self, other: &Rhs) -> bool {\n         // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.\n         // FIXME: The root cause was fixed upstream in LLVM with:\n@@ -1141,7 +1138,6 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(bootstrap, default_method_body_is_const)]\n     fn gt(&self, other: &Rhs) -> bool {\n         matches!(self.partial_cmp(other), Some(Greater))\n     }\n@@ -1161,7 +1157,6 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(bootstrap, default_method_body_is_const)]\n     fn ge(&self, other: &Rhs) -> bool {\n         matches!(self.partial_cmp(other), Some(Greater | Equal))\n     }"}, {"sha": "6c3bb7229e51f1008b84f3bbcf536dc33cbce506", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -2562,7 +2562,7 @@ macro_rules! tuple {\n \n macro_rules! maybe_tuple_doc {\n     ($a:ident @ #[$meta:meta] $item:item) => {\n-        #[cfg_attr(not(bootstrap), doc(tuple_variadic))]\n+        #[doc(tuple_variadic)]\n         #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n         #[$meta]\n         $item"}, {"sha": "1e4c22aea10560837719c6d0c0020ee99d058e17", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -900,7 +900,7 @@ mod impls {\n \n     macro_rules! maybe_tuple_doc {\n         ($a:ident @ #[$meta:meta] $item:item) => {\n-            #[cfg_attr(not(bootstrap), doc(tuple_variadic))]\n+            #[doc(tuple_variadic)]\n             #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n             #[$meta]\n             $item"}, {"sha": "401c8159988bb7697c798106ea44f434ff5bb6d4", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -996,7 +996,7 @@ impl<T> (T,) {}\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(tuple_variadic))]\n+#[doc(tuple_variadic)]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Clone> Clone for (T,) {\n     fn clone(&self) -> Self {\n@@ -1007,7 +1007,7 @@ impl<T: Clone> Clone for (T,) {\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(tuple_variadic))]\n+#[doc(tuple_variadic)]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Copy> Copy for (T,) {\n     // empty"}, {"sha": "970636c0cfcbbca2af6d86f08c04fd9bf094d9d8", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -492,27 +492,6 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n     unsafe { drop_in_place(to_drop) }\n }\n \n-/// Creates a null raw pointer.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// use std::ptr;\n-///\n-/// let p: *const i32 = ptr::null();\n-/// assert!(p.is_null());\n-/// ```\n-#[inline(always)]\n-#[must_use]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_promotable]\n-#[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n-#[rustc_diagnostic_item = \"ptr_null\"]\n-#[cfg(bootstrap)]\n-pub const fn null<T>() -> *const T {\n-    invalid(0)\n-}\n-\n /// Creates a null raw pointer.\n ///\n /// # Examples\n@@ -530,32 +509,10 @@ pub const fn null<T>() -> *const T {\n #[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n #[rustc_allow_const_fn_unstable(ptr_metadata)]\n #[rustc_diagnostic_item = \"ptr_null\"]\n-#[cfg(not(bootstrap))]\n pub const fn null<T: ?Sized + Thin>() -> *const T {\n     from_raw_parts(invalid(0), ())\n }\n \n-/// Creates a null mutable raw pointer.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// use std::ptr;\n-///\n-/// let p: *mut i32 = ptr::null_mut();\n-/// assert!(p.is_null());\n-/// ```\n-#[inline(always)]\n-#[must_use]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_promotable]\n-#[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n-#[rustc_diagnostic_item = \"ptr_null_mut\"]\n-#[cfg(bootstrap)]\n-pub const fn null_mut<T>() -> *mut T {\n-    invalid_mut(0)\n-}\n-\n /// Creates an invalid pointer with the given address.\n ///\n /// This is different from `addr as *const T`, which creates a pointer that picks up a previously\n@@ -707,7 +664,6 @@ where\n #[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n #[rustc_allow_const_fn_unstable(ptr_metadata)]\n #[rustc_diagnostic_item = \"ptr_null_mut\"]\n-#[cfg(not(bootstrap))]\n pub const fn null_mut<T: ?Sized + Thin>() -> *mut T {\n     from_raw_parts_mut(invalid_mut(0), ())\n }"}, {"sha": "b664b0bb866dbf0f4b1faa19681b8c470097aa56", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -107,7 +107,7 @@ macro_rules! tuple_impls {\n // Otherwise, it hides the docs entirely.\n macro_rules! maybe_tuple_doc {\n     ($a:ident @ #[$meta:meta] $item:item) => {\n-        #[cfg_attr(not(bootstrap), doc(tuple_variadic))]\n+        #[doc(tuple_variadic)]\n         #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n         #[$meta]\n         $item"}, {"sha": "e49595c25edde9f31cfc6de30844b72a980c0586", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -96,17 +96,14 @@ fn test_is_null() {\n     let nmi: *mut dyn ToString = null_mut::<isize>();\n     assert!(nmi.is_null());\n \n-    #[cfg(not(bootstrap))]\n-    {\n-        extern \"C\" {\n-            type Extern;\n-        }\n-        let ec: *const Extern = null::<Extern>();\n-        assert!(ec.is_null());\n-\n-        let em: *mut Extern = null_mut::<Extern>();\n-        assert!(em.is_null());\n+    extern \"C\" {\n+        type Extern;\n     }\n+    let ec: *const Extern = null::<Extern>();\n+    assert!(ec.is_null());\n+\n+    let em: *mut Extern = null_mut::<Extern>();\n+    assert!(em.is_null());\n }\n \n #[test]"}, {"sha": "3a1f2c953448ec762df1d9d86a440b54941d75d5", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -249,7 +249,6 @@\n #![feature(needs_panic_runtime)]\n #![feature(negative_impls)]\n #![feature(never_type)]\n-#![cfg_attr(bootstrap, feature(nll))]\n #![feature(platform_intrinsics)]\n #![feature(prelude_import)]\n #![feature(rustc_attrs)]"}, {"sha": "401c8159988bb7697c798106ea44f434ff5bb6d4", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -996,7 +996,7 @@ impl<T> (T,) {}\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(tuple_variadic))]\n+#[doc(tuple_variadic)]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Clone> Clone for (T,) {\n     fn clone(&self) -> Self {\n@@ -1007,7 +1007,7 @@ impl<T: Clone> Clone for (T,) {\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(tuple_variadic))]\n+#[doc(tuple_variadic)]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Copy> Copy for (T,) {\n     // empty"}, {"sha": "4a6ba6e10c334f429c706d49de81381cd27c4fe0", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -1,7 +1,6 @@\n #![no_std]\n #![unstable(feature = \"panic_unwind\", issue = \"32837\")]\n #![feature(link_cfg)]\n-#![cfg_attr(bootstrap, feature(native_link_modifiers_bundle))]\n #![feature(staged_api)]\n #![feature(c_unwind)]\n #![feature(cfg_target_abi)]"}, {"sha": "25a66ee23a0863c68f7aa801a09875804c8bc938", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b2d3d5f3cd1e553d87b5496632132565b6779d3/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b2d3d5f3cd1e553d87b5496632132565b6779d3/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=6b2d3d5f3cd1e553d87b5496632132565b6779d3", "patch": "@@ -11,7 +11,6 @@\n #![feature(drain_filter)]\n #![feature(let_chains)]\n #![feature(let_else)]\n-#![cfg_attr(bootstrap, feature(nll))]\n #![feature(test)]\n #![feature(never_type)]\n #![feature(once_cell)]"}]}