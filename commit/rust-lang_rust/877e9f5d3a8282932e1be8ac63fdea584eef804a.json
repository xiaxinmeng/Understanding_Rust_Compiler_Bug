{"sha": "877e9f5d3a8282932e1be8ac63fdea584eef804a", "node_id": "C_kwDOAAsO6NoAKDg3N2U5ZjVkM2E4MjgyOTMyZTFiZThhYzYzZmRlYTU4NGVlZjgwNGE", "commit": {"author": {"name": "Trevor Gross", "email": "tmgross@umich.edu", "date": "2023-01-30T23:11:03Z"}, "committer": {"name": "Trevor Gross", "email": "tmgross@umich.edu", "date": "2023-02-01T07:14:07Z"}, "message": "Change 'from_bytes_until_nul' to const stable", "tree": {"sha": "96a4a9affc1ed6b1fe228667ba1a164afbd524ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96a4a9affc1ed6b1fe228667ba1a164afbd524ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/877e9f5d3a8282932e1be8ac63fdea584eef804a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/877e9f5d3a8282932e1be8ac63fdea584eef804a", "html_url": "https://github.com/rust-lang/rust/commit/877e9f5d3a8282932e1be8ac63fdea584eef804a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/877e9f5d3a8282932e1be8ac63fdea584eef804a/comments", "author": {"login": "tgross35", "id": 13724985, "node_id": "MDQ6VXNlcjEzNzI0OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/13724985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgross35", "html_url": "https://github.com/tgross35", "followers_url": "https://api.github.com/users/tgross35/followers", "following_url": "https://api.github.com/users/tgross35/following{/other_user}", "gists_url": "https://api.github.com/users/tgross35/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgross35/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgross35/subscriptions", "organizations_url": "https://api.github.com/users/tgross35/orgs", "repos_url": "https://api.github.com/users/tgross35/repos", "events_url": "https://api.github.com/users/tgross35/events{/privacy}", "received_events_url": "https://api.github.com/users/tgross35/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tgross35", "id": 13724985, "node_id": "MDQ6VXNlcjEzNzI0OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/13724985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgross35", "html_url": "https://github.com/tgross35", "followers_url": "https://api.github.com/users/tgross35/followers", "following_url": "https://api.github.com/users/tgross35/following{/other_user}", "gists_url": "https://api.github.com/users/tgross35/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgross35/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgross35/subscriptions", "organizations_url": "https://api.github.com/users/tgross35/orgs", "repos_url": "https://api.github.com/users/tgross35/repos", "events_url": "https://api.github.com/users/tgross35/events{/privacy}", "received_events_url": "https://api.github.com/users/tgross35/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83b05ef0ee05307143e2d04db401d6085f4759b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/83b05ef0ee05307143e2d04db401d6085f4759b9", "html_url": "https://github.com/rust-lang/rust/commit/83b05ef0ee05307143e2d04db401d6085f4759b9"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "82e5fa75ded841e0299b63574cf4a658066020ec", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/877e9f5d3a8282932e1be8ac63fdea584eef804a/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877e9f5d3a8282932e1be8ac63fdea584eef804a/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=877e9f5d3a8282932e1be8ac63fdea584eef804a", "patch": "@@ -320,8 +320,9 @@ impl CStr {\n     /// assert_eq!(c_str.to_str().unwrap(), \"AAAAAAAA\");\n     /// ```\n     ///\n+    #[rustc_allow_const_fn_unstable(const_slice_index)]\n     #[stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_unstable(feature = \"const_cstr_from_bytes_until_nul\", issue = \"95027\")]\n+    #[rustc_const_stable(feature = \"cstr_from_bytes_until_nul\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub const fn from_bytes_until_nul(bytes: &[u8]) -> Result<&CStr, FromBytesUntilNulError> {\n         let nul_pos = memchr::memchr(0, bytes);\n         match nul_pos {"}, {"sha": "98c8349eb602484c795f9514f697616558086b53", "filename": "library/core/src/slice/memchr.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/877e9f5d3a8282932e1be8ac63fdea584eef804a/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877e9f5d3a8282932e1be8ac63fdea584eef804a/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmemchr.rs?ref=877e9f5d3a8282932e1be8ac63fdea584eef804a", "patch": "@@ -16,25 +16,29 @@ const USIZE_BYTES: usize = mem::size_of::<usize>();\n /// bytes where the borrow propagated all the way to the most significant\n /// bit.\"\n #[inline]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn contains_zero_byte(x: usize) -> bool {\n     x.wrapping_sub(LO_USIZE) & !x & HI_USIZE != 0\n }\n \n-#[cfg(target_pointer_width = \"16\")]\n #[inline]\n+#[cfg(target_pointer_width = \"16\")]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn repeat_byte(b: u8) -> usize {\n     (b as usize) << 8 | b as usize\n }\n \n-#[cfg(not(target_pointer_width = \"16\"))]\n #[inline]\n+#[cfg(not(target_pointer_width = \"16\"))]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn repeat_byte(b: u8) -> usize {\n     (b as usize) * (usize::MAX / 255)\n }\n \n /// Returns the first index matching the byte `x` in `text`.\n-#[must_use]\n #[inline]\n+#[must_use]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n pub const fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n     // Fast path for small slices.\n     if text.len() < 2 * USIZE_BYTES {\n@@ -45,6 +49,7 @@ pub const fn memchr(x: u8, text: &[u8]) -> Option<usize> {\n }\n \n #[inline]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn memchr_naive(x: u8, text: &[u8]) -> Option<usize> {\n     let mut i = 0;\n \n@@ -60,6 +65,10 @@ const fn memchr_naive(x: u8, text: &[u8]) -> Option<usize> {\n     None\n }\n \n+#[rustc_allow_const_fn_unstable(const_cmp)]\n+#[rustc_allow_const_fn_unstable(const_slice_index)]\n+#[rustc_allow_const_fn_unstable(const_align_offset)]\n+#[rustc_const_stable(feature = \"const_memchr\", since = \"1.65.0\")]\n const fn memchr_aligned(x: u8, text: &[u8]) -> Option<usize> {\n     // Scan for a single byte value by reading two `usize` words at a time.\n     //"}]}