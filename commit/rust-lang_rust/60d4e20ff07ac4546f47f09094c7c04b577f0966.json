{"sha": "60d4e20ff07ac4546f47f09094c7c04b577f0966", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZDRlMjBmZjA3YWM0NTQ2ZjQ3ZjA5MDk0YzdjMDRiNTc3ZjA5NjY=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2019-12-06T00:26:21Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2019-12-09T16:08:27Z"}, "message": "compiletest: add aux-crate directive", "tree": {"sha": "968239eaa2584fd2ba3c1362f291ce064cc2e9fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/968239eaa2584fd2ba3c1362f291ce064cc2e9fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60d4e20ff07ac4546f47f09094c7c04b577f0966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60d4e20ff07ac4546f47f09094c7c04b577f0966", "html_url": "https://github.com/rust-lang/rust/commit/60d4e20ff07ac4546f47f09094c7c04b577f0966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60d4e20ff07ac4546f47f09094c7c04b577f0966/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "590dd7dfef3e835756edb5f920bf31cd19eef4d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/590dd7dfef3e835756edb5f920bf31cd19eef4d0", "html_url": "https://github.com/rust-lang/rust/commit/590dd7dfef3e835756edb5f920bf31cd19eef4d0"}], "stats": {"total": 245, "additions": 129, "deletions": 116}, "files": [{"sha": "18f9d8bab600498d429542aff5e0eb4e5fedf63e", "filename": "src/test/run-make-fulldeps/extern-flag-noprelude/Makefile", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2FMakefile?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -1,11 +0,0 @@\n--include ../tools.mk\n-\n-# Test --extern noprelude\n-\n-all:\n-\t$(RUSTC) dep.rs --crate-name=dep --crate-type=rlib\n-\t$(RUSTC) foo.rs --edition=2018 -Zunstable-options \\\n-\t\t--extern noprelude:dep=$(TMPDIR)/libdep.rlib 2>&1 | \\\n-\t\t$(CGREP) -e 'failed to resolve.*`dep`'\n-\t$(RUSTC) foo.rs --edition=2018 -Zunstable-options \\\n-\t\t--extern dep=$(TMPDIR)/libdep.rlib"}, {"sha": "9bb1b78409f860a0b3fdf7867d20e50d282c8c52", "filename": "src/test/run-make-fulldeps/extern-flag-noprelude/foo.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/590dd7dfef3e835756edb5f920bf31cd19eef4d0/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-flag-noprelude%2Ffoo.rs?ref=590dd7dfef3e835756edb5f920bf31cd19eef4d0", "patch": "@@ -1,3 +0,0 @@\n-fn main() {\n-    dep::somefun();\n-}"}, {"sha": "003d079a470c0cc2756f75d6fde1c83991bf30da", "filename": "src/test/rustdoc/issue-66159.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftest%2Frustdoc%2Fissue-66159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftest%2Frustdoc%2Fissue-66159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-66159.rs?ref=60d4e20ff07ac4546f47f09094c7c04b577f0966", "patch": "@@ -1,6 +1,5 @@\n-// aux-build:issue-66159-1.rs\n+// aux-crate:priv:issue_66159_1=issue-66159-1.rs\n // compile-flags:-Z unstable-options\n-// extern-private:issue_66159_1\n \n // The issue was an ICE which meant that we never actually generated the docs\n // so if we have generated the docs, we're okay."}, {"sha": "dd2f373f849c65ce8d79232002a115d595962c7f", "filename": "src/test/ui/extern-flag/auxiliary/somedep.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftest%2Fui%2Fextern-flag%2Fauxiliary%2Fsomedep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftest%2Fui%2Fextern-flag%2Fauxiliary%2Fsomedep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fauxiliary%2Fsomedep.rs?ref=60d4e20ff07ac4546f47f09094c7c04b577f0966", "previous_filename": "src/test/run-make-fulldeps/extern-flag-noprelude/dep.rs"}, {"sha": "f69f552b69d8aa8a45bc5e6444361ef95c2665c0", "filename": "src/test/ui/extern-flag/noprelude-resolves.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftest%2Fui%2Fextern-flag%2Fnoprelude-resolves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftest%2Fui%2Fextern-flag%2Fnoprelude-resolves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fnoprelude-resolves.rs?ref=60d4e20ff07ac4546f47f09094c7c04b577f0966", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+// aux-crate:noprelude:somedep=somedep.rs\n+// compile-flags: -Zunstable-options\n+// edition:2018\n+\n+// `extern crate` can be used to add to prelude.\n+extern crate somedep;\n+\n+fn main() {\n+    somedep::somefun();\n+}"}, {"sha": "cdbf34091007ef8cec068d35bfc228be00bc969a", "filename": "src/test/ui/extern-flag/noprelude.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftest%2Fui%2Fextern-flag%2Fnoprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftest%2Fui%2Fextern-flag%2Fnoprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fnoprelude.rs?ref=60d4e20ff07ac4546f47f09094c7c04b577f0966", "patch": "@@ -0,0 +1,7 @@\n+// aux-crate:noprelude:somedep=somedep.rs\n+// compile-flags: -Zunstable-options\n+// edition:2018\n+\n+fn main() {\n+    somedep::somefun();  //~ ERROR failed to resolve\n+}"}, {"sha": "beb9200dddabc7eaec08406abf2ea163947664c5", "filename": "src/test/ui/extern-flag/noprelude.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftest%2Fui%2Fextern-flag%2Fnoprelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftest%2Fui%2Fextern-flag%2Fnoprelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fnoprelude.stderr?ref=60d4e20ff07ac4546f47f09094c7c04b577f0966", "patch": "@@ -0,0 +1,9 @@\n+error[E0433]: failed to resolve: use of undeclared type or module `somedep`\n+  --> $DIR/noprelude.rs:6:5\n+   |\n+LL |     somedep::somefun();\n+   |     ^^^^^^^ use of undeclared type or module `somedep`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "feab72b3efa42607e764f6a3acbafee1ca709caa", "filename": "src/test/ui/privacy/pub-priv-dep/pub-priv1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs?ref=60d4e20ff07ac4546f47f09094c7c04b577f0966", "patch": "@@ -1,11 +1,10 @@\n- // aux-build:priv_dep.rs\n+ // aux-crate:priv:priv_dep=priv_dep.rs\n  // aux-build:pub_dep.rs\n- // extern-private:priv_dep\n #![deny(exported_private_dependencies)]\n \n // This crate is a private dependency\n extern crate priv_dep;\n-// This crate is a public dependenct\n+// This crate is a public dependency\n extern crate pub_dep;\n \n use priv_dep::{OtherType, OtherTrait};"}, {"sha": "f21b11f5b32f86ca50a463bbecce0a96e89153d0", "filename": "src/test/ui/privacy/pub-priv-dep/pub-priv1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr?ref=60d4e20ff07ac4546f47f09094c7c04b577f0966", "patch": "@@ -1,23 +1,23 @@\n error: type `priv_dep::OtherType` from private dependency 'priv_dep' in public interface\n-  --> $DIR/pub-priv1.rs:21:5\n+  --> $DIR/pub-priv1.rs:20:5\n    |\n LL |     pub field: OtherType,\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/pub-priv1.rs:4:9\n+  --> $DIR/pub-priv1.rs:3:9\n    |\n LL | #![deny(exported_private_dependencies)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: type `priv_dep::OtherType` from private dependency 'priv_dep' in public interface\n-  --> $DIR/pub-priv1.rs:28:5\n+  --> $DIR/pub-priv1.rs:27:5\n    |\n LL |     pub fn pub_fn(param: OtherType) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trait `priv_dep::OtherTrait` from private dependency 'priv_dep' in public interface\n-  --> $DIR/pub-priv1.rs:34:1\n+  --> $DIR/pub-priv1.rs:33:1\n    |\n LL | / pub trait MyPubTrait {\n LL | |     type Foo: OtherTrait;"}, {"sha": "46cce6394e617e66ea5f367e00a626c7d583357c", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=60d4e20ff07ac4546f47f09094c7c04b577f0966", "patch": "@@ -71,6 +71,7 @@ pub struct EarlyProps {\n     pub ignore: Ignore,\n     pub should_fail: bool,\n     pub aux: Vec<String>,\n+    pub aux_crate: Vec<(String, String)>,\n     pub revisions: Vec<String>,\n }\n \n@@ -80,6 +81,7 @@ impl EarlyProps {\n             ignore: Ignore::Run,\n             should_fail: false,\n             aux: Vec::new(),\n+            aux_crate: Vec::new(),\n             revisions: vec![],\n         };\n \n@@ -157,6 +159,10 @@ impl EarlyProps {\n                 props.aux.push(s);\n             }\n \n+            if let Some(ac) = config.parse_aux_crate(ln) {\n+                props.aux_crate.push(ac);\n+            }\n+\n             if let Some(r) = config.parse_revisions(ln) {\n                 props.revisions.extend(r);\n             }\n@@ -311,10 +317,9 @@ pub struct TestProps {\n     // directory as the test, but for backwards compatibility reasons\n     // we also check the auxiliary directory)\n     pub aux_builds: Vec<String>,\n-    // A list of crates to pass '--extern priv:name=PATH' flags for\n-    // This should be a subset of 'aux_build'\n-    // FIXME: Replace this with a better solution: https://github.com/rust-lang/rust/pull/54020\n-    pub extern_private: Vec<String>,\n+    // Similar to `aux_builds`, but a list of NAME=somelib.rs of dependencies\n+    // to build and pass with the `--extern` flag.\n+    pub aux_crates: Vec<(String, String)>,\n     // Environment settings to use for compiling\n     pub rustc_env: Vec<(String, String)>,\n     // Environment variables to unset prior to compiling.\n@@ -387,7 +392,7 @@ impl TestProps {\n             run_flags: None,\n             pp_exact: None,\n             aux_builds: vec![],\n-            extern_private: vec![],\n+            aux_crates: vec![],\n             revisions: vec![],\n             rustc_env: vec![],\n             unset_rustc_env: vec![],\n@@ -514,8 +519,8 @@ impl TestProps {\n                 self.aux_builds.push(ab);\n             }\n \n-            if let Some(ep) = config.parse_extern_private(ln) {\n-                self.extern_private.push(ep);\n+            if let Some(ac) = config.parse_aux_crate(ln) {\n+                self.aux_crates.push(ac);\n             }\n \n             if let Some(ee) = config.parse_env(ln, \"exec-env\") {\n@@ -713,8 +718,14 @@ impl Config {\n             .map(|r| r.trim().to_string())\n     }\n \n-    fn parse_extern_private(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"extern-private\")\n+    fn parse_aux_crate(&self, line: &str) -> Option<(String, String)> {\n+        self.parse_name_value_directive(line, \"aux-crate\").map(|r| {\n+            let mut parts = r.trim().splitn(2, '=');\n+            (\n+                parts.next().expect(\"aux-crate name\").to_string(),\n+                parts.next().expect(\"aux-crate value\").to_string(),\n+            )\n+        })\n     }\n \n     fn parse_compile_flags(&self, line: &str) -> Option<String> {"}, {"sha": "480868440b8dce9930f4f976d488fc5af9d278ef", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 75, "deletions": 84, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d4e20ff07ac4546f47f09094c7c04b577f0966/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=60d4e20ff07ac4546f47f09094c7c04b577f0966", "patch": "@@ -1776,93 +1776,16 @@ impl<'test> TestCx<'test> {\n             create_dir_all(&aux_dir).unwrap();\n         }\n \n-        // Use a Vec instead of a HashMap to preserve original order\n-        let mut extern_priv = self.props.extern_private.clone();\n-\n-        let mut add_extern_priv = |priv_dep: &str, dylib: bool| {\n-            let lib_name = get_lib_name(priv_dep, dylib);\n-            rustc\n-                .arg(\"--extern\")\n-                .arg(format!(\"priv:{}={}\", priv_dep, aux_dir.join(lib_name).to_str().unwrap()));\n-        };\n-\n         for rel_ab in &self.props.aux_builds {\n-            let aux_testpaths = self.compute_aux_test_paths(rel_ab);\n-            let aux_props =\n-                self.props\n-                    .from_aux_file(&aux_testpaths.file, self.revision, self.config);\n-            let aux_output = TargetLocation::ThisDirectory(self.aux_output_dir_name());\n-            let aux_cx = TestCx {\n-                config: self.config,\n-                props: &aux_props,\n-                testpaths: &aux_testpaths,\n-                revision: self.revision,\n-            };\n-            // Create the directory for the stdout/stderr files.\n-            create_dir_all(aux_cx.output_base_dir()).unwrap();\n-            let mut aux_rustc = aux_cx.make_compile_args(&aux_testpaths.file, aux_output);\n-\n-            let (dylib, crate_type) = if aux_props.no_prefer_dynamic {\n-                (true, None)\n-            } else if self.config.target.contains(\"cloudabi\")\n-                || self.config.target.contains(\"emscripten\")\n-                || (self.config.target.contains(\"musl\")\n-                    && !aux_props.force_host\n-                    && !self.config.host.contains(\"musl\"))\n-                || self.config.target.contains(\"wasm32\")\n-                || self.config.target.contains(\"nvptx\")\n-                || self.is_vxworks_pure_static()\n-            {\n-                // We primarily compile all auxiliary libraries as dynamic libraries\n-                // to avoid code size bloat and large binaries as much as possible\n-                // for the test suite (otherwise including libstd statically in all\n-                // executables takes up quite a bit of space).\n-                //\n-                // For targets like MUSL or Emscripten, however, there is no support for\n-                // dynamic libraries so we just go back to building a normal library. Note,\n-                // however, that for MUSL if the library is built with `force_host` then\n-                // it's ok to be a dylib as the host should always support dylibs.\n-                (false, Some(\"lib\"))\n-            } else {\n-                (true, Some(\"dylib\"))\n-            };\n-\n-            let trimmed = rel_ab.trim_end_matches(\".rs\").to_string();\n-\n-            // Normally, every 'extern-private' has a corresponding 'aux-build'\n-            // entry. If so, we remove it from our list of private crates,\n-            // and add an '--extern priv:NAME=PATH' flag to rustc\n-            if extern_priv.remove_item(&trimmed).is_some() {\n-                add_extern_priv(&trimmed, dylib);\n-            }\n-\n-            if let Some(crate_type) = crate_type {\n-                aux_rustc.args(&[\"--crate-type\", crate_type]);\n-            }\n-\n-            aux_rustc.arg(\"-L\").arg(&aux_dir);\n-\n-            let auxres = aux_cx.compose_and_run(\n-                aux_rustc,\n-                aux_cx.config.compile_lib_path.to_str().unwrap(),\n-                Some(aux_dir.to_str().unwrap()),\n-                None,\n-            );\n-            if !auxres.status.success() {\n-                self.fatal_proc_rec(\n-                    &format!(\n-                        \"auxiliary build of {:?} failed to compile: \",\n-                        aux_testpaths.file.display()\n-                    ),\n-                    &auxres,\n-                );\n-            }\n+            self.build_auxiliary(rel_ab, &aux_dir);\n         }\n \n-        // Add any '--extern' private entries without a matching\n-        // 'aux-build'\n-        for private_lib in extern_priv {\n-            add_extern_priv(&private_lib, true);\n+        for (aux_name, aux_path) in &self.props.aux_crates {\n+            let is_dylib = self.build_auxiliary(&aux_path, &aux_dir);\n+            let lib_name = get_lib_name(&aux_path.trim_end_matches(\".rs\").replace('-', \"_\"),\n+                is_dylib);\n+            rustc.arg(\"--extern\")\n+                .arg(format!(\"{}={}/{}\", aux_name, aux_dir.display(), lib_name));\n         }\n \n         self.props.unset_rustc_env.clone()\n@@ -1877,6 +1800,74 @@ impl<'test> TestCx<'test> {\n         )\n     }\n \n+    /// Builds an aux dependency.\n+    ///\n+    /// Returns whether or not it is a dylib.\n+    fn build_auxiliary(&self, source_path: &str, aux_dir: &Path) -> bool {\n+        let aux_testpaths = self.compute_aux_test_paths(source_path);\n+        let aux_props =\n+            self.props\n+                .from_aux_file(&aux_testpaths.file, self.revision, self.config);\n+        let aux_output = TargetLocation::ThisDirectory(self.aux_output_dir_name());\n+        let aux_cx = TestCx {\n+            config: self.config,\n+            props: &aux_props,\n+            testpaths: &aux_testpaths,\n+            revision: self.revision,\n+        };\n+        // Create the directory for the stdout/stderr files.\n+        create_dir_all(aux_cx.output_base_dir()).unwrap();\n+        let mut aux_rustc = aux_cx.make_compile_args(&aux_testpaths.file, aux_output);\n+\n+        let (dylib, crate_type) = if aux_props.no_prefer_dynamic {\n+            (true, None)\n+        } else if self.config.target.contains(\"cloudabi\")\n+            || self.config.target.contains(\"emscripten\")\n+            || (self.config.target.contains(\"musl\")\n+                && !aux_props.force_host\n+                && !self.config.host.contains(\"musl\"))\n+            || self.config.target.contains(\"wasm32\")\n+            || self.config.target.contains(\"nvptx\")\n+            || self.is_vxworks_pure_static()\n+        {\n+            // We primarily compile all auxiliary libraries as dynamic libraries\n+            // to avoid code size bloat and large binaries as much as possible\n+            // for the test suite (otherwise including libstd statically in all\n+            // executables takes up quite a bit of space).\n+            //\n+            // For targets like MUSL or Emscripten, however, there is no support for\n+            // dynamic libraries so we just go back to building a normal library. Note,\n+            // however, that for MUSL if the library is built with `force_host` then\n+            // it's ok to be a dylib as the host should always support dylibs.\n+            (false, Some(\"lib\"))\n+        } else {\n+            (true, Some(\"dylib\"))\n+        };\n+\n+        if let Some(crate_type) = crate_type {\n+            aux_rustc.args(&[\"--crate-type\", crate_type]);\n+        }\n+\n+        aux_rustc.arg(\"-L\").arg(&aux_dir);\n+\n+        let auxres = aux_cx.compose_and_run(\n+            aux_rustc,\n+            aux_cx.config.compile_lib_path.to_str().unwrap(),\n+            Some(aux_dir.to_str().unwrap()),\n+            None,\n+        );\n+        if !auxres.status.success() {\n+            self.fatal_proc_rec(\n+                &format!(\n+                    \"auxiliary build of {:?} failed to compile: \",\n+                    aux_testpaths.file.display()\n+                ),\n+                &auxres,\n+            );\n+        }\n+        dylib\n+    }\n+\n     fn compose_and_run(\n         &self,\n         mut command: Command,"}]}