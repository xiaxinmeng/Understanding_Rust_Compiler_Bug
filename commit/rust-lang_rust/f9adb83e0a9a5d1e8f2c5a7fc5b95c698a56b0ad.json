{"sha": "f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad", "node_id": "C_kwDOAAsO6NoAKGY5YWRiODNlMGE5YTVkMWU4ZjJjNWE3ZmM1Yjk1YzY5OGE1NmIwYWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-23T15:53:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-23T15:53:39Z"}, "message": "Auto merge of #10392 - mkrasnitski:false-positives, r=Jarcho\n\nFix more false positives for `extra_unused_type_parameters`\n\nBuilds on #10321. All empty functions are no longer linted, instead of just those that have trait bounds on them. Also, if a trait bound contains a non-public trait (un-exported, but still potentially reachable), then the corresponding type parameter isn't linted.\n\nFinally, added support for the `avoid_breaking_exported_api` config option.\n\nr? `@flip1995`\nchangelog: none", "tree": {"sha": "e4acbf2f3e6c6f2ea01c79d97e150f9f6412b45c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4acbf2f3e6c6f2ea01c79d97e150f9f6412b45c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad", "html_url": "https://github.com/rust-lang/rust/commit/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d08917d3a964f8498e6cc47f0a34770032f5e61", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d08917d3a964f8498e6cc47f0a34770032f5e61", "html_url": "https://github.com/rust-lang/rust/commit/8d08917d3a964f8498e6cc47f0a34770032f5e61"}, {"sha": "528bb639d4a72310b625b947874aad27b5ee5088", "url": "https://api.github.com/repos/rust-lang/rust/commits/528bb639d4a72310b625b947874aad27b5ee5088", "html_url": "https://github.com/rust-lang/rust/commit/528bb639d4a72310b625b947874aad27b5ee5088"}], "stats": {"total": 182, "additions": 122, "deletions": 60}, "files": [{"sha": "20565e1d232eebad3e0ab9dd4ffb6d43f62ce560", "filename": "clippy_lints/src/extra_unused_type_parameters.rs", "status": "modified", "additions": 57, "deletions": 26, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs?ref=f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad", "patch": "@@ -4,14 +4,17 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::MultiSpan;\n use rustc_hir::intravisit::{walk_impl_item, walk_item, walk_param_bound, walk_ty, Visitor};\n use rustc_hir::{\n-    BodyId, ExprKind, GenericParamKind, Generics, ImplItem, ImplItemKind, Item, ItemKind, PredicateOrigin, Ty, TyKind,\n-    WherePredicate,\n+    BodyId, ExprKind, GenericBound, GenericParamKind, Generics, ImplItem, ImplItemKind, Item, ItemKind,\n+    PredicateOrigin, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{def_id::DefId, Span};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{\n+    def_id::{DefId, LocalDefId},\n+    Span,\n+};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -38,7 +41,29 @@ declare_clippy_lint! {\n     complexity,\n     \"unused type parameters in function definitions\"\n }\n-declare_lint_pass!(ExtraUnusedTypeParameters => [EXTRA_UNUSED_TYPE_PARAMETERS]);\n+\n+pub struct ExtraUnusedTypeParameters {\n+    avoid_breaking_exported_api: bool,\n+}\n+\n+impl ExtraUnusedTypeParameters {\n+    pub fn new(avoid_breaking_exported_api: bool) -> Self {\n+        Self {\n+            avoid_breaking_exported_api,\n+        }\n+    }\n+\n+    /// Don't lint external macros or functions with empty bodies. Also, don't lint public items if\n+    /// the `avoid_breaking_exported_api` config option is set.\n+    fn check_false_positive(&self, cx: &LateContext<'_>, span: Span, def_id: LocalDefId, body_id: BodyId) -> bool {\n+        let body = cx.tcx.hir().body(body_id).value;\n+        let fn_empty = matches!(&body.kind, ExprKind::Block(blk, None) if blk.stmts.is_empty() && blk.expr.is_none());\n+        let is_exported = cx.effective_visibilities.is_exported(def_id);\n+        in_external_macro(cx.sess(), span) || (self.avoid_breaking_exported_api && is_exported) || fn_empty\n+    }\n+}\n+\n+impl_lint_pass!(ExtraUnusedTypeParameters => [EXTRA_UNUSED_TYPE_PARAMETERS]);\n \n /// A visitor struct that walks a given function and gathers generic type parameters, plus any\n /// trait bounds those parameters have.\n@@ -56,13 +81,10 @@ struct TypeWalker<'cx, 'tcx> {\n     /// Otherwise, if any type parameters end up being used, or if any lifetime or const-generic\n     /// parameters are present, this will be set to `false`.\n     all_params_unused: bool,\n-    /// Whether or not the function has an empty body, in which case any bounded type parameters\n-    /// will not be linted.\n-    fn_body_empty: bool,\n }\n \n impl<'cx, 'tcx> TypeWalker<'cx, 'tcx> {\n-    fn new(cx: &'cx LateContext<'tcx>, generics: &'tcx Generics<'tcx>, body_id: BodyId) -> Self {\n+    fn new(cx: &'cx LateContext<'tcx>, generics: &'tcx Generics<'tcx>) -> Self {\n         let mut all_params_unused = true;\n         let ty_params = generics\n             .params\n@@ -79,17 +101,18 @@ impl<'cx, 'tcx> TypeWalker<'cx, 'tcx> {\n             })\n             .collect();\n \n-        let body = cx.tcx.hir().body(body_id).value;\n-        let fn_body_empty =\n-            matches!(&body.kind, ExprKind::Block(block, None) if block.stmts.is_empty() && block.expr.is_none());\n-\n         Self {\n             cx,\n             ty_params,\n             bounds: FxHashMap::default(),\n             generics,\n             all_params_unused,\n-            fn_body_empty,\n+        }\n+    }\n+\n+    fn mark_param_used(&mut self, def_id: DefId) {\n+        if self.ty_params.remove(&def_id).is_some() {\n+            self.all_params_unused = false;\n         }\n     }\n \n@@ -128,14 +151,18 @@ impl<'cx, 'tcx> TypeWalker<'cx, 'tcx> {\n     }\n }\n \n+/// Given a generic bound, if the bound is for a trait that's not a `LangItem`, return the\n+/// `LocalDefId` for that trait.\n+fn bound_to_trait_def_id(bound: &GenericBound<'_>) -> Option<LocalDefId> {\n+    bound.trait_ref()?.trait_def_id()?.as_local()\n+}\n+\n impl<'cx, 'tcx> Visitor<'tcx> for TypeWalker<'cx, 'tcx> {\n     type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_ty(&mut self, t: &'tcx Ty<'tcx>) {\n         if let Some((def_id, _)) = t.peel_refs().as_generic_param() {\n-            if self.ty_params.remove(&def_id).is_some() {\n-                self.all_params_unused = false;\n-            }\n+            self.mark_param_used(def_id);\n         } else if let TyKind::OpaqueDef(id, _, _) = t.kind {\n             // Explicitly walk OpaqueDef. Normally `walk_ty` would do the job, but it calls\n             // `visit_nested_item`, which checks that `Self::NestedFilter::INTER` is set. We're\n@@ -151,12 +178,16 @@ impl<'cx, 'tcx> Visitor<'tcx> for TypeWalker<'cx, 'tcx> {\n         if let WherePredicate::BoundPredicate(predicate) = predicate {\n             // Collect spans for any bounds on type parameters. We only keep bounds that appear in\n             // the list of generics (not in a where-clause).\n-            //\n-            // Also, if the function body is empty, we don't lint the corresponding type parameters\n-            // (See https://github.com/rust-lang/rust-clippy/issues/10319).\n             if let Some((def_id, _)) = predicate.bounded_ty.peel_refs().as_generic_param() {\n-                if self.fn_body_empty {\n-                    self.ty_params.remove(&def_id);\n+                // If the bound contains non-public traits, err on the safe side and don't lint the\n+                // corresponding parameter.\n+                if !predicate\n+                    .bounds\n+                    .iter()\n+                    .filter_map(bound_to_trait_def_id)\n+                    .all(|id| self.cx.effective_visibilities.is_exported(id))\n+                {\n+                    self.mark_param_used(def_id);\n                 } else if let PredicateOrigin::GenericParam = predicate.origin {\n                     self.bounds.insert(def_id, predicate.span);\n                 }\n@@ -176,9 +207,9 @@ impl<'cx, 'tcx> Visitor<'tcx> for TypeWalker<'cx, 'tcx> {\n impl<'tcx> LateLintPass<'tcx> for ExtraUnusedTypeParameters {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if let ItemKind::Fn(_, generics, body_id) = item.kind\n-            && !in_external_macro(cx.sess(), item.span)\n+            && !self.check_false_positive(cx, item.span, item.owner_id.def_id, body_id)\n         {\n-            let mut walker = TypeWalker::new(cx, generics, body_id);\n+            let mut walker = TypeWalker::new(cx, generics);\n             walk_item(&mut walker, item);\n             walker.emit_lint();\n         }\n@@ -188,9 +219,9 @@ impl<'tcx> LateLintPass<'tcx> for ExtraUnusedTypeParameters {\n         // Only lint on inherent methods, not trait methods.\n         if let ImplItemKind::Fn(.., body_id) = item.kind\n             && trait_ref_of_method(cx, item.owner_id.def_id).is_none()\n-            && !in_external_macro(cx.sess(), item.span)\n+            && !self.check_false_positive(cx, item.span, item.owner_id.def_id, body_id)\n         {\n-            let mut walker = TypeWalker::new(cx, item.generics, body_id);\n+            let mut walker = TypeWalker::new(cx, item.generics);\n             walk_impl_item(&mut walker, item);\n             walker.emit_lint();\n         }"}, {"sha": "b63cb4df48fe4e9748aa8f516adebfdee67642e9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad", "patch": "@@ -916,7 +916,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(permissions_set_readonly_false::PermissionsSetReadonlyFalse));\n     store.register_late_pass(|_| Box::new(size_of_ref::SizeOfRef));\n     store.register_late_pass(|_| Box::new(multiple_unsafe_ops_per_block::MultipleUnsafeOpsPerBlock));\n-    store.register_late_pass(|_| Box::new(extra_unused_type_parameters::ExtraUnusedTypeParameters));\n+    store.register_late_pass(move |_| {\n+        Box::new(extra_unused_type_parameters::ExtraUnusedTypeParameters::new(\n+            avoid_breaking_exported_api,\n+        ))\n+    });\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "48017434276577ac230bec202c09012971e58184", "filename": "tests/ui/extra_unused_type_parameters.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/tests%2Fui%2Fextra_unused_type_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/tests%2Fui%2Fextra_unused_type_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_type_parameters.rs?ref=f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad", "patch": "@@ -1,11 +1,17 @@\n #![allow(unused, clippy::needless_lifetimes)]\n #![warn(clippy::extra_unused_type_parameters)]\n \n-fn unused_ty<T>(x: u8) {}\n+fn unused_ty<T>(x: u8) {\n+    unimplemented!()\n+}\n \n-fn unused_multi<T, U>(x: u8) {}\n+fn unused_multi<T, U>(x: u8) {\n+    unimplemented!()\n+}\n \n-fn unused_with_lt<'a, T>(x: &'a u8) {}\n+fn unused_with_lt<'a, T>(x: &'a u8) {\n+    unimplemented!()\n+}\n \n fn used_ty<T>(x: T, y: u8) {}\n \n@@ -51,7 +57,9 @@ fn used_closure<T: Default + ToString>() -> impl Fn() {\n struct S;\n \n impl S {\n-    fn unused_ty_impl<T>(&self) {}\n+    fn unused_ty_impl<T>(&self) {\n+        unimplemented!()\n+    }\n }\n \n // Don't lint on trait methods\n@@ -71,7 +79,23 @@ where\n         .filter_map(move |(i, a)| if i == index { None } else { Some(a) })\n }\n \n-fn unused_opaque<A, B>(dummy: impl Default) {}\n+fn unused_opaque<A, B>(dummy: impl Default) {\n+    unimplemented!()\n+}\n+\n+mod unexported_trait_bounds {\n+    mod private {\n+        pub trait Private {}\n+    }\n+\n+    fn priv_trait_bound<T: private::Private>() {\n+        unimplemented!();\n+    }\n+\n+    fn unused_with_priv_trait_bound<T: private::Private, U>() {\n+        unimplemented!();\n+    }\n+}\n \n mod issue10319 {\n     fn assert_send<T: Send>() {}"}, {"sha": "86c88fc9bf006f42b247c0a57fda094ac23ac1d3", "filename": "tests/ui/extra_unused_type_parameters.stderr", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/tests%2Fui%2Fextra_unused_type_parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/tests%2Fui%2Fextra_unused_type_parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_type_parameters.stderr?ref=f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad", "patch": "@@ -1,67 +1,75 @@\n error: type parameter goes unused in function definition\n   --> $DIR/extra_unused_type_parameters.rs:4:13\n    |\n-LL | fn unused_ty<T>(x: u8) {}\n+LL | fn unused_ty<T>(x: u8) {\n    |             ^^^\n    |\n    = help: consider removing the parameter\n    = note: `-D clippy::extra-unused-type-parameters` implied by `-D warnings`\n \n error: type parameters go unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:6:16\n+  --> $DIR/extra_unused_type_parameters.rs:8:16\n    |\n-LL | fn unused_multi<T, U>(x: u8) {}\n+LL | fn unused_multi<T, U>(x: u8) {\n    |                ^^^^^^\n    |\n    = help: consider removing the parameters\n \n error: type parameter goes unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:8:23\n+  --> $DIR/extra_unused_type_parameters.rs:12:23\n    |\n-LL | fn unused_with_lt<'a, T>(x: &'a u8) {}\n+LL | fn unused_with_lt<'a, T>(x: &'a u8) {\n    |                       ^\n    |\n    = help: consider removing the parameter\n \n error: type parameter goes unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:18:19\n+  --> $DIR/extra_unused_type_parameters.rs:24:19\n    |\n LL | fn unused_bounded<T: Default, U>(x: U) {\n    |                   ^^^^^^^^^^^\n    |\n    = help: consider removing the parameter\n \n error: type parameter goes unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:22:24\n+  --> $DIR/extra_unused_type_parameters.rs:28:24\n    |\n LL | fn unused_where_clause<T, U>(x: U)\n    |                        ^^\n    |\n    = help: consider removing the parameter\n \n error: type parameters go unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:29:16\n+  --> $DIR/extra_unused_type_parameters.rs:35:16\n    |\n LL | fn some_unused<A, B, C, D: Iterator<Item = (B, C)>, E>(b: B, c: C) {\n    |                ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^\n    |\n    = help: consider removing the parameters\n \n error: type parameter goes unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:54:22\n+  --> $DIR/extra_unused_type_parameters.rs:60:22\n    |\n-LL |     fn unused_ty_impl<T>(&self) {}\n+LL |     fn unused_ty_impl<T>(&self) {\n    |                      ^^^\n    |\n    = help: consider removing the parameter\n \n error: type parameters go unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:74:17\n+  --> $DIR/extra_unused_type_parameters.rs:82:17\n    |\n-LL | fn unused_opaque<A, B>(dummy: impl Default) {}\n+LL | fn unused_opaque<A, B>(dummy: impl Default) {\n    |                 ^^^^^^\n    |\n    = help: consider removing the parameters\n \n-error: aborting due to 8 previous errors\n+error: type parameter goes unused in function definition\n+  --> $DIR/extra_unused_type_parameters.rs:95:58\n+   |\n+LL |     fn unused_with_priv_trait_bound<T: private::Private, U>() {\n+   |                                                          ^\n+   |\n+   = help: consider removing the parameter\n+\n+error: aborting due to 9 previous errors\n "}, {"sha": "65809023f8dff129d3d3d734c72d09def63b74c9", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad", "patch": "@@ -1,9 +1,4 @@\n-#![allow(\n-    dead_code,\n-    clippy::missing_safety_doc,\n-    clippy::extra_unused_lifetimes,\n-    clippy::extra_unused_type_parameters\n-)]\n+#![allow(dead_code, clippy::missing_safety_doc, clippy::extra_unused_lifetimes)]\n #![warn(clippy::new_without_default)]\n \n pub struct Foo;"}, {"sha": "212a69ab94e6506d0aace70d6dee93b26aa205a3", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad", "patch": "@@ -1,5 +1,5 @@\n error: you should consider adding a `Default` implementation for `Foo`\n-  --> $DIR/new_without_default.rs:12:5\n+  --> $DIR/new_without_default.rs:7:5\n    |\n LL | /     pub fn new() -> Foo {\n LL | |         Foo\n@@ -17,7 +17,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `Bar`\n-  --> $DIR/new_without_default.rs:20:5\n+  --> $DIR/new_without_default.rs:15:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Bar\n@@ -34,7 +34,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `LtKo<'c>`\n-  --> $DIR/new_without_default.rs:84:5\n+  --> $DIR/new_without_default.rs:79:5\n    |\n LL | /     pub fn new() -> LtKo<'c> {\n LL | |         unimplemented!()\n@@ -51,7 +51,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `NewNotEqualToDerive`\n-  --> $DIR/new_without_default.rs:177:5\n+  --> $DIR/new_without_default.rs:172:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         NewNotEqualToDerive { foo: 1 }\n@@ -68,7 +68,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `FooGenerics<T>`\n-  --> $DIR/new_without_default.rs:185:5\n+  --> $DIR/new_without_default.rs:180:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Self(Default::default())\n@@ -85,7 +85,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `BarGenerics<T>`\n-  --> $DIR/new_without_default.rs:192:5\n+  --> $DIR/new_without_default.rs:187:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Self(Default::default())\n@@ -102,7 +102,7 @@ LL + }\n    |\n \n error: you should consider adding a `Default` implementation for `Foo<T>`\n-  --> $DIR/new_without_default.rs:203:9\n+  --> $DIR/new_without_default.rs:198:9\n    |\n LL | /         pub fn new() -> Self {\n LL | |             todo!()"}, {"sha": "ec7f8ae923a793b3241715b68653b80f98180be6", "filename": "tests/ui/redundant_field_names.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/tests%2Fui%2Fredundant_field_names.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/tests%2Fui%2Fredundant_field_names.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.fixed?ref=f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::redundant_field_names)]\n-#![allow(clippy::extra_unused_type_parameters, clippy::no_effect, dead_code, unused_variables)]\n+#![allow(clippy::no_effect, dead_code, unused_variables)]\n \n #[macro_use]\n extern crate derive_new;"}, {"sha": "73122016cf69e9eefec777cde172735926f503ee", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::redundant_field_names)]\n-#![allow(clippy::extra_unused_type_parameters, clippy::no_effect, dead_code, unused_variables)]\n+#![allow(clippy::no_effect, dead_code, unused_variables)]\n \n #[macro_use]\n extern crate derive_new;"}]}