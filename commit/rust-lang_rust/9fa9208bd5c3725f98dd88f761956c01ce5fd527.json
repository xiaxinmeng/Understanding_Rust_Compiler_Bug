{"sha": "9fa9208bd5c3725f98dd88f761956c01ce5fd527", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYTkyMDhiZDVjMzcyNWY5OGRkODhmNzYxOTU2YzAxY2U1ZmQ1Mjc=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-04T09:56:54Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-06T22:19:17Z"}, "message": "Restrict unnecessary_sort_by to non-ref copy types", "tree": {"sha": "4f768bdccb3f27c90e5c75911c6d57d8aed34074", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f768bdccb3f27c90e5c75911c6d57d8aed34074"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fa9208bd5c3725f98dd88f761956c01ce5fd527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa9208bd5c3725f98dd88f761956c01ce5fd527", "html_url": "https://github.com/rust-lang/rust/commit/9fa9208bd5c3725f98dd88f761956c01ce5fd527", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fa9208bd5c3725f98dd88f761956c01ce5fd527/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9440cbcde1ccc3cdc76ee796566303fa8be142d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9440cbcde1ccc3cdc76ee796566303fa8be142d", "html_url": "https://github.com/rust-lang/rust/commit/e9440cbcde1ccc3cdc76ee796566303fa8be142d"}], "stats": {"total": 97, "additions": 87, "deletions": 10}, "files": [{"sha": "9b6a9075a2954b8e0c7753f63309c86a4aa6a785", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9fa9208bd5c3725f98dd88f761956c01ce5fd527/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa9208bd5c3725f98dd88f761956c01ce5fd527/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=9fa9208bd5c3725f98dd88f761956c01ce5fd527", "patch": "@@ -1,5 +1,4 @@\n use crate::utils;\n-use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -171,12 +170,22 @@ fn mirrored_exprs(\n }\n \n fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n+    // NOTE: Vectors of references are not supported. In order to avoid hitting https://github.com/rust-lang/rust/issues/34162,\n+    // (different unnamed lifetimes for closure arg and return type) we need to make sure the suggested\n+    // closure parameter is not a reference in case we suggest `Reverse`. Trying to destructure more\n+    // than one level of references would add some extra complexity as we would have to compensate\n+    // in the closure body.\n+\n     if_chain! {\n         if let ExprKind::MethodCall(name_ident, _, args, _) = &expr.kind;\n         if let name = name_ident.ident.name.to_ident_string();\n         if name == \"sort_by\" || name == \"sort_unstable_by\";\n         if let [vec, Expr { kind: ExprKind::Closure(_, _, closure_body_id, _, _), .. }] = args;\n-        if utils::match_type(cx, &cx.typeck_results().expr_ty(vec), &paths::VEC);\n+        let vec_ty = cx.typeck_results().expr_ty(vec);\n+        if utils::is_type_diagnostic_item(cx, vec_ty, sym!(vec_type));\n+        let ty = vec_ty.walk().nth(1).unwrap().expect_ty(); // T in Vec<T>\n+        if !matches!(&ty.kind(), ty::Ref(..));\n+        if utils::is_copy(cx, ty);\n         if let closure_body = cx.tcx.hir().body(*closure_body_id);\n         if let &[\n             Param { pat: Pat { kind: PatKind::Binding(_, _, left_ident, _), .. }, ..},"}, {"sha": "ad0d0387db03cb81b3fe8224beea7cb9b8162678", "filename": "tests/ui/unnecessary_sort_by.fixed", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9fa9208bd5c3725f98dd88f761956c01ce5fd527/tests%2Fui%2Funnecessary_sort_by.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9fa9208bd5c3725f98dd88f761956c01ce5fd527/tests%2Fui%2Funnecessary_sort_by.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.fixed?ref=9fa9208bd5c3725f98dd88f761956c01ce5fd527", "patch": "@@ -25,17 +25,25 @@ fn unnecessary_sort_by() {\n     vec.sort_by(|_, b| b.cmp(&5));\n     vec.sort_by(|_, b| b.cmp(c));\n     vec.sort_unstable_by(|a, _| a.cmp(c));\n+\n+    // Ignore vectors of references\n+    let mut vec: Vec<&&&isize> = vec![&&&3, &&&6, &&&1, &&&2, &&&5];\n+    vec.sort_by(|a, b| (***a).abs().cmp(&(***b).abs()));\n+    vec.sort_unstable_by(|a, b| (***a).abs().cmp(&(***b).abs()));\n+    vec.sort_by(|a, b| b.cmp(a));\n+    vec.sort_unstable_by(|a, b| b.cmp(a));\n }\n \n-// Should not be linted to avoid hitting https://github.com/rust-lang/rust/issues/34162\n+// Do not suggest returning a reference to the closure parameter of `Vec::sort_by_key`\n mod issue_5754 {\n-    struct Test(String);\n+    #[derive(Clone, Copy)]\n+    struct Test(usize);\n \n     #[derive(PartialOrd, Ord, PartialEq, Eq)]\n-    struct Wrapper<'a>(&'a str);\n+    struct Wrapper<'a>(&'a usize);\n \n     impl Test {\n-        fn name(&self) -> &str {\n+        fn name(&self) -> &usize {\n             &self.0\n         }\n \n@@ -60,7 +68,33 @@ mod issue_5754 {\n     }\n }\n \n+// `Vec::sort_by_key` closure parameter is `F: FnMut(&T) -> K`\n+// The suggestion is destructuring T and we know T is not a reference, so test that non-Copy T are\n+// not linted.\n+mod issue_6001 {\n+    struct Test(String);\n+\n+    impl Test {\n+        // Return an owned type so that we don't hit the fix for 5754\n+        fn name(&self) -> String {\n+            self.0.clone()\n+        }\n+    }\n+\n+    pub fn test() {\n+        let mut args: Vec<Test> = vec![];\n+\n+        // Forward\n+        args.sort_by(|a, b| a.name().cmp(&b.name()));\n+        args.sort_unstable_by(|a, b| a.name().cmp(&b.name()));\n+        // Reverse\n+        args.sort_by(|a, b| b.name().cmp(&a.name()));\n+        args.sort_unstable_by(|a, b| b.name().cmp(&a.name()));\n+    }\n+}\n+\n fn main() {\n     unnecessary_sort_by();\n     issue_5754::test();\n+    issue_6001::test();\n }"}, {"sha": "9746f6e6849ddb46c632e498783c73f633418169", "filename": "tests/ui/unnecessary_sort_by.rs", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9fa9208bd5c3725f98dd88f761956c01ce5fd527/tests%2Fui%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa9208bd5c3725f98dd88f761956c01ce5fd527/tests%2Fui%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.rs?ref=9fa9208bd5c3725f98dd88f761956c01ce5fd527", "patch": "@@ -25,17 +25,25 @@ fn unnecessary_sort_by() {\n     vec.sort_by(|_, b| b.cmp(&5));\n     vec.sort_by(|_, b| b.cmp(c));\n     vec.sort_unstable_by(|a, _| a.cmp(c));\n+\n+    // Ignore vectors of references\n+    let mut vec: Vec<&&&isize> = vec![&&&3, &&&6, &&&1, &&&2, &&&5];\n+    vec.sort_by(|a, b| (***a).abs().cmp(&(***b).abs()));\n+    vec.sort_unstable_by(|a, b| (***a).abs().cmp(&(***b).abs()));\n+    vec.sort_by(|a, b| b.cmp(a));\n+    vec.sort_unstable_by(|a, b| b.cmp(a));\n }\n \n-// Should not be linted to avoid hitting https://github.com/rust-lang/rust/issues/34162\n+// Do not suggest returning a reference to the closure parameter of `Vec::sort_by_key`\n mod issue_5754 {\n-    struct Test(String);\n+    #[derive(Clone, Copy)]\n+    struct Test(usize);\n \n     #[derive(PartialOrd, Ord, PartialEq, Eq)]\n-    struct Wrapper<'a>(&'a str);\n+    struct Wrapper<'a>(&'a usize);\n \n     impl Test {\n-        fn name(&self) -> &str {\n+        fn name(&self) -> &usize {\n             &self.0\n         }\n \n@@ -60,7 +68,33 @@ mod issue_5754 {\n     }\n }\n \n+// `Vec::sort_by_key` closure parameter is `F: FnMut(&T) -> K`\n+// The suggestion is destructuring T and we know T is not a reference, so test that non-Copy T are\n+// not linted.\n+mod issue_6001 {\n+    struct Test(String);\n+\n+    impl Test {\n+        // Return an owned type so that we don't hit the fix for 5754\n+        fn name(&self) -> String {\n+            self.0.clone()\n+        }\n+    }\n+\n+    pub fn test() {\n+        let mut args: Vec<Test> = vec![];\n+\n+        // Forward\n+        args.sort_by(|a, b| a.name().cmp(&b.name()));\n+        args.sort_unstable_by(|a, b| a.name().cmp(&b.name()));\n+        // Reverse\n+        args.sort_by(|a, b| b.name().cmp(&a.name()));\n+        args.sort_unstable_by(|a, b| b.name().cmp(&a.name()));\n+    }\n+}\n+\n fn main() {\n     unnecessary_sort_by();\n     issue_5754::test();\n+    issue_6001::test();\n }"}]}