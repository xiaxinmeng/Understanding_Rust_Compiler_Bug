{"sha": "e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwY2VlZjVhOWU5MjI0YmFmMWYxMDhlZGUxZDEwMzNlNWU3ZmVmMDg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-03T02:37:48Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-16T14:13:16Z"}, "message": "Add ExprType to HIR and make everything compile\n+ Apply parser changes manually\n+ Add feature gate", "tree": {"sha": "9b5a2df911400b1ff05bd8d12490dc6c6fccbb2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b5a2df911400b1ff05bd8d12490dc6c6fccbb2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "html_url": "https://github.com/rust-lang/rust/commit/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8157cc67fa25f2944b24f4306151d53d1b80b56", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8157cc67fa25f2944b24f4306151d53d1b80b56", "html_url": "https://github.com/rust-lang/rust/commit/b8157cc67fa25f2944b24f4306151d53d1b80b56"}], "stats": {"total": 114, "additions": 83, "deletions": 31}, "files": [{"sha": "a56e8516d6c9a69d8d840dfb548c909b0ccbd536", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -1126,7 +1126,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n             None => unreachable!(),\n         }\n       }\n-      hir::ExprType(ref e, _) => try!(eval_const_expr_partial(tcx, &**e, ety)),\n+      hir::ExprType(ref e, _) => try!(eval_const_expr_partial(tcx, &**e, ty_hint, fn_args)),\n       hir::ExprTup(_) => Tuple(e.id),\n       hir::ExprStruct(..) => Struct(e.id),\n       hir::ExprIndex(ref arr, ref idx) => {"}, {"sha": "e258321e64a3bb06fd520523526fb629c9416702", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -2108,6 +2108,10 @@ impl<'tcx> ctxt<'tcx> {\n                 }\n             }\n \n+            hir::ExprType(ref e, _) => {\n+                self.expr_is_lval(e)\n+            }\n+\n             hir::ExprUnary(hir::UnDeref, _) |\n             hir::ExprField(..) |\n             hir::ExprTupField(..) |"}, {"sha": "6ede584da05bedaeeb9a2861d480dafb5db66334", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -1042,6 +1042,9 @@ pub fn noop_fold_expr<T: Folder>(Expr { id, node, span, attrs }: Expr, folder: &\n             ExprCast(expr, ty) => {\n                 ExprCast(folder.fold_expr(expr), folder.fold_ty(ty))\n             }\n+            ExprType(expr, ty) => {\n+                ExprType(folder.fold_expr(expr), folder.fold_ty(ty))\n+            }\n             ExprAddrOf(m, ohs) => ExprAddrOf(m, folder.fold_expr(ohs)),\n             ExprIf(cond, tr, fl) => {\n                 ExprIf(folder.fold_expr(cond),"}, {"sha": "7f738cbda1c1073df323fc2d507eb5e204732861", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -720,6 +720,7 @@ pub enum Expr_ {\n     ExprLit(P<Lit>),\n     /// A cast (`foo as f64`)\n     ExprCast(P<Expr>, P<Ty>),\n+    ExprType(P<Expr>, P<Ty>),\n     /// An `if` block, with an optional else block\n     ///\n     /// `if expr { block } else { expr }`"}, {"sha": "03b021cfa6395aed86e8ee1bd5daecccd20e0594", "filename": "src/librustc_front/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_front%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_front%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fintravisit.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -732,7 +732,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_expr(subexpression)\n         }\n         ExprLit(_) => {}\n-        ExprCast(ref subexpression, ref typ) => {\n+        ExprCast(ref subexpression, ref typ) | ExprType(ref subexpression, ref typ) => {\n             visitor.visit_expr(subexpression);\n             visitor.visit_ty(typ)\n         }"}, {"sha": "f4ea3d6a52e5093434d44e49043654458041b1dc", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -1125,6 +1125,10 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                 let expr = lower_expr(lctx, expr);\n                 hir::ExprCast(expr, lower_ty(lctx, ty))\n             }\n+            ExprType(ref expr, ref ty) => {\n+                let expr = lower_expr(lctx, expr);\n+                hir::ExprType(expr, lower_ty(lctx, ty))\n+            }\n             ExprAddrOf(m, ref ohs) => {\n                 let m = lower_mutability(lctx, m);\n                 let ohs = lower_expr(lctx, ohs);"}, {"sha": "383ba9403c75523d696a469252ce701fa7443557", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -336,7 +336,8 @@ fn needs_parentheses(expr: &hir::Expr) -> bool {\n         hir::ExprBinary(..) |\n         hir::ExprClosure(..) |\n         hir::ExprAssignOp(..) |\n-        hir::ExprCast(..) => true,\n+        hir::ExprCast(..) |\n+        hir::ExprType(..) => true,\n         _ => false,\n     }\n }\n@@ -1354,6 +1355,11 @@ impl<'a> State<'a> {\n                 try!(self.word_space(\"as\"));\n                 try!(self.print_type(&**ty));\n             }\n+            hir::ExprType(ref expr, ref ty) => {\n+                try!(self.print_expr(&**expr));\n+                try!(self.word_space(\":\"));\n+                try!(self.print_type(&**ty));\n+            }\n             hir::ExprIf(ref test, ref blk, ref elseopt) => {\n                 try!(self.print_if(&**test, &**blk, elseopt.as_ref().map(|e| &**e)));\n             }"}, {"sha": "18a3a96069e19d8fcf7bd08bf45399ab239dabbb", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -319,6 +319,7 @@ impl UnusedParens {\n                 }\n                 ast::ExprUnary(_, ref x) |\n                 ast::ExprCast(ref x, _) |\n+                ast::ExprType(ref x, _) |\n                 ast::ExprField(ref x, _) |\n                 ast::ExprTupField(ref x, _) |\n                 ast::ExprIndex(ref x, _) => {"}, {"sha": "f74737af93c8639ece765849009aa6b7ff9b840f", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -320,6 +320,8 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                                   name: Field::new(index.node as usize) },\n             hir::ExprCast(ref source, _) =>\n                 ExprKind::Cast { source: source.to_ref() },\n+            hir::ExprType(ref source, _) =>\n+                return source.make_mirror(cx),\n             hir::ExprBox(ref value) =>\n                 ExprKind::Box { value: value.to_ref() },\n             hir::ExprVec(ref fields) =>"}, {"sha": "175bae9f47f9b73f16554210d8ebede7ddc15b60", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -1004,7 +1004,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             try!(const_fn_call(cx, MethodCallKey(method_call),\n                                method_did, &arg_vals, param_substs, trueconst))\n         },\n-        hir::ExprType(ref e, _) => const_expr(cx, &**e, param_substs).0,\n+        hir::ExprType(ref e, _) => try!(const_expr(cx, &**e, param_substs, fn_args, trueconst)).0,\n         hir::ExprBlock(ref block) => {\n             match block.expr {\n                 Some(ref expr) => try!(const_expr("}, {"sha": "237d31c47783d91059fbf2635af13f99eec1c69d", "filename": "src/librustc_trans/trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -320,6 +320,7 @@ fn walk_expr(cx: &CrateContext,\n         hir::ExprPath(..) => {}\n \n         hir::ExprCast(ref sub_exp, _)     |\n+        hir::ExprType(ref sub_exp, _) |\n         hir::ExprAddrOf(_, ref sub_exp)  |\n         hir::ExprField(ref sub_exp, _) |\n         hir::ExprTupField(ref sub_exp, _) =>"}, {"sha": "ecf54cde9f63a7ba5ce37df816f4399b3a756d96", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -2610,6 +2610,10 @@ fn expr_kind(tcx: &ty::ctxt, expr: &hir::Expr) -> ExprKind {\n             }\n         }\n \n+        hir::ExprType(ref expr, _) => {\n+            expr_kind(tcx, expr)\n+        }\n+\n         hir::ExprUnary(hir::UnDeref, _) |\n         hir::ExprField(..) |\n         hir::ExprTupField(..) |"}, {"sha": "862c52dc4bd6c3584bf57841f9f03cdbc59b9238", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -233,6 +233,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n \n     // Allows `#[deprecated]` attribute\n     (\"deprecated\", \"1.6.0\", Some(29935), Active),\n+\n+    // allow using type ascription in expressions\n+    (\"type_ascription\", \"1.6.0\", Some(23416), Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -960,6 +963,10 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                   \"box expression syntax is experimental; \\\n                                    you can call `Box::new` instead.\");\n             }\n+            ast::ExprType(..) => {\n+                self.gate_feature(\"type_ascription\", e.span,\n+                                  \"type ascription is experimental\");\n+            }\n             _ => {}\n         }\n         visit::walk_expr(self, e);"}, {"sha": "dd1fe22a4ebb0737ace8a0495ff6d3a63e0c6e5c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -2789,6 +2789,10 @@ impl<'a> Parser<'a> {\n                 lhs = self.mk_expr(lhs.span.lo, rhs.span.hi,\n                                    ExprCast(lhs, rhs), None);\n                 continue\n+            } else if op == AssocOp::Colon {\n+                let rhs = try!(self.parse_ty());\n+                lhs = self.mk_expr(lhs.span.lo, rhs.span.hi, ExprType(lhs, rhs));\n+                continue\n             } else if op == AssocOp::DotDot {\n                     // If we didn\u2019t have to handle `x..`, it would be pretty easy to generalise\n                     // it to the Fixity::None code.\n@@ -2857,7 +2861,9 @@ impl<'a> Parser<'a> {\n                     let aopexpr = self.mk_assign_op(codemap::respan(cur_op_span, aop), lhs, rhs);\n                     self.mk_expr(lhs_span.lo, rhs_span.hi, aopexpr, None)\n                 }\n-                AssocOp::As | AssocOp::DotDot => self.bug(\"As or DotDot branch reached\")\n+                AssocOp::As | AssocOp::Colon | AssocOp::DotDot => {\n+                    self.bug(\"As, Colon or DotDot branch reached\")\n+                }\n             };\n \n             if op.fixity() == Fixity::None { break }"}, {"sha": "87ef96d87ff5c627d72cb3578e22af16ce47679e", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -60,7 +60,9 @@ pub enum AssocOp {\n     /// `as`\n     As,\n     /// `..` range\n-    DotDot\n+    DotDot,\n+    /// `:`\n+    Colon,\n }\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -100,6 +102,7 @@ impl AssocOp {\n             Token::AndAnd => Some(LAnd),\n             Token::OrOr => Some(LOr),\n             Token::DotDot => Some(DotDot),\n+            Token::Colon => Some(Colon),\n             _ if t.is_keyword(keywords::As) => Some(As),\n             _ => None\n         }\n@@ -134,7 +137,7 @@ impl AssocOp {\n     pub fn precedence(&self) -> usize {\n         use self::AssocOp::*;\n         match *self {\n-            As => 14,\n+            As | Colon => 14,\n             Multiply | Divide | Modulus => 13,\n             Add | Subtract => 12,\n             ShiftLeft | ShiftRight => 11,\n@@ -158,7 +161,7 @@ impl AssocOp {\n             Inplace | Assign | AssignOp(_) => Fixity::Right,\n             As | Multiply | Divide | Modulus | Add | Subtract | ShiftLeft | ShiftRight | BitAnd |\n             BitXor | BitOr | Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual |\n-            LAnd | LOr => Fixity::Left,\n+            LAnd | LOr | Colon => Fixity::Left,\n             DotDot => Fixity::None\n         }\n     }\n@@ -168,7 +171,7 @@ impl AssocOp {\n         match *self {\n             Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual => true,\n             Inplace | Assign | AssignOp(_) | As | Multiply | Divide | Modulus | Add | Subtract |\n-            ShiftLeft | ShiftRight | BitAnd | BitXor | BitOr | LAnd | LOr | DotDot => false\n+            ShiftLeft | ShiftRight | BitAnd | BitXor | BitOr | LAnd | LOr | DotDot | Colon => false\n         }\n     }\n \n@@ -178,7 +181,7 @@ impl AssocOp {\n             Assign | AssignOp(_) | Inplace => true,\n             Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual | As | Multiply | Divide |\n             Modulus | Add | Subtract | ShiftLeft | ShiftRight | BitAnd | BitXor | BitOr | LAnd |\n-            LOr | DotDot => false\n+            LOr | DotDot | Colon => false\n         }\n     }\n \n@@ -203,8 +206,7 @@ impl AssocOp {\n             BitOr => Some(ast::BiBitOr),\n             LAnd => Some(ast::BiAnd),\n             LOr => Some(ast::BiOr),\n-            Inplace | Assign | AssignOp(_) | As | DotDot => None\n+            Inplace | Assign | AssignOp(_) | As | DotDot | Colon => None\n         }\n     }\n-\n }"}, {"sha": "b8dd54790ce51ecb21cad8c15fbcf74e8308b4bb", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -693,14 +693,10 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_expr(subexpression)\n         }\n         ExprLit(_) => {}\n-        ExprCast(ref subexpression, ref typ) => {\n+        ExprCast(ref subexpression, ref typ) | ExprType(ref subexpression, ref typ) => {\n             visitor.visit_expr(subexpression);\n             visitor.visit_ty(typ)\n         }\n-        ExprType(ref subexpression, ref typ) => {\n-            visitor.visit_expr(&**subexpression);\n-            visitor.visit_ty(&**typ)\n-        }\n         ExprIf(ref head_expression, ref if_block, ref optional_else) => {\n             visitor.visit_expr(head_expression);\n             visitor.visit_block(if_block);"}, {"sha": "12eabe0edfdfe43d0d19fce857d04321dd17b6b6", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -62,8 +62,8 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n     // parsed as `asm!(z)` with `z = \"x\": y` which is type ascription.\n     let first_colon = tts.iter().position(|tt| {\n         match *tt {\n-            ast::TtToken(_, token::Colon) |\n-            ast::TtToken(_, token::ModSep) => true,\n+            ast::TokenTree::Token(_, token::Colon) |\n+            ast::TokenTree::Token(_, token::ModSep) => true,\n             _ => false\n         }\n     }).unwrap_or(tts.len());\n@@ -99,7 +99,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n \n                 // This is most likely malformed.\n                 if p2.token != token::Eof {\n-                    let mut extra_tts = p2.parse_all_token_trees();\n+                    let mut extra_tts = panictry!(p2.parse_all_token_trees());\n                     extra_tts.extend(tts[first_colon..].iter().cloned());\n                     p = parse::tts_to_parser(cx.parse_sess, extra_tts, cx.cfg());\n                 }"}, {"sha": "d3c07d653f40ce548d57cf994321f87f294896ad", "filename": "src/test/compile-fail/type-ascription-feature-gate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Ftest%2Fcompile-fail%2Ftype-ascription-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Ftest%2Fcompile-fail%2Ftype-ascription-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-ascription-feature-gate.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Type ascription is feature gated\n+\n+fn main() {\n+    let a = 10: u8; //~ ERROR type ascription is experimental\n+}"}, {"sha": "33e9b424fea6d22258b3a81d46748a9c13a7365a", "filename": "src/test/run-pass/coerce-expect-unsized-ascribed.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized-ascribed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ceef5a9e9224baf1f108ede1d1033e5e7fef08/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized-ascribed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized-ascribed.rs?ref=e0ceef5a9e9224baf1f108ede1d1033e5e7fef08", "patch": "@@ -16,25 +16,25 @@ use std::fmt::Debug;\n // A version of coerce-expect-unsized that uses type ascription.\n \n pub fn main() {\n-    let _ = box { [1, 2, 3] }: Box<[int]>;\n-    let _ = box if true { [1, 2, 3] } else { [1, 3, 4] }: Box<[int]>;\n-    let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[int]>;\n-    let _ = box { |x| (x as u8) }: Box<Fn(int) -> _>;\n+    let _ = box { [1, 2, 3] }: Box<[i32]>;\n+    let _ = box if true { [1, 2, 3] } else { [1, 3, 4] }: Box<[i32]>;\n+    let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[i32]>;\n+    let _ = box { |x| (x as u8) }: Box<Fn(i32) -> _>;\n     let _ = box if true { false } else { true }: Box<Debug>;\n     let _ = box match true { true => 'a', false => 'b' }: Box<Debug>;\n \n-    let _ = &{ [1, 2, 3] }: &[int];\n-    let _ = &if true { [1, 2, 3] } else { [1, 3, 4] }: &[int];\n-    let _ = &match true { true => [1, 2, 3], false => [1, 3, 4] }: &[int];\n-    let _ = &{ |x| (x as u8) }: &Fn(int) -> _;\n+    let _ = &{ [1, 2, 3] }: &[i32];\n+    let _ = &if true { [1, 2, 3] } else { [1, 3, 4] }: &[i32];\n+    let _ = &match true { true => [1, 2, 3], false => [1, 3, 4] }: &[i32];\n+    let _ = &{ |x| (x as u8) }: &Fn(i32) -> _;\n     let _ = &if true { false } else { true }: &Debug;\n     let _ = &match true { true => 'a', false => 'b' }: &Debug;\n \n-    let _ = Box::new([1, 2, 3]): Box<[int]>;\n-    let _ = Box::new(|x| (x as u8)): Box<Fn(int) -> _>;\n+    let _ = Box::new([1, 2, 3]): Box<[i32]>;\n+    let _ = Box::new(|x| (x as u8)): Box<Fn(i32) -> _>;\n \n     let _ = vec![\n         Box::new(|x| (x as u8)),\n         box |x| (x as i16 as u8),\n-    ]: Vec<Box<Fn(int) -> _>>;\n+    ]: Vec<Box<Fn(i32) -> _>>;\n }"}]}