{"sha": "143b9d80d06c314b8cdf5c35ea9b6661006ee6c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0M2I5ZDgwZDA2YzMxNGI4Y2RmNWMzNWVhOWI2NjYxMDA2ZWU2YzY=", "commit": {"author": {"name": "Ms2ger", "email": "Ms2ger@gmail.com", "date": "2015-12-18T13:23:01Z"}, "committer": {"name": "Ms2ger", "email": "Ms2ger@gmail.com", "date": "2015-12-20T21:15:26Z"}, "message": "Stop re-exporting the ast::BindingMode variants.", "tree": {"sha": "baa456a3b18bf99ae6e88db63ea6852a0ec79a60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baa456a3b18bf99ae6e88db63ea6852a0ec79a60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6", "html_url": "https://github.com/rust-lang/rust/commit/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/comments", "author": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f963eb2870f6e2b972cd9d432dc0ece954ab6452", "url": "https://api.github.com/repos/rust-lang/rust/commits/f963eb2870f6e2b972cd9d432dc0ece954ab6452", "html_url": "https://github.com/rust-lang/rust/commit/f963eb2870f6e2b972cd9d432dc0ece954ab6452"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "2e66aa56eaf73b820420f348e584d0f0c612cf90", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=143b9d80d06c314b8cdf5c35ea9b6661006ee6c6", "patch": "@@ -1563,8 +1563,8 @@ pub fn lower_block_check_mode(lctx: &LoweringContext, b: &BlockCheckMode) -> hir\n \n pub fn lower_binding_mode(lctx: &LoweringContext, b: &BindingMode) -> hir::BindingMode {\n     match *b {\n-        BindByRef(m) => hir::BindByRef(lower_mutability(lctx, m)),\n-        BindByValue(m) => hir::BindByValue(lower_mutability(lctx, m)),\n+        BindingMode::ByRef(m) => hir::BindByRef(lower_mutability(lctx, m)),\n+        BindingMode::ByValue(m) => hir::BindByValue(lower_mutability(lctx, m)),\n     }\n }\n "}, {"sha": "501ab566f1c5abc2c06afc252f1f54fb6a113deb", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=143b9d80d06c314b8cdf5c35ea9b6661006ee6c6", "patch": "@@ -697,8 +697,8 @@ impl<'v> Visitor<'v> for PathCollector {\n                     // Even if the ref is mut, you can't change the ref, only\n                     // the data pointed at, so showing the initialising expression\n                     // is still worthwhile.\n-                    ast::BindByRef(_) => ast::MutImmutable,\n-                    ast::BindByValue(mt) => mt,\n+                    ast::BindingMode::ByRef(_) => ast::MutImmutable,\n+                    ast::BindingMode::ByValue(mt) => mt,\n                 };\n                 // collect path for either visit_local or visit_arm\n                 let path = ast_util::ident_to_path(path1.span, path1.node);"}, {"sha": "89655c5c39e41ac307bc1e28d883ade2085617de", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=143b9d80d06c314b8cdf5c35ea9b6661006ee6c6", "patch": "@@ -10,7 +10,6 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::BindingMode::*;\n pub use self::BinOp_::*;\n pub use self::BlockCheckMode::*;\n pub use self::CaptureClause::*;\n@@ -575,8 +574,8 @@ pub struct FieldPat {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum BindingMode {\n-    BindByRef(Mutability),\n-    BindByValue(Mutability),\n+    ByRef(Mutability),\n+    ByValue(Mutability),\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n@@ -1655,7 +1654,7 @@ impl Arg {\n             }),\n             pat: P(Pat {\n                 id: DUMMY_NODE_ID,\n-                node: PatIdent(BindByValue(mutability), path, None),\n+                node: PatIdent(BindingMode::ByValue(mutability), path, None),\n                 span: span\n             }),\n             id: DUMMY_NODE_ID"}, {"sha": "a81094d0524f899117dcd9901ab19f10982f8e81", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=143b9d80d06c314b8cdf5c35ea9b6661006ee6c6", "patch": "@@ -69,7 +69,7 @@ pub fn path_to_ident(path: &Path) -> Option<Ident> {\n pub fn ident_to_pat(id: NodeId, s: Span, i: Ident) -> P<Pat> {\n     P(Pat {\n         id: id,\n-        node: PatIdent(BindByValue(MutImmutable), codemap::Spanned{span:s, node:i}, None),\n+        node: PatIdent(BindingMode::ByValue(MutImmutable), codemap::Spanned{span:s, node:i}, None),\n         span: s\n     })\n }"}, {"sha": "bbb80ff13c75612fe6832cf170a262bf7293628f", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=143b9d80d06c314b8cdf5c35ea9b6661006ee6c6", "patch": "@@ -514,7 +514,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn stmt_let(&self, sp: Span, mutbl: bool, ident: ast::Ident,\n                 ex: P<ast::Expr>) -> P<ast::Stmt> {\n         let pat = if mutbl {\n-            self.pat_ident_binding_mode(sp, ident, ast::BindByValue(ast::MutMutable))\n+            self.pat_ident_binding_mode(sp, ident, ast::BindingMode::ByValue(ast::MutMutable))\n         } else {\n             self.pat_ident(sp, ident)\n         };\n@@ -538,7 +538,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                       ex: P<ast::Expr>)\n                       -> P<ast::Stmt> {\n         let pat = if mutbl {\n-            self.pat_ident_binding_mode(sp, ident, ast::BindByValue(ast::MutMutable))\n+            self.pat_ident_binding_mode(sp, ident, ast::BindingMode::ByValue(ast::MutMutable))\n         } else {\n             self.pat_ident(sp, ident)\n         };\n@@ -809,7 +809,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.pat(span, ast::PatLit(expr))\n     }\n     fn pat_ident(&self, span: Span, ident: ast::Ident) -> P<ast::Pat> {\n-        self.pat_ident_binding_mode(span, ident, ast::BindByValue(ast::MutImmutable))\n+        self.pat_ident_binding_mode(span, ident, ast::BindingMode::ByValue(ast::MutImmutable))\n     }\n \n     fn pat_ident_binding_mode(&self,"}, {"sha": "176dd1ea2032bb84d53a003f5ff8ca9c18a810dc", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=143b9d80d06c314b8cdf5c35ea9b6661006ee6c6", "patch": "@@ -890,7 +890,7 @@ mod tests {\n         assert!(panictry!(parser.parse_pat())\n                 == P(ast::Pat{\n                 id: ast::DUMMY_NODE_ID,\n-                node: ast::PatIdent(ast::BindByValue(ast::MutImmutable),\n+                node: ast::PatIdent(ast::BindingMode::ByValue(ast::MutImmutable),\n                                     Spanned{ span:sp(0, 1),\n                                              node: str_to_ident(\"b\")\n                     },\n@@ -926,7 +926,7 @@ mod tests {\n                                     pat: P(ast::Pat {\n                                         id: ast::DUMMY_NODE_ID,\n                                         node: ast::PatIdent(\n-                                            ast::BindByValue(ast::MutImmutable),\n+                                            ast::BindingMode::ByValue(ast::MutImmutable),\n                                                 Spanned{\n                                                     span: sp(6,7),\n                                                     node: str_to_ident(\"b\")},"}, {"sha": "f658e831d7b1ca08dd3cc40c28e0d358d0c971d4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=143b9d80d06c314b8cdf5c35ea9b6661006ee6c6", "patch": "@@ -14,7 +14,7 @@ use abi;\n use ast::BareFnTy;\n use ast::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::{Public, Unsafety};\n-use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindByRef, BindByValue};\n+use ast::{Mod, BiAdd, Arg, Arm, Attribute, BindingMode};\n use ast::{BiBitAnd, BiBitOr, BiBitXor, BiRem, BiLt, Block};\n use ast::{BlockCheckMode, CaptureByRef, CaptureByValue, CaptureClause};\n use ast::{Constness, ConstTraitItem, Crate, CrateConfig};\n@@ -3274,10 +3274,10 @@ impl<'a> Parser<'a> {\n                 hi = self.last_span.hi;\n \n                 let bind_type = match (is_ref, is_mut) {\n-                    (true, true) => BindByRef(MutMutable),\n-                    (true, false) => BindByRef(MutImmutable),\n-                    (false, true) => BindByValue(MutMutable),\n-                    (false, false) => BindByValue(MutImmutable),\n+                    (true, true) => BindingMode::ByRef(MutMutable),\n+                    (true, false) => BindingMode::ByRef(MutImmutable),\n+                    (false, true) => BindingMode::ByValue(MutMutable),\n+                    (false, false) => BindingMode::ByValue(MutImmutable),\n                 };\n                 let fieldpath = codemap::Spanned{span:self.last_span, node:fieldname};\n                 let fieldpat = P(ast::Pat{\n@@ -3372,11 +3372,11 @@ impl<'a> Parser<'a> {\n             // At this point, token != _, &, &&, (, [\n             if try!(self.eat_keyword(keywords::Mut)) {\n                 // Parse mut ident @ pat\n-                pat = try!(self.parse_pat_ident(BindByValue(MutMutable)));\n+                pat = try!(self.parse_pat_ident(BindingMode::ByValue(MutMutable)));\n             } else if try!(self.eat_keyword(keywords::Ref)) {\n                 // Parse ref ident @ pat / ref mut ident @ pat\n                 let mutbl = try!(self.parse_mutability());\n-                pat = try!(self.parse_pat_ident(BindByRef(mutbl)));\n+                pat = try!(self.parse_pat_ident(BindingMode::ByRef(mutbl)));\n             } else if try!(self.eat_keyword(keywords::Box)) {\n                 // Parse box pat\n                 let subpat = try!(self.parse_pat());\n@@ -3405,7 +3405,7 @@ impl<'a> Parser<'a> {\n                         // Parse ident @ pat\n                         // This can give false positives and parse nullary enums,\n                         // they are dealt with later in resolve\n-                        pat = try!(self.parse_pat_ident(BindByValue(MutImmutable)));\n+                        pat = try!(self.parse_pat_ident(BindingMode::ByValue(MutImmutable)));\n                     }\n                 } else {\n                     let (qself, path) = if try!(self.eat_lt()) {"}, {"sha": "ded0bea59b3b14d116cd9f7a174d8d518c20c732", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=143b9d80d06c314b8cdf5c35ea9b6661006ee6c6", "patch": "@@ -2467,12 +2467,12 @@ impl<'a> State<'a> {\n             ast::PatWild => try!(word(&mut self.s, \"_\")),\n             ast::PatIdent(binding_mode, ref path1, ref sub) => {\n                 match binding_mode {\n-                    ast::BindByRef(mutbl) => {\n+                    ast::BindingMode::ByRef(mutbl) => {\n                         try!(self.word_nbsp(\"ref\"));\n                         try!(self.print_mutability(mutbl));\n                     }\n-                    ast::BindByValue(ast::MutImmutable) => {}\n-                    ast::BindByValue(ast::MutMutable) => {\n+                    ast::BindingMode::ByValue(ast::MutImmutable) => {}\n+                    ast::BindingMode::ByValue(ast::MutMutable) => {\n                         try!(self.word_nbsp(\"mut\"));\n                     }\n                 }\n@@ -2678,7 +2678,7 @@ impl<'a> State<'a> {\n             let m = match *explicit_self {\n                 ast::SelfStatic => ast::MutImmutable,\n                 _ => match decl.inputs[0].pat.node {\n-                    ast::PatIdent(ast::BindByValue(m), _, _) => m,\n+                    ast::PatIdent(ast::BindingMode::ByValue(m), _, _) => m,\n                     _ => ast::MutImmutable\n                 }\n             };"}, {"sha": "f7bda306fbc0f3dd740700c91e76893ba0449fcf", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/143b9d80d06c314b8cdf5c35ea9b6661006ee6c6/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=143b9d80d06c314b8cdf5c35ea9b6661006ee6c6", "patch": "@@ -1471,7 +1471,7 @@ impl<'a> TraitDef<'a> {\n                           -> Vec<P<ast::Pat>> {\n         field_paths.iter().map(|path| {\n             cx.pat(path.span,\n-                        ast::PatIdent(ast::BindByRef(mutbl), (*path).clone(), None))\n+                        ast::PatIdent(ast::BindingMode::ByRef(mutbl), (*path).clone(), None))\n         }).collect()\n     }\n "}]}