{"sha": "cb5c3a9914556f0a796c76c5db725168ba8d32ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNWMzYTk5MTQ1NTZmMGE3OTZjNzZjNWRiNzI1MTY4YmE4ZDMyZWU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-24T03:04:00Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-24T03:04:00Z"}, "message": "Add a test for #2179", "tree": {"sha": "e888934224347c3ac5aeb683ac893b8f31a284f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e888934224347c3ac5aeb683ac893b8f31a284f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb5c3a9914556f0a796c76c5db725168ba8d32ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5c3a9914556f0a796c76c5db725168ba8d32ee", "html_url": "https://github.com/rust-lang/rust/commit/cb5c3a9914556f0a796c76c5db725168ba8d32ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb5c3a9914556f0a796c76c5db725168ba8d32ee/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20805acf42e1bc78c0434276b71309df0a583045", "url": "https://api.github.com/repos/rust-lang/rust/commits/20805acf42e1bc78c0434276b71309df0a583045", "html_url": "https://github.com/rust-lang/rust/commit/20805acf42e1bc78c0434276b71309df0a583045"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "ade953971ec36a58869c5dc80bfe45aa20748140", "filename": "tests/source/issue-2179.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cb5c3a9914556f0a796c76c5db725168ba8d32ee/tests%2Fsource%2Fissue-2179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5c3a9914556f0a796c76c5db725168ba8d32ee/tests%2Fsource%2Fissue-2179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2179.rs?ref=cb5c3a9914556f0a796c76c5db725168ba8d32ee", "patch": "@@ -0,0 +1,35 @@\n+// rustfmt-error_on_line_overflow: false\n+\n+fn issue_2179() {\n+    let (opts, rustflags, clear_env_rust_log) =\n+        {\n+            // We mustn't lock configuration for the whole build process\n+            let rls_config = rls_config.lock().unwrap();\n+\n+            let opts = CargoOptions::new(&rls_config);\n+            trace!(\"Cargo compilation options:\\n{:?}\", opts);\n+            let rustflags = prepare_cargo_rustflags(&rls_config);\n+\n+            // Warn about invalid specified bin target or package depending on current mode\n+            // TODO: Return client notifications along with diagnostics to inform the user\n+            if !rls_config.workspace_mode {\n+                let cur_pkg_targets = ws.current().unwrap().targets();\n+\n+                if let &Some(ref build_bin) = rls_config.build_bin.as_ref() {\n+                    let mut bins = cur_pkg_targets.iter().filter(|x| x.is_bin());\n+                    if let None = bins.find(|x| x.name() == build_bin) {\n+                        warn!(\"cargo - couldn't find binary `{}` specified in `build_bin` configuration\", build_bin);\n+                    }\n+                }\n+            } else {\n+                for package in &opts.package {\n+                    if let None = ws.members().find(|x| x.name() == package) {\n+                        warn!(\"cargo - couldn't find member package `{}` specified in `analyze_package` configuration\", package);\n+                    }\n+                }\n+            }\n+\n+            (opts, rustflags, rls_config.clear_env_rust_log)\n+        };\n+\n+}"}, {"sha": "db8f9c557b4290acff65f9fe2e648279c710f784", "filename": "tests/target/issue-2179.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cb5c3a9914556f0a796c76c5db725168ba8d32ee/tests%2Ftarget%2Fissue-2179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5c3a9914556f0a796c76c5db725168ba8d32ee/tests%2Ftarget%2Fissue-2179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2179.rs?ref=cb5c3a9914556f0a796c76c5db725168ba8d32ee", "patch": "@@ -0,0 +1,36 @@\n+// rustfmt-error_on_line_overflow: false\n+\n+fn issue_2179() {\n+    let (opts, rustflags, clear_env_rust_log) = {\n+        // We mustn't lock configuration for the whole build process\n+        let rls_config = rls_config.lock().unwrap();\n+\n+        let opts = CargoOptions::new(&rls_config);\n+        trace!(\"Cargo compilation options:\\n{:?}\", opts);\n+        let rustflags = prepare_cargo_rustflags(&rls_config);\n+\n+        // Warn about invalid specified bin target or package depending on current mode\n+        // TODO: Return client notifications along with diagnostics to inform the user\n+        if !rls_config.workspace_mode {\n+            let cur_pkg_targets = ws.current().unwrap().targets();\n+\n+            if let &Some(ref build_bin) = rls_config.build_bin.as_ref() {\n+                let mut bins = cur_pkg_targets.iter().filter(|x| x.is_bin());\n+                if let None = bins.find(|x| x.name() == build_bin) {\n+                    warn!(\n+                        \"cargo - couldn't find binary `{}` specified in `build_bin` configuration\",\n+                        build_bin\n+                    );\n+                }\n+            }\n+        } else {\n+            for package in &opts.package {\n+                if let None = ws.members().find(|x| x.name() == package) {\n+                    warn!(\"cargo - couldn't find member package `{}` specified in `analyze_package` configuration\", package);\n+                }\n+            }\n+        }\n+\n+        (opts, rustflags, rls_config.clear_env_rust_log)\n+    };\n+}"}]}