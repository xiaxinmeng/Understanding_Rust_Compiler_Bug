{"sha": "93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYjhjMjNmN2JlMDMxZTJmOGJkNTJjOTJlZGFmNTFmZWIyM2QzYjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-18T17:36:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-18T17:36:19Z"}, "message": "Merge remote-tracking branch 'origin/master' into cargo-miri-test", "tree": {"sha": "811c207e7360227209e007d5ffd5de0459dd796b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/811c207e7360227209e007d5ffd5de0459dd796b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "html_url": "https://github.com/rust-lang/rust/commit/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce5089c3905f7051a9bcdc92ef24ba934dc75098", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce5089c3905f7051a9bcdc92ef24ba934dc75098", "html_url": "https://github.com/rust-lang/rust/commit/ce5089c3905f7051a9bcdc92ef24ba934dc75098"}, {"sha": "3a93831c5d6caa0b5944a728f7721d7d08173ede", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a93831c5d6caa0b5944a728f7721d7d08173ede", "html_url": "https://github.com/rust-lang/rust/commit/3a93831c5d6caa0b5944a728f7721d7d08173ede"}], "stats": {"total": 254, "additions": 129, "deletions": 125}, "files": [{"sha": "dfc4238a6c03d7078570ac4db5289ce70f9f23e1", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "patch": "@@ -12,49 +12,22 @@ os:\n dist: xenial\n \n before_script:\n-# install extra stuff for cross-compilation\n+# Linux: install extra stuff for cross-compilation\n - if [[ \"$TRAVIS_OS_NAME\" == linux ]]; then sudo apt update && sudo apt install gcc-multilib; fi\n-# macOS weirdness (https://github.com/travis-ci/travis-ci/issues/6307, https://github.com/travis-ci/travis-ci/issues/10165)\n-- if [[ \"$TRAVIS_OS_NAME\" == osx ]]; then rvm get stable; fi\n # Compute the rust version we use. We do not use \"language: rust\" to have more control here.\n - |\n   if [[ \"$TRAVIS_EVENT_TYPE\" == cron ]]; then\n     RUST_TOOLCHAIN=nightly\n   else\n     RUST_TOOLCHAIN=$(cat rust-version)\n   fi\n-- |\n-  if [ \"$TRAVIS_OS_NAME\" == osx ]; then\n-    export MIRI_SYSROOT_BASE=~/Library/Caches/miri.miri.miri/\n-  else\n-    export MIRI_SYSROOT_BASE=~/.cache/miri/\n-  fi\n # install Rust\n - curl https://build.travis-ci.org/files/rustup-init.sh -sSf | sh -s -- -y --default-toolchain \"$RUST_TOOLCHAIN\"\n - export PATH=$HOME/.cargo/bin:$PATH\n - rustc --version\n \n script:\n-- set -e\n-- |\n-  # Build and install miri\n-  cargo build --release --all-features --all-targets &&\n-  cargo install --all-features --force --path .\n-- |\n-  # Get ourselves a MIR-full libstd for the host and a foreign architecture\n-  cargo miri setup &&\n-  if [[ \"$TRAVIS_OS_NAME\" == osx ]]; then\n-    cargo miri setup --target i686-apple-darwin\n-  else\n-    cargo miri setup --target i686-unknown-linux-gnu\n-  fi\n-- |\n-  # Test miri with full MIR, on the host and other architectures\n-  MIRI_SYSROOT=$MIRI_SYSROOT_BASE/HOST cargo test --release --all-features &&\n-  MIRI_SYSROOT=$MIRI_SYSROOT_BASE cargo test --release --all-features\n-- |\n-  # Test cargo integration\n-  (cd test-cargo-miri && MIRI_SYSROOT=$MIRI_SYSROOT_BASE/HOST ./run-test.py)\n+- ./travis.sh\n \n notifications:\n   email:"}, {"sha": "6fd45b0c74178dd9230e278809effba4b037d93a", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "patch": "@@ -39,6 +39,10 @@ directories = { version = \"1.0\", optional = true }\n rustc_version = { version = \"0.2.3\", optional = true }\n env_logger = \"0.5\"\n log = \"0.4\"\n+# A noop dependency that changes in the Rust repository, it's a bit of a hack.\n+# See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`\n+# for more information.\n+rustc-workspace-hack = \"1.0.0\"\n \n [build-dependencies]\n vergen = \"3\""}, {"sha": "b6e1c20076de9142a0482d4a2d138765f2ac21df", "filename": "README.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "patch": "@@ -154,9 +154,9 @@ MIRI_LOG=rustc_mir::interpret=debug,miri::stacked_borrows cargo run tests/run-pa\n In addition, you can set `MIRI_BACKTRACE=1` to get a backtrace of where an\n evaluation error was originally created.\n \n-### Miri `-Z` flags\n+### Miri `-Z` flags and environment variables\n \n-Several `-Z` flags are relevant for miri:\n+Several `-Z` flags are relevant for Miri:\n \n * `-Zmir-opt-level` controls how many MIR optimizations are performed.  miri\n   overrides the default to be `0`; be advised that using any higher level can\n@@ -168,6 +168,14 @@ Several `-Z` flags are relevant for miri:\n   enforcing the validity invariant, which is enforced by default.  This is\n   mostly useful for debugging; it means miri will miss bugs in your program.\n \n+Moreover, Miri recognizes some environment variables:\n+\n+* `MIRI_SYSROOT` (recognized by `miri`, `cargo miri` and the test suite)\n+  indicates the sysroot to use.\n+* `MIRI_TARGET` (recognized by the test suite) indicates which target\n+  architecture to test against.  `miri` and `cargo miri` accept the `--target`\n+  flag for the same purpose.\n+\n ## Contributing and getting help\n \n Check out the issues on this GitHub repository for some ideas. There's lots that"}, {"sha": "2ad896fe0519dfbd78c255f969aaf00badeed3da", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "patch": "@@ -1 +1 @@\n-nightly-2018-12-08\n+nightly-2018-12-14"}, {"sha": "2a2cbdb8155d0f6dbd7cb150d5d67814896ccb6d", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 45, "deletions": 12, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "patch": "@@ -3,7 +3,7 @@\n extern crate cargo_metadata;\n \n use std::path::{PathBuf, Path};\n-use std::io::{self, Write};\n+use std::io::{self, Write, BufRead};\n use std::process::Command;\n use std::fs::{self, File};\n \n@@ -114,6 +114,36 @@ fn list_targets() -> impl Iterator<Item=cargo_metadata::Target> {\n     package.targets.into_iter()\n }\n \n+fn xargo_version() -> Option<(u32, u32, u32)> {\n+    let out = Command::new(\"xargo\").arg(\"--version\").output().ok()?;\n+    if !out.status.success() {\n+        return None;\n+    }\n+    // Parse output. The first line looks like \"xargo 0.3.12 (b004f1c 2018-12-13)\".\n+    let line = out.stderr.lines().nth(0)\n+        .expect(\"malformed `xargo --version` output: not at least one line\")\n+        .expect(\"malformed `xargo --version` output: error reading first line\");\n+    let version = line.split(' ').nth(1)\n+        .expect(\"malformed `xargo --version` output: not at least two words\");\n+    let mut version_pieces = version.split('.');\n+    let major = version_pieces.next()\n+        .expect(\"malformed `xargo --version` output: not a major version piece\")\n+        .parse()\n+        .expect(\"malformed `xargo --version` output: major version is not an integer\");\n+    let minor = version_pieces.next()\n+        .expect(\"malformed `xargo --version` output: not a minor version piece\")\n+        .parse()\n+        .expect(\"malformed `xargo --version` output: minor version is not an integer\");\n+    let patch = version_pieces.next()\n+        .expect(\"malformed `xargo --version` output: not a patch version piece\")\n+        .parse()\n+        .expect(\"malformed `xargo --version` output: patch version is not an integer\");\n+    if !version_pieces.next().is_none() {\n+        panic!(\"malformed `xargo --version` output: more than three pieces in version\");\n+    }\n+    Some((major, minor, patch))\n+}\n+\n fn ask(question: &str) {\n     let mut buf = String::new();\n     print!(\"{} [Y/n] \", question);\n@@ -134,14 +164,15 @@ fn setup(ask_user: bool) {\n     }\n \n     // First, we need xargo\n-    if Command::new(\"xargo\").arg(\"--version\").output().is_err()\n-    {\n+    let xargo = xargo_version();\n+    if xargo.map_or(true, |v| v < (0, 3, 13)) {\n         if ask_user {\n-            ask(\"It seems you do not have xargo installed. I will run `cargo install xargo`. Proceed?\");\n+            ask(\"It seems you do not have a recent enough xargo installed. I will run `cargo install xargo -f`. Proceed?\");\n         } else {\n-            println!(\"Installing xargo: `cargo install xargo`\");\n+            println!(\"Installing xargo: `cargo install xargo -f`\");\n         }\n-        if !Command::new(\"cargo\").args(&[\"install\", \"xargo\"]).status().unwrap().success() {\n+        // FIXME: Go back to using releases, once a 0.3.13 got released.\n+        if !Command::new(\"cargo\").args(&[\"install\", \"xargo\", \"-f\", \"--git\", \"https://github.com/japaric/xargo\"]).status().unwrap().success() {\n             show_error(format!(\"Failed to install xargo\"));\n         }\n     }\n@@ -304,8 +335,8 @@ fn main() {\n                 _ => {}\n             }\n         }\n-    } else {\n-        // This arm is executed when cargo-miri runs `cargo rustc` with the `RUSTC` env var set to itself:\n+    } else if let Some(\"rustc\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n+        // This arm is executed when cargo-miri runs `cargo rustc` with the `RUSTC_WRAPPER` env var set to itself:\n         // Dependencies get dispatched to rustc, the final test/binary to miri.\n \n         let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n@@ -331,11 +362,11 @@ fn main() {\n \n         // this conditional check for the --sysroot flag is there so users can call `cargo-miri` directly\n         // without having to pass --sysroot or anything\n+        let rustc_args = std::env::args().skip(2);\n         let mut args: Vec<String> = if std::env::args().any(|s| s == \"--sysroot\") {\n-            std::env::args().skip(1).collect()\n+            rustc_args.collect()\n         } else {\n-            std::env::args()\n-                .skip(1)\n+            rustc_args\n                 .chain(Some(\"--sysroot\".to_owned()))\n                 .chain(Some(sys_root))\n                 .collect()\n@@ -364,6 +395,8 @@ fn main() {\n             Err(ref e) if miri_enabled => panic!(\"error during miri run: {:?}\", e),\n             Err(ref e) => panic!(\"error during rustc call: {:?}\", e),\n         }\n+    } else {\n+        show_error(format!(\"Must be called with either `miri` or `rustc` as first argument.\"))\n     }\n }\n \n@@ -388,7 +421,7 @@ where\n     let path = std::env::current_exe().expect(\"current executable path invalid\");\n     let exit_status = Command::new(\"cargo\")\n         .args(&args)\n-        .env(\"RUSTC\", path)\n+        .env(\"RUSTC_WRAPPER\", path)\n         .spawn()\n         .expect(\"could not run cargo\")\n         .wait()"}, {"sha": "f125100f834385b60f35bdd5ba94d0bd77314e43", "filename": "tests/compiletest.rs", "status": "modified", "additions": 25, "deletions": 70, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "patch": "@@ -3,7 +3,7 @@\n #![test_runner(test_runner)]\n \n use std::slice::SliceConcatExt;\n-use std::path::{PathBuf, Path};\n+use std::path::PathBuf;\n use std::env;\n \n use compiletest_rs as compiletest;\n@@ -34,10 +34,11 @@ fn mk_config(mode: &str) -> compiletest::common::ConfigWithTemp {\n         config.compile_lib_path = rustc_lib_path();\n     }\n     config.filter = env::args().nth(1);\n+    config.host = get_host();\n     config\n }\n \n-fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, opt: bool) {\n+fn compile_fail(path: &str, target: &str, opt: bool) {\n     let opt_str = if opt { \" with optimizations\" } else { \"\" };\n     eprintln!(\"{}\", format!(\n         \"## Running compile-fail tests in {} against miri for target {}{}\",\n@@ -47,7 +48,6 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, opt: bool)\n     ).green().bold());\n \n     let mut flags = Vec::new();\n-    flags.push(format!(\"--sysroot {}\", sysroot.display()));\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n     flags.push(\"--edition 2018\".to_owned());\n     if opt {\n@@ -60,12 +60,11 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, opt: bool)\n     let mut config = mk_config(\"compile-fail\");\n     config.src_base = PathBuf::from(path);\n     config.target = target.to_owned();\n-    config.host = host.to_owned();\n     config.target_rustcflags = Some(flags.join(\" \"));\n     compiletest::run_tests(&config);\n }\n \n-fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, opt: bool) {\n+fn miri_pass(path: &str, target: &str, opt: bool) {\n     let opt_str = if opt { \" with optimizations\" } else { \"\" };\n     eprintln!(\"{}\", format!(\n         \"## Running run-pass tests in {} against miri for target {}{}\",\n@@ -75,69 +74,33 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, opt: bool) {\n     ).green().bold());\n \n     let mut flags = Vec::new();\n-    flags.push(format!(\"--sysroot {}\", sysroot.display()));\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n     flags.push(\"--edition 2018\".to_owned());\n     if opt {\n-        // FIXME: We use opt level 1 because MIR inlining defeats the validation\n-        // whitelist.\n-        flags.push(\"-Zmir-opt-level=1\".to_owned());\n+        flags.push(\"-Zmir-opt-level=3\".to_owned());\n     }\n \n     let mut config = mk_config(\"ui\");\n     config.src_base = PathBuf::from(path);\n     config.target = target.to_owned();\n-    config.host = host.to_owned();\n     config.target_rustcflags = Some(flags.join(\" \"));\n     compiletest::run_tests(&config);\n }\n \n-fn is_target_dir<P: Into<PathBuf>>(path: P) -> bool {\n-    let mut path = path.into();\n-    path.push(\"lib\");\n-    path.metadata().map(|m| m.is_dir()).unwrap_or(false)\n-}\n-\n-fn target_has_std<P: Into<PathBuf>>(path: P) -> bool {\n-    let mut path = path.into();\n-    path.push(\"lib\");\n-    std::fs::read_dir(path)\n-        .expect(\"invalid target\")\n-        .map(|entry| entry.unwrap())\n-        .filter(|entry| entry.file_type().unwrap().is_file())\n-        .filter_map(|entry| entry.file_name().into_string().ok())\n-        .any(|file_name| file_name == \"libstd.rlib\")\n-}\n-\n-\n-fn for_all_targets<F: FnMut(String)>(sysroot: &Path, f: F) {\n-    let target_dir = sysroot.join(\"lib\").join(\"rustlib\");\n-    let mut targets = std::fs::read_dir(target_dir)\n-        .expect(\"invalid sysroot\")\n-        .map(|entry| entry.unwrap())\n-        .filter(|entry| is_target_dir(entry.path()))\n-        .filter(|entry| target_has_std(entry.path()))\n-        .map(|entry| entry.file_name().into_string().unwrap())\n-        .peekable();\n-\n-    if targets.peek().is_none() {\n-        panic!(\"No valid targets found\");\n+/// Make sure the MIRI_SYSROOT env var is set\n+fn set_sysroot() {\n+    if std::env::var(\"MIRI_SYSROOT\").is_ok() {\n+        // Nothing to do\n+        return;\n     }\n-\n-    targets.for_each(f);\n-}\n-\n-fn get_sysroot() -> PathBuf {\n-    let sysroot = std::env::var(\"MIRI_SYSROOT\").unwrap_or_else(|_| {\n-        let sysroot = std::process::Command::new(\"rustc\")\n-            .arg(\"--print\")\n-            .arg(\"sysroot\")\n-            .output()\n-            .expect(\"rustc not found\")\n-            .stdout;\n-        String::from_utf8(sysroot).expect(\"sysroot is not utf8\")\n-    });\n-    PathBuf::from(sysroot.trim())\n+    let sysroot = std::process::Command::new(\"rustc\")\n+        .arg(\"--print\")\n+        .arg(\"sysroot\")\n+        .output()\n+        .expect(\"rustc not found\")\n+        .stdout;\n+    let sysroot = String::from_utf8(sysroot).expect(\"sysroot is not utf8\");\n+    std::env::set_var(\"MIRI_SYSROOT\", sysroot.trim());\n }\n \n fn get_host() -> String {\n@@ -153,28 +116,20 @@ fn get_host() -> String {\n     version_meta.host\n }\n \n-fn run_pass_miri(opt: bool) {\n-    let sysroot = get_sysroot();\n-    let host = get_host();\n+fn get_target() -> String {\n+    std::env::var(\"MIRI_TARGET\").unwrap_or_else(|_| get_host())\n+}\n \n-    for_all_targets(&sysroot, |target| {\n-        miri_pass(&sysroot, \"tests/run-pass\", &target, &host, opt);\n-    });\n+fn run_pass_miri(opt: bool) {\n+    miri_pass(\"tests/run-pass\", &get_target(), opt);\n }\n \n fn compile_fail_miri(opt: bool) {\n-    let sysroot = get_sysroot();\n-    let host = get_host();\n-\n-    for_all_targets(&sysroot, |target| {\n-        compile_fail(&sysroot, \"tests/compile-fail\", &target, &host, opt);\n-    });\n+    compile_fail(\"tests/compile-fail\", &get_target(), opt);\n }\n \n fn test_runner(_tests: &[&()]) {\n-    // We put everything into a single test to avoid the parallelism `cargo test`\n-    // introduces.  We still get parallelism within our tests because `compiletest`\n-    // uses `libtest` which runs jobs in parallel.\n+    set_sysroot();\n \n     run_pass_miri(false);\n     run_pass_miri(true);"}, {"sha": "f2ed67385cdc775d3320fb70389d449b339b67c9", "filename": "tests/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/tests%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/tests%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fforeign-fn-linkname.rs?ref=93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "patch": "@@ -10,7 +10,7 @@\n \n //ignore-windows: Uses POSIX APIs\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n #![allow(unused_extern_crates)] // rustc bug https://github.com/rust-lang/rust/issues/56098\n \n extern crate libc;"}, {"sha": "6819a2af3ed8f9612d389853308010c5f4aa1271", "filename": "tests/run-pass/function_pointers.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/tests%2Frun-pass%2Ffunction_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/tests%2Frun-pass%2Ffunction_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffunction_pointers.rs?ref=93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "patch": "@@ -10,12 +10,12 @@ fn h(i: i32, j: i32) -> i32 {\n     j * i * 7\n }\n \n-fn return_fn_ptr() -> fn() -> i32 {\n+fn return_fn_ptr(f: fn() -> i32) -> fn() -> i32 {\n     f\n }\n \n fn call_fn_ptr() -> i32 {\n-    return_fn_ptr()()\n+    return_fn_ptr(f)()\n }\n \n fn indirect<F: Fn() -> i32>(f: F) -> i32 { f() }\n@@ -41,6 +41,7 @@ fn main() {\n     assert_eq!(indirect3(h), 210);\n     assert_eq!(indirect_mut3(h), 210);\n     assert_eq!(indirect_once3(h), 210);\n-    assert!(return_fn_ptr() == f);\n-    assert!(return_fn_ptr() as unsafe fn() -> i32 == f as fn() -> i32 as unsafe fn() -> i32);\n+    let g = f as fn() -> i32;\n+    assert!(return_fn_ptr(g) == g);\n+    assert!(return_fn_ptr(g) as unsafe fn() -> i32 == g as fn() -> i32 as unsafe fn() -> i32);\n }"}, {"sha": "1dab492f9da3bfe4821e19cfc52a7fcf8f9e9d78", "filename": "tests/run-pass/mir_coercions.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/tests%2Frun-pass%2Fmir_coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/tests%2Frun-pass%2Fmir_coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmir_coercions.rs?ref=93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "patch": "@@ -60,7 +60,10 @@ fn main() {\n     let a = [0,1,2];\n     let square_local : fn(u32) -> u32 = square;\n     let (f,g) = fn_coercions(&square_local);\n-    assert_eq!(f as *const (), square as *const());\n+    // cannot use `square as *const ()` because we can't know whether the compiler duplicates\n+    // functions, so two function pointers are only equal if they result from the same function\n+    // to function pointer cast\n+    assert_eq!(f as *const (), square_local as *const());\n     assert_eq!(g(4), 16);\n     assert_eq!(identity_coercion(g)(5), 25);\n "}, {"sha": "62931493aa00c7120e01e53ce42f2fe16866cd95", "filename": "tests/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/tests%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/tests%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregions-mock-trans.rs?ref=93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "patch": "@@ -10,7 +10,7 @@\n \n //ignore-windows: Uses POSIX APIs\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n \n #![allow(dead_code)]\n "}, {"sha": "aeedb7034ce5e3b9853ab7d9cee38568ca47b9e7", "filename": "tests/run-pass/thread-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/tests%2Frun-pass%2Fthread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/tests%2Frun-pass%2Fthread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fthread-local.rs?ref=93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "patch": "@@ -1,6 +1,6 @@\n //ignore-windows: Uses POSIX APIs\n \n-#![feature(libc)]\n+#![feature(rustc_private)]\n extern crate libc;\n \n use std::mem;"}, {"sha": "381169505ec9f50b5bfca110635935372e24ee4a", "filename": "tests/run-pass/vecdeque.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/tests%2Frun-pass%2Fvecdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/tests%2Frun-pass%2Fvecdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvecdeque.rs?ref=93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "patch": "@@ -1,6 +1,3 @@\n-// FIXME: Validation disabled until https://github.com/rust-lang/rust/pull/56161 lands\n-// compile-flags: -Zmiri-disable-validation\n-\n use std::collections::VecDeque;\n \n fn main() {"}, {"sha": "aded53b1579d647cfad2bb2ff894e21aa8d98035", "filename": "travis.sh", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/travis.sh", "raw_url": "https://github.com/rust-lang/rust/raw/93b8c23f7be031e2f8bd52c92edaf51feb23d3b0/travis.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/travis.sh?ref=93b8c23f7be031e2f8bd52c92edaf51feb23d3b0", "patch": "@@ -0,0 +1,30 @@\n+#!/bin/bash\n+set -e\n+\n+# Determine configuration\n+if [ \"$TRAVIS_OS_NAME\" == osx ]; then\n+  export MIRI_SYSROOT_BASE=~/Library/Caches/miri.miri.miri/\n+  FOREIGN_TARGET=i686-apple-darwin\n+else\n+  export MIRI_SYSROOT_BASE=~/.cache/miri/\n+  FOREIGN_TARGET=i686-unknown-linux-gnu\n+fi\n+\n+echo \"Build and install miri\"\n+cargo build --release --all-features --all-targets\n+cargo install --all-features --force --path .\n+echo\n+\n+echo \"Get ourselves a MIR-full libstd for the host and a foreign architecture\"\n+cargo miri setup\n+cargo miri setup --target \"$FOREIGN_TARGET\"\n+echo\n+\n+echo \"Test miri with full MIR, on the host and other architectures\"\n+MIRI_SYSROOT=\"$MIRI_SYSROOT_BASE\"/HOST cargo test --release --all-features\n+MIRI_SYSROOT=\"$MIRI_SYSROOT_BASE\" MIRI_TARGET=\"$FOREIGN_TARGET\" cargo test --release --all-features\n+echo\n+\n+echo \"Test cargo integration\"\n+(cd test-cargo-miri && MIRI_SYSROOT=\"$MIRI_SYSROOT_BASE\"/HOST ./run-test.py)\n+echo"}]}