{"sha": "652417e33285c22bffcf71bd792d4e05ebac758a", "node_id": "C_kwDOAAsO6NoAKDY1MjQxN2UzMzI4NWMyMmJmZmNmNzFiZDc5MmQ0ZTA1ZWJhYzc1OGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-19T19:38:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-19T19:38:42Z"}, "message": "Rollup merge of #103258 - SUPERCILEX:miri, r=RalfJung\n\nMake miri read_dir test a little more robust\n\nr? `@RalfJung`", "tree": {"sha": "09d84e244c26de026237e063e85f79487aecec15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09d84e244c26de026237e063e85f79487aecec15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/652417e33285c22bffcf71bd792d4e05ebac758a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjUFJCCRBK7hj4Ov3rIwAAnlYIAHMKFMZSPlHfXXP8IHrgSe/m\npeULWYtm5QB7cp4Id3JG1DArtcKz4nsA393XqJyx+SOEehieRPJMA9l2z7iF1Exd\nfYslEfQrmyQkBdjEeVDP10hXUIH0qiGrNWdiCjYAXXowHcqu/hoTz45ZKI0HIJTF\nDM62U6cKFWLdVsdjLjUQ4hKdAFb+NZXBSHmQ7fTfXG9CR2hdgHu3cQOkoTz0eZBd\npmqUkik8fxtOl8u69trZFVaK0u1XVd1ohLpwYf+TVEiZkPL5fB3tWPeNipHt7036\nFDVN8lUG/g5KzMUnzReO9ydUp7KNvXG7beRAItchy0Wym//gRjGU8bIEuvU9Tyc=\n=fUhv\n-----END PGP SIGNATURE-----\n", "payload": "tree 09d84e244c26de026237e063e85f79487aecec15\nparent 952c15622ac9842332345a4cc04181ba9ffafa46\nparent b0f693552d02d3cefa0c7a01b702f61b60568533\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666208322 +0200\ncommitter GitHub <noreply@github.com> 1666208322 +0200\n\nRollup merge of #103258 - SUPERCILEX:miri, r=RalfJung\n\nMake miri read_dir test a little more robust\n\nr? `@RalfJung`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/652417e33285c22bffcf71bd792d4e05ebac758a", "html_url": "https://github.com/rust-lang/rust/commit/652417e33285c22bffcf71bd792d4e05ebac758a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/652417e33285c22bffcf71bd792d4e05ebac758a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "952c15622ac9842332345a4cc04181ba9ffafa46", "url": "https://api.github.com/repos/rust-lang/rust/commits/952c15622ac9842332345a4cc04181ba9ffafa46", "html_url": "https://github.com/rust-lang/rust/commit/952c15622ac9842332345a4cc04181ba9ffafa46"}, {"sha": "b0f693552d02d3cefa0c7a01b702f61b60568533", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f693552d02d3cefa0c7a01b702f61b60568533", "html_url": "https://github.com/rust-lang/rust/commit/b0f693552d02d3cefa0c7a01b702f61b60568533"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "e573d330aa4ac327f1bcf8a8f220033a99485e08", "filename": "src/tools/miri/tests/pass-dep/shims/fs.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/652417e33285c22bffcf71bd792d4e05ebac758a/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652417e33285c22bffcf71bd792d4e05ebac758a/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Ffs.rs?ref=652417e33285c22bffcf71bd792d4e05ebac758a", "patch": "@@ -4,7 +4,8 @@\n #![feature(io_error_more)]\n #![feature(io_error_uncategorized)]\n \n-use std::ffi::CString;\n+use std::collections::HashMap;\n+use std::ffi::{CString, OsString};\n use std::fs::{\n     create_dir, read_dir, read_link, remove_dir, remove_dir_all, remove_file, rename, File,\n     OpenOptions,\n@@ -394,29 +395,34 @@ fn test_directory() {\n     // Creating a directory when it already exists should fail.\n     assert_eq!(ErrorKind::AlreadyExists, create_dir(&dir_path).unwrap_err().kind());\n \n-    // Create some files inside the directory\n+    // Create some files and dirs inside the directory\n     let path_1 = dir_path.join(\"test_file_1\");\n     drop(File::create(&path_1).unwrap());\n     let path_2 = dir_path.join(\"test_file_2\");\n     drop(File::create(&path_2).unwrap());\n-    // Test that the files are present inside the directory\n-    let dir_iter = read_dir(&dir_path).unwrap();\n-    let mut file_names = dir_iter.map(|e| e.unwrap().file_name()).collect::<Vec<_>>();\n-    file_names.sort_unstable();\n-    assert_eq!(file_names, vec![\"test_file_1\", \"test_file_2\"]);\n+    let dir_1 = dir_path.join(\"test_dir_1\");\n+    create_dir(&dir_1).unwrap();\n     // Test that read_dir metadata calls succeed\n     assert_eq!(\n-        &[true, true],\n-        &*read_dir(&dir_path)\n+        HashMap::from([\n+            (OsString::from(\"test_file_1\"), true),\n+            (OsString::from(\"test_file_2\"), true),\n+            (OsString::from(\"test_dir_1\"), false)\n+        ]),\n+        read_dir(&dir_path)\n             .unwrap()\n-            .map(|e| e.unwrap().metadata().unwrap().is_file())\n-            .collect::<Vec<_>>()\n+            .map(|e| {\n+                let e = e.unwrap();\n+                (e.file_name(), e.metadata().unwrap().is_file())\n+            })\n+            .collect::<HashMap<_, _>>()\n     );\n     // Deleting the directory should fail, since it is not empty.\n     assert_eq!(ErrorKind::DirectoryNotEmpty, remove_dir(&dir_path).unwrap_err().kind());\n     // Clean up the files in the directory\n     remove_file(&path_1).unwrap();\n     remove_file(&path_2).unwrap();\n+    remove_dir(&dir_1).unwrap();\n     // Now there should be nothing left in the directory.\n     let dir_iter = read_dir(&dir_path).unwrap();\n     let file_names = dir_iter.map(|e| e.unwrap().file_name()).collect::<Vec<_>>();"}]}