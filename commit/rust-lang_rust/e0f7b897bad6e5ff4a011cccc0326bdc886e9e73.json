{"sha": "e0f7b897bad6e5ff4a011cccc0326bdc886e9e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZjdiODk3YmFkNmU1ZmY0YTAxMWNjY2MwMzI2YmRjODg2ZTllNzM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-22T19:47:30Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-23T22:17:17Z"}, "message": "Address review.", "tree": {"sha": "5f6cb6c2f342395e12a1bf23396292ab16ec7be4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f6cb6c2f342395e12a1bf23396292ab16ec7be4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0f7b897bad6e5ff4a011cccc0326bdc886e9e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f7b897bad6e5ff4a011cccc0326bdc886e9e73", "html_url": "https://github.com/rust-lang/rust/commit/e0f7b897bad6e5ff4a011cccc0326bdc886e9e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0f7b897bad6e5ff4a011cccc0326bdc886e9e73/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d08cc0ba67d9989548ae163083b7e3a3dec6b9a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d08cc0ba67d9989548ae163083b7e3a3dec6b9a2", "html_url": "https://github.com/rust-lang/rust/commit/d08cc0ba67d9989548ae163083b7e3a3dec6b9a2"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "4ed2d32c23bea604b261bb99f9018d20a83812b7", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e0f7b897bad6e5ff4a011cccc0326bdc886e9e73/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f7b897bad6e5ff4a011cccc0326bdc886e9e73/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=e0f7b897bad6e5ff4a011cccc0326bdc886e9e73", "patch": "@@ -91,22 +91,22 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n         TyCtxt::create_stable_hashing_context(*self)\n     }\n \n-    fn try_force_previous_green(&self, dep_dep_node: &DepNode) -> bool {\n+    fn try_force_from_dep_node(&self, dep_node: &DepNode) -> bool {\n         // FIXME: This match is just a workaround for incremental bugs and should\n         // be removed. https://github.com/rust-lang/rust/issues/62649 is one such\n         // bug that must be fixed before removing this.\n-        match dep_dep_node.kind {\n+        match dep_node.kind {\n             DepKind::hir_owner | DepKind::hir_owner_nodes | DepKind::CrateMetadata => {\n-                if let Some(def_id) = dep_dep_node.extract_def_id(*self) {\n+                if let Some(def_id) = dep_node.extract_def_id(*self) {\n                     if def_id_corresponds_to_hir_dep_node(*self, def_id) {\n-                        if dep_dep_node.kind == DepKind::CrateMetadata {\n+                        if dep_node.kind == DepKind::CrateMetadata {\n                             // The `DefPath` has corresponding node,\n                             // and that node should have been marked\n                             // either red or green in `data.colors`.\n                             bug!(\n                                 \"DepNode {:?} should have been \\\n                              pre-marked as red or green but wasn't.\",\n-                                dep_dep_node\n+                                dep_node\n                             );\n                         }\n                     } else {\n@@ -134,8 +134,8 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n             }\n         }\n \n-        debug!(\"try_force_previous_green({:?}) --- trying to force\", dep_dep_node);\n-        ty::query::force_from_dep_node(*self, dep_dep_node)\n+        debug!(\"try_force_from_dep_node({:?}) --- trying to force\", dep_node);\n+        ty::query::force_from_dep_node(*self, dep_node)\n     }\n \n     fn has_errors_or_delayed_span_bugs(&self) -> bool {\n@@ -148,10 +148,8 @@ impl<'tcx> DepContext for TyCtxt<'tcx> {\n \n     // Interactions with on_disk_cache\n     fn try_load_from_on_disk_cache(&self, dep_node: &DepNode) {\n-        use crate::mir::interpret::GlobalId;\n-        use crate::ty::query::queries;\n-        use crate::ty::query::QueryDescription;\n-        rustc_dep_node_try_load_from_on_disk_cache!(dep_node, *self)\n+        use crate::ty::query::try_load_from_on_disk_cache;\n+        try_load_from_on_disk_cache(*self, dep_node)\n     }\n \n     fn load_diagnostics(&self, prev_dep_node_index: SerializedDepNodeIndex) -> Vec<Diagnostic> {"}, {"sha": "a59824f684d89e0bcadd2635114de4712204b7e5", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0f7b897bad6e5ff4a011cccc0326bdc886e9e73/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f7b897bad6e5ff4a011cccc0326bdc886e9e73/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=e0f7b897bad6e5ff4a011cccc0326bdc886e9e73", "patch": "@@ -191,3 +191,9 @@ pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool\n \n     false\n }\n+\n+pub(crate) fn try_load_from_on_disk_cache<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) {\n+    use crate::dep_graph::DepKind;\n+\n+    rustc_dep_node_try_load_from_on_disk_cache!(dep_node, tcx)\n+}"}, {"sha": "7352551559cf4835c4eb32288b51d4e114ac5e8f", "filename": "src/librustc_query_system/dep_graph/graph.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e0f7b897bad6e5ff4a011cccc0326bdc886e9e73/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f7b897bad6e5ff4a011cccc0326bdc886e9e73/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs?ref=e0f7b897bad6e5ff4a011cccc0326bdc886e9e73", "patch": "@@ -13,8 +13,8 @@ use smallvec::{smallvec, SmallVec};\n use std::collections::hash_map::Entry;\n use std::env;\n use std::hash::Hash;\n+use std::marker::PhantomData;\n use std::mem;\n-use std::panic as bug;\n use std::sync::atomic::Ordering::Relaxed;\n \n use super::debug::EdgeFilter;\n@@ -215,7 +215,7 @@ impl<K: DepKind> DepGraph<K> {\n                     node: Some(_key),\n                     reads: SmallVec::new(),\n                     read_set: Default::default(),\n-                    phantom_data: std::marker::PhantomData,\n+                    phantom_data: PhantomData,\n                 })\n             },\n             |data, key, fingerprint, task| data.complete_task(key, task.unwrap(), fingerprint),\n@@ -367,7 +367,7 @@ impl<K: DepKind> DepGraph<K> {\n                 std::mem::drop(map);\n                 data.read_index(dep_node_index);\n             } else {\n-                bug!(\"DepKind {:?} should be pre-allocated but isn't.\", v.kind)\n+                panic!(\"DepKind {:?} should be pre-allocated but isn't.\", v.kind)\n             }\n         }\n     }\n@@ -645,7 +645,7 @@ impl<K: DepKind> DepGraph<K> {\n                             dependency {:?}\",\n                         dep_node, dep_dep_node\n                     );\n-                    if tcx.try_force_previous_green(dep_dep_node) {\n+                    if tcx.try_force_from_dep_node(dep_dep_node) {\n                         let dep_dep_node_color = data.colors.get(dep_dep_node_index);\n \n                         match dep_dep_node_color {\n@@ -667,7 +667,7 @@ impl<K: DepKind> DepGraph<K> {\n                             }\n                             None => {\n                                 if !tcx.has_errors_or_delayed_span_bugs() {\n-                                    bug!(\n+                                    panic!(\n                                         \"try_mark_previous_green() - Forcing the DepNode \\\n                                           should have set its color\"\n                                     )\n@@ -948,7 +948,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n             match env::var(\"RUST_FORBID_DEP_GRAPH_EDGE\") {\n                 Ok(s) => match EdgeFilter::new(&s) {\n                     Ok(f) => Some(f),\n-                    Err(err) => bug!(\"RUST_FORBID_DEP_GRAPH_EDGE invalid: {}\", err),\n+                    Err(err) => panic!(\"RUST_FORBID_DEP_GRAPH_EDGE invalid: {}\", err),\n                 },\n                 Err(_) => None,\n             }\n@@ -1074,7 +1074,7 @@ impl<K: DepKind> DepGraphData<K> {\n                             if let Some(ref forbidden_edge) = self.current.forbidden_edge {\n                                 let source = data[source].node;\n                                 if forbidden_edge.test(&source, &target) {\n-                                    bug!(\"forbidden edge {:?} -> {:?} created\", source, target)\n+                                    panic!(\"forbidden edge {:?} -> {:?} created\", source, target)\n                                 }\n                             }\n                         }\n@@ -1096,7 +1096,7 @@ pub struct TaskDeps<K> {\n     node: Option<DepNode<K>>,\n     reads: EdgesVec,\n     read_set: FxHashSet<DepNodeIndex>,\n-    phantom_data: std::marker::PhantomData<DepNode<K>>,\n+    phantom_data: PhantomData<DepNode<K>>,\n }\n \n impl<K> Default for TaskDeps<K> {\n@@ -1106,7 +1106,7 @@ impl<K> Default for TaskDeps<K> {\n             node: None,\n             reads: EdgesVec::new(),\n             read_set: FxHashSet::default(),\n-            phantom_data: std::marker::PhantomData,\n+            phantom_data: PhantomData,\n         }\n     }\n }"}, {"sha": "825b341cd146d51889bcc71bb1ffd7727204d5c0", "filename": "src/librustc_query_system/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0f7b897bad6e5ff4a011cccc0326bdc886e9e73/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0f7b897bad6e5ff4a011cccc0326bdc886e9e73/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fmod.rs?ref=e0f7b897bad6e5ff4a011cccc0326bdc886e9e73", "patch": "@@ -31,7 +31,7 @@ pub trait DepContext: Copy {\n     fn create_stable_hashing_context(&self) -> Self::StableHashingContext;\n \n     /// Try to force a dep node to execute and see if it's green.\n-    fn try_force_previous_green(&self, node: &DepNode<Self::DepKind>) -> bool;\n+    fn try_force_from_dep_node(&self, dep_node: &DepNode<Self::DepKind>) -> bool;\n \n     /// Return whether the current session is tainted by errors.\n     fn has_errors_or_delayed_span_bugs(&self) -> bool;"}]}