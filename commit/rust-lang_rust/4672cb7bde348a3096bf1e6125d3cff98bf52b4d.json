{"sha": "4672cb7bde348a3096bf1e6125d3cff98bf52b4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NzJjYjdiZGUzNDhhMzA5NmJmMWU2MTI1ZDNjZmY5OGJmNTJiNGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-27T06:43:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-27T06:45:22Z"}, "message": "make force_allocation handle packed ByValPair", "tree": {"sha": "09714eb63933ba0d82be5ac86d9dccd181a9ddb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09714eb63933ba0d82be5ac86d9dccd181a9ddb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4672cb7bde348a3096bf1e6125d3cff98bf52b4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4672cb7bde348a3096bf1e6125d3cff98bf52b4d", "html_url": "https://github.com/rust-lang/rust/commit/4672cb7bde348a3096bf1e6125d3cff98bf52b4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4672cb7bde348a3096bf1e6125d3cff98bf52b4d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f906c5458c43d0666dd9af37f44cd46a190f0506", "url": "https://api.github.com/repos/rust-lang/rust/commits/f906c5458c43d0666dd9af37f44cd46a190f0506", "html_url": "https://github.com/rust-lang/rust/commit/f906c5458c43d0666dd9af37f44cd46a190f0506"}], "stats": {"total": 115, "additions": 73, "deletions": 42}, "files": [{"sha": "5913ff168fc7343fdd662c3f6f5d0d9b9d1057c0", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4672cb7bde348a3096bf1e6125d3cff98bf52b4d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4672cb7bde348a3096bf1e6125d3cff98bf52b4d/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=4672cb7bde348a3096bf1e6125d3cff98bf52b4d", "patch": "@@ -609,7 +609,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                     let operand_ty = self.operand_ty(operand);\n                                     assert_eq!(self.type_size(operand_ty)?, Some(0));\n                                 }\n-                                let (offset, ty) = self.nonnull_offset_and_ty(dest_ty, nndiscr, discrfield)?;\n+                                let (offset, ty, _packed) = self.nonnull_offset_and_ty(dest_ty, nndiscr, discrfield)?;\n+                                // TODO: The packed flag is ignored\n \n                                 // FIXME(solson)\n                                 let dest = self.force_allocation(dest)?.to_ptr()?;\n@@ -702,7 +703,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     LvalueExtra::DowncastVariant(..) =>\n                         bug!(\"attempted to take a reference to an enum downcast lvalue\"),\n                 };\n-\n                 self.write_value(val, dest, dest_ty)?;\n             }\n \n@@ -826,7 +826,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         ty: Ty<'tcx>,\n         nndiscr: u64,\n         discrfield: &[u32],\n-    ) -> EvalResult<'tcx, (Size, Ty<'tcx>)> {\n+    ) -> EvalResult<'tcx, (Size, Ty<'tcx>, bool)> {\n         // Skip the constant 0 at the start meant for LLVM GEP and the outer non-null variant\n         let path = discrfield.iter().skip(2).map(|&i| i as usize);\n \n@@ -849,16 +849,19 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         mut offset: Size,\n         mut ty: Ty<'tcx>,\n         path: I,\n-    ) -> EvalResult<'tcx, (Size, Ty<'tcx>)> {\n+    ) -> EvalResult<'tcx, (Size, Ty<'tcx>, bool)> {\n         // Skip the initial 0 intended for LLVM GEP.\n+        let mut packed = false;\n         for field_index in path {\n             let field_offset = self.get_field_offset(ty, field_index)?;\n             trace!(\"field_path_offset_and_ty: {}, {}, {:?}, {:?}\", field_index, ty, field_offset, offset);\n-            ty = self.get_field_ty(ty, field_index)?;\n+            let field_ty = self.get_field_ty(ty, field_index)?;\n+            ty = field_ty.0;\n+            packed = packed || field_ty.1;\n             offset = offset.checked_add(field_offset, &self.tcx.data_layout).unwrap();\n         }\n \n-        Ok((offset, ty))\n+        Ok((offset, ty, packed))\n     }\n     fn get_fat_field(&self, pointee_ty: Ty<'tcx>, field_index: usize) -> EvalResult<'tcx, Ty<'tcx>> {\n         match (field_index, &self.tcx.struct_tail(pointee_ty).sty) {\n@@ -870,33 +873,46 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n     }\n \n-    pub fn get_field_ty(&self, ty: Ty<'tcx>, field_index: usize) -> EvalResult<'tcx, Ty<'tcx>> {\n+    /// Returns the field type and whether the field is packed\n+    pub fn get_field_ty(&self, ty: Ty<'tcx>, field_index: usize) -> EvalResult<'tcx, (Ty<'tcx>, bool)> {\n         match ty.sty {\n-            ty::TyAdt(adt_def, _) if adt_def.is_box() => self.get_fat_field(ty.boxed_ty(), field_index),\n+            ty::TyAdt(adt_def, _) if adt_def.is_box() =>\n+                Ok((self.get_fat_field(ty.boxed_ty(), field_index)?, false)),\n             ty::TyAdt(adt_def, substs) if adt_def.is_enum() => {\n                 use rustc::ty::layout::Layout::*;\n                 match *self.type_layout(ty)? {\n-                    RawNullablePointer { nndiscr, .. } |\n-                    StructWrappedNullablePointer { nndiscr, .. } => Ok(adt_def.variants[nndiscr as usize].fields[field_index].ty(self.tcx, substs)),\n+                    RawNullablePointer { nndiscr, .. } =>\n+                        Ok((adt_def.variants[nndiscr as usize].fields[field_index].ty(self.tcx, substs), false)),\n+                    StructWrappedNullablePointer { nndiscr, ref nonnull, .. } => {\n+                        let ty = adt_def.variants[nndiscr as usize].fields[field_index].ty(self.tcx, substs);\n+                        Ok((ty, nonnull.packed))\n+                    },\n                     _ => Err(EvalError::Unimplemented(format!(\"get_field_ty can't handle enum type: {:?}, {:?}\", ty, ty.sty))),\n                 }\n             }\n             ty::TyAdt(adt_def, substs) => {\n-                Ok(adt_def.struct_variant().fields[field_index].ty(self.tcx, substs))\n+                let variant_def = adt_def.struct_variant();\n+                use rustc::ty::layout::Layout::*;\n+                match *self.type_layout(ty)? {\n+                    Univariant { ref variant, .. } =>\n+                        Ok((variant_def.fields[field_index].ty(self.tcx, substs), variant.packed)),\n+                    _ => Err(EvalError::Unimplemented(format!(\"get_field_ty can't handle struct type: {:?}, {:?}\", ty, ty.sty))),\n+                }\n             }\n \n-            ty::TyTuple(fields, _) => Ok(fields[field_index]),\n+            ty::TyTuple(fields, _) => Ok((fields[field_index], false)),\n \n             ty::TyRef(_, ref tam) |\n-            ty::TyRawPtr(ref tam) => self.get_fat_field(tam.ty, field_index),\n+            ty::TyRawPtr(ref tam) => Ok((self.get_fat_field(tam.ty, field_index)?, false)),\n \n-            ty::TyArray(ref inner, _) => Ok(inner),\n+            ty::TyArray(ref inner, _) => Ok((inner, false)),\n \n             _ => Err(EvalError::Unimplemented(format!(\"can't handle type: {:?}, {:?}\", ty, ty.sty))),\n         }\n     }\n \n     fn get_field_offset(&self, ty: Ty<'tcx>, field_index: usize) -> EvalResult<'tcx, Size> {\n+        // Also see lvalue_field in lvalue.rs, which handles more cases but needs an actual value at the given type\n         let layout = self.type_layout(ty)?;\n \n         use rustc::ty::layout::Layout::*;\n@@ -1236,20 +1252,28 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         ptr: MemoryPointer,\n         mut ty: Ty<'tcx>\n     ) -> EvalResult<'tcx> {\n+        let mut packed = false;\n         while self.get_field_count(ty)? == 1 {\n-            ty = self.get_field_ty(ty, 0)?;\n+            let field = self.get_field_ty(ty, 0)?;\n+            ty = field.0;\n+            packed = packed || field.1;\n         }\n         assert_eq!(self.get_field_count(ty)?, 2);\n-        let field_0 = self.get_field_offset(ty, 0)?.bytes();\n-        let field_1 = self.get_field_offset(ty, 1)?.bytes();\n+        let field_0 = self.get_field_offset(ty, 0)?;\n+        let field_1 = self.get_field_offset(ty, 1)?;\n         let field_0_ty = self.get_field_ty(ty, 0)?;\n         let field_1_ty = self.get_field_ty(ty, 1)?;\n-        let field_0_size = self.type_size(field_0_ty)?.expect(\"pair element type must be sized\");\n-        let field_1_size = self.type_size(field_1_ty)?.expect(\"pair element type must be sized\");\n-        let field_0_ptr = ptr.offset(field_0, &self)?.into();\n-        let field_1_ptr = ptr.offset(field_1, &self)?.into();\n-        self.memory.write_primval(field_0_ptr, a, field_0_size)?;\n-        self.memory.write_primval(field_1_ptr, b, field_1_size)?;\n+        // The .1 components say whether the field is packed\n+        assert_eq!(field_0_ty.1, field_1_ty.1, \"the two fields must agree on being packed\");\n+        packed = packed || field_0_ty.1;\n+        let field_0_size = self.type_size(field_0_ty.0)?.expect(\"pair element type must be sized\");\n+        let field_1_size = self.type_size(field_1_ty.0)?.expect(\"pair element type must be sized\");\n+        let field_0_ptr = ptr.offset(field_0.bytes(), &self)?.into();\n+        let field_1_ptr = ptr.offset(field_1.bytes(), &self)?.into();\n+        self.write_maybe_aligned(!packed,\n+            |ectx| ectx.memory.write_primval(field_0_ptr, a, field_0_size))?;\n+        self.write_maybe_aligned(!packed,\n+            |ectx| ectx.memory.write_primval(field_1_ptr, b, field_1_size))?;\n         Ok(())\n     }\n \n@@ -1529,8 +1553,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     return self.unsize_into_ptr(src, src_ty, dest, dest_ty, src_ty.boxed_ty(), dest_ty.boxed_ty());\n                 }\n                 if self.ty_to_primval_kind(src_ty).is_ok() {\n-                    let sty = self.get_field_ty(src_ty, 0)?;\n-                    let dty = self.get_field_ty(dest_ty, 0)?;\n+                    // TODO: We ignore the packed flag here\n+                    let sty = self.get_field_ty(src_ty, 0)?.0;\n+                    let dty = self.get_field_ty(dest_ty, 0)?.0;\n                     return self.unsize_into(src, sty, dest, dty);\n                 }\n                 // unsizing of generic struct with pointer fields"}, {"sha": "da357a6d1e714ffbcb16a7cdfb92ff610c9a7a86", "filename": "src/librustc_mir/interpret/lvalue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4672cb7bde348a3096bf1e6125d3cff98bf52b4d/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4672cb7bde348a3096bf1e6125d3cff98bf52b4d/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs?ref=4672cb7bde348a3096bf1e6125d3cff98bf52b4d", "patch": "@@ -295,6 +295,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             _ => bug!(\"field access on non-product type: {:?}\", base_layout),\n         };\n+        //trace!(\"Field {} of {:?} is at offset {}{}\", field_index, base_ty, offset.bytes(),\n+        //    if packed { \" (packed)\" } else { \"\" });\n \n         // Do not allocate in trivial cases\n         let (base_ptr, base_extra, aligned) = match base {"}, {"sha": "591f5dc7fe80afea7c1728426e8aa1a925f06a68", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4672cb7bde348a3096bf1e6125d3cff98bf52b4d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4672cb7bde348a3096bf1e6125d3cff98bf52b4d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=4672cb7bde348a3096bf1e6125d3cff98bf52b4d", "patch": "@@ -1402,20 +1402,20 @@ pub(crate) trait HasMemory<'a, 'tcx> {\n     fn read_maybe_aligned<F, T>(&mut self, aligned: bool, f: F) -> EvalResult<'tcx, T>\n         where F: FnOnce(&mut Self) -> EvalResult<'tcx, T>\n     {\n-        assert!(self.memory_mut().reads_are_aligned, \"Unaligned reads must not be nested\");\n-        self.memory_mut().reads_are_aligned = aligned;\n+        let old = self.memory_mut().reads_are_aligned;\n+        self.memory_mut().reads_are_aligned = old && aligned;\n         let t = f(self);\n-        self.memory_mut().reads_are_aligned = true;\n+        self.memory_mut().reads_are_aligned = old;\n         t\n     }\n \n     fn write_maybe_aligned<F, T>(&mut self, aligned: bool, f: F) -> EvalResult<'tcx, T>\n         where F: FnOnce(&mut Self) -> EvalResult<'tcx, T>\n     {\n-        assert!(self.memory_mut().writes_are_aligned, \"Unaligned writes must not be nested\");\n-        self.memory_mut().writes_are_aligned = aligned;\n+        let old = self.memory_mut().writes_are_aligned;\n+        self.memory_mut().writes_are_aligned = old && aligned;\n         let t = f(self);\n-        self.memory_mut().writes_are_aligned = true;\n+        self.memory_mut().writes_are_aligned = old;\n         t\n     }\n }"}, {"sha": "075fab36f64fbabcde1f6e05750884908d2e0447", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4672cb7bde348a3096bf1e6125d3cff98bf52b4d/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4672cb7bde348a3096bf1e6125d3cff98bf52b4d/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=4672cb7bde348a3096bf1e6125d3cff98bf52b4d", "patch": "@@ -11,12 +11,14 @@ use rustc::ty;\n use rustc::ty::layout::Layout;\n use rustc::ty::subst::Substs;\n \n+use syntax::codemap::Span;\n+use syntax::ast::Mutability;\n+\n use error::{EvalResult, EvalError};\n use eval_context::{EvalContext, StackPopCleanup};\n use lvalue::{Global, GlobalId, Lvalue};\n use value::{Value, PrimVal};\n-use syntax::codemap::Span;\n-use syntax::ast::Mutability;\n+use memory::HasMemory;\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub fn inc_step_counter_and_check_limit(&mut self, n: u64) -> EvalResult<'tcx> {\n@@ -101,12 +103,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                     Layout::StructWrappedNullablePointer { nndiscr, ref discrfield, .. } => {\n                         if variant_index as u64 != nndiscr {\n-                            let (offset, ty) = self.nonnull_offset_and_ty(dest_ty, nndiscr, discrfield)?;\n+                            let (offset, ty, packed) = self.nonnull_offset_and_ty(dest_ty, nndiscr, discrfield)?;\n                             let nonnull = self.force_allocation(dest)?.to_ptr()?.offset(offset.bytes(), &self)?;\n                             trace!(\"struct wrapped nullable pointer type: {}\", ty);\n                             // only the pointer part of a fat pointer is used for this space optimization\n                             let discr_size = self.type_size(ty)?.expect(\"bad StructWrappedNullablePointer discrfield\");\n-                            self.memory.write_uint(nonnull, 0, discr_size)?;\n+                            self.write_maybe_aligned(!packed, |ectx| ectx.memory.write_uint(nonnull, 0, discr_size))?;\n                         }\n                     },\n "}, {"sha": "e5b6d3713812c276706d655f38ea089346cd8c33", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4672cb7bde348a3096bf1e6125d3cff98bf52b4d/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4672cb7bde348a3096bf1e6125d3cff98bf52b4d/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=4672cb7bde348a3096bf1e6125d3cff98bf52b4d", "patch": "@@ -9,7 +9,7 @@ use syntax::abi::Abi;\n use error::{EvalError, EvalResult};\n use eval_context::{EvalContext, IntegerExt, StackPopCleanup, is_inhabited, self};\n use lvalue::Lvalue;\n-use memory::{MemoryPointer, TlsKey, Kind};\n+use memory::{MemoryPointer, TlsKey, Kind, HasMemory};\n use value::{PrimVal, Value};\n use rustc_data_structures::indexed_vec::Idx;\n use const_eval;\n@@ -402,7 +402,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let instance = self.memory.get_fn(fn_ptr.to_ptr()?)?;\n                 let mut arg_operands = arg_operands.to_vec();\n                 let ty = self.operand_ty(&arg_operands[0]);\n-                let ty = self.get_field_ty(ty, 0)?;\n+                let ty = self.get_field_ty(ty, 0)?.0; // TODO: packed flag is ignored\n                 match arg_operands[0] {\n                     mir::Operand::Consume(ref mut lval) => *lval = lval.clone().field(mir::Field::new(0), ty),\n                     _ => bug!(\"virtual call first arg cannot be a constant\"),\n@@ -464,7 +464,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(false)\n     }\n \n-    pub fn read_discriminant_value(&self, adt_ptr: MemoryPointer, adt_ty: Ty<'tcx>) -> EvalResult<'tcx, u128> {\n+    pub fn read_discriminant_value(&mut self, adt_ptr: MemoryPointer, adt_ty: Ty<'tcx>) -> EvalResult<'tcx, u128> {\n         use rustc::ty::layout::Layout::*;\n         let adt_layout = self.type_layout(adt_ty)?;\n         //trace!(\"read_discriminant_value {:#?}\", adt_layout);\n@@ -487,12 +487,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             StructWrappedNullablePointer { nndiscr, ref discrfield, .. } => {\n-                let (offset, ty) = self.nonnull_offset_and_ty(adt_ty, nndiscr, discrfield)?;\n-                let nonnull = adt_ptr.offset(offset.bytes(), self)?;\n+                let (offset, ty, packed) = self.nonnull_offset_and_ty(adt_ty, nndiscr, discrfield)?;\n+                let nonnull = adt_ptr.offset(offset.bytes(), &*self)?;\n                 trace!(\"struct wrapped nullable pointer type: {}\", ty);\n                 // only the pointer part of a fat pointer is used for this space optimization\n                 let discr_size = self.type_size(ty)?.expect(\"bad StructWrappedNullablePointer discrfield\");\n-                self.read_nonnull_discriminant_value(nonnull, nndiscr as u128, discr_size)?\n+                self.read_maybe_aligned(!packed,\n+                    |ectx| ectx.read_nonnull_discriminant_value(nonnull, nndiscr as u128, discr_size))?\n             }\n \n             // The discriminant_value intrinsic returns 0 for non-sum types."}, {"sha": "0c478119828209780e0e6d4df1f086ef6fef5a60", "filename": "tests/run-pass/packed_struct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4672cb7bde348a3096bf1e6125d3cff98bf52b4d/tests%2Frun-pass%2Fpacked_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4672cb7bde348a3096bf1e6125d3cff98bf52b4d/tests%2Frun-pass%2Fpacked_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpacked_struct.rs?ref=4672cb7bde348a3096bf1e6125d3cff98bf52b4d", "patch": "@@ -40,7 +40,8 @@ fn test_unsizing() {\n \n     let arr = [1, 2, 3];\n     let arr_unaligned: UnalignedPtr<[i32; 3]> = UnalignedPtr { data: &arr };\n-    let _uns: UnalignedPtr<[i32]> = arr_unaligned;\n+    let arr_unaligned: UnalignedPtr<[i32]> = arr_unaligned;\n+    let _unused = &arr_unaligned; // forcing an allocation, which could also yield \"unaligned write\"-errors\n }\n \n fn main() {"}]}