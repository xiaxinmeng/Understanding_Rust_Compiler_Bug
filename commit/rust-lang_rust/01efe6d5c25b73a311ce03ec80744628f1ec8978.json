{"sha": "01efe6d5c25b73a311ce03ec80744628f1ec8978", "node_id": "C_kwDOAAsO6NoAKDAxZWZlNmQ1YzI1YjczYTMxMWNlMDNlYzgwNzQ0NjI4ZjFlYzg5Nzg", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-02-19T00:14:51Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-02-24T21:02:07Z"}, "message": "Address review comments", "tree": {"sha": "e130e515cdcc7ae8926791c26c9519e985cb3b72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e130e515cdcc7ae8926791c26c9519e985cb3b72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01efe6d5c25b73a311ce03ec80744628f1ec8978", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmIX8k8ACgkQtAh+UQ6Y\nsWTjqRAAnn03ASeKtBzpEosIDTIMIQmV6qJYvqTWRuj99sCQoAbUXA4uFrFutUGP\nt/u1CvSfMBQQWa+wUKvvEetZpyWnxzGveBLiUI9XxZxlvwdoT2xgmmyIScsAxQB+\nRFqPK+irywmKQIU2FxRIXr0u97F1O7yYqQCpmZAjHviWvhAAWo076GMnnnCDs0Bt\nEwYaZMRumbQL5B9X54rvHS/fyLh2Wmr+vphjvz02hy5WuWpe4oao0JhcNjXmy7Y7\n6sFQF4raT8ZWHFSpEgDEO3JN/4wXUgYzfy65/T11HZA0w6gO8P1AmGaQvf5msM1B\nBbus+c9wVRzhfe2x3VGRdMsX7GLJwacWCDiI2Gbv2vMOH33gXe5c4hBkgxCx/Nz/\nPOsAMWml2cGWPRYrhi/hsmAap2IrcQU45vdruiF5s3EPHJG+VRRdsloZ9zeKeSUc\neX7k1X+rb3Dj5wQ79Bkio8AeyAD7f28vRtVb/B4nDfeQ/u/s1ith9MeXEyyG5/pp\n74soZDKjc1Ue7GB8p8fTecTzQ78F7MpHnYFXYCTbQcUimV09wlPZXmERkm0cDZxk\ncgSGUq5RFjggeb3Bl26DoLnN9M5nqgmH81my2yHFqjv6x325TgTLortXjhFKaHnE\nhdXcRcmQ6n1clC856ioh9uTxkfR5A4Mt8dQ2HPBy3mP0QkpuO6g=\n=PpyS\n-----END PGP SIGNATURE-----", "payload": "tree e130e515cdcc7ae8926791c26c9519e985cb3b72\nparent e686aee48eed69c0dc4f6ed1bd31e0df352a7008\nauthor Aaron Hill <aa1ronham@gmail.com> 1645229691 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1645736527 -0500\n\nAddress review comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01efe6d5c25b73a311ce03ec80744628f1ec8978", "html_url": "https://github.com/rust-lang/rust/commit/01efe6d5c25b73a311ce03ec80744628f1ec8978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01efe6d5c25b73a311ce03ec80744628f1ec8978/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e686aee48eed69c0dc4f6ed1bd31e0df352a7008", "url": "https://api.github.com/repos/rust-lang/rust/commits/e686aee48eed69c0dc4f6ed1bd31e0df352a7008", "html_url": "https://github.com/rust-lang/rust/commit/e686aee48eed69c0dc4f6ed1bd31e0df352a7008"}], "stats": {"total": 34, "additions": 10, "deletions": 24}, "files": [{"sha": "f284e5cdd5c1e1be7e773f4adbd288e5a3c5428b", "filename": "compiler/rustc_macros/src/newtype.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/01efe6d5c25b73a311ce03ec80744628f1ec8978/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01efe6d5c25b73a311ce03ec80744628f1ec8978/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs?ref=01efe6d5c25b73a311ce03ec80744628f1ec8978", "patch": "@@ -37,7 +37,7 @@ impl Parse for Newtype {\n         braced!(body in input);\n \n         // Any additional `#[derive]` macro paths to apply\n-        let mut derive_paths: Option<Vec<Path>> = None;\n+        let mut derive_paths: Vec<Path> = Vec::new();\n         let mut debug_format: Option<DebugFormat> = None;\n         let mut max = None;\n         let mut consts = Vec::new();\n@@ -62,28 +62,23 @@ impl Parse for Newtype {\n                     let derives: Punctuated<Path, Token![,]> =\n                         derives.parse_terminated(Path::parse)?;\n                     try_comma()?;\n-                    if let Some(old) = derive_paths.replace(derives.into_iter().collect()) {\n-                        panic!(\"Specified multiple derives: {:?}\", old);\n-                    }\n+                    derive_paths.extend(derives);\n                     continue;\n                 }\n                 if body.lookahead1().peek(kw::DEBUG_FORMAT) {\n                     body.parse::<kw::DEBUG_FORMAT>()?;\n                     body.parse::<Token![=]>()?;\n-                    if body.lookahead1().peek(kw::custom) {\n+                    let new_debug_format = if body.lookahead1().peek(kw::custom) {\n                         body.parse::<kw::custom>()?;\n-                        if let Some(old) = debug_format.replace(DebugFormat::Custom) {\n-                            panic!(\"Specified multiple debug format options: {:?}\", old);\n-                        }\n+                        DebugFormat::Custom\n                     } else {\n                         let format_str: LitStr = body.parse()?;\n-                        if let Some(old) =\n-                            debug_format.replace(DebugFormat::Format(format_str.value()))\n-                        {\n-                            panic!(\"Specified multiple debug format options: {:?}\", old);\n-                        }\n-                    }\n+                        DebugFormat::Format(format_str.value())\n+                    };\n                     try_comma()?;\n+                    if let Some(old) = debug_format.replace(new_debug_format) {\n+                        panic!(\"Specified multiple debug format options: {:?}\", old);\n+                    }\n                     continue;\n                 }\n                 if body.lookahead1().peek(kw::MAX) {\n@@ -121,7 +116,6 @@ impl Parse for Newtype {\n             }\n         }\n \n-        let derive_paths = derive_paths.unwrap_or_else(Vec::new);\n         let debug_format = debug_format.unwrap_or(DebugFormat::Format(\"{}\".to_string()));\n         // shave off 256 indices at the end to allow space for packing these indices into enums\n         let max = max.unwrap_or_else(|| Lit::Int(LitInt::new(\"0xFFFF_FF00\", Span::call_site())));\n@@ -158,21 +152,14 @@ impl Parse for Newtype {\n \n         Ok(Self(quote! {\n             #(#attrs)*\n-            #[derive(Copy, PartialEq, Eq, Hash, PartialOrd, Ord, #(#derive_paths),*)]\n+            #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, #(#derive_paths),*)]\n             #[rustc_layout_scalar_valid_range_end(#max)]\n             #vis struct #name {\n                 private: u32,\n             }\n \n             #(#consts)*\n \n-            impl Clone for #name {\n-                #[inline]\n-                fn clone(&self) -> Self {\n-                    *self\n-                }\n-            }\n-\n             impl #name {\n                 /// Maximum value the index can take, as a `u32`.\n                 #vis const MAX_AS_U32: u32  = #max;\n@@ -313,7 +300,6 @@ impl Parse for Newtype {\n \n             #encodable_impls\n             #debug_impl\n-\n         }))\n     }\n }"}]}