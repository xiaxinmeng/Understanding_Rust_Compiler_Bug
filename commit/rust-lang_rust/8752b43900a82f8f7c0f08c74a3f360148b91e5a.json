{"sha": "8752b43900a82f8f7c0f08c74a3f360148b91e5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NTJiNDM5MDBhODJmOGY3YzBmMDhjNzRhM2YzNjAxNDhiOTFlNWE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-10T18:19:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-10T18:19:14Z"}, "message": "Rollup merge of #77754 - bugadani:find_map_relevant_impl, r=matthewjasper\n\nAdd TraitDef::find_map_relevant_impl\n\nThis PR adds a method to `TraitDef`. While `for_each_relevant_impl` covers the general use case, sometimes it's not necessary to scan through all the relevant implementations, so this PR introduces a new method, `find_map_relevant_impl`. I've also replaced the `for_each_relevant_impl` calls where possible.\n\nI'm hoping for a tiny bit of efficiency gain here and there.", "tree": {"sha": "980085f80e636accd9fe25b246f04d19c55c15b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/980085f80e636accd9fe25b246f04d19c55c15b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8752b43900a82f8f7c0f08c74a3f360148b91e5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfgfsjCRBK7hj4Ov3rIwAAdHIIAFCldpbaRWpyPzbYrXOJuUiP\ntc5wcgKfNq+KyfmXi4Cc51f8mcgU/0o9m/dftcf8FEB1V3AyhsAQHVPCXGtRCQ26\naBbKmY9T0uGxx8dVE33m5ScXJvxzBILlDsWKbQyn6kNsBTbOnhdKfm4wcBLvTwYP\nvoqAXc0q5a9Nm37ZxvGB1Qm7cYehLt6v4qQGK2tLQ2hqsDssqwOFG7PDYPG1SBnV\nuzkCOQrB1jN0WgpORbaaojAN5sV/g5L2Ki31nQBJQOegWcVO8M+LUj631DvvpXJT\ngT2tFL4pYruyxH+3xeHbdC6FUXX+zhmlw3nSTVSXw+4NxEFrSiMwsz3K0s/XoCQ=\n=IRFv\n-----END PGP SIGNATURE-----\n", "payload": "tree 980085f80e636accd9fe25b246f04d19c55c15b4\nparent 83685880b6de32e9781bea09d3d54decd195a9dd\nparent 217d6f9741819aedfe22e6d3ec9cca6e4a49f77d\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1602353954 +0900\ncommitter GitHub <noreply@github.com> 1602353954 +0900\n\nRollup merge of #77754 - bugadani:find_map_relevant_impl, r=matthewjasper\n\nAdd TraitDef::find_map_relevant_impl\n\nThis PR adds a method to `TraitDef`. While `for_each_relevant_impl` covers the general use case, sometimes it's not necessary to scan through all the relevant implementations, so this PR introduces a new method, `find_map_relevant_impl`. I've also replaced the `for_each_relevant_impl` calls where possible.\n\nI'm hoping for a tiny bit of efficiency gain here and there.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8752b43900a82f8f7c0f08c74a3f360148b91e5a", "html_url": "https://github.com/rust-lang/rust/commit/8752b43900a82f8f7c0f08c74a3f360148b91e5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8752b43900a82f8f7c0f08c74a3f360148b91e5a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83685880b6de32e9781bea09d3d54decd195a9dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/83685880b6de32e9781bea09d3d54decd195a9dd", "html_url": "https://github.com/rust-lang/rust/commit/83685880b6de32e9781bea09d3d54decd195a9dd"}, {"sha": "217d6f9741819aedfe22e6d3ec9cca6e4a49f77d", "url": "https://api.github.com/repos/rust-lang/rust/commits/217d6f9741819aedfe22e6d3ec9cca6e4a49f77d", "html_url": "https://github.com/rust-lang/rust/commit/217d6f9741819aedfe22e6d3ec9cca6e4a49f77d"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "86476dffc0312d4690f786b90f169ca8743501f0", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8752b43900a82f8f7c0f08c74a3f360148b91e5a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8752b43900a82f8f7c0f08c74a3f360148b91e5a/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=8752b43900a82f8f7c0f08c74a3f360148b91e5a", "patch": "@@ -123,10 +123,26 @@ impl<'tcx> TyCtxt<'tcx> {\n         self_ty: Ty<'tcx>,\n         mut f: F,\n     ) {\n+        let _: Option<()> = self.find_map_relevant_impl(def_id, self_ty, |did| {\n+            f(did);\n+            None\n+        });\n+    }\n+\n+    /// Applies function to every impl that could possibly match the self type `self_ty` and returns\n+    /// the first non-none value.\n+    pub fn find_map_relevant_impl<T, F: FnMut(DefId) -> Option<T>>(\n+        self,\n+        def_id: DefId,\n+        self_ty: Ty<'tcx>,\n+        mut f: F,\n+    ) -> Option<T> {\n         let impls = self.trait_impls_of(def_id);\n \n         for &impl_def_id in impls.blanket_impls.iter() {\n-            f(impl_def_id);\n+            if let result @ Some(_) = f(impl_def_id) {\n+                return result;\n+            }\n         }\n \n         // simplify_type(.., false) basically replaces type parameters and\n@@ -157,14 +173,20 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(simp) = fast_reject::simplify_type(self, self_ty, true) {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 for &impl_def_id in impls {\n-                    f(impl_def_id);\n+                    if let result @ Some(_) = f(impl_def_id) {\n+                        return result;\n+                    }\n                 }\n             }\n         } else {\n             for &impl_def_id in impls.non_blanket_impls.values().flatten() {\n-                f(impl_def_id);\n+                if let result @ Some(_) = f(impl_def_id) {\n+                    return result;\n+                }\n             }\n         }\n+\n+        None\n     }\n \n     /// Returns an iterator containing all impls"}, {"sha": "d8ea2f67393b25dfe2436e458cb5971fc7a4076c", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8752b43900a82f8f7c0f08c74a3f360148b91e5a/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8752b43900a82f8f7c0f08c74a3f360148b91e5a/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=8752b43900a82f8f7c0f08c74a3f360148b91e5a", "patch": "@@ -346,14 +346,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         let drop_trait = self.lang_items().drop_trait()?;\n         self.ensure().coherent_trait(drop_trait);\n \n-        let mut dtor_did = None;\n         let ty = self.type_of(adt_did);\n-        self.for_each_relevant_impl(drop_trait, ty, |impl_did| {\n+        let dtor_did = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {\n             if let Some(item) = self.associated_items(impl_did).in_definition_order().next() {\n                 if validate(self, impl_did).is_ok() {\n-                    dtor_did = Some(item.def_id);\n+                    return Some(item.def_id);\n                 }\n             }\n+            None\n         });\n \n         Some(ty::Destructor { did: dtor_did? })"}, {"sha": "26993a6b941fbb26a455da0544f04a34a4876461", "filename": "compiler/rustc_mir/src/transform/check_const_item_mutation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8752b43900a82f8f7c0f08c74a3f360148b91e5a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8752b43900a82f8f7c0f08c74a3f360148b91e5a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs?ref=8752b43900a82f8f7c0f08c74a3f360148b91e5a", "patch": "@@ -34,7 +34,6 @@ impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n \n     fn is_const_item_without_destructor(&self, local: Local) -> Option<DefId> {\n         let def_id = self.is_const_item(local)?;\n-        let mut any_dtor = |_tcx, _def_id| Ok(());\n \n         // We avoid linting mutation of a const item if the const's type has a\n         // Drop impl. The Drop logic observes the mutation which was performed.\n@@ -54,7 +53,7 @@ impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n         //\n         //     #[const_mutation_allowed]\n         //     pub const LOG: Log = Log { msg: \"\" };\n-        match self.tcx.calculate_dtor(def_id, &mut any_dtor) {\n+        match self.tcx.calculate_dtor(def_id, &mut |_, _| Ok(())) {\n             Some(_) => None,\n             None => Some(def_id),\n         }"}, {"sha": "05e3ed343511338af7fc5ef3b06ef4912a6379b3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8752b43900a82f8f7c0f08c74a3f360148b91e5a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8752b43900a82f8f7c0f08c74a3f360148b91e5a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=8752b43900a82f8f7c0f08c74a3f360148b91e5a", "patch": "@@ -1384,17 +1384,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_ref: &ty::PolyTraitRef<'tcx>,\n     ) {\n         let get_trait_impl = |trait_def_id| {\n-            let mut trait_impl = None;\n-            self.tcx.for_each_relevant_impl(\n+            self.tcx.find_map_relevant_impl(\n                 trait_def_id,\n                 trait_ref.skip_binder().self_ty(),\n-                |impl_def_id| {\n-                    if trait_impl.is_none() {\n-                        trait_impl = Some(impl_def_id);\n-                    }\n-                },\n-            );\n-            trait_impl\n+                |impl_def_id| Some(impl_def_id),\n+            )\n         };\n         let required_trait_path = self.tcx.def_path_str(trait_ref.def_id());\n         let all_traits = self.tcx.all_traits(LOCAL_CRATE);"}, {"sha": "34eac31890cbe00880af850648ed091327b72bda", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8752b43900a82f8f7c0f08c74a3f360148b91e5a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8752b43900a82f8f7c0f08c74a3f360148b91e5a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=8752b43900a82f8f7c0f08c74a3f360148b91e5a", "patch": "@@ -650,14 +650,9 @@ fn traits_implemented_by(cx: &DocContext<'_>, type_: DefId, module: DefId) -> Fx\n     let ty = cx.tcx.type_of(type_);\n     let iter = in_scope_traits.iter().flat_map(|&trait_| {\n         trace!(\"considering explicit impl for trait {:?}\", trait_);\n-        let mut saw_impl = false;\n-        // Look at each trait implementation to see if it's an impl for `did`\n-        cx.tcx.for_each_relevant_impl(trait_, ty, |impl_| {\n-            // FIXME: this is inefficient, find a way to short-circuit for_each_* so this doesn't take as long\n-            if saw_impl {\n-                return;\n-            }\n \n+        // Look at each trait implementation to see if it's an impl for `did`\n+        cx.tcx.find_map_relevant_impl(trait_, ty, |impl_| {\n             let trait_ref = cx.tcx.impl_trait_ref(impl_).expect(\"this is not an inherent impl\");\n             // Check if these are the same type.\n             let impl_type = trait_ref.self_ty();\n@@ -668,7 +663,7 @@ fn traits_implemented_by(cx: &DocContext<'_>, type_: DefId, module: DefId) -> Fx\n                 type_\n             );\n             // Fast path: if this is a primitive simple `==` will work\n-            saw_impl = impl_type == ty\n+            let saw_impl = impl_type == ty\n                 || match impl_type.kind() {\n                     // Check if these are the same def_id\n                     ty::Adt(def, _) => {\n@@ -678,8 +673,9 @@ fn traits_implemented_by(cx: &DocContext<'_>, type_: DefId, module: DefId) -> Fx\n                     ty::Foreign(def_id) => *def_id == type_,\n                     _ => false,\n                 };\n-        });\n-        if saw_impl { Some(trait_) } else { None }\n+\n+            if saw_impl { Some(trait_) } else { None }\n+        })\n     });\n     iter.collect()\n }"}]}