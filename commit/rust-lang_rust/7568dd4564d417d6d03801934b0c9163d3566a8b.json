{"sha": "7568dd4564d417d6d03801934b0c9163d3566a8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NjhkZDQ1NjRkNDE3ZDZkMDM4MDE5MzRiMGM5MTYzZDM1NjZhOGI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-12T21:51:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-12T23:00:22Z"}, "message": "Promote 'const', 'copy', 'fn' to strict keywords", "tree": {"sha": "ea7aa0e7960f3839697d130d600804e9653b7eaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea7aa0e7960f3839697d130d600804e9653b7eaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7568dd4564d417d6d03801934b0c9163d3566a8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7568dd4564d417d6d03801934b0c9163d3566a8b", "html_url": "https://github.com/rust-lang/rust/commit/7568dd4564d417d6d03801934b0c9163d3566a8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7568dd4564d417d6d03801934b0c9163d3566a8b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eb10c4ce113f37ddd418b95629480f5d1ad9b6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb10c4ce113f37ddd418b95629480f5d1ad9b6a", "html_url": "https://github.com/rust-lang/rust/commit/7eb10c4ce113f37ddd418b95629480f5d1ad9b6a"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "02c933b6fa37aeec11f6e293bf743d3e4246b7ce", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7568dd4564d417d6d03801934b0c9163d3566a8b/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7568dd4564d417d6d03801934b0c9163d3566a8b/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=7568dd4564d417d6d03801934b0c9163d3566a8b", "patch": "@@ -174,7 +174,7 @@ fn make_test(config: config, testfile: &Path) ->\n    test::TestDesc {\n     {\n         name: make_test_name(config, testfile),\n-        fn: make_test_closure(config, testfile),\n+        testfn: make_test_closure(config, testfile),\n         ignore: header::is_test_ignored(config, testfile),\n         should_fail: false\n     }"}, {"sha": "a2e7be51de81d59a30bb556578ff7d68edd7d032", "filename": "src/libstd/test.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7568dd4564d417d6d03801934b0c9163d3566a8b/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7568dd4564d417d6d03801934b0c9163d3566a8b/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=7568dd4564d417d6d03801934b0c9163d3566a8b", "patch": "@@ -45,7 +45,7 @@ type TestFn = fn~();\n // these.\n type TestDesc = {\n     name: TestName,\n-    fn: TestFn,\n+    testfn: TestFn,\n     ignore: bool,\n     should_fail: bool\n };\n@@ -238,14 +238,14 @@ fn should_sort_failures_before_printing_them() {\n \n     let test_a = {\n         name: ~\"a\",\n-        fn: fn~() { },\n+        testfn: fn~() { },\n         ignore: false,\n         should_fail: false\n     };\n \n     let test_b = {\n         name: ~\"b\",\n-        fn: fn~() { },\n+        testfn: fn~() { },\n         ignore: false,\n         should_fail: false\n     };\n@@ -367,7 +367,7 @@ fn filter_tests(opts: TestOpts,\n         fn filter(test: TestDesc) -> Option<TestDesc> {\n             if test.ignore {\n                 return option::Some({name: test.name,\n-                                  fn: copy test.fn,\n+                                  testfn: copy test.testfn,\n                                   ignore: false,\n                                   should_fail: test.should_fail});\n             } else { return option::None; }\n@@ -396,7 +396,7 @@ fn run_test(+test: TestDesc, monitor_ch: comm::Chan<MonitorMsg>) {\n     }\n \n     do task::spawn |move test| {\n-        let testfn = copy test.fn;\n+        let testfn = copy test.testfn;\n         let mut result_future = None; // task::future_result(builder);\n         task::task().unlinked().future_result(|+r| {\n             result_future = Some(move r);\n@@ -425,7 +425,7 @@ mod tests {\n         fn f() { fail; }\n         let desc = {\n             name: ~\"whatever\",\n-            fn: f,\n+            testfn: f,\n             ignore: true,\n             should_fail: false\n         };\n@@ -441,7 +441,7 @@ mod tests {\n         fn f() { }\n         let desc = {\n             name: ~\"whatever\",\n-            fn: f,\n+            testfn: f,\n             ignore: true,\n             should_fail: false\n         };\n@@ -458,7 +458,7 @@ mod tests {\n         fn f() { fail; }\n         let desc = {\n             name: ~\"whatever\",\n-            fn: f,\n+            testfn: f,\n             ignore: false,\n             should_fail: true\n         };\n@@ -474,7 +474,7 @@ mod tests {\n         fn f() { }\n         let desc = {\n             name: ~\"whatever\",\n-            fn: f,\n+            testfn: f,\n             ignore: false,\n             should_fail: true\n         };\n@@ -513,8 +513,10 @@ mod tests {\n         let opts = {filter: option::None, run_ignored: true,\n             logfile: option::None};\n         let tests =\n-            ~[{name: ~\"1\", fn: fn~() { }, ignore: true, should_fail: false},\n-             {name: ~\"2\", fn: fn~() { }, ignore: false, should_fail: false}];\n+            ~[{name: ~\"1\", testfn: fn~() { },\n+               ignore: true, should_fail: false},\n+             {name: ~\"2\", testfn: fn~() { },\n+              ignore: false, should_fail: false}];\n         let filtered = filter_tests(opts, tests);\n \n         assert (vec::len(filtered) == 1u);\n@@ -539,7 +541,7 @@ mod tests {\n         let testfn = fn~() { };\n         let mut tests = ~[];\n             for vec::each(names) |name| {\n-            let test = {name: name, fn: copy testfn, ignore: false,\n+            let test = {name: name, testfn: copy testfn, ignore: false,\n                         should_fail: false};\n             tests += ~[test];\n         }"}, {"sha": "c96cfdfe6bcef1b5154ece4ebdb14b4ebde1bf2b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7568dd4564d417d6d03801934b0c9163d3566a8b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7568dd4564d417d6d03801934b0c9163d3566a8b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7568dd4564d417d6d03801934b0c9163d3566a8b", "patch": "@@ -2329,7 +2329,9 @@ impl parser {\n                           | ~\"owned\" => {\n                             self.obsolete(copy self.span,\n                                           ObsoleteLowerCaseKindBounds);\n-                            None\n+                            // Bogus value, but doesn't matter, since\n+                            // is an error\n+                            Some(bound_send)\n                           }\n \n                           _ => None"}, {"sha": "9786d2141f010bb819c21fa42938ea3dc4c709c6", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7568dd4564d417d6d03801934b0c9163d3566a8b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7568dd4564d417d6d03801934b0c9163d3566a8b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=7568dd4564d417d6d03801934b0c9163d3566a8b", "patch": "@@ -414,8 +414,7 @@ fn temporary_keyword_table() -> HashMap<~str, ()> {\n fn restricted_keyword_table() -> HashMap<~str, ()> {\n     let words = str_hash();\n     let keys = ~[\n-        ~\"const\", ~\"copy\",\n-        ~\"fail\", ~\"fn\",\n+        ~\"fail\",\n         ~\"unsafe\"\n     ];\n     for keys.each |word| {\n@@ -430,9 +429,10 @@ fn strict_keyword_table() -> HashMap<~str, ()> {\n     let keys = ~[\n         ~\"as\", ~\"assert\",\n         ~\"break\",\n+        ~\"const\", ~\"copy\",\n         ~\"do\", ~\"drop\",\n         ~\"else\", ~\"enum\", ~\"export\", ~\"extern\",\n-        ~\"false\", ~\"for\",\n+        ~\"false\", ~\"fn\", ~\"for\",\n         ~\"if\", ~\"impl\",\n         ~\"let\", ~\"log\", ~\"loop\",\n         ~\"match\", ~\"mod\", ~\"move\", ~\"mut\","}, {"sha": "3d6dde880ef9f85699b1f636579bf86634c203dc", "filename": "src/rustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7568dd4564d417d6d03801934b0c9163d3566a8b/src%2Frustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7568dd4564d417d6d03801934b0c9163d3566a8b/src%2Frustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Ftest.rs?ref=7568dd4564d417d6d03801934b0c9163d3566a8b", "patch": "@@ -335,7 +335,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n     let fn_wrapper_expr = mk_test_wrapper(cx, fn_expr, span);\n \n     let fn_field: ast::field =\n-        nospan({mutbl: ast::m_imm, ident: cx.sess.ident_of(~\"fn\"),\n+        nospan({mutbl: ast::m_imm, ident: cx.sess.ident_of(~\"testfn\"),\n                 expr: fn_wrapper_expr});\n \n     let ignore_lit: ast::lit = nospan(ast::lit_bool(test.ignore));"}]}