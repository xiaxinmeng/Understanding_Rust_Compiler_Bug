{"sha": "ad0d3b5d4064cfd9013c498299a53b3f1586553e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMGQzYjVkNDA2NGNmZDkwMTNjNDk4Mjk5YTUzYjNmMTU4NjU1M2U=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-31T01:19:48Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-31T01:19:48Z"}, "message": "Move code from `parser` to `diagnostics`", "tree": {"sha": "084ac6c5867da5adda623ad484e8765be340f1fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/084ac6c5867da5adda623ad484e8765be340f1fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad0d3b5d4064cfd9013c498299a53b3f1586553e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad0d3b5d4064cfd9013c498299a53b3f1586553e", "html_url": "https://github.com/rust-lang/rust/commit/ad0d3b5d4064cfd9013c498299a53b3f1586553e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad0d3b5d4064cfd9013c498299a53b3f1586553e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ee45da2b9789881b8c79d6a1af8a2c9fd5364f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee45da2b9789881b8c79d6a1af8a2c9fd5364f2", "html_url": "https://github.com/rust-lang/rust/commit/1ee45da2b9789881b8c79d6a1af8a2c9fd5364f2"}], "stats": {"total": 76, "additions": 40, "deletions": 36}, "files": [{"sha": "138b2ccfe35e7ad4332c29fef5f29d881c105380", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ad0d3b5d4064cfd9013c498299a53b3f1586553e/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0d3b5d4064cfd9013c498299a53b3f1586553e/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=ad0d3b5d4064cfd9013c498299a53b3f1586553e", "patch": "@@ -1,7 +1,6 @@\n-use crate::ast;\n use crate::ast::{\n-    BlockCheckMode, BinOpKind, Expr, ExprKind, Item, ItemKind, Pat, PatKind, PathSegment, QSelf,\n-    Ty, TyKind, VariantData, Ident,\n+    self, Arg, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, ItemKind,\n+    Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind, VariantData,\n };\n use crate::parse::{SeqSep, token, PResult, Parser};\n use crate::parse::parser::{BlockMode, PathStyle, SemiColonMode, TokenType, TokenExpectType};\n@@ -12,9 +11,25 @@ use crate::symbol::{kw, sym};\n use crate::ThinVec;\n use crate::util::parser::AssocOp;\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_data_structures::fx::FxHashSet;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use log::{debug, trace};\n \n+/// Creates a placeholder argument.\n+crate fn dummy_arg(ident: Ident) -> Arg {\n+    let pat = P(Pat {\n+        id: ast::DUMMY_NODE_ID,\n+        node: PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None),\n+        span: ident.span,\n+    });\n+    let ty = Ty {\n+        node: TyKind::Err,\n+        span: ident.span,\n+        id: ast::DUMMY_NODE_ID\n+    };\n+    Arg { ty: P(ty), pat: pat, id: ast::DUMMY_NODE_ID, source: ast::ArgSource::Normal }\n+}\n+\n pub enum Error {\n     FileNotFoundForModule {\n         mod_name: String,\n@@ -1217,4 +1232,24 @@ impl<'a> Parser<'a> {\n         err.span_label(span, \"expected expression\");\n         err\n     }\n+\n+    /// Replace duplicated recovered arguments with `_` pattern to avoid unecessary errors.\n+    crate fn deduplicate_recovered_arg_names(&self, fn_inputs: &mut Vec<Arg>) {\n+        let mut seen_inputs = FxHashSet::default();\n+        for input in fn_inputs.iter_mut() {\n+            let opt_ident = if let (PatKind::Ident(_, ident, _), TyKind::Err) = (\n+                &input.pat.node, &input.ty.node,\n+            ) {\n+                Some(*ident)\n+            } else {\n+                None\n+            };\n+            if let Some(ident) = opt_ident {\n+                if seen_inputs.contains(&ident) {\n+                    input.pat.node = PatKind::Wild;\n+                }\n+                seen_inputs.insert(ident);\n+            }\n+        }\n+    }\n }"}, {"sha": "659058ffcf3c79f6d444db5a5bfb06ed7707590b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ad0d3b5d4064cfd9013c498299a53b3f1586553e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad0d3b5d4064cfd9013c498299a53b3f1586553e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ad0d3b5d4064cfd9013c498299a53b3f1586553e", "patch": "@@ -47,11 +47,10 @@ use crate::parse::PResult;\n use crate::ThinVec;\n use crate::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};\n use crate::symbol::{kw, sym, Symbol};\n-use crate::parse::diagnostics::Error;\n+use crate::parse::diagnostics::{Error, dummy_arg};\n \n use errors::{Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n use rustc_target::spec::abi::{self, Abi};\n-use rustc_data_structures::fx::FxHashSet;\n use syntax_pos::{Span, BytePos, DUMMY_SP, FileName, hygiene::CompilerDesugaringKind};\n use log::debug;\n \n@@ -452,21 +451,6 @@ impl From<P<Expr>> for LhsExpr {\n     }\n }\n \n-/// Creates a placeholder argument.\n-fn dummy_arg(ident: Ident) -> Arg {\n-    let pat = P(Pat {\n-        id: ast::DUMMY_NODE_ID,\n-        node: PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None),\n-        span: ident.span,\n-    });\n-    let ty = Ty {\n-        node: TyKind::Err,\n-        span: ident.span,\n-        id: ast::DUMMY_NODE_ID\n-    };\n-    Arg { ty: P(ty), pat: pat, id: ast::DUMMY_NODE_ID, source: ast::ArgSource::Normal }\n-}\n-\n #[derive(Copy, Clone, Debug)]\n crate enum TokenExpectType {\n     Expect,\n@@ -5617,22 +5601,7 @@ impl<'a> Parser<'a> {\n             self.expect(&token::CloseDelim(token::Paren))?;\n         }\n         // Replace duplicated recovered arguments with `_` pattern to avoid unecessary errors.\n-        let mut seen_inputs = FxHashSet::default();\n-        for input in fn_inputs.iter_mut() {\n-            let opt_ident = if let (PatKind::Ident(_, ident, _), TyKind::Err) = (\n-                &input.pat.node, &input.ty,\n-            ) {\n-                Some(*ident)\n-            } else {\n-                None\n-            };\n-            if let Some(ident) = opt_ident {\n-                if seen_inputs.contains(&ident) {\n-                    input.pat.node = PatKind::Wild;\n-                }\n-                seen_inputs.insert(ident);\n-            }\n-        }\n+        self.deduplicate_recovered_arg_names(&mut fn_inputs);\n \n         Ok(P(FnDecl {\n             inputs: fn_inputs,"}]}