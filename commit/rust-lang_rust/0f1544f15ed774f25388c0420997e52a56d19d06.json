{"sha": "0f1544f15ed774f25388c0420997e52a56d19d06", "node_id": "C_kwDOAAsO6NoAKDBmMTU0NGYxNWVkNzc0ZjI1Mzg4YzA0MjA5OTdlNTJhNTZkMTlkMDY", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-05-09T15:41:25Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-05-09T15:46:42Z"}, "message": "Reduce unnecessary work in `cmp_owned`", "tree": {"sha": "7c545d76455fb13a5c382128e6645a2551902aa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c545d76455fb13a5c382128e6645a2551902aa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f1544f15ed774f25388c0420997e52a56d19d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f1544f15ed774f25388c0420997e52a56d19d06", "html_url": "https://github.com/rust-lang/rust/commit/0f1544f15ed774f25388c0420997e52a56d19d06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f1544f15ed774f25388c0420997e52a56d19d06/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3f3c588b0c776bb658ab8e3b803b409b4f63f44", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f3c588b0c776bb658ab8e3b803b409b4f63f44", "html_url": "https://github.com/rust-lang/rust/commit/c3f3c588b0c776bb658ab8e3b803b409b4f63f44"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "18a98fc6f840bd18234504dc9662aa7dbb068296", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0f1544f15ed774f25388c0420997e52a56d19d06/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f1544f15ed774f25388c0420997e52a56d19d06/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=0f1544f15ed774f25388c0420997e52a56d19d06", "patch": "@@ -20,8 +20,8 @@ use rustc_span::symbol::sym;\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::{\n-    get_item_name, get_parent_expr, in_constant, is_diag_trait_item, is_integer_const, iter_input_pats,\n-    last_path_segment, match_any_def_paths, path_def_id, paths, unsext, SpanlessEq,\n+    get_item_name, get_parent_expr, in_constant, is_integer_const, iter_input_pats, last_path_segment,\n+    match_any_def_paths, path_def_id, paths, unsext, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -569,33 +569,30 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left:\n         })\n     }\n \n-    let (arg_ty, snip) = match expr.kind {\n-        ExprKind::MethodCall(.., args, _) if args.len() == 1 => {\n-            if_chain!(\n-                if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n-                if is_diag_trait_item(cx, expr_def_id, sym::ToString)\n-                    || is_diag_trait_item(cx, expr_def_id, sym::ToOwned);\n-                then {\n-                    (cx.typeck_results().expr_ty(&args[0]), snippet(cx, args[0].span, \"..\"))\n-                } else {\n-                    return;\n-                }\n-            )\n+    let typeck = cx.typeck_results();\n+    let (arg, arg_span) = match expr.kind {\n+        ExprKind::MethodCall(.., [arg], _)\n+            if typeck\n+                .type_dependent_def_id(expr.hir_id)\n+                .and_then(|id| cx.tcx.trait_of_item(id))\n+                .map_or(false, |id| {\n+                    matches!(cx.tcx.get_diagnostic_name(id), Some(sym::ToString | sym::ToOwned))\n+                }) =>\n+        {\n+            (arg, arg.span)\n         },\n-        ExprKind::Call(path, [arg]) => {\n+        ExprKind::Call(path, [arg])\n             if path_def_id(cx, path)\n                 .and_then(|id| match_any_def_paths(cx, id, &[&paths::FROM_STR_METHOD, &paths::FROM_FROM]))\n-                .is_some()\n-            {\n-                (cx.typeck_results().expr_ty(arg), snippet(cx, arg.span, \"..\"))\n-            } else {\n-                return;\n-            }\n+                .is_some() =>\n+        {\n+            (arg, arg.span)\n         },\n         _ => return,\n     };\n \n-    let other_ty = cx.typeck_results().expr_ty(other);\n+    let arg_ty = typeck.expr_ty(arg);\n+    let other_ty = typeck.expr_ty(other);\n \n     let without_deref = symmetric_partial_eq(cx, arg_ty, other_ty).unwrap_or_default();\n     let with_deref = arg_ty\n@@ -627,13 +624,14 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left:\n                 return;\n             }\n \n+            let arg_snip = snippet(cx, arg_span, \"..\");\n             let expr_snip;\n             let eq_impl;\n             if with_deref.is_implemented() {\n-                expr_snip = format!(\"*{}\", snip);\n+                expr_snip = format!(\"*{}\", arg_snip);\n                 eq_impl = with_deref;\n             } else {\n-                expr_snip = snip.to_string();\n+                expr_snip = arg_snip.to_string();\n                 eq_impl = without_deref;\n             };\n "}]}