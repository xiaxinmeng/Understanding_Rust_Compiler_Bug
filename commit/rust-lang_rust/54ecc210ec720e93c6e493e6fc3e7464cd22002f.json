{"sha": "54ecc210ec720e93c6e493e6fc3e7464cd22002f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZWNjMjEwZWM3MjBlOTNjNmU0OTNlNmZjM2U3NDY0Y2QyMjAwMmY=", "commit": {"author": {"name": "Alex Burka", "email": "durka42+github@gmail.com", "date": "2016-06-14T19:53:55Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-07-27T17:58:51Z"}, "message": "hack to make example compile", "tree": {"sha": "e86d22f788a132110530e66ac370d275d75adf63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e86d22f788a132110530e66ac370d275d75adf63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54ecc210ec720e93c6e493e6fc3e7464cd22002f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54ecc210ec720e93c6e493e6fc3e7464cd22002f", "html_url": "https://github.com/rust-lang/rust/commit/54ecc210ec720e93c6e493e6fc3e7464cd22002f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54ecc210ec720e93c6e493e6fc3e7464cd22002f/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5276b2967060d749e20674a08a2438a24f0f7b07", "url": "https://api.github.com/repos/rust-lang/rust/commits/5276b2967060d749e20674a08a2438a24f0f7b07", "html_url": "https://github.com/rust-lang/rust/commit/5276b2967060d749e20674a08a2438a24f0f7b07"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "e1b9789a3144af6e245c8ae5ff35c5006decdd37", "filename": "src/doc/book/ffi.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54ecc210ec720e93c6e493e6fc3e7464cd22002f/src%2Fdoc%2Fbook%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/54ecc210ec720e93c6e493e6fc3e7464cd22002f/src%2Fdoc%2Fbook%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fffi.md?ref=54ecc210ec720e93c6e493e6fc3e7464cd22002f", "patch": "@@ -598,17 +598,21 @@ we have function pointers flying across the FFI boundary in both directions.\n ```rust\n use std::os::raw::c_int;\n \n+# #[cfg(hidden)]\n extern \"C\" {\n     /// Register the callback.\n     fn register(cb: Option<extern \"C\" fn(Option<extern \"C\" fn(c_int) -> c_int>, c_int) -> c_int>);\n }\n+# unsafe fn register(_: Option<extern \"C\" fn(Option<extern \"C\" fn(c_int) -> c_int>,\n+#                                            c_int) -> c_int>)\n+# {}\n \n /// This fairly useless function receives a function pointer and an integer\n /// from C, and returns the result of calling the function with the integer.\n /// In case no function is provided, it squares the integer by default.\n extern \"C\" fn apply(process: Option<extern \"C\" fn(c_int) -> c_int>, int: c_int) -> c_int {\n     match process {\n-        Some(f) => unsafe { f(int) },\n+        Some(f) => f(int),\n         None    => int * int\n     }\n }"}]}