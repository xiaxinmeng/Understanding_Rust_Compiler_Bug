{"sha": "a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YzZlOGM0ZTIyZGRlYTk2NjhlYjMzODA2MDNhZDUzZDhjZTZhNWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-05T09:50:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-05T13:08:16Z"}, "message": "Refactor if-let -> match assist to use ast::make", "tree": {"sha": "24f302e769cd8d2e27b6ab7a39b2df1376b65660", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24f302e769cd8d2e27b6ab7a39b2df1376b65660"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e", "html_url": "https://github.com/rust-lang/rust/commit/a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83dc22e1fb4ff4897d911c18884259823edb68ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/83dc22e1fb4ff4897d911c18884259823edb68ba", "html_url": "https://github.com/rust-lang/rust/commit/83dc22e1fb4ff4897d911c18884259823edb68ba"}], "stats": {"total": 87, "additions": 55, "deletions": 32}, "files": [{"sha": "c8b13b7b385e631ce466de41bd9c4caeb434a39f", "filename": "crates/ra_assists/src/assists/replace_if_let_with_match.rs", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs?ref=a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e", "patch": "@@ -1,9 +1,12 @@\n-use format_buf::format;\n use hir::db::HirDatabase;\n-use ra_fmt::extract_trivial_expression;\n-use ra_syntax::{ast, AstNode};\n+use ra_fmt::unwrap_trivial_block;\n+use ra_syntax::{\n+    ast::{self, make},\n+    AstNode,\n+};\n \n use crate::{Assist, AssistCtx, AssistId};\n+use ast::edit::IndentLevel;\n \n // Assist: replace_if_let_with_match\n //\n@@ -43,32 +46,24 @@ pub(crate) fn replace_if_let_with_match(ctx: AssistCtx<impl HirDatabase>) -> Opt\n     };\n \n     ctx.add_assist(AssistId(\"replace_if_let_with_match\"), \"Replace with match\", |edit| {\n-        let match_expr = build_match_expr(expr, pat, then_block, else_block);\n-        edit.target(if_expr.syntax().text_range());\n-        edit.replace_node_and_indent(if_expr.syntax(), match_expr);\n-        edit.set_cursor(if_expr.syntax().text_range().start())\n-    })\n-}\n+        let match_expr = {\n+            let then_arm = {\n+                let then_expr = unwrap_trivial_block(then_block);\n+                make::match_arm(vec![pat], then_expr)\n+            };\n+            let else_arm = {\n+                let else_expr = unwrap_trivial_block(else_block);\n+                make::match_arm(vec![make::placeholder_pat().into()], else_expr)\n+            };\n+            make::expr_match(expr, make::match_arm_list(vec![then_arm, else_arm]))\n+        };\n \n-fn build_match_expr(\n-    expr: ast::Expr,\n-    pat1: ast::Pat,\n-    arm1: ast::BlockExpr,\n-    arm2: ast::BlockExpr,\n-) -> String {\n-    let mut buf = String::new();\n-    format!(buf, \"match {} {{\\n\", expr.syntax().text());\n-    format!(buf, \"    {} => {}\\n\", pat1.syntax().text(), format_arm(&arm1));\n-    format!(buf, \"    _ => {}\\n\", format_arm(&arm2));\n-    buf.push_str(\"}\");\n-    buf\n-}\n+        let match_expr = IndentLevel::from_node(if_expr.syntax()).increase_indent(match_expr);\n \n-fn format_arm(block: &ast::BlockExpr) -> String {\n-    match extract_trivial_expression(block) {\n-        Some(e) if !e.syntax().text().contains_char('\\n') => format!(\"{},\", e.syntax().text()),\n-        _ => block.syntax().text().to_string(),\n-    }\n+        edit.target(if_expr.syntax().text_range());\n+        edit.set_cursor(if_expr.syntax().text_range().start());\n+        edit.replace_ast::<ast::Expr>(if_expr.into(), match_expr.into());\n+    })\n }\n \n #[cfg(test)]"}, {"sha": "4bca27b5c702b4fe68bb4ef9a02057faafcc7c59", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e", "patch": "@@ -35,8 +35,14 @@ fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n     successors(token.prev_token(), |token| token.prev_token())\n }\n \n-pub fn extract_trivial_expression(expr: &ast::BlockExpr) -> Option<ast::Expr> {\n-    let block = expr.block()?;\n+pub fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n+    extract_trivial_expression(&block)\n+        .filter(|expr| !expr.syntax().text().contains_char('\\n'))\n+        .unwrap_or_else(|| block.into())\n+}\n+\n+pub fn extract_trivial_expression(block: &ast::BlockExpr) -> Option<ast::Expr> {\n+    let block = block.block()?;\n     let expr = block.expr()?;\n     let non_trivial_children = block.syntax().children().filter(|it| match it.kind() {\n         WHITESPACE | T!['{'] | T!['}'] => false,"}, {"sha": "2e50a095c3e6c68aba7d24c5df464a3790417a48", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e", "patch": "@@ -7,6 +7,21 @@ use crate::{\n     SyntaxToken, T,\n };\n \n+impl ast::Expr {\n+    pub fn is_block_like(&self) -> bool {\n+        match self {\n+            ast::Expr::IfExpr(_)\n+            | ast::Expr::LoopExpr(_)\n+            | ast::Expr::ForExpr(_)\n+            | ast::Expr::WhileExpr(_)\n+            | ast::Expr::BlockExpr(_)\n+            | ast::Expr::MatchExpr(_)\n+            | ast::Expr::TryBlockExpr(_) => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum ElseBranch {\n     Block(ast::BlockExpr),"}, {"sha": "629503dc576595e10746ecff23ba5c6c98334ba6", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=a4c6e8c4e22ddea9668eb3380603ad53d8ce6a5e", "patch": "@@ -122,11 +122,18 @@ pub fn match_arm(pats: impl IntoIterator<Item = ast::Pat>, expr: ast::Expr) -> a\n }\n \n pub fn match_arm_list(arms: impl IntoIterator<Item = ast::MatchArm>) -> ast::MatchArmList {\n-    let arms_str = arms.into_iter().map(|arm| format!(\"\\n    {}\", arm.syntax())).join(\",\");\n-    return from_text(&format!(\"{},\\n\", arms_str));\n+    let arms_str = arms\n+        .into_iter()\n+        .map(|arm| {\n+            let needs_comma = arm.expr().map_or(true, |it| !it.is_block_like());\n+            let comma = if needs_comma { \",\" } else { \"\" };\n+            format!(\"    {}{}\\n\", arm.syntax(), comma)\n+        })\n+        .collect::<String>();\n+    return from_text(&format!(\"{}\", arms_str));\n \n     fn from_text(text: &str) -> ast::MatchArmList {\n-        ast_from_text(&format!(\"fn f() {{ match () {{{}}} }}\", text))\n+        ast_from_text(&format!(\"fn f() {{ match () {{\\n{}}} }}\", text))\n     }\n }\n "}]}