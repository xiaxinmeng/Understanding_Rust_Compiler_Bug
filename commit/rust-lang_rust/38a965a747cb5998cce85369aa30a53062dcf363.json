{"sha": "38a965a747cb5998cce85369aa30a53062dcf363", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YTk2NWE3NDdjYjU5OThjY2U4NTM2OWFhMzBhNTMwNjJkY2YzNjM=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2015-02-28T16:09:39Z"}, "committer": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2015-03-03T02:55:32Z"}, "message": "metadata: New tag encoding scheme.\n\nEBML tags are encoded in a variable-length unsigned int (vuint),\nwhich is clever but causes some tags to be encoded in two bytes\nwhile there are really about 180 tags or so. Assuming that there\nwouldn't be, say, over 1,000 tags in the future, we can use much\nmore efficient encoding scheme. The new scheme should support\nat most 4,096 tags anyway.\n\nThis also flattens a scattered tag namespace (did you know that\n0xa9 is followed by 0xb0?) and makes a room for autoserialized tags\nin 0x00 through 0x1f.", "tree": {"sha": "40fb47b93916abac63a9c53f61796ed810c0cb52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40fb47b93916abac63a9c53f61796ed810c0cb52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38a965a747cb5998cce85369aa30a53062dcf363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38a965a747cb5998cce85369aa30a53062dcf363", "html_url": "https://github.com/rust-lang/rust/commit/38a965a747cb5998cce85369aa30a53062dcf363", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38a965a747cb5998cce85369aa30a53062dcf363/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac20ded1f8af6a35edf27059a6ee215d61666fef", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac20ded1f8af6a35edf27059a6ee215d61666fef", "html_url": "https://github.com/rust-lang/rust/commit/ac20ded1f8af6a35edf27059a6ee215d61666fef"}], "stats": {"total": 324, "additions": 175, "deletions": 149}, "files": [{"sha": "d0b8301bed5725bd7ef3f1934eb9dbaa768fcf75", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/38a965a747cb5998cce85369aa30a53062dcf363/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a965a747cb5998cce85369aa30a53062dcf363/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=38a965a747cb5998cce85369aa30a53062dcf363", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -115,6 +115,7 @@ pub enum EbmlEncoderTag {\n #[derive(Debug)]\n pub enum Error {\n     IntTooBig(uint),\n+    InvalidTag(uint),\n     Expected(String),\n     IoError(std::old_io::IoError),\n     ApplicationError(String)\n@@ -142,7 +143,7 @@ pub mod reader {\n         EsMapLen, EsMapKey, EsEnumVid, EsU64, EsU32, EsU16, EsU8, EsInt, EsI64,\n         EsI32, EsI16, EsI8, EsBool, EsF64, EsF32, EsChar, EsStr, EsMapVal,\n         EsEnumBody, EsUint, EsOpaque, EsLabel, EbmlEncoderTag, Doc, TaggedDoc,\n-        Error, IntTooBig, Expected };\n+        Error, IntTooBig, InvalidTag, Expected };\n \n     pub type DecodeResult<T> = Result<T, Error>;\n     // rbml reading\n@@ -165,6 +166,18 @@ pub mod reader {\n         pub next: uint\n     }\n \n+    pub fn tag_at(data: &[u8], start: uint) -> DecodeResult<Res> {\n+        let v = data[start] as uint;\n+        if v < 0xf0 {\n+            Ok(Res { val: v, next: start + 1 })\n+        } else if v > 0xf0 {\n+            Ok(Res { val: ((v & 0xf) << 8) | data[start + 1] as uint, next: start + 2 })\n+        } else {\n+            // every tag starting with byte 0xf0 is an overlong form, which is prohibited.\n+            Err(InvalidTag(v))\n+        }\n+    }\n+\n     #[inline(never)]\n     fn vuint_at_slow(data: &[u8], start: uint) -> DecodeResult<Res> {\n         let a = data[start];\n@@ -238,7 +251,7 @@ pub mod reader {\n     }\n \n     pub fn doc_at<'a>(data: &'a [u8], start: uint) -> DecodeResult<TaggedDoc<'a>> {\n-        let elt_tag = try!(vuint_at(data, start));\n+        let elt_tag = try!(tag_at(data, start));\n         let elt_size = try!(vuint_at(data, elt_tag.next));\n         let end = elt_size.next + elt_size.val;\n         Ok(TaggedDoc {\n@@ -250,7 +263,7 @@ pub mod reader {\n     pub fn maybe_get_doc<'a>(d: Doc<'a>, tg: uint) -> Option<Doc<'a>> {\n         let mut pos = d.start;\n         while pos < d.end {\n-            let elt_tag = try_or!(vuint_at(d.data, pos), None);\n+            let elt_tag = try_or!(tag_at(d.data, pos), None);\n             let elt_size = try_or!(vuint_at(d.data, elt_tag.next), None);\n             pos = elt_size.next + elt_size.val;\n             if elt_tag.val == tg {\n@@ -276,7 +289,7 @@ pub mod reader {\n     {\n         let mut pos = d.start;\n         while pos < d.end {\n-            let elt_tag = try_or!(vuint_at(d.data, pos), false);\n+            let elt_tag = try_or!(tag_at(d.data, pos), false);\n             let elt_size = try_or!(vuint_at(d.data, elt_tag.next), false);\n             pos = elt_size.next + elt_size.val;\n             let doc = Doc { data: d.data, start: elt_size.next, end: pos };\n@@ -292,7 +305,7 @@ pub mod reader {\n     {\n         let mut pos = d.start;\n         while pos < d.end {\n-            let elt_tag = try_or!(vuint_at(d.data, pos), false);\n+            let elt_tag = try_or!(tag_at(d.data, pos), false);\n             let elt_size = try_or!(vuint_at(d.data, elt_tag.next), false);\n             pos = elt_size.next + elt_size.val;\n             if elt_tag.val == tg {\n@@ -718,6 +731,20 @@ pub mod writer {\n         size_positions: Vec<uint>,\n     }\n \n+    fn write_tag<W: Writer>(w: &mut W, n: uint) -> EncodeResult {\n+        if n < 0xf0 {\n+            w.write_all(&[n as u8])\n+        } else if 0x100 <= n && n < 0x1000 {\n+            w.write_all(&[0xf0 | (n >> 8) as u8, n as u8])\n+        } else {\n+            Err(old_io::IoError {\n+                kind: old_io::OtherIoError,\n+                desc: \"invalid tag\",\n+                detail: Some(format!(\"{}\", n))\n+            })\n+        }\n+    }\n+\n     fn write_sized_vuint<W: Writer>(w: &mut W, n: uint, size: uint) -> EncodeResult {\n         match size {\n             1 => w.write_all(&[0x80u8 | (n as u8)]),\n@@ -766,7 +793,7 @@ pub mod writer {\n             debug!(\"Start tag {:?}\", tag_id);\n \n             // Write the enum ID:\n-            try!(write_vuint(self.writer, tag_id));\n+            try!(write_tag(self.writer, tag_id));\n \n             // Write a placeholder four-byte size.\n             self.size_positions.push(try!(self.writer.tell()) as uint);\n@@ -795,7 +822,7 @@ pub mod writer {\n         }\n \n         pub fn wr_tagged_bytes(&mut self, tag_id: uint, b: &[u8]) -> EncodeResult {\n-            try!(write_vuint(self.writer, tag_id));\n+            try!(write_tag(self.writer, tag_id));\n             try!(write_vuint(self.writer, b.len()));\n             self.writer.write_all(b)\n         }"}, {"sha": "f0a465b73f60d475e199ab98913a9dad9eb4d217", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 140, "deletions": 141, "changes": 281, "blob_url": "https://github.com/rust-lang/rust/blob/38a965a747cb5998cce85369aa30a53062dcf363/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38a965a747cb5998cce85369aa30a53062dcf363/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=38a965a747cb5998cce85369aa30a53062dcf363", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -14,85 +14,90 @@ pub use self::astencode_tag::*;\n \n use back::svh::Svh;\n \n-// EBML enum definitions and utils shared by the encoder and decoder\n+// RBML enum definitions and utils shared by the encoder and decoder\n+//\n+// 0x00..0x1f: reserved for RBML generic type tags\n+// 0x20..0xef: free for use, preferred for frequent tags\n+// 0xf0..0xff: internally used by RBML to encode 0x100..0xfff in two bytes\n+// 0x100..0xfff: free for use, preferred for infrequent tags\n \n-pub const tag_items: uint = 0x00;\n+pub const tag_items: uint = 0x100; // top-level only\n \n-pub const tag_paths_data_name: uint = 0x01;\n+pub const tag_paths_data_name: uint = 0x20;\n \n-pub const tag_def_id: uint = 0x02;\n+pub const tag_def_id: uint = 0x21;\n \n-pub const tag_items_data: uint = 0x03;\n+pub const tag_items_data: uint = 0x22;\n \n-pub const tag_items_data_item: uint = 0x04;\n+pub const tag_items_data_item: uint = 0x23;\n \n-pub const tag_items_data_item_family: uint = 0x05;\n+pub const tag_items_data_item_family: uint = 0x24;\n \n-pub const tag_items_data_item_type: uint = 0x07;\n+pub const tag_items_data_item_type: uint = 0x25;\n \n-pub const tag_items_data_item_symbol: uint = 0x08;\n+pub const tag_items_data_item_symbol: uint = 0x26;\n \n-pub const tag_items_data_item_variant: uint = 0x09;\n+pub const tag_items_data_item_variant: uint = 0x27;\n \n-pub const tag_items_data_parent_item: uint = 0x0a;\n+pub const tag_items_data_parent_item: uint = 0x28;\n \n-pub const tag_items_data_item_is_tuple_struct_ctor: uint = 0x0b;\n+pub const tag_items_data_item_is_tuple_struct_ctor: uint = 0x29;\n \n-pub const tag_index: uint = 0x0c;\n+pub const tag_index: uint = 0x2a;\n \n-pub const tag_index_buckets: uint = 0x0d;\n+pub const tag_index_buckets: uint = 0x2b;\n \n-pub const tag_index_buckets_bucket: uint = 0x0e;\n+pub const tag_index_buckets_bucket: uint = 0x2c;\n \n-pub const tag_index_buckets_bucket_elt: uint = 0x0f;\n+pub const tag_index_buckets_bucket_elt: uint = 0x2d;\n \n-pub const tag_index_table: uint = 0x10;\n+pub const tag_index_table: uint = 0x2e;\n \n-pub const tag_meta_item_name_value: uint = 0x11;\n+pub const tag_meta_item_name_value: uint = 0x2f;\n \n-pub const tag_meta_item_name: uint = 0x12;\n+pub const tag_meta_item_name: uint = 0x30;\n \n-pub const tag_meta_item_value: uint = 0x13;\n+pub const tag_meta_item_value: uint = 0x31;\n \n-pub const tag_attributes: uint = 0x14;\n+pub const tag_attributes: uint = 0x101; // top-level only\n \n-pub const tag_attribute: uint = 0x15;\n+pub const tag_attribute: uint = 0x32;\n \n-pub const tag_meta_item_word: uint = 0x16;\n+pub const tag_meta_item_word: uint = 0x33;\n \n-pub const tag_meta_item_list: uint = 0x17;\n+pub const tag_meta_item_list: uint = 0x34;\n \n // The list of crates that this crate depends on\n-pub const tag_crate_deps: uint = 0x18;\n+pub const tag_crate_deps: uint = 0x102; // top-level only\n \n // A single crate dependency\n-pub const tag_crate_dep: uint = 0x19;\n+pub const tag_crate_dep: uint = 0x35;\n \n-pub const tag_crate_hash: uint = 0x1a;\n-pub const tag_crate_crate_name: uint = 0x1b;\n+pub const tag_crate_hash: uint = 0x103; // top-level only\n+pub const tag_crate_crate_name: uint = 0x104; // top-level only\n \n-pub const tag_crate_dep_crate_name: uint = 0x1d;\n-pub const tag_crate_dep_hash: uint = 0x1e;\n+pub const tag_crate_dep_crate_name: uint = 0x36;\n+pub const tag_crate_dep_hash: uint = 0x37;\n \n-pub const tag_mod_impl: uint = 0x1f;\n+pub const tag_mod_impl: uint = 0x38;\n \n-pub const tag_item_trait_item: uint = 0x20;\n+pub const tag_item_trait_item: uint = 0x39;\n \n-pub const tag_item_trait_ref: uint = 0x21;\n-pub const tag_item_super_trait_ref: uint = 0x22;\n+pub const tag_item_trait_ref: uint = 0x3a;\n+pub const tag_item_super_trait_ref: uint = 0x3b;\n \n // discriminator value for variants\n-pub const tag_disr_val: uint = 0x23;\n+pub const tag_disr_val: uint = 0x3c;\n \n // used to encode ast_map::PathElem\n-pub const tag_path: uint = 0x24;\n-pub const tag_path_len: uint = 0x25;\n-pub const tag_path_elem_mod: uint = 0x26;\n-pub const tag_path_elem_name: uint = 0x27;\n-pub const tag_item_field: uint = 0x28;\n-pub const tag_item_field_origin: uint = 0x29;\n-\n-pub const tag_item_variances: uint = 0x2a;\n+pub const tag_path: uint = 0x3d;\n+pub const tag_path_len: uint = 0x3e;\n+pub const tag_path_elem_mod: uint = 0x3f;\n+pub const tag_path_elem_name: uint = 0x40;\n+pub const tag_item_field: uint = 0x41;\n+pub const tag_item_field_origin: uint = 0x42;\n+\n+pub const tag_item_variances: uint = 0x43;\n /*\n   trait items contain tag_item_trait_item elements,\n   impl items contain tag_item_impl_item elements, and classes\n@@ -101,60 +106,60 @@ pub const tag_item_variances: uint = 0x2a;\n   both, tag_item_trait_item and tag_item_impl_item have to be two\n   different tags.\n  */\n-pub const tag_item_impl_item: uint = 0x30;\n-pub const tag_item_trait_method_explicit_self: uint = 0x31;\n+pub const tag_item_impl_item: uint = 0x44;\n+pub const tag_item_trait_method_explicit_self: uint = 0x45;\n \n \n // Reexports are found within module tags. Each reexport contains def_ids\n // and names.\n-pub const tag_items_data_item_reexport: uint = 0x38;\n-pub const tag_items_data_item_reexport_def_id: uint = 0x39;\n-pub const tag_items_data_item_reexport_name: uint = 0x3a;\n+pub const tag_items_data_item_reexport: uint = 0x46;\n+pub const tag_items_data_item_reexport_def_id: uint = 0x47;\n+pub const tag_items_data_item_reexport_name: uint = 0x48;\n \n // used to encode crate_ctxt side tables\n #[derive(Copy, PartialEq, FromPrimitive)]\n #[repr(uint)]\n-pub enum astencode_tag { // Reserves 0x40 -- 0x5f\n-    tag_ast = 0x40,\n-\n-    tag_tree = 0x41,\n-\n-    tag_id_range = 0x42,\n-\n-    tag_table = 0x43,\n-    tag_table_id = 0x44,\n-    tag_table_val = 0x45,\n-    tag_table_def = 0x46,\n-    tag_table_node_type = 0x47,\n-    tag_table_item_subst = 0x48,\n-    tag_table_freevars = 0x49,\n-    tag_table_tcache = 0x4a,\n-    tag_table_param_defs = 0x4b,\n-    tag_table_mutbl = 0x4c,\n-    tag_table_last_use = 0x4d,\n-    tag_table_spill = 0x4e,\n-    tag_table_method_map = 0x4f,\n-    tag_table_vtable_map = 0x50,\n-    tag_table_adjustments = 0x51,\n-    tag_table_moves_map = 0x52,\n-    tag_table_capture_map = 0x53,\n-    tag_table_closure_tys = 0x54,\n-    tag_table_closure_kinds = 0x55,\n-    tag_table_upvar_capture_map = 0x56,\n-    tag_table_capture_modes = 0x57,\n-    tag_table_object_cast_map = 0x58,\n-    tag_table_const_qualif = 0x59,\n+pub enum astencode_tag { // Reserves 0x50 -- 0x6f\n+    tag_ast = 0x50,\n+\n+    tag_tree = 0x51,\n+\n+    tag_id_range = 0x52,\n+\n+    tag_table = 0x53,\n+    tag_table_id = 0x54,\n+    tag_table_val = 0x55,\n+    tag_table_def = 0x56,\n+    tag_table_node_type = 0x57,\n+    tag_table_item_subst = 0x58,\n+    tag_table_freevars = 0x59,\n+    tag_table_tcache = 0x5a,\n+    tag_table_param_defs = 0x5b,\n+    tag_table_mutbl = 0x5c,\n+    tag_table_last_use = 0x5d,\n+    tag_table_spill = 0x5e,\n+    tag_table_method_map = 0x5f,\n+    tag_table_vtable_map = 0x60,\n+    tag_table_adjustments = 0x61,\n+    tag_table_moves_map = 0x62,\n+    tag_table_capture_map = 0x63,\n+    tag_table_closure_tys = 0x64,\n+    tag_table_closure_kinds = 0x65,\n+    tag_table_upvar_capture_map = 0x66,\n+    tag_table_capture_modes = 0x67,\n+    tag_table_object_cast_map = 0x68,\n+    tag_table_const_qualif = 0x69,\n }\n \n-pub const tag_item_trait_item_sort: uint = 0x60;\n+pub const tag_item_trait_item_sort: uint = 0x70;\n \n-pub const tag_item_trait_parent_sort: uint = 0x61;\n+pub const tag_item_trait_parent_sort: uint = 0x71;\n \n-pub const tag_item_impl_type_basename: uint = 0x62;\n+pub const tag_item_impl_type_basename: uint = 0x72;\n \n-pub const tag_crate_triple: uint = 0x66;\n+pub const tag_crate_triple: uint = 0x105; // top-level only\n \n-pub const tag_dylib_dependency_formats: uint = 0x67;\n+pub const tag_dylib_dependency_formats: uint = 0x106; // top-level only\n \n // Language items are a top-level directory (for speed). Hierarchy:\n //\n@@ -163,94 +168,88 @@ pub const tag_dylib_dependency_formats: uint = 0x67;\n //   - tag_lang_items_item_id: u32\n //   - tag_lang_items_item_node_id: u32\n \n-pub const tag_lang_items: uint = 0x70;\n-pub const tag_lang_items_item: uint = 0x71;\n-pub const tag_lang_items_item_id: uint = 0x72;\n-pub const tag_lang_items_item_node_id: uint = 0x73;\n-pub const tag_lang_items_missing: uint = 0x74;\n+pub const tag_lang_items: uint = 0x107; // top-level only\n+pub const tag_lang_items_item: uint = 0x73;\n+pub const tag_lang_items_item_id: uint = 0x74;\n+pub const tag_lang_items_item_node_id: uint = 0x75;\n+pub const tag_lang_items_missing: uint = 0x76;\n \n-pub const tag_item_unnamed_field: uint = 0x75;\n-pub const tag_items_data_item_visibility: uint = 0x76;\n+pub const tag_item_unnamed_field: uint = 0x77;\n+pub const tag_items_data_item_visibility: uint = 0x78;\n \n pub const tag_item_method_tps: uint = 0x79;\n pub const tag_item_method_fty: uint = 0x7a;\n \n pub const tag_mod_child: uint = 0x7b;\n-pub const tag_misc_info: uint = 0x7c;\n-pub const tag_misc_info_crate_items: uint = 0x7d;\n-\n-pub const tag_item_method_provided_source: uint = 0x7e;\n-pub const tag_item_impl_vtables: uint = 0x7f;\n+pub const tag_misc_info: uint = 0x108; // top-level only\n+pub const tag_misc_info_crate_items: uint = 0x7c;\n \n-pub const tag_impls: uint = 0x80;\n-pub const tag_impls_impl: uint = 0x81;\n+pub const tag_item_method_provided_source: uint = 0x7d;\n+pub const tag_item_impl_vtables: uint = 0x7e;\n \n-pub const tag_items_data_item_inherent_impl: uint = 0x82;\n-pub const tag_items_data_item_extension_impl: uint = 0x83;\n+pub const tag_impls: uint = 0x109; // top-level only\n+pub const tag_impls_impl: uint = 0x7f;\n \n-// GAP 0x84, 0x85, 0x86\n+pub const tag_items_data_item_inherent_impl: uint = 0x80;\n+pub const tag_items_data_item_extension_impl: uint = 0x81;\n \n-pub const tag_native_libraries: uint = 0x87;\n-pub const tag_native_libraries_lib: uint = 0x88;\n-pub const tag_native_libraries_name: uint = 0x89;\n-pub const tag_native_libraries_kind: uint = 0x8a;\n+pub const tag_native_libraries: uint = 0x10a; // top-level only\n+pub const tag_native_libraries_lib: uint = 0x82;\n+pub const tag_native_libraries_name: uint = 0x83;\n+pub const tag_native_libraries_kind: uint = 0x84;\n \n-pub const tag_plugin_registrar_fn: uint = 0x8b;\n+pub const tag_plugin_registrar_fn: uint = 0x10b; // top-level only\n \n-// GAP 0x8c, 0x8d\n+pub const tag_method_argument_names: uint = 0x85;\n+pub const tag_method_argument_name: uint = 0x86;\n \n-pub const tag_method_argument_names: uint = 0x8e;\n-pub const tag_method_argument_name: uint = 0x8f;\n+pub const tag_reachable_extern_fns: uint = 0x10c; // top-level only\n+pub const tag_reachable_extern_fn_id: uint = 0x87;\n \n-pub const tag_reachable_extern_fns: uint = 0x90;\n-pub const tag_reachable_extern_fn_id: uint = 0x91;\n+pub const tag_items_data_item_stability: uint = 0x88;\n \n-pub const tag_items_data_item_stability: uint = 0x92;\n-\n-pub const tag_items_data_item_repr: uint = 0x93;\n+pub const tag_items_data_item_repr: uint = 0x89;\n \n #[derive(Clone, Debug)]\n pub struct LinkMeta {\n     pub crate_name: String,\n     pub crate_hash: Svh,\n }\n \n-// GAP 0x94...0x98\n-\n-pub const tag_struct_fields: uint = 0x99;\n-pub const tag_struct_field: uint = 0x9a;\n-pub const tag_struct_field_id: uint = 0x9b;\n+pub const tag_struct_fields: uint = 0x10d; // top-level only\n+pub const tag_struct_field: uint = 0x8a;\n+pub const tag_struct_field_id: uint = 0x8b;\n \n-pub const tag_attribute_is_sugared_doc: uint = 0x9c;\n+pub const tag_attribute_is_sugared_doc: uint = 0x8c;\n \n-pub const tag_trait_def_bounds: uint = 0x9d;\n+pub const tag_trait_def_bounds: uint = 0x8d;\n \n-pub const tag_items_data_region: uint = 0x9e;\n+pub const tag_items_data_region: uint = 0x8e;\n \n-pub const tag_region_param_def: uint = 0xa0;\n-pub const tag_region_param_def_ident: uint = 0xa1;\n-pub const tag_region_param_def_def_id: uint = 0xa2;\n-pub const tag_region_param_def_space: uint = 0xa3;\n-pub const tag_region_param_def_index: uint = 0xa4;\n+pub const tag_region_param_def: uint = 0x8f;\n+pub const tag_region_param_def_ident: uint = 0x90;\n+pub const tag_region_param_def_def_id: uint = 0x91;\n+pub const tag_region_param_def_space: uint = 0x92;\n+pub const tag_region_param_def_index: uint = 0x93;\n \n-pub const tag_type_param_def: uint = 0xa5;\n+pub const tag_type_param_def: uint = 0x94;\n \n-pub const tag_item_generics: uint = 0xa6;\n-pub const tag_method_ty_generics: uint = 0xa7;\n+pub const tag_item_generics: uint = 0x95;\n+pub const tag_method_ty_generics: uint = 0x96;\n \n-pub const tag_predicate: uint = 0xa8;\n-pub const tag_predicate_space: uint = 0xa9;\n-pub const tag_predicate_data: uint = 0xb0;\n+pub const tag_predicate: uint = 0x97;\n+pub const tag_predicate_space: uint = 0x98;\n+pub const tag_predicate_data: uint = 0x99;\n \n-pub const tag_unsafety: uint = 0xb1;\n+pub const tag_unsafety: uint = 0x9a;\n \n-pub const tag_associated_type_names: uint = 0xb2;\n-pub const tag_associated_type_name: uint = 0xb3;\n+pub const tag_associated_type_names: uint = 0x9b;\n+pub const tag_associated_type_name: uint = 0x9c;\n \n-pub const tag_polarity: uint = 0xb4;\n+pub const tag_polarity: uint = 0x9d;\n \n-pub const tag_macro_defs: uint = 0xb5;\n-pub const tag_macro_def: uint = 0xb6;\n-pub const tag_macro_def_body: uint = 0xb7;\n+pub const tag_macro_defs: uint = 0x10e; // top-level only\n+pub const tag_macro_def: uint = 0x9e;\n+pub const tag_macro_def_body: uint = 0x9f;\n \n-pub const tag_paren_sugar: uint = 0xb8;\n+pub const tag_paren_sugar: uint = 0xa0;"}]}