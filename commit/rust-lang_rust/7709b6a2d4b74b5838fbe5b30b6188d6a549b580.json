{"sha": "7709b6a2d4b74b5838fbe5b30b6188d6a549b580", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MDliNmEyZDRiNzRiNTgzOGZiZTViMzBiNjE4OGQ2YTU0OWI1ODA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-05T13:09:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-05T13:09:22Z"}, "message": "Merge #6470\n\n6470: Restore semantic token flickering workaround removed in #5697 r=kjeremy a=charlespierce\n\nCloses #6452 \r\n\r\nInfo\r\n-----\r\n* As discussed in #6452, the `Error('busy')` workaround for semantic token flickering was removed because the underlying issue was believed to be fixed in VS Code.\r\n* It turns out that the fix isn't yet complete, so this caused flickering of the semantic highlighting when making rapid edits (e.g. typing quickly).\r\n* This PR restores that workaround and makes it slightly more robust, covering all areas of semantic token middleware.\r\n\r\nChanges\r\n-----\r\n* Added middleware functions for `provideDocumentSemanticTokens`, `provideDocumentSemanticTokensEdits`, and `provideDocumentRangeSemanticTokens` to match the 3 possible middleware hooks defined in https://github.com/microsoft/vscode-languageserver-node/blob/master/client/src/common/semanticTokens.ts#L33\r\n* Each intercepts a `null` or `undefined` return and throws an error with the message `busy` instead, which prevents the tokens from being removed and re-added (causing the flickering behavior)\r\n\r\nTested\r\n-----\r\n* Tested locally that the flickering behavior is gone.\r\n* There don't appear to be any significant tests of the VS Code plugin side of things, other than that it loads. Is there somewhere I can / should add tests to cover this behavior?\n\nCo-authored-by: Charles Pierce <cpierce.grad@gmail.com>", "tree": {"sha": "31f0539c641e7a793aeed4d4cb6189e8c1e2a5d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31f0539c641e7a793aeed4d4cb6189e8c1e2a5d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7709b6a2d4b74b5838fbe5b30b6188d6a549b580", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfo/mCCRBK7hj4Ov3rIwAAdHIIAG5Qb3eQxvTRUJiUdiAKDvE5\njtfSEhEkMapoq5z6rVZhMYoJWhjDgwCjtZK5HjsIXlz9Qbrx1vAe1AQOBw0RE+4D\ntzDDP9AHWDQV884f8zNvH4D/J/Vg9yYQ5KKHFyn1k86uUHNEhG8aLaz3ZkBGD34D\nIrInsjq8p9IDSmY+FWzY8P3q+FyMlMWJPbzXvppw2/qmPWDgJHDtUTLVFhICtOcG\nf7dzYA0bIZMd9RXWIFXs4OzoaHaygFhlvajfvmoRXlQZfsUnTnoCaJbotrhe9kFv\nkZDrjLSv9zDGBajyRWUmjPA7xCFUbAYZ+CfFJUAkH02x5Fx5XLDcz1WWDtmszk0=\n=VrQO\n-----END PGP SIGNATURE-----\n", "payload": "tree 31f0539c641e7a793aeed4d4cb6189e8c1e2a5d7\nparent f5b72638bd5a18c4ddbd577930b5deaf64306034\nparent d2bf2ebe15bd58e6d8937a5894a2363a1ca46b59\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604581762 +0000\ncommitter GitHub <noreply@github.com> 1604581762 +0000\n\nMerge #6470\n\n6470: Restore semantic token flickering workaround removed in #5697 r=kjeremy a=charlespierce\n\nCloses #6452 \r\n\r\nInfo\r\n-----\r\n* As discussed in #6452, the `Error('busy')` workaround for semantic token flickering was removed because the underlying issue was believed to be fixed in VS Code.\r\n* It turns out that the fix isn't yet complete, so this caused flickering of the semantic highlighting when making rapid edits (e.g. typing quickly).\r\n* This PR restores that workaround and makes it slightly more robust, covering all areas of semantic token middleware.\r\n\r\nChanges\r\n-----\r\n* Added middleware functions for `provideDocumentSemanticTokens`, `provideDocumentSemanticTokensEdits`, and `provideDocumentRangeSemanticTokens` to match the 3 possible middleware hooks defined in https://github.com/microsoft/vscode-languageserver-node/blob/master/client/src/common/semanticTokens.ts#L33\r\n* Each intercepts a `null` or `undefined` return and throws an error with the message `busy` instead, which prevents the tokens from being removed and re-added (causing the flickering behavior)\r\n\r\nTested\r\n-----\r\n* Tested locally that the flickering behavior is gone.\r\n* There don't appear to be any significant tests of the VS Code plugin side of things, other than that it loads. Is there somewhere I can / should add tests to cover this behavior?\n\nCo-authored-by: Charles Pierce <cpierce.grad@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7709b6a2d4b74b5838fbe5b30b6188d6a549b580", "html_url": "https://github.com/rust-lang/rust/commit/7709b6a2d4b74b5838fbe5b30b6188d6a549b580", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7709b6a2d4b74b5838fbe5b30b6188d6a549b580/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5b72638bd5a18c4ddbd577930b5deaf64306034", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b72638bd5a18c4ddbd577930b5deaf64306034", "html_url": "https://github.com/rust-lang/rust/commit/f5b72638bd5a18c4ddbd577930b5deaf64306034"}, {"sha": "d2bf2ebe15bd58e6d8937a5894a2363a1ca46b59", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2bf2ebe15bd58e6d8937a5894a2363a1ca46b59", "html_url": "https://github.com/rust-lang/rust/commit/d2bf2ebe15bd58e6d8937a5894a2363a1ca46b59"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "d032b45b71ae4c93e502d8043f105fd19eaa971e", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7709b6a2d4b74b5838fbe5b30b6188d6a549b580/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7709b6a2d4b74b5838fbe5b30b6188d6a549b580/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=7709b6a2d4b74b5838fbe5b30b6188d6a549b580", "patch": "@@ -2,6 +2,7 @@ import * as lc from 'vscode-languageclient/node';\n import * as vscode from 'vscode';\n import * as ra from '../src/lsp_ext';\n import * as Is from 'vscode-languageclient/lib/common/utils/is';\n+import { DocumentSemanticsTokensSignature, DocumentSemanticsTokensEditsSignature, DocumentRangeSemanticTokensSignature } from 'vscode-languageclient/lib/common/semanticTokens';\n import { assert } from './util';\n \n function renderCommand(cmd: ra.CommandLink) {\n@@ -18,6 +19,13 @@ function renderHoverActions(actions: ra.CommandLinkGroup[]): vscode.MarkdownStri\n     return result;\n }\n \n+// Workaround for https://github.com/microsoft/vscode-languageserver-node/issues/576\n+async function semanticHighlightingWorkaround<R, F extends (...args: any[]) => vscode.ProviderResult<R>>(next: F, ...args: Parameters<F>): Promise<R> {\n+    const res = await next(...args);\n+    if (res == null) throw new Error('busy');\n+    return res;\n+}\n+\n export function createClient(serverPath: string, cwd: string): lc.LanguageClient {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n@@ -41,6 +49,15 @@ export function createClient(serverPath: string, cwd: string): lc.LanguageClient\n         diagnosticCollectionName: \"rustc\",\n         traceOutputChannel,\n         middleware: {\n+            provideDocumentSemanticTokens(document: vscode.TextDocument, token: vscode.CancellationToken, next: DocumentSemanticsTokensSignature): vscode.ProviderResult<vscode.SemanticTokens> {\n+                return semanticHighlightingWorkaround(next, document, token);\n+            },\n+            provideDocumentSemanticTokensEdits(document: vscode.TextDocument, previousResultId: string, token: vscode.CancellationToken, next: DocumentSemanticsTokensEditsSignature): vscode.ProviderResult<vscode.SemanticTokensEdits | vscode.SemanticTokens> {\n+                return semanticHighlightingWorkaround(next, document, previousResultId, token);\n+            },\n+            provideDocumentRangeSemanticTokens(document: vscode.TextDocument, range: vscode.Range, token: vscode.CancellationToken, next: DocumentRangeSemanticTokensSignature): vscode.ProviderResult<vscode.SemanticTokens> {\n+                return semanticHighlightingWorkaround(next, document, range, token);\n+            },\n             async provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, _next: lc.ProvideHoverSignature) {\n                 return client.sendRequest(lc.HoverRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(\n                     (result) => {"}]}