{"sha": "ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMDhiNGZiZmRlN2U5Y2M5ZTBkZTA3YWVkMTdiNGQ0ZTA2Y2NjM2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-02T01:17:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-18T21:07:35Z"}, "message": "core: Remove pipes::spawn_service, spawn_service_recv\n\nThese are only used in test cases; pipes isn't the right place for them;\nthey are unnecessary.\n\nConflicts:\n\tsrc/libcore/rt/uv/mod.rs", "tree": {"sha": "2e3a7fb6cf01cd07ff35f254d43ef00e8beed28c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e3a7fb6cf01cd07ff35f254d43ef00e8beed28c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e", "html_url": "https://github.com/rust-lang/rust/commit/ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b329f2fa82185c9e7c6bbbdf26270dd839618e9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b329f2fa82185c9e7c6bbbdf26270dd839618e9c", "html_url": "https://github.com/rust-lang/rust/commit/b329f2fa82185c9e7c6bbbdf26270dd839618e9c"}], "stats": {"total": 157, "additions": 102, "deletions": 55}, "files": [{"sha": "fd50ecc5274a14652350484ed394f845493fd4b0", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e", "patch": "@@ -83,7 +83,6 @@ bounded and unbounded protocols allows for less code duplication.\n */\n \n use cast::{forget, reinterpret_cast, transmute};\n-use cell::Cell;\n use either::{Either, Left, Right};\n use kinds::Owned;\n use libc;\n@@ -902,51 +901,6 @@ pub fn entangle<T>() -> (SendPacket<T>, RecvPacket<T>) {\n     (SendPacket(p), RecvPacket(p))\n }\n \n-/** Spawn a task to provide a service.\n-\n-It takes an initialization function that produces a send and receive\n-endpoint. The send endpoint is returned to the caller and the receive\n-endpoint is passed to the new task.\n-\n-*/\n-pub fn spawn_service<T:Owned,Tb:Owned>(\n-            init: extern fn() -> (SendPacketBuffered<T, Tb>,\n-                                  RecvPacketBuffered<T, Tb>),\n-            service: ~fn(v: RecvPacketBuffered<T, Tb>))\n-        -> SendPacketBuffered<T, Tb> {\n-    let (client, server) = init();\n-\n-    // This is some nasty gymnastics required to safely move the pipe\n-    // into a new task.\n-    let server = Cell(server);\n-    do task::spawn {\n-        service(server.take());\n-    }\n-\n-    client\n-}\n-\n-/** Like `spawn_service_recv`, but for protocols that start in the\n-receive state.\n-\n-*/\n-pub fn spawn_service_recv<T:Owned,Tb:Owned>(\n-        init: extern fn() -> (RecvPacketBuffered<T, Tb>,\n-                              SendPacketBuffered<T, Tb>),\n-        service: ~fn(v: SendPacketBuffered<T, Tb>))\n-        -> RecvPacketBuffered<T, Tb> {\n-    let (client, server) = init();\n-\n-    // This is some nasty gymnastics required to safely move the pipe\n-    // into a new task.\n-    let server = Cell(server);\n-    do task::spawn {\n-        service(server.take())\n-    }\n-\n-    client\n-}\n-\n pub mod rt {\n     use option::{None, Option, Some};\n "}, {"sha": "64fb9652ceae09b67af2dcb5236417627c9809ef", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e", "patch": "@@ -14,7 +14,8 @@\n  \n extern mod std;\n \n-use core::pipes::{spawn_service, recv};\n+use core::cell::Cell;\n+use core::pipes::*;\n use std::time::precise_time_s;\n \n proto! pingpong (\n@@ -70,6 +71,52 @@ macro_rules! follow (\n     )\n )\n \n+\n+/** Spawn a task to provide a service.\n+\n+It takes an initialization function that produces a send and receive\n+endpoint. The send endpoint is returned to the caller and the receive\n+endpoint is passed to the new task.\n+\n+*/\n+pub fn spawn_service<T:Owned,Tb:Owned>(\n+            init: extern fn() -> (SendPacketBuffered<T, Tb>,\n+                                  RecvPacketBuffered<T, Tb>),\n+            service: ~fn(v: RecvPacketBuffered<T, Tb>))\n+        -> SendPacketBuffered<T, Tb> {\n+    let (client, server) = init();\n+\n+    // This is some nasty gymnastics required to safely move the pipe\n+    // into a new task.\n+    let server = Cell(server);\n+    do task::spawn {\n+        service(server.take());\n+    }\n+\n+    client\n+}\n+\n+/** Like `spawn_service_recv`, but for protocols that start in the\n+receive state.\n+\n+*/\n+pub fn spawn_service_recv<T:Owned,Tb:Owned>(\n+        init: extern fn() -> (RecvPacketBuffered<T, Tb>,\n+                              SendPacketBuffered<T, Tb>),\n+        service: ~fn(v: SendPacketBuffered<T, Tb>))\n+        -> RecvPacketBuffered<T, Tb> {\n+    let (client, server) = init();\n+\n+    // This is some nasty gymnastics required to safely move the pipe\n+    // into a new task.\n+    let server = Cell(server);\n+    do task::spawn {\n+        service(server.take())\n+    }\n+\n+    client\n+}\n+\n fn switch<T:Owned,Tb:Owned,U>(+endp: core::pipes::RecvPacketBuffered<T, Tb>,\n                       f: &fn(+v: Option<T>) -> U) -> U {\n     f(core::pipes::try_recv(endp))"}, {"sha": "bd0ffa64590673c1024dd31c9010896bb61cbf3f", "filename": "src/test/run-pass/pipe-detect-term.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs?ref=ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e", "patch": "@@ -18,7 +18,7 @@ extern mod std;\n use std::timer::sleep;\n use std::uv;\n \n-use core::pipes;\n+use core::cell::Cell;\n use core::pipes::{try_recv, recv};\n \n proto! oneshot (\n@@ -30,12 +30,14 @@ proto! oneshot (\n pub fn main() {\n     let iotask = &uv::global_loop::get();\n     \n-    pipes::spawn_service(oneshot::init, |p| { \n-        match try_recv(p) {\n+    let (chan, port) = oneshot::init();\n+    let port = Cell(port);\n+    do spawn {\n+        match try_recv(port.take()) {\n           Some(*) => { fail!() }\n           None => { }\n         }\n-    });\n+    }\n \n     sleep(iotask, 100);\n "}, {"sha": "12d60c9d6ab0133d6f07daada2f5f738786eed67", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e", "patch": "@@ -17,8 +17,9 @@ extern mod std;\n use std::timer::sleep;\n use std::uv;\n \n+use core::cell::Cell;\n use core::pipes;\n-use core::pipes::{recv, select};\n+use core::pipes::*;\n \n proto! oneshot (\n     waiting:send {\n@@ -32,13 +33,30 @@ proto! stream (\n     }\n )\n \n+pub fn spawn_service<T:Owned,Tb:Owned>(\n+            init: extern fn() -> (SendPacketBuffered<T, Tb>,\n+                                  RecvPacketBuffered<T, Tb>),\n+            service: ~fn(v: RecvPacketBuffered<T, Tb>))\n+        -> SendPacketBuffered<T, Tb> {\n+    let (client, server) = init();\n+\n+    // This is some nasty gymnastics required to safely move the pipe\n+    // into a new task.\n+    let server = Cell(server);\n+    do task::spawn {\n+        service(server.take());\n+    }\n+\n+    client\n+}\n+\n pub fn main() {\n     use oneshot::client::*;\n     use stream::client::*;\n \n     let iotask = &uv::global_loop::get();\n     \n-    let c = pipes::spawn_service(stream::init, |p| { \n+    let c = spawn_service(stream::init, |p| { \n         error!(\"waiting for pipes\");\n         let stream::send(x, p) = recv(p);\n         error!(\"got pipes\");"}, {"sha": "86ffc96e89aecff514cec4c1b1fbc4696dea0928", "filename": "src/test/run-pass/pipe-sleep.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs?ref=ab08b4fbfde7e9cc9e0de07aed17b4d4e06ccc3e", "patch": "@@ -13,19 +13,45 @@\n extern mod std;\n use std::timer::sleep;\n use std::uv;\n+use core::cell::Cell;\n use core::pipes;\n-use core::pipes::recv;\n+use core::pipes::*;\n \n proto! oneshot (\n     waiting:send {\n         signal -> !\n     }\n )\n \n+\n+/** Spawn a task to provide a service.\n+\n+It takes an initialization function that produces a send and receive\n+endpoint. The send endpoint is returned to the caller and the receive\n+endpoint is passed to the new task.\n+\n+*/\n+pub fn spawn_service<T:Owned,Tb:Owned>(\n+            init: extern fn() -> (SendPacketBuffered<T, Tb>,\n+                                  RecvPacketBuffered<T, Tb>),\n+            service: ~fn(v: RecvPacketBuffered<T, Tb>))\n+        -> SendPacketBuffered<T, Tb> {\n+    let (client, server) = init();\n+\n+    // This is some nasty gymnastics required to safely move the pipe\n+    // into a new task.\n+    let server = Cell(server);\n+    do task::spawn {\n+        service(server.take());\n+    }\n+\n+    client\n+}\n+\n pub fn main() {\n     use oneshot::client::*;\n \n-    let c = pipes::spawn_service(oneshot::init, |p| { recv(p); });\n+    let c = spawn_service(oneshot::init, |p| { recv(p); });\n \n     let iotask = &uv::global_loop::get();\n     sleep(iotask, 500);"}]}