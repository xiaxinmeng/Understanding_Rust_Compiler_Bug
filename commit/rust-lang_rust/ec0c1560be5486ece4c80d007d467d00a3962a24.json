{"sha": "ec0c1560be5486ece4c80d007d467d00a3962a24", "node_id": "C_kwDOAAsO6NoAKGVjMGMxNTYwYmU1NDg2ZWNlNGM4MGQwMDdkNDY3ZDAwYTM5NjJhMjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-07T18:33:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-07T18:33:32Z"}, "message": "Rollup merge of #99017 - GuillaumeGomez:rustdoc-ending-enum, r=notriddle\n\nReplace boolean argument for print_where_clause with an enum to make code more clear\n\nAs you suggested ``@notriddle.`` Just not sure if the naming seems good to you?\n\nr? ``@notriddle``", "tree": {"sha": "85d89ef005cd5f481108265900128ce159d26500", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85d89ef005cd5f481108265900128ce159d26500"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec0c1560be5486ece4c80d007d467d00a3962a24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJixyb8CRBK7hj4Ov3rIwAAAZAIABk6/E0rPa5OngywISFOUPqZ\nJU/WqkazRifBPnNJqq7rbaPwY5YcTkkskx38u4yqTmw3VyXLzFG+sCD44KsTFk3Q\nddgWPcK2UAXgy8oTtRB+RnPpHH4HG+RaTIPaMuGlqkbaRSmGEzelBguJTDe45PP3\nu3wBvp3IBbKUt3JDm7SZvgEZnu71aCp88uxuD6RLQ4puksYwaSSHrPHMbUHn56mx\nfTxsAOOYwXCfiDlcGT+imRMb7oCMO/J51XDOfFOO3zvcuctsyQDrGHR1YGNEFBFE\nxGhWOZ9rghryWxCFI3kr2wRSISRgJPXKoMVAVSYjGw0TMpVF9kTjg/o8oJ4APzI=\n=2BJY\n-----END PGP SIGNATURE-----\n", "payload": "tree 85d89ef005cd5f481108265900128ce159d26500\nparent 16ad2f50b577a338c63a5cee2e34a4a4392e07e2\nparent d96d54103e9596a0b0916358b858278b5e6072ea\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1657218812 +0200\ncommitter GitHub <noreply@github.com> 1657218812 +0200\n\nRollup merge of #99017 - GuillaumeGomez:rustdoc-ending-enum, r=notriddle\n\nReplace boolean argument for print_where_clause with an enum to make code more clear\n\nAs you suggested ``@notriddle.`` Just not sure if the naming seems good to you?\n\nr? ``@notriddle``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec0c1560be5486ece4c80d007d467d00a3962a24", "html_url": "https://github.com/rust-lang/rust/commit/ec0c1560be5486ece4c80d007d467d00a3962a24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec0c1560be5486ece4c80d007d467d00a3962a24/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ad2f50b577a338c63a5cee2e34a4a4392e07e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ad2f50b577a338c63a5cee2e34a4a4392e07e2", "html_url": "https://github.com/rust-lang/rust/commit/16ad2f50b577a338c63a5cee2e34a4a4392e07e2"}, {"sha": "d96d54103e9596a0b0916358b858278b5e6072ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/d96d54103e9596a0b0916358b858278b5e6072ea", "html_url": "https://github.com/rust-lang/rust/commit/d96d54103e9596a0b0916358b858278b5e6072ea"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "84ab8d988bdb43303d595c587dac0bc86e8e1c24", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec0c1560be5486ece4c80d007d467d00a3962a24/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec0c1560be5486ece4c80d007d467d00a3962a24/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=ec0c1560be5486ece4c80d007d467d00a3962a24", "patch": "@@ -268,14 +268,20 @@ impl clean::Generics {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq)]\n+pub(crate) enum Ending {\n+    Newline,\n+    NoNewline,\n+}\n+\n /// * The Generics from which to emit a where-clause.\n /// * The number of spaces to indent each line with.\n /// * Whether the where-clause needs to add a comma and newline after the last bound.\n pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n     gens: &'a clean::Generics,\n     cx: &'a Context<'tcx>,\n     indent: usize,\n-    end_newline: bool,\n+    ending: Ending,\n ) -> impl fmt::Display + 'a + Captures<'tcx> {\n     use fmt::Write;\n \n@@ -342,7 +348,7 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n \n         let where_preds = comma_sep(where_predicates, false);\n         let clause = if f.alternate() {\n-            if end_newline {\n+            if ending == Ending::Newline {\n                 // add a space so stripping <br> tags and breaking spaces still renders properly\n                 format!(\" where{where_preds}, \")\n             } else {\n@@ -356,7 +362,7 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n             }\n             let where_preds = where_preds.to_string().replace(\"<br>\", &br_with_padding);\n \n-            if end_newline {\n+            if ending == Ending::Newline {\n                 let mut clause = \"&nbsp;\".repeat(indent.saturating_sub(1));\n                 // add a space so stripping <br> tags and breaking spaces still renders properly\n                 write!(\n@@ -1167,7 +1173,7 @@ impl clean::Impl {\n                 fmt_type(&self.for_, f, use_absolute, cx)?;\n             }\n \n-            fmt::Display::fmt(&print_where_clause(&self.generics, cx, 0, true), f)?;\n+            fmt::Display::fmt(&print_where_clause(&self.generics, cx, 0, Ending::Newline), f)?;\n             Ok(())\n         })\n     }"}, {"sha": "459b0fed6e872ddb34bace7d1fa30b2646dbaeb5", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec0c1560be5486ece4c80d007d467d00a3962a24/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec0c1560be5486ece4c80d007d467d00a3962a24/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ec0c1560be5486ece4c80d007d467d00a3962a24", "patch": "@@ -70,7 +70,7 @@ use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{\n     href, join_with_double_colon, print_abi_with_space, print_constness_with_space,\n-    print_default_space, print_generic_bounds, print_where_clause, Buffer, HrefError,\n+    print_default_space, print_generic_bounds, print_where_clause, Buffer, Ending, HrefError,\n     PrintWithSpace,\n };\n use crate::html::highlight;\n@@ -747,7 +747,7 @@ fn assoc_type(\n     if !bounds.is_empty() {\n         write!(w, \": {}\", print_generic_bounds(bounds, cx))\n     }\n-    write!(w, \"{}\", print_where_clause(generics, cx, indent, false));\n+    write!(w, \"{}\", print_where_clause(generics, cx, indent, Ending::NoNewline));\n     if let Some(default) = default {\n         write!(w, \" = {}\", default.print(cx))\n     }\n@@ -796,10 +796,10 @@ fn assoc_method(\n         header_len += 4;\n         let indent_str = \"    \";\n         render_attributes_in_pre(w, meth, indent_str);\n-        (4, indent_str, false)\n+        (4, indent_str, Ending::NoNewline)\n     } else {\n         render_attributes_in_code(w, meth);\n-        (0, \"\", true)\n+        (0, \"\", Ending::Newline)\n     };\n     w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fnname\\\">{\".len() + \"</a>\".len());\n     write!("}, {"sha": "daacc57a55a3ad5d925d9a1ba43ab7d7830a76b5", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ec0c1560be5486ece4c80d007d467d00a3962a24/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec0c1560be5486ece4c80d007d467d00a3962a24/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=ec0c1560be5486ece4c80d007d467d00a3962a24", "patch": "@@ -29,7 +29,7 @@ use crate::formats::{AssocItemRender, Impl, RenderMode};\n use crate::html::escape::Escape;\n use crate::html::format::{\n     join_with_double_colon, print_abi_with_space, print_constness_with_space, print_where_clause,\n-    Buffer, PrintWithSpace,\n+    Buffer, Ending, PrintWithSpace,\n };\n use crate::html::highlight;\n use crate::html::layout::Page;\n@@ -69,7 +69,7 @@ fn print_where_clause_and_check<'a, 'tcx: 'a>(\n     cx: &'a Context<'tcx>,\n ) -> bool {\n     let len_before = buffer.len();\n-    write!(buffer, \"{}\", print_where_clause(gens, cx, 0, true));\n+    write!(buffer, \"{}\", print_where_clause(gens, cx, 0, Ending::Newline));\n     len_before != buffer.len()\n }\n \n@@ -519,7 +519,7 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n                 abi = abi,\n                 name = name,\n                 generics = f.generics.print(cx),\n-                where_clause = print_where_clause(&f.generics, cx, 0, true),\n+                where_clause = print_where_clause(&f.generics, cx, 0, Ending::Newline),\n                 decl = f.decl.full_print(header_len, 0, header.asyncness, cx),\n                 notable_traits = notable_traits_decl(&f.decl, cx),\n             );\n@@ -556,7 +556,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n             );\n \n             if !t.generics.where_predicates.is_empty() {\n-                write!(w, \"{}\", print_where_clause(&t.generics, cx, 0, true));\n+                write!(w, \"{}\", print_where_clause(&t.generics, cx, 0, Ending::Newline));\n             } else {\n                 w.write_str(\" \");\n             }\n@@ -1025,7 +1025,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &\n                 \"trait {}{}{} = {};\",\n                 it.name.unwrap(),\n                 t.generics.print(cx),\n-                print_where_clause(&t.generics, cx, 0, true),\n+                print_where_clause(&t.generics, cx, 0, Ending::Newline),\n                 bounds(&t.bounds, true, cx)\n             );\n         });\n@@ -1049,7 +1049,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &cl\n                 \"type {}{}{where_clause} = impl {bounds};\",\n                 it.name.unwrap(),\n                 t.generics.print(cx),\n-                where_clause = print_where_clause(&t.generics, cx, 0, true),\n+                where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n                 bounds = bounds(&t.bounds, false, cx),\n             );\n         });\n@@ -1074,7 +1074,7 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n                 \"type {}{}{where_clause} = {type_};\",\n                 it.name.unwrap(),\n                 t.generics.print(cx),\n-                where_clause = print_where_clause(&t.generics, cx, 0, true),\n+                where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n                 type_ = t.type_.print(cx),\n             );\n         });\n@@ -1784,7 +1784,7 @@ fn render_struct(\n             }\n             w.write_str(\")\");\n             if let Some(g) = g {\n-                write!(w, \"{}\", print_where_clause(g, cx, 0, false));\n+                write!(w, \"{}\", print_where_clause(g, cx, 0, Ending::NoNewline));\n             }\n             // We only want a \";\" when we are displaying a tuple struct, not a variant tuple struct.\n             if structhead {\n@@ -1794,7 +1794,7 @@ fn render_struct(\n         CtorKind::Const => {\n             // Needed for PhantomData.\n             if let Some(g) = g {\n-                write!(w, \"{}\", print_where_clause(g, cx, 0, false));\n+                write!(w, \"{}\", print_where_clause(g, cx, 0, Ending::NoNewline));\n             }\n             w.write_str(\";\");\n         }"}]}