{"sha": "1efb5513699c2873c09caf59451628317d03f68b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZmI1NTEzNjk5YzI4NzNjMDljYWY1OTQ1MTYyODMxN2QwM2Y2OGI=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-01T14:51:31Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-04-06T16:33:59Z"}, "message": "Remove get_node_span", "tree": {"sha": "f225256eb7676dd31e3155c2e548b92b826e921b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f225256eb7676dd31e3155c2e548b92b826e921b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1efb5513699c2873c09caf59451628317d03f68b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1efb5513699c2873c09caf59451628317d03f68b", "html_url": "https://github.com/rust-lang/rust/commit/1efb5513699c2873c09caf59451628317d03f68b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1efb5513699c2873c09caf59451628317d03f68b/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ae0835df01f51c75b516b02ab2983576cf6b0b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae0835df01f51c75b516b02ab2983576cf6b0b3", "html_url": "https://github.com/rust-lang/rust/commit/6ae0835df01f51c75b516b02ab2983576cf6b0b3"}], "stats": {"total": 44, "additions": 4, "deletions": 40}, "files": [{"sha": "0dce0cb5d67b5cdcffeba3fa3dd7a30fd319c3fe", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1efb5513699c2873c09caf59451628317d03f68b/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1efb5513699c2873c09caf59451628317d03f68b/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=1efb5513699c2873c09caf59451628317d03f68b", "patch": "@@ -60,10 +60,9 @@ use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    def, Arm, BindingAnnotation, Block, Body, Constness, CrateItem, Expr, ExprKind, FieldDef, FnDecl, ForeignItem,\n-    GenericArgs, GenericParam, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind, LangItem, Lifetime, Local,\n-    MacroDef, MatchSource, Node, Param, Pat, PatKind, Path, PathSegment, QPath, Stmt, TraitItem, TraitItemKind,\n-    TraitRef, TyKind, Variant, Visibility,\n+    def, Arm, BindingAnnotation, Block, Body, Constness, Expr, ExprKind, FnDecl, GenericArgs, HirId, Impl, ImplItem,\n+    ImplItemKind, Item, ItemKind, LangItem, MatchSource, Node, Param, Pat, PatKind, Path, PathSegment, QPath,\n+    TraitItem, TraitItemKind, TraitRef, TyKind,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::exports::Export;\n@@ -75,7 +74,7 @@ use rustc_session::Session;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::sym;\n-use rustc_span::symbol::{kw, Ident, Symbol};\n+use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::Integer;\n \n@@ -712,41 +711,6 @@ fn line_span<T: LintContext>(cx: &T, span: Span) -> Span {\n     Span::new(line_start, span.hi(), span.ctxt())\n }\n \n-/// Gets the span of the node, if there is one.\n-pub fn get_node_span(node: Node<'_>) -> Option<Span> {\n-    match node {\n-        Node::Param(Param { span, .. })\n-        | Node::Item(Item { span, .. })\n-        | Node::ForeignItem(ForeignItem { span, .. })\n-        | Node::TraitItem(TraitItem { span, .. })\n-        | Node::ImplItem(ImplItem { span, .. })\n-        | Node::Variant(Variant { span, .. })\n-        | Node::Field(FieldDef { span, .. })\n-        | Node::Expr(Expr { span, .. })\n-        | Node::Stmt(Stmt { span, .. })\n-        | Node::PathSegment(PathSegment {\n-            ident: Ident { span, .. },\n-            ..\n-        })\n-        | Node::Ty(hir::Ty { span, .. })\n-        | Node::TraitRef(TraitRef {\n-            path: Path { span, .. },\n-            ..\n-        })\n-        | Node::Binding(Pat { span, .. })\n-        | Node::Pat(Pat { span, .. })\n-        | Node::Arm(Arm { span, .. })\n-        | Node::Block(Block { span, .. })\n-        | Node::Local(Local { span, .. })\n-        | Node::MacroDef(MacroDef { span, .. })\n-        | Node::Lifetime(Lifetime { span, .. })\n-        | Node::GenericParam(GenericParam { span, .. })\n-        | Node::Visibility(Visibility { span, .. })\n-        | Node::Crate(CrateItem { span, .. }) => Some(*span),\n-        Node::Ctor(_) | Node::AnonConst(_) => None,\n-    }\n-}\n-\n /// Gets the parent node, if any.\n pub fn get_parent_node(tcx: TyCtxt<'_>, id: HirId) -> Option<Node<'_>> {\n     tcx.hir().parent_iter(id).next().map(|(_, node)| node)"}]}