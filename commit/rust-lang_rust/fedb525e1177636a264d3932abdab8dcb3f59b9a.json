{"sha": "fedb525e1177636a264d3932abdab8dcb3f59b9a", "node_id": "C_kwDOAAsO6NoAKGZlZGI1MjVlMTE3NzYzNmEyNjRkMzkzMmFiZGFiOGRjYjNmNTliOWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-18T10:28:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-18T10:28:05Z"}, "message": "Rollup merge of #92018 - estebank:missing-ticks, r=oli-obk\n\nFix typo in \"new region bound\" suggestion\n\nThe lifetime name shoud always appear in text surrounded by `.", "tree": {"sha": "81e64bcc0ad5b71e68fc1c48b9b047f43f60d3ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81e64bcc0ad5b71e68fc1c48b9b047f43f60d3ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fedb525e1177636a264d3932abdab8dcb3f59b9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhvbe2CRBK7hj4Ov3rIwAAwLkIAHmR7ZslNzpBHNIj8L4mXi4c\n+hZzq+BKb6FRfXgMT6ZV93ua0ji1fJ8M+iD3yFVjazQuqIsmE5WbIrw8RiV0VXdB\nihy7tFkLrFe+p4cLa9tBdT6pXTfRJ6PREUmP86dy8pTRmCyL/WoO5r19LDZkrmMu\nSJQojlX65WEAtjXKP7pFRvbeNImzH//0tBisx79FdsVShdlVNyFYdJSCRdmv1+KX\nP5csEkywHKPkk1gq4g393oa7z1U/D8dgYIzfJZl/IEItxYBFFx0indGrNivcFMDc\n8JTOjF05HxCh9qDiOXOzEe62K+EUZlkvvcIKzpSYQWi47n03TUdvrsSM5Ca4uM4=\n=1xoT\n-----END PGP SIGNATURE-----\n", "payload": "tree 81e64bcc0ad5b71e68fc1c48b9b047f43f60d3ca\nparent 8bb238b8df99abdb325837bb72be7dedc4db90db\nparent 0b8bbac3ff38b6f68b4584199f7824ca29264998\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639823285 +0100\ncommitter GitHub <noreply@github.com> 1639823285 +0100\n\nRollup merge of #92018 - estebank:missing-ticks, r=oli-obk\n\nFix typo in \"new region bound\" suggestion\n\nThe lifetime name shoud always appear in text surrounded by `.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fedb525e1177636a264d3932abdab8dcb3f59b9a", "html_url": "https://github.com/rust-lang/rust/commit/fedb525e1177636a264d3932abdab8dcb3f59b9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fedb525e1177636a264d3932abdab8dcb3f59b9a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bb238b8df99abdb325837bb72be7dedc4db90db", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb238b8df99abdb325837bb72be7dedc4db90db", "html_url": "https://github.com/rust-lang/rust/commit/8bb238b8df99abdb325837bb72be7dedc4db90db"}, {"sha": "0b8bbac3ff38b6f68b4584199f7824ca29264998", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b8bbac3ff38b6f68b4584199f7824ca29264998", "html_url": "https://github.com/rust-lang/rust/commit/0b8bbac3ff38b6f68b4584199f7824ca29264998"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "bf867db9ce6effaa7a316e7584b0dbbe46d7dd97", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedb525e1177636a264d3932abdab8dcb3f59b9a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedb525e1177636a264d3932abdab8dcb3f59b9a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=fedb525e1177636a264d3932abdab8dcb3f59b9a", "patch": "@@ -275,7 +275,7 @@ pub fn unexpected_hidden_region_diagnostic(\n                     fn_returns,\n                     hidden_region.to_string(),\n                     None,\n-                    format!(\"captures {}\", hidden_region),\n+                    format!(\"captures `{}`\", hidden_region),\n                     None,\n                 )\n             }"}, {"sha": "2722c72c20a339a485453316d57e3382d39f4f7d", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr?ref=fedb525e1177636a264d3932abdab8dcb3f59b9a", "patch": "@@ -21,7 +21,7 @@ LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<\n    |                                    |\n    |                                    hidden type `(&'a u8, &'b u8)` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n    |                                                                                ++++"}, {"sha": "464f283095dad52c8bd420e12b4b1afa36bf273e", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=fedb525e1177636a264d3932abdab8dcb3f59b9a", "patch": "@@ -16,7 +16,7 @@ LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<\n    |                                    |\n    |                                    hidden type `(&'a u8, &'b u8)` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> + 'b {\n    |                                                                                ++++"}, {"sha": "c6d11293eec530c3f86c4c59123d8d0d891da1e6", "filename": "src/test/ui/impl-trait/hidden-lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr?ref=fedb525e1177636a264d3932abdab8dcb3f59b9a", "patch": "@@ -6,7 +6,7 @@ LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n    |                 |\n    |                 hidden type `&'a mut &'b T` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a + 'b {\n    |                                                                     ++++\n@@ -19,7 +19,7 @@ LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl S\n    |                        |\n    |                        hidden type `Rc<RefCell<&'b T>>` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a + 'b {\n    |                                                                                     ++++"}, {"sha": "32829a0a1b2fa60af0e0577a26e32fd92fa4e68b", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr?ref=fedb525e1177636a264d3932abdab8dcb3f59b9a", "patch": "@@ -6,7 +6,7 @@ LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> im\n    |                     |\n    |                     hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e> + 'b\n    |                                                                                             ++++"}, {"sha": "83ad23b253bb3729ebdf6927fbe8ce195ac9e33e", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr?ref=fedb525e1177636a264d3932abdab8dcb3f59b9a", "patch": "@@ -6,7 +6,7 @@ LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a,\n    |                     |\n    |                     hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b> + 'b\n    |                                                                                 ++++"}, {"sha": "2f6bd8ff377a544bdc2f559567cf3e739d62bbc6", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=fedb525e1177636a264d3932abdab8dcb3f59b9a", "patch": "@@ -6,7 +6,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n    |              |\n    |              hidden type `&i32` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n+help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ++++\n@@ -19,7 +19,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             |\n    |             hidden type `&'a i32` captures the lifetime `'a` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n+help: to declare that the `impl Trait` captures `'a`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ++++\n@@ -74,7 +74,7 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                              |\n    |                              hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:35:5: 35:31]` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) + 'b {\n    |                                                                              ++++"}, {"sha": "07ac0a8db35a923946ff2603c0ae527e00714444", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=fedb525e1177636a264d3932abdab8dcb3f59b9a", "patch": "@@ -6,7 +6,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n    |              |\n    |              hidden type `&i32` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n+help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ++++\n@@ -19,7 +19,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             |\n    |             hidden type `&'a i32` captures the lifetime `'a` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n+help: to declare that the `impl Trait` captures `'a`, you can add an explicit `'a` lifetime bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ++++\n@@ -119,7 +119,7 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                              |\n    |                              hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:35:5: 35:31]` captures the lifetime `'b` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'b, you can add an explicit `'b` lifetime bound\n+help: to declare that the `impl Trait` captures `'b`, you can add an explicit `'b` lifetime bound\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) + 'b {\n    |                                                                              ++++"}, {"sha": "cf854f67d0456436bcbae328748c2e1283dba6ed", "filename": "src/test/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=fedb525e1177636a264d3932abdab8dcb3f59b9a", "patch": "@@ -7,7 +7,7 @@ LL |\n LL | where 'x: 'y\n    |       -- hidden type `Cell<&'x u32>` captures the lifetime `'x` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'x, you can add an explicit `'x` lifetime bound\n+help: to declare that the `impl Trait` captures `'x`, you can add an explicit `'x` lifetime bound\n    |\n LL | fn foo(x: Cell<&'x u32>) -> impl Trait<'y> + 'x\n    |                                            ++++"}, {"sha": "7424da76182ab3bb703ff03322ce8eaae214d94f", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=fedb525e1177636a264d3932abdab8dcb3f59b9a", "patch": "@@ -6,7 +6,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         |\n    |                         hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:9:27: 9:34]>` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n+help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ++++\n@@ -19,7 +19,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         |\n    |                         hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:9:27: 9:34]>` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n+help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ++++\n@@ -32,7 +32,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    |\n    |                    hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:14:27: 14:34]>` captures the lifetime `'a` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n+help: to declare that the `impl Trait` captures `'a`, you can add an explicit `'a` lifetime bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                                             ++++\n@@ -45,7 +45,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    |\n    |                    hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:14:27: 14:34]>` captures the lifetime `'a` as defined here\n    |\n-help: to declare that the `impl Trait` captures 'a, you can add an explicit `'a` lifetime bound\n+help: to declare that the `impl Trait` captures `'a`, you can add an explicit `'a` lifetime bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                                             ++++"}, {"sha": "5e56e12eda021a109fc1e517bfa1b9d27c5a2ac4", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=fedb525e1177636a264d3932abdab8dcb3f59b9a", "patch": "@@ -6,7 +6,7 @@ LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n    |                  |\n    |                  hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0)) T` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0)), you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0))` lifetime bound\n+help: to declare that the `impl Trait` captures `ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0))` lifetime bound\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0)) {\n    |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"}, {"sha": "61ac7731777b473f1fe0ebbf445a980139e60ce7", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=fedb525e1177636a264d3932abdab8dcb3f59b9a", "patch": "@@ -6,7 +6,7 @@ LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          |\n    |                          hidden type `Pin<&Foo>` captures the lifetime `'_` as defined here\n    |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n+help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                                ++++"}, {"sha": "6f8200739b9deb222f6cd6ff7a7bd4d96380251a", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fedb525e1177636a264d3932abdab8dcb3f59b9a/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=fedb525e1177636a264d3932abdab8dcb3f59b9a", "patch": "@@ -6,7 +6,7 @@ LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                    |\n    |                    hidden type `Pin<&Foo>` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures '_, you can add an explicit `'_` lifetime bound\n+help: to declare that the `impl Trait` captures `'_`, you can add an explicit `'_` lifetime bound\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                          ++++"}]}