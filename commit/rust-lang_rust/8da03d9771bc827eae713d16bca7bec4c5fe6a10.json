{"sha": "8da03d9771bc827eae713d16bca7bec4c5fe6a10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYTAzZDk3NzFiYzgyN2VhZTcxM2QxNmJjYTdiZWM0YzVmZTZhMTA=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-07-30T20:36:21Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-07-30T20:36:21Z"}, "message": "Library changes for RFC #43", "tree": {"sha": "ba194b28561175e8d3614ce76bd74e24cbb87f82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba194b28561175e8d3614ce76bd74e24cbb87f82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8da03d9771bc827eae713d16bca7bec4c5fe6a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8da03d9771bc827eae713d16bca7bec4c5fe6a10", "html_url": "https://github.com/rust-lang/rust/commit/8da03d9771bc827eae713d16bca7bec4c5fe6a10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8da03d9771bc827eae713d16bca7bec4c5fe6a10/comments", "author": null, "committer": null, "parents": [{"sha": "5ebf4813a6503d5312f457b8a6ba7b6998a45f2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebf4813a6503d5312f457b8a6ba7b6998a45f2b", "html_url": "https://github.com/rust-lang/rust/commit/5ebf4813a6503d5312f457b8a6ba7b6998a45f2b"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "6a29a9a75b8e10bf9d70ac3e63c7df65d3feed33", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8da03d9771bc827eae713d16bca7bec4c5fe6a10/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da03d9771bc827eae713d16bca7bec4c5fe6a10/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=8da03d9771bc827eae713d16bca7bec4c5fe6a10", "patch": "@@ -1564,7 +1564,8 @@ fn remove<K: Ord, V>(node: &mut Option<Box<TreeNode<K, V>>>,\n                 save.level -= 1;\n \n                 if right_level > save.level {\n-                    for x in save.right.mut_iter() { x.level = save.level }\n+                    let save_level = save.level;\n+                    for x in save.right.mut_iter() { x.level = save_level }\n                 }\n \n                 skew(save);"}, {"sha": "ec7ed91917730d68141cd8a8e33e0b0e1d7b7edb", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8da03d9771bc827eae713d16bca7bec4c5fe6a10/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da03d9771bc827eae713d16bca7bec4c5fe6a10/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=8da03d9771bc827eae713d16bca7bec4c5fe6a10", "patch": "@@ -783,7 +783,7 @@ fn insert<T>(count: &mut uint, child: &mut Child<T>, key: uint, value: T,\n             *child = External(key, value);\n             return None;\n         }\n-        Internal(ref mut x) => {\n+        Internal(box ref mut x) => {\n             return insert(&mut x.count, &mut x.children[chunk(key, idx)], key, value, idx + 1);\n         }\n         External(stored_key, ref mut stored_value) if stored_key == key => {\n@@ -799,11 +799,17 @@ fn insert<T>(count: &mut uint, child: &mut Child<T>, key: uint, value: T,\n     match mem::replace(child, Nothing) {\n         External(stored_key, stored_value) => {\n             let mut new = box TrieNode::new();\n-            insert(&mut new.count,\n-                   &mut new.children[chunk(stored_key, idx)],\n-                   stored_key, stored_value, idx + 1);\n-            let ret = insert(&mut new.count, &mut new.children[chunk(key, idx)],\n-                         key, value, idx + 1);\n+\n+            let ret = {\n+                let new_interior = &mut *new;\n+                insert(&mut new_interior.count,\n+                       &mut new_interior.children[chunk(stored_key, idx)],\n+                       stored_key, stored_value, idx + 1);\n+                insert(&mut new_interior.count,\n+                       &mut new_interior.children[chunk(key, idx)],\n+                       key, value, idx + 1)\n+            };\n+\n             *child = Internal(new);\n             return ret;\n         }\n@@ -821,7 +827,7 @@ fn remove<T>(count: &mut uint, child: &mut Child<T>, key: uint,\n         }\n       }\n       External(..) => (None, false),\n-      Internal(ref mut x) => {\n+      Internal(box ref mut x) => {\n           let ret = remove(&mut x.count, &mut x.children[chunk(key, idx)],\n                            key, idx + 1);\n           (ret, x.count == 0)"}, {"sha": "32a16053fffcf3b0de1d6a780a55ae79f70f1c42", "filename": "src/libstd/collections/lru_cache.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8da03d9771bc827eae713d16bca7bec4c5fe6a10/src%2Flibstd%2Fcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8da03d9771bc827eae713d16bca7bec4c5fe6a10/src%2Flibstd%2Fcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Flru_cache.rs?ref=8da03d9771bc827eae713d16bca7bec4c5fe6a10", "patch": "@@ -331,7 +331,8 @@ impl<K, V> Drop for LruCache<K, V> {\n         unsafe {\n             let node: Box<LruEntry<K, V>> = mem::transmute(self.head);\n             // Prevent compiler from trying to drop the un-initialized field in the sigil node.\n-            let box LruEntry { key: k, value: v, .. } = node;\n+            let box internal_node = node;\n+            let LruEntry { next: _, prev: _, key: k, value: v } = internal_node;\n             mem::forget(k);\n             mem::forget(v);\n         }"}]}