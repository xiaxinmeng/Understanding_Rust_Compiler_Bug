{"sha": "e568cb45fefd580cb22f3ae0ed45f8598ba7cda1", "node_id": "C_kwDOAAsO6NoAKGU1NjhjYjQ1ZmVmZDU4MGNiMjJmM2FlMGVkNDVmODU5OGJhN2NkYTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-23T04:55:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-23T04:55:23Z"}, "message": "Rollup merge of #100382 - jackh726:gat-self-outlives-input, r=compiler-errors\n\nMake the GATS self outlives error take into GATs in the inputs\n\nBefore, the reasoning was that outlives should factor in to the outlives error, because that value is produced and inputs aren't. However, this is potentially confusing, and we can just require this for now and relax it later if we need. GATs in where clauses still don't count for the self outlives error, and I've added a test for that.\n\nThis now errors:\n```rust\ntrait Input {\n    type Item<'a>;\n    //~^ missing required\n    fn takes_item<'a>(&'a self, item: Self::Item<'a>);\n}\n```\n\nI've also added a test that this does not:\n```rust\ntrait WhereClause {\n    type Item<'a>;\n    fn takes_item<'a>(&'a self) where Self::Item<'a>: ;\n}\n```\n\nr? ``@compiler-errors``", "tree": {"sha": "f881e39272d65e2f54b48ed9f58329e6a12d9818", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f881e39272d65e2f54b48ed9f58329e6a12d9818"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e568cb45fefd580cb22f3ae0ed45f8598ba7cda1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBF27CRBK7hj4Ov3rIwAAkwgIAIfBxK8KJR0ZloAS57SZWAVe\nzWveUMko9krjP+5X4Z023LP8BOk6stMhALIvMeDc0qvrlUYMLvFIhRkosqAfUOEX\nZB+ODzLJm+crb14piqGBvcYp1U9f3wLF0TSj/4KcdN0N4iyb+4r4eyFUfRSvLUXE\nPEYNQuRexOt1FJZuu3bbdlJHhh/6QH15KPgTl+Dw+4b162X2MoiLjWyMIvvAqEFx\n/ooOGEe+VJZMBqYdw9fV9L361PNcsiJGi0OE6fnw9qIkEm+N4hoRpT4e3283zHu3\nCKlOplaVw/gwlPCSZ+oJr79l4WpcLHrPAu5t4o7fFSqJX8nAKeGLJQsJUnXwbec=\n=L5TE\n-----END PGP SIGNATURE-----\n", "payload": "tree f881e39272d65e2f54b48ed9f58329e6a12d9818\nparent 8818b00b634ee48e7617d9beb48c4d7bc6967f06\nparent e087871915a46943db670b3e16bd12f25a1d11a2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661230523 +0200\ncommitter GitHub <noreply@github.com> 1661230523 +0200\n\nRollup merge of #100382 - jackh726:gat-self-outlives-input, r=compiler-errors\n\nMake the GATS self outlives error take into GATs in the inputs\n\nBefore, the reasoning was that outlives should factor in to the outlives error, because that value is produced and inputs aren't. However, this is potentially confusing, and we can just require this for now and relax it later if we need. GATs in where clauses still don't count for the self outlives error, and I've added a test for that.\n\nThis now errors:\n```rust\ntrait Input {\n    type Item<'a>;\n    //~^ missing required\n    fn takes_item<'a>(&'a self, item: Self::Item<'a>);\n}\n```\n\nI've also added a test that this does not:\n```rust\ntrait WhereClause {\n    type Item<'a>;\n    fn takes_item<'a>(&'a self) where Self::Item<'a>: ;\n}\n```\n\nr? ``@compiler-errors``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e568cb45fefd580cb22f3ae0ed45f8598ba7cda1", "html_url": "https://github.com/rust-lang/rust/commit/e568cb45fefd580cb22f3ae0ed45f8598ba7cda1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e568cb45fefd580cb22f3ae0ed45f8598ba7cda1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8818b00b634ee48e7617d9beb48c4d7bc6967f06", "url": "https://api.github.com/repos/rust-lang/rust/commits/8818b00b634ee48e7617d9beb48c4d7bc6967f06", "html_url": "https://github.com/rust-lang/rust/commit/8818b00b634ee48e7617d9beb48c4d7bc6967f06"}, {"sha": "e087871915a46943db670b3e16bd12f25a1d11a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e087871915a46943db670b3e16bd12f25a1d11a2", "html_url": "https://github.com/rust-lang/rust/commit/e087871915a46943db670b3e16bd12f25a1d11a2"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "e8243d666b641536bffb4c14af9f0588d04dbb56", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e568cb45fefd580cb22f3ae0ed45f8598ba7cda1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e568cb45fefd580cb22f3ae0ed45f8598ba7cda1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e568cb45fefd580cb22f3ae0ed45f8598ba7cda1", "patch": "@@ -387,7 +387,7 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n                             tcx,\n                             param_env,\n                             item_hir_id,\n-                            sig.output(),\n+                            sig.inputs_and_output,\n                             // We also assume that all of the function signature's parameter types\n                             // are well formed.\n                             &sig.inputs().iter().copied().collect(),"}, {"sha": "9bb42d4ff1c1ba466ee496b03af16d55a3bc51cb", "filename": "src/test/ui/generic-associated-types/self-outlives-lint.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e568cb45fefd580cb22f3ae0ed45f8598ba7cda1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e568cb45fefd580cb22f3ae0ed45f8598ba7cda1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs?ref=e568cb45fefd580cb22f3ae0ed45f8598ba7cda1", "patch": "@@ -210,4 +210,17 @@ trait StaticReturnAndTakes<'a> {\n     fn bar<'b>(&self, arg: Self::Y<'b>);\n }\n \n+// We require bounds when the GAT appears in the inputs\n+trait Input {\n+    type Item<'a>;\n+    //~^ missing required\n+    fn takes_item<'a>(&'a self, item: Self::Item<'a>);\n+}\n+\n+// We don't require bounds when the GAT appears in the where clauses\n+trait WhereClause {\n+    type Item<'a>;\n+    fn takes_item<'a>(&'a self) where Self::Item<'a>: ;\n+}\n+\n fn main() {}"}, {"sha": "a43b35bd79c95977c55befb57b9df408a6a40905", "filename": "src/test/ui/generic-associated-types/self-outlives-lint.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e568cb45fefd580cb22f3ae0ed45f8598ba7cda1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e568cb45fefd580cb22f3ae0ed45f8598ba7cda1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.stderr?ref=e568cb45fefd580cb22f3ae0ed45f8598ba7cda1", "patch": "@@ -163,5 +163,16 @@ LL |     type Fut<'out>;\n    = note: this bound is currently required to ensure that impls have maximum flexibility\n    = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n \n-error: aborting due to 15 previous errors\n+error: missing required bound on `Item`\n+  --> $DIR/self-outlives-lint.rs:215:5\n+   |\n+LL |     type Item<'a>;\n+   |     ^^^^^^^^^^^^^-\n+   |                  |\n+   |                  help: add the required where clause: `where Self: 'a`\n+   |\n+   = note: this bound is currently required to ensure that impls have maximum flexibility\n+   = note: we are soliciting feedback, see issue #87479 <https://github.com/rust-lang/rust/issues/87479> for more information\n+\n+error: aborting due to 16 previous errors\n "}]}