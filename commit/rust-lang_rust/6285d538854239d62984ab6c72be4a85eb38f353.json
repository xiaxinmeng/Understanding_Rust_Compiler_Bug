{"sha": "6285d538854239d62984ab6c72be4a85eb38f353", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyODVkNTM4ODU0MjM5ZDYyOTg0YWI2YzcyYmU0YTg1ZWIzOGYzNTM=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-05-02T05:05:23Z"}, "committer": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-05-02T05:05:23Z"}, "message": "Handle new visibility types more gracefully", "tree": {"sha": "faaedb2d70ba031b19a2128132e6baa2b0352489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faaedb2d70ba031b19a2128132e6baa2b0352489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6285d538854239d62984ab6c72be4a85eb38f353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6285d538854239d62984ab6c72be4a85eb38f353", "html_url": "https://github.com/rust-lang/rust/commit/6285d538854239d62984ab6c72be4a85eb38f353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6285d538854239d62984ab6c72be4a85eb38f353/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd38acb86fa991f1272013d565992f2f68d76a5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd38acb86fa991f1272013d565992f2f68d76a5f", "html_url": "https://github.com/rust-lang/rust/commit/fd38acb86fa991f1272013d565992f2f68d76a5f"}], "stats": {"total": 57, "additions": 33, "deletions": 24}, "files": [{"sha": "b1dffebbc13771c060bf287d7becc6433aa72d9f", "filename": "src/items.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6285d538854239d62984ab6c72be4a85eb38f353/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6285d538854239d62984ab6c72be4a85eb38f353/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=6285d538854239d62984ab6c72be4a85eb38f353", "patch": "@@ -142,15 +142,16 @@ impl<'a> FmtVisitor<'a> {\n             ast::ForeignItemKind::Static(ref ty, is_mutable) => {\n                 // FIXME(#21): we're dropping potential comments in between the\n                 // function keywords here.\n+                let vis = match format_visibility(&item.vis) {\n+                    Some(s) => s,\n+                    None => return,\n+                };\n                 let mut_str = if is_mutable {\n                     \"mut \"\n                 } else {\n                     \"\"\n                 };\n-                let prefix = format!(\"{}static {}{}: \",\n-                                     format_visibility(&item.vis),\n-                                     mut_str,\n-                                     item.ident);\n+                let prefix = format!(\"{}static {}{}: \", vis, mut_str, item.ident);\n                 let offset = self.block_indent + prefix.len();\n                 // 1 = ;\n                 let width = self.config.max_width - offset.width() - 1;\n@@ -307,7 +308,10 @@ impl<'a> FmtVisitor<'a> {\n                       enum_def: &ast::EnumDef,\n                       generics: &ast::Generics,\n                       span: Span) {\n-        let header_str = format_header(\"enum \", ident, vis);\n+        let header_str = match format_header(\"enum \", ident, vis) {\n+            Some(s) => s,\n+            None => return,\n+        };\n         self.buffer.push_str(&header_str);\n \n         let enum_snippet = self.snippet(span);\n@@ -451,7 +455,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n                                ref self_ty,\n                                ref items) = item.node {\n         let mut result = String::new();\n-        result.push_str(format_visibility(&item.vis));\n+        result.push_str(try_opt!(format_visibility(&item.vis)));\n         result.push_str(format_unsafety(unsafety));\n         result.push_str(\"impl\");\n \n@@ -619,7 +623,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n            item.node {\n         let mut result = String::new();\n         let header = format!(\"{}{}trait {}\",\n-                             format_visibility(&item.vis),\n+                             try_opt!(format_visibility(&item.vis)),\n                              format_unsafety(unsafety),\n                              item.ident);\n \n@@ -744,7 +748,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n fn format_unit_struct(item_name: &str, ident: ast::Ident, vis: &ast::Visibility) -> Option<String> {\n     let mut result = String::with_capacity(1024);\n \n-    let header_str = format_header(item_name, ident, vis);\n+    let header_str = try_opt!(format_header(item_name, ident, vis));\n     result.push_str(&header_str);\n     result.push(';');\n \n@@ -762,7 +766,7 @@ fn format_struct_struct(context: &RewriteContext,\n                         -> Option<String> {\n     let mut result = String::with_capacity(1024);\n \n-    let header_str = format_header(item_name, ident, vis);\n+    let header_str = try_opt!(format_header(item_name, ident, vis));\n     result.push_str(&header_str);\n \n     let body_lo = context.codemap.span_after(span, \"{\");\n@@ -843,7 +847,7 @@ fn format_tuple_struct(context: &RewriteContext,\n                        -> Option<String> {\n     let mut result = String::with_capacity(1024);\n \n-    let header_str = format_header(item_name, ident, vis);\n+    let header_str = try_opt!(format_header(item_name, ident, vis));\n     result.push_str(&header_str);\n \n     // FIXME(#919): don't lose comments on empty tuple structs.\n@@ -929,7 +933,7 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n                           -> Option<String> {\n     let mut result = String::new();\n \n-    result.push_str(&format_visibility(&vis));\n+    result.push_str(&try_opt!(format_visibility(&vis)));\n     result.push_str(\"type \");\n     result.push_str(&ident.to_string());\n \n@@ -997,7 +1001,7 @@ impl Rewrite for ast::StructField {\n         }\n \n         let name = self.ident;\n-        let vis = format_visibility(&self.vis);\n+        let vis = try_opt!(format_visibility(&self.vis));\n         let mut attr_str = try_opt!(self.attrs\n             .rewrite(context, context.config.max_width - offset.width(), offset));\n         if !attr_str.is_empty() {\n@@ -1026,7 +1030,7 @@ pub fn rewrite_static(prefix: &str,\n                       context: &RewriteContext)\n                       -> Option<String> {\n     let prefix = format!(\"{}{} {}{}: \",\n-                         format_visibility(vis),\n+                         try_opt!(format_visibility(vis)),\n                          prefix,\n                          format_mutability(mutability),\n                          ident);\n@@ -1245,7 +1249,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n \n     let mut result = String::with_capacity(1024);\n     // Vis unsafety abi.\n-    result.push_str(format_visibility(vis));\n+    result.push_str(try_opt!(format_visibility(vis)));\n \n     if let ast::Constness::Const = constness {\n         result.push_str(\"const \");\n@@ -1801,8 +1805,8 @@ fn rewrite_where_clause(context: &RewriteContext,\n     }\n }\n \n-fn format_header(item_name: &str, ident: ast::Ident, vis: &ast::Visibility) -> String {\n-    format!(\"{}{}{}\", format_visibility(vis), item_name, ident)\n+fn format_header(item_name: &str, ident: ast::Ident, vis: &ast::Visibility) -> Option<String> {\n+    Some(format!(\"{}{}{}\", try_opt!(format_visibility(vis)), item_name, ident))\n }\n \n fn format_generics(context: &RewriteContext,"}, {"sha": "b80a5783799a7ed870468fcfc96a017a000f4667", "filename": "src/utils.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6285d538854239d62984ab6c72be4a85eb38f353/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6285d538854239d62984ab6c72be4a85eb38f353/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=6285d538854239d62984ab6c72be4a85eb38f353", "patch": "@@ -67,13 +67,13 @@ pub fn extra_offset(text: &str, offset: Indent) -> usize {\n }\n \n #[inline]\n-pub fn format_visibility(vis: &Visibility) -> &'static str {\n+pub fn format_visibility(vis: &Visibility) -> Option<&'static str> {\n     match *vis {\n-        Visibility::Public => \"pub \",\n-        Visibility::Inherited => \"\",\n-        // TODO(#970): Handle new visibility types.\n-        Visibility::Crate => unimplemented!(),\n-        Visibility::Restricted { .. } => unimplemented!(),\n+        Visibility::Public => Some(\"pub \"),\n+        Visibility::Inherited => Some(\"\"),\n+        // FIXME(#970): Handle new visibility types.\n+        Visibility::Crate => None,\n+        Visibility::Restricted { .. } => None,\n     }\n }\n "}, {"sha": "762f77a16e6c3811b2fd21742070bef3a90de500", "filename": "src/visitor.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6285d538854239d62984ab6c72be4a85eb38f353/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6285d538854239d62984ab6c72be4a85eb38f353/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=6285d538854239d62984ab6c72be4a85eb38f353", "patch": "@@ -467,7 +467,9 @@ impl<'a> FmtVisitor<'a> {\n         let local_file_name = self.codemap.span_to_filename(s);\n         let is_internal = local_file_name == self.codemap.span_to_filename(m.inner);\n \n-        self.buffer.push_str(utils::format_visibility(vis));\n+        if let Some(vis) = utils::format_visibility(vis) {\n+            self.buffer.push_str(vis);\n+        }\n         self.buffer.push_str(\"mod \");\n         self.buffer.push_str(&ident.to_string());\n \n@@ -502,7 +504,10 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     fn format_import(&mut self, vis: &ast::Visibility, vp: &ast::ViewPath, span: Span) {\n-        let vis = utils::format_visibility(vis);\n+        let vis = match utils::format_visibility(vis) {\n+            Some(s) => s,\n+            None => return,\n+        };\n         let mut offset = self.block_indent;\n         offset.alignment += vis.len() + \"use \".len();\n         // 1 = \";\""}]}