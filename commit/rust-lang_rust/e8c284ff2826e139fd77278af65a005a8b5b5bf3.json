{"sha": "e8c284ff2826e139fd77278af65a005a8b5b5bf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YzI4NGZmMjgyNmUxMzlmZDc3Mjc4YWY2NWEwMDVhOGI1YjViZjM=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-05-14T22:17:13Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-05-14T22:17:13Z"}, "message": "Make the UnifyValue for RegionVid ()", "tree": {"sha": "44c75fcfde28d3458acd6a0bddfc9a552978e670", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44c75fcfde28d3458acd6a0bddfc9a552978e670"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8c284ff2826e139fd77278af65a005a8b5b5bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c284ff2826e139fd77278af65a005a8b5b5bf3", "html_url": "https://github.com/rust-lang/rust/commit/e8c284ff2826e139fd77278af65a005a8b5b5bf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8c284ff2826e139fd77278af65a005a8b5b5bf3/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36a4d14c7edba21bba14df00b9e6e4a111dfc6f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a4d14c7edba21bba14df00b9e6e4a111dfc6f2", "html_url": "https://github.com/rust-lang/rust/commit/36a4d14c7edba21bba14df00b9e6e4a111dfc6f2"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "abbcff30cdaf2c20c1f7ae633ed2f2604a9a98a9", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e8c284ff2826e139fd77278af65a005a8b5b5bf3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c284ff2826e139fd77278af65a005a8b5b5bf3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=e8c284ff2826e139fd77278af65a005a8b5b5bf3", "patch": "@@ -3,7 +3,6 @@\n use self::CombineMapType::*;\n use self::UndoLog::*;\n \n-use super::unify_key;\n use super::{\n     InferCtxtUndoLogs, MiscVariable, RegionVariableOrigin, Rollback, Snapshot, SubregionOrigin,\n };\n@@ -408,7 +407,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         if *any_unifications {\n             *any_unifications = false;\n             self.unification_table()\n-                .reset_unifications(|vid| unify_key::RegionVidKey { min_vid: vid });\n+                .reset_unifications(|_| ());\n         }\n \n         data\n@@ -435,7 +434,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     ) -> RegionVid {\n         let vid = self.var_infos.push(RegionVariableInfo { origin, universe });\n \n-        let u_vid = self.unification_table().new_key(unify_key::RegionVidKey { min_vid: vid });\n+        let u_vid = self.unification_table().new_key(());\n         assert_eq!(vid, u_vid);\n         self.undo_log.push(AddVar(vid));\n         debug!(\"created new region variable {:?} in {:?} with origin {:?}\", vid, universe, origin);\n@@ -618,7 +617,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     }\n \n     pub fn opportunistic_resolve_var(&mut self, rid: RegionVid) -> ty::RegionVid {\n-        self.unification_table().probe_value(rid).min_vid\n+        self.unification_table().find(rid)\n     }\n \n     fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {"}, {"sha": "8209e3db7396554d78dd56616b4189d053ae67b8", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8c284ff2826e139fd77278af65a005a8b5b5bf3/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c284ff2826e139fd77278af65a005a8b5b5bf3/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=e8c284ff2826e139fd77278af65a005a8b5b5bf3", "patch": "@@ -38,7 +38,7 @@ impl UnifyValue for RegionVidKey {\n }\n \n impl UnifyKey for ty::RegionVid {\n-    type Value = RegionVidKey;\n+    type Value = ();\n     fn index(&self) -> u32 {\n         u32::from(*self)\n     }"}, {"sha": "d66c30ed2dd7fda43b274efbdd39eb40fbf11fae", "filename": "src/test/ui/traits/inductive-overflow/lifetime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8c284ff2826e139fd77278af65a005a8b5b5bf3/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c284ff2826e139fd77278af65a005a8b5b5bf3/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs?ref=e8c284ff2826e139fd77278af65a005a8b5b5bf3", "patch": "@@ -26,4 +26,6 @@ fn main() {\n     // Should only be a few notes.\n     is_send::<X<C<'static>>>();\n     //~^ ERROR overflow evaluating\n+    //~^^ 2 redundant\n+    //~^^^ required because of\n }"}, {"sha": "cc91393039536b819ce5ac41b402338f5b01c5e6", "filename": "src/test/ui/traits/inductive-overflow/lifetime.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8c284ff2826e139fd77278af65a005a8b5b5bf3/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c284ff2826e139fd77278af65a005a8b5b5bf3/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr?ref=e8c284ff2826e139fd77278af65a005a8b5b5bf3", "patch": "@@ -7,11 +7,13 @@ LL | fn is_send<S: NotAuto>() {}\n LL |     is_send::<X<C<'static>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n+note: required because of the requirements on the impl of `NotAuto` for `X<C<'_>>`\n   --> $DIR/lifetime.rs:19:12\n    |\n LL | impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n    |            ^^^^^^^     ^^^^\n+   = note: 2 redundant requirements hidden\n+   = note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n \n error: aborting due to previous error\n "}]}