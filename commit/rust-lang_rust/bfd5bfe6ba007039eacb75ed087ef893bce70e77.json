{"sha": "bfd5bfe6ba007039eacb75ed087ef893bce70e77", "node_id": "C_kwDOAAsO6NoAKGJmZDViZmU2YmEwMDcwMzllYWNiNzVlZDA4N2VmODkzYmNlNzBlNzc", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-10-09T19:18:08Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-10-09T19:18:08Z"}, "message": "Add a regression test for #39137", "tree": {"sha": "fa6d3854bcc23972a0039c79306ca4ce84c4865d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa6d3854bcc23972a0039c79306ca4ce84c4865d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfd5bfe6ba007039eacb75ed087ef893bce70e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd5bfe6ba007039eacb75ed087ef893bce70e77", "html_url": "https://github.com/rust-lang/rust/commit/bfd5bfe6ba007039eacb75ed087ef893bce70e77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfd5bfe6ba007039eacb75ed087ef893bce70e77/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ca356586fed56002b10920fd21ddf6fb12de797", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca356586fed56002b10920fd21ddf6fb12de797", "html_url": "https://github.com/rust-lang/rust/commit/0ca356586fed56002b10920fd21ddf6fb12de797"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "16738ec4ae4ec46b7469e48df203a4a5ddbb7d5d", "filename": "src/test/ui/deriving/deriving-hash.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bfd5bfe6ba007039eacb75ed087ef893bce70e77/src%2Ftest%2Fui%2Fderiving%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd5bfe6ba007039eacb75ed087ef893bce70e77/src%2Ftest%2Fui%2Fderiving%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-hash.rs?ref=bfd5bfe6ba007039eacb75ed087ef893bce70e77", "patch": "@@ -44,6 +44,17 @@ fn fake_hash<A: Hash>(v: &mut Vec<u8>, a: A) {\n     a.hash(&mut FakeHasher(v));\n }\n \n+struct OnlyOneByteHasher;\n+impl Hasher for OnlyOneByteHasher {\n+    fn finish(&self) -> u64 {\n+        unreachable!()\n+    }\n+\n+    fn write(&mut self, bytes: &[u8]) {\n+        assert_eq!(bytes.len(), 1);\n+    }\n+}\n+\n fn main() {\n     let person1 = Person {\n         id: 5,\n@@ -73,4 +84,13 @@ fn main() {\n     let mut v = vec![];\n     fake_hash(&mut v, SingleVariantEnum::A(17));\n     assert_eq!(vec![17], v);\n+\n+    // issue #39137\n+    #[repr(u8)]\n+    #[derive(Hash)]\n+    enum E {\n+        A,\n+        B,\n+    }\n+    E::A.hash(&mut OnlyOneByteHasher);\n }"}]}