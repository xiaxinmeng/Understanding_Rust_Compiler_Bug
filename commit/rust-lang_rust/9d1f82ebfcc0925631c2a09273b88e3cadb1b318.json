{"sha": "9d1f82ebfcc0925631c2a09273b88e3cadb1b318", "node_id": "C_kwDOAAsO6NoAKDlkMWY4MmViZmNjMDkyNTYzMWMyYTA5MjczYjg4ZTNjYWRiMWIzMTg", "commit": {"author": {"name": "Tomoaki Kawada", "email": "kawada@kmckk.co.jp", "date": "2022-03-22T02:13:56Z"}, "committer": {"name": "Tomoaki Kawada", "email": "kawada@kmckk.co.jp", "date": "2022-04-11T02:10:00Z"}, "message": "kmc-solid: Use `abort` to abort a program\n\nThe current implementation uses a `hlt` instruction, which is the most\ndirect way to notify a connected debugger but is not the most flexible\nway. This commit changes it to a call to the `abort` libc function,\nmaking it possible for a system designer to override its behavior as\nthey see fit.", "tree": {"sha": "5eddfeac890a37d3b942242d9c4034340f4ffcd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eddfeac890a37d3b942242d9c4034340f4ffcd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d1f82ebfcc0925631c2a09273b88e3cadb1b318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d1f82ebfcc0925631c2a09273b88e3cadb1b318", "html_url": "https://github.com/rust-lang/rust/commit/9d1f82ebfcc0925631c2a09273b88e3cadb1b318", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d1f82ebfcc0925631c2a09273b88e3cadb1b318/comments", "author": {"login": "kawadakk", "id": 81723441, "node_id": "MDQ6VXNlcjgxNzIzNDQx", "avatar_url": "https://avatars.githubusercontent.com/u/81723441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawadakk", "html_url": "https://github.com/kawadakk", "followers_url": "https://api.github.com/users/kawadakk/followers", "following_url": "https://api.github.com/users/kawadakk/following{/other_user}", "gists_url": "https://api.github.com/users/kawadakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawadakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawadakk/subscriptions", "organizations_url": "https://api.github.com/users/kawadakk/orgs", "repos_url": "https://api.github.com/users/kawadakk/repos", "events_url": "https://api.github.com/users/kawadakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kawadakk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kawadakk", "id": 81723441, "node_id": "MDQ6VXNlcjgxNzIzNDQx", "avatar_url": "https://avatars.githubusercontent.com/u/81723441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawadakk", "html_url": "https://github.com/kawadakk", "followers_url": "https://api.github.com/users/kawadakk/followers", "following_url": "https://api.github.com/users/kawadakk/following{/other_user}", "gists_url": "https://api.github.com/users/kawadakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawadakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawadakk/subscriptions", "organizations_url": "https://api.github.com/users/kawadakk/orgs", "repos_url": "https://api.github.com/users/kawadakk/repos", "events_url": "https://api.github.com/users/kawadakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kawadakk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f7fb6413d6d6c0c929b223e478e44c3db991b03", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7fb6413d6d6c0c929b223e478e44c3db991b03", "html_url": "https://github.com/rust-lang/rust/commit/1f7fb6413d6d6c0c929b223e478e44c3db991b03"}], "stats": {"total": 53, "additions": 6, "deletions": 47}, "files": [{"sha": "1e210ffb41f6269c25d7e8230877334214f6e3a8", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d1f82ebfcc0925631c2a09273b88e3cadb1b318/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d1f82ebfcc0925631c2a09273b88e3cadb1b318/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=9d1f82ebfcc0925631c2a09273b88e3cadb1b318", "patch": "@@ -38,12 +38,11 @@ pub unsafe extern \"C-unwind\" fn __rust_start_panic(_payload: *mut &mut dyn BoxMe\n     abort();\n \n     cfg_if::cfg_if! {\n-        if #[cfg(unix)] {\n+        if #[cfg(any(unix, target_os = \"solid_asp3\"))] {\n             unsafe fn abort() -> ! {\n                 libc::abort();\n             }\n         } else if #[cfg(any(target_os = \"hermit\",\n-                            target_os = \"solid_asp3\",\n                             all(target_vendor = \"fortanix\", target_env = \"sgx\")\n         ))] {\n             unsafe fn abort() -> ! {"}, {"sha": "8440d572cfbd3fe5d0e3eb3fd9325aa1d872c7c4", "filename": "library/std/src/sys/solid/abi/mod.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9d1f82ebfcc0925631c2a09273b88e3cadb1b318/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d1f82ebfcc0925631c2a09273b88e3cadb1b318/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fabi%2Fmod.rs?ref=9d1f82ebfcc0925631c2a09273b88e3cadb1b318", "patch": "@@ -4,32 +4,6 @@ mod fs;\n pub mod sockets;\n pub use self::fs::*;\n \n-#[inline(always)]\n-pub fn breakpoint_program_exited(tid: usize) {\n-    unsafe {\n-        match () {\n-            // SOLID_BP_PROGRAM_EXITED = 15\n-            #[cfg(target_arch = \"arm\")]\n-            () => core::arch::asm!(\"bkpt #15\", in(\"r0\") tid),\n-            #[cfg(target_arch = \"aarch64\")]\n-            () => core::arch::asm!(\"hlt #15\", in(\"x0\") tid),\n-        }\n-    }\n-}\n-\n-#[inline(always)]\n-pub fn breakpoint_abort() {\n-    unsafe {\n-        match () {\n-            // SOLID_BP_CSABORT = 16\n-            #[cfg(target_arch = \"arm\")]\n-            () => core::arch::asm!(\"bkpt #16\"),\n-            #[cfg(target_arch = \"aarch64\")]\n-            () => core::arch::asm!(\"hlt #16\"),\n-        }\n-    }\n-}\n-\n // `solid_types.h`\n pub use super::itron::abi::{ER, ER_ID, E_TMOUT, ID};\n "}, {"sha": "43e3fcfd4686fa0cc23a46f847595c81cdc18176", "filename": "library/std/src/sys/solid/mod.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9d1f82ebfcc0925631c2a09273b88e3cadb1b318/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d1f82ebfcc0925631c2a09273b88e3cadb1b318/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fmod.rs?ref=9d1f82ebfcc0925631c2a09273b88e3cadb1b318", "patch": "@@ -74,20 +74,9 @@ pub fn decode_error_kind(code: i32) -> crate::io::ErrorKind {\n     error::decode_error_kind(code)\n }\n \n-#[inline(always)]\n+#[inline]\n pub fn abort_internal() -> ! {\n-    loop {\n-        abi::breakpoint_abort();\n-    }\n-}\n-\n-// This function is needed by the panic runtime. The symbol is named in\n-// pre-link args for the target specification, so keep that in sync.\n-#[cfg(not(test))]\n-#[no_mangle]\n-// NB. used by both libunwind and libpanic_abort\n-pub extern \"C\" fn __rust_abort() {\n-    abort_internal();\n+    unsafe { libc::abort() }\n }\n \n pub fn hashmap_random_keys() -> (u64, u64) {"}, {"sha": "b5649d6e0ffb0cb24c1606a78dd752374d4d47a3", "filename": "library/std/src/sys/solid/os.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9d1f82ebfcc0925631c2a09273b88e3cadb1b318/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d1f82ebfcc0925631c2a09273b88e3cadb1b318/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fos.rs?ref=9d1f82ebfcc0925631c2a09273b88e3cadb1b318", "patch": "@@ -11,7 +11,7 @@ use crate::path::{self, PathBuf};\n use crate::sys_common::rwlock::StaticRwLock;\n use crate::vec;\n \n-use super::{abi, error, itron, memchr};\n+use super::{error, itron, memchr};\n \n // `solid` directly maps `errno`s to \u03bcITRON error codes.\n impl itron::error::ItronError {\n@@ -184,11 +184,8 @@ pub fn home_dir() -> Option<PathBuf> {\n     None\n }\n \n-pub fn exit(_code: i32) -> ! {\n-    let tid = itron::task::try_current_task_id().unwrap_or(0);\n-    loop {\n-        abi::breakpoint_program_exited(tid as usize);\n-    }\n+pub fn exit(code: i32) -> ! {\n+    rtabort!(\"exit({}) called\", code);\n }\n \n pub fn getpid() -> u32 {"}]}