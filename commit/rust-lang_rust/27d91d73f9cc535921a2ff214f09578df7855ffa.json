{"sha": "27d91d73f9cc535921a2ff214f09578df7855ffa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZDkxZDczZjljYzUzNTkyMWEyZmYyMTRmMDk1NzhkZjc4NTVmZmE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-03-04T12:52:22Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-03-04T13:20:42Z"}, "message": "Address comments", "tree": {"sha": "d755902928d5461cea8eb114c7c11062e2901b71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d755902928d5461cea8eb114c7c11062e2901b71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27d91d73f9cc535921a2ff214f09578df7855ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27d91d73f9cc535921a2ff214f09578df7855ffa", "html_url": "https://github.com/rust-lang/rust/commit/27d91d73f9cc535921a2ff214f09578df7855ffa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27d91d73f9cc535921a2ff214f09578df7855ffa/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "811b874716210f0e4135cbaa489f8b2857bbb031", "url": "https://api.github.com/repos/rust-lang/rust/commits/811b874716210f0e4135cbaa489f8b2857bbb031", "html_url": "https://github.com/rust-lang/rust/commit/811b874716210f0e4135cbaa489f8b2857bbb031"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "b416728563639567c90679494f6c3fedf2be855b", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27d91d73f9cc535921a2ff214f09578df7855ffa/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d91d73f9cc535921a2ff214f09578df7855ffa/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=27d91d73f9cc535921a2ff214f09578df7855ffa", "patch": "@@ -10,6 +10,7 @@\n \n use self::thread::{DepGraphThreadData, DepMessage};\n use middle::def_id::DefId;\n+use syntax::ast::NodeId;\n use middle::ty::TyCtxt;\n use rustc_front::hir;\n use rustc_front::intravisit::Visitor;\n@@ -70,7 +71,7 @@ pub enum DepNode {\n     IntrinsicCheck(DefId),\n     MatchCheck(DefId),\n     MirMapConstruction(DefId),\n-    MirPasses,\n+    MirTypeck(NodeId),\n     BorrowCheck(DefId),\n     RvalueCheck(DefId),\n     Reachability,"}, {"sha": "d15ef724d59ff79e60c98af20b8e8258ad4614ec", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27d91d73f9cc535921a2ff214f09578df7855ffa/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d91d73f9cc535921a2ff214f09578df7855ffa/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=27d91d73f9cc535921a2ff214f09578df7855ffa", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use dep_graph::DepNode;\n use mir::mir_map::MirMap;\n use mir::repr::Mir;\n use middle::ty::TyCtxt;\n@@ -23,8 +24,9 @@ pub trait MirMapPass<'tcx>: Pass {\n     fn run_pass(&mut self, cx: &TyCtxt<'tcx>, map: &mut MirMap<'tcx>);\n }\n \n+/// A pass which inspects Mir of functions in isolation.\n pub trait MirPass<'tcx>: Pass {\n-    fn run_pass(&mut self, cx: &TyCtxt<'tcx>, map: &mut Mir<'tcx>);\n+    fn run_pass(&mut self, cx: &TyCtxt<'tcx>, mir: &mut Mir<'tcx>);\n }\n \n impl<'tcx, T: MirPass<'tcx>> MirMapPass<'tcx> for T {"}, {"sha": "ff2f079f345b27d8dac051ae382bfe6baa97a9ae", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27d91d73f9cc535921a2ff214f09578df7855ffa/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d91d73f9cc535921a2ff214f09578df7855ffa/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=27d91d73f9cc535921a2ff214f09578df7855ffa", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::dep_graph::{DepGraph, DepNode};\n+use rustc::dep_graph::DepGraph;\n use rustc::front;\n use rustc::front::map as hir_map;\n use rustc_mir as mir;\n@@ -862,7 +862,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                  || mir::mir_map::build_mir_for_crate(tcx));\n \n         time(time_passes, \"MIR passes\", || {\n-            let _task = tcx.dep_graph.in_task(DepNode::MirPasses);\n             let mut passes = sess.mir_passes.borrow_mut();\n             // Push all the built-in passes.\n             passes.push_pass(box mir::transform::remove_dead_blocks::RemoveDeadBlocks);"}, {"sha": "0d942f35654a458c33c02f08a0fe93fc74caad92", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27d91d73f9cc535921a2ff214f09578df7855ffa/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d91d73f9cc535921a2ff214f09578df7855ffa/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=27d91d73f9cc535921a2ff214f09578df7855ffa", "patch": "@@ -11,6 +11,7 @@\n //! This pass type-checks the MIR to ensure it is not broken.\n #![allow(unreachable_code)]\n \n+use rustc::dep_graph::DepNode;\n use rustc::middle::infer::{self, InferCtxt};\n use rustc::middle::traits;\n use rustc::middle::ty::{self, Ty, TyCtxt};\n@@ -581,6 +582,7 @@ impl<'tcx> MirMapPass<'tcx> for TypeckMir {\n             return;\n         }\n         for (&id, mir) in &mut map.map {\n+            let _task = tcx.dep_graph.in_task(DepNode::MirTypeck(id));\n             let param_env = ty::ParameterEnvironment::for_item(tcx, id);\n             let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, Some(param_env));\n             let mut checker = TypeChecker::new(&infcx);"}]}