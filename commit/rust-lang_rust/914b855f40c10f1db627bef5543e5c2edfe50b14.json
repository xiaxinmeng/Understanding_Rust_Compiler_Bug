{"sha": "914b855f40c10f1db627bef5543e5c2edfe50b14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNGI4NTVmNDBjMTBmMWRiNjI3YmVmNTU0M2U1YzJlZGZlNTBiMTQ=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-02-02T19:30:52Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-02-16T21:10:14Z"}, "message": "Fix comments outdated during #66648", "tree": {"sha": "283760b4bde1c785b5fa40b7a5acb4cdf261b077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/283760b4bde1c785b5fa40b7a5acb4cdf261b077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/914b855f40c10f1db627bef5543e5c2edfe50b14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/914b855f40c10f1db627bef5543e5c2edfe50b14", "html_url": "https://github.com/rust-lang/rust/commit/914b855f40c10f1db627bef5543e5c2edfe50b14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/914b855f40c10f1db627bef5543e5c2edfe50b14/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "116dff95a37214e86f067715374a18a4de1621f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/116dff95a37214e86f067715374a18a4de1621f0", "html_url": "https://github.com/rust-lang/rust/commit/116dff95a37214e86f067715374a18a4de1621f0"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "74069bbf8a3e5a271cbc15949ec46705d13e9365", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/914b855f40c10f1db627bef5543e5c2edfe50b14/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/914b855f40c10f1db627bef5543e5c2edfe50b14/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=914b855f40c10f1db627bef5543e5c2edfe50b14", "patch": "@@ -227,7 +227,7 @@ impl<K: Clone, V: Clone> BTreeClone for BTreeMap<K, V> {\n impl<K: Clone + Ord, V: Clone> BTreeClone for BTreeMap<K, V> {\n     fn clone_from(&mut self, other: &Self) {\n         // This truncates `self` to `other.len()` by calling `split_off` on\n-        // the first key after `other.len()` elements if it exists\n+        // the first key after `other.len()` elements if it exists.\n         let split_off_key = if self.len() > other.len() {\n             let diff = self.len() - other.len();\n             if diff <= other.len() {\n@@ -247,19 +247,18 @@ impl<K: Clone + Ord, V: Clone> BTreeClone for BTreeMap<K, V> {\n         // After truncation, `self` is at most as long as `other` so this loop\n         // replaces every key-value pair in `self`. Since `oiter` is in sorted\n         // order and the structure of the `BTreeMap` stays the same,\n-        // the BTree invariants are maintained at the end of the loop\n+        // the BTree invariants are maintained at the end of the loop.\n         while !siter.is_empty() {\n             if let Some((ok, ov)) = oiter.next() {\n-                // SAFETY: This is safe because the `siter.front != siter.back` check\n-                // ensures that `siter` is nonempty\n+                // SAFETY: This is safe because `siter` is nonempty.\n                 let (sk, sv) = unsafe { siter.next_unchecked() };\n                 sk.clone_from(ok);\n                 sv.clone_from(ov);\n             } else {\n                 break;\n             }\n         }\n-        // If `other` is longer than `self`, the remaining elements are inserted\n+        // If `other` is longer than `self`, the remaining elements are inserted.\n         self.extend(oiter.map(|(k, v)| ((*k).clone(), (*v).clone())));\n     }\n }"}]}