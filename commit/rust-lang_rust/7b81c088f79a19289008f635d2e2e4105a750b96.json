{"sha": "7b81c088f79a19289008f635d2e2e4105a750b96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiODFjMDg4Zjc5YTE5Mjg5MDA4ZjYzNWQyZTJlNDEwNWE3NTBiOTY=", "commit": {"author": {"name": "Marco Groppo", "email": "marco.groppo@gmail.com", "date": "2019-03-26T22:12:46Z"}, "committer": {"name": "Marco Groppo", "email": "marco.groppo@gmail.com", "date": "2019-03-26T22:12:46Z"}, "message": "Flip any binary expression except assignments.", "tree": {"sha": "a08d008c4faf2c1defe803f66e2d3fef8b1ea60e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a08d008c4faf2c1defe803f66e2d3fef8b1ea60e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b81c088f79a19289008f635d2e2e4105a750b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b81c088f79a19289008f635d2e2e4105a750b96", "html_url": "https://github.com/rust-lang/rust/commit/7b81c088f79a19289008f635d2e2e4105a750b96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b81c088f79a19289008f635d2e2e4105a750b96/comments", "author": {"login": "marcogroppo", "id": 2735511, "node_id": "MDQ6VXNlcjI3MzU1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2735511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcogroppo", "html_url": "https://github.com/marcogroppo", "followers_url": "https://api.github.com/users/marcogroppo/followers", "following_url": "https://api.github.com/users/marcogroppo/following{/other_user}", "gists_url": "https://api.github.com/users/marcogroppo/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcogroppo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcogroppo/subscriptions", "organizations_url": "https://api.github.com/users/marcogroppo/orgs", "repos_url": "https://api.github.com/users/marcogroppo/repos", "events_url": "https://api.github.com/users/marcogroppo/events{/privacy}", "received_events_url": "https://api.github.com/users/marcogroppo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcogroppo", "id": 2735511, "node_id": "MDQ6VXNlcjI3MzU1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2735511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcogroppo", "html_url": "https://github.com/marcogroppo", "followers_url": "https://api.github.com/users/marcogroppo/followers", "following_url": "https://api.github.com/users/marcogroppo/following{/other_user}", "gists_url": "https://api.github.com/users/marcogroppo/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcogroppo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcogroppo/subscriptions", "organizations_url": "https://api.github.com/users/marcogroppo/orgs", "repos_url": "https://api.github.com/users/marcogroppo/repos", "events_url": "https://api.github.com/users/marcogroppo/events{/privacy}", "received_events_url": "https://api.github.com/users/marcogroppo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6030d6f500e42bde012a391666b68363d8479d21", "url": "https://api.github.com/repos/rust-lang/rust/commits/6030d6f500e42bde012a391666b68363d8479d21", "html_url": "https://github.com/rust-lang/rust/commit/6030d6f500e42bde012a391666b68363d8479d21"}], "stats": {"total": 120, "additions": 56, "deletions": 64}, "files": [{"sha": "ec377642e022ee1223340a7f4d2088ea98f6e59e", "filename": "crates/ra_assists/src/flip_binexpr.rs", "status": "modified", "additions": 56, "deletions": 64, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/7b81c088f79a19289008f635d2e2e4105a750b96/crates%2Fra_assists%2Fsrc%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b81c088f79a19289008f635d2e2e4105a750b96/crates%2Fra_assists%2Fsrc%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_binexpr.rs?ref=7b81c088f79a19289008f635d2e2e4105a750b96", "patch": "@@ -3,38 +3,26 @@ use ra_syntax::ast::{AstNode, BinExpr, BinOp};\n \n use crate::{AssistCtx, Assist, AssistId};\n \n-/// Flip binary comparison expressions (==, !=, >, >=, <, <=).\n+/// Flip binary expression assist.\n pub(crate) fn flip_binexpr(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let expr = ctx.node_at_offset::<BinExpr>()?;\n     let lhs = expr.lhs()?.syntax();\n     let rhs = expr.rhs()?.syntax();\n     let op_range = expr.op()?.range();\n-    // The assist should be available only if the cursor is on the operator\n+    // The assist should be applied only if the cursor is on the operator\n     let cursor_in_range = ctx.frange.range.is_subrange(&op_range);\n-    // The assist should be available only for these binary operators\n-    // (it should not change the meaning of the expression)\n-    let allowed_ops = [\n-        BinOp::EqualityTest,\n-        BinOp::NegatedEqualityTest,\n-        BinOp::GreaterTest,\n-        BinOp::GreaterEqualTest,\n-        BinOp::LesserTest,\n-        BinOp::LesserEqualTest,\n-    ];\n-    let op_kind = expr.op_kind()?;\n-    if !cursor_in_range || !allowed_ops.iter().any(|o| *o == op_kind) {\n+    if !cursor_in_range {\n         return None;\n     }\n-    let new_op = match op_kind {\n-        BinOp::GreaterTest => Some(\"<\"),\n-        BinOp::GreaterEqualTest => Some(\"<=\"),\n-        BinOp::LesserTest => Some(\">\"),\n-        BinOp::LesserEqualTest => Some(\">=\"),\n-        _ => None,\n-    };\n+    let action: FlipAction = expr.op_kind()?.into();\n+    // The assist should not be applied for certain operators\n+    if let FlipAction::DontFlip = action {\n+        return None;\n+    }\n+\n     ctx.add_action(AssistId(\"flip_binexpr\"), \"flip binary expression\", |edit| {\n         edit.target(op_range);\n-        if let Some(new_op) = new_op {\n+        if let FlipAction::FlipAndReplaceOp(new_op) = action {\n             edit.replace(op_range, new_op);\n         }\n         edit.replace(lhs.range(), rhs.text());\n@@ -44,59 +32,74 @@ pub(crate) fn flip_binexpr(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assis\n     ctx.build()\n }\n \n+enum FlipAction {\n+    // Flip the expression\n+    Flip,\n+    // Flip the expression and replace the operator with this string\n+    FlipAndReplaceOp(&'static str),\n+    // Do not flip the expression\n+    DontFlip,\n+}\n+\n+impl From<BinOp> for FlipAction {\n+    fn from(op_kind: BinOp) -> Self {\n+        match op_kind {\n+            BinOp::Assignment => FlipAction::DontFlip,\n+            BinOp::AddAssign => FlipAction::DontFlip,\n+            BinOp::DivAssign => FlipAction::DontFlip,\n+            BinOp::MulAssign => FlipAction::DontFlip,\n+            BinOp::RemAssign => FlipAction::DontFlip,\n+            BinOp::ShrAssign => FlipAction::DontFlip,\n+            BinOp::ShlAssign => FlipAction::DontFlip,\n+            BinOp::SubAssign => FlipAction::DontFlip,\n+            BinOp::BitOrAssign => FlipAction::DontFlip,\n+            BinOp::BitAndAssign => FlipAction::DontFlip,\n+            BinOp::BitXorAssign => FlipAction::DontFlip,\n+            BinOp::GreaterTest => FlipAction::FlipAndReplaceOp(\"<\"),\n+            BinOp::GreaterEqualTest => FlipAction::FlipAndReplaceOp(\"<=\"),\n+            BinOp::LesserTest => FlipAction::FlipAndReplaceOp(\">\"),\n+            BinOp::LesserEqualTest => FlipAction::FlipAndReplaceOp(\">=\"),\n+            _ => FlipAction::Flip,\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n \n-    use crate::helpers::{check_assist, check_assist_target};\n+    use crate::helpers::{ check_assist, check_assist_target, check_assist_not_applicable };\n \n     #[test]\n-    fn flip_eq_operands_for_simple_stmt() {\n-        check_assist(\n-            flip_binexpr,\n-            \"fn f() { let res = 1 ==<|> 2; }\",\n-            \"fn f() { let res = 2 ==<|> 1; }\",\n-        )\n-    }\n-\n-    #[test]\n-    fn flip_neq_operands_for_simple_stmt() {\n-        check_assist(\n-            flip_binexpr,\n-            \"fn f() { let res = 1 !=<|> 2; }\",\n-            \"fn f() { let res = 2 !=<|> 1; }\",\n-        )\n+    fn flip_binexpr_target_is_the_op() {\n+        check_assist_target(flip_binexpr, \"fn f() { let res = 1 ==<|> 2; }\", \"==\")\n     }\n \n     #[test]\n-    fn flip_gt_operands_for_simple_stmt() {\n-        check_assist(\n-            flip_binexpr,\n-            \"fn f() { let res = 1 ><|> 2; }\",\n-            \"fn f() { let res = 2 <<|> 1; }\",\n-        )\n+    fn flip_binexpr_not_applicable_for_assignment() {\n+        check_assist_not_applicable(flip_binexpr, \"fn f() { let mut _x = 1; _x +=<|> 2 }\")\n     }\n \n     #[test]\n-    fn flip_gteq_operands_for_simple_stmt() {\n+    fn flip_binexpr_works_for_eq() {\n         check_assist(\n             flip_binexpr,\n-            \"fn f() { let res = 1 >=<|> 2; }\",\n-            \"fn f() { let res = 2 <=<|> 1; }\",\n+            \"fn f() { let res = 1 ==<|> 2; }\",\n+            \"fn f() { let res = 2 ==<|> 1; }\",\n         )\n     }\n \n     #[test]\n-    fn flip_lt_operands_for_simple_stmt() {\n+    fn flip_binexpr_works_for_gt() {\n         check_assist(\n             flip_binexpr,\n-            \"fn f() { let res = 1 <<|> 2; }\",\n-            \"fn f() { let res = 2 ><|> 1; }\",\n+            \"fn f() { let res = 1 ><|> 2; }\",\n+            \"fn f() { let res = 2 <<|> 1; }\",\n         )\n     }\n \n     #[test]\n-    fn flip_lteq_operands_for_simple_stmt() {\n+    fn flip_binexpr_works_for_lteq() {\n         check_assist(\n             flip_binexpr,\n             \"fn f() { let res = 1 <=<|> 2; }\",\n@@ -105,7 +108,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn flip_eq_operands_for_complex_stmt() {\n+    fn flip_binexpr_works_for_complex_expr() {\n         check_assist(\n             flip_binexpr,\n             \"fn f() { let res = (1 + 1) ==<|> (2 + 2); }\",\n@@ -114,7 +117,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn flip_eq_operands_in_match_expr() {\n+    fn flip_binexpr_works_inside_match() {\n         check_assist(\n             flip_binexpr,\n             r#\"\n@@ -135,15 +138,4 @@ mod tests {\n             \"#,\n         )\n     }\n-\n-    #[test]\n-    fn flip_eq_operands_target() {\n-        check_assist_target(flip_binexpr, \"fn f() { let res = 1 ==<|> 2; }\", \"==\")\n-    }\n-\n-    #[test]\n-    fn flip_gt_operands_target() {\n-        check_assist_target(flip_binexpr, \"fn f() { let res = 1 ><|> 2; }\", \">\")\n-    }\n-\n }"}]}