{"sha": "4c3b42271ba74ff905dd722e6480701713408d60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjM2I0MjI3MWJhNzRmZjkwNWRkNzIyZTY0ODA3MDE3MTM0MDhkNjA=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-10-30T20:33:47Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-06T01:13:08Z"}, "message": "DSTify Box<T> implementation of PartialEq, PartialOrd, Eq, Ord", "tree": {"sha": "22c32a8ead8b11c09ca05d5aead4a6eb416bee2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22c32a8ead8b11c09ca05d5aead4a6eb416bee2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c3b42271ba74ff905dd722e6480701713408d60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3b42271ba74ff905dd722e6480701713408d60", "html_url": "https://github.com/rust-lang/rust/commit/4c3b42271ba74ff905dd722e6480701713408d60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c3b42271ba74ff905dd722e6480701713408d60/comments", "author": null, "committer": null, "parents": [{"sha": "1e5f311d1615ab4bca5b23d09dd678c2662022e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e5f311d1615ab4bca5b23d09dd678c2662022e6", "html_url": "https://github.com/rust-lang/rust/commit/1e5f311d1615ab4bca5b23d09dd678c2662022e6"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "d1fc921ffdab5ca4b9347439527863d350fd7f2c", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4c3b42271ba74ff905dd722e6480701713408d60/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3b42271ba74ff905dd722e6480701713408d60/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=4c3b42271ba74ff905dd722e6480701713408d60", "patch": "@@ -61,12 +61,16 @@ impl<T: Clone> Clone for Box<T> {\n     }\n }\n \n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T:PartialEq> PartialEq for Box<T> {\n     #[inline]\n     fn eq(&self, other: &Box<T>) -> bool { *(*self) == *(*other) }\n     #[inline]\n     fn ne(&self, other: &Box<T>) -> bool { *(*self) != *(*other) }\n }\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T:PartialOrd> PartialOrd for Box<T> {\n     #[inline]\n     fn partial_cmp(&self, other: &Box<T>) -> Option<Ordering> {\n@@ -81,14 +85,50 @@ impl<T:PartialOrd> PartialOrd for Box<T> {\n     #[inline]\n     fn gt(&self, other: &Box<T>) -> bool { *(*self) > *(*other) }\n }\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T: Ord> Ord for Box<T> {\n     #[inline]\n     fn cmp(&self, other: &Box<T>) -> Ordering {\n         (**self).cmp(&**other)\n     }\n }\n+// NOTE(stage0): remove impl after a snapshot\n+#[cfg(stage0)]\n impl<T: Eq> Eq for Box<T> {}\n \n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<Sized? T: PartialEq> PartialEq for Box<T> {\n+    #[inline]\n+    fn eq(&self, other: &Box<T>) -> bool { PartialEq::eq(&**self, &**other) }\n+    #[inline]\n+    fn ne(&self, other: &Box<T>) -> bool { PartialEq::ne(&**self, &**other) }\n+}\n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<Sized? T: PartialOrd> PartialOrd for Box<T> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Box<T>) -> Option<Ordering> {\n+        PartialOrd::partial_cmp(&**self, &**other)\n+    }\n+    #[inline]\n+    fn lt(&self, other: &Box<T>) -> bool { PartialOrd::lt(&**self, &**other) }\n+    #[inline]\n+    fn le(&self, other: &Box<T>) -> bool { PartialOrd::le(&**self, &**other) }\n+    #[inline]\n+    fn ge(&self, other: &Box<T>) -> bool { PartialOrd::ge(&**self, &**other) }\n+    #[inline]\n+    fn gt(&self, other: &Box<T>) -> bool { PartialOrd::gt(&**self, &**other) }\n+}\n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<Sized? T: Ord> Ord for Box<T> {\n+    #[inline]\n+    fn cmp(&self, other: &Box<T>) -> Ordering {\n+        Ord::cmp(&**self, &**other)\n+    }\n+}\n+#[cfg(not(stage0))]  // NOTE(stage0): remove cfg after a snapshot\n+impl<Sized? T: Eq> Eq for Box<T> {}\n+\n /// Extension methods for an owning `Any` trait object.\n #[unstable = \"post-DST and coherence changes, this will not be a trait but \\\n               rather a direct `impl` on `Box<Any>`\"]"}, {"sha": "b16c2ccb46eb887071d7c7928b04cf8581828c5d", "filename": "src/test/run-pass/deriving-eq-ord-boxed-slice.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c3b42271ba74ff905dd722e6480701713408d60/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c3b42271ba74ff905dd722e6480701713408d60/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs?ref=4c3b42271ba74ff905dd722e6480701713408d60", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving(PartialEq, PartialOrd, Eq, Ord)]\n+struct Foo(Box<[u8]>);\n+\n+pub fn main() {\n+    let a = Foo(box [0, 1, 2]);\n+    let b = Foo(box [0, 1, 2]);\n+    assert!(a == b);\n+    println!(\"{}\", a != b);\n+    println!(\"{}\", a < b);\n+    println!(\"{}\", a <= b);\n+    println!(\"{}\", a == b);\n+    println!(\"{}\", a > b);\n+    println!(\"{}\", a >= b);\n+}"}]}