{"sha": "efdcd5efef53dd1fb781d4db7aea8834a8ebaffe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZGNkNWVmZWY1M2RkMWZiNzgxZDRkYjdhZWE4ODM0YThlYmFmZmU=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2017-09-17T11:19:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-17T11:19:05Z"}, "message": "Rollup merge of #44549 - gaurikholkar:master, r=arielb1\n\nextend E0623 for earlybound and latebound for structs\n\nThis fixes #44508\n\nr? @nikomatsakis", "tree": {"sha": "e20ab7a106a5cd3d5135eb959122e905b362a145", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e20ab7a106a5cd3d5135eb959122e905b362a145"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efdcd5efef53dd1fb781d4db7aea8834a8ebaffe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efdcd5efef53dd1fb781d4db7aea8834a8ebaffe", "html_url": "https://github.com/rust-lang/rust/commit/efdcd5efef53dd1fb781d4db7aea8834a8ebaffe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efdcd5efef53dd1fb781d4db7aea8834a8ebaffe/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eea2f5596a0ee32d129d0dc9a64439cbe4bcf802", "url": "https://api.github.com/repos/rust-lang/rust/commits/eea2f5596a0ee32d129d0dc9a64439cbe4bcf802", "html_url": "https://github.com/rust-lang/rust/commit/eea2f5596a0ee32d129d0dc9a64439cbe4bcf802"}, {"sha": "52294434b0c8b8f792cf81c6e1816006358e64b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/52294434b0c8b8f792cf81c6e1816006358e64b2", "html_url": "https://github.com/rust-lang/rust/commit/52294434b0c8b8f792cf81c6e1816006358e64b2"}], "stats": {"total": 117, "additions": 97, "deletions": 20}, "files": [{"sha": "186eda95fecbde4424d34a3325fbb723ed94cbd5", "filename": "fn.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eea2f5596a0ee32d129d0dc9a64439cbe4bcf802/fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea2f5596a0ee32d129d0dc9a64439cbe4bcf802/fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/fn.rs?ref=eea2f5596a0ee32d129d0dc9a64439cbe4bcf802", "patch": "@@ -1,8 +0,0 @@\n-\n-fn foo(x:  fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n-// Debruijn   1    1            1        1\n-// Anon-Index 0    1            0        1\n-//            ------\n-//            debruijn indices are shifted by 1 in here\n-  y.push(z); // index will be zero or one\n-}"}, {"sha": "536715ffadb15b7f7501ac78af5cd39c6791e413", "filename": "src/librustc/infer/error_reporting/different_lifetimes.rs", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/efdcd5efef53dd1fb781d4db7aea8834a8ebaffe/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcd5efef53dd1fb781d4db7aea8834a8ebaffe/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fdifferent_lifetimes.rs?ref=efdcd5efef53dd1fb781d4db7aea8834a8ebaffe", "patch": "@@ -287,6 +287,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                                           found_it: false,\n                                           bound_region: self.bound_region,\n                                           hir_map: self.hir_map,\n+                                          depth: self.depth,\n                                       };\n                 intravisit::walk_ty(subvisitor, arg); // call walk_ty; as visit_ty is empty,\n                 // this will visit only outermost type\n@@ -313,6 +314,7 @@ struct TyPathVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     hir_map: &'a hir::map::Map<'gcx>,\n     found_it: bool,\n     bound_region: ty::BoundRegion,\n+    depth: u32,\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n@@ -321,24 +323,47 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n     }\n \n     fn visit_lifetime(&mut self, lifetime: &hir::Lifetime) {\n-        let br_index = match self.bound_region {\n-            ty::BrAnon(index) => index,\n-            _ => return,\n-        };\n \n         let hir_id = self.infcx.tcx.hir.node_to_hir_id(lifetime.id);\n-        match self.infcx.tcx.named_region(hir_id) {\n+        match (self.infcx.tcx.named_region(hir_id), self.bound_region) {\n             // the lifetime of the TyPath!\n-            Some(rl::Region::LateBoundAnon(debruijn_index, anon_index)) => {\n-                if debruijn_index.depth == 1 && anon_index == br_index {\n+            (Some(rl::Region::LateBoundAnon(debruijn_index, anon_index)), ty::BrAnon(br_index)) => {\n+                if debruijn_index.depth == self.depth && anon_index == br_index {\n+                    self.found_it = true;\n+                    return;\n+                }\n+            }\n+\n+            (Some(rl::Region::EarlyBound(_, id)), ty::BrNamed(def_id, _)) => {\n+                debug!(\"EarlyBound self.infcx.tcx.hir.local_def_id(id)={:?} \\\n+                                        def_id={:?}\",\n+                       self.infcx.tcx.hir.local_def_id(id),\n+                       def_id);\n+                if self.infcx.tcx.hir.local_def_id(id) == def_id {\n+                    self.found_it = true;\n+                    return; // we can stop visiting now\n+                }\n+            }\n+\n+            (Some(rl::Region::LateBound(debruijn_index, id)), ty::BrNamed(def_id, _)) => {\n+                debug!(\"FindNestedTypeVisitor::visit_ty: LateBound depth = {:?}\",\n+                       debruijn_index.depth);\n+                debug!(\"self.infcx.tcx.hir.local_def_id(id)={:?}\",\n+                       self.infcx.tcx.hir.local_def_id(id));\n+                debug!(\"def_id={:?}\", def_id);\n+                if debruijn_index.depth == self.depth &&\n+                   self.infcx.tcx.hir.local_def_id(id) == def_id {\n                     self.found_it = true;\n+                    return; // we can stop visiting now\n                 }\n             }\n-            Some(rl::Region::Static) |\n-            Some(rl::Region::EarlyBound(_, _)) |\n-            Some(rl::Region::LateBound(_, _)) |\n-            Some(rl::Region::Free(_, _)) |\n-            None => {\n+\n+            (Some(rl::Region::Static), _) |\n+            (Some(rl::Region::EarlyBound(_, _)), _) |\n+            (Some(rl::Region::LateBound(_, _)), _) |\n+            (Some(rl::Region::LateBoundAnon(_, _)), _) |\n+            (Some(rl::Region::Free(_, _)), _) |\n+            (None, _) => {\n                 debug!(\"no arg found\");\n             }\n         }"}, {"sha": "0fef709ae53637b43c0e9e0c82bf1b2f852c2bf0", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/efdcd5efef53dd1fb781d4db7aea8834a8ebaffe/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcd5efef53dd1fb781d4db7aea8834a8ebaffe/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.rs?ref=efdcd5efef53dd1fb781d4db7aea8834a8ebaffe", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+struct Ref<'a> {\n+    x: &'a u32,\n+}\n+\n+fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n+    where &'a (): Sized,\n+          &'b u32: Sized\n+{\n+    x.push(y);\n+}\n+\n+fn main() {}"}, {"sha": "59bf5d17222b7e189a10f794b502fb20291b9040", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/efdcd5efef53dd1fb781d4db7aea8834a8ebaffe/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efdcd5efef53dd1fb781d4db7aea8834a8ebaffe/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.stderr?ref=efdcd5efef53dd1fb781d4db7aea8834a8ebaffe", "patch": "@@ -0,0 +1,11 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:18:12\n+   |\n+14 | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n+   |                           -------      ------- these two types are declared with different lifetimes...\n+...\n+18 |     x.push(y);\n+   |            ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "a91d0b55dc7abea69c25bb8f7b1730b9eb6ebe23", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/efdcd5efef53dd1fb781d4db7aea8834a8ebaffe/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcd5efef53dd1fb781d4db7aea8834a8ebaffe/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.rs?ref=efdcd5efef53dd1fb781d4db7aea8834a8ebaffe", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+struct Ref<'a> {\n+    x: &'a u32,\n+}\n+\n+fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n+    x.push(y);\n+}\n+\n+fn main() {}"}, {"sha": "878351210681bef588a9b80a960433e2878087fe", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efdcd5efef53dd1fb781d4db7aea8834a8ebaffe/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efdcd5efef53dd1fb781d4db7aea8834a8ebaffe/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.stderr?ref=efdcd5efef53dd1fb781d4db7aea8834a8ebaffe", "patch": "@@ -0,0 +1,10 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:15:12\n+   |\n+14 | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n+   |                           -------      ------- these two types are declared with different lifetimes...\n+15 |     x.push(y);\n+   |            ^ ...but data from `y` flows into `x` here\n+\n+error: aborting due to previous error\n+"}]}