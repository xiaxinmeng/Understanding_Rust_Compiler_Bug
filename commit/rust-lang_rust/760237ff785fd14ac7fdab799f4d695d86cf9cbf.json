{"sha": "760237ff785fd14ac7fdab799f4d695d86cf9cbf", "node_id": "C_kwDOAAsO6NoAKDc2MDIzN2ZmNzg1ZmQxNGFjN2ZkYWI3OTlmNGQ2OTVkODZjZjljYmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-06T01:03:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-06T01:03:26Z"}, "message": "Auto merge of #97710 - RalfJung:ptr-addr, r=thomcc\n\nimplement ptr.addr() via transmute\n\nAs per the discussion in https://github.com/rust-lang/unsafe-code-guidelines/issues/286, the semantics for ptr-to-int transmutes that we are going with for now is to make them strip provenance without exposing it. That's exactly what `ptr.addr()` does! So we can implement `ptr.addr()` via `transmute`. This also means that once https://github.com/rust-lang/rust/pull/97684 lands, Miri can distinguish `ptr.addr()` from `ptr.expose_addr()`, and the following code will correctly be called out as having UB (if permissive provenance mode is enabled, which will become the default once the [implementation is complete](https://github.com/rust-lang/miri/issues/2133)):\n\n```rust\nfn main() {\n    let x: i32 = 3;\n    let x_ptr = &x as *const i32;\n\n    let x_usize: usize = x_ptr.addr();\n    // Cast back an address that did *not* get exposed.\n    let ptr = std::ptr::from_exposed_addr::<i32>(x_usize);\n    assert_eq!(unsafe { *ptr }, 3); //~ ERROR Undefined Behavior: dereferencing pointer failed\n}\n```\n\nThis completes the Miri implementation of the new distinctions introduced by strict provenance. :)\n\nCc `@Gankra` -- for now I left in your `FIXME(strict_provenance_magic)` saying these should be intrinsics, but I do not necessarily agree that they should be. Or if we have an intrinsic, I think it should behave exactly like the `transmute` does, which makes one wonder why the intrinsic should be needed.", "tree": {"sha": "ee42fe59a5f36eb959f09b680909cba20bbf7227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee42fe59a5f36eb959f09b680909cba20bbf7227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/760237ff785fd14ac7fdab799f4d695d86cf9cbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/760237ff785fd14ac7fdab799f4d695d86cf9cbf", "html_url": "https://github.com/rust-lang/rust/commit/760237ff785fd14ac7fdab799f4d695d86cf9cbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/760237ff785fd14ac7fdab799f4d695d86cf9cbf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fee3a459dd6aba8e34a5b99f0fbcb4218a1e2401", "url": "https://api.github.com/repos/rust-lang/rust/commits/fee3a459dd6aba8e34a5b99f0fbcb4218a1e2401", "html_url": "https://github.com/rust-lang/rust/commit/fee3a459dd6aba8e34a5b99f0fbcb4218a1e2401"}, {"sha": "4291332175d12e79e6061cdc3f5dccac2e28b969", "url": "https://api.github.com/repos/rust-lang/rust/commits/4291332175d12e79e6061cdc3f5dccac2e28b969", "html_url": "https://github.com/rust-lang/rust/commit/4291332175d12e79e6061cdc3f5dccac2e28b969"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "490d7594bb82fc67f5a8c8a0f919439d9192ad29", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760237ff785fd14ac7fdab799f4d695d86cf9cbf/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760237ff785fd14ac7fdab799f4d695d86cf9cbf/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=760237ff785fd14ac7fdab799f4d695d86cf9cbf", "patch": "@@ -180,7 +180,9 @@ impl<T: ?Sized> *const T {\n         T: Sized,\n     {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n-        self as usize\n+        // SAFETY: Pointer-to-integer transmutes are valid (if you are okay with losing the\n+        // provenance).\n+        unsafe { mem::transmute(self) }\n     }\n \n     /// Gets the \"address\" portion of the pointer, and 'exposes' the \"provenance\" part for future"}, {"sha": "5846c855e8f64ba68fba795c657c0b9356baf36c", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/760237ff785fd14ac7fdab799f4d695d86cf9cbf/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760237ff785fd14ac7fdab799f4d695d86cf9cbf/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=760237ff785fd14ac7fdab799f4d695d86cf9cbf", "patch": "@@ -184,7 +184,9 @@ impl<T: ?Sized> *mut T {\n         T: Sized,\n     {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n-        self as usize\n+        // SAFETY: Pointer-to-integer transmutes are valid (if you are okay with losing the\n+        // provenance).\n+        unsafe { mem::transmute(self) }\n     }\n \n     /// Gets the \"address\" portion of the pointer, and 'exposes' the \"provenance\" part for future"}]}