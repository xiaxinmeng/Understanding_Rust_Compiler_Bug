{"sha": "eec3ae3feb8fc812df5f982940511a43c2de0df0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYzNhZTNmZWI4ZmM4MTJkZjVmOTgyOTQwNTExYTQzYzJkZTBkZjA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-06T22:38:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-06T22:38:43Z"}, "message": "Rollup merge of #84905 - RalfJung:copy, r=oli-obk\n\nCTFE engine: rename copy \u2192 copy_intrinsic, move to intrinsics.rs\n\nThe `copy` name is confusing for this function because we also have `copy_op` which is pretty different. I hope `copy_intrinsic` is clearer. Also `step.rs` should really just contain the main loop and opcode dispatch, so move this helper function to a more appropriate place.\n\nr? ``````@oli-obk``````", "tree": {"sha": "6f27c4bd6dff8f8895949edb5a1db3dc993df5bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f27c4bd6dff8f8895949edb5a1db3dc993df5bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eec3ae3feb8fc812df5f982940511a43c2de0df0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglG/zCRBK7hj4Ov3rIwAAkvMIAKOJGFjDjDKZ5G6h8uV7IJg8\nuXkPi34Hf8CwX1mfVdffEGD2sVV1ySgbFGm4uTaTV8oZmsxunJrsW0790LJ3Obq9\nTtY0KD4BbrPRuPz3Ry07tA98CGYbGCIX6hep+tG6yg/GWypFA2M5ekjNEwQ3s/UY\nATL3nZ/OqhwLMsLaloFkSQaQVIX+RJuLvcIFXZubekswzrzdcvsPyMX5YYTV84zG\nGDQ8yvwyKlSkGRZMHAMHuQSWnpjnPX/sjbnPQ8XimZIWts9xqTCYFvRZt8jQ/g7U\nHxQEYvAxvIb+OtcM/iYff+wJFbFf+36KoTCNyHTVW18Me781n0NdqqRmBDCvQV8=\n=TBI2\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f27c4bd6dff8f8895949edb5a1db3dc993df5bf\nparent b44e56f9685fe2ed5386669324cfeb3dbb512d89\nparent 0b94338a267fce3c25a25d09ab18d00d0dc21268\nauthor Dylan DPC <dylan.dpc@gmail.com> 1620340723 +0200\ncommitter GitHub <noreply@github.com> 1620340723 +0200\n\nRollup merge of #84905 - RalfJung:copy, r=oli-obk\n\nCTFE engine: rename copy \u2192 copy_intrinsic, move to intrinsics.rs\n\nThe `copy` name is confusing for this function because we also have `copy_op` which is pretty different. I hope `copy_intrinsic` is clearer. Also `step.rs` should really just contain the main loop and opcode dispatch, so move this helper function to a more appropriate place.\n\nr? ``````@oli-obk``````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eec3ae3feb8fc812df5f982940511a43c2de0df0", "html_url": "https://github.com/rust-lang/rust/commit/eec3ae3feb8fc812df5f982940511a43c2de0df0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eec3ae3feb8fc812df5f982940511a43c2de0df0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b44e56f9685fe2ed5386669324cfeb3dbb512d89", "url": "https://api.github.com/repos/rust-lang/rust/commits/b44e56f9685fe2ed5386669324cfeb3dbb512d89", "html_url": "https://github.com/rust-lang/rust/commit/b44e56f9685fe2ed5386669324cfeb3dbb512d89"}, {"sha": "0b94338a267fce3c25a25d09ab18d00d0dc21268", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b94338a267fce3c25a25d09ab18d00d0dc21268", "html_url": "https://github.com/rust-lang/rust/commit/0b94338a267fce3c25a25d09ab18d00d0dc21268"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "292306f6cde6ee5c1df7eb03753cdd6575bc582f", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/eec3ae3feb8fc812df5f982940511a43c2de0df0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec3ae3feb8fc812df5f982940511a43c2de0df0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=eec3ae3feb8fc812df5f982940511a43c2de0df0", "patch": "@@ -323,7 +323,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_scalar(result, dest)?;\n             }\n             sym::copy => {\n-                self.copy(&args[0], &args[1], &args[2], /*nonoverlapping*/ false)?;\n+                self.copy_intrinsic(&args[0], &args[1], &args[2], /*nonoverlapping*/ false)?;\n             }\n             sym::offset => {\n                 let ptr = self.read_scalar(&args[0])?.check_init()?;\n@@ -530,4 +530,36 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         )?;\n         Ok(offset_ptr)\n     }\n+\n+    /// Copy `count*size_of::<T>()` many bytes from `*src` to `*dst`.\n+    pub(crate) fn copy_intrinsic(\n+        &mut self,\n+        src: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        dst: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        count: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        nonoverlapping: bool,\n+    ) -> InterpResult<'tcx> {\n+        let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n+        let layout = self.layout_of(src.layout.ty.builtin_deref(true).unwrap().ty)?;\n+        let (size, align) = (layout.size, layout.align.abi);\n+        let size = size.checked_mul(count, self).ok_or_else(|| {\n+            err_ub_format!(\n+                \"overflow computing total size of `{}`\",\n+                if nonoverlapping { \"copy_nonoverlapping\" } else { \"copy\" }\n+            )\n+        })?;\n+\n+        // Make sure we check both pointers for an access of the total size and aligment,\n+        // *even if* the total size is 0.\n+        let src =\n+            self.memory.check_ptr_access(self.read_scalar(&src)?.check_init()?, size, align)?;\n+\n+        let dst =\n+            self.memory.check_ptr_access(self.read_scalar(&dst)?.check_init()?, size, align)?;\n+\n+        if let (Some(src), Some(dst)) = (src, dst) {\n+            self.memory.copy(src, dst, size, nonoverlapping)?;\n+        }\n+        Ok(())\n+    }\n }"}, {"sha": "5a10ffe6d6199c92032cf5ed3884147b19324352", "filename": "compiler/rustc_mir/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/eec3ae3feb8fc812df5f982940511a43c2de0df0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec3ae3feb8fc812df5f982940511a43c2de0df0/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs?ref=eec3ae3feb8fc812df5f982940511a43c2de0df0", "patch": "@@ -2,7 +2,6 @@\n //!\n //! The main entry point is the `step` method.\n \n-use crate::interpret::OpTy;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n use rustc_target::abi::LayoutOf;\n@@ -119,7 +118,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let src = self.eval_operand(src, None)?;\n                 let dst = self.eval_operand(dst, None)?;\n                 let count = self.eval_operand(count, None)?;\n-                self.copy(&src, &dst, &count, /* nonoverlapping */ true)?;\n+                self.copy_intrinsic(&src, &dst, &count, /* nonoverlapping */ true)?;\n             }\n \n             // Statements we do not track.\n@@ -149,37 +148,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    pub(crate) fn copy(\n-        &mut self,\n-        src: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n-        dst: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n-        count: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n-        nonoverlapping: bool,\n-    ) -> InterpResult<'tcx> {\n-        let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n-        let layout = self.layout_of(src.layout.ty.builtin_deref(true).unwrap().ty)?;\n-        let (size, align) = (layout.size, layout.align.abi);\n-        let size = size.checked_mul(count, self).ok_or_else(|| {\n-            err_ub_format!(\n-                \"overflow computing total size of `{}`\",\n-                if nonoverlapping { \"copy_nonoverlapping\" } else { \"copy\" }\n-            )\n-        })?;\n-\n-        // Make sure we check both pointers for an access of the total size and aligment,\n-        // *even if* the total size is 0.\n-        let src =\n-            self.memory.check_ptr_access(self.read_scalar(&src)?.check_init()?, size, align)?;\n-\n-        let dst =\n-            self.memory.check_ptr_access(self.read_scalar(&dst)?.check_init()?, size, align)?;\n-\n-        if let (Some(src), Some(dst)) = (src, dst) {\n-            self.memory.copy(src, dst, size, nonoverlapping)?;\n-        }\n-        Ok(())\n-    }\n-\n     /// Evaluate an assignment statement.\n     ///\n     /// There is no separate `eval_rvalue` function. Instead, the code for handling each rvalue"}]}