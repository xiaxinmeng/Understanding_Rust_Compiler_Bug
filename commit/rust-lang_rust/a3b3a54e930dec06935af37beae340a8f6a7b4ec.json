{"sha": "a3b3a54e930dec06935af37beae340a8f6a7b4ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYjNhNTRlOTMwZGVjMDY5MzVhZjM3YmVhZTM0MGE4ZjZhN2I0ZWM=", "commit": {"author": {"name": "Unknown", "email": "dobbybabee@gmail.com", "date": "2019-01-18T04:50:30Z"}, "committer": {"name": "Unknown", "email": "dobbybabee@gmail.com", "date": "2019-01-18T04:50:30Z"}, "message": "Update to collect all the files then throw the error.", "tree": {"sha": "2ef8413bf5426d18f5550fb9d91c5d19f4a60b2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ef8413bf5426d18f5550fb9d91c5d19f4a60b2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3b3a54e930dec06935af37beae340a8f6a7b4ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b3a54e930dec06935af37beae340a8f6a7b4ec", "html_url": "https://github.com/rust-lang/rust/commit/a3b3a54e930dec06935af37beae340a8f6a7b4ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3b3a54e930dec06935af37beae340a8f6a7b4ec/comments", "author": null, "committer": null, "parents": [{"sha": "8b81208012c2d88df74e18579a8025c24305db8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b81208012c2d88df74e18579a8025c24305db8c", "html_url": "https://github.com/rust-lang/rust/commit/8b81208012c2d88df74e18579a8025c24305db8c"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "f79abedc062af762b660334720c8e585d93f2fdd", "filename": "tests/missing-test-files.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a3b3a54e930dec06935af37beae340a8f6a7b4ec/tests%2Fmissing-test-files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3b3a54e930dec06935af37beae340a8f6a7b4ec/tests%2Fmissing-test-files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmissing-test-files.rs?ref=a3b3a54e930dec06935af37beae340a8f6a7b4ec", "patch": "@@ -1,10 +1,22 @@\n use std::fs::{self, DirEntry};\n-use std::io;\n use std::path::Path;\n \n #[test]\n fn test_missing_tests() {\n-    explore_directory(Path::new(\"./tests\")).unwrap();\n+    let missing_files = explore_directory(Path::new(\"./tests\"));\n+    if missing_files.len() > 0 {\n+        assert!(\n+            false,\n+            format!(\n+                \"Didn't see a test file for the following files:\\n\\n{}\\n\",\n+                missing_files\n+                    .iter()\n+                    .map(|s| format!(\"\\t{}\", s))\n+                    .collect::<Vec<_>>()\n+                    .join(\"\\n\")\n+            )\n+        );\n+    }\n }\n \n /*\n@@ -14,27 +26,25 @@ Since rs files are alphabetically before stderr/stdout, we can sort by the full\n and iter in that order. If we've seen the file stem for the first time and it's not\n a rust file, it means the rust file has to be missing.\n */\n-fn explore_directory(dir: &Path) -> io::Result<()> {\n+fn explore_directory(dir: &Path) -> Vec<String> {\n+    let mut missing_files: Vec<String> = Vec::new();\n     let mut current_file = String::new();\n-    let mut files: Vec<DirEntry> = fs::read_dir(dir)?.filter_map(Result::ok).collect();\n+    let mut files: Vec<DirEntry> = fs::read_dir(dir).unwrap().filter_map(Result::ok).collect();\n     files.sort_by_key(|e| e.path());\n     for entry in files.iter() {\n         let path = entry.path();\n         if path.is_dir() {\n-            explore_directory(&path)?;\n+            missing_files.extend(explore_directory(&path));\n         } else {\n             let file_stem = path.file_stem().unwrap().to_str().unwrap().to_string();\n             match path.extension() {\n                 Some(ext) => {\n                     match ext.to_str().unwrap() {\n                         \"rs\" => current_file = file_stem.clone(),\n                         \"stderr\" | \"stdout\" => {\n-                            assert_eq!(\n-                                file_stem,\n-                                current_file,\n-                                \"{}\",\n-                                format!(\"Didn't see a test file for {:}\", path.to_str().unwrap())\n-                            );\n+                            if file_stem != current_file {\n+                                missing_files.push(path.to_str().unwrap().to_string());\n+                            }\n                         },\n                         _ => continue,\n                     };\n@@ -43,5 +53,5 @@ fn explore_directory(dir: &Path) -> io::Result<()> {\n             }\n         }\n     }\n-    Ok(())\n+    missing_files\n }"}]}