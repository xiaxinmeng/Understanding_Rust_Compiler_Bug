{"sha": "df2ca53b6978c7ac2ec6e271a5ee73fba70877c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMmNhNTNiNjk3OGM3YWMyZWM2ZTI3MWE1ZWU3M2ZiYTcwODc3YzU=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T19:32:57Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Make From implementations non-failing.", "tree": {"sha": "25520cb0e5f97680b4a2b718b7e99ca69b8c881d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25520cb0e5f97680b4a2b718b7e99ca69b8c881d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df2ca53b6978c7ac2ec6e271a5ee73fba70877c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df2ca53b6978c7ac2ec6e271a5ee73fba70877c5", "html_url": "https://github.com/rust-lang/rust/commit/df2ca53b6978c7ac2ec6e271a5ee73fba70877c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df2ca53b6978c7ac2ec6e271a5ee73fba70877c5/comments", "author": null, "committer": null, "parents": [{"sha": "c56ef31780c63e03ada0a8282e5d95ba1f082d92", "url": "https://api.github.com/repos/rust-lang/rust/commits/c56ef31780c63e03ada0a8282e5d95ba1f082d92", "html_url": "https://github.com/rust-lang/rust/commit/c56ef31780c63e03ada0a8282e5d95ba1f082d92"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "29a4ed3676879a4f0f32b236725abdf20303d7e8", "filename": "src/shims/thread.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df2ca53b6978c7ac2ec6e271a5ee73fba70877c5/src%2Fshims%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2ca53b6978c7ac2ec6e271a5ee73fba70877c5/src%2Fshims%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fthread.rs?ref=df2ca53b6978c7ac2ec6e271a5ee73fba70877c5", "patch": "@@ -1,3 +1,5 @@\n+use std::convert::TryInto;\n+\n use crate::*;\n use rustc_target::abi::LayoutOf;\n \n@@ -63,7 +65,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n \n         let thread_id = this.read_scalar(thread)?.to_machine_usize(this)?;\n-        this.join_thread(thread_id.into())?;\n+        this.join_thread(thread_id.try_into().expect(\"thread ID should fit in u32\"))?;\n \n         Ok(0)\n     }\n@@ -72,7 +74,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         let thread_id = this.read_scalar(thread)?.to_machine_usize(this)?;\n-        this.detach_thread(thread_id.into())?;\n+        this.detach_thread(thread_id.try_into().expect(\"thread ID should fit in u32\"))?;\n \n         Ok(0)\n     }"}, {"sha": "69e7bcdb298c1263428a57df2ee7b95c1a4e7dd9", "filename": "src/thread.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df2ca53b6978c7ac2ec6e271a5ee73fba70877c5/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2ca53b6978c7ac2ec6e271a5ee73fba70877c5/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=df2ca53b6978c7ac2ec6e271a5ee73fba70877c5", "patch": "@@ -3,7 +3,7 @@\n use std::cell::RefCell;\n use std::convert::TryFrom;\n use std::convert::TryInto;\n-use std::num::NonZeroU32;\n+use std::num::{NonZeroU32, TryFromIntError};\n \n use log::trace;\n \n@@ -45,20 +45,22 @@ impl Idx for ThreadId {\n     fn new(idx: usize) -> Self {\n         ThreadId(u32::try_from(idx).unwrap())\n     }\n+\n     fn index(self) -> usize {\n         usize::try_from(self.0).unwrap()\n     }\n }\n \n-impl From<u64> for ThreadId {\n-    fn from(id: u64) -> Self {\n-        Self(u32::try_from(id).unwrap())\n+impl TryFrom<u64> for ThreadId {\n+    type Error = TryFromIntError;\n+    fn try_from(id: u64) -> Result<Self, Self::Error> {\n+        u32::try_from(id).map(|id_u32| Self(id_u32))\n     }\n }\n \n impl From<u32> for ThreadId {\n     fn from(id: u32) -> Self {\n-        Self(u32::try_from(id).unwrap())\n+        Self(id)\n     }\n }\n "}]}