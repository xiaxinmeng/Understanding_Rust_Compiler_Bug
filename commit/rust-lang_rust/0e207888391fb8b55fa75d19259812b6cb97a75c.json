{"sha": "0e207888391fb8b55fa75d19259812b6cb97a75c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMjA3ODg4MzkxZmI4YjU1ZmE3NWQxOTI1OTgxMmI2Y2I5N2E3NWM=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2020-11-30T00:21:21Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2020-11-30T00:21:21Z"}, "message": "Split tests", "tree": {"sha": "48503c408109f26a0529dd027704875ff6164b2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48503c408109f26a0529dd027704875ff6164b2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e207888391fb8b55fa75d19259812b6cb97a75c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e207888391fb8b55fa75d19259812b6cb97a75c", "html_url": "https://github.com/rust-lang/rust/commit/0e207888391fb8b55fa75d19259812b6cb97a75c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e207888391fb8b55fa75d19259812b6cb97a75c/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5d6855333c55636bc0fc56efcc83eac7c57ffa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d6855333c55636bc0fc56efcc83eac7c57ffa7", "html_url": "https://github.com/rust-lang/rust/commit/a5d6855333c55636bc0fc56efcc83eac7c57ffa7"}], "stats": {"total": 213, "additions": 115, "deletions": 98}, "files": [{"sha": "a83e6c77b12e5bc38dc8b76a76611d539160d91a", "filename": "tests/ui/collapsible_match.rs", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0e207888391fb8b55fa75d19259812b6cb97a75c/tests%2Fui%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e207888391fb8b55fa75d19259812b6cb97a75c/tests%2Fui%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match.rs?ref=0e207888391fb8b55fa75d19259812b6cb97a75c", "patch": "@@ -95,45 +95,6 @@ fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>\n         },\n         None => return,\n     }\n-\n-    // if guards on outer match\n-    {\n-        match res_opt {\n-            Ok(val) if make() => match val {\n-                Some(n) => foo(n),\n-                _ => return,\n-            },\n-            _ => return,\n-        }\n-        match res_opt {\n-            Ok(val) => match val {\n-                Some(n) => foo(n),\n-                _ => return,\n-            },\n-            _ if make() => return,\n-            _ => return,\n-        }\n-    }\n-\n-    // macro\n-    {\n-        macro_rules! mac {\n-            ($outer:expr => $pat:pat, $e:expr => $inner_pat:pat, $then:expr) => {\n-                match $outer {\n-                    $pat => match $e {\n-                        $inner_pat => $then,\n-                        _ => return,\n-                    },\n-                    _ => return,\n-                }\n-            };\n-        }\n-        // Lint this since the patterns are not defined by the macro.\n-        // Allows the lint to work on if_chain! for example.\n-        // Fixing the lint requires knowledge of the specific macro, but we optimistically assume that\n-        // there is still a better way to write this.\n-        mac!(res_opt => Ok(val), val => Some(n), foo(n));\n-    }\n }\n \n fn negative_cases(res_opt: Result<Option<u32>, String>, res_res: Result<Result<u32, String>, String>) {"}, {"sha": "63ac6a1613dc648ce44a90a139d768d18e2a7788", "filename": "tests/ui/collapsible_match.stderr", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0e207888391fb8b55fa75d19259812b6cb97a75c/tests%2Fui%2Fcollapsible_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e207888391fb8b55fa75d19259812b6cb97a75c/tests%2Fui%2Fcollapsible_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match.stderr?ref=0e207888391fb8b55fa75d19259812b6cb97a75c", "patch": "@@ -175,63 +175,5 @@ LL |         Some(val) => match val {\n LL |             Some(n) => foo(n),\n    |             ^^^^^^^ with this pattern\n \n-error: Unnecessary nested match\n-  --> $DIR/collapsible_match.rs:102:34\n-   |\n-LL |               Ok(val) if make() => match val {\n-   |  __________________________________^\n-LL | |                 Some(n) => foo(n),\n-LL | |                 _ => return,\n-LL | |             },\n-   | |_____________^\n-   |\n-help: The outer pattern can be modified to include the inner pattern.\n-  --> $DIR/collapsible_match.rs:102:16\n-   |\n-LL |             Ok(val) if make() => match val {\n-   |                ^^^ Replace this binding\n-LL |                 Some(n) => foo(n),\n-   |                 ^^^^^^^ with this pattern\n-\n-error: Unnecessary nested match\n-  --> $DIR/collapsible_match.rs:109:24\n-   |\n-LL |               Ok(val) => match val {\n-   |  ________________________^\n-LL | |                 Some(n) => foo(n),\n-LL | |                 _ => return,\n-LL | |             },\n-   | |_____________^\n-   |\n-help: The outer pattern can be modified to include the inner pattern.\n-  --> $DIR/collapsible_match.rs:109:16\n-   |\n-LL |             Ok(val) => match val {\n-   |                ^^^ Replace this binding\n-LL |                 Some(n) => foo(n),\n-   |                 ^^^^^^^ with this pattern\n-\n-error: Unnecessary nested match\n-  --> $DIR/collapsible_match.rs:123:29\n-   |\n-LL |                       $pat => match $e {\n-   |  _____________________________^\n-LL | |                         $inner_pat => $then,\n-LL | |                         _ => return,\n-LL | |                     },\n-   | |_____________________^\n-...\n-LL |           mac!(res_opt => Ok(val), val => Some(n), foo(n));\n-   |           ------------------------------------------------- in this macro invocation\n-   |\n-help: The outer pattern can be modified to include the inner pattern.\n-  --> $DIR/collapsible_match.rs:135:28\n-   |\n-LL |         mac!(res_opt => Ok(val), val => Some(n), foo(n));\n-   |                            ^^^          ^^^^^^^ with this pattern\n-   |                            |\n-   |                            Replace this binding\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 13 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "d571ac4ab693e3cc1415cfe200b840c41617c92d", "filename": "tests/ui/collapsible_match2.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0e207888391fb8b55fa75d19259812b6cb97a75c/tests%2Fui%2Fcollapsible_match2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e207888391fb8b55fa75d19259812b6cb97a75c/tests%2Fui%2Fcollapsible_match2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.rs?ref=0e207888391fb8b55fa75d19259812b6cb97a75c", "patch": "@@ -0,0 +1,53 @@\n+#![warn(clippy::collapsible_match)]\n+#![allow(clippy::needless_return, clippy::no_effect, clippy::single_match)]\n+\n+fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>) {\n+    // if guards on outer match\n+    {\n+        match res_opt {\n+            Ok(val) if make() => match val {\n+                Some(n) => foo(n),\n+                _ => return,\n+            },\n+            _ => return,\n+        }\n+        match res_opt {\n+            Ok(val) => match val {\n+                Some(n) => foo(n),\n+                _ => return,\n+            },\n+            _ if make() => return,\n+            _ => return,\n+        }\n+    }\n+\n+    // macro\n+    {\n+        macro_rules! mac {\n+            ($outer:expr => $pat:pat, $e:expr => $inner_pat:pat, $then:expr) => {\n+                match $outer {\n+                    $pat => match $e {\n+                        $inner_pat => $then,\n+                        _ => return,\n+                    },\n+                    _ => return,\n+                }\n+            };\n+        }\n+        // Lint this since the patterns are not defined by the macro.\n+        // Allows the lint to work on if_chain! for example.\n+        // Fixing the lint requires knowledge of the specific macro, but we optimistically assume that\n+        // there is still a better way to write this.\n+        mac!(res_opt => Ok(val), val => Some(n), foo(n));\n+    }\n+}\n+\n+fn make<T>() -> T {\n+    unimplemented!()\n+}\n+\n+fn foo<T, U>(t: T) -> U {\n+    unimplemented!()\n+}\n+\n+fn main() {}"}, {"sha": "490d82d12cd59d3099b750d112174c034e1bc013", "filename": "tests/ui/collapsible_match2.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0e207888391fb8b55fa75d19259812b6cb97a75c/tests%2Fui%2Fcollapsible_match2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e207888391fb8b55fa75d19259812b6cb97a75c/tests%2Fui%2Fcollapsible_match2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.stderr?ref=0e207888391fb8b55fa75d19259812b6cb97a75c", "patch": "@@ -0,0 +1,61 @@\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:8:34\n+   |\n+LL |               Ok(val) if make() => match val {\n+   |  __________________________________^\n+LL | |                 Some(n) => foo(n),\n+LL | |                 _ => return,\n+LL | |             },\n+   | |_____________^\n+   |\n+   = note: `-D clippy::collapsible-match` implied by `-D warnings`\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:8:16\n+   |\n+LL |             Ok(val) if make() => match val {\n+   |                ^^^ Replace this binding\n+LL |                 Some(n) => foo(n),\n+   |                 ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:15:24\n+   |\n+LL |               Ok(val) => match val {\n+   |  ________________________^\n+LL | |                 Some(n) => foo(n),\n+LL | |                 _ => return,\n+LL | |             },\n+   | |_____________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:15:16\n+   |\n+LL |             Ok(val) => match val {\n+   |                ^^^ Replace this binding\n+LL |                 Some(n) => foo(n),\n+   |                 ^^^^^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:29:29\n+   |\n+LL |                       $pat => match $e {\n+   |  _____________________________^\n+LL | |                         $inner_pat => $then,\n+LL | |                         _ => return,\n+LL | |                     },\n+   | |_____________________^\n+...\n+LL |           mac!(res_opt => Ok(val), val => Some(n), foo(n));\n+   |           ------------------------------------------------- in this macro invocation\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:41:28\n+   |\n+LL |         mac!(res_opt => Ok(val), val => Some(n), foo(n));\n+   |                            ^^^          ^^^^^^^ with this pattern\n+   |                            |\n+   |                            Replace this binding\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}]}