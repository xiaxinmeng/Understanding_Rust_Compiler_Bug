{"sha": "915d7663076ffc8a0633ed2ee47ce80e4dcdac19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNWQ3NjYzMDc2ZmZjOGEwNjMzZWQyZWU0N2NlODBlNGRjZGFjMTk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T12:39:04Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T11:58:46Z"}, "message": "Use () for codegen queries.", "tree": {"sha": "283480bcd046349e15d8778a5bd06f61570601d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/283480bcd046349e15d8778a5bd06f61570601d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/915d7663076ffc8a0633ed2ee47ce80e4dcdac19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/915d7663076ffc8a0633ed2ee47ce80e4dcdac19", "html_url": "https://github.com/rust-lang/rust/commit/915d7663076ffc8a0633ed2ee47ce80e4dcdac19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/915d7663076ffc8a0633ed2ee47ce80e4dcdac19/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a869ca88c847c8e004a3d4f74247c8378cfa11a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a869ca88c847c8e004a3d4f74247c8378cfa11a", "html_url": "https://github.com/rust-lang/rust/commit/3a869ca88c847c8e004a3d4f74247c8378cfa11a"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "e776cd0c620afa2611418eb8bde074d99c0ac32e", "filename": "src/driver/aot.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/915d7663076ffc8a0633ed2ee47ce80e4dcdac19/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915d7663076ffc8a0633ed2ee47ce80e4dcdac19/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=915d7663076ffc8a0633ed2ee47ce80e4dcdac19", "patch": "@@ -41,7 +41,7 @@ fn emit_module(\n \n     unwind_context.emit(&mut product);\n \n-    let tmp_file = tcx.output_filenames(LOCAL_CRATE).temp_path(OutputType::Object, Some(&name));\n+    let tmp_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(&name));\n     let obj = product.object.write().unwrap();\n     if let Err(err) = std::fs::write(&tmp_file, obj) {\n         tcx.sess.fatal(&format!(\"error writing object file: {}\", err));\n@@ -73,7 +73,7 @@ fn reuse_workproduct_for_cgu(\n     let work_product = cgu.work_product(tcx);\n     if let Some(saved_file) = &work_product.saved_file {\n         let obj_out = tcx\n-            .output_filenames(LOCAL_CRATE)\n+            .output_filenames(())\n             .temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n         object = Some(obj_out.clone());\n         let source_file = rustc_incremental::in_incr_comp_dir(&incr_comp_session_dir, &saved_file);\n@@ -179,7 +179,7 @@ pub(crate) fn run_aot(\n     let mut work_products = FxHashMap::default();\n \n     let cgus = if tcx.sess.opts.output_types.should_codegen() {\n-        tcx.collect_and_partition_mono_items(LOCAL_CRATE).1\n+        tcx.collect_and_partition_mono_items(()).1\n     } else {\n         // If only `--emit metadata` is used, we shouldn't perform any codegen.\n         // Also `tcx.collect_and_partition_mono_items` may panic in that case.\n@@ -265,7 +265,7 @@ pub(crate) fn run_aot(\n                 .to_string();\n \n             let tmp_file = tcx\n-                .output_filenames(LOCAL_CRATE)\n+                .output_filenames(())\n                 .temp_path(OutputType::Metadata, Some(&metadata_cgu_name));\n \n             let obj = crate::backend::with_object(tcx.sess, &metadata_cgu_name, |object| {\n@@ -342,7 +342,7 @@ fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n         .join(\"\\n\");\n \n     let output_object_file =\n-        tcx.output_filenames(LOCAL_CRATE).temp_path(OutputType::Object, Some(cgu_name));\n+        tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu_name));\n \n     // Assemble `global_asm`\n     let global_asm_object_file = add_file_stem_postfix(output_object_file.clone(), \".asm\");"}, {"sha": "632e86da736ab235530d52e7d25512fefe83b590", "filename": "src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/915d7663076ffc8a0633ed2ee47ce80e4dcdac19/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915d7663076ffc8a0633ed2ee47ce80e4dcdac19/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=915d7663076ffc8a0633ed2ee47ce80e4dcdac19", "patch": "@@ -8,7 +8,6 @@ use std::os::raw::{c_char, c_int};\n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_codegen_ssa::CrateInfo;\n use rustc_middle::mir::mono::MonoItem;\n-use rustc_session::config::EntryFnType;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n@@ -66,7 +65,7 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         matches!(backend_config.codegen_mode, CodegenMode::JitLazy),\n     );\n \n-    let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+    let (_, cgus) = tcx.collect_and_partition_mono_items(());\n     let mono_items = cgus\n         .iter()\n         .map(|cgu| cgu.items_in_deterministic_order(tcx).into_iter())"}, {"sha": "cd8c5b516083611ee316c93c816c523d29863fa3", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/915d7663076ffc8a0633ed2ee47ce80e4dcdac19/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915d7663076ffc8a0633ed2ee47ce80e4dcdac19/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=915d7663076ffc8a0633ed2ee47ce80e4dcdac19", "patch": "@@ -214,7 +214,7 @@ pub(crate) fn write_ir_file(\n         return;\n     }\n \n-    let clif_output_dir = tcx.output_filenames(LOCAL_CRATE).with_extension(\"clif\");\n+    let clif_output_dir = tcx.output_filenames(()).with_extension(\"clif\");\n \n     match std::fs::create_dir(&clif_output_dir) {\n         Ok(()) => {}"}]}