{"sha": "3fc30d884ae0c988d98452a06737705cfe34806a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYzMwZDg4NGFlMGM5ODhkOTg0NTJhMDY3Mzc3MDVjZmUzNDgwNmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-10T15:53:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-10T15:53:35Z"}, "message": "Auto merge of #66070 - petrochenkov:regattr, r=matthewjasper\n\nSupport registering inert attributes and attribute tools using crate-level attributes\n\nAnd remove `#[feature(custom_attribute)]`.\n(`rustc_plugin::Registry::register_attribute` is not removed yet, I'll do it in a follow up PR.)\n\n```rust\n#![register_attr(my_attr)]\n#![register_tool(my_tool)]\n\n#[my_attr] // OK\n#[my_tool::anything] // OK\nfn main() {}\n```\n\n---\nSome tools (`rustfmt` and `clippy`) used in tool attributes are hardcoded in the compiler.\nWe need some way to introduce them without hardcoding as well.\n\nThis PR introduces a way to do it with a crate level attribute.\nThe previous attempt to introduce them through command line (https://github.com/rust-lang/rust/pull/57921) met some resistance.\n\nThis probably needs to go through an RFC before stabilization.\nHowever, I'd prefer to land *this* PR without an RFC to able to remove `#[feature(custom_attribute)]` and `Registry::register_attribute` while also providing a replacement.\n\n---\n`register_attr` is a direct replacement for `#![feature(custom_attribute)]` (https://github.com/rust-lang/rust/issues/29642), except it doesn't rely on implicit fallback from unresolved attributes to custom attributes (which was always hacky and is the primary reason for the removal of `custom_attribute`) and requires registering the attribute explicitly.\nIt's not clear whether it should go through stabilization or not.\nIt's quite possible that all the uses should migrate to `#![register_tool]` (https://github.com/rust-lang/rust/issues/66079) instead.\n\n---\n\nDetails:\n- The naming is `register_attr`/`register_tool` rather than some `register_attributes` (plural, no abbreviation) for consistency with already existing attributes like `cfg_attr`, or `feature`, etc.\n---\nPrevious attempt: https://github.com/rust-lang/rust/pull/57921\ncc https://github.com/rust-lang/rust/issues/44690\nTracking issues: #66079 (`register_tool`), #66080 (`register_attr`)\nCloses https://github.com/rust-lang/rust/issues/29642", "tree": {"sha": "7901020012ae4cd274e1b59d1e94b1d59535e2ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7901020012ae4cd274e1b59d1e94b1d59535e2ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fc30d884ae0c988d98452a06737705cfe34806a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc30d884ae0c988d98452a06737705cfe34806a", "html_url": "https://github.com/rust-lang/rust/commit/3fc30d884ae0c988d98452a06737705cfe34806a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fc30d884ae0c988d98452a06737705cfe34806a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3b6e5705cff9c69362b7ed2d273ffc148b564db", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b6e5705cff9c69362b7ed2d273ffc148b564db", "html_url": "https://github.com/rust-lang/rust/commit/a3b6e5705cff9c69362b7ed2d273ffc148b564db"}, {"sha": "83f553c95c4a7cfd44ec00ce056708a7022b7bf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f553c95c4a7cfd44ec00ce056708a7022b7bf7", "html_url": "https://github.com/rust-lang/rust/commit/83f553c95c4a7cfd44ec00ce056708a7022b7bf7"}], "stats": {"total": 529, "additions": 411, "deletions": 118}, "files": [{"sha": "025494e3fd7be01be3cc9734a1f1322654097b40", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -40,10 +40,10 @@ pub enum NonMacroAttrKind {\n     Tool,\n     /// Single-segment custom attribute registered by a derive macro (`#[serde(default)]`).\n     DeriveHelper,\n+    /// Single-segment custom attribute registered with `#[register_attr]`.\n+    Registered,\n     /// Single-segment custom attribute registered by a legacy plugin (`register_attribute`).\n     LegacyPluginHelper,\n-    /// Single-segment custom attribute not registered in any way (`#[my_attr]`).\n-    Custom,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n@@ -329,8 +329,24 @@ impl NonMacroAttrKind {\n             NonMacroAttrKind::Builtin => \"built-in attribute\",\n             NonMacroAttrKind::Tool => \"tool attribute\",\n             NonMacroAttrKind::DeriveHelper => \"derive helper attribute\",\n+            NonMacroAttrKind::Registered => \"explicitly registered attribute\",\n             NonMacroAttrKind::LegacyPluginHelper => \"legacy plugin helper attribute\",\n-            NonMacroAttrKind::Custom => \"custom attribute\",\n+        }\n+    }\n+\n+    pub fn article(self) -> &'static str {\n+        match self {\n+            NonMacroAttrKind::Registered => \"an\",\n+            _ => \"a\",\n+        }\n+    }\n+\n+    /// Users of some attributes cannot mark them as used, so they are considered always used.\n+    pub fn is_used(self) -> bool {\n+        match self {\n+            NonMacroAttrKind::Tool | NonMacroAttrKind::DeriveHelper => true,\n+            NonMacroAttrKind::Builtin | NonMacroAttrKind::Registered |\n+            NonMacroAttrKind::LegacyPluginHelper => false,\n         }\n     }\n }\n@@ -389,6 +405,7 @@ impl<Id> Res<Id> {\n     pub fn article(&self) -> &'static str {\n         match *self {\n             Res::Def(kind, _) => kind.article(),\n+            Res::NonMacroAttr(kind) => kind.article(),\n             Res::Err => \"an\",\n             _ => \"a\",\n         }"}, {"sha": "3f4b87a97c7736fc59452cec0578c3821e2808fa", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -101,7 +101,6 @@ impl<'a> Registry<'a> {\n \n     /// Register an attribute with an attribute type.\n     ///\n-    /// Registered attributes will bypass the `custom_attribute` feature gate.\n     /// `Whitelisted` attributes will additionally not trigger the `unused_attribute`\n     /// lint. `CrateLevel` attributes will not be allowed on anything other than a crate.\n     pub fn register_attribute(&mut self, name: Symbol, ty: AttributeType) {"}, {"sha": "0fcac5aab625e3ecc54e7e7e4a2120e562628ee2", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -141,8 +141,7 @@ impl<'a> Resolver<'a> {\n     crate fn get_macro(&mut self, res: Res) -> Option<Lrc<SyntaxExtension>> {\n         match res {\n             Res::Def(DefKind::Macro(..), def_id) => self.get_macro_by_def_id(def_id),\n-            Res::NonMacroAttr(attr_kind) =>\n-                Some(self.non_macro_attr(attr_kind == NonMacroAttrKind::Tool)),\n+            Res::NonMacroAttr(attr_kind) => Some(self.non_macro_attr(attr_kind.is_used())),\n             _ => None,\n         }\n     }"}, {"sha": "771519b86c151850eac8f5131971e1b23ca25df8", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -19,7 +19,7 @@ use syntax_pos::hygiene::MacroKind;\n use syntax_pos::{BytePos, Span, MultiSpan};\n \n use crate::resolve_imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};\n-use crate::{path_names_to_string, KNOWN_TOOLS};\n+use crate::path_names_to_string;\n use crate::{BindingError, CrateLint, HasGenericParams, LegacyScope, Module, ModuleOrUniformRoot};\n use crate::{PathResult, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Segment};\n \n@@ -400,6 +400,14 @@ impl<'a> Resolver<'a> {\n                 Scope::Module(module) => {\n                     this.add_module_candidates(module, &mut suggestions, filter_fn);\n                 }\n+                Scope::RegisteredAttrs => {\n+                    let res = Res::NonMacroAttr(NonMacroAttrKind::Registered);\n+                    if filter_fn(res) {\n+                        suggestions.extend(this.registered_attrs.iter().map(|ident| {\n+                            TypoSuggestion::from_res(ident.name, res)\n+                        }));\n+                    }\n+                }\n                 Scope::MacroUsePrelude => {\n                     suggestions.extend(this.macro_use_prelude.iter().filter_map(|(name, binding)| {\n                         let res = binding.res();\n@@ -439,8 +447,8 @@ impl<'a> Resolver<'a> {\n                 }\n                 Scope::ToolPrelude => {\n                     let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);\n-                    suggestions.extend(KNOWN_TOOLS.iter().map(|name| {\n-                        TypoSuggestion::from_res(*name, res)\n+                    suggestions.extend(this.registered_tools.iter().map(|ident| {\n+                        TypoSuggestion::from_res(ident.name, res)\n                     }));\n                 }\n                 Scope::StdLibPrelude => {"}, {"sha": "88c675a6ce5baf957735c3453b53c71b705655a3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -74,8 +74,6 @@ mod check_unused;\n mod build_reduced_graph;\n mod resolve_imports;\n \n-const KNOWN_TOOLS: &[Name] = &[sym::clippy, sym::rustfmt];\n-\n enum Weak {\n     Yes,\n     No,\n@@ -102,6 +100,7 @@ enum Scope<'a> {\n     MacroRules(LegacyScope<'a>),\n     CrateRoot,\n     Module(Module<'a>),\n+    RegisteredAttrs,\n     MacroUsePrelude,\n     BuiltinAttrs,\n     LegacyPluginHelpers,\n@@ -621,7 +620,6 @@ enum AmbiguityKind {\n     Import,\n     BuiltinAttr,\n     DeriveHelper,\n-    LegacyHelperVsPrelude,\n     LegacyVsModern,\n     GlobVsOuter,\n     GlobVsGlob,\n@@ -638,8 +636,6 @@ impl AmbiguityKind {\n                 \"built-in attribute vs any other name\",\n             AmbiguityKind::DeriveHelper =>\n                 \"derive helper attribute vs any other name\",\n-            AmbiguityKind::LegacyHelperVsPrelude =>\n-                \"legacy plugin helper attribute vs name from prelude\",\n             AmbiguityKind::LegacyVsModern =>\n                 \"`macro_rules` vs non-`macro_rules` from other module\",\n             AmbiguityKind::GlobVsOuter =>\n@@ -916,6 +912,8 @@ pub struct Resolver<'a> {\n     crate_loader: CrateLoader<'a>,\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Name, SyntaxExtension>,\n+    registered_attrs: FxHashSet<Ident>,\n+    registered_tools: FxHashSet<Ident>,\n     macro_use_prelude: FxHashMap<Name, &'a NameBinding<'a>>,\n     all_macros: FxHashMap<Name, Res>,\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n@@ -1138,6 +1136,9 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n+        let (registered_attrs, registered_tools) =\n+            macros::registered_attrs_and_tools(session, &krate.attrs);\n+\n         let mut invocation_parent_scopes = FxHashMap::default();\n         invocation_parent_scopes.insert(ExpnId::root(), ParentScope::module(graph_root));\n \n@@ -1207,6 +1208,8 @@ impl<'a> Resolver<'a> {\n             crate_loader: CrateLoader::new(session, metadata_loader, crate_name),\n             macro_names: FxHashSet::default(),\n             builtin_macros: Default::default(),\n+            registered_attrs,\n+            registered_tools,\n             macro_use_prelude: FxHashMap::default(),\n             all_macros: FxHashMap::default(),\n             macro_map: FxHashMap::default(),\n@@ -1484,6 +1487,7 @@ impl<'a> Resolver<'a> {\n                 Scope::MacroRules(..) => true,\n                 Scope::CrateRoot => true,\n                 Scope::Module(..) => true,\n+                Scope::RegisteredAttrs => use_prelude,\n                 Scope::MacroUsePrelude => use_prelude || rust_2015,\n                 Scope::BuiltinAttrs => true,\n                 Scope::LegacyPluginHelpers => use_prelude || rust_2015,\n@@ -1528,11 +1532,12 @@ impl<'a> Resolver<'a> {\n                             match ns {\n                                 TypeNS => Scope::ExternPrelude,\n                                 ValueNS => Scope::StdLibPrelude,\n-                                MacroNS => Scope::MacroUsePrelude,\n+                                MacroNS => Scope::RegisteredAttrs,\n                             }\n                         }\n                     }\n                 }\n+                Scope::RegisteredAttrs => Scope::MacroUsePrelude,\n                 Scope::MacroUsePrelude => Scope::StdLibPrelude,\n                 Scope::BuiltinAttrs => Scope::LegacyPluginHelpers,\n                 Scope::LegacyPluginHelpers => break, // nowhere else to search\n@@ -1688,11 +1693,11 @@ impl<'a> Resolver<'a> {\n                 if let Some(binding) = self.extern_prelude_get(ident, !record_used) {\n                     return Some(LexicalScopeBinding::Item(binding));\n                 }\n-            }\n-            if ns == TypeNS && KNOWN_TOOLS.contains(&ident.name) {\n-                let binding = (Res::ToolMod, ty::Visibility::Public,\n-                               DUMMY_SP, ExpnId::root()).to_name_binding(self.arenas);\n-                return Some(LexicalScopeBinding::Item(binding));\n+                if let Some(ident) = self.registered_tools.get(&ident) {\n+                    let binding = (Res::ToolMod, ty::Visibility::Public,\n+                                   ident.span, ExpnId::root()).to_name_binding(self.arenas);\n+                    return Some(LexicalScopeBinding::Item(binding));\n+                }\n             }\n             if let Some(prelude) = self.prelude {\n                 if let Ok(binding) = self.resolve_ident_in_module_unadjusted("}, {"sha": "2d125a459c86b701947294d7445859809e1c6e19", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 73, "deletions": 65, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -3,16 +3,17 @@\n \n use crate::{AmbiguityError, AmbiguityKind, AmbiguityErrorMisc, Determinacy};\n use crate::{CrateLint, Resolver, ResolutionError, Scope, ScopeSet, ParentScope, Weak};\n-use crate::{ModuleKind, NameBinding, PathResult, Segment, ToNameBinding};\n-use crate::{ModuleOrUniformRoot, KNOWN_TOOLS};\n+use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment, ToNameBinding};\n use crate::Namespace::*;\n use crate::resolve_imports::ImportResolver;\n use rustc::hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc::hir::def_id;\n use rustc::middle::stability;\n+use rustc::session::Session;\n+use rustc::util::nodemap::FxHashSet;\n use rustc::{ty, lint, span_bug};\n use syntax::ast::{self, NodeId, Ident};\n-use syntax::attr::StabilityLevel;\n+use syntax::attr::{self, StabilityLevel};\n use syntax::edition::Edition;\n use syntax::feature_gate::{emit_feature_err, is_builtin_attr_name};\n use syntax::feature_gate::GateIssue;\n@@ -93,6 +94,46 @@ fn fast_print_path(path: &ast::Path) -> Symbol {\n     }\n }\n \n+/// The code common between processing `#![register_tool]` and `#![register_attr]`.\n+fn registered_idents(\n+    sess: &Session,\n+    attrs: &[ast::Attribute],\n+    attr_name: Symbol,\n+    descr: &str,\n+) -> FxHashSet<Ident> {\n+    let mut registered = FxHashSet::default();\n+    for attr in attr::filter_by_name(attrs, attr_name) {\n+        for nested_meta in attr.meta_item_list().unwrap_or_default() {\n+            match nested_meta.ident() {\n+                Some(ident) => if let Some(old_ident) = registered.replace(ident) {\n+                    let msg = format!(\"{} `{}` was already registered\", descr, ident);\n+                    sess.struct_span_err(ident.span, &msg)\n+                        .span_label(old_ident.span, \"already registered here\").emit();\n+                }\n+                None => {\n+                    let msg = format!(\"`{}` only accepts identifiers\", attr_name);\n+                    let span = nested_meta.span();\n+                    sess.struct_span_err(span, &msg).span_label(span, \"not an identifier\").emit();\n+                }\n+            }\n+        }\n+    }\n+    registered\n+}\n+\n+crate fn registered_attrs_and_tools(\n+    sess: &Session,\n+    attrs: &[ast::Attribute],\n+) -> (FxHashSet<Ident>, FxHashSet<Ident>) {\n+    let registered_attrs = registered_idents(sess, attrs, sym::register_attr, \"attribute\");\n+    let mut registered_tools = registered_idents(sess, attrs, sym::register_tool, \"tool\");\n+    // We implicitly add `rustfmt` and `clippy` to known tools,\n+    // but it's not an error to register them explicitly.\n+    let predefined_tools = [sym::clippy, sym::rustfmt];\n+    registered_tools.extend(predefined_tools.iter().cloned().map(Ident::with_dummy_span));\n+    (registered_attrs, registered_tools)\n+}\n+\n impl<'a> base::Resolver for Resolver<'a> {\n     fn next_node_id(&mut self) -> NodeId {\n         self.next_node_id()\n@@ -416,10 +457,9 @@ impl<'a> Resolver<'a> {\n             struct Flags: u8 {\n                 const MACRO_RULES        = 1 << 0;\n                 const MODULE             = 1 << 1;\n-                const PRELUDE            = 1 << 2;\n-                const MISC_SUGGEST_CRATE = 1 << 3;\n-                const MISC_SUGGEST_SELF  = 1 << 4;\n-                const MISC_FROM_PRELUDE  = 1 << 5;\n+                const MISC_SUGGEST_CRATE = 1 << 2;\n+                const MISC_SUGGEST_SELF  = 1 << 3;\n+                const MISC_FROM_PRELUDE  = 1 << 4;\n             }\n         }\n \n@@ -453,6 +493,10 @@ impl<'a> Resolver<'a> {\n         // Go through all the scopes and try to resolve the name.\n         let break_result = self.visit_scopes(scope_set, parent_scope, orig_ident,\n                                              |this, scope, use_prelude, ident| {\n+            let ok = |res, span, arenas| Ok((\n+                (res, ty::Visibility::Public, span, ExpnId::root()).to_name_binding(arenas),\n+                Flags::empty(),\n+            ));\n             let result = match scope {\n                 Scope::DeriveHelpers => {\n                     let mut result = Err(Determinacy::Determined);\n@@ -461,10 +505,8 @@ impl<'a> Resolver<'a> {\n                         match this.resolve_macro_path(derive, Some(MacroKind::Derive),\n                                                       parent_scope, true, force) {\n                             Ok((Some(ext), _)) => if ext.helper_attrs.contains(&ident.name) {\n-                                let binding = (Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper),\n-                                               ty::Visibility::Public, derive.span, ExpnId::root())\n-                                               .to_name_binding(this.arenas);\n-                                result = Ok((binding, Flags::empty()));\n+                                let res = Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper);\n+                                result = ok(res, derive.span, this.arenas);\n                                 break;\n                             }\n                             Ok(_) | Err(Determinacy::Determined) => {}\n@@ -531,41 +573,39 @@ impl<'a> Resolver<'a> {\n                         Err((Determinacy::Determined, _)) => Err(Determinacy::Determined),\n                     }\n                 }\n+                Scope::RegisteredAttrs => match this.registered_attrs.get(&ident).cloned() {\n+                    Some(ident) => ok(\n+                        Res::NonMacroAttr(NonMacroAttrKind::Registered), ident.span, this.arenas\n+                    ),\n+                    None => Err(Determinacy::Determined)\n+                }\n                 Scope::MacroUsePrelude => match this.macro_use_prelude.get(&ident.name).cloned() {\n-                    Some(binding) => Ok((binding, Flags::PRELUDE | Flags::MISC_FROM_PRELUDE)),\n+                    Some(binding) => Ok((binding, Flags::MISC_FROM_PRELUDE)),\n                     None => Err(Determinacy::determined(\n                         this.graph_root.unexpanded_invocations.borrow().is_empty()\n                     ))\n                 }\n                 Scope::BuiltinAttrs => if is_builtin_attr_name(ident.name) {\n-                    let binding = (Res::NonMacroAttr(NonMacroAttrKind::Builtin),\n-                                   ty::Visibility::Public, DUMMY_SP, ExpnId::root())\n-                                   .to_name_binding(this.arenas);\n-                    Ok((binding, Flags::PRELUDE))\n+                    ok(Res::NonMacroAttr(NonMacroAttrKind::Builtin), DUMMY_SP, this.arenas)\n                 } else {\n                     Err(Determinacy::Determined)\n                 }\n                 Scope::LegacyPluginHelpers => if this.session.plugin_attributes.borrow().iter()\n                                                      .any(|(name, _)| ident.name == *name) {\n-                    let binding = (Res::NonMacroAttr(NonMacroAttrKind::LegacyPluginHelper),\n-                                   ty::Visibility::Public, DUMMY_SP, ExpnId::root())\n-                                   .to_name_binding(this.arenas);\n-                    Ok((binding, Flags::PRELUDE))\n+                    let res = Res::NonMacroAttr(NonMacroAttrKind::LegacyPluginHelper);\n+                    ok(res, DUMMY_SP, this.arenas)\n                 } else {\n                     Err(Determinacy::Determined)\n                 }\n                 Scope::ExternPrelude => match this.extern_prelude_get(ident, !record_used) {\n-                    Some(binding) => Ok((binding, Flags::PRELUDE)),\n+                    Some(binding) => Ok((binding, Flags::empty())),\n                     None => Err(Determinacy::determined(\n                         this.graph_root.unexpanded_invocations.borrow().is_empty()\n                     )),\n                 }\n-                Scope::ToolPrelude => if KNOWN_TOOLS.contains(&ident.name) {\n-                    let binding = (Res::ToolMod, ty::Visibility::Public, DUMMY_SP, ExpnId::root())\n-                                   .to_name_binding(this.arenas);\n-                    Ok((binding, Flags::PRELUDE))\n-                } else {\n-                    Err(Determinacy::Determined)\n+                Scope::ToolPrelude => match this.registered_tools.get(&ident).cloned() {\n+                    Some(ident) => ok(Res::ToolMod, ident.span, this.arenas),\n+                    None => Err(Determinacy::Determined)\n                 }\n                 Scope::StdLibPrelude => {\n                     let mut result = Err(Determinacy::Determined);\n@@ -579,19 +619,15 @@ impl<'a> Resolver<'a> {\n                             path_span,\n                         ) {\n                             if use_prelude || this.is_builtin_macro(binding.res()) {\n-                                result = Ok((binding, Flags::PRELUDE | Flags::MISC_FROM_PRELUDE));\n+                                result = Ok((binding, Flags::MISC_FROM_PRELUDE));\n                             }\n                         }\n                     }\n                     result\n                 }\n                 Scope::BuiltinTypes => match this.primitive_type_table.primitive_types\n                                                  .get(&ident.name).cloned() {\n-                    Some(prim_ty) => {\n-                        let binding = (Res::PrimTy(prim_ty), ty::Visibility::Public,\n-                                       DUMMY_SP, ExpnId::root()).to_name_binding(this.arenas);\n-                        Ok((binding, Flags::PRELUDE))\n-                    }\n+                    Some(prim_ty) => ok(Res::PrimTy(prim_ty), DUMMY_SP, this.arenas),\n                     None => Err(Determinacy::Determined)\n                 }\n             };\n@@ -608,20 +644,13 @@ impl<'a> Resolver<'a> {\n                         if res != innermost_res {\n                             let builtin = Res::NonMacroAttr(NonMacroAttrKind::Builtin);\n                             let derive_helper = Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper);\n-                            let legacy_helper =\n-                                Res::NonMacroAttr(NonMacroAttrKind::LegacyPluginHelper);\n \n                             let ambiguity_error_kind = if is_import {\n                                 Some(AmbiguityKind::Import)\n                             } else if innermost_res == builtin || res == builtin {\n                                 Some(AmbiguityKind::BuiltinAttr)\n                             } else if innermost_res == derive_helper || res == derive_helper {\n                                 Some(AmbiguityKind::DeriveHelper)\n-                            } else if innermost_res == legacy_helper &&\n-                                      flags.contains(Flags::PRELUDE) ||\n-                                      res == legacy_helper &&\n-                                      innermost_flags.contains(Flags::PRELUDE) {\n-                                Some(AmbiguityKind::LegacyHelperVsPrelude)\n                             } else if innermost_flags.contains(Flags::MACRO_RULES) &&\n                                       flags.contains(Flags::MODULE) &&\n                                       !this.disambiguate_legacy_vs_modern(innermost_binding,\n@@ -681,20 +710,7 @@ impl<'a> Resolver<'a> {\n             return Ok(binding);\n         }\n \n-        let determinacy = Determinacy::determined(determinacy == Determinacy::Determined || force);\n-        if determinacy == Determinacy::Determined && macro_kind == Some(MacroKind::Attr) &&\n-           self.session.features_untracked().custom_attribute {\n-            // For single-segment attributes interpret determinate \"no resolution\" as a custom\n-            // attribute. (Lexical resolution implies the first segment and attr kind should imply\n-            // the last segment, so we are certainly working with a single-segment attribute here.)\n-            assert!(ns == MacroNS);\n-            let binding = (Res::NonMacroAttr(NonMacroAttrKind::Custom),\n-                           ty::Visibility::Public, orig_ident.span, ExpnId::root())\n-                           .to_name_binding(self.arenas);\n-            Ok(binding)\n-        } else {\n-            Err(determinacy)\n-        }\n+        Err(Determinacy::determined(determinacy == Determinacy::Determined || force))\n     }\n \n     crate fn finalize_macro_resolutions(&mut self) {\n@@ -705,16 +721,7 @@ impl<'a> Resolver<'a> {\n                     // Make sure compilation does not succeed if preferred macro resolution\n                     // has changed after the macro had been expanded. In theory all such\n                     // situations should be reported as ambiguity errors, so this is a bug.\n-                    if initial_res == Res::NonMacroAttr(NonMacroAttrKind::Custom) {\n-                        // Yeah, legacy custom attributes are implemented using forced resolution\n-                        // (which is a best effort error recovery tool, basically), so we can't\n-                        // promise their resolution won't change later.\n-                        let msg = format!(\"inconsistent resolution for a macro: first {}, then {}\",\n-                                          initial_res.descr(), res.descr());\n-                        this.session.span_err(span, &msg);\n-                    } else {\n-                        span_bug!(span, \"inconsistent resolution for a macro\");\n-                    }\n+                    span_bug!(span, \"inconsistent resolution for a macro\");\n                 }\n             } else {\n                 // It's possible that the macro was unresolved (indeterminate) and silently\n@@ -826,7 +833,8 @@ impl<'a> Resolver<'a> {\n                                          res: Option<Res>, span: Span) {\n         if let Some(Res::NonMacroAttr(kind)) = res {\n             if kind != NonMacroAttrKind::Tool && binding.map_or(true, |b| b.is_import()) {\n-                let msg = format!(\"cannot use a {} through an import\", kind.descr());\n+                let msg =\n+                    format!(\"cannot use {} {} through an import\", kind.article(), kind.descr());\n                 let mut err = self.session.struct_span_err(span, &msg);\n                 if let Some(binding) = binding {\n                     err.span_note(binding.span, &format!(\"the {} imported here\", kind.descr()));"}, {"sha": "d59d0f0e28e9b2aa9028a8101bb7d6f98ba3b7e3", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -265,9 +265,6 @@ declare_features! (\n     /// Allows the use of SIMD types in functions declared in `extern` blocks.\n     (active, simd_ffi, \"1.0.0\", Some(27731), None),\n \n-    /// Allows using custom attributes (RFC 572).\n-    (active, custom_attribute, \"1.0.0\", Some(29642), None),\n-\n     /// Allows using non lexical lifetimes (RFC 2094).\n     (active, nll, \"1.0.0\", Some(43234), None),\n \n@@ -526,6 +523,12 @@ declare_features! (\n     /// Allows using the `efiapi` ABI.\n     (active, abi_efiapi, \"1.40.0\", Some(65815), None),\n \n+    /// Allows using the `#[register_attr]` attribute.\n+    (active, register_attr, \"1.41.0\", Some(66080), None),\n+\n+    /// Allows using the `#[register_attr]` attribute.\n+    (active, register_tool, \"1.41.0\", Some(66079), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "608cc2a09cbee328e5a2cea2f6ef93755d418729", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -329,6 +329,14 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     gated!(ffi_returns_twice, Whitelisted, template!(Word), experimental!(ffi_returns_twice)),\n     gated!(track_caller, Whitelisted, template!(Word), experimental!(track_caller)),\n+    gated!(\n+        register_attr, CrateLevel, template!(List: \"attr1, attr2, ...\"),\n+        experimental!(register_attr),\n+    ),\n+    gated!(\n+        register_tool, CrateLevel, template!(List: \"tool1, tool2, ...\"),\n+        experimental!(register_tool),\n+    ),\n \n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:"}, {"sha": "f0aa74c65df62e11e72499c2e63988b3dc98613b", "filename": "src/libsyntax/feature_gate/removed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -67,6 +67,9 @@ declare_features! (\n      Some(\"merged into `#![feature(slice_patterns)]`\")),\n     (removed, macro_reexport, \"1.0.0\", Some(29638), None,\n      Some(\"subsumed by `pub use`\")),\n+    /// Allows using custom attributes (RFC 572).\n+    (removed, custom_attribute, \"1.0.0\", Some(29642), None,\n+     Some(\"removed in favor of `#![register_tool]` and `#![register_attr]`\")),\n     (removed, pushpop_unsafe, \"1.2.0\", None, None, None),\n     (removed, needs_allocator, \"1.4.0\", Some(27389), None,\n      Some(\"subsumed by `#![feature(allocator_internals)]`\")),"}, {"sha": "c41f413970ff50f16bf101fd7199864f65003942", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -546,6 +546,8 @@ symbols! {\n         recursion_limit,\n         reexport_test_harness_main,\n         reflect,\n+        register_attr,\n+        register_tool,\n         relaxed_adts,\n         repr,\n         repr128,"}, {"sha": "55f19ab4ee31c90b3954012fe21a9002e6702ebc", "filename": "src/test/ui-fulldeps/issue-15778-pass.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -3,7 +3,15 @@\n // ignore-stage1\n // compile-flags: -D crate-not-okay\n \n-#![feature(plugin, custom_attribute, custom_inner_attributes, rustc_attrs)]\n+#![feature(plugin, register_attr, custom_inner_attributes, rustc_attrs)]\n+\n+#![register_attr(\n+    rustc_crate_okay,\n+    rustc_crate_blue,\n+    rustc_crate_red,\n+    rustc_crate_grey,\n+    rustc_crate_green,\n+)]\n \n #![plugin(lint_for_crate_rpass)]\n #![rustc_crate_okay]"}, {"sha": "48b42958489e7bc3aeed7d3001e376bb8cafdacc", "filename": "src/test/ui-fulldeps/issue-15778-pass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.stderr?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -1,5 +1,5 @@\n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/issue-15778-pass.rs:8:1\n+  --> $DIR/issue-15778-pass.rs:16:1\n    |\n LL | #![plugin(lint_for_crate_rpass)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version"}, {"sha": "84736be844ba688682e734aeed48b52b7f509cb4", "filename": "src/test/ui/attributes/register-attr-tool-fail.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -0,0 +1,13 @@\n+#![feature(register_attr)]\n+#![feature(register_tool)]\n+\n+#![register_attr] //~ ERROR malformed `register_attr` attribute input\n+#![register_tool] //~ ERROR malformed `register_tool` attribute input\n+\n+#![register_attr(a::b)] //~ ERROR `register_attr` only accepts identifiers\n+#![register_tool(a::b)] //~ ERROR `register_tool` only accepts identifiers\n+\n+#![register_attr(attr, attr)] //~ ERROR attribute `attr` was already registered\n+#![register_tool(tool, tool)] //~ ERROR tool `tool` was already registered\n+\n+fn main() {}"}, {"sha": "77acfcd87cf75cdeaadf131592c211248c1181a2", "filename": "src/test/ui/attributes/register-attr-tool-fail.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-fail.stderr?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -0,0 +1,42 @@\n+error: `register_attr` only accepts identifiers\n+  --> $DIR/register-attr-tool-fail.rs:7:18\n+   |\n+LL | #![register_attr(a::b)]\n+   |                  ^^^^ not an identifier\n+\n+error: attribute `attr` was already registered\n+  --> $DIR/register-attr-tool-fail.rs:10:24\n+   |\n+LL | #![register_attr(attr, attr)]\n+   |                  ----  ^^^^\n+   |                  |\n+   |                  already registered here\n+\n+error: `register_tool` only accepts identifiers\n+  --> $DIR/register-attr-tool-fail.rs:8:18\n+   |\n+LL | #![register_tool(a::b)]\n+   |                  ^^^^ not an identifier\n+\n+error: tool `tool` was already registered\n+  --> $DIR/register-attr-tool-fail.rs:11:24\n+   |\n+LL | #![register_tool(tool, tool)]\n+   |                  ----  ^^^^\n+   |                  |\n+   |                  already registered here\n+\n+error: malformed `register_attr` attribute input\n+  --> $DIR/register-attr-tool-fail.rs:4:1\n+   |\n+LL | #![register_attr]\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[register_attr(attr1, attr2, ...)]`\n+\n+error: malformed `register_tool` attribute input\n+  --> $DIR/register-attr-tool-fail.rs:5:1\n+   |\n+LL | #![register_tool]\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[register_tool(tool1, tool2, ...)]`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "3d0cf9154fbca1e4ad6345f6bfc567786e4d6cf9", "filename": "src/test/ui/attributes/register-attr-tool-import.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-import.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+\n+#![feature(register_attr)]\n+#![feature(register_tool)]\n+\n+#![register_attr(attr)]\n+#![register_tool(tool)]\n+\n+use attr as renamed_attr; // OK\n+use tool as renamed_tool; // OK\n+\n+#[renamed_attr] //~ ERROR cannot use an explicitly registered attribute through an import\n+#[renamed_tool::attr] //~ ERROR cannot use a tool module through an import\n+fn main() {}"}, {"sha": "6f280c8e0d931ab2e83325c8a377644e1858256a", "filename": "src/test/ui/attributes/register-attr-tool-import.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-import.stderr?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -0,0 +1,26 @@\n+error: cannot use an explicitly registered attribute through an import\n+  --> $DIR/register-attr-tool-import.rs:12:3\n+   |\n+LL | #[renamed_attr]\n+   |   ^^^^^^^^^^^^\n+   |\n+note: the explicitly registered attribute imported here\n+  --> $DIR/register-attr-tool-import.rs:9:5\n+   |\n+LL | use attr as renamed_attr; // OK\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: cannot use a tool module through an import\n+  --> $DIR/register-attr-tool-import.rs:13:3\n+   |\n+LL | #[renamed_tool::attr]\n+   |   ^^^^^^^^^^^^\n+   |\n+note: the tool module imported here\n+  --> $DIR/register-attr-tool-import.rs:10:5\n+   |\n+LL | use tool as renamed_tool; // OK\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a491773f5eb2c53b4bee8b0bc8a68c06eeb93ccb", "filename": "src/test/ui/attributes/register-attr-tool-prelude.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-prelude.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -0,0 +1,14 @@\n+#![feature(register_attr)]\n+#![feature(register_tool)]\n+\n+#![register_attr(attr)]\n+#![register_tool(tool)]\n+\n+#[no_implicit_prelude]\n+mod m {\n+    #[attr] //~ ERROR cannot find attribute `attr` in this scope\n+    #[tool::attr] //~ ERROR failed to resolve: use of undeclared type or module `tool`\n+    fn check() {}\n+}\n+\n+fn main() {}"}, {"sha": "66a4eeb6aa4814cefce02d267f0ab63cba8d1c0c", "filename": "src/test/ui/attributes/register-attr-tool-prelude.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-prelude.stderr?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -0,0 +1,15 @@\n+error[E0433]: failed to resolve: use of undeclared type or module `tool`\n+  --> $DIR/register-attr-tool-prelude.rs:10:7\n+   |\n+LL |     #[tool::attr]\n+   |       ^^^^ use of undeclared type or module `tool`\n+\n+error: cannot find attribute `attr` in this scope\n+  --> $DIR/register-attr-tool-prelude.rs:9:7\n+   |\n+LL |     #[attr]\n+   |       ^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "546e372f5e3033100a03e4f5ece77c42b37b5336", "filename": "src/test/ui/attributes/register-attr-tool-unused.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-unused.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -0,0 +1,10 @@\n+#![deny(unused)]\n+\n+#![feature(register_attr)]\n+#![feature(register_tool)]\n+\n+#[register_attr(attr)] //~ ERROR crate-level attribute should be an inner attribute\n+                       //~| ERROR unused attribute\n+#[register_tool(tool)] //~ ERROR crate-level attribute should be an inner attribute\n+                       //~| ERROR unused attribute\n+fn main() {}"}, {"sha": "0756c572c35fee17c40b1b9f3d4ffa30f92dfaac", "filename": "src/test/ui/attributes/register-attr-tool-unused.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool-unused.stderr?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -0,0 +1,33 @@\n+error: unused attribute\n+  --> $DIR/register-attr-tool-unused.rs:6:1\n+   |\n+LL | #[register_attr(attr)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/register-attr-tool-unused.rs:1:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(unused_attributes)]` implied by `#[deny(unused)]`\n+\n+error: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n+  --> $DIR/register-attr-tool-unused.rs:6:1\n+   |\n+LL | #[register_attr(attr)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused attribute\n+  --> $DIR/register-attr-tool-unused.rs:8:1\n+   |\n+LL | #[register_tool(tool)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n+  --> $DIR/register-attr-tool-unused.rs:8:1\n+   |\n+LL | #[register_tool(tool)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "ee9da74d4fb1ca2e672d8c8eae74824f5793114f", "filename": "src/test/ui/attributes/register-attr-tool.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fregister-attr-tool.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+// compile-flags: --cfg foo\n+\n+#![feature(register_attr)]\n+#![feature(register_tool)]\n+\n+#![register_attr(attr)]\n+#![register_tool(tool)]\n+#![register_tool(rustfmt, clippy)] // OK\n+#![cfg_attr(foo, register_attr(conditional_attr))]\n+#![cfg_attr(foo, register_tool(conditional_tool))]\n+\n+#[attr]\n+#[tool::attr]\n+#[rustfmt::attr]\n+#[clippy::attr]\n+#[conditional_attr]\n+#[conditional_tool::attr]\n+fn main() {}"}, {"sha": "724e53debeb01fbf1d5da5681b947743e63744be", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -1,8 +1,6 @@\n // This test ensures that attributes on formals in generic parameter\n // lists are included when we are checking for unstable attributes.\n \n-// gate-test-custom_attribute\n-\n struct StLt<#[lt_struct] 'a>(&'a u32);\n //~^ ERROR cannot find attribute `lt_struct` in this scope\n struct StTy<#[ty_struct] I>(I);"}, {"sha": "b33710ce04958da3e4902985d8595f78bb23626b", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute2.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -1,101 +1,101 @@\n error: cannot find attribute `lt_hof` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:53:21\n+  --> $DIR/feature-gate-custom_attribute2.rs:51:21\n    |\n LL |     where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n    |                     ^^^^^^\n \n error: cannot find attribute `ty_meth` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:48:15\n+  --> $DIR/feature-gate-custom_attribute2.rs:46:15\n    |\n LL |     fn m_ty<#[ty_meth] P>(_: P) { }\n    |               ^^^^^^^\n \n error: cannot find attribute `lt_meth` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:46:15\n+  --> $DIR/feature-gate-custom_attribute2.rs:44:15\n    |\n LL |     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n    |               ^^^^^^^\n \n error: cannot find attribute `ty_fn` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:42:11\n+  --> $DIR/feature-gate-custom_attribute2.rs:40:11\n    |\n LL | fn f_ty<#[ty_fn] O>(_: O) { }\n    |           ^^^^^\n \n error: cannot find attribute `lt_fn` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:40:11\n+  --> $DIR/feature-gate-custom_attribute2.rs:38:11\n    |\n LL | fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n    |           ^^^^^\n \n error: cannot find attribute `ty_impl_for` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:35:8\n+  --> $DIR/feature-gate-custom_attribute2.rs:33:8\n    |\n LL | impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n    |        ^^^^^^^^^^^\n \n error: cannot find attribute `lt_impl_for` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:31:8\n+  --> $DIR/feature-gate-custom_attribute2.rs:29:8\n    |\n LL | impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n    |        ^^^^^^^^^^^\n \n error: cannot find attribute `ty_inherent` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:28:8\n+  --> $DIR/feature-gate-custom_attribute2.rs:26:8\n    |\n LL | impl<#[ty_inherent] M> StTy<M> { }\n    |        ^^^^^^^^^^^\n \n error: cannot find attribute `lt_inherent` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:26:8\n+  --> $DIR/feature-gate-custom_attribute2.rs:24:8\n    |\n LL | impl<#[lt_inherent] 'e> StLt<'e> { }\n    |        ^^^^^^^^^^^\n \n error: cannot find attribute `ty_type` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:23:13\n+  --> $DIR/feature-gate-custom_attribute2.rs:21:13\n    |\n LL | type TyTy<#[ty_type] L> = (L, );\n    |             ^^^^^^^\n \n error: cannot find attribute `lt_type` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:21:13\n+  --> $DIR/feature-gate-custom_attribute2.rs:19:13\n    |\n LL | type TyLt<#[lt_type] 'd> = &'d u32;\n    |             ^^^^^^^\n \n error: cannot find attribute `ty_trait` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:18:14\n+  --> $DIR/feature-gate-custom_attribute2.rs:16:14\n    |\n LL | trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n    |              ^^^^^^^^\n \n error: cannot find attribute `lt_trait` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:16:14\n+  --> $DIR/feature-gate-custom_attribute2.rs:14:14\n    |\n LL | trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n    |              ^^^^^^^^\n \n error: cannot find attribute `ty_enum` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:13:13\n+  --> $DIR/feature-gate-custom_attribute2.rs:11:13\n    |\n LL | enum EnTy<#[ty_enum] J> { A(J), B }\n    |             ^^^^^^^\n \n error: cannot find attribute `lt_enum` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:11:13\n+  --> $DIR/feature-gate-custom_attribute2.rs:9:13\n    |\n LL | enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n    |             ^^^^^^^\n \n error: cannot find attribute `ty_struct` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:8:15\n+  --> $DIR/feature-gate-custom_attribute2.rs:6:15\n    |\n LL | struct StTy<#[ty_struct] I>(I);\n    |               ^^^^^^^^^\n \n error: cannot find attribute `lt_struct` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:6:15\n+  --> $DIR/feature-gate-custom_attribute2.rs:4:15\n    |\n LL | struct StLt<#[lt_struct] 'a>(&'a u32);\n    |               ^^^^^^^^^"}, {"sha": "36dce2aa7b9e0e8b0deadc066960b5c19f811ee4", "filename": "src/test/ui/feature-gates/feature-gate-register_attr.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -0,0 +1,3 @@\n+#![register_attr(attr)] //~ ERROR the `#[register_attr]` attribute is an experimental feature\n+\n+fn main() {}"}, {"sha": "3965d481d9b64425dd8ff1db00a7c2bee0a91441", "filename": "src/test/ui/feature-gates/feature-gate-register_attr.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_attr.stderr?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[register_attr]` attribute is an experimental feature\n+  --> $DIR/feature-gate-register_attr.rs:1:1\n+   |\n+LL | #![register_attr(attr)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/66080\n+   = help: add `#![feature(register_attr)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e599593283b35cc783cd83102cf69265acf4f2e3", "filename": "src/test/ui/feature-gates/feature-gate-register_tool.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -0,0 +1,3 @@\n+#![register_tool(tool)] //~ ERROR the `#[register_tool]` attribute is an experimental feature\n+\n+fn main() {}"}, {"sha": "177342aed900fdbc3a6e6721b7f838e42723b13e", "filename": "src/test/ui/feature-gates/feature-gate-register_tool.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-register_tool.stderr?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[register_tool]` attribute is an experimental feature\n+  --> $DIR/feature-gate-register_tool.rs:1:1\n+   |\n+LL | #![register_tool(tool)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/66079\n+   = help: add `#![feature(register_tool)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "4160e5418b78a79bb488589aa2c9de7097baa437", "filename": "src/test/ui/proc-macro/expand-to-unstable-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -1,6 +1,8 @@\n // aux-build:derive-unstable-2.rs\n \n-#![feature(custom_attribute)]\n+#![feature(register_attr)]\n+\n+#![register_attr(rustc_foo)]\n \n #[macro_use]\n extern crate derive_unstable_2;"}, {"sha": "5b6184afacdd0aec801c4959ec2aa86289f5cd4e", "filename": "src/test/ui/proc-macro/expand-to-unstable-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n-  --> $DIR/expand-to-unstable-2.rs:8:10\n+  --> $DIR/expand-to-unstable-2.rs:10:10\n    |\n LL | #[derive(Unstable)]\n    |          ^^^^^^^^"}, {"sha": "072a63baf3a47ff519856e31f18c814b64ccebe4", "filename": "src/test/ui/proc-macro/issue-41211.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -3,11 +3,13 @@\n // FIXME: https://github.com/rust-lang/rust/issues/41430\n // This is a temporary regression test for the ICE reported in #41211\n \n-#![feature(custom_attribute)]\n #![feature(custom_inner_attributes)]\n+#![feature(register_attr)]\n+\n+#![register_attr(identity_attr)]\n \n #![identity_attr]\n-//~^ ERROR inconsistent resolution for a macro: first custom attribute, then attribute macro\n+//~^ ERROR `identity_attr` is ambiguous\n extern crate test_macros;\n use test_macros::identity_attr;\n "}, {"sha": "22ad4aa147b66132be92f110bca81294deacfe91", "filename": "src/test/ui/proc-macro/issue-41211.stderr", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -1,8 +1,21 @@\n-error: inconsistent resolution for a macro: first custom attribute, then attribute macro\n-  --> $DIR/issue-41211.rs:9:4\n+error[E0659]: `identity_attr` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n+  --> $DIR/issue-41211.rs:11:4\n    |\n LL | #![identity_attr]\n-   |    ^^^^^^^^^^^^^\n+   |    ^^^^^^^^^^^^^ ambiguous name\n+   |\n+note: `identity_attr` could refer to the attribute macro imported here\n+  --> $DIR/issue-41211.rs:14:5\n+   |\n+LL | use test_macros::identity_attr;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use `crate::identity_attr` to refer to this attribute macro unambiguously\n+note: `identity_attr` could also refer to the explicitly registered attribute defined here\n+  --> $DIR/issue-41211.rs:9:18\n+   |\n+LL | #![register_attr(identity_attr)]\n+   |                  ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0659`."}, {"sha": "4776740d8de9087e58e3af488837a11ba7a5c803", "filename": "src/test/ui/span/issue-36530.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -1,6 +1,8 @@\n // gate-test-custom_inner_attributes\n \n-#![feature(custom_attribute)]\n+#![feature(register_attr)]\n+\n+#![register_attr(foo)]\n \n #[foo]\n mod foo {"}, {"sha": "2d3972917dfea7556c67f796db260de603854a8d", "filename": "src/test/ui/span/issue-36530.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fc30d884ae0c988d98452a06737705cfe34806a/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr?ref=3fc30d884ae0c988d98452a06737705cfe34806a", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: non-builtin inner attributes are unstable\n-  --> $DIR/issue-36530.rs:7:5\n+  --> $DIR/issue-36530.rs:9:5\n    |\n LL |     #![foo]\n    |     ^^^^^^^"}]}