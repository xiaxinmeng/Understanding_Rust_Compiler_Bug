{"sha": "393fa4f1b715234bfb8a80699668dada8a3880c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5M2ZhNGYxYjcxNTIzNGJmYjhhODA2OTk2NjhkYWRhOGEzODgwYzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T10:08:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T20:21:57Z"}, "message": "rename from `item_mir` to `optimized_mir`", "tree": {"sha": "43144ee5381faa17de3382e1b0d29d4304ce1120", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43144ee5381faa17de3382e1b0d29d4304ce1120"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/393fa4f1b715234bfb8a80699668dada8a3880c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/393fa4f1b715234bfb8a80699668dada8a3880c7", "html_url": "https://github.com/rust-lang/rust/commit/393fa4f1b715234bfb8a80699668dada8a3880c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/393fa4f1b715234bfb8a80699668dada8a3880c7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7023d1c2fbb9e136084b0d35164aff5eb2071ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7023d1c2fbb9e136084b0d35164aff5eb2071ae", "html_url": "https://github.com/rust-lang/rust/commit/c7023d1c2fbb9e136084b0d35164aff5eb2071ae"}], "stats": {"total": 75, "additions": 33, "deletions": 42}, "files": [{"sha": "385abbd039e08eb97d5eb22865d1480bc270f6e6", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=393fa4f1b715234bfb8a80699668dada8a3880c7", "patch": "@@ -333,7 +333,7 @@ impl<'tcx> QueryDescription for queries::const_is_rvalue_promotable_to_static<'t\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::is_item_mir_available<'tcx> {\n+impl<'tcx> QueryDescription for queries::is_mir_available<'tcx> {\n     fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"checking if item is mir available: `{}`\",\n             tcx.item_path_str(def_id))\n@@ -770,7 +770,7 @@ define_maps! { <'tcx>\n \n     [] item_body_nested_bodies: metadata_dep_node(DefId) -> Rc<BTreeMap<hir::BodyId, hir::Body>>,\n     [] const_is_rvalue_promotable_to_static: metadata_dep_node(DefId) -> bool,\n-    [] is_item_mir_available: metadata_dep_node(DefId) -> bool,\n+    [] is_mir_available: metadata_dep_node(DefId) -> bool,\n }\n \n fn coherent_trait_dep_node((_, def_id): (CrateNum, DefId)) -> DepNode<DefId> {"}, {"sha": "8191b392de5287b31d90b3e4c7dc10066d41f62f", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=393fa4f1b715234bfb8a80699668dada8a3880c7", "patch": "@@ -2324,18 +2324,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Given the did of an item, returns its (optimized) MIR, borrowed immutably.\n-    pub fn item_mir(self, did: DefId) -> &'gcx Mir<'gcx> {\n-        self.optimized_mir(did)\n-    }\n-\n     /// Return the possibly-auto-generated MIR of a (DefId, Subst) pair.\n     pub fn instance_mir(self, instance: ty::InstanceDef<'gcx>)\n                         -> &'gcx Mir<'gcx>\n     {\n         match instance {\n             ty::InstanceDef::Item(did) => {\n-                self.item_mir(did)\n+                self.optimized_mir(did)\n             }\n             ty::InstanceDef::Intrinsic(..) |\n             ty::InstanceDef::FnPtrShim(..) |\n@@ -2349,16 +2344,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     /// Given the DefId of an item, returns its MIR, borrowed immutably.\n     /// Returns None if there is no MIR for the DefId\n-    pub fn maybe_item_mir(self, did: DefId) -> Option<&'gcx Mir<'gcx>> {\n-        if did.is_local() && !self.mir_keys(LOCAL_CRATE).contains(&did) {\n-            return None;\n-        }\n-\n-        if !did.is_local() && !self.is_item_mir_available(did) {\n-            return None;\n+    pub fn maybe_optimized_mir(self, did: DefId) -> Option<&'gcx Mir<'gcx>> {\n+        if self.is_mir_available(did) {\n+            Some(self.optimized_mir(did))\n+        } else {\n+            None\n         }\n-\n-        Some(self.item_mir(did))\n     }\n \n     /// Get the attributes of a definition."}, {"sha": "872b2eb6f711363461dd49c4d7b509987b8908f1", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=393fa4f1b715234bfb8a80699668dada8a3880c7", "patch": "@@ -95,8 +95,8 @@ provide! { <'tcx> tcx, def_id, cdata\n         })\n     }\n     optimized_mir => {\n-        let mir = cdata.maybe_get_item_mir(tcx, def_id.index).unwrap_or_else(|| {\n-            bug!(\"get_item_mir: missing MIR for `{:?}`\", def_id)\n+        let mir = cdata.maybe_get_optimized_mir(tcx, def_id.index).unwrap_or_else(|| {\n+            bug!(\"get_optimized_mir: missing MIR for `{:?}`\", def_id)\n         });\n \n         let mir = tcx.alloc_mir(mir);\n@@ -122,7 +122,7 @@ provide! { <'tcx> tcx, def_id, cdata\n         cdata.entry(def_id.index).ast.expect(\"const item missing `ast`\")\n             .decode(cdata).rvalue_promotable_to_static\n     }\n-    is_item_mir_available => {\n+    is_mir_available => {\n         !cdata.is_proc_macro(def_id.index) &&\n         cdata.maybe_entry(def_id.index).and_then(|item| item.decode(cdata).mir).is_some()\n     }"}, {"sha": "ae755adcf5fbbe8bb92b76fc9fa7ad9144371b2d", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=393fa4f1b715234bfb8a80699668dada8a3880c7", "patch": "@@ -779,10 +779,10 @@ impl<'a, 'tcx> CrateMetadata {\n         tcx.alloc_tables(ast.tables.decode((self, tcx)))\n     }\n \n-    pub fn maybe_get_item_mir(&self,\n-                              tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                              id: DefIndex)\n-                              -> Option<Mir<'tcx>> {\n+    pub fn maybe_get_optimized_mir(&self,\n+                                   tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                   id: DefIndex)\n+                                   -> Option<Mir<'tcx>> {\n         match self.is_proc_macro(id) {\n             true => None,\n             false => self.entry(id).mir.map(|mir| mir.decode((self, tcx))),"}, {"sha": "125026b799c98e3bdeef935d5d0c5277d1c6cb22", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=393fa4f1b715234bfb8a80699668dada8a3880c7", "patch": "@@ -295,7 +295,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n             predicates: Some(self.encode_predicates(def_id)),\n \n             ast: None,\n-            mir: self.encode_mir(def_id),\n+            mir: self.encode_optimized_mir(def_id),\n         }\n     }\n \n@@ -433,7 +433,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n             predicates: Some(self.encode_predicates(def_id)),\n \n             ast: None,\n-            mir: self.encode_mir(def_id),\n+            mir: self.encode_optimized_mir(def_id),\n         }\n     }\n \n@@ -528,7 +528,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n             } else {\n                 None\n             },\n-            mir: self.encode_mir(def_id),\n+            mir: self.encode_optimized_mir(def_id),\n         }\n     }\n \n@@ -598,7 +598,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n             predicates: Some(self.encode_predicates(def_id)),\n \n             ast: ast.map(|body| self.encode_body(body)),\n-            mir: if mir { self.encode_mir(def_id) } else { None },\n+            mir: if mir { self.encode_optimized_mir(def_id) } else { None },\n         }\n     }\n \n@@ -619,10 +619,10 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n         self.lazy_seq(names.iter().map(|name| name.node))\n     }\n \n-    fn encode_mir(&mut self, def_id: DefId) -> Option<Lazy<mir::Mir<'tcx>>> {\n+    fn encode_optimized_mir(&mut self, def_id: DefId) -> Option<Lazy<mir::Mir<'tcx>>> {\n         debug!(\"EntryBuilder::encode_mir({:?})\", def_id);\n         if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id) {\n-            let mir = self.tcx.item_mir(def_id);\n+            let mir = self.tcx.optimized_mir(def_id);\n             Some(self.lazy(&mir))\n         } else {\n             None\n@@ -861,15 +861,15 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n             },\n             mir: match item.node {\n                 hir::ItemStatic(..) if self.tcx.sess.opts.debugging_opts.always_encode_mir => {\n-                    self.encode_mir(def_id)\n+                    self.encode_optimized_mir(def_id)\n                 }\n-                hir::ItemConst(..) => self.encode_mir(def_id),\n+                hir::ItemConst(..) => self.encode_optimized_mir(def_id),\n                 hir::ItemFn(_, _, constness, _, ref generics, _) => {\n                     let tps_len = generics.ty_params.len();\n                     let needs_inline = tps_len > 0 || attr::requests_inline(&item.attrs);\n                     let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n                     if needs_inline || constness == hir::Constness::Const || always_encode_mir {\n-                        self.encode_mir(def_id)\n+                        self.encode_optimized_mir(def_id)\n                     } else {\n                         None\n                     }\n@@ -1166,7 +1166,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n             predicates: None,\n \n             ast: None,\n-            mir: self.encode_mir(def_id),\n+            mir: self.encode_optimized_mir(def_id),\n         }\n     }\n \n@@ -1192,7 +1192,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n             predicates: Some(self.encode_predicates(def_id)),\n \n             ast: Some(self.encode_body(body)),\n-            mir: self.encode_mir(def_id),\n+            mir: self.encode_optimized_mir(def_id),\n         }\n     }\n "}, {"sha": "3e12221f85234546b2319c71aa23c2ac520e3f13", "filename": "src/librustc_mir/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_mir%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_mir%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fqueries.rs?ref=393fa4f1b715234bfb8a80699668dada8a3880c7", "patch": "@@ -38,12 +38,12 @@ pub fn provide(providers: &mut Providers) {\n         mir_const,\n         mir_validated,\n         optimized_mir,\n-        is_item_mir_available,\n+        is_mir_available,\n         ..*providers\n     };\n }\n \n-fn is_item_mir_available<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+fn is_mir_available<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n     tcx.mir_keys(def_id.krate).contains(&def_id)\n }\n "}, {"sha": "3f6ce9c9446f2d85bcdb43d4ff4f864986a90ad3", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=393fa4f1b715234bfb8a80699668dada8a3880c7", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         loop {\n             local_change = false;\n             while let Some(callsite) = callsites.pop_front() {\n-                if !self.tcx.is_item_mir_available(callsite.callee) {\n+                if !self.tcx.is_mir_available(callsite.callee) {\n                     continue;\n                 }\n "}, {"sha": "cf13a80e677b1266bac748cd8cfd43360ff00758", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=393fa4f1b715234bfb8a80699668dada8a3880c7", "patch": "@@ -29,7 +29,7 @@ pub fn write_mir_graphviz<'a, 'tcx, W>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n {\n     for def_id in dump_mir_def_ids(tcx, single) {\n         let nodeid = tcx.hir.as_local_node_id(def_id).unwrap();\n-        let mir = &tcx.item_mir(def_id);\n+        let mir = &tcx.optimized_mir(def_id);\n \n         writeln!(w, \"digraph Mir_{} {{\", nodeid)?;\n "}, {"sha": "5f51888019b9d2cd2f34b1d4ba2e4a55d8b08077", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=393fa4f1b715234bfb8a80699668dada8a3880c7", "patch": "@@ -127,7 +127,7 @@ pub fn write_mir_pretty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let mut first = true;\n     for def_id in dump_mir_def_ids(tcx, single) {\n-        let mir = &tcx.item_mir(def_id);\n+        let mir = &tcx.optimized_mir(def_id);\n \n         if first {\n             first = false;"}, {"sha": "d9921e62330b95e1fa098a7f39b60540641af3c5", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=393fa4f1b715234bfb8a80699668dada8a3880c7", "patch": "@@ -46,7 +46,7 @@ pub fn print_mir_stats<'tcx, 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, title: &str) {\n     // about maintaining the dep graph.\n     let _ignore = tcx.dep_graph.in_ignore();\n     for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n-        let mir = tcx.item_mir(def_id);\n+        let mir = tcx.optimized_mir(def_id);\n         collector.visit_mir(&mir);\n     }\n     collector.print(title);"}, {"sha": "6d7d95f54872105ea12b790ee9cd1b8e656777a8", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393fa4f1b715234bfb8a80699668dada8a3880c7/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=393fa4f1b715234bfb8a80699668dada8a3880c7", "patch": "@@ -659,7 +659,7 @@ fn should_trans_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: &Instan\n                 // in this crate\n                 false\n             } else {\n-                if !tcx.is_item_mir_available(def_id) {\n+                if !tcx.is_mir_available(def_id) {\n                     bug!(\"Cannot create local trans-item for {:?}\", def_id)\n                 }\n                 true"}]}