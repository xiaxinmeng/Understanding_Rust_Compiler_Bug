{"sha": "7f9180fcb97e667d88260e1b3d396f8078e30b2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOTE4MGZjYjk3ZTY2N2Q4ODI2MGUxYjNkMzk2ZjgwNzhlMzBiMmQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-04-21T00:51:10Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-04-21T17:11:05Z"}, "message": "syntax: Change ExpnId::{from,to}_llvm_cookie to {from,to}_u32", "tree": {"sha": "d03c11a0793495244b07f291ab0df926d0a073dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d03c11a0793495244b07f291ab0df926d0a073dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f9180fcb97e667d88260e1b3d396f8078e30b2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9180fcb97e667d88260e1b3d396f8078e30b2d", "html_url": "https://github.com/rust-lang/rust/commit/7f9180fcb97e667d88260e1b3d396f8078e30b2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f9180fcb97e667d88260e1b3d396f8078e30b2d/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83b1d7fd6f83f091cd6a02f3a3dc246cbec39677", "url": "https://api.github.com/repos/rust-lang/rust/commits/83b1d7fd6f83f091cd6a02f3a3dc246cbec39677", "html_url": "https://github.com/rust-lang/rust/commit/83b1d7fd6f83f091cd6a02f3a3dc246cbec39677"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "488a4a8082f9dc8b24d41a323d73f851a2dafb2c", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f9180fcb97e667d88260e1b3d396f8078e30b2d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9180fcb97e667d88260e1b3d396f8078e30b2d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=7f9180fcb97e667d88260e1b3d396f8078e30b2d", "patch": "@@ -348,7 +348,7 @@ unsafe extern \"C\" fn report_inline_asm<'a, 'b>(cgcx: &'a CodegenContext<'a>,\n \n     match cgcx.lto_ctxt {\n         Some((sess, _)) => {\n-            sess.codemap().with_expn_info(ExpnId::from_llvm_cookie(cookie), |info| match info {\n+            sess.codemap().with_expn_info(ExpnId::from_u32(cookie), |info| match info {\n                 Some(ei) => sess.span_err(ei.call_site, msg),\n                 None     => sess.err(msg),\n             });"}, {"sha": "27128827e267603e0a9b90c155647755093b7dd8", "filename": "src/librustc_trans/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f9180fcb97e667d88260e1b3d396f8078e30b2d/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9180fcb97e667d88260e1b3d396f8078e30b2d/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fasm.rs?ref=7f9180fcb97e667d88260e1b3d396f8078e30b2d", "patch": "@@ -138,7 +138,7 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n         let kind = llvm::LLVMGetMDKindIDInContext(bcx.ccx().llcx(),\n             key.as_ptr() as *const c_char, key.len() as c_uint);\n \n-        let val: llvm::ValueRef = C_i32(bcx.ccx(), ia.expn_id.to_llvm_cookie());\n+        let val: llvm::ValueRef = C_i32(bcx.ccx(), ia.expn_id.into_u32() as i32);\n \n         llvm::LLVMSetMetadata(r, kind,\n             llvm::LLVMMDNodeInContext(bcx.ccx().llcx(), &val, 1));"}, {"sha": "a0c29a2371b407bdb6529f30be3bb79ae4b26188", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f9180fcb97e667d88260e1b3d396f8078e30b2d/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9180fcb97e667d88260e1b3d396f8078e30b2d/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=7f9180fcb97e667d88260e1b3d396f8078e30b2d", "patch": "@@ -26,7 +26,6 @@ use std::rc::Rc;\n \n use std::fmt;\n \n-use libc::c_uint;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n \n@@ -287,13 +286,12 @@ pub const NO_EXPANSION: ExpnId = ExpnId(!0);\n pub const COMMAND_LINE_EXPN: ExpnId = ExpnId(!1);\n \n impl ExpnId {\n-    pub fn from_llvm_cookie(cookie: c_uint) -> ExpnId {\n-        ExpnId(cookie)\n+    pub fn from_u32(id: u32) -> ExpnId {\n+        ExpnId(id)\n     }\n \n-    pub fn to_llvm_cookie(self) -> i32 {\n-        let ExpnId(cookie) = self;\n-        cookie as i32\n+    pub fn into_u32(self) -> u32 {\n+        self.0\n     }\n }\n "}]}