{"sha": "a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOWNmMThjN2RiYmNjNDZkZGRlYTgxZGYzYTRjZWUxNzM1YzIzNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-06T16:43:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-06T16:43:25Z"}, "message": "Auto merge of #53645 - varkor:const-generics-redux, r=eddyb\n\nThe Genesis of Generic Germination\n\n*Long had its coming been foretold: a collaborative effort with @yodaldevoid, set in motion by @jplatte, to beget a new Kind: one of a very different Sort to those that come before it. Amidst promises of ineffable powers previously thought unobtainable, few dared believe that the prophecies were true. But as they gazed upon that which claimed to be the Beginning, a few gentle sparks of hope fluttered deep within. It was not Time yet. But it was a Sign. And maybe, for some, that was enough.*\n\nThere's a long way to go, but we're at the point where we would benefit from GitHub's reviewing capabilities.\n\nr? @eddyb", "tree": {"sha": "3acc8e9c4b9322ee50be98b4d9b245a30110b2c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3acc8e9c4b9322ee50be98b4d9b245a30110b2c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "html_url": "https://github.com/rust-lang/rust/commit/a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3b8ab5199af4a3c11d14b0cbdb17a641e8eee71", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b8ab5199af4a3c11d14b0cbdb17a641e8eee71", "html_url": "https://github.com/rust-lang/rust/commit/c3b8ab5199af4a3c11d14b0cbdb17a641e8eee71"}, {"sha": "9a2772aff0e6c2058fb52a844b4593eabd18fcbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2772aff0e6c2058fb52a844b4593eabd18fcbc", "html_url": "https://github.com/rust-lang/rust/commit/9a2772aff0e6c2058fb52a844b4593eabd18fcbc"}], "stats": {"total": 111, "additions": 71, "deletions": 40}, "files": [{"sha": "577211088929025ba2c06ac70fba2b231630dab9", "filename": "src/librustc/infer/at.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fat.rs?ref=a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "patch": "@@ -27,6 +27,7 @@\n \n use super::*;\n \n+use crate::ty::Const;\n use crate::ty::relate::{Relate, TypeRelation};\n \n pub struct At<'a, 'gcx: 'tcx, 'tcx: 'a> {\n@@ -308,6 +309,20 @@ impl<'tcx> ToTrace<'tcx> for ty::Region<'tcx> {\n     }\n }\n \n+impl<'tcx> ToTrace<'tcx> for &'tcx Const<'tcx> {\n+    fn to_trace(cause: &ObligationCause<'tcx>,\n+                a_is_expected: bool,\n+                a: Self,\n+                b: Self)\n+                -> TypeTrace<'tcx>\n+    {\n+        TypeTrace {\n+            cause: cause.clone(),\n+            values: Consts(ExpectedFound::new(a_is_expected, a, b))\n+        }\n+    }\n+}\n+\n impl<'tcx> ToTrace<'tcx> for ty::TraitRef<'tcx> {\n     fn to_trace(cause: &ObligationCause<'tcx>,\n                 a_is_expected: bool,"}, {"sha": "413c1428ff954e13f09275edaec37d364fc03f0b", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "patch": "@@ -318,8 +318,9 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                     obligations.extend(ok.into_obligations());\n                 }\n \n-                (UnpackedKind::Const(..), UnpackedKind::Const(..)) => {\n-                    unimplemented!() // FIXME(const_generics)\n+                (UnpackedKind::Const(v1), UnpackedKind::Const(v2)) => {\n+                    let ok = self.at(cause, param_env).eq(v1, v2)?;\n+                    obligations.extend(ok.into_obligations());\n                 }\n \n                 _ => {\n@@ -626,8 +627,9 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                         obligations\n                             .extend(self.at(cause, param_env).eq(v1, v2)?.into_obligations());\n                     }\n-                    (UnpackedKind::Const(..), UnpackedKind::Const(..)) => {\n-                        unimplemented!() // FIXME(const_generics)\n+                    (UnpackedKind::Const(v1), UnpackedKind::Const(v2)) => {\n+                        let ok = self.at(cause, param_env).eq(v1, v2)?;\n+                        obligations.extend(ok.into_obligations());\n                     }\n                     _ => {\n                         bug!(\"kind mismatch, cannot unify {:?} and {:?}\", value1, value2,);"}, {"sha": "4b6e7da333081891add336eb6ac22a3fd79f80b0", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "patch": "@@ -1260,6 +1260,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         match *values {\n             infer::Types(ref exp_found) => self.expected_found_str_ty(exp_found),\n             infer::Regions(ref exp_found) => self.expected_found_str(exp_found),\n+            infer::Consts(ref exp_found) => self.expected_found_str(exp_found),\n             infer::TraitRefs(ref exp_found) => self.expected_found_str(exp_found),\n             infer::PolyTraitRefs(ref exp_found) => self.expected_found_str(exp_found),\n         }"}, {"sha": "b5a9184079aa66b42713b6c5101c8e4f41133c2c", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "patch": "@@ -232,6 +232,7 @@ pub type PlaceholderMap<'tcx> = BTreeMap<ty::BoundRegion, ty::Region<'tcx>>;\n pub enum ValuePairs<'tcx> {\n     Types(ExpectedFound<Ty<'tcx>>),\n     Regions(ExpectedFound<ty::Region<'tcx>>),\n+    Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),\n     TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),\n     PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),\n }\n@@ -1730,6 +1731,7 @@ EnumTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for ValuePairs<'tcx> {\n         (ValuePairs::Types)(a),\n         (ValuePairs::Regions)(a),\n+        (ValuePairs::Consts)(a),\n         (ValuePairs::TraitRefs)(a),\n         (ValuePairs::PolyTraitRefs)(a),\n     }"}, {"sha": "f81394a878f5aed061cc976597966fb54656d119", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "patch": "@@ -6,7 +6,7 @@\n use crate::hir::def::Namespace;\n use crate::mir::ProjectionKind;\n use crate::mir::interpret::ConstValue;\n-use crate::ty::{self, Lift, Ty, TyCtxt, ConstVid};\n+use crate::ty::{self, Lift, Ty, TyCtxt, ConstVid, InferConst};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::print::{FmtPrinter, Printer};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -1352,8 +1352,7 @@ impl<'tcx> TypeFoldable<'tcx> for ConstValue<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n             ConstValue::ByRef(ptr, alloc) => ConstValue::ByRef(ptr, alloc),\n-            // FIXME(const_generics): implement TypeFoldable for InferConst\n-            ConstValue::Infer(ic) => ConstValue::Infer(ic),\n+            ConstValue::Infer(ic) => ConstValue::Infer(ic.fold_with(folder)),\n             ConstValue::Param(p) => ConstValue::Param(p.fold_with(folder)),\n             ConstValue::Placeholder(p) => ConstValue::Placeholder(p),\n             ConstValue::Scalar(a) => ConstValue::Scalar(a),\n@@ -1366,8 +1365,7 @@ impl<'tcx> TypeFoldable<'tcx> for ConstValue<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n             ConstValue::ByRef(..) => false,\n-            // FIXME(const_generics): implement TypeFoldable for InferConst\n-            ConstValue::Infer(_) => false,\n+            ConstValue::Infer(ic) => ic.visit_with(visitor),\n             ConstValue::Param(p) => p.visit_with(visitor),\n             ConstValue::Placeholder(_) => false,\n             ConstValue::Scalar(_) => false,\n@@ -1376,3 +1374,13 @@ impl<'tcx> TypeFoldable<'tcx> for ConstValue<'tcx> {\n         }\n     }\n }\n+\n+impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, _folder: &mut F) -> Self {\n+        *self\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n+        false\n+    }\n+}"}, {"sha": "e5bd3f15efe95e7badd6429564e26f2847915553", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "patch": "@@ -618,8 +618,7 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n             }\n         };\n \n-        // FIXME(const_generics): shift const through binders\n-        ct\n+        self.shift_vars_through_binders(ct)\n     }\n \n     /// It is sometimes necessary to adjust the De Bruijn indices during substitution. This occurs\n@@ -664,15 +663,15 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n     /// As indicated in the diagram, here the same type `&'a int` is substituted once, but in the\n     /// first case we do not increase the De Bruijn index and in the second case we do. The reason\n     /// is that only in the second case have we passed through a fn binder.\n-    fn shift_vars_through_binders(&self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        debug!(\"shift_vars(ty={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})\",\n-               ty, self.binders_passed, ty.has_escaping_bound_vars());\n+    fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {\n+        debug!(\"shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})\",\n+               val, self.binders_passed, val.has_escaping_bound_vars());\n \n-        if self.binders_passed == 0 || !ty.has_escaping_bound_vars() {\n-            return ty;\n+        if self.binders_passed == 0 || !val.has_escaping_bound_vars() {\n+            return val;\n         }\n \n-        let result = ty::fold::shift_vars(self.tcx(), &ty, self.binders_passed);\n+        let result = ty::fold::shift_vars(self.tcx(), &val, self.binders_passed);\n         debug!(\"shift_vars: shifted result = {:?}\", result);\n \n         result"}, {"sha": "999e7402afd93a57f64787feee4416534a6a2d33", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "patch": "@@ -3,7 +3,7 @@ use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::interpret::ConstValue;\n use rustc::session::config::OptLevel;\n-use rustc::ty::{self, Ty, TyCtxt, Const, ClosureSubsts, GeneratorSubsts, ParamConst};\n+use rustc::ty::{self, Ty, TyCtxt, Const, ClosureSubsts, GeneratorSubsts};\n use rustc::ty::subst::{SubstsRef, InternalSubsts};\n use syntax::ast;\n use syntax::attr::InlineAttr;\n@@ -240,11 +240,11 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n     }\n \n     // Pushes the type name of the specified type to the provided string.\n-    // If 'debug' is true, printing normally unprintable types is allowed\n-    // (e.g. ty::GeneratorWitness). This parameter should only be set when\n-    // this method is being used for logging purposes (e.g. with debug! or info!)\n-    // When being used for codegen purposes, 'debug' should be set to 'false'\n-    // in order to catch unexpected types that should never end up in a type name\n+    // If `debug` is true, printing normally unprintable types is allowed\n+    // (e.g. `ty::GeneratorWitness`). This parameter should only be set when\n+    // this method is being used for logging purposes (e.g. with `debug!` or `info!`)\n+    // When being used for codegen purposes, `debug` should be set to `false`\n+    // in order to catch unexpected types that should never end up in a type name.\n     pub fn push_type_name(&self, t: Ty<'tcx>, output: &mut String, debug: bool) {\n         match t.sty {\n             ty::Bool              => output.push_str(\"bool\"),\n@@ -387,22 +387,34 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                 if debug {\n                     output.push_str(&format!(\"`{:?}`\", t));\n                 } else {\n-                    bug!(\"DefPathBasedNames: Trying to create type name for \\\n-                                         unexpected type: {:?}\", t);\n+                    bug!(\n+                        \"DefPathBasedNames: trying to create type name for unexpected type: {:?}\",\n+                        t,\n+                    );\n                 }\n             }\n         }\n     }\n \n-    // FIXME(const_generics): handle debug printing.\n+    // Pushes the the name of the specified const to the provided string.\n+    // If `debug` is true, usually-unprintable consts (such as `Infer`) will be printed,\n+    // as well as the unprintable types of constants (see `push_type_name` for more details).\n     pub fn push_const_name(&self, c: &Const<'tcx>, output: &mut String, debug: bool) {\n         match c.val {\n-            ConstValue::Infer(..) | ConstValue::Placeholder(_) => output.push_str(\"_\"),\n-            ConstValue::Param(ParamConst { name, .. }) => {\n-                write!(output, \"{}\", name).unwrap();\n+            ConstValue::Scalar(..) | ConstValue::Slice(..) | ConstValue::ByRef(..) => {\n+                // FIXME(const_generics): we could probably do a better job here.\n+                write!(output, \"{:?}\", c).unwrap()\n+            }\n+            _ => {\n+                if debug {\n+                    write!(output, \"{:?}\", c).unwrap()\n+                } else {\n+                    bug!(\n+                        \"DefPathBasedNames: trying to create const name for unexpected const: {:?}\",\n+                        c,\n+                    );\n+                }\n             }\n-            ConstValue::Unevaluated(..) => output.push_str(\"_: _\"),\n-            _ => write!(output, \"{:?}\", c).unwrap(),\n         }\n         output.push_str(\": \");\n         self.push_type_name(c.ty, output, debug);"}, {"sha": "82fcf8ff52f837d4e031cebc9aedb1810a082d8e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "patch": "@@ -5785,8 +5785,6 @@ pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ty\n     );\n \n-    // FIXME(const_generics): we probably want to check the bounds for const parameters too.\n-\n     if own_counts.types == 0 {\n         return;\n     }"}, {"sha": "3a260db806520a69261a447c7681225b0a001b9f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "patch": "@@ -1706,9 +1706,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n                 }\n                 Some(param.clean(cx))\n             }\n-            ty::GenericParamDefKind::Const { .. } => {\n-                unimplemented!() // FIXME(const_generics)\n-            }\n+            ty::GenericParamDefKind::Const { .. } => None,\n         }).collect::<Vec<GenericParamDef>>();\n \n         let mut where_predicates = preds.predicates.iter()"}, {"sha": "084091f4c2a39b5abe5e0d9716b753510ee9d8ae", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19cf18c7dbbcc46dddea81df3a4cee1735c2349/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a19cf18c7dbbcc46dddea81df3a4cee1735c2349", "patch": "@@ -6045,10 +6045,6 @@ impl<'a> Parser<'a> {\n                 });\n                 assoc_ty_bindings.push(span);\n             } else if self.check_const_arg() {\n-                // FIXME(const_generics): to distinguish between idents for types and consts,\n-                // we should introduce a GenericArg::Ident in the AST and distinguish when\n-                // lowering to the HIR. For now, idents for const args are not permitted.\n-\n                 // Parse const argument.\n                 let expr = if let token::OpenDelim(token::Brace) = self.token {\n                     self.parse_block_expr(None, self.span, BlockCheckMode::Default, ThinVec::new())?"}]}