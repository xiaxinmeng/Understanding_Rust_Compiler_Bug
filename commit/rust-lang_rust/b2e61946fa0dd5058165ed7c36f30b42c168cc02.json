{"sha": "b2e61946fa0dd5058165ed7c36f30b42c168cc02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZTYxOTQ2ZmEwZGQ1MDU4MTY1ZWQ3YzM2ZjMwYjQyYzE2OGNjMDI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-08T15:07:27Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-29T16:17:13Z"}, "message": "Remove inline_asm_call from cg_ssa\n\n`count_insn` is no longer called for inline asm, because it is private to builder.rs", "tree": {"sha": "e1f00e254ef5363ed85e8715f4533580486ad5c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1f00e254ef5363ed85e8715f4533580486ad5c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2e61946fa0dd5058165ed7c36f30b42c168cc02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e61946fa0dd5058165ed7c36f30b42c168cc02", "html_url": "https://github.com/rust-lang/rust/commit/b2e61946fa0dd5058165ed7c36f30b42c168cc02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2e61946fa0dd5058165ed7c36f30b42c168cc02/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b71c429007e6ce1dcbae2f909cf5cd6d10a9901d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d", "html_url": "https://github.com/rust-lang/rust/commit/b71c429007e6ce1dcbae2f909cf5cd6d10a9901d"}], "stats": {"total": 104, "additions": 47, "deletions": 57}, "files": [{"sha": "100a896ea0c7d703a6312dbc6636cdad98707fcb", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b2e61946fa0dd5058165ed7c36f30b42c168cc02/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e61946fa0dd5058165ed7c36f30b42c168cc02/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=b2e61946fa0dd5058165ed7c36f30b42c168cc02", "patch": "@@ -10,7 +10,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::mir::operand::OperandValue;\n \n-use std::ffi::CString;\n+use std::ffi::{CStr, CString};\n use libc::{c_uint, c_char};\n \n \n@@ -73,7 +73,8 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n \n         let asm = CString::new(ia.asm.as_str().as_bytes()).unwrap();\n         let constraint_cstr = CString::new(all_constraints).unwrap();\n-        let r = self.inline_asm_call(\n+        let r = inline_asm_call(\n+            self,\n             &asm,\n             &constraint_cstr,\n             &inputs,\n@@ -119,3 +120,46 @@ impl AsmMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         }\n     }\n }\n+\n+fn inline_asm_call(\n+    bx: &mut Builder<'a, 'll, 'tcx>,\n+    asm: &CStr,\n+    cons: &CStr,\n+    inputs: &[&'ll Value],\n+    output: &'ll llvm::Type,\n+    volatile: bool,\n+    alignstack: bool,\n+    dia: ::syntax::ast::AsmDialect,\n+) -> Option<&'ll Value> {\n+    let volatile = if volatile { llvm::True }\n+                    else        { llvm::False };\n+    let alignstack = if alignstack { llvm::True }\n+                        else          { llvm::False };\n+\n+    let argtys = inputs.iter().map(|v| {\n+        debug!(\"Asm Input Type: {:?}\", *v);\n+        bx.cx.val_ty(*v)\n+    }).collect::<Vec<_>>();\n+\n+    debug!(\"Asm Output Type: {:?}\", output);\n+    let fty = bx.cx.type_func(&argtys[..], output);\n+    unsafe {\n+        // Ask LLVM to verify that the constraints are well-formed.\n+        let constraints_ok = llvm::LLVMRustInlineAsmVerify(fty, cons.as_ptr());\n+        debug!(\"Constraint verification result: {:?}\", constraints_ok);\n+        if constraints_ok {\n+            let v = llvm::LLVMRustInlineAsm(\n+                fty,\n+                asm.as_ptr(),\n+                cons.as_ptr(),\n+                volatile,\n+                alignstack,\n+                llvm::AsmDialect::from_generic(dia),\n+            );\n+            Some(bx.call(v, inputs, None))\n+        } else {\n+            // LLVM has detected an issue with our constraints, bail out\n+            None\n+        }\n+    }\n+}"}, {"sha": "f53bb6a196a990848990acfea509b5cd9f601ec2", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b2e61946fa0dd5058165ed7c36f30b42c168cc02/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e61946fa0dd5058165ed7c36f30b42c168cc02/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=b2e61946fa0dd5058165ed7c36f30b42c168cc02", "patch": "@@ -1,4 +1,4 @@\n-use crate::llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n+use crate::llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope};\n use crate::llvm::{self, False, BasicBlock};\n use crate::common::Funclet;\n use crate::context::CodegenCx;\n@@ -19,7 +19,6 @@ use rustc_codegen_ssa::base::to_immediate;\n use rustc_codegen_ssa::mir::operand::{OperandValue, OperandRef};\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use std::borrow::Cow;\n-use std::ffi::CStr;\n use std::ops::{Deref, Range};\n use std::ptr;\n \n@@ -903,45 +902,6 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     /* Miscellaneous instructions */\n-    fn inline_asm_call(&mut self, asm: &CStr, cons: &CStr,\n-                       inputs: &[&'ll Value], output: &'ll Type,\n-                       volatile: bool, alignstack: bool,\n-                       dia: syntax::ast::AsmDialect) -> Option<&'ll Value> {\n-        self.count_insn(\"inlineasm\");\n-\n-        let volatile = if volatile { llvm::True }\n-                       else        { llvm::False };\n-        let alignstack = if alignstack { llvm::True }\n-                         else          { llvm::False };\n-\n-        let argtys = inputs.iter().map(|v| {\n-            debug!(\"Asm Input Type: {:?}\", *v);\n-            self.cx.val_ty(*v)\n-        }).collect::<Vec<_>>();\n-\n-        debug!(\"Asm Output Type: {:?}\", output);\n-        let fty = self.type_func(&argtys[..], output);\n-        unsafe {\n-            // Ask LLVM to verify that the constraints are well-formed.\n-            let constraints_ok = llvm::LLVMRustInlineAsmVerify(fty, cons.as_ptr());\n-            debug!(\"Constraint verification result: {:?}\", constraints_ok);\n-            if constraints_ok {\n-                let v = llvm::LLVMRustInlineAsm(\n-                    fty,\n-                    asm.as_ptr(),\n-                    cons.as_ptr(),\n-                    volatile,\n-                    alignstack,\n-                    AsmDialect::from_generic(dia),\n-                );\n-                Some(self.call(v, inputs, None))\n-            } else {\n-                // LLVM has detected an issue with our constraints, bail out\n-                None\n-            }\n-        }\n-    }\n-\n     fn memcpy(&mut self, dst: &'ll Value, dst_align: Align,\n                   src: &'ll Value, src_align: Align,\n                   size: &'ll Value, flags: MemFlags) {"}, {"sha": "e54ae76022217ed555fe2d0198498cc255290003", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2e61946fa0dd5058165ed7c36f30b42c168cc02/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e61946fa0dd5058165ed7c36f30b42c168cc02/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=b2e61946fa0dd5058165ed7c36f30b42c168cc02", "patch": "@@ -11,10 +11,7 @@ use crate::mir::place::PlaceRef;\n use crate::MemFlags;\n use rustc::ty::Ty;\n use rustc::ty::layout::{Align, Size};\n-use std::ffi::CStr;\n-\n use std::ops::Range;\n-use syntax::ast::AsmDialect;\n \n #[derive(Copy, Clone)]\n pub enum OverflowOp {\n@@ -164,17 +161,6 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     fn icmp(&mut self, op: IntPredicate, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn fcmp(&mut self, op: RealPredicate, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n \n-    fn inline_asm_call(\n-        &mut self,\n-        asm: &CStr,\n-        cons: &CStr,\n-        inputs: &[Self::Value],\n-        output: Self::Type,\n-        volatile: bool,\n-        alignstack: bool,\n-        dia: AsmDialect,\n-    ) -> Option<Self::Value>;\n-\n     fn memcpy(\n         &mut self,\n         dst: Self::Value,"}]}