{"sha": "5c130411e907b018aef90aabe766d04e989abe9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMTMwNDExZTkwN2IwMThhZWY5MGFhYmU3NjZkMDRlOTg5YWJlOWU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-12-12T22:51:40Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-12-14T21:46:13Z"}, "message": "review comments", "tree": {"sha": "215b0db299a74139c6aad7534b56b8cf935884eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/215b0db299a74139c6aad7534b56b8cf935884eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c130411e907b018aef90aabe766d04e989abe9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c130411e907b018aef90aabe766d04e989abe9e", "html_url": "https://github.com/rust-lang/rust/commit/5c130411e907b018aef90aabe766d04e989abe9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c130411e907b018aef90aabe766d04e989abe9e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef09db0ff301b98f6980f4bd3dad6fb060d18daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef09db0ff301b98f6980f4bd3dad6fb060d18daa", "html_url": "https://github.com/rust-lang/rust/commit/ef09db0ff301b98f6980f4bd3dad6fb060d18daa"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "51f9c1b353e27d0b0cec92c7519b3ece13d731d1", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5c130411e907b018aef90aabe766d04e989abe9e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c130411e907b018aef90aabe766d04e989abe9e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=5c130411e907b018aef90aabe766d04e989abe9e", "patch": "@@ -457,11 +457,28 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         err\n     }\n \n+\n+    /// Get the parent trait chain start\n+    fn get_parent_trait_ref(&self, code: &ObligationCauseCode<'tcx>) -> Option<String> {\n+        match code {\n+            &ObligationCauseCode::BuiltinDerivedObligation(ref data) => {\n+                let parent_trait_ref = self.resolve_type_vars_if_possible(\n+                    &data.parent_trait_ref);\n+                match self.get_parent_trait_ref(&data.parent_code) {\n+                    Some(t) => Some(t),\n+                    None => Some(format!(\"{}\", parent_trait_ref.0.self_ty())),\n+                }\n+            }\n+            _ => None,\n+        }\n+    }\n+\n     pub fn report_selection_error(&self,\n                                   obligation: &PredicateObligation<'tcx>,\n                                   error: &SelectionError<'tcx>)\n     {\n         let span = obligation.cause.span;\n+\n         let mut err = match *error {\n             SelectionError::Unimplemented => {\n                 if let ObligationCauseCode::CompareImplMethodObligation {\n@@ -486,16 +503,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                 return;\n                             } else {\n                                 let trait_ref = trait_predicate.to_poly_trait_ref();\n-\n-                                let (post_message, pre_message) =\n-                                    if let ObligationCauseCode::BuiltinDerivedObligation(ref data)\n-                                        = obligation.cause.code {\n-                                    let parent_trait_ref = self.resolve_type_vars_if_possible(\n-                                        &data.parent_trait_ref);\n-                                    (format!(\" in `{}`\", parent_trait_ref.0.self_ty()),\n-                                     format!(\"within `{}`, \", parent_trait_ref.0.self_ty()))\n-                                } else {\n-                                    (String::new(), String::new())\n+                                let (post_message, pre_message) = match self.get_parent_trait_ref(\n+                                    &obligation.cause.code)\n+                                {\n+                                    Some(t) => {\n+                                        (format!(\" in `{}`\", t), format!(\"within `{}`, \", t))\n+                                    }\n+                                    None => (String::new(), String::new()),\n                                 };\n                                 let mut err = struct_span_err!(\n                                     self.tcx.sess,"}, {"sha": "211c0e6f890313130583ac8d7796ddd6a6403a2d", "filename": "src/test/compile-fail/E0277-2.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5c130411e907b018aef90aabe766d04e989abe9e/src%2Ftest%2Fcompile-fail%2FE0277-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c130411e907b018aef90aabe766d04e989abe9e/src%2Ftest%2Fcompile-fail%2FE0277-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0277-2.rs?ref=5c130411e907b018aef90aabe766d04e989abe9e", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    bar: Bar\n+}\n+\n+struct Bar {\n+    baz: Baz\n+}\n+\n+struct Baz {\n+    x: *const u8\n+}\n+\n+fn is_send<T: Send>() { }\n+\n+fn main() {\n+    is_send::<Foo>();\n+    //~^ ERROR the trait bound `*const u8: std::marker::Send` is not satisfied in `Foo`\n+    //~| NOTE within `Foo`, the trait `std::marker::Send` is not implemented for `*const u8`\n+    //~| NOTE: `*const u8` cannot be sent between threads safely\n+    //~| NOTE: required because it appears within the type `Baz`\n+    //~| NOTE: required because it appears within the type `Bar`\n+    //~| NOTE: required because it appears within the type `Foo`\n+    //~| NOTE: required by `is_send`\n+}"}]}