{"sha": "cf1f92a2ca29bd8ae183929fa44447c9d3bd6637", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMWY5MmEyY2EyOWJkOGFlMTgzOTI5ZmE0NDQ0N2M5ZDNiZDY2Mzc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-01T09:51:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-08T17:24:17Z"}, "message": "Revert \"Let several methods take &Resolver instead of a BoxedResolver wrapper\"\n\nThis reverts commit 5343ec338f72a61e2f51f9d90117092c8e8a725a.", "tree": {"sha": "4580c70b46dd49895c0f7c77ac031e52ff554c40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4580c70b46dd49895c0f7c77ac031e52ff554c40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf1f92a2ca29bd8ae183929fa44447c9d3bd6637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1f92a2ca29bd8ae183929fa44447c9d3bd6637", "html_url": "https://github.com/rust-lang/rust/commit/cf1f92a2ca29bd8ae183929fa44447c9d3bd6637", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf1f92a2ca29bd8ae183929fa44447c9d3bd6637/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e148200d457ef7f6740990d15b7b9c534e3aaeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e148200d457ef7f6740990d15b7b9c534e3aaeb", "html_url": "https://github.com/rust-lang/rust/commit/5e148200d457ef7f6740990d15b7b9c534e3aaeb"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "802d00faef9acbe3f8cade8e48885222097ac2c4", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cf1f92a2ca29bd8ae183929fa44447c9d3bd6637/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1f92a2ca29bd8ae183929fa44447c9d3bd6637/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=cf1f92a2ca29bd8ae183929fa44447c9d3bd6637", "patch": "@@ -7,6 +7,7 @@ use rustc_ast::{self as ast, visit};\n use rustc_codegen_ssa::back::link::emit_metadata;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n+use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{par_iter, Lrc, OnceCell, ParallelIterator, WorkerLocal};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{ErrorReported, PResult};\n@@ -270,7 +271,7 @@ fn pre_expansion_lint(\n \n fn configure_and_expand_inner<'a>(\n     sess: &'a Session,\n-    lint_store: &LintStore,\n+    lint_store: &'a LintStore,\n     mut krate: ast::Crate,\n     crate_name: &str,\n     resolver_arenas: &'a ResolverArenas<'a>,\n@@ -593,7 +594,7 @@ fn escape_dep_env(symbol: Symbol) -> String {\n \n fn write_out_deps(\n     sess: &Session,\n-    resolver: &Resolver<'_>,\n+    boxed_resolver: &Steal<Rc<RefCell<BoxedResolver>>>,\n     outputs: &OutputFilenames,\n     out_filenames: &[PathBuf],\n ) {\n@@ -620,18 +621,20 @@ fn write_out_deps(\n         }\n \n         if sess.binary_dep_depinfo() {\n-            for cnum in resolver.cstore().crates_untracked() {\n-                let source = resolver.cstore().crate_source_untracked(cnum);\n-                if let Some((path, _)) = source.dylib {\n-                    files.push(escape_dep_filename(&path.display().to_string()));\n-                }\n-                if let Some((path, _)) = source.rlib {\n-                    files.push(escape_dep_filename(&path.display().to_string()));\n-                }\n-                if let Some((path, _)) = source.rmeta {\n-                    files.push(escape_dep_filename(&path.display().to_string()));\n+            boxed_resolver.borrow().borrow_mut().access(|resolver| {\n+                for cnum in resolver.cstore().crates_untracked() {\n+                    let source = resolver.cstore().crate_source_untracked(cnum);\n+                    if let Some((path, _)) = source.dylib {\n+                        files.push(escape_dep_filename(&path.display().to_string()));\n+                    }\n+                    if let Some((path, _)) = source.rlib {\n+                        files.push(escape_dep_filename(&path.display().to_string()));\n+                    }\n+                    if let Some((path, _)) = source.rmeta {\n+                        files.push(escape_dep_filename(&path.display().to_string()));\n+                    }\n                 }\n-            }\n+            });\n         }\n \n         let mut file = BufWriter::new(fs::File::create(&deps_filename)?);\n@@ -687,7 +690,7 @@ pub fn prepare_outputs(\n     sess: &Session,\n     compiler: &Compiler,\n     krate: &ast::Crate,\n-    resolver: &Resolver<'_>,\n+    boxed_resolver: &Steal<Rc<RefCell<BoxedResolver>>>,\n     crate_name: &str,\n ) -> Result<OutputFilenames> {\n     let _timer = sess.timer(\"prepare_outputs\");\n@@ -727,7 +730,7 @@ pub fn prepare_outputs(\n         }\n     }\n \n-    write_out_deps(sess, resolver, &outputs, &output_paths);\n+    write_out_deps(sess, boxed_resolver, &outputs, &output_paths);\n \n     let only_dep_info = sess.opts.output_types.contains_key(&OutputType::DepInfo)\n         && sess.opts.output_types.len() == 1;"}, {"sha": "2320f0b47d27df0bb04b9a8c530ebc0d6bbfc72f", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cf1f92a2ca29bd8ae183929fa44447c9d3bd6637/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1f92a2ca29bd8ae183929fa44447c9d3bd6637/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=cf1f92a2ca29bd8ae183929fa44447c9d3bd6637", "patch": "@@ -246,20 +246,13 @@ impl<'tcx> Queries<'tcx> {\n             let expansion_result = self.expansion()?;\n             let (krate, boxed_resolver, _) = &*expansion_result.peek();\n             let crate_name = self.crate_name()?.peek();\n-\n-            // These borrow(), borrow_mut() and access() calls are separate statements to prevent a\n-            // \"temporary value dropped while borrowed\" error.\n-            let boxed_resolver = boxed_resolver.borrow();\n-            let mut boxed_resolver = boxed_resolver.borrow_mut();\n-            boxed_resolver.access(|resolver| {\n-                passes::prepare_outputs(\n-                    self.session(),\n-                    self.compiler,\n-                    &krate,\n-                    resolver,\n-                    &crate_name,\n-                )\n-            })\n+            passes::prepare_outputs(\n+                self.session(),\n+                self.compiler,\n+                &krate,\n+                &boxed_resolver,\n+                &crate_name,\n+            )\n         })\n     }\n "}]}