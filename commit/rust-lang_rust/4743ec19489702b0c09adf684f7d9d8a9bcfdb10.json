{"sha": "4743ec19489702b0c09adf684f7d9d8a9bcfdb10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NDNlYzE5NDg5NzAyYjBjMDlhZGY2ODRmN2Q5ZDhhOWJjZmRiMTA=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-08-05T13:38:57Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-08-05T13:38:57Z"}, "message": "Don't emit `too_many_lines` for closures", "tree": {"sha": "37dc8eca2a2bbc5e373c852b65cc2b424190b0a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37dc8eca2a2bbc5e373c852b65cc2b424190b0a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4743ec19489702b0c09adf684f7d9d8a9bcfdb10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4743ec19489702b0c09adf684f7d9d8a9bcfdb10", "html_url": "https://github.com/rust-lang/rust/commit/4743ec19489702b0c09adf684f7d9d8a9bcfdb10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4743ec19489702b0c09adf684f7d9d8a9bcfdb10/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dbf0c138de34d7805b9291705f2e2361324f219", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbf0c138de34d7805b9291705f2e2361324f219", "html_url": "https://github.com/rust-lang/rust/commit/2dbf0c138de34d7805b9291705f2e2361324f219"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "04fc5887e8e8b21123d92d9bde53ed6179151560", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4743ec19489702b0c09adf684f7d9d8a9bcfdb10/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4743ec19489702b0c09adf684f7d9d8a9bcfdb10/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=4743ec19489702b0c09adf684f7d9d8a9bcfdb10", "patch": "@@ -251,7 +251,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         hir_id: hir::HirId,\n     ) {\n         too_many_arguments::check_fn(cx, kind, decl, span, hir_id, self.too_many_arguments_threshold);\n-        too_many_lines::check_fn(cx, span, body, self.too_many_lines_threshold);\n+        too_many_lines::check_fn(cx, kind, span, body, self.too_many_lines_threshold);\n         not_unsafe_ptr_arg_deref::check_fn(cx, kind, decl, body, hir_id);\n     }\n "}, {"sha": "008ef661b55f20a31c4e25e1e24e3a0de4b7a94a", "filename": "clippy_lints/src/functions/too_many_lines.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4743ec19489702b0c09adf684f7d9d8a9bcfdb10/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4743ec19489702b0c09adf684f7d9d8a9bcfdb10/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs?ref=4743ec19489702b0c09adf684f7d9d8a9bcfdb10", "patch": "@@ -1,4 +1,5 @@\n use rustc_hir as hir;\n+use rustc_hir::intravisit::FnKind;\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_span::Span;\n@@ -8,8 +9,16 @@ use clippy_utils::source::snippet_opt;\n \n use super::TOO_MANY_LINES;\n \n-pub(super) fn check_fn(cx: &LateContext<'_>, span: Span, body: &'tcx hir::Body<'_>, too_many_lines_threshold: u64) {\n-    if in_external_macro(cx.sess(), span) {\n+pub(super) fn check_fn(\n+    cx: &LateContext<'_>,\n+    kind: FnKind<'tcx>,\n+    span: Span,\n+    body: &'tcx hir::Body<'_>,\n+    too_many_lines_threshold: u64,\n+) {\n+    // Closures must be contained in a parent body, which will be checked for `too_many_lines`.\n+    // Don't check closures for `too_many_lines` to avoid duplicated lints.\n+    if matches!(kind, FnKind::Closure) || in_external_macro(cx.sess(), span) {\n         return;\n     }\n "}, {"sha": "33a3ef7513631aab7d1fb367d49c9993ab1c44ad", "filename": "tests/ui-toml/functions_maxlines/test.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4743ec19489702b0c09adf684f7d9d8a9bcfdb10/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4743ec19489702b0c09adf684f7d9d8a9bcfdb10/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.rs?ref=4743ec19489702b0c09adf684f7d9d8a9bcfdb10", "patch": "@@ -1,3 +1,5 @@\n+// edition:2018\n+\n #![warn(clippy::too_many_lines)]\n \n // This function should be considered one line.\n@@ -20,6 +22,20 @@ fn too_many_lines() {\n     println!(\"This is bad.\");\n }\n \n+// This should only fail once (#7517).\n+async fn async_too_many_lines() {\n+    println!(\"This is bad.\");\n+    println!(\"This is bad.\");\n+}\n+\n+// This should fail only once, without failing on the closure.\n+fn closure_too_many_lines() {\n+    let _ = {\n+        println!(\"This is bad.\");\n+        println!(\"This is bad.\");\n+    };\n+}\n+\n // This should be considered one line.\n #[rustfmt::skip]\n fn comment_starts_after_code() {"}, {"sha": "7551cac9f504b968918e65f3d82ae0ee1b800cf0", "filename": "tests/ui-toml/functions_maxlines/test.stderr", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4743ec19489702b0c09adf684f7d9d8a9bcfdb10/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4743ec19489702b0c09adf684f7d9d8a9bcfdb10/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ffunctions_maxlines%2Ftest.stderr?ref=4743ec19489702b0c09adf684f7d9d8a9bcfdb10", "patch": "@@ -1,5 +1,5 @@\n error: this function has too many lines (2/1)\n-  --> $DIR/test.rs:18:1\n+  --> $DIR/test.rs:20:1\n    |\n LL | / fn too_many_lines() {\n LL | |     println!(\"This is bad.\");\n@@ -9,8 +9,28 @@ LL | | }\n    |\n    = note: `-D clippy::too-many-lines` implied by `-D warnings`\n \n+error: this function has too many lines (4/1)\n+  --> $DIR/test.rs:26:1\n+   |\n+LL | / async fn async_too_many_lines() {\n+LL | |     println!(\"This is bad.\");\n+LL | |     println!(\"This is bad.\");\n+LL | | }\n+   | |_^\n+\n+error: this function has too many lines (4/1)\n+  --> $DIR/test.rs:32:1\n+   |\n+LL | / fn closure_too_many_lines() {\n+LL | |     let _ = {\n+LL | |         println!(\"This is bad.\");\n+LL | |         println!(\"This is bad.\");\n+LL | |     };\n+LL | | }\n+   | |_^\n+\n error: this function has too many lines (2/1)\n-  --> $DIR/test.rs:38:1\n+  --> $DIR/test.rs:54:1\n    |\n LL | / fn comment_before_code() {\n LL | |     let _ = \"test\";\n@@ -19,5 +39,5 @@ LL | |     the code but this line should still count. */ let _ = 5;\n LL | | }\n    | |_^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n "}]}