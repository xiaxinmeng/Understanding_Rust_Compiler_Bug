{"sha": "2e35cf973bea64f2d5afbe1f321e2b7a15967ab6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMzVjZjk3M2JlYTY0ZjJkNWFmYmUxZjMyMWUyYjdhMTU5NjdhYjY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-10-04T23:59:19Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-10-04T23:59:51Z"}, "message": "Replace `(Body, WithOptConstParam)` with `Body` where possible", "tree": {"sha": "e33d4e5f10ae53e55cdfffe127d8c97c776ffaae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e33d4e5f10ae53e55cdfffe127d8c97c776ffaae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e35cf973bea64f2d5afbe1f321e2b7a15967ab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e35cf973bea64f2d5afbe1f321e2b7a15967ab6", "html_url": "https://github.com/rust-lang/rust/commit/2e35cf973bea64f2d5afbe1f321e2b7a15967ab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e35cf973bea64f2d5afbe1f321e2b7a15967ab6/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52484c59e5f97dddcacbed119f64ea6ec7eccac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/52484c59e5f97dddcacbed119f64ea6ec7eccac7", "html_url": "https://github.com/rust-lang/rust/commit/52484c59e5f97dddcacbed119f64ea6ec7eccac7"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "3c72852e0172e8bf5bfca7b0fff1d3d4215cd378", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e35cf973bea64f2d5afbe1f321e2b7a15967ab6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e35cf973bea64f2d5afbe1f321e2b7a15967ab6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=2e35cf973bea64f2d5afbe1f321e2b7a15967ab6", "patch": "@@ -111,7 +111,7 @@ fn mir_borrowck<'tcx>(\n     let opt_closure_req = tcx.infer_ctxt().enter(|infcx| {\n         let input_body: &Body<'_> = &input_body.borrow();\n         let promoted: &IndexVec<_, _> = &promoted.borrow();\n-        do_mir_borrowck(&infcx, input_body, promoted, def)\n+        do_mir_borrowck(&infcx, input_body, promoted)\n     });\n     debug!(\"mir_borrowck done\");\n \n@@ -122,8 +122,9 @@ fn do_mir_borrowck<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     input_body: &Body<'tcx>,\n     input_promoted: &IndexVec<Promoted, Body<'tcx>>,\n-    def: ty::WithOptConstParam<LocalDefId>,\n ) -> BorrowCheckResult<'tcx> {\n+    let def = input_body.source.with_opt_param().as_local().unwrap();\n+\n     debug!(\"do_mir_borrowck(def = {:?})\", def);\n \n     let tcx = infcx.tcx;\n@@ -185,7 +186,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     // will have a lifetime tied to the inference context.\n     let mut body = input_body.clone();\n     let mut promoted = input_promoted.clone();\n-    let free_regions = nll::replace_regions_in_mir(infcx, def, param_env, &mut body, &mut promoted);\n+    let free_regions = nll::replace_regions_in_mir(infcx, param_env, &mut body, &mut promoted);\n     let body = &body; // no further changes\n \n     let location_table = &LocationTable::new(&body);"}, {"sha": "a1f8df1922fc239625c52a595eba3a39922a3def", "filename": "compiler/rustc_mir/src/borrow_check/nll.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e35cf973bea64f2d5afbe1f321e2b7a15967ab6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e35cf973bea64f2d5afbe1f321e2b7a15967ab6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fnll.rs?ref=2e35cf973bea64f2d5afbe1f321e2b7a15967ab6", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Diagnostic;\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::{\n@@ -58,11 +58,12 @@ crate struct NllOutput<'tcx> {\n /// `compute_regions`.\n pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n-    def: ty::WithOptConstParam<LocalDefId>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &mut Body<'tcx>,\n     promoted: &mut IndexVec<Promoted, Body<'tcx>>,\n ) -> UniversalRegions<'tcx> {\n+    let def = body.source.with_opt_param().as_local().unwrap();\n+\n     debug!(\"replace_regions_in_mir(def={:?})\", def);\n \n     // Compute named region information. This also renumbers the inputs/outputs."}, {"sha": "7abc998d3882fccc0ebfd88dd40df276b859b113", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e35cf973bea64f2d5afbe1f321e2b7a15967ab6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e35cf973bea64f2d5afbe1f321e2b7a15967ab6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=2e35cf973bea64f2d5afbe1f321e2b7a15967ab6", "patch": "@@ -60,15 +60,13 @@ impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n             return;\n         }\n \n-        let def = body.source.with_opt_param().expect_local();\n-\n         let mut rpo = traversal::reverse_postorder(body);\n         let ccx = ConstCx::new(tcx, body);\n         let (temps, all_candidates) = collect_temps_and_candidates(&ccx, &mut rpo);\n \n         let promotable_candidates = validate_candidates(&ccx, &temps, &all_candidates);\n \n-        let promoted = promote_candidates(def.to_global(), body, tcx, temps, promotable_candidates);\n+        let promoted = promote_candidates(body, tcx, temps, promotable_candidates);\n         self.promoted_fragments.set(promoted);\n     }\n }\n@@ -970,10 +968,10 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n \n     fn promote_candidate(\n         mut self,\n-        def: ty::WithOptConstParam<DefId>,\n         candidate: Candidate,\n         next_promoted_id: usize,\n     ) -> Option<Body<'tcx>> {\n+        let def = self.source.source.with_opt_param();\n         let mut rvalue = {\n             let promoted = &mut self.promoted;\n             let promoted_id = Promoted::new(next_promoted_id);\n@@ -1133,7 +1131,6 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n }\n \n pub fn promote_candidates<'tcx>(\n-    def: ty::WithOptConstParam<DefId>,\n     body: &mut Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     mut temps: IndexVec<Local, TempState>,\n@@ -1191,7 +1188,7 @@ pub fn promote_candidates<'tcx>(\n         };\n \n         //FIXME(oli-obk): having a `maybe_push()` method on `IndexVec` might be nice\n-        if let Some(mut promoted) = promoter.promote_candidate(def, candidate, promotions.len()) {\n+        if let Some(mut promoted) = promoter.promote_candidate(candidate, promotions.len()) {\n             promoted.source.promoted = Some(promotions.next_index());\n             promotions.push(promoted);\n         }"}]}