{"sha": "670895a49c271751bf275f0ca1303a1bca7aad5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MDg5NWE0OWMyNzE3NTFiZjI3NWYwY2ExMzAzYTFiY2E3YWFkNWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-06T10:03:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-06T10:03:54Z"}, "message": "Merge #3482\n\n3482: Fix regression from #3451 r=matklad a=edwin0cheng\n\nThere is a regression from #3451 such that the following code has failed to parse in raw item collecting phase:\r\n\r\n```rust\r\nmacro_rules! with_std { \r\n \t($($i:item)*) => ($(#[cfg(feature = \"std\")]$i)*) \r\n}\r\n\r\nwith_std! {\r\n\tmod macros;\r\n\tmod others;\r\n}\r\n```\r\n\r\n### Rationale\r\n\r\nWe always assume the last token of an statement will not end with a whitespace, which is true. It is because in parsing phase,  we always emit `SyntaxNode` before any whitespace. Such that in various parts of RA code, we solely check the semi-colon by using `SyntaxNode::last_child_token() == \";\"` . \r\n\r\nHowever, in #3451, we insert some whitespaces between puncts such that we broke above assumption. This PR fixed this bug by make sure we don't add any whitespace if it is a semicolon.\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "58964cef2042a7e0088c81339770a2c8005023a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58964cef2042a7e0088c81339770a2c8005023a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/670895a49c271751bf275f0ca1303a1bca7aad5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeYiAKCRBK7hj4Ov3rIwAAdHIIABkQ+0hqi8zF6idgmZNa5BhY\na1hO9EdQ9Rieg6OIWgvYTb0kFk3VEPnqWesszn+GqucKv3SaX/aRsQmHZrshimfY\nRTHSfKE2O0BeAs72LNHMZN4S0QhjTbbEuU52MFAOvYTE5BKFJg2YTPyXe+9xKaLU\nGBa474EMLgPQI5LGMSDmb/lELA2YavOuVXDD7f3RQvRW0nHIPMzredWJZ+/RBwQP\nTWILr+M91SwoHuPuModUcnQfe8Pjs4/xck5O0qZ/OWoVn86LRTD8XjSxXWKDLGOk\n5F2L1cHoygYqtOyje5uyY3/tadXxjCm+ANx7UE100yuxyn25DRA26RppN6KVymw=\n=VY0f\n-----END PGP SIGNATURE-----\n", "payload": "tree 58964cef2042a7e0088c81339770a2c8005023a7\nparent dd7a11eec7cfc4703214c6278d4023cc372faa90\nparent 0563cc8291227e9d84c8d931ceb2b3768512b770\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583489034 +0000\ncommitter GitHub <noreply@github.com> 1583489034 +0000\n\nMerge #3482\n\n3482: Fix regression from #3451 r=matklad a=edwin0cheng\n\nThere is a regression from #3451 such that the following code has failed to parse in raw item collecting phase:\r\n\r\n```rust\r\nmacro_rules! with_std { \r\n \t($($i:item)*) => ($(#[cfg(feature = \"std\")]$i)*) \r\n}\r\n\r\nwith_std! {\r\n\tmod macros;\r\n\tmod others;\r\n}\r\n```\r\n\r\n### Rationale\r\n\r\nWe always assume the last token of an statement will not end with a whitespace, which is true. It is because in parsing phase,  we always emit `SyntaxNode` before any whitespace. Such that in various parts of RA code, we solely check the semi-colon by using `SyntaxNode::last_child_token() == \";\"` . \r\n\r\nHowever, in #3451, we insert some whitespaces between puncts such that we broke above assumption. This PR fixed this bug by make sure we don't add any whitespace if it is a semicolon.\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/670895a49c271751bf275f0ca1303a1bca7aad5a", "html_url": "https://github.com/rust-lang/rust/commit/670895a49c271751bf275f0ca1303a1bca7aad5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/670895a49c271751bf275f0ca1303a1bca7aad5a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd7a11eec7cfc4703214c6278d4023cc372faa90", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7a11eec7cfc4703214c6278d4023cc372faa90", "html_url": "https://github.com/rust-lang/rust/commit/dd7a11eec7cfc4703214c6278d4023cc372faa90"}, {"sha": "0563cc8291227e9d84c8d931ceb2b3768512b770", "url": "https://api.github.com/repos/rust-lang/rust/commits/0563cc8291227e9d84c8d931ceb2b3768512b770", "html_url": "https://github.com/rust-lang/rust/commit/0563cc8291227e9d84c8d931ceb2b3768512b770"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "fb9fa5314946b5884d939ee1c4c5ff80171ca7b0", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/670895a49c271751bf275f0ca1303a1bca7aad5a/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670895a49c271751bf275f0ca1303a1bca7aad5a/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=670895a49c271751bf275f0ca1303a1bca7aad5a", "patch": "@@ -448,7 +448,9 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n             Some(tt::TokenTree::Leaf(tt::Leaf::Punct(_))),\n         ) = (last.token_tree(), next.token_tree())\n         {\n-            if curr.spacing == tt::Spacing::Alone {\n+            // Note: We always assume the semi-colon would be the last token in\n+            // other parts of RA such that we don't add whitespace here.\n+            if curr.spacing == tt::Spacing::Alone && curr.char != ';' {\n                 self.inner.token(WHITESPACE, \" \".into());\n                 self.text_pos += TextUnit::of_char(' ');\n             }"}, {"sha": "066ce150b5a20dd34c460a8ffbdf8f2f42afef51", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/670895a49c271751bf275f0ca1303a1bca7aad5a/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670895a49c271751bf275f0ca1303a1bca7aad5a/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=670895a49c271751bf275f0ca1303a1bca7aad5a", "patch": "@@ -1593,6 +1593,60 @@ fn test_repeat_bad_var() {\n     .assert_expand_items(\"foo!(b0 b1);\", \"b0 b1\");\n }\n \n+#[test]\n+fn test_no_space_after_semi_colon() {\n+    let expanded = parse_macro(\n+        r#\"\n+        macro_rules! with_std { ($($i:item)*) => ($(#[cfg(feature = \"std\")]$i)*) }\n+    \"#,\n+    )\n+    .expand_items(r#\"with_std! {mod m;mod f;}\"#);\n+\n+    let dump = format!(\"{:#?}\", expanded);\n+    assert_eq_text!(\n+        dump.trim(),\n+        r###\"MACRO_ITEMS@[0; 52)\n+  MODULE@[0; 26)\n+    ATTR@[0; 21)\n+      POUND@[0; 1) \"#\"\n+      L_BRACK@[1; 2) \"[\"\n+      PATH@[2; 5)\n+        PATH_SEGMENT@[2; 5)\n+          NAME_REF@[2; 5)\n+            IDENT@[2; 5) \"cfg\"\n+      TOKEN_TREE@[5; 20)\n+        L_PAREN@[5; 6) \"(\"\n+        IDENT@[6; 13) \"feature\"\n+        EQ@[13; 14) \"=\"\n+        STRING@[14; 19) \"\\\"std\\\"\"\n+        R_PAREN@[19; 20) \")\"\n+      R_BRACK@[20; 21) \"]\"\n+    MOD_KW@[21; 24) \"mod\"\n+    NAME@[24; 25)\n+      IDENT@[24; 25) \"m\"\n+    SEMI@[25; 26) \";\"\n+  MODULE@[26; 52)\n+    ATTR@[26; 47)\n+      POUND@[26; 27) \"#\"\n+      L_BRACK@[27; 28) \"[\"\n+      PATH@[28; 31)\n+        PATH_SEGMENT@[28; 31)\n+          NAME_REF@[28; 31)\n+            IDENT@[28; 31) \"cfg\"\n+      TOKEN_TREE@[31; 46)\n+        L_PAREN@[31; 32) \"(\"\n+        IDENT@[32; 39) \"feature\"\n+        EQ@[39; 40) \"=\"\n+        STRING@[40; 45) \"\\\"std\\\"\"\n+        R_PAREN@[45; 46) \")\"\n+      R_BRACK@[46; 47) \"]\"\n+    MOD_KW@[47; 50) \"mod\"\n+    NAME@[50; 51)\n+      IDENT@[50; 51) \"f\"\n+    SEMI@[51; 52) \";\"\"###,\n+    );\n+}\n+\n #[test]\n fn test_expand_bad_literal() {\n     parse_macro("}]}