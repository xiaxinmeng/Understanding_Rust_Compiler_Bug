{"sha": "d77af7f639adab33b79fc71fdad3dcc813a40c86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3N2FmN2Y2MzlhZGFiMzNiNzlmYzcxZmRhZDNkY2M4MTNhNDBjODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-16T05:52:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-16T05:52:46Z"}, "message": "Auto merge of #39876 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 12 pull requests\n\n- Successful merges: #39775, #39793, #39804, #39834, #39836, #39839, #39840, #39843, #39844, #39846, #39857, #39861\n- Failed merges:", "tree": {"sha": "4ad416b814701dc784b0ca90317ad04f4db71f99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ad416b814701dc784b0ca90317ad04f4db71f99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d77af7f639adab33b79fc71fdad3dcc813a40c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d77af7f639adab33b79fc71fdad3dcc813a40c86", "html_url": "https://github.com/rust-lang/rust/commit/d77af7f639adab33b79fc71fdad3dcc813a40c86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d77af7f639adab33b79fc71fdad3dcc813a40c86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b6f1fe9dd29c97fca66a7377f367d0beb327b58", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b6f1fe9dd29c97fca66a7377f367d0beb327b58", "html_url": "https://github.com/rust-lang/rust/commit/1b6f1fe9dd29c97fca66a7377f367d0beb327b58"}, {"sha": "c6edfdb261381b75dc22bbba0dc5bd2765d8ffc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6edfdb261381b75dc22bbba0dc5bd2765d8ffc5", "html_url": "https://github.com/rust-lang/rust/commit/c6edfdb261381b75dc22bbba0dc5bd2765d8ffc5"}], "stats": {"total": 426, "additions": 329, "deletions": 97}, "files": [{"sha": "319c61ece29bd88993a4fb337357f00b555c1543", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -26,6 +26,12 @@ use std::process::{Command, Stdio};\n \n use build_helper::output;\n \n+#[cfg(not(target_os = \"solaris\"))]\n+const SH_CMD: &'static str = \"sh\";\n+// On Solaris, sh is the historical bourne shell, not a POSIX shell, or bash.\n+#[cfg(target_os = \"solaris\")]\n+const SH_CMD: &'static str = \"bash\";\n+\n use {Build, Compiler, Mode};\n use util::{cp_r, libdir, is_dylib, cp_filtered, copy};\n \n@@ -69,7 +75,7 @@ pub fn docs(build: &Build, stage: u32, host: &str) {\n     let src = build.out.join(host).join(\"doc\");\n     cp_r(&src, &dst);\n \n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n        .arg(\"--product-name=Rust-Documentation\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n@@ -119,7 +125,7 @@ pub fn mingw(build: &Build, host: &str) {\n        .arg(host);\n     build.run(&mut cmd);\n \n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n        .arg(\"--product-name=Rust-MinGW\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n@@ -185,7 +191,7 @@ pub fn rustc(build: &Build, stage: u32, host: &str) {\n     }\n \n     // Finally, wrap everything up in a nice tarball!\n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n@@ -290,7 +296,7 @@ pub fn std(build: &Build, compiler: &Compiler, target: &str) {\n     let src = build.sysroot(compiler).join(\"lib/rustlib\");\n     cp_r(&src.join(target), &dst);\n \n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n@@ -343,9 +349,10 @@ pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n     let image_src = src.join(\"save-analysis\");\n     let dst = image.join(\"lib/rustlib\").join(target).join(\"analysis\");\n     t!(fs::create_dir_all(&dst));\n+    println!(\"image_src: {:?}, dst: {:?}\", image_src, dst);\n     cp_r(&image_src, &dst);\n \n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n@@ -452,7 +459,7 @@ pub fn rust_src(build: &Build) {\n     build.run(&mut cmd);\n \n     // Create source tarball in rust-installer format\n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")\n@@ -610,7 +617,7 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n         input_tarballs.push_str(&sanitize_sh(&mingw_installer));\n     }\n \n-    let mut cmd = Command::new(\"sh\");\n+    let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/combine-installers.sh\")))\n        .arg(\"--product-name=Rust\")\n        .arg(\"--rel-manifest-dir=rustlib\")"}, {"sha": "ae1e1c65dd2252bae77836a383b65d526a6b526f", "filename": "src/doc/book/src/macros.md", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -261,36 +261,34 @@ The metavariable `$x` is parsed as a single expression node, and keeps its\n place in the syntax tree even after substitution.\n \n Another common problem in macro systems is \u2018variable capture\u2019. Here\u2019s a C\n-macro, using [a GNU C extension] to emulate Rust\u2019s expression blocks.\n-\n-[a GNU C extension]: https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html\n+macro using a block with multiple statements.\n \n ```text\n-#define LOG(msg) ({ \\\n+#define LOG(msg) do { \\\n     int state = get_log_state(); \\\n     if (state > 0) { \\\n         printf(\"log(%d): %s\\n\", state, msg); \\\n     } \\\n-})\n+} while (0)\n ```\n \n Here\u2019s a simple use case that goes terribly wrong:\n \n ```text\n const char *state = \"reticulating splines\";\n-LOG(state)\n+LOG(state);\n ```\n \n This expands to\n \n ```text\n const char *state = \"reticulating splines\";\n-{\n+do {\n     int state = get_log_state();\n     if (state > 0) {\n         printf(\"log(%d): %s\\n\", state, state);\n     }\n-}\n+} while (0);\n ```\n \n The second variable named `state` shadows the first one.  This is a problem"}, {"sha": "6c4700f9305ca296243f9a7dd44d4318871d6c05", "filename": "src/doc/book/src/procedural-macros.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -99,7 +99,7 @@ created, we'll add it to our toml:\n hello-world-derive = { path = \"hello-world-derive\" }\n ```\n \n-As for our the source of our `hello-world-derive` crate, here's an example:\n+As for the source of our `hello-world-derive` crate, here's an example:\n \n ```rust,ignore\n extern crate proc_macro;"}, {"sha": "821c52361f868fb243225f9d8cfda63b7fd27229", "filename": "src/etc/natvis/libcollections.natvis", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Fetc%2Fnatvis%2Flibcollections.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Fetc%2Fnatvis%2Flibcollections.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibcollections.natvis?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n+  <Type Name=\"collections::vec::Vec&lt;*&gt;\">\n+\u00a0\u00a0\u00a0\u00a0<DisplayString>{{ size={len} }}</DisplayString>\n+\u00a0\u00a0\u00a0\u00a0<Expand>\n+      <Item Name=\"[size]\" ExcludeView=\"simple\">len</Item>\n+      <Item Name=\"[capacity]\" ExcludeView=\"simple\">buf.cap</Item>\n+      <ArrayItems>\n+        <Size>len</Size>\n+        <ValuePointer>buf.ptr.pointer.__0</ValuePointer>\n+      </ArrayItems>\n+\u00a0\u00a0\u00a0\u00a0</Expand>\n+\u00a0\u00a0</Type>\n+  <Type Name=\"collections::vec_deque::VecDeque&lt;*&gt;\">\n+    <DisplayString>{{ size={tail &lt;= head ? head - tail : buf.cap - tail + head} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[size]\" ExcludeView=\"simple\">tail &lt;= head ? head - tail : buf.cap - tail + head</Item>\n+      <Item Name=\"[capacity]\" ExcludeView=\"simple\">buf.cap</Item>\n+      <CustomListItems>\n+        <Variable Name=\"i\" InitialValue=\"tail\" />\n+\n+        <Size>tail &lt;= head ? head - tail : buf.cap - tail + head</Size>\n+        <Loop>\n+          <If Condition=\"i == head\">\n+            <Break/>\n+          </If>\n+          <Item>buf.ptr.pointer.__0 + i</Item>\n+          <Exec>i = (i + 1 == buf.cap ? 0 : i + 1)</Exec>\n+        </Loop>\n+      </CustomListItems>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"collections::linked_list::LinkedList&lt;*&gt;\">\n+    <DisplayString>{{ size={len} }}</DisplayString>\n+    <Expand>\n+      <LinkedListItems>\n+        <Size>len</Size>\n+        <HeadPointer>*(collections::linked_list::Node&lt;$T1&gt; **)&amp;head</HeadPointer>\n+        <NextPointer>*(collections::linked_list::Node&lt;$T1&gt; **)&amp;next</NextPointer>\n+        <ValueNode>element</ValueNode>\n+      </LinkedListItems>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"collections::string::String\">\n+    <DisplayString>{*(char**)this,[vec.len]}</DisplayString>\n+    <StringView>*(char**)this,[vec.len]</StringView>\n+    <Expand>\n+      <Item Name=\"[size]\" ExcludeView=\"simple\">vec.len</Item>\n+      <Item Name=\"[capacity]\" ExcludeView=\"simple\">vec.buf.cap</Item>\n+      <ArrayItems>\n+        <Size>vec.len</Size>\n+        <ValuePointer>*(char**)this</ValuePointer>\n+      </ArrayItems>\n+    </Expand>\n+  </Type>\n+</AutoVisualizer>\n\\ No newline at end of file"}, {"sha": "37d64be1ce963946b34650299101899e99387e85", "filename": "src/etc/natvis/libcore.natvis", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Fetc%2Fnatvis%2Flibcore.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Fetc%2Fnatvis%2Flibcore.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibcore.natvis?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -0,0 +1,39 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n+  <Type Name=\"core::ptr::Unique&lt;*&gt;\">\n+    <DisplayString>{{ Unique {*pointer.__0} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[ptr]\">pointer.__0</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"core::ptr::Shared&lt;*&gt;\">\n+    <DisplayString>{{ Shared {*pointer.__0} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[ptr]\">pointer.__0</Item>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"core::option::Option&lt;*&gt;\">\n+    <DisplayString Condition=\"RUST$ENUM$DISR == 0x0\">{{ None }}</DisplayString>\n+    <DisplayString Condition=\"RUST$ENUM$DISR == 0x1\">{{ Some {__0} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[size]\" ExcludeView=\"simple\">(ULONG)(RUST$ENUM$DISR != 0)</Item>\n+      <Item Name=\"[value]\" ExcludeView=\"simple\">__0</Item>\n+      <ArrayItems>\n+        <Size>(ULONG)(RUST$ENUM$DISR != 0)</Size>\n+        <ValuePointer>&amp;__0</ValuePointer>\n+      </ArrayItems>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"core::option::Option&lt;*&gt;\" Priority=\"MediumLow\">\n+    <DisplayString Condition=\"*(PVOID *)this == nullptr\">{{ None }}</DisplayString>\n+    <DisplayString>{{ Some {($T1 *)this} }}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[size]\" ExcludeView=\"simple\">(ULONG)(*(PVOID *)this != nullptr)</Item>\n+      <Item Name=\"[value]\" ExcludeView=\"simple\" Condition=\"*(PVOID *)this != nullptr\">($T1 *)this</Item>\n+      <ArrayItems>\n+        <Size>(ULONG)(*(PVOID *)this != nullptr)</Size>\n+        <ValuePointer>($T1 *)this</ValuePointer>\n+      </ArrayItems>\n+    </Expand>\n+  </Type>\n+</AutoVisualizer>\n\\ No newline at end of file"}, {"sha": "83808108ff8325900f506e66c67677f8aeea960f", "filename": "src/grammar/README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Fgrammar%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Fgrammar%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2FREADME.md?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -8,7 +8,7 @@ The build of the rust part is included with `make tidy` and can be run with `mak\n \n # Manual build\n \n-To use manually, assuming antlr4 ist installed at `/usr/share/java/antlr-complete.jar`:\n+To use manually, assuming antlr4 is installed at `/usr/share/java/antlr-complete.jar`:\n \n ```\n antlr4 RustLexer.g4\n@@ -20,8 +20,8 @@ for file in ../*/**.rs; do\n done\n ```\n \n-Note That the `../*/**.rs` glob will match every `*.rs` file in the above\n-directory and all of its recursive children. This is a zsh extension.\n+Note that the `../*/**.rs` glob will match every `*.rs` file in the above\n+directory and all of its recursive children. This is a Zsh extension.\n \n \n ## Cleanup"}, {"sha": "65056121f05a0c00da140d6a0081d5e70b2b5976", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -52,11 +52,11 @@ pub trait ToOwned {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let s = \"a\"; // &str\n-    /// let ss = s.to_owned(); // String\n+    /// let s: &str = \"a\";\n+    /// let ss: String = s.to_owned();\n     ///\n-    /// let v = &[1, 2]; // slice\n-    /// let vv = v.to_owned(); // Vec\n+    /// let v: &[i32] = &[1, 2];\n+    /// let vv: Vec<i32> = v.to_owned();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_owned(&self) -> Self::Owned;"}, {"sha": "736797d162b1d1585361a76f4016e6cb780d9372", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -213,66 +213,6 @@ impl<T:Copy> Cell<T> {\n     pub fn get(&self) -> T {\n         unsafe{ *self.value.get() }\n     }\n-\n-    /// Returns a reference to the underlying `UnsafeCell`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(as_unsafe_cell)]\n-    ///\n-    /// use std::cell::Cell;\n-    ///\n-    /// let c = Cell::new(5);\n-    ///\n-    /// let uc = c.as_unsafe_cell();\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n-    #[rustc_deprecated(since = \"1.12.0\", reason = \"renamed to as_ptr\")]\n-    pub fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n-        &self.value\n-    }\n-\n-    /// Returns a raw pointer to the underlying data in this cell.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::cell::Cell;\n-    ///\n-    /// let c = Cell::new(5);\n-    ///\n-    /// let ptr = c.as_ptr();\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"cell_as_ptr\", since = \"1.12.0\")]\n-    pub fn as_ptr(&self) -> *mut T {\n-        self.value.get()\n-    }\n-\n-    /// Returns a mutable reference to the underlying data.\n-    ///\n-    /// This call borrows `Cell` mutably (at compile-time) which guarantees\n-    /// that we possess the only reference.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::cell::Cell;\n-    ///\n-    /// let mut c = Cell::new(5);\n-    /// *c.get_mut() += 1;\n-    ///\n-    /// assert_eq!(c.get(), 6);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"cell_get_mut\", since = \"1.11.0\")]\n-    pub fn get_mut(&mut self) -> &mut T {\n-        unsafe {\n-            &mut *self.value.get()\n-        }\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -290,7 +230,7 @@ impl<T:Copy> Clone for Cell<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T:Default + Copy> Default for Cell<T> {\n+impl<T:Default> Default for Cell<T> {\n     /// Creates a `Cell<T>`, with the `Default` value for T.\n     #[inline]\n     fn default() -> Cell<T> {\n@@ -346,7 +286,7 @@ impl<T:Ord + Copy> Ord for Cell<T> {\n }\n \n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n-impl<T: Copy> From<T> for Cell<T> {\n+impl<T> From<T> for Cell<T> {\n     fn from(t: T) -> Cell<T> {\n         Cell::new(t)\n     }\n@@ -370,6 +310,66 @@ impl<T> Cell<T> {\n         }\n     }\n \n+    /// Returns a reference to the underlying `UnsafeCell`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(as_unsafe_cell)]\n+    ///\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    ///\n+    /// let uc = c.as_unsafe_cell();\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n+    #[rustc_deprecated(since = \"1.12.0\", reason = \"renamed to as_ptr\")]\n+    pub fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n+        &self.value\n+    }\n+\n+    /// Returns a raw pointer to the underlying data in this cell.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    ///\n+    /// let ptr = c.as_ptr();\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"cell_as_ptr\", since = \"1.12.0\")]\n+    pub fn as_ptr(&self) -> *mut T {\n+        self.value.get()\n+    }\n+\n+    /// Returns a mutable reference to the underlying data.\n+    ///\n+    /// This call borrows `Cell` mutably (at compile-time) which guarantees\n+    /// that we possess the only reference.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let mut c = Cell::new(5);\n+    /// *c.get_mut() += 1;\n+    ///\n+    /// assert_eq!(c.get(), 6);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"cell_get_mut\", since = \"1.11.0\")]\n+    pub fn get_mut(&mut self) -> &mut T {\n+        unsafe {\n+            &mut *self.value.get()\n+        }\n+    }\n+\n     /// Sets the contained value.\n     ///\n     /// # Examples"}, {"sha": "70ca5fe83a93299e3d529113426e60fef2af79b2", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -36,7 +36,6 @@ use ty::fold::TypeFolder;\n use ty::subst::Subst;\n use util::nodemap::{FxHashMap, FxHashSet};\n \n-use std::cmp;\n use std::fmt;\n use syntax::ast;\n use hir::{intravisit, Local, Pat};\n@@ -392,12 +391,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             return;\n         }\n \n-        let end = cmp::min(4, impl_candidates.len());\n+        let end = if impl_candidates.len() <= 5 {\n+            impl_candidates.len()\n+        } else {\n+            4\n+        };\n         err.help(&format!(\"the following implementations were found:{}{}\",\n                           &impl_candidates[0..end].iter().map(|candidate| {\n                               format!(\"\\n  {:?}\", candidate)\n                           }).collect::<String>(),\n-                          if impl_candidates.len() > 4 {\n+                          if impl_candidates.len() > 5 {\n                               format!(\"\\nand {} others\", impl_candidates.len() - 4)\n                           } else {\n                               \"\".to_owned()"}, {"sha": "45b5f7cac07e890e6f5316cbd886cafba18b4ee8", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -441,7 +441,7 @@ fn pop_internal<K, V>(starting_bucket: FullBucketMut<K, V>)\n /// Perform robin hood bucket stealing at the given `bucket`. You must\n /// also pass that bucket's displacement so we don't have to recalculate it.\n ///\n-/// `hash`, `k`, and `v` are the elements to \"robin hood\" into the hashtable.\n+/// `hash`, `key`, and `val` are the elements to \"robin hood\" into the hashtable.\n fn robin_hood<'a, K: 'a, V: 'a>(bucket: FullBucketMut<'a, K, V>,\n                                 mut displacement: usize,\n                                 mut hash: SafeHash,"}, {"sha": "ef4dc365dbef8ec1d617f061bd2f126ca33e67a9", "filename": "src/libstd/sys/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Flibstd%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Flibstd%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fmod.rs?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -13,11 +13,11 @@\n //! The `std::sys` module is the abstracted interface through which\n //! `std` talks to the underlying operating system. It has different\n //! implementations for different operating system families, today\n-//! just Unix and Windows.\n+//! just Unix and Windows, and initial support for Redox.\n //!\n //! The centralization of platform-specific code in this module is\n //! enforced by the \"platform abstraction layer\" tidy script in\n-//! `tools/tidy/pal.rs`.\n+//! `tools/tidy/src/pal.rs`.\n //!\n //! This module is closely related to the platform-independent system\n //! integration code in `std::sys_common`. See that module's\n@@ -34,14 +34,14 @@\n \n pub use self::imp::*;\n \n-#[cfg(target_os = \"redox\")]\n-#[path = \"redox/mod.rs\"]\n-mod imp;\n-\n #[cfg(unix)]\n #[path = \"unix/mod.rs\"]\n mod imp;\n \n #[cfg(windows)]\n #[path = \"windows/mod.rs\"]\n mod imp;\n+\n+#[cfg(target_os = \"redox\")]\n+#[path = \"redox/mod.rs\"]\n+mod imp;"}, {"sha": "4daab31c28f4927872b196de575ff01640af948a", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -912,7 +912,7 @@ extern \"system\" {\n     pub fn Sleep(dwMilliseconds: DWORD);\n     pub fn GetProcessId(handle: HANDLE) -> DWORD;\n     pub fn GetUserProfileDirectoryW(hToken: HANDLE,\n-                                    lpProfileDir: LPCWSTR,\n+                                    lpProfileDir: LPWSTR,\n                                     lpcchSize: *mut DWORD) -> BOOL;\n     pub fn SetHandleInformation(hObject: HANDLE,\n                                 dwMask: DWORD,"}, {"sha": "bd20c891d8ed3f2a01a7b8fad162ceba0a5e8b14", "filename": "src/test/compile-fail/feature-gate-static_recursion.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Ftest%2Fcompile-fail%2Ffeature-gate-static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Ftest%2Fcompile-fail%2Ffeature-gate-static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-static_recursion.rs?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static mut S: *const u8 = unsafe { &S as *const *const u8 as *const u8 };\n+//~^ ERROR recursive static (see issue #29719)\n+\n+struct StaticDoubleLinked {\n+    prev: &'static StaticDoubleLinked,\n+    next: &'static StaticDoubleLinked,\n+    data: i32,\n+    head: bool,\n+}\n+\n+static L1: StaticDoubleLinked = StaticDoubleLinked{prev: &L3, next: &L2, data: 1, head: true};\n+//~^ ERROR recursive static (see issue #29719)\n+//~^^ ERROR recursive static (see issue #29719)\n+//~^^^ ERROR recursive static (see issue #29719)\n+static L2: StaticDoubleLinked = StaticDoubleLinked{prev: &L1, next: &L3, data: 2, head: false};\n+static L3: StaticDoubleLinked = StaticDoubleLinked{prev: &L2, next: &L1, data: 3, head: false};\n+\n+\n+pub fn main() {\n+    unsafe { assert_eq!(S, *(S as *const *const u8)); }\n+\n+    let mut test_vec = Vec::new();\n+    let mut cur = &L1;\n+    loop {\n+        test_vec.push(cur.data);\n+        cur = cur.next;\n+        if cur.head { break }\n+    }\n+    assert_eq!(&test_vec, &[1,2,3]);\n+\n+    let mut test_vec = Vec::new();\n+    let mut cur = &L1;\n+    loop {\n+        cur = cur.prev;\n+        test_vec.push(cur.data);\n+        if cur.head { break }\n+    }\n+    assert_eq!(&test_vec, &[3,2,1]);\n+}"}, {"sha": "68b1f79c89bbe3bdcd3a7a2bc2d08910153bbafc", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.rs?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo<B> {\n+    fn bar(&self){}\n+}\n+\n+impl Foo<u8> for i8 {}\n+impl Foo<u16> for i8 {}\n+impl Foo<u32> for i8 {}\n+impl Foo<u64> for i8 {}\n+impl Foo<bool> for i8 {}\n+\n+impl Foo<u16> for u8 {}\n+impl Foo<u32> for u8 {}\n+impl Foo<u64> for u8 {}\n+impl Foo<bool> for u8 {}\n+\n+impl Foo<u8> for bool {}\n+impl Foo<u16> for bool {}\n+impl Foo<u32> for bool {}\n+impl Foo<u64> for bool {}\n+impl Foo<bool> for bool {}\n+impl Foo<i8> for bool {}\n+\n+fn main() {\n+    Foo::<i32>::bar(&1i8);\n+    Foo::<i32>::bar(&1u8);\n+    Foo::<i32>::bar(&true);\n+}"}, {"sha": "4ea4adfcfe0fc68260f9dc047f487db7cc6eea17", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -0,0 +1,43 @@\n+error[E0277]: the trait bound `i8: Foo<i32>` is not satisfied\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:34:5\n+   |\n+34 |     Foo::<i32>::bar(&1i8);\n+   |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `i8`\n+   |\n+   = help: the following implementations were found:\n+             <i8 as Foo<u8>>\n+             <i8 as Foo<u16>>\n+             <i8 as Foo<u32>>\n+             <i8 as Foo<u64>>\n+             <i8 as Foo<bool>>\n+   = note: required by `Foo::bar`\n+\n+error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:35:5\n+   |\n+35 |     Foo::<i32>::bar(&1u8);\n+   |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `u8`\n+   |\n+   = help: the following implementations were found:\n+             <u8 as Foo<u16>>\n+             <u8 as Foo<u32>>\n+             <u8 as Foo<u64>>\n+             <u8 as Foo<bool>>\n+   = note: required by `Foo::bar`\n+\n+error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:36:5\n+   |\n+36 |     Foo::<i32>::bar(&true);\n+   |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `bool`\n+   |\n+   = help: the following implementations were found:\n+             <bool as Foo<u8>>\n+             <bool as Foo<u16>>\n+             <bool as Foo<u32>>\n+             <bool as Foo<u64>>\n+           and 2 others\n+   = note: required by `Foo::bar`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "13f272517b1fda9c827a9dc5da2bc6fcca7ec0c6", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77af7f639adab33b79fc71fdad3dcc813a40c86/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=d77af7f639adab33b79fc71fdad3dcc813a40c86", "patch": "@@ -166,7 +166,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n \n     // FIXME get this whitelist empty.\n     let whitelist = vec![\n-        \"abi_ptx\", \"simd\", \"static_recursion\",\n+        \"abi_ptx\", \"simd\",\n         \"cfg_target_has_atomic\",\n         \"unboxed_closures\", \"stmt_expr_attributes\",\n         \"cfg_target_thread_local\", \"unwind_attributes\","}]}