{"sha": "45859b7ca764cafb14efb8c63a83d5e48dc5d016", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ODU5YjdjYTc2NGNhZmIxNGVmYjhjNjNhODNkNWU0OGRjNWQwMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-09T12:46:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-09T12:46:59Z"}, "message": "Auto merge of #63118 - Centril:stabilize-bind-by-move, r=matthewjasper\n\nStabilize `bind_by_move_pattern_guards` in Rust 1.39.0\n\nCloses https://github.com/rust-lang/rust/issues/15287.\n\nAfter stabilizing `#![feature(bind_by_move_pattern_guards)]`, you can now use bind-by-move bindings in patterns and take references to those bindings in `if` guards of `match` expressions. For example, the following now becomes legal:\n\n```rust\nfn main() {\n    let array: Box<[u8; 4]> = Box::new([1, 2, 3, 4]);\n\n    match array {\n        nums\n//      ---- `nums` is bound by move.\n            if nums.iter().sum::<u8>() == 10\n//                 ^------ `.iter()` implicitly takes a reference to `nums`.\n        => {\n            drop(nums);\n//          --------- Legal as `nums` was bound by move and so we have ownership.\n        }\n        _ => unreachable!(),\n    }\n}\n```\n\nr? @matthewjasper", "tree": {"sha": "b661a47783cc8d2bf5b6c7419f6fcf0521d27538", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b661a47783cc8d2bf5b6c7419f6fcf0521d27538"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45859b7ca764cafb14efb8c63a83d5e48dc5d016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45859b7ca764cafb14efb8c63a83d5e48dc5d016", "html_url": "https://github.com/rust-lang/rust/commit/45859b7ca764cafb14efb8c63a83d5e48dc5d016", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45859b7ca764cafb14efb8c63a83d5e48dc5d016/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "html_url": "https://github.com/rust-lang/rust/commit/824383d4ab66abd32abc6e19b68d78ecfddcb7d4"}, {"sha": "aaa9762651c15ee16ae210b18c843bceab7bf454", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa9762651c15ee16ae210b18c843bceab7bf454", "html_url": "https://github.com/rust-lang/rust/commit/aaa9762651c15ee16ae210b18c843bceab7bf454"}], "stats": {"total": 478, "additions": 51, "deletions": 427}, "files": [{"sha": "a2cc585fc51fd3ae11a246c7306eb03197b02c41", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -87,7 +87,7 @@\n #![feature(link_llvm_intrinsics)]\n #![feature(never_type)]\n #![feature(nll)]\n-#![feature(bind_by_move_pattern_guards)]\n+#![cfg_attr(boostrap_stdarch_ignore_this, feature(bind_by_move_pattern_guards))]\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]\n #![feature(on_unimplemented)]"}, {"sha": "f949b529e9762bba756ab988c3c62bdc5b6f7948", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -1345,13 +1345,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// any, and then branches to the arm. Returns the block for the case where\n     /// the guard fails.\n     ///\n-    /// Note: we check earlier that if there is a guard, there cannot be move\n-    /// bindings (unless feature(bind_by_move_pattern_guards) is used). This\n-    /// isn't really important for the self-consistency of this fn, but the\n-    /// reason for it should be clear: after we've done the assignments, if\n-    /// there were move bindings, further tests would be a use-after-move.\n-    /// bind_by_move_pattern_guards avoids this by only moving the binding once\n-    /// the guard has evaluated to true (see below).\n+    /// Note: we do not check earlier that if there is a guard,\n+    /// there cannot be move bindings. We avoid a use-after-move by only\n+    /// moving the binding once the guard has evaluated to true (see below).\n     fn bind_and_guard_matched_candidate<'pat>(\n         &mut self,\n         candidate: Candidate<'pat, 'tcx>,"}, {"sha": "908dd601df3d0bfb2ffd0942a1436d8597ab30ad", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 7, "deletions": 78, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -157,81 +157,6 @@ match x {\n See also the error E0303.\n \"##,\n \n-E0008: r##\"\n-Names bound in match arms retain their type in pattern guards. As such, if a\n-name is bound by move in a pattern, it should also be moved to wherever it is\n-referenced in the pattern guard code. Doing so however would prevent the name\n-from being available in the body of the match arm. Consider the following:\n-\n-```compile_fail,E0008\n-match Some(\"hi\".to_string()) {\n-    Some(s) if s.len() == 0 => {}, // use s.\n-    _ => {},\n-}\n-```\n-\n-The variable `s` has type `String`, and its use in the guard is as a variable of\n-type `String`. The guard code effectively executes in a separate scope to the\n-body of the arm, so the value would be moved into this anonymous scope and\n-therefore becomes unavailable in the body of the arm.\n-\n-The problem above can be solved by using the `ref` keyword.\n-\n-```\n-match Some(\"hi\".to_string()) {\n-    Some(ref s) if s.len() == 0 => {},\n-    _ => {},\n-}\n-```\n-\n-Though this example seems innocuous and easy to solve, the problem becomes clear\n-when it encounters functions which consume the value:\n-\n-```compile_fail,E0008\n-struct A{}\n-\n-impl A {\n-    fn consume(self) -> usize {\n-        0\n-    }\n-}\n-\n-fn main() {\n-    let a = Some(A{});\n-    match a {\n-        Some(y) if y.consume() > 0 => {}\n-        _ => {}\n-    }\n-}\n-```\n-\n-In this situation, even the `ref` keyword cannot solve it, since borrowed\n-content cannot be moved. This problem cannot be solved generally. If the value\n-can be cloned, here is a not-so-specific solution:\n-\n-```\n-#[derive(Clone)]\n-struct A{}\n-\n-impl A {\n-    fn consume(self) -> usize {\n-        0\n-    }\n-}\n-\n-fn main() {\n-    let a = Some(A{});\n-    match a{\n-        Some(ref y) if y.clone().consume() > 0 => {}\n-        _ => {}\n-    }\n-}\n-```\n-\n-If the value will be consumed in the pattern guard, using its clone will not\n-move its ownership, so the code works.\n-\"##,\n-\n E0009: r##\"\n In a pattern, all values that don't implement the `Copy` trait have to be bound\n the same way. The goal here is to avoid binding simultaneously by-move and\n@@ -475,13 +400,15 @@ for item in xs {\n \"##,\n \n E0301: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n Mutable borrows are not allowed in pattern guards, because matching cannot have\n side effects. Side effects could alter the matched object or the environment\n on which the match depends in such a way, that the match would not be\n exhaustive. For instance, the following would not match any arm if mutable\n borrows were allowed:\n \n-```compile_fail,E0301\n+```compile_fail,E0596\n match Some(()) {\n     None => { },\n     option if option.take().is_none() => {\n@@ -493,13 +420,15 @@ match Some(()) {\n \"##,\n \n E0302: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n Assignments are not allowed in pattern guards, because matching cannot have\n side effects. Side effects could alter the matched object or the environment\n on which the match depends in such a way, that the match would not be\n exhaustive. For instance, the following would not match any arm if assignments\n were allowed:\n \n-```compile_fail,E0302\n+```compile_fail,E0594\n match Some(()) {\n     None => { },\n     option if { option = None; false } => { },\n@@ -1989,7 +1918,6 @@ When matching on a variable it cannot be mutated in the match guards, as this\n could cause the match to be non-exhaustive:\n \n ```compile_fail,E0510\n-#![feature(bind_by_move_pattern_guards)]\n let mut x = Some(0);\n match x {\n     None => (),\n@@ -2451,6 +2379,7 @@ There are some known bugs that trigger this message.\n \n ;\n \n+//  E0008, // cannot bind by-move into a pattern guard\n //  E0298, // cannot compare constants\n //  E0299, // mismatched types between arms\n //  E0471, // constant evaluation error (in pattern)"}, {"sha": "1b4b56082a696ba4d13707463a87db08ffc719f8", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 4, "deletions": 86, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -5,11 +5,6 @@ use super::_match::WitnessPreference::*;\n use super::{Pattern, PatternContext, PatternError, PatternKind};\n \n use rustc::middle::borrowck::SignalledError;\n-use rustc::middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor};\n-use rustc::middle::expr_use_visitor::{LoanCause, MutateMode};\n-use rustc::middle::expr_use_visitor as euv;\n-use rustc::middle::mem_categorization::cmt_;\n-use rustc::middle::region;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n@@ -36,9 +31,7 @@ crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) -> SignalledError {\n \n     let mut visitor = MatchVisitor {\n         tcx,\n-        body_owner: def_id,\n         tables: tcx.body_tables(body_id),\n-        region_scope_tree: &tcx.region_scope_tree(def_id),\n         param_env: tcx.param_env(def_id),\n         identity_substs: InternalSubsts::identity_for_item(tcx, def_id),\n         signalled_error: SignalledError::NoErrorsSeen,\n@@ -53,11 +46,9 @@ fn create_e0004(sess: &Session, sp: Span, error_message: String) -> DiagnosticBu\n \n struct MatchVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    body_owner: DefId,\n     tables: &'a ty::TypeckTables<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     identity_substs: SubstsRef<'tcx>,\n-    region_scope_tree: &'a region::ScopeTree,\n     signalled_error: SignalledError,\n }\n \n@@ -151,11 +142,8 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n \n             // Second, if there is a guard on each arm, make sure it isn't\n             // assigning or borrowing anything mutably.\n-            if let Some(ref guard) = arm.guard {\n+            if arm.guard.is_some() {\n                 self.signalled_error = SignalledError::SawSomeError;\n-                if !self.tcx.features().bind_by_move_pattern_guards {\n-                    check_for_mutation_in_guard(self, &guard);\n-                }\n             }\n \n             // Third, perform some lints.\n@@ -582,19 +570,10 @@ fn check_legality_of_move_bindings(\n                              \"cannot bind by-move with sub-bindings\")\n                 .span_label(p.span, \"binds an already bound by-move value by moving it\")\n                 .emit();\n-        } else if has_guard {\n-            if !cx.tcx.features().bind_by_move_pattern_guards {\n-                let mut err = struct_span_err!(cx.tcx.sess, p.span, E0008,\n-                                            \"cannot bind by-move into a pattern guard\");\n-                err.span_label(p.span, \"moves value into pattern guard\");\n-                if cx.tcx.sess.opts.unstable_features.is_nightly_build() {\n-                    err.help(\"add `#![feature(bind_by_move_pattern_guards)]` to the \\\n-                            crate attributes to enable\");\n-                }\n-                err.emit();\n+        } else if !has_guard {\n+            if let Some(_by_ref_span) = by_ref_span {\n+                span_vec.push(p.span);\n             }\n-        } else if let Some(_by_ref_span) = by_ref_span {\n-            span_vec.push(p.span);\n         }\n     };\n \n@@ -636,67 +615,6 @@ fn check_legality_of_move_bindings(\n     }\n }\n \n-/// Ensures that a pattern guard doesn't borrow by mutable reference or assign.\n-//\n-// FIXME: this should be done by borrowck.\n-fn check_for_mutation_in_guard(cx: &MatchVisitor<'_, '_>, guard: &hir::Guard) {\n-    let mut checker = MutationChecker {\n-        cx,\n-    };\n-    match guard {\n-        hir::Guard::If(expr) =>\n-            ExprUseVisitor::new(&mut checker,\n-                                cx.tcx,\n-                                cx.body_owner,\n-                                cx.param_env,\n-                                cx.region_scope_tree,\n-                                cx.tables,\n-                                None).walk_expr(expr),\n-    };\n-}\n-\n-struct MutationChecker<'a, 'tcx> {\n-    cx: &'a MatchVisitor<'a, 'tcx>,\n-}\n-\n-impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> {\n-    fn matched_pat(&mut self, _: &Pat, _: &cmt_<'_>, _: euv::MatchMode) {}\n-    fn consume(&mut self, _: hir::HirId, _: Span, _: &cmt_<'_>, _: ConsumeMode) {}\n-    fn consume_pat(&mut self, _: &Pat, _: &cmt_<'_>, _: ConsumeMode) {}\n-    fn borrow(&mut self,\n-              _: hir::HirId,\n-              span: Span,\n-              _: &cmt_<'_>,\n-              _: ty::Region<'tcx>,\n-              kind:ty:: BorrowKind,\n-              _: LoanCause) {\n-        match kind {\n-            ty::MutBorrow => {\n-                let mut err = struct_span_err!(self.cx.tcx.sess, span, E0301,\n-                          \"cannot mutably borrow in a pattern guard\");\n-                err.span_label(span, \"borrowed mutably in pattern guard\");\n-                if self.cx.tcx.sess.opts.unstable_features.is_nightly_build() {\n-                    err.help(\"add `#![feature(bind_by_move_pattern_guards)]` to the \\\n-                              crate attributes to enable\");\n-                }\n-                err.emit();\n-            }\n-            ty::ImmBorrow | ty::UniqueImmBorrow => {}\n-        }\n-    }\n-    fn decl_without_init(&mut self, _: hir::HirId, _: Span) {}\n-    fn mutate(&mut self, _: hir::HirId, span: Span, _: &cmt_<'_>, mode: MutateMode) {\n-        match mode {\n-            MutateMode::JustWrite | MutateMode::WriteAndRead => {\n-                struct_span_err!(self.cx.tcx.sess, span, E0302, \"cannot assign in a pattern guard\")\n-                    .span_label(span, \"assignment in pattern guard\")\n-                    .emit();\n-            }\n-            MutateMode::Init => {}\n-        }\n-    }\n-}\n-\n /// Forbids bindings in `@` patterns. This is necessary for memory safety,\n /// because of the way rvalues are handled in the borrow check. (See issue\n /// #14587.)"}, {"sha": "a5a8315a1e73f9f4d024e0385d644304de10aff0", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -8,7 +8,7 @@\n \n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(bind_by_move_pattern_guards)]\n+#![cfg_attr(bootstrap, feature(bind_by_move_pattern_guards))]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "25ee8b4273d52b982e3e38153b1b9e8bf477d63b", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -1,7 +1,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\")]\n \n-#![feature(bind_by_move_pattern_guards)]\n+#![cfg_attr(bootstrap, feature(bind_by_move_pattern_guards))]\n #![feature(rustc_private)]\n #![feature(arbitrary_self_types)]\n #![feature(box_patterns)]"}, {"sha": "8a7b66f019669e73da2ce3c9ad2cf617a3c73eea", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -238,7 +238,7 @@\n #![feature(array_error_internals)]\n #![feature(asm)]\n #![feature(associated_type_bounds)]\n-#![feature(bind_by_move_pattern_guards)]\n+#![cfg_attr(bootstrap, feature(bind_by_move_pattern_guards))]\n #![feature(box_syntax)]\n #![feature(c_variadic)]\n #![feature(cfg_target_has_atomic)]"}, {"sha": "eff9f90a8619e29d4ae697d28a021b9d21e34cce", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -241,6 +241,8 @@ declare_features! (\n     (accepted, underscore_const_names, \"1.37.0\", Some(54912), None),\n     /// Allows free and inherent `async fn`s, `async` blocks, and `<expr>.await` expressions.\n     (accepted, async_await, \"1.39.0\", Some(50547), None),\n+    /// Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n+    (accepted, bind_by_move_pattern_guards, \"1.39.0\", Some(15287), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "dd78777b569863682447c81383ebd7f2d41ecd51", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -461,9 +461,6 @@ declare_features! (\n     /// Allows non-builtin attributes in inner attribute position.\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n \n-    /// Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n-    (active, bind_by_move_pattern_guards, \"1.30.0\", Some(15287), None),\n-\n     /// Allows `impl Trait` in bindings (`let`, `const`, `static`).\n     (active, impl_trait_in_bindings, \"1.30.0\", Some(63065), None),\n "}, {"sha": "aaf6f3e537eb6693de0c926ec4af6517c5561b26", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -7,7 +7,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        test(attr(deny(warnings))))]\n \n-#![feature(bind_by_move_pattern_guards)]\n+#![cfg_attr(bootstrap, feature(bind_by_move_pattern_guards))]\n #![feature(box_syntax)]\n #![feature(const_fn)]\n #![feature(const_transmute)]"}, {"sha": "c898d3a6f168c8e86113ae83bf20369b8fa5d8fe", "filename": "src/test/mir-opt/match-arm-scopes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch-arm-scopes.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -8,8 +8,6 @@\n //   all of the bindings for that scope.\n // * No drop flags are used.\n \n-#![feature(nll, bind_by_move_pattern_guards)]\n-\n fn complicated_match(cond: bool, items: (bool, bool, String)) -> i32 {\n     match items {\n         (false, a, s) | (a, false, s) if if cond { return 3 } else { a } => 1,"}, {"sha": "bc9b3a8de4ef5d41416773358b04214960f2989d", "filename": "src/test/ui/bind-by-move/bind-by-move-no-guards.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.rs?ref=824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "patch": "@@ -1,13 +0,0 @@\n-use std::sync::mpsc::channel;\n-\n-fn main() {\n-    let (tx, rx) = channel();\n-    let x = Some(rx);\n-    tx.send(false);\n-    match x {\n-        Some(z) if z.recv().unwrap() => { panic!() },\n-            //~^ ERROR cannot bind by-move into a pattern guard\n-        Some(z) => { assert!(!z.recv().unwrap()); },\n-        None => panic!()\n-    }\n-}"}, {"sha": "c5f0256c2c92f5b10ce791bbe912f45ad2b3a5d3", "filename": "src/test/ui/bind-by-move/bind-by-move-no-guards.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr?ref=824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "patch": "@@ -1,11 +0,0 @@\n-error[E0008]: cannot bind by-move into a pattern guard\n-  --> $DIR/bind-by-move-no-guards.rs:8:14\n-   |\n-LL |         Some(z) if z.recv().unwrap() => { panic!() },\n-   |              ^ moves value into pattern guard\n-   |\n-   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0008`."}, {"sha": "9cbceeb945ccc631f4f6fca7c8afa5d9ca5de926", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -8,12 +8,9 @@ fn foo() -> isize {\n     let mut x = Enum::A(&mut n);\n     match x {\n         Enum::A(_) if { x = Enum::B(false); false } => 1,\n-        //~^ ERROR cannot assign in a pattern guard\n-        //~| ERROR cannot assign `x` in match guard\n+        //~^ ERROR cannot assign `x` in match guard\n         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n-        //~^ ERROR cannot mutably borrow in a pattern guard\n-        //~| ERROR cannot assign in a pattern guard\n-        //~| ERROR cannot mutably borrow `x` in match guard\n+        //~^ ERROR cannot mutably borrow `x` in match guard\n         Enum::A(p) => *p,\n         Enum::B(_) => 2,\n     }"}, {"sha": "6d05e97252d928df4fdb633518281dbc61331833", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.stderr", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -1,23 +1,3 @@\n-error[E0302]: cannot assign in a pattern guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:10:25\n-   |\n-LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n-   |                         ^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n-\n-error[E0301]: cannot mutably borrow in a pattern guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:13:38\n-   |\n-LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n-   |                                      ^ borrowed mutably in pattern guard\n-   |\n-   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n-\n-error[E0302]: cannot assign in a pattern guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:13:41\n-   |\n-LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n-   |                                         ^^^^^^^^^^^^^^^^^^^ assignment in pattern guard\n-\n error[E0510]: cannot assign `x` in match guard\n   --> $DIR/borrowck-mutate-in-guard.rs:10:25\n    |\n@@ -27,15 +7,14 @@ LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n    |                         ^^^^^^^^^^^^^^^^^^ cannot assign\n \n error[E0510]: cannot mutably borrow `x` in match guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:13:33\n+  --> $DIR/borrowck-mutate-in-guard.rs:12:33\n    |\n LL |     match x {\n    |           - value is immutable in match guard\n ...\n LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n    |                                 ^^^^^^ cannot mutably borrow\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0301, E0302, E0510.\n-For more information about an error, try `rustc --explain E0301`.\n+For more information about this error, try `rustc --explain E0510`."}, {"sha": "c87ef4cb8541fca030d64805d772963470c0eb67", "filename": "src/test/ui/error-codes/E0008.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Ferror-codes%2FE0008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Ferror-codes%2FE0008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0008.rs?ref=824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "patch": "@@ -1,7 +0,0 @@\n-fn main() {\n-    match Some(\"hi\".to_string()) {\n-        Some(s) if s.len() == 0 => {},\n-        //~^ ERROR E0008\n-        _ => {},\n-    }\n-}"}, {"sha": "6b45439c4b5877ceadbc7c9cdb715da89ad50241", "filename": "src/test/ui/error-codes/E0008.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr?ref=824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "patch": "@@ -1,11 +0,0 @@\n-error[E0008]: cannot bind by-move into a pattern guard\n-  --> $DIR/E0008.rs:3:14\n-   |\n-LL |         Some(s) if s.len() == 0 => {},\n-   |              ^ moves value into pattern guard\n-   |\n-   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0008`."}, {"sha": "3b451801c99df5983106f8a6d1cb1212dcfbc354", "filename": "src/test/ui/error-codes/E0301.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0301.rs?ref=824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "patch": "@@ -1,7 +0,0 @@\n-fn main() {\n-    match Some(()) {\n-        None => { },\n-        option if option.take().is_none() => {}, //~ ERROR E0301\n-        Some(_) => { } //~^ ERROR E0596\n-    }\n-}"}, {"sha": "4f12fd3850e3395a5f45c80c28349b8b56795000", "filename": "src/test/ui/error-codes/E0301.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr?ref=824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "patch": "@@ -1,20 +0,0 @@\n-error[E0301]: cannot mutably borrow in a pattern guard\n-  --> $DIR/E0301.rs:4:19\n-   |\n-LL |         option if option.take().is_none() => {},\n-   |                   ^^^^^^ borrowed mutably in pattern guard\n-   |\n-   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n-\n-error[E0596]: cannot borrow `option` as mutable, as it is immutable for the pattern guard\n-  --> $DIR/E0301.rs:4:19\n-   |\n-LL |         option if option.take().is_none() => {},\n-   |                   ^^^^^^ cannot borrow as mutable\n-   |\n-   = note: variables bound in patterns are immutable until the end of the pattern guard\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0301, E0596.\n-For more information about an error, try `rustc --explain E0301`."}, {"sha": "69f5953deb22335851091b70a59aa1e35b07d4ee", "filename": "src/test/ui/error-codes/E0302.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0302.rs?ref=824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "patch": "@@ -1,8 +0,0 @@\n-fn main() {\n-    match Some(()) {\n-        None => { },\n-        option if { option = None; false } => { }, //~ ERROR E0302\n-        //~^ ERROR cannot assign to `option`, as it is immutable for the pattern guard\n-        Some(_) => { }\n-    }\n-}"}, {"sha": "a077fcaea4101c8a3cf36f512157928fbc5b5e83", "filename": "src/test/ui/error-codes/E0302.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0302.stderr?ref=824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "patch": "@@ -1,17 +0,0 @@\n-error[E0302]: cannot assign in a pattern guard\n-  --> $DIR/E0302.rs:4:21\n-   |\n-LL |         option if { option = None; false } => { },\n-   |                     ^^^^^^^^^^^^^ assignment in pattern guard\n-\n-error[E0594]: cannot assign to `option`, as it is immutable for the pattern guard\n-  --> $DIR/E0302.rs:4:21\n-   |\n-LL |         option if { option = None; false } => { },\n-   |                     ^^^^^^^^^^^^^ cannot assign\n-   |\n-   = note: variables bound in patterns are immutable until the end of the pattern guard\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0302`."}, {"sha": "7253d35ed2d4fe9e6c04157057e19c3821a0f2a3", "filename": "src/test/ui/issues/issue-24535-allow-mutable-borrow-in-match-guard.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fissues%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fissues%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -5,8 +5,6 @@\n // See further discussion on rust-lang/rust#24535,\n // rust-lang/rfcs#1006, and rust-lang/rfcs#107\n \n-#![feature(bind_by_move_pattern_guards)]\n-\n fn main() {\n     rust_issue_24535();\n     rfcs_issue_1006_1();"}, {"sha": "82d8b9e9ed977d9b28f558d4b894a4ecd9bba6aa", "filename": "src/test/ui/issues/issue-27282-reborrow-ref-mut-in-guard.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -5,8 +5,6 @@\n // reject it. But I want to make sure that we continue to reject it\n // (under NLL) even when that conservaive check goes away.\n \n-#![feature(bind_by_move_pattern_guards)]\n-\n fn main() {\n     let mut b = &mut true;\n     match b {"}, {"sha": "f0264b56ea569fdd8fe252fe63f7205d734d59e2", "filename": "src/test/ui/issues/issue-27282-reborrow-ref-mut-in-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.stderr?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow `r` as mutable, as it is immutable for the pattern guard\n-  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:14:25\n+  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:12:25\n    |\n LL |         ref mut r if { (|| { let bar = &mut *r; **bar = false; })();\n    |                         ^^                   - mutable borrow occurs due to use of `r` in closure"}, {"sha": "52120360be71e68816502a6e0431d390f61464a4", "filename": "src/test/ui/match/match-ref-mut-stability.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-stability.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -3,8 +3,6 @@\n \n // run-pass\n \n-#![feature(bind_by_move_pattern_guards)]\n-\n // Test that z always point to the same temporary.\n fn referent_stability() {\n     let p;"}, {"sha": "2e6d675fb641e7e940ef450fc06a72ae6401a239", "filename": "src/test/ui/nll/match-cfg-fake-edges.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -1,8 +1,6 @@\n // Test that we have enough false edges to avoid exposing the exact matching\n // algorithm in borrow checking.\n \n-#![feature(bind_by_move_pattern_guards)]\n-\n fn guard_always_precedes_arm(y: i32) {\n     let mut x;\n     // x should always be initialized, as the only way to reach the arm is"}, {"sha": "06fe564ac69e3b371dce57af0b63107648206956", "filename": "src/test/ui/nll/match-cfg-fake-edges.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -1,11 +1,11 @@\n error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/match-cfg-fake-edges.rs:23:13\n+  --> $DIR/match-cfg-fake-edges.rs:21:13\n    |\n LL |             x;\n    |             ^ use of possibly-uninitialized `x`\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/match-cfg-fake-edges.rs:37:13\n+  --> $DIR/match-cfg-fake-edges.rs:35:13\n    |\n LL |     let x = String::new();\n    |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait"}, {"sha": "81ae19ebf8a7210106c7403635ce3a5e8d9bfa5c", "filename": "src/test/ui/nll/match-guards-partially-borrow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -5,8 +5,6 @@\n // Test that we don't allow mutating the value being matched on in a way that\n // changes which patterns it matches, until we have chosen an arm.\n \n-#![feature(bind_by_move_pattern_guards)]\n-\n fn ok_mutation_in_guard(mut q: i32) {\n     match q {\n         // OK, mutation doesn't change which patterns g matches"}, {"sha": "48e3a7c6993182bf890740347a800a93b8ff71f3", "filename": "src/test/ui/nll/match-guards-partially-borrow.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -1,5 +1,5 @@\n error[E0510]: cannot assign `q` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:57:13\n+  --> $DIR/match-guards-partially-borrow.rs:55:13\n    |\n LL |     match q {\n    |           - value is immutable in match guard\n@@ -8,7 +8,7 @@ LL |             q = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `r` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:69:13\n+  --> $DIR/match-guards-partially-borrow.rs:67:13\n    |\n LL |     match r {\n    |           - value is immutable in match guard\n@@ -17,7 +17,7 @@ LL |             r = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `t` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:93:13\n+  --> $DIR/match-guards-partially-borrow.rs:91:13\n    |\n LL |     match t {\n    |           - value is immutable in match guard\n@@ -26,7 +26,7 @@ LL |             t = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot mutably borrow `x.0` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:107:22\n+  --> $DIR/match-guards-partially-borrow.rs:105:22\n    |\n LL |     match x {\n    |           - value is immutable in match guard\n@@ -35,7 +35,7 @@ LL |                 Some(ref mut r) => *r = None,\n    |                      ^^^^^^^^^ cannot mutably borrow\n \n error[E0506]: cannot assign to `t` because it is borrowed\n-  --> $DIR/match-guards-partially-borrow.rs:119:13\n+  --> $DIR/match-guards-partially-borrow.rs:117:13\n    |\n LL |         s if {\n    |         - borrow of `t` occurs here\n@@ -46,7 +46,7 @@ LL |         } => (), // What value should `s` have in the arm?\n    |         - borrow later used here\n \n error[E0510]: cannot assign `y` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:130:13\n+  --> $DIR/match-guards-partially-borrow.rs:128:13\n    |\n LL |     match *y {\n    |           -- value is immutable in match guard\n@@ -55,7 +55,7 @@ LL |             y = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `z` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:141:13\n+  --> $DIR/match-guards-partially-borrow.rs:139:13\n    |\n LL |     match z {\n    |           - value is immutable in match guard\n@@ -64,7 +64,7 @@ LL |             z = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `a` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:153:13\n+  --> $DIR/match-guards-partially-borrow.rs:151:13\n    |\n LL |     match a {\n    |           - value is immutable in match guard\n@@ -73,7 +73,7 @@ LL |             a = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `b` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:164:13\n+  --> $DIR/match-guards-partially-borrow.rs:162:13\n    |\n LL |     match b {\n    |           - value is immutable in match guard"}, {"sha": "1e086160f3f34a39e03d97f04f25217bc4bc7245", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/bind-by-move-no-guards.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -4,8 +4,6 @@\n \n // run-pass\n \n-#![feature(bind_by_move_pattern_guards)]\n-\n use std::sync::mpsc::channel;\n \n fn main() {"}, {"sha": "fe1f69907473515b4163b959d72f6eda3858f2b9", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_2015.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr?ref=824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/feature-gate.rs:36:1\n-   |\n-LL | / fn main() {\n-LL | |     foo(107)\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "fe1f69907473515b4163b959d72f6eda3858f2b9", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_2018.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr?ref=824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/feature-gate.rs:36:1\n-   |\n-LL | / fn main() {\n-LL | |     foo(107)\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "34e8b0e14399eb9f4a784143fd7f0819022430fd", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_feature_nll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_feature_nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_feature_nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_feature_nll.stderr?ref=824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/feature-gate.rs:41:1\n-   |\n-LL | / fn main() {\n-LL | |     foo(107)\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "34e8b0e14399eb9f4a784143fd7f0819022430fd", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_znll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_znll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_znll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_znll.stderr?ref=824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "patch": "@@ -1,10 +0,0 @@\n-error: compilation successful\n-  --> $DIR/feature-gate.rs:41:1\n-   |\n-LL | / fn main() {\n-LL | |     foo(107)\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "7a7b1c253528f68754ed66d9a8c35fe929a1661c", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.no_gate.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr?ref=824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "patch": "@@ -1,11 +0,0 @@\n-error[E0008]: cannot bind by-move into a pattern guard\n-  --> $DIR/feature-gate.rs:28:16\n-   |\n-LL |         A { a: v } if *v == 42 => v,\n-   |                ^ moves value into pattern guard\n-   |\n-   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0008`."}, {"sha": "69fce0bc775f7e6e6b40c8b151ab950d35e928fd", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/824383d4ab66abd32abc6e19b68d78ecfddcb7d4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs?ref=824383d4ab66abd32abc6e19b68d78ecfddcb7d4", "patch": "@@ -1,40 +0,0 @@\n-// Check that pattern-guards with move-bound variables is only allowed\n-// with the appropriate set of feature gates. (Note that we require\n-// the code to opt into MIR-borrowck in *some* way before the feature\n-// will work; we use the revision system here to enumerate a number of\n-// ways that opt-in could occur.)\n-\n-// gate-test-bind_by_move_pattern_guards\n-\n-// revisions: no_gate gate_and_2015 gate_and_2018\n-\n-// (We're already testing NLL behavior quite explicitly, no need for compare-mode=nll.)\n-// ignore-compare-mode-nll\n-\n-#![feature(rustc_attrs)]\n-\n-#![cfg_attr(gate_and_2015, feature(bind_by_move_pattern_guards))]\n-#![cfg_attr(gate_and_2018, feature(bind_by_move_pattern_guards))]\n-\n-//[gate_and_2015] edition:2015\n-//[gate_and_2018] edition:2018\n-\n-struct A { a: Box<i32> }\n-\n-fn foo(n: i32) {\n-    let x = A { a: Box::new(n) };\n-    let _y = match x {\n-\n-        A { a: v } if *v == 42 => v,\n-        //[no_gate]~^ ERROR cannot bind by-move into a pattern guard\n-\n-        _ => Box::new(0)\n-    };\n-}\n-\n-#[rustc_error]\n-fn main() {\n-    foo(107)\n-}\n-//[gate_and_2015]~^^^ ERROR compilation successful\n-//[gate_and_2018]~^^^^ ERROR compilation successful"}, {"sha": "3161d6fbbe647c55fd74534713f369bf58b99625", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/former-E0008-now-pass.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fformer-E0008-now-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fformer-E0008-now-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fformer-E0008-now-pass.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -0,0 +1,11 @@\n+// This test used to emit E0008 but now passed since `bind_by_move_pattern_guards`\n+// have been stabilized.\n+\n+// check-pass\n+\n+fn main() {\n+    match Some(\"hi\".to_string()) {\n+        Some(s) if s.len() == 0 => {},\n+        _ => {},\n+    }\n+}"}, {"sha": "b716fc870e071b3ab41cbe7cda725a771fb4c3c5", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-basic-examples.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -1,5 +1,3 @@\n-#![feature(bind_by_move_pattern_guards)]\n-\n // run-pass\n \n struct A { a: Box<i32> }"}, {"sha": "d1f685f3e7a6da77d23bba0ba9d913d387fd6f70", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -1,5 +1,3 @@\n-#![feature(bind_by_move_pattern_guards)]\n-\n enum VecWrapper { A(Vec<i32>) }\n \n fn foo(x: VecWrapper) -> usize {"}, {"sha": "7becd013249d471264a1209fc2feb4715735868f", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `v` in pattern guard\n-  --> $DIR/rfc-reject-double-move-across-arms.rs:7:36\n+  --> $DIR/rfc-reject-double-move-across-arms.rs:5:36\n    |\n LL |         VecWrapper::A(v) if { drop(v); false } => 1,\n    |                                    ^ move occurs because `v` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait"}, {"sha": "571f51c9001202ad99efdfd95832249f635d0dab", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -1,5 +1,3 @@\n-#![feature(bind_by_move_pattern_guards)]\n-\n struct A { a: Box<i32> }\n \n fn foo(n: i32) {"}, {"sha": "b93e72190680dbfbaec9ef11c58641c298a286ca", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45859b7ca764cafb14efb8c63a83d5e48dc5d016/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr?ref=45859b7ca764cafb14efb8c63a83d5e48dc5d016", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `v` in pattern guard\n-  --> $DIR/rfc-reject-double-move-in-first-arm.rs:8:30\n+  --> $DIR/rfc-reject-double-move-in-first-arm.rs:6:30\n    |\n LL |         A { a: v } if { drop(v); true } => v,\n    |                              ^ move occurs because `v` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait"}]}