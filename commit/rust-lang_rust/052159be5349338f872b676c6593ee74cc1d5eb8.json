{"sha": "052159be5349338f872b676c6593ee74cc1d5eb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MjE1OWJlNTM0OTMzOGY4NzJiNjc2YzY1OTNlZTc0Y2MxZDVlYjg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@commure.com", "date": "2018-07-20T16:15:22Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@commure.com", "date": "2018-07-20T16:15:22Z"}, "message": "fix incorrect position of chars in fmt str", "tree": {"sha": "c7b9d43f0c6c8951966e19b966934427cae09f54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7b9d43f0c6c8951966e19b966934427cae09f54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/052159be5349338f872b676c6593ee74cc1d5eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/052159be5349338f872b676c6593ee74cc1d5eb8", "html_url": "https://github.com/rust-lang/rust/commit/052159be5349338f872b676c6593ee74cc1d5eb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/052159be5349338f872b676c6593ee74cc1d5eb8/comments", "author": null, "committer": null, "parents": [{"sha": "85da68cb6d5e0fa69da4ae2c64ed56ce3622f73d", "url": "https://api.github.com/repos/rust-lang/rust/commits/85da68cb6d5e0fa69da4ae2c64ed56ce3622f73d", "html_url": "https://github.com/rust-lang/rust/commit/85da68cb6d5e0fa69da4ae2c64ed56ce3622f73d"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "6f4989c3e87d8137088887015f7722ed9cc95d96", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/052159be5349338f872b676c6593ee74cc1d5eb8/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052159be5349338f872b676c6593ee74cc1d5eb8/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=052159be5349338f872b676c6593ee74cc1d5eb8", "patch": "@@ -169,28 +169,27 @@ impl<'a> Iterator for Parser<'a> {\n         if let Some(&(pos, c)) = self.cur.peek() {\n             match c {\n                 '{' => {\n-                    let pos = pos + raw + 1;\n                     self.cur.next();\n                     if self.consume('{') {\n-                        Some(String(self.string(pos)))\n+                        Some(String(self.string(pos + 1)))\n                     } else {\n                         let ret = Some(NextArgument(self.argument()));\n                         self.must_consume('}');\n                         ret\n                     }\n                 }\n                 '}' => {\n-                    let pos = pos + raw + 1;\n                     self.cur.next();\n                     if self.consume('}') {\n-                        Some(String(self.string(pos)))\n+                        Some(String(self.string(pos + 1)))\n                     } else {\n+                        let err_pos = pos + raw + 1;\n                         self.err_with_note(\n                             \"unmatched `}` found\",\n                             \"unmatched `}`\",\n                             \"if you intended to print `}`, you can escape it using `}}`\",\n-                            pos,\n-                            pos,\n+                            err_pos,\n+                            err_pos,\n                         );\n                         None\n                     }\n@@ -283,15 +282,17 @@ impl<'a> Parser<'a> {\n             syntax::ast::StrStyle::Raw(raw) => raw as usize,\n             _ => 0,\n         };\n+\n         let padding = raw + self.seen_newlines;\n         if let Some(&(pos, maybe)) = self.cur.peek() {\n             if c == maybe {\n                 self.cur.next();\n             } else {\n+                let pos = pos + padding + 1;\n                 self.err(format!(\"expected `{:?}`, found `{:?}`\", c, maybe),\n                          format!(\"expected `{}`\", c),\n-                         pos + padding + 1,\n-                         pos + padding + 1);\n+                         pos,\n+                         pos);\n             }\n         } else {\n             let msg = format!(\"expected `{:?}` but string was terminated\", c);"}]}