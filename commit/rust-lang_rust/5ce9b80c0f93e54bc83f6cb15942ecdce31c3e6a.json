{"sha": "5ce9b80c0f93e54bc83f6cb15942ecdce31c3e6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZTliODBjMGY5M2U1NGJjODNmNmNiMTU5NDJlY2RjZTMxYzNlNmE=", "commit": {"author": {"name": "David Ross", "email": "daboross@daboross.net", "date": "2020-02-16T00:12:59Z"}, "committer": {"name": "David Ross", "email": "daboross@daboross.net", "date": "2020-02-16T03:51:02Z"}, "message": "Refactor out error case & apply suggestions.\n\nThis is almost entirely refactoring and message changing, with the\nsingle behavioral change of panicking for unexpected output.", "tree": {"sha": "bc5182901350a3a65c6586aa9cd2e98e7524e77a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc5182901350a3a65c6586aa9cd2e98e7524e77a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ce9b80c0f93e54bc83f6cb15942ecdce31c3e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce9b80c0f93e54bc83f6cb15942ecdce31c3e6a", "html_url": "https://github.com/rust-lang/rust/commit/5ce9b80c0f93e54bc83f6cb15942ecdce31c3e6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ce9b80c0f93e54bc83f6cb15942ecdce31c3e6a/comments", "author": {"login": "daboross", "id": 1152146, "node_id": "MDQ6VXNlcjExNTIxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1152146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daboross", "html_url": "https://github.com/daboross", "followers_url": "https://api.github.com/users/daboross/followers", "following_url": "https://api.github.com/users/daboross/following{/other_user}", "gists_url": "https://api.github.com/users/daboross/gists{/gist_id}", "starred_url": "https://api.github.com/users/daboross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daboross/subscriptions", "organizations_url": "https://api.github.com/users/daboross/orgs", "repos_url": "https://api.github.com/users/daboross/repos", "events_url": "https://api.github.com/users/daboross/events{/privacy}", "received_events_url": "https://api.github.com/users/daboross/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daboross", "id": 1152146, "node_id": "MDQ6VXNlcjExNTIxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1152146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daboross", "html_url": "https://github.com/daboross", "followers_url": "https://api.github.com/users/daboross/followers", "following_url": "https://api.github.com/users/daboross/following{/other_user}", "gists_url": "https://api.github.com/users/daboross/gists{/gist_id}", "starred_url": "https://api.github.com/users/daboross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daboross/subscriptions", "organizations_url": "https://api.github.com/users/daboross/orgs", "repos_url": "https://api.github.com/users/daboross/repos", "events_url": "https://api.github.com/users/daboross/events{/privacy}", "received_events_url": "https://api.github.com/users/daboross/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "940f65782cc5df7fecad27b38cc25b6d1eeaf2e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/940f65782cc5df7fecad27b38cc25b6d1eeaf2e8", "html_url": "https://github.com/rust-lang/rust/commit/940f65782cc5df7fecad27b38cc25b6d1eeaf2e8"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "76e4a80878f13cb43404afbcd24c06a545f02867", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 42, "deletions": 20, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5ce9b80c0f93e54bc83f6cb15942ecdce31c3e6a/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce9b80c0f93e54bc83f6cb15942ecdce31c3e6a/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=5ce9b80c0f93e54bc83f6cb15942ecdce31c3e6a", "patch": "@@ -551,8 +551,8 @@ impl<'a> Parser<'a> {\n         // Save the state of the parser before parsing type normally, in case there is a\n         // LessThan comparison after this cast.\n         let parser_snapshot_before_type = self.clone();\n-        let type_result = match self.parse_ty_no_plus() {\n-            Ok(rhs) => Ok(mk_expr(self, rhs)),\n+        let cast_expr = match self.parse_ty_no_plus() {\n+            Ok(rhs) => mk_expr(self, rhs),\n             Err(mut type_err) => {\n                 // Rewind to before attempting to parse the type with generics, to recover\n                 // from situations like `x as usize < y` in which we first tried to parse\n@@ -606,41 +606,63 @@ impl<'a> Parser<'a> {\n                             )\n                             .emit();\n \n-                        Ok(expr)\n+                        expr\n                     }\n                     Err(mut path_err) => {\n                         // Couldn't parse as a path, return original error and parser state.\n                         path_err.cancel();\n                         mem::replace(self, parser_snapshot_after_type);\n-                        Err(type_err)\n+                        return Err(type_err);\n                     }\n                 }\n             }\n         };\n \n-        // Disallow postfix operators such as `.`, `?` or index (`[]`) after casts.\n-        // Parses the postfix operator and emits an error.\n-        let expr = type_result?;\n-        let span = expr.span;\n+        self.parse_and_disallow_postfix_after_cast(cast_expr)\n+    }\n \n-        // The resulting parse tree for `&x as T[0]` has a precedence of `((&x) as T)[0]`.\n-        let with_postfix = self.parse_dot_or_call_expr_with_(expr, span)?;\n-        if !matches!(with_postfix.kind, ExprKind::Cast(_, _)) {\n+    /// Parses a postfix operators such as `.`, `?`, or index (`[]`) after a cast,\n+    /// then emits an error and returns the newly parsed tree.\n+    /// The resulting parse tree for `&x as T[0]` has a precedence of `((&x) as T)[0]`.\n+    fn parse_and_disallow_postfix_after_cast(\n+        &mut self,\n+        cast_expr: P<Expr>,\n+    ) -> PResult<'a, P<Expr>> {\n+        use std::collections::hash_map::DefaultHasher;\n+        use std::hash::Hasher;\n+        // Hash the memory location of expr before parsing any following postfix operators.\n+        // This will be compared with the hash of the output expression.\n+        // If they different we can assume we parsed another expression because the existing expression is not reallocated.\n+        let mut before_hasher = DefaultHasher::new();\n+        std::ptr::hash(&*cast_expr, &mut before_hasher);\n+        let before_hash = before_hasher.finish();\n+        let span = cast_expr.span;\n+        let with_postfix = self.parse_dot_or_call_expr_with_(cast_expr, span)?;\n+\n+        let mut after_hasher = DefaultHasher::new();\n+        std::ptr::hash(&*with_postfix, &mut after_hasher);\n+        let after_hash = after_hasher.finish();\n+\n+        // Check if an illegal postfix operator has been added after the cast.\n+        // If the resulting expression is not a cast, or has a different memory location, it is an illegal postfix operator.\n+        if !matches!(with_postfix.kind, ExprKind::Cast(_, _)) || after_hash != before_hash {\n             let expr_str = self.span_to_snippet(span);\n \n             let msg = format!(\n-                \"casts followed by {} are not supported\",\n+                \"casts cannot be followed by {}\",\n                 match with_postfix.kind {\n-                    ExprKind::Index(_, _) => \"index operators\",\n-                    ExprKind::Try(_) => \"try operators\",\n-                    ExprKind::Field(_, _) => \"field access expressions\",\n-                    ExprKind::MethodCall(_, _) => \"method call expressions\",\n-                    ExprKind::Await(_) => \"awaits\",\n-                    _ => \"expressions\",\n+                    ExprKind::Index(_, _) => \"indexing\",\n+                    ExprKind::Try(_) => \"?\",\n+                    ExprKind::Field(_, _) => \"a field access\",\n+                    ExprKind::MethodCall(_, _) => \"a method call\",\n+                    ExprKind::Call(_, _) => \"a function call\",\n+                    ExprKind::Await(_) => \"`.await`\",\n+                    ref kind =>\n+                        unreachable!(\"parse_dot_or_call_expr_with_ shouldn't produce a {:?}\", kind),\n                 }\n             );\n-            let mut err = self.struct_span_err(with_postfix.span, &msg);\n-            let suggestion = \"try surrounding the expression with parentheses\";\n+            let mut err = self.struct_span_err(span, &msg);\n+            let suggestion = \"try surrounding the expression in parentheses\";\n             if let Ok(expr_str) = expr_str {\n                 err.span_suggestion(\n                     span,"}]}