{"sha": "303cadfbb3addd30dafdc2bcb5db994ab3bb30ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwM2NhZGZiYjNhZGRkMzBkYWZkYzJiY2I1ZGI5OTRhYjNiYjMwYWI=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-27T22:00:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-19T00:01:21Z"}, "message": "vim: Add :Run and :Expand commands\n\nDefine a command :Run to compile and run the current file. This supports\nunnamed buffers (by writing to a temporary file). See the comment above\nthe command definition for notes on usage.\n\nDefine <D-r> and <D-R> mappings for :Run to make it easier to invoke in\nMacVim.\n\nDefine a command :Expand to display the --pretty expanded output for the\ncurrent file. This can be configured to use different pretty types. See\nthe comment above the command definition for notes on usage.\n\nCreate an autoload file and put function definitions there to speed up\nload time.", "tree": {"sha": "9c11606b7234e5f57f7e12fc3e853c6da0c60b88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c11606b7234e5f57f7e12fc3e853c6da0c60b88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/303cadfbb3addd30dafdc2bcb5db994ab3bb30ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/303cadfbb3addd30dafdc2bcb5db994ab3bb30ab", "html_url": "https://github.com/rust-lang/rust/commit/303cadfbb3addd30dafdc2bcb5db994ab3bb30ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/303cadfbb3addd30dafdc2bcb5db994ab3bb30ab/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ca454f12c13cd34ca41741d372485e34f79706a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca454f12c13cd34ca41741d372485e34f79706a", "html_url": "https://github.com/rust-lang/rust/commit/6ca454f12c13cd34ca41741d372485e34f79706a"}], "stats": {"total": 302, "additions": 265, "deletions": 37}, "files": [{"sha": "688c1f690eb5670fa1acaf891940e5cd9b8f5e60", "filename": "src/etc/vim/autoload/rust.vim", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/303cadfbb3addd30dafdc2bcb5db994ab3bb30ab/src%2Fetc%2Fvim%2Fautoload%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/303cadfbb3addd30dafdc2bcb5db994ab3bb30ab/src%2Fetc%2Fvim%2Fautoload%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fautoload%2Frust.vim?ref=303cadfbb3addd30dafdc2bcb5db994ab3bb30ab", "patch": "@@ -0,0 +1,192 @@\n+\" Author: Kevin Ballard\n+\" Description: Helper functions for Rust commands/mappings\n+\" Last Modified: May 27, 2014\n+\n+\" Jump {{{1\n+\n+function! rust#Jump(mode, function) range\n+\tlet cnt = v:count1\n+\tnormal! m'\n+\tif a:mode ==# 'v'\n+\t\tnorm! gv\n+\tendif\n+\tlet foldenable = &foldenable\n+\tset nofoldenable\n+\twhile cnt > 0\n+\t\texecute \"call <SID>Jump_\" . a:function . \"()\"\n+\t\tlet cnt = cnt - 1\n+\tendwhile\n+\tlet &foldenable = foldenable\n+endfunction\n+\n+function! s:Jump_Back()\n+\tcall search('{', 'b')\n+\tkeepjumps normal! w99[{\n+endfunction\n+\n+function! s:Jump_Forward()\n+\tnormal! j0\n+\tcall search('{', 'b')\n+\tkeepjumps normal! w99[{%\n+\tcall search('{')\n+endfunction\n+\n+\" Run {{{1\n+\n+function! rust#Run(bang, args)\n+\tif a:bang\n+\t\tlet idx = index(a:args, '--')\n+\t\tif idx != -1\n+\t\t\tlet rustc_args = idx == 0 ? [] : a:args[:idx-1]\n+\t\t\tlet args = a:args[idx+1:]\n+\t\telse\n+\t\t\tlet rustc_args = a:args\n+\t\t\tlet args = []\n+\t\tendif\n+\telse\n+\t\tlet rustc_args = []\n+\t\tlet args = a:args\n+\tendif\n+\n+\tlet b:rust_last_rustc_args = rustc_args\n+\tlet b:rust_last_args = args\n+\n+\tcall s:WithPath(function(\"s:Run\"), rustc_args, args)\n+endfunction\n+\n+function! s:Run(path, rustc_args, args)\n+\ttry\n+\t\tlet exepath = tempname()\n+\t\tif has('win32')\n+\t\t\tlet exepath .= '.exe'\n+\t\tendif\n+\n+\t\tlet rustc_args = [a:path, '-o', exepath] + a:rustc_args\n+\n+\t\tlet rustc = exists(\"g:rustc_path\") ? g:rustc_path : \"rustc\"\n+\n+\t\tlet output = system(shellescape(rustc) . \" \" . join(map(rustc_args, 'shellescape(v:val)')))\n+\t\tif output != ''\n+\t\t\techohl WarningMsg\n+\t\t\techo output\n+\t\t\techohl None\n+\t\tendif\n+\t\tif !v:shell_error\n+\t\t\texe '!' . shellescape(exepath) . \" \" . join(map(a:args, 'shellescape(v:val)'))\n+\t\tendif\n+\tfinally\n+\t\tif exists(\"exepath\")\n+\t\t\tsilent! call delete(exepath)\n+\t\tendif\n+\tendtry\n+endfunction\n+\n+\" Expand {{{1\n+\n+function! rust#Expand(bang, args)\n+\tif a:bang && !empty(a:args)\n+\t\tlet pretty = a:args[0]\n+\t\tlet args = a:args[1:]\n+\telse\n+\t\tlet pretty = \"expanded\"\n+\t\tlet args = a:args\n+\tendif\n+\tcall s:WithPath(function(\"s:Expand\"), pretty, args)\n+endfunction\n+\n+function! s:Expand(path, pretty, args)\n+\ttry\n+\t\tlet rustc = exists(\"g:rustc_path\") ? g:rustc_path : \"rustc\"\n+\n+\t\tlet args = [a:path, '--pretty', a:pretty] + a:args\n+\t\tlet output = system(shellescape(rustc) . \" \" . join(map(args, \"shellescape(v:val)\")))\n+\t\tif v:shell_error\n+\t\t\techohl WarningMsg\n+\t\t\techo output\n+\t\t\techohl None\n+\t\telse\n+\t\t\tnew\n+\t\t\tsilent put =output\n+\t\t\t1\n+\t\t\td\n+\t\t\tsetl filetype=rust\n+\t\t\tsetl buftype=nofile\n+\t\t\tsetl bufhidden=hide\n+\t\t\tsetl noswapfile\n+\t\tendif\n+\tendtry\n+endfunction\n+\n+function! rust#CompleteExpand(lead, line, pos)\n+\tif a:line[: a:pos-1] =~ '^Expand!\\s*\\S*$'\n+\t\t\" first argument and it has a !\n+\t\tlet list = [\"normal\", \"expanded\", \"typed\", \"expanded,identified\", \"flowgraph=\"]\n+\t\tif !empty(a:lead)\n+\t\t\tcall filter(list, \"v:val[:len(a:lead)-1] == a:lead\")\n+\t\tendif\n+\t\treturn list\n+\tendif\n+\n+\treturn glob(escape(a:lead, \"*?[\") . '*', 0, 1)\n+endfunction\n+\n+\" Utility functions {{{1\n+\n+function! s:WithPath(func, ...)\n+\ttry\n+\t\tlet save_write = &write\n+\t\tset write\n+\t\tlet path = expand('%')\n+\t\tlet pathisempty = empty(path)\n+\t\tif pathisempty || !save_write\n+\t\t\t\" use a temporary file named 'unnamed.rs' inside a temporary\n+\t\t\t\" directory. This produces better error messages\n+\t\t\tlet tmpdir = tempname()\n+\t\t\tcall mkdir(tmpdir)\n+\n+\t\t\tlet save_cwd = getcwd()\n+\t\t\tsilent exe 'lcd' tmpdir\n+\n+\t\t\tlet path = 'unnamed.rs'\n+\n+\t\t\tlet save_mod = &mod\n+\t\t\tset nomod\n+\n+\t\t\tsilent exe 'keepalt write! ' . path\n+\t\t\tif pathisempty\n+\t\t\t\tsilent keepalt 0file\n+\t\t\tendif\n+\t\telse\n+\t\t\tupdate\n+\t\tendif\n+\n+\t\tcall call(a:func, [path] + a:000)\n+\tfinally\n+\t\tif exists(\"save_mod\")   | let &mod = save_mod          | endif\n+\t\tif exists(\"save_write\") | let &write = save_write      | endif\n+\t\tif exists(\"save_cwd\")   | silent exe 'lcd' save_cwd    | endif\n+\t\tif exists(\"tmpdir\")     | silent call s:RmDir(tmpdir)  | endif\n+\tendtry\n+endfunction\n+\n+function! rust#AppendCmdLine(text)\n+\tcall setcmdpos(getcmdpos())\n+\tlet cmd = getcmdline() . a:text\n+\treturn cmd\n+endfunction\n+\n+function! s:RmDir(path)\n+\t\" sanity check; make sure it's not empty, /, or $HOME\n+\tif empty(a:path)\n+\t\techoerr 'Attempted to delete empty path'\n+\t\treturn 0\n+\telseif a:path == '/' || a:path == $HOME\n+\t\techoerr 'Attempted to delete protected path: ' . a:path\n+\t\treturn 0\n+\tendif\n+\tsilent exe \"!rm -rf \" . shellescape(a:path)\n+endfunction\n+\n+\" }}}1\n+\n+\" vim: set noet sw=4 ts=4:"}, {"sha": "fee59b586876687c5bcf94b0a64e09926bb90f05", "filename": "src/etc/vim/ftplugin/rust.vim", "status": "modified", "additions": 73, "deletions": 37, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/303cadfbb3addd30dafdc2bcb5db994ab3bb30ab/src%2Fetc%2Fvim%2Fftplugin%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/303cadfbb3addd30dafdc2bcb5db994ab3bb30ab/src%2Fetc%2Fvim%2Fftplugin%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fftplugin%2Frust.vim?ref=303cadfbb3addd30dafdc2bcb5db994ab3bb30ab", "patch": "@@ -1,13 +1,19 @@\n-\" Vim syntax file\n \" Language:     Rust\n+\" Description:  Vim syntax file for Rust\n \" Maintainer:   Chris Morgan <me@chrismorgan.info>\n-\" Last Change:  2014 Feb 27\n+\" Maintainer:   Kevin Ballard <kevin@sb.org>\n+\" Last Change:  May 27, 2014\n \n if exists(\"b:did_ftplugin\")\n \tfinish\n endif\n let b:did_ftplugin = 1\n \n+let s:save_cpo = &cpo\n+set cpo&vim\n+\n+\" Variables {{{1\n+\n \" The rust source code at present seems to typically omit a leader on /*!\n \" comments, so we'll use that as our default, but make it easy to switch.\n \" This does not affect indentation at all (I tested it with and without\n@@ -42,22 +48,74 @@ if exists(\"g:loaded_delimitMate\")\n \tlet b:delimitMate_excluded_regions = delimitMate#Get(\"excluded_regions\") . ',rustLifetimeCandidate,rustGenericLifetimeCandidate'\n endif\n \n+\" Motion Commands {{{1\n+\n \" Bind motion commands to support hanging indents\n-nnoremap <silent> <buffer> [[ :call <SID>Rust_Jump('n', 'Back')<CR>\n-nnoremap <silent> <buffer> ]] :call <SID>Rust_Jump('n', 'Forward')<CR>\n-xnoremap <silent> <buffer> [[ :call <SID>Rust_Jump('v', 'Back')<CR>\n-xnoremap <silent> <buffer> ]] :call <SID>Rust_Jump('v', 'Forward')<CR>\n-onoremap <silent> <buffer> [[ :call <SID>Rust_Jump('o', 'Back')<CR>\n-onoremap <silent> <buffer> ]] :call <SID>Rust_Jump('o', 'Forward')<CR>\n+nnoremap <silent> <buffer> [[ :call rust#Jump('n', 'Back')<CR>\n+nnoremap <silent> <buffer> ]] :call rust#Jump('n', 'Forward')<CR>\n+xnoremap <silent> <buffer> [[ :call rust#Jump('v', 'Back')<CR>\n+xnoremap <silent> <buffer> ]] :call rust#Jump('v', 'Forward')<CR>\n+onoremap <silent> <buffer> [[ :call rust#Jump('o', 'Back')<CR>\n+onoremap <silent> <buffer> ]] :call rust#Jump('o', 'Forward')<CR>\n+\n+\" Commands {{{1\n+\n+\" :Run will compile and run the current file. If it has unsaved changes, they\n+\" will be saved first. If it has no path, it will be written to a temporary\n+\" file first. The generated binary is always placed in a temporary directory,\n+\" but run from the current directory.\n+\"\n+\" The arguments passed to :Run will be passed to the generated binary.\n+\"\n+\" If ! is specified, the arguments are given to rustc as well. A -- argument\n+\" separates rustc args from the args passed to the binary.\n+\"\n+\" If g:rustc_path is defined, it is used as the path to rustc. Otherwise it is\n+\" assumed that rustc is in $PATH.\n+command! -nargs=* -complete=file -bang -bar -buffer Run call rust#Run(<bang>0, [<f-args>])\n+\n+\" :Expand will expand the current file using --pretty.\n+\"\n+\" Any arguments given to :Expand will be passed to rustc. This is largely so\n+\" you can pass various --cfg configurations.\n+\"\n+\" If ! is specified, the first argument will be interpreted as the --pretty\n+\" type. Otherwise it will default to 'expanded'.\n+\"\n+\" If the current file has unsaved changes, it will be saved first. If it's an\n+\" unnamed buffer, it will be written to a temporary file.\n+\"\n+\" If g:rustc_path is defined, it is used as the path to rustc. Otherwise it is\n+\" assumed that rustc is in $PATH.\n+command! -nargs=* -complete=customlist,rust#CompleteExpand -bang -bar -buffer Expand call rust#Expand(<bang>0, [<f-args>])\n+\n+\" Mappings {{{1\n+\n+\" Bind \u2318R in MacVim to :Run\n+nnoremap <silent> <buffer> <D-r> :Run<CR>\n+\" Bind \u2318\u21e7R in MacVim to :Run! pre-filled with the last args\n+nnoremap <buffer> <D-R> :Run! <C-r>=join(b:rust_last_rustc_args)<CR><C-\\>erust#AppendCmdLine(' -- ' . join(b:rust_last_args))<CR>\n+\n+if !exists(\"b:rust_last_rustc_args\") || !exists(\"b:rust_last_args\")\n+\tlet b:rust_last_rustc_args = []\n+\tlet b:rust_last_args = []\n+endif\n+\n+\" Cleanup {{{1\n \n let b:undo_ftplugin = \"\n \t\t\\setlocal formatoptions< comments< commentstring< includeexpr< suffixesadd<\n \t\t\\|if exists('b:rust_original_delimitMate_excluded_regions')\n \t\t  \\|let b:delimitMate_excluded_regions = b:rust_original_delimitMate_excluded_regions\n \t\t  \\|unlet b:rust_original_delimitMate_excluded_regions\n-\t\t\\|elseif exists('b:delimitMate_excluded_regions')\n-\t\t  \\|unlet b:delimitMate_excluded_regions\n+\t\t\\|else\n+\t\t  \\|unlet! b:delimitMate_excluded_regions\n \t\t\\|endif\n+\t\t\\|unlet! b:rust_last_rustc_args b:rust_last_args\n+\t\t\\|delcommand Run\n+\t\t\\|delcommand Expand\n+\t\t\\|nunmap <buffer> <D-r>\n+\t\t\\|nunmap <buffer> <D-R>\n \t\t\\|nunmap <buffer> [[\n \t\t\\|nunmap <buffer> ]]\n \t\t\\|xunmap <buffer> [[\n@@ -66,31 +124,9 @@ let b:undo_ftplugin = \"\n \t\t\\|ounmap <buffer> ]]\n \t\t\\\"\n \n-if exists('*<SID>Rust_Jump') | finish | endif\n+\" }}}1\n \n-function! <SID>Rust_Jump(mode, function) range\n-\tlet cnt = v:count1\n-\tnormal! m'\n-\tif a:mode ==# 'v'\n-\t\tnorm! gv\n-\tendif\n-\tlet foldenable = &foldenable\n-\tset nofoldenable\n-\twhile cnt > 0\n-\t\texecute \"call <SID>Rust_Jump_\" . a:function . \"()\"\n-\t\tlet cnt = cnt - 1\n-\tendwhile\n-\tlet &foldenable = foldenable\n-endfunction\n-\n-function! <SID>Rust_Jump_Back()\n-\tcall search('{', 'b')\n-\tkeepjumps normal! w99[{\n-endfunction\n-\n-function! <SID>Rust_Jump_Forward()\n-\tnormal! j0\n-\tcall search('{', 'b')\n-\tkeepjumps normal! w99[{%\n-\tcall search('{')\n-endfunction\n+let &cpo = s:save_cpo\n+unlet s:save_cpo\n+\n+\" vim: set noet sw=4 ts=4:"}]}