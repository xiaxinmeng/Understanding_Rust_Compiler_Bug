{"sha": "f29a9a2192b0c1345f6de1d2712e56432a32c9f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOWE5YTIxOTJiMGMxMzQ1ZjZkZTFkMjcxMmU1NjQzMmEzMmM5ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-31T08:21:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-31T08:21:59Z"}, "message": "Auto merge of #38667 - alexcrichton:stage0-tools, r=brson\n\nrustbuild: Compile all support tools in stage0\n\nThis commit changes all tools and such to get compiled in stage0, not in\nlater stages. The purpose of this commit is to cut down dependencies on later\nstages for future modifications to the build system. Notably we're going to be\nadding builders that produce a full suite of cross-compiled artifacts for a\nparticular host, and that shouldn't compile the `x86_64-unknown-linux-gnu`\ncompiler more than once. Currently dependencies on, for example, the error index\nend up compiling the `x86_64-unknown-linux-gnu` compiler more than necessary.\n\nAs a result here we move many dependencies on these tools to being produced by a\nstage0 compiler, not a stage1+ compiler. None of these tools actually need to be\nstaged at all, so they'll exhibit consistent behavior across the stages.", "tree": {"sha": "79fa6b1a1aba620834bb0a3831298fcb42838bb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79fa6b1a1aba620834bb0a3831298fcb42838bb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f29a9a2192b0c1345f6de1d2712e56432a32c9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f29a9a2192b0c1345f6de1d2712e56432a32c9f5", "html_url": "https://github.com/rust-lang/rust/commit/f29a9a2192b0c1345f6de1d2712e56432a32c9f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c547a021ec760a832a9a8746252cca15b53fff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c547a021ec760a832a9a8746252cca15b53fff5", "html_url": "https://github.com/rust-lang/rust/commit/8c547a021ec760a832a9a8746252cca15b53fff5"}, {"sha": "254876ee73addc736eac3c6dca287a8be83eb3ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/254876ee73addc736eac3c6dca287a8be83eb3ef", "html_url": "https://github.com/rust-lang/rust/commit/254876ee73addc736eac3c6dca287a8be83eb3ef"}], "stats": {"total": 103, "additions": 63, "deletions": 40}, "files": [{"sha": "20ee2e1fcf387825132ec987352188a88129dc5b", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=f29a9a2192b0c1345f6de1d2712e56432a32c9f5", "patch": "@@ -89,7 +89,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serialize 0.0.0\",\n+ \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]"}, {"sha": "90fd31ecbdd732d963b4ccfce6b8478418a32292", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=f29a9a2192b0c1345f6de1d2712e56432a32c9f5", "patch": "@@ -89,7 +89,9 @@ fn main() {\n         // When we build Rust dylibs they're all intended for intermediate\n         // usage, so make sure we pass the -Cprefer-dynamic flag instead of\n         // linking all deps statically into the dylib.\n-        cmd.arg(\"-Cprefer-dynamic\");\n+        if env::var_os(\"RUSTC_NO_PREFER_DYNAMIC\").is_none() {\n+            cmd.arg(\"-Cprefer-dynamic\");\n+        }\n \n         // Help the libc crate compile by assisting it in finding the MUSL\n         // native libraries."}, {"sha": "a032f57a416776b379d384a521a4bd13c0814671", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=f29a9a2192b0c1345f6de1d2712e56432a32c9f5", "patch": "@@ -62,9 +62,9 @@ impl fmt::Display for TestKind {\n ///\n /// This tool in `src/tools` will verify the validity of all our links in the\n /// documentation to ensure we don't have a bunch of dead ones.\n-pub fn linkcheck(build: &Build, stage: u32, host: &str) {\n-    println!(\"Linkcheck stage{} ({})\", stage, host);\n-    let compiler = Compiler::new(stage, host);\n+pub fn linkcheck(build: &Build, host: &str) {\n+    println!(\"Linkcheck ({})\", host);\n+    let compiler = Compiler::new(0, host);\n \n     let _time = util::timeit();\n     build.run(build.tool_cmd(&compiler, \"linkchecker\")\n@@ -93,20 +93,21 @@ pub fn cargotest(build: &Build, stage: u32, host: &str) {\n     t!(fs::create_dir_all(&out_dir));\n \n     let _time = util::timeit();\n-    build.run(build.tool_cmd(compiler, \"cargotest\")\n-                   .env(\"PATH\", newpath)\n-                   .arg(&build.cargo)\n-                   .arg(&out_dir));\n+    let mut cmd = Command::new(build.tool(&Compiler::new(0, host), \"cargotest\"));\n+    build.prepare_tool_cmd(compiler, &mut cmd);\n+    build.run(cmd.env(\"PATH\", newpath)\n+                 .arg(&build.cargo)\n+                 .arg(&out_dir));\n }\n \n /// Runs the `tidy` tool as compiled in `stage` by the `host` compiler.\n ///\n /// This tool in `src/tools` checks up on various bits and pieces of style and\n /// otherwise just implements a few lint-like checks that are specific to the\n /// compiler itself.\n-pub fn tidy(build: &Build, stage: u32, host: &str) {\n-    println!(\"tidy check stage{} ({})\", stage, host);\n-    let compiler = Compiler::new(stage, host);\n+pub fn tidy(build: &Build, host: &str) {\n+    println!(\"tidy check ({})\", host);\n+    let compiler = Compiler::new(0, host);\n     build.run(build.tool_cmd(&compiler, \"tidy\")\n                    .arg(build.src.join(\"src\")));\n }\n@@ -127,7 +128,9 @@ pub fn compiletest(build: &Build,\n                    suite: &str) {\n     println!(\"Check compiletest suite={} mode={} ({} -> {})\",\n              suite, mode, compiler.host, target);\n-    let mut cmd = build.tool_cmd(compiler, \"compiletest\");\n+    let mut cmd = Command::new(build.tool(&Compiler::new(0, compiler.host),\n+                                          \"compiletest\"));\n+    build.prepare_tool_cmd(compiler, &mut cmd);\n \n     // compiletest currently has... a lot of arguments, so let's just pass all\n     // of them!\n@@ -287,7 +290,8 @@ pub fn error_index(build: &Build, compiler: &Compiler) {\n     let output = dir.join(\"error-index.md\");\n \n     let _time = util::timeit();\n-    build.run(build.tool_cmd(compiler, \"error_index_generator\")\n+    build.run(build.tool_cmd(&Compiler::new(0, compiler.host),\n+                             \"error_index_generator\")\n                    .arg(\"markdown\")\n                    .arg(&output)\n                    .env(\"CFG_BUILD\", &build.config.build));"}, {"sha": "a7633998aad8bc484235233c2d11d94e24958751", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f29a9a2192b0c1345f6de1d2712e56432a32c9f5", "patch": "@@ -379,6 +379,11 @@ pub fn tool(build: &Build, stage: u32, host: &str, tool: &str) {\n     let mut cargo = build.cargo(&compiler, Mode::Tool, host, \"build\");\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(format!(\"src/tools/{}/Cargo.toml\", tool)));\n+\n+    // We don't want to build tools dynamically as they'll be running across\n+    // stages and such and it's just easier if they're not dynamically linked.\n+    cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n+\n     build.run(&mut cargo);\n }\n "}, {"sha": "bbbf5cba8a1ab23782d87347abb702f48683f07a", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=f29a9a2192b0c1345f6de1d2712e56432a32c9f5", "patch": "@@ -29,19 +29,19 @@ use util::{up_to_date, cp_r};\n ///\n /// This will not actually generate any documentation if the documentation has\n /// already been generated.\n-pub fn rustbook(build: &Build, stage: u32, target: &str, name: &str) {\n+pub fn rustbook(build: &Build, target: &str, name: &str) {\n     let out = build.doc_out(target);\n     t!(fs::create_dir_all(&out));\n \n     let out = out.join(name);\n-    let compiler = Compiler::new(stage, &build.config.build);\n+    let compiler = Compiler::new(0, &build.config.build);\n     let src = build.src.join(\"src/doc\").join(name);\n     let index = out.join(\"index.html\");\n     let rustbook = build.tool(&compiler, \"rustbook\");\n     if up_to_date(&src, &index) && up_to_date(&rustbook, &index) {\n         return\n     }\n-    println!(\"Rustbook stage{} ({}) - {}\", stage, target, name);\n+    println!(\"Rustbook ({}) - {}\", target, name);\n     let _ = fs::remove_dir_all(&out);\n     build.run(build.tool_cmd(&compiler, \"rustbook\")\n                    .arg(\"build\")\n@@ -214,11 +214,11 @@ pub fn rustc(build: &Build, stage: u32, target: &str) {\n \n /// Generates the HTML rendered error-index by running the\n /// `error_index_generator` tool.\n-pub fn error_index(build: &Build, stage: u32, target: &str) {\n-    println!(\"Documenting stage{} error index ({})\", stage, target);\n+pub fn error_index(build: &Build, target: &str) {\n+    println!(\"Documenting error index ({})\", target);\n     let out = build.doc_out(target);\n     t!(fs::create_dir_all(&out));\n-    let compiler = Compiler::new(stage, &build.config.build);\n+    let compiler = Compiler::new(0, &build.config.build);\n     let mut index = build.tool_cmd(&compiler, \"error_index_generator\");\n     index.arg(\"html\");\n     index.arg(out.join(\"error-index.html\"));"}, {"sha": "a65511efeb053a7098e74bd97caf3f7642489605", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=f29a9a2192b0c1345f6de1d2712e56432a32c9f5", "patch": "@@ -570,6 +570,15 @@ impl Build {\n     /// `host`.\n     fn tool_cmd(&self, compiler: &Compiler, tool: &str) -> Command {\n         let mut cmd = Command::new(self.tool(&compiler, tool));\n+        self.prepare_tool_cmd(compiler, &mut cmd);\n+        return cmd\n+    }\n+\n+    /// Prepares the `cmd` provided to be able to run the `compiler` provided.\n+    ///\n+    /// Notably this munges the dynamic library lookup path to point to the\n+    /// right location to run `compiler`.\n+    fn prepare_tool_cmd(&self, compiler: &Compiler, cmd: &mut Command) {\n         let host = compiler.host;\n         let mut paths = vec![\n             self.sysroot_libdir(compiler, compiler.host),\n@@ -593,8 +602,7 @@ impl Build {\n                 }\n             }\n         }\n-        add_lib_path(paths, &mut cmd);\n-        return cmd\n+        add_lib_path(paths, cmd);\n     }\n \n     /// Get the space-separated set of activated features for the standard"}, {"sha": "d6f6a7772c9d98fee667753b77a486d8a8473d78", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=f29a9a2192b0c1345f6de1d2712e56432a32c9f5", "patch": "@@ -69,7 +69,7 @@ distcheck:\n install:\n \t$(Q)$(BOOTSTRAP) dist --install $(BOOTSTRAP_ARGS)\n tidy:\n-\t$(Q)$(BOOTSTRAP) test src/tools/tidy $(BOOTSTRAP_ARGS) --stage 0\n+\t$(Q)$(BOOTSTRAP) test src/tools/tidy $(BOOTSTRAP_ARGS)\n \n check-stage2-T-arm-linux-androideabi-H-x86_64-unknown-linux-gnu:\n \t$(Q)$(BOOTSTRAP) test --target arm-linux-androideabi"}, {"sha": "9e9ba369e0933416f876fe7fb70d38c27cffaeb7", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=f29a9a2192b0c1345f6de1d2712e56432a32c9f5", "patch": "@@ -293,7 +293,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n         let mut suite = |name, path, mode, dir| {\n             rules.test(name, path)\n                  .dep(|s| s.name(\"libtest\"))\n-                 .dep(|s| s.name(\"tool-compiletest\").target(s.host))\n+                 .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n                  .dep(|s| s.name(\"test-helpers\"))\n                  .dep(|s| s.name(\"android-copy-libs\"))\n                  .default(mode != \"pretty\") // pretty tests don't run everywhere\n@@ -325,7 +325,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n         rules.test(\"check-debuginfo\", \"src/test/debuginfo\")\n              .default(true)\n              .dep(|s| s.name(\"libtest\"))\n-             .dep(|s| s.name(\"tool-compiletest\").target(s.host))\n+             .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n              .dep(|s| s.name(\"test-helpers\"))\n              .dep(|s| s.name(\"debugger-scripts\"))\n              .run(move |s| check::compiletest(build, &s.compiler(), s.target,\n@@ -334,7 +334,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n         rules.test(\"check-debuginfo\", \"src/test/debuginfo\")\n              .default(true)\n              .dep(|s| s.name(\"libtest\"))\n-             .dep(|s| s.name(\"tool-compiletest\").target(s.host))\n+             .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n              .dep(|s| s.name(\"test-helpers\"))\n              .dep(|s| s.name(\"debugger-scripts\"))\n              .dep(|s| s.name(\"android-copy-libs\"))\n@@ -351,7 +351,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n             rules.test(name, path)\n                  .dep(|s| s.name(\"librustc\"))\n                  .dep(|s| s.name(\"test-helpers\"))\n-                 .dep(|s| s.name(\"tool-compiletest\").target(s.host))\n+                 .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n                  .default(mode != \"pretty\")\n                  .host(true)\n                  .run(move |s| {\n@@ -441,24 +441,24 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                                     Mode::Librustc, TestKind::Test, None));\n \n     rules.test(\"check-linkchecker\", \"src/tools/linkchecker\")\n-         .dep(|s| s.name(\"tool-linkchecker\"))\n+         .dep(|s| s.name(\"tool-linkchecker\").stage(0))\n          .dep(|s| s.name(\"default:doc\"))\n          .default(true)\n          .host(true)\n-         .run(move |s| check::linkcheck(build, s.stage, s.target));\n+         .run(move |s| check::linkcheck(build, s.target));\n     rules.test(\"check-cargotest\", \"src/tools/cargotest\")\n-         .dep(|s| s.name(\"tool-cargotest\"))\n+         .dep(|s| s.name(\"tool-cargotest\").stage(0))\n          .dep(|s| s.name(\"librustc\"))\n          .host(true)\n          .run(move |s| check::cargotest(build, s.stage, s.target));\n     rules.test(\"check-tidy\", \"src/tools/tidy\")\n          .dep(|s| s.name(\"tool-tidy\").stage(0))\n          .default(true)\n          .host(true)\n-         .run(move |s| check::tidy(build, 0, s.target));\n+         .run(move |s| check::tidy(build, s.target));\n     rules.test(\"check-error-index\", \"src/tools/error_index_generator\")\n          .dep(|s| s.name(\"libstd\"))\n-         .dep(|s| s.name(\"tool-error-index\").host(s.host))\n+         .dep(|s| s.name(\"tool-error-index\").host(s.host).stage(0))\n          .default(true)\n          .host(true)\n          .run(move |s| check::error_index(build, &s.compiler()));\n@@ -504,23 +504,23 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     // ========================================================================\n     // Documentation targets\n     rules.doc(\"doc-book\", \"src/doc/book\")\n-         .dep(move |s| s.name(\"tool-rustbook\").target(&build.config.build))\n+         .dep(move |s| s.name(\"tool-rustbook\").target(&build.config.build).stage(0))\n          .default(build.config.docs)\n-         .run(move |s| doc::rustbook(build, s.stage, s.target, \"book\"));\n+         .run(move |s| doc::rustbook(build, s.target, \"book\"));\n     rules.doc(\"doc-nomicon\", \"src/doc/nomicon\")\n-         .dep(move |s| s.name(\"tool-rustbook\").target(&build.config.build))\n+         .dep(move |s| s.name(\"tool-rustbook\").target(&build.config.build).stage(0))\n          .default(build.config.docs)\n-         .run(move |s| doc::rustbook(build, s.stage, s.target, \"nomicon\"));\n+         .run(move |s| doc::rustbook(build, s.target, \"nomicon\"));\n     rules.doc(\"doc-standalone\", \"src/doc\")\n          .dep(move |s| s.name(\"rustc\").host(&build.config.build).target(&build.config.build))\n          .default(build.config.docs)\n          .run(move |s| doc::standalone(build, s.stage, s.target));\n     rules.doc(\"doc-error-index\", \"src/tools/error_index_generator\")\n-         .dep(move |s| s.name(\"tool-error-index\").target(&build.config.build))\n-         .dep(move |s| s.name(\"librustc-link\"))\n+         .dep(move |s| s.name(\"tool-error-index\").target(&build.config.build).stage(0))\n+         .dep(move |s| s.name(\"librustc-link\").stage(0))\n          .default(build.config.docs)\n          .host(true)\n-         .run(move |s| doc::error_index(build, s.stage, s.target));\n+         .run(move |s| doc::error_index(build, s.target));\n     for (krate, path, default) in krates(\"std_shim\") {\n         rules.doc(&krate.doc_step, path)\n              .dep(|s| s.name(\"libstd-link\"))"}, {"sha": "2982f29f931c326087a89540866dc2e084a4819e", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=f29a9a2192b0c1345f6de1d2712e56432a32c9f5", "patch": "@@ -7,4 +7,4 @@ build = \"build.rs\"\n [dependencies]\n log = \"0.3\"\n env_logger = { version = \"0.3.5\", default-features = false }\n-serialize = { path = \"../../libserialize\" }\n+rustc-serialize = \"0.3\""}, {"sha": "f6c8393ac215432cdd83c3437a19331288d3b37f", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29a9a2192b0c1345f6de1d2712e56432a32c9f5/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=f29a9a2192b0c1345f6de1d2712e56432a32c9f5", "patch": "@@ -21,6 +21,10 @@\n extern crate libc;\n extern crate test;\n extern crate getopts;\n+\n+#[cfg(cargobuild)]\n+extern crate rustc_serialize;\n+#[cfg(not(cargobuild))]\n extern crate serialize as rustc_serialize;\n \n #[macro_use]"}]}