{"sha": "b867fe41defd95d839c96e2b746d1c7560fd338f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NjdmZTQxZGVmZDk1ZDgzOWM5NmUyYjc0NmQxYzc1NjBmZDMzOGY=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-27T21:42:19Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-27T22:41:58Z"}, "message": "libsyntax: Allow selecting intel style asm.", "tree": {"sha": "c033910b4fe02af2fbf765e1e6cfd959fcebc955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c033910b4fe02af2fbf765e1e6cfd959fcebc955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b867fe41defd95d839c96e2b746d1c7560fd338f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b867fe41defd95d839c96e2b746d1c7560fd338f", "html_url": "https://github.com/rust-lang/rust/commit/b867fe41defd95d839c96e2b746d1c7560fd338f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b867fe41defd95d839c96e2b746d1c7560fd338f/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "203d691a6bf6795f3d1f77378696a4506dd550f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/203d691a6bf6795f3d1f77378696a4506dd550f2", "html_url": "https://github.com/rust-lang/rust/commit/203d691a6bf6795f3d1f77378696a4506dd550f2"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "5ad7299e1e54f48b552379bae760d95ae3e9a2af", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b867fe41defd95d839c96e2b746d1c7560fd338f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b867fe41defd95d839c96e2b746d1c7560fd338f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=b867fe41defd95d839c96e2b746d1c7560fd338f", "patch": "@@ -104,10 +104,15 @@ pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n         T_struct(outputs.map(|o| val_ty(*o)))\n     };\n \n+    let dialect = match ia.dialect {\n+        ast::asm_att   => lib::llvm::AD_ATT,\n+        ast::asm_intel => lib::llvm::AD_Intel\n+    };\n+\n     let r = do str::as_c_str(*ia.asm) |a| {\n         do str::as_c_str(constraints) |c| {\n             // XXX: Allow selection of at&t or intel\n-            InlineAsmCall(bcx, a, c, inputs, output, ia.volatile, ia.alignstack, lib::llvm::AD_ATT)\n+            InlineAsmCall(bcx, a, c, inputs, output, ia.volatile, ia.alignstack, dialect)\n         }\n     };\n "}, {"sha": "c70288902a398afdebee853850503083788d11c9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b867fe41defd95d839c96e2b746d1c7560fd338f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b867fe41defd95d839c96e2b746d1c7560fd338f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b867fe41defd95d839c96e2b746d1c7560fd338f", "patch": "@@ -934,6 +934,14 @@ impl to_bytes::IterBytes for Ty {\n     }\n }\n \n+#[auto_encode]\n+#[auto_decode]\n+#[deriving(Eq)]\n+pub enum asm_dialect {\n+    asm_att,\n+    asm_intel\n+}\n+\n #[auto_encode]\n #[auto_decode]\n #[deriving(Eq)]\n@@ -943,7 +951,8 @@ pub struct inline_asm {\n     inputs: ~[(@~str, @expr)],\n     outputs: ~[(@~str, @expr)],\n     volatile: bool,\n-    alignstack: bool\n+    alignstack: bool,\n+    dialect: asm_dialect\n }\n \n #[auto_encode]"}, {"sha": "b070948d4059fb63ff3dd901cee6e0263fff2b0c", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b867fe41defd95d839c96e2b746d1c7560fd338f/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b867fe41defd95d839c96e2b746d1c7560fd338f/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=b867fe41defd95d839c96e2b746d1c7560fd338f", "patch": "@@ -53,6 +53,7 @@ pub fn expand_asm(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n     let mut cons = ~\"\";\n     let mut volatile = false;\n     let mut alignstack = false;\n+    let mut dialect = ast::asm_att;\n \n     let mut state = Asm;\n     loop outer: {\n@@ -125,6 +126,8 @@ pub fn expand_asm(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n                     volatile = true;\n                 } else if option == ~\"alignstack\" {\n                     alignstack = true;\n+                } else if option == ~\"intel\" {\n+                    dialect = ast::asm_intel;\n                 }\n \n                 if *p.token == token::COMMA {\n@@ -169,7 +172,8 @@ pub fn expand_asm(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n             inputs: inputs,\n             outputs: outputs,\n             volatile: volatile,\n-            alignstack: alignstack\n+            alignstack: alignstack,\n+            dialect: dialect\n         }),\n         span: sp\n     })"}, {"sha": "e54c495323f4ef5c4c8d19fc788bfc98e9ee20ab", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b867fe41defd95d839c96e2b746d1c7560fd338f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b867fe41defd95d839c96e2b746d1c7560fd338f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=b867fe41defd95d839c96e2b746d1c7560fd338f", "patch": "@@ -561,12 +561,9 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n         }\n         expr_inline_asm(a) => {\n             expr_inline_asm(inline_asm {\n-                asm: a.asm,\n-                clobbers: a.clobbers,\n                 inputs: a.inputs.map(|&(c, in)| (c, fld.fold_expr(in))),\n                 outputs: a.outputs.map(|&(c, out)| (c, fld.fold_expr(out))),\n-                volatile: a.volatile,\n-                alignstack: a.alignstack\n+                .. a\n             })\n         }\n         expr_mac(ref mac) => expr_mac(fold_mac((*mac))),"}]}