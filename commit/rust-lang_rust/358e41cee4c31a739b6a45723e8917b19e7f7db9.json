{"sha": "358e41cee4c31a739b6a45723e8917b19e7f7db9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1OGU0MWNlZTRjMzFhNzM5YjZhNDU3MjNlODkxN2IxOWU3ZjdkYjk=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2016-03-02T20:02:12Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2016-04-08T22:41:23Z"}, "message": "Introduce the `init_llvm` function\n\nExtract the code that performs the initialization of the LLVM backend\nand invoke it before computing the available features. The\ninitialization is required to happen before the features are added to\nthe configuration, because they are computed by LLVM, therefore is is\nnow performed when creating the `Session` object.", "tree": {"sha": "de2221232cdd965e81e1bbea3a327234bfc75a28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de2221232cdd965e81e1bbea3a327234bfc75a28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/358e41cee4c31a739b6a45723e8917b19e7f7db9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/358e41cee4c31a739b6a45723e8917b19e7f7db9", "html_url": "https://github.com/rust-lang/rust/commit/358e41cee4c31a739b6a45723e8917b19e7f7db9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/358e41cee4c31a739b6a45723e8917b19e7f7db9/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92e24b95167897881377d43ce3ee6aa7ba2685a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/92e24b95167897881377d43ce3ee6aa7ba2685a4", "html_url": "https://github.com/rust-lang/rust/commit/92e24b95167897881377d43ce3ee6aa7ba2685a4"}], "stats": {"total": 109, "additions": 58, "deletions": 51}, "files": [{"sha": "dfde3ded46d17ed58032ba159ffd755f03e453ec", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/358e41cee4c31a739b6a45723e8917b19e7f7db9/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/358e41cee4c31a739b6a45723e8917b19e7f7db9/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=358e41cee4c31a739b6a45723e8917b19e7f7db9", "patch": "@@ -30,13 +30,16 @@ use syntax::{ast, codemap};\n use syntax::feature_gate::AttributeType;\n \n use rustc_back::target::Target;\n+use llvm;\n \n use std::path::{Path, PathBuf};\n use std::cell::{Cell, RefCell};\n use std::collections::{HashMap, HashSet};\n use std::env;\n+use std::ffi::CString;\n use std::rc::Rc;\n use std::fmt;\n+use libc::c_int;\n \n pub mod config;\n pub mod filesearch;\n@@ -491,9 +494,63 @@ pub fn build_session_(sopts: config::Options,\n         imported_macro_spans: RefCell::new(HashMap::new()),\n     };\n \n+    init_llvm(&sess);\n+\n     sess\n }\n \n+fn init_llvm(sess: &Session) {\n+    unsafe {\n+        // Before we touch LLVM, make sure that multithreading is enabled.\n+        use std::sync::Once;\n+        static INIT: Once = Once::new();\n+        static mut POISONED: bool = false;\n+        INIT.call_once(|| {\n+            if llvm::LLVMStartMultithreaded() != 1 {\n+                // use an extra bool to make sure that all future usage of LLVM\n+                // cannot proceed despite the Once not running more than once.\n+                POISONED = true;\n+            }\n+\n+            configure_llvm(sess);\n+        });\n+\n+        if POISONED {\n+            bug!(\"couldn't enable multi-threaded LLVM\");\n+        }\n+    }\n+}\n+\n+unsafe fn configure_llvm(sess: &Session) {\n+    let mut llvm_c_strs = Vec::new();\n+    let mut llvm_args = Vec::new();\n+\n+    {\n+        let mut add = |arg: &str| {\n+            let s = CString::new(arg).unwrap();\n+            llvm_args.push(s.as_ptr());\n+            llvm_c_strs.push(s);\n+        };\n+        add(\"rustc\"); // fake program name\n+        if sess.time_llvm_passes() { add(\"-time-passes\"); }\n+        if sess.print_llvm_passes() { add(\"-debug-pass=Structure\"); }\n+\n+        // FIXME #21627 disable faulty FastISel on AArch64 (even for -O0)\n+        if sess.target.target.arch == \"aarch64\" { add(\"-fast-isel=0\"); }\n+\n+        for arg in &sess.opts.cg.llvm_args {\n+            add(&(*arg));\n+        }\n+    }\n+\n+    llvm::LLVMInitializePasses();\n+\n+    llvm::initialize_available_targets();\n+\n+    llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int,\n+                                 llvm_args.as_ptr());\n+}\n+\n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     let mut emitter: Box<Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {"}, {"sha": "8a915f044053a440138b70a16f3da605dc10de14", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/358e41cee4c31a739b6a45723e8917b19e7f7db9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/358e41cee4c31a739b6a45723e8917b19e7f7db9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=358e41cee4c31a739b6a45723e8917b19e7f7db9", "patch": "@@ -31,7 +31,7 @@ use std::str;\n use std::sync::{Arc, Mutex};\n use std::sync::mpsc::channel;\n use std::thread;\n-use libc::{c_uint, c_int, c_void};\n+use libc::{c_uint, c_void};\n \n pub fn llvm_err(handler: &errors::Handler, msg: String) -> ! {\n     match llvm::last_error() {\n@@ -984,36 +984,6 @@ pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) {\n     }\n }\n \n-pub unsafe fn configure_llvm(sess: &Session) {\n-    let mut llvm_c_strs = Vec::new();\n-    let mut llvm_args = Vec::new();\n-\n-    {\n-        let mut add = |arg: &str| {\n-            let s = CString::new(arg).unwrap();\n-            llvm_args.push(s.as_ptr());\n-            llvm_c_strs.push(s);\n-        };\n-        add(\"rustc\"); // fake program name\n-        if sess.time_llvm_passes() { add(\"-time-passes\"); }\n-        if sess.print_llvm_passes() { add(\"-debug-pass=Structure\"); }\n-\n-        // FIXME #21627 disable faulty FastISel on AArch64 (even for -O0)\n-        if sess.target.target.arch == \"aarch64\" { add(\"-fast-isel=0\"); }\n-\n-        for arg in &sess.opts.cg.llvm_args {\n-            add(&(*arg));\n-        }\n-    }\n-\n-    llvm::LLVMInitializePasses();\n-\n-    llvm::initialize_available_targets();\n-\n-    llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int,\n-                                 llvm_args.as_ptr());\n-}\n-\n pub unsafe fn with_llvm_pmb(llmod: ModuleRef,\n                             config: &ModuleConfig,\n                             f: &mut FnMut(llvm::PassManagerBuilderRef)) {"}, {"sha": "6304a0eacd3b562aca7e6a7198f3dbbb272d6643", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/358e41cee4c31a739b6a45723e8917b19e7f7db9/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/358e41cee4c31a739b6a45723e8917b19e7f7db9/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=358e41cee4c31a739b6a45723e8917b19e7f7db9", "patch": "@@ -2709,26 +2709,6 @@ pub fn trans_crate<'tcx>(tcx: &TyCtxt<'tcx>,\n         tcx.sess.opts.debug_assertions\n     };\n \n-    // Before we touch LLVM, make sure that multithreading is enabled.\n-    unsafe {\n-        use std::sync::Once;\n-        static INIT: Once = Once::new();\n-        static mut POISONED: bool = false;\n-        INIT.call_once(|| {\n-            if llvm::LLVMStartMultithreaded() != 1 {\n-                // use an extra bool to make sure that all future usage of LLVM\n-                // cannot proceed despite the Once not running more than once.\n-                POISONED = true;\n-            }\n-\n-            ::back::write::configure_llvm(&tcx.sess);\n-        });\n-\n-        if POISONED {\n-            bug!(\"couldn't enable multi-threaded LLVM\");\n-        }\n-    }\n-\n     let link_meta = link::build_link_meta(&tcx, name);\n \n     let codegen_units = tcx.sess.opts.cg.codegen_units;"}]}