{"sha": "7ad15c396286376c4a439b2dec4ec452b5f28dda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZDE1YzM5NjI4NjM3NmM0YTQzOWIyZGVjNGVjNDUyYjVmMjhkZGE=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-13T20:48:20Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-13T20:48:20Z"}, "message": "vscode: redesigned config with simplicity and Dart extension config implementation in mind", "tree": {"sha": "d840788902ed29a561851c6e2ce02b26a14dc559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d840788902ed29a561851c6e2ce02b26a14dc559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ad15c396286376c4a439b2dec4ec452b5f28dda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad15c396286376c4a439b2dec4ec452b5f28dda", "html_url": "https://github.com/rust-lang/rust/commit/7ad15c396286376c4a439b2dec4ec452b5f28dda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ad15c396286376c4a439b2dec4ec452b5f28dda/comments", "author": null, "committer": null, "parents": [{"sha": "9b47124e6e5d32a676961c05661934215e98012c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b47124e6e5d32a676961c05661934215e98012c", "html_url": "https://github.com/rust-lang/rust/commit/9b47124e6e5d32a676961c05661934215e98012c"}], "stats": {"total": 312, "additions": 96, "deletions": 216}, "files": [{"sha": "a6fb04536964ab6415d9e31428759ba8baaa2784", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7ad15c396286376c4a439b2dec4ec452b5f28dda/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7ad15c396286376c4a439b2dec4ec452b5f28dda/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=7ad15c396286376c4a439b2dec4ec452b5f28dda", "patch": "@@ -1,44 +1,46 @@\n import * as lc from 'vscode-languageclient';\n+import * as vscode from 'vscode';\n \n-import { window, workspace } from 'vscode';\n import { Config } from './config';\n import { ensureLanguageServerBinary } from './installation/language_server';\n \n export async function createClient(config: Config): Promise<null | lc.LanguageClient> {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file.\n-    const workspaceFolderPath = workspace.workspaceFolders?.[0]?.uri.fsPath ?? '.';\n+    const workspaceFolderPath = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath ?? '.';\n \n-    const raLspServerPath = await ensureLanguageServerBinary(config.langServerSource);\n-    if (!raLspServerPath) return null;\n+    const langServerPath = await ensureLanguageServerBinary(config.langServerBinarySource());\n+    if (!langServerPath) return null;\n \n     const run: lc.Executable = {\n-        command: raLspServerPath,\n+        command: langServerPath,\n         options: { cwd: workspaceFolderPath },\n     };\n     const serverOptions: lc.ServerOptions = {\n         run,\n         debug: run,\n     };\n-    const traceOutputChannel = window.createOutputChannel(\n+    const traceOutputChannel = vscode.window.createOutputChannel(\n         'Rust Analyzer Language Server Trace',\n     );\n+    const cargoWatchOpts = config.cargoWatchOptions();\n+\n     const clientOptions: lc.LanguageClientOptions = {\n         documentSelector: [{ scheme: 'file', language: 'rust' }],\n         initializationOptions: {\n             publishDecorations: true,\n-            lruCapacity: config.lruCapacity,\n-            maxInlayHintLength: config.maxInlayHintLength,\n-            cargoWatchEnable: config.cargoWatchOptions.enable,\n-            cargoWatchArgs: config.cargoWatchOptions.arguments,\n-            cargoWatchCommand: config.cargoWatchOptions.command,\n-            cargoWatchAllTargets: config.cargoWatchOptions.allTargets,\n-            excludeGlobs: config.excludeGlobs,\n-            useClientWatching: config.useClientWatching,\n-            featureFlags: config.featureFlags,\n-            withSysroot: config.withSysroot,\n-            cargoFeatures: config.cargoFeatures,\n+            lruCapacity: config.lruCapacity(),\n+            maxInlayHintLength: config.maxInlayHintLength(),\n+            cargoWatchEnable: cargoWatchOpts.enable,\n+            cargoWatchArgs: cargoWatchOpts.arguments,\n+            cargoWatchCommand: cargoWatchOpts.command,\n+            cargoWatchAllTargets: cargoWatchOpts.allTargets,\n+            excludeGlobs: config.excludeGlobs(),\n+            useClientWatching: config.useClientWatching(),\n+            featureFlags: config.featureFlags(),\n+            withSysroot: config.withSysroot(),\n+            cargoFeatures: config.cargoFeatures(),\n         },\n         traceOutputChannel,\n     };"}, {"sha": "6c4742464c43a397aa94a95411b23c7a3e476870", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 68, "deletions": 190, "changes": 258, "blob_url": "https://github.com/rust-lang/rust/blob/7ad15c396286376c4a439b2dec4ec452b5f28dda/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7ad15c396286376c4a439b2dec4ec452b5f28dda/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=7ad15c396286376c4a439b2dec4ec452b5f28dda", "patch": "@@ -16,45 +16,48 @@ export interface CargoFeatures {\n     allFeatures: boolean;\n     features: string[];\n }\n-\n export class Config {\n-    langServerSource!: null | BinarySource;\n+    private static readonly rootSection = \"rust-analyzer\";\n+    private static readonly requiresReloadOpts = [\n+        \"cargoFeatures\",\n+        \"cargo-watch\",\n+    ]\n+    .map(opt => `${Config.rootSection}.${opt}`);\n+\n+    private cfg!: vscode.WorkspaceConfiguration;\n+\n+    private refreshConfig() {\n+        this.cfg = vscode.workspace.getConfiguration(Config.rootSection);\n+        console.log(\"Using configuration:\", this.cfg);\n+    }\n \n-    highlightingOn = true;\n-    rainbowHighlightingOn = false;\n-    enableEnhancedTyping = true;\n-    lruCapacity: null | number = null;\n-    displayInlayHints = true;\n-    maxInlayHintLength: null | number = null;\n-    excludeGlobs: string[] = [];\n-    useClientWatching = true;\n-    featureFlags: Record<string, boolean> = {};\n-    // for internal use\n-    withSysroot: null | boolean = null;\n-    cargoWatchOptions: CargoWatchOptions = {\n-        enable: true,\n-        arguments: [],\n-        command: '',\n-        allTargets: true,\n-    };\n-    cargoFeatures: CargoFeatures = {\n-        noDefaultFeatures: false,\n-        allFeatures: true,\n-        features: [],\n-    };\n+    constructor(private ctx: vscode.ExtensionContext) {\n+        vscode.workspace.onDidChangeConfiguration(this.onConfigChange, this, ctx.subscriptions);\n+        this.refreshConfig();\n+    }\n+\n+    async onConfigChange(event: vscode.ConfigurationChangeEvent) {\n+        this.refreshConfig();\n+\n+        const requiresReloadOpt = Config.requiresReloadOpts.find(\n+            opt => event.affectsConfiguration(opt)\n+        );\n \n-    private prevEnhancedTyping: null | boolean = null;\n-    private prevCargoFeatures: null | CargoFeatures = null;\n-    private prevCargoWatchOptions: null | CargoWatchOptions = null;\n+        if (!requiresReloadOpt) return;\n \n-    constructor(ctx: vscode.ExtensionContext) {\n-        vscode.workspace.onDidChangeConfiguration(_ => this.refresh(ctx), null, ctx.subscriptions);\n-        this.refresh(ctx);\n+        const userResponse = await vscode.window.showInformationMessage(\n+            `Changing \"${requiresReloadOpt}\" requires a reload`,\n+            \"Reload now\"\n+        );\n+\n+        if (userResponse === \"Reload now\") {\n+            vscode.commands.executeCommand(\"workbench.action.reloadWindow\");\n+        }\n     }\n \n-    private static expandPathResolving(path: string) {\n-        if (path.startsWith('~/')) {\n-            return path.replace('~', os.homedir());\n+    private static replaceTildeWithHomeDir(path: string) {\n+        if (path.startsWith(\"~/\")) {\n+            return os.homedir() + path.slice(\"~\".length);\n         }\n         return path;\n     }\n@@ -97,16 +100,13 @@ export class Config {\n         }\n     }\n \n-    private static langServerBinarySource(\n-        ctx: vscode.ExtensionContext,\n-        config: vscode.WorkspaceConfiguration\n-    ): null | BinarySource {\n-        const langServerPath = RA_LSP_DEBUG ?? config.get<null | string>(\"raLspServerPath\");\n+    langServerBinarySource(): null | BinarySource {\n+        const langServerPath = RA_LSP_DEBUG ?? this.cfg.get<null | string>(\"raLspServerPath\");\n \n         if (langServerPath) {\n             return {\n                 type: BinarySource.Type.ExplicitPath,\n-                path: Config.expandPathResolving(langServerPath)\n+                path: Config.replaceTildeWithHomeDir(langServerPath)\n             };\n         }\n \n@@ -118,7 +118,7 @@ export class Config {\n \n         return {\n             type: BinarySource.Type.GithubRelease,\n-            dir: ctx.globalStoragePath,\n+            dir:  this.ctx.globalStoragePath,\n             file: prebuiltBinaryName,\n             repo: {\n                 name: \"rust-analyzer\",\n@@ -127,158 +127,36 @@ export class Config {\n         };\n     }\n \n+    // We don't do runtime config validation here for simplicity. More on stackoverflow:\n+    // https://stackoverflow.com/questions/60135780/what-is-the-best-way-to-type-check-the-configuration-for-vscode-extension\n \n-    // FIXME: revisit the logic for `if (.has(...)) config.get(...)` set default\n-    // values only in one place (i.e. remove default values from non-readonly members declarations)\n-    private refresh(ctx: vscode.ExtensionContext) {\n-        const config = vscode.workspace.getConfiguration('rust-analyzer');\n-\n-        let requireReloadMessage = null;\n-\n-        if (config.has('highlightingOn')) {\n-            this.highlightingOn = config.get('highlightingOn') as boolean;\n-        }\n-\n-        if (config.has('rainbowHighlightingOn')) {\n-            this.rainbowHighlightingOn = config.get(\n-                'rainbowHighlightingOn',\n-            ) as boolean;\n-        }\n-\n-        if (config.has('enableEnhancedTyping')) {\n-            this.enableEnhancedTyping = config.get(\n-                'enableEnhancedTyping',\n-            ) as boolean;\n-\n-            if (this.prevEnhancedTyping === null) {\n-                this.prevEnhancedTyping = this.enableEnhancedTyping;\n-            }\n-        } else if (this.prevEnhancedTyping === null) {\n-            this.prevEnhancedTyping = this.enableEnhancedTyping;\n-        }\n-\n-        if (this.prevEnhancedTyping !== this.enableEnhancedTyping) {\n-            requireReloadMessage =\n-                'Changing enhanced typing setting requires a reload';\n-            this.prevEnhancedTyping = this.enableEnhancedTyping;\n-        }\n-\n-        this.langServerSource = Config.langServerBinarySource(ctx, config);\n-\n-        if (config.has('cargo-watch.enable')) {\n-            this.cargoWatchOptions.enable = config.get<boolean>(\n-                'cargo-watch.enable',\n-                true,\n-            );\n-        }\n-\n-        if (config.has('cargo-watch.arguments')) {\n-            this.cargoWatchOptions.arguments = config.get<string[]>(\n-                'cargo-watch.arguments',\n-                [],\n-            );\n-        }\n-\n-        if (config.has('cargo-watch.command')) {\n-            this.cargoWatchOptions.command = config.get<string>(\n-                'cargo-watch.command',\n-                '',\n-            );\n-        }\n+    // FIXME: add codegen for primitive configurations\n+    highlightingOn()        { return this.cfg.get(\"highlightingOn\") as boolean; }\n+    rainbowHighlightingOn() { return this.cfg.get(\"rainbowHighlightingOn\") as boolean; }\n+    lruCapacity()           { return this.cfg.get(\"lruCapacity\") as null | number; }\n+    displayInlayHints()     { return this.cfg.get(\"displayInlayHints\") as boolean; }\n+    maxInlayHintLength()    { return this.cfg.get(\"maxInlayHintLength\") as number; }\n+    excludeGlobs()          { return this.cfg.get(\"excludeGlobs\") as string[]; }\n+    useClientWatching()     { return this.cfg.get(\"useClientWatching\") as boolean; }\n+    featureFlags()          { return this.cfg.get(\"featureFlags\") as Record<string, boolean>; }\n \n-        if (config.has('cargo-watch.allTargets')) {\n-            this.cargoWatchOptions.allTargets = config.get<boolean>(\n-                'cargo-watch.allTargets',\n-                true,\n-            );\n-        }\n-\n-        if (config.has('lruCapacity')) {\n-            this.lruCapacity = config.get('lruCapacity') as number;\n-        }\n-\n-        if (config.has('displayInlayHints')) {\n-            this.displayInlayHints = config.get('displayInlayHints') as boolean;\n-        }\n-        if (config.has('maxInlayHintLength')) {\n-            this.maxInlayHintLength = config.get(\n-                'maxInlayHintLength',\n-            ) as number;\n-        }\n-        if (config.has('excludeGlobs')) {\n-            this.excludeGlobs = config.get('excludeGlobs') || [];\n-        }\n-        if (config.has('useClientWatching')) {\n-            this.useClientWatching = config.get('useClientWatching') || true;\n-        }\n-        if (config.has('featureFlags')) {\n-            this.featureFlags = config.get('featureFlags') || {};\n-        }\n-        if (config.has('withSysroot')) {\n-            this.withSysroot = config.get('withSysroot') || false;\n-        }\n-\n-        if (config.has('cargoFeatures.noDefaultFeatures')) {\n-            this.cargoFeatures.noDefaultFeatures = config.get(\n-                'cargoFeatures.noDefaultFeatures',\n-                false,\n-            );\n-        }\n-        if (config.has('cargoFeatures.allFeatures')) {\n-            this.cargoFeatures.allFeatures = config.get(\n-                'cargoFeatures.allFeatures',\n-                true,\n-            );\n-        }\n-        if (config.has('cargoFeatures.features')) {\n-            this.cargoFeatures.features = config.get(\n-                'cargoFeatures.features',\n-                [],\n-            );\n-        }\n-\n-        if (\n-            this.prevCargoFeatures !== null &&\n-            (this.cargoFeatures.allFeatures !==\n-                this.prevCargoFeatures.allFeatures ||\n-                this.cargoFeatures.noDefaultFeatures !==\n-                this.prevCargoFeatures.noDefaultFeatures ||\n-                this.cargoFeatures.features.length !==\n-                this.prevCargoFeatures.features.length ||\n-                this.cargoFeatures.features.some(\n-                    (v, i) => v !== this.prevCargoFeatures!.features[i],\n-                ))\n-        ) {\n-            requireReloadMessage = 'Changing cargo features requires a reload';\n-        }\n-        this.prevCargoFeatures = { ...this.cargoFeatures };\n-\n-        if (this.prevCargoWatchOptions !== null) {\n-            const changed =\n-                this.cargoWatchOptions.enable !== this.prevCargoWatchOptions.enable ||\n-                this.cargoWatchOptions.command !== this.prevCargoWatchOptions.command ||\n-                this.cargoWatchOptions.allTargets !== this.prevCargoWatchOptions.allTargets ||\n-                this.cargoWatchOptions.arguments.length !== this.prevCargoWatchOptions.arguments.length ||\n-                this.cargoWatchOptions.arguments.some(\n-                    (v, i) => v !== this.prevCargoWatchOptions!.arguments[i],\n-                );\n-            if (changed) {\n-                requireReloadMessage = 'Changing cargo-watch options requires a reload';\n-            }\n-        }\n-        this.prevCargoWatchOptions = { ...this.cargoWatchOptions };\n+    cargoWatchOptions(): CargoWatchOptions {\n+        return {\n+            enable:     this.cfg.get(\"cargo-watch.enable\") as boolean,\n+            arguments:  this.cfg.get(\"cargo-watch.arguments\") as string[],\n+            allTargets: this.cfg.get(\"cargo-watch.allTargets\") as boolean,\n+            command:    this.cfg.get(\"cargo-watch.command\") as string,\n+        };\n+    }\n \n-        if (requireReloadMessage !== null) {\n-            const reloadAction = 'Reload now';\n-            vscode.window\n-                .showInformationMessage(requireReloadMessage, reloadAction)\n-                .then(selectedAction => {\n-                    if (selectedAction === reloadAction) {\n-                        vscode.commands.executeCommand(\n-                            'workbench.action.reloadWindow',\n-                        );\n-                    }\n-                });\n-        }\n+    cargoFeatures(): CargoFeatures {\n+        return {\n+            noDefaultFeatures: this.cfg.get(\"cargoFeatures.noDefaultFeatures\") as boolean,\n+            allFeatures:       this.cfg.get(\"cargoFeatures.allFeatures\") as boolean,\n+            features:          this.cfg.get(\"cargoFeatures.features\") as string[],\n+        };\n     }\n+\n+    // for internal use\n+    withSysroot() { return this.cfg.get(\"withSysroot\", false); }\n }"}, {"sha": "e2ae31d2900043ce09b92120a92c25d2ffe1f69f", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ad15c396286376c4a439b2dec4ec452b5f28dda/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7ad15c396286376c4a439b2dec4ec452b5f28dda/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=7ad15c396286376c4a439b2dec4ec452b5f28dda", "patch": "@@ -11,7 +11,7 @@ export function activateHighlighting(ctx: Ctx) {\n         client.onNotification(\n             'rust-analyzer/publishDecorations',\n             (params: PublishDecorationsParams) => {\n-                if (!ctx.config.highlightingOn) return;\n+                if (!ctx.config.highlightingOn()) return;\n \n                 const targetEditor = vscode.window.visibleTextEditors.find(\n                     editor => {\n@@ -39,7 +39,7 @@ export function activateHighlighting(ctx: Ctx) {\n     vscode.window.onDidChangeActiveTextEditor(\n         async (editor: vscode.TextEditor | undefined) => {\n             if (!editor || editor.document.languageId !== 'rust') return;\n-            if (!ctx.config.highlightingOn) return;\n+            if (!ctx.config.highlightingOn()) return;\n             const client = ctx.client;\n             if (!client) return;\n \n@@ -122,7 +122,7 @@ class Highlighter {\n             string,\n             [vscode.Range[], boolean]\n         > = new Map();\n-        const rainbowTime = this.ctx.config.rainbowHighlightingOn;\n+        const rainbowTime = this.ctx.config.rainbowHighlightingOn();\n \n         for (const tag of this.decorations.keys()) {\n             byTag.set(tag, []);"}, {"sha": "3ff45a62570eb2fbe39ea6a49383756b068993bd", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ad15c396286376c4a439b2dec4ec452b5f28dda/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7ad15c396286376c4a439b2dec4ec452b5f28dda/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=7ad15c396286376c4a439b2dec4ec452b5f28dda", "patch": "@@ -22,12 +22,12 @@ export function activateInlayHints(ctx: Ctx) {\n     );\n \n     vscode.workspace.onDidChangeConfiguration(\n-        async _ => hintsUpdater.setEnabled(ctx.config.displayInlayHints),\n+        async _ => hintsUpdater.setEnabled(ctx.config.displayInlayHints()),\n         null,\n         ctx.subscriptions\n     );\n \n-    ctx.onDidRestart(_ => hintsUpdater.setEnabled(ctx.config.displayInlayHints));\n+    ctx.onDidRestart(_ => hintsUpdater.setEnabled(ctx.config.displayInlayHints()));\n }\n \n interface InlayHintsParams {\n@@ -59,7 +59,7 @@ class HintsUpdater {\n \n     constructor(ctx: Ctx) {\n         this.ctx = ctx;\n-        this.enabled = ctx.config.displayInlayHints;\n+        this.enabled = ctx.config.displayInlayHints();\n     }\n \n     async setEnabled(enabled: boolean) {"}, {"sha": "ae9a7b1b55ac90f259ce1e236b85ca4afd0fccd7", "filename": "editors/code/src/status_display.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ad15c396286376c4a439b2dec4ec452b5f28dda/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7ad15c396286376c4a439b2dec4ec452b5f28dda/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fstatus_display.ts?ref=7ad15c396286376c4a439b2dec4ec452b5f28dda", "patch": "@@ -7,7 +7,7 @@ import { Ctx } from './ctx';\n const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\u2807', '\u280f'];\n \n export function activateStatusDisplay(ctx: Ctx) {\n-    const statusDisplay = new StatusDisplay(ctx.config.cargoWatchOptions.command);\n+    const statusDisplay = new StatusDisplay(ctx.config.cargoWatchOptions().command);\n     ctx.pushCleanup(statusDisplay);\n     ctx.onDidRestart(client => ctx.pushCleanup(client.onProgress(\n         WorkDoneProgress.type,\n@@ -66,9 +66,9 @@ class StatusDisplay implements Disposable {\n \n     refreshLabel() {\n         if (this.packageName) {\n-            this.statusBarItem!.text = `${spinnerFrames[this.i]} cargo ${this.command} [${this.packageName}]`;\n+            this.statusBarItem.text = `${spinnerFrames[this.i]} cargo ${this.command} [${this.packageName}]`;\n         } else {\n-            this.statusBarItem!.text = `${spinnerFrames[this.i]} cargo ${this.command}`;\n+            this.statusBarItem.text = `${spinnerFrames[this.i]} cargo ${this.command}`;\n         }\n     }\n "}]}