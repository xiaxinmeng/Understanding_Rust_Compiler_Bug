{"sha": "227eab0b7f457def8553a60fdb0ef4a051f39957", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyN2VhYjBiN2Y0NTdkZWY4NTUzYTYwZmRiMGVmNGEwNTFmMzk5NTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-02-23T18:25:23Z"}, "committer": {"name": "Yamakaky", "email": "yamakaky@gmail.com", "date": "2017-02-23T18:25:23Z"}, "message": "Fix tests on Windows (#1)", "tree": {"sha": "589f8ea0204ecf3c1f924203f64be079c77318ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/589f8ea0204ecf3c1f924203f64be079c77318ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/227eab0b7f457def8553a60fdb0ef4a051f39957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/227eab0b7f457def8553a60fdb0ef4a051f39957", "html_url": "https://github.com/rust-lang/rust/commit/227eab0b7f457def8553a60fdb0ef4a051f39957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/227eab0b7f457def8553a60fdb0ef4a051f39957/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Yamakaky", "id": 1327378, "node_id": "MDQ6VXNlcjEzMjczNzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1327378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yamakaky", "html_url": "https://github.com/Yamakaky", "followers_url": "https://api.github.com/users/Yamakaky/followers", "following_url": "https://api.github.com/users/Yamakaky/following{/other_user}", "gists_url": "https://api.github.com/users/Yamakaky/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yamakaky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yamakaky/subscriptions", "organizations_url": "https://api.github.com/users/Yamakaky/orgs", "repos_url": "https://api.github.com/users/Yamakaky/repos", "events_url": "https://api.github.com/users/Yamakaky/events{/privacy}", "received_events_url": "https://api.github.com/users/Yamakaky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d50e4cc0640e54a64d0f7ccb05a77fd4a2fe0741", "url": "https://api.github.com/repos/rust-lang/rust/commits/d50e4cc0640e54a64d0f7ccb05a77fd4a2fe0741", "html_url": "https://github.com/rust-lang/rust/commit/d50e4cc0640e54a64d0f7ccb05a77fd4a2fe0741"}], "stats": {"total": 100, "additions": 58, "deletions": 42}, "files": [{"sha": "74a9893d4bd2a5b2f2ab4afe089d5111fd64c56f", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 56, "deletions": 40, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/227eab0b7f457def8553a60fdb0ef4a051f39957/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227eab0b7f457def8553a60fdb0ef4a051f39957/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=227eab0b7f457def8553a60fdb0ef4a051f39957", "patch": "@@ -71,7 +71,7 @@ fn _print(w: &mut Write, format: PrintFormat) -> io::Result<()> {\n     let (nb_frames, context) = unwind_backtrace(&mut frames)?;\n     let (skipped_before, skipped_after) =\n         filter_frames(&frames[..nb_frames], format, &context);\n-    if format == PrintFormat::Short {\n+    if skipped_before + skipped_after > 0 {\n         writeln!(w, \"note: Some details are omitted, \\\n                      run with `RUST_BACKTRACE=full` for a verbose backtrace.\")?;\n     }\n@@ -101,50 +101,66 @@ fn filter_frames(frames: &[Frame],\n         return (0, 0);\n     }\n \n-    let mut skipped_before = 0;\n-    for (i, frame) in frames.iter().enumerate() {\n-        skipped_before = i;\n-        let mut skip = false;\n-\n-        let _ = resolve_symname(*frame, |symname| {\n+    // We want to filter out frames with some prefixes\n+    // from both top and bottom of the call stack.\n+    static BAD_PREFIXES_TOP: &'static [&'static str] = &[\n+        \"_ZN3std3sys3imp9backtrace\",\n+        \"ZN3std3sys3imp9backtrace\",\n+        \"_ZN3std10sys_common9backtrace\",\n+        \"ZN3std10sys_common9backtrace\",\n+        \"_ZN3std9panicking\",\n+        \"ZN3std9panicking\",\n+        \"std::panicking\",\n+        \"_ZN4core9panicking\",\n+        \"ZN4core9panicking\",\n+        \"core::panicking\",\n+        \"_ZN4core6result13unwrap_failed\",\n+        \"ZN4core6result13unwrap_failed\",\n+        \"rust_begin_unwind\",\n+        \"_ZN4drop\",\n+        \"mingw_set_invalid_parameter_handler\",\n+    ];\n+    static BAD_PREFIXES_BOTTOM: &'static [&'static str] = &[\n+        \"_ZN3std9panicking\",\n+        \"ZN3std9panicking\",\n+        \"std::panicking\",\n+        \"_ZN4core9panicking\",\n+        \"ZN4core9panicking\",\n+        \"core::panicking\",\n+        \"_ZN3std2rt10lang_start\",\n+        \"ZN3std2rt10lang_start\",\n+        \"__rust_maybe_catch_panic\",\n+        \"_rust_maybe_catch_panic\",\n+        \"__libc_start_main\",\n+        \"__rust_try\",\n+        \"_start\",\n+        \"BaseThreadInitThunk\",\n+        \"__scrt_common_main_seh\",\n+        \"_ZN4drop\",\n+        \"mingw_set_invalid_parameter_handler\",\n+    ];\n+\n+    let is_good_frame = |frame: Frame, bad_prefixes: &[&str]| {\n+        resolve_symname(frame, |symname| {\n             if let Some(mangled_symbol_name) = symname {\n-                let magics_begin = [\n-                    \"_ZN3std3sys3imp9backtrace\",\n-                    \"_ZN3std10sys_common9backtrace\",\n-                    \"_ZN3std9panicking\",\n-                    \"_ZN4core9panicking\",\n-                    \"rust_begin_unwind\",\n-                    \"_ZN4core6result13unwrap_failed\",\n-                ];\n-                if !magics_begin.iter().any(|s| mangled_symbol_name.starts_with(s)) {\n-                    skip = true;\n+                if !bad_prefixes.iter().any(|s| mangled_symbol_name.starts_with(s)) {\n+                    return Ok(())\n                 }\n             }\n-            Ok(())\n-        }, context);\n+            Err(io::Error::from(io::ErrorKind::Other))\n+        }, context).is_ok()\n+    };\n \n-        if skip {\n-            break;\n-        }\n-    }\n+    let skipped_before = frames.iter().position(|frame| {\n+        is_good_frame(*frame, BAD_PREFIXES_TOP)\n+    }).unwrap_or(frames.len());\n+    let skipped_after = frames[skipped_before..].iter().rposition(|frame| {\n+        is_good_frame(*frame, BAD_PREFIXES_BOTTOM)\n+    }).unwrap_or(frames.len() - skipped_before);\n \n-    let mut skipped_after = 0;\n-    for (i, frame) in frames.iter().rev().enumerate() {\n-        let _ = resolve_symname(*frame, |symname| {\n-            if let Some(mangled_symbol_name) = symname {\n-                let magics_end = [\n-                    \"_ZN3std9panicking3try7do_call\",\n-                    \"__rust_maybe_catch_panic\",\n-                    \"__libc_start_main\",\n-                    \"__rust_try\",\n-                    \"_start\",\n-                ];\n-                if magics_end.iter().any(|s| mangled_symbol_name.starts_with(s)) {\n-                    skipped_after = i + 1;\n-                }\n-            }\n-            Ok(())\n-        }, context);\n+    if skipped_before + skipped_after == frames.len() {\n+        // Avoid showing completely empty backtraces\n+        return (0, 0);\n     }\n \n     (skipped_before, skipped_after)"}, {"sha": "b4758d18926f74d88d237b952d3c8b335f11369a", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/227eab0b7f457def8553a60fdb0ef4a051f39957/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227eab0b7f457def8553a60fdb0ef4a051f39957/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=227eab0b7f457def8553a60fdb0ef4a051f39957", "patch": "@@ -79,8 +79,8 @@ fn runtest(me: &str) {\n     ];\n     for symbol in removed_symbols {\n         assert!(!s.contains(symbol),\n-                \"{} should be removed from the backtrace\",\n-                symbol);\n+                \"{} should be removed from the backtrace\\n{}\",\n+                symbol, s);\n     }\n     assert!(s.contains(\" 0:\"), \"the frame number should start at 0\");\n "}]}