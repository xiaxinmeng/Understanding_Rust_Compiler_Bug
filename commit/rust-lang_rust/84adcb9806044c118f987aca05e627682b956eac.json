{"sha": "84adcb9806044c118f987aca05e627682b956eac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YWRjYjk4MDYwNDRjMTE4Zjk4N2FjYTA1ZTYyNzY4MmI5NTZlYWM=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-05-31T23:13:42Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-01T02:07:24Z"}, "message": "Rework lint to copy lint mode maps when changing them.", "tree": {"sha": "9fa2ab6456611136a102662806b7c24aaf4ed14e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fa2ab6456611136a102662806b7c24aaf4ed14e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84adcb9806044c118f987aca05e627682b956eac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84adcb9806044c118f987aca05e627682b956eac", "html_url": "https://github.com/rust-lang/rust/commit/84adcb9806044c118f987aca05e627682b956eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84adcb9806044c118f987aca05e627682b956eac/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b02f29d47a05eb4cc018b362e87f3c05181e4e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b02f29d47a05eb4cc018b362e87f3c05181e4e2", "html_url": "https://github.com/rust-lang/rust/commit/7b02f29d47a05eb4cc018b362e87f3c05181e4e2"}], "stats": {"total": 46, "additions": 30, "deletions": 16}, "files": [{"sha": "0364cdd2ab829d5f1702c9d735d4f16a6ef395ca", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/84adcb9806044c118f987aca05e627682b956eac/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84adcb9806044c118f987aca05e627682b956eac/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=84adcb9806044c118f987aca05e627682b956eac", "patch": "@@ -87,9 +87,25 @@ fn get_lint_dict() -> lint_dict {\n     hash_from_strs(v)\n }\n \n-type ctxt = @{dict: lint_dict,\n-              curr: smallintmap<level>,\n-              tcx: ty::ctxt};\n+// This is a highly not-optimal set of data structure decisions.\n+type lint_modes = smallintmap<level>;\n+type lint_mode_map = hashmap<ast::node_id, lint_modes>;\n+\n+type warning_settings = {\n+    default_settings: lint_modes,\n+    settings_map: lint_mode_map\n+};\n+\n+// This is kind of unfortunate. It should be somewhere else, or we should use\n+// a persistent data structure...\n+fn clone_lint_modes(modes: lint_modes) -> lint_modes {\n+    @{v: copy modes.v}\n+}\n+\n+type ctxt = {dict: lint_dict,\n+             curr: lint_modes,\n+             tcx: ty::ctxt};\n+\n \n impl methods for ctxt {\n     fn get_level(lint: lint) -> level {\n@@ -122,7 +138,7 @@ impl methods for ctxt {\n     \"]\n     fn with_warn_attrs(attrs: [ast::attribute], f: fn(ctxt)) {\n \n-        let mut undo = [];\n+        let mut new_ctxt = self;\n \n         let metas = attr::attr_metas(attr::find_attrs_by_name(attrs, \"warn\"));\n         for metas.each {|meta|\n@@ -138,9 +154,12 @@ impl methods for ctxt {\n                                 #fmt(\"unknown warning: '%s'\", lintname));\n                           }\n                           some((lint, new_level)) {\n-                            let old_level = self.get_level(lint);\n-                            self.set_level(lint, new_level);\n-                            undo += [(lint, old_level)]\n+                            // we do multiple unneeded copies of the map\n+                            // if many attributes are set, but this shouldn't\n+                            // actually be a problem...\n+                            new_ctxt = {curr: clone_lint_modes(self.curr)\n+                                        with new_ctxt};\n+                            new_ctxt.set_level(lint, new_level);\n                           }\n                         }\n                       }\n@@ -159,12 +178,7 @@ impl methods for ctxt {\n             }\n         }\n \n-        f(self);\n-\n-        for undo.each {|pair|\n-            let (lint,old_level) = pair;\n-            self.set_level(lint, old_level);\n-        }\n+        f(new_ctxt);\n     }\n }\n \n@@ -350,9 +364,9 @@ fn check_crate(tcx: ty::ctxt, crate: @ast::crate,\n     fn hash_lint(&&lint: lint) -> uint { lint as uint }\n     fn eq_lint(&&a: lint, &&b: lint) -> bool { a == b }\n \n-    let cx = @{dict: get_lint_dict(),\n-               curr: std::smallintmap::mk(),\n-               tcx: tcx};\n+    let cx = {dict: get_lint_dict(),\n+              curr: std::smallintmap::mk(),\n+              tcx: tcx};\n \n     // Install defaults.\n     for cx.dict.each {|_k, spec| cx.set_level(spec.lint, spec.default); }"}]}