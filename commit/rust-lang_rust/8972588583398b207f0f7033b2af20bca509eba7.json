{"sha": "8972588583398b207f0f7033b2af20bca509eba7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NzI1ODg1ODMzOThiMjA3ZjBmNzAzM2IyYWYyMGJjYTUwOWViYTc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-05T22:06:47Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-05T22:11:33Z"}, "message": "Dereference classes with dtors only on a field access\n\nA class with a dtor has a different representation (a pair of a bit field\nand a pointer to the class itself), and previously, the trans code\nwas selecting out the second field on any reference to a variable whose\ntype was a class with a dtor. This turned out to be wrong in the case where\na closure captures a variable with such a type. Changed the code to only\ninsert the field selection on a class field access.", "tree": {"sha": "98ca37e59e085585c27e57701e2ddb2ec0298117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98ca37e59e085585c27e57701e2ddb2ec0298117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8972588583398b207f0f7033b2af20bca509eba7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8972588583398b207f0f7033b2af20bca509eba7", "html_url": "https://github.com/rust-lang/rust/commit/8972588583398b207f0f7033b2af20bca509eba7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8972588583398b207f0f7033b2af20bca509eba7/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7daf986aeca81a72be5869a5a41d4fde753eca0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7daf986aeca81a72be5869a5a41d4fde753eca0f", "html_url": "https://github.com/rust-lang/rust/commit/7daf986aeca81a72be5869a5a41d4fde753eca0f"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "62c3134e9abdcad31757bc69d686720b1a2ec3a9", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8972588583398b207f0f7033b2af20bca509eba7/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8972588583398b207f0f7033b2af20bca509eba7/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8972588583398b207f0f7033b2af20bca509eba7", "patch": "@@ -2448,19 +2448,7 @@ fn trans_local_var(cx: block, def: ast::def) -> local_var_result {\n       }\n       ast::def_self(sid) {\n         let slf = alt copy cx.fcx.llself {\n-          some(s) {\n-            alt option::map(ty::ty_to_def_id(s.t)) {|did|\n-                     ty::ty_dtor(cx.tcx(), did)} {\n-              some(some(_)) {\n-                  /* self is a class with a dtor, which means we\n-                     have to select out the object itself\n-                     (If any other code does the same thing, that's\n-                     a bug */\n-                GEPi(cx, cast_self(cx, s), [0u, 1u])\n-            }\n-            _ { cast_self(cx, s) }\n-           }\n-          }\n+          some(s) { cast_self(cx, s) }\n           none { cx.sess().bug(\"trans_local_var: reference to self \\\n                                  out of context\"); }\n         };\n@@ -2535,17 +2523,29 @@ fn trans_rec_field(bcx: block, base: @ast::expr,\n \n fn trans_rec_field_inner(bcx: block, val: ValueRef, ty: ty::t,\n                          field: ast::ident, sp: span) -> lval_result {\n+    let mut deref = false;\n     let fields = alt ty::get(ty).struct {\n        ty::ty_rec(fs) { fs }\n        ty::ty_class(did, substs) {\n+         if option::is_some(ty::ty_dtor(bcx.tcx(), did)) {\n+           deref = true;\n+         }\n          ty::class_items_as_fields(bcx.tcx(), did, substs)\n        }\n        // Constraint?\n        _ { bcx.tcx().sess.span_bug(sp, \"trans_rec_field:\\\n                  base expr has non-record type\"); }\n     };\n     let ix = field_idx_strict(bcx.tcx(), sp, field, fields);\n-    let val = GEPi(bcx, val, [0u, ix]);\n+\n+    /* self is a class with a dtor, which means we\n+       have to select out the object itself\n+       (If any other code does the same thing, that's\n+       a bug */\n+    let val = if deref {\n+        GEPi(bcx, GEPi(bcx, val, [0u, 1u]), [0u, ix])\n+    }\n+    else { GEPi(bcx, val, [0u, ix]) };\n \n     ret {bcx: bcx, val: val, kind: owned};\n }"}]}