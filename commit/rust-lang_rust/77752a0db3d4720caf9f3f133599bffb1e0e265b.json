{"sha": "77752a0db3d4720caf9f3f133599bffb1e0e265b", "node_id": "C_kwDOAAsO6NoAKDc3NzUyYTBkYjNkNDcyMGNhZjlmM2YxMzM1OTliZmZiMWUwZTI2NWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-25T19:06:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-25T19:06:35Z"}, "message": "Rollup merge of #110796 - madsravn:wake-example, r=Mark-Simulacrum\n\nUpdating Wake example to use new 'pin!' macro\n\nCloses: https://github.com/rust-lang/rust/issues/109965\n\nI have already had this reviewed and approved here: https://github.com/rust-lang/rust/pull/110026 . But because I had some git issues and chose the \"nuke it\" option as my solution it didn't get merged. I nuked it too quickly. I am sorry for trouble of reviewing twice.", "tree": {"sha": "db8180fa895d4969d18064a0f4ef03e72ab4f3c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db8180fa895d4969d18064a0f4ef03e72ab4f3c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77752a0db3d4720caf9f3f133599bffb1e0e265b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkSCS7CRBK7hj4Ov3rIwAAi6wIAA/dGli+f1vKj8MpwZVtkxWy\nlUhY16yM64Uux6SGcq5lijfBZCypgLF5s2d8kzH9B3wGUsC3uzSnmQgTcKJtzy1y\nUCtDH8dz9gViJ6kZ1Bf59i55v8ql5eUc3gIt6UrYQohn5+C+dbJsovSASNdHXUWA\ncEWG20x50ZTrkRVE+9k6rjLqMyvFphJb23jFS0kUlfKDWHqDNl8+79xbw8B+t4d2\nHLluyvam0tiBQtjlKGdb7XYz31tnlymV0ssfoTGzz4oJH5b81Pcm2CwppGvIg1Hd\nEm64rDiBIV8s3cwTnXzx6OfAg/Q+IqrmPeJ15LjfQcfMGATHguYrMtZcYPUyB9o=\n=ETYY\n-----END PGP SIGNATURE-----\n", "payload": "tree db8180fa895d4969d18064a0f4ef03e72ab4f3c6\nparent f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8\nparent 3b196fb391ea9c869a798005e0fd7c84214518f4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682449595 +0200\ncommitter GitHub <noreply@github.com> 1682449595 +0200\n\nRollup merge of #110796 - madsravn:wake-example, r=Mark-Simulacrum\n\nUpdating Wake example to use new 'pin!' macro\n\nCloses: https://github.com/rust-lang/rust/issues/109965\n\nI have already had this reviewed and approved here: https://github.com/rust-lang/rust/pull/110026 . But because I had some git issues and chose the \"nuke it\" option as my solution it didn't get merged. I nuked it too quickly. I am sorry for trouble of reviewing twice.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77752a0db3d4720caf9f3f133599bffb1e0e265b", "html_url": "https://github.com/rust-lang/rust/commit/77752a0db3d4720caf9f3f133599bffb1e0e265b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77752a0db3d4720caf9f3f133599bffb1e0e265b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8", "html_url": "https://github.com/rust-lang/rust/commit/f5a3039addd7dcdf6b79d47d8f308ad068cf3cb8"}, {"sha": "3b196fb391ea9c869a798005e0fd7c84214518f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b196fb391ea9c869a798005e0fd7c84214518f4", "html_url": "https://github.com/rust-lang/rust/commit/3b196fb391ea9c869a798005e0fd7c84214518f4"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "5d9772b878b03a88e547d9d2c062fb1ac826f3b3", "filename": "library/alloc/src/task.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77752a0db3d4720caf9f3f133599bffb1e0e265b/library%2Falloc%2Fsrc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77752a0db3d4720caf9f3f133599bffb1e0e265b/library%2Falloc%2Fsrc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ftask.rs?ref=77752a0db3d4720caf9f3f133599bffb1e0e265b", "patch": "@@ -39,6 +39,7 @@ use crate::sync::Arc;\n /// use std::sync::Arc;\n /// use std::task::{Context, Poll, Wake};\n /// use std::thread::{self, Thread};\n+/// use core::pin::pin;\n ///\n /// /// A waker that wakes up the current thread when called.\n /// struct ThreadWaker(Thread);\n@@ -52,7 +53,7 @@ use crate::sync::Arc;\n /// /// Run a future to completion on the current thread.\n /// fn block_on<T>(fut: impl Future<Output = T>) -> T {\n ///     // Pin the future so it can be polled.\n-///     let mut fut = Box::pin(fut);\n+///     let mut fut = pin!(fut);\n ///\n ///     // Create a new context to be passed to the future.\n ///     let t = thread::current();"}]}