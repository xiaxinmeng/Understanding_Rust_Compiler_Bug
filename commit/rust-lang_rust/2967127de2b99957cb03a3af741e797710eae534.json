{"sha": "2967127de2b99957cb03a3af741e797710eae534", "node_id": "C_kwDOAAsO6NoAKDI5NjcxMjdkZTJiOTk5NTdjYjAzYTNhZjc0MWU3OTc3MTBlYWU1MzQ", "commit": {"author": {"name": "Micha White", "email": "botahamec@outlook.com", "date": "2022-06-09T21:44:28Z"}, "committer": {"name": "Micha White", "email": "botahamec@outlook.com", "date": "2022-06-10T17:12:02Z"}, "message": "Refactored the candidate type checking", "tree": {"sha": "96499c98360934d62306b27c0a3f5c1881ad3f08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96499c98360934d62306b27c0a3f5c1881ad3f08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2967127de2b99957cb03a3af741e797710eae534", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEGofhdE61kfoixWy+rtlL+hwwE4kFAmKje2IACgkQrtlL+hww\nE4nXew//YFbpb6zX4yHDhLCrdskoUy8Ar6Yyz1/rZA2CZ2Es6//1fCIZPRvLJ2lA\nys7+SrnXV7f49b+aZJUVS45R1UBQkSUyZHyjKXo/9ipoQJDitcWr7N8lnXQ/dfu2\niywzVuEH/w5wyb7xgrLXdpReB88pUkeZK6D+cLJFYNws/38zeoFBKNfIHRVR7liB\n+Lpf54QVN7ktJNzkJpsWl1Mt7tv66h/EI9THPGtEwg8W8s+nw+j01on/PsAYqd/z\nAat9oLY6CxPArg16Z7YieLq3/GJ8YL31HEzrscG6yFsWxHHxCm6oCM2NCe0FvT+C\nBWa0J9AtbD5dLPIHhVqfwdiqMWSI7sO70zTMc3U/HJztI+oXTo4zTOPlyjBmuvmn\nUhVUQkG9A0uqOC5aOwhH0YsDTuE4bMvrZd1t01X2AGuqsactD4E/PG4rIbqTg+zr\nBmCx1esQ0xZ2MGHFFSibWtv3ekqdiRR0EN4B3o7RJulIVouStCGfBKOCx/66tQpx\nzvgR7b0hBckCy9IcSsLPsvJKiGsnpcmyKqn7bTIVKXsMJpeDj+rMFXoRYg55zelT\nwxBFKGTOLyPlrI9Pw7LmkJQyZYXvJLYg2+ktcwCAXr441GZynMO9q0YoeuOuIvpL\nHT5n6S9fZR0uA1UZJJMLQLqT+jIg3XHlCTc3zIVTAe3MnxDalnU=\n=Ljff\n-----END PGP SIGNATURE-----", "payload": "tree 96499c98360934d62306b27c0a3f5c1881ad3f08\nparent 6d6c63ee23c627aa9299cffa738f40189126c08a\nauthor Micha White <botahamec@outlook.com> 1654811068 -0400\ncommitter Micha White <botahamec@outlook.com> 1654881122 -0400\n\nRefactored the candidate type checking\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2967127de2b99957cb03a3af741e797710eae534", "html_url": "https://github.com/rust-lang/rust/commit/2967127de2b99957cb03a3af741e797710eae534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2967127de2b99957cb03a3af741e797710eae534/comments", "author": {"login": "botahamec", "id": 32026883, "node_id": "MDQ6VXNlcjMyMDI2ODgz", "avatar_url": "https://avatars.githubusercontent.com/u/32026883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botahamec", "html_url": "https://github.com/botahamec", "followers_url": "https://api.github.com/users/botahamec/followers", "following_url": "https://api.github.com/users/botahamec/following{/other_user}", "gists_url": "https://api.github.com/users/botahamec/gists{/gist_id}", "starred_url": "https://api.github.com/users/botahamec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botahamec/subscriptions", "organizations_url": "https://api.github.com/users/botahamec/orgs", "repos_url": "https://api.github.com/users/botahamec/repos", "events_url": "https://api.github.com/users/botahamec/events{/privacy}", "received_events_url": "https://api.github.com/users/botahamec/received_events", "type": "User", "site_admin": false}, "committer": {"login": "botahamec", "id": 32026883, "node_id": "MDQ6VXNlcjMyMDI2ODgz", "avatar_url": "https://avatars.githubusercontent.com/u/32026883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botahamec", "html_url": "https://github.com/botahamec", "followers_url": "https://api.github.com/users/botahamec/followers", "following_url": "https://api.github.com/users/botahamec/following{/other_user}", "gists_url": "https://api.github.com/users/botahamec/gists{/gist_id}", "starred_url": "https://api.github.com/users/botahamec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botahamec/subscriptions", "organizations_url": "https://api.github.com/users/botahamec/orgs", "repos_url": "https://api.github.com/users/botahamec/repos", "events_url": "https://api.github.com/users/botahamec/events{/privacy}", "received_events_url": "https://api.github.com/users/botahamec/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d6c63ee23c627aa9299cffa738f40189126c08a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6c63ee23c627aa9299cffa738f40189126c08a", "html_url": "https://github.com/rust-lang/rust/commit/6d6c63ee23c627aa9299cffa738f40189126c08a"}], "stats": {"total": 48, "additions": 9, "deletions": 39}, "files": [{"sha": "7d1ff2087290ea9ef19621e6919fcd26b6b57985", "filename": "clippy_lints/src/matches/single_match.rs", "status": "modified", "additions": 9, "deletions": 39, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2967127de2b99957cb03a3af741e797710eae534/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2967127de2b99957cb03a3af741e797710eae534/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs?ref=2967127de2b99957cb03a3af741e797710eae534", "patch": "@@ -151,26 +151,17 @@ fn check_opt_like<'a>(\n         return;\n     }\n \n-    if paths_and_types.iter().all(|info| in_candidate_enum(cx, info)) {\n+    if paths_and_types.iter().all(|ty| in_candidate_enum(cx, *ty)) {\n         report_single_pattern(cx, ex, arms, expr, els);\n     }\n }\n \n-fn in_candidate_enum<'a>(cx: &LateContext<'a>, path_info: &(String, Ty<'_>)) -> bool {\n+fn in_candidate_enum<'a>(cx: &LateContext<'a>, ty: Ty<'_>) -> bool {\n     // list of candidate `Enum`s we know will never get any more members\n-    let candidates = &[\n-        (&paths::COW, \"Borrowed\"),\n-        (&paths::COW, \"Cow::Borrowed\"),\n-        (&paths::COW, \"Cow::Owned\"),\n-        (&paths::COW, \"Owned\"),\n-        (&paths::OPTION, \"None\"),\n-        (&paths::RESULT, \"Err\"),\n-        (&paths::RESULT, \"Ok\"),\n-    ];\n+    let candidates = [&paths::COW, &paths::OPTION, &paths::RESULT];\n \n-    let (path, ty) = path_info;\n-    for &(ty_path, pat_path) in candidates {\n-        if path == pat_path && match_type(cx, *ty, ty_path) {\n+    for candidate_ty in candidates {\n+        if match_type(cx, ty, candidate_ty) {\n             return true;\n         }\n     }\n@@ -179,29 +170,15 @@ fn in_candidate_enum<'a>(cx: &LateContext<'a>, path_info: &(String, Ty<'_>)) ->\n \n /// Collects paths and their types from the given patterns. Returns true if the given pattern could\n /// be simplified, false otherwise.\n-fn collect_pat_paths<'a>(acc: &mut Vec<(String, Ty<'a>)>, cx: &LateContext<'a>, pat: &Pat<'_>, ty: Ty<'a>) -> bool {\n+fn collect_pat_paths<'a>(acc: &mut Vec<Ty<'a>>, cx: &LateContext<'a>, pat: &Pat<'_>, ty: Ty<'a>) -> bool {\n     match pat.kind {\n         PatKind::Wild => true,\n         PatKind::Tuple(inner, _) => inner.iter().all(|p| {\n             let p_ty = cx.typeck_results().pat_ty(p);\n             collect_pat_paths(acc, cx, p, p_ty)\n         }),\n-        PatKind::TupleStruct(ref path, ..) => {\n-            let path = rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n-                s.print_qpath(path, false);\n-            });\n-            acc.push((path, ty));\n-            true\n-        },\n-        PatKind::Binding(BindingAnnotation::Unannotated, .., ident, None) => {\n-            acc.push((ident.to_string(), ty));\n-            true\n-        },\n-        PatKind::Path(ref path) => {\n-            let path = rustc_hir_pretty::to_string(rustc_hir_pretty::NO_ANN, |s| {\n-                s.print_qpath(path, false);\n-            });\n-            acc.push((path, ty));\n+        PatKind::TupleStruct(..) | PatKind::Binding(BindingAnnotation::Unannotated, .., None) | PatKind::Path(_) => {\n+            acc.push(ty);\n             true\n         },\n         _ => false,\n@@ -265,14 +242,7 @@ fn form_exhaustive_matches<'a>(cx: &LateContext<'a>, ty: Ty<'a>, left: &Pat<'_>,\n             }\n             true\n         },\n-        (PatKind::TupleStruct(..), PatKind::Path(_) | PatKind::TupleStruct(..)) => {\n-            let mut paths_and_types = Vec::new();\n-            if !collect_pat_paths(&mut paths_and_types, cx, right, ty) {\n-                return false;\n-            }\n-\n-            paths_and_types.iter().all(|info| in_candidate_enum(cx, info))\n-        },\n+        (PatKind::TupleStruct(..), PatKind::Path(_) | PatKind::TupleStruct(..)) => in_candidate_enum(cx, ty),\n         _ => false,\n     }\n }"}]}