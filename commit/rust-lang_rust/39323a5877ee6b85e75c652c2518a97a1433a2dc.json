{"sha": "39323a5877ee6b85e75c652c2518a97a1433a2dc", "node_id": "C_kwDOAAsO6NoAKDM5MzIzYTU4NzdlZTZiODVlNzVjNjUyYzI1MThhOTdhMTQzM2EyZGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-02T15:31:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-02T15:31:06Z"}, "message": "Auto merge of #102586 - Dylan-DPC:rollup-g107h6z, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #100451 (Do not panic when a test function returns Result::Err.)\n - #102098 (Use fetch_update in sync::Weak::upgrade)\n - #102538 (Give `def_span` the same SyntaxContext as `span_with_body`.)\n - #102556 (Make `feature(const_btree_len)` implied by `feature(const_btree_new)`)\n - #102566 (Add a known-bug test for #102498)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "27348d8ceb2103ee0e7332e0385233435ad1ff7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27348d8ceb2103ee0e7332e0385233435ad1ff7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39323a5877ee6b85e75c652c2518a97a1433a2dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39323a5877ee6b85e75c652c2518a97a1433a2dc", "html_url": "https://github.com/rust-lang/rust/commit/39323a5877ee6b85e75c652c2518a97a1433a2dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39323a5877ee6b85e75c652c2518a97a1433a2dc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91931ec2fcb67a8e61080a97345c828a875c86ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/91931ec2fcb67a8e61080a97345c828a875c86ec", "html_url": "https://github.com/rust-lang/rust/commit/91931ec2fcb67a8e61080a97345c828a875c86ec"}, {"sha": "0b2596723bade820e3d5ba58d3e142dedeff566d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2596723bade820e3d5ba58d3e142dedeff566d", "html_url": "https://github.com/rust-lang/rust/commit/0b2596723bade820e3d5ba58d3e142dedeff566d"}], "stats": {"total": 333, "additions": 239, "deletions": 94}, "files": [{"sha": "b78c3f85596c0c9df6592542be23da928100ce9d", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/39323a5877ee6b85e75c652c2518a97a1433a2dc/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39323a5877ee6b85e75c652c2518a97a1433a2dc/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=39323a5877ee6b85e75c652c2518a97a1433a2dc", "patch": "@@ -941,9 +941,19 @@ impl<'hir> Map<'hir> {\n \n         let span = match self.find(hir_id)? {\n             // Function-like.\n-            Node::Item(Item { kind: ItemKind::Fn(sig, ..), .. })\n-            | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, ..), .. })\n-            | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, ..), .. }) => sig.span,\n+            Node::Item(Item { kind: ItemKind::Fn(sig, ..), span: outer_span, .. })\n+            | Node::TraitItem(TraitItem {\n+                kind: TraitItemKind::Fn(sig, ..),\n+                span: outer_span,\n+                ..\n+            })\n+            | Node::ImplItem(ImplItem {\n+                kind: ImplItemKind::Fn(sig, ..), span: outer_span, ..\n+            }) => {\n+                // Ensure that the returned span has the item's SyntaxContext, and not the\n+                // SyntaxContext of the visibility.\n+                sig.span.find_ancestor_in_same_ctxt(*outer_span).unwrap_or(*outer_span)\n+            }\n             // Constants and Statics.\n             Node::Item(Item {\n                 kind:\n@@ -985,7 +995,11 @@ impl<'hir> Map<'hir> {\n             }\n             // Other cases.\n             Node::Item(item) => match &item.kind {\n-                ItemKind::Use(path, _) => path.span,\n+                ItemKind::Use(path, _) => {\n+                    // Ensure that the returned span has the item's SyntaxContext, and not the\n+                    // SyntaxContext of the path.\n+                    path.span.find_ancestor_in_same_ctxt(item.span).unwrap_or(item.span)\n+                }\n                 _ => named_span(item.span, item.ident, item.kind.generics()),\n             },\n             Node::Variant(variant) => named_span(variant.span, variant.ident, None),\n@@ -995,11 +1009,17 @@ impl<'hir> Map<'hir> {\n                 _ => named_span(item.span, item.ident, None),\n             },\n             Node::Ctor(_) => return self.opt_span(self.get_parent_node(hir_id)),\n-            Node::Expr(Expr { kind: ExprKind::Closure(Closure { fn_decl_span, .. }), .. }) => {\n-                *fn_decl_span\n+            Node::Expr(Expr {\n+                kind: ExprKind::Closure(Closure { fn_decl_span, .. }),\n+                span,\n+                ..\n+            }) => {\n+                // Ensure that the returned span has the item's SyntaxContext.\n+                fn_decl_span.find_ancestor_in_same_ctxt(*span).unwrap_or(*span)\n             }\n             _ => self.span_with_body(hir_id),\n         };\n+        debug_assert_eq!(span.ctxt(), self.span_with_body(hir_id).ctxt());\n         Some(span)\n     }\n "}, {"sha": "3687f84b1bd46f04a74ca2baad8e799eee0c866d", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39323a5877ee6b85e75c652c2518a97a1433a2dc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39323a5877ee6b85e75c652c2518a97a1433a2dc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=39323a5877ee6b85e75c652c2518a97a1433a2dc", "patch": "@@ -2392,7 +2392,11 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\")]\n+    #[rustc_const_unstable(\n+        feature = \"const_btree_len\",\n+        issue = \"71835\",\n+        implied_by = \"const_btree_new\"\n+    )]\n     pub const fn len(&self) -> usize {\n         self.length\n     }\n@@ -2413,7 +2417,11 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\")]\n+    #[rustc_const_unstable(\n+        feature = \"const_btree_len\",\n+        issue = \"71835\",\n+        implied_by = \"const_btree_new\"\n+    )]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}, {"sha": "5783d836e105d42c704bba9ecffcf1f9c8f612f8", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39323a5877ee6b85e75c652c2518a97a1433a2dc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39323a5877ee6b85e75c652c2518a97a1433a2dc/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=39323a5877ee6b85e75c652c2518a97a1433a2dc", "patch": "@@ -1174,7 +1174,11 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\")]\n+    #[rustc_const_unstable(\n+        feature = \"const_btree_len\",\n+        issue = \"71835\",\n+        implied_by = \"const_btree_new\"\n+    )]\n     pub const fn len(&self) -> usize {\n         self.map.len()\n     }\n@@ -1193,7 +1197,11 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\")]\n+    #[rustc_const_unstable(\n+        feature = \"const_btree_len\",\n+        issue = \"71835\",\n+        implied_by = \"const_btree_new\"\n+    )]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}, {"sha": "d0e5b6f4d820160295635052acf550eed7ddf183", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/39323a5877ee6b85e75c652c2518a97a1433a2dc/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39323a5877ee6b85e75c652c2518a97a1433a2dc/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=39323a5877ee6b85e75c652c2518a97a1433a2dc", "patch": "@@ -1980,33 +1980,26 @@ impl<T: ?Sized> Weak<T> {\n         // We use a CAS loop to increment the strong count instead of a\n         // fetch_add as this function should never take the reference count\n         // from zero to one.\n-        let inner = self.inner()?;\n-\n-        // Relaxed load because any write of 0 that we can observe\n-        // leaves the field in a permanently zero state (so a\n-        // \"stale\" read of 0 is fine), and any other value is\n-        // confirmed via the CAS below.\n-        let mut n = inner.strong.load(Relaxed);\n-\n-        loop {\n-            if n == 0 {\n-                return None;\n-            }\n-\n-            // See comments in `Arc::clone` for why we do this (for `mem::forget`).\n-            if n > MAX_REFCOUNT {\n-                abort();\n-            }\n-\n+        self.inner()?\n+            .strong\n             // Relaxed is fine for the failure case because we don't have any expectations about the new state.\n             // Acquire is necessary for the success case to synchronise with `Arc::new_cyclic`, when the inner\n             // value can be initialized after `Weak` references have already been created. In that case, we\n             // expect to observe the fully initialized value.\n-            match inner.strong.compare_exchange_weak(n, n + 1, Acquire, Relaxed) {\n-                Ok(_) => return Some(unsafe { Arc::from_inner(self.ptr) }), // null checked above\n-                Err(old) => n = old,\n-            }\n-        }\n+            .fetch_update(Acquire, Relaxed, |n| {\n+                // Any write of 0 we can observe leaves the field in permanently zero state.\n+                if n == 0 {\n+                    return None;\n+                }\n+                // See comments in `Arc::clone` for why we do this (for `mem::forget`).\n+                if n > MAX_REFCOUNT {\n+                    abort();\n+                }\n+                Some(n + 1)\n+            })\n+            .ok()\n+            // null checked above\n+            .map(|_| unsafe { Arc::from_inner(self.ptr) })\n     }\n \n     /// Gets the number of strong (`Arc`) pointers pointing to this allocation."}, {"sha": "23925e6ea72ec13121946491d055c9150d74cfb3", "filename": "library/test/src/bench.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/39323a5877ee6b85e75c652c2518a97a1433a2dc/library%2Ftest%2Fsrc%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39323a5877ee6b85e75c652c2518a97a1433a2dc/library%2Ftest%2Fsrc%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fbench.rs?ref=39323a5877ee6b85e75c652c2518a97a1433a2dc", "patch": "@@ -49,12 +49,12 @@ impl Bencher {\n         self.summary = Some(iter(&mut inner));\n     }\n \n-    pub fn bench<F>(&mut self, mut f: F) -> Option<stats::Summary>\n+    pub fn bench<F>(&mut self, mut f: F) -> Result<Option<stats::Summary>, String>\n     where\n-        F: FnMut(&mut Bencher),\n+        F: FnMut(&mut Bencher) -> Result<(), String>,\n     {\n-        f(self);\n-        self.summary\n+        let result = f(self);\n+        result.map(|_| self.summary)\n     }\n }\n \n@@ -195,7 +195,7 @@ pub fn benchmark<F>(\n     nocapture: bool,\n     f: F,\n ) where\n-    F: FnMut(&mut Bencher),\n+    F: FnMut(&mut Bencher) -> Result<(), String>,\n {\n     let mut bs = Bencher { mode: BenchMode::Auto, summary: None, bytes: 0 };\n \n@@ -211,32 +211,33 @@ pub fn benchmark<F>(\n \n     let test_result = match result {\n         //bs.bench(f) {\n-        Ok(Some(ns_iter_summ)) => {\n+        Ok(Ok(Some(ns_iter_summ))) => {\n             let ns_iter = cmp::max(ns_iter_summ.median as u64, 1);\n             let mb_s = bs.bytes * 1000 / ns_iter;\n \n             let bs = BenchSamples { ns_iter_summ, mb_s: mb_s as usize };\n             TestResult::TrBench(bs)\n         }\n-        Ok(None) => {\n+        Ok(Ok(None)) => {\n             // iter not called, so no data.\n             // FIXME: error in this case?\n             let samples: &mut [f64] = &mut [0.0_f64; 1];\n             let bs = BenchSamples { ns_iter_summ: stats::Summary::new(samples), mb_s: 0 };\n             TestResult::TrBench(bs)\n         }\n         Err(_) => TestResult::TrFailed,\n+        Ok(Err(_)) => TestResult::TrFailed,\n     };\n \n     let stdout = data.lock().unwrap().to_vec();\n     let message = CompletedTest::new(id, desc, test_result, None, stdout);\n     monitor_ch.send(message).unwrap();\n }\n \n-pub fn run_once<F>(f: F)\n+pub fn run_once<F>(f: F) -> Result<(), String>\n where\n-    F: FnMut(&mut Bencher),\n+    F: FnMut(&mut Bencher) -> Result<(), String>,\n {\n     let mut bs = Bencher { mode: BenchMode::Single, summary: None, bytes: 0 };\n-    bs.bench(f);\n+    bs.bench(f).map(|_| ())\n }"}, {"sha": "c30257fc792004e5ebe3f77d7b1223ced581cea1", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/39323a5877ee6b85e75c652c2518a97a1433a2dc/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39323a5877ee6b85e75c652c2518a97a1433a2dc/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=39323a5877ee6b85e75c652c2518a97a1433a2dc", "patch": "@@ -6,7 +6,8 @@\n //! benchmarks themselves) should be done via the `#[test]` and\n //! `#[bench]` attributes.\n //!\n-//! See the [Testing Chapter](../book/ch11-00-testing.html) of the book for more details.\n+//! See the [Testing Chapter](../book/ch11-00-testing.html) of the book for more\n+//! details.\n \n // Currently, not much of this is meant for users. It is intended to\n // support the simplest interface possible for representing and\n@@ -76,6 +77,7 @@ mod types;\n #[cfg(test)]\n mod tests;\n \n+use core::any::Any;\n use event::{CompletedTest, TestEvent};\n use helpers::concurrency::get_concurrency;\n use helpers::exit_code::get_exit_code;\n@@ -175,17 +177,20 @@ fn make_owned_test(test: &&TestDescAndFn) -> TestDescAndFn {\n     }\n }\n \n-/// Invoked when unit tests terminate. Should panic if the unit\n-/// Tests is considered a failure. By default, invokes `report()`\n-/// and checks for a `0` result.\n-pub fn assert_test_result<T: Termination>(result: T) {\n+/// Invoked when unit tests terminate. Returns `Result::Err` if the test is\n+/// considered a failure. By default, invokes `report() and checks for a `0`\n+/// result.\n+pub fn assert_test_result<T: Termination>(result: T) -> Result<(), String> {\n     let code = result.report().to_i32();\n-    assert_eq!(\n-        code, 0,\n-        \"the test returned a termination value with a non-zero status code ({}) \\\n-         which indicates a failure\",\n-        code\n-    );\n+    if code == 0 {\n+        Ok(())\n+    } else {\n+        Err(format!(\n+            \"the test returned a termination value with a non-zero status code \\\n+             ({}) which indicates a failure\",\n+            code\n+        ))\n+    }\n }\n \n pub fn run_tests<F>(\n@@ -478,7 +483,7 @@ pub fn run_test(\n         id: TestId,\n         desc: TestDesc,\n         monitor_ch: Sender<CompletedTest>,\n-        testfn: Box<dyn FnOnce() + Send>,\n+        testfn: Box<dyn FnOnce() -> Result<(), String> + Send>,\n         opts: TestRunOpts,\n     ) -> Option<thread::JoinHandle<()>> {\n         let concurrency = opts.concurrency;\n@@ -567,19 +572,19 @@ pub fn run_test(\n \n /// Fixed frame used to clean the backtrace with `RUST_BACKTRACE=1`.\n #[inline(never)]\n-fn __rust_begin_short_backtrace<F: FnOnce()>(f: F) {\n-    f();\n+fn __rust_begin_short_backtrace<T, F: FnOnce() -> T>(f: F) -> T {\n+    let result = f();\n \n     // prevent this frame from being tail-call optimised away\n-    black_box(());\n+    black_box(result)\n }\n \n fn run_test_in_process(\n     id: TestId,\n     desc: TestDesc,\n     nocapture: bool,\n     report_time: bool,\n-    testfn: Box<dyn FnOnce() + Send>,\n+    testfn: Box<dyn FnOnce() -> Result<(), String> + Send>,\n     monitor_ch: Sender<CompletedTest>,\n     time_opts: Option<time::TestTimeOptions>,\n ) {\n@@ -591,7 +596,7 @@ fn run_test_in_process(\n     }\n \n     let start = report_time.then(Instant::now);\n-    let result = catch_unwind(AssertUnwindSafe(testfn));\n+    let result = fold_err(catch_unwind(AssertUnwindSafe(testfn)));\n     let exec_time = start.map(|start| {\n         let duration = start.elapsed();\n         TestExecTime(duration)\n@@ -608,6 +613,19 @@ fn run_test_in_process(\n     monitor_ch.send(message).unwrap();\n }\n \n+fn fold_err<T, E>(\n+    result: Result<Result<T, E>, Box<dyn Any + Send>>,\n+) -> Result<T, Box<dyn Any + Send>>\n+where\n+    E: Send + 'static,\n+{\n+    match result {\n+        Ok(Err(e)) => Err(Box::new(e)),\n+        Ok(Ok(v)) => Ok(v),\n+        Err(e) => Err(e),\n+    }\n+}\n+\n fn spawn_test_subprocess(\n     id: TestId,\n     desc: TestDesc,\n@@ -663,7 +681,10 @@ fn spawn_test_subprocess(\n     monitor_ch.send(message).unwrap();\n }\n \n-fn run_test_in_spawned_subprocess(desc: TestDesc, testfn: Box<dyn FnOnce() + Send>) -> ! {\n+fn run_test_in_spawned_subprocess(\n+    desc: TestDesc,\n+    testfn: Box<dyn FnOnce() -> Result<(), String> + Send>,\n+) -> ! {\n     let builtin_panic_hook = panic::take_hook();\n     let record_result = Arc::new(move |panic_info: Option<&'_ PanicInfo<'_>>| {\n         let test_result = match panic_info {\n@@ -689,7 +710,9 @@ fn run_test_in_spawned_subprocess(desc: TestDesc, testfn: Box<dyn FnOnce() + Sen\n     });\n     let record_result2 = record_result.clone();\n     panic::set_hook(Box::new(move |info| record_result2(Some(&info))));\n-    testfn();\n+    if let Err(message) = testfn() {\n+        panic!(\"{}\", message);\n+    }\n     record_result(None);\n     unreachable!(\"panic=abort callback should have exited the process\")\n }"}, {"sha": "278cfb15bb13332288ade8891633ccf3f2a46eb0", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 68, "deletions": 22, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/39323a5877ee6b85e75c652c2518a97a1433a2dc/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39323a5877ee6b85e75c652c2518a97a1433a2dc/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=39323a5877ee6b85e75c652c2518a97a1433a2dc", "patch": "@@ -67,7 +67,7 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 no_run: false,\n                 test_type: TestType::Unknown,\n             },\n-            testfn: DynTestFn(Box::new(move || {})),\n+            testfn: DynTestFn(Box::new(move || Ok(()))),\n         },\n         TestDescAndFn {\n             desc: TestDesc {\n@@ -79,14 +79,14 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 no_run: false,\n                 test_type: TestType::Unknown,\n             },\n-            testfn: DynTestFn(Box::new(move || {})),\n+            testfn: DynTestFn(Box::new(move || Ok(()))),\n         },\n     ]\n }\n \n #[test]\n pub fn do_not_run_ignored_tests() {\n-    fn f() {\n+    fn f() -> Result<(), String> {\n         panic!();\n     }\n     let desc = TestDescAndFn {\n@@ -109,7 +109,9 @@ pub fn do_not_run_ignored_tests() {\n \n #[test]\n pub fn ignored_tests_result_in_ignored() {\n-    fn f() {}\n+    fn f() -> Result<(), String> {\n+        Ok(())\n+    }\n     let desc = TestDescAndFn {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n@@ -132,7 +134,7 @@ pub fn ignored_tests_result_in_ignored() {\n #[test]\n #[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic() {\n-    fn f() {\n+    fn f() -> Result<(), String> {\n         panic!();\n     }\n     let desc = TestDescAndFn {\n@@ -157,7 +159,7 @@ fn test_should_panic() {\n #[test]\n #[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_good_message() {\n-    fn f() {\n+    fn f() -> Result<(), String> {\n         panic!(\"an error message\");\n     }\n     let desc = TestDescAndFn {\n@@ -183,7 +185,7 @@ fn test_should_panic_good_message() {\n #[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_bad_message() {\n     use crate::tests::TrFailedMsg;\n-    fn f() {\n+    fn f() -> Result<(), String> {\n         panic!(\"an error message\");\n     }\n     let expected = \"foobar\";\n@@ -214,7 +216,7 @@ fn test_should_panic_bad_message() {\n fn test_should_panic_non_string_message_type() {\n     use crate::tests::TrFailedMsg;\n     use std::any::TypeId;\n-    fn f() {\n+    fn f() -> Result<(), String> {\n         std::panic::panic_any(1i32);\n     }\n     let expected = \"foobar\";\n@@ -249,7 +251,9 @@ fn test_should_panic_but_succeeds() {\n     let should_panic_variants = [ShouldPanic::Yes, ShouldPanic::YesWithMessage(\"error message\")];\n \n     for &should_panic in should_panic_variants.iter() {\n-        fn f() {}\n+        fn f() -> Result<(), String> {\n+            Ok(())\n+        }\n         let desc = TestDescAndFn {\n             desc: TestDesc {\n                 name: StaticTestName(\"whatever\"),\n@@ -283,7 +287,9 @@ fn test_should_panic_but_succeeds() {\n }\n \n fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n-    fn f() {}\n+    fn f() -> Result<(), String> {\n+        Ok(())\n+    }\n     let desc = TestDescAndFn {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n@@ -318,7 +324,9 @@ fn test_should_report_time() {\n }\n \n fn time_test_failure_template(test_type: TestType) -> TestResult {\n-    fn f() {}\n+    fn f() -> Result<(), String> {\n+        Ok(())\n+    }\n     let desc = TestDescAndFn {\n         desc: TestDesc {\n             name: StaticTestName(\"whatever\"),\n@@ -480,7 +488,7 @@ pub fn exclude_should_panic_option() {\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n-        testfn: DynTestFn(Box::new(move || {})),\n+        testfn: DynTestFn(Box::new(move || Ok(()))),\n     });\n \n     let filtered = filter_tests(&opts, tests);\n@@ -504,7 +512,7 @@ pub fn exact_filter_match() {\n                     no_run: false,\n                     test_type: TestType::Unknown,\n                 },\n-                testfn: DynTestFn(Box::new(move || {})),\n+                testfn: DynTestFn(Box::new(move || Ok(()))),\n             })\n             .collect()\n     }\n@@ -580,7 +588,9 @@ fn sample_tests() -> Vec<TestDescAndFn> {\n         \"test::run_include_ignored_option\".to_string(),\n         \"test::sort_tests\".to_string(),\n     ];\n-    fn testfn() {}\n+    fn testfn() -> Result<(), String> {\n+        Ok(())\n+    }\n     let mut tests = Vec::new();\n     for name in &names {\n         let test = TestDescAndFn {\n@@ -717,21 +727,26 @@ pub fn test_metricmap_compare() {\n \n #[test]\n pub fn test_bench_once_no_iter() {\n-    fn f(_: &mut Bencher) {}\n-    bench::run_once(f);\n+    fn f(_: &mut Bencher) -> Result<(), String> {\n+        Ok(())\n+    }\n+    bench::run_once(f).unwrap();\n }\n \n #[test]\n pub fn test_bench_once_iter() {\n-    fn f(b: &mut Bencher) {\n-        b.iter(|| {})\n+    fn f(b: &mut Bencher) -> Result<(), String> {\n+        b.iter(|| {});\n+        Ok(())\n     }\n-    bench::run_once(f);\n+    bench::run_once(f).unwrap();\n }\n \n #[test]\n pub fn test_bench_no_iter() {\n-    fn f(_: &mut Bencher) {}\n+    fn f(_: &mut Bencher) -> Result<(), String> {\n+        Ok(())\n+    }\n \n     let (tx, rx) = channel();\n \n@@ -751,8 +766,9 @@ pub fn test_bench_no_iter() {\n \n #[test]\n pub fn test_bench_iter() {\n-    fn f(b: &mut Bencher) {\n-        b.iter(|| {})\n+    fn f(b: &mut Bencher) -> Result<(), String> {\n+        b.iter(|| {});\n+        Ok(())\n     }\n \n     let (tx, rx) = channel();\n@@ -821,3 +837,33 @@ fn should_sort_failures_before_printing_them() {\n     let bpos = s.find(\"b\").unwrap();\n     assert!(apos < bpos);\n }\n+\n+#[test]\n+#[cfg(not(target_os = \"emscripten\"))]\n+fn test_dyn_bench_returning_err_fails_when_run_as_test() {\n+    fn f(_: &mut Bencher) -> Result<(), String> {\n+        Result::Err(\"An error\".into())\n+    }\n+    let desc = TestDescAndFn {\n+        desc: TestDesc {\n+            name: StaticTestName(\"whatever\"),\n+            ignore: false,\n+            ignore_message: None,\n+            should_panic: ShouldPanic::No,\n+            compile_fail: false,\n+            no_run: false,\n+            test_type: TestType::Unknown,\n+        },\n+        testfn: DynBenchFn(Box::new(f)),\n+    };\n+    let (tx, rx) = channel();\n+    let notify = move |event: TestEvent| {\n+        if let TestEvent::TeResult(result) = event {\n+            tx.send(result).unwrap();\n+        }\n+        Ok(())\n+    };\n+    run_tests(&TestOpts { run_tests: true, ..TestOpts::new() }, vec![desc], notify).unwrap();\n+    let result = rx.recv().unwrap().result;\n+    assert_eq!(result, TrFailed);\n+}"}, {"sha": "888afff7921d99f43698988cefa9acecdc41d76d", "filename": "library/test/src/types.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39323a5877ee6b85e75c652c2518a97a1433a2dc/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39323a5877ee6b85e75c652c2518a97a1433a2dc/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=39323a5877ee6b85e75c652c2518a97a1433a2dc", "patch": "@@ -75,14 +75,15 @@ impl fmt::Display for TestName {\n }\n \n // A function that runs a test. If the function returns successfully,\n-// the test succeeds; if the function panics then the test fails. We\n-// may need to come up with a more clever definition of test in order\n-// to support isolation of tests into threads.\n+// the test succeeds; if the function panics or returns Result::Err\n+// then the test fails. We may need to come up with a more clever\n+// definition of test in order to support isolation of tests into\n+// threads.\n pub enum TestFn {\n-    StaticTestFn(fn()),\n-    StaticBenchFn(fn(&mut Bencher)),\n-    DynTestFn(Box<dyn FnOnce() + Send>),\n-    DynBenchFn(Box<dyn Fn(&mut Bencher) + Send>),\n+    StaticTestFn(fn() -> Result<(), String>),\n+    StaticBenchFn(fn(&mut Bencher) -> Result<(), String>),\n+    DynTestFn(Box<dyn FnOnce() -> Result<(), String> + Send>),\n+    DynBenchFn(Box<dyn Fn(&mut Bencher) -> Result<(), String> + Send>),\n }\n \n impl TestFn {"}, {"sha": "f4ec60735a8dd23000d055298f4b6bbf557694d4", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39323a5877ee6b85e75c652c2518a97a1433a2dc/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39323a5877ee6b85e75c652c2518a97a1433a2dc/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=39323a5877ee6b85e75c652c2518a97a1433a2dc", "patch": "@@ -1134,6 +1134,7 @@ impl Tester for Collector {\n \n                     panic::resume_unwind(Box::new(()));\n                 }\n+                Ok(())\n             })),\n         });\n     }"}, {"sha": "bf67e5a3f76acc13ab853d62a4c9e9c1fefa1e80", "filename": "src/test/ui/consts/constifconst-call-in-const-position.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/39323a5877ee6b85e75c652c2518a97a1433a2dc/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39323a5877ee6b85e75c652c2518a97a1433a2dc/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.rs?ref=39323a5877ee6b85e75c652c2518a97a1433a2dc", "patch": "@@ -0,0 +1,21 @@\n+// known-bug: #102498\n+\n+#![feature(const_trait_impl, generic_const_exprs)]\n+\n+pub trait Tr {\n+    fn a() -> usize;\n+}\n+\n+impl Tr for () {\n+    fn a() -> usize {\n+        1\n+    }\n+}\n+\n+const fn foo<T: ~const Tr>() -> [u8; T::a()] {\n+    [0; T::a()]\n+}\n+\n+fn main() {\n+    foo::<()>();\n+}"}, {"sha": "e3f67b4467867a1e8bc391df843b5505370922a8", "filename": "src/test/ui/consts/constifconst-call-in-const-position.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39323a5877ee6b85e75c652c2518a97a1433a2dc/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39323a5877ee6b85e75c652c2518a97a1433a2dc/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.stderr?ref=39323a5877ee6b85e75c652c2518a97a1433a2dc", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/constifconst-call-in-const-position.rs:3:30\n+   |\n+LL | #![feature(const_trait_impl, generic_const_exprs)]\n+   |                              ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0080]: evaluation of `foo::<()>::{constant#0}` failed\n+  --> $DIR/constifconst-call-in-const-position.rs:15:38\n+   |\n+LL | const fn foo<T: ~const Tr>() -> [u8; T::a()] {\n+   |                                      ^^^^^^ calling non-const function `<() as Tr>::a`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "7c1390cdc6446665472239b9a71bed85d62ef3c3", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39323a5877ee6b85e75c652c2518a97a1433a2dc/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39323a5877ee6b85e75c652c2518a97a1433a2dc/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=39323a5877ee6b85e75c652c2518a97a1433a2dc", "patch": "@@ -13,7 +13,7 @@ LL | | }\n note: required by a bound in `assert_test_result`\n   --> $SRC_DIR/test/src/lib.rs:LL:COL\n    |\n-LL | pub fn assert_test_result<T: Termination>(result: T) {\n+LL | pub fn assert_test_result<T: Termination>(result: T) -> Result<(), String> {\n    |                              ^^^^^^^^^^^ required by this bound in `assert_test_result`\n    = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "b48395035d4f09f87d2af83a3a939a7587e3890f", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39323a5877ee6b85e75c652c2518a97a1433a2dc/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39323a5877ee6b85e75c652c2518a97a1433a2dc/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=39323a5877ee6b85e75c652c2518a97a1433a2dc", "patch": "@@ -797,7 +797,10 @@ fn make_test_closure(\n     let config = config.clone();\n     let testpaths = testpaths.clone();\n     let revision = revision.cloned();\n-    test::DynTestFn(Box::new(move || runtest::run(config, &testpaths, revision.as_deref())))\n+    test::DynTestFn(Box::new(move || {\n+        runtest::run(config, &testpaths, revision.as_deref());\n+        Ok(())\n+    }))\n }\n \n /// Returns `true` if the given target is an Android target for the"}, {"sha": "d8b3903b98e7c59e2202b20d5b704e02886fcefc", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39323a5877ee6b85e75c652c2518a97a1433a2dc/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39323a5877ee6b85e75c652c2518a97a1433a2dc/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=39323a5877ee6b85e75c652c2518a97a1433a2dc", "patch": "@@ -538,7 +538,9 @@ fn map_lib_features(\n                 becoming_feature = None;\n                 if line.contains(\"rustc_const_unstable(\") {\n                     // `const fn` features are handled specially.\n-                    let feature_name = match find_attr_val(line, \"feature\") {\n+                    let feature_name = match find_attr_val(line, \"feature\").or_else(|| {\n+                        iter_lines.peek().and_then(|next| find_attr_val(next.1, \"feature\"))\n+                    }) {\n                         Some(name) => name,\n                         None => err!(\"malformed stability attribute: missing `feature` key\"),\n                     };"}]}