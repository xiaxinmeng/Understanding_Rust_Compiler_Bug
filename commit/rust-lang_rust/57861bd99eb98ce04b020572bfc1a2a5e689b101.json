{"sha": "57861bd99eb98ce04b020572bfc1a2a5e689b101", "node_id": "C_kwDOAAsO6NoAKDU3ODYxYmQ5OWViOThjZTA0YjAyMDU3MmJmYzFhMmE1ZTY4OWIxMDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-19T13:45:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-19T13:45:05Z"}, "message": "Auto merge of #12311 - Veykril:inlay-hints-tips, r=Veykril\n\ninternal: Improve inlay hint tooltips", "tree": {"sha": "88816aa5d2d92d34402de0e0d8a64a7b5e5f2d4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88816aa5d2d92d34402de0e0d8a64a7b5e5f2d4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57861bd99eb98ce04b020572bfc1a2a5e689b101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57861bd99eb98ce04b020572bfc1a2a5e689b101", "html_url": "https://github.com/rust-lang/rust/commit/57861bd99eb98ce04b020572bfc1a2a5e689b101", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57861bd99eb98ce04b020572bfc1a2a5e689b101/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f7d1a9d699ce7d30946f4ae26622b95e2c75372", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7d1a9d699ce7d30946f4ae26622b95e2c75372", "html_url": "https://github.com/rust-lang/rust/commit/4f7d1a9d699ce7d30946f4ae26622b95e2c75372"}, {"sha": "9ebb55d3544546ebcb92d42ad351d5837223aa6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ebb55d3544546ebcb92d42ad351d5837223aa6c", "html_url": "https://github.com/rust-lang/rust/commit/9ebb55d3544546ebcb92d42ad351d5837223aa6c"}], "stats": {"total": 290, "additions": 195, "deletions": 95}, "files": [{"sha": "3cb60d9e4464774fdec849421fb6b43a7034a01d", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 165, "deletions": 73, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/57861bd99eb98ce04b020572bfc1a2a5e689b101/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57861bd99eb98ce04b020572bfc1a2a5e689b101/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=57861bd99eb98ce04b020572bfc1a2a5e689b101", "patch": "@@ -57,19 +57,19 @@ pub enum InlayKind {\n     TypeHint,\n }\n \n-// FIXME: This should live somewhere more general\n-#[derive(Debug)]\n-pub enum RangeOrOffset {\n-    Range(TextRange),\n-    Offset(TextSize),\n-}\n-\n #[derive(Debug)]\n pub struct InlayHint {\n     pub range: TextRange,\n     pub kind: InlayKind,\n     pub label: String,\n-    pub hover_trigger: Option<RangeOrOffset>,\n+    pub tooltip: Option<InlayTooltip>,\n+}\n+\n+#[derive(Debug)]\n+pub enum InlayTooltip {\n+    String(String),\n+    HoverRanged(FileId, TextRange),\n+    HoverOffset(FileId, TextSize),\n }\n \n // Feature: Inlay Hints\n@@ -109,7 +109,7 @@ pub(crate) fn inlay_hints(\n \n     let mut acc = Vec::new();\n \n-    let hints = |node| hints(&mut acc, &sema, config, node);\n+    let hints = |node| hints(&mut acc, &sema, config, file_id, node);\n     match range_limit {\n         Some(FileRange { range, .. }) => match file.covering_element(range) {\n             NodeOrToken::Token(_) => return acc,\n@@ -128,24 +128,25 @@ fn hints(\n     hints: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n     config: &InlayHintsConfig,\n+    file_id: FileId,\n     node: SyntaxNode,\n ) {\n     let famous_defs = match sema.scope(&node) {\n         Some(it) => FamousDefs(sema, it.krate()),\n         None => return,\n     };\n \n-    closing_brace_hints(hints, sema, config, node.clone());\n+    closing_brace_hints(hints, sema, config, file_id, node.clone());\n     match_ast! {\n         match node {\n             ast::Expr(expr) => {\n-                chaining_hints(hints, sema, &famous_defs, config, &expr);\n+                chaining_hints(hints, sema, &famous_defs, config, file_id, &expr);\n                 match expr {\n                     ast::Expr::CallExpr(it) => param_name_hints(hints, sema, config, ast::Expr::from(it)),\n                     ast::Expr::MethodCallExpr(it) => {\n                         param_name_hints(hints, sema, config, ast::Expr::from(it))\n                     }\n-                    ast::Expr::ClosureExpr(it) => closure_ret_hints(hints, sema, &famous_defs, config, it),\n+                    ast::Expr::ClosureExpr(it) => closure_ret_hints(hints, sema, &famous_defs, config, file_id, it),\n                     // We could show reborrows for all expressions, but usually that is just noise to the user\n                     // and the main point here is to show why \"moving\" a mutable reference doesn't necessarily move it\n                     ast::Expr::PathExpr(_) => reborrow_hints(hints, sema, config, &expr),\n@@ -155,7 +156,7 @@ fn hints(\n             ast::Pat(it) => {\n                 binding_mode_hints(hints, sema, config, &it);\n                 if let ast::Pat::IdentPat(it) = it {\n-                    bind_pat_hints(hints, sema, config, &it);\n+                    bind_pat_hints(hints, sema, config, file_id, &it);\n                 }\n                 Some(())\n             },\n@@ -169,6 +170,7 @@ fn closing_brace_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n     config: &InlayHintsConfig,\n+    file_id: FileId,\n     node: SyntaxNode,\n ) -> Option<()> {\n     let min_lines = config.closing_brace_hints_min_lines?;\n@@ -263,7 +265,7 @@ fn closing_brace_hints(\n         range: closing_token.text_range(),\n         kind: InlayKind::ClosingBraceHint,\n         label,\n-        hover_trigger: name_offset.map(RangeOrOffset::Offset),\n+        tooltip: name_offset.map(|it| InlayTooltip::HoverOffset(file_id, it)),\n     });\n \n     None\n@@ -282,7 +284,7 @@ fn lifetime_fn_hints(\n         range: t.text_range(),\n         kind: InlayKind::LifetimeHint,\n         label,\n-        hover_trigger: None,\n+        tooltip: Some(InlayTooltip::String(\"Elided lifetime\".into())),\n     };\n \n     let param_list = func.param_list()?;\n@@ -428,20 +430,22 @@ fn lifetime_fn_hints(\n         (Some(gpl), allocated_lifetimes) => {\n             let angle_tok = gpl.l_angle_token()?;\n             let is_empty = gpl.generic_params().next().is_none();\n-            acc.push(mk_lt_hint(\n-                angle_tok,\n-                format!(\n+            acc.push(InlayHint {\n+                range: angle_tok.text_range(),\n+                kind: InlayKind::LifetimeHint,\n+                label: format!(\n                     \"{}{}\",\n                     allocated_lifetimes.iter().format(\", \"),\n                     if is_empty { \"\" } else { \", \" }\n                 ),\n-            ));\n+                tooltip: Some(InlayTooltip::String(\"Elided lifetimes\".into())),\n+            });\n         }\n         (None, allocated_lifetimes) => acc.push(InlayHint {\n             range: func.name()?.syntax().text_range(),\n             kind: InlayKind::GenericParamListHint,\n             label: format!(\"<{}>\", allocated_lifetimes.iter().format(\", \"),).into(),\n-            hover_trigger: None,\n+            tooltip: Some(InlayTooltip::String(\"Elided lifetimes\".into())),\n         }),\n     }\n     Some(())\n@@ -452,6 +456,7 @@ fn closure_ret_hints(\n     sema: &Semantics<RootDatabase>,\n     famous_defs: &FamousDefs,\n     config: &InlayHintsConfig,\n+    file_id: FileId,\n     closure: ast::ClosureExpr,\n ) -> Option<()> {\n     if !config.closure_return_type_hints {\n@@ -475,7 +480,7 @@ fn closure_ret_hints(\n         kind: InlayKind::ClosureReturnTypeHint,\n         label: hint_iterator(sema, &famous_defs, config, &ty)\n             .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string()),\n-        hover_trigger: None,\n+        tooltip: Some(InlayTooltip::HoverRanged(file_id, param_list.syntax().text_range())),\n     });\n     Some(())\n }\n@@ -502,7 +507,7 @@ fn reborrow_hints(\n         range: expr.syntax().text_range(),\n         kind: InlayKind::ImplicitReborrowHint,\n         label: label.to_string(),\n-        hover_trigger: None,\n+        tooltip: Some(InlayTooltip::String(\"Compiler inserted reborrow\".into())),\n     });\n     Some(())\n }\n@@ -512,6 +517,7 @@ fn chaining_hints(\n     sema: &Semantics<RootDatabase>,\n     famous_defs: &FamousDefs,\n     config: &InlayHintsConfig,\n+    file_id: FileId,\n     expr: &ast::Expr,\n ) -> Option<()> {\n     if !config.chaining_hints {\n@@ -561,7 +567,7 @@ fn chaining_hints(\n                 label: hint_iterator(sema, &famous_defs, config, &ty).unwrap_or_else(|| {\n                     ty.display_truncated(sema.db, config.max_length).to_string()\n                 }),\n-                hover_trigger: Some(RangeOrOffset::Range(expr.syntax().text_range())),\n+                tooltip: Some(InlayTooltip::HoverRanged(file_id, expr.syntax().text_range())),\n             });\n         }\n     }\n@@ -586,24 +592,35 @@ fn param_name_hints(\n         .filter_map(|((param, _ty), arg)| {\n             // Only annotate hints for expressions that exist in the original file\n             let range = sema.original_range_opt(arg.syntax())?;\n-            let param_name = match param? {\n-                Either::Left(_) => \"self\".to_string(),\n+            let (param_name, name_syntax) = match param.as_ref()? {\n+                Either::Left(pat) => (\"self\".to_string(), pat.name()),\n                 Either::Right(pat) => match pat {\n-                    ast::Pat::IdentPat(it) => it.name()?.to_string(),\n+                    ast::Pat::IdentPat(it) => (it.name()?.to_string(), it.name()),\n                     _ => return None,\n                 },\n             };\n-            Some((param_name, arg, range))\n+            Some((name_syntax, param_name, arg, range))\n         })\n-        .filter(|(param_name, arg, _)| {\n+        .filter(|(_, param_name, arg, _)| {\n             !should_hide_param_name_hint(sema, &callable, param_name, arg)\n         })\n-        .map(|(param_name, _, FileRange { range, .. })| InlayHint {\n-            range,\n-            kind: InlayKind::ParameterHint,\n-            label: param_name.into(),\n-            // FIXME: Show hover for parameter\n-            hover_trigger: None,\n+        .map(|(param, param_name, _, FileRange { range, .. })| {\n+            let mut tooltip = None;\n+            if let Some(name) = param {\n+                if let hir::CallableKind::Function(f) = callable.kind() {\n+                    // assert the file is cached so we can map out of macros\n+                    if let Some(_) = sema.source(f) {\n+                        tooltip = sema.original_range_opt(name.syntax());\n+                    }\n+                }\n+            }\n+\n+            InlayHint {\n+                range,\n+                kind: InlayKind::ParameterHint,\n+                label: param_name,\n+                tooltip: tooltip.map(|it| InlayTooltip::HoverOffset(it.file_id, it.range.start())),\n+            }\n         });\n \n     acc.extend(hints);\n@@ -633,7 +650,7 @@ fn binding_mode_hints(\n             range,\n             kind: InlayKind::BindingModeHint,\n             label: r.to_string(),\n-            hover_trigger: None,\n+            tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n         });\n     });\n     match pat {\n@@ -648,7 +665,7 @@ fn binding_mode_hints(\n                 range,\n                 kind: InlayKind::BindingModeHint,\n                 label: bm.to_string(),\n-                hover_trigger: None,\n+                tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n             });\n         }\n         _ => (),\n@@ -661,6 +678,7 @@ fn bind_pat_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n     config: &InlayHintsConfig,\n+    file_id: FileId,\n     pat: &ast::IdentPat,\n ) -> Option<()> {\n     if !config.type_hints {\n@@ -699,7 +717,10 @@ fn bind_pat_hints(\n         },\n         kind: InlayKind::TypeHint,\n         label,\n-        hover_trigger: pat.name().map(|it| it.syntax().text_range()).map(RangeOrOffset::Range),\n+        tooltip: pat\n+            .name()\n+            .map(|it| it.syntax().text_range())\n+            .map(|it| InlayTooltip::HoverRanged(file_id, it)),\n     });\n \n     Some(())\n@@ -873,7 +894,7 @@ fn should_hide_param_name_hint(\n     // These are to be tested in the `parameter_hint_heuristics` test\n     // hide when:\n     // - the parameter name is a suffix of the function's name\n-    // - the argument is an enum whose name is equal to the parameter\n+    // - the argument is a qualified constructing or call expression where the qualifier is an ADT\n     // - exact argument<->parameter match(ignoring leading underscore) or parameter is a prefix/suffix\n     //   of argument with _ splitting it off\n     // - param starts with `ra_fixture`\n@@ -894,10 +915,10 @@ fn should_hide_param_name_hint(\n     };\n     let fn_name = fn_name.as_deref();\n     is_param_name_suffix_of_fn_name(param_name, callable, fn_name)\n-        || is_enum_name_similar_to_param_name(sema, argument, param_name)\n         || is_argument_similar_to_param_name(argument, param_name)\n         || param_name.starts_with(\"ra_fixture\")\n         || (callable.n_params() == 1 && is_obvious_param(param_name))\n+        || is_adt_constructor_similar_to_param_name(sema, argument, param_name)\n }\n \n fn is_argument_similar_to_param_name(argument: &ast::Expr, param_name: &str) -> bool {\n@@ -953,17 +974,43 @@ fn is_param_name_suffix_of_fn_name(\n     }\n }\n \n-fn is_enum_name_similar_to_param_name(\n+fn is_adt_constructor_similar_to_param_name(\n     sema: &Semantics<RootDatabase>,\n     argument: &ast::Expr,\n     param_name: &str,\n ) -> bool {\n-    match sema.type_of_expr(argument).and_then(|t| t.original.as_adt()) {\n-        Some(hir::Adt::Enum(e)) => {\n-            to_lower_snake_case(&e.name(sema.db).to_smol_str()) == param_name\n+    let path = match argument {\n+        ast::Expr::CallExpr(c) => c.expr().and_then(|e| match e {\n+            ast::Expr::PathExpr(p) => p.path(),\n+            _ => None,\n+        }),\n+        ast::Expr::PathExpr(p) => p.path(),\n+        ast::Expr::RecordExpr(r) => r.path(),\n+        _ => return false,\n+    };\n+    let path = match path {\n+        Some(it) => it,\n+        None => return false,\n+    };\n+    (|| match sema.resolve_path(&path)? {\n+        hir::PathResolution::Def(hir::ModuleDef::Adt(_)) => {\n+            Some(to_lower_snake_case(&path.segment()?.name_ref()?.text()) == param_name)\n         }\n-        _ => false,\n-    }\n+        hir::PathResolution::Def(hir::ModuleDef::Function(_) | hir::ModuleDef::Variant(_)) => {\n+            if to_lower_snake_case(&path.segment()?.name_ref()?.text()) == param_name {\n+                return Some(true);\n+            }\n+            let qual = path.qualifier()?;\n+            match sema.resolve_path(&qual)? {\n+                hir::PathResolution::Def(hir::ModuleDef::Adt(_)) => {\n+                    Some(to_lower_snake_case(&qual.segment()?.name_ref()?.text()) == param_name)\n+                }\n+                _ => None,\n+            }\n+        }\n+        _ => None,\n+    })()\n+    .unwrap_or(false)\n }\n \n fn get_string_representation(expr: &ast::Expr) -> Option<String> {\n@@ -1288,7 +1335,6 @@ fn main() {\n                //^^ self  ^^^^ param\n     Test::from_syntax(\n         FileId {},\n-      //^^^^^^^^^ file_id\n         \"impl\".into(),\n       //^^^^^^^^^^^^^ name\n         None,\n@@ -2012,8 +2058,11 @@ fn main() {\n                         range: 147..172,\n                         kind: ChainingHint,\n                         label: \"B\",\n-                        hover_trigger: Some(\n-                            Range(\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n                                 147..172,\n                             ),\n                         ),\n@@ -2022,8 +2071,11 @@ fn main() {\n                         range: 147..154,\n                         kind: ChainingHint,\n                         label: \"A\",\n-                        hover_trigger: Some(\n-                            Range(\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n                                 147..154,\n                             ),\n                         ),\n@@ -2077,8 +2129,11 @@ fn main() {\n                         range: 143..190,\n                         kind: ChainingHint,\n                         label: \"C\",\n-                        hover_trigger: Some(\n-                            Range(\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n                                 143..190,\n                             ),\n                         ),\n@@ -2087,8 +2142,11 @@ fn main() {\n                         range: 143..179,\n                         kind: ChainingHint,\n                         label: \"B\",\n-                        hover_trigger: Some(\n-                            Range(\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n                                 143..179,\n                             ),\n                         ),\n@@ -2127,8 +2185,11 @@ fn main() {\n                         range: 246..283,\n                         kind: ChainingHint,\n                         label: \"B<X<i32, bool>>\",\n-                        hover_trigger: Some(\n-                            Range(\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n                                 246..283,\n                             ),\n                         ),\n@@ -2137,8 +2198,11 @@ fn main() {\n                         range: 246..265,\n                         kind: ChainingHint,\n                         label: \"A<X<i32, bool>>\",\n-                        hover_trigger: Some(\n-                            Range(\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n                                 246..265,\n                             ),\n                         ),\n@@ -2179,8 +2243,11 @@ fn main() {\n                         range: 174..241,\n                         kind: ChainingHint,\n                         label: \"impl Iterator<Item = ()>\",\n-                        hover_trigger: Some(\n-                            Range(\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n                                 174..241,\n                             ),\n                         ),\n@@ -2189,8 +2256,11 @@ fn main() {\n                         range: 174..224,\n                         kind: ChainingHint,\n                         label: \"impl Iterator<Item = ()>\",\n-                        hover_trigger: Some(\n-                            Range(\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n                                 174..224,\n                             ),\n                         ),\n@@ -2199,8 +2269,11 @@ fn main() {\n                         range: 174..206,\n                         kind: ChainingHint,\n                         label: \"impl Iterator<Item = ()>\",\n-                        hover_trigger: Some(\n-                            Range(\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n                                 174..206,\n                             ),\n                         ),\n@@ -2209,8 +2282,11 @@ fn main() {\n                         range: 174..189,\n                         kind: ChainingHint,\n                         label: \"&mut MyIter\",\n-                        hover_trigger: Some(\n-                            Range(\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n                                 174..189,\n                             ),\n                         ),\n@@ -2248,8 +2324,11 @@ fn main() {\n                         range: 124..130,\n                         kind: TypeHint,\n                         label: \"Struct\",\n-                        hover_trigger: Some(\n-                            Range(\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n                                 124..130,\n                             ),\n                         ),\n@@ -2258,8 +2337,11 @@ fn main() {\n                         range: 145..185,\n                         kind: ChainingHint,\n                         label: \"Struct\",\n-                        hover_trigger: Some(\n-                            Range(\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n                                 145..185,\n                             ),\n                         ),\n@@ -2268,8 +2350,11 @@ fn main() {\n                         range: 145..168,\n                         kind: ChainingHint,\n                         label: \"Struct\",\n-                        hover_trigger: Some(\n-                            Range(\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n                                 145..168,\n                             ),\n                         ),\n@@ -2278,7 +2363,14 @@ fn main() {\n                         range: 222..228,\n                         kind: ParameterHint,\n                         label: \"self\",\n-                        hover_trigger: None,\n+                        tooltip: Some(\n+                            HoverOffset(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                42,\n+                            ),\n+                        ),\n                     },\n                 ]\n             \"#]],"}, {"sha": "0d87f4fcfaf474ba91af8dd3dfd7620c5e565623", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57861bd99eb98ce04b020572bfc1a2a5e689b101/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57861bd99eb98ce04b020572bfc1a2a5e689b101/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=57861bd99eb98ce04b020572bfc1a2a5e689b101", "patch": "@@ -81,7 +81,7 @@ pub use crate::{\n     highlight_related::{HighlightRelatedConfig, HighlightedRange},\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{\n-        InlayHint, InlayHintsConfig, InlayKind, LifetimeElisionHints, RangeOrOffset, ReborrowHints,\n+        InlayHint, InlayHintsConfig, InlayKind, InlayTooltip, LifetimeElisionHints, ReborrowHints,\n     },\n     join_lines::JoinLinesConfig,\n     markup::Markup,"}, {"sha": "261c02816d59f72bc8bf21ba63494d05984a3c3e", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57861bd99eb98ce04b020572bfc1a2a5e689b101/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57861bd99eb98ce04b020572bfc1a2a5e689b101/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=57861bd99eb98ce04b020572bfc1a2a5e689b101", "patch": "@@ -1344,12 +1344,7 @@ pub(crate) fn handle_inlay_hints(\n             .inlay_hints(&inlay_hints_config, file_id, Some(range))?\n             .into_iter()\n             .map(|it| {\n-                to_proto::inlay_hint(\n-                    &line_index,\n-                    &params.text_document,\n-                    inlay_hints_config.render_colons,\n-                    it,\n-                )\n+                to_proto::inlay_hint(&snap, &line_index, inlay_hints_config.render_colons, it)\n             })\n             .collect(),\n     ))"}, {"sha": "f91ab6ea79b35b616851d241f444559a250def7d", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/57861bd99eb98ce04b020572bfc1a2a5e689b101/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57861bd99eb98ce04b020572bfc1a2a5e689b101/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=57861bd99eb98ce04b020572bfc1a2a5e689b101", "patch": "@@ -415,8 +415,8 @@ pub(crate) fn signature_help(\n }\n \n pub(crate) fn inlay_hint(\n+    snap: &GlobalStateSnapshot,\n     line_index: &LineIndex,\n-    text_document: &lsp_types::TextDocumentIdentifier,\n     render_colons: bool,\n     inlay_hint: InlayHint,\n ) -> lsp_types::InlayHint {\n@@ -472,20 +472,33 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ClosingBraceHint => None,\n         },\n         text_edits: None,\n-        tooltip: Some(lsp_types::InlayHintTooltip::String(inlay_hint.label)),\n-        data: inlay_hint.hover_trigger.map(|range_or_offset| {\n-            to_value(lsp_ext::InlayHintResolveData {\n-                text_document: text_document.clone(),\n-                position: match range_or_offset {\n-                    ide::RangeOrOffset::Offset(offset) => {\n-                        lsp_ext::PositionOrRange::Position(position(line_index, offset))\n-                    }\n-                    ide::RangeOrOffset::Range(text_range) => {\n-                        lsp_ext::PositionOrRange::Range(range(line_index, text_range))\n-                    }\n-                },\n-            })\n-            .unwrap()\n+        data: (|| match inlay_hint.tooltip {\n+            Some(ide::InlayTooltip::HoverOffset(file_id, offset)) => {\n+                let uri = url(snap, file_id);\n+                let line_index = snap.file_line_index(file_id).ok()?;\n+\n+                let text_document = lsp_types::TextDocumentIdentifier { uri };\n+                to_value(lsp_ext::InlayHintResolveData {\n+                    text_document,\n+                    position: lsp_ext::PositionOrRange::Position(position(&line_index, offset)),\n+                })\n+                .ok()\n+            }\n+            Some(ide::InlayTooltip::HoverRanged(file_id, text_range)) => {\n+                let uri = url(snap, file_id);\n+                let text_document = lsp_types::TextDocumentIdentifier { uri };\n+                let line_index = snap.file_line_index(file_id).ok()?;\n+                to_value(lsp_ext::InlayHintResolveData {\n+                    text_document,\n+                    position: lsp_ext::PositionOrRange::Range(range(&line_index, text_range)),\n+                })\n+                .ok()\n+            }\n+            _ => None,\n+        })(),\n+        tooltip: Some(match inlay_hint.tooltip {\n+            Some(ide::InlayTooltip::String(s)) => lsp_types::InlayHintTooltip::String(s),\n+            _ => lsp_types::InlayHintTooltip::String(inlay_hint.label),\n         }),\n     }\n }"}]}