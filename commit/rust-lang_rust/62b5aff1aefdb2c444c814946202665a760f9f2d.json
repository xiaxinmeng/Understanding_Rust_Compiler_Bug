{"sha": "62b5aff1aefdb2c444c814946202665a760f9f2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYjVhZmYxYWVmZGIyYzQ0NGM4MTQ5NDYyMDI2NjVhNzYwZjlmMmQ=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-09T17:29:08Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-11T22:18:51Z"}, "message": "Make query helpers on `TyCtxt` take `impl Into<DefId>`", "tree": {"sha": "9813a2e7abce3009f814078cdc79998b031657bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9813a2e7abce3009f814078cdc79998b031657bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62b5aff1aefdb2c444c814946202665a760f9f2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62b5aff1aefdb2c444c814946202665a760f9f2d", "html_url": "https://github.com/rust-lang/rust/commit/62b5aff1aefdb2c444c814946202665a760f9f2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62b5aff1aefdb2c444c814946202665a760f9f2d/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e82734e56b2a50d38e0937d08f559d15dbe8e46b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e82734e56b2a50d38e0937d08f559d15dbe8e46b", "html_url": "https://github.com/rust-lang/rust/commit/e82734e56b2a50d38e0937d08f559d15dbe8e46b"}], "stats": {"total": 89, "additions": 66, "deletions": 23}, "files": [{"sha": "612507711fdb87f52f201e438bde5c19e3ab1f42", "filename": "src/librustc_middle/ty/query/plumbing.rs", "status": "modified", "additions": 66, "deletions": 23, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/62b5aff1aefdb2c444c814946202665a760f9f2d/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b5aff1aefdb2c444c814946202665a760f9f2d/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs?ref=62b5aff1aefdb2c444c814946202665a760f9f2d", "patch": "@@ -234,18 +234,73 @@ macro_rules! hash_result {\n \n macro_rules! define_queries {\n     (<$tcx:tt> $($category:tt {\n-        $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident: $node:ident($K:ty) -> $V:ty,)*\n+        $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident: $node:ident($($K:tt)*) -> $V:ty,)*\n     },)*) => {\n         define_queries_inner! { <$tcx>\n-            $($( $(#[$attr])* category<$category> [$($modifiers)*] fn $name: $node($K) -> $V,)*)*\n+            $($( $(#[$attr])* category<$category> [$($modifiers)*] fn $name: $node($($K)*) -> $V,)*)*\n         }\n     }\n }\n \n+macro_rules! define_query_helper {\n+    (TyCtxtAt<$tcx:tt>, $(#[$attr:meta])* $name:ident(DefId) -> $V:ty) => {\n+        $(#[$attr])*\n+        #[inline(always)]\n+        pub fn $name(self, key: impl Into<DefId>) -> $V {\n+            fn mono(this: TyCtxtAt<$tcx>, key: DefId) -> $V {\n+                get_query::<queries::$name<'_>, _>(this.tcx, this.span, key)\n+            }\n+\n+            mono(self, key.into())\n+        }\n+    };\n+    (TyCtxtAt<$tcx:tt>, $(#[$attr:meta])* $name:ident($K:ty) -> $V:ty) => {\n+        $(#[$attr])*\n+        #[inline(always)]\n+        pub fn $name(self, key: $K) -> $V {\n+            get_query::<queries::$name<'_>, _>(self.tcx, self.span, key)\n+        }\n+    };\n+\n+    (TyCtxt<$tcx:tt>, $(#[$attr:meta])* $name:ident(DefId) -> $V:ty) => {\n+        $(#[$attr])*\n+        #[inline(always)]\n+        pub fn $name(self, key: impl Into<DefId>) -> $V {\n+            self.at(DUMMY_SP).$name(key)\n+        }\n+    };\n+    (TyCtxt<$tcx:tt>, $(#[$attr:meta])* $name:ident($K:ty) -> $V:ty) => {\n+        $(#[$attr])*\n+        #[inline(always)]\n+        pub fn $name(self, key: $K) -> $V {\n+            self.at(DUMMY_SP).$name(key)\n+        }\n+    };\n+\n+    (TyCtxtEnsure<$tcx:tt>, $(#[$attr:meta])* $name:ident(DefId) -> $V:ty) => {\n+        $(#[$attr])*\n+        #[inline(always)]\n+        pub fn $name(self, key: impl Into<DefId>) {\n+            fn mono(this: TyCtxtEnsure<$tcx>, key: DefId) {\n+                ensure_query::<queries::$name<'_>, _>(this.tcx, key)\n+            }\n+\n+            mono(self, key.into())\n+        }\n+    };\n+    (TyCtxtEnsure<$tcx:tt>, $(#[$attr:meta])* $name:ident($K:ty) -> $V:ty) => {\n+        $(#[$attr])*\n+        #[inline(always)]\n+        pub fn $name(self, key: $K) {\n+            ensure_query::<queries::$name<'_>, _>(self.tcx, key)\n+        }\n+    };\n+}\n+\n macro_rules! define_queries_inner {\n     (<$tcx:tt>\n      $($(#[$attr:meta])* category<$category:tt>\n-        [$($modifiers:tt)*] fn $name:ident: $node:ident($K:ty) -> $V:ty,)*) => {\n+        [$($modifiers:tt)*] fn $name:ident: $node:ident($($K:tt)*) -> $V:ty,)*) => {\n \n         use std::mem;\n         use crate::{\n@@ -263,7 +318,7 @@ macro_rules! define_queries_inner {\n         #[allow(nonstandard_style)]\n         #[derive(Clone, Debug)]\n         pub enum Query<$tcx> {\n-            $($(#[$attr])* $name($K)),*\n+            $($(#[$attr])* $name($($K)*)),*\n         }\n \n         impl<$tcx> Query<$tcx> {\n@@ -321,7 +376,7 @@ macro_rules! define_queries_inner {\n         }\n \n         $(impl<$tcx> QueryConfig<TyCtxt<$tcx>> for queries::$name<$tcx> {\n-            type Key = $K;\n+            type Key = $($K)*;\n             type Value = $V;\n             const NAME: &'static str = stringify!($name);\n             const CATEGORY: ProfileCategory = $category;\n@@ -332,7 +387,7 @@ macro_rules! define_queries_inner {\n             const EVAL_ALWAYS: bool = is_eval_always!([$($modifiers)*]);\n             const DEP_KIND: dep_graph::DepKind = dep_graph::DepKind::$node;\n \n-            type Cache = query_storage!([$($modifiers)*][$K, $V]);\n+            type Cache = query_storage!([$($modifiers)*][$($K)*, $V]);\n \n             #[inline(always)]\n             fn query_state<'a>(tcx: TyCtxt<$tcx>) -> &'a QueryState<TyCtxt<$tcx>, Self::Cache> {\n@@ -377,12 +432,8 @@ macro_rules! define_queries_inner {\n             pub tcx: TyCtxt<'tcx>,\n         }\n \n-        impl TyCtxtEnsure<$tcx> {\n-            $($(#[$attr])*\n-            #[inline(always)]\n-            pub fn $name(self, key: $K) {\n-                ensure_query::<queries::$name<'_>, _>(self.tcx, key)\n-            })*\n+        impl TyCtxtEnsure<'tcx> {\n+            $( define_query_helper!(TyCtxtEnsure<'tcx>, $(#[$attr])* $name($($K)*) -> $V); )*\n         }\n \n         #[derive(Copy, Clone)]\n@@ -419,11 +470,7 @@ macro_rules! define_queries_inner {\n                 }\n             }\n \n-            $($(#[$attr])*\n-            #[inline(always)]\n-            pub fn $name(self, key: $K) -> $V {\n-                self.at(DUMMY_SP).$name(key)\n-            })*\n+            $( define_query_helper!(TyCtxt<$tcx>, $(#[$attr])* $name($($K)*) -> $V); )*\n \n             /// All self-profiling events generated by the query engine use\n             /// virtual `StringId`s for their `event_id`. This method makes all\n@@ -456,16 +503,12 @@ macro_rules! define_queries_inner {\n         }\n \n         impl TyCtxtAt<$tcx> {\n-            $($(#[$attr])*\n-            #[inline(always)]\n-            pub fn $name(self, key: $K) -> $V {\n-                get_query::<queries::$name<'_>, _>(self.tcx, self.span, key)\n-            })*\n+            $( define_query_helper!(TyCtxtAt<$tcx>, $(#[$attr])* $name($($K)*) -> $V); )*\n         }\n \n         define_provider_struct! {\n             tcx: $tcx,\n-            input: ($(([$($modifiers)*] [$name] [$K] [$V]))*)\n+            input: ($(([$($modifiers)*] [$name] [$($K)*] [$V]))*)\n         }\n \n         impl<$tcx> Copy for Providers<$tcx> {}"}]}