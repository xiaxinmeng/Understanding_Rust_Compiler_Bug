{"sha": "d6ca34c9d26d03ed098ee472530d16994f8bfa29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2Y2EzNGM5ZDI2ZDAzZWQwOThlZTQ3MjUzMGQxNjk5NGY4YmZhMjk=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-14T13:58:22Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-27T10:28:54Z"}, "message": "Use `Symbol` more in lint APIs", "tree": {"sha": "6dc415f9f0ed43f2aa9c9603ac02f6d30b36ccb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dc415f9f0ed43f2aa9c9603ac02f6d30b36ccb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6ca34c9d26d03ed098ee472530d16994f8bfa29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ca34c9d26d03ed098ee472530d16994f8bfa29", "html_url": "https://github.com/rust-lang/rust/commit/d6ca34c9d26d03ed098ee472530d16994f8bfa29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6ca34c9d26d03ed098ee472530d16994f8bfa29/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab7cf71d4c6dd1696cb0eb52ad172bce296578cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7cf71d4c6dd1696cb0eb52ad172bce296578cc", "html_url": "https://github.com/rust-lang/rust/commit/ab7cf71d4c6dd1696cb0eb52ad172bce296578cc"}], "stats": {"total": 70, "additions": 43, "deletions": 27}, "files": [{"sha": "c6583dd7a27b707cd1057dc24b9804f6a96ade1c", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d6ca34c9d26d03ed098ee472530d16994f8bfa29/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ca34c9d26d03ed098ee472530d16994f8bfa29/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=d6ca34c9d26d03ed098ee472530d16994f8bfa29", "patch": "@@ -759,35 +759,35 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n     /// # Examples\n     ///\n     /// ```rust,ignore (no context or def id available)\n-    /// if cx.match_def_path(def_id, &[\"core\", \"option\", \"Option\"]) {\n+    /// if cx.match_def_path(def_id, &[sym::core, sym::option, sym::Option]) {\n     ///     // The given `def_id` is that of an `Option` type\n     /// }\n     /// ```\n-    pub fn match_def_path(&self, def_id: DefId, path: &[&str]) -> bool {\n+    pub fn match_def_path(&self, def_id: DefId, path: &[Symbol]) -> bool {\n         let names = self.get_def_path(def_id);\n \n-        names.len() == path.len() && names.into_iter().zip(path.iter()).all(|(a, &b)| *a == *b)\n+        names.len() == path.len() && names.into_iter().zip(path.iter()).all(|(a, &b)| a == b)\n     }\n \n-    /// Gets the absolute path of `def_id` as a vector of `&str`.\n+    /// Gets the absolute path of `def_id` as a vector of `Symbol`.\n     ///\n     /// # Examples\n     ///\n     /// ```rust,ignore (no context or def id available)\n     /// let def_path = cx.get_def_path(def_id);\n-    /// if let &[\"core\", \"option\", \"Option\"] = &def_path[..] {\n+    /// if let &[sym::core, sym::option, sym::Option] = &def_path[..] {\n     ///     // The given `def_id` is that of an `Option` type\n     /// }\n     /// ```\n-    pub fn get_def_path(&self, def_id: DefId) -> Vec<LocalInternedString> {\n+    pub fn get_def_path(&self, def_id: DefId) -> Vec<Symbol> {\n         pub struct AbsolutePathPrinter<'a, 'tcx> {\n             pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n \n         impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'_, 'tcx> {\n             type Error = !;\n \n-            type Path = Vec<LocalInternedString>;\n+            type Path = Vec<Symbol>;\n             type Region = ();\n             type Type = ();\n             type DynExistential = ();\n@@ -820,14 +820,14 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n             }\n \n             fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n-                Ok(vec![self.tcx.original_crate_name(cnum).as_str()])\n+                Ok(vec![self.tcx.original_crate_name(cnum)])\n             }\n \n             fn path_qualified(\n                 self,\n                 self_ty: Ty<'tcx>,\n                 trait_ref: Option<ty::TraitRef<'tcx>>,\n-                ) -> Result<Self::Path, Self::Error> {\n+            ) -> Result<Self::Path, Self::Error> {\n                 if trait_ref.is_none() {\n                     if let ty::Adt(def, substs) = self_ty.sty {\n                         return self.print_def_path(def.did, substs);\n@@ -836,8 +836,8 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n \n                 // This shouldn't ever be needed, but just in case:\n                 Ok(vec![match trait_ref {\n-                    Some(trait_ref) => LocalInternedString::intern(&format!(\"{:?}\", trait_ref)),\n-                    None => LocalInternedString::intern(&format!(\"<{}>\", self_ty)),\n+                    Some(trait_ref) => Symbol::intern(&format!(\"{:?}\", trait_ref)),\n+                    None => Symbol::intern(&format!(\"<{}>\", self_ty)),\n                 }])\n             }\n \n@@ -847,16 +847,16 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n                 _disambiguated_data: &DisambiguatedDefPathData,\n                 self_ty: Ty<'tcx>,\n                 trait_ref: Option<ty::TraitRef<'tcx>>,\n-                ) -> Result<Self::Path, Self::Error> {\n+            ) -> Result<Self::Path, Self::Error> {\n                 let mut path = print_prefix(self)?;\n \n                 // This shouldn't ever be needed, but just in case:\n                 path.push(match trait_ref {\n                     Some(trait_ref) => {\n-                        LocalInternedString::intern(&format!(\"<impl {} for {}>\", trait_ref,\n+                        Symbol::intern(&format!(\"<impl {} for {}>\", trait_ref,\n                                                     self_ty))\n                     },\n-                    None => LocalInternedString::intern(&format!(\"<impl {}>\", self_ty)),\n+                    None => Symbol::intern(&format!(\"<impl {}>\", self_ty)),\n                 });\n \n                 Ok(path)\n@@ -866,7 +866,7 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n                 self,\n                 print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n                 disambiguated_data: &DisambiguatedDefPathData,\n-                ) -> Result<Self::Path, Self::Error> {\n+            ) -> Result<Self::Path, Self::Error> {\n                 let mut path = print_prefix(self)?;\n \n                 // Skip `::{{constructor}}` on tuple/unit structs.\n@@ -875,15 +875,15 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n                     _ => {}\n                 }\n \n-                path.push(disambiguated_data.data.as_interned_str().as_str());\n+                path.push(disambiguated_data.data.as_interned_str().as_symbol());\n                 Ok(path)\n             }\n \n             fn path_generic_args(\n                 self,\n                 print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n                 _args: &[Kind<'tcx>],\n-                ) -> Result<Self::Path, Self::Error> {\n+            ) -> Result<Self::Path, Self::Error> {\n                 print_prefix(self)\n             }\n         }"}, {"sha": "e953c084599631e28d74136bde4b31e1c0babde9", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d6ca34c9d26d03ed098ee472530d16994f8bfa29/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ca34c9d26d03ed098ee472530d16994f8bfa29/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=d6ca34c9d26d03ed098ee472530d16994f8bfa29", "patch": "@@ -8,6 +8,7 @@ use crate::lint::{\n use errors::Applicability;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::Ident;\n+use syntax::symbol::{sym, Symbol};\n \n declare_lint! {\n     pub DEFAULT_HASH_TYPES,\n@@ -16,14 +17,16 @@ declare_lint! {\n }\n \n pub struct DefaultHashTypes {\n-    map: FxHashMap<String, String>,\n+    map: FxHashMap<Symbol, Symbol>,\n }\n \n impl DefaultHashTypes {\n+    // we are allowed to use `HashMap` and `HashSet` as identifiers for implementing the lint itself\n+    #[allow(internal)]\n     pub fn new() -> Self {\n         let mut map = FxHashMap::default();\n-        map.insert(\"HashMap\".to_string(), \"FxHashMap\".to_string());\n-        map.insert(\"HashSet\".to_string(), \"FxHashSet\".to_string());\n+        map.insert(sym::HashMap, sym::FxHashMap);\n+        map.insert(sym::HashSet, sym::FxHashSet);\n         Self { map }\n     }\n }\n@@ -32,11 +35,10 @@ impl_lint_pass!(DefaultHashTypes => [DEFAULT_HASH_TYPES]);\n \n impl EarlyLintPass for DefaultHashTypes {\n     fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n-        let ident_string = ident.to_string();\n-        if let Some(replace) = self.map.get(&ident_string) {\n+        if let Some(replace) = self.map.get(&ident.name) {\n             let msg = format!(\n                 \"Prefer {} over {}, it has better performance\",\n-                replace, ident_string\n+                replace, ident\n             );\n             let mut db = cx.struct_span_lint(DEFAULT_HASH_TYPES, ident.span, &msg);\n             db.span_suggestion(\n@@ -169,25 +171,29 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyTyKind {\n }\n \n fn lint_ty_kind_usage(cx: &LateContext<'_, '_>, segment: &PathSegment) -> bool {\n-    if segment.ident.as_str() == \"TyKind\" {\n+    if segment.ident.name == sym::TyKind {\n         if let Some(res) = segment.res {\n             if let Some(did) = res.opt_def_id() {\n-                return cx.match_def_path(did, &[\"rustc\", \"ty\", \"sty\", \"TyKind\"]);\n+                return cx.match_def_path(did, TYKIND_PATH);\n             }\n         }\n     }\n \n     false\n }\n \n+const TYKIND_PATH: &[Symbol] = &[sym::rustc, sym::ty, sym::sty, sym::TyKind];\n+const TY_PATH: &[Symbol] = &[sym::rustc, sym::ty, sym::Ty];\n+const TYCTXT_PATH: &[Symbol] = &[sym::rustc, sym::ty, sym::context, sym::TyCtxt];\n+\n fn is_ty_or_ty_ctxt(cx: &LateContext<'_, '_>, ty: &Ty) -> Option<String> {\n     match &ty.node {\n         TyKind::Path(qpath) => {\n             if let QPath::Resolved(_, path) = qpath {\n                 let did = path.res.opt_def_id()?;\n-                if cx.match_def_path(did, &[\"rustc\", \"ty\", \"Ty\"]) {\n+                if cx.match_def_path(did, TY_PATH) {\n                     return Some(format!(\"Ty{}\", gen_args(path.segments.last().unwrap())));\n-                } else if cx.match_def_path(did, &[\"rustc\", \"ty\", \"context\", \"TyCtxt\"]) {\n+                } else if cx.match_def_path(did, TYCTXT_PATH) {\n                     return Some(format!(\"TyCtxt{}\", gen_args(path.segments.last().unwrap())));\n                 }\n             }"}, {"sha": "8847e94127be6db5f6439dd47037bdbb2d1821be", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6ca34c9d26d03ed098ee472530d16994f8bfa29/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ca34c9d26d03ed098ee472530d16994f8bfa29/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=d6ca34c9d26d03ed098ee472530d16994f8bfa29", "patch": "@@ -194,6 +194,7 @@ symbols! {\n         const_raw_ptr_to_usize_cast,\n         const_transmute,\n         contents,\n+        context,\n         convert,\n         copy_closures,\n         core,\n@@ -282,6 +283,8 @@ symbols! {\n         fundamental,\n         future,\n         Future,\n+        FxHashSet,\n+        FxHashMap,\n         gen_future,\n         generators,\n         generic_associated_types,\n@@ -291,6 +294,8 @@ symbols! {\n         globs,\n         hash,\n         Hash,\n+        HashSet,\n+        HashMap,\n         hexagon_target_feature,\n         hidden,\n         homogeneous_aggregate,\n@@ -505,6 +510,7 @@ symbols! {\n         rust_2015_preview,\n         rust_2018_preview,\n         rust_begin_unwind,\n+        rustc,\n         rustc_allocator_nounwind,\n         rustc_allow_const_fn_ptr,\n         rustc_args_required_const,\n@@ -590,6 +596,7 @@ symbols! {\n         struct_inherit,\n         structural_match,\n         struct_variant,\n+        sty,\n         suggestion,\n         target_feature,\n         target_has_atomic,\n@@ -618,7 +625,10 @@ symbols! {\n         try_trait,\n         tt,\n         tuple_indexing,\n+        Ty,\n         ty,\n+        TyCtxt,\n+        TyKind,\n         type_alias_enum_variants,\n         type_ascription,\n         type_length_limit,"}]}