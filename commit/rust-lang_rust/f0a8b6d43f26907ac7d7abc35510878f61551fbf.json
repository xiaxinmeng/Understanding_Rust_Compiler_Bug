{"sha": "f0a8b6d43f26907ac7d7abc35510878f61551fbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYThiNmQ0M2YyNjkwN2FjN2Q3YWJjMzU1MTA4NzhmNjE1NTFmYmY=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-02T05:46:39Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-13T13:37:09Z"}, "message": "Minor fixups based on @eddyb's feedback\n\nMainly, remove mk_empty() method and replace with tcx.types.empty", "tree": {"sha": "fb4921c105c71850b888b3dfcf06d833e8532829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb4921c105c71850b888b3dfcf06d833e8532829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0a8b6d43f26907ac7d7abc35510878f61551fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0a8b6d43f26907ac7d7abc35510878f61551fbf", "html_url": "https://github.com/rust-lang/rust/commit/f0a8b6d43f26907ac7d7abc35510878f61551fbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0a8b6d43f26907ac7d7abc35510878f61551fbf/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5096a8c5c01f8d1d7edece23bab6898bd3016f2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5096a8c5c01f8d1d7edece23bab6898bd3016f2c", "html_url": "https://github.com/rust-lang/rust/commit/5096a8c5c01f8d1d7edece23bab6898bd3016f2c"}], "stats": {"total": 63, "additions": 30, "deletions": 33}, "files": [{"sha": "991f2df247895a17c08353dfd579737f3d6a4e44", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=f0a8b6d43f26907ac7d7abc35510878f61551fbf", "patch": "@@ -701,7 +701,7 @@ mod impls {\n \n     // Note: This macro is a temporary hack that can be remove once we are building with a compiler\n     // that supports `!`\n-    macro_rules! argh {\n+    macro_rules! not_stage0 {\n         () => {\n             #[unstable(feature = \"bang_type\", issue = \"35121\")]\n             impl PartialEq for ! {\n@@ -730,7 +730,7 @@ mod impls {\n     }\n \n     #[cfg(not(stage0))]\n-    argh!();\n+    not_stage0!();\n \n     // & pointers\n "}, {"sha": "15fb950b143dcfbd44bffe8425f573da9edc82ce", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=f0a8b6d43f26907ac7d7abc35510878f61551fbf", "patch": "@@ -1365,7 +1365,7 @@ fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperEx\n \n // Note: This macro is a temporary hack that can be remove once we are building with a compiler\n // that supports `!`\n-macro_rules! argh {\n+macro_rules! not_stage0 {\n     () => {\n         #[unstable(feature = \"bang_type\", issue = \"35121\")]\n         impl Debug for ! {\n@@ -1384,7 +1384,7 @@ macro_rules! argh {\n }\n \n #[cfg(not(stage0))]\n-argh!();\n+not_stage0!();\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for bool {"}, {"sha": "d05036c97a679cfc09e782de9be99108934638f9", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=f0a8b6d43f26907ac7d7abc35510878f61551fbf", "patch": "@@ -87,6 +87,8 @@\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(question_mark)]\n+\n+// NOTE: remove the cfg_attr next snapshot\n #![cfg_attr(not(stage0), feature(bang_type))]\n \n #[macro_use]"}, {"sha": "e9c28f3782b024d2581837fc4ba0f84b11e9930f", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=f0a8b6d43f26907ac7d7abc35510878f61551fbf", "patch": "@@ -112,7 +112,7 @@ use self::VarKind::*;\n use dep_graph::DepNode;\n use hir::def::*;\n use hir::pat_util;\n-use ty::{self, TyCtxt, ParameterEnvironment};\n+use ty::{self, Ty, TyCtxt, ParameterEnvironment};\n use traits::{self, Reveal};\n use ty::subst::Subst;\n use lint;\n@@ -1454,7 +1454,7 @@ fn check_fn(_v: &Liveness,\n }\n \n impl<'a, 'tcx> Liveness<'a, 'tcx> {\n-    fn fn_ret(&self, id: NodeId) -> ty::Binder<ty::Ty<'tcx>> {\n+    fn fn_ret(&self, id: NodeId) -> ty::Binder<Ty<'tcx>> {\n         let fn_ty = self.ir.tcx.node_id_to_type(id);\n         match fn_ty.sty {\n             ty::TyClosure(closure_def_id, substs) =>"}, {"sha": "dc4bdda0cf096bfecc7aa2b25aff0a359f7775a8", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=f0a8b6d43f26907ac7d7abc35510878f61551fbf", "patch": "@@ -107,7 +107,7 @@ pub struct AutoDerefRef<'tcx> {\n impl<'tcx> AutoAdjustment<'tcx> {\n     pub fn is_identity(&self) -> bool {\n         match *self {\n-            AdjustEmptyToAny(ref ty) => match ty.sty {\n+            AdjustEmptyToAny(ty) => match ty.sty {\n                 TypeVariants::TyEmpty => true,\n                 _ => false,\n             },"}, {"sha": "206de733606df351910e0ea4b0143299197c123c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f0a8b6d43f26907ac7d7abc35510878f61551fbf", "patch": "@@ -1258,10 +1258,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(TySlice(ty))\n     }\n \n-    pub fn mk_empty(&self) -> Ty<'tcx> {\n-        self.mk_ty(TyEmpty)\n-    }\n-\n     pub fn mk_tup(self, ts: Vec<Ty<'tcx>>) -> Ty<'tcx> {\n         self.mk_ty(TyTuple(self.mk_type_list(ts)))\n     }"}, {"sha": "b8044a24cbfc0c4e27a57d9d1ead414f7a47be9f", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=f0a8b6d43f26907ac7d7abc35510878f61551fbf", "patch": "@@ -58,8 +58,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // unreachable block. Don't bother to terminate it and create a new one.\n                 if is_call {\n                     block.unit()\n-                }\n-                else {\n+                } else {\n                     this.cfg.terminate(block, source_info, TerminatorKind::Unreachable);\n                     let end_block = this.cfg.start_new_block();\n                     end_block.unit()"}, {"sha": "86c95db89c8a36538e6b2c1990ca370c577ba872", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=f0a8b6d43f26907ac7d7abc35510878f61551fbf", "patch": "@@ -162,7 +162,7 @@ macro_rules! unpack {\n pub fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                                        fn_id: ast::NodeId,\n                                        arguments: A,\n-                                       return_ty: ty::Ty<'gcx>,\n+                                       return_ty: Ty<'gcx>,\n                                        ast_block: &'gcx hir::Block)\n                                        -> (Mir<'tcx>, ScopeAuxiliaryVec)\n     where A: Iterator<Item=(Ty<'gcx>, Option<&'gcx hir::Pat>)>\n@@ -287,7 +287,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     fn finish(self,\n               upvar_decls: Vec<UpvarDecl>,\n               arg_decls: IndexVec<Arg, ArgDecl<'tcx>>,\n-              return_ty: ty::Ty<'tcx>)\n+              return_ty: Ty<'tcx>)\n               -> (Mir<'tcx>, ScopeAuxiliaryVec) {\n         for (index, block) in self.cfg.basic_blocks.iter().enumerate() {\n             if block.terminator.is_none() {\n@@ -309,7 +309,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     fn args_and_body<A>(&mut self,\n                         mut block: BasicBlock,\n-                        return_ty: ty::Ty<'tcx>,\n+                        return_ty: Ty<'tcx>,\n                         arguments: A,\n                         argument_extent: CodeExtent,\n                         ast_block: &'gcx hir::Block)"}, {"sha": "5da4304abb3be1fb5c639fbf4fd86ebe56181db3", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=f0a8b6d43f26907ac7d7abc35510878f61551fbf", "patch": "@@ -558,7 +558,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n             abi: Abi::C,\n             sig: ty::Binder(ty::FnSig {\n                 inputs: vec![tcx.mk_mut_ptr(tcx.types.u8)],\n-                output: tcx.mk_empty(),\n+                output: tcx.types.empty,\n                 variadic: false\n             }),\n         }));"}, {"sha": "7be173d17b487ded0132b7408c214a96becb84e5", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=f0a8b6d43f26907ac7d7abc35510878f61551fbf", "patch": "@@ -1221,7 +1221,7 @@ fn trans_gnu_try<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n fn gen_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n                     name: &str,\n                     inputs: Vec<Ty<'tcx>>,\n-                    output: ty::Ty<'tcx>,\n+                    output: Ty<'tcx>,\n                     trans: &mut for<'b> FnMut(Block<'b, 'tcx>))\n                     -> ValueRef {\n     let ccx = fcx.ccx;"}, {"sha": "e342bfb635c2bf5022d36e501944ed541a250708", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f0a8b6d43f26907ac7d7abc35510878f61551fbf", "patch": "@@ -1701,7 +1701,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 tcx.mk_ref(tcx.mk_region(r), ty::TypeAndMut {ty: t, mutbl: mt.mutbl})\n             }\n             hir::TyEmpty => {\n-                tcx.mk_empty()\n+                tcx.types.empty\n             },\n             hir::TyTup(ref fields) => {\n                 let flds = fields.iter()"}, {"sha": "d0085a1cc84a2965eaaefae4236ba9c471186433", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=f0a8b6d43f26907ac7d7abc35510878f61551fbf", "patch": "@@ -30,8 +30,8 @@ fn equate_intrinsic_type<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                    it: &hir::ForeignItem,\n                                    n_tps: usize,\n                                    abi: Abi,\n-                                   inputs: Vec<ty::Ty<'tcx>>,\n-                                   output: ty::Ty<'tcx>) {\n+                                   inputs: Vec<Ty<'tcx>>,\n+                                   output: Ty<'tcx>) {\n     let tcx = ccx.tcx;\n     let def_id = tcx.map.local_def_id(it.id);\n     let i_ty = tcx.lookup_item_type(def_id);\n@@ -106,7 +106,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n         };\n         (n_tps, inputs, output)\n     } else if &name[..] == \"abort\" || &name[..] == \"unreachable\" {\n-        (0, Vec::new(), tcx.mk_empty())\n+        (0, Vec::new(), tcx.types.empty)\n     } else {\n         let (n_tps, inputs, output) = match &name[..] {\n             \"breakpoint\" => (0, Vec::new(), tcx.mk_nil()),"}, {"sha": "cea591a84d6f77ebb828e837a15482a7281f9351", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f0a8b6d43f26907ac7d7abc35510878f61551fbf", "patch": "@@ -372,7 +372,7 @@ pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // expects the types within the function to be consistent.\n     err_count_on_creation: usize,\n \n-    ret_ty: ty::Ty<'tcx>,\n+    ret_ty: Ty<'tcx>,\n \n     ps: RefCell<UnsafetyState>,\n \n@@ -1457,7 +1457,7 @@ enum TupleArgumentsFlag {\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     pub fn new(inh: &'a Inherited<'a, 'gcx, 'tcx>,\n-               rty: ty::Ty<'tcx>,\n+               rty: Ty<'tcx>,\n                body_id: ast::NodeId)\n                -> FnCtxt<'a, 'gcx, 'tcx> {\n         FnCtxt {\n@@ -1733,7 +1733,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn write_empty(&self, node_id: ast::NodeId) {\n-        self.write_ty_expr(node_id, self.tcx.mk_empty());\n+        self.write_ty_expr(node_id, self.tcx.types.empty);\n     }\n \n     pub fn write_error(&self, node_id: ast::NodeId) {\n@@ -1977,7 +1977,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if self.type_var_diverges(resolved) {\n                 debug!(\"default_type_parameters: defaulting `{:?}` to `!` because it diverges\",\n                        resolved);\n-                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.mk_empty());\n+                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.empty);\n             } else {\n                 match self.type_is_unconstrained_numeric(resolved) {\n                     UnconstrainedInt => {\n@@ -2051,7 +2051,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             for ty in &unsolved_variables {\n                 let resolved = self.resolve_type_vars_if_possible(ty);\n                 if self.type_var_diverges(resolved) {\n-                    self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.mk_empty());\n+                    self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.empty);\n                 } else {\n                     match self.type_is_unconstrained_numeric(resolved) {\n                         UnconstrainedInt | UnconstrainedFloat => {\n@@ -2109,7 +2109,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let _ = self.commit_if_ok(|_: &infer::CombinedSnapshot| {\n                 for ty in &unbound_tyvars {\n                     if self.type_var_diverges(ty) {\n-                        self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.mk_empty());\n+                        self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.empty);\n                     } else {\n                         match self.type_is_unconstrained_numeric(ty) {\n                             UnconstrainedInt => {\n@@ -2205,7 +2205,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // reporting for more then one conflict.\n         for ty in &unbound_tyvars {\n             if self.type_var_diverges(ty) {\n-                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.mk_empty());\n+                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.empty);\n             } else {\n                 match self.type_is_unconstrained_numeric(ty) {\n                     UnconstrainedInt => {\n@@ -2409,7 +2409,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                    args_no_rcvr: &'gcx [P<hir::Expr>],\n                                    tuple_arguments: TupleArgumentsFlag,\n                                    expected: Expectation<'tcx>)\n-                                   -> ty::Ty<'tcx> {\n+                                   -> Ty<'tcx> {\n         if method_fn_ty.references_error() {\n             let err_inputs = self.err_args(args_no_rcvr.len());\n \n@@ -2680,7 +2680,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     fn write_call(&self,\n                   call_expr: &hir::Expr,\n-                  output: ty::Ty<'tcx>) {\n+                  output: Ty<'tcx>) {\n         self.write_ty_expr(call_expr.id, output);\n     }\n \n@@ -2804,7 +2804,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn expected_types_for_fn_args(&self,\n                                   call_span: Span,\n                                   expected_ret: Expectation<'tcx>,\n-                                  formal_ret: ty::Ty<'tcx>,\n+                                  formal_ret: Ty<'tcx>,\n                                   formal_args: &[Ty<'tcx>])\n                                   -> Vec<Ty<'tcx>> {\n         let expected_args = expected_ret.only_has_type(self).and_then(|ret_ty| {"}, {"sha": "5eca6e21681adf383a68cb5892cd5a7660cbbfaf", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a8b6d43f26907ac7d7abc35510878f61551fbf/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=f0a8b6d43f26907ac7d7abc35510878f61551fbf", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'gcx, 'tcx> CheckWfFcxBuilder<'a, 'gcx, 'tcx> {\n         let id = self.id;\n         let span = self.span;\n         self.inherited.enter(|inh| {\n-            let fcx = FnCtxt::new(&inh, inh.ccx.tcx.mk_empty(), id);\n+            let fcx = FnCtxt::new(&inh, inh.ccx.tcx.types.empty, id);\n             let wf_tys = f(&fcx, &mut CheckTypeWellFormedVisitor {\n                 ccx: fcx.ccx,\n                 code: code"}]}