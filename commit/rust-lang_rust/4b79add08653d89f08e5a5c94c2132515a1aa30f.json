{"sha": "4b79add08653d89f08e5a5c94c2132515a1aa30f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNzlhZGQwODY1M2Q4OWYwOGU1YTVjOTRjMjEzMjUxNWExYWEzMGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-04T12:31:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-04T12:31:32Z"}, "message": "Auto merge of #27512 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #27397, #27398, #27460, #27470, #27491, #27498, #27502\n- Failed merges:", "tree": {"sha": "a83a085f3b640c01c2a8609a3ca6cad5ecd70ce8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a83a085f3b640c01c2a8609a3ca6cad5ecd70ce8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b79add08653d89f08e5a5c94c2132515a1aa30f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b79add08653d89f08e5a5c94c2132515a1aa30f", "html_url": "https://github.com/rust-lang/rust/commit/4b79add08653d89f08e5a5c94c2132515a1aa30f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b79add08653d89f08e5a5c94c2132515a1aa30f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f971f862384abdea40064f872308a309a8691e8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f971f862384abdea40064f872308a309a8691e8d", "html_url": "https://github.com/rust-lang/rust/commit/f971f862384abdea40064f872308a309a8691e8d"}, {"sha": "614f6408562a3402af2b58310408b707dce3726c", "url": "https://api.github.com/repos/rust-lang/rust/commits/614f6408562a3402af2b58310408b707dce3726c", "html_url": "https://github.com/rust-lang/rust/commit/614f6408562a3402af2b58310408b707dce3726c"}], "stats": {"total": 206, "additions": 127, "deletions": 79}, "files": [{"sha": "1dfd2186e138510ecacaa4afcbfe9eef0835d8bc", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b79add08653d89f08e5a5c94c2132515a1aa30f/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/4b79add08653d89f08e5a5c94c2132515a1aa30f/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=4b79add08653d89f08e5a5c94c2132515a1aa30f", "patch": "@@ -79,7 +79,7 @@ Libraries\n   are used by code generators to emit implementations of [`Debug`].\n * `str` has new [`to_uppercase`][strup] and [`to_lowercase`][strlow]\n   methods that convert case, following Unicode case mapping.\n-* It is now easier to handle to poisoned locks. The [`PoisonError`]\n+* It is now easier to handle poisoned locks. The [`PoisonError`]\n   type, returned by failing lock operations, exposes `into_inner`,\n   `get_ref`, and `get_mut`, which all give access to the inner lock\n   guard, and allow the poisoned lock to continue to operate. The"}, {"sha": "63a1c10f841ce484f551df999b67baf4e822f21f", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=4b79add08653d89f08e5a5c94c2132515a1aa30f", "patch": "@@ -98,8 +98,8 @@ use std::io;\n \n We\u2019ll need to take user input, and then print the result as output. As such, we\n need the `io` library from the standard library. Rust only imports a few things\n-into every program, [the \u2018prelude\u2019][prelude]. If it\u2019s not in the prelude,\n-you\u2019ll have to `use` it directly.\n+by default into every program, [the \u2018prelude\u2019][prelude]. If it\u2019s not in the\n+prelude, you\u2019ll have to `use` it directly.\n \n [prelude]: ../std/prelude/index.html\n "}, {"sha": "4bd7de23f0cd6648b4786fa3798a9b7de0bb7b1b", "filename": "src/doc/trpl/hello-cargo.md", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-cargo.md?ref=4b79add08653d89f08e5a5c94c2132515a1aa30f", "patch": "@@ -8,13 +8,13 @@ so it is assumed that Rust projects will use Cargo from the beginning.\n [cratesio]: http://doc.crates.io\n \n Cargo manages three things: building your code, downloading the dependencies\n-your code needs, and building those dependencies. At first, your\n-program doesn\u2019t have any dependencies, so we\u2019ll only be using the first part of\n-its functionality. Eventually, we\u2019ll add more. Since we started off by using\n-Cargo, it'll be easy to add later.\n+your code needs, and building those dependencies. At first, your program doesn\u2019t\n+have any dependencies, so we\u2019ll only be using the first part of its\n+functionality. Eventually, we\u2019ll add more. Since we started off by using Cargo,\n+it'll be easy to add later.\n \n-If you installed Rust via the official installers you will also have Cargo. If\n-you installed Rust some other way, you may want to [check the Cargo\n+If we installed Rust via the official installers we will also have Cargo. If we\n+installed Rust some other way, we may want to [check the Cargo\n README][cargoreadme] for specific instructions about installing it.\n \n [cargoreadme]: https://github.com/rust-lang/cargo#installing-cargo-from-nightlies\n@@ -23,20 +23,21 @@ README][cargoreadme] for specific instructions about installing it.\n \n Let\u2019s convert Hello World to Cargo.\n \n-To Cargo-ify our project, we need to do two things: Make a `Cargo.toml`\n-configuration file, and put our source file in the right place. Let's\n-do that part first:\n+To Cargo-ify our project, we need to do three things: Make a `Cargo.toml`\n+configuration file, put our source file in the right place, and get rid of the\n+old executable (`main.exe` on Windows, `main` everywhere else). Let's do that part first:\n \n ```bash\n $ mkdir src\n $ mv main.rs src/main.rs\n+$ rm main  # or main.exe on Windows\n ```\n \n-Note that since we're creating an executable, we used `main.rs`. If we\n-want to make a library instead, we should use `lib.rs`. This convention is required\n-for Cargo to successfully compile our projects, but it can be overridden if we wish. \n-Custom file locations for the entry point can be specified\n-with a [`[lib]` or `[[bin]]`][crates-custom] key in the TOML file.\n+Note that since we're creating an executable, we retain `main.rs` as the source\n+filename. If we want to make a library instead, we should use `lib.rs`. This\n+convention is used by Cargo to successfully compile our projects, but it can be\n+overridden if we wish. Custom file locations for the entry point can be\n+specified with a [`[lib]` or `[[bin]]`][crates-custom] key in the TOML file.\n \n [crates-custom]: http://doc.crates.io/manifest.html#configuring-a-target\n \n@@ -63,8 +64,8 @@ version = \"0.0.1\"\n authors = [ \"Your name <you@example.com>\" ]\n ```\n \n-This file is in the [TOML][toml] format. TOML is similar to INI, but has some \n-extra goodies. According to the TOML docs, \n+This file is in the [TOML][toml] format. TOML is similar to INI, but has some\n+extra goodies. According to the TOML docs,\n \n > TOML aims to be a minimal configuration file format that's easy to read due\n > to obvious semantics. TOML is designed to map unambiguously to a hash table.\n@@ -73,7 +74,8 @@ extra goodies. According to the TOML docs,\n \n [toml]: https://github.com/toml-lang/toml\n \n-Once you have this file in place, we should be ready to build! To do so, run:\n+Once we have this file in place in our project's root directory, we should be\n+ready to build! To do so, run:\n \n ```bash\n $ cargo build"}, {"sha": "1abd4ca6c2174fd1571c1c2a8c7402909a6c836d", "filename": "src/doc/trpl/patterns.md", "status": "modified", "additions": 38, "deletions": 41, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Fdoc%2Ftrpl%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Fdoc%2Ftrpl%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpatterns.md?ref=4b79add08653d89f08e5a5c94c2132515a1aa30f", "patch": "@@ -112,26 +112,55 @@ match x {\n }\n ```\n \n-# Ignoring variants\n+# Ignoring bindings\n \n-If you\u2019re matching on an enum which has variants, you can use `..` to\n-ignore the value and type in the variant:\n+You can use `_` in a pattern to disregard the type and value.\n+For example, here\u2019s a `match` against a `Result<T, E>`:\n \n ```rust\n-enum OptionalInt {\n-    Value(i32),\n+# let some_value: Result<i32, &'static str> = Err(\"There was an error\");\n+match some_value {\n+    Ok(value) => println!(\"got a value: {}\", value),\n+    Err(_) => println!(\"an error occurred\"),\n+}\n+```\n+\n+In the first arm, we bind the value inside the `Ok` variant to `value`. But\n+in the `Err` arm, we use `_` to disregard the specific error, and just print\n+a general error message.\n+\n+`_` is valid in any pattern that creates a binding. This can be useful to\n+ignore parts of a larger structure:\n+\n+```rust\n+fn coordinate() -> (i32, i32, i32) {\n+    // generate and return some sort of triple tuple\n+# (1, 2, 3)\n+}\n+\n+let (x, _, z) = coordinate();\n+```\n+\n+Here, we bind the first and last element of the tuple to `x` and `z`, but\n+ignore the middle element.\n+\n+Similarly, you can use `..` in a pattern to disregard multiple values.\n+\n+```rust\n+enum OptionalTuple {\n+    Value(i32, i32, i32),\n     Missing,\n }\n \n-let x = OptionalInt::Value(5);\n+let x = OptionalTuple::Value(5, -2, 3);\n \n match x {\n-    OptionalInt::Value(..) => println!(\"Got an int!\"),\n-    OptionalInt::Missing => println!(\"No such luck.\"),\n+    OptionalTuple::Value(..) => println!(\"Got a tuple!\"),\n+    OptionalTuple::Missing => println!(\"No such luck.\"),\n }\n ```\n \n-This prints `Got an int!`.\n+This prints `Got a tuple!`.\n \n # Guards\n \n@@ -282,38 +311,6 @@ This \u2018destructuring\u2019 behavior works on any compound data type, like\n [tuples]: primitive-types.html#tuples\n [enums]: enums.html\n \n-# Ignoring bindings\n-\n-You can use `_` in a pattern to disregard the value. For example, here\u2019s a\n-`match` against a `Result<T, E>`:\n-\n-```rust\n-# let some_value: Result<i32, &'static str> = Err(\"There was an error\");\n-match some_value {\n-    Ok(value) => println!(\"got a value: {}\", value),\n-    Err(_) => println!(\"an error occurred\"),\n-}\n-```\n-\n-In the first arm, we bind the value inside the `Ok` variant to `value`. But\n-in the `Err` arm, we use `_` to disregard the specific error, and just print\n-a general error message.\n-\n-`_` is valid in any pattern that creates a binding. This can be useful to\n-ignore parts of a larger structure:\n-\n-```rust\n-fn coordinate() -> (i32, i32, i32) {\n-    // generate and return some sort of triple tuple\n-# (1, 2, 3)\n-}\n-\n-let (x, _, z) = coordinate();\n-```\n-\n-Here, we bind the first and last element of the tuple to `x` and `z`, but\n-ignore the middle element.\n-\n # Mix and Match\n \n Whew! That\u2019s a lot of different ways to match things, and they can all be"}, {"sha": "7e63c8d71f92832d3af3bf702ae1989009e6ce0d", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=4b79add08653d89f08e5a5c94c2132515a1aa30f", "patch": "@@ -322,20 +322,16 @@ pub unsafe fn dropped<T>() -> T {\n /// println!(\"{:?}\", &data[0]);\n /// ```\n ///\n-/// Hopefully this example emphasizes to you exactly how delicate\n-/// and dangerous doing this is. Note that the `vec!` macro\n-/// *does* let you initialize every element with a value that\n-/// is only `Clone`, so the following is equivalent and vastly\n-/// less dangerous, as long as you can live with an extra heap\n+/// This example emphasizes exactly how delicate and dangerous doing this is.\n+/// Note that the `vec!` macro *does* let you initialize every element with a\n+/// value that is only `Clone`, so the following is semantically equivalent and\n+/// vastly less dangerous, as long as you can live with an extra heap\n /// allocation:\n ///\n /// ```\n /// let data: Vec<Vec<u32>> = vec![Vec::new(); 1000];\n /// println!(\"{:?}\", &data[0]);\n /// ```\n-///\n-/// For large arrays this is probably advisable\n-/// anyway to avoid blowing the stack.\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn uninitialized<T>() -> T {"}, {"sha": "3e22b42836b6e83e6252da078f7636ed6d195831", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4b79add08653d89f08e5a5c94c2132515a1aa30f", "patch": "@@ -313,8 +313,8 @@ fn resolve_error<'b, 'a:'b, 'tcx:'a>(resolver: &'b Resolver<'a, 'tcx>, span: syn\n         },\n         ResolutionError::StructVariantUsedAsFunction(path_name) => {\n             span_err!(resolver.session, span, E0423,\n-                         \"`{}` is a struct variant name, but \\\n-                          this expression \\\n+                         \"`{}` is the name of a struct or struct variant, \\\n+                          but this expression \\\n                           uses it like a function name\",\n                           path_name);\n         },"}, {"sha": "07c1b5e3d20131c99b81122b093ac2af6b7cc6f3", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=4b79add08653d89f08e5a5c94c2132515a1aa30f", "patch": "@@ -826,6 +826,63 @@ struct Foo { x: Option<Box<Foo>> }\n Now it's possible to create at least one instance of `Foo`: `Foo { x: None }`.\n \"##,\n \n+E0074: r##\"\n+When using the `#[simd]` attribute on a tuple struct, the components of the\n+tuple struct must all be of a concrete, nongeneric type so the compiler can\n+reason about how to use SIMD with them. This error will occur if the types\n+are generic.\n+\n+```\n+#[simd]\n+struct Bad<T>(T, T, T); // This will cause an error\n+\n+#[simd]\n+struct Good(u32, u32, u32); // This will not\n+```\n+\"##,\n+\n+E0075: r##\"\n+The `#[simd]` attribute can only be applied to non empty tuple structs, because\n+it doesn't make sense to try to use SIMD operations when there are no values to\n+operate on.\n+\n+```\n+#[simd]\n+struct Bad; // This will cause an error\n+\n+#[simd]\n+struct Good(u32); // This will not\n+```\n+\"##,\n+\n+E0076: r##\"\n+When using the `#[simd]` attribute to automatically use SIMD operations in tuple\n+struct, the types in the struct must all be of the same type, or the compiler\n+will trigger this error.\n+\n+```\n+#[simd]\n+struct Bad(u16, u32, u32); // This will cause an error\n+\n+#[simd]\n+struct Good(u32, u32, u32); // This will not\n+```\n+\n+\"##,\n+\n+E0077: r##\"\n+When using the `#[simd]` attribute on a tuple struct, the elements in the tuple\n+must be machine types so SIMD operations can be applied to them.\n+\n+```\n+#[simd]\n+struct Bad(String); // This will cause an error\n+\n+#[simd]\n+struct Good(u32, u32, u32); // This will not\n+```\n+\"##,\n+\n E0081: r##\"\n Enum discriminants are used to differentiate enum variants stored in memory.\n This error indicates that the same value was used for two or more variants,\n@@ -2378,10 +2435,6 @@ https://doc.rust-lang.org/std/marker/struct.PhantomData.html\n \n register_diagnostics! {\n     E0068,\n-    E0074,\n-    E0075,\n-    E0076,\n-    E0077,\n     E0085,\n     E0086,\n     E0090,"}, {"sha": "4597db41e907dbc786b3b80910c253551f0c624e", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=4b79add08653d89f08e5a5c94c2132515a1aa30f", "patch": "@@ -11,8 +11,8 @@\n //! The Rust Prelude\n //!\n //! Because `std` is required by most serious Rust software, it is\n-//! imported at the topmost level of every crate by default, as if the\n-//! first line of each crate was\n+//! imported at the topmost level of every crate by default, as if\n+//! each crate contains the following:\n //!\n //! ```ignore\n //! extern crate std;\n@@ -23,7 +23,7 @@\n //! etc.\n //!\n //! Additionally, `std` contains a versioned *prelude* that reexports many of the\n-//! most common traits, types and functions. *The contents of the prelude are\n+//! most common traits, types, and functions. *The contents of the prelude are\n //! imported into every module by default*.  Implicitly, all modules behave as if\n //! they contained the following [`use` statement][book-use]:\n //!"}, {"sha": "66ed817ffa82637ac093bf2c6a01ff67402c62db", "filename": "src/test/compile-fail/issue-6702.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b79add08653d89f08e5a5c94c2132515a1aa30f/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6702.rs?ref=4b79add08653d89f08e5a5c94c2132515a1aa30f", "patch": "@@ -14,6 +14,6 @@ struct Monster {\n \n \n fn main() {\n-    let _m = Monster(); //~ ERROR `Monster` is a struct variant name, but\n+    let _m = Monster(); //~ ERROR `Monster` is the name of a struct or\n     //~^ HELP did you mean to write: `Monster { /* fields */ }`?\n }"}]}