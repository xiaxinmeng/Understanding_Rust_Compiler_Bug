{"sha": "07fd8089a45cb917ae85eb06e33374db159332e3", "node_id": "C_kwDOAAsO6NoAKDA3ZmQ4MDg5YTQ1Y2I5MTdhZTg1ZWIwNmUzMzM3NGRiMTU5MzMyZTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-06T12:27:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-06T12:27:45Z"}, "message": "Rollup merge of #105340 - estebank:ice-ice-baby, r=compiler-errors\n\nAvoid ICE by accounting for missing type\n\nFix #105330", "tree": {"sha": "18ba3ee9d578c9793ebfcd09da34a9cc81250fb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18ba3ee9d578c9793ebfcd09da34a9cc81250fb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07fd8089a45cb917ae85eb06e33374db159332e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjjzVBCRBK7hj4Ov3rIwAAIEUIAKDKmNllLJBYqzY/doy7g0CG\nyE+x8eJYTH4esdDmUBxB10S6krvC3+TTZPlC3AbO0mwKL4u0UKJC6ZISnq7YHQIo\nr/Vos8UfB4mRdn+TFNxCn9keu1Yzaz2T2yk4NvoZiSorj0OHlncYc3zJCf3FKAjQ\nArrJTkUVIisCme4r5L2x8CKD8g3fbjGBMPLsj+ww3CxC9OimAUxy56TP6hyTD73Z\nBG653ChhbM3X5E0NBFbWwc1uAZEVogs3NkZi1xQfbgiYxW0x0raPDEyywrXDjB7E\nsA07dhlsuqYHPVznHP8ayLsdeYvNiiLqy5TONaK+Nn0t2hCf+afIdWJ1vtQKmew=\n=W2/0\n-----END PGP SIGNATURE-----\n", "payload": "tree 18ba3ee9d578c9793ebfcd09da34a9cc81250fb1\nparent 762d2545f4065fdd74e254a4382fd8aad58b0c9b\nparent eff76455fd4061f268546a706d3dfb1cc34ecb48\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670329665 +0100\ncommitter GitHub <noreply@github.com> 1670329665 +0100\n\nRollup merge of #105340 - estebank:ice-ice-baby, r=compiler-errors\n\nAvoid ICE by accounting for missing type\n\nFix #105330\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07fd8089a45cb917ae85eb06e33374db159332e3", "html_url": "https://github.com/rust-lang/rust/commit/07fd8089a45cb917ae85eb06e33374db159332e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07fd8089a45cb917ae85eb06e33374db159332e3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "762d2545f4065fdd74e254a4382fd8aad58b0c9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/762d2545f4065fdd74e254a4382fd8aad58b0c9b", "html_url": "https://github.com/rust-lang/rust/commit/762d2545f4065fdd74e254a4382fd8aad58b0c9b"}, {"sha": "eff76455fd4061f268546a706d3dfb1cc34ecb48", "url": "https://api.github.com/repos/rust-lang/rust/commits/eff76455fd4061f268546a706d3dfb1cc34ecb48", "html_url": "https://github.com/rust-lang/rust/commit/eff76455fd4061f268546a706d3dfb1cc34ecb48"}], "stats": {"total": 132, "additions": 131, "deletions": 1}, "files": [{"sha": "cc61e18743133c94ba0f5951a290937a8516f04d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07fd8089a45cb917ae85eb06e33374db159332e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fd8089a45cb917ae85eb06e33374db159332e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=07fd8089a45cb917ae85eb06e33374db159332e3", "patch": "@@ -1607,7 +1607,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         | ObligationCauseCode::ObjectCastObligation(..)\n                         | ObligationCauseCode::OpaqueType\n                 );\n-                let expected_ty = data.term.ty().unwrap();\n+                let expected_ty = data.term.ty().unwrap_or_else(|| self.tcx.ty_error());\n \n                 // constrain inference variables a bit more to nested obligations from normalize so\n                 // we can have more helpful errors."}, {"sha": "86e45f10b0e1615280a10d877293375f71163dfd", "filename": "src/test/ui/issues/issue-105330.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/07fd8089a45cb917ae85eb06e33374db159332e3/src%2Ftest%2Fui%2Fissues%2Fissue-105330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07fd8089a45cb917ae85eb06e33374db159332e3/src%2Ftest%2Fui%2Fissues%2Fissue-105330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-105330.rs?ref=07fd8089a45cb917ae85eb06e33374db159332e3", "patch": "@@ -0,0 +1,21 @@\n+pub trait TraitWAssocConst {\n+    const A:   usize;\n+}\n+pub struct Demo {}\n+\n+impl TraitWAssocConst for impl Demo { //~ ERROR E0404\n+    //~^ ERROR E0562\n+    pubconst A: str = 32; //~ ERROR expected one of\n+}\n+\n+fn foo<A: TraitWAssocConst<A=32>>() { //~ ERROR E0658\n+    foo::<Demo>()(); //~ ERROR E0271\n+    //~^ ERROR E0618\n+    //~| ERROR E0277\n+}\n+\n+fn main<A: TraitWAssocConst<A=32>>() { //~ ERROR E0131\n+    //~^ ERROR E0658\n+    foo::<Demo>(); //~ ERROR E0277\n+    //~^ ERROR E0271\n+}"}, {"sha": "92f2ccb6544b10c2ba81744c921b4b945fd91d15", "filename": "src/test/ui/issues/issue-105330.stderr", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/07fd8089a45cb917ae85eb06e33374db159332e3/src%2Ftest%2Fui%2Fissues%2Fissue-105330.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07fd8089a45cb917ae85eb06e33374db159332e3/src%2Ftest%2Fui%2Fissues%2Fissue-105330.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-105330.stderr?ref=07fd8089a45cb917ae85eb06e33374db159332e3", "patch": "@@ -0,0 +1,109 @@\n+error: expected one of `!` or `::`, found `A`\n+  --> $DIR/issue-105330.rs:8:14\n+   |\n+LL | impl TraitWAssocConst for impl Demo {\n+   |                                     - while parsing this item list starting here\n+LL |\n+LL |     pubconst A: str = 32;\n+   |              ^ expected one of `!` or `::`\n+LL | }\n+   | - the item list ends here\n+\n+error[E0404]: expected trait, found struct `Demo`\n+  --> $DIR/issue-105330.rs:6:32\n+   |\n+LL | impl TraitWAssocConst for impl Demo {\n+   |                                ^^^^ not a trait\n+\n+error[E0658]: associated const equality is incomplete\n+  --> $DIR/issue-105330.rs:11:28\n+   |\n+LL | fn foo<A: TraitWAssocConst<A=32>>() {\n+   |                            ^^^^\n+   |\n+   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n+   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n+\n+error[E0658]: associated const equality is incomplete\n+  --> $DIR/issue-105330.rs:17:29\n+   |\n+LL | fn main<A: TraitWAssocConst<A=32>>() {\n+   |                             ^^^^\n+   |\n+   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n+   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n+\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in type\n+  --> $DIR/issue-105330.rs:6:27\n+   |\n+LL | impl TraitWAssocConst for impl Demo {\n+   |                           ^^^^^^^^^\n+\n+error[E0277]: the trait bound `Demo: TraitWAssocConst` is not satisfied\n+  --> $DIR/issue-105330.rs:12:11\n+   |\n+LL |     foo::<Demo>()();\n+   |           ^^^^ the trait `TraitWAssocConst` is not implemented for `Demo`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/issue-105330.rs:11:11\n+   |\n+LL | fn foo<A: TraitWAssocConst<A=32>>() {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `foo`\n+\n+error[E0271]: type mismatch resolving `<Demo as TraitWAssocConst>::A == 32`\n+  --> $DIR/issue-105330.rs:12:11\n+   |\n+LL |     foo::<Demo>()();\n+   |           ^^^^ types differ\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/issue-105330.rs:11:28\n+   |\n+LL | fn foo<A: TraitWAssocConst<A=32>>() {\n+   |                            ^^^^ required by this bound in `foo`\n+\n+error[E0618]: expected function, found `()`\n+  --> $DIR/issue-105330.rs:12:5\n+   |\n+LL | fn foo<A: TraitWAssocConst<A=32>>() {\n+   | ----------------------------------- `foo::<Demo>` defined here returns `()`\n+LL |     foo::<Demo>()();\n+   |     ^^^^^^^^^^^^^--\n+   |     |\n+   |     call expression requires function\n+\n+error[E0277]: the trait bound `Demo: TraitWAssocConst` is not satisfied\n+  --> $DIR/issue-105330.rs:19:11\n+   |\n+LL |     foo::<Demo>();\n+   |           ^^^^ the trait `TraitWAssocConst` is not implemented for `Demo`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/issue-105330.rs:11:11\n+   |\n+LL | fn foo<A: TraitWAssocConst<A=32>>() {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `foo`\n+\n+error[E0271]: type mismatch resolving `<Demo as TraitWAssocConst>::A == 32`\n+  --> $DIR/issue-105330.rs:19:11\n+   |\n+LL |     foo::<Demo>();\n+   |           ^^^^ types differ\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/issue-105330.rs:11:28\n+   |\n+LL | fn foo<A: TraitWAssocConst<A=32>>() {\n+   |                            ^^^^ required by this bound in `foo`\n+\n+error[E0131]: `main` function is not allowed to have generic parameters\n+  --> $DIR/issue-105330.rs:17:8\n+   |\n+LL | fn main<A: TraitWAssocConst<A=32>>() {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `main` cannot have generic parameters\n+\n+error: aborting due to 11 previous errors\n+\n+Some errors have detailed explanations: E0131, E0271, E0277, E0404, E0562, E0618, E0658.\n+For more information about an error, try `rustc --explain E0131`."}]}