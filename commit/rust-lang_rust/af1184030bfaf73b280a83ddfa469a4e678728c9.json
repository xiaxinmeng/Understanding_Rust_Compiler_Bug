{"sha": "af1184030bfaf73b280a83ddfa469a4e678728c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMTE4NDAzMGJmYWY3M2IyODBhODNkZGZhNDY5YTRlNjc4NzI4Yzk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T03:54:01Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:29Z"}, "message": "librustc: De-`@mut` `CStore::used_libraries`", "tree": {"sha": "074776c711e4164e9a302f8b60247f8265073a37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/074776c711e4164e9a302f8b60247f8265073a37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af1184030bfaf73b280a83ddfa469a4e678728c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af1184030bfaf73b280a83ddfa469a4e678728c9", "html_url": "https://github.com/rust-lang/rust/commit/af1184030bfaf73b280a83ddfa469a4e678728c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af1184030bfaf73b280a83ddfa469a4e678728c9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3528f74335be6f28671277936d643efb16cbc6c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3528f74335be6f28671277936d643efb16cbc6c7", "html_url": "https://github.com/rust-lang/rust/commit/3528f74335be6f28671277936d643efb16cbc6c7"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "10560d424690a181cd42c1e8f9fca094568cad48", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af1184030bfaf73b280a83ddfa469a4e678728c9/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1184030bfaf73b280a83ddfa469a4e678728c9/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=af1184030bfaf73b280a83ddfa469a4e678728c9", "patch": "@@ -853,7 +853,9 @@ fn link_rlib(sess: Session,\n              out_filename: &Path) -> Archive {\n     let mut a = Archive::create(sess, out_filename, obj_filename);\n \n-    for &(ref l, kind) in sess.cstore.get_used_libraries().iter() {\n+    let used_libraries = sess.cstore.get_used_libraries();\n+    let used_libraries = used_libraries.borrow();\n+    for &(ref l, kind) in used_libraries.get().iter() {\n         match kind {\n             cstore::NativeStatic => {\n                 a.add_native_library(l.as_slice());\n@@ -1116,7 +1118,9 @@ fn add_local_native_libraries(args: &mut ~[~str], sess: Session) {\n         args.push(\"-L\" + path.as_str().unwrap().to_owned());\n     }\n \n-    for &(ref l, kind) in sess.cstore.get_used_libraries().iter() {\n+    let used_libraries = sess.cstore.get_used_libraries();\n+    let used_libraries = used_libraries.borrow();\n+    for &(ref l, kind) in used_libraries.get().iter() {\n         match kind {\n             cstore::NativeUnknown | cstore::NativeStatic => {\n                 args.push(\"-l\" + *l);"}, {"sha": "5e4c1901f1e5ead5722e5db63034b0668784f5f5", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af1184030bfaf73b280a83ddfa469a4e678728c9/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1184030bfaf73b280a83ddfa469a4e678728c9/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=af1184030bfaf73b280a83ddfa469a4e678728c9", "patch": "@@ -64,7 +64,7 @@ pub struct CStore {\n     priv metas: RefCell<HashMap<ast::CrateNum, @crate_metadata>>,\n     priv extern_mod_crate_map: RefCell<extern_mod_crate_map>,\n     priv used_crate_sources: RefCell<~[CrateSource]>,\n-    priv used_libraries: ~[(~str, NativeLibaryKind)],\n+    priv used_libraries: RefCell<~[(~str, NativeLibaryKind)]>,\n     priv used_link_args: ~[~str],\n     intr: @ident_interner\n }\n@@ -78,7 +78,7 @@ impl CStore {\n             metas: RefCell::new(HashMap::new()),\n             extern_mod_crate_map: RefCell::new(HashMap::new()),\n             used_crate_sources: RefCell::new(~[]),\n-            used_libraries: ~[],\n+            used_libraries: RefCell::new(~[]),\n             used_link_args: ~[],\n             intr: intr\n         }\n@@ -137,15 +137,17 @@ impl CStore {\n \n     pub fn add_used_library(&mut self, lib: ~str, kind: NativeLibaryKind) -> bool {\n         assert!(!lib.is_empty());\n-        if self.used_libraries.iter().any(|&(ref x, _)| x == &lib) {\n+        let mut used_libraries = self.used_libraries.borrow_mut();\n+        if used_libraries.get().iter().any(|&(ref x, _)| x == &lib) {\n             return false;\n         }\n-        self.used_libraries.push((lib, kind));\n+        used_libraries.get().push((lib, kind));\n         true\n     }\n \n-    pub fn get_used_libraries<'a>(&'a self) -> &'a [(~str, NativeLibaryKind)] {\n-        self.used_libraries.as_slice()\n+    pub fn get_used_libraries<'a>(&'a self)\n+                              -> &'a RefCell<~[(~str, NativeLibaryKind)]> {\n+        &self.used_libraries\n     }\n \n     pub fn add_used_link_args(&mut self, args: &str) {"}, {"sha": "6e4e221fd7abb869a529da503a7c69670ce9813c", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af1184030bfaf73b280a83ddfa469a4e678728c9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af1184030bfaf73b280a83ddfa469a4e678728c9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=af1184030bfaf73b280a83ddfa469a4e678728c9", "patch": "@@ -1611,7 +1611,9 @@ fn encode_lang_items(ecx: &EncodeContext, ebml_w: &mut writer::Encoder) {\n fn encode_native_libraries(ecx: &EncodeContext, ebml_w: &mut writer::Encoder) {\n     ebml_w.start_tag(tag_native_libraries);\n \n-    for &(ref lib, kind) in ecx.cstore.get_used_libraries().iter() {\n+    let used_libraries = ecx.tcx.sess.cstore.get_used_libraries();\n+    let used_libraries = used_libraries.borrow();\n+    for &(ref lib, kind) in used_libraries.get().iter() {\n         match kind {\n             cstore::NativeStatic => {} // these libraries are not propagated\n             cstore::NativeFramework | cstore::NativeUnknown => {"}]}