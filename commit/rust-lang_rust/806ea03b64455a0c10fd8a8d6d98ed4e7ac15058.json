{"sha": "806ea03b64455a0c10fd8a8d6d98ed4e7ac15058", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNmVhMDNiNjQ0NTVhMGMxMGZkOGE4ZDZkOThlZDRlN2FjMTUwNTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T22:22:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T22:22:17Z"}, "message": "drop descriptor suffix, use hir:: instead", "tree": {"sha": "2e90519d66e589c1351e228f69c57d720e2fbf4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e90519d66e589c1351e228f69c57d720e2fbf4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/806ea03b64455a0c10fd8a8d6d98ed4e7ac15058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/806ea03b64455a0c10fd8a8d6d98ed4e7ac15058", "html_url": "https://github.com/rust-lang/rust/commit/806ea03b64455a0c10fd8a8d6d98ed4e7ac15058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/806ea03b64455a0c10fd8a8d6d98ed4e7ac15058/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36b1d20c1661877c0c5a55ccd07522bc97bfc254", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b1d20c1661877c0c5a55ccd07522bc97bfc254", "html_url": "https://github.com/rust-lang/rust/commit/36b1d20c1661877c0c5a55ccd07522bc97bfc254"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "9ca8f4e7cbc195c8f3372ad8756cffcfccaedd68", "filename": "crates/ra_analysis/src/hir/function/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/806ea03b64455a0c10fd8a8d6d98ed4e7ac15058/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806ea03b64455a0c10fd8a8d6d98ed4e7ac15058/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fmod.rs?ref=806ea03b64455a0c10fd8a8d6d98ed4e7ac15058", "patch": "@@ -25,43 +25,43 @@ impl FnId {\n     }\n }\n \n-pub(crate) struct FunctionDescriptor {\n+pub(crate) struct Function {\n     fn_id: FnId,\n }\n \n-impl FunctionDescriptor {\n+impl Function {\n     pub(crate) fn guess_from_source(\n         db: &impl HirDatabase,\n         file_id: FileId,\n         fn_def: ast::FnDef,\n-    ) -> FunctionDescriptor {\n+    ) -> Function {\n         let fn_id = FnId::get(db, file_id, fn_def);\n-        FunctionDescriptor { fn_id }\n+        Function { fn_id }\n     }\n \n     pub(crate) fn guess_for_name_ref(\n         db: &impl HirDatabase,\n         file_id: FileId,\n         name_ref: ast::NameRef,\n-    ) -> Option<FunctionDescriptor> {\n-        FunctionDescriptor::guess_for_node(db, file_id, name_ref.syntax())\n+    ) -> Option<Function> {\n+        Function::guess_for_node(db, file_id, name_ref.syntax())\n     }\n \n     pub(crate) fn guess_for_bind_pat(\n         db: &impl HirDatabase,\n         file_id: FileId,\n         bind_pat: ast::BindPat,\n-    ) -> Option<FunctionDescriptor> {\n-        FunctionDescriptor::guess_for_node(db, file_id, bind_pat.syntax())\n+    ) -> Option<Function> {\n+        Function::guess_for_node(db, file_id, bind_pat.syntax())\n     }\n \n     fn guess_for_node(\n         db: &impl HirDatabase,\n         file_id: FileId,\n         node: SyntaxNodeRef,\n-    ) -> Option<FunctionDescriptor> {\n+    ) -> Option<Function> {\n         let fn_def = node.ancestors().find_map(ast::FnDef::cast)?;\n-        let res = FunctionDescriptor::guess_from_source(db, file_id, fn_def);\n+        let res = Function::guess_from_source(db, file_id, fn_def);\n         Some(res)\n     }\n "}, {"sha": "863ffd919e0cb32b5ae4afd818306ce7aa056077", "filename": "crates/ra_analysis/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/806ea03b64455a0c10fd8a8d6d98ed4e7ac15058/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806ea03b64455a0c10fd8a8d6d98ed4e7ac15058/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs?ref=806ea03b64455a0c10fd8a8d6d98ed4e7ac15058", "patch": "@@ -20,7 +20,7 @@ use crate::{\n pub(crate) use self::{\n     path::{Path, PathKind},\n     module::{Module, ModuleId, Problem, nameres::FileItemId},\n-    function::{FunctionDescriptor, FnScopes},\n+    function::{Function, FnScopes},\n };\n \n pub use self::function::FnSignatureInfo;"}, {"sha": "2ff5e05372bebaa7019b506a96b3185a2effccae", "filename": "crates/ra_analysis/src/hir/module/nameres.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/806ea03b64455a0c10fd8a8d6d98ed4e7ac15058/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806ea03b64455a0c10fd8a8d6d98ed4e7ac15058/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs?ref=806ea03b64455a0c10fd8a8d6d98ed4e7ac15058", "patch": "@@ -371,7 +371,7 @@ mod tests {\n     use crate::{\n         AnalysisChange,\n         mock_analysis::{MockAnalysis, analysis_and_position},\n-        hir::{HirDatabase, module::ModuleDescriptor},\n+        hir::{self, HirDatabase},\n         input::FilesDatabase,\n };\n     use super::*;\n@@ -380,7 +380,7 @@ mod tests {\n         let (analysis, pos) = analysis_and_position(fixture);\n         let db = analysis.imp.db;\n         let source_root = db.file_source_root(pos.file_id);\n-        let descr = ModuleDescriptor::guess_from_position(&*db, pos)\n+        let descr = hir::Module::guess_from_position(&*db, pos)\n             .unwrap()\n             .unwrap();\n         let module_id = descr.module_id;"}, {"sha": "2e58539493120d81122322ed6f6cdfda8293ccd6", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/806ea03b64455a0c10fd8a8d6d98ed4e7ac15058/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806ea03b64455a0c10fd8a8d6d98ed4e7ac15058/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=806ea03b64455a0c10fd8a8d6d98ed4e7ac15058", "patch": "@@ -21,7 +21,7 @@ use crate::{\n     db::{self, FileSyntaxQuery, SyntaxDatabase},\n     hir::{\n         self,\n-        FunctionDescriptor, FnSignatureInfo,\n+        FnSignatureInfo,\n         Problem,\n     },\n     input::{FilesDatabase, SourceRoot, SourceRootId, WORKSPACE},\n@@ -274,7 +274,7 @@ impl AnalysisImpl {\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n             if let Some(fn_descr) =\n-                FunctionDescriptor::guess_for_name_ref(&*self.db, position.file_id, name_ref)\n+                hir::Function::guess_for_name_ref(&*self.db, position.file_id, name_ref)\n             {\n                 let scope = fn_descr.scope(&*self.db);\n                 // First try to resolve the symbol locally\n@@ -344,14 +344,14 @@ impl AnalysisImpl {\n             db: &db::RootDatabase,\n             source_file: &'a SourceFileNode,\n             position: FilePosition,\n-        ) -> Option<(ast::BindPat<'a>, FunctionDescriptor)> {\n+        ) -> Option<(ast::BindPat<'a>, hir::Function)> {\n             let syntax = source_file.syntax();\n             if let Some(binding) = find_node_at_offset::<ast::BindPat>(syntax, position.offset) {\n-                let descr = FunctionDescriptor::guess_for_bind_pat(db, position.file_id, binding)?;\n+                let descr = hir::Function::guess_for_bind_pat(db, position.file_id, binding)?;\n                 return Some((binding, descr));\n             };\n             let name_ref = find_node_at_offset::<ast::NameRef>(syntax, position.offset)?;\n-            let descr = FunctionDescriptor::guess_for_name_ref(db, position.file_id, name_ref)?;\n+            let descr = hir::Function::guess_for_name_ref(db, position.file_id, name_ref)?;\n             let scope = descr.scope(db);\n             let resolved = scope.resolve_local_name(name_ref)?;\n             let resolved = resolved.ptr().resolve(source_file);\n@@ -472,8 +472,7 @@ impl AnalysisImpl {\n             if fs.kind == FN_DEF {\n                 let fn_file = self.db.file_syntax(fn_file_id);\n                 if let Some(fn_def) = find_node_at_offset(fn_file.syntax(), fs.node_range.start()) {\n-                    let descr =\n-                        FunctionDescriptor::guess_from_source(&*self.db, fn_file_id, fn_def);\n+                    let descr = hir::Function::guess_from_source(&*self.db, fn_file_id, fn_def);\n                     if let Some(descriptor) = descr.signature_info(&*self.db) {\n                         // If we have a calling expression let's find which argument we are on\n                         let mut current_parameter = None;"}]}