{"sha": "26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZTIyYjhlMmVlMDk2NzkxMWNlN2Q5ODZkNzlmMWRjYjUwMWJkN2E=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-07-30T08:14:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-30T08:14:46Z"}, "message": "Rollup merge of #35080 - jonathandturner:fix_numeric_expected_found, r=nikomatsakis\n\nRename _ to {integer} and {float} for unknown numeric types\n\nThis PR renames _ to {integer} or {float} for unknown numeric types, to help people parse error messages that have numeric types that haven't been nailed down.\n\nExample:\n```rust\nfn main() {\n    let x: String = 4;\n}\n```\n\nBefore:\n```\nerror[E0308]: mismatched types\n --> quicktest.rs:2:21\n  |\n2 |     let x: String = 4;\n  |                     ^ expected struct `std::string::String`, found integral variable\n  |\n  = note: expected type `std::string::String`\n  = note:    found type `_`\n\nerror: aborting due to previous error\n```\n\nafter:\n```\nerror[E0308]: mismatched types\n --> quicktest.rs:2:21\n  |\n2 |     let x: String = 4;\n  |                     ^ expected struct `std::string::String`, found integral variable\n  |\n  = note: expected type `std::string::String`\n  = note:    found type `{integer}`\n\nerror: aborting due to previous error\n```\n```", "tree": {"sha": "318b67e3d2ec71e96f7ff0d42affee20b670e7d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/318b67e3d2ec71e96f7ff0d42affee20b670e7d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "html_url": "https://github.com/rust-lang/rust/commit/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c6421fb17841f5a7071ae691edc76e8b7286bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6421fb17841f5a7071ae691edc76e8b7286bc8", "html_url": "https://github.com/rust-lang/rust/commit/8c6421fb17841f5a7071ae691edc76e8b7286bc8"}, {"sha": "ea77049cfa72358d6a2d6370a3f7a6a70d93b8e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea77049cfa72358d6a2d6370a3f7a6a70d93b8e8", "html_url": "https://github.com/rust-lang/rust/commit/ea77049cfa72358d6a2d6370a3f7a6a70d93b8e8"}], "stats": {"total": 84, "additions": 43, "deletions": 41}, "files": [{"sha": "60977a80946ff6e23950ef024d739eb4764a45a1", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -974,7 +974,9 @@ impl fmt::Display for ty::InferTy {\n             ty::TyVar(ref vid) if print_var_ids => write!(f, \"{:?}\", vid),\n             ty::IntVar(ref vid) if print_var_ids => write!(f, \"{:?}\", vid),\n             ty::FloatVar(ref vid) if print_var_ids => write!(f, \"{:?}\", vid),\n-            ty::TyVar(_) | ty::IntVar(_) | ty::FloatVar(_) => write!(f, \"_\"),\n+            ty::TyVar(_) => write!(f, \"_\"),\n+            ty::IntVar(_) => write!(f, \"{}\", \"{integer}\"),\n+            ty::FloatVar(_) => write!(f, \"{}\", \"{float}\"),\n             ty::FreshTy(v) => write!(f, \"FreshTy({})\", v),\n             ty::FreshIntTy(v) => write!(f, \"FreshIntTy({})\", v),\n             ty::FreshFloatTy(v) => write!(f, \"FreshFloatTy({})\", v)"}, {"sha": "47e1c09f380b89d6601257017e709657766ab559", "filename": "src/test/compile-fail/array-not-vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let _x: i32 = [1, 2, 3];\n     //~^ ERROR mismatched types\n     //~| expected type `i32`\n-    //~| found type `[_; 3]`\n+    //~| found type `[{integer}; 3]`\n     //~| expected i32, found array of 3 elements\n \n     let x: &[i32] = &[1, 2, 3];"}, {"sha": "5547d19868d34e2340473e9fc480a8092a59e9ae", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -11,6 +11,6 @@\n static i: String = 10;\n //~^ ERROR mismatched types\n //~| expected type `std::string::String`\n-//~| found type `_`\n+//~| found type `{integer}`\n //~| expected struct `std::string::String`, found integral variable\n fn main() { println!(\"{}\", i); }"}, {"sha": "86702a7463fd0872957e6f96f79c4462c512d3ec", "filename": "src/test/compile-fail/coerce-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     f(&x);\n     //~^ ERROR mismatched types\n     //~| expected type `&mut i32`\n-    //~| found type `&_`\n+    //~| found type `&{integer}`\n     //~| values differ in mutability\n }"}, {"sha": "a619f33468f4a94e068fe70d6a8aa26da03c6312", "filename": "src/test/compile-fail/coercion-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -14,6 +14,6 @@ fn main() {\n     let _: &[i32] = [0];\n     //~^ ERROR mismatched types\n     //~| expected type `&[i32]`\n-    //~| found type `[_; 1]`\n+    //~| found type `[{integer}; 1]`\n     //~| expected &-ptr, found array of 1 elements\n }"}, {"sha": "1a7ceb2e7639e72392f34b352af61f0bd621e0c1", "filename": "src/test/compile-fail/fully-qualified-type-name1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     x = 5;\n     //~^ ERROR mismatched types\n     //~| expected type `std::option::Option<usize>`\n-    //~| found type `_`\n+    //~| found type `{integer}`\n     //~| expected enum `std::option::Option`, found integral variable\n }"}, {"sha": "40013a7ee43bb142495a317c1f5640b401209aa4", "filename": "src/test/compile-fail/if-let-arm-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     if let Some(b) = None { //~ ERROR: `if let` arms have incompatible types\n         //~^ expected (), found integral variable\n         //~| expected type `()`\n-        //~| found type `_`\n+        //~| found type `{integer}`\n         ()\n     } else {                //~ NOTE: `if let` arm with an incompatible type\n         1"}, {"sha": "61d54b3f8e4fdf407ce95120cc313d55d0dbc2ef", "filename": "src/test/compile-fail/indexing-requires-a-uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -13,7 +13,7 @@\n \n fn main() {\n     fn bar<T>(_: T) {}\n-    [0][0u8]; //~ ERROR: `[_]: std::ops::Index<u8>` is not satisfied\n+    [0][0u8]; //~ ERROR: `[{integer}]: std::ops::Index<u8>` is not satisfied\n \n     [0][0]; // should infer to be a usize\n "}, {"sha": "f2686ae4d196b432751df2d1abaffa2d7ab55b78", "filename": "src/test/compile-fail/integral-variable-unification-error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let mut x = 2;\n     x = 5.0;\n     //~^ ERROR mismatched types\n-    //~| expected type `_`\n-    //~| found type `_`\n+    //~| expected type `{integer}`\n+    //~| found type `{float}`\n     //~| expected integral variable, found floating-point variable\n }"}, {"sha": "abddf6ba7a38d4550392a514e56cc7d51e45820e", "filename": "src/test/compile-fail/issue-13466.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -17,13 +17,13 @@ pub fn main() {\n     let _x: usize = match Some(1) {\n         Ok(u) => u,\n         //~^ ERROR mismatched types\n-        //~| expected type `std::option::Option<_>`\n+        //~| expected type `std::option::Option<{integer}>`\n         //~| found type `std::result::Result<_, _>`\n         //~| expected enum `std::option::Option`, found enum `std::result::Result`\n \n         Err(e) => panic!(e)\n         //~^ ERROR mismatched types\n-        //~| expected type `std::option::Option<_>`\n+        //~| expected type `std::option::Option<{integer}>`\n         //~| found type `std::result::Result<_, _>`\n         //~| expected enum `std::option::Option`, found enum `std::result::Result`\n     };"}, {"sha": "3ea136aca4becdc9da48b09ef452906a7377e5d9", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -14,5 +14,5 @@\n fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     (|| Box::new(*(&[0][..])))();\n-    //~^ ERROR `[_]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[{integer}]: std::marker::Sized` is not satisfied\n }"}, {"sha": "e07dfaf9fe59e1d7296c159925bd98f3ac7ed804", "filename": "src/test/compile-fail/issue-19991.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -14,7 +14,7 @@\n fn main() {\n     if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an else clause\n                                            //~| expected type `()`\n-                                           //~| found type `_`\n+                                           //~| found type `{integer}`\n                                            //~| expected (), found integral variable\n         765\n     };"}, {"sha": "22772e596b19ec19a68c607ef399bc903502504b", "filename": "src/test/compile-fail/issue-26237.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fissue-26237.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fissue-26237.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26237.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -11,7 +11,7 @@\n macro_rules! macro_panic {\n     ($not_a_function:expr, $some_argument:ident) => {\n         $not_a_function($some_argument)\n-        //~^ ERROR expected function, found `_`\n+        //~^ ERROR expected function, found `{integer}`\n     }\n }\n "}, {"sha": "b1f668d9c5e217f8ac1b085ff8a1b3022be4842a", "filename": "src/test/compile-fail/issue-4201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     } else if false {\n //~^ ERROR if may be missing an else clause\n //~| expected type `()`\n-//~| found type `_`\n+//~| found type `{integer}`\n //~| expected (), found integral variable\n         1\n     };"}, {"sha": "77588e5c221fd38a554989388f01c1e028b83509", "filename": "src/test/compile-fail/issue-4968.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -14,7 +14,7 @@ const A: (isize,isize) = (4,2);\n fn main() {\n     match 42 { A => () }\n     //~^ ERROR mismatched types\n-    //~| expected type `_`\n+    //~| expected type `{integer}`\n     //~| found type `(isize, isize)`\n     //~| expected integral variable, found tuple\n }"}, {"sha": "ed465117344d407e682d5deabf14f9c70d9999ea", "filename": "src/test/compile-fail/issue-7867.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -25,12 +25,12 @@ fn main() {\n     match &Some(42) {\n         Some(x) => (),\n         //~^ ERROR mismatched types\n-        //~| expected type `&std::option::Option<_>`\n+        //~| expected type `&std::option::Option<{integer}>`\n         //~| found type `std::option::Option<_>`\n         //~| expected &-ptr, found enum `std::option::Option`\n         None => ()\n         //~^ ERROR mismatched types\n-        //~| expected type `&std::option::Option<_>`\n+        //~| expected type `&std::option::Option<{integer}>`\n         //~| found type `std::option::Option<_>`\n         //~| expected &-ptr, found enum `std::option::Option`\n     }"}, {"sha": "a455a7b2d5d0f7b190f06542bc91619c4cf919e4", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -21,5 +21,5 @@ fn take_param<T:Foo>(foo: &T) { }\n fn main() {\n     let x: Box<_> = box 3;\n     take_param(&x);\n-    //~^ ERROR `Box<_>: std::marker::Copy` is not satisfied\n+    //~^ ERROR `Box<{integer}>: std::marker::Copy` is not satisfied\n }"}, {"sha": "f89b3e39390d31de8b22d29cbea8c112ede25b71", "filename": "src/test/compile-fail/match-range-fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -20,14 +20,14 @@ fn main() {\n         10 ... \"what\" => ()\n     };\n     //~^^ ERROR only char and numeric types are allowed in range\n-    //~| start type: _\n+    //~| start type: {integer}\n     //~| end type: &'static str\n \n     match 5 {\n         'c' ... 100 => { }\n         _ => { }\n     };\n     //~^^^ ERROR mismatched types\n-    //~| expected type `_`\n+    //~| expected type `{integer}`\n     //~| found type `char`\n }"}, {"sha": "596cec167c218ac2ce674d1c7366c571143f2ce2", "filename": "src/test/compile-fail/match-vec-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     };\n \n     match &[0, 1, 2] {\n-        [..] => {} //~ ERROR expected an array or slice, found `&[_; 3]`\n+        [..] => {} //~ ERROR expected an array or slice, found `&[{integer}; 3]`\n     };\n \n     match &[0, 1, 2] {"}, {"sha": "03816362d46c34860aef664661f0898315338108", "filename": "src/test/compile-fail/method-self-arg-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -24,6 +24,6 @@ fn main() {\n                  //~| expected &-ptr, found struct `Foo`\n     Foo::bar(&42); //~  ERROR mismatched types\n                       //~| expected type `&Foo`\n-                      //~| found type `&_`\n+                      //~| found type `&{integer}`\n                       //~| expected struct `Foo`, found integral variable\n }"}, {"sha": "318d121e4c2df45f20ceaecc3fd512f7b00ba203", "filename": "src/test/compile-fail/mut-pattern-mismatched.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     // (separate lines to ensure the spans are accurate)\n \n      let &_ //~  ERROR mismatched types\n-            //~| expected type `&mut _`\n+            //~| expected type `&mut {integer}`\n             //~| found type `&_`\n             //~| values differ in mutability\n         = foo;\n@@ -23,7 +23,7 @@ fn main() {\n     let bar = &1;\n     let &_ = bar;\n     let &mut _ //~  ERROR mismatched types\n-               //~| expected type `&_`\n+               //~| expected type `&{integer}`\n                //~| found type `&mut _`\n                //~| values differ in mutability\n          = bar;"}, {"sha": "f31d3787334916bffb1565d63bd1eaf5df7067a8", "filename": "src/test/compile-fail/no_send-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -15,5 +15,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Rc::new(5);\n     bar(x);\n-    //~^ ERROR `std::rc::Rc<_>: std::marker::Send` is not satisfied\n+    //~^ ERROR `std::rc::Rc<{integer}>: std::marker::Send` is not satisfied\n }"}, {"sha": "dc6833163a478b4f6d2ae342da44ce03d548de93", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -23,5 +23,5 @@ pub fn main() {\n     // Unsized type.\n     let arr: &[_] = &[1, 2, 3];\n     let range = *arr..;\n-    //~^ ERROR `[_]: std::marker::Sized` is not satisfied\n+    //~^ ERROR `[{integer}]: std::marker::Sized` is not satisfied\n }"}, {"sha": "1758b28a32482555bb6911420f996ced91ed6330", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     let d = [0; 0.5];\n     //~^ ERROR mismatched types\n     //~| expected type `usize`\n-    //~| found type `_`\n+    //~| found type `{float}`\n     //~| expected usize, found floating-point variable\n     //~| ERROR expected usize for repeat count, found float [E0306]\n     let e = [0; \"foo\"];"}, {"sha": "2eba7c2e534e15abc2458d34ae90644577c5d0cf", "filename": "src/test/compile-fail/slightly-nice-generic-literal-messages.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -16,8 +16,8 @@ fn main() {\n     match Foo(1.1, marker::PhantomData) {\n         1 => {}\n     //~^ ERROR mismatched types\n-    //~| expected type `Foo<_, _>`\n-    //~| found type `_`\n+    //~| expected type `Foo<{float}, _>`\n+    //~| found type `{integer}`\n     //~| expected struct `Foo`, found integral variable\n     }\n "}, {"sha": "2b2c23a3ce4e92c88fee61c0c242775e1a65cc7d", "filename": "src/test/compile-fail/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     let s: &str = \"hello\";\n-    let c: u8 = s[4]; //~ ERROR `str: std::ops::Index<_>` is not satisfied\n+    let c: u8 = s[4]; //~ ERROR `str: std::ops::Index<{integer}>` is not satisfied\n }"}, {"sha": "7e5510edb2c3377707469ca08fe23b0021103be2", "filename": "src/test/compile-fail/struct-base-wrong-type-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -24,6 +24,6 @@ fn main() {\n                                //~| expected struct `Foo`, found struct `Bar`\n     let f__isize = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n                                  //~| expected type `Foo`\n-                                 //~| found type `_`\n+                                 //~| found type `{integer}`\n                                  //~| expected struct `Foo`, found integral variable\n }"}, {"sha": "3703b15d4db836395e3407e816713d3a67ad4dc4", "filename": "src/test/compile-fail/struct-base-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -23,7 +23,7 @@ static foo: Foo = Foo { a: 2, ..bar }; //~  ERROR mismatched types\n                                        //~| expected struct `Foo`, found struct `Bar`\n static foo_i: Foo = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n                                        //~| expected type `Foo`\n-                                       //~| found type `_`\n+                                       //~| found type `{integer}`\n                                        //~| expected struct `Foo`, found integral variable\n \n fn main() {"}, {"sha": "777746a189c5feee96df9857b887b4e1bb824472", "filename": "src/test/compile-fail/traits-inductive-overflow-simultaneous.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-simultaneous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-simultaneous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-simultaneous.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -26,5 +26,5 @@ fn is_ee<T: Combo>(t: T) {\n \n fn main() {\n     is_ee(4);\n-    //~^ ERROR overflow evaluating the requirement `_: Tweedle\n+    //~^ ERROR overflow evaluating the requirement `{integer}: Tweedle\n }"}, {"sha": "a71f441029472229b37f3e0af7a09b5ea105a9a7", "filename": "src/test/compile-fail/tuple-arity-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     let y = first ((1,2.0,3));\n     //~^ ERROR mismatched types\n     //~| expected type `(isize, f64)`\n-    //~| found type `(isize, f64, _)`\n+    //~| found type `(isize, f64, {integer})`\n     //~| expected a tuple with 2 elements, found one with 3 elements\n \n     let y = first ((1,));"}, {"sha": "4597cf3d350c4167af32c3c32204cbd7ddaf9379", "filename": "src/test/compile-fail/tuple-index-out-of-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-index-out-of-bounds.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -20,5 +20,5 @@ fn main() {\n     tuple.0;\n     tuple.1;\n     tuple.2;\n-    //~^ ERROR attempted out-of-bounds tuple index `2` on type `(_, _)`\n+    //~^ ERROR attempted out-of-bounds tuple index `2` on type `({integer}, {integer})`\n }"}, {"sha": "9359c03595669a659160821689c8d16bd3f5b9e4", "filename": "src/test/compile-fail/type-mismatch-multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -13,7 +13,7 @@\n fn main() { let a: bool = 1; let b: i32 = true; }\n //~^ ERROR mismatched types\n //~| expected type `bool`\n-//~| found type `_`\n+//~| found type `{integer}`\n //~| expected bool, found integral variable\n //~| ERROR mismatched types\n //~| expected i32, found bool"}, {"sha": "f0172777cdabb4e5828e6370afe614b5d5851390", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -27,7 +27,7 @@ fn test<T: Sync>(s: T) {}\n fn main() {\n     let us = UnsafeCell::new(MySync{u: UnsafeCell::new(0)});\n     test(us);\n-    //~^ ERROR `std::cell::UnsafeCell<MySync<_>>: std::marker::Sync` is not satisfied\n+    //~^ ERROR `std::cell::UnsafeCell<MySync<{integer}>>: std::marker::Sync` is not satisfied\n \n     let uns = UnsafeCell::new(NoSync);\n     test(uns);"}, {"sha": "8b3e9369ece46d12e19234da3379b039a6ad006f", "filename": "src/test/compile-fail/vtable-res-trait-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -24,7 +24,7 @@ impl TraitB for isize {\n \n fn call_it<B:TraitB>(b: B)  -> isize {\n     let y = 4;\n-    b.gimme_an_a(y) //~ ERROR `_: TraitA` is not satisfied\n+    b.gimme_an_a(y) //~ ERROR `{integer}: TraitA` is not satisfied\n }\n \n fn main() {"}, {"sha": "45638a65915c49901430f6a63d556b5aa0c13d28", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/26e22b8e2ee0967911ce7d986d79f1dcb501bd7a/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=26e22b8e2ee0967911ce7d986d79f1dcb501bd7a", "patch": "@@ -5,7 +5,7 @@ error[E0308]: mismatched types\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected u64, found usize\n $DIR/issue-26480.rs:38:5: 38:19 note: in this expansion of write! (defined in $DIR/issue-26480.rs)\n \n-error: non-scalar cast: `_` as `()`\n+error: non-scalar cast: `{integer}` as `()`\n   --> $DIR/issue-26480.rs:33:19\n    |\n 33 |     ($x:expr) => ($x as ())"}]}