{"sha": "559d2ef925fdf82e34022358e0cc182aaeea8b21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1OWQyZWY5MjVmZGY4MmUzNDAyMjM1OGUwY2MxODJhYWVlYThiMjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-18T15:37:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-18T15:37:39Z"}, "message": "auto merge of #7842 : thestinger/rust/closure, r=huonw", "tree": {"sha": "a1ed7e7859ca0acfe2e091b328a93636f29bfdca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1ed7e7859ca0acfe2e091b328a93636f29bfdca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/559d2ef925fdf82e34022358e0cc182aaeea8b21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/559d2ef925fdf82e34022358e0cc182aaeea8b21", "html_url": "https://github.com/rust-lang/rust/commit/559d2ef925fdf82e34022358e0cc182aaeea8b21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/559d2ef925fdf82e34022358e0cc182aaeea8b21/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "babf7411777a1f0318aafa24f548f2be4a64a521", "url": "https://api.github.com/repos/rust-lang/rust/commits/babf7411777a1f0318aafa24f548f2be4a64a521", "html_url": "https://github.com/rust-lang/rust/commit/babf7411777a1f0318aafa24f548f2be4a64a521"}, {"sha": "ce166446777c6771c136c2e896b25b750cb9685b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce166446777c6771c136c2e896b25b750cb9685b", "html_url": "https://github.com/rust-lang/rust/commit/ce166446777c6771c136c2e896b25b750cb9685b"}], "stats": {"total": 81, "additions": 24, "deletions": 57}, "files": [{"sha": "86d30be7d4111f27fdeb7756f2a4e459c2be1ccd", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/559d2ef925fdf82e34022358e0cc182aaeea8b21/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/559d2ef925fdf82e34022358e0cc182aaeea8b21/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=559d2ef925fdf82e34022358e0cc182aaeea8b21", "patch": "@@ -174,16 +174,6 @@ pub fn allocate_cbox(bcx: block, sigil: ast::Sigil, cdata_ty: ty::t)\n     let ccx = bcx.ccx();\n     let tcx = ccx.tcx;\n \n-    fn nuke_ref_count(bcx: block, llbox: ValueRef) {\n-        let _icx = push_ctxt(\"closure::nuke_ref_count\");\n-        // Initialize ref count to arbitrary value for debugging:\n-        let ccx = bcx.ccx();\n-        let llbox = PointerCast(bcx, llbox, Type::opaque_box(ccx).ptr_to());\n-        let ref_cnt = GEPi(bcx, llbox, [0u, abi::box_field_refcnt]);\n-        let rc = C_int(ccx, 0x12345678);\n-        Store(bcx, rc, ref_cnt);\n-    }\n-\n     // Allocate and initialize the box:\n     match sigil {\n         ast::ManagedSigil => {\n@@ -195,7 +185,6 @@ pub fn allocate_cbox(bcx: block, sigil: ast::Sigil, cdata_ty: ty::t)\n         ast::BorrowedSigil => {\n             let cbox_ty = tuplify_box_ty(tcx, cdata_ty);\n             let llbox = alloc_ty(bcx, cbox_ty, \"__closure\");\n-            nuke_ref_count(bcx, llbox);\n             rslt(bcx, llbox)\n         }\n     }"}, {"sha": "bccdc30a0734de3e57cd01ad611a4177d19db901", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/559d2ef925fdf82e34022358e0cc182aaeea8b21/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/559d2ef925fdf82e34022358e0cc182aaeea8b21/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=559d2ef925fdf82e34022358e0cc182aaeea8b21", "patch": "@@ -87,8 +87,7 @@ pub fn is_not_null<T>(ptr: *const T) -> bool { !is_null(ptr) }\n #[inline]\n #[cfg(target_word_size = \"32\")]\n pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n-    use unstable::intrinsics::memmove32;\n-    memmove32(dst, src as *T, count as u32);\n+    intrinsics::memmove32(dst, src as *T, count as u32);\n }\n \n /**\n@@ -100,8 +99,7 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n #[inline]\n #[cfg(target_word_size = \"64\")]\n pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n-    use unstable::intrinsics::memmove64;\n-    memmove64(dst, src as *T, count as u64);\n+    intrinsics::memmove64(dst, src as *T, count as u64);\n }\n \n /**\n@@ -113,8 +111,7 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n #[inline]\n #[cfg(target_word_size = \"32\")]\n pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: uint) {\n-    use unstable::intrinsics::memcpy32;\n-    memcpy32(dst, src as *T, count as u32);\n+    intrinsics::memcpy32(dst, src as *T, count as u32);\n }\n \n /**\n@@ -126,8 +123,7 @@ pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: u\n #[inline]\n #[cfg(target_word_size = \"64\")]\n pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: uint) {\n-    use unstable::intrinsics::memcpy64;\n-    memcpy64(dst, src as *T, count as u64);\n+    intrinsics::memcpy64(dst, src as *T, count as u64);\n }\n \n /**\n@@ -137,8 +133,7 @@ pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: u\n #[inline]\n #[cfg(target_word_size = \"32\")]\n pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n-    use unstable::intrinsics::memset32;\n-    memset32(dst, c, count as u32);\n+    intrinsics::memset32(dst, c, count as u32);\n }\n \n /**\n@@ -148,34 +143,17 @@ pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n #[inline]\n #[cfg(target_word_size = \"64\")]\n pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n-    use unstable::intrinsics::memset64;\n-    memset64(dst, c, count as u64);\n+    intrinsics::memset64(dst, c, count as u64);\n }\n \n /**\n  * Zeroes out `count * size_of::<T>` bytes of memory at `dst`\n  */\n #[inline]\n-#[cfg(not(stage0))]\n pub unsafe fn zero_memory<T>(dst: *mut T, count: uint) {\n     set_memory(dst, 0, count);\n }\n \n-/**\n- * Zeroes out `count * size_of::<T>` bytes of memory at `dst`\n- */\n-#[inline]\n-#[cfg(stage0)]\n-pub unsafe fn zero_memory<T>(dst: *mut T, count: uint) {\n-    let mut count = count * sys::size_of::<T>();\n-    let mut dst = dst as *mut u8;\n-    while count > 0 {\n-        *dst = 0;\n-        dst = mut_offset(dst, 1);\n-        count -= 1;\n-    }\n-}\n-\n /**\n  * Swap the values at two mutable locations of the same type, without\n  * deinitialising or copying either one."}, {"sha": "63d2492bd338dcf5525488e425dac4c08cd0f19a", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/559d2ef925fdf82e34022358e0cc182aaeea8b21/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/559d2ef925fdf82e34022358e0cc182aaeea8b21/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=559d2ef925fdf82e34022358e0cc182aaeea8b21", "patch": "@@ -197,6 +197,7 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n+    #[cfg(stage0)]\n     fn visit_str(&self) -> bool {\n         self.align_to::<~str>();\n         if ! self.inner.visit_str() { return false; }"}, {"sha": "0aeff2b0b778c25d244242a1b066e2d112d3472a", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/559d2ef925fdf82e34022358e0cc182aaeea8b21/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/559d2ef925fdf82e34022358e0cc182aaeea8b21/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=559d2ef925fdf82e34022358e0cc182aaeea8b21", "patch": "@@ -200,7 +200,7 @@ impl ReprVisitor {\n     }\n \n     pub fn write_vec_range(&self,\n-                           mtbl: uint,\n+                           _mtbl: uint,\n                            ptr: *u8,\n                            len: uint,\n                            inner: *TyDesc)\n@@ -218,7 +218,6 @@ impl ReprVisitor {\n             } else {\n                 self.writer.write_str(\", \");\n             }\n-            self.write_mut_qualifier(mtbl);\n             self.visit_ptr_inner(p as *c_void, inner);\n             p = align(ptr::offset(p, sz) as uint, al) as *u8;\n             left -= dec;\n@@ -269,6 +268,7 @@ impl TyVisitor for ReprVisitor {\n     }\n \n     // Type no longer exists, vestigial function.\n+    #[cfg(stage0)]\n     fn visit_str(&self) -> bool { fail!(); }\n \n     fn visit_estr_box(&self) -> bool {\n@@ -302,18 +302,16 @@ impl TyVisitor for ReprVisitor {\n         }\n     }\n \n-    fn visit_uniq(&self, mtbl: uint, inner: *TyDesc) -> bool {\n+    fn visit_uniq(&self, _mtbl: uint, inner: *TyDesc) -> bool {\n         self.writer.write_char('~');\n-        self.write_mut_qualifier(mtbl);\n         do self.get::<*c_void> |b| {\n             self.visit_ptr_inner(*b, inner);\n         }\n     }\n \n     #[cfg(not(stage0))]\n-    fn visit_uniq_managed(&self, mtbl: uint, inner: *TyDesc) -> bool {\n+    fn visit_uniq_managed(&self, _mtbl: uint, inner: *TyDesc) -> bool {\n         self.writer.write_char('~');\n-        self.write_mut_qualifier(mtbl);\n         do self.get::<&managed::raw::BoxRepr> |b| {\n             let p = ptr::to_unsafe_ptr(&b.data) as *c_void;\n             self.visit_ptr_inner(p, inner);\n@@ -348,10 +346,20 @@ impl TyVisitor for ReprVisitor {\n     fn visit_evec_box(&self, mtbl: uint, inner: *TyDesc) -> bool {\n         do self.get::<&VecRepr> |b| {\n             self.writer.write_char('@');\n+            self.write_mut_qualifier(mtbl);\n+            self.write_unboxed_vec_repr(mtbl, &b.unboxed, inner);\n+        }\n+    }\n+\n+    #[cfg(stage0)]\n+    fn visit_evec_uniq(&self, mtbl: uint, inner: *TyDesc) -> bool {\n+        do self.get::<&VecRepr> |b| {\n+            self.writer.write_char('~');\n             self.write_unboxed_vec_repr(mtbl, &b.unboxed, inner);\n         }\n     }\n \n+    #[cfg(not(stage0))]\n     fn visit_evec_uniq(&self, mtbl: uint, inner: *TyDesc) -> bool {\n         do self.get::<&UnboxedVecRepr> |b| {\n             self.writer.write_char('~');\n@@ -613,13 +621,14 @@ fn test_repr() {\n     exact_test(&(@\"hello\"), \"@\\\"hello\\\"\");\n     exact_test(&(~\"he\\u10f3llo\"), \"~\\\"he\\\\u10f3llo\\\"\");\n \n-    // FIXME #4210: the mut fields are a bit off here.\n     exact_test(&(@10), \"@10\");\n-    exact_test(&(@mut 10), \"@10\");\n+    exact_test(&(@mut 10), \"@10\"); // FIXME: #4210: incorrect\n+    exact_test(&((@mut 10, 2)), \"(@mut 10, 2)\");\n     exact_test(&(~10), \"~10\");\n     exact_test(&(&10), \"&10\");\n     let mut x = 10;\n     exact_test(&(&mut x), \"&mut 10\");\n+    exact_test(&(@mut [1, 2]), \"@mut [1, 2]\");\n \n     exact_test(&(1,), \"(1,)\");\n     exact_test(&(@[1,2,3,4,5,6,7,8]),"}, {"sha": "796f691dd5661383d042e6f67c63d5326fb01d7c", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/559d2ef925fdf82e34022358e0cc182aaeea8b21/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/559d2ef925fdf82e34022358e0cc182aaeea8b21/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=559d2ef925fdf82e34022358e0cc182aaeea8b21", "patch": "@@ -82,7 +82,6 @@ pub trait TyVisitor {\n     fn visit_f64(&self) -> bool;\n \n     fn visit_char(&self) -> bool;\n-    fn visit_str(&self) -> bool;\n \n     fn visit_estr_box(&self) -> bool;\n     fn visit_estr_uniq(&self) -> bool;"}, {"sha": "88fac13c33e8f288b42ecad443eeff222f1c8e04", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/559d2ef925fdf82e34022358e0cc182aaeea8b21/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/559d2ef925fdf82e34022358e0cc182aaeea8b21/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=559d2ef925fdf82e34022358e0cc182aaeea8b21", "patch": "@@ -181,13 +181,6 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_str(&self) -> bool {\n-        self.align_to::<~str>();\n-        if ! self.inner.visit_str() { return false; }\n-        self.bump_past::<~str>();\n-        true\n-    }\n-\n     fn visit_estr_box(&self) -> bool {\n         self.align_to::<@str>();\n         if ! self.inner.visit_estr_box() { return false; }\n@@ -556,7 +549,6 @@ impl TyVisitor for my_visitor {\n     fn visit_f64(&self) -> bool { true }\n \n     fn visit_char(&self) -> bool { true }\n-    fn visit_str(&self) -> bool { true }\n \n     fn visit_estr_box(&self) -> bool { true }\n     fn visit_estr_uniq(&self) -> bool { true }"}, {"sha": "b3c5acd7dd5c416bc2dd0dcb52cdcd819d7c6dcb", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/559d2ef925fdf82e34022358e0cc182aaeea8b21/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/559d2ef925fdf82e34022358e0cc182aaeea8b21/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=559d2ef925fdf82e34022358e0cc182aaeea8b21", "patch": "@@ -59,7 +59,6 @@ impl TyVisitor for MyVisitor {\n     fn visit_f64(&self) -> bool { true }\n \n     fn visit_char(&self) -> bool { true }\n-    fn visit_str(&self) -> bool { true }\n \n     fn visit_estr_box(&self) -> bool { true }\n     fn visit_estr_uniq(&self) -> bool { true }"}]}