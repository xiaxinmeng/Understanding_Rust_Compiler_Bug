{"sha": "692077b6431460b96beb0ccf4f38299618d51db2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MjA3N2I2NDMxNDYwYjk2YmViMGNjZjRmMzgyOTk2MThkNTFkYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-30T10:31:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-30T10:31:11Z"}, "message": "auto merge of #15777 : SimonSapin/rust/pub-ascii-maps, r=alexcrichton\n\nWhen dealing with HTTP request or responses, many tokens are case-insensitive in the ASCII range but the bytes from the network are not necessarily valid UTF-8.\r\n\r\n**[breaking-change]** Rather than adding new very similar traits, this re-uses the `std::ascii::OwnedStrAsciiExt` and `std::ascii::StrAsciiExt` traits, but rename to remove `Str` since that does not apply for bytes.\r\n\r\nThis PR also makes `std::ascii::ASCII_UPPER_MAP` and `std::ascii::ASCII_LOWER_MAP`, the lookup table all these methods are based on, public. In case there is something else related to ASCII case we haven\u2019t thought of yet, that can be implemented outside of libstd without duplicating the tables.\r\n\r\nAlthough this is a breaking change, I thought this could do without an RFC since the relevant traits are not in the prelude.\r\n\r\nr? @alexcrichton", "tree": {"sha": "be2f2c3376af9a7c40bcdf3b206e7b89d0c7cec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be2f2c3376af9a7c40bcdf3b206e7b89d0c7cec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/692077b6431460b96beb0ccf4f38299618d51db2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/692077b6431460b96beb0ccf4f38299618d51db2", "html_url": "https://github.com/rust-lang/rust/commit/692077b6431460b96beb0ccf4f38299618d51db2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/692077b6431460b96beb0ccf4f38299618d51db2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "774d5eb0b07bdb4d3c853159fbcd265de60e7755", "url": "https://api.github.com/repos/rust-lang/rust/commits/774d5eb0b07bdb4d3c853159fbcd265de60e7755", "html_url": "https://github.com/rust-lang/rust/commit/774d5eb0b07bdb4d3c853159fbcd265de60e7755"}, {"sha": "235bb3fb1f40dcd7da9b4f8996f137589505de8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/235bb3fb1f40dcd7da9b4f8996f137589505de8e", "html_url": "https://github.com/rust-lang/rust/commit/235bb3fb1f40dcd7da9b4f8996f137589505de8e"}], "stats": {"total": 159, "additions": 98, "deletions": 61}, "files": [{"sha": "a8def3e289de235929e20f3fd8eddd68f8c2eab5", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/692077b6431460b96beb0ccf4f38299618d51db2/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692077b6431460b96beb0ccf4f38299618d51db2/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=692077b6431460b96beb0ccf4f38299618d51db2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::ascii::StrAsciiExt;\n+use std::ascii::AsciiExt;\n use std::cmp;\n \n #[deriving(Show, Clone)]"}, {"sha": "9224647bc798b19eeb187f3e51a9c0537a564a5b", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/692077b6431460b96beb0ccf4f38299618d51db2/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692077b6431460b96beb0ccf4f38299618d51db2/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=692077b6431460b96beb0ccf4f38299618d51db2", "patch": "@@ -31,7 +31,7 @@\n #![macro_escape]\n \n use std::hash;\n-use std::ascii::StrAsciiExt;\n+use std::ascii::AsciiExt;\n use syntax::codemap::Span;\n use syntax::visit::FnKind;\n use syntax::ast;"}, {"sha": "7731cd12ec28f8c9dde42df997982a5ea17d49bf", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 95, "deletions": 58, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/692077b6431460b96beb0ccf4f38299618d51db2/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692077b6431460b96beb0ccf4f38299618d51db2/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=692077b6431460b96beb0ccf4f38299618d51db2", "patch": "@@ -20,11 +20,19 @@ use iter::Iterator;\n use mem;\n use option::{Option, Some, None};\n use slice::{ImmutableVector, MutableVector, Vector};\n-use str::{Str, StrAllocating, StrSlice};\n+use str::{Str, StrSlice};\n+use str;\n use string::String;\n use to_string::IntoStr;\n use vec::Vec;\n \n+#[deprecated=\"this trait has been renamed to `AsciiExt`\"]\n+pub use StrAsciiExt = self::AsciiExt;\n+\n+#[deprecated=\"this trait has been renamed to `OwnedAsciiExt`\"]\n+pub use OwnedStrAsciiExt = self::OwnedAsciiExt;\n+\n+\n /// Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero.\n #[deriving(Clone, PartialEq, PartialOrd, Ord, Eq, Hash)]\n pub struct Ascii { chr: u8 }\n@@ -366,108 +374,133 @@ impl IntoBytes for Vec<Ascii> {\n     }\n }\n \n+\n /// Extension methods for ASCII-subset only operations on owned strings\n-pub trait OwnedStrAsciiExt {\n+pub trait OwnedAsciiExt {\n     /// Convert the string to ASCII upper case:\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n-    fn into_ascii_upper(self) -> String;\n+    fn into_ascii_upper(self) -> Self;\n \n     /// Convert the string to ASCII lower case:\n     /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n     /// but non-ASCII letters are unchanged.\n-    fn into_ascii_lower(self) -> String;\n+    fn into_ascii_lower(self) -> Self;\n }\n \n /// Extension methods for ASCII-subset only operations on string slices\n-pub trait StrAsciiExt {\n+pub trait AsciiExt<T> {\n     /// Makes a copy of the string in ASCII upper case:\n     /// ASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\n     /// but non-ASCII letters are unchanged.\n-    fn to_ascii_upper(&self) -> String;\n+    fn to_ascii_upper(&self) -> T;\n \n     /// Makes a copy of the string in ASCII lower case:\n     /// ASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\n     /// but non-ASCII letters are unchanged.\n-    fn to_ascii_lower(&self) -> String;\n+    fn to_ascii_lower(&self) -> T;\n \n     /// Check that two strings are an ASCII case-insensitive match.\n     /// Same as `to_ascii_lower(a) == to_ascii_lower(b)`,\n     /// but without allocating and copying temporary strings.\n-    fn eq_ignore_ascii_case(&self, other: &str) -> bool;\n+    fn eq_ignore_ascii_case(&self, other: Self) -> bool;\n }\n \n-impl<'a> StrAsciiExt for &'a str {\n+impl<'a> AsciiExt<String> for &'a str {\n     #[inline]\n     fn to_ascii_upper(&self) -> String {\n-        unsafe { str_copy_map_bytes(*self, ASCII_UPPER_MAP) }\n+        // Vec<u8>::to_ascii_upper() preserves the UTF-8 invariant.\n+        unsafe { str::raw::from_utf8_owned(self.as_bytes().to_ascii_upper()) }\n     }\n \n     #[inline]\n     fn to_ascii_lower(&self) -> String {\n-        unsafe { str_copy_map_bytes(*self, ASCII_LOWER_MAP) }\n+        // Vec<u8>::to_ascii_lower() preserves the UTF-8 invariant.\n+        unsafe { str::raw::from_utf8_owned(self.as_bytes().to_ascii_lower()) }\n     }\n \n     #[inline]\n     fn eq_ignore_ascii_case(&self, other: &str) -> bool {\n-        self.len() == other.len() &&\n-            self.as_bytes().iter().zip(other.as_bytes().iter()).all(\n-            |(byte_self, byte_other)| {\n-                ASCII_LOWER_MAP[*byte_self as uint] ==\n-                    ASCII_LOWER_MAP[*byte_other as uint]\n-            })\n+        self.as_bytes().eq_ignore_ascii_case(other.as_bytes())\n     }\n }\n \n-impl OwnedStrAsciiExt for String {\n+impl OwnedAsciiExt for String {\n     #[inline]\n     fn into_ascii_upper(self) -> String {\n-        unsafe { str_map_bytes(self, ASCII_UPPER_MAP) }\n+        // Vec<u8>::into_ascii_upper() preserves the UTF-8 invariant.\n+        unsafe { str::raw::from_utf8_owned(self.into_bytes().into_ascii_upper()) }\n     }\n \n     #[inline]\n     fn into_ascii_lower(self) -> String {\n-        unsafe { str_map_bytes(self, ASCII_LOWER_MAP) }\n+        // Vec<u8>::into_ascii_lower() preserves the UTF-8 invariant.\n+        unsafe { str::raw::from_utf8_owned(self.into_bytes().into_ascii_lower()) }\n     }\n }\n \n-#[inline]\n-unsafe fn str_map_bytes(string: String, map: &'static [u8]) -> String {\n-    let mut bytes = string.into_bytes();\n+impl<'a> AsciiExt<Vec<u8>> for &'a [u8] {\n+    #[inline]\n+    fn to_ascii_upper(&self) -> Vec<u8> {\n+        self.iter().map(|&byte| ASCII_UPPER_MAP[byte as uint]).collect()\n+    }\n \n-    for b in bytes.mut_iter() {\n-        *b = map[*b as uint];\n+    #[inline]\n+    fn to_ascii_lower(&self) -> Vec<u8> {\n+        self.iter().map(|&byte| ASCII_LOWER_MAP[byte as uint]).collect()\n     }\n \n-    String::from_utf8(bytes).unwrap()\n+    #[inline]\n+    fn eq_ignore_ascii_case(&self, other: &[u8]) -> bool {\n+        self.len() == other.len() &&\n+            self.iter().zip(other.iter()).all(\n+            |(byte_self, byte_other)| {\n+                ASCII_LOWER_MAP[*byte_self as uint] ==\n+                    ASCII_LOWER_MAP[*byte_other as uint]\n+            })\n+    }\n }\n \n-#[inline]\n-unsafe fn str_copy_map_bytes(string: &str, map: &'static [u8]) -> String {\n-    let mut s = String::from_str(string);\n-    for b in s.as_mut_bytes().mut_iter() {\n-        *b = map[*b as uint];\n+impl OwnedAsciiExt for Vec<u8> {\n+    #[inline]\n+    fn into_ascii_upper(mut self) -> Vec<u8> {\n+        for byte in self.mut_iter() {\n+            *byte = ASCII_UPPER_MAP[*byte as uint];\n+        }\n+        self\n+    }\n+\n+    #[inline]\n+    fn into_ascii_lower(mut self) -> Vec<u8> {\n+        for byte in self.mut_iter() {\n+            *byte = ASCII_LOWER_MAP[*byte as uint];\n+        }\n+        self\n     }\n-    s.into_string()\n }\n \n-static ASCII_LOWER_MAP: &'static [u8] = &[\n+\n+pub static ASCII_LOWER_MAP: [u8, ..256] = [\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n     0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n-    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,\n-    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,\n-    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,\n-    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,\n-    0x40, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n-    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,\n-    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n-    0x78, 0x79, 0x7a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,\n-    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n-    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,\n-    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n-    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,\n+    b' ', b'!', b'\"', b'#', b'$', b'%', b'&', b'\\'',\n+    b'(', b')', b'*', b'+', b',', b'-', b'.', b'/',\n+    b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7',\n+    b'8', b'9', b':', b';', b'<', b'=', b'>', b'?',\n+    b'@',\n+\n+          b'a', b'b', b'c', b'd', b'e', b'f', b'g',\n+    b'h', b'i', b'j', b'k', b'l', b'm', b'n', b'o',\n+    b'p', b'q', b'r', b's', b't', b'u', b'v', b'w',\n+    b'x', b'y', b'z',\n+\n+                      b'[', b'\\\\', b']', b'^', b'_',\n+    b'`', b'a', b'b', b'c', b'd', b'e', b'f', b'g',\n+    b'h', b'i', b'j', b'k', b'l', b'm', b'n', b'o',\n+    b'p', b'q', b'r', b's', b't', b'u', b'v', b'w',\n+    b'x', b'y', b'z', b'{', b'|', b'}', b'~', 0x7f,\n     0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,\n     0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,\n     0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,\n@@ -486,23 +519,27 @@ static ASCII_LOWER_MAP: &'static [u8] = &[\n     0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,\n ];\n \n-static ASCII_UPPER_MAP: &'static [u8] = &[\n+pub static ASCII_UPPER_MAP: [u8, ..256] = [\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n     0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n-    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,\n-    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,\n-    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,\n-    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,\n-    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,\n-    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,\n-    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,\n-    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,\n-    0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,\n-    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,\n-    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,\n-    0x58, 0x59, 0x5a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,\n+    b' ', b'!', b'\"', b'#', b'$', b'%', b'&', b'\\'',\n+    b'(', b')', b'*', b'+', b',', b'-', b'.', b'/',\n+    b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7',\n+    b'8', b'9', b':', b';', b'<', b'=', b'>', b'?',\n+    b'@', b'A', b'B', b'C', b'D', b'E', b'F', b'G',\n+    b'H', b'I', b'J', b'K', b'L', b'M', b'N', b'O',\n+    b'P', b'Q', b'R', b'S', b'T', b'U', b'V', b'W',\n+    b'X', b'Y', b'Z', b'[', b'\\\\', b']', b'^', b'_',\n+    b'`',\n+\n+          b'A', b'B', b'C', b'D', b'E', b'F', b'G',\n+    b'H', b'I', b'J', b'K', b'L', b'M', b'N', b'O',\n+    b'P', b'Q', b'R', b'S', b'T', b'U', b'V', b'W',\n+    b'X', b'Y', b'Z',\n+\n+                      b'{', b'|', b'}', b'~', 0x7f,\n     0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,\n     0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,\n     0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,"}, {"sha": "df4342bfeb57e4fcc35dafbc08fa7f395bc3af36", "filename": "src/test/run-pass/issue-10683.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/692077b6431460b96beb0ccf4f38299618d51db2/src%2Ftest%2Frun-pass%2Fissue-10683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692077b6431460b96beb0ccf4f38299618d51db2/src%2Ftest%2Frun-pass%2Fissue-10683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10683.rs?ref=692077b6431460b96beb0ccf4f38299618d51db2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::ascii::StrAsciiExt;\n+use std::ascii::AsciiExt;\n \n static NAME: &'static str = \"hello world\";\n "}]}