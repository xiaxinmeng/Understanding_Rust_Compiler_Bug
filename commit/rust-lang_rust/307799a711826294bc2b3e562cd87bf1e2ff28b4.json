{"sha": "307799a711826294bc2b3e562cd87bf1e2ff28b4", "node_id": "C_kwDOAAsO6NoAKDMwNzc5OWE3MTE4MjYyOTRiYzJiM2U1NjJjZDg3YmYxZTJmZjI4YjQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-24T14:33:43Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-24T14:33:43Z"}, "message": "Use `is_some_and`/`is_ok_and` in less obvious spots", "tree": {"sha": "1aa6b91ab277015585998e92e9be35f80331d7a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aa6b91ab277015585998e92e9be35f80331d7a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/307799a711826294bc2b3e562cd87bf1e2ff28b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/307799a711826294bc2b3e562cd87bf1e2ff28b4", "html_url": "https://github.com/rust-lang/rust/commit/307799a711826294bc2b3e562cd87bf1e2ff28b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/307799a711826294bc2b3e562cd87bf1e2ff28b4/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb0f74a8c9e8b8f488ec5894d5d314caebf4c662", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0f74a8c9e8b8f488ec5894d5d314caebf4c662", "html_url": "https://github.com/rust-lang/rust/commit/fb0f74a8c9e8b8f488ec5894d5d314caebf4c662"}], "stats": {"total": 141, "additions": 53, "deletions": 88}, "files": [{"sha": "b08ce520d04495c179f41d86b3c7287064b24c2d", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -348,7 +348,7 @@ impl<'a> AstValidator<'a> {\n         let source_map = self.session.source_map();\n         let end = source_map.end_point(sp);\n \n-        if source_map.span_to_snippet(end).map(|s| s == \";\").unwrap_or(false) {\n+        if source_map.span_to_snippet(end).is_ok_and(|s| s == \";\") {\n             end\n         } else {\n             sp.shrink_to_hi()"}, {"sha": "1d430a93a876d2c9588f2c50d7a52e7223977fc2", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -224,12 +224,9 @@ impl<'tcx> BorrowExplanation<'tcx> {\n                             if info.tail_result_is_ignored {\n                                 // #85581: If the first mutable borrow's scope contains\n                                 // the second borrow, this suggestion isn't helpful.\n-                                if !multiple_borrow_span\n-                                    .map(|(old, new)| {\n-                                        old.to(info.span.shrink_to_hi()).contains(new)\n-                                    })\n-                                    .unwrap_or(false)\n-                                {\n+                                if !multiple_borrow_span.is_some_and(|(old, new)| {\n+                                    old.to(info.span.shrink_to_hi()).contains(new)\n+                                }) {\n                                     err.span_suggestion_verbose(\n                                         info.span.shrink_to_hi(),\n                                         \"consider adding semicolon after the expression so its \\"}, {"sha": "4bde372c847dd1b169ac2d3469f834430ec4c304", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -289,8 +289,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     .body\n                     .local_decls\n                     .get(local)\n-                    .map(|l| mut_borrow_of_mutable_ref(l, self.local_names[local]))\n-                    .unwrap_or(false) =>\n+                    .is_some_and(|l| mut_borrow_of_mutable_ref(l, self.local_names[local])) =>\n             {\n                 let decl = &self.body.local_decls[local];\n                 err.span_label(span, format!(\"cannot {act}\"));"}, {"sha": "b6eb9ae980e4e28501d68ad28e8e91994ef76f03", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -125,8 +125,7 @@ impl OutlivesSuggestionBuilder {\n                     |(r, _)| {\n                         self.constraints_to_add\n                             .get(r)\n-                            .map(|r_outlived| r_outlived.as_slice().contains(fr))\n-                            .unwrap_or(false)\n+                            .is_some_and(|r_outlived| r_outlived.as_slice().contains(fr))\n                     },\n                 );\n "}, {"sha": "84e09cf0abe4fe54d1f82263d110a1f8c0c733b5", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -432,11 +432,9 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     let is_cold = if fn_sig.abi() == Abi::RustCold {\n         true\n     } else {\n-        instance\n-            .map(|inst| {\n-                fx.tcx.codegen_fn_attrs(inst.def_id()).flags.contains(CodegenFnAttrFlags::COLD)\n-            })\n-            .unwrap_or(false)\n+        instance.is_some_and(|inst| {\n+            fx.tcx.codegen_fn_attrs(inst.def_id()).flags.contains(CodegenFnAttrFlags::COLD)\n+        })\n     };\n     if is_cold {\n         fx.bcx.set_cold_block(fx.bcx.current_block().unwrap());\n@@ -470,7 +468,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     };\n \n     // Pass the caller location for `#[track_caller]`.\n-    if instance.map(|inst| inst.def.requires_caller_location(fx.tcx)).unwrap_or(false) {\n+    if instance.is_some_and(|inst| inst.def.requires_caller_location(fx.tcx)) {\n         let caller_location = fx.get_caller_location(source_info);\n         args.push(CallArgument { value: caller_location, is_owned: false });\n     }"}, {"sha": "9c6a0fae327cf2999c680095bfbb6b74bcc9415d", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -630,11 +630,11 @@ fn codegen_stmt<'tcx>(\n                     let to_ty = fx.monomorphize(to_ty);\n \n                     fn is_fat_ptr<'tcx>(fx: &FunctionCx<'_, '_, 'tcx>, ty: Ty<'tcx>) -> bool {\n-                        ty.builtin_deref(true)\n-                            .map(|ty::TypeAndMut { ty: pointee_ty, mutbl: _ }| {\n+                        ty.builtin_deref(true).is_some_and(\n+                            |ty::TypeAndMut { ty: pointee_ty, mutbl: _ }| {\n                                 has_ptr_meta(fx.tcx, pointee_ty)\n-                            })\n-                            .unwrap_or(false)\n+                            },\n+                        )\n                     }\n \n                     if is_fat_ptr(fx, from_ty) {"}, {"sha": "c24854b27a02e9095e106ed9c271478fae11e3b8", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -125,8 +125,7 @@ impl CodegenCx<'_, '_> {\n \n         // Thread-local variables generally don't support copy relocations.\n         let is_thread_local_var = llvm::LLVMIsAGlobalVariable(llval)\n-            .map(|v| llvm::LLVMIsThreadLocal(v) == llvm::True)\n-            .unwrap_or(false);\n+            .is_some_and(|v| llvm::LLVMIsThreadLocal(v) == llvm::True);\n         if is_thread_local_var {\n             return false;\n         }"}, {"sha": "138bc3eb74a4fb350209435f025c192737c8403e", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -944,7 +944,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                         tcx.features().declared_lib_features.iter().any(|&(sym, _)| sym == gate)\n                     };\n                     let feature_gate_declared = gate_declared(gate);\n-                    let implied_gate_declared = implied_by.map(gate_declared).unwrap_or(false);\n+                    let implied_gate_declared = implied_by.is_some_and(gate_declared);\n                     if !feature_gate_declared && !implied_gate_declared {\n                         self.check_op(ops::FnCallUnstable(callee, Some(gate)));\n                         return;"}, {"sha": "6d944e513145699d772984b589973d244066224a", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -285,15 +285,11 @@ pub trait Emitter: Translate {\n                     format!(\n                         \"help: {}{}: `{}`\",\n                         &msg,\n-                        if self\n-                            .source_map()\n-                            .map(|sm| is_case_difference(\n-                                sm,\n-                                substitution,\n-                                sugg.substitutions[0].parts[0].span,\n-                            ))\n-                            .unwrap_or(false)\n-                        {\n+                        if self.source_map().is_some_and(|sm| is_case_difference(\n+                            sm,\n+                            substitution,\n+                            sugg.substitutions[0].parts[0].span,\n+                        )) {\n                             \" (notice the capitalization)\"\n                         } else {\n                             \"\""}, {"sha": "beb6307846d3e8d0e1ee683f60157b11e2ffa77a", "filename": "compiler/rustc_feature/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Flib.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -84,7 +84,7 @@ impl UnstableFeatures {\n     pub fn from_environment(krate: Option<&str>) -> Self {\n         // `true` if this is a feature-staged build, i.e., on the beta or stable channel.\n         let disable_unstable_features =\n-            option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").map(|s| s != \"0\").unwrap_or(false);\n+            option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some_and(|s| s != \"0\");\n         // Returns whether `krate` should be counted as unstable\n         let is_unstable_crate =\n             |var: &str| krate.is_some_and(|name| var.split(',').any(|new_krate| new_krate == name));"}, {"sha": "b50630e636b2ea2b6588e2a532564bfd8dfc3be2", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -1748,8 +1748,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             |err: &mut Diagnostic,\n              found_to_exp_is_fallible: bool,\n              exp_to_found_is_fallible: bool| {\n-                let exp_is_lhs =\n-                    expected_ty_expr.map(|e| self.tcx.hir().is_lhs(e.hir_id)).unwrap_or(false);\n+                let exp_is_lhs = expected_ty_expr.is_some_and(|e| self.tcx.hir().is_lhs(e.hir_id));\n \n                 if exp_is_lhs {\n                     return;"}, {"sha": "2fdcd09b9a2f46893b1b5c8c59965d2768d28daf", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -1017,23 +1017,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .typeck_results\n             .borrow()\n             .expr_ty_adjusted_opt(rcvr)\n-            .and_then(|ty| expected.map(|expected_ty| expected_ty.peel_refs() == ty.peel_refs()))\n-            .unwrap_or(false);\n+            .zip(expected)\n+            .is_some_and(|(ty, expected_ty)| expected_ty.peel_refs() == ty.peel_refs());\n \n         let prev_call_mutates_and_returns_unit = || {\n             self.typeck_results\n                 .borrow()\n                 .type_dependent_def_id(expr.hir_id)\n                 .map(|def_id| self.tcx.fn_sig(def_id).skip_binder().skip_binder())\n                 .and_then(|sig| sig.inputs_and_output.split_last())\n-                .map(|(output, inputs)| {\n+                .is_some_and(|(output, inputs)| {\n                     output.is_unit()\n                         && inputs\n                             .get(0)\n                             .and_then(|self_ty| self_ty.ref_mutability())\n                             .is_some_and(rustc_ast::Mutability::is_mut)\n                 })\n-                .unwrap_or(false)\n         };\n \n         if !(rcvr_has_the_expected_type || prev_call_mutates_and_returns_unit()) {\n@@ -1200,10 +1199,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        let has_self = path_segs\n-            .last()\n-            .map(|PathSeg(def_id, _)| tcx.generics_of(*def_id).has_self)\n-            .unwrap_or(false);\n+        let has_self =\n+            path_segs.last().is_some_and(|PathSeg(def_id, _)| tcx.generics_of(*def_id).has_self);\n \n         let (res, self_ctor_substs) = if let Res::SelfCtor(impl_def_id) = res {\n             let ty = self.handle_raw_ty(span, tcx.at(span).type_of(impl_def_id).subst_identity());"}, {"sha": "9458099f56ff97600be27412c3c308b79547e717", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -972,15 +972,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut obligations_should_hold = Vec::new();\n         // Checks if a root variable implements any of the auto traits\n         for check_trait in auto_traits_def_id.iter() {\n-            obligations_should_hold.push(\n-                check_trait\n-                    .map(|check_trait| {\n-                        self.infcx\n-                            .type_implements_trait(check_trait, [ty], self.param_env)\n-                            .must_apply_modulo_regions()\n-                    })\n-                    .unwrap_or(false),\n-            );\n+            obligations_should_hold.push(check_trait.is_some_and(|check_trait| {\n+                self.infcx\n+                    .type_implements_trait(check_trait, [ty], self.param_env)\n+                    .must_apply_modulo_regions()\n+            }));\n         }\n \n         let mut problematic_captures = FxHashMap::default();\n@@ -996,15 +992,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Checks if a capture implements any of the auto traits\n             let mut obligations_holds_for_capture = Vec::new();\n             for check_trait in auto_traits_def_id.iter() {\n-                obligations_holds_for_capture.push(\n-                    check_trait\n-                        .map(|check_trait| {\n-                            self.infcx\n-                                .type_implements_trait(check_trait, [ty], self.param_env)\n-                                .must_apply_modulo_regions()\n-                        })\n-                        .unwrap_or(false),\n-                );\n+                obligations_holds_for_capture.push(check_trait.is_some_and(|check_trait| {\n+                    self.infcx\n+                        .type_implements_trait(check_trait, [ty], self.param_env)\n+                        .must_apply_modulo_regions()\n+                }));\n             }\n \n             let mut capture_problems = FxHashSet::default();"}, {"sha": "6f773e04a97d78a368f295dff4a21b641a834ec9", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -383,9 +383,8 @@ impl LateLintPass<'_> for Diagnostics {\n         debug!(?span, ?def_id, ?substs);\n         let has_attr = ty::Instance::resolve(cx.tcx, cx.param_env, def_id, substs)\n             .ok()\n-            .and_then(|inst| inst)\n-            .map(|inst| cx.tcx.has_attr(inst.def_id(), sym::rustc_lint_diagnostics))\n-            .unwrap_or(false);\n+            .flatten()\n+            .is_some_and(|inst| cx.tcx.has_attr(inst.def_id(), sym::rustc_lint_diagnostics));\n         if !has_attr {\n             return;\n         }"}, {"sha": "c14540396857477dd3c73efea847dad01ef97572", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -2610,7 +2610,7 @@ impl<'a> Parser<'a> {\n         let TyKind::Path(qself, path) = &ty.kind else { return Ok(()) };\n         let qself_position = qself.as_ref().map(|qself| qself.position);\n         for (i, segments) in path.segments.windows(2).enumerate() {\n-            if qself_position.map(|pos| i < pos).unwrap_or(false) {\n+            if qself_position.is_some_and(|pos| i < pos) {\n                 continue;\n             }\n             if let [a, b] = segments {"}, {"sha": "b81b7ad6013b5df0e354deed34001339304b9e92", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -807,15 +807,12 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n             );\n \n             let is_allowed_through_unstable_modules = |def_id| {\n-                self.tcx\n-                    .lookup_stability(def_id)\n-                    .map(|stab| match stab.level {\n-                        StabilityLevel::Stable { allowed_through_unstable_modules, .. } => {\n-                            allowed_through_unstable_modules\n-                        }\n-                        _ => false,\n-                    })\n-                    .unwrap_or(false)\n+                self.tcx.lookup_stability(def_id).is_some_and(|stab| match stab.level {\n+                    StabilityLevel::Stable { allowed_through_unstable_modules, .. } => {\n+                        allowed_through_unstable_modules\n+                    }\n+                    _ => false,\n+                })\n             };\n \n             if item_is_allowed && !is_allowed_through_unstable_modules(def_id) {"}, {"sha": "dc35c8b176f5cbb6de8c397378b5be6bdf4d9f8b", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -117,16 +117,11 @@ impl<'a, 'b, 'tcx> UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n         match item.kind {\n             ast::UseTreeKind::Simple(Some(ident)) => {\n                 if ident.name == kw::Underscore\n-                    && !self\n-                        .r\n-                        .import_res_map\n-                        .get(&id)\n-                        .map(|per_ns| {\n-                            per_ns.iter().filter_map(|res| res.as_ref()).any(|res| {\n-                                matches!(res, Res::Def(DefKind::Trait | DefKind::TraitAlias, _))\n-                            })\n+                    && !self.r.import_res_map.get(&id).is_some_and(|per_ns| {\n+                        per_ns.iter().filter_map(|res| res.as_ref()).any(|res| {\n+                            matches!(res, Res::Def(DefKind::Trait | DefKind::TraitAlias, _))\n                         })\n-                        .unwrap_or(false)\n+                    })\n                 {\n                     self.unused_import(self.base_id).add(id);\n                 }"}, {"sha": "df65825802e126fd95736f41ac47e9aeac2c411e", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -197,8 +197,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                             .sess\n                             .source_map()\n                             .span_to_snippet(span)\n-                            .map(|snippet| snippet.ends_with(')'))\n-                            .unwrap_or(false)\n+                            .is_ok_and(|snippet| snippet.ends_with(')'))\n                     }\n                     Res::Def(\n                         DefKind::Ctor(..) | DefKind::AssocFn | DefKind::Const | DefKind::AssocConst,"}, {"sha": "df5c16a9375fbf07773ff2320b9834c09a42dc6f", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307799a711826294bc2b3e562cd87bf1e2ff28b4/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=307799a711826294bc2b3e562cd87bf1e2ff28b4", "patch": "@@ -823,8 +823,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 let is_allowed = |feature| {\n                     self.active_features.contains(&feature) || span.allows_unstable(feature)\n                 };\n-                let allowed_by_implication =\n-                    implied_by.map(|feature| is_allowed(feature)).unwrap_or(false);\n+                let allowed_by_implication = implied_by.is_some_and(|feature| is_allowed(feature));\n                 if !is_allowed(feature) && !allowed_by_implication {\n                     let lint_buffer = &mut self.lint_buffer;\n                     let soft_handler ="}]}