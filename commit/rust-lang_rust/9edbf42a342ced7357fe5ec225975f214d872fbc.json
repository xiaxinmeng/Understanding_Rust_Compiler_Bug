{"sha": "9edbf42a342ced7357fe5ec225975f214d872fbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZGJmNDJhMzQyY2VkNzM1N2ZlNWVjMjI1OTc1ZjIxNGQ4NzJmYmM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-02T01:36:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-02T01:36:21Z"}, "message": "rollup merge of #23945: pnkfelix/gate-u-negate\n\nFeature-gate  unsigned unary negate.\n\nDiscussed in weekly meeting here: https://github.com/rust-lang/meeting-minutes/blob/master/weekly-meetings/2015-03-31.md#feature-gate--expr\n\nand also in the internals thread here: http://internals.rust-lang.org/t/forbid-unsigned-integer/752", "tree": {"sha": "3ac2106c48eb2997f0795c8bcef20f921407636b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ac2106c48eb2997f0795c8bcef20f921407636b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9edbf42a342ced7357fe5ec225975f214d872fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9edbf42a342ced7357fe5ec225975f214d872fbc", "html_url": "https://github.com/rust-lang/rust/commit/9edbf42a342ced7357fe5ec225975f214d872fbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9edbf42a342ced7357fe5ec225975f214d872fbc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e3b0c051dca9880bf66b5366dccd2e0bb424b99", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e3b0c051dca9880bf66b5366dccd2e0bb424b99", "html_url": "https://github.com/rust-lang/rust/commit/2e3b0c051dca9880bf66b5366dccd2e0bb424b99"}, {"sha": "f86318d63c86568b312f39da20bea67e328c1fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f86318d63c86568b312f39da20bea67e328c1fc5", "html_url": "https://github.com/rust-lang/rust/commit/f86318d63c86568b312f39da20bea67e328c1fc5"}], "stats": {"total": 194, "additions": 146, "deletions": 48}, "files": [{"sha": "ff923fb19068fb0a8187ea5684d561fac6bfd182", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -1135,7 +1135,7 @@ impl Iterator for ElementSwaps {\n     // #[inline]\n     fn next(&mut self) -> Option<(usize, usize)> {\n         fn new_pos_wrapping(i: usize, s: Direction) -> usize {\n-            i.wrapping_add(match s { Pos => 1, Neg => -1 })\n+            i.wrapping_add(match s { Pos => 1, Neg => !0 /* aka -1 */ })\n         }\n \n         fn new_pos(i: usize, s: Direction) -> usize {"}, {"sha": "5b0aceb76d19cc4d54d8aa7d46fa00477634b58c", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -1089,7 +1089,7 @@ fn test_bytes_set_memory() {\n #[should_panic]\n fn test_overflow_does_not_cause_segfault() {\n     let mut v = vec![];\n-    v.reserve_exact(-1);\n+    v.reserve_exact(!0);\n     v.push(1);\n     v.push(2);\n }\n@@ -1098,7 +1098,7 @@ fn test_overflow_does_not_cause_segfault() {\n #[should_panic]\n fn test_overflow_does_not_cause_segfault_managed() {\n     let mut v = vec![Rc::new(1)];\n-    v.reserve_exact(-1);\n+    v.reserve_exact(!0);\n     v.push(Rc::new(2));\n }\n "}, {"sha": "d738ff947c498e42c820927cc0a5d174bf0100ca", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -161,7 +161,7 @@ pub const ATOMIC_USIZE_INIT: AtomicUsize =\n         AtomicUsize { v: UnsafeCell { value: 0, } };\n \n // NB: Needs to be -1 (0b11111111...) to make fetch_nand work correctly\n-const UINT_TRUE: usize = -1;\n+const UINT_TRUE: usize = !0;\n \n impl AtomicBool {\n     /// Creates a new `AtomicBool`."}, {"sha": "76e09eedbdfa574a86f447041d47fed9099613d8", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -287,7 +287,7 @@ pub enum BorrowState {\n // (will not outgrow its range since `usize` is the size of the address space)\n type BorrowFlag = usize;\n const UNUSED: BorrowFlag = 0;\n-const WRITING: BorrowFlag = -1;\n+const WRITING: BorrowFlag = !0;\n \n impl<T> RefCell<T> {\n     /// Creates a new `RefCell` containing `value`."}, {"sha": "09bd2ab379a15cf8349e9bec88cf536549a45e96", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -516,7 +516,7 @@ macro_rules! uint_impl {\n             fn min_value() -> $T { 0 }\n \n             #[inline]\n-            fn max_value() -> $T { -1 }\n+            fn max_value() -> $T { !0 }\n \n             #[inline]\n             fn count_ones(self) -> u32 {"}, {"sha": "28276d0bf0168b35677c43ea4b50f4d2d322f23b", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -30,7 +30,7 @@ use intrinsics::{i16_mul_with_overflow, u16_mul_with_overflow};\n use intrinsics::{i32_mul_with_overflow, u32_mul_with_overflow};\n use intrinsics::{i64_mul_with_overflow, u64_mul_with_overflow};\n \n-use ::{i8,i16,i32,i64,u8,u16,u32,u64};\n+use ::{i8,i16,i32,i64};\n \n #[unstable(feature = \"core\", reason = \"may be removed, renamed, or relocated\")]\n #[deprecated(since = \"1.0.0\", reason = \"moved to inherent methods\")]\n@@ -206,7 +206,7 @@ mod shift_max {\n     pub const u64: u32 = i64;\n }\n \n-macro_rules! overflowing_impl {\n+macro_rules! signed_overflowing_impl {\n     ($($t:ident)*) => ($(\n         impl OverflowingOps for $t {\n             #[inline(always)]\n@@ -259,7 +259,53 @@ macro_rules! overflowing_impl {\n     )*)\n }\n \n-overflowing_impl! { u8 u16 u32 u64 i8 i16 i32 i64 }\n+macro_rules! unsigned_overflowing_impl {\n+    ($($t:ident)*) => ($(\n+        impl OverflowingOps for $t {\n+            #[inline(always)]\n+            fn overflowing_add(self, rhs: $t) -> ($t, bool) {\n+                unsafe {\n+                    concat_idents!($t, _add_with_overflow)(self, rhs)\n+                }\n+            }\n+            #[inline(always)]\n+            fn overflowing_sub(self, rhs: $t) -> ($t, bool) {\n+                unsafe {\n+                    concat_idents!($t, _sub_with_overflow)(self, rhs)\n+                }\n+            }\n+            #[inline(always)]\n+            fn overflowing_mul(self, rhs: $t) -> ($t, bool) {\n+                unsafe {\n+                    concat_idents!($t, _mul_with_overflow)(self, rhs)\n+                }\n+            }\n+\n+            #[inline(always)]\n+            fn overflowing_div(self, rhs: $t) -> ($t, bool) {\n+                (self/rhs, false)\n+            }\n+            #[inline(always)]\n+            fn overflowing_rem(self, rhs: $t) -> ($t, bool) {\n+                (self % rhs, false)\n+            }\n+\n+            #[inline(always)]\n+            fn overflowing_shl(self, rhs: u32) -> ($t, bool) {\n+                (self << (rhs & self::shift_max::$t),\n+                 (rhs > self::shift_max::$t))\n+            }\n+            #[inline(always)]\n+            fn overflowing_shr(self, rhs: u32) -> ($t, bool) {\n+                (self >> (rhs & self::shift_max::$t),\n+                 (rhs > self::shift_max::$t))\n+            }\n+        }\n+    )*)\n+}\n+\n+signed_overflowing_impl! { i8 i16 i32 i64 }\n+unsigned_overflowing_impl! { u8 u16 u32 u64 }\n \n #[cfg(target_pointer_width = \"64\")]\n impl OverflowingOps for usize {"}, {"sha": "b39fb95d915b36687c0b176814229a9350c33d00", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -482,8 +482,10 @@ pub trait Neg {\n     fn neg(self) -> Self::Output;\n }\n \n-macro_rules! neg_impl {\n-    ($($t:ty)*) => ($(\n+\n+\n+macro_rules! neg_impl_core {\n+    ($id:ident => $body:expr, $($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[allow(unsigned_negation)]\n         impl Neg for $t {\n@@ -492,14 +494,28 @@ macro_rules! neg_impl {\n \n             #[inline]\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            fn neg(self) -> $t { -self }\n+            fn neg(self) -> $t { let $id = self; $body }\n         }\n \n         forward_ref_unop! { impl Neg, neg for $t }\n     )*)\n }\n \n-neg_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n+macro_rules! neg_impl_numeric {\n+    ($($t:ty)*) => { neg_impl_core!{ x => -x, $($t)*} }\n+}\n+\n+macro_rules! neg_impl_unsigned {\n+    ($($t:ty)*) => {\n+        neg_impl_core!{ x => {\n+            #[cfg(stage0)]\n+            use ::num::wrapping::WrappingOps;\n+            !x.wrapping_add(1)\n+        }, $($t)*} }\n+}\n+\n+// neg_impl_unsigned! { usize u8 u16 u32 u64 }\n+neg_impl_numeric! { isize i8 i16 i32 i64 f32 f64 }\n \n /// The `Not` trait is used to specify the functionality of unary `!`.\n ///"}, {"sha": "cad50155b0b9dcb83a19eb95764a32c92c24b2d1", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -855,7 +855,7 @@ impl TwoWaySearcher {\n     #[allow(dead_code)]\n     #[allow(deprecated)]\n     fn maximal_suffix(arr: &[u8], reversed: bool) -> (usize, usize) {\n-        let mut left: usize = -1; // Corresponds to i in the paper\n+        let mut left: usize = !0; // Corresponds to i in the paper\n         let mut right = 0; // Corresponds to j in the paper\n         let mut offset = 1; // Corresponds to k in the paper\n         let mut period = 1; // Corresponds to p in the paper"}, {"sha": "ba12ff306e9b89dba04c107666553b416f426694", "filename": "src/libcoretest/fmt/num.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcoretest%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibcoretest%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fnum.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -125,14 +125,14 @@ fn test_format_int_flags() {\n     assert!(format!(\"{:>8x}\", 10) == \"       a\");\n     assert!(format!(\"{:#08x}\", 10) == \"0x00000a\");\n     assert!(format!(\"{:08}\", -10) == \"-0000010\");\n-    assert!(format!(\"{:x}\", -1u8) == \"ff\");\n-    assert!(format!(\"{:X}\", -1u8) == \"FF\");\n-    assert!(format!(\"{:b}\", -1u8) == \"11111111\");\n-    assert!(format!(\"{:o}\", -1u8) == \"377\");\n-    assert!(format!(\"{:#x}\", -1u8) == \"0xff\");\n-    assert!(format!(\"{:#X}\", -1u8) == \"0xFF\");\n-    assert!(format!(\"{:#b}\", -1u8) == \"0b11111111\");\n-    assert!(format!(\"{:#o}\", -1u8) == \"0o377\");\n+    assert!(format!(\"{:x}\", !0u8) == \"ff\");\n+    assert!(format!(\"{:X}\", !0u8) == \"FF\");\n+    assert!(format!(\"{:b}\", !0u8) == \"11111111\");\n+    assert!(format!(\"{:o}\", !0u8) == \"377\");\n+    assert!(format!(\"{:#x}\", !0u8) == \"0xff\");\n+    assert!(format!(\"{:#X}\", !0u8) == \"0xFF\");\n+    assert!(format!(\"{:#b}\", !0u8) == \"0b11111111\");\n+    assert!(format!(\"{:#o}\", !0u8) == \"0o377\");\n }\n \n #[test]"}, {"sha": "bfc657f8784cc3a9c0d9fe9ac91b9ae4806cc0b9", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -2865,7 +2865,7 @@ pub mod consts {\n             pub const MAP_FIXED : c_int = 0x0010;\n             pub const MAP_ANON : c_int = 0x0020;\n \n-            pub const MAP_FAILED : *mut c_void = -1 as *mut c_void;\n+            pub const MAP_FAILED : *mut c_void = !0 as *mut c_void;\n \n             pub const MCL_CURRENT : c_int = 0x0001;\n             pub const MCL_FUTURE : c_int = 0x0002;\n@@ -4696,7 +4696,7 @@ pub mod consts {\n             pub const MAP_FIXED : c_int = 0x0010;\n             pub const MAP_ANON : c_int = 0x1000;\n \n-            pub const MAP_FAILED : *mut c_void = -1 as *mut c_void;\n+            pub const MAP_FAILED : *mut c_void = !0 as *mut c_void;\n \n             pub const MCL_CURRENT : c_int = 0x0001;\n             pub const MCL_FUTURE : c_int = 0x0002;"}, {"sha": "432081063c50f7c6e8eba15f781e63c2cc7002e7", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -361,7 +361,7 @@ mod tests {\n     }\n     #[test] #[should_panic]\n     fn test_weighted_choice_weight_overflows() {\n-        let x = (-1) as usize / 2; // x + x + 2 is the overflow\n+        let x = (!0) as usize / 2; // x + x + 2 is the overflow\n         WeightedChoice::new(&mut [Weighted { weight: x, item: 0 },\n                                   Weighted { weight: 1, item: 1 },\n                                   Weighted { weight: x, item: 2 },"}, {"sha": "367bcbbe1d8a972add77a29907999a4cbfaed013", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -23,6 +23,7 @@ use middle::astconv_util::ast_ty_to_prim_ty;\n \n use syntax::ast::{self, Expr};\n use syntax::codemap::Span;\n+use syntax::feature_gate;\n use syntax::parse::token::InternedString;\n use syntax::ptr::P;\n use syntax::{ast_map, ast_util, codemap};\n@@ -395,7 +396,7 @@ pub fn const_int_checked_neg<'a>(\n pub fn const_uint_checked_neg<'a>(\n     a: u64, _e: &'a Expr, _opt_ety: Option<UintTy>) -> EvalResult {\n     // This always succeeds, and by definition, returns `(!a)+1`.\n-    Ok(const_uint(-a))\n+    Ok(const_uint((!a).wrapping_add(1)))\n }\n \n macro_rules! overflow_checking_body {\n@@ -594,7 +595,16 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n         match try!(eval_const_expr_partial(tcx, &**inner, ety)) {\n           const_float(f) => const_float(-f),\n           const_int(n) =>  try!(const_int_checked_neg(n, e, expr_int_type)),\n-          const_uint(n) => try!(const_uint_checked_neg(n, e, expr_uint_type)),\n+          const_uint(i) => {\n+              if !tcx.sess.features.borrow().negate_unsigned {\n+                  feature_gate::emit_feature_err(\n+                      &tcx.sess.parse_sess.span_diagnostic,\n+                      \"negate_unsigned\",\n+                      e.span,\n+                      \"unary negation of unsigned integers may be removed in the future\");\n+              }\n+              try!(const_uint_checked_neg(i, e, expr_uint_type))\n+          }\n           const_str(_) => signal!(e, NegateOnString),\n           const_bool(_) => signal!(e, NegateOnBoolean),\n           const_binary(_) => signal!(e, NegateOnBinary),"}, {"sha": "cc22f8ff809ef0b1fc1e4ee3aef2c9468fa50788", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -116,7 +116,7 @@ pub struct TypeLimits {\n impl TypeLimits {\n     pub fn new() -> TypeLimits {\n         TypeLimits {\n-            negated_expr_id: -1,\n+            negated_expr_id: !0,\n         }\n     }\n }"}, {"sha": "fd1fff308dfe3a543252305d73c4a9e427c3b326", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -830,7 +830,7 @@ fn load_discr(bcx: Block, ity: IntType, ptr: ValueRef, min: Disr, max: Disr)\n     let bits = machine::llbitsize_of_real(bcx.ccx(), llty);\n     assert!(bits <= 64);\n     let  bits = bits as usize;\n-    let mask = (-1u64 >> (64 - bits)) as Disr;\n+    let mask = (!0u64 >> (64 - bits)) as Disr;\n     // For a (max) discr of -1, max will be `-1 as usize`, which overflows.\n     // However, that is fine here (it would still represent the full range),\n     if (max.wrapping_add(1)) & mask == min & mask {"}, {"sha": "51db1430ae250d7b5b4aa397a130a1c70ced9071", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -868,7 +868,7 @@ pub fn fail_if_zero_or_overflows<'blk, 'tcx>(\n             _ => unreachable!(),\n         };\n         let minus_one = ICmp(bcx, llvm::IntEQ, rhs,\n-                             C_integral(llty, -1, false), debug_loc);\n+                             C_integral(llty, !0, false), debug_loc);\n         with_cond(bcx, minus_one, |bcx| {\n             let is_min = ICmp(bcx, llvm::IntEQ, lhs,\n                               C_integral(llty, min, true), debug_loc);\n@@ -1388,7 +1388,7 @@ pub fn new_fn_ctxt<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n     common::validate_substs(param_substs);\n \n     debug!(\"new_fn_ctxt(path={}, id={}, param_substs={})\",\n-           if id == -1 {\n+           if id == !0 {\n                \"\".to_string()\n            } else {\n                ccx.tcx().map.path_to_string(id).to_string()"}, {"sha": "8919a386a45fb0ac1182174d8dbc65301f9f0318", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -459,7 +459,7 @@ impl<'tcx> LocalCrateContext<'tcx> {\n         CrateContext {\n             shared: shared,\n             local: self,\n-            index: -1 as usize,\n+            index: !0 as usize,\n         }\n     }\n }"}, {"sha": "2d39fb6191d27ab3e7998de782298b6abddd84ce", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -120,6 +120,7 @@ use syntax::attr::AttrMetaMethods;\n use syntax::ast::{self, DefId, Visibility};\n use syntax::ast_util::{self, local_def};\n use syntax::codemap::{self, Span};\n+use syntax::feature_gate;\n use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token;\n use syntax::print::pprust;\n@@ -3258,6 +3259,15 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                                       tcx.lang_items.neg_trait(),\n                                                       expr, &**oprnd, oprnd_t, unop);\n                     }\n+                    if let ty::ty_uint(_) = oprnd_t.sty {\n+                        if !tcx.sess.features.borrow().negate_unsigned {\n+                            feature_gate::emit_feature_err(\n+                                &tcx.sess.parse_sess.span_diagnostic,\n+                                \"negate_unsigned\",\n+                                expr.span,\n+                                \"unary negation of unsigned integers may be removed in the future\");\n+                        }\n+                    }\n                 }\n             }\n         }"}, {"sha": "eabc51beb1285214c0ce5ba6a03395e5d1cd116a", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -946,7 +946,7 @@ mod tests {\n             let mut read_stream = check!(File::open(filename));\n             let mut read_buf = [0; 1028];\n             let read_str = match check!(read_stream.read(&mut read_buf)) {\n-                -1|0 => panic!(\"shouldn't happen\"),\n+                0 => panic!(\"shouldn't happen\"),\n                 n => str::from_utf8(&read_buf[..n]).unwrap().to_string()\n             };\n             assert_eq!(read_str, message);"}, {"sha": "509daa46ef3be1b509d54da638c27590b8d2dff5", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -970,7 +970,7 @@ mod test {\n             let mut read_stream = File::open_mode(filename, Open, Read);\n             let mut read_buf = [0; 1028];\n             let read_str = match check!(read_stream.read(&mut read_buf)) {\n-                -1|0 => panic!(\"shouldn't happen\"),\n+                0 => panic!(\"shouldn't happen\"),\n                 n => str::from_utf8(&read_buf[..n]).unwrap().to_string()\n             };\n             assert_eq!(read_str, message);"}, {"sha": "0d26206f26bcfc67630547b035b5ff7c66189f2c", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -116,7 +116,7 @@ fn lang_start(main: *const u8, argc: isize, argv: *const *const u8) -> isize {\n             use libc;\n             use libc::funcs::posix01::signal::signal;\n             unsafe {\n-                assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != -1);\n+                assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != !0);\n             }\n         }\n         ignore_sigpipe();"}, {"sha": "40390765dde84b54b5addb290961af2fce61cb32", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -388,7 +388,7 @@ pub const CRATE_NODE_ID: NodeId = 0;\n /// When parsing and doing expansions, we initially give all AST nodes this AST\n /// node value. Then later, in the renumber pass, we renumber them to have\n /// small, positive ids.\n-pub const DUMMY_NODE_ID: NodeId = -1;\n+pub const DUMMY_NODE_ID: NodeId = !0;\n \n /// The AST represents all type param bounds as types.\n /// typeck::collect::compute_bounds matches these against"}, {"sha": "c2f2c51ed2cff67a362564f58df20e89011e730c", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -278,9 +278,9 @@ pub struct ExpnInfo {\n #[derive(PartialEq, Eq, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Copy)]\n pub struct ExpnId(u32);\n \n-pub const NO_EXPANSION: ExpnId = ExpnId(-1);\n+pub const NO_EXPANSION: ExpnId = ExpnId(!0);\n // For code appearing from the command line\n-pub const COMMAND_LINE_EXPN: ExpnId = ExpnId(-2);\n+pub const COMMAND_LINE_EXPN: ExpnId = ExpnId(!1);\n \n impl ExpnId {\n     pub fn from_llvm_cookie(cookie: c_uint) -> ExpnId {"}, {"sha": "2aa405bf6df914482c87cb17281d0172b8fd0b3e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -152,6 +152,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n \n     // #23121. Array patterns have some hazards yet.\n     (\"slice_patterns\", \"1.0.0\", Active),\n+\n+    // Allows use of unary negate on unsigned integers, e.g. -e for e: u8\n+    (\"negate_unsigned\", \"1.0.0\", Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -325,6 +328,7 @@ pub struct Features {\n     pub allow_custom_derive: bool,\n     pub simd_ffi: bool,\n     pub unmarked_api: bool,\n+    pub negate_unsigned: bool,\n     /// spans of #![feature] attrs for stable language features. for error reporting\n     pub declared_stable_lang_features: Vec<Span>,\n     /// #![feature] attrs for non-language (library) features\n@@ -346,6 +350,7 @@ impl Features {\n             allow_custom_derive: false,\n             simd_ffi: false,\n             unmarked_api: false,\n+            negate_unsigned: false,\n             declared_stable_lang_features: Vec::new(),\n             declared_lib_features: Vec::new()\n         }\n@@ -724,6 +729,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n         allow_custom_derive: cx.has_feature(\"custom_derive\"),\n         simd_ffi: cx.has_feature(\"simd_ffi\"),\n         unmarked_api: cx.has_feature(\"unmarked_api\"),\n+        negate_unsigned: cx.has_feature(\"negate_unsigned\"),\n         declared_stable_lang_features: accepted_features,\n         declared_lib_features: unknown_features\n     }"}, {"sha": "3e0c938649de8996e469f1e2dc2e03bfa4a9d9db", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -3053,7 +3053,7 @@ mod test {\n     #[test]\n     fn test_signed_int_to_string() {\n         let pos_int = ast::LitInt(42, ast::SignedIntLit(ast::TyI32, ast::Plus));\n-        let neg_int = ast::LitInt((-42) as u64, ast::SignedIntLit(ast::TyI32, ast::Minus));\n+        let neg_int = ast::LitInt((!42 + 1) as u64, ast::SignedIntLit(ast::TyI32, ast::Minus));\n         assert_eq!(format!(\"-{}\", lit_to_string(&codemap::dummy_spanned(pos_int))),\n                    lit_to_string(&codemap::dummy_spanned(neg_int)));\n     }"}, {"sha": "19b5f9b094c13aedda76aea046d1cc1479f7a389", "filename": "src/test/compile-fail/const-eval-overflow.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(negate_unsigned)]\n+\n #![allow(unused_imports)]\n+#![feature(negate_unsigned)]\n \n // Note: the relevant lint pass here runs before some of the constant\n // evaluation below (e.g. that performed by trans and llvm), so if you"}, {"sha": "cdf7d026d5eebd4b26039d7b9508496c51b8aad4", "filename": "src/test/compile-fail/enum-discrim-too-small.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(negate_unsigned)]\n+\n #[repr(u8)] //~ NOTE discriminant type specified here\n enum Eu8 {\n     Au8 = 23,"}, {"sha": "1f70828e411ef1cfc472b6ed1884690939457c71", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(negate_unsigned)]\n #![deny(exceeding_bitshifts)]\n #![allow(unused_variables)]\n #![allow(dead_code)]\n-#![feature(core)]\n+#![feature(core, negate_unsigned)]\n \n fn main() {\n       let n = 1u8 << 7;"}, {"sha": "798dc112b0af995b6b10a8b8d772b03e707e3190", "filename": "src/test/compile-fail/lint-type-limits.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(negate_unsigned)]\n #![allow(dead_code)]\n+#![feature(negate_unsigned)]\n \n // compile-flags: -D unused-comparisons\n fn main() { }"}, {"sha": "ab9d892ce2b60cd963140e1dd75a44bd689ae366", "filename": "src/test/run-pass/big-literals.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbig-literals.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -16,10 +16,10 @@\n #![deny(overflowing_literals)]\n \n pub fn main() {\n-    assert_eq!(0xffffffff, (-1 as u32));\n-    assert_eq!(4294967295, (-1 as u32));\n-    assert_eq!(0xffffffffffffffff, (-1 as u64));\n-    assert_eq!(18446744073709551615, (-1 as u64));\n+    assert_eq!(0xffffffff, (!0 as u32));\n+    assert_eq!(4294967295, (!0 as u32));\n+    assert_eq!(0xffffffffffffffff, (!0 as u64));\n+    assert_eq!(18446744073709551615, (!0 as u64));\n \n     assert_eq!((-2147483648i32).wrapping_sub(1), 2147483647);\n }"}, {"sha": "a9f19c12b0278e09b1d0f122028ae1f162671f7d", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(negate_unsigned)]\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n fn target() {"}, {"sha": "15dbe796ef589ebde03e193cc3bc819dd8685f90", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -10,6 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n+#![feature(negate_unsigned)]\n #![feature(intrinsics)]\n \n mod rusti {"}, {"sha": "08c313ab0a42b397404a8dcf547b4a8621f88516", "filename": "src/test/run-pass/issue-17074.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Frun-pass%2Fissue-17074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9edbf42a342ced7357fe5ec225975f214d872fbc/src%2Ftest%2Frun-pass%2Fissue-17074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17074.rs?ref=9edbf42a342ced7357fe5ec225975f214d872fbc", "patch": "@@ -10,10 +10,10 @@\n \n // pretty-expanded FIXME #23616\n \n-static X2: u64 = -1 as u16 as u64;\n-static Y2: u64 = -1 as u32 as u64;\n-const X: u64 = -1 as u16 as u64;\n-const Y: u64 = -1 as u32 as u64;\n+static X2: u64 = !0 as u16 as u64;\n+static Y2: u64 = !0 as u32 as u64;\n+const X: u64 = !0 as u16 as u64;\n+const Y: u64 = !0 as u32 as u64;\n \n fn main() {\n     assert_eq!(match 1 {"}]}