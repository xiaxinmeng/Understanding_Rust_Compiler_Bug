{"sha": "6152d15e7c06910a3fe1e7621f624ceaa9d010a8", "node_id": "C_kwDOAAsO6NoAKDYxNTJkMTVlN2MwNjkxMGEzZmUxZTc2MjFmNjI0Y2VhYTlkMDEwYTg", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-04T00:32:52Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-04T00:45:21Z"}, "message": "Extract init_env_logger to crate", "tree": {"sha": "f035708258820d5e7f9f8bfd54a9b2ae6ff1e340", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f035708258820d5e7f9f8bfd54a9b2ae6ff1e340"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6152d15e7c06910a3fe1e7621f624ceaa9d010a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHTmKEACgkQ+boUO5X/\nbYJUfRAAnJvQhVBlJ9HI24o2Vbd2mfrmreaHChTfyLcQP/26wDBHEhiWd5uUa7v4\n/iZJD8JzRa78XQe//S0XOzU+w8KxDPRq376m6rpdwH3qTimtJOKSw3BBj+lvuxMt\nvrTr28uCJheaaBYWFhE4XrfnoPtIdLT75F1L5unSD4RFcYZrxVSKgZaGS9WGkBRk\niqQpSxWFl6iaXmACzJO49Hc2aQ9XyUjSg+2XOQDcv3h9CgbeObFZtaCjFUEZY1EG\nBCt/bSGpN7QoGKZJ6FfC/pLx8RYcNU4ZWF1V2F7ljFaPfwYjBOOJ2jNNtl21pDQX\nEjHGmhX7TS1yPaMgb0+F0SY6PN27O3wyqM/A6t0bsAEw1I58bVR2R5d0mMMP5ANr\nAixm72IwZjyt4onU5HnA69WU7UlxuxVeGt9JAsk0+PQxvBWH/qTBcpbZGss+P3Bl\nx/MNBUpfkYKheNIPe91cvV+i8QzDxNOGMW/TqdHELjZBTWfN7+MpS66RcfNAHzFY\nVWp1IoNbGekq1XT6y7H6ZVGlQPN8txOvwah8lkDjQbFwbvu4yl2h49Ro4C5HxbRm\nbBLwaZtYJ4Jnxd0ftY+5BMuDXY/yXYH8v001UosuEjduLvCPkEcnSaIsKy/oqkl4\nXRtex9qROnYBnRIBGfFZO1z8WgzSd0nk4oygYdY/VatY7qtD8W4=\n=fmxj\n-----END PGP SIGNATURE-----", "payload": "tree f035708258820d5e7f9f8bfd54a9b2ae6ff1e340\nparent 399ba6bb377ce02224b57c4d6e127e160fa76b34\nauthor David Tolnay <dtolnay@gmail.com> 1641256372 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1641257121 -0800\n\nExtract init_env_logger to crate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6152d15e7c06910a3fe1e7621f624ceaa9d010a8", "html_url": "https://github.com/rust-lang/rust/commit/6152d15e7c06910a3fe1e7621f624ceaa9d010a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6152d15e7c06910a3fe1e7621f624ceaa9d010a8/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "399ba6bb377ce02224b57c4d6e127e160fa76b34", "url": "https://api.github.com/repos/rust-lang/rust/commits/399ba6bb377ce02224b57c4d6e127e160fa76b34", "html_url": "https://github.com/rust-lang/rust/commit/399ba6bb377ce02224b57c4d6e127e160fa76b34"}], "stats": {"total": 171, "additions": 114, "deletions": 57}, "files": [{"sha": "17f7d2ca15a9002bf1dd11cd1eb19b068e796b20", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6152d15e7c06910a3fe1e7621f624ceaa9d010a8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6152d15e7c06910a3fe1e7621f624ceaa9d010a8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6152d15e7c06910a3fe1e7621f624ceaa9d010a8", "patch": "@@ -3808,7 +3808,6 @@ dependencies = [\n name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n- \"atty\",\n  \"libc\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n@@ -3822,6 +3821,7 @@ dependencies = [\n  \"rustc_hir_pretty\",\n  \"rustc_interface\",\n  \"rustc_lint\",\n+ \"rustc_log\",\n  \"rustc_metadata\",\n  \"rustc_middle\",\n  \"rustc_parse\",\n@@ -3833,8 +3833,6 @@ dependencies = [\n  \"rustc_target\",\n  \"rustc_typeck\",\n  \"tracing\",\n- \"tracing-subscriber\",\n- \"tracing-tree\",\n  \"winapi\",\n ]\n \n@@ -4077,6 +4075,16 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"rustc_log\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"atty\",\n+ \"tracing\",\n+ \"tracing-subscriber\",\n+ \"tracing-tree\",\n+]\n+\n [[package]]\n name = \"rustc_macros\"\n version = \"0.1.0\""}, {"sha": "872f946bf7d91cf9b8261c65154314302aa3eb70", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6152d15e7c06910a3fe1e7621f624ceaa9d010a8/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6152d15e7c06910a3fe1e7621f624ceaa9d010a8/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=6152d15e7c06910a3fe1e7621f624ceaa9d010a8", "patch": "@@ -8,10 +8,8 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n libc = \"0.2\"\n-atty = \"0.2\"\n tracing = { version = \"0.1.28\" }\n-tracing-subscriber = { version = \"0.3.3\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n-tracing-tree = \"0.2.0\"\n+rustc_log = { path = \"../rustc_log\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_target = { path = \"../rustc_target\" }\n@@ -40,4 +38,4 @@ winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"]\n \n [features]\n llvm = ['rustc_interface/llvm']\n-max_level_info = ['tracing/max_level_info']\n+max_level_info = ['rustc_log/max_level_info']"}, {"sha": "3d58b27f83922fb43bd59be1551f2340878d4494", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 7, "deletions": 50, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6152d15e7c06910a3fe1e7621f624ceaa9d010a8/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6152d15e7c06910a3fe1e7621f624ceaa9d010a8/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=6152d15e7c06910a3fe1e7621f624ceaa9d010a8", "patch": "@@ -24,6 +24,7 @@ use rustc_feature::find_gated_cfg;\n use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n+use rustc_log::stdout_isatty;\n use rustc_metadata::locator;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n@@ -514,14 +515,6 @@ impl Compilation {\n #[derive(Copy, Clone)]\n pub struct RustcDefaultCalls;\n \n-fn stdout_isatty() -> bool {\n-    atty::is(atty::Stream::Stdout)\n-}\n-\n-fn stderr_isatty() -> bool {\n-    atty::is(atty::Stream::Stderr)\n-}\n-\n fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n     let upper_cased_code = code.to_ascii_uppercase();\n     let normalised = if upper_cased_code.starts_with('E') {\n@@ -1254,54 +1247,18 @@ pub fn install_ice_hook() {\n /// This allows tools to enable rust logging without having to magically match rustc's\n /// tracing crate version.\n pub fn init_rustc_env_logger() {\n-    init_env_logger(\"RUSTC_LOG\")\n+    if let Err(error) = rustc_log::init_rustc_env_logger() {\n+        early_error(ErrorOutputType::default(), &error.to_string());\n+    }\n }\n \n /// This allows tools to enable rust logging without having to magically match rustc's\n /// tracing crate version. In contrast to `init_rustc_env_logger` it allows you to choose an env var\n /// other than `RUSTC_LOG`.\n pub fn init_env_logger(env: &str) {\n-    use tracing_subscriber::{\n-        filter::{self, EnvFilter, LevelFilter},\n-        layer::SubscriberExt,\n-    };\n-\n-    let filter = match std::env::var(env) {\n-        Ok(env) => EnvFilter::new(env),\n-        _ => EnvFilter::default().add_directive(filter::Directive::from(LevelFilter::WARN)),\n-    };\n-\n-    let color_logs = match std::env::var(String::from(env) + \"_COLOR\") {\n-        Ok(value) => match value.as_ref() {\n-            \"always\" => true,\n-            \"never\" => false,\n-            \"auto\" => stderr_isatty(),\n-            _ => early_error(\n-                ErrorOutputType::default(),\n-                &format!(\n-                    \"invalid log color value '{}': expected one of always, never, or auto\",\n-                    value\n-                ),\n-            ),\n-        },\n-        Err(std::env::VarError::NotPresent) => stderr_isatty(),\n-        Err(std::env::VarError::NotUnicode(_value)) => early_error(\n-            ErrorOutputType::default(),\n-            \"non-Unicode log color value: expected one of always, never, or auto\",\n-        ),\n-    };\n-\n-    let layer = tracing_tree::HierarchicalLayer::default()\n-        .with_writer(io::stderr)\n-        .with_indent_lines(true)\n-        .with_ansi(color_logs)\n-        .with_targets(true)\n-        .with_indent_amount(2);\n-    #[cfg(parallel_compiler)]\n-    let layer = layer.with_thread_ids(true).with_thread_names(true);\n-\n-    let subscriber = tracing_subscriber::Registry::default().with(filter).with(layer);\n-    tracing::subscriber::set_global_default(subscriber).unwrap();\n+    if let Err(error) = rustc_log::init_env_logger(env) {\n+        early_error(ErrorOutputType::default(), &error.to_string());\n+    }\n }\n \n #[cfg(all(unix, any(target_env = \"gnu\", target_os = \"macos\")))]"}, {"sha": "5b037946224649b6185fd1d04cef311784cab6e3", "filename": "compiler/rustc_log/Cargo.toml", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6152d15e7c06910a3fe1e7621f624ceaa9d010a8/compiler%2Frustc_log%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6152d15e7c06910a3fe1e7621f624ceaa9d010a8/compiler%2Frustc_log%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2FCargo.toml?ref=6152d15e7c06910a3fe1e7621f624ceaa9d010a8", "patch": "@@ -0,0 +1,16 @@\n+[package]\n+name = \"rustc_log\"\n+version = \"0.0.0\"\n+edition = \"2021\"\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+atty = \"0.2\"\n+tracing = \"0.1.28\"\n+tracing-subscriber = { version = \"0.3.3\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n+tracing-tree = \"0.2.0\"\n+\n+[features]\n+max_level_info = ['tracing/max_level_info']"}, {"sha": "498c8cf9c5e9a650579789a1917ab971d4c33275", "filename": "compiler/rustc_log/src/lib.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/6152d15e7c06910a3fe1e7621f624ceaa9d010a8/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6152d15e7c06910a3fe1e7621f624ceaa9d010a8/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=6152d15e7c06910a3fe1e7621f624ceaa9d010a8", "patch": "@@ -0,0 +1,78 @@\n+//! This crate allows tools to enable rust logging without having to magically\n+//! match rustc's tracing crate version.\n+\n+use std::env::{self, VarError};\n+use std::fmt::{self, Display};\n+use std::io;\n+use tracing_subscriber::filter::{Directive, EnvFilter, LevelFilter};\n+use tracing_subscriber::layer::SubscriberExt;\n+\n+pub fn init_rustc_env_logger() -> Result<(), Error> {\n+    init_env_logger(\"RUSTC_LOG\")\n+}\n+\n+/// In contrast to `init_rustc_env_logger` this allows you to choose an env var\n+/// other than `RUSTC_LOG`.\n+pub fn init_env_logger(env: &str) -> Result<(), Error> {\n+    let filter = match env::var(env) {\n+        Ok(env) => EnvFilter::new(env),\n+        _ => EnvFilter::default().add_directive(Directive::from(LevelFilter::WARN)),\n+    };\n+\n+    let color_logs = match env::var(String::from(env) + \"_COLOR\") {\n+        Ok(value) => match value.as_ref() {\n+            \"always\" => true,\n+            \"never\" => false,\n+            \"auto\" => stderr_isatty(),\n+            _ => return Err(Error::InvalidColorValue(value)),\n+        },\n+        Err(VarError::NotPresent) => stderr_isatty(),\n+        Err(VarError::NotUnicode(_value)) => return Err(Error::NonUnicodeColorValue),\n+    };\n+\n+    let layer = tracing_tree::HierarchicalLayer::default()\n+        .with_writer(io::stderr)\n+        .with_indent_lines(true)\n+        .with_ansi(color_logs)\n+        .with_targets(true)\n+        .with_indent_amount(2);\n+    #[cfg(parallel_compiler)]\n+    let layer = layer.with_thread_ids(true).with_thread_names(true);\n+\n+    let subscriber = tracing_subscriber::Registry::default().with(filter).with(layer);\n+    tracing::subscriber::set_global_default(subscriber).unwrap();\n+\n+    Ok(())\n+}\n+\n+pub fn stdout_isatty() -> bool {\n+    atty::is(atty::Stream::Stdout)\n+}\n+\n+pub fn stderr_isatty() -> bool {\n+    atty::is(atty::Stream::Stderr)\n+}\n+\n+#[derive(Debug)]\n+pub enum Error {\n+    InvalidColorValue(String),\n+    NonUnicodeColorValue,\n+}\n+\n+impl std::error::Error for Error {}\n+\n+impl Display for Error {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Error::InvalidColorValue(value) => write!(\n+                formatter,\n+                \"invalid log color value '{}': expected one of always, never, or auto\",\n+                value,\n+            ),\n+            Error::NonUnicodeColorValue => write!(\n+                formatter,\n+                \"non-Unicode log color value: expected one of always, never, or auto\",\n+            ),\n+        }\n+    }\n+}"}]}