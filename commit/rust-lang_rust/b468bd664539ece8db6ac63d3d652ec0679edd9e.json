{"sha": "b468bd664539ece8db6ac63d3d652ec0679edd9e", "node_id": "C_kwDOAAsO6NoAKGI0NjhiZDY2NDUzOWVjZThkYjZhYzYzZDNkNjUyZWMwNjc5ZWRkOWU", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-27T16:44:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T14:00:55Z"}, "message": "internal: start isolating ssr-related parsing APIs to SSR", "tree": {"sha": "8fcc5d105f64f6657141b7d871818aaa83f50d34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fcc5d105f64f6657141b7d871818aaa83f50d34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b468bd664539ece8db6ac63d3d652ec0679edd9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b468bd664539ece8db6ac63d3d652ec0679edd9e", "html_url": "https://github.com/rust-lang/rust/commit/b468bd664539ece8db6ac63d3d652ec0679edd9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b468bd664539ece8db6ac63d3d652ec0679edd9e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "634c7682c9b0da402fa055acab5969c88db585d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/634c7682c9b0da402fa055acab5969c88db585d4", "html_url": "https://github.com/rust-lang/rust/commit/634c7682c9b0da402fa055acab5969c88db585d4"}], "stats": {"total": 89, "additions": 44, "deletions": 45}, "files": [{"sha": "0abf9e4d98cf319004078247529c227bd9dab447", "filename": "crates/ide_ssr/src/fragments.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b468bd664539ece8db6ac63d3d652ec0679edd9e/crates%2Fide_ssr%2Fsrc%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b468bd664539ece8db6ac63d3d652ec0679edd9e/crates%2Fide_ssr%2Fsrc%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Ffragments.rs?ref=b468bd664539ece8db6ac63d3d652ec0679edd9e", "patch": "@@ -0,0 +1,21 @@\n+//! When specifying SSR rule, you generally want to map one *kind* of thing to\n+//! the same kind of thing: path to path, expression to expression, type to\n+//! type.\n+//!\n+//! The problem is, while this *kind* is generally obvious to the human, the ide\n+//! needs to determine it somehow. We do this in a stupid way -- by pasting SSR\n+//! rule into different contexts and checking what works.\n+\n+use parser::SyntaxKind;\n+use syntax::{ast, AstNode, SyntaxNode};\n+\n+pub(crate) fn ty(s: &str) -> Result<SyntaxNode, ()> {\n+    let template = \"type T = {};\";\n+    let input = template.replace(\"{}\", s);\n+    let parse = syntax::SourceFile::parse(&input);\n+    if !parse.errors().is_empty() {\n+        return Err(());\n+    }\n+    let node = parse.tree().syntax().descendants().find_map(ast::Type::cast).ok_or(())?;\n+    Ok(node.syntax().clone())\n+}"}, {"sha": "d56bc12b680cc6e0195413fca4face58c8637fbc", "filename": "crates/ide_ssr/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b468bd664539ece8db6ac63d3d652ec0679edd9e/crates%2Fide_ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b468bd664539ece8db6ac63d3d652ec0679edd9e/crates%2Fide_ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Flib.rs?ref=b468bd664539ece8db6ac63d3d652ec0679edd9e", "patch": "@@ -71,6 +71,7 @@ mod from_comment;\n mod matching;\n mod nester;\n mod parsing;\n+mod fragments;\n mod replacing;\n mod resolving;\n mod search;"}, {"sha": "b32efe879a47cc07e824c6af232ab9c8ef8ac45e", "filename": "crates/ide_ssr/src/parsing.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b468bd664539ece8db6ac63d3d652ec0679edd9e/crates%2Fide_ssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b468bd664539ece8db6ac63d3d652ec0679edd9e/crates%2Fide_ssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fparsing.rs?ref=b468bd664539ece8db6ac63d3d652ec0679edd9e", "patch": "@@ -6,7 +6,7 @@\n //! e.g. expressions, type references etc.\n \n use crate::errors::bail;\n-use crate::{SsrError, SsrPattern, SsrRule};\n+use crate::{fragments, SsrError, SsrPattern, SsrRule};\n use rustc_hash::{FxHashMap, FxHashSet};\n use std::{fmt::Display, str::FromStr};\n use syntax::{ast, AstNode, SmolStr, SyntaxKind, SyntaxNode, T};\n@@ -79,7 +79,7 @@ impl ParsedRule {\n         } else {\n             builder.try_add(ast::Expr::parse(&raw_pattern), raw_template_stmt.clone());\n         }\n-        builder.try_add(ast::Type::parse(&raw_pattern), raw_template.map(ast::Type::parse));\n+        builder.try_add2(fragments::ty(&raw_pattern), raw_template.map(fragments::ty));\n         builder.try_add(ast::Item::parse(&raw_pattern), raw_template.map(ast::Item::parse));\n         builder.try_add(ast::Path::parse(&raw_pattern), raw_template.map(ast::Path::parse));\n         builder.try_add(ast::Pat::parse(&raw_pattern), raw_template.map(ast::Pat::parse));\n@@ -114,6 +114,26 @@ impl RuleBuilder {\n         }\n     }\n \n+    fn try_add2(\n+        &mut self,\n+        pattern: Result<SyntaxNode, ()>,\n+        template: Option<Result<SyntaxNode, ()>>,\n+    ) {\n+        match (pattern, template) {\n+            (Ok(pattern), Some(Ok(template))) => self.rules.push(ParsedRule {\n+                placeholders_by_stand_in: self.placeholders_by_stand_in.clone(),\n+                pattern,\n+                template: Some(template),\n+            }),\n+            (Ok(pattern), None) => self.rules.push(ParsedRule {\n+                placeholders_by_stand_in: self.placeholders_by_stand_in.clone(),\n+                pattern,\n+                template: None,\n+            }),\n+            _ => {}\n+        }\n+    }\n+\n     fn build(mut self) -> Result<Vec<ParsedRule>, SsrError> {\n         if self.rules.is_empty() {\n             bail!(\"Not a valid Rust expression, type, item, path or pattern\");"}, {"sha": "fb5280d1977f666ffe28933d55fe54d39915c551", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b468bd664539ece8db6ac63d3d652ec0679edd9e/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b468bd664539ece8db6ac63d3d652ec0679edd9e/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=b468bd664539ece8db6ac63d3d652ec0679edd9e", "patch": "@@ -141,7 +141,6 @@ pub enum ParserEntryPoint {\n     Path,\n     Expr,\n     StatementOptionalSemi,\n-    Type,\n     Pattern,\n     Item,\n     Attr,\n@@ -164,7 +163,6 @@ pub fn parse(inp: &Input, entry_point: ParserEntryPoint) -> Output {\n     let entry_point: fn(&'_ mut parser::Parser) = match entry_point {\n         ParserEntryPoint::Path => grammar::entry::prefix::path,\n         ParserEntryPoint::Expr => grammar::entry::prefix::expr,\n-        ParserEntryPoint::Type => grammar::entry::prefix::ty,\n         ParserEntryPoint::Pattern => grammar::entry::prefix::pat,\n         ParserEntryPoint::Item => grammar::entry::prefix::item,\n         ParserEntryPoint::StatementOptionalSemi => grammar::entry_points::stmt_optional_semi,"}, {"sha": "b82df661624838c660d9f29d5258f3db97ff28ad", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b468bd664539ece8db6ac63d3d652ec0679edd9e/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b468bd664539ece8db6ac63d3d652ec0679edd9e/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=b468bd664539ece8db6ac63d3d652ec0679edd9e", "patch": "@@ -201,13 +201,6 @@ impl ast::Item {\n     }\n }\n \n-impl ast::Type {\n-    /// Returns `text`, parsed as an type reference, but only if it has no errors.\n-    pub fn parse(text: &str) -> Result<Self, ()> {\n-        parsing::parse_text_as(text, parser::ParserEntryPoint::Type)\n-    }\n-}\n-\n impl ast::Attr {\n     /// Returns `text`, parsed as an attribute, but only if it has no errors.\n     pub fn parse(text: &str) -> Result<Self, ()> {"}, {"sha": "a632d0e6309d295615a4984abfd9c409cb8e9c51", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b468bd664539ece8db6ac63d3d652ec0679edd9e/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b468bd664539ece8db6ac63d3d652ec0679edd9e/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=b468bd664539ece8db6ac63d3d652ec0679edd9e", "patch": "@@ -95,15 +95,6 @@ fn item_parser_tests() {\n     );\n }\n \n-#[test]\n-fn type_parser_tests() {\n-    fragment_parser_dir_test(\n-        &[\"parser/fragments/type/ok\"],\n-        &[\"parser/fragments/type/err\"],\n-        crate::ast::Type::parse,\n-    );\n-}\n-\n #[test]\n fn stmt_parser_tests() {\n     fragment_parser_dir_test("}, {"sha": "5df7507e2de1edff6c240a9c549c5c2b14e8a190", "filename": "crates/syntax/test_data/parser/fragments/type/err/0000_missing_close.rast", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/634c7682c9b0da402fa055acab5969c88db585d4/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Ferr%2F0000_missing_close.rast", "raw_url": "https://github.com/rust-lang/rust/raw/634c7682c9b0da402fa055acab5969c88db585d4/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Ferr%2F0000_missing_close.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Ferr%2F0000_missing_close.rast?ref=634c7682c9b0da402fa055acab5969c88db585d4", "patch": "@@ -1 +0,0 @@\n-ERROR"}, {"sha": "caa4d7c09275bdbff9d1ec03c7469fd0abbffd4a", "filename": "crates/syntax/test_data/parser/fragments/type/err/0000_missing_close.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/634c7682c9b0da402fa055acab5969c88db585d4/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Ferr%2F0000_missing_close.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634c7682c9b0da402fa055acab5969c88db585d4/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Ferr%2F0000_missing_close.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Ferr%2F0000_missing_close.rs?ref=634c7682c9b0da402fa055acab5969c88db585d4", "patch": "@@ -1 +0,0 @@\n-Result<Foo, Bar"}, {"sha": "38c15b5815e45bd2ef8d49032202a4cfd59e2683", "filename": "crates/syntax/test_data/parser/fragments/type/ok/0000_result.rast", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/634c7682c9b0da402fa055acab5969c88db585d4/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rast", "raw_url": "https://github.com/rust-lang/rust/raw/634c7682c9b0da402fa055acab5969c88db585d4/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rast?ref=634c7682c9b0da402fa055acab5969c88db585d4", "patch": "@@ -1,22 +0,0 @@\n-PATH_TYPE@0..16\n-  PATH@0..16\n-    PATH_SEGMENT@0..16\n-      NAME_REF@0..6\n-        IDENT@0..6 \"Result\"\n-      GENERIC_ARG_LIST@6..16\n-        L_ANGLE@6..7 \"<\"\n-        TYPE_ARG@7..10\n-          PATH_TYPE@7..10\n-            PATH@7..10\n-              PATH_SEGMENT@7..10\n-                NAME_REF@7..10\n-                  IDENT@7..10 \"Foo\"\n-        COMMA@10..11 \",\"\n-        WHITESPACE@11..12 \" \"\n-        TYPE_ARG@12..15\n-          PATH_TYPE@12..15\n-            PATH@12..15\n-              PATH_SEGMENT@12..15\n-                NAME_REF@12..15\n-                  IDENT@12..15 \"Bar\"\n-        R_ANGLE@15..16 \">\""}, {"sha": "b50b3bb3bfd68dfe86f0948907e844ae4e1335b6", "filename": "crates/syntax/test_data/parser/fragments/type/ok/0000_result.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/634c7682c9b0da402fa055acab5969c88db585d4/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/634c7682c9b0da402fa055acab5969c88db585d4/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ffragments%2Ftype%2Fok%2F0000_result.rs?ref=634c7682c9b0da402fa055acab5969c88db585d4", "patch": "@@ -1 +0,0 @@\n-Result<Foo, Bar>"}]}