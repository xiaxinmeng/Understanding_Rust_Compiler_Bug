{"sha": "c82e7696e6f86cc0843c5aab9f09b5d6dd0d4bac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MmU3Njk2ZTZmODZjYzA4NDNjNWFhYjlmMDliNWQ2ZGQwZDRiYWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-13T18:03:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-13T18:03:12Z"}, "message": "Merge #3961\n\n3961: Fix double comma when merge imports on second line r=edwin0cheng a=IceSentry\n\nThis fixes the bug when merging imports from the second line when it already has a comma it would previously insert a comma.\r\n\r\nThere's probably a better way to check for a COMMA. \r\n\r\nThis also ends up with a weird indentation, but rust-fmt can easily deal with it so I'm not sure how to resolve that.\r\n\r\nCloses #3832\n\nCo-authored-by: IceSentry <c.giguere42@gmail.com>", "tree": {"sha": "4b25cfebd7c597a2289edf47e233eb3923ed3180", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b25cfebd7c597a2289edf47e233eb3923ed3180"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c82e7696e6f86cc0843c5aab9f09b5d6dd0d4bac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJelKlgCRBK7hj4Ov3rIwAAdHIIAItZb26BBrWY3/I9EpqjaCga\nSYt5oAYpsixDVwtA0bn83fqZvqHb/va9oaAg/1pCZCilIC9oat/S6hiaaug7opAc\nJPojVg1y3ABcFrkP/4AqR5Xf8wHT4Ml7iAUCyiTXV0JWYRM/8Z1dNaXOOr9K933D\nAskINVhAfsDexr2oJ6/tuDKGQ1OnXbw3hSrbsDHCSkr5eCUr82WJ+xBXAOAAjKiB\nQJ1w3s9iUtUi760SAZQdyDNK8jYjA2TeMWQSjxtmFYROUU7161AenZ1n5jE3RGR3\nEIzgivfJ4DGwrE/eMAp0TtzqnLX0UVq8COVcF1RoXeFhV6sbk49R/+RrW1CGllA=\n=yTAK\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b25cfebd7c597a2289edf47e233eb3923ed3180\nparent d075f49e6d342737c8eb81bd5448503bdc33bd79\nparent ed0eedb1dda9ae2a46735bb469aeaf5cf8a28601\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1586800992 +0000\ncommitter GitHub <noreply@github.com> 1586800992 +0000\n\nMerge #3961\n\n3961: Fix double comma when merge imports on second line r=edwin0cheng a=IceSentry\n\nThis fixes the bug when merging imports from the second line when it already has a comma it would previously insert a comma.\r\n\r\nThere's probably a better way to check for a COMMA. \r\n\r\nThis also ends up with a weird indentation, but rust-fmt can easily deal with it so I'm not sure how to resolve that.\r\n\r\nCloses #3832\n\nCo-authored-by: IceSentry <c.giguere42@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c82e7696e6f86cc0843c5aab9f09b5d6dd0d4bac", "html_url": "https://github.com/rust-lang/rust/commit/c82e7696e6f86cc0843c5aab9f09b5d6dd0d4bac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c82e7696e6f86cc0843c5aab9f09b5d6dd0d4bac/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d075f49e6d342737c8eb81bd5448503bdc33bd79", "url": "https://api.github.com/repos/rust-lang/rust/commits/d075f49e6d342737c8eb81bd5448503bdc33bd79", "html_url": "https://github.com/rust-lang/rust/commit/d075f49e6d342737c8eb81bd5448503bdc33bd79"}, {"sha": "ed0eedb1dda9ae2a46735bb469aeaf5cf8a28601", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed0eedb1dda9ae2a46735bb469aeaf5cf8a28601", "html_url": "https://github.com/rust-lang/rust/commit/ed0eedb1dda9ae2a46735bb469aeaf5cf8a28601"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "ef0ce058617aef9108e2d3565df388bf8bbc4e90", "filename": "crates/ra_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c82e7696e6f86cc0843c5aab9f09b5d6dd0d4bac/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82e7696e6f86cc0843c5aab9f09b5d6dd0d4bac/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=c82e7696e6f86cc0843c5aab9f09b5d6dd0d4bac", "patch": "@@ -1,7 +1,7 @@\n use std::iter::successors;\n \n use ra_syntax::{\n-    algo::{neighbor, SyntaxRewriter},\n+    algo::{neighbor, skip_trivia_token, SyntaxRewriter},\n     ast::{self, edit::AstNodeEdit, make},\n     AstNode, Direction, InsertPosition, SyntaxElement, T,\n };\n@@ -72,9 +72,18 @@ fn try_merge_trees(old: &ast::UseTree, new: &ast::UseTree) -> Option<ast::UseTre\n     let lhs = old.split_prefix(&lhs_prefix);\n     let rhs = new.split_prefix(&rhs_prefix);\n \n+    let should_insert_comma = lhs\n+        .use_tree_list()?\n+        .r_curly_token()\n+        .and_then(|it| skip_trivia_token(it.prev_token()?, Direction::Prev))\n+        .map(|it| it.kind() != T![,])\n+        .unwrap_or(true);\n+\n     let mut to_insert: Vec<SyntaxElement> = Vec::new();\n-    to_insert.push(make::token(T![,]).into());\n-    to_insert.push(make::tokens::single_space().into());\n+    if should_insert_comma {\n+        to_insert.push(make::token(T![,]).into());\n+        to_insert.push(make::tokens::single_space().into());\n+    }\n     to_insert.extend(\n         rhs.use_tree_list()?\n             .syntax()\n@@ -247,4 +256,22 @@ use {\n \",\n         );\n     }\n+\n+    #[test]\n+    fn test_double_comma() {\n+        check_assist(\n+            merge_imports,\n+            r\"\n+use foo::bar::baz;\n+use foo::<|>{\n+    FooBar,\n+};\n+\",\n+            r\"\n+use foo::{<|>\n+    FooBar,\n+bar::baz};\n+\",\n+        )\n+    }\n }"}]}