{"sha": "c671fc1ca2d9cb01406ac330faa31a4ad2d73fb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NzFmYzFjYTJkOWNiMDE0MDZhYzMzMGZhYTMxYTRhZDJkNzNmYjU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-07T04:45:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-07T04:45:58Z"}, "message": "Rollup merge of #67566 - Mark-Simulacrum:thread-id-u64, r=alexcrichton\n\nAdd an unstable conversion from thread ID to u64\n\nWe see multiple cases inside rustc and ecosystem code where ThreadId is\ntransmuted to u64, exploiting the underlying detail. This is suboptimal\n(can break unexpectedly if we change things in std).\n\nIt is unlikely that ThreadId will ever need to be larger than u64 --\ncreating even 2^32 threads over the course of a program is quite hard,\n2^64 is even harder. As such, we do not choose to return a larger sized\ntype (e.g. u128). If we choose to shrink ThreadId in the future, or\notherwise change its internals, it is likely that a mapping to u64 will\nstill be applicable (though may become more complex).\n\nI will file a tracking issue as soon as this is loosely approved.", "tree": {"sha": "63c99ac6a7d2d38b7a7d9c99567ee3f9e23ff2b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63c99ac6a7d2d38b7a7d9c99567ee3f9e23ff2b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c671fc1ca2d9cb01406ac330faa31a4ad2d73fb5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeFA0GCRBK7hj4Ov3rIwAAdHIIAGnI2ShnFU+Fmtq1esEy+aHA\nhXXoyigpz2/NfI2TCeACxXx/0HBctwIo4jhcfPlS7JwvyCNZjKpKpW+z97TGkfvo\nEeKzka95k4AskYgsPD2ACYt77LfRFpCYsOonXq63owVvMUkveZDZwUYAVuFeq8fW\nriE3P9mJHofdhDwSFQrHAuLQ4R/KIfbRcqvHxH+w3BW/iq6iY9nUssOldoyhrcGP\nz3dndC7xtFyWJews0Wcnphep8cXPHo1JtsCTr2dOkiaJFhI8/WJyXN73Xk40gQjs\nddBwDbx1T5YK3xhwDHhxgpN24rN5s3xwBVsAJqOeNEWmRyiOaW+23qnzAAs0wTM=\n=q/K+\n-----END PGP SIGNATURE-----\n", "payload": "tree 63c99ac6a7d2d38b7a7d9c99567ee3f9e23ff2b5\nparent ef92009c1dbe2750f1d24a6619b827721fb49749\nparent d9a7db901e33940cb2ccda6afe21b9916e66d9d2\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1578372358 +0900\ncommitter GitHub <noreply@github.com> 1578372358 +0900\n\nRollup merge of #67566 - Mark-Simulacrum:thread-id-u64, r=alexcrichton\n\nAdd an unstable conversion from thread ID to u64\n\nWe see multiple cases inside rustc and ecosystem code where ThreadId is\ntransmuted to u64, exploiting the underlying detail. This is suboptimal\n(can break unexpectedly if we change things in std).\n\nIt is unlikely that ThreadId will ever need to be larger than u64 --\ncreating even 2^32 threads over the course of a program is quite hard,\n2^64 is even harder. As such, we do not choose to return a larger sized\ntype (e.g. u128). If we choose to shrink ThreadId in the future, or\notherwise change its internals, it is likely that a mapping to u64 will\nstill be applicable (though may become more complex).\n\nI will file a tracking issue as soon as this is loosely approved.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c671fc1ca2d9cb01406ac330faa31a4ad2d73fb5", "html_url": "https://github.com/rust-lang/rust/commit/c671fc1ca2d9cb01406ac330faa31a4ad2d73fb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c671fc1ca2d9cb01406ac330faa31a4ad2d73fb5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef92009c1dbe2750f1d24a6619b827721fb49749", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef92009c1dbe2750f1d24a6619b827721fb49749", "html_url": "https://github.com/rust-lang/rust/commit/ef92009c1dbe2750f1d24a6619b827721fb49749"}, {"sha": "d9a7db901e33940cb2ccda6afe21b9916e66d9d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a7db901e33940cb2ccda6afe21b9916e66d9d2", "html_url": "https://github.com/rust-lang/rust/commit/d9a7db901e33940cb2ccda6afe21b9916e66d9d2"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "0dc43c7e6510ab6abac48de6ff4ef722b0f6514a", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c671fc1ca2d9cb01406ac330faa31a4ad2d73fb5/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c671fc1ca2d9cb01406ac330faa31a4ad2d73fb5/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=c671fc1ca2d9cb01406ac330faa31a4ad2d73fb5", "patch": "@@ -1072,6 +1072,19 @@ impl ThreadId {\n             ThreadId(NonZeroU64::new(id).unwrap())\n         }\n     }\n+\n+    /// This returns a numeric identifier for the thread identified by this\n+    /// `ThreadId`.\n+    ///\n+    /// As noted in the documentation for the type itself, it is essentially an\n+    /// opaque ID, but is guaranteed to be unique for each thread. The returned\n+    /// value is entirely opaque -- only equality testing is stable. Note that\n+    /// it is not guaranteed which values new threads will return, and this may\n+    /// change across Rust versions.\n+    #[unstable(feature = \"thread_id_value\", issue = \"67939\")]\n+    pub fn as_u64(&self) -> u64 {\n+        self.0.get()\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}]}