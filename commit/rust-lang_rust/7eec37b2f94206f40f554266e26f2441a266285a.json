{"sha": "7eec37b2f94206f40f554266e26f2441a266285a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZWMzN2IyZjk0MjA2ZjQwZjU1NDI2NmUyNmYyNDQxYTI2NjI4NWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-21T20:48:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-27T17:57:55Z"}, "message": "merge `PointIndexMap` and `RegionValueElements`", "tree": {"sha": "213d6fd198893f6ca5294733c6b783dfa40ae837", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/213d6fd198893f6ca5294733c6b783dfa40ae837"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eec37b2f94206f40f554266e26f2441a266285a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eec37b2f94206f40f554266e26f2441a266285a", "html_url": "https://github.com/rust-lang/rust/commit/7eec37b2f94206f40f554266e26f2441a266285a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eec37b2f94206f40f554266e26f2441a266285a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ab08ef846de872bb054520185dd07b79a2ee627", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ab08ef846de872bb054520185dd07b79a2ee627", "html_url": "https://github.com/rust-lang/rust/commit/1ab08ef846de872bb054520185dd07b79a2ee627"}], "stats": {"total": 228, "additions": 88, "deletions": 140}, "files": [{"sha": "554338c3e00821b57bfec524cd29eb5ece00cac7", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 73, "deletions": 41, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/7eec37b2f94206f40f554266e26f2441a266285a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eec37b2f94206f40f554266e26f2441a266285a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=7eec37b2f94206f40f554266e26f2441a266285a", "patch": "@@ -20,13 +20,23 @@ use std::rc::Rc;\n crate struct RegionValueElements {\n     /// For each basic block, how many points are contained within?\n     statements_before_block: IndexVec<BasicBlock, usize>,\n+\n+    /// Map backward from each point into to one of two possible values:\n+    ///\n+    /// - `None`: if this point index represents a Location with non-zero index\n+    /// - `Some(bb)`: if this point index represents a Location with zero index\n+    ///\n+    /// NB. It may be better to just map back to a full `Location`. We\n+    /// should probably try that.\n+    basic_block_heads: IndexVec<PointIndex, Option<BasicBlock>>,\n+\n     num_points: usize,\n }\n \n impl RegionValueElements {\n     crate fn new(mir: &Mir<'_>) -> Self {\n         let mut num_points = 0;\n-        let statements_before_block = mir\n+        let statements_before_block: IndexVec<BasicBlock, usize> = mir\n             .basic_blocks()\n             .iter()\n             .map(|block_data| {\n@@ -41,8 +51,16 @@ impl RegionValueElements {\n         );\n         debug!(\"RegionValueElements: num_points={:#?}\", num_points);\n \n+        let mut basic_block_heads: IndexVec<PointIndex, Option<BasicBlock>> =\n+            (0..num_points).map(|_| None).collect();\n+        for (bb, &first_point) in statements_before_block.iter_enumerated() {\n+            let first_point = PointIndex::new(first_point);\n+            basic_block_heads[first_point] = Some(bb);\n+        }\n+\n         Self {\n             statements_before_block,\n+            basic_block_heads,\n             num_points,\n         }\n     }\n@@ -70,47 +88,55 @@ impl RegionValueElements {\n \n     /// Converts a `PointIndex` back to a location. O(N) where N is\n     /// the number of blocks; could be faster if we ever cared.\n-    crate fn to_location(&self, i: PointIndex) -> Location {\n-        let point_index = i.index();\n-\n-        // Find the basic block. We have a vector with the\n-        // starting index of the statement in each block. Imagine\n-        // we have statement #22, and we have a vector like:\n-        //\n-        // [0, 10, 20]\n-        //\n-        // In that case, this represents point_index 2 of\n-        // basic block BB2. We know this because BB0 accounts for\n-        // 0..10, BB1 accounts for 11..20, and BB2 accounts for\n-        // 20...\n-        //\n-        // To compute this, we could do a binary search, but\n-        // because I am lazy we instead iterate through to find\n-        // the last point where the \"first index\" (0, 10, or 20)\n-        // was less than the statement index (22). In our case, this will\n-        // be (BB2, 20).\n-        //\n-        // Nit: we could do a binary search here but I'm too lazy.\n-        let (block, &first_index) = self\n-            .statements_before_block\n-            .iter_enumerated()\n-            .filter(|(_, first_index)| **first_index <= point_index)\n-            .last()\n-            .unwrap();\n-\n-        Location {\n-            block,\n-            statement_index: point_index - first_index,\n+    crate fn to_location(&self, index: PointIndex) -> Location {\n+        assert!(index.index() < self.num_points);\n+\n+        let mut statement_index = 0;\n+\n+        for opt_bb in self.basic_block_heads.raw[..= index.index()].iter().rev() {\n+            if let &Some(block) = opt_bb {\n+                return Location { block, statement_index };\n+            }\n+\n+            statement_index += 1;\n         }\n-    }\n \n-    /// Returns an iterator of each basic block and the first point\n-    /// index within the block; the point indices for all statements\n-    /// within the block follow afterwards.\n-    crate fn head_indices(&self) -> impl Iterator<Item = (BasicBlock, PointIndex)> + '_ {\n-        self.statements_before_block\n-            .iter_enumerated()\n-            .map(move |(bb, &first_index)| (bb, PointIndex::new(first_index)))\n+        bug!(\"did not find basic block as expected for index = {:?}\", index)\n+    }\n+\n+    /// Sometimes we get point-indices back from bitsets that may be\n+    /// out of range (because they round up to the nearest 2^N number\n+    /// of bits). Use this function to filter such points out if you\n+    /// like.\n+    crate fn point_in_range(&self, index: PointIndex) -> bool {\n+        index.index() < self.num_points\n+    }\n+\n+    /// Pushes all predecessors of `index` onto `stack`.\n+    crate fn push_predecessors(\n+        &self,\n+        mir: &Mir<'_>,\n+        index: PointIndex,\n+        stack: &mut Vec<PointIndex>,\n+    ) {\n+        match self.basic_block_heads[index] {\n+            // If this is a basic block head, then the predecessors are\n+            // the the terminators of other basic blocks\n+            Some(bb_head) => {\n+                stack.extend(\n+                    mir\n+                        .predecessors_for(bb_head)\n+                        .iter()\n+                        .map(|&pred_bb| mir.terminator_loc(pred_bb))\n+                        .map(|pred_loc| self.point_from_location(pred_loc)),\n+                );\n+            }\n+\n+            // Otherwise, the pred is just the previous statement\n+            None => {\n+                stack.push(PointIndex::new(index.index() - 1));\n+            }\n+        }\n     }\n }\n \n@@ -196,6 +222,7 @@ impl<N: Idx> LivenessValues<N> {\n                 .row(r)\n                 .into_iter()\n                 .flat_map(|set| set.iter())\n+                .take_while(|&p| self.elements.point_in_range(p))\n                 .map(|p| self.elements.to_location(p))\n                 .map(RegionElement::Location),\n         )\n@@ -304,7 +331,11 @@ impl<N: Idx> RegionValues<N> {\n         self.points\n             .row(r)\n             .into_iter()\n-            .flat_map(move |set| set.iter().map(move |p| self.elements.to_location(p)))\n+            .flat_map(move |set| {\n+                set.iter()\n+                    .take_while(move |&p| self.elements.point_in_range(p))\n+                    .map(move |p| self.elements.to_location(p))\n+            })\n     }\n \n     /// Returns just the universal regions that are contained in a given region's value.\n@@ -400,6 +431,7 @@ crate fn location_set_str(\n     region_value_str(\n         points\n             .into_iter()\n+            .take_while(|&p| elements.point_in_range(p))\n             .map(|p| elements.to_location(p))\n             .map(RegionElement::Location),\n     )"}, {"sha": "b3fc73e9b7be342a11244c9e324fdeaf6a9ff544", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7eec37b2f94206f40f554266e26f2441a266285a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eec37b2f94206f40f554266e26f2441a266285a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=7eec37b2f94206f40f554266e26f2441a266285a", "patch": "@@ -24,7 +24,6 @@ use super::TypeChecker;\n \n crate mod liveness_map;\n mod local_use_map;\n-mod point_index_map;\n mod trace;\n \n /// Combines liveness analysis with initialization analysis to"}, {"sha": "c2c21aa0d8de9393a9b76c83b0b2ab4058b43a37", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/point_index_map.rs", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/1ab08ef846de872bb054520185dd07b79a2ee627/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpoint_index_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab08ef846de872bb054520185dd07b79a2ee627/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpoint_index_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpoint_index_map.rs?ref=1ab08ef846de872bb054520185dd07b79a2ee627", "patch": "@@ -1,78 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use borrow_check::nll::region_infer::values::PointIndex;\n-use borrow_check::nll::region_infer::values::RegionValueElements;\n-use rustc::mir::{BasicBlock, Location, Mir};\n-use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use std::rc::Rc;\n-\n-/// A little data structure that makes it more efficient to find the\n-/// predecessors of each point.\n-crate struct PointIndexMap<'me, 'tcx> {\n-    elements: &'me Rc<RegionValueElements>,\n-    mir: &'me Mir<'tcx>,\n-    basic_block_heads: IndexVec<PointIndex, Option<BasicBlock>>,\n-}\n-\n-impl PointIndexMap<'m, 'tcx> {\n-    crate fn new(elements: &'m Rc<RegionValueElements>, mir: &'m Mir<'tcx>) -> Self {\n-        let mut basic_block_heads = IndexVec::from_elem_n(None, elements.num_points());\n-\n-        for (bb, first_point) in elements.head_indices() {\n-            basic_block_heads[first_point] = Some(bb);\n-        }\n-\n-        PointIndexMap {\n-            elements,\n-            mir,\n-            basic_block_heads,\n-        }\n-    }\n-\n-    crate fn num_points(&self) -> usize {\n-        self.elements.num_points()\n-    }\n-\n-    crate fn location_of(&self, index: PointIndex) -> Location {\n-        let mut statement_index = 0;\n-\n-        for &opt_bb in self.basic_block_heads.raw[..= index.index()].iter().rev() {\n-            if let Some(block) = opt_bb {\n-                return Location { block, statement_index };\n-            }\n-\n-            statement_index += 1;\n-        }\n-\n-        bug!(\"did not find basic block as expected for index = {:?}\", index)\n-    }\n-\n-    crate fn push_predecessors(&self, index: PointIndex, stack: &mut Vec<PointIndex>) {\n-        match self.basic_block_heads[index] {\n-            // If this is a basic block head, then the predecessors are\n-            // the the terminators of other basic blocks\n-            Some(bb_head) => {\n-                stack.extend(\n-                    self.mir\n-                        .predecessors_for(bb_head)\n-                        .iter()\n-                        .map(|&pred_bb| self.mir.terminator_loc(pred_bb))\n-                        .map(|pred_loc| self.elements.point_from_location(pred_loc)),\n-                );\n-            }\n-\n-            // Otherwise, the pred is just the previous statement\n-            None => {\n-                stack.push(PointIndex::new(index.index() - 1));\n-            }\n-        }\n-    }\n-}"}, {"sha": "79589ce973372b551387dd9d9273f7edc8b1bcd6", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7eec37b2f94206f40f554266e26f2441a266285a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eec37b2f94206f40f554266e26f2441a266285a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=7eec37b2f94206f40f554266e26f2441a266285a", "patch": "@@ -11,7 +11,6 @@\n use borrow_check::nll::region_infer::values::{self, PointIndex, RegionValueElements};\n use borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n use borrow_check::nll::type_check::liveness::local_use_map::LocalUseMap;\n-use borrow_check::nll::type_check::liveness::point_index_map::PointIndexMap;\n use borrow_check::nll::type_check::AtLocation;\n use borrow_check::nll::type_check::TypeChecker;\n use dataflow::move_paths::indexes::MovePathIndex;\n@@ -57,7 +56,6 @@ pub(super) fn trace(\n     }\n \n     let local_use_map = &LocalUseMap::build(liveness_map, elements, mir);\n-    let point_index_map = &PointIndexMap::new(elements, mir);\n \n     let cx = LivenessContext {\n         typeck,\n@@ -67,7 +65,6 @@ pub(super) fn trace(\n         local_use_map,\n         move_data,\n         liveness_map,\n-        point_index_map,\n         drop_data: FxHashMap::default(),\n     };\n \n@@ -105,8 +102,6 @@ where\n     /// dropped.\n     local_use_map: &'me LocalUseMap<'me>,\n \n-    point_index_map: &'me PointIndexMap<'me, 'tcx>,\n-\n     /// Map tracking which variables need liveness computation.\n     liveness_map: &'me NllLivenessMap,\n }\n@@ -146,7 +141,7 @@ where\n \n impl LivenessResults<'me, 'typeck, 'flow, 'gcx, 'tcx> {\n     fn new(cx: LivenessContext<'me, 'typeck, 'flow, 'gcx, 'tcx>) -> Self {\n-        let num_points = cx.point_index_map.num_points();\n+        let num_points = cx.elements.num_points();\n         LivenessResults {\n             cx,\n             defs: BitArray::new(num_points),\n@@ -218,8 +213,8 @@ impl LivenessResults<'me, 'typeck, 'flow, 'gcx, 'tcx> {\n \n             if self.use_live_at.insert(p) {\n                 self.cx\n-                    .point_index_map\n-                    .push_predecessors(p, &mut self.stack)\n+                    .elements\n+                    .push_predecessors(self.cx.mir, p, &mut self.stack)\n             }\n         }\n     }\n@@ -242,7 +237,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'gcx, 'tcx> {\n \n         // Find the drops where `local` is initialized.\n         for drop_point in self.cx.local_use_map.drops(live_local) {\n-            let location = self.cx.point_index_map.location_of(drop_point);\n+            let location = self.cx.elements.to_location(drop_point);\n             debug_assert_eq!(self.cx.mir.terminator_loc(location.block), location,);\n \n             if self.cx.initialized_at_terminator(location.block, mpi) {\n@@ -281,7 +276,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'gcx, 'tcx> {\n         debug!(\n             \"compute_drop_live_points_for_block(mpi={:?}, term_point={:?})\",\n             self.cx.move_data.move_paths[mpi].place,\n-            self.cx.point_index_map.location_of(term_point),\n+            self.cx.elements.to_location(term_point),\n         );\n \n         // We are only invoked with terminators where `mpi` is\n@@ -301,7 +296,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'gcx, 'tcx> {\n         for p in (entry_point..term_point).rev() {\n             debug!(\n                 \"compute_drop_live_points_for_block: p = {:?}\",\n-                self.cx.point_index_map.location_of(p),\n+                self.cx.elements.to_location(p),\n             );\n \n             if self.defs.contains(p) {"}, {"sha": "ffc5603bb1670d68173307baae418846d7eb86d6", "filename": "src/test/mir-opt/nll/named-lifetimes-basic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7eec37b2f94206f40f554266e26f2441a266285a/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eec37b2f94206f40f554266e26f2441a266285a/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs?ref=7eec37b2f94206f40f554266e26f2441a266285a", "patch": "@@ -34,15 +34,15 @@ fn main() {\n // | '_#4r    | Local    | ['_#4r]\n // |\n // | Inferred Region Values\n-// | '_#0r    | U0 | {bb0[0..=127], '_#0r}\n-// | '_#1r    | U0 | {bb0[0..=127], '_#1r}\n-// | '_#2r    | U0 | {bb0[0..=127], '_#2r}\n-// | '_#3r    | U0 | {bb0[0..=127], '_#3r}\n-// | '_#4r    | U0 | {bb0[0..=127], '_#4r}\n-// | '_#5r    | U0 | {bb0[0..=127], '_#1r}\n-// | '_#6r    | U0 | {bb0[0..=127], '_#2r}\n-// | '_#7r    | U0 | {bb0[0..=127], '_#1r}\n-// | '_#8r    | U0 | {bb0[0..=127], '_#3r}\n+// | '_#0r    | U0 | {bb0[0..=1], '_#0r}\n+// | '_#1r    | U0 | {bb0[0..=1], '_#1r}\n+// | '_#2r    | U0 | {bb0[0..=1], '_#2r}\n+// | '_#3r    | U0 | {bb0[0..=1], '_#3r}\n+// | '_#4r    | U0 | {bb0[0..=1], '_#4r}\n+// | '_#5r    | U0 | {bb0[0..=1], '_#1r}\n+// | '_#6r    | U0 | {bb0[0..=1], '_#2r}\n+// | '_#7r    | U0 | {bb0[0..=1], '_#1r}\n+// | '_#8r    | U0 | {bb0[0..=1], '_#3r}\n // |\n // ...\n // fn use_x(_1: &'_#5r mut i32, _2: &'_#6r u32, _3: &'_#7r u32, _4: &'_#8r u32) -> bool {"}]}