{"sha": "8c7a05a23f427625f99b74ca506a0f5d8eb9bc11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjN2EwNWEyM2Y0Mjc2MjVmOTliNzRjYTUwNmEwZjVkOGViOWJjMTE=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-09-06T10:59:52Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-09-10T13:18:15Z"}, "message": "Treat drop_in_place as nounwind with -Z panic-in-drop=abort\n\nThe AbortUnwindCalls MIR pass will eliminate any unnecessary cleanups\nand will prevent any unwinds from leaking out by forcing an abort.", "tree": {"sha": "10d3d7d92450016b2a14433b780df2de62390485", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10d3d7d92450016b2a14433b780df2de62390485"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c7a05a23f427625f99b74ca506a0f5d8eb9bc11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c7a05a23f427625f99b74ca506a0f5d8eb9bc11", "html_url": "https://github.com/rust-lang/rust/commit/8c7a05a23f427625f99b74ca506a0f5d8eb9bc11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c7a05a23f427625f99b74ca506a0f5d8eb9bc11/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1bcf5c54833707518d1403f49030605edc39497", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1bcf5c54833707518d1403f49030605edc39497", "html_url": "https://github.com/rust-lang/rust/commit/c1bcf5c54833707518d1403f49030605edc39497"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "1abb64219f6e97dee0a68d16da9e8e761152ce26", "filename": "compiler/rustc_mir_transform/src/abort_unwinding_calls.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c7a05a23f427625f99b74ca506a0f5d8eb9bc11/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7a05a23f427625f99b74ca506a0f5d8eb9bc11/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs?ref=8c7a05a23f427625f99b74ca506a0f5d8eb9bc11", "patch": "@@ -5,6 +5,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::layout;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_target::spec::abi::Abi;\n+use rustc_target::spec::PanicStrategy;\n \n /// A pass that runs which is targeted at ensuring that codegen guarantees about\n /// unwinding are upheld for compilations of panic=abort programs.\n@@ -82,10 +83,11 @@ impl<'tcx> MirPass<'tcx> for AbortUnwindingCalls {\n                     };\n                     layout::fn_can_unwind(tcx, flags, sig.abi())\n                 }\n-                TerminatorKind::Drop { .. }\n-                | TerminatorKind::DropAndReplace { .. }\n-                | TerminatorKind::Assert { .. }\n-                | TerminatorKind::FalseUnwind { .. } => {\n+                TerminatorKind::Drop { .. } | TerminatorKind::DropAndReplace { .. } => {\n+                    tcx.sess.opts.debugging_opts.panic_in_drop == PanicStrategy::Unwind\n+                        && layout::fn_can_unwind(tcx, CodegenFnAttrFlags::empty(), Abi::Rust)\n+                }\n+                TerminatorKind::Assert { .. } | TerminatorKind::FalseUnwind { .. } => {\n                     layout::fn_can_unwind(tcx, CodegenFnAttrFlags::empty(), Abi::Rust)\n                 }\n                 _ => continue,"}, {"sha": "8b1d1e450d0376cbac6d29d5837037bca61f3d64", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c7a05a23f427625f99b74ca506a0f5d8eb9bc11/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7a05a23f427625f99b74ca506a0f5d8eb9bc11/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=8c7a05a23f427625f99b74ca506a0f5d8eb9bc11", "patch": "@@ -46,7 +46,7 @@ use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::spec::{abi, SanitizerSet};\n+use rustc_target::spec::{abi, PanicStrategy, SanitizerSet};\n use rustc_trait_selection::traits::error_reporting::suggestions::NextTypeParamName;\n use std::iter;\n \n@@ -2683,6 +2683,13 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;\n     }\n \n+    // With -Z panic-in-drop=abort, drop_in_place never unwinds.\n+    if tcx.sess.opts.debugging_opts.panic_in_drop == PanicStrategy::Abort {\n+        if Some(id) == tcx.lang_items().drop_in_place_fn() {\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND;\n+        }\n+    }\n+\n     let supported_target_features = tcx.supported_target_features(LOCAL_CRATE);\n \n     let mut inline_span = None;"}]}