{"sha": "ccb6e9884ed869ce881248b8662291121310b67d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYjZlOTg4NGVkODY5Y2U4ODEyNDhiODY2MjI5MTEyMTMxMGI2N2Q=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-16T07:08:30Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-21T22:20:00Z"}, "message": "Suggest `const_if_match` on nightly", "tree": {"sha": "07424db9cdd0e9da6c5f4b1efe675f8c4950c3d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07424db9cdd0e9da6c5f4b1efe675f8c4950c3d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccb6e9884ed869ce881248b8662291121310b67d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb6e9884ed869ce881248b8662291121310b67d", "html_url": "https://github.com/rust-lang/rust/commit/ccb6e9884ed869ce881248b8662291121310b67d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccb6e9884ed869ce881248b8662291121310b67d/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4b9dc7d59ca4ebcf4841a80e83feb8fcaf353cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b9dc7d59ca4ebcf4841a80e83feb8fcaf353cc", "html_url": "https://github.com/rust-lang/rust/commit/f4b9dc7d59ca4ebcf4841a80e83feb8fcaf353cc"}], "stats": {"total": 89, "additions": 70, "deletions": 19}, "files": [{"sha": "24bc088e24a705a47855ad0cbab420d0ff69b2b7", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 70, "deletions": 19, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/ccb6e9884ed869ce881248b8662291121310b67d/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb6e9884ed869ce881248b8662291121310b67d/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=ccb6e9884ed869ce881248b8662291121310b67d", "patch": "@@ -14,12 +14,43 @@ use rustc::hir;\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n use syntax::ast::Mutability;\n+use syntax::feature_gate::{emit_feature_err, Features, GateIssue};\n use syntax::span_err;\n-use syntax_pos::Span;\n+use syntax_pos::{sym, Span};\n use rustc_error_codes::*;\n \n use std::fmt;\n \n+/// An expression that is not *always* legal in a const context.\n+#[derive(Clone, Copy)]\n+enum NonConstExpr {\n+    Loop(hir::LoopSource),\n+    Match(hir::MatchSource),\n+}\n+\n+impl NonConstExpr {\n+    fn name(self) -> &'static str {\n+        match self {\n+            Self::Loop(src) => src.name(),\n+            Self::Match(src) => src.name(),\n+        }\n+    }\n+\n+    /// Returns `true` if all feature gates required to enable this expression are turned on, or\n+    /// `None` if there is no feature gate corresponding to this expression.\n+    fn is_feature_gate_enabled(self, features: &Features) -> Option<bool> {\n+        use hir::MatchSource::*;\n+        match self {\n+            | Self::Match(Normal)\n+            | Self::Match(IfDesugar { .. })\n+            | Self::Match(IfLetDesugar { .. })\n+            => Some(features.const_if_match),\n+\n+            _ => None,\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone)]\n enum ConstKind {\n     Static,\n@@ -87,16 +118,38 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n     }\n \n     /// Emits an error when an unsupported expression is found in a const context.\n-    fn const_check_violated(&self, bad_op: &str, span: Span) {\n-        if self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n-            self.tcx.sess.span_warn(span, \"skipping const checks\");\n-            return;\n+    fn const_check_violated(&self, expr: NonConstExpr, span: Span) {\n+        match expr.is_feature_gate_enabled(self.tcx.features()) {\n+            // Don't emit an error if the user has enabled the requisite feature gates.\n+            Some(true) => return,\n+\n+            // Users of `-Zunleash-the-miri-inside-of-you` must use feature gates when possible.\n+            None if self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you => {\n+                self.tcx.sess.span_warn(span, \"skipping const checks\");\n+                return;\n+            }\n+\n+            _ => {}\n         }\n \n         let const_kind = self.const_kind\n             .expect(\"`const_check_violated` may only be called inside a const context\");\n \n-        span_err!(self.tcx.sess, span, E0744, \"`{}` is not allowed in a `{}`\", bad_op, const_kind);\n+        let msg = format!(\"`{}` is not allowed in a `{}`\", expr.name(), const_kind);\n+        match expr {\n+            | NonConstExpr::Match(hir::MatchSource::Normal)\n+            | NonConstExpr::Match(hir::MatchSource::IfDesugar { .. })\n+            | NonConstExpr::Match(hir::MatchSource::IfLetDesugar { .. })\n+            => emit_feature_err(\n+                &self.tcx.sess.parse_sess,\n+                sym::const_if_match,\n+                span,\n+                GateIssue::Language,\n+                &msg\n+            ),\n+\n+            _ => span_err!(self.tcx.sess, span, E0744, \"{}\", msg),\n+        }\n     }\n \n     /// Saves the parent `const_kind` before calling `f` and restores it afterwards.\n@@ -129,24 +182,22 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n             _ if self.const_kind.is_none() => {}\n \n             hir::ExprKind::Loop(_, _, source) => {\n-                self.const_check_violated(source.name(), e.span);\n+                self.const_check_violated(NonConstExpr::Loop(*source), e.span);\n             }\n \n-            hir::ExprKind::Match(_, _, source) if !self.tcx.features().const_if_match => {\n-                use hir::MatchSource::*;\n-\n-                let op = match source {\n-                    Normal => Some(\"match\"),\n-                    IfDesugar { .. } | IfLetDesugar { .. } => Some(\"if\"),\n-                    TryDesugar => Some(\"?\"),\n-                    AwaitDesugar => Some(\".await\"),\n-\n+            hir::ExprKind::Match(_, _, source) => {\n+                let non_const_expr = match source {\n                     // These are handled by `ExprKind::Loop` above.\n-                    WhileDesugar | WhileLetDesugar | ForLoopDesugar => None,\n+                    | hir::MatchSource::WhileDesugar\n+                    | hir::MatchSource::WhileLetDesugar\n+                    | hir::MatchSource::ForLoopDesugar\n+                    => None,\n+\n+                    _ => Some(NonConstExpr::Match(*source)),\n                 };\n \n-                if let Some(op) = op {\n-                    self.const_check_violated(op, e.span);\n+                if let Some(expr) = non_const_expr {\n+                    self.const_check_violated(expr, e.span);\n                 }\n             }\n "}]}