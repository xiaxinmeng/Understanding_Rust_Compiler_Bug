{"sha": "9db76f311de670dd591c7c8ebb14799942c9161f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYjc2ZjMxMWRlNjcwZGQ1OTFjN2M4ZWJiMTQ3OTk5NDJjOTE2MWY=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-01-01T02:11:25Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-01-04T22:11:32Z"}, "message": "Use fmt::Result instead of Result<(), Error>.", "tree": {"sha": "7e0751d467dd0dade5db1323cf6694b816a5e31c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e0751d467dd0dade5db1323cf6694b816a5e31c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9db76f311de670dd591c7c8ebb14799942c9161f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9db76f311de670dd591c7c8ebb14799942c9161f", "html_url": "https://github.com/rust-lang/rust/commit/9db76f311de670dd591c7c8ebb14799942c9161f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9db76f311de670dd591c7c8ebb14799942c9161f/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a0c1b3a8876e34534926dd2d0e447ca97b9b05d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0c1b3a8876e34534926dd2d0e447ca97b9b05d", "html_url": "https://github.com/rust-lang/rust/commit/5a0c1b3a8876e34534926dd2d0e447ca97b9b05d"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "d6d3a1470a9f0da6f6bfcc33024a514115425fbf", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9db76f311de670dd591c7c8ebb14799942c9161f/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db76f311de670dd591c7c8ebb14799942c9161f/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=9db76f311de670dd591c7c8ebb14799942c9161f", "patch": "@@ -18,7 +18,7 @@ use rustc_front::hir::InlineAsm;\n use syntax::ast::Name;\n use syntax::codemap::Span;\n use std::borrow::{Cow, IntoCow};\n-use std::fmt::{Debug, Formatter, Error, Write};\n+use std::fmt::{self, Debug, Formatter, Write};\n use std::{iter, u32};\n \n /// Lowered representation of a single function.\n@@ -183,7 +183,7 @@ impl BasicBlock {\n }\n \n impl Debug for BasicBlock {\n-    fn fmt(&self, fmt: &mut Formatter) -> Result<(), Error> {\n+    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n         write!(fmt, \"bb{}\", self.0)\n     }\n }\n@@ -317,7 +317,7 @@ impl<'tcx> BasicBlockData<'tcx> {\n }\n \n impl<'tcx> Debug for Terminator<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> Result<(), Error> {\n+    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n         try!(self.fmt_head(fmt));\n         let successors = self.successors();\n         let labels = self.fmt_successor_labels();\n@@ -347,7 +347,7 @@ impl<'tcx> Terminator<'tcx> {\n     /// Write the \"head\" part of the terminator; that is, its name and the data it uses to pick the\n     /// successor basic block, if any. The only information not inlcuded is the list of possible\n     /// successors, which may be rendered differently between the text and the graphviz format.\n-    pub fn fmt_head<W: Write>(&self, fmt: &mut W) -> Result<(), Error> {\n+    pub fn fmt_head<W: Write>(&self, fmt: &mut W) -> fmt::Result {\n         use self::Terminator::*;\n         match *self {\n             Goto { .. } => write!(fmt, \"goto\"),\n@@ -421,7 +421,7 @@ pub enum DropKind {\n }\n \n impl<'tcx> Debug for Statement<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> Result<(), Error> {\n+    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n         use self::StatementKind::*;\n         match self.kind {\n             Assign(ref lv, ref rv) => write!(fmt, \"{:?} = {:?}\", lv, rv),\n@@ -541,7 +541,7 @@ impl<'tcx> Lvalue<'tcx> {\n }\n \n impl<'tcx> Debug for Lvalue<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> Result<(), Error> {\n+    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n         use self::Lvalue::*;\n \n         match *self {\n@@ -588,7 +588,7 @@ pub enum Operand<'tcx> {\n }\n \n impl<'tcx> Debug for Operand<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> Result<(), Error> {\n+    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n         use self::Operand::*;\n         match *self {\n             Constant(ref a) => write!(fmt, \"{:?}\", a),\n@@ -715,7 +715,7 @@ pub enum UnOp {\n }\n \n impl<'tcx> Debug for Rvalue<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> Result<(), Error> {\n+    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n         use self::Rvalue::*;\n \n         match *self {\n@@ -771,13 +771,13 @@ pub enum Literal<'tcx> {\n }\n \n impl<'tcx> Debug for Constant<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> Result<(), Error> {\n+    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n         write!(fmt, \"{:?}\", self.literal)\n     }\n }\n \n impl<'tcx> Debug for Literal<'tcx> {\n-    fn fmt(&self, fmt: &mut Formatter) -> Result<(), Error> {\n+    fn fmt(&self, fmt: &mut Formatter) -> fmt::Result {\n         use self::Literal::*;\n         match *self {\n             Item { def_id, .. } =>\n@@ -788,7 +788,7 @@ impl<'tcx> Debug for Literal<'tcx> {\n }\n \n /// Write a `ConstVal` in a way closer to the original source code than the `Debug` output.\n-pub fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ConstVal) -> Result<(), Error> {\n+pub fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ConstVal) -> fmt::Result {\n     use middle::const_eval::ConstVal::*;\n     match *const_val {\n         Float(f) => write!(fmt, \"{:?}\", f),"}]}