{"sha": "5947141aef34bd87db4997fe74c23b90314f7a22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NDcxNDFhZWYzNGJkODdkYjQ5OTdmZTc0YzIzYjkwMzE0ZjdhMjI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-05T22:46:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-06T02:06:22Z"}, "message": "Add section on unsafe functions, reword explanation on unsafe-overriding-purity.", "tree": {"sha": "b201618969852ac4ec7acdced96dd99b3d84b1d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b201618969852ac4ec7acdced96dd99b3d84b1d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5947141aef34bd87db4997fe74c23b90314f7a22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5947141aef34bd87db4997fe74c23b90314f7a22", "html_url": "https://github.com/rust-lang/rust/commit/5947141aef34bd87db4997fe74c23b90314f7a22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5947141aef34bd87db4997fe74c23b90314f7a22/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb4c747e9f6b51f8e44caab27ca376b59df3a56d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4c747e9f6b51f8e44caab27ca376b59df3a56d", "html_url": "https://github.com/rust-lang/rust/commit/cb4c747e9f6b51f8e44caab27ca376b59df3a56d"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "877c02c8ae1be14b6f3da3bdd44c45934b18e758", "filename": "doc/rust.md", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5947141aef34bd87db4997fe74c23b90314f7a22/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/5947141aef34bd87db4997fe74c23b90314f7a22/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=5947141aef34bd87db4997fe74c23b90314f7a22", "patch": "@@ -960,24 +960,12 @@ pure fn pure_length<T>(ls: List<T>) -> uint { ... }\n pure fn nonempty_list<T>(ls: List<T>) -> bool { pure_length(ls) > 0u }\n ~~~~\n \n-*TODO:* should actually define referential transparency.\n-\n-The effect checking rules previously enumerated are a restricted set\n-of typechecking rules meant to approximate the universe of observably\n-referentially transparent Rust procedures conservatively. Sometimes,\n-these rules are *too* restrictive. Rust allows programmers to violate\n-these rules by writing pure functions that the compiler cannot prove\n-to be referentially transparent, using \"unsafe blocks\". When writing\n-code that uses unsafe blocks, programmers should always be aware that\n-they have an obligation to show that the code *behaves* referentially\n-transparently at all times, even if the compiler cannot *prove*\n-automatically that the code is referentially transparent. In the\n-presence of unsafe blocks, the compiler provides no static guarantee\n-that the code will behave as expected at runtime. Rather, the\n-programmer has an independent obligation to verify the semantics of\n-the pure functions they write.\n-\n-*TODO:* last two sentences are vague.\n+These purity-checking rules approximate the concept of referential transparency:\n+that a call-expression could be rewritten with the literal-expression of its return value, without changing the meaning of the program.\n+Since they are an approximation, sometimes these rules are *too* restrictive.\n+Rust allows programmers to violate these rules using [`unsafe` blocks](#unsafe-blocks).\n+As with any `unsafe` block, those that violate static purity carry transfer the burden of safety-proof from the compiler to the programmer.\n+Programmers should exercise caution when breaking such rules.\n \n An example of a pure function that uses an unsafe block:\n \n@@ -1045,6 +1033,28 @@ Similarly, [trait](#traits) bounds can be specified for type\n parameters to allow methods with that trait to be called on values\n of that type.\n \n+#### Unsafe functions\n+\n+Unsafe functions are those containing unsafe operations that are not contained in an [`unsafe` block](#unsafe-blocks).\n+\n+Unsafe operations are those that potentially violate the memory-safety guarantees of Rust's static semantics.\n+Specifically, the following operations are considered unsafe:\n+\n+  - Dereferencing a [raw pointer](#pointer-types)\n+  - Casting a [raw pointer](#pointer-types) to a safe pointer type\n+  - Breaking the [purity-checking rules](#pure-functions)\n+  - Calling an unsafe function\n+\n+##### Unsafe blocks\n+\n+A block of code can also be prefixed with the `unsafe` keyword,\n+to permit a sequence of unsafe operations in an otherwise-safe function.\n+This facility exists because the static semantics of a Rust are a necessary approximation of the dynamic semantics.\n+When a programmer has sufficient conviction that a sequence of unsafe operations is actually safe,\n+they can encapsulate that sequence (taken as a whole) within an `unsafe` block.\n+The compiler will consider uses of such code \"safe\", to the surrounding context.\n+\n+\n #### Extern functions\n \n Extern functions are part of Rust's foreign function interface, providing\n@@ -1059,7 +1069,7 @@ extern fn new_vec() -> ~[int] { ~[] }\n ~~~\n \n Extern functions may not be called from Rust code, but their value\n-may be taken as an unsafe `u8` pointer.\n+may be taken as a raw `u8` pointer.\n \n ~~~\n # extern fn new_vec() -> ~[int] { ~[] }\n@@ -2852,7 +2862,7 @@ exploiting.]\n ### Communication between tasks\n \n Rust tasks are isolated and generally unable to interfere with one another's memory directly,\n-except through [`unsafe` code](#unsafe-code).\n+except through [`unsafe` code](#unsafe-functions).\n All contact between tasks is mediated by safe forms of ownership transfer,\n and data races on memory are prohibited by the type system.\n "}]}