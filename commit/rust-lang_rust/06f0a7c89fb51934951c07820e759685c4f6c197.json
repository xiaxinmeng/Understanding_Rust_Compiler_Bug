{"sha": "06f0a7c89fb51934951c07820e759685c4f6c197", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZjBhN2M4OWZiNTE5MzQ5NTFjMDc4MjBlNzU5Njg1YzRmNmMxOTc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-12T19:29:44Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:20:19Z"}, "message": "Rename TypeParameterDef -> TypeParamDef and RegionParameterDef -> RegionParamDef", "tree": {"sha": "486964dc39430daf4cfcdf8723c522a19122253b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/486964dc39430daf4cfcdf8723c522a19122253b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06f0a7c89fb51934951c07820e759685c4f6c197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06f0a7c89fb51934951c07820e759685c4f6c197", "html_url": "https://github.com/rust-lang/rust/commit/06f0a7c89fb51934951c07820e759685c4f6c197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06f0a7c89fb51934951c07820e759685c4f6c197/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "178a8f1139ddad2aa59ce0e54cf10659dc4eed30", "url": "https://api.github.com/repos/rust-lang/rust/commits/178a8f1139ddad2aa59ce0e54cf10659dc4eed30", "html_url": "https://github.com/rust-lang/rust/commit/178a8f1139ddad2aa59ce0e54cf10659dc4eed30"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "d0427ef4be227eaf7c18cc64facecd78a2f3737f", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=06f0a7c89fb51934951c07820e759685c4f6c197", "patch": "@@ -738,7 +738,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::Generics {\n             ref parent_count,\n             ref params,\n \n-            // Reverse map to each `TypeParameterDef`'s `index` field, from\n+            // Reverse map to each `TypeParamDef`'s `index` field, from\n             // `def_id.index` (`def_id.krate` is the same as the item's).\n             type_param_to_index: _, // Don't hash this\n             has_self,\n@@ -759,11 +759,11 @@ impl_stable_hash_for!(enum ty::GenericParamDef {\n });\n \n impl<'a> HashStable<StableHashingContext<'a>>\n-for ty::RegionParameterDef {\n+for ty::RegionParamDef {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        let ty::RegionParameterDef {\n+        let ty::RegionParamDef {\n             name,\n             def_id,\n             index,\n@@ -777,7 +777,7 @@ for ty::RegionParameterDef {\n     }\n }\n \n-impl_stable_hash_for!(struct ty::TypeParameterDef {\n+impl_stable_hash_for!(struct ty::TypeParamDef {\n     name,\n     def_id,\n     index,"}, {"sha": "a594231441a9be94f244ae7bac324687358282bf", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=06f0a7c89fb51934951c07820e759685c4f6c197", "patch": "@@ -909,7 +909,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// region parameter definition.\n     pub fn region_var_for_def(&self,\n                               span: Span,\n-                              def: &ty::RegionParameterDef)\n+                              def: &ty::RegionParamDef)\n                               -> ty::Region<'tcx> {\n         self.next_region_var(EarlyBoundRegion(span, def.name))\n     }\n@@ -924,7 +924,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// as the substitutions for the default, `(T, U)`.\n     pub fn type_var_for_def(&self,\n                             span: Span,\n-                            def: &ty::TypeParameterDef)\n+                            def: &ty::TypeParamDef)\n                             -> Ty<'tcx> {\n         let ty_var_id = self.type_variables\n                             .borrow_mut()"}, {"sha": "7391d1872520d179c83e7d3fb31e39a970fcf5ac", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=06f0a7c89fb51934951c07820e759685c4f6c197", "patch": "@@ -2467,7 +2467,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_param(0, keywords::SelfType.name().as_interned_str())\n     }\n \n-    pub fn mk_param_from_def(self, def: &ty::TypeParameterDef) -> Ty<'tcx> {\n+    pub fn mk_param_from_def(self, def: &ty::TypeParamDef) -> Ty<'tcx> {\n         self.mk_param(def.index, def.name)\n     }\n "}, {"sha": "59b88567a0d1cbf20ba882d3f5469de0d3f4c2e2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=06f0a7c89fb51934951c07820e759685c4f6c197", "patch": "@@ -710,7 +710,7 @@ pub enum IntVarValue {\n pub struct FloatVarValue(pub ast::FloatTy);\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n-pub struct TypeParameterDef {\n+pub struct TypeParamDef {\n     pub name: InternedString,\n     pub def_id: DefId,\n     pub index: u32,\n@@ -726,7 +726,7 @@ pub struct TypeParameterDef {\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n-pub struct RegionParameterDef {\n+pub struct RegionParamDef {\n     pub name: InternedString,\n     pub def_id: DefId,\n     pub index: u32,\n@@ -737,7 +737,7 @@ pub struct RegionParameterDef {\n     pub pure_wrt_drop: bool,\n }\n \n-impl RegionParameterDef {\n+impl RegionParamDef {\n     pub fn to_early_bound_region_data(&self) -> ty::EarlyBoundRegion {\n         ty::EarlyBoundRegion {\n             def_id: self.def_id,\n@@ -759,8 +759,8 @@ impl ty::EarlyBoundRegion {\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum GenericParamDef {\n-    Lifetime(RegionParameterDef),\n-    Type(TypeParameterDef),\n+    Lifetime(RegionParamDef),\n+    Type(TypeParamDef),\n }\n \n impl GenericParamDef {\n@@ -787,7 +787,7 @@ pub struct Generics {\n     pub parent_count: usize,\n     pub params: Vec<GenericParamDef>,\n \n-    /// Reverse map to each `TypeParameterDef`'s `index` field\n+    /// Reverse map to each `TypeParamDef`'s `index` field\n     pub type_param_to_index: FxHashMap<DefId, u32>,\n \n     pub has_self: bool,\n@@ -799,7 +799,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n         self.parent_count + self.params.len()\n     }\n \n-    pub fn lifetimes(&self) -> impl DoubleEndedIterator<Item = &RegionParameterDef> {\n+    pub fn lifetimes(&self) -> impl DoubleEndedIterator<Item = &RegionParamDef> {\n         self.params.iter().filter_map(|p| {\n             if let GenericParamDef::Lifetime(lt) = p {\n                 Some(lt)\n@@ -809,7 +809,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n         })\n     }\n \n-    pub fn types(&self) -> impl DoubleEndedIterator<Item = &TypeParameterDef> {\n+    pub fn types(&self) -> impl DoubleEndedIterator<Item = &TypeParamDef> {\n         self.params.iter().filter_map(|p| {\n             if let GenericParamDef::Type(ty) = p {\n                 Some(ty)\n@@ -836,7 +836,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n     pub fn region_param(&'tcx self,\n                         param: &EarlyBoundRegion,\n                         tcx: TyCtxt<'a, 'gcx, 'tcx>)\n-                        -> &'tcx RegionParameterDef\n+                        -> &'tcx RegionParamDef\n     {\n         if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n             // We're currently assuming that lifetimes precede other generic parameters.\n@@ -850,11 +850,11 @@ impl<'a, 'gcx, 'tcx> Generics {\n         }\n     }\n \n-    /// Returns the `TypeParameterDef` associated with this `ParamTy`.\n+    /// Returns the `TypeParamDef` associated with this `ParamTy`.\n     pub fn type_param(&'tcx self,\n                       param: &ParamTy,\n                       tcx: TyCtxt<'a, 'gcx, 'tcx>)\n-                      -> &TypeParameterDef {\n+                      -> &TypeParamDef {\n         if let Some(idx) = param.idx.checked_sub(self.parent_count as u32) {\n             // non-Self type parameters are always offset by exactly\n             // `self.regions.len()`. In the absence of a Self, this is obvious,"}, {"sha": "01ebf3666f9c296e2e61d957e4d1d1a46eb9f74f", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=06f0a7c89fb51934951c07820e759685c4f6c197", "patch": "@@ -928,7 +928,7 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n         ParamTy::new(0, keywords::SelfType.name().as_interned_str())\n     }\n \n-    pub fn for_def(def: &ty::TypeParameterDef) -> ParamTy {\n+    pub fn for_def(def: &ty::TypeParamDef) -> ParamTy {\n         ParamTy::new(def.index, def.name)\n     }\n "}, {"sha": "bec343afca82d8121173b27b334ac00495be2662", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=06f0a7c89fb51934951c07820e759685c4f6c197", "patch": "@@ -196,8 +196,8 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                             mut mk_region: FR,\n                             mut mk_type: FT)\n                             -> &'tcx Substs<'tcx>\n-    where FR: FnMut(&ty::RegionParameterDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n-          FT: FnMut(&ty::TypeParameterDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n+    where FR: FnMut(&ty::RegionParamDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n+          FT: FnMut(&ty::TypeParamDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n         let defs = tcx.generics_of(def_id);\n         let mut substs = Vec::with_capacity(defs.count());\n         Substs::fill_item(&mut substs, tcx, defs, &mut mk_region, &mut mk_type);\n@@ -210,8 +210,8 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                              mut mk_region: FR,\n                              mut mk_type: FT)\n                              -> &'tcx Substs<'tcx>\n-    where FR: FnMut(&ty::RegionParameterDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n-          FT: FnMut(&ty::TypeParameterDef, &[Kind<'tcx>]) -> Ty<'tcx>\n+    where FR: FnMut(&ty::RegionParamDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n+          FT: FnMut(&ty::TypeParamDef, &[Kind<'tcx>]) -> Ty<'tcx>\n     {\n         let defs = tcx.generics_of(def_id);\n         let mut result = Vec::with_capacity(defs.count());\n@@ -225,8 +225,8 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                              defs: &ty::Generics,\n                              mk_region: &mut FR,\n                              mk_type: &mut FT)\n-    where FR: FnMut(&ty::RegionParameterDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n-          FT: FnMut(&ty::TypeParameterDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n+    where FR: FnMut(&ty::RegionParamDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n+          FT: FnMut(&ty::TypeParamDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n \n         if let Some(def_id) = defs.parent {\n             let parent_defs = tcx.generics_of(def_id);\n@@ -239,8 +239,8 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                            defs: &ty::Generics,\n                            mk_region: &mut FR,\n                            mk_type: &mut FT)\n-    where FR: FnMut(&ty::RegionParameterDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n-          FT: FnMut(&ty::TypeParameterDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n+    where FR: FnMut(&ty::RegionParamDef, &[Kind<'tcx>]) -> ty::Region<'tcx>,\n+          FT: FnMut(&ty::TypeParamDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n         // Handle Self first, before all regions.\n         let mut types = defs.types();\n         let mut skip_self = defs.parent.is_none() && defs.has_self;\n@@ -314,12 +314,12 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     }\n \n     #[inline]\n-    pub fn type_for_def(&self, ty_param_def: &ty::TypeParameterDef) -> Ty<'tcx> {\n+    pub fn type_for_def(&self, ty_param_def: &ty::TypeParamDef) -> Ty<'tcx> {\n         self.type_at(ty_param_def.index as usize)\n     }\n \n     #[inline]\n-    pub fn region_for_def(&self, def: &ty::RegionParameterDef) -> ty::Region<'tcx> {\n+    pub fn region_for_def(&self, def: &ty::RegionParamDef) -> ty::Region<'tcx> {\n         self.region_at(def.index as usize)\n     }\n "}, {"sha": "1a0c5f4a78a4236f8d4664b6d765065d3ea5ed37", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=06f0a7c89fb51934951c07820e759685c4f6c197", "patch": "@@ -588,18 +588,18 @@ define_print! {\n     }\n }\n \n-impl fmt::Debug for ty::TypeParameterDef {\n+impl fmt::Debug for ty::TypeParamDef {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"TypeParameterDef({}, {:?}, {})\",\n+        write!(f, \"TypeParamDef({}, {:?}, {})\",\n                self.name,\n                self.def_id,\n                self.index)\n     }\n }\n \n-impl fmt::Debug for ty::RegionParameterDef {\n+impl fmt::Debug for ty::RegionParamDef {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"RegionParameterDef({}, {:?}, {})\",\n+        write!(f, \"RegionParamDef({}, {:?}, {})\",\n                self.name,\n                self.def_id,\n                self.index)"}, {"sha": "a6e24f155090d9fa68df5edb6a1d51bb7d6f845e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=06f0a7c89fb51934951c07820e759685c4f6c197", "patch": "@@ -43,15 +43,15 @@ pub trait AstConv<'gcx, 'tcx> {\n                                  -> ty::GenericPredicates<'tcx>;\n \n     /// What lifetime should we use when a lifetime is omitted (and not elided)?\n-    fn re_infer(&self, span: Span, _def: Option<&ty::RegionParameterDef>)\n+    fn re_infer(&self, span: Span, _def: Option<&ty::RegionParamDef>)\n                 -> Option<ty::Region<'tcx>>;\n \n     /// What type should we use when a type is omitted?\n     fn ty_infer(&self, span: Span) -> Ty<'tcx>;\n \n     /// Same as ty_infer, but with a known type parameter definition.\n     fn ty_infer_for_def(&self,\n-                        _def: &ty::TypeParameterDef,\n+                        _def: &ty::TypeParamDef,\n                         span: Span) -> Ty<'tcx> {\n         self.ty_infer(span)\n     }\n@@ -95,7 +95,7 @@ const TRAIT_OBJECT_DUMMY_SELF: ty::TypeVariants<'static> = ty::TyInfer(ty::Fresh\n impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     pub fn ast_region_to_region(&self,\n         lifetime: &hir::Lifetime,\n-        def: Option<&ty::RegionParameterDef>)\n+        def: Option<&ty::RegionParamDef>)\n         -> ty::Region<'tcx>\n     {\n         let tcx = self.tcx();\n@@ -228,7 +228,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         }\n \n         let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);\n-        let default_needs_object_self = |p: &ty::TypeParameterDef| {\n+        let default_needs_object_self = |p: &ty::TypeParamDef| {\n             if is_object && p.has_default {\n                 if tcx.at(span).type_of(p.def_id).has_self_ty() {\n                     // There is no suitable inference default for a type parameter\n@@ -1301,7 +1301,7 @@ fn split_auto_traits<'a, 'b, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n }\n \n fn check_type_argument_count(tcx: TyCtxt, span: Span, supplied: usize,\n-                             ty_param_defs: &[&ty::TypeParameterDef]) {\n+                             ty_param_defs: &[&ty::TypeParamDef]) {\n     let accepted = ty_param_defs.len();\n     let required = ty_param_defs.iter().take_while(|x| !x.has_default).count();\n     if supplied < required {"}, {"sha": "b427020908dc141a8bf14249266c241dde675cc3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=06f0a7c89fb51934951c07820e759685c4f6c197", "patch": "@@ -1730,7 +1730,7 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn re_infer(&self, span: Span, def: Option<&ty::RegionParameterDef>)\n+    fn re_infer(&self, span: Span, def: Option<&ty::RegionParamDef>)\n                 -> Option<ty::Region<'tcx>> {\n         let v = match def {\n             Some(def) => infer::EarlyBoundRegion(span, def.name),\n@@ -1744,7 +1744,7 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn ty_infer_for_def(&self,\n-                        ty_param_def: &ty::TypeParameterDef,\n+                        ty_param_def: &ty::TypeParamDef,\n                         span: Span) -> Ty<'tcx> {\n         self.type_var_for_def(span, ty_param_def)\n     }"}, {"sha": "ae778966687447efeeed37cb0465598ce55ab90b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=06f0a7c89fb51934951c07820e759685c4f6c197", "patch": "@@ -368,7 +368,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     let mut substituted_predicates = Vec::new();\n \n     let generics = tcx.generics_of(def_id);\n-    let is_our_default = |def: &ty::TypeParameterDef|\n+    let is_our_default = |def: &ty::TypeParamDef|\n                             def.has_default && def.index >= generics.parent_count as u32;\n \n     // Check that concrete defaults are well-formed. See test `type-check-defaults.rs`."}, {"sha": "869ae779c1747bc8ac318f5ed9cacc6af69894b3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=06f0a7c89fb51934951c07820e759685c4f6c197", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n         self.tcx.at(span).type_param_predicates((self.item_def_id, def_id))\n     }\n \n-    fn re_infer(&self, _span: Span, _def: Option<&ty::RegionParameterDef>)\n+    fn re_infer(&self, _span: Span, _def: Option<&ty::RegionParamDef>)\n                 -> Option<ty::Region<'tcx>> {\n         None\n     }\n@@ -840,7 +840,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     // the node id for the Self type parameter.\n                     let param_id = item.id;\n \n-                    opt_self = Some(ty::TypeParameterDef {\n+                    opt_self = Some(ty::TypeParamDef {\n                         index: 0,\n                         name: keywords::SelfType.name().as_interned_str(),\n                         def_id: tcx.hir.local_def_id(param_id),\n@@ -886,7 +886,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let early_lifetimes = early_bound_lifetimes_from_generics(tcx, ast_generics);\n     let regions = early_lifetimes.enumerate().map(|(i, l)| {\n-        ty::RegionParameterDef {\n+        ty::RegionParamDef {\n             name: l.lifetime.name.name().as_interned_str(),\n             index: own_start + i as u32,\n             def_id: tcx.hir.local_def_id(l.lifetime.id),\n@@ -915,7 +915,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n         }\n \n-        ty::TypeParameterDef {\n+        ty::TypeParamDef {\n             index: type_start + i as u32,\n             name: p.name.as_interned_str(),\n             def_id: tcx.hir.local_def_id(p.id),\n@@ -940,7 +940,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         };\n \n         for (i, &arg) in dummy_args.iter().enumerate() {\n-            types.push(ty::TypeParameterDef {\n+            types.push(ty::TypeParamDef {\n                 index: type_start + i as u32,\n                 name: Symbol::intern(arg).as_interned_str(),\n                 def_id,"}, {"sha": "11bcbc1fe7e30951f2a4fa3ac973b1c9fed621b3", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=06f0a7c89fb51934951c07820e759685c4f6c197", "patch": "@@ -256,7 +256,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         }\n     }\n \n-    fn ty_param_to_ty(&self, param: ty::TypeParameterDef) -> hir::Ty {\n+    fn ty_param_to_ty(&self, param: ty::TypeParamDef) -> hir::Ty {\n         debug!(\"ty_param_to_ty({:?}) {:?}\", param, param.def_id);\n         hir::Ty {\n             id: ast::DUMMY_NODE_ID,"}, {"sha": "31f227373cb93575eea518998706af25ec810e1d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06f0a7c89fb51934951c07820e759685c4f6c197/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=06f0a7c89fb51934951c07820e759685c4f6c197", "patch": "@@ -1336,7 +1336,7 @@ impl Clean<TyParam> for hir::TyParam {\n     }\n }\n \n-impl<'tcx> Clean<TyParam> for ty::TypeParameterDef {\n+impl<'tcx> Clean<TyParam> for ty::TypeParamDef {\n     fn clean(&self, cx: &DocContext) -> TyParam {\n         cx.renderinfo.borrow_mut().external_typarams.insert(self.def_id, self.name.clean(cx));\n         TyParam {\n@@ -1577,7 +1577,7 @@ impl Clean<Lifetime> for hir::LifetimeDef {\n     }\n }\n \n-impl Clean<Lifetime> for ty::RegionParameterDef {\n+impl Clean<Lifetime> for ty::RegionParamDef {\n     fn clean(&self, _: &DocContext) -> Lifetime {\n         Lifetime(self.name.to_string())\n     }"}]}