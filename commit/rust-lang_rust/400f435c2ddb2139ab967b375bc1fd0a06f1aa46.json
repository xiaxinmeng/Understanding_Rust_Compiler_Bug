{"sha": "400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "node_id": "C_kwDOAAsO6NoAKDQwMGY0MzVjMmRkYjIxMzlhYjk2N2IzNzViYzFmZDBhMDZmMWFhNDY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-28T10:00:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-28T10:00:04Z"}, "message": "Rollup merge of #98420 - davidtwco:translation-lint-fixes-and-more-migration, r=compiler-errors\n\ntranslation: lint fix + more migration\n\n- Unfortunately, the diagnostic lints are very broken and trigger much more often than they should. This PR corrects the conditional which checks if the function call being made is to a diagnostic function so that it returns in every intended case.\n- The `rustc_lint_diagnostics` attribute is used by the diagnostic translation/struct migration lints to identify calls where non-translatable diagnostics or diagnostics outwith impls are being created. Any function used in creating a diagnostic should be annotated with this attribute so this PR adds the attribute to many more functions.\n- Port the diagnostics from the `rustc_privacy` crate and enable the lints for that crate.\n\nr? ``@compiler-errors``", "tree": {"sha": "6a97de62dd22d64bb5454a929b1bff83e8cc94ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a97de62dd22d64bb5454a929b1bff83e8cc94ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiutEkCRBK7hj4Ov3rIwAAnMkIAAoeAKQeMpEXYPNPESqj+6uk\nHLEC8JdSSwx/GXWsHThcZ4kibDA9EYErEAhU/ocTZEq4Oq4uTGoEfTeppovhoJc8\nF7EmZVIwYOP5/e/IfJ/FSYqG1R2P8MTpwTVy69I3Js5LPom9eNLiT1f7Uv2iysRe\nMOTp3XGwNJahrvheNsYmQzcWtbdi8a1y8p4eCndOS4jEptUTz9guxq9E8LE0lvVI\no6ZF7rjcuu8nLLp70IHD3LZLKY+Sz+RCgJ0VyVBbRa0sOMimAHwF18Euf6tTapr7\nul/lwXvMD3RdViZGxx6iFFRBH/KO4Gc59AOEtCHt+XXFcyUnZ6mePvDCW0hTVAs=\n=SENi\n-----END PGP SIGNATURE-----\n", "payload": "tree 6a97de62dd22d64bb5454a929b1bff83e8cc94ca\nparent 56b77869141efecc9daef02654bf0add552ad398\nparent 15d61d711d1c06ac07c774a2e6988ebefae5b79c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1656410404 +0530\ncommitter GitHub <noreply@github.com> 1656410404 +0530\n\nRollup merge of #98420 - davidtwco:translation-lint-fixes-and-more-migration, r=compiler-errors\n\ntranslation: lint fix + more migration\n\n- Unfortunately, the diagnostic lints are very broken and trigger much more often than they should. This PR corrects the conditional which checks if the function call being made is to a diagnostic function so that it returns in every intended case.\n- The `rustc_lint_diagnostics` attribute is used by the diagnostic translation/struct migration lints to identify calls where non-translatable diagnostics or diagnostics outwith impls are being created. Any function used in creating a diagnostic should be annotated with this attribute so this PR adds the attribute to many more functions.\n- Port the diagnostics from the `rustc_privacy` crate and enable the lints for that crate.\n\nr? ``@compiler-errors``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "html_url": "https://github.com/rust-lang/rust/commit/400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56b77869141efecc9daef02654bf0add552ad398", "url": "https://api.github.com/repos/rust-lang/rust/commits/56b77869141efecc9daef02654bf0add552ad398", "html_url": "https://github.com/rust-lang/rust/commit/56b77869141efecc9daef02654bf0add552ad398"}, {"sha": "15d61d711d1c06ac07c774a2e6988ebefae5b79c", "url": "https://api.github.com/repos/rust-lang/rust/commits/15d61d711d1c06ac07c774a2e6988ebefae5b79c", "html_url": "https://github.com/rust-lang/rust/commit/15d61d711d1c06ac07c774a2e6988ebefae5b79c"}], "stats": {"total": 235, "additions": 188, "deletions": 47}, "files": [{"sha": "96d9449db57c076c5db7f44fa8c9dc92c12a479d", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "patch": "@@ -4280,6 +4280,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_hir\",\n+ \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_session\",\n  \"rustc_span\","}, {"sha": "708fe8719a1ebc84d3f0bb5b51f2dc434960831f", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "patch": "@@ -1,4 +1,6 @@\n-use rustc_errors::{struct_span_err, DiagnosticBuilder, DiagnosticId, ErrorGuaranteed, MultiSpan};\n+use rustc_errors::{\n+    struct_span_err, DiagnosticBuilder, DiagnosticId, DiagnosticMessage, ErrorGuaranteed, MultiSpan,\n+};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n \n@@ -476,10 +478,11 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         struct_span_err!(self, span, E0716, \"temporary value dropped while borrowed\",)\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n-        msg: &str,\n+        msg: impl Into<DiagnosticMessage>,\n         code: DiagnosticId,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         self.infcx.tcx.sess.struct_span_err_with_code(sp, msg, code)"}, {"sha": "a2df072aa31195f63964f71d9d45bc4e4dfdb08c", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "patch": "@@ -6,6 +6,7 @@\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n+#![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![feature(trusted_step)]\n #![feature(try_blocks)]"}, {"sha": "2b0778f48caeeeae8843b697b25c856191feceb7", "filename": "compiler/rustc_error_messages/locales/en-US/privacy.ftl", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl?ref=400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "patch": "@@ -0,0 +1,12 @@\n+privacy-field-is-private = field `{$field_name}` of {$variant_descr} `{$def_path_str}` is private\n+privacy-field-is-private-is-update-syntax-label = field `{$field_name}` is private\n+privacy-field-is-private-label = private field\n+\n+privacy-item-is-private = {$kind} `{$descr}` is private\n+    .label = private {$kind}\n+privacy-unnamed-item-is-private = {$kind} is private\n+    .label = private {$kind}\n+\n+privacy-in-public-interface = {$vis_descr} {$kind} `{$descr}` in public interface\n+    .label = can't leak {$vis_descr} {$kind}\n+    .visibility-label = `{$descr}` declared as {$vis_descr}"}, {"sha": "90eb5ef54462d87181a41f1d0549746d9ca37360", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "patch": "@@ -32,6 +32,7 @@ pub use unic_langid::{langid, LanguageIdentifier};\n // Generates `DEFAULT_LOCALE_RESOURCES` static and `fluent_generated` module.\n fluent_messages! {\n     parser => \"../locales/en-US/parser.ftl\",\n+    privacy => \"../locales/en-US/privacy.ftl\",\n     typeck => \"../locales/en-US/typeck.ftl\",\n     builtin_macros => \"../locales/en-US/builtin_macros.ftl\",\n }"}, {"sha": "1e57d66dd9f5619dd8558574b74a3900cea5771f", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "patch": "@@ -1077,6 +1077,7 @@ impl<'a> ExtCtxt<'a> {\n         self.current_expansion.id.expansion_cause()\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -1101,9 +1102,11 @@ impl<'a> ExtCtxt<'a> {\n     ///\n     /// Compilation will be stopped in the near future (at the end of\n     /// the macro expansion phase).\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.sess.parse_sess.span_diagnostic.span_err(sp, msg);\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.sess.parse_sess.span_diagnostic.span_warn(sp, msg);\n     }"}, {"sha": "c18147592dc7022b449379f876b88237dc3bb67f", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "patch": "@@ -9,6 +9,7 @@\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]\n+#![feature(rustc_attrs)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "56c8635a189e1be10e7d1562d680eab630cb81ce", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "patch": "@@ -406,9 +406,12 @@ impl LateLintPass<'_> for Diagnostics {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         let Some((span, def_id, substs)) = typeck_results_of_method_fn(cx, expr) else { return };\n         debug!(?span, ?def_id, ?substs);\n-        if let Ok(Some(instance)) = ty::Instance::resolve(cx.tcx, cx.param_env, def_id, substs) &&\n-            !cx.tcx.has_attr(instance.def_id(), sym::rustc_lint_diagnostics)\n-        {\n+        let has_attr = ty::Instance::resolve(cx.tcx, cx.param_env, def_id, substs)\n+            .ok()\n+            .and_then(|inst| inst)\n+            .map(|inst| cx.tcx.has_attr(inst.def_id(), sym::rustc_lint_diagnostics))\n+            .unwrap_or(false);\n+        if !has_attr {\n             return;\n         }\n "}, {"sha": "113af328a91fa39bbcdedb97885d0f55f0caaee6", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "patch": "@@ -6,6 +6,7 @@\n #![feature(let_chains)]\n #![feature(let_else)]\n #![feature(never_type)]\n+#![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "0869ed65ad2f3db915f7bbe8c4fb56895f55993c", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "patch": "@@ -357,6 +357,7 @@ impl<'a> DerefMut for SnapshotParser<'a> {\n }\n \n impl<'a> Parser<'a> {\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub(super) fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -365,6 +366,7 @@ impl<'a> Parser<'a> {\n         err.span_err(sp, self.diagnostic())\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}, {"sha": "5785921fb1eda3b14f6d517700aa05c9ab01daa8", "filename": "compiler/rustc_privacy/Cargo.toml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2FCargo.toml?ref=400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "patch": "@@ -4,14 +4,15 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n-rustc_middle = { path = \"../rustc_middle\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_attr = { path = \"../rustc_attr\" }\n+rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_hir = { path = \"../rustc_hir\" }\n-rustc_typeck = { path = \"../rustc_typeck\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n+rustc_middle = { path = \"../rustc_middle\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n-rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n+rustc_typeck = { path = \"../rustc_typeck\" }\n tracing = \"0.1\""}, {"sha": "482721d373ab7ee0857b72b97924de9d9ad426d9", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "patch": "@@ -0,0 +1,75 @@\n+use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_span::{Span, Symbol};\n+\n+#[derive(SessionDiagnostic)]\n+#[error(privacy::field_is_private, code = \"E0451\")]\n+pub struct FieldIsPrivate {\n+    #[primary_span]\n+    pub span: Span,\n+    pub field_name: Symbol,\n+    pub variant_descr: &'static str,\n+    pub def_path_str: String,\n+    #[subdiagnostic]\n+    pub label: FieldIsPrivateLabel,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub enum FieldIsPrivateLabel {\n+    #[label(privacy::field_is_private_is_update_syntax_label)]\n+    IsUpdateSyntax {\n+        #[primary_span]\n+        span: Span,\n+        field_name: Symbol,\n+    },\n+    #[label(privacy::field_is_private_label)]\n+    Other {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(privacy::item_is_private)]\n+pub struct ItemIsPrivate<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub kind: &'a str,\n+    pub descr: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(privacy::unnamed_item_is_private)]\n+pub struct UnnamedItemIsPrivate {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: &'static str,\n+}\n+\n+// Duplicate of `InPublicInterface` but with a different error code, shares the same slug.\n+#[derive(SessionDiagnostic)]\n+#[error(privacy::in_public_interface, code = \"E0445\")]\n+pub struct InPublicInterfaceTraits<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub vis_descr: &'static str,\n+    pub kind: &'a str,\n+    pub descr: String,\n+    #[label(privacy::visibility_label)]\n+    pub vis_span: Span,\n+}\n+\n+// Duplicate of `InPublicInterfaceTraits` but with a different error code, shares the same slug.\n+#[derive(SessionDiagnostic)]\n+#[error(privacy::in_public_interface, code = \"E0446\")]\n+pub struct InPublicInterface<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub vis_descr: &'static str,\n+    pub kind: &'a str,\n+    pub descr: String,\n+    #[label(privacy::visibility_label)]\n+    pub vis_span: Span,\n+}"}, {"sha": "238c917bbc33f63fc989f6e7df632d076f7c3d3b", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 53, "deletions": 39, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "patch": "@@ -1,15 +1,19 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(associated_type_defaults)]\n #![feature(control_flow_enum)]\n+#![feature(rustc_private)]\n #![feature(try_blocks)]\n-#![feature(associated_type_defaults)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n+#![cfg_attr(not(bootstrap), deny(rustc::untranslatable_diagnostic))]\n+#![cfg_attr(not(bootstrap), deny(rustc::diagnostic_outside_of_impl))]\n+\n+mod errors;\n \n use rustc_ast::MacroDef;\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::intern::Interned;\n-use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LocalDefIdSet, CRATE_DEF_ID};\n@@ -34,6 +38,11 @@ use std::marker::PhantomData;\n use std::ops::ControlFlow;\n use std::{cmp, fmt, mem};\n \n+use errors::{\n+    FieldIsPrivate, FieldIsPrivateLabel, InPublicInterface, InPublicInterfaceTraits, ItemIsPrivate,\n+    UnnamedItemIsPrivate,\n+};\n+\n ////////////////////////////////////////////////////////////////////////////////\n /// Generic infrastructure used to implement specific visitors below.\n ////////////////////////////////////////////////////////////////////////////////\n@@ -935,23 +944,17 @@ impl<'tcx> NamePrivacyVisitor<'tcx> {\n         let hir_id = self.tcx.hir().local_def_id_to_hir_id(self.current_item);\n         let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did(), hir_id).1;\n         if !field.vis.is_accessible_from(def_id, self.tcx) {\n-            let label = if in_update_syntax {\n-                format!(\"field `{}` is private\", field.name)\n-            } else {\n-                \"private field\".to_string()\n-            };\n-\n-            struct_span_err!(\n-                self.tcx.sess,\n+            self.tcx.sess.emit_err(FieldIsPrivate {\n                 span,\n-                E0451,\n-                \"field `{}` of {} `{}` is private\",\n-                field.name,\n-                def.variant_descr(),\n-                self.tcx.def_path_str(def.did())\n-            )\n-            .span_label(span, label)\n-            .emit();\n+                field_name: field.name,\n+                variant_descr: def.variant_descr(),\n+                def_path_str: self.tcx.def_path_str(def.did()),\n+                label: if in_update_syntax {\n+                    FieldIsPrivateLabel::IsUpdateSyntax { span, field_name: field.name }\n+                } else {\n+                    FieldIsPrivateLabel::Other { span }\n+                },\n+            });\n         }\n     }\n }\n@@ -1075,11 +1078,11 @@ impl<'tcx> TypePrivacyVisitor<'tcx> {\n     fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {\n         let is_error = !self.item_is_accessible(def_id);\n         if is_error {\n-            self.tcx\n-                .sess\n-                .struct_span_err(self.span, &format!(\"{} `{}` is private\", kind, descr))\n-                .span_label(self.span, &format!(\"private {}\", kind))\n-                .emit();\n+            self.tcx.sess.emit_err(ItemIsPrivate {\n+                span: self.span,\n+                kind,\n+                descr: descr.to_string(),\n+            });\n         }\n         is_error\n     }\n@@ -1250,13 +1253,10 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n                     hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),\n                 };\n                 let kind = kind.descr(def_id);\n-                let msg = match name {\n-                    Some(name) => format!(\"{} `{}` is private\", kind, name),\n-                    None => format!(\"{} is private\", kind),\n+                let _ = match name {\n+                    Some(name) => sess.emit_err(ItemIsPrivate { span, kind, descr: name }),\n+                    None => sess.emit_err(UnnamedItemIsPrivate { span, kind }),\n                 };\n-                sess.struct_span_err(span, &msg)\n-                    .span_label(span, &format!(\"private {}\", kind))\n-                    .emit();\n                 return;\n             }\n         }\n@@ -1753,30 +1753,44 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                     }\n                 }\n             };\n-            let make_msg = || format!(\"{} {} `{}` in public interface\", vis_descr, kind, descr);\n             let span = self.tcx.def_span(self.item_def_id.to_def_id());\n             if self.has_old_errors\n                 || self.in_assoc_ty\n                 || self.tcx.resolutions(()).has_pub_restricted\n             {\n-                let mut err = if kind == \"trait\" {\n-                    struct_span_err!(self.tcx.sess, span, E0445, \"{}\", make_msg())\n-                } else {\n-                    struct_span_err!(self.tcx.sess, span, E0446, \"{}\", make_msg())\n-                };\n+                let descr = descr.to_string();\n                 let vis_span =\n                     self.tcx.sess.source_map().guess_head_span(self.tcx.def_span(def_id));\n-                err.span_label(span, format!(\"can't leak {} {}\", vis_descr, kind));\n-                err.span_label(vis_span, format!(\"`{}` declared as {}\", descr, vis_descr));\n-                err.emit();\n+                if kind == \"trait\" {\n+                    self.tcx.sess.emit_err(InPublicInterfaceTraits {\n+                        span,\n+                        vis_descr,\n+                        kind,\n+                        descr,\n+                        vis_span,\n+                    });\n+                } else {\n+                    self.tcx.sess.emit_err(InPublicInterface {\n+                        span,\n+                        vis_descr,\n+                        kind,\n+                        descr,\n+                        vis_span,\n+                    });\n+                }\n             } else {\n                 let err_code = if kind == \"trait\" { \"E0445\" } else { \"E0446\" };\n                 self.tcx.struct_span_lint_hir(\n                     lint::builtin::PRIVATE_IN_PUBLIC,\n                     hir_id,\n                     span,\n                     |lint| {\n-                        lint.build(&format!(\"{} (error {})\", make_msg(), err_code)).emit();\n+                        lint.build(&format!(\n+                            \"{} (error {})\",\n+                            format!(\"{} {} `{}` in public interface\", vis_descr, kind, descr),\n+                            err_code\n+                        ))\n+                        .emit();\n                     },\n                 );\n             }"}, {"sha": "b5058fd699aca0c900847c7a414081ff973c8ab1", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/400f435c2ddb2139ab967b375bc1fd0a06f1aa46/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=400f435c2ddb2139ab967b375bc1fd0a06f1aa46", "patch": "@@ -280,13 +280,15 @@ impl Session {\n         self.crate_types.set(crate_types).expect(\"`crate_types` was initialized twice\")\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_warn<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_warn_with_expectation<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -295,6 +297,7 @@ impl Session {\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_warn_with_expectation(sp, msg, id)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -303,40 +306,47 @@ impl Session {\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn(msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_warn_with_expectation(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n         id: lint::LintExpectationId,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn_with_expectation(msg, id)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_allow<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_span_allow(sp, msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n         id: lint::LintExpectationId,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_expect(msg, id)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -346,33 +356,38 @@ impl Session {\n         self.diagnostic().struct_span_err_with_code(sp, msg, code)\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.parse_sess.struct_err(msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n         code: DiagnosticId,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n         code: DiagnosticId,\n     ) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn_with_code(msg, code)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_fatal<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -381,13 +396,16 @@ impl Session {\n     ) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().span_fatal(sp, msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -396,9 +414,11 @@ impl Session {\n     ) -> ! {\n         self.diagnostic().span_fatal_with_code(sp, msg, code)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn fatal(&self, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().fatal(msg).raise()\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_err_or_warn<S: Into<MultiSpan>>(\n         &self,\n         is_warning: bool,\n@@ -411,13 +431,15 @@ impl Session {\n             self.span_err(sp, msg);\n         }\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> ErrorGuaranteed {\n         self.diagnostic().span_err(sp, msg)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -426,6 +448,7 @@ impl Session {\n     ) {\n         self.diagnostic().span_err_with_code(sp, msg, code)\n     }\n+    #[cfg_attr(not(bootstrap), rustc_lint_diagnostics)]\n     pub fn err(&self, msg: impl Into<DiagnosticMessage>) -> ErrorGuaranteed {\n         self.diagnostic().err(msg)\n     }"}]}