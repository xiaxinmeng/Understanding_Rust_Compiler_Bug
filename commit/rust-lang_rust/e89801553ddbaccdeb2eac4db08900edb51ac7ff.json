{"sha": "e89801553ddbaccdeb2eac4db08900edb51ac7ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OTgwMTU1M2RkYmFjY2RlYjJlYWM0ZGIwODkwMGVkYjUxYWM3ZmY=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-12-22T18:17:59Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2020-12-23T09:52:14Z"}, "message": "Revert \"Pass Clippy args also trough RUSTFLAGS\"", "tree": {"sha": "dccff76746beb5f6148a7ce176b92e39d60f799d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dccff76746beb5f6148a7ce176b92e39d60f799d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e89801553ddbaccdeb2eac4db08900edb51ac7ff", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAl/jE04ACgkQHKDfKvWd\naKWS+xAAs/+YK/5d8gfxuEvEV9Ydg4sWVN6esmrMcxYjdZ7NMLtEmaCN9cGICa2Z\nNqwNtXNG44KMx61MC25W6OdFgW1v16CVD9bSVfZEG1aNeqMSFTqDN9dgRVEU+Rfa\nnpZKuNdbkv/YtO3IvX/HEBdWBfxEzTwy/tGhFNo50MLMZpzINAloPqW4FYCZmOhp\nu4b+wA3QtacXvhYMyAUoa5NIgG7c0Z2POBQsubcRW3AT9V1g9jAeVfZx6b2eF6Kn\nO64JLceMktBU5KC9lHWoOgoG9N7PRr0dY+GwypvHlgr6jrfygD3WJNVVziy87dUK\niIJerFwKH2NHMkaB6jt2e433Du7sTK6xBQz6Dh9O+by8YBkSomaJpje9p390lCUW\n2vRKq0PBzMqLfqkUVev0ZvQ4hEmk4Y3U6e1k7gKU6+uYehg6Rwz8uU8Mk+byrMv4\nKNMsbLMRvnta2eP7quYnhhs/ezn5v6nJgC+7FkERvJvhmlVwxR1xkcU1aXRppnO9\nV56LaOB/kZs9LXRkkZCSs6HULmI8T3tbRIViEJ/fwK9k+p065B6K1C+HIS7BVc9z\nEN/AsL43RolfrGT4P14F/aF/Ui2fet4H6/v9EWQVl5Ae6ehMlF8onpA3m0TFRrmi\nwNgTwi/dCTI/NSjVl9XEKCyt5FIr5Jht0cePFXaeNWdTpKTUiko=\n=Aeu0\n-----END PGP SIGNATURE-----", "payload": "tree dccff76746beb5f6148a7ce176b92e39d60f799d\nparent 4911ab124c481430672a3833b37075e6435ec34d\nauthor Philipp Krones <hello@philkrones.com> 1608661079 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1608717134 +0100\n\nRevert \"Pass Clippy args also trough RUSTFLAGS\"\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e89801553ddbaccdeb2eac4db08900edb51ac7ff", "html_url": "https://github.com/rust-lang/rust/commit/e89801553ddbaccdeb2eac4db08900edb51ac7ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e89801553ddbaccdeb2eac4db08900edb51ac7ff/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4911ab124c481430672a3833b37075e6435ec34d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4911ab124c481430672a3833b37075e6435ec34d", "html_url": "https://github.com/rust-lang/rust/commit/4911ab124c481430672a3833b37075e6435ec34d"}], "stats": {"total": 218, "additions": 47, "deletions": 171}, "files": [{"sha": "a765390c6032d4c83694367683988b4b1c5e3bc0", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e89801553ddbaccdeb2eac4db08900edb51ac7ff/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e89801553ddbaccdeb2eac4db08900edb51ac7ff/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=e89801553ddbaccdeb2eac4db08900edb51ac7ff", "patch": "@@ -20,6 +20,7 @@ publish = false\n \n [[bin]]\n name = \"cargo-clippy\"\n+test = false\n path = \"src/main.rs\"\n \n [[bin]]"}, {"sha": "aaa55e11c7db1b1ee9086584b3b9c581aabad966", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e89801553ddbaccdeb2eac4db08900edb51ac7ff/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e89801553ddbaccdeb2eac4db08900edb51ac7ff/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e89801553ddbaccdeb2eac4db08900edb51ac7ff", "patch": "@@ -208,6 +208,7 @@ the lint(s) you are interested in:\n ```terminal\n cargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...\n ```\n+Note that if you've run clippy before, this may only take effect after you've modified a file or ran `cargo clean`.\n \n ### Specifying the minimum supported Rust version\n "}, {"sha": "e490ee54c0be0c25d960b0a53c47823a36eaf510", "filename": "src/driver.rs", "status": "modified", "additions": 29, "deletions": 87, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/e89801553ddbaccdeb2eac4db08900edb51ac7ff/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89801553ddbaccdeb2eac4db08900edb51ac7ff/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=e89801553ddbaccdeb2eac4db08900edb51ac7ff", "patch": "@@ -1,6 +1,5 @@\n #![feature(rustc_private)]\n #![feature(once_cell)]\n-#![feature(bool_to_option)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n@@ -20,7 +19,6 @@ use rustc_tools_util::VersionInfo;\n \n use std::borrow::Cow;\n use std::env;\n-use std::iter;\n use std::lazy::SyncLazy;\n use std::ops::Deref;\n use std::panic;\n@@ -49,6 +47,20 @@ fn arg_value<'a, T: Deref<Target = str>>(\n     None\n }\n \n+#[test]\n+fn test_arg_value() {\n+    let args = &[\"--bar=bar\", \"--foobar\", \"123\", \"--foo\"];\n+\n+    assert_eq!(arg_value(&[] as &[&str], \"--foobar\", |_| true), None);\n+    assert_eq!(arg_value(args, \"--bar\", |_| false), None);\n+    assert_eq!(arg_value(args, \"--bar\", |_| true), Some(\"bar\"));\n+    assert_eq!(arg_value(args, \"--bar\", |p| p == \"bar\"), Some(\"bar\"));\n+    assert_eq!(arg_value(args, \"--bar\", |p| p == \"foo\"), None);\n+    assert_eq!(arg_value(args, \"--foobar\", |p| p == \"foo\"), None);\n+    assert_eq!(arg_value(args, \"--foobar\", |p| p == \"123\"), Some(\"123\"));\n+    assert_eq!(arg_value(args, \"--foo\", |_| true), None);\n+}\n+\n struct DefaultCallbacks;\n impl rustc_driver::Callbacks for DefaultCallbacks {}\n \n@@ -170,28 +182,6 @@ fn toolchain_path(home: Option<String>, toolchain: Option<String>) -> Option<Pat\n     })\n }\n \n-fn remove_clippy_args<'a, T, U, I>(args: &mut Vec<T>, clippy_args: I)\n-where\n-    T: AsRef<str>,\n-    U: AsRef<str> + ?Sized + 'a,\n-    I: Iterator<Item = &'a U> + Clone,\n-{\n-    let args_iter = clippy_args.map(AsRef::as_ref);\n-    let args_count = args_iter.clone().count();\n-\n-    if args_count > 0 {\n-        if let Some(start) = args.windows(args_count).enumerate().find_map(|(current, window)| {\n-            window\n-                .iter()\n-                .map(AsRef::as_ref)\n-                .eq(args_iter.clone())\n-                .then_some(current)\n-        }) {\n-            args.drain(start..start + args_count);\n-        }\n-    }\n-}\n-\n #[allow(clippy::too_many_lines)]\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n@@ -288,9 +278,20 @@ pub fn main() {\n             args.extend(vec![\"--sysroot\".into(), sys_root]);\n         };\n \n-        let clippy_args = env::var(\"CLIPPY_ARGS\").unwrap_or_default();\n-        let clippy_args = clippy_args.split_whitespace();\n-        let no_deps = clippy_args.clone().any(|flag| flag == \"--no-deps\");\n+        let mut no_deps = false;\n+        let clippy_args = env::var(\"CLIPPY_ARGS\")\n+            .unwrap_or_default()\n+            .split(\"__CLIPPY_HACKERY__\")\n+            .filter_map(|s| match s {\n+                \"\" => None,\n+                \"--no-deps\" => {\n+                    no_deps = true;\n+                    None\n+                },\n+                _ => Some(s.to_string()),\n+            })\n+            .chain(vec![\"--cfg\".into(), r#\"feature=\"cargo-clippy\"\"#.into()])\n+            .collect::<Vec<String>>();\n \n         // We enable Clippy if one of the following conditions is met\n         // - IF Clippy is run on its test suite OR\n@@ -303,11 +304,7 @@ pub fn main() {\n \n         let clippy_enabled = clippy_tests_set || (!cap_lints_allow && (!no_deps || in_primary_package));\n         if clippy_enabled {\n-            remove_clippy_args(&mut args, iter::once(\"--no-deps\"));\n-            args.extend(vec![\"--cfg\".into(), r#\"feature=\"cargo-clippy\"\"#.into()]);\n-        } else {\n-            // Remove all flags passed through RUSTFLAGS if Clippy is not enabled.\n-            remove_clippy_args(&mut args, clippy_args);\n+            args.extend(clippy_args);\n         }\n \n         let mut clippy = ClippyCallbacks;\n@@ -318,58 +315,3 @@ pub fn main() {\n         rustc_driver::RunCompiler::new(&args, callbacks).run()\n     }))\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    #[test]\n-    fn test_arg_value() {\n-        let args = &[\"--bar=bar\", \"--foobar\", \"123\", \"--foo\"];\n-\n-        assert_eq!(arg_value(&[] as &[&str], \"--foobar\", |_| true), None);\n-        assert_eq!(arg_value(args, \"--bar\", |_| false), None);\n-        assert_eq!(arg_value(args, \"--bar\", |_| true), Some(\"bar\"));\n-        assert_eq!(arg_value(args, \"--bar\", |p| p == \"bar\"), Some(\"bar\"));\n-        assert_eq!(arg_value(args, \"--bar\", |p| p == \"foo\"), None);\n-        assert_eq!(arg_value(args, \"--foobar\", |p| p == \"foo\"), None);\n-        assert_eq!(arg_value(args, \"--foobar\", |p| p == \"123\"), Some(\"123\"));\n-        assert_eq!(arg_value(args, \"--foo\", |_| true), None);\n-    }\n-\n-    #[test]\n-    fn removes_clippy_args_from_start() {\n-        let mut args = vec![\"-D\", \"clippy::await_holding_lock\", \"--cfg\", r#\"feature=\"some_feat\"\"#];\n-        let clippy_args = [\"-D\", \"clippy::await_holding_lock\"].iter();\n-\n-        remove_clippy_args(&mut args, clippy_args);\n-        assert_eq!(args, &[\"--cfg\", r#\"feature=\"some_feat\"\"#]);\n-    }\n-\n-    #[test]\n-    fn removes_clippy_args_from_end() {\n-        let mut args = vec![\"-Zui-testing\", \"-A\", \"clippy::empty_loop\", \"--no-deps\"];\n-        let clippy_args = [\"-A\", \"clippy::empty_loop\", \"--no-deps\"].iter();\n-\n-        remove_clippy_args(&mut args, clippy_args);\n-        assert_eq!(args, &[\"-Zui-testing\"]);\n-    }\n-\n-    #[test]\n-    fn removes_clippy_args_from_middle() {\n-        let mut args = vec![\"-Zui-testing\", \"-W\", \"clippy::filter_map\", \"-L\", \"serde\"];\n-        let clippy_args = [\"-W\", \"clippy::filter_map\"].iter();\n-\n-        remove_clippy_args(&mut args, clippy_args);\n-        assert_eq!(args, &[\"-Zui-testing\", \"-L\", \"serde\"]);\n-    }\n-\n-    #[test]\n-    fn no_clippy_args_to_remove() {\n-        let mut args = vec![\"-Zui-testing\", \"-L\", \"serde\"];\n-        let clippy_args: [&str; 0] = [];\n-\n-        remove_clippy_args(&mut args, clippy_args.iter());\n-        assert_eq!(args, &[\"-Zui-testing\", \"-L\", \"serde\"]);\n-    }\n-}"}, {"sha": "ea06743394d1075ba270830ba5e49b0c783cc3bf", "filename": "src/main.rs", "status": "modified", "additions": 15, "deletions": 83, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e89801553ddbaccdeb2eac4db08900edb51ac7ff/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89801553ddbaccdeb2eac4db08900edb51ac7ff/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=e89801553ddbaccdeb2eac4db08900edb51ac7ff", "patch": "@@ -1,5 +1,3 @@\n-#![feature(bool_to_option)]\n-#![feature(command_access)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n@@ -64,7 +62,7 @@ struct ClippyCmd {\n     unstable_options: bool,\n     cargo_subcommand: &'static str,\n     args: Vec<String>,\n-    clippy_args: Option<String>,\n+    clippy_args: Vec<String>,\n }\n \n impl ClippyCmd {\n@@ -101,17 +99,16 @@ impl ClippyCmd {\n             args.insert(0, \"+nightly\".to_string());\n         }\n \n-        let mut clippy_args = old_args.collect::<Vec<String>>().join(\" \");\n-        if cargo_subcommand == \"fix\" && !clippy_args.contains(\"--no-deps\") {\n-            clippy_args = format!(\"{} --no-deps\", clippy_args);\n+        let mut clippy_args: Vec<String> = old_args.collect();\n+        if cargo_subcommand == \"fix\" && !clippy_args.iter().any(|arg| arg == \"--no-deps\") {\n+            clippy_args.push(\"--no-deps\".into());\n         }\n \n-        let has_args = !clippy_args.is_empty();\n         ClippyCmd {\n             unstable_options,\n             cargo_subcommand,\n             args,\n-            clippy_args: has_args.then_some(clippy_args),\n+            clippy_args,\n         }\n     }\n \n@@ -151,24 +148,20 @@ impl ClippyCmd {\n             .map(|p| (\"CARGO_TARGET_DIR\", p))\n     }\n \n-    fn into_std_cmd(self, rustflags: Option<String>) -> Command {\n+    fn into_std_cmd(self) -> Command {\n         let mut cmd = Command::new(\"cargo\");\n+        let clippy_args: String = self\n+            .clippy_args\n+            .iter()\n+            .map(|arg| format!(\"{}__CLIPPY_HACKERY__\", arg))\n+            .collect();\n \n         cmd.env(self.path_env(), Self::path())\n             .envs(ClippyCmd::target_dir())\n+            .env(\"CLIPPY_ARGS\", clippy_args)\n             .arg(self.cargo_subcommand)\n             .args(&self.args);\n \n-        // HACK: pass Clippy args to the driver *also* through RUSTFLAGS.\n-        // This guarantees that new builds will be triggered when Clippy flags change.\n-        if let Some(clippy_args) = self.clippy_args {\n-            cmd.env(\n-                \"RUSTFLAGS\",\n-                rustflags.map_or(clippy_args.clone(), |flags| format!(\"{} {}\", clippy_args, flags)),\n-            );\n-            cmd.env(\"CLIPPY_ARGS\", clippy_args);\n-        }\n-\n         cmd\n     }\n }\n@@ -179,7 +172,7 @@ where\n {\n     let cmd = ClippyCmd::new(old_args);\n \n-    let mut cmd = cmd.into_std_cmd(env::var(\"RUSTFLAGS\").ok());\n+    let mut cmd = cmd.into_std_cmd();\n \n     let exit_status = cmd\n         .spawn()\n@@ -197,7 +190,6 @@ where\n #[cfg(test)]\n mod tests {\n     use super::ClippyCmd;\n-    use std::ffi::OsStr;\n \n     #[test]\n     #[should_panic]\n@@ -212,7 +204,6 @@ mod tests {\n             .split_whitespace()\n             .map(ToString::to_string);\n         let cmd = ClippyCmd::new(args);\n-\n         assert_eq!(\"fix\", cmd.cargo_subcommand);\n         assert_eq!(\"RUSTC_WORKSPACE_WRAPPER\", cmd.path_env());\n         assert!(cmd.args.iter().any(|arg| arg.ends_with(\"unstable-options\")));\n@@ -224,8 +215,7 @@ mod tests {\n             .split_whitespace()\n             .map(ToString::to_string);\n         let cmd = ClippyCmd::new(args);\n-\n-        assert!(cmd.clippy_args.unwrap().contains(\"--no-deps\"));\n+        assert!(cmd.clippy_args.iter().any(|arg| arg == \"--no-deps\"));\n     }\n \n     #[test]\n@@ -234,15 +224,13 @@ mod tests {\n             .split_whitespace()\n             .map(ToString::to_string);\n         let cmd = ClippyCmd::new(args);\n-\n-        assert_eq!(1, cmd.clippy_args.unwrap().matches(\"--no-deps\").count());\n+        assert_eq!(cmd.clippy_args.iter().filter(|arg| *arg == \"--no-deps\").count(), 1);\n     }\n \n     #[test]\n     fn check() {\n         let args = \"cargo clippy\".split_whitespace().map(ToString::to_string);\n         let cmd = ClippyCmd::new(args);\n-\n         assert_eq!(\"check\", cmd.cargo_subcommand);\n         assert_eq!(\"RUSTC_WRAPPER\", cmd.path_env());\n     }\n@@ -253,63 +241,7 @@ mod tests {\n             .split_whitespace()\n             .map(ToString::to_string);\n         let cmd = ClippyCmd::new(args);\n-\n         assert_eq!(\"check\", cmd.cargo_subcommand);\n         assert_eq!(\"RUSTC_WORKSPACE_WRAPPER\", cmd.path_env());\n     }\n-\n-    #[test]\n-    fn clippy_args_into_rustflags() {\n-        let args = \"cargo clippy -- -W clippy::as_conversions\"\n-            .split_whitespace()\n-            .map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args);\n-\n-        let rustflags = None;\n-        let cmd = cmd.into_std_cmd(rustflags);\n-\n-        assert!(cmd\n-            .get_envs()\n-            .any(|(key, val)| key == \"RUSTFLAGS\" && val == Some(OsStr::new(\"-W clippy::as_conversions\"))));\n-    }\n-\n-    #[test]\n-    fn clippy_args_respect_existing_rustflags() {\n-        let args = \"cargo clippy -- -D clippy::await_holding_lock\"\n-            .split_whitespace()\n-            .map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args);\n-\n-        let rustflags = Some(r#\"--cfg feature=\"some_feat\"\"#.into());\n-        let cmd = cmd.into_std_cmd(rustflags);\n-\n-        assert!(cmd.get_envs().any(|(key, val)| key == \"RUSTFLAGS\"\n-            && val == Some(OsStr::new(r#\"-D clippy::await_holding_lock --cfg feature=\"some_feat\"\"#))));\n-    }\n-\n-    #[test]\n-    fn no_env_change_if_no_clippy_args() {\n-        let args = \"cargo clippy\".split_whitespace().map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args);\n-\n-        let rustflags = Some(r#\"--cfg feature=\"some_feat\"\"#.into());\n-        let cmd = cmd.into_std_cmd(rustflags);\n-\n-        assert!(!cmd\n-            .get_envs()\n-            .any(|(key, _)| key == \"RUSTFLAGS\" || key == \"CLIPPY_ARGS\"));\n-    }\n-\n-    #[test]\n-    fn no_env_change_if_no_clippy_args_nor_rustflags() {\n-        let args = \"cargo clippy\".split_whitespace().map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args);\n-\n-        let rustflags = None;\n-        let cmd = cmd.into_std_cmd(rustflags);\n-\n-        assert!(!cmd\n-            .get_envs()\n-            .any(|(key, _)| key == \"RUSTFLAGS\" || key == \"CLIPPY_ARGS\"))\n-    }\n }"}, {"sha": "052223d6d6ff7f4156f17b0562a4d72335a875cb", "filename": "tests/dogfood.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89801553ddbaccdeb2eac4db08900edb51ac7ff/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89801553ddbaccdeb2eac4db08900edb51ac7ff/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=e89801553ddbaccdeb2eac4db08900edb51ac7ff", "patch": "@@ -23,7 +23,7 @@ fn dogfood_clippy() {\n         .current_dir(root_dir)\n         .env(\"CLIPPY_DOGFOOD\", \"1\")\n         .env(\"CARGO_INCREMENTAL\", \"0\")\n-        .arg(\"clippy\")\n+        .arg(\"clippy-preview\")\n         .arg(\"--all-targets\")\n         .arg(\"--all-features\")\n         .arg(\"--\")"}]}