{"sha": "8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNGYzMTUxMTY2ZDhkZGVhMmQzNjVjNTg5YmY0YWM3YWI2ZjIwYzk=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2017-04-30T18:04:35Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2017-05-15T09:13:30Z"}, "message": "Remove rustc_llvm dependency from librustc\n\nConsequently, session creation can no longer initialize LLVM.\nThe few places that use the compiler without going through\nrustc_driver/CompilerCalls thus need to be careful to manually\ninitialize LLVM (via rustc_trans!) immediately after session\ncreation.\n\nThis means librustc is not rebuilt when LLVM changes.", "tree": {"sha": "bf37110b17c2e0a0bc8d5dab5fd4256e9bb9d7ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf37110b17c2e0a0bc8d5dab5fd4256e9bb9d7ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9", "html_url": "https://github.com/rust-lang/rust/commit/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/comments", "author": null, "committer": null, "parents": [{"sha": "1a24a591dd43c53de7e3f16eff9f67469cf7a52b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a24a591dd43c53de7e3f16eff9f67469cf7a52b", "html_url": "https://github.com/rust-lang/rust/commit/1a24a591dd43c53de7e3f16eff9f67469cf7a52b"}], "stats": {"total": 116, "additions": 59, "deletions": 57}, "files": [{"sha": "8bf360751c578a47c7aab2f7386d9fb2efb83350", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9", "patch": "@@ -456,7 +456,6 @@ dependencies = [\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n- \"rustc_llvm 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\","}, {"sha": "9d64f511914d6d3c2ec5b16a95a28886a2f3c8ba", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9", "patch": "@@ -19,7 +19,6 @@ rustc_bitflags = { path = \"../librustc_bitflags\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n-rustc_llvm = { path = \"../librustc_llvm\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "f32ee7900646b0e4f1c82e9b415362e85dbc533d", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9", "patch": "@@ -55,7 +55,6 @@ extern crate getopts;\n extern crate graphviz;\n extern crate libc;\n extern crate owning_ref;\n-extern crate rustc_llvm as llvm;\n extern crate rustc_back;\n extern crate rustc_data_structures;\n extern crate serialize;"}, {"sha": "814246330a4c2f7b8da5e640ebbb536c83910423", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9", "patch": "@@ -37,19 +37,16 @@ use syntax_pos::{Span, MultiSpan, FileMap};\n use rustc_back::{LinkerFlavor, PanicStrategy};\n use rustc_back::target::Target;\n use rustc_data_structures::flock;\n-use llvm;\n \n use std::path::{Path, PathBuf};\n use std::cell::{self, Cell, RefCell};\n use std::collections::HashMap;\n use std::env;\n-use std::ffi::CString;\n use std::io::Write;\n use std::rc::Rc;\n use std::fmt;\n use std::time::Duration;\n use std::sync::Arc;\n-use libc::c_int;\n \n mod code_stats;\n pub mod config;\n@@ -713,8 +710,6 @@ pub fn build_session_(sopts: config::Options,\n         out_of_fuel: Cell::new(false),\n     };\n \n-    init_llvm(&sess);\n-\n     sess\n }\n \n@@ -743,55 +738,6 @@ pub enum IncrCompSession {\n     }\n }\n \n-fn init_llvm(sess: &Session) {\n-    unsafe {\n-        // Before we touch LLVM, make sure that multithreading is enabled.\n-        use std::sync::Once;\n-        static INIT: Once = Once::new();\n-        static mut POISONED: bool = false;\n-        INIT.call_once(|| {\n-            if llvm::LLVMStartMultithreaded() != 1 {\n-                // use an extra bool to make sure that all future usage of LLVM\n-                // cannot proceed despite the Once not running more than once.\n-                POISONED = true;\n-            }\n-\n-            configure_llvm(sess);\n-        });\n-\n-        if POISONED {\n-            bug!(\"couldn't enable multi-threaded LLVM\");\n-        }\n-    }\n-}\n-\n-unsafe fn configure_llvm(sess: &Session) {\n-    let mut llvm_c_strs = Vec::new();\n-    let mut llvm_args = Vec::new();\n-\n-    {\n-        let mut add = |arg: &str| {\n-            let s = CString::new(arg).unwrap();\n-            llvm_args.push(s.as_ptr());\n-            llvm_c_strs.push(s);\n-        };\n-        add(\"rustc\"); // fake program name\n-        if sess.time_llvm_passes() { add(\"-time-passes\"); }\n-        if sess.print_llvm_passes() { add(\"-debug-pass=Structure\"); }\n-\n-        for arg in &sess.opts.cg.llvm_args {\n-            add(&(*arg));\n-        }\n-    }\n-\n-    llvm::LLVMInitializePasses();\n-\n-    llvm::initialize_available_targets();\n-\n-    llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int,\n-                                 llvm_args.as_ptr());\n-}\n-\n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     let emitter: Box<Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {"}, {"sha": "20eba802e85a0d1c6fab26cc525bd6b207dd475d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9", "patch": "@@ -211,6 +211,7 @@ pub fn run_compiler<'a>(args: &[String],\n     let mut sess = session::build_session_with_codemap(\n         sopts, &dep_graph, input_file_path, descriptions, cstore.clone(), codemap, emitter_dest,\n     );\n+    rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n     let mut cfg = config::build_configuration(&sess, cfg);\n@@ -415,6 +416,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                     None,\n                     descriptions.clone(),\n                     cstore.clone());\n+                rustc_trans::init(&sess);\n                 rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n                 let mut cfg = config::build_configuration(&sess, cfg.clone());\n                 target_features::add_configuration(&mut cfg, &sess);"}, {"sha": "1d236a96bf62ed97c313cfad34909734a9def2aa", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9", "patch": "@@ -112,6 +112,7 @@ fn test_env<F>(source_string: &str,\n                                        diagnostic_handler,\n                                        Rc::new(CodeMap::new(FilePathMapping::empty())),\n                                        cstore.clone());\n+    rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     let input = config::Input::Str {\n         name: driver::anon_src(),"}, {"sha": "d9552eb08b4b6fa6b0cb97f607c9a0c418a82abf", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9", "patch": "@@ -178,3 +178,55 @@ pub struct CrateTranslation {\n }\n \n __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }\n+\n+use rustc::session::Session;\n+pub fn init(sess: &Session) {\n+    unsafe {\n+        // Before we touch LLVM, make sure that multithreading is enabled.\n+        use std::sync::Once;\n+        static INIT: Once = Once::new();\n+        static mut POISONED: bool = false;\n+        INIT.call_once(|| {\n+            if llvm::LLVMStartMultithreaded() != 1 {\n+                // use an extra bool to make sure that all future usage of LLVM\n+                // cannot proceed despite the Once not running more than once.\n+                POISONED = true;\n+            }\n+\n+            configure_llvm(sess);\n+        });\n+\n+        if POISONED {\n+            bug!(\"couldn't enable multi-threaded LLVM\");\n+        }\n+    }\n+}\n+\n+use std::ffi::CString;\n+use libc::c_int;\n+unsafe fn configure_llvm(sess: &Session) {\n+    let mut llvm_c_strs = Vec::new();\n+    let mut llvm_args = Vec::new();\n+\n+    {\n+        let mut add = |arg: &str| {\n+            let s = CString::new(arg).unwrap();\n+            llvm_args.push(s.as_ptr());\n+            llvm_c_strs.push(s);\n+        };\n+        add(\"rustc\"); // fake program name\n+        if sess.time_llvm_passes() { add(\"-time-passes\"); }\n+        if sess.print_llvm_passes() { add(\"-debug-pass=Structure\"); }\n+\n+        for arg in &sess.opts.cg.llvm_args {\n+            add(&(*arg));\n+        }\n+    }\n+\n+    llvm::LLVMInitializePasses();\n+\n+    llvm::initialize_available_targets();\n+\n+    llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int,\n+                                 llvm_args.as_ptr());\n+}"}, {"sha": "9a689ed079ee259f8240a652942966c3ddd7ec57", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9", "patch": "@@ -143,6 +143,7 @@ pub fn run_core(search_paths: SearchPaths,\n     let mut sess = session::build_session_(\n         sessopts, &dep_graph, cpath, diagnostic_handler, codemap, cstore.clone()\n     );\n+    rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n     let mut cfg = config::build_configuration(&sess, config::parse_cfgspecs(cfgs));"}, {"sha": "cfe2fad0fa4695a59d1b840da41c493305086a6c", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9", "patch": "@@ -86,6 +86,7 @@ pub fn run(input: &str,\n     let mut sess = session::build_session_(\n         sessopts, &dep_graph, Some(input_path.clone()), handler, codemap.clone(), cstore.clone(),\n     );\n+    rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     sess.parse_sess.config =\n         config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n@@ -234,6 +235,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     let mut sess = session::build_session_(\n         sessopts, &dep_graph, None, diagnostic_handler, codemap, cstore.clone(),\n     );\n+    rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n     let outdir = Mutex::new(TempDir::new(\"rustdoctest\").ok().expect(\"rustdoc needs a tempdir\"));"}, {"sha": "e96588c6e5aea6a3978b4ea67d4f46ed4d903d3a", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=8e4f3151166d8ddea2d365c589bf4ac7ab6f20c9", "patch": "@@ -61,6 +61,7 @@ fn basic_sess(sysroot: PathBuf) -> (Session, Rc<CStore>) {\n     let dep_graph = DepGraph::new(opts.build_dep_graph());\n     let cstore = Rc::new(CStore::new(&dep_graph, Box::new(rustc_trans::LlvmMetadataLoader)));\n     let sess = build_session(opts, &dep_graph, None, descriptions, cstore.clone());\n+    rustc_trans::init(&sess);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     (sess, cstore)\n }"}]}