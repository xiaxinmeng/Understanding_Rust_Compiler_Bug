{"sha": "205dac935531aaf0a5b70898db28e1f1e5f86176", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNWRhYzkzNTUzMWFhZjBhNWI3MDg5OGRiMjhlMWYxZTVmODYxNzY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2016-09-20T22:45:30Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2016-09-26T17:42:01Z"}, "message": "Move \"rust-call\" tuple spreading out of ArgDecl\n\nIf MIR is for a \"rust-call\" ABI function, the last arg would always\nhave `spread` set to `true`. Move this flag into `Mir` instead.", "tree": {"sha": "0dba98482ce310d218499e2d4d06e34b847d7bb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dba98482ce310d218499e2d4d06e34b847d7bb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/205dac935531aaf0a5b70898db28e1f1e5f86176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/205dac935531aaf0a5b70898db28e1f1e5f86176", "html_url": "https://github.com/rust-lang/rust/commit/205dac935531aaf0a5b70898db28e1f1e5f86176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/205dac935531aaf0a5b70898db28e1f1e5f86176/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bf4a7ad45bceef2e7ac666f4cbb41a37d6af763", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf4a7ad45bceef2e7ac666f4cbb41a37d6af763", "html_url": "https://github.com/rust-lang/rust/commit/3bf4a7ad45bceef2e7ac666f4cbb41a37d6af763"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "f236c4ebb977d68fc380034dd8bfc47fe3f7d776", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/205dac935531aaf0a5b70898db28e1f1e5f86176/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/205dac935531aaf0a5b70898db28e1f1e5f86176/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=205dac935531aaf0a5b70898db28e1f1e5f86176", "patch": "@@ -93,6 +93,12 @@ pub struct Mir<'tcx> {\n     /// the first argument is either the closure or a reference to it.\n     pub upvar_decls: Vec<UpvarDecl>,\n \n+    /// A boolean indicating whether the last argument (which must be a tuple)\n+    /// is passed as its individual components at the LLVM level.\n+    ///\n+    /// This is used for the \"rust-call\" ABI.\n+    pub spread_last_arg: bool,\n+\n     /// A span representing this MIR, for error reporting\n     pub span: Span,\n \n@@ -123,6 +129,7 @@ impl<'tcx> Mir<'tcx> {\n             arg_decls: arg_decls,\n             temp_decls: temp_decls,\n             upvar_decls: upvar_decls,\n+            spread_last_arg: false,\n             span: span,\n             cache: Cache::new()\n         }\n@@ -341,10 +348,6 @@ pub struct TempDecl<'tcx> {\n pub struct ArgDecl<'tcx> {\n     pub ty: Ty<'tcx>,\n \n-    /// If true, this argument is a tuple after monomorphization,\n-    /// and has to be collected from multiple actual arguments.\n-    pub spread: bool,\n-\n     /// Either keywords::Invalid or the name of a single-binding\n     /// pattern associated with this argument. Useful for debuginfo.\n     pub debug_name: Name"}, {"sha": "bd42eb3211a8b8acf4b6e1bc89ba8a25b1586eae", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/205dac935531aaf0a5b70898db28e1f1e5f86176/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/205dac935531aaf0a5b70898db28e1f1e5f86176/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=205dac935531aaf0a5b70898db28e1f1e5f86176", "patch": "@@ -665,7 +665,6 @@ macro_rules! make_mir_visitor {\n                               arg_decl: & $($mutability)* ArgDecl<'tcx>) {\n                 let ArgDecl {\n                     ref $($mutability)* ty,\n-                    spread: _,\n                     debug_name: _\n                 } = *arg_decl;\n "}, {"sha": "1f8dffe5871759d87a804f64e4343810deef457c", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/205dac935531aaf0a5b70898db28e1f1e5f86176/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/205dac935531aaf0a5b70898db28e1f1e5f86176/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=205dac935531aaf0a5b70898db28e1f1e5f86176", "patch": "@@ -169,7 +169,7 @@ pub fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         tcx.region_maps.lookup_code_extent(\n             CodeExtentData::ParameterScope { fn_id: fn_id, body_id: body_id });\n     let mut block = START_BLOCK;\n-    let mut arg_decls = unpack!(block = builder.in_scope(call_site_extent, block, |builder| {\n+    let arg_decls = unpack!(block = builder.in_scope(call_site_extent, block, |builder| {\n         let arg_decls = unpack!(block = builder.in_scope(arg_extent, block, |builder| {\n             builder.args_and_body(block, return_ty, arguments, arg_extent, ast_block)\n         }));\n@@ -184,12 +184,11 @@ pub fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     }));\n     assert_eq!(block, builder.return_block());\n \n+    let mut spread_last_arg = false;\n     match tcx.node_id_to_type(fn_id).sty {\n         ty::TyFnDef(_, _, f) if f.abi == Abi::RustCall => {\n             // RustCall pseudo-ABI untuples the last argument.\n-            if let Some(last_arg) = arg_decls.last() {\n-                arg_decls[last_arg].spread = true;\n-            }\n+            spread_last_arg = true;\n         }\n         _ => {}\n     }\n@@ -218,7 +217,9 @@ pub fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         }).collect()\n     });\n \n-    builder.finish(upvar_decls, arg_decls, return_ty)\n+    let (mut mir, aux) = builder.finish(upvar_decls, arg_decls, return_ty);\n+    mir.spread_last_arg = spread_last_arg;\n+    (mir, aux)\n }\n \n pub fn construct_const<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n@@ -331,7 +332,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             ArgDecl {\n                 ty: ty,\n-                spread: false,\n                 debug_name: name\n             }\n         }).collect();"}, {"sha": "efbab3a3b4dcec65d57787e360ea1596b29c6822", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/205dac935531aaf0a5b70898db28e1f1e5f86176/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/205dac935531aaf0a5b70898db28e1f1e5f86176/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=205dac935531aaf0a5b70898db28e1f1e5f86176", "patch": "@@ -349,7 +349,7 @@ fn arg_local_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,\n     mir.arg_decls.iter().enumerate().map(|(arg_index, arg_decl)| {\n         let arg_ty = bcx.monomorphize(&arg_decl.ty);\n         let local = mir.local_index(&mir::Lvalue::Arg(mir::Arg::new(arg_index))).unwrap();\n-        if arg_decl.spread {\n+        if mir.spread_last_arg && arg_index == mir.arg_decls.len() - 1 {\n             // This argument (e.g. the last argument in the \"rust-call\" ABI)\n             // is a tuple that was spread at the ABI level and now we have\n             // to reconstruct it into a tuple local variable, from multiple"}]}