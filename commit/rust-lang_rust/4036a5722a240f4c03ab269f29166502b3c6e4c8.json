{"sha": "4036a5722a240f4c03ab269f29166502b3c6e4c8", "node_id": "C_kwDOAAsO6NoAKDQwMzZhNTcyMmEyNDBmNGMwM2FiMjY5ZjI5MTY2NTAyYjNjNmU0Yzg", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-02-22T20:51:29Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-02-23T18:42:36Z"}, "message": "Unify validity checks into a single query\n\nPreviously, there were two queries to check whether a type allows the\n0x01 or zeroed bitpattern.\n\nI am planning on adding a further initness to check, truly uninit for\nMaybeUninit, which would make this three queries. This seems overkill\nfor such a small feature, so this PR unifies them into one.", "tree": {"sha": "46cf7cf884c26877255319b6033da56afd9962b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46cf7cf884c26877255319b6033da56afd9962b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4036a5722a240f4c03ab269f29166502b3c6e4c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4036a5722a240f4c03ab269f29166502b3c6e4c8", "html_url": "https://github.com/rust-lang/rust/commit/4036a5722a240f4c03ab269f29166502b3c6e4c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4036a5722a240f4c03ab269f29166502b3c6e4c8/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93fdcfa554af34c01970db8ace1e724214913f8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/93fdcfa554af34c01970db8ace1e724214913f8f", "html_url": "https://github.com/rust-lang/rust/commit/93fdcfa554af34c01970db8ace1e724214913f8f"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "f00e9321070582d0581160d68aa45837e3f6bcac", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4036a5722a240f4c03ab269f29166502b3c6e4c8/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4036a5722a240f4c03ab269f29166502b3c6e4c8/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=4036a5722a240f4c03ab269f29166502b3c6e4c8", "patch": "@@ -21,7 +21,8 @@ mod simd;\n pub(crate) use cpuid::codegen_cpuid_call;\n pub(crate) use llvm::codegen_llvm_intrinsic_call;\n \n-use rustc_middle::ty::layout::HasParamEnv;\n+use rustc_middle::ty;\n+use rustc_middle::ty::layout::{HasParamEnv, InitKind};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -642,7 +643,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             if intrinsic == sym::assert_zero_valid\n                 && !fx\n                     .tcx\n-                    .permits_zero_init(fx.param_env().and(ty))\n+                    .check_validity_of_init((InitKind::Zero, fx.param_env().and(ty)))\n                     .expect(\"expected to have layout during codegen\")\n             {\n                 with_no_trimmed_paths!({\n@@ -661,7 +662,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             if intrinsic == sym::assert_mem_uninitialized_valid\n                 && !fx\n                     .tcx\n-                    .permits_uninit_init(fx.param_env().and(ty))\n+                    .check_validity_of_init((\n+                        InitKind::UninitMitigated0x01Fill,\n+                        fx.param_env().and(ty),\n+                    ))\n                     .expect(\"expected to have layout during codegen\")\n             {\n                 with_no_trimmed_paths!({"}]}