{"sha": "aaa4861a0b2f6cb2f9f271961d9836976e94b139", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYTQ4NjFhMGIyZjZjYjJmOWYyNzE5NjFkOTgzNjk3NmU5NGIxMzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-29T10:15:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-29T10:15:08Z"}, "message": "More uniform naming", "tree": {"sha": "b39dcd86a196e865ab32a0612e50a80d8af17c72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b39dcd86a196e865ab32a0612e50a80d8af17c72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaa4861a0b2f6cb2f9f271961d9836976e94b139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa4861a0b2f6cb2f9f271961d9836976e94b139", "html_url": "https://github.com/rust-lang/rust/commit/aaa4861a0b2f6cb2f9f271961d9836976e94b139", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaa4861a0b2f6cb2f9f271961d9836976e94b139/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d2585e03feeaa4a83d59a7ea2cdfbe948526840", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d2585e03feeaa4a83d59a7ea2cdfbe948526840", "html_url": "https://github.com/rust-lang/rust/commit/2d2585e03feeaa4a83d59a7ea2cdfbe948526840"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "2daaf1b4a47c7fe469c690653af9b8c9b7c4d716", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aaa4861a0b2f6cb2f9f271961d9836976e94b139/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa4861a0b2f6cb2f9f271961d9836976e94b139/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=aaa4861a0b2f6cb2f9f271961d9836976e94b139", "patch": "@@ -452,7 +452,7 @@ fn on_request(\n     world: &mut WorldState,\n     pending_requests: &mut PendingRequests,\n     pool: &ThreadPool,\n-    sender: &Sender<Task>,\n+    task_sender: &Sender<Task>,\n     msg_sender: &Sender<Message>,\n     request_received: Instant,\n     req: Request,\n@@ -461,7 +461,7 @@ fn on_request(\n         req: Some(req),\n         pool,\n         world,\n-        sender,\n+        task_sender,\n         msg_sender,\n         pending_requests,\n         request_received,\n@@ -661,7 +661,7 @@ struct PoolDispatcher<'a> {\n     world: &'a mut WorldState,\n     pending_requests: &'a mut PendingRequests,\n     msg_sender: &'a Sender<Message>,\n-    sender: &'a Sender<Task>,\n+    task_sender: &'a Sender<Task>,\n     request_received: Instant,\n }\n \n@@ -708,7 +708,7 @@ impl<'a> PoolDispatcher<'a> {\n \n         self.pool.execute({\n             let world = self.world.snapshot();\n-            let sender = self.sender.clone();\n+            let sender = self.task_sender.clone();\n             move || {\n                 let result = f(world, params);\n                 let task = result_to_task::<R>(id, result);\n@@ -786,7 +786,7 @@ fn update_file_notifications_on_threadpool(\n     pool: &ThreadPool,\n     world: WorldSnapshot,\n     publish_decorations: bool,\n-    sender: Sender<Task>,\n+    task_sender: Sender<Task>,\n     subscriptions: Vec<FileId>,\n ) {\n     log::trace!(\"updating notifications for {:?}\", subscriptions);\n@@ -802,7 +802,7 @@ fn update_file_notifications_on_threadpool(\n                     }\n                     Ok(params) => {\n                         let not = notification_new::<req::PublishDiagnostics>(params);\n-                        sender.send(Task::Notify(not)).unwrap();\n+                        task_sender.send(Task::Notify(not)).unwrap();\n                     }\n                 }\n             }\n@@ -815,7 +815,7 @@ fn update_file_notifications_on_threadpool(\n                     }\n                     Ok(params) => {\n                         let not = notification_new::<req::PublishDecorations>(params);\n-                        sender.send(Task::Notify(not)).unwrap();\n+                        task_sender.send(Task::Notify(not)).unwrap();\n                     }\n                 }\n             }"}]}