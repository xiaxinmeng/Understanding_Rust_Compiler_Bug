{"sha": "d3f300477b89e70dd42379ba53c0e8ff74e9c694", "node_id": "C_kwDOAAsO6NoAKGQzZjMwMDQ3N2I4OWU3MGRkNDIzNzliYTUzYzBlOGZmNzRlOWM2OTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-18T10:20:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-18T10:20:24Z"}, "message": "Auto merge of #92062 - matthiaskrgr:rollup-en3p4sb, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #91439 (Mark defaulted `PartialEq`/`PartialOrd` methods as const)\n - #91516 (Improve suggestion to change struct field to &mut)\n - #91896 (Remove `in_band_lifetimes` for `rustc_passes`)\n - #91909 (:arrow_up: rust-analyzer)\n - #91922 (Remove `in_band_lifetimes` from `rustc_mir_dataflow`)\n - #92025 (Revert \"socket ancillary data implementation for dragonflybsd.\")\n - #92030 (Update stdlib to the 2021 edition)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8004696bdd20b6769527ce09aa63531ac99f9bd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8004696bdd20b6769527ce09aa63531ac99f9bd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3f300477b89e70dd42379ba53c0e8ff74e9c694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f300477b89e70dd42379ba53c0e8ff74e9c694", "html_url": "https://github.com/rust-lang/rust/commit/d3f300477b89e70dd42379ba53c0e8ff74e9c694", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3f300477b89e70dd42379ba53c0e8ff74e9c694/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "208ced64db20bd947a2ba5c90f37936fd3ab352b", "url": "https://api.github.com/repos/rust-lang/rust/commits/208ced64db20bd947a2ba5c90f37936fd3ab352b", "html_url": "https://github.com/rust-lang/rust/commit/208ced64db20bd947a2ba5c90f37936fd3ab352b"}, {"sha": "efbefb673d693263d5105e80ee948bfea819d9ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/efbefb673d693263d5105e80ee948bfea819d9ae", "html_url": "https://github.com/rust-lang/rust/commit/efbefb673d693263d5105e80ee948bfea819d9ae"}], "stats": {"total": 447, "additions": 208, "deletions": 239}, "files": [{"sha": "b5dad5ccdea8ead7f3054015f95d2dc9a42eda7f", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -229,15 +229,15 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             } => {\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n \n-                if let Some((span, message)) = annotate_struct_field(\n+                if let Some(span) = get_mut_span_in_struct_field(\n                     self.infcx.tcx,\n                     Place::ty_from(local, proj_base, self.body, self.infcx.tcx).ty,\n                     field,\n                 ) {\n-                    err.span_suggestion(\n+                    err.span_suggestion_verbose(\n                         span,\n                         \"consider changing this to be mutable\",\n-                        message,\n+                        \" mut \".into(),\n                         Applicability::MaybeIncorrect,\n                     );\n                 }\n@@ -1059,18 +1059,18 @@ fn is_closure_or_generator(ty: Ty<'_>) -> bool {\n     ty.is_closure() || ty.is_generator()\n }\n \n-/// Adds a suggestion to a struct definition given a field access to a local.\n-/// This function expects the local to be a reference to a struct in order to produce a suggestion.\n+/// Given a field that needs to be mutable, returns a span where the \" mut \" could go.\n+/// This function expects the local to be a reference to a struct in order to produce a span.\n ///\n /// ```text\n-/// LL |     s: &'a String\n-///    |        ---------- use `&'a mut String` here to make mutable\n+/// LL |     s: &'a   String\n+///    |           ^^^ returns a span taking up the space here\n /// ```\n-fn annotate_struct_field<'tcx>(\n+fn get_mut_span_in_struct_field<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n     field: &mir::Field,\n-) -> Option<(Span, String)> {\n+) -> Option<Span> {\n     // Expect our local to be a reference to a struct of some kind.\n     if let ty::Ref(_, ty, _) = ty.kind() {\n         if let ty::Adt(def, _) = ty.kind() {\n@@ -1081,25 +1081,10 @@ fn annotate_struct_field<'tcx>(\n             // Now we're dealing with the actual struct that we're going to suggest a change to,\n             // we can expect a field that is an immutable reference to a type.\n             if let hir::Node::Field(field) = node {\n-                if let hir::TyKind::Rptr(\n-                    lifetime,\n-                    hir::MutTy { mutbl: hir::Mutability::Not, ref ty },\n-                ) = field.ty.kind\n+                if let hir::TyKind::Rptr(lifetime, hir::MutTy { mutbl: hir::Mutability::Not, ty }) =\n+                    field.ty.kind\n                 {\n-                    // Get the snippets in two parts - the named lifetime (if there is one) and\n-                    // type being referenced, that way we can reconstruct the snippet without loss\n-                    // of detail.\n-                    let type_snippet = tcx.sess.source_map().span_to_snippet(ty.span).ok()?;\n-                    let lifetime_snippet = if !lifetime.is_elided() {\n-                        format!(\"{} \", tcx.sess.source_map().span_to_snippet(lifetime.span).ok()?)\n-                    } else {\n-                        String::new()\n-                    };\n-\n-                    return Some((\n-                        field.ty.span,\n-                        format!(\"&{}mut {}\", lifetime_snippet, &*type_snippet,),\n-                    ));\n+                    return Some(lifetime.span.between(ty.span));\n                 }\n             }\n         }"}, {"sha": "102e74397724a5a96d7570d77882be385293e6c0", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -18,7 +18,7 @@ pub trait Direction {\n     /// Applies all effects between the given `EffectIndex`s.\n     ///\n     /// `effects.start()` must precede or equal `effects.end()` in this direction.\n-    fn apply_effects_in_range<A>(\n+    fn apply_effects_in_range<'tcx, A>(\n         analysis: &A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n@@ -27,23 +27,23 @@ pub trait Direction {\n     ) where\n         A: Analysis<'tcx>;\n \n-    fn apply_effects_in_block<A>(\n+    fn apply_effects_in_block<'tcx, A>(\n         analysis: &A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n         block_data: &mir::BasicBlockData<'tcx>,\n     ) where\n         A: Analysis<'tcx>;\n \n-    fn gen_kill_effects_in_block<A>(\n+    fn gen_kill_effects_in_block<'tcx, A>(\n         analysis: &A,\n         trans: &mut GenKillSet<A::Idx>,\n         block: BasicBlock,\n         block_data: &mir::BasicBlockData<'tcx>,\n     ) where\n         A: GenKillAnalysis<'tcx>;\n \n-    fn visit_results_in_block<F, R>(\n+    fn visit_results_in_block<'mir, 'tcx, F, R>(\n         state: &mut F,\n         block: BasicBlock,\n         block_data: &'mir mir::BasicBlockData<'tcx>,\n@@ -52,7 +52,7 @@ pub trait Direction {\n     ) where\n         R: ResultsVisitable<'tcx, FlowState = F>;\n \n-    fn join_state_into_successors_of<A>(\n+    fn join_state_into_successors_of<'tcx, A>(\n         analysis: &A,\n         tcx: TyCtxt<'tcx>,\n         body: &mir::Body<'tcx>,\n@@ -72,7 +72,7 @@ impl Direction for Backward {\n         false\n     }\n \n-    fn apply_effects_in_block<A>(\n+    fn apply_effects_in_block<'tcx, A>(\n         analysis: &A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n@@ -92,7 +92,7 @@ impl Direction for Backward {\n         }\n     }\n \n-    fn gen_kill_effects_in_block<A>(\n+    fn gen_kill_effects_in_block<'tcx, A>(\n         analysis: &A,\n         trans: &mut GenKillSet<A::Idx>,\n         block: BasicBlock,\n@@ -112,7 +112,7 @@ impl Direction for Backward {\n         }\n     }\n \n-    fn apply_effects_in_range<A>(\n+    fn apply_effects_in_range<'tcx, A>(\n         analysis: &A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n@@ -189,7 +189,7 @@ impl Direction for Backward {\n         analysis.apply_statement_effect(state, statement, location);\n     }\n \n-    fn visit_results_in_block<F, R>(\n+    fn visit_results_in_block<'mir, 'tcx, F, R>(\n         state: &mut F,\n         block: BasicBlock,\n         block_data: &'mir mir::BasicBlockData<'tcx>,\n@@ -221,7 +221,7 @@ impl Direction for Backward {\n         vis.visit_block_start(state, block_data, block);\n     }\n \n-    fn join_state_into_successors_of<A>(\n+    fn join_state_into_successors_of<'tcx, A>(\n         analysis: &A,\n         _tcx: TyCtxt<'tcx>,\n         body: &mir::Body<'tcx>,\n@@ -294,7 +294,7 @@ impl Direction for Forward {\n         true\n     }\n \n-    fn apply_effects_in_block<A>(\n+    fn apply_effects_in_block<'tcx, A>(\n         analysis: &A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n@@ -314,7 +314,7 @@ impl Direction for Forward {\n         analysis.apply_terminator_effect(state, terminator, location);\n     }\n \n-    fn gen_kill_effects_in_block<A>(\n+    fn gen_kill_effects_in_block<'tcx, A>(\n         analysis: &A,\n         trans: &mut GenKillSet<A::Idx>,\n         block: BasicBlock,\n@@ -334,7 +334,7 @@ impl Direction for Forward {\n         analysis.terminator_effect(trans, terminator, location);\n     }\n \n-    fn apply_effects_in_range<A>(\n+    fn apply_effects_in_range<'tcx, A>(\n         analysis: &A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n@@ -407,7 +407,7 @@ impl Direction for Forward {\n         }\n     }\n \n-    fn visit_results_in_block<F, R>(\n+    fn visit_results_in_block<'mir, 'tcx, F, R>(\n         state: &mut F,\n         block: BasicBlock,\n         block_data: &'mir mir::BasicBlockData<'tcx>,\n@@ -438,7 +438,7 @@ impl Direction for Forward {\n         vis.visit_block_end(state, block_data, block);\n     }\n \n-    fn join_state_into_successors_of<A>(\n+    fn join_state_into_successors_of<'tcx, A>(\n         analysis: &A,\n         _tcx: TyCtxt<'tcx>,\n         _body: &mir::Body<'tcx>,\n@@ -591,7 +591,7 @@ where\n //\n // FIXME: Figure out how to express this using `Option::clone_from`, or maybe lift it into the\n // standard library?\n-fn opt_clone_from_or_clone<T: Clone>(opt: &'a mut Option<T>, val: &T) -> &'a mut T {\n+fn opt_clone_from_or_clone<'a, T: Clone>(opt: &'a mut Option<T>, val: &T) -> &'a mut T {\n     if opt.is_some() {\n         let ret = opt.as_mut().unwrap();\n         ret.clone_from(val);"}, {"sha": "e8a6d8dad439eb5e02cbee55007d7be5d654c12a", "filename": "compiler/rustc_mir_dataflow/src/framework/engine.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -31,12 +31,15 @@ where\n     pub(super) entry_sets: IndexVec<BasicBlock, A::Domain>,\n }\n \n-impl<A> Results<'tcx, A>\n+impl<'tcx, A> Results<'tcx, A>\n where\n     A: Analysis<'tcx>,\n {\n     /// Creates a `ResultsCursor` that can inspect these `Results`.\n-    pub fn into_results_cursor(self, body: &'mir mir::Body<'tcx>) -> ResultsCursor<'mir, 'tcx, A> {\n+    pub fn into_results_cursor<'mir>(\n+        self,\n+        body: &'mir mir::Body<'tcx>,\n+    ) -> ResultsCursor<'mir, 'tcx, A> {\n         ResultsCursor::new(body, self)\n     }\n \n@@ -45,7 +48,7 @@ where\n         &self.entry_sets[block]\n     }\n \n-    pub fn visit_with(\n+    pub fn visit_with<'mir>(\n         &self,\n         body: &'mir mir::Body<'tcx>,\n         blocks: impl IntoIterator<Item = BasicBlock>,\n@@ -54,7 +57,7 @@ where\n         visit_results(body, blocks, self, vis)\n     }\n \n-    pub fn visit_reachable_with(\n+    pub fn visit_reachable_with<'mir>(\n         &self,\n         body: &'mir mir::Body<'tcx>,\n         vis: &mut impl ResultsVisitor<'mir, 'tcx, FlowState = A::Domain>,\n@@ -85,7 +88,7 @@ where\n     apply_trans_for_block: Option<Box<dyn Fn(BasicBlock, &mut A::Domain)>>,\n }\n \n-impl<A, D, T> Engine<'a, 'tcx, A>\n+impl<'a, 'tcx, A, D, T> Engine<'a, 'tcx, A>\n where\n     A: GenKillAnalysis<'tcx, Idx = T, Domain = D>,\n     D: Clone + JoinSemiLattice + GenKill<T> + BorrowMut<BitSet<T>>,\n@@ -119,7 +122,7 @@ where\n     }\n }\n \n-impl<A, D> Engine<'a, 'tcx, A>\n+impl<'a, 'tcx, A, D> Engine<'a, 'tcx, A>\n where\n     A: Analysis<'tcx, Domain = D>,\n     D: Clone + JoinSemiLattice,\n@@ -257,7 +260,7 @@ where\n \n /// Writes a DOT file containing the results of a dataflow analysis if the user requested it via\n /// `rustc_mir` attributes.\n-fn write_graphviz_results<A>(\n+fn write_graphviz_results<'tcx, A>(\n     tcx: TyCtxt<'tcx>,\n     body: &mir::Body<'tcx>,\n     results: &Results<'tcx, A>,\n@@ -330,7 +333,7 @@ struct RustcMirAttrs {\n }\n \n impl RustcMirAttrs {\n-    fn parse(tcx: TyCtxt<'tcx>, def_id: DefId) -> Result<Self, ()> {\n+    fn parse(tcx: TyCtxt<'_>, def_id: DefId) -> Result<Self, ()> {\n         let attrs = tcx.get_attrs(def_id);\n \n         let mut result = Ok(());\n@@ -373,7 +376,7 @@ impl RustcMirAttrs {\n \n     fn set_field<T>(\n         field: &mut Option<T>,\n-        tcx: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'_>,\n         attr: &ast::NestedMetaItem,\n         mapper: impl FnOnce(Symbol) -> Result<T, ()>,\n     ) -> Result<(), ()> {"}, {"sha": "34bc157a744a7f96319275de61e1c2029da58d4f", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -36,7 +36,7 @@ where\n     style: OutputStyle,\n }\n \n-impl<A> Formatter<'a, 'tcx, A>\n+impl<'a, 'tcx, A> Formatter<'a, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n {\n@@ -52,7 +52,7 @@ pub struct CfgEdge {\n     index: usize,\n }\n \n-fn dataflow_successors(body: &Body<'tcx>, bb: BasicBlock) -> Vec<CfgEdge> {\n+fn dataflow_successors(body: &Body<'_>, bb: BasicBlock) -> Vec<CfgEdge> {\n     body[bb]\n         .terminator()\n         .successors()\n@@ -61,7 +61,7 @@ fn dataflow_successors(body: &Body<'tcx>, bb: BasicBlock) -> Vec<CfgEdge> {\n         .collect()\n }\n \n-impl<A> dot::Labeller<'_> for Formatter<'a, 'tcx, A>\n+impl<'tcx, A> dot::Labeller<'_> for Formatter<'_, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n     A::Domain: DebugWithContext<A>,\n@@ -100,7 +100,7 @@ where\n     }\n }\n \n-impl<A> dot::GraphWalk<'a> for Formatter<'a, 'tcx, A>\n+impl<'a, 'tcx, A> dot::GraphWalk<'a> for Formatter<'a, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n {\n@@ -138,7 +138,7 @@ where\n     style: OutputStyle,\n }\n \n-impl<A> BlockFormatter<'a, 'tcx, A>\n+impl<'a, 'tcx, A> BlockFormatter<'a, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n     A::Domain: DebugWithContext<A>,\n@@ -491,7 +491,7 @@ where\n     after: Vec<String>,\n }\n \n-impl<A> StateDiffCollector<'a, 'tcx, A>\n+impl<'a, 'tcx, A> StateDiffCollector<'a, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n     A::Domain: DebugWithContext<A>,\n@@ -514,7 +514,7 @@ where\n     }\n }\n \n-impl<A> ResultsVisitor<'a, 'tcx> for StateDiffCollector<'a, 'tcx, A>\n+impl<'a, 'tcx, A> ResultsVisitor<'a, 'tcx> for StateDiffCollector<'a, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n     A::Domain: DebugWithContext<A>,\n@@ -524,7 +524,7 @@ where\n     fn visit_block_start(\n         &mut self,\n         state: &Self::FlowState,\n-        _block_data: &'mir mir::BasicBlockData<'tcx>,\n+        _block_data: &mir::BasicBlockData<'tcx>,\n         _block: BasicBlock,\n     ) {\n         if A::Direction::is_forward() {\n@@ -535,7 +535,7 @@ where\n     fn visit_block_end(\n         &mut self,\n         state: &Self::FlowState,\n-        _block_data: &'mir mir::BasicBlockData<'tcx>,\n+        _block_data: &mir::BasicBlockData<'tcx>,\n         _block: BasicBlock,\n     ) {\n         if A::Direction::is_backward() {\n@@ -546,7 +546,7 @@ where\n     fn visit_statement_before_primary_effect(\n         &mut self,\n         state: &Self::FlowState,\n-        _statement: &'mir mir::Statement<'tcx>,\n+        _statement: &mir::Statement<'tcx>,\n         _location: Location,\n     ) {\n         if let Some(before) = self.before.as_mut() {\n@@ -558,7 +558,7 @@ where\n     fn visit_statement_after_primary_effect(\n         &mut self,\n         state: &Self::FlowState,\n-        _statement: &'mir mir::Statement<'tcx>,\n+        _statement: &mir::Statement<'tcx>,\n         _location: Location,\n     ) {\n         self.after.push(diff_pretty(state, &self.prev_state, self.analysis));\n@@ -568,7 +568,7 @@ where\n     fn visit_terminator_before_primary_effect(\n         &mut self,\n         state: &Self::FlowState,\n-        _terminator: &'mir mir::Terminator<'tcx>,\n+        _terminator: &mir::Terminator<'tcx>,\n         _location: Location,\n     ) {\n         if let Some(before) = self.before.as_mut() {\n@@ -580,7 +580,7 @@ where\n     fn visit_terminator_after_primary_effect(\n         &mut self,\n         state: &Self::FlowState,\n-        _terminator: &'mir mir::Terminator<'tcx>,\n+        _terminator: &mir::Terminator<'tcx>,\n         _location: Location,\n     ) {\n         self.after.push(diff_pretty(state, &self.prev_state, self.analysis));"}, {"sha": "dac6720a6e5435130a81198866f29b956403979d", "filename": "compiler/rustc_mir_dataflow/src/framework/mod.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -214,7 +214,11 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     ///     .iterate_to_fixpoint()\n     ///     .into_results_cursor(body);\n     /// ```\n-    fn into_engine(self, tcx: TyCtxt<'tcx>, body: &'mir mir::Body<'tcx>) -> Engine<'mir, 'tcx, Self>\n+    fn into_engine<'mir>(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        body: &'mir mir::Body<'tcx>,\n+    ) -> Engine<'mir, 'tcx, Self>\n     where\n         Self: Sized,\n     {\n@@ -296,7 +300,7 @@ pub trait GenKillAnalysis<'tcx>: Analysis<'tcx> {\n     }\n }\n \n-impl<A> Analysis<'tcx> for A\n+impl<'tcx, A> Analysis<'tcx> for A\n where\n     A: GenKillAnalysis<'tcx>,\n     A::Domain: GenKill<A::Idx> + BorrowMut<BitSet<A::Idx>>,\n@@ -368,7 +372,11 @@ where\n \n     /* Extension methods */\n \n-    fn into_engine(self, tcx: TyCtxt<'tcx>, body: &'mir mir::Body<'tcx>) -> Engine<'mir, 'tcx, Self>\n+    fn into_engine<'mir>(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        body: &'mir mir::Body<'tcx>,\n+    ) -> Engine<'mir, 'tcx, Self>\n     where\n         Self: Sized,\n     {"}, {"sha": "3cc8d30259c0e6ad2faf7d677c79569caf36a012", "filename": "compiler/rustc_mir_dataflow/src/framework/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -85,7 +85,7 @@ struct MockAnalysis<'tcx, D> {\n     dir: PhantomData<D>,\n }\n \n-impl<D: Direction> MockAnalysis<'tcx, D> {\n+impl<D: Direction> MockAnalysis<'_, D> {\n     const BASIC_BLOCK_OFFSET: usize = 100;\n \n     /// The entry set for each `BasicBlock` is the ID of that block offset by a fixed amount to\n@@ -160,7 +160,7 @@ impl<D: Direction> MockAnalysis<'tcx, D> {\n     }\n }\n \n-impl<D: Direction> AnalysisDomain<'tcx> for MockAnalysis<'tcx, D> {\n+impl<'tcx, D: Direction> AnalysisDomain<'tcx> for MockAnalysis<'tcx, D> {\n     type Domain = BitSet<usize>;\n     type Direction = D;\n \n@@ -175,7 +175,7 @@ impl<D: Direction> AnalysisDomain<'tcx> for MockAnalysis<'tcx, D> {\n     }\n }\n \n-impl<D: Direction> Analysis<'tcx> for MockAnalysis<'tcx, D> {\n+impl<'tcx, D: Direction> Analysis<'tcx> for MockAnalysis<'tcx, D> {\n     fn apply_statement_effect(\n         &self,\n         state: &mut Self::Domain,\n@@ -260,7 +260,7 @@ impl SeekTarget {\n     }\n }\n \n-fn test_cursor<D: Direction>(analysis: MockAnalysis<'tcx, D>) {\n+fn test_cursor<D: Direction>(analysis: MockAnalysis<'_, D>) {\n     let body = analysis.body;\n \n     let mut cursor ="}, {"sha": "75b4e150a8a33f8760b1c472407da542191a2d96", "filename": "compiler/rustc_mir_dataflow/src/framework/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -4,7 +4,7 @@ use super::{Analysis, Direction, Results};\n \n /// Calls the corresponding method in `ResultsVisitor` for every location in a `mir::Body` with the\n /// dataflow state at that location.\n-pub fn visit_results<F, V>(\n+pub fn visit_results<'mir, 'tcx, F, V>(\n     body: &'mir mir::Body<'tcx>,\n     blocks: impl IntoIterator<Item = BasicBlock>,\n     results: &V,"}, {"sha": "bb9755e4f48ddb61bb2eea398d24447e2c510afb", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -45,7 +45,7 @@ impl MaybeBorrowedLocals {\n     }\n }\n \n-impl AnalysisDomain<'tcx> for MaybeBorrowedLocals {\n+impl<'tcx> AnalysisDomain<'tcx> for MaybeBorrowedLocals {\n     type Domain = BitSet<Local>;\n     const NAME: &'static str = \"maybe_borrowed_locals\";\n \n@@ -59,7 +59,7 @@ impl AnalysisDomain<'tcx> for MaybeBorrowedLocals {\n     }\n }\n \n-impl GenKillAnalysis<'tcx> for MaybeBorrowedLocals {\n+impl<'tcx> GenKillAnalysis<'tcx> for MaybeBorrowedLocals {\n     type Idx = Local;\n \n     fn statement_effect(\n@@ -95,7 +95,7 @@ struct TransferFunction<'a, T> {\n     ignore_borrow_on_drop: bool,\n }\n \n-impl<T> Visitor<'tcx> for TransferFunction<'a, T>\n+impl<'tcx, T> Visitor<'tcx> for TransferFunction<'_, T>\n where\n     T: GenKill<Local>,\n {"}, {"sha": "b355871d64f6f16ef0e4ecda358944ef20d64fb6", "filename": "compiler/rustc_mir_dataflow/src/impls/init_locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::{self, BasicBlock, Local, Location};\n \n pub struct MaybeInitializedLocals;\n \n-impl crate::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n+impl<'tcx> crate::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n     type Domain = BitSet<Local>;\n \n     const NAME: &'static str = \"maybe_init_locals\";\n@@ -28,7 +28,7 @@ impl crate::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n     }\n }\n \n-impl crate::GenKillAnalysis<'tcx> for MaybeInitializedLocals {\n+impl<'tcx> crate::GenKillAnalysis<'tcx> for MaybeInitializedLocals {\n     type Idx = Local;\n \n     fn statement_effect(\n@@ -73,7 +73,7 @@ struct TransferFunction<'a, T> {\n     trans: &'a mut T,\n }\n \n-impl<T> Visitor<'tcx> for TransferFunction<'a, T>\n+impl<T> Visitor<'_> for TransferFunction<'_, T>\n where\n     T: GenKill<Local>,\n {"}, {"sha": "65c388f8124a3cd25d6801c959aec590c572d9af", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -48,12 +48,12 @@ use crate::{AnalysisDomain, Backward, CallReturnPlaces, GenKill, GenKillAnalysis\n pub struct MaybeLiveLocals;\n \n impl MaybeLiveLocals {\n-    fn transfer_function<T>(&self, trans: &'a mut T) -> TransferFunction<'a, T> {\n+    fn transfer_function<'a, T>(&self, trans: &'a mut T) -> TransferFunction<'a, T> {\n         TransferFunction(trans)\n     }\n }\n \n-impl AnalysisDomain<'tcx> for MaybeLiveLocals {\n+impl<'tcx> AnalysisDomain<'tcx> for MaybeLiveLocals {\n     type Domain = BitSet<Local>;\n     type Direction = Backward;\n \n@@ -69,7 +69,7 @@ impl AnalysisDomain<'tcx> for MaybeLiveLocals {\n     }\n }\n \n-impl GenKillAnalysis<'tcx> for MaybeLiveLocals {\n+impl<'tcx> GenKillAnalysis<'tcx> for MaybeLiveLocals {\n     type Idx = Local;\n \n     fn statement_effect("}, {"sha": "5dc8a003b47783f864df864fbb4d1126e6075d90", "filename": "compiler/rustc_mir_dataflow/src/impls/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -704,7 +704,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for EverInitializedPlaces<'_, 'tcx> {\n ///\n /// If the basic block matches this pattern, this function returns the place corresponding to the\n /// enum (`_1` in the example above) as well as the `AdtDef` of that enum.\n-fn switch_on_enum_discriminant(\n+fn switch_on_enum_discriminant<'mir, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &'mir mir::Body<'tcx>,\n     block: &'mir mir::BasicBlockData<'tcx>,"}, {"sha": "896377f2bc30714064280ef855b130117f7c44b5", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -17,7 +17,7 @@ impl MaybeStorageLive {\n     }\n }\n \n-impl crate::AnalysisDomain<'tcx> for MaybeStorageLive {\n+impl<'tcx> crate::AnalysisDomain<'tcx> for MaybeStorageLive {\n     type Domain = BitSet<Local>;\n \n     const NAME: &'static str = \"maybe_storage_live\";\n@@ -39,7 +39,7 @@ impl crate::AnalysisDomain<'tcx> for MaybeStorageLive {\n     }\n }\n \n-impl crate::GenKillAnalysis<'tcx> for MaybeStorageLive {\n+impl<'tcx> crate::GenKillAnalysis<'tcx> for MaybeStorageLive {\n     type Idx = Local;\n \n     fn statement_effect("}, {"sha": "6c2d1b85646b171aabed143b2bc88b52e0c588ba", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -3,7 +3,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(exact_size_is_empty)]\n-#![feature(in_band_lifetimes)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(once_cell)]"}, {"sha": "218d4557215fbf4bb806c4ac417a568e6e224ce1", "filename": "compiler/rustc_mir_dataflow/src/storage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::mir::{self, Local};\n pub struct AlwaysLiveLocals(BitSet<Local>);\n \n impl AlwaysLiveLocals {\n-    pub fn new(body: &mir::Body<'tcx>) -> Self {\n+    pub fn new(body: &mir::Body<'_>) -> Self {\n         let mut always_live_locals = AlwaysLiveLocals(BitSet::new_filled(body.local_decls.len()));\n \n         for block in body.basic_blocks() {"}, {"sha": "38ad8283f4df0b94dd36d9bb0036229dd24b6379", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -58,7 +58,7 @@ struct CheckAttrVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl CheckAttrVisitor<'tcx> {\n+impl CheckAttrVisitor<'_> {\n     /// Checks any attribute.\n     fn check_attributes(\n         &self,\n@@ -382,7 +382,7 @@ impl CheckAttrVisitor<'tcx> {\n         &self,\n         hir_id: HirId,\n         attr_span: &Span,\n-        attrs: &'hir [Attribute],\n+        attrs: &[Attribute],\n         span: &Span,\n         target: Target,\n     ) -> bool {\n@@ -1481,7 +1481,7 @@ impl CheckAttrVisitor<'tcx> {\n     /// Checks if the `#[repr]` attributes on `item` are valid.\n     fn check_repr(\n         &self,\n-        attrs: &'hir [Attribute],\n+        attrs: &[Attribute],\n         span: &Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n@@ -1663,7 +1663,7 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n-    fn check_used(&self, attrs: &'hir [Attribute], target: Target) {\n+    fn check_used(&self, attrs: &[Attribute], target: Target) {\n         for attr in attrs {\n             if attr.has_name(sym::used) && target != Target::Static {\n                 self.tcx\n@@ -1842,7 +1842,7 @@ impl CheckAttrVisitor<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "a5a65740707e65c94aa13332bfbe62b754c1ce2f", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> CheckConstTraitVisitor<'tcx> {\n impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<'tcx> {\n     /// check for const trait impls, and errors if the impl uses provided/default functions\n     /// of the trait being implemented; as those provided functions can be non-const.\n-    fn visit_item(&mut self, item: &'hir hir::Item<'hir>) {\n+    fn visit_item<'hir>(&mut self, item: &'hir hir::Item<'hir>) {\n         let _: Option<_> = try {\n             if let hir::ItemKind::Impl(ref imp) = item.kind {\n                 if let hir::Constness::Const = imp.constness {\n@@ -134,11 +134,11 @@ impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<\n         };\n     }\n \n-    fn visit_trait_item(&mut self, _: &'hir hir::TraitItem<'hir>) {}\n+    fn visit_trait_item<'hir>(&mut self, _: &'hir hir::TraitItem<'hir>) {}\n \n-    fn visit_impl_item(&mut self, _: &'hir hir::ImplItem<'hir>) {}\n+    fn visit_impl_item<'hir>(&mut self, _: &'hir hir::ImplItem<'hir>) {}\n \n-    fn visit_foreign_item(&mut self, _: &'hir hir::ForeignItem<'hir>) {}\n+    fn visit_foreign_item<'hir>(&mut self, _: &'hir hir::ForeignItem<'hir>) {}\n }\n \n #[derive(Copy, Clone)]"}, {"sha": "3b15332c678fdd9e4101a60c6560de47d8fff262", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -150,7 +150,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n \n     #[allow(dead_code)] // FIXME(81658): should be used + lint reinstated after #83171 relands.\n     fn check_for_self_assign(&mut self, assign: &'tcx hir::Expr<'tcx>) {\n-        fn check_for_self_assign_helper(\n+        fn check_for_self_assign_helper<'tcx>(\n             tcx: TyCtxt<'tcx>,\n             typeck_results: &'tcx ty::TypeckResults<'tcx>,\n             lhs: &'tcx hir::Expr<'tcx>,\n@@ -600,7 +600,7 @@ struct DeadVisitor<'tcx> {\n     live_symbols: FxHashSet<LocalDefId>,\n }\n \n-impl DeadVisitor<'tcx> {\n+impl<'tcx> DeadVisitor<'tcx> {\n     fn should_warn_about_item(&mut self, item: &hir::Item<'_>) -> bool {\n         let should_warn = matches!(\n             item.kind,\n@@ -672,7 +672,7 @@ impl DeadVisitor<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for DeadVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n     /// Walk nested items in place so that we don't report dead-code"}, {"sha": "064c46966284254e8de0ecb9f2e36e8d443dcd71", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -62,7 +62,7 @@ fn unpack_option_like<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n     ty\n }\n \n-impl ExprVisitor<'tcx> {\n+impl<'tcx> ExprVisitor<'tcx> {\n     fn def_id_is_transmute(&self, def_id: DefId) -> bool {\n         self.tcx.fn_sig(def_id).abi() == RustIntrinsic\n             && self.tcx.item_name(def_id) == sym::transmute\n@@ -487,7 +487,7 @@ impl ExprVisitor<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for ItemVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for ItemVisitor<'tcx> {\n     type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -504,7 +504,7 @@ impl Visitor<'tcx> for ItemVisitor<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for ExprVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for ExprVisitor<'tcx> {\n     type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "a808d6c8348a7da0941ba2201b0d49f398d53a85", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -28,7 +28,7 @@ struct LanguageItemCollector<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n+impl<'v, 'tcx> ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n         self.check_for_lang(Target::from_item(item), item.hir_id());\n \n@@ -50,7 +50,7 @@ impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n     fn visit_foreign_item(&mut self, _: &hir::ForeignItem<'_>) {}\n }\n \n-impl LanguageItemCollector<'tcx> {\n+impl<'tcx> LanguageItemCollector<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> LanguageItemCollector<'tcx> {\n         LanguageItemCollector { tcx, items: LanguageItems::new() }\n     }"}, {"sha": "00e8eb5eb2b380d5b7b69fb5517e8fd7e63803eb", "filename": "compiler/rustc_passes/src/layout_test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -20,7 +20,7 @@ struct LayoutTest<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl ItemLikeVisitor<'tcx> for LayoutTest<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for LayoutTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         match item.kind {\n             ItemKind::TyAlias(..)\n@@ -42,7 +42,7 @@ impl ItemLikeVisitor<'tcx> for LayoutTest<'tcx> {\n     fn visit_foreign_item(&mut self, _: &'tcx hir::ForeignItem<'tcx>) {}\n }\n \n-impl LayoutTest<'tcx> {\n+impl<'tcx> LayoutTest<'tcx> {\n     fn dump_layout_of(&self, item_def_id: LocalDefId, item: &hir::Item<'tcx>, attr: &Attribute) {\n         let tcx = self.tcx;\n         let param_env = self.tcx.param_env(item_def_id);\n@@ -114,7 +114,7 @@ struct UnwrapLayoutCx<'tcx> {\n     param_env: ParamEnv<'tcx>,\n }\n \n-impl LayoutOfHelpers<'tcx> for UnwrapLayoutCx<'tcx> {\n+impl<'tcx> LayoutOfHelpers<'tcx> for UnwrapLayoutCx<'tcx> {\n     type LayoutOfResult = TyAndLayout<'tcx>;\n \n     fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n@@ -127,19 +127,19 @@ impl LayoutOfHelpers<'tcx> for UnwrapLayoutCx<'tcx> {\n     }\n }\n \n-impl HasTyCtxt<'tcx> for UnwrapLayoutCx<'tcx> {\n+impl<'tcx> HasTyCtxt<'tcx> for UnwrapLayoutCx<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n }\n \n-impl HasParamEnv<'tcx> for UnwrapLayoutCx<'tcx> {\n+impl<'tcx> HasParamEnv<'tcx> for UnwrapLayoutCx<'tcx> {\n     fn param_env(&self) -> ParamEnv<'tcx> {\n         self.param_env\n     }\n }\n \n-impl HasDataLayout for UnwrapLayoutCx<'tcx> {\n+impl<'tcx> HasDataLayout for UnwrapLayoutCx<'tcx> {\n     fn data_layout(&self) -> &TargetDataLayout {\n         self.tcx.data_layout()\n     }"}, {"sha": "8a411f01d6ee2317c8cc086f4f0296c68be25dd6", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -6,7 +6,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(crate_visibility_modifier)]\n-#![feature(in_band_lifetimes)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(nll)]"}, {"sha": "55ae808dc3089c43e1222c2b40e92cb747ae911f", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -23,7 +23,7 @@ pub struct LibFeatureCollector<'tcx> {\n     lib_features: LibFeatures,\n }\n \n-impl LibFeatureCollector<'tcx> {\n+impl<'tcx> LibFeatureCollector<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> LibFeatureCollector<'tcx> {\n         LibFeatureCollector { tcx, lib_features: new_lib_features() }\n     }\n@@ -110,7 +110,7 @@ impl LibFeatureCollector<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n+impl<'tcx> Visitor<'tcx> for LibFeatureCollector<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "3ee104316795a0d8a77088ef074643a29a4b5cfa", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -198,7 +198,7 @@ struct IrMaps<'tcx> {\n     lnks: IndexVec<LiveNode, LiveNodeKind>,\n }\n \n-impl IrMaps<'tcx> {\n+impl<'tcx> IrMaps<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> IrMaps<'tcx> {\n         IrMaps {\n             tcx,"}, {"sha": "07cb165d79670ee4dc2c75ee1e2d8788405bcd38", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -37,7 +37,7 @@ impl<'tcx> Visitor<'tcx> for CheckNakedFunctions<'tcx> {\n \n     fn visit_fn(\n         &mut self,\n-        fk: FnKind<'v>,\n+        fk: FnKind<'_>,\n         _fd: &'tcx hir::FnDecl<'tcx>,\n         body_id: hir::BodyId,\n         span: Span,"}, {"sha": "707e6b123daa2ea69c78ee7c7f4d67575dae4103", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -22,7 +22,7 @@ use rustc_target::spec::abi::Abi;\n // Returns true if the given item must be inlined because it may be\n // monomorphized or it was marked with `#[inline]`. This will only return\n // true for functions.\n-fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>, attrs: &CodegenFnAttrs) -> bool {\n+fn item_might_be_inlined(tcx: TyCtxt<'_>, item: &hir::Item<'_>, attrs: &CodegenFnAttrs) -> bool {\n     if attrs.requests_inline() {\n         return true;\n     }"}, {"sha": "5f19991f9c78b1f034d4e1eb05edf63be1618c66", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -655,7 +655,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     // stable (assuming they have not inherited instability from their parent).\n }\n \n-fn stability_index(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n+fn stability_index<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n     let is_staged_api =\n         tcx.sess.opts.debugging_opts.force_unstable_if_unmarked || tcx.features().staged_api;\n     let mut staged_api = FxHashMap::default();\n@@ -737,7 +737,7 @@ struct Checker<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl Visitor<'tcx> for Checker<'tcx> {\n+impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n     type Map = Map<'tcx>;\n \n     /// Because stability levels are scoped lexically, we want to walk\n@@ -866,7 +866,7 @@ struct CheckTraitImplStable<'tcx> {\n     fully_stable: bool,\n }\n \n-impl Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n+impl<'tcx> Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "2d84c8caada80a0ac178f3bb3c0e7325976e6c0c", "filename": "compiler/rustc_passes/src/upvars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -42,7 +42,7 @@ struct LocalCollector {\n     locals: FxHashSet<HirId>,\n }\n \n-impl Visitor<'tcx> for LocalCollector {\n+impl<'tcx> Visitor<'tcx> for LocalCollector {\n     type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -71,7 +71,7 @@ impl CaptureCollector<'_, '_> {\n     }\n }\n \n-impl Visitor<'tcx> for CaptureCollector<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for CaptureCollector<'_, 'tcx> {\n     type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "deed9901cc9e4595919ba893927d7c34820616a8", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -215,6 +215,7 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[default_method_body_is_const]\n     fn ne(&self, other: &Rhs) -> bool {\n         !self.eq(other)\n     }\n@@ -1031,6 +1032,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[default_method_body_is_const]\n     fn lt(&self, other: &Rhs) -> bool {\n         matches!(self.partial_cmp(other), Some(Less))\n     }\n@@ -1050,6 +1052,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[default_method_body_is_const]\n     fn le(&self, other: &Rhs) -> bool {\n         // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.\n         // FIXME: The root cause was fixed upstream in LLVM with:\n@@ -1072,6 +1075,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[default_method_body_is_const]\n     fn gt(&self, other: &Rhs) -> bool {\n         matches!(self.partial_cmp(other), Some(Greater))\n     }\n@@ -1091,6 +1095,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[default_method_body_is_const]\n     fn ge(&self, other: &Rhs) -> bool {\n         matches!(self.partial_cmp(other), Some(Greater | Equal))\n     }"}, {"sha": "58fee19ca7490d3e2251fe3e8ad40a101bcac1f0", "filename": "library/core/tests/cmp.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fcore%2Ftests%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fcore%2Ftests%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcmp.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -203,3 +203,36 @@ fn cmp_default() {\n     assert!(Fool(false) != Fool(false));\n     assert_eq!(Fool(false), Fool(true));\n }\n+\n+#[cfg(not(bootstrap))]\n+mod const_cmp {\n+    use super::*;\n+\n+    struct S(i32);\n+\n+    impl const PartialEq for S {\n+        fn eq(&self, other: &Self) -> bool {\n+            self.0 == other.0\n+        }\n+    }\n+\n+    impl const PartialOrd for S {\n+        fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+            let ret = match (self.0, other.0) {\n+                (a, b) if a > b => Ordering::Greater,\n+                (a, b) if a < b => Ordering::Less,\n+                _ => Ordering::Equal,\n+            };\n+\n+            Some(ret)\n+        }\n+    }\n+\n+    const _: () = assert!(S(1) == S(1));\n+    const _: () = assert!(S(0) != S(1));\n+\n+    const _: () = assert!(S(1) <= S(1));\n+    const _: () = assert!(S(1) >= S(1));\n+    const _: () = assert!(S(0) < S(1));\n+    const _: () = assert!(S(1) > S(0));\n+}"}, {"sha": "232ccdf39d456eb7a0be916fb7c976a7676b0e70", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -4,7 +4,7 @@ version = \"0.0.0\"\n license = \"MIT OR Apache-2.0\"\n repository = \"https://github.com/rust-lang/rust.git\"\n description = \"The Rust Standard Library\"\n-edition = \"2018\"\n+edition = \"2021\"\n \n [lib]\n crate-type = [\"dylib\", \"rlib\"]"}, {"sha": "749d51d4981c3027eeb07fdf01d16d6bef6baf4d", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -38,10 +38,9 @@ macro_rules! error {\n     ($e:expr, $s:expr) => {\n         match $e {\n             Ok(_) => panic!(\"Unexpected success. Should've been: {:?}\", $s),\n-            Err(ref err) => assert!(\n-                err.raw_os_error() == Some($s),\n-                format!(\"`{}` did not have a code of `{}`\", err, $s)\n-            ),\n+            Err(ref err) => {\n+                assert!(err.raw_os_error() == Some($s), \"`{}` did not have a code of `{}`\", err, $s)\n+            }\n         }\n     };\n }\n@@ -58,7 +57,7 @@ macro_rules! error_contains {\n         match $e {\n             Ok(_) => panic!(\"Unexpected success. Should've been: {:?}\", $s),\n             Err(ref err) => {\n-                assert!(err.to_string().contains($s), format!(\"`{}` did not contain `{}`\", err, $s))\n+                assert!(err.to_string().contains($s), \"`{}` did not contain `{}`\", err, $s)\n             }\n         }\n     };"}, {"sha": "6e6f5212b4651d934290ffbb4f07216b214be378", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 2, "deletions": 80, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -16,8 +16,6 @@ mod libc {\n     pub use libc::c_int;\n     pub struct ucred;\n     pub struct cmsghdr;\n-    #[cfg(target_os = \"dragonfly\")]\n-    pub struct cmsgcred;\n     pub type pid_t = i32;\n     pub type gid_t = u32;\n     pub type uid_t = u32;\n@@ -185,11 +183,6 @@ impl<'a, T> Iterator for AncillaryDataIter<'a, T> {\n #[derive(Clone)]\n pub struct SocketCred(libc::ucred);\n \n-#[cfg(target_os = \"dragonfly\")]\n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-#[derive(Clone)]\n-pub struct SocketCred(libc::cmsgcred);\n-\n #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n impl SocketCred {\n     /// Create a Unix credential struct.\n@@ -241,57 +234,6 @@ impl SocketCred {\n     }\n }\n \n-#[cfg(target_os = \"dragonfly\")]\n-impl SocketCred {\n-    /// Create a Unix credential struct.\n-    ///\n-    /// PID, UID and GID is set to 0.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    #[must_use]\n-    pub fn new() -> SocketCred {\n-        SocketCred(libc::cmsgcred { cmsgcred_pid: 0, cmsgcred_uid: 0, cmsgcred_gid: 0 })\n-    }\n-\n-    /// Set the PID.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    pub fn set_pid(&mut self, pid: libc::pid_t) {\n-        self.0.cmsgcred_pid = pid;\n-    }\n-\n-    /// Get the current PID.\n-    #[must_use]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    pub fn get_pid(&self) -> libc::pid_t {\n-        self.0.cmsgcred_pid\n-    }\n-\n-    /// Set the UID.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    pub fn set_uid(&mut self, uid: libc::uid_t) {\n-        self.0.cmsgcred_uid = uid;\n-    }\n-\n-    /// Get the current UID.\n-    #[must_use]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    pub fn get_uid(&self) -> libc::uid_t {\n-        self.0.cmsgcred_uid\n-    }\n-\n-    /// Set the GID.\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    pub fn set_gid(&mut self, gid: libc::gid_t) {\n-        self.0.cmsgcred_gid = gid;\n-    }\n-\n-    /// Get the current GID.\n-    #[must_use]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    pub fn get_gid(&self) -> libc::gid_t {\n-        self.0.cmsgcred_gid\n-    }\n-}\n-\n /// This control message contains file descriptors.\n ///\n /// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_RIGHTS`.\n@@ -314,11 +256,7 @@ impl<'a> Iterator for ScmRights<'a> {\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::ucred>);\n \n-#[cfg(target_os = \"dragonfly\")]\n-#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::cmsgcred>);\n-\n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n impl<'a> Iterator for ScmCredentials<'a> {\n     type Item = SocketCred;\n@@ -362,7 +300,7 @@ impl<'a> AncillaryData<'a> {\n     /// # Safety\n     ///\n     /// `data` must contain a valid control message and the control message must be type of\n-    /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDS`.\n+    /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDENTIALS`.\n     #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n     unsafe fn as_credentials(data: &'a [u8]) -> Self {\n         let ancillary_data_iter = AncillaryDataIter::new(data);\n@@ -382,9 +320,6 @@ impl<'a> AncillaryData<'a> {\n                     libc::SCM_RIGHTS => Ok(AncillaryData::as_rights(data)),\n                     #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n                     libc::SCM_CREDENTIALS => Ok(AncillaryData::as_credentials(data)),\n-                    #[cfg(target_os = \"dragonfly\")]\n-                    libc::SCM_CREDS => Ok(AncillaryData::as_credentials(data)),\n-\n                     cmsg_type => {\n                         Err(AncillaryError::Unknown { cmsg_level: libc::SOL_SOCKET, cmsg_type })\n                     }\n@@ -609,19 +544,6 @@ impl<'a> SocketAncillary<'a> {\n         )\n     }\n \n-    #[cfg(target_os = \"dragonfly\")]\n-    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n-    pub fn add_creds(&mut self, creds: &[SocketCred]) -> bool {\n-        self.truncated = false;\n-        add_to_ancillary_data(\n-            &mut self.buffer,\n-            &mut self.length,\n-            creds,\n-            libc::SOL_SOCKET,\n-            libc::SCM_CREDS,\n-        )\n-    }\n-\n     /// Clears the ancillary data, removing all values.\n     ///\n     /// # Example"}, {"sha": "a2caccc7849170f5ae3e8f68bea8ee2fb1b7ade3", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -854,14 +854,8 @@ impl UnixDatagram {\n     ///\n     /// # Examples\n     ///\n-    #[cfg_attr(\n-        any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\"),\n-        doc = \"```no_run\"\n-    )]\n-    #[cfg_attr(\n-        not(any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\")),\n-        doc = \"```ignore\"\n-    )]\n+    #[cfg_attr(any(target_os = \"android\", target_os = \"linux\"), doc = \"```no_run\")]\n+    #[cfg_attr(not(any(target_os = \"android\", target_os = \"linux\")), doc = \"```ignore\")]\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n@@ -871,7 +865,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         self.0.set_passcred(passcred)\n@@ -883,7 +877,7 @@ impl UnixDatagram {\n     /// Get the socket option `SO_PASSCRED`.\n     ///\n     /// [`set_passcred`]: UnixDatagram::set_passcred\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn passcred(&self) -> io::Result<bool> {\n         self.0.passcred()"}, {"sha": "e012594dd4648e45a278bb3dda231da1a939aac4", "filename": "library/std/src/process.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -1600,7 +1600,6 @@ impl ExitStatusError {\n     /// ```\n     /// #![feature(exit_status_error)]\n     /// # if cfg!(unix) {\n-    /// use std::convert::TryFrom;\n     /// use std::num::NonZeroI32;\n     /// use std::process::Command;\n     ///"}, {"sha": "a82a0172126d4fa51066b4b5313712cb61ffe812", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -408,12 +408,12 @@ impl Socket {\n         Ok(raw != 0)\n     }\n \n-    #[cfg(any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n+    #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         setsockopt(self, libc::SOL_SOCKET, libc::SO_PASSCRED, passcred as libc::c_int)\n     }\n \n-    #[cfg(any(target_os = \"android\", target_os = \"linux\", target_os = \"dragonfly\",))]\n+    #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n     pub fn passcred(&self) -> io::Result<bool> {\n         let passcred: libc::c_int = getsockopt(self, libc::SOL_SOCKET, libc::SO_PASSCRED)?;\n         Ok(passcred != 0)"}, {"sha": "4f2c81731a335fd3c163bc849adb1dc1e2e21e80", "filename": "library/std/src/thread/tests.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -1,6 +1,7 @@\n use super::Builder;\n use crate::any::Any;\n use crate::mem;\n+use crate::panic::panic_any;\n use crate::result;\n use crate::sync::{\n     mpsc::{channel, Sender},\n@@ -183,7 +184,7 @@ fn test_simple_newsched_spawn() {\n }\n \n #[test]\n-fn test_try_panic_message_static_str() {\n+fn test_try_panic_message_string_literal() {\n     match thread::spawn(move || {\n         panic!(\"static string\");\n     })\n@@ -199,9 +200,9 @@ fn test_try_panic_message_static_str() {\n }\n \n #[test]\n-fn test_try_panic_message_owned_str() {\n+fn test_try_panic_any_message_owned_str() {\n     match thread::spawn(move || {\n-        panic!(\"owned string\".to_string());\n+        panic_any(\"owned string\".to_string());\n     })\n     .join()\n     {\n@@ -215,9 +216,9 @@ fn test_try_panic_message_owned_str() {\n }\n \n #[test]\n-fn test_try_panic_message_any() {\n+fn test_try_panic_any_message_any() {\n     match thread::spawn(move || {\n-        panic!(box 413u16 as Box<dyn Any + Send>);\n+        panic_any(box 413u16 as Box<dyn Any + Send>);\n     })\n     .join()\n     {\n@@ -233,10 +234,10 @@ fn test_try_panic_message_any() {\n }\n \n #[test]\n-fn test_try_panic_message_unit_struct() {\n+fn test_try_panic_any_message_unit_struct() {\n     struct Juju;\n \n-    match thread::spawn(move || panic!(Juju)).join() {\n+    match thread::spawn(move || panic_any(Juju)).join() {\n         Err(ref e) if e.is::<Juju>() => {}\n         Err(_) | Ok(()) => panic!(),\n     }"}, {"sha": "154b149b72073f58925e624d84df03c3c1b8e1c6", "filename": "src/test/ui/did_you_mean/issue-38147-2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -1,11 +1,16 @@\n struct Bar<'a> {\n-    s: &'a String\n+    s: &'a String,\n+    // use wonky spaces to ensure we are creating the span correctly\n+    longer_name:   &   'a     Vec<u8>\n }\n \n impl<'a> Bar<'a> {\n     fn f(&mut self) {\n         self.s.push('x');\n         //~^ ERROR cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n+\n+        self.longer_name.push(13);\n+        //~^ ERROR cannot borrow `*self.longer_name` as mutable, as it is behind a `&` reference\n     }\n }\n "}, {"sha": "7c287a7dbfa0d0e9893c9653bbd416e9fd2516c1", "filename": "src/test/ui/did_you_mean/issue-38147-2.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -1,12 +1,25 @@\n error[E0596]: cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n-  --> $DIR/issue-38147-2.rs:7:9\n+  --> $DIR/issue-38147-2.rs:9:9\n    |\n-LL |     s: &'a String\n-   |        ---------- help: consider changing this to be mutable: `&'a mut String`\n-...\n LL |         self.s.push('x');\n    |         ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     s: &'a mut String,\n+   |            +++\n+\n+error[E0596]: cannot borrow `*self.longer_name` as mutable, as it is behind a `&` reference\n+  --> $DIR/issue-38147-2.rs:12:9\n+   |\n+LL |         self.longer_name.push(13);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     longer_name:   &   'a mut Vec<u8>\n+   |                           +++\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "94ffe17f101161e1492422db59dca58cf20debe8", "filename": "src/test/ui/did_you_mean/issue-38147-3.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -1,11 +1,13 @@\n error[E0596]: cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-38147-3.rs:7:9\n    |\n-LL |     s: &'a String\n-   |        ---------- help: consider changing this to be mutable: `&'a mut String`\n-...\n LL |         self.s.push('x');\n    |         ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     s: &'a mut String\n+   |            +++\n \n error: aborting due to previous error\n "}, {"sha": "db2a7087b994e20f264f26ad6db75184282ad120", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -1 +1 @@\n-Subproject commit 7d6fcbc0be2151bfa85ec146545b42d8be2fb28c\n+Subproject commit db2a7087b994e20f264f26ad6db75184282ad120"}, {"sha": "f610dbd806aea658bdd6d429ce612702f90c2b2c", "filename": "src/tools/tidy/src/edition.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3f300477b89e70dd42379ba53c0e8ff74e9c694/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3f300477b89e70dd42379ba53c0e8ff74e9c694/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fedition.rs?ref=d3f300477b89e70dd42379ba53c0e8ff74e9c694", "patch": "@@ -23,8 +23,10 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 return;\n             }\n \n-            // Library crates are not yet ready to migrate to 2021.\n-            if path.components().any(|c| c.as_os_str() == \"library\") {\n+            // Not all library crates are ready to migrate to 2021.\n+            if file.components().any(|c| c.as_os_str() == \"library\")\n+                && file.components().all(|c| c.as_os_str() != \"std\")\n+            {\n                 let has = contents.lines().any(is_edition_2018);\n                 if !has {\n                     tidy_error!("}]}