{"sha": "aca14c591fea40b2f803bbf5f02c1571732348fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYTE0YzU5MWZlYTQwYjJmODAzYmJmNWYwMmMxNTcxNzMyMzQ4ZmI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-10T13:07:19Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-10T13:07:19Z"}, "message": "Merge #475\n\n475: Show types of fields in completion r=matklad a=matklad\n\n![image](https://user-images.githubusercontent.com/1711539/50910524-0f146200-143f-11e9-84d6-0ba80761cd89.png)\r\n\r\nr? @flodiebold \r\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "432f3cac863a499fe573cd747a2f7ca2d65b70c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/432f3cac863a499fe573cd747a2f7ca2d65b70c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aca14c591fea40b2f803bbf5f02c1571732348fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aca14c591fea40b2f803bbf5f02c1571732348fb", "html_url": "https://github.com/rust-lang/rust/commit/aca14c591fea40b2f803bbf5f02c1571732348fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aca14c591fea40b2f803bbf5f02c1571732348fb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "aef93c918e2b6e0b8826e970b00c46f8a5c3aaa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/aef93c918e2b6e0b8826e970b00c46f8a5c3aaa9", "html_url": "https://github.com/rust-lang/rust/commit/aef93c918e2b6e0b8826e970b00c46f8a5c3aaa9"}, {"sha": "56b2138d82620db946fe08ddc164c5e7e22be625", "url": "https://api.github.com/repos/rust-lang/rust/commits/56b2138d82620db946fe08ddc164c5e7e22be625", "html_url": "https://github.com/rust-lang/rust/commit/56b2138d82620db946fe08ddc164c5e7e22be625"}], "stats": {"total": 158, "additions": 99, "deletions": 59}, "files": [{"sha": "d30390f25bfc01dcbfdf64de25f76770ba4b8fb2", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 52, "deletions": 3, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/aca14c591fea40b2f803bbf5f02c1571732348fb/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca14c591fea40b2f803bbf5f02c1571732348fb/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=aca14c591fea40b2f803bbf5f02c1571732348fb", "patch": "@@ -4,14 +4,18 @@ use ra_db::Cancelable;\n use ra_syntax::ast::{self, NameOwner, StructFlavor, AstNode};\n \n use crate::{\n-    DefId, Name, AsName, Struct, Enum, VariantData, StructField, HirDatabase, DefKind,\n+    DefId, Name, AsName, Struct, Enum, HirDatabase, DefKind,\n     type_ref::TypeRef,\n };\n \n impl Struct {\n     pub(crate) fn new(def_id: DefId) -> Self {\n         Struct { def_id }\n     }\n+\n+    pub(crate) fn variant_data(&self, db: &impl HirDatabase) -> Cancelable<Arc<VariantData>> {\n+        Ok(db.struct_data(self.def_id)?.variant_data.clone())\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -83,6 +87,51 @@ impl EnumData {\n     }\n }\n \n+/// A single field of an enum variant or struct\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct StructField {\n+    pub(crate) name: Name,\n+    pub(crate) type_ref: TypeRef,\n+}\n+\n+/// Fields of an enum variant or struct\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum VariantData {\n+    Struct(Vec<StructField>),\n+    Tuple(Vec<StructField>),\n+    Unit,\n+}\n+\n+impl VariantData {\n+    pub fn fields(&self) -> &[StructField] {\n+        match self {\n+            VariantData::Struct(fields) | VariantData::Tuple(fields) => fields,\n+            _ => &[],\n+        }\n+    }\n+\n+    pub fn is_struct(&self) -> bool {\n+        match self {\n+            VariantData::Struct(..) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn is_tuple(&self) -> bool {\n+        match self {\n+            VariantData::Tuple(..) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn is_unit(&self) -> bool {\n+        match self {\n+            VariantData::Unit => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n impl VariantData {\n     fn new(flavor: StructFlavor) -> Self {\n         match flavor {\n@@ -114,7 +163,7 @@ impl VariantData {\n     pub(crate) fn get_field_type_ref(&self, field_name: &Name) -> Option<&TypeRef> {\n         self.fields()\n             .iter()\n-            .find(|f| f.name() == field_name)\n-            .map(|f| f.type_ref())\n+            .find(|f| f.name == *field_name)\n+            .map(|f| &f.type_ref)\n     }\n }"}, {"sha": "fa3e4baa7d2ba23c0dbe3beec5420c379a480434", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 19, "deletions": 48, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/aca14c591fea40b2f803bbf5f02c1571732348fb/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca14c591fea40b2f803bbf5f02c1571732348fb/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=aca14c591fea40b2f803bbf5f02c1571732348fb", "patch": "@@ -5,12 +5,13 @@ use ra_db::{CrateId, Cancelable, FileId};\n use ra_syntax::{ast, TreePtr, SyntaxNode};\n \n use crate::{\n-    Name, DefId, Path, PerNs, ScopesWithSyntaxMapping,\n+    Name, DefId, Path, PerNs, ScopesWithSyntaxMapping, Ty,\n     type_ref::TypeRef,\n     nameres::ModuleScope,\n     db::HirDatabase,\n     expr::BodySyntaxMapping,\n     ty::InferenceResult,\n+    adt::VariantData,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -137,58 +138,18 @@ impl Module {\n     }\n }\n \n-/// A single field of an enum variant or struct\n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct StructField {\n-    pub(crate) name: Name,\n-    pub(crate) type_ref: TypeRef,\n+    struct_: Struct,\n+    name: Name,\n }\n \n impl StructField {\n     pub fn name(&self) -> &Name {\n         &self.name\n     }\n-\n-    pub fn type_ref(&self) -> &TypeRef {\n-        &self.type_ref\n-    }\n-}\n-\n-/// Fields of an enum variant or struct\n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub enum VariantData {\n-    Struct(Vec<StructField>),\n-    Tuple(Vec<StructField>),\n-    Unit,\n-}\n-\n-impl VariantData {\n-    pub fn fields(&self) -> &[StructField] {\n-        match self {\n-            VariantData::Struct(fields) | VariantData::Tuple(fields) => fields,\n-            _ => &[],\n-        }\n-    }\n-\n-    pub fn is_struct(&self) -> bool {\n-        match self {\n-            VariantData::Struct(..) => true,\n-            _ => false,\n-        }\n-    }\n-\n-    pub fn is_tuple(&self) -> bool {\n-        match self {\n-            VariantData::Tuple(..) => true,\n-            _ => false,\n-        }\n-    }\n-\n-    pub fn is_unit(&self) -> bool {\n-        match self {\n-            VariantData::Unit => true,\n-            _ => false,\n-        }\n+    pub fn ty(&self, db: &impl HirDatabase) -> Cancelable<Option<Ty>> {\n+        db.type_for_field(self.struct_.def_id, self.name.clone())\n     }\n }\n \n@@ -206,8 +167,18 @@ impl Struct {\n         Ok(db.struct_data(self.def_id)?.name.clone())\n     }\n \n-    pub fn variant_data(&self, db: &impl HirDatabase) -> Cancelable<Arc<VariantData>> {\n-        Ok(db.struct_data(self.def_id)?.variant_data.clone())\n+    pub fn fields(&self, db: &impl HirDatabase) -> Cancelable<Vec<StructField>> {\n+        let res = db\n+            .struct_data(self.def_id)?\n+            .variant_data\n+            .fields()\n+            .iter()\n+            .map(|it| StructField {\n+                struct_: self.clone(),\n+                name: it.name.clone(),\n+            })\n+            .collect();\n+        Ok(res)\n     }\n }\n "}, {"sha": "1b6b72c98e98a75404d712f3f5feaee832c5f3d9", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca14c591fea40b2f803bbf5f02c1571732348fb/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca14c591fea40b2f803bbf5f02c1571732348fb/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=aca14c591fea40b2f803bbf5f02c1571732348fb", "patch": "@@ -56,6 +56,6 @@ pub use self::code_model_api::{\n     Crate, CrateDependency,\n     Def,\n     Module, ModuleSource, Problem,\n-    Struct, Enum, VariantData, StructField,\n+    Struct, Enum,\n     Function, FnSignature,\n };"}, {"sha": "65bba6dc76a625e079599af0113f544738858743", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aca14c591fea40b2f803bbf5f02c1571732348fb/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca14c591fea40b2f803bbf5f02c1571732348fb/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=aca14c591fea40b2f803bbf5f02c1571732348fb", "patch": "@@ -28,13 +28,13 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n             Ty::Adt { def_id, .. } => {\n                 match def_id.resolve(ctx.db)? {\n                     Def::Struct(s) => {\n-                        let variant_data = s.variant_data(ctx.db)?;\n-                        for field in variant_data.fields() {\n+                        for field in s.fields(ctx.db)? {\n                             CompletionItem::new(\n                                 CompletionKind::Reference,\n                                 field.name().to_string(),\n                             )\n                             .kind(CompletionItemKind::Field)\n+                            .set_detail(field.ty(ctx.db)?.map(|ty| ty.to_string()))\n                             .add_to(acc);\n                         }\n                     }\n@@ -72,37 +72,37 @@ mod tests {\n                a.<|>\n             }\n             \",\n-            r#\"the_field\"#,\n+            r#\"the_field \"u32\"\"#,\n         );\n     }\n \n     #[test]\n     fn test_struct_field_completion_self() {\n         check_ref_completion(\n             r\"\n-            struct A { the_field: u32 }\n+            struct A { the_field: (u32,) }\n             impl A {\n                 fn foo(self) {\n                     self.<|>\n                 }\n             }\n             \",\n-            r#\"the_field\"#,\n+            r#\"the_field \"(u32,)\"\"#,\n         );\n     }\n \n     #[test]\n     fn test_struct_field_completion_autoderef() {\n         check_ref_completion(\n             r\"\n-            struct A { the_field: u32 }\n+            struct A { the_field: (u32, i32) }\n             impl A {\n                 fn foo(&self) {\n                     self.<|>\n                 }\n             }\n             \",\n-            r#\"the_field\"#,\n+            r#\"the_field \"(u32, i32)\"\"#,\n         );\n     }\n "}, {"sha": "334449faec637699eaba7b9af5964618b24d068f", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aca14c591fea40b2f803bbf5f02c1571732348fb/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca14c591fea40b2f803bbf5f02c1571732348fb/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=aca14c591fea40b2f803bbf5f02c1571732348fb", "patch": "@@ -11,6 +11,7 @@ pub struct CompletionItem {\n     /// completion.\n     completion_kind: CompletionKind,\n     label: String,\n+    detail: Option<String>,\n     lookup: Option<String>,\n     snippet: Option<String>,\n     kind: Option<CompletionItemKind>,\n@@ -51,6 +52,7 @@ impl CompletionItem {\n         Builder {\n             completion_kind,\n             label,\n+            detail: None,\n             lookup: None,\n             snippet: None,\n             kind: None,\n@@ -60,6 +62,10 @@ impl CompletionItem {\n     pub fn label(&self) -> &str {\n         &self.label\n     }\n+    /// Short one-line additional information, like a type\n+    pub fn detail(&self) -> Option<&str> {\n+        self.detail.as_ref().map(|it| it.as_str())\n+    }\n     /// What string is used for filtering.\n     pub fn lookup(&self) -> &str {\n         self.lookup\n@@ -87,6 +93,7 @@ impl CompletionItem {\n pub(crate) struct Builder {\n     completion_kind: CompletionKind,\n     label: String,\n+    detail: Option<String>,\n     lookup: Option<String>,\n     snippet: Option<String>,\n     kind: Option<CompletionItemKind>,\n@@ -100,6 +107,7 @@ impl Builder {\n     pub(crate) fn build(self) -> CompletionItem {\n         CompletionItem {\n             label: self.label,\n+            detail: self.detail,\n             lookup: self.lookup,\n             snippet: self.snippet,\n             kind: self.kind,\n@@ -118,6 +126,14 @@ impl Builder {\n         self.kind = Some(kind);\n         self\n     }\n+    #[allow(unused)]\n+    pub(crate) fn detail(self, detail: impl Into<String>) -> Builder {\n+        self.set_detail(Some(detail))\n+    }\n+    pub(crate) fn set_detail(mut self, detail: Option<impl Into<String>>) -> Builder {\n+        self.detail = detail.map(Into::into);\n+        self\n+    }\n     pub(super) fn from_resolution(\n         mut self,\n         ctx: &CompletionContext,\n@@ -227,6 +243,9 @@ impl Completions {\n                 } else {\n                     res.push_str(&c.label);\n                 }\n+                if let Some(detail) = &c.detail {\n+                    res.push_str(&format!(\" {:?}\", detail));\n+                }\n                 if let Some(snippet) = &c.snippet {\n                     res.push_str(&format!(\" {:?}\", snippet));\n                 }"}, {"sha": "35c679a4af4ad17ce45af1761f2b32aa17ff233b", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aca14c591fea40b2f803bbf5f02c1571732348fb/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca14c591fea40b2f803bbf5f02c1571732348fb/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=aca14c591fea40b2f803bbf5f02c1571732348fb", "patch": "@@ -75,6 +75,7 @@ impl Conv for CompletionItem {\n     fn conv(self) -> <Self as Conv>::Output {\n         let mut res = ::languageserver_types::CompletionItem {\n             label: self.label().to_string(),\n+            detail: self.detail().map(|it| it.to_string()),\n             filter_text: Some(self.lookup().to_string()),\n             kind: self.kind().map(|it| it.conv()),\n             ..Default::default()"}]}