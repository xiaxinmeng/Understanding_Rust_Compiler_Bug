{"sha": "4d71c164a89b705df6affd31a5262c832d1bc48d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNzFjMTY0YTg5YjcwNWRmNmFmZmQzMWE1MjYyYzgzMmQxYmM0OGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-04T04:10:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-04T04:10:58Z"}, "message": "Auto merge of #69550 - RalfJung:scalar, r=oli-obk\n\ninterpret engine: Scalar cleanup\n\n* Remove `to_ptr`\n* Make `to_bits` private\n\nr? @oli-obk", "tree": {"sha": "4861bf04a627a9af944ad786b5930e3a4ccbe5c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4861bf04a627a9af944ad786b5930e3a4ccbe5c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d71c164a89b705df6affd31a5262c832d1bc48d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d71c164a89b705df6affd31a5262c832d1bc48d", "html_url": "https://github.com/rust-lang/rust/commit/4d71c164a89b705df6affd31a5262c832d1bc48d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d71c164a89b705df6affd31a5262c832d1bc48d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "592e9c37008c2389451d28874a748f5b38612ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/592e9c37008c2389451d28874a748f5b38612ca5", "html_url": "https://github.com/rust-lang/rust/commit/592e9c37008c2389451d28874a748f5b38612ca5"}, {"sha": "0e157380ae2a7af0c457aea1c8be22161899ea1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e157380ae2a7af0c457aea1c8be22161899ea1d", "html_url": "https://github.com/rust-lang/rust/commit/0e157380ae2a7af0c457aea1c8be22161899ea1d"}], "stats": {"total": 156, "additions": 69, "deletions": 87}, "files": [{"sha": "2be60d35af33060b23fea035f38f277dbea292df", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=4d71c164a89b705df6affd31a5262c832d1bc48d", "patch": "@@ -170,6 +170,10 @@ impl<Tag> From<Double> for Scalar<Tag> {\n }\n \n impl Scalar<()> {\n+    /// Make sure the `data` fits in `size`.\n+    /// This is guaranteed by all constructors here, but since the enum variants are public,\n+    /// it could still be violated (even though no code outside this file should\n+    /// construct `Scalar`s).\n     #[inline(always)]\n     fn check_data(data: u128, size: u8) {\n         debug_assert_eq!(\n@@ -364,10 +368,10 @@ impl<'tcx, Tag> Scalar<Tag> {\n         target_size: Size,\n         cx: &impl HasDataLayout,\n     ) -> Result<u128, Pointer<Tag>> {\n+        assert_ne!(target_size.bytes(), 0, \"you should never look at the bits of a ZST\");\n         match self {\n             Scalar::Raw { data, size } => {\n                 assert_eq!(target_size.bytes(), size as u64);\n-                assert_ne!(size, 0, \"you should never look at the bits of a ZST\");\n                 Scalar::check_data(data, size);\n                 Ok(data)\n             }\n@@ -378,19 +382,15 @@ impl<'tcx, Tag> Scalar<Tag> {\n         }\n     }\n \n-    #[inline(always)]\n-    pub fn check_raw(data: u128, size: u8, target_size: Size) {\n-        assert_eq!(target_size.bytes(), size as u64);\n-        assert_ne!(size, 0, \"you should never look at the bits of a ZST\");\n-        Scalar::check_data(data, size);\n-    }\n-\n-    /// Do not call this method!  Use either `assert_bits` or `force_bits`.\n+    /// This method is intentionally private!\n+    /// It is just a helper for other methods in this file.\n     #[inline]\n-    pub fn to_bits(self, target_size: Size) -> InterpResult<'tcx, u128> {\n+    fn to_bits(self, target_size: Size) -> InterpResult<'tcx, u128> {\n+        assert_ne!(target_size.bytes(), 0, \"you should never look at the bits of a ZST\");\n         match self {\n             Scalar::Raw { data, size } => {\n-                Self::check_raw(data, size, target_size);\n+                assert_eq!(target_size.bytes(), size as u64);\n+                Scalar::check_data(data, size);\n                 Ok(data)\n             }\n             Scalar::Ptr(_) => throw_unsup!(ReadPointerAsBytes),\n@@ -402,22 +402,14 @@ impl<'tcx, Tag> Scalar<Tag> {\n         self.to_bits(target_size).expect(\"expected Raw bits but got a Pointer\")\n     }\n \n-    /// Do not call this method!  Use either `assert_ptr` or `force_ptr`.\n-    /// This method is intentionally private, do not make it public.\n     #[inline]\n-    fn to_ptr(self) -> InterpResult<'tcx, Pointer<Tag>> {\n+    pub fn assert_ptr(self) -> Pointer<Tag> {\n         match self {\n-            Scalar::Raw { data: 0, .. } => throw_unsup!(InvalidNullPointerUsage),\n-            Scalar::Raw { .. } => throw_unsup!(ReadBytesAsPointer),\n-            Scalar::Ptr(p) => Ok(p),\n+            Scalar::Ptr(p) => p,\n+            Scalar::Raw { .. } => bug!(\"expected a Pointer but got Raw bits\"),\n         }\n     }\n \n-    #[inline(always)]\n-    pub fn assert_ptr(self) -> Pointer<Tag> {\n-        self.to_ptr().expect(\"expected a Pointer but got Raw bits\")\n-    }\n-\n     /// Do not call this method!  Dispatch based on the type instead.\n     #[inline]\n     pub fn is_bits(self) -> bool {\n@@ -595,12 +587,6 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n         }\n     }\n \n-    /// Do not call this method!  Use either `assert_bits` or `force_bits`.\n-    #[inline(always)]\n-    pub fn to_bits(self, target_size: Size) -> InterpResult<'tcx, u128> {\n-        self.not_undef()?.to_bits(target_size)\n-    }\n-\n     #[inline(always)]\n     pub fn to_bool(self) -> InterpResult<'tcx, bool> {\n         self.not_undef()?.to_bool()"}, {"sha": "ab2c98c89b4e6e54033a07e8b2e07486e5932f46", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=4d71c164a89b705df6affd31a5262c832d1bc48d", "patch": "@@ -2571,7 +2571,7 @@ impl<'tcx> ConstKind<'tcx> {\n \n     #[inline]\n     pub fn try_to_bits(&self, size: ty::layout::Size) -> Option<u128> {\n-        self.try_to_scalar()?.to_bits(size).ok()\n+        if let ConstKind::Value(val) = self { val.try_to_bits(size) } else { None }\n     }\n }\n "}, {"sha": "d63abdc356234340e12c5e15c99d1b8e5555ccb8", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=4d71c164a89b705df6affd31a5262c832d1bc48d", "patch": "@@ -384,7 +384,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // `x % y != 0` or `y == 0` or `x == T::min_value() && y == -1`.\n         // First, check x % y != 0 (or if that computation overflows).\n         let (res, overflow, _ty) = self.overflowing_binary_op(BinOp::Rem, a, b)?;\n-        if overflow || res.to_bits(a.layout.size)? != 0 {\n+        if overflow || res.assert_bits(a.layout.size) != 0 {\n             // Then, check if `b` is -1, which is the \"min_value / -1\" case.\n             let minus1 = Scalar::from_int(-1, dest.layout.size);\n             let b_scalar = b.to_scalar().unwrap();"}, {"sha": "44b46d65bf1c7ae6d635db42fe304872f15eb365", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 29, "deletions": 34, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=4d71c164a89b705df6affd31a5262c832d1bc48d", "patch": "@@ -96,40 +96,40 @@ pub struct ImmTy<'tcx, Tag = ()> {\n impl<Tag: Copy> std::fmt::Display for ImmTy<'tcx, Tag> {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         match &self.imm {\n-            Immediate::Scalar(ScalarMaybeUndef::Scalar(s)) => match s.to_bits(self.layout.size) {\n-                Ok(s) => {\n-                    match self.layout.ty.kind {\n-                        ty::Int(_) => {\n-                            return write!(\n-                                fmt,\n-                                \"{}\",\n-                                super::sign_extend(s, self.layout.size) as i128,\n-                            );\n-                        }\n-                        ty::Uint(_) => return write!(fmt, \"{}\", s),\n-                        ty::Bool if s == 0 => return fmt.write_str(\"false\"),\n-                        ty::Bool if s == 1 => return fmt.write_str(\"true\"),\n-                        ty::Char => {\n-                            if let Some(c) = u32::try_from(s).ok().and_then(std::char::from_u32) {\n-                                return write!(fmt, \"{}\", c);\n-                            }\n+            // We cannot use `to_bits_or_ptr` as we do not have a `tcx`.\n+            // So we use `is_bits` and circumvent a bunch of sanity checking -- but\n+            // this is anyway only for printing.\n+            Immediate::Scalar(ScalarMaybeUndef::Scalar(s)) if s.is_ptr() => {\n+                fmt.write_str(\"{pointer}\")\n+            }\n+            Immediate::Scalar(ScalarMaybeUndef::Scalar(s)) => {\n+                let s = s.assert_bits(self.layout.size);\n+                match self.layout.ty.kind {\n+                    ty::Int(_) => {\n+                        return write!(fmt, \"{}\", super::sign_extend(s, self.layout.size) as i128,);\n+                    }\n+                    ty::Uint(_) => return write!(fmt, \"{}\", s),\n+                    ty::Bool if s == 0 => return fmt.write_str(\"false\"),\n+                    ty::Bool if s == 1 => return fmt.write_str(\"true\"),\n+                    ty::Char => {\n+                        if let Some(c) = u32::try_from(s).ok().and_then(std::char::from_u32) {\n+                            return write!(fmt, \"{}\", c);\n                         }\n-                        ty::Float(ast::FloatTy::F32) => {\n-                            if let Ok(u) = u32::try_from(s) {\n-                                return write!(fmt, \"{}\", f32::from_bits(u));\n-                            }\n+                    }\n+                    ty::Float(ast::FloatTy::F32) => {\n+                        if let Ok(u) = u32::try_from(s) {\n+                            return write!(fmt, \"{}\", f32::from_bits(u));\n                         }\n-                        ty::Float(ast::FloatTy::F64) => {\n-                            if let Ok(u) = u64::try_from(s) {\n-                                return write!(fmt, \"{}\", f64::from_bits(u));\n-                            }\n+                    }\n+                    ty::Float(ast::FloatTy::F64) => {\n+                        if let Ok(u) = u64::try_from(s) {\n+                            return write!(fmt, \"{}\", f64::from_bits(u));\n                         }\n-                        _ => {}\n                     }\n-                    write!(fmt, \"{:x}\", s)\n+                    _ => {}\n                 }\n-                Err(_) => fmt.write_str(\"{pointer}\"),\n-            },\n+                write!(fmt, \"{:x}\", s)\n+            }\n             Immediate::Scalar(ScalarMaybeUndef::Undef) => fmt.write_str(\"{undef}\"),\n             Immediate::ScalarPair(..) => fmt.write_str(\"{wide pointer or tuple}\"),\n         }\n@@ -205,11 +205,6 @@ impl<'tcx, Tag: Copy> ImmTy<'tcx, Tag> {\n     pub fn from_int(i: impl Into<i128>, layout: TyLayout<'tcx>) -> Self {\n         Self::from_scalar(Scalar::from_int(i, layout.size), layout)\n     }\n-\n-    #[inline]\n-    pub fn to_bits(self) -> InterpResult<'tcx, u128> {\n-        self.to_scalar()?.to_bits(self.layout.size)\n-    }\n }\n \n // Use the existing layout if given (but sanity check in debug mode),"}, {"sha": "731dcc6a25f141e857432ceaff2848c2ef4364db", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=4d71c164a89b705df6affd31a5262c832d1bc48d", "patch": "@@ -322,16 +322,17 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n             ty::Float(_) | ty::Int(_) | ty::Uint(_) => {\n                 // NOTE: Keep this in sync with the array optimization for int/float\n                 // types below!\n-                let size = value.layout.size;\n                 let value = value.to_scalar_or_undef();\n                 if self.ref_tracking_for_consts.is_some() {\n                     // Integers/floats in CTFE: Must be scalar bits, pointers are dangerous\n-                    try_validation!(\n-                        value.to_bits(size),\n-                        value,\n-                        self.path,\n-                        \"initialized plain (non-pointer) bytes\"\n-                    );\n+                    let is_bits = value.not_undef().map_or(false, |v| v.is_bits());\n+                    if !is_bits {\n+                        throw_validation_failure!(\n+                            value,\n+                            self.path,\n+                            \"initialized plain (non-pointer) bytes\"\n+                        )\n+                    }\n                 } else {\n                     // At run-time, for now, we accept *anything* for these types, including\n                     // undef. We should fix that, but let's start low."}, {"sha": "c196e748df381c317dcc1bb4d3b379494c361925", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=4d71c164a89b705df6affd31a5262c832d1bc48d", "patch": "@@ -545,7 +545,9 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             let left_ty = left.ty(&self.local_decls, self.tcx);\n             let left_size_bits = self.ecx.layout_of(left_ty).ok()?.size.bits();\n             let right_size = r.layout.size;\n-            let r_bits = r.to_scalar().and_then(|r| r.to_bits(right_size));\n+            let r_bits = r.to_scalar().ok();\n+            // This is basically `force_bits`.\n+            let r_bits = r_bits.and_then(|r| r.to_bits_or_ptr(right_size, &self.tcx).ok());\n             if r_bits.map_or(false, |b| b >= left_size_bits as u128) {\n                 self.report_assert_as_lint(\n                     lint::builtin::ARITHMETIC_OVERFLOW,"}, {"sha": "4c7e6e1754aa118c26957386150887f03461b0ab", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=4d71c164a89b705df6affd31a5262c832d1bc48d", "patch": "@@ -1396,21 +1396,19 @@ impl<'tcx> IntRange<'tcx> {\n     ) -> Option<IntRange<'tcx>> {\n         if let Some((target_size, bias)) = Self::integral_size_and_signed_bias(tcx, value.ty) {\n             let ty = value.ty;\n-            let val = if let ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, size })) =\n-                value.val\n-            {\n-                // For this specific pattern we can skip a lot of effort and go\n-                // straight to the result, after doing a bit of checking. (We\n-                // could remove this branch and just use the next branch, which\n-                // is more general but much slower.)\n-                Scalar::<()>::check_raw(data, size, target_size);\n-                data\n-            } else if let Some(val) = value.try_eval_bits(tcx, param_env, ty) {\n-                // This is a more general form of the previous branch.\n-                val\n-            } else {\n-                return None;\n-            };\n+            let val = (|| {\n+                if let ty::ConstKind::Value(ConstValue::Scalar(scalar)) = value.val {\n+                    // For this specific pattern we can skip a lot of effort and go\n+                    // straight to the result, after doing a bit of checking. (We\n+                    // could remove this branch and just fall through, which\n+                    // is more general but much slower.)\n+                    if let Ok(bits) = scalar.to_bits_or_ptr(target_size, &tcx) {\n+                        return Some(bits);\n+                    }\n+                }\n+                // This is a more general form of the previous case.\n+                value.try_eval_bits(tcx, param_env, ty)\n+            })()?;\n             let val = val ^ bias;\n             Some(IntRange { range: val..=val, ty, span })\n         } else {"}]}