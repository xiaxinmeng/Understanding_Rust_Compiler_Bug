{"sha": "a10372dac6e0e5abc222330dc2c9de89bcf0c4fc", "node_id": "C_kwDOAAsO6NoAKGExMDM3MmRhYzZlMGU1YWJjMjIyMzMwZGMyYzlkZTg5YmNmMGM0ZmM", "commit": {"author": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2023-03-14T06:11:25Z"}, "committer": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2023-03-14T06:11:25Z"}, "message": "fix: use compute_type_match correctly and update tests accordingly", "tree": {"sha": "69c14a4cc7c375f950cabc1c9e4fc1b894eee7e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69c14a4cc7c375f950cabc1c9e4fc1b894eee7e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a10372dac6e0e5abc222330dc2c9de89bcf0c4fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a10372dac6e0e5abc222330dc2c9de89bcf0c4fc", "html_url": "https://github.com/rust-lang/rust/commit/a10372dac6e0e5abc222330dc2c9de89bcf0c4fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a10372dac6e0e5abc222330dc2c9de89bcf0c4fc/comments", "author": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f", "html_url": "https://github.com/rust-lang/rust/commit/794988c53b2ae41cabc23ee1dfb20e7d13b7dc3f"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "ec8a23e907c6d648b06cb5a8661962df69e4cc85", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a10372dac6e0e5abc222330dc2c9de89bcf0c4fc/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10372dac6e0e5abc222330dc2c9de89bcf0c4fc/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=a10372dac6e0e5abc222330dc2c9de89bcf0c4fc", "patch": "@@ -496,7 +496,6 @@ impl Completions {\n             variant,\n             local_name.clone(),\n             None,\n-            false,\n         ));\n     }\n \n@@ -515,7 +514,6 @@ impl Completions {\n             variant,\n             None,\n             path,\n-            true,\n         ));\n     }\n "}, {"sha": "37c65abba93754270cbe9cf976d397875a61b6e8", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a10372dac6e0e5abc222330dc2c9de89bcf0c4fc/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10372dac6e0e5abc222330dc2c9de89bcf0c4fc/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=a10372dac6e0e5abc222330dc2c9de89bcf0c4fc", "patch": "@@ -7,7 +7,6 @@ use syntax::SmolStr;\n \n use crate::{\n     context::{ParamContext, ParamKind, PathCompletionCtx, PatternContext},\n-    item::CompletionRelevanceTypeMatch,\n     render::{\n         variant::{format_literal_label, format_literal_lookup, visible_fields},\n         RenderContext,\n@@ -38,7 +37,9 @@ pub(crate) fn render_struct_pat(\n     let lookup = format_literal_lookup(name.as_str(), kind);\n     let pat = render_pat(&ctx, pattern_ctx, &escaped_name, kind, &visible_fields, fields_omitted)?;\n \n-    Some(build_completion(ctx, label, lookup, pat, strukt, true))\n+    let db = ctx.db();\n+\n+    Some(build_completion(ctx, label, lookup, pat, strukt, strukt.ty(db)))\n }\n \n pub(crate) fn render_variant_pat(\n@@ -48,12 +49,12 @@ pub(crate) fn render_variant_pat(\n     variant: hir::Variant,\n     local_name: Option<Name>,\n     path: Option<&hir::ModPath>,\n-    is_exact_type_match: bool,\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_variant_pat\");\n \n     let fields = variant.fields(ctx.db());\n     let (visible_fields, fields_omitted) = visible_fields(ctx.completion, &fields, variant)?;\n+    let enum_ty = variant.parent_enum(ctx.db()).ty(ctx.db());\n \n     let (name, escaped_name) = match path {\n         Some(path) => (path.unescaped().to_string().into(), path.to_string().into()),\n@@ -83,7 +84,7 @@ pub(crate) fn render_variant_pat(\n         }\n     };\n \n-    Some(build_completion(ctx, label, lookup, pat, variant, is_exact_type_match))\n+    Some(build_completion(ctx, label, lookup, pat, variant, enum_ty))\n }\n \n fn build_completion(\n@@ -92,13 +93,11 @@ fn build_completion(\n     lookup: SmolStr,\n     pat: String,\n     def: impl HasAttrs + Copy,\n-    is_exact_type_match: bool,\n+    adt_ty: hir::Type,\n ) -> CompletionItem {\n     let mut relevance = ctx.completion_relevance();\n \n-    if is_exact_type_match {\n-        relevance.type_match = Some(CompletionRelevanceTypeMatch::Exact);\n-    }\n+    relevance.type_match = super::compute_type_match(ctx.completion, &adt_ty);\n \n     let mut item = CompletionItem::new(CompletionItemKind::Binding, ctx.source_range(), label);\n     item.set_documentation(ctx.docs(def))"}, {"sha": "b9f157d1992b9cf54f7231dd1f485963a84d12f5", "filename": "crates/ide-completion/src/tests/record.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a10372dac6e0e5abc222330dc2c9de89bcf0c4fc/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a10372dac6e0e5abc222330dc2c9de89bcf0c4fc/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs?ref=a10372dac6e0e5abc222330dc2c9de89bcf0c4fc", "patch": "@@ -50,6 +50,7 @@ fn foo(s: Struct) {\n fn record_pattern_field_enum() {\n     check(\n         r#\"\n+//- minicore:result\n enum Baz { FOO, BAR }\n \n fn foo(baz: Baz) {\n@@ -61,14 +62,21 @@ fn foo(baz: Baz) {\n \"#,\n         expect![[r#\"\n             en Baz\n+            en Result\n+            md core\n+            ev Err\n+            ev Ok\n             bn Baz::BAR Baz::BAR$0\n+            bn Err(\u2026)   Err($1)$0\n+            bn Ok(\u2026)    Ok($1)$0\n             kw mut\n             kw ref\n         \"#]],\n     );\n \n     check(\n         r#\"\n+//- minicore:result\n enum Baz { FOO, BAR }\n \n fn foo(baz: Baz) {\n@@ -77,13 +85,19 @@ fn foo(baz: Baz) {\n         $0\n     }\n }\n-\"#,\n+ \"#,\n         expect![[r#\"\n-            en Baz\n-            bn Baz::BAR Baz::BAR$0\n-            kw mut\n-            kw ref\n-        \"#]],\n+         en Baz\n+         en Result\n+         md core\n+         ev Err\n+         ev Ok\n+         bn Baz::BAR Baz::BAR$0\n+         bn Err(\u2026)   Err($1)$0\n+         bn Ok(\u2026)    Ok($1)$0\n+         kw mut\n+         kw ref\n+         \"#]],\n     );\n }\n "}]}