{"sha": "1968aede0f3deab97347bcc936ecee5e3c3471c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NjhhZWRlMGYzZGVhYjk3MzQ3YmNjOTM2ZWNlZTVlM2MzNDcxYzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-04T09:25:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-04T09:25:05Z"}, "message": "Auto merge of #5867 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? @ghost\n\nchangelog: none", "tree": {"sha": "1ee6c60cbb44f0e3636600fe937b1b1e46c64699", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ee6c60cbb44f0e3636600fe937b1b1e46c64699"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1968aede0f3deab97347bcc936ecee5e3c3471c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1968aede0f3deab97347bcc936ecee5e3c3471c7", "html_url": "https://github.com/rust-lang/rust/commit/1968aede0f3deab97347bcc936ecee5e3c3471c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1968aede0f3deab97347bcc936ecee5e3c3471c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbbc973a842fc515f9b22d10d103bbf2d7827697", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbbc973a842fc515f9b22d10d103bbf2d7827697", "html_url": "https://github.com/rust-lang/rust/commit/bbbc973a842fc515f9b22d10d103bbf2d7827697"}, {"sha": "52a9c157d04808b61d245c251c223a81ae2dcb70", "url": "https://api.github.com/repos/rust-lang/rust/commits/52a9c157d04808b61d245c251c223a81ae2dcb70", "html_url": "https://github.com/rust-lang/rust/commit/52a9c157d04808b61d245c251c223a81ae2dcb70"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "40af6bb3d7bcff06c605c0bd4a04238a3fc583e2", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=1968aede0f3deab97347bcc936ecee5e3c3471c7", "patch": "@@ -286,14 +286,14 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                     },\n                     _ => {},\n                 }\n-                if items.is_empty() || !attr.check_name(sym!(deprecated)) {\n+                if items.is_empty() || !attr.has_name(sym!(deprecated)) {\n                     return;\n                 }\n                 for item in items {\n                     if_chain! {\n                         if let NestedMetaItem::MetaItem(mi) = &item;\n                         if let MetaItemKind::NameValue(lit) = &mi.kind;\n-                        if mi.check_name(sym!(since));\n+                        if mi.has_name(sym!(since));\n                         then {\n                             check_semver(cx, item.span(), lit);\n                         }\n@@ -309,7 +309,7 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n         }\n         match item.kind {\n             ItemKind::ExternCrate(..) | ItemKind::Use(..) => {\n-                let skip_unused_imports = item.attrs.iter().any(|attr| attr.check_name(sym!(macro_use)));\n+                let skip_unused_imports = item.attrs.iter().any(|attr| attr.has_name(sym!(macro_use)));\n \n                 for attr in item.attrs {\n                     if in_external_macro(cx.sess(), attr.span) {\n@@ -524,7 +524,7 @@ fn check_attrs(cx: &LateContext<'_>, span: Span, name: Name, attrs: &[Attribute]\n \n     for attr in attrs {\n         if let Some(values) = attr.meta_item_list() {\n-            if values.len() != 1 || !attr.check_name(sym!(inline)) {\n+            if values.len() != 1 || !attr.has_name(sym!(inline)) {\n                 continue;\n             }\n             if is_word(&values[0], sym!(always)) {\n@@ -558,7 +558,7 @@ fn check_semver(cx: &LateContext<'_>, span: Span, lit: &Lit) {\n \n fn is_word(nmi: &NestedMetaItem, expected: Symbol) -> bool {\n     if let NestedMetaItem::MetaItem(mi) = &nmi {\n-        mi.is_word() && mi.check_name(expected)\n+        mi.is_word() && mi.has_name(expected)\n     } else {\n         false\n     }\n@@ -618,15 +618,15 @@ fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::as\n fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute) {\n     if_chain! {\n         // check cfg_attr\n-        if attr.check_name(sym!(cfg_attr));\n+        if attr.has_name(sym!(cfg_attr));\n         if let Some(items) = attr.meta_item_list();\n         if items.len() == 2;\n         // check for `rustfmt`\n         if let Some(feature_item) = items[0].meta_item();\n-        if feature_item.check_name(sym!(rustfmt));\n+        if feature_item.has_name(sym!(rustfmt));\n         // check for `rustfmt_skip` and `rustfmt::skip`\n         if let Some(skip_item) = &items[1].meta_item();\n-        if skip_item.check_name(sym!(rustfmt_skip)) ||\n+        if skip_item.has_name(sym!(rustfmt_skip)) ||\n             skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == sym!(skip);\n         // Only lint outer attributes, because custom inner attributes are unstable\n         // Tracking issue: https://github.com/rust-lang/rust/issues/54726\n@@ -685,7 +685,7 @@ fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n     }\n \n     if_chain! {\n-        if attr.check_name(sym!(cfg));\n+        if attr.has_name(sym!(cfg));\n         if let Some(list) = attr.meta_item_list();\n         let mismatched = find_mismatched_target_os(&list);\n         if !mismatched.is_empty();"}, {"sha": "e87c33d1b09dd42d6e688b0e079a7760817b4a36", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=1968aede0f3deab97347bcc936ecee5e3c3471c7", "patch": "@@ -323,7 +323,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n             let (comment, current_spans) = strip_doc_comment_decoration(&comment, attr.span);\n             spans.extend_from_slice(&current_spans);\n             doc.push_str(&comment);\n-        } else if attr.check_name(sym!(doc)) {\n+        } else if attr.has_name(sym!(doc)) {\n             // ignore mix of sugared and non-sugared doc\n             // don't trigger the safety or errors check\n             return DocHeaders {"}, {"sha": "4b605fdb366a91b0bdb5620ba81ee6c730f9bf83", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=1968aede0f3deab97347bcc936ecee5e3c3471c7", "patch": "@@ -41,7 +41,7 @@ impl<'tcx> LateLintPass<'tcx> for InlineFnWithoutBody {\n \n fn check_attrs(cx: &LateContext<'_>, name: Symbol, attrs: &[Attribute]) {\n     for attr in attrs {\n-        if !attr.check_name(sym!(inline)) {\n+        if !attr.has_name(sym!(inline)) {\n             continue;\n         }\n "}, {"sha": "ca1381852daeead7d134f9edcebbc33d360c1e96", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=1968aede0f3deab97347bcc936ecee5e3c3471c7", "patch": "@@ -83,7 +83,7 @@ fn check_manual_non_exhaustive_enum(cx: &EarlyContext<'_>, item: &Item, variants\n     }\n \n     fn is_doc_hidden(attr: &Attribute) -> bool {\n-        attr.check_name(sym!(doc))\n+        attr.has_name(sym!(doc))\n             && match attr.meta_item_list() {\n                 Some(l) => attr::list_contains_name(&l, sym!(hidden)),\n                 None => false,"}, {"sha": "813f9c4394819034ded9055b97499207ef272c60", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=1968aede0f3deab97347bcc936ecee5e3c3471c7", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     fn enter_lint_attrs(&mut self, _: &LateContext<'tcx>, attrs: &'tcx [ast::Attribute]) {\n         let doc_hidden = self.doc_hidden()\n             || attrs.iter().any(|attr| {\n-                attr.check_name(sym!(doc))\n+                attr.has_name(sym!(doc))\n                     && match attr.meta_item_list() {\n                         None => false,\n                         Some(l) => attr::list_contains_name(&l[..], sym!(hidden)),"}, {"sha": "3eae45b2819d849510a5b47f3d1e8e2f7ef93f2b", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=1968aede0f3deab97347bcc936ecee5e3c3471c7", "patch": "@@ -57,7 +57,7 @@ declare_clippy_lint! {\n }\n \n fn check_missing_inline_attrs(cx: &LateContext<'_>, attrs: &[ast::Attribute], sp: Span, desc: &'static str) {\n-    let has_inline = attrs.iter().any(|a| a.check_name(sym!(inline)));\n+    let has_inline = attrs.iter().any(|a| a.has_name(sym!(inline)));\n     if !has_inline {\n         span_lint(\n             cx,"}, {"sha": "9391049c6e8f95d6513b0c8444bdcd94b5d3224a", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=1968aede0f3deab97347bcc936ecee5e3c3471c7", "patch": "@@ -112,7 +112,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n     }\n \n     fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if item.attrs.iter().any(|a| a.check_name(sym!(automatically_derived))) {\n+        if item.attrs.iter().any(|a| a.has_name(sym!(automatically_derived))) {\n             debug_assert!(self.derived_item.is_none());\n             self.derived_item = Some(item.hir_id);\n         }"}, {"sha": "047a78b087841b7224c83536bfbb4eaa488f7908", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=1968aede0f3deab97347bcc936ecee5e3c3471c7", "patch": "@@ -304,7 +304,7 @@ fn requires_exact_signature(attrs: &[Attribute]) -> bool {\n     attrs.iter().any(|attr| {\n         [sym!(proc_macro), sym!(proc_macro_attribute), sym!(proc_macro_derive)]\n             .iter()\n-            .any(|&allow| attr.check_name(allow))\n+            .any(|&allow| attr.has_name(allow))\n     })\n }\n "}, {"sha": "8ed20995a70af1257708ba3b8b278dc08adbec8d", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=1968aede0f3deab97347bcc936ecee5e3c3471c7", "patch": "@@ -235,7 +235,7 @@ impl EarlyLintPass for Return {\n }\n \n fn attr_is_cfg(attr: &ast::Attribute) -> bool {\n-    attr.meta_item_list().is_some() && attr.check_name(sym!(cfg))\n+    attr.meta_item_list().is_some() && attr.has_name(sym!(cfg))\n }\n \n // get the def site"}, {"sha": "7948d99162b8116b91b6236a8f0a1d1945406b34", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=1968aede0f3deab97347bcc936ecee5e3c3471c7", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> LateLintPass<'tcx> for TriviallyCopyPassByRef {\n                     return;\n                 }\n                 for a in attrs {\n-                    if a.meta_item_list().is_some() && a.check_name(sym!(proc_macro_derive)) {\n+                    if a.meta_item_list().is_some() && a.has_name(sym!(proc_macro_derive)) {\n                         return;\n                     }\n                 }"}, {"sha": "ba3492a6fff1136dc1d70fcce17ef362da35292d", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=1968aede0f3deab97347bcc936ecee5e3c3471c7", "patch": "@@ -13,7 +13,7 @@ use std::{env, fmt, fs, io};\n /// Gets the configuration file from arguments.\n pub fn file_from_args(args: &[NestedMetaItem]) -> Result<Option<PathBuf>, (&'static str, Span)> {\n     for arg in args.iter().filter_map(NestedMetaItem::meta_item) {\n-        if arg.check_name(sym!(conf_file)) {\n+        if arg.has_name(sym!(conf_file)) {\n             return match arg.kind {\n                 MetaItemKind::Word | MetaItemKind::List(_) => Err((\"`conf_file` must be a named value\", arg.span)),\n                 MetaItemKind::NameValue(ref value) => {"}, {"sha": "3f8e15d90297d3035ef624e577725157cc950102", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968aede0f3deab97347bcc936ecee5e3c3471c7/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=1968aede0f3deab97347bcc936ecee5e3c3471c7", "patch": "@@ -883,7 +883,7 @@ pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_>, expr: &Expr<'_\n }\n \n /// Returns `true` if a pattern is refutable.\n-// TODO: should be implemented using rustc/mir_build/hair machinery\n+// TODO: should be implemented using rustc/mir_build/thir machinery\n pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n     fn is_enum_variant(cx: &LateContext<'_>, qpath: &QPath<'_>, id: HirId) -> bool {\n         matches!("}, {"sha": "f54b3f2bfe28a2f7d9debb79f04b5df486047ea3", "filename": "tests/ui/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1968aede0f3deab97347bcc936ecee5e3c3471c7/tests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1968aede0f3deab97347bcc936ecee5e3c3471c7/tests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.rs?ref=1968aede0f3deab97347bcc936ecee5e3c3471c7", "patch": "@@ -149,7 +149,7 @@ fn main() {\n         1 + 2, 3 \n                 - 4, 5\n     ];\n-    // lint if it doesnt\n+    // lint if it doesn't\n     let _ = &[\n         -1\n         -4,"}]}