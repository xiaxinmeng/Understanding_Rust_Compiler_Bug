{"sha": "e39cd20a4311f6e1377a01462cda5a89a4e67c15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzOWNkMjBhNDMxMWY2ZTEzNzdhMDE0NjJjZGE1YTg5YTRlNjdjMTU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T13:08:39Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T15:59:04Z"}, "message": "syntax: remove the handling of @str and @[] from the parser completely.", "tree": {"sha": "821d2b61e6eaee5b25742fbe9175cf65baf1797f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/821d2b61e6eaee5b25742fbe9175cf65baf1797f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e39cd20a4311f6e1377a01462cda5a89a4e67c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e39cd20a4311f6e1377a01462cda5a89a4e67c15", "html_url": "https://github.com/rust-lang/rust/commit/e39cd20a4311f6e1377a01462cda5a89a4e67c15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e39cd20a4311f6e1377a01462cda5a89a4e67c15/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aadcf29766553a6b6ed8a3c2f50193ebd674b7a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/aadcf29766553a6b6ed8a3c2f50193ebd674b7a7", "html_url": "https://github.com/rust-lang/rust/commit/aadcf29766553a6b6ed8a3c2f50193ebd674b7a7"}], "stats": {"total": 62, "additions": 12, "deletions": 50}, "files": [{"sha": "ed4455c2f89a10fe95cda7b5bf522081742341fd", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=e39cd20a4311f6e1377a01462cda5a89a4e67c15", "patch": "@@ -228,8 +228,7 @@ impl Visitor<()> for Context {\n \n     fn visit_expr(&mut self, e: &ast::Expr, _: ()) {\n         match e.node {\n-            ast::ExprUnary(_, ast::UnBox, _) |\n-            ast::ExprVstore(_, ast::ExprVstoreBox) => {\n+            ast::ExprUnary(_, ast::UnBox, _) => {\n                 self.gate_box(e.span);\n             }\n             _ => {}"}, {"sha": "d52ae81328f630784508e86867ece2fa6a1a3b32", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=e39cd20a4311f6e1377a01462cda5a89a4e67c15", "patch": "@@ -192,8 +192,7 @@ pub fn check_expr(v: &mut CheckCrateVisitor,\n                     \"references in constants may only refer to \\\n                      immutable values\");\n           },\n-          ExprVstore(_, ExprVstoreUniq) |\n-          ExprVstore(_, ExprVstoreBox) => {\n+          ExprVstore(_, ExprVstoreUniq) => {\n               sess.span_err(e.span, \"cannot allocate vectors in constant expressions\")\n           },\n "}, {"sha": "cbe1e8f72d933d6ccde522cbd17a32cc1e6e1180", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=e39cd20a4311f6e1377a01462cda5a89a4e67c15", "patch": "@@ -240,7 +240,6 @@ impl ConstEvalVisitor {\n                 match vstore {\n                     ast::ExprVstoreSlice => self.classify(e),\n                     ast::ExprVstoreUniq |\n-                    ast::ExprVstoreBox |\n                     ast::ExprVstoreMutSlice => non_const\n                 }\n             }"}, {"sha": "39797353993b06afeac60b20bd95bf403f8a1713", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=e39cd20a4311f6e1377a01462cda5a89a4e67c15", "patch": "@@ -1248,8 +1248,7 @@ fn check_unnecessary_allocation(cx: &Context, e: &ast::Expr) {\n     // Warn if string and vector literals with sigils, or boxing expressions,\n     // are immediately borrowed.\n     let allocation = match e.node {\n-        ast::ExprVstore(e2, ast::ExprVstoreUniq) |\n-        ast::ExprVstore(e2, ast::ExprVstoreBox) => {\n+        ast::ExprVstore(e2, ast::ExprVstoreUniq) => {\n             match e2.node {\n                 ast::ExprLit(lit) if ast_util::lit_is_str(lit) => {\n                     VectorAllocation"}, {"sha": "da5fa8385e9cc83e9277f360aefdd6b346ec7488", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=e39cd20a4311f6e1377a01462cda5a89a4e67c15", "patch": "@@ -519,14 +519,6 @@ fn trans_datum_unadjusted<'a>(bcx: &'a Block<'a>,\n         ast::ExprIndex(_, base, idx) => {\n             trans_index(bcx, expr, base, idx)\n         }\n-        ast::ExprVstore(contents, ast::ExprVstoreBox) => {\n-            fcx.push_ast_cleanup_scope(contents.id);\n-            let datum = unpack_datum!(\n-                bcx, tvec::trans_uniq_or_managed_vstore(bcx, heap_managed,\n-                                                        expr, contents));\n-            bcx = fcx.pop_and_trans_ast_cleanup_scope(bcx, contents.id);\n-            DatumBlock(bcx, datum)\n-        }\n         ast::ExprVstore(contents, ast::ExprVstoreUniq) => {\n             fcx.push_ast_cleanup_scope(contents.id);\n             let datum = unpack_datum!(\n@@ -2030,4 +2022,3 @@ fn deref_once<'a>(bcx: &'a Block<'a>,\n         DatumBlock { bcx: bcx, datum: datum }\n     }\n }\n-"}, {"sha": "6b42183d42b03ba216662b408206ec342b4e5d7b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e39cd20a4311f6e1377a01462cda5a89a4e67c15", "patch": "@@ -3303,7 +3303,6 @@ pub fn expr_kind(tcx: ctxt,\n         ast::ExprUnary(..) |\n         ast::ExprAddrOf(..) |\n         ast::ExprBinary(..) |\n-        ast::ExprVstore(_, ast::ExprVstoreBox) |\n         ast::ExprVstore(_, ast::ExprVstoreUniq) => {\n             RvalueDatumExpr\n         }"}, {"sha": "43179aa3c928a3350aba1dac35d904a45f4e833d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=e39cd20a4311f6e1377a01462cda5a89a4e67c15", "patch": "@@ -3909,7 +3909,6 @@ pub fn ast_expr_vstore_to_vstore(fcx: @FnCtxt,\n                               -> ty::vstore {\n     match v {\n         ast::ExprVstoreUniq => ty::vstore_uniq,\n-        ast::ExprVstoreBox => ty::vstore_box,\n         ast::ExprVstoreSlice | ast::ExprVstoreMutSlice => {\n             match e.node {\n                 ast::ExprLit(..) |"}, {"sha": "a5fb03f051ea8efb7cc2ee2a12f6eebadef298c5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e39cd20a4311f6e1377a01462cda5a89a4e67c15", "patch": "@@ -417,7 +417,6 @@ pub enum Vstore {\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum ExprVstore {\n     ExprVstoreUniq,                 // ~[1,2,3,4]\n-    ExprVstoreBox,                  // @[1,2,3,4]\n     ExprVstoreSlice,                // &[1,2,3,4]\n     ExprVstoreMutSlice,             // &mut [1,2,3,4]\n }"}, {"sha": "aa33edf28f58ff28b52b1885d2db5780fd5f7895", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e39cd20a4311f6e1377a01462cda5a89a4e67c15", "patch": "@@ -29,7 +29,7 @@ use ast::{ExprField, ExprFnBlock, ExprIf, ExprIndex};\n use ast::{ExprLit, ExprLogLevel, ExprLoop, ExprMac};\n use ast::{ExprMethodCall, ExprParen, ExprPath, ExprProc};\n use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary};\n-use ast::{ExprVec, ExprVstore, ExprVstoreSlice, ExprVstoreBox};\n+use ast::{ExprVec, ExprVstore, ExprVstoreSlice};\n use ast::{ExprVstoreMutSlice, ExprWhile, ExprForLoop, ExternFn, Field, FnDecl};\n use ast::{ExprVstoreUniq, Onceness, Once, Many};\n use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, ForeignMod};\n@@ -2291,16 +2291,18 @@ impl Parser {\n             self.bump();\n             let e = self.parse_prefix_expr();\n             hi = e.span.hi;\n-            // HACK: turn @[...] into a @-vec\n+            // HACK: pretending @[] is a (removed) @-vec\n             ex = match e.node {\n               ExprVec(..) |\n               ExprRepeat(..) => {\n                   self.obsolete(e.span, ObsoleteManagedVec);\n-                  ExprVstore(e, ExprVstoreBox)\n+                  // the above error means that no-one will know we're\n+                  // lying... hopefully.\n+                  ExprVstore(e, ExprVstoreUniq)\n               }\n               ExprLit(lit) if lit_is_str(lit) => {\n                   self.obsolete(self.last_span, ObsoleteManagedString);\n-                  ExprVstore(e, ExprVstoreBox)\n+                  ExprVstore(e, ExprVstoreUniq)\n               }\n               _ => self.mk_unary(UnBox, e)\n             };\n@@ -2819,34 +2821,11 @@ impl Parser {\n           token::AT => {\n             self.bump();\n             let sub = self.parse_pat();\n-            hi = sub.span.hi;\n-            // HACK: parse @\"...\" as a literal of a vstore @str\n-            pat = match sub.node {\n-              PatLit(e) => {\n-                  match e.node {\n-                      ExprLit(lit) if lit_is_str(lit) => {\n-                        let vst = @Expr {\n-                            id: ast::DUMMY_NODE_ID,\n-                            node: ExprVstore(e, ExprVstoreBox),\n-                            span: mk_sp(lo, hi),\n-                        };\n-                        PatLit(vst)\n-                      }\n-                      _ => {\n-                        self.obsolete(self.span, ObsoleteManagedPattern);\n-                        PatUniq(sub)\n-                      }\n-                  }\n-              }\n-              _ => {\n-                self.obsolete(self.span, ObsoleteManagedPattern);\n-                PatUniq(sub)\n-              }\n-            };\n-            hi = self.last_span.hi;\n+            self.obsolete(self.span, ObsoleteManagedPattern);\n+            let hi = self.last_span.hi;\n             return @ast::Pat {\n                 id: ast::DUMMY_NODE_ID,\n-                node: pat,\n+                node: sub,\n                 span: mk_sp(lo, hi)\n             }\n           }"}, {"sha": "cb37bdd72c917769ca45054685158266090f8d24", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e39cd20a4311f6e1377a01462cda5a89a4e67c15/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e39cd20a4311f6e1377a01462cda5a89a4e67c15", "patch": "@@ -1074,7 +1074,6 @@ pub fn print_vstore(s: &mut State, t: ast::Vstore) {\n pub fn print_expr_vstore(s: &mut State, t: ast::ExprVstore) {\n     match t {\n       ast::ExprVstoreUniq => word(&mut s.s, \"~\"),\n-      ast::ExprVstoreBox => word(&mut s.s, \"@\"),\n       ast::ExprVstoreSlice => word(&mut s.s, \"&\"),\n       ast::ExprVstoreMutSlice => {\n         word(&mut s.s, \"&\");"}]}