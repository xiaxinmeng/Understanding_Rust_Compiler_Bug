{"sha": "e50201345ecc91b9eeb284cd04c6b55f9c5ce0fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MDIwMTM0NWVjYzkxYjllZWIyODRjZDA0YzZiNTVmOWM1Y2UwZmQ=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-21T12:47:49Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-21T13:06:19Z"}, "message": "Normalize associated types in types coming from Chalk\n\nFixes #3232.", "tree": {"sha": "bfea7d01b69ecc97d57ba7749c08682a7c82169e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfea7d01b69ecc97d57ba7749c08682a7c82169e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e50201345ecc91b9eeb284cd04c6b55f9c5ce0fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e50201345ecc91b9eeb284cd04c6b55f9c5ce0fd", "html_url": "https://github.com/rust-lang/rust/commit/e50201345ecc91b9eeb284cd04c6b55f9c5ce0fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e50201345ecc91b9eeb284cd04c6b55f9c5ce0fd/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db1bbb11fbe85a5230452359e80535a2169d0929", "url": "https://api.github.com/repos/rust-lang/rust/commits/db1bbb11fbe85a5230452359e80535a2169d0929", "html_url": "https://github.com/rust-lang/rust/commit/db1bbb11fbe85a5230452359e80535a2169d0929"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "2d03c5c33bd9629d230a0c00119de0523bf1d7d7", "filename": "crates/ra_hir_ty/src/infer/unify.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e50201345ecc91b9eeb284cd04c6b55f9c5ce0fd/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50201345ecc91b9eeb284cd04c6b55f9c5ce0fd/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs?ref=e50201345ecc91b9eeb284cd04c6b55f9c5ce0fd", "patch": "@@ -161,7 +161,10 @@ impl<T> Canonicalized<T> {\n         let new_vars = Substs((0..solution.num_vars).map(|_| ctx.table.new_type_var()).collect());\n         for (i, ty) in solution.value.into_iter().enumerate() {\n             let var = self.free_vars[i];\n-            ctx.table.unify(&Ty::Infer(var), &ty.subst_bound_vars(&new_vars));\n+            // eagerly replace projections in the type; we may be getting types\n+            // e.g. from where clauses where this hasn't happened yet\n+            let ty = ctx.normalize_associated_types_in(ty.subst_bound_vars(&new_vars));\n+            ctx.table.unify(&Ty::Infer(var), &ty);\n         }\n     }\n }"}, {"sha": "7d796d0b940ff4ad1310fff5c16e1fd2e984a85c", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e50201345ecc91b9eeb284cd04c6b55f9c5ce0fd/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e50201345ecc91b9eeb284cd04c6b55f9c5ce0fd/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=e50201345ecc91b9eeb284cd04c6b55f9c5ce0fd", "patch": "@@ -1910,3 +1910,45 @@ fn test() -> impl Trait<i32> {\n     \"###\n     );\n }\n+\n+#[test]\n+fn assoc_types_from_bounds() {\n+    assert_snapshot!(\n+        infer(r#\"\n+//- /main.rs\n+#[lang = \"fn_once\"]\n+trait FnOnce<Args> {\n+    type Output;\n+}\n+\n+trait T {\n+    type O;\n+}\n+\n+impl T for () {\n+    type O = ();\n+}\n+\n+fn f<X, F>(_v: F)\n+where\n+    X: T,\n+    F: FnOnce(&X::O),\n+{ }\n+\n+fn main() {\n+    f::<(), _>(|z| { z; });\n+}\n+\"#),\n+        @r###\"\n+    [147; 149) '_v': F\n+    [192; 195) '{ }': ()\n+    [207; 238) '{     ... }); }': ()\n+    [213; 223) 'f::<(), _>': fn f<(), |&()| -> ()>(|&()| -> ()) -> ()\n+    [213; 235) 'f::<()... z; })': ()\n+    [224; 234) '|z| { z; }': |&()| -> ()\n+    [225; 226) 'z': &()\n+    [228; 234) '{ z; }': ()\n+    [230; 231) 'z': &()\n+    \"###\n+    );\n+}"}]}