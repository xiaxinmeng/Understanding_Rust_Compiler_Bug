{"sha": "90cbbb2da3989a437a36c075396331f81a0e3b30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwY2JiYjJkYTM5ODlhNDM3YTM2YzA3NTM5NjMzMWY4MWEwZTNiMzA=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-11T03:50:20Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-31T15:05:42Z"}, "message": "Avoid to suggest using label", "tree": {"sha": "07c454ad3a3b5cc4809fa54129cdf71f87ec638c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07c454ad3a3b5cc4809fa54129cdf71f87ec638c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90cbbb2da3989a437a36c075396331f81a0e3b30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90cbbb2da3989a437a36c075396331f81a0e3b30", "html_url": "https://github.com/rust-lang/rust/commit/90cbbb2da3989a437a36c075396331f81a0e3b30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90cbbb2da3989a437a36c075396331f81a0e3b30/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bb0f16552e8eab45025c7f4581b8ae5edca3219", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb0f16552e8eab45025c7f4581b8ae5edca3219", "html_url": "https://github.com/rust-lang/rust/commit/5bb0f16552e8eab45025c7f4581b8ae5edca3219"}], "stats": {"total": 78, "additions": 26, "deletions": 52}, "files": [{"sha": "e1440e6832751e33ceedccbfae660f592611c3d0", "filename": "clippy_lints/src/methods/excessive_for_each.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/90cbbb2da3989a437a36c075396331f81a0e3b30/clippy_lints%2Fsrc%2Fmethods%2Fexcessive_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90cbbb2da3989a437a36c075396331f81a0e3b30/clippy_lints%2Fsrc%2Fmethods%2Fexcessive_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexcessive_for_each.rs?ref=90cbbb2da3989a437a36c075396331f81a0e3b30", "patch": "@@ -31,26 +31,20 @@ pub(super) fn lint(cx: &LateContext<'_>, expr: &'tcx Expr<'_>, args: &[&[Expr<'_\n         let body = cx.tcx.hir().body(body_id);\n         if let ExprKind::Block(..) = body.value.kind;\n         then {\n-            let mut ret_span_collector = RetSpanCollector::new();\n-            ret_span_collector.visit_expr(&body.value);\n-\n-            let label = \"'outer\";\n-            let loop_label = if ret_span_collector.need_label {\n-                format!(\"{}: \", label)\n-            } else {\n-                \"\".to_string()\n-            };\n+            let mut ret_collector = RetCollector::new();\n+            ret_collector.visit_expr(&body.value);\n+\n+            // Skip the lint if `return` is used in `Loop` to avoid a suggest using `'label`.\n+            if ret_collector.ret_in_loop {\n+                return;\n+            }\n+\n             let sugg =\n-                format!(\"{}for {} in {} {{ .. }}\", loop_label, snippet(cx, body.params[0].pat.span, \"\"), snippet(cx, for_each_receiver.span, \"\"));\n+                format!(\"for {} in {} {{ .. }}\", snippet(cx, body.params[0].pat.span, \"\"), snippet(cx, for_each_receiver.span, \"\"));\n \n             let mut notes = vec![];\n-            for (span, need_label) in ret_span_collector.spans {\n-                let cont_label = if need_label {\n-                    format!(\" {}\", label)\n-                } else {\n-                    \"\".to_string()\n-                };\n-                let note = format!(\"change `return` to `continue{}` in the loop body\", cont_label);\n+            for span in ret_collector.spans {\n+                let note = format!(\"change `return` to `continue` in the loop body\");\n                 notes.push((span, note));\n             }\n \n@@ -100,34 +94,37 @@ fn is_target_ty(cx: &LateContext<'_>, expr_ty: Ty<'_>) -> bool {\n     false\n }\n \n-/// Collect spans of `return` in the closure body.\n-struct RetSpanCollector {\n-    spans: Vec<(Span, bool)>,\n+/// This type plays two roles.\n+/// 1. Collect spans of `return` in the closure body.\n+/// 2. Detect use of `return` in `Loop` in the closure body.\n+struct RetCollector {\n+    spans: Vec<Span>,\n+    ret_in_loop: bool,\n+\n     loop_depth: u16,\n-    need_label: bool,\n }\n \n-impl RetSpanCollector {\n+impl RetCollector {\n     fn new() -> Self {\n         Self {\n             spans: Vec::new(),\n+            ret_in_loop: false,\n             loop_depth: 0,\n-            need_label: false,\n         }\n     }\n }\n \n-impl<'tcx> Visitor<'tcx> for RetSpanCollector {\n+impl<'tcx> Visitor<'tcx> for RetCollector {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, expr: &Expr<'_>) {\n         match expr.kind {\n             ExprKind::Ret(..) => {\n-                if self.loop_depth > 0 && !self.need_label {\n-                    self.need_label = true\n+                if self.loop_depth > 0 && !self.ret_in_loop {\n+                    self.ret_in_loop = true\n                 }\n \n-                self.spans.push((expr.span, self.loop_depth > 0))\n+                self.spans.push(expr.span)\n             },\n \n             ExprKind::Loop(..) => {"}, {"sha": "0800bef71e9c8f91c6d2022781cff7bea58d308f", "filename": "tests/ui/excessive_for_each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90cbbb2da3989a437a36c075396331f81a0e3b30/tests%2Fui%2Fexcessive_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90cbbb2da3989a437a36c075396331f81a0e3b30/tests%2Fui%2Fexcessive_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_for_each.rs?ref=90cbbb2da3989a437a36c075396331f81a0e3b30", "patch": "@@ -82,7 +82,7 @@ fn main() {\n         }\n     });\n \n-    // Should trigger this lint with notes that say \"change `return` to `continue 'outer`\".\n+    // Should NOT trigger this lint in case `return` is used in `Loop` of the closure.\n     vec.iter().for_each(|v| {\n         for i in 0..*v {\n             if i == 10 {"}, {"sha": "f5799484e03472ea0ee2c8709c035d6b8628c817", "filename": "tests/ui/excessive_for_each.stderr", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/90cbbb2da3989a437a36c075396331f81a0e3b30/tests%2Fui%2Fexcessive_for_each.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90cbbb2da3989a437a36c075396331f81a0e3b30/tests%2Fui%2Fexcessive_for_each.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_for_each.stderr?ref=90cbbb2da3989a437a36c075396331f81a0e3b30", "patch": "@@ -122,28 +122,5 @@ note: change `return` to `continue` in the loop body\n LL |             return;\n    |             ^^^^^^\n \n-error: excessive use of `for_each`\n-  --> $DIR/excessive_for_each.rs:86:5\n-   |\n-LL | /     vec.iter().for_each(|v| {\n-LL | |         for i in 0..*v {\n-LL | |             if i == 10 {\n-LL | |                 return;\n-...  |\n-LL | |         }\n-LL | |     });\n-   | |______^ help: try: `'outer: for v in vec.iter() { .. }`\n-   |\n-note: change `return` to `continue 'outer` in the loop body\n-  --> $DIR/excessive_for_each.rs:89:17\n-   |\n-LL |                 return;\n-   |                 ^^^^^^\n-note: change `return` to `continue` in the loop body\n-  --> $DIR/excessive_for_each.rs:95:13\n-   |\n-LL |             return;\n-   |             ^^^^^^\n-\n-error: aborting due to 15 previous errors\n+error: aborting due to 14 previous errors\n "}]}