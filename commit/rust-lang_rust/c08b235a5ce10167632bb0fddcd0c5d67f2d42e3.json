{"sha": "c08b235a5ce10167632bb0fddcd0c5d67f2d42e3", "node_id": "C_kwDOAAsO6NoAKGMwOGIyMzVhNWNlMTAxNjc2MzJiYjBmZGRjZDBjNWQ2N2YyZDQyZTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-11T17:49:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-11T17:49:22Z"}, "message": "Auto merge of #97996 - matthiaskrgr:rollup-bvbjlid, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97904 (Small grammar fix in the compile_error documentation)\n - #97943 (line 1352, change `self` to `*self`, other to `*other`)\n - #97969 (Make -Cpasses= only apply to pre-link optimization)\n - #97990 (Add more eslint checks)\n - #97994 (feat(fix): update some links in `hir.rs`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3fda5c65937c2aa5d1ced2e18e559a2589744ef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fda5c65937c2aa5d1ced2e18e559a2589744ef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3", "html_url": "https://github.com/rust-lang/rust/commit/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "url": "https://api.github.com/repos/rust-lang/rust/commits/85a26a9a96d3d0b1846cee97abbe6714dcbc6483", "html_url": "https://github.com/rust-lang/rust/commit/85a26a9a96d3d0b1846cee97abbe6714dcbc6483"}, {"sha": "178cffe5634fa9c1207c2c7043830bec722a9d36", "url": "https://api.github.com/repos/rust-lang/rust/commits/178cffe5634fa9c1207c2c7043830bec722a9d36", "html_url": "https://github.com/rust-lang/rust/commit/178cffe5634fa9c1207c2c7043830bec722a9d36"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "3864db9ffc1bca2ea35a7de9425411636b2c7ae6", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=c08b235a5ce10167632bb0fddcd0c5d67f2d42e3", "patch": "@@ -463,7 +463,7 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n     let llvm_selfprofiler =\n         llvm_profiler.as_mut().map(|s| s as *mut _ as *mut c_void).unwrap_or(std::ptr::null_mut());\n \n-    let extra_passes = config.passes.join(\",\");\n+    let extra_passes = if !is_lto { config.passes.join(\",\") } else { \"\".to_string() };\n \n     let llvm_plugins = config.llvm_plugins.join(\",\");\n "}, {"sha": "9fce8fac56ffd37b6cc091cb2a6387c2b8010c65", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c08b235a5ce10167632bb0fddcd0c5d67f2d42e3", "patch": "@@ -1885,7 +1885,7 @@ pub enum ExprKind<'hir> {\n     /// To resolve the called method to a `DefId`, call [`type_dependent_def_id`] with\n     /// the `hir_id` of the `MethodCall` node itself.\n     ///\n-    /// [`type_dependent_def_id`]: ../ty/struct.TypeckResults.html#method.type_dependent_def_id\n+    /// [`type_dependent_def_id`]: ../../rustc_middle/ty/struct.TypeckResults.html#method.type_dependent_def_id\n     MethodCall(&'hir PathSegment<'hir>, &'hir [Expr<'hir>], Span),\n     /// A tuple (e.g., `(a, b, c, d)`).\n     Tup(&'hir [Expr<'hir>]),\n@@ -1982,7 +1982,7 @@ pub enum ExprKind<'hir> {\n ///\n /// To resolve the path to a `DefId`, call [`qpath_res`].\n ///\n-/// [`qpath_res`]: ../rustc_middle/ty/struct.TypeckResults.html#method.qpath_res\n+/// [`qpath_res`]: ../../rustc_middle/ty/struct.TypeckResults.html#method.qpath_res\n #[derive(Debug, HashStable_Generic)]\n pub enum QPath<'hir> {\n     /// Path to a definition, optionally \"fully-qualified\" with a `Self`"}, {"sha": "81aed8afd5b516655756052cb3c9e80a3d9d2131", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=c08b235a5ce10167632bb0fddcd0c5d67f2d42e3", "patch": "@@ -1349,7 +1349,7 @@ mod impls {\n             impl PartialOrd for $t {\n                 #[inline]\n                 fn partial_cmp(&self, other: &$t) -> Option<Ordering> {\n-                    match (self <= other, self >= other) {\n+                    match (*self <= *other, *self >= *other) {\n                         (false, false) => None,\n                         (false, true) => Some(Greater),\n                         (true, false) => Some(Less),"}, {"sha": "673a39c298f7d2f6ae4f14ff7b32a0650e1f535c", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=c08b235a5ce10167632bb0fddcd0c5d67f2d42e3", "patch": "@@ -795,7 +795,7 @@ pub(crate) mod builtin {\n     ///\n     /// Two such examples are macros and `#[cfg]` environments.\n     ///\n-    /// Emit better compiler error if a macro is passed invalid values. Without the final branch,\n+    /// Emit a better compiler error if a macro is passed invalid values. Without the final branch,\n     /// the compiler would still emit an error, but the error's message would not mention the two\n     /// valid values.\n     ///\n@@ -812,7 +812,7 @@ pub(crate) mod builtin {\n     /// // ^ will fail at compile time with message \"This macro only accepts `foo` or `bar`\"\n     /// ```\n     ///\n-    /// Emit compiler error if one of a number of features isn't available.\n+    /// Emit a compiler error if one of a number of features isn't available.\n     ///\n     /// ```compile_fail\n     /// #[cfg(not(any(feature = \"foo\", feature = \"bar\")))]"}, {"sha": "fc8b5678080c1c811f5a2e0167a3b77d36768fc8", "filename": "src/librustdoc/html/static/.eslintrc.js", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/c08b235a5ce10167632bb0fddcd0c5d67f2d42e3/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2F.eslintrc.js?ref=c08b235a5ce10167632bb0fddcd0c5d67f2d42e3", "patch": "@@ -84,5 +84,10 @@ module.exports = {\n         \"no-implicit-globals\": \"error\",\n         \"no-implied-eval\": \"error\",\n         \"no-label-var\": \"error\",\n+        \"no-lonely-if\": \"error\",\n+        \"no-mixed-operators\": \"error\",\n+        \"no-multi-assign\": \"error\",\n+        \"no-return-assign\": \"error\",\n+        \"no-script-url\": \"error\",\n     }\n };"}]}