{"sha": "4bd30785eb6e55f317b41b7c278f438807eeb174", "node_id": "C_kwDOAAsO6NoAKDRiZDMwNzg1ZWI2ZTU1ZjMxN2I0MWI3YzI3OGY0Mzg4MDdlZWIxNzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-06T05:58:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-06T05:58:27Z"}, "message": "Auto merge of #102726 - matthiaskrgr:rollup-2ghn38b, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #102672 (rustdoc: remove unused CSS class `in-band`)\n - #102693 (Revert \"Use getentropy when possible on all Apple platforms\")\n - #102694 (Suggest calling method if fn does not exist)\n - #102708 (Suggest `==` to wrong assign expr)\n - #102710 (Add test for issue 82633)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "33415b4276d016831097b86178f33af60250276f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33415b4276d016831097b86178f33af60250276f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bd30785eb6e55f317b41b7c278f438807eeb174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd30785eb6e55f317b41b7c278f438807eeb174", "html_url": "https://github.com/rust-lang/rust/commit/4bd30785eb6e55f317b41b7c278f438807eeb174", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bd30785eb6e55f317b41b7c278f438807eeb174/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0152393048c4eb6c6d2aec63e9899cc86a269b44", "url": "https://api.github.com/repos/rust-lang/rust/commits/0152393048c4eb6c6d2aec63e9899cc86a269b44", "html_url": "https://github.com/rust-lang/rust/commit/0152393048c4eb6c6d2aec63e9899cc86a269b44"}, {"sha": "b7642fb97c0051754e4e07bacd3a72bd126de7f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7642fb97c0051754e4e07bacd3a72bd126de7f7", "html_url": "https://github.com/rust-lang/rust/commit/b7642fb97c0051754e4e07bacd3a72bd126de7f7"}], "stats": {"total": 1405, "additions": 903, "deletions": 502}, "files": [{"sha": "94a493992e59339af62d8cd02d278763129dc783", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -460,6 +460,7 @@ pub enum StashKey {\n     ItemNoType,\n     UnderscoreForArrayLengths,\n     EarlySyntaxWarning,\n+    CallIntoMethod,\n }\n \n fn default_track_diagnostic(_: &Diagnostic) {}"}, {"sha": "f0a7c910906110fec97a1dce9ce3b64371805abf", "filename": "compiler/rustc_hir_analysis/src/check/callee.rs", "status": "modified", "additions": 136, "deletions": 6, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcallee.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,8 +1,10 @@\n+use super::method::probe::{IsSuggestion, Mode, ProbeScope};\n use super::method::MethodCallee;\n use super::{DefIdOrName, Expectation, FnCtxt, TupleArgumentsFlag};\n use crate::type_error_struct;\n \n-use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n+use rustc_ast::util::parser::PREC_POSTFIX;\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{self, Namespace, Res};\n use rustc_hir::def_id::DefId;\n@@ -60,6 +62,7 @@ pub fn check_legal_trait_for_method_call(\n     }\n }\n \n+#[derive(Debug)]\n enum CallStep<'tcx> {\n     Builtin(Ty<'tcx>),\n     DeferredClosure(LocalDefId, ty::FnSig<'tcx>),\n@@ -188,6 +191,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return None;\n             }\n \n+            ty::Error(_) => {\n+                return None;\n+            }\n+\n             _ => {}\n         }\n \n@@ -394,6 +401,31 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ty::FnPtr(sig) => (sig, None),\n             _ => {\n+                if let hir::ExprKind::Path(hir::QPath::Resolved(_, path)) = &callee_expr.kind\n+                    && let [segment] = path.segments\n+                    && let Some(mut diag) = self\n+                        .tcx\n+                        .sess\n+                        .diagnostic()\n+                        .steal_diagnostic(segment.ident.span, StashKey::CallIntoMethod)\n+                {\n+                    // Try suggesting `foo(a)` -> `a.foo()` if possible.\n+                    if let Some(ty) =\n+                        self.suggest_call_as_method(\n+                            &mut diag,\n+                            segment,\n+                            arg_exprs,\n+                            call_expr,\n+                            expected\n+                        )\n+                    {\n+                        diag.emit();\n+                        return ty;\n+                    } else {\n+                        diag.emit();\n+                    }\n+                }\n+\n                 self.report_invalid_callee(call_expr, callee_expr, callee_ty, arg_exprs);\n \n                 // This is the \"default\" function signature, used in case of error.\n@@ -441,6 +473,105 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         fn_sig.output()\n     }\n \n+    /// Attempts to reinterpret `method(rcvr, args...)` as `rcvr.method(args...)`\n+    /// and suggesting the fix if the method probe is successful.\n+    fn suggest_call_as_method(\n+        &self,\n+        diag: &mut Diagnostic,\n+        segment: &'tcx hir::PathSegment<'tcx>,\n+        arg_exprs: &'tcx [hir::Expr<'tcx>],\n+        call_expr: &'tcx hir::Expr<'tcx>,\n+        expected: Expectation<'tcx>,\n+    ) -> Option<Ty<'tcx>> {\n+        if let [callee_expr, rest @ ..] = arg_exprs {\n+            let callee_ty = self.check_expr(callee_expr);\n+            // First, do a probe with `IsSuggestion(true)` to avoid emitting\n+            // any strange errors. If it's successful, then we'll do a true\n+            // method lookup.\n+            let Ok(pick) = self\n+            .probe_for_name(\n+                call_expr.span,\n+                Mode::MethodCall,\n+                segment.ident,\n+                IsSuggestion(true),\n+                callee_ty,\n+                call_expr.hir_id,\n+                // We didn't record the in scope traits during late resolution\n+                // so we need to probe AllTraits unfortunately\n+                ProbeScope::AllTraits,\n+            ) else {\n+                return None;\n+            };\n+\n+            let pick = self.confirm_method(\n+                call_expr.span,\n+                callee_expr,\n+                call_expr,\n+                callee_ty,\n+                pick,\n+                segment,\n+            );\n+            if pick.illegal_sized_bound.is_some() {\n+                return None;\n+            }\n+\n+            let up_to_rcvr_span = segment.ident.span.until(callee_expr.span);\n+            let rest_span = callee_expr.span.shrink_to_hi().to(call_expr.span.shrink_to_hi());\n+            let rest_snippet = if let Some(first) = rest.first() {\n+                self.tcx\n+                    .sess\n+                    .source_map()\n+                    .span_to_snippet(first.span.to(call_expr.span.shrink_to_hi()))\n+            } else {\n+                Ok(\")\".to_string())\n+            };\n+\n+            if let Ok(rest_snippet) = rest_snippet {\n+                let sugg = if callee_expr.precedence().order() >= PREC_POSTFIX {\n+                    vec![\n+                        (up_to_rcvr_span, \"\".to_string()),\n+                        (rest_span, format!(\".{}({rest_snippet}\", segment.ident)),\n+                    ]\n+                } else {\n+                    vec![\n+                        (up_to_rcvr_span, \"(\".to_string()),\n+                        (rest_span, format!(\").{}({rest_snippet}\", segment.ident)),\n+                    ]\n+                };\n+                let self_ty = self.resolve_vars_if_possible(pick.callee.sig.inputs()[0]);\n+                diag.multipart_suggestion(\n+                    format!(\n+                        \"use the `.` operator to call the method `{}{}` on `{self_ty}`\",\n+                        self.tcx\n+                            .associated_item(pick.callee.def_id)\n+                            .trait_container(self.tcx)\n+                            .map_or_else(\n+                                || String::new(),\n+                                |trait_def_id| self.tcx.def_path_str(trait_def_id) + \"::\"\n+                            ),\n+                        segment.ident\n+                    ),\n+                    sugg,\n+                    Applicability::MaybeIncorrect,\n+                );\n+\n+                // Let's check the method fully now\n+                let return_ty = self.check_method_argument_types(\n+                    segment.ident.span,\n+                    call_expr,\n+                    Ok(pick.callee),\n+                    rest,\n+                    TupleArgumentsFlag::DontTupleArguments,\n+                    expected,\n+                );\n+\n+                return Some(return_ty);\n+            }\n+        }\n+\n+        None\n+    }\n+\n     fn report_invalid_callee(\n         &self,\n         call_expr: &'tcx hir::Expr<'tcx>,\n@@ -459,10 +590,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 def::CtorOf::Struct => \"struct\",\n                 def::CtorOf::Variant => \"enum variant\",\n             };\n-            let removal_span =\n-                callee_expr.span.shrink_to_hi().to(call_expr.span.shrink_to_hi());\n-            unit_variant =\n-                Some((removal_span, descr, rustc_hir_pretty::qpath_to_string(qpath)));\n+            let removal_span = callee_expr.span.shrink_to_hi().to(call_expr.span.shrink_to_hi());\n+            unit_variant = Some((removal_span, descr, rustc_hir_pretty::qpath_to_string(qpath)));\n         }\n \n         let callee_ty = self.resolve_vars_if_possible(callee_ty);\n@@ -525,7 +654,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         if !self.maybe_suggest_bad_array_definition(&mut err, call_expr, callee_expr) {\n-            if let Some((maybe_def, output_ty, _)) = self.extract_callable_info(callee_expr, callee_ty)\n+            if let Some((maybe_def, output_ty, _)) =\n+                self.extract_callable_info(callee_expr, callee_ty)\n                 && !self.type_is_sized_modulo_regions(self.param_env, output_ty, callee_expr.span)\n             {\n                 let descr = match maybe_def {"}, {"sha": "5effa102e87cacd1602bc01de4eb8fe27da12bd2", "filename": "compiler/rustc_hir_analysis/src/check/expr.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1045,6 +1045,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let rhs_ty = self.check_expr(&rhs);\n             let (applicability, eq) = if self.can_coerce(rhs_ty, lhs_ty) {\n                 (Applicability::MachineApplicable, true)\n+            } else if let ExprKind::Binary(\n+                Spanned { node: hir::BinOpKind::And | hir::BinOpKind::Or, .. },\n+                _,\n+                rhs_expr,\n+            ) = lhs.kind\n+            {\n+                let actual_lhs_ty = self.check_expr(&rhs_expr);\n+                (Applicability::MaybeIncorrect, self.can_coerce(rhs_ty, actual_lhs_ty))\n             } else {\n                 (Applicability::MaybeIncorrect, false)\n             };\n@@ -1067,9 +1075,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             if eq {\n                 err.span_suggestion_verbose(\n-                    span,\n+                    span.shrink_to_hi(),\n                     \"you might have meant to compare for equality\",\n-                    \"==\",\n+                    '=',\n                     applicability,\n                 );\n             }"}, {"sha": "98982240af27f114b3d62e8546c672b40d14839d", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -120,14 +120,15 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn report_with_use_injections(&mut self, krate: &Crate) {\n-        for UseError { mut err, candidates, def_id, instead, suggestion, path } in\n+        for UseError { mut err, candidates, def_id, instead, suggestion, path, is_call } in\n             self.use_injections.drain(..)\n         {\n             let (span, found_use) = if let Some(def_id) = def_id.as_local() {\n                 UsePlacementFinder::check(krate, self.def_id_to_node_id[def_id])\n             } else {\n                 (None, FoundUse::No)\n             };\n+\n             if !candidates.is_empty() {\n                 show_candidates(\n                     &self.session,\n@@ -140,10 +141,15 @@ impl<'a> Resolver<'a> {\n                     IsPattern::No,\n                     path,\n                 );\n+                err.emit();\n             } else if let Some((span, msg, sugg, appl)) = suggestion {\n                 err.span_suggestion(span, msg, sugg, appl);\n+                err.emit();\n+            } else if let [segment] = path.as_slice() && is_call {\n+                err.stash(segment.ident.span, rustc_errors::StashKey::CallIntoMethod);\n+            } else {\n+                err.emit();\n             }\n-            err.emit();\n         }\n     }\n "}, {"sha": "431507e8e0f63fb8be02d9ebba98aafe1501cbf2", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -3263,6 +3263,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     instead,\n                     suggestion,\n                     path: path.into(),\n+                    is_call: source.is_call(),\n                 });\n             }\n \n@@ -3327,6 +3328,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     instead: false,\n                     suggestion: None,\n                     path: path.into(),\n+                    is_call: source.is_call(),\n                 });\n             } else {\n                 err.cancel();"}, {"sha": "9173c3692ce6ced2fa88309ced7bf016590aa5f7", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -674,6 +674,8 @@ struct UseError<'a> {\n     /// Path `Segment`s at the place of use that failed. Used for accurate suggestion after telling\n     /// the user to import the item directly.\n     path: Vec<Segment>,\n+    /// Whether the expected source is a call\n+    is_call: bool,\n }\n \n #[derive(Clone, Copy, PartialEq, Debug)]"}, {"sha": "a6fe07873d7ee4263b9362d9a5dda75c35916582", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 38, "deletions": 56, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -137,9 +137,11 @@ mod imp {\n     }\n }\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n+#[cfg(target_os = \"macos\")]\n mod imp {\n-    use crate::io;\n+    use crate::fs::File;\n+    use crate::io::Read;\n+    use crate::sys::os::errno;\n     use crate::sys::weak::weak;\n     use libc::{c_int, c_void, size_t};\n \n@@ -153,72 +155,22 @@ mod imp {\n                 for s in v.chunks_mut(256) {\n                     let ret = unsafe { f(s.as_mut_ptr() as *mut c_void, s.len()) };\n                     if ret == -1 {\n-                        panic!(\"unexpected getentropy error: {}\", io::Error::last_os_error());\n+                        panic!(\"unexpected getentropy error: {}\", errno());\n                     }\n                 }\n                 true\n             })\n             .unwrap_or(false)\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    fn fallback_fill_bytes(v: &mut [u8]) {\n-        use crate::fs::File;\n-        use crate::io::Read;\n-\n-        let mut file = File::open(\"/dev/urandom\").expect(\"failed to open /dev/urandom\");\n-        file.read_exact(v).expect(\"failed to read /dev/urandom\")\n-    }\n-\n-    // On iOS and MacOS `SecRandomCopyBytes` calls `CCRandomCopyBytes` with\n-    // `kCCRandomDefault`. `CCRandomCopyBytes` manages a CSPRNG which is seeded\n-    // from `/dev/random` and which runs on its own thread accessed via GCD.\n-    //\n-    // This is very heavyweight compared to the alternatives, but they may not be usable:\n-    // - `getentropy` was added in iOS 10, but we support a minimum of iOS 7\n-    // - `/dev/urandom` is not accessible inside the iOS app sandbox.\n-    //\n-    // Therefore `SecRandomCopyBytes` is only used on older iOS versions where no\n-    // better options are present.\n-    #[cfg(target_os = \"ios\")]\n-    fn fallback_fill_bytes(v: &mut [u8]) {\n-        use crate::ptr;\n-\n-        enum SecRandom {}\n-\n-        #[allow(non_upper_case_globals)]\n-        const kSecRandomDefault: *const SecRandom = ptr::null();\n-\n-        extern \"C\" {\n-            fn SecRandomCopyBytes(rnd: *const SecRandom, count: size_t, bytes: *mut u8) -> c_int;\n-        }\n-\n-        let ret = unsafe { SecRandomCopyBytes(kSecRandomDefault, v.len(), v.as_mut_ptr()) };\n-        if ret == -1 {\n-            panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n-        }\n-    }\n-\n-    // All supported versions of watchOS (>= 5) have support for `getentropy`.\n-    #[cfg(target_os = \"watchos\")]\n-    #[cold]\n-    fn fallback_fill_bytes(_: &mut [u8]) {\n-        unreachable!()\n-    }\n-\n     pub fn fill_bytes(v: &mut [u8]) {\n         if getentropy_fill_bytes(v) {\n             return;\n         }\n \n-        // Older macOS versions (< 10.12) don't support `getentropy`. Fallback to\n-        // reading from `/dev/urandom` on these systems.\n-        //\n-        // Older iOS versions (< 10) don't support it either. Fallback to\n-        // `SecRandomCopyBytes` on these systems. On watchOS, this is unreachable\n-        // because the minimum supported version is 5 while `getentropy` became accessible\n-        // in 3.\n-        fallback_fill_bytes(v)\n+        // for older macos which doesn't support getentropy\n+        let mut file = File::open(\"/dev/urandom\").expect(\"failed to open /dev/urandom\");\n+        file.read_exact(v).expect(\"failed to read /dev/urandom\")\n     }\n }\n \n@@ -237,6 +189,36 @@ mod imp {\n     }\n }\n \n+// On iOS and MacOS `SecRandomCopyBytes` calls `CCRandomCopyBytes` with\n+// `kCCRandomDefault`. `CCRandomCopyBytes` manages a CSPRNG which is seeded\n+// from `/dev/random` and which runs on its own thread accessed via GCD.\n+// This seems needlessly heavyweight for the purposes of generating two u64s\n+// once per thread in `hashmap_random_keys`. Therefore `SecRandomCopyBytes` is\n+// only used on iOS where direct access to `/dev/urandom` is blocked by the\n+// sandbox.\n+#[cfg(any(target_os = \"ios\", target_os = \"watchos\"))]\n+mod imp {\n+    use crate::io;\n+    use crate::ptr;\n+    use libc::{c_int, size_t};\n+\n+    enum SecRandom {}\n+\n+    #[allow(non_upper_case_globals)]\n+    const kSecRandomDefault: *const SecRandom = ptr::null();\n+\n+    extern \"C\" {\n+        fn SecRandomCopyBytes(rnd: *const SecRandom, count: size_t, bytes: *mut u8) -> c_int;\n+    }\n+\n+    pub fn fill_bytes(v: &mut [u8]) {\n+        let ret = unsafe { SecRandomCopyBytes(kSecRandomDefault, v.len(), v.as_mut_ptr()) };\n+        if ret == -1 {\n+            panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n+        }\n+    }\n+}\n+\n #[cfg(any(target_os = \"freebsd\", target_os = \"netbsd\"))]\n mod imp {\n     use crate::ptr;"}, {"sha": "902b9522429903c1dca388e31222ecf133d83b12", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -634,9 +634,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n                 write!(\n                     buf,\n                     \"<div class=\\\"main-heading\\\">\\\n-                     <h1 class=\\\"fqn\\\">\\\n-                         <span class=\\\"in-band\\\">Rustdoc settings</span>\\\n-                     </h1>\\\n+                     <h1 class=\\\"fqn\\\">Rustdoc settings</h1>\\\n                      <span class=\\\"out-of-band\\\">\\\n                          <a id=\\\"back\\\" href=\\\"javascript:void(0)\\\" onclick=\\\"history.back();\\\">\\\n                             Back\\"}, {"sha": "4bbb322d3701cf864f09202bd85be47383c30e38", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -364,11 +364,7 @@ impl AllTypes {\n             }\n         }\n \n-        f.write_str(\n-            \"<h1 class=\\\"fqn\\\">\\\n-                 <span class=\\\"in-band\\\">List of all items</span>\\\n-             </h1>\",\n-        );\n+        f.write_str(\"<h1 class=\\\"fqn\\\">List of all items</h1>\");\n         // Note: print_entries does not escape the title, because we know the current set of titles\n         // doesn't require escaping.\n         print_entries(f, &self.structs, ItemSection::Structs);\n@@ -398,9 +394,7 @@ fn scrape_examples_help(shared: &SharedContext<'_>) -> String {\n     let mut ids = IdMap::default();\n     format!(\n         \"<div class=\\\"main-heading\\\">\\\n-            <h1 class=\\\"fqn\\\">\\\n-                <span class=\\\"in-band\\\">About scraped examples</span>\\\n-            </h1>\\\n+            <h1 class=\\\"fqn\\\">About scraped examples</h1>\\\n         </div>\\\n         <div>{}</div>\",\n         Markdown {"}, {"sha": "85f63c985b37663d1e7d42137de337cac8ba1aed", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -517,9 +517,7 @@ if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};\n             };\n \n             let content = format!(\n-                \"<h1 class=\\\"fqn\\\">\\\n-                     <span class=\\\"in-band\\\">List of all crates</span>\\\n-                </h1><ul class=\\\"all-items\\\">{}</ul>\",\n+                \"<h1 class=\\\"fqn\\\">List of all crates</h1><ul class=\\\"all-items\\\">{}</ul>\",\n                 krates\n                     .iter()\n                     .map(|s| {"}, {"sha": "b86b8f9dbf8646afa921ff142aea14f444289c77", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -148,6 +148,13 @@ h1, h2, h3, h4 {\n h1.fqn {\n \tmargin: 0;\n \tpadding: 0;\n+\tflex-grow: 1;\n+\t/* We use overflow-wrap: break-word for Safari, which doesn't recognize\n+\t   `anywhere`: https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap */\n+\toverflow-wrap: break-word;\n+\t/* Then override it with `anywhere`, which is required to make non-Safari browsers break\n+\t   more aggressively when we want them to. */\n+\toverflow-wrap: anywhere;\n }\n .main-heading {\n \tdisplay: flex;\n@@ -214,7 +221,7 @@ pre.rust a,\n .sidebar h2 a,\n .sidebar h3 a,\n .mobile-topbar h2 a,\n-.in-band a,\n+h1.fqn a,\n .search-results a,\n .module-item .stab,\n .import-item .stab,\n@@ -654,19 +661,6 @@ pre.example-line-numbers {\n \tfont-weight: normal;\n }\n \n-.in-band {\n-\tflex-grow: 1;\n-\tmargin: 0px;\n-\tpadding: 0px;\n-\t/* We use overflow-wrap: break-word for Safari, which doesn't recognize\n-\t   `anywhere`: https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap */\n-\toverflow-wrap: break-word;\n-\t/* Then override it with `anywhere`, which is required to make non-Safari browsers break\n-\t   more aggressively when we want them to. */\n-\toverflow-wrap: anywhere;\n-\tbackground-color: var(--main-background-color);\n-}\n-\n .docblock code, .docblock-short code,\n pre, .rustdoc.source .example-wrap {\n \tbackground-color: var(--code-block-background-color);\n@@ -752,7 +746,7 @@ a {\n \tdisplay: initial;\n }\n \n-.in-band:hover > .anchor, .impl:hover > .anchor, .method.trait-impl:hover > .anchor,\n+.impl:hover > .anchor, .method.trait-impl:hover > .anchor,\n .type.trait-impl:hover > .anchor, .associatedconstant.trait-impl:hover > .anchor,\n .associatedtype.trait-impl:hover > .anchor {\n \tdisplay: inline-block;"}, {"sha": "6d21ffdc792543e06a8b0cf82afd55ce2aee3ad8", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -522,7 +522,7 @@ function loadCss(cssFileName) {\n         }\n \n         let currentNbImpls = implementors.getElementsByClassName(\"impl\").length;\n-        const traitName = document.querySelector(\"h1.fqn > .in-band > .trait\").textContent;\n+        const traitName = document.querySelector(\"h1.fqn > .trait\").textContent;\n         const baseIdName = \"impl-\" + traitName + \"-\";\n         const libs = Object.getOwnPropertyNames(imp);\n         // We don't want to include impls from this JS file, when the HTML already has them."}, {"sha": "b6ce3ea3dee996972e2f2dcf2d932a1bb5255088", "filename": "src/librustdoc/html/templates/print_item.html", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,18 +1,16 @@\n <div class=\"main-heading\"> {#- -#}\n     <h1 class=\"fqn\"> {#- -#}\n-        <span class=\"in-band\"> {#- -#}\n-            {{-typ-}}\n-            {#- The breadcrumbs of the item path, like std::string -#}\n-            {%- for component in path_components -%}\n-            <a href=\"{{component.path|safe}}index.html\">{{component.name}}</a>::<wbr>\n-            {%- endfor -%}\n-            <a class=\"{{item_type}}\" href=\"#\">{{name}}</a> {#- -#}\n-            <button id=\"copy-path\" onclick=\"copy_path(this)\" title=\"Copy item path to clipboard\"> {#- -#}\n-                <img src=\"{{static_root_path|safe}}clipboard{{page.resource_suffix}}.svg\" {# -#}\n-                    width=\"19\" height=\"18\" {# -#}\n-                    alt=\"Copy item path\"> {#- -#}\n-            </button> {#- -#}\n-        </span> {#- -#}\n+        {{-typ-}}\n+        {#- The breadcrumbs of the item path, like std::string -#}\n+        {%- for component in path_components -%}\n+        <a href=\"{{component.path|safe}}index.html\">{{component.name}}</a>::<wbr>\n+        {%- endfor -%}\n+        <a class=\"{{item_type}}\" href=\"#\">{{name}}</a> {#- -#}\n+        <button id=\"copy-path\" onclick=\"copy_path(this)\" title=\"Copy item path to clipboard\"> {#- -#}\n+            <img src=\"{{static_root_path|safe}}clipboard{{page.resource_suffix}}.svg\" {# -#}\n+                width=\"19\" height=\"18\" {# -#}\n+                alt=\"Copy item path\"> {#- -#}\n+        </button> {#- -#}\n     </h1> {#- -#}\n     <span class=\"out-of-band\"> {#- -#}\n         {% if !stability_since_raw.is_empty() %}"}, {"sha": "fc05fe669d12fb13b471b342c7f416ab94a306c7", "filename": "src/test/rustdoc-gui/anchors.goml", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fanchors.goml?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -10,8 +10,8 @@ local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n reload:\n \n assert-css: (\"#toggle-all-docs\", {\"color\": \"rgb(0, 0, 0)\"})\n-assert-css: (\".fqn .in-band a:nth-of-type(1)\", {\"color\": \"rgb(0, 0, 0)\"})\n-assert-css: (\".fqn .in-band a:nth-of-type(2)\", {\"color\": \"rgb(173, 55, 138)\"})\n+assert-css: (\".fqn a:nth-of-type(1)\", {\"color\": \"rgb(0, 0, 0)\"})\n+assert-css: (\".fqn a:nth-of-type(2)\", {\"color\": \"rgb(173, 55, 138)\"})\n assert-css: (\n     \".rightside .srclink\",\n     {\"color\": \"rgb(56, 115, 173)\", \"text-decoration\": \"none solid rgb(56, 115, 173)\"},\n@@ -41,7 +41,7 @@ goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n assert-css: (\"#top-doc-prose-title\", {\"color\": \"rgb(0, 0, 0)\"})\n \n assert-css: (\".sidebar a\", {\"color\": \"rgb(53, 109, 164)\"})\n-assert-css: (\".in-band a\", {\"color\": \"rgb(0, 0, 0)\"})\n+assert-css: (\"h1.fqn a\", {\"color\": \"rgb(0, 0, 0)\"})\n \n // We move the cursor over the \"Implementations\" title so the anchor is displayed.\n move-cursor-to: \"h2#implementations\"\n@@ -60,8 +60,8 @@ local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n goto: file://|DOC_PATH|/staged_api/struct.Foo.html\n \n assert-css: (\"#toggle-all-docs\", {\"color\": \"rgb(221, 221, 221)\"})\n-assert-css: (\".fqn .in-band a:nth-of-type(1)\", {\"color\": \"rgb(221, 221, 221)\"})\n-assert-css: (\".fqn .in-band a:nth-of-type(2)\", {\"color\": \"rgb(45, 191, 184)\"})\n+assert-css: (\".fqn a:nth-of-type(1)\", {\"color\": \"rgb(221, 221, 221)\"})\n+assert-css: (\".fqn a:nth-of-type(2)\", {\"color\": \"rgb(45, 191, 184)\"})\n assert-css: (\n     \".rightside .srclink\",\n     {\"color\": \"rgb(210, 153, 29)\", \"text-decoration\": \"none solid rgb(210, 153, 29)\"},\n@@ -91,7 +91,7 @@ goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n assert-css: (\"#top-doc-prose-title\", {\"color\": \"rgb(221, 221, 221)\"})\n \n assert-css: (\".sidebar a\", {\"color\": \"rgb(253, 191, 53)\"})\n-assert-css: (\".in-band a\", {\"color\": \"rgb(221, 221, 221)\"})\n+assert-css: (\"h1.fqn a\", {\"color\": \"rgb(221, 221, 221)\"})\n \n // We move the cursor over the \"Implementations\" title so the anchor is displayed.\n move-cursor-to: \"h2#implementations\"\n@@ -110,8 +110,8 @@ local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n goto: file://|DOC_PATH|/staged_api/struct.Foo.html\n \n assert-css: (\"#toggle-all-docs\", {\"color\": \"rgb(197, 197, 197)\"})\n-assert-css: (\".fqn .in-band a:nth-of-type(1)\", {\"color\": \"rgb(255, 255, 255)\"})\n-assert-css: (\".fqn .in-band a:nth-of-type(2)\", {\"color\": \"rgb(255, 160, 165)\"})\n+assert-css: (\".fqn a:nth-of-type(1)\", {\"color\": \"rgb(255, 255, 255)\"})\n+assert-css: (\".fqn a:nth-of-type(2)\", {\"color\": \"rgb(255, 160, 165)\"})\n assert-css: (\n     \".rightside .srclink\",\n     {\"color\": \"rgb(57, 175, 215)\", \"text-decoration\": \"none solid rgb(57, 175, 215)\"},\n@@ -141,7 +141,7 @@ goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n assert-css: (\"#top-doc-prose-title\", {\"color\": \"rgb(255, 255, 255)\"})\n \n assert-css: (\".sidebar a\", {\"color\": \"rgb(83, 177, 219)\"})\n-assert-css: (\".in-band a\", {\"color\": \"rgb(255, 255, 255)\"})\n+assert-css: (\"h1.fqn a\", {\"color\": \"rgb(255, 255, 255)\"})\n \n // We move the cursor over the \"Implementations\" title so the anchor is displayed.\n move-cursor-to: \"h2#implementations\""}, {"sha": "c197d4dd29c293a43c469c44f2cbe972d619ad03", "filename": "src/test/rustdoc-gui/search-result-go-to-first.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc-gui%2Fsearch-result-go-to-first.goml", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc-gui%2Fsearch-result-go-to-first.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-go-to-first.goml?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -3,17 +3,17 @@\n // First, we check that the first page doesn't have the string we're looking for to ensure\n // that the feature is changing page as expected.\n goto: file://|DOC_PATH|/test_docs/index.html\n-assert-text-false: (\".fqn .in-band\", \"Struct test_docs::Foo\")\n+assert-text-false: (\".fqn\", \"Struct test_docs::Foo\")\n \n // We now check that we land on the search result page if \"go_to_first\" isn't set.\n goto: file://|DOC_PATH|/test_docs/index.html?search=struct%3AFoo\n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n-assert-text-false: (\".fqn .in-band\", \"Struct test_docs::Foo\")\n+assert-text-false: (\".fqn\", \"Struct test_docs::Foo\")\n // Ensure that the search results are displayed, not the \"normal\" content.\n assert-css: (\"#main-content\", {\"display\": \"none\"})\n \n // Now we can check that the feature is working as expected!\n goto: file://|DOC_PATH|/test_docs/index.html?search=struct%3AFoo&go_to_first=true\n // Waiting for the page to load...\n-wait-for-text: (\".fqn .in-band\", \"Struct test_docs::Foo\")\n+wait-for-text: (\".fqn\", \"Struct test_docs::Foo\")"}, {"sha": "c902d186cc2abe5c5d017ffcc53c121cdb5f7595", "filename": "src/test/rustdoc-gui/toggle-click-deadspace.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc-gui%2Ftoggle-click-deadspace.goml", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc-gui%2Ftoggle-click-deadspace.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-click-deadspace.goml?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -12,4 +12,4 @@ assert-attribute-false: (\".impl-items .rustdoc-toggle\", {\"open\": \"\"})\n \n // Click the \"Trait\" part of \"impl Trait\" and verify it navigates.\n click: \"#impl-Trait-for-Foo h3 a:first-of-type\"\n-assert-text: (\".fqn .in-band\", \"Trait lib2::Trait\")\n+assert-text: (\".fqn\", \"Trait lib2::Trait\")"}, {"sha": "0c947ea2e28788aaab6f11a7b0f38e9a410e6c42", "filename": "src/test/rustdoc/index-page.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc%2Findex-page.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc%2Findex-page.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Findex-page.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -5,7 +5,7 @@\n #![crate_name = \"foo\"]\n \n // @has foo/../index.html\n-// @has - '//span[@class=\"in-band\"]' 'List of all crates'\n+// @has - '//h1[@class=\"fqn\"]' 'List of all crates'\n // @has - '//ul[@class=\"all-items\"]//a[@href=\"foo/index.html\"]' 'foo'\n // @has - '//ul[@class=\"all-items\"]//a[@href=\"all_item_types/index.html\"]' 'all_item_types'\n pub struct Foo;"}, {"sha": "ea1273850912d27035272f46da4df74f8eb575ae", "filename": "src/test/rustdoc/keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fkeyword.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -7,7 +7,7 @@\n // @has foo/index.html '//div[@class=\"sidebar-elems\"]//li/a' 'Keywords'\n // @has foo/index.html '//div[@class=\"sidebar-elems\"]//li/a/@href' '#keywords'\n // @has foo/keyword.match.html '//a[@class=\"keyword\"]' 'match'\n-// @has foo/keyword.match.html '//span[@class=\"in-band\"]' 'Keyword match'\n+// @has foo/keyword.match.html '//h1[@class=\"fqn\"]' 'Keyword match'\n // @has foo/keyword.match.html '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has foo/index.html '//a/@href' '../foo/index.html'\n // @!has foo/foo/index.html"}, {"sha": "ea8d2d1660266a45ea9744264a8f572f91270ab9", "filename": "src/test/rustdoc/primitive-reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc%2Fprimitive-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc%2Fprimitive-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-reference.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -9,7 +9,7 @@\n // @has - '//div[@class=\"sidebar-elems\"]//li/a/@href' '#primitives'\n // @has foo/primitive.reference.html\n // @has - '//a[@class=\"primitive\"]' 'reference'\n-// @has - '//span[@class=\"in-band\"]' 'Primitive Type reference'\n+// @has - '//h1[@class=\"fqn\"]' 'Primitive Type reference'\n // @has - '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n \n // There should be only one implementation listed."}, {"sha": "cdddd6b65078e9f2098d61fd539479ae3203ce96", "filename": "src/test/rustdoc/primitive-slice-auto-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc%2Fprimitive-slice-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc%2Fprimitive-slice-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-slice-auto-trait.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -4,7 +4,7 @@\n #![feature(rustdoc_internals)]\n \n // @has foo/primitive.slice.html '//a[@class=\"primitive\"]' 'slice'\n-// @has - '//span[@class=\"in-band\"]' 'Primitive Type slice'\n+// @has - '//h1[@class=\"fqn\"]' 'Primitive Type slice'\n // @has - '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has - '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Send for [T]where T: Send'"}, {"sha": "df681457f0f1f27f495a1780bfde020dd220cc7a", "filename": "src/test/rustdoc/primitive-tuple-auto-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc%2Fprimitive-tuple-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc%2Fprimitive-tuple-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-tuple-auto-trait.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -4,7 +4,7 @@\n #![feature(rustdoc_internals)]\n \n // @has foo/primitive.tuple.html '//a[@class=\"primitive\"]' 'tuple'\n-// @has - '//span[@class=\"in-band\"]' 'Primitive Type tuple'\n+// @has - '//h1[@class=\"fqn\"]' 'Primitive Type tuple'\n // @has - '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has - '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'Send'"}, {"sha": "391e33bea616a511a5cb3e0f57b2b69ddba5b65c", "filename": "src/test/rustdoc/primitive-unit-auto-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc%2Fprimitive-unit-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc%2Fprimitive-unit-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-unit-auto-trait.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -4,7 +4,7 @@\n #![feature(rustdoc_internals)]\n \n // @has foo/primitive.unit.html '//a[@class=\"primitive\"]' 'unit'\n-// @has - '//span[@class=\"in-band\"]' 'Primitive Type unit'\n+// @has - '//h1[@class=\"fqn\"]' 'Primitive Type unit'\n // @has - '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has - '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n // @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl Send for ()'"}, {"sha": "6347fdac3db53bbbd652a7fa94ee558b35a0313f", "filename": "src/test/rustdoc/primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Frustdoc%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -7,7 +7,7 @@\n // @has foo/index.html '//div[@class=\"sidebar-elems\"]//li/a' 'Primitive Types'\n // @has foo/index.html '//div[@class=\"sidebar-elems\"]//li/a/@href' '#primitives'\n // @has foo/primitive.i32.html '//a[@class=\"primitive\"]' 'i32'\n-// @has foo/primitive.i32.html '//span[@class=\"in-band\"]' 'Primitive Type i32'\n+// @has foo/primitive.i32.html '//h1[@class=\"fqn\"]' 'Primitive Type i32'\n // @has foo/primitive.i32.html '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has foo/index.html '//a/@href' '../foo/index.html'\n // @!has foo/index.html '//span' '\ud83d\udd12'"}, {"sha": "8cfa0291229bd7f4c0d70b2bca4a243be7547ef1", "filename": "src/test/ui/closures/closure-return-type-must-be-sized.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -0,0 +1,74 @@\n+#![feature(unboxed_closures)]\n+\n+trait A {\n+    fn a() where Self: Sized;\n+}\n+\n+mod a {\n+    use crate::A;\n+\n+    pub fn foo<F: FnOnce<()>>() where F::Output: A {\n+        F::Output::a()\n+    }\n+\n+    pub fn bar<F: FnOnce() -> R, R: ?Sized>() {}\n+\n+    pub fn baz<F: FnOnce<()>>() where F::Output: A, F::Output: Sized {\n+        F::Output::a()\n+    }\n+}\n+\n+mod b {\n+    use crate::A;\n+\n+    pub fn foo<F: Fn<()>>() where F::Output: A {\n+        F::Output::a()\n+    }\n+\n+    pub fn bar<F: Fn() -> R, R: ?Sized>() {}\n+\n+    pub fn baz<F: Fn<()>>() where F::Output: A, F::Output: Sized {\n+        F::Output::a()\n+    }\n+}\n+\n+mod c {\n+    use crate::A;\n+\n+    pub fn foo<F: FnMut<()>>() where F::Output: A {\n+        F::Output::a()\n+    }\n+\n+    pub fn bar<F: FnMut() -> R, R: ?Sized>() {}\n+\n+    pub fn baz<F: FnMut<()>>() where F::Output: A, F::Output: Sized {\n+        F::Output::a()\n+    }\n+}\n+\n+impl A for Box<dyn A> {\n+    fn a() {}\n+}\n+\n+fn main() {\n+    a::foo::<fn() -> dyn A>();         //~ ERROR E0277\n+    a::bar::<fn() -> dyn A, _>();      //~ ERROR E0277\n+    a::baz::<fn() -> dyn A>();         //~ ERROR E0277\n+    a::foo::<fn() -> Box<dyn A>>();    //  ok\n+    a::bar::<fn() -> Box<dyn A>, _>(); //  ok\n+    a::baz::<fn() -> Box<dyn A>>();    //  ok\n+\n+    b::foo::<fn() -> dyn A>();         //~ ERROR E0277\n+    b::bar::<fn() -> dyn A, _>();      //~ ERROR E0277\n+    b::baz::<fn() -> dyn A>();         //~ ERROR E0277\n+    b::foo::<fn() -> Box<dyn A>>();    //  ok\n+    b::bar::<fn() -> Box<dyn A>, _>(); //  ok\n+    b::baz::<fn() -> Box<dyn A>>();    //  ok\n+\n+    c::foo::<fn() -> dyn A>();         //~ ERROR E0277\n+    c::bar::<fn() -> dyn A, _>();      //~ ERROR E0277\n+    c::baz::<fn() -> dyn A>();         //~ ERROR E0277\n+    c::foo::<fn() -> Box<dyn A>>();    //  ok\n+    c::bar::<fn() -> Box<dyn A>, _>(); //  ok\n+    c::baz::<fn() -> Box<dyn A>>();    //  ok\n+}"}, {"sha": "b07425bd82501fff334063b0f1d6eb6433ff37ac", "filename": "src/test/ui/closures/closure-return-type-must-be-sized.stderr", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -0,0 +1,99 @@\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:54:5\n+   |\n+LL |     a::foo::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:55:14\n+   |\n+LL |     a::bar::<fn() -> dyn A, _>();\n+   |              ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+note: required by a bound in `a::bar`\n+  --> $DIR/closure-return-type-must-be-sized.rs:14:19\n+   |\n+LL |     pub fn bar<F: FnOnce() -> R, R: ?Sized>() {}\n+   |                   ^^^^^^^^^^^^^ required by this bound in `a::bar`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:56:5\n+   |\n+LL |     a::baz::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:61:5\n+   |\n+LL |     b::foo::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:62:14\n+   |\n+LL |     b::bar::<fn() -> dyn A, _>();\n+   |              ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+note: required by a bound in `b::bar`\n+  --> $DIR/closure-return-type-must-be-sized.rs:28:19\n+   |\n+LL |     pub fn bar<F: Fn() -> R, R: ?Sized>() {}\n+   |                   ^^^^^^^^^ required by this bound in `b::bar`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:63:5\n+   |\n+LL |     b::baz::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:68:5\n+   |\n+LL |     c::foo::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:69:14\n+   |\n+LL |     c::bar::<fn() -> dyn A, _>();\n+   |              ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+note: required by a bound in `c::bar`\n+  --> $DIR/closure-return-type-must-be-sized.rs:42:19\n+   |\n+LL |     pub fn bar<F: FnMut() -> R, R: ?Sized>() {}\n+   |                   ^^^^^^^^^^^^ required by this bound in `c::bar`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:70:5\n+   |\n+LL |     c::baz::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9dde5b3ebe309e450d173c8511f88381e21afbaf", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,11 +1,3 @@\n-error[E0423]: expected function, tuple struct or tuple variant, found enum `Option`\n-  --> $DIR/issue-43871-enum-instead-of-variant.rs:19:13\n-   |\n-LL |     let x = Option(1);\n-   |             ^^^^^^ help: try to construct one of the enum's variants: `std::option::Option::Some`\n-   |\n-   = help: you might have meant to construct the enum's non-tuple variant\n-\n error[E0532]: expected tuple struct or tuple variant, found enum `Option`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:21:12\n    |\n@@ -27,6 +19,14 @@ note: the enum is defined here\n LL | enum Example { Ex(String), NotEx }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0423]: expected function, tuple struct or tuple variant, found enum `Option`\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:19:13\n+   |\n+LL |     let x = Option(1);\n+   |             ^^^^^^ help: try to construct one of the enum's variants: `std::option::Option::Some`\n+   |\n+   = help: you might have meant to construct the enum's non-tuple variant\n+\n error[E0423]: expected function, tuple struct or tuple variant, found enum `Void`\n   --> $DIR/issue-43871-enum-instead-of-variant.rs:31:13\n    |"}, {"sha": "5b0ca613fc4aff82c0261e0d834231693f579369", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -21,29 +21,6 @@ help: a unit struct with a similar name exists\n LL |     let e1 = XEmpty2;\n    |              ~~~~~~~\n \n-error[E0423]: expected function, tuple struct or tuple variant, found struct `Empty1`\n-  --> $DIR/empty-struct-braces-expr.rs:16:14\n-   |\n-LL | struct Empty1 {}\n-   | ---------------- `Empty1` defined here\n-...\n-LL |     let e1 = Empty1();\n-   |              ^^^^^^^^\n-   |\n-  ::: $DIR/auxiliary/empty-struct.rs:2:1\n-   |\n-LL | pub struct XEmpty2;\n-   | ------------------ similarly named unit struct `XEmpty2` defined here\n-   |\n-help: use struct literal syntax instead\n-   |\n-LL |     let e1 = Empty1 {};\n-   |              ~~~~~~~~~\n-help: a unit struct with a similar name exists\n-   |\n-LL |     let e1 = XEmpty2();\n-   |              ~~~~~~~\n-\n error[E0423]: expected value, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-expr.rs:18:14\n    |\n@@ -84,6 +61,29 @@ help: a unit struct with a similar name exists\n LL |     let xe1 = XEmpty2;\n    |               ~~~~~~~\n \n+error[E0423]: expected function, tuple struct or tuple variant, found struct `Empty1`\n+  --> $DIR/empty-struct-braces-expr.rs:16:14\n+   |\n+LL | struct Empty1 {}\n+   | ---------------- `Empty1` defined here\n+...\n+LL |     let e1 = Empty1();\n+   |              ^^^^^^^^\n+   |\n+  ::: $DIR/auxiliary/empty-struct.rs:2:1\n+   |\n+LL | pub struct XEmpty2;\n+   | ------------------ similarly named unit struct `XEmpty2` defined here\n+   |\n+help: use struct literal syntax instead\n+   |\n+LL |     let e1 = Empty1 {};\n+   |              ~~~~~~~~~\n+help: a unit struct with a similar name exists\n+   |\n+LL |     let e1 = XEmpty2();\n+   |              ~~~~~~~\n+\n error[E0423]: expected function, tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-expr.rs:23:15\n    |"}, {"sha": "ac70d905d353fbaf9906707ac0ada7736355d8c6", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -26,6 +26,17 @@ help: surround the struct literal with parentheses\n LL |     for _ in (std::ops::Range { start: 0, end: 10 }) {}\n    |              +                                     +\n \n+error[E0423]: expected value, found struct `T`\n+  --> $DIR/E0423.rs:14:8\n+   |\n+LL |     if T {} == T {} { println!(\"Ok\"); }\n+   |        ^ not a value\n+   |\n+help: surround the struct literal with parentheses\n+   |\n+LL |     if (T {}) == T {} { println!(\"Ok\"); }\n+   |        +    +\n+\n error[E0423]: expected function, tuple struct or tuple variant, found struct `Foo`\n   --> $DIR/E0423.rs:4:13\n    |\n@@ -47,17 +58,6 @@ help: a function with a similar name exists\n LL |     let f = foo();\n    |             ~~~\n \n-error[E0423]: expected value, found struct `T`\n-  --> $DIR/E0423.rs:14:8\n-   |\n-LL |     if T {} == T {} { println!(\"Ok\"); }\n-   |        ^ not a value\n-   |\n-help: surround the struct literal with parentheses\n-   |\n-LL |     if (T {}) == T {} { println!(\"Ok\"); }\n-   |        +    +\n-\n error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0423`."}, {"sha": "3a53a20b4536bd8ed00ab19b71b0b4b642b7104e", "filename": "src/test/ui/expr/if/bad-if-let-suggestion.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -62,6 +62,11 @@ error[E0308]: mismatched types\n    |\n LL |     if let x = 1 && i = 2 {}\n    |        ^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |     if let x = 1 && i == 2 {}\n+   |                        +\n \n error: aborting due to 8 previous errors\n "}, {"sha": "56d85c066a8d8cc822046f05befab39572192e04", "filename": "src/test/ui/issues/issue-58022.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58022.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,9 +1,3 @@\n-error[E0423]: expected function, tuple struct or tuple variant, found trait `Foo`\n-  --> $DIR/issue-58022.rs:14:9\n-   |\n-LL |         Foo(Box::new(*slice))\n-   |         ^^^ not a function, tuple struct or tuple variant\n-\n error[E0790]: cannot refer to the associated constant on trait without specifying the corresponding `impl` type\n   --> $DIR/issue-58022.rs:4:25\n    |\n@@ -13,6 +7,12 @@ LL |\n LL |     fn new(slice: &[u8; Foo::SIZE]) -> Self;\n    |                         ^^^^^^^^^ cannot refer to the associated constant of trait\n \n+error[E0423]: expected function, tuple struct or tuple variant, found trait `Foo`\n+  --> $DIR/issue-58022.rs:14:9\n+   |\n+LL |         Foo(Box::new(*slice))\n+   |         ^^^ not a function, tuple struct or tuple variant\n+\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0423, E0790."}, {"sha": "b315df179d01cad564b385dc61423aafb892994c", "filename": "src/test/ui/lang-items/issue-83471.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -4,12 +4,6 @@ error[E0573]: expected type, found built-in attribute `export_name`\n LL |     fn call(export_name);\n    |             ^^^^^^^^^^^ not a type\n \n-error[E0425]: cannot find function `a` in this scope\n-  --> $DIR/issue-83471.rs:21:5\n-   |\n-LL |     a()\n-   |     ^ not found in this scope\n-\n error[E0658]: language items are subject to change\n   --> $DIR/issue-83471.rs:7:1\n    |\n@@ -45,6 +39,12 @@ LL | #[lang = \"fn\"]\n LL | trait Fn {\n    |         - this trait has 0 generic arguments\n \n+error[E0425]: cannot find function `a` in this scope\n+  --> $DIR/issue-83471.rs:21:5\n+   |\n+LL |     a()\n+   |     ^ not found in this scope\n+\n error: aborting due to 5 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0425, E0573, E0658, E0718."}, {"sha": "a6cff95fd9153d83e2e8f775969cc97b9e034767", "filename": "src/test/ui/macros/rfc-3086-metavar-expr/syntax-errors.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fsyntax-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fsyntax-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-3086-metavar-expr%2Fsyntax-errors.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -319,22 +319,39 @@ LL |     unknown_metavar!(a);\n    |\n    = note: this error originates in the macro `unknown_metavar` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0425]: cannot find function `count` in this scope\n-  --> $DIR/syntax-errors.rs:29:30\n+error[E0425]: cannot find value `i` in this scope\n+  --> $DIR/syntax-errors.rs:29:36\n    |\n LL |     ( $( $i:ident ),* ) => { count(i) };\n-   |                              ^^^^^ not found in this scope\n+   |                                    ^ not found in this scope\n ...\n LL |     no_curly__no_rhs_dollar__round!(a, b, c);\n    |     ---------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `no_curly__no_rhs_dollar__round` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `i` in this scope\n-  --> $DIR/syntax-errors.rs:29:36\n+  --> $DIR/syntax-errors.rs:35:29\n+   |\n+LL |     ( $i:ident ) => { count(i) };\n+   |                             ^ not found in this scope\n+...\n+LL |     no_curly__no_rhs_dollar__no_round!(a);\n+   |     ------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `no_curly__no_rhs_dollar__no_round` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0425]: cannot find value `a` in this scope\n+  --> $DIR/syntax-errors.rs:153:37\n+   |\n+LL |     no_curly__rhs_dollar__no_round!(a);\n+   |                                     ^ not found in this scope\n+\n+error[E0425]: cannot find function `count` in this scope\n+  --> $DIR/syntax-errors.rs:29:30\n    |\n LL |     ( $( $i:ident ),* ) => { count(i) };\n-   |                                    ^ not found in this scope\n+   |                              ^^^^^ not found in this scope\n ...\n LL |     no_curly__no_rhs_dollar__round!(a, b, c);\n    |     ---------------------------------------- in this macro invocation\n@@ -352,17 +369,6 @@ LL |     no_curly__no_rhs_dollar__no_round!(a);\n    |\n    = note: this error originates in the macro `no_curly__no_rhs_dollar__no_round` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0425]: cannot find value `i` in this scope\n-  --> $DIR/syntax-errors.rs:35:29\n-   |\n-LL |     ( $i:ident ) => { count(i) };\n-   |                             ^ not found in this scope\n-...\n-LL |     no_curly__no_rhs_dollar__no_round!(a);\n-   |     ------------------------------------- in this macro invocation\n-   |\n-   = note: this error originates in the macro `no_curly__no_rhs_dollar__no_round` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error[E0425]: cannot find function `count` in this scope\n   --> $DIR/syntax-errors.rs:46:23\n    |\n@@ -374,12 +380,6 @@ LL |     no_curly__rhs_dollar__no_round!(a);\n    |\n    = note: this error originates in the macro `no_curly__rhs_dollar__no_round` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0425]: cannot find value `a` in this scope\n-  --> $DIR/syntax-errors.rs:153:37\n-   |\n-LL |     no_curly__rhs_dollar__no_round!(a);\n-   |                                     ^ not found in this scope\n-\n error: aborting due to 40 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "227d30282b1ead664cc5364a803d17b736268a42", "filename": "src/test/ui/namespace/namespaced-enum-glob-import-no-impls-xcrate.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fnamespace%2Fnamespaced-enum-glob-import-no-impls-xcrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fnamespace%2Fnamespaced-enum-glob-import-no-impls-xcrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespaced-enum-glob-import-no-impls-xcrate.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,27 +1,27 @@\n-error[E0425]: cannot find function `foo` in this scope\n-  --> $DIR/namespaced-enum-glob-import-no-impls-xcrate.rs:11:5\n-   |\n-LL |     foo();\n-   |     ^^^ not found in this scope\n-\n error[E0425]: cannot find function `foo` in module `m`\n   --> $DIR/namespaced-enum-glob-import-no-impls-xcrate.rs:12:8\n    |\n LL |     m::foo();\n    |        ^^^ not found in `m`\n \n-error[E0425]: cannot find function `bar` in this scope\n-  --> $DIR/namespaced-enum-glob-import-no-impls-xcrate.rs:13:5\n-   |\n-LL |     bar();\n-   |     ^^^ not found in this scope\n-\n error[E0425]: cannot find function `bar` in module `m`\n   --> $DIR/namespaced-enum-glob-import-no-impls-xcrate.rs:14:8\n    |\n LL |     m::bar();\n    |        ^^^ not found in `m`\n \n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/namespaced-enum-glob-import-no-impls-xcrate.rs:11:5\n+   |\n+LL |     foo();\n+   |     ^^^ not found in this scope\n+\n+error[E0425]: cannot find function `bar` in this scope\n+  --> $DIR/namespaced-enum-glob-import-no-impls-xcrate.rs:13:5\n+   |\n+LL |     bar();\n+   |     ^^^ not found in this scope\n+\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "111ac7ab0f0bb45b46289daa6ec8d9a41fb6d1aa", "filename": "src/test/ui/namespace/namespaced-enum-glob-import-no-impls.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fnamespace%2Fnamespaced-enum-glob-import-no-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fnamespace%2Fnamespaced-enum-glob-import-no-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespaced-enum-glob-import-no-impls.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,27 +1,27 @@\n-error[E0425]: cannot find function `foo` in this scope\n-  --> $DIR/namespaced-enum-glob-import-no-impls.rs:21:5\n-   |\n-LL |     foo();\n-   |     ^^^ not found in this scope\n-\n error[E0425]: cannot find function `foo` in module `m`\n   --> $DIR/namespaced-enum-glob-import-no-impls.rs:22:8\n    |\n LL |     m::foo();\n    |        ^^^ not found in `m`\n \n-error[E0425]: cannot find function `bar` in this scope\n-  --> $DIR/namespaced-enum-glob-import-no-impls.rs:23:5\n-   |\n-LL |     bar();\n-   |     ^^^ not found in this scope\n-\n error[E0425]: cannot find function `bar` in module `m`\n   --> $DIR/namespaced-enum-glob-import-no-impls.rs:24:8\n    |\n LL |     m::bar();\n    |        ^^^ not found in `m`\n \n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/namespaced-enum-glob-import-no-impls.rs:21:5\n+   |\n+LL |     foo();\n+   |     ^^^ not found in this scope\n+\n+error[E0425]: cannot find function `bar` in this scope\n+  --> $DIR/namespaced-enum-glob-import-no-impls.rs:23:5\n+   |\n+LL |     bar();\n+   |     ^^^ not found in this scope\n+\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "e645b68ba87c652e7cf4ea5e7f3c657dc5b8892c", "filename": "src/test/ui/parser/emoji-identifiers.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -9,15 +9,6 @@ help: Unicode character '\u2796' (Heavy Minus Sign) looks like '-' (Minus/Hyphen),\n LL |     let _ = i_like_to_\ud83d\ude04_a_lot() - 4;\n    |                                  ~\n \n-error[E0425]: cannot find function `i_like_to_\ud83d\ude04_a_lot` in this scope\n-  --> $DIR/emoji-identifiers.rs:13:13\n-   |\n-LL | fn i_like_to_\ud83d\ude05_a_lot() -> \ud83d\udc40 {\n-   | ----------------------------- similarly named function `i_like_to_\ud83d\ude05_a_lot` defined here\n-...\n-LL |     let _ = i_like_to_\ud83d\ude04_a_lot() \u2796 4;\n-   |             ^^^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `i_like_to_\ud83d\ude05_a_lot`\n-\n error: Ferris cannot be used as an identifier\n   --> $DIR/emoji-identifiers.rs:17:9\n    |\n@@ -85,6 +76,15 @@ LL |     \ud83d\udc40::full_of\u2728()\n    |         function or associated item not found in `\ud83d\udc40`\n    |         help: there is an associated function with a similar name: `full_of_\u2728`\n \n+error[E0425]: cannot find function `i_like_to_\ud83d\ude04_a_lot` in this scope\n+  --> $DIR/emoji-identifiers.rs:13:13\n+   |\n+LL | fn i_like_to_\ud83d\ude05_a_lot() -> \ud83d\udc40 {\n+   | ----------------------------- similarly named function `i_like_to_\ud83d\ude05_a_lot` defined here\n+...\n+LL |     let _ = i_like_to_\ud83d\ude04_a_lot() \u2796 4;\n+   |             ^^^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `i_like_to_\ud83d\ude05_a_lot`\n+\n error: aborting due to 10 previous errors\n \n Some errors have detailed explanations: E0425, E0599."}, {"sha": "0cb771ea39c6d94c89e193601d36bb0301320218", "filename": "src/test/ui/parser/parser-recovery-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fparser%2Fparser-recovery-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fparser%2Fparser-recovery-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fparser-recovery-1.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -18,18 +18,18 @@ error: unexpected token: `;`\n LL |     let x = y.;\n    |               ^\n \n-error[E0425]: cannot find function `foo` in this scope\n-  --> $DIR/parser-recovery-1.rs:5:17\n-   |\n-LL |         let x = foo();\n-   |                 ^^^ not found in this scope\n-\n error[E0425]: cannot find value `y` in this scope\n   --> $DIR/parser-recovery-1.rs:10:13\n    |\n LL |     let x = y.;\n    |             ^ not found in this scope\n \n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/parser-recovery-1.rs:5:17\n+   |\n+LL |         let x = foo();\n+   |                 ^^^ not found in this scope\n+\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "8829cf4c1e1609050442aa66e140488c6085b6cf", "filename": "src/test/ui/parser/parser-recovery-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fparser%2Fparser-recovery-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fparser%2Fparser-recovery-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fparser-recovery-2.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -13,18 +13,18 @@ LL |         let x = foo();\n LL |     )\n    |     ^ mismatched closing delimiter\n \n-error[E0425]: cannot find function `foo` in this scope\n-  --> $DIR/parser-recovery-2.rs:5:17\n-   |\n-LL |         let x = foo();\n-   |                 ^^^ not found in this scope\n-\n error[E0425]: cannot find value `y` in this scope\n   --> $DIR/parser-recovery-2.rs:10:13\n    |\n LL |     let x = y.;\n    |             ^ not found in this scope\n \n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/parser-recovery-2.rs:5:17\n+   |\n+LL |         let x = foo();\n+   |                 ^^^ not found in this scope\n+\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "cdf74bdedc2e17f360a6a365e40b1de3e241411b", "filename": "src/test/ui/parser/unmatched-langle-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funmatched-langle-1.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -4,18 +4,18 @@ error: unmatched angle brackets\n LL |     foo::<<<<Ty<i32>>();\n    |          ^^^ help: remove extra angle brackets\n \n-error[E0425]: cannot find function `foo` in this scope\n-  --> $DIR/unmatched-langle-1.rs:5:5\n-   |\n-LL |     foo::<<<<Ty<i32>>();\n-   |     ^^^ not found in this scope\n-\n error[E0412]: cannot find type `Ty` in this scope\n   --> $DIR/unmatched-langle-1.rs:5:14\n    |\n LL |     foo::<<<<Ty<i32>>();\n    |              ^^ not found in this scope\n \n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/unmatched-langle-1.rs:5:5\n+   |\n+LL |     foo::<<<<Ty<i32>>();\n+   |     ^^^ not found in this scope\n+\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0412, E0425."}, {"sha": "1a1f83cc1569bd916fabebaa97e5e926781f3558", "filename": "src/test/ui/proc-macro/keep-expr-tokens.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fkeep-expr-tokens.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,15 +1,15 @@\n-error[E0425]: cannot find function `missing_fn` in this scope\n-  --> $DIR/keep-expr-tokens.rs:17:17\n-   |\n-LL |     for item in missing_fn() {}\n-   |                 ^^^^^^^^^^ not found in this scope\n-\n error[E0425]: cannot find value `bad` in this scope\n   --> $DIR/keep-expr-tokens.rs:19:62\n    |\n LL |     (#[recollect_attr] #[recollect_attr] ((#[recollect_attr] bad)));\n    |                                                              ^^^ not found in this scope\n \n+error[E0425]: cannot find function `missing_fn` in this scope\n+  --> $DIR/keep-expr-tokens.rs:17:17\n+   |\n+LL |     for item in missing_fn() {}\n+   |                 ^^^^^^^^^^ not found in this scope\n+\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "59b1fabfd7c4638354ad5c6342694098ed64789c", "filename": "src/test/ui/resolve/bad-env-capture.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fbad-env-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fbad-env-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fbad-env-capture.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -6,18 +6,18 @@ LL |     fn bar() { log(debug, x); }\n    |\n    = help: use the `|| { ... }` closure form instead\n \n-error[E0425]: cannot find function `log` in this scope\n-  --> $DIR/bad-env-capture.rs:4:16\n-   |\n-LL |     fn bar() { log(debug, x); }\n-   |                ^^^ not found in this scope\n-\n error[E0425]: cannot find value `debug` in this scope\n   --> $DIR/bad-env-capture.rs:4:20\n    |\n LL |     fn bar() { log(debug, x); }\n    |                    ^^^^^ not found in this scope\n \n+error[E0425]: cannot find function `log` in this scope\n+  --> $DIR/bad-env-capture.rs:4:16\n+   |\n+LL |     fn bar() { log(debug, x); }\n+   |                ^^^ not found in this scope\n+\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0425, E0434."}, {"sha": "811c259de6bd6516fbdea8337c084daa416ff738", "filename": "src/test/ui/resolve/bad-env-capture2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fbad-env-capture2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fbad-env-capture2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fbad-env-capture2.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -6,18 +6,18 @@ LL |     fn bar() { log(debug, x); }\n    |\n    = help: use the `|| { ... }` closure form instead\n \n-error[E0425]: cannot find function `log` in this scope\n-  --> $DIR/bad-env-capture2.rs:3:16\n-   |\n-LL |     fn bar() { log(debug, x); }\n-   |                ^^^ not found in this scope\n-\n error[E0425]: cannot find value `debug` in this scope\n   --> $DIR/bad-env-capture2.rs:3:20\n    |\n LL |     fn bar() { log(debug, x); }\n    |                    ^^^^^ not found in this scope\n \n+error[E0425]: cannot find function `log` in this scope\n+  --> $DIR/bad-env-capture2.rs:3:16\n+   |\n+LL |     fn bar() { log(debug, x); }\n+   |                ^^^ not found in this scope\n+\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0425, E0434."}, {"sha": "eab37fde96e4ca2cc17ae38c539177c4cdbb4732", "filename": "src/test/ui/resolve/bad-env-capture3.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fbad-env-capture3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fbad-env-capture3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fbad-env-capture3.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -6,18 +6,18 @@ LL |         fn bar() { log(debug, x); }\n    |\n    = help: use the `|| { ... }` closure form instead\n \n-error[E0425]: cannot find function `log` in this scope\n-  --> $DIR/bad-env-capture3.rs:4:20\n-   |\n-LL |         fn bar() { log(debug, x); }\n-   |                    ^^^ not found in this scope\n-\n error[E0425]: cannot find value `debug` in this scope\n   --> $DIR/bad-env-capture3.rs:4:24\n    |\n LL |         fn bar() { log(debug, x); }\n    |                        ^^^^^ not found in this scope\n \n+error[E0425]: cannot find function `log` in this scope\n+  --> $DIR/bad-env-capture3.rs:4:20\n+   |\n+LL |         fn bar() { log(debug, x); }\n+   |                    ^^^ not found in this scope\n+\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0425, E0434."}, {"sha": "8261e8e53b094e119cca9b67c7a7d6f95881e0d0", "filename": "src/test/ui/resolve/bad-expr-path.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fbad-expr-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fbad-expr-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fbad-expr-path.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,9 +1,3 @@\n-error[E0425]: cannot find function `log` in this scope\n-  --> $DIR/bad-expr-path.rs:4:5\n-   |\n-LL |     log(debug, m1::arguments);\n-   |     ^^^ not found in this scope\n-\n error[E0425]: cannot find value `debug` in this scope\n   --> $DIR/bad-expr-path.rs:4:9\n    |\n@@ -16,6 +10,12 @@ error[E0425]: cannot find value `arguments` in module `m1`\n LL |     log(debug, m1::arguments);\n    |                    ^^^^^^^^^ not found in `m1`\n \n+error[E0425]: cannot find function `log` in this scope\n+  --> $DIR/bad-expr-path.rs:4:5\n+   |\n+LL |     log(debug, m1::arguments);\n+   |     ^^^ not found in this scope\n+\n error[E0580]: `main` function has wrong type\n   --> $DIR/bad-expr-path.rs:3:1\n    |"}, {"sha": "6e11296d9fc0e8ebf872ea66e17a41ccb9426c79", "filename": "src/test/ui/resolve/bad-expr-path2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fbad-expr-path2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fbad-expr-path2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fbad-expr-path2.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,9 +1,3 @@\n-error[E0425]: cannot find function `log` in this scope\n-  --> $DIR/bad-expr-path2.rs:6:5\n-   |\n-LL |     log(debug, m1::arguments);\n-   |     ^^^ not found in this scope\n-\n error[E0425]: cannot find value `debug` in this scope\n   --> $DIR/bad-expr-path2.rs:6:9\n    |\n@@ -16,6 +10,12 @@ error[E0423]: expected value, found module `m1::arguments`\n LL |     log(debug, m1::arguments);\n    |                ^^^^^^^^^^^^^ not a value\n \n+error[E0425]: cannot find function `log` in this scope\n+  --> $DIR/bad-expr-path2.rs:6:5\n+   |\n+LL |     log(debug, m1::arguments);\n+   |     ^^^ not found in this scope\n+\n error[E0580]: `main` function has wrong type\n   --> $DIR/bad-expr-path2.rs:5:1\n    |"}, {"sha": "c848014ad8f0fff930305b5a52f4aa6ad152e6a8", "filename": "src/test/ui/resolve/issue-14254.stderr", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,21 +1,9 @@\n-error[E0425]: cannot find function `baz` in this scope\n-  --> $DIR/issue-14254.rs:19:9\n-   |\n-LL |         baz();\n-   |         ^^^ help: you might have meant to call the method: `self.baz`\n-\n error[E0425]: cannot find value `a` in this scope\n   --> $DIR/issue-14254.rs:21:9\n    |\n LL |         a;\n    |         ^ not found in this scope\n \n-error[E0425]: cannot find function `baz` in this scope\n-  --> $DIR/issue-14254.rs:28:9\n-   |\n-LL |         baz();\n-   |         ^^^ help: you might have meant to call the method: `self.baz`\n-\n error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-14254.rs:30:9\n    |\n@@ -46,12 +34,6 @@ error[E0425]: cannot find value `b` in this scope\n LL |         b;\n    |         ^ not found in this scope\n \n-error[E0425]: cannot find function `baz` in this scope\n-  --> $DIR/issue-14254.rs:45:9\n-   |\n-LL |         baz();\n-   |         ^^^ help: you might have meant to call the method: `self.baz`\n-\n error[E0425]: cannot find value `x` in this scope\n   --> $DIR/issue-14254.rs:47:9\n    |\n@@ -82,65 +64,83 @@ error[E0425]: cannot find value `b` in this scope\n LL |         b;\n    |         ^ not found in this scope\n \n-error[E0425]: cannot find function `baz` in this scope\n-  --> $DIR/issue-14254.rs:62:9\n+error[E0425]: cannot find value `bah` in this scope\n+  --> $DIR/issue-14254.rs:64:9\n    |\n-LL |         baz();\n-   |         ^^^ help: you might have meant to call the method: `self.baz`\n+LL |         bah;\n+   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n \n error[E0425]: cannot find value `bah` in this scope\n-  --> $DIR/issue-14254.rs:64:9\n+  --> $DIR/issue-14254.rs:73:9\n    |\n LL |         bah;\n    |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n \n-error[E0425]: cannot find function `baz` in this scope\n-  --> $DIR/issue-14254.rs:71:9\n+error[E0425]: cannot find value `bah` in this scope\n+  --> $DIR/issue-14254.rs:82:9\n    |\n-LL |         baz();\n-   |         ^^^ help: you might have meant to call the method: `self.baz`\n+LL |         bah;\n+   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n \n error[E0425]: cannot find value `bah` in this scope\n-  --> $DIR/issue-14254.rs:73:9\n+  --> $DIR/issue-14254.rs:91:9\n+   |\n+LL |         bah;\n+   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+\n+error[E0425]: cannot find value `bah` in this scope\n+  --> $DIR/issue-14254.rs:100:9\n    |\n LL |         bah;\n    |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n \n error[E0425]: cannot find function `baz` in this scope\n-  --> $DIR/issue-14254.rs:80:9\n+  --> $DIR/issue-14254.rs:19:9\n    |\n LL |         baz();\n    |         ^^^ help: you might have meant to call the method: `self.baz`\n \n-error[E0425]: cannot find value `bah` in this scope\n-  --> $DIR/issue-14254.rs:82:9\n+error[E0425]: cannot find function `baz` in this scope\n+  --> $DIR/issue-14254.rs:28:9\n    |\n-LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+LL |         baz();\n+   |         ^^^ help: you might have meant to call the method: `self.baz`\n \n error[E0425]: cannot find function `baz` in this scope\n-  --> $DIR/issue-14254.rs:89:9\n+  --> $DIR/issue-14254.rs:45:9\n    |\n LL |         baz();\n    |         ^^^ help: you might have meant to call the method: `self.baz`\n \n-error[E0425]: cannot find value `bah` in this scope\n-  --> $DIR/issue-14254.rs:91:9\n+error[E0425]: cannot find function `baz` in this scope\n+  --> $DIR/issue-14254.rs:62:9\n    |\n-LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+LL |         baz();\n+   |         ^^^ help: you might have meant to call the method: `self.baz`\n \n error[E0425]: cannot find function `baz` in this scope\n-  --> $DIR/issue-14254.rs:98:9\n+  --> $DIR/issue-14254.rs:71:9\n    |\n LL |         baz();\n    |         ^^^ help: you might have meant to call the method: `self.baz`\n \n-error[E0425]: cannot find value `bah` in this scope\n-  --> $DIR/issue-14254.rs:100:9\n+error[E0425]: cannot find function `baz` in this scope\n+  --> $DIR/issue-14254.rs:80:9\n    |\n-LL |         bah;\n-   |         ^^^ help: you might have meant to call the associated function: `Self::bah`\n+LL |         baz();\n+   |         ^^^ help: you might have meant to call the method: `self.baz`\n+\n+error[E0425]: cannot find function `baz` in this scope\n+  --> $DIR/issue-14254.rs:89:9\n+   |\n+LL |         baz();\n+   |         ^^^ help: you might have meant to call the method: `self.baz`\n+\n+error[E0425]: cannot find function `baz` in this scope\n+  --> $DIR/issue-14254.rs:98:9\n+   |\n+LL |         baz();\n+   |         ^^^ help: you might have meant to call the method: `self.baz`\n \n error: aborting due to 24 previous errors\n "}, {"sha": "e7c53ff44e6fe0ac3250894733f564fe57a430e6", "filename": "src/test/ui/resolve/issue-2356.stderr", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,15 +1,3 @@\n-error[E0425]: cannot find function `shave` in this scope\n-  --> $DIR/issue-2356.rs:17:5\n-   |\n-LL |     shave();\n-   |     ^^^^^ not found in this scope\n-\n-error[E0425]: cannot find function `clone` in this scope\n-  --> $DIR/issue-2356.rs:24:5\n-   |\n-LL |     clone();\n-   |     ^^^^^ help: you might have meant to call the method: `self.clone`\n-\n error[E0425]: cannot find function `default` in this scope\n   --> $DIR/issue-2356.rs:31:5\n    |\n@@ -31,6 +19,51 @@ error[E0425]: cannot find value `whiskers` in this scope\n LL |     whiskers -= other;\n    |     ^^^^^^^^ a field by this name exists in `Self`\n \n+error[E0424]: expected value, found module `self`\n+  --> $DIR/issue-2356.rs:65:8\n+   |\n+LL |   fn meow() {\n+   |      ---- this function doesn't have a `self` parameter\n+LL |     if self.whiskers > 3 {\n+   |        ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n+   |\n+help: add a `self` receiver parameter to make the associated `fn` a method\n+   |\n+LL |   fn meow(&self) {\n+   |           +++++\n+\n+error[E0425]: cannot find value `whiskers` in this scope\n+  --> $DIR/issue-2356.rs:79:5\n+   |\n+LL |     whiskers = 0;\n+   |     ^^^^^^^^ help: you might have meant to use the available field: `self.whiskers`\n+\n+error[E0425]: cannot find value `whiskers` in this scope\n+  --> $DIR/issue-2356.rs:84:5\n+   |\n+LL |     whiskers = 4;\n+   |     ^^^^^^^^ a field by this name exists in `Self`\n+\n+error[E0424]: expected value, found module `self`\n+  --> $DIR/issue-2356.rs:92:5\n+   |\n+LL | fn main() {\n+   |    ---- this function can't have a `self` parameter\n+LL |     self += 1;\n+   |     ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n+\n+error[E0425]: cannot find function `shave` in this scope\n+  --> $DIR/issue-2356.rs:17:5\n+   |\n+LL |     shave();\n+   |     ^^^^^ not found in this scope\n+\n+error[E0425]: cannot find function `clone` in this scope\n+  --> $DIR/issue-2356.rs:24:5\n+   |\n+LL |     clone();\n+   |     ^^^^^ help: you might have meant to call the method: `self.clone`\n+\n error[E0425]: cannot find function `shave` in this scope\n   --> $DIR/issue-2356.rs:41:5\n    |\n@@ -72,19 +105,6 @@ error[E0425]: cannot find function `purr` in this scope\n LL |         purr();\n    |         ^^^^ not found in this scope\n \n-error[E0424]: expected value, found module `self`\n-  --> $DIR/issue-2356.rs:65:8\n-   |\n-LL |   fn meow() {\n-   |      ---- this function doesn't have a `self` parameter\n-LL |     if self.whiskers > 3 {\n-   |        ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n-   |\n-help: add a `self` receiver parameter to make the associated `fn` a method\n-   |\n-LL |   fn meow(&self) {\n-   |           +++++\n-\n error[E0425]: cannot find function `grow_older` in this scope\n   --> $DIR/issue-2356.rs:72:5\n    |\n@@ -102,32 +122,12 @@ error[E0425]: cannot find function `shave` in this scope\n LL |     shave();\n    |     ^^^^^ not found in this scope\n \n-error[E0425]: cannot find value `whiskers` in this scope\n-  --> $DIR/issue-2356.rs:79:5\n-   |\n-LL |     whiskers = 0;\n-   |     ^^^^^^^^ help: you might have meant to use the available field: `self.whiskers`\n-\n-error[E0425]: cannot find value `whiskers` in this scope\n-  --> $DIR/issue-2356.rs:84:5\n-   |\n-LL |     whiskers = 4;\n-   |     ^^^^^^^^ a field by this name exists in `Self`\n-\n error[E0425]: cannot find function `purr_louder` in this scope\n   --> $DIR/issue-2356.rs:86:5\n    |\n LL |     purr_louder();\n    |     ^^^^^^^^^^^ not found in this scope\n \n-error[E0424]: expected value, found module `self`\n-  --> $DIR/issue-2356.rs:92:5\n-   |\n-LL | fn main() {\n-   |    ---- this function can't have a `self` parameter\n-LL |     self += 1;\n-   |     ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n-\n error: aborting due to 17 previous errors\n \n Some errors have detailed explanations: E0424, E0425."}, {"sha": "0ee9fd391fe12e82d92987e5882299669a9db432", "filename": "src/test/ui/resolve/issue-42944.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,15 +1,3 @@\n-error[E0423]: cannot initialize a tuple struct which contains private fields\n-  --> $DIR/issue-42944.rs:9:9\n-   |\n-LL |         Bx(());\n-   |         ^^\n-   |\n-note: constructor is not visible here due to private fields\n-  --> $DIR/issue-42944.rs:2:19\n-   |\n-LL |     pub struct Bx(());\n-   |                   ^^ private field\n-\n error[E0425]: cannot find function, tuple struct or tuple variant `Bx` in this scope\n   --> $DIR/issue-42944.rs:16:9\n    |\n@@ -22,6 +10,18 @@ note: tuple struct `foo::Bx` exists but is inaccessible\n LL |     pub struct Bx(());\n    |     ^^^^^^^^^^^^^^^^^^ not accessible\n \n+error[E0423]: cannot initialize a tuple struct which contains private fields\n+  --> $DIR/issue-42944.rs:9:9\n+   |\n+LL |         Bx(());\n+   |         ^^\n+   |\n+note: constructor is not visible here due to private fields\n+  --> $DIR/issue-42944.rs:2:19\n+   |\n+LL |     pub struct Bx(());\n+   |                   ^^ private field\n+\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0423, E0425."}, {"sha": "d31c5e47775c9cfadc70b25554fc621aa02a6eb5", "filename": "src/test/ui/resolve/issue-73427.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fissue-73427.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fissue-73427.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-73427.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -124,13 +124,13 @@ LL | use std::f32::consts::E;\n LL | use std::f64::consts::E;\n    |\n \n-error[E0423]: expected function, tuple struct or tuple variant, found enum `A`\n-  --> $DIR/issue-73427.rs:46:13\n+error[E0532]: expected tuple struct or tuple variant, found enum `A`\n+  --> $DIR/issue-73427.rs:48:12\n    |\n-LL |     let x = A(3);\n-   |             ^\n+LL |     if let A(3) = x { }\n+   |            ^\n    |\n-   = help: you might have meant to construct one of the enum's non-tuple variants\n+   = help: you might have meant to match against one of the enum's non-tuple variants\n note: the enum is defined here\n   --> $DIR/issue-73427.rs:1:1\n    |\n@@ -142,20 +142,20 @@ LL | |     Tuple(),\n LL | |     Unit,\n LL | | }\n    | |_^\n-help: try to construct one of the enum's variants\n+help: try to match against one of the enum's variants\n    |\n-LL |     let x = A::Tuple(3);\n-   |             ~~~~~~~~\n-LL |     let x = A::TupleWithFields(3);\n-   |             ~~~~~~~~~~~~~~~~~~\n+LL |     if let A::Tuple(3) = x { }\n+   |            ~~~~~~~~\n+LL |     if let A::TupleWithFields(3) = x { }\n+   |            ~~~~~~~~~~~~~~~~~~\n \n-error[E0532]: expected tuple struct or tuple variant, found enum `A`\n-  --> $DIR/issue-73427.rs:48:12\n+error[E0423]: expected function, tuple struct or tuple variant, found enum `A`\n+  --> $DIR/issue-73427.rs:46:13\n    |\n-LL |     if let A(3) = x { }\n-   |            ^\n+LL |     let x = A(3);\n+   |             ^\n    |\n-   = help: you might have meant to match against one of the enum's non-tuple variants\n+   = help: you might have meant to construct one of the enum's non-tuple variants\n note: the enum is defined here\n   --> $DIR/issue-73427.rs:1:1\n    |\n@@ -167,12 +167,12 @@ LL | |     Tuple(),\n LL | |     Unit,\n LL | | }\n    | |_^\n-help: try to match against one of the enum's variants\n+help: try to construct one of the enum's variants\n    |\n-LL |     if let A::Tuple(3) = x { }\n-   |            ~~~~~~~~\n-LL |     if let A::TupleWithFields(3) = x { }\n-   |            ~~~~~~~~~~~~~~~~~~\n+LL |     let x = A::Tuple(3);\n+   |             ~~~~~~~~\n+LL |     let x = A::TupleWithFields(3);\n+   |             ~~~~~~~~~~~~~~~~~~\n \n error: aborting due to 7 previous errors\n "}, {"sha": "9a2d61ea4054b52f83eb6075e074d3aea85fd09c", "filename": "src/test/ui/resolve/levenshtein.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -39,15 +39,6 @@ LL | const MAX_ITEM: usize = 10;\n LL |     let v = [0u32; MAXITEM]; // Misspelled constant name.\n    |                    ^^^^^^^ help: a constant with a similar name exists: `MAX_ITEM`\n \n-error[E0425]: cannot find function `foobar` in this scope\n-  --> $DIR/levenshtein.rs:26:5\n-   |\n-LL | fn foo_bar() {}\n-   | ------------ similarly named function `foo_bar` defined here\n-...\n-LL |     foobar(); // Misspelled function name.\n-   |     ^^^^^^ help: a function with a similar name exists: `foo_bar`\n-\n error[E0412]: cannot find type `first` in module `m`\n   --> $DIR/levenshtein.rs:28:15\n    |\n@@ -66,6 +57,15 @@ LL |     pub struct Second;\n LL |     let b: m::first = m::second; // Misspelled item in module.\n    |                          ^^^^^^ help: a unit struct with a similar name exists (notice the capitalization): `Second`\n \n+error[E0425]: cannot find function `foobar` in this scope\n+  --> $DIR/levenshtein.rs:26:5\n+   |\n+LL | fn foo_bar() {}\n+   | ------------ similarly named function `foo_bar` defined here\n+...\n+LL |     foobar(); // Misspelled function name.\n+   |     ^^^^^^ help: a function with a similar name exists: `foo_bar`\n+\n error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0412, E0425."}, {"sha": "1e7ab48ef90c2ef31a2719333abdb66f0b4d8704", "filename": "src/test/ui/resolve/resolve-hint-macro.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -14,17 +14,6 @@ LL |     assert_eq { 1, 1 };\n    |     |\n    |     while parsing this struct\n \n-error[E0423]: expected function, found macro `assert_eq`\n-  --> $DIR/resolve-hint-macro.rs:3:5\n-   |\n-LL |     assert_eq(1, 1);\n-   |     ^^^^^^^^^ not a function\n-   |\n-help: use `!` to invoke the macro\n-   |\n-LL |     assert_eq!(1, 1);\n-   |              +\n-\n error[E0574]: expected struct, variant or union type, found macro `assert_eq`\n   --> $DIR/resolve-hint-macro.rs:5:5\n    |\n@@ -47,6 +36,17 @@ help: use `!` to invoke the macro\n LL |     assert![true];\n    |           +\n \n+error[E0423]: expected function, found macro `assert_eq`\n+  --> $DIR/resolve-hint-macro.rs:3:5\n+   |\n+LL |     assert_eq(1, 1);\n+   |     ^^^^^^^^^ not a function\n+   |\n+help: use `!` to invoke the macro\n+   |\n+LL |     assert_eq!(1, 1);\n+   |              +\n+\n error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0423, E0574."}, {"sha": "be11a7ebeca00a1ac39c9df189d872bf779747f4", "filename": "src/test/ui/resolve/resolve-speculative-adjustment.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -4,12 +4,6 @@ error[E0425]: cannot find value `field` in this scope\n LL |             field;\n    |             ^^^^^ not found in this scope\n \n-error[E0425]: cannot find function `method` in this scope\n-  --> $DIR/resolve-speculative-adjustment.rs:19:13\n-   |\n-LL |             method();\n-   |             ^^^^^^ not found in this scope\n-\n error[E0425]: cannot find value `field` in this scope\n   --> $DIR/resolve-speculative-adjustment.rs:23:9\n    |\n@@ -22,6 +16,12 @@ error[E0425]: cannot find function `method` in this scope\n LL |         method();\n    |         ^^^^^^ help: you might have meant to call the method: `self.method`\n \n+error[E0425]: cannot find function `method` in this scope\n+  --> $DIR/resolve-speculative-adjustment.rs:19:13\n+   |\n+LL |             method();\n+   |             ^^^^^^ not found in this scope\n+\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "a739ea43eed477ae1a530b4908343f9c8861de88", "filename": "src/test/ui/resolve/tuple-struct-alias.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,22 +1,22 @@\n-error[E0423]: expected function, tuple struct or tuple variant, found type alias `A`\n-  --> $DIR/tuple-struct-alias.rs:5:13\n+error[E0532]: expected tuple struct or tuple variant, found type alias `A`\n+  --> $DIR/tuple-struct-alias.rs:7:9\n    |\n LL | struct S(u8, u16);\n    | ------------------ similarly named tuple struct `S` defined here\n ...\n-LL |     let s = A(0, 1);\n-   |             ^ help: a tuple struct with a similar name exists: `S`\n+LL |         A(..) => {}\n+   |         ^ help: a tuple struct with a similar name exists: `S`\n    |\n    = note: can't use a type alias as a constructor\n \n-error[E0532]: expected tuple struct or tuple variant, found type alias `A`\n-  --> $DIR/tuple-struct-alias.rs:7:9\n+error[E0423]: expected function, tuple struct or tuple variant, found type alias `A`\n+  --> $DIR/tuple-struct-alias.rs:5:13\n    |\n LL | struct S(u8, u16);\n    | ------------------ similarly named tuple struct `S` defined here\n ...\n-LL |         A(..) => {}\n-   |         ^ help: a tuple struct with a similar name exists: `S`\n+LL |     let s = A(0, 1);\n+   |             ^ help: a tuple struct with a similar name exists: `S`\n    |\n    = note: can't use a type alias as a constructor\n "}, {"sha": "2764e1f813287c72c9c55835dbdd2407e2751e41", "filename": "src/test/ui/resolve/typo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -31,24 +31,6 @@ help: a local variable with a similar name exists\n LL |         println!(\"{cofig}\");\n    |                    ~~~~~\n \n-error[E0425]: cannot find function `baz` in this scope\n-  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:31:9\n-   |\n-LL |         baz();\n-   |         ^^^\n-...\n-LL | fn ba() {}\n-   | ------- similarly named function `ba` defined here\n-   |\n-help: you might have meant to call the method\n-   |\n-LL |         self.baz();\n-   |         ~~~~~~~~\n-help: a function with a similar name exists\n-   |\n-LL |         ba();\n-   |         ~~\n-\n error[E0425]: cannot find value `bah` in this scope\n   --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:33:9\n    |\n@@ -103,6 +85,24 @@ help: a type alias with a similar name exists\n LL |         let foo: Bar = \"\".to_string();\n    |                  ~~~\n \n+error[E0425]: cannot find function `baz` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:31:9\n+   |\n+LL |         baz();\n+   |         ^^^\n+...\n+LL | fn ba() {}\n+   | ------- similarly named function `ba` defined here\n+   |\n+help: you might have meant to call the method\n+   |\n+LL |         self.baz();\n+   |         ~~~~~~~~\n+help: a function with a similar name exists\n+   |\n+LL |         ba();\n+   |         ~~\n+\n error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0412, E0425."}, {"sha": "2cb9ba0d1d14b2802f6b14ef2c5af59f6805c640", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,9 +1,3 @@\n-error[E0423]: cannot initialize a tuple struct which contains private fields\n-  --> $DIR/struct.rs:20:14\n-   |\n-LL |     let ts = TupleStruct(640, 480);\n-   |              ^^^^^^^^^^^\n-\n error[E0423]: expected value, found struct `UnitStruct`\n   --> $DIR/struct.rs:29:14\n    |\n@@ -68,6 +62,12 @@ help: add `..` at the end of the field list to ignore all other fields\n LL |     let NormalStruct { first_field, second_field , .. } = ns;\n    |                                                  ~~~~~~\n \n+error[E0423]: cannot initialize a tuple struct which contains private fields\n+  --> $DIR/struct.rs:20:14\n+   |\n+LL |     let ts = TupleStruct(640, 480);\n+   |              ^^^^^^^^^^^\n+\n error[E0638]: `..` required with struct marked as non-exhaustive\n   --> $DIR/struct.rs:26:9\n    |"}, {"sha": "91c001151803a35d8fe341619c90db05b4e71002", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1510,7 +1510,7 @@ LL |     if x = let 0 = 0 {}\n help: you might have meant to compare for equality\n    |\n LL |     if x == let 0 = 0 {}\n-   |          ~~\n+   |           +\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:157:8\n@@ -1704,7 +1704,7 @@ LL |     while x = let 0 = 0 {}\n help: you might have meant to compare for equality\n    |\n LL |     while x == let 0 = 0 {}\n-   |             ~~\n+   |              +\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:249:11"}, {"sha": "386385165f645dcb147da19503f30f51ba541234", "filename": "src/test/ui/span/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -25,12 +25,6 @@ LL | trait C{async fn new(val: T) {}\n    = help: pass `--edition 2021` to `rustc`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0423]: expected function, found module `crate`\n-  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:9:5\n-   |\n-LL |     crate(move || {} ).await\n-   |     ^^^^^ not a function\n-\n error[E0412]: cannot find type `T` in this scope\n   --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:27\n    |\n@@ -53,6 +47,12 @@ LL | trait C{async fn new(val: T) {}\n    = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n    = help: add `#![feature(async_fn_in_trait)]` to the crate attributes to enable\n \n+error[E0423]: expected function, found module `crate`\n+  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:9:5\n+   |\n+LL |     crate(move || {} ).await\n+   |     ^^^^^ not a function\n+\n warning: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:6:57\n    |"}, {"sha": "88920b852905be955928e756c18aaf04cbaf21e6", "filename": "src/test/ui/suggestions/assoc_fn_without_self.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fsuggestions%2Fassoc_fn_without_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fsuggestions%2Fassoc_fn_without_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fassoc_fn_without_self.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -1,9 +1,3 @@\n-error[E0425]: cannot find function `foo` in this scope\n-  --> $DIR/assoc_fn_without_self.rs:14:13\n-   |\n-LL |             foo();\n-   |             ^^^ not found in this scope\n-\n error[E0425]: cannot find function `foo` in this scope\n   --> $DIR/assoc_fn_without_self.rs:16:9\n    |\n@@ -32,6 +26,12 @@ help: consider using the associated function\n LL |         Self::baz(2, 3);\n    |         ~~~~~~~~~\n \n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/assoc_fn_without_self.rs:14:13\n+   |\n+LL |             foo();\n+   |             ^^^ not found in this scope\n+\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "9a35c3efc41b7c75553a80951c85b74248159733", "filename": "src/test/ui/suggestions/fn-to-method.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fsuggestions%2Ffn-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fsuggestions%2Ffn-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-to-method.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -0,0 +1,19 @@\n+struct Foo;\n+\n+impl Foo {\n+    fn bar(self) {}\n+}\n+\n+fn main() {\n+    let x = cmp(&1, &2);\n+    //~^ ERROR cannot find function `cmp` in this scope\n+    //~| HELP use the `.` operator to call the method `Ord::cmp` on `&{integer}`\n+\n+    let y = len([1, 2, 3]);\n+    //~^ ERROR cannot find function `len` in this scope\n+    //~| HELP use the `.` operator to call the method `len` on `&[{integer}]`\n+\n+    let z = bar(Foo);\n+    //~^ ERROR cannot find function `bar` in this scope\n+    //~| HELP use the `.` operator to call the method `bar` on `Foo`\n+}"}, {"sha": "36c17e60d3572ae83fc03588983dae37106b97e4", "filename": "src/test/ui/suggestions/fn-to-method.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fsuggestions%2Ffn-to-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Fsuggestions%2Ffn-to-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-to-method.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -0,0 +1,38 @@\n+error[E0425]: cannot find function `cmp` in this scope\n+  --> $DIR/fn-to-method.rs:8:13\n+   |\n+LL |     let x = cmp(&1, &2);\n+   |             ^^^ not found in this scope\n+   |\n+help: use the `.` operator to call the method `Ord::cmp` on `&{integer}`\n+   |\n+LL |     let x = (&1).cmp(&2);\n+   |             ~  ~~~~~~~~~\n+\n+error[E0425]: cannot find function `len` in this scope\n+  --> $DIR/fn-to-method.rs:12:13\n+   |\n+LL |     let y = len([1, 2, 3]);\n+   |             ^^^ not found in this scope\n+   |\n+help: use the `.` operator to call the method `len` on `&[{integer}]`\n+   |\n+LL -     let y = len([1, 2, 3]);\n+LL +     let y = [1, 2, 3].len();\n+   |\n+\n+error[E0425]: cannot find function `bar` in this scope\n+  --> $DIR/fn-to-method.rs:16:13\n+   |\n+LL |     let z = bar(Foo);\n+   |             ^^^ not found in this scope\n+   |\n+help: use the `.` operator to call the method `bar` on `Foo`\n+   |\n+LL -     let z = bar(Foo);\n+LL +     let z = Foo.bar();\n+   |\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "56494baff6bdf41a7340c6838266821ca319d29e", "filename": "src/test/ui/type/type-check/assignment-expected-bool.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -7,7 +7,7 @@ LL |     let _: bool = 0 = 0;\n help: you might have meant to compare for equality\n    |\n LL |     let _: bool = 0 == 0;\n-   |                     ~~\n+   |                      +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:9:14\n@@ -18,7 +18,7 @@ LL |         0 => 0 = 0,\n help: you might have meant to compare for equality\n    |\n LL |         0 => 0 == 0,\n-   |                ~~\n+   |                 +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:10:14\n@@ -29,7 +29,7 @@ LL |         _ => 0 = 0,\n help: you might have meant to compare for equality\n    |\n LL |         _ => 0 == 0,\n-   |                ~~\n+   |                 +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:14:17\n@@ -40,7 +40,7 @@ LL |         true => 0 = 0,\n help: you might have meant to compare for equality\n    |\n LL |         true => 0 == 0,\n-   |                   ~~\n+   |                    +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:18:8\n@@ -51,7 +51,7 @@ LL |     if 0 = 0 {}\n help: you might have meant to compare for equality\n    |\n LL |     if 0 == 0 {}\n-   |          ~~\n+   |           +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:20:24\n@@ -62,7 +62,7 @@ LL |     let _: bool = if { 0 = 0 } {\n help: you might have meant to compare for equality\n    |\n LL |     let _: bool = if { 0 == 0 } {\n-   |                          ~~\n+   |                           +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:21:9\n@@ -73,7 +73,7 @@ LL |         0 = 0\n help: you might have meant to compare for equality\n    |\n LL |         0 == 0\n-   |           ~~\n+   |            +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:23:9\n@@ -84,7 +84,7 @@ LL |         0 = 0\n help: you might have meant to compare for equality\n    |\n LL |         0 == 0\n-   |           ~~\n+   |            +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:26:13\n@@ -95,7 +95,7 @@ LL |     let _ = (0 = 0)\n help: you might have meant to compare for equality\n    |\n LL |     let _ = (0 == 0)\n-   |                ~~\n+   |                 +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:27:14\n@@ -106,7 +106,7 @@ LL |         && { 0 = 0 }\n help: you might have meant to compare for equality\n    |\n LL |         && { 0 == 0 }\n-   |                ~~\n+   |                 +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-expected-bool.rs:28:12\n@@ -117,7 +117,7 @@ LL |         || (0 = 0);\n help: you might have meant to compare for equality\n    |\n LL |         || (0 == 0);\n-   |               ~~\n+   |                +\n \n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/assignment-expected-bool.rs:31:22"}, {"sha": "3a7845096fd24f03694e5ba85051bcc8c4c4adf1", "filename": "src/test/ui/type/type-check/assignment-in-if.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.rs?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -40,4 +40,17 @@ fn main() {\n     ) {\n         println!(\"{}\", x);\n     }\n+\n+    if x == x && x = x && x == x {\n+        //~^ ERROR mismatched types\n+        //~| ERROR mismatched types\n+        //~| ERROR mismatched types\n+        println!(\"{}\", x);\n+    }\n+\n+    if x == x && x == x && x = x {\n+        //~^ ERROR mismatched types\n+        //~| ERROR mismatched types\n+        println!(\"{}\", x);\n+    }\n }"}, {"sha": "166f229377768f4266fd5885cb44b27ec61caf8d", "filename": "src/test/ui/type/type-check/assignment-in-if.stderr", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bd30785eb6e55f317b41b7c278f438807eeb174/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr?ref=4bd30785eb6e55f317b41b7c278f438807eeb174", "patch": "@@ -7,7 +7,7 @@ LL |     if x = x {\n help: you might have meant to compare for equality\n    |\n LL |     if x == x {\n-   |          ~~\n+   |           +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:20:8\n@@ -18,7 +18,7 @@ LL |     if (x = x) {\n help: you might have meant to compare for equality\n    |\n LL |     if (x == x) {\n-   |           ~~\n+   |            +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:25:8\n@@ -29,7 +29,7 @@ LL |     if y = (Foo { foo: x }) {\n help: you might have meant to compare for equality\n    |\n LL |     if y == (Foo { foo: x }) {\n-   |          ~~\n+   |           +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:30:8\n@@ -40,7 +40,7 @@ LL |     if 3 = x {\n help: you might have meant to compare for equality\n    |\n LL |     if 3 == x {\n-   |          ~~\n+   |           +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:36:13\n@@ -51,7 +51,7 @@ LL |             x = 4\n help: you might have meant to compare for equality\n    |\n LL |             x == 4\n-   |               ~~\n+   |                +\n \n error[E0308]: mismatched types\n   --> $DIR/assignment-in-if.rs:38:13\n@@ -62,8 +62,48 @@ LL |             x = 5\n help: you might have meant to compare for equality\n    |\n LL |             x == 5\n-   |               ~~\n+   |                +\n \n-error: aborting due to 6 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/assignment-in-if.rs:44:18\n+   |\n+LL |     if x == x && x = x && x == x {\n+   |                  ^ expected `bool`, found `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/assignment-in-if.rs:44:22\n+   |\n+LL |     if x == x && x = x && x == x {\n+   |                      ^ expected `bool`, found `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/assignment-in-if.rs:44:8\n+   |\n+LL |     if x == x && x = x && x == x {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |     if x == x && x == x && x == x {\n+   |                     +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/assignment-in-if.rs:51:28\n+   |\n+LL |     if x == x && x == x && x = x {\n+   |                            ^ expected `bool`, found `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/assignment-in-if.rs:51:8\n+   |\n+LL |     if x == x && x == x && x = x {\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |     if x == x && x == x && x == x {\n+   |                               +\n+\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}