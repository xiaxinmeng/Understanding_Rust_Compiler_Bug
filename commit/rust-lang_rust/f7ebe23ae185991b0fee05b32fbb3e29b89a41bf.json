{"sha": "f7ebe23ae185991b0fee05b32fbb3e29b89a41bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZWJlMjNhZTE4NTk5MWIwZmVlMDViMzJmYmIzZTI5Yjg5YTQxYmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-30T00:35:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-30T01:30:32Z"}, "message": "Add the ability to ignore tests by compiler config\n\n[test]\n[ignore(cfg(target_os = \"win32\"))]", "tree": {"sha": "1fb1114306acbbb0e70f3f418bde3dbcd76684a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fb1114306acbbb0e70f3f418bde3dbcd76684a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7ebe23ae185991b0fee05b32fbb3e29b89a41bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ebe23ae185991b0fee05b32fbb3e29b89a41bf", "html_url": "https://github.com/rust-lang/rust/commit/f7ebe23ae185991b0fee05b32fbb3e29b89a41bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7ebe23ae185991b0fee05b32fbb3e29b89a41bf/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e0593d9999a50c74ea2962e53b8f5686037fd36", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0593d9999a50c74ea2962e53b8f5686037fd36", "html_url": "https://github.com/rust-lang/rust/commit/2e0593d9999a50c74ea2962e53b8f5686037fd36"}], "stats": {"total": 86, "additions": 65, "deletions": 21}, "files": [{"sha": "61b3032abd21cf39c782a584b6aa156058fef299", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7ebe23ae185991b0fee05b32fbb3e29b89a41bf/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ebe23ae185991b0fee05b32fbb3e29b89a41bf/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=f7ebe23ae185991b0fee05b32fbb3e29b89a41bf", "patch": "@@ -18,6 +18,7 @@ export require_unique_names;\n export get_attr_name;\n export get_meta_item_name;\n export get_meta_item_value_str;\n+export get_meta_item_list;\n export mk_name_value_item_str;\n export mk_name_value_item;\n export mk_list_item;\n@@ -85,6 +86,13 @@ fn get_meta_item_value_str(meta: @ast::meta_item) -> option::t<str> {\n     }\n }\n \n+fn get_meta_item_list(meta: @ast::meta_item) -> option::t<[@ast::meta_item]> {\n+    alt meta.node {\n+      ast::meta_list(_, l) { option::some(l) }\n+      _ { option::none }\n+    }\n+}\n+\n fn attr_meta(attr: ast::attribute) -> @ast::meta_item { @attr.node.value }\n \n // Get the meta_items from inside a vector of attributes"}, {"sha": "f0eceb093b3b18198456ce1acc34e6844de1612c", "filename": "src/comp/front/config.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f7ebe23ae185991b0fee05b32fbb3e29b89a41bf/src%2Fcomp%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ebe23ae185991b0fee05b32fbb3e29b89a41bf/src%2Fcomp%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fconfig.rs?ref=f7ebe23ae185991b0fee05b32fbb3e29b89a41bf", "patch": "@@ -3,6 +3,7 @@ import syntax::{ast, fold};\n import attr;\n \n export strip_unconfigured_items;\n+export metas_in_cfg;\n \n // Support conditional compilation by transforming the AST, stripping out\n // any items that do not belong in the current configuration\n@@ -88,31 +89,24 @@ fn native_item_in_cfg(cfg: ast::crate_cfg, item: @ast::native_item) -> bool {\n // Determine if an item should be translated in the current crate\n // configuration based on the item's attributes\n fn in_cfg(cfg: ast::crate_cfg, attrs: [ast::attribute]) -> bool {\n+    metas_in_cfg(cfg, attr::attr_metas(attrs))\n+}\n+\n+fn metas_in_cfg(cfg: ast::crate_cfg, metas: [@ast::meta_item]) -> bool {\n \n     // The \"cfg\" attributes on the item\n-    let item_cfg_attrs = attr::find_attrs_by_name(attrs, \"cfg\");\n-    let item_has_cfg_attrs = vec::len(item_cfg_attrs) > 0u;\n-    if !item_has_cfg_attrs { ret true; }\n+    let cfg_metas = attr::find_meta_items_by_name(metas, \"cfg\");\n \n     // Pull the inner meta_items from the #[cfg(meta_item, ...)]  attributes,\n     // so we can match against them. This is the list of configurations for\n     // which the item is valid\n-    let item_cfg_metas = {\n-        fn extract_metas(&&inner_items: [@ast::meta_item],\n-                         &&cfg_item: @ast::meta_item) -> [@ast::meta_item] {\n-            alt cfg_item.node {\n-              ast::meta_list(name, items) {\n-                assert (name == \"cfg\");\n-                inner_items + items\n-              }\n-              _ { inner_items }\n-            }\n-        }\n-        let cfg_metas = attr::attr_metas(item_cfg_attrs);\n-        vec::foldl(extract_metas, [], cfg_metas)\n-    };\n+    let cfg_metas = vec::concat(vec::filter_map(\n+        {|&&i| attr::get_meta_item_list(i)}, cfg_metas));\n+\n+    let has_cfg_metas = vec::len(cfg_metas) > 0u;\n+    if !has_cfg_metas { ret true; }\n \n-    for cfg_mi: @ast::meta_item in item_cfg_metas {\n+    for cfg_mi: @ast::meta_item in cfg_metas {\n         if attr::contains(cfg, cfg_mi) { ret true; }\n     }\n "}, {"sha": "7c0d11b8fd635204ceffaa1688df821909914da3", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f7ebe23ae185991b0fee05b32fbb3e29b89a41bf/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ebe23ae185991b0fee05b32fbb3e29b89a41bf/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=f7ebe23ae185991b0fee05b32fbb3e29b89a41bf", "patch": "@@ -18,6 +18,7 @@ type test = {span: span, path: [ast::ident], ignore: bool};\n \n type test_ctxt =\n     @{sess: session::session,\n+      crate: @ast::crate,\n       next_node_id: node_id_gen,\n       mutable path: [ast::ident],\n       mutable testfns: [test]};\n@@ -41,6 +42,7 @@ fn modify_for_testing(sess: session::session,\n \n     let cx: test_ctxt =\n         @{sess: sess,\n+          crate: crate,\n           next_node_id: next_node_id_fn,\n           mutable path: [],\n           mutable testfns: []};\n@@ -102,7 +104,8 @@ fn fold_item(cx: test_ctxt, &&i: @ast::item, fld: fold::ast_fold) ->\n           }\n           _ {\n             log \"this is a test function\";\n-            let test = {span: i.span, path: cx.path, ignore: is_ignored(i)};\n+            let test = {span: i.span,\n+                        path: cx.path, ignore: is_ignored(cx, i)};\n             cx.testfns += [test];\n             log #fmt[\"have %u test functions\", vec::len(cx.testfns)];\n           }\n@@ -133,8 +136,16 @@ fn is_test_fn(i: @ast::item) -> bool {\n     ret has_test_attr && has_test_signature(i);\n }\n \n-fn is_ignored(i: @ast::item) -> bool {\n-    attr::contains_name(attr::attr_metas(i.attrs), \"ignore\")\n+fn is_ignored(cx: test_ctxt, i: @ast::item) -> bool {\n+    let ignoreattrs = attr::find_attrs_by_name(i.attrs, \"ignore\");\n+    let ignoreitems = attr::attr_metas(ignoreattrs);\n+    let cfg_metas = vec::concat(vec::filter_map(\n+        {|&&i| attr::get_meta_item_list(i)}, ignoreitems));\n+    ret if vec::is_not_empty(ignoreitems) {\n+        config::metas_in_cfg(cx.crate.node.config, cfg_metas)\n+    } else {\n+        false\n+    }\n }\n \n fn add_test_module(cx: test_ctxt, m: ast::_mod) -> ast::_mod {"}, {"sha": "e88987bc2cb7c5ac906bf6ab2f60db6565e6f780", "filename": "src/test/run-pass/test-ignore-cfg.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f7ebe23ae185991b0fee05b32fbb3e29b89a41bf/src%2Ftest%2Frun-pass%2Ftest-ignore-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ebe23ae185991b0fee05b32fbb3e29b89a41bf/src%2Ftest%2Frun-pass%2Ftest-ignore-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-ignore-cfg.rs?ref=f7ebe23ae185991b0fee05b32fbb3e29b89a41bf", "patch": "@@ -0,0 +1,31 @@\n+// compile-flags: --test --cfg ignorecfg\n+// xfail-fast\n+// xfail-pretty\n+\n+use std;\n+import std::option;\n+import std::vec;\n+\n+#[test]\n+#[ignore(cfg(ignorecfg))]\n+fn shouldignore() {\n+}\n+\n+#[test]\n+#[ignore(cfg(noignorecfg))]\n+fn shouldnotignore() {\n+}\n+\n+#[test]\n+fn checktests() {\n+    // Pull the tests out of the secret test module\n+    let tests = __test::tests();\n+\n+    let shouldignore = option::get(\n+        vec::find({|t| t.name == \"shouldignore\"}, tests));\n+    assert shouldignore.ignore == true;\n+\n+    let shouldnotignore = option::get(\n+        vec::find({|t| t.name == \"shouldnotignore\"}, tests));\n+    assert shouldnotignore.ignore == false;\n+}\n\\ No newline at end of file"}]}