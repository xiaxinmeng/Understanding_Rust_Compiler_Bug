{"sha": "e4ec7965ef364e3860cb8d24a877d3e420f015b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZWM3OTY1ZWYzNjRlMzg2MGNiOGQyNGE4NzdkM2U0MjBmMDE1Yjk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-16T14:34:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-16T14:34:27Z"}, "message": "Rollup merge of #71141 - Duddino:master, r=estebank\n\nProvide better compiler output when using `?` on `Option` in fn returning `Result` and vice-versa\n\nFixes #71089", "tree": {"sha": "403b48010ee018f523ca07c1b60cfd07a6c30538", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/403b48010ee018f523ca07c1b60cfd07a6c30538"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4ec7965ef364e3860cb8d24a877d3e420f015b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemGzzCRBK7hj4Ov3rIwAAdHIIAG691ZCnSvxOhgI7tzoXoeVo\nQRtQTk8Z6PSy+omXjOY4tyy/2kNO+72oz7d1kLTilal3oeYE/kVrp/EYQeE2zFI9\nrI2k2StJLdG0Mlh4vz+h90/3LJOL0Aovf4ZBd/m7laoiZnAnoyWMRdJF9Mv2Noy7\ny4BNcsjCRX4w6DuF8UzBbcTR8Lf9eeCfDhQNFIWlDLtURnYTNneq1QvOqjJ3tlUS\n+sLx6mrQR62GAryBfHlHuBIsDBZHJVf5QJmmpWIelzJ5i1gmep97dL0Dwrx/tH0s\nIFv3hA1KqxGFyaQrbSV45tQj5aGYau1ufVQirOjZTrlXMEiS2M/wLUvDL/v3Eh0=\n=FvA6\n-----END PGP SIGNATURE-----\n", "payload": "tree 403b48010ee018f523ca07c1b60cfd07a6c30538\nparent 33500a2bbfec4482e0f149eafdeb9e111feeb5fc\nparent fbc4168d809dae0408c2520ccfe585f564ad4a0b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587047667 +0200\ncommitter GitHub <noreply@github.com> 1587047667 +0200\n\nRollup merge of #71141 - Duddino:master, r=estebank\n\nProvide better compiler output when using `?` on `Option` in fn returning `Result` and vice-versa\n\nFixes #71089\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ec7965ef364e3860cb8d24a877d3e420f015b9", "html_url": "https://github.com/rust-lang/rust/commit/e4ec7965ef364e3860cb8d24a877d3e420f015b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4ec7965ef364e3860cb8d24a877d3e420f015b9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33500a2bbfec4482e0f149eafdeb9e111feeb5fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/33500a2bbfec4482e0f149eafdeb9e111feeb5fc", "html_url": "https://github.com/rust-lang/rust/commit/33500a2bbfec4482e0f149eafdeb9e111feeb5fc"}, {"sha": "fbc4168d809dae0408c2520ccfe585f564ad4a0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc4168d809dae0408c2520ccfe585f564ad4a0b", "html_url": "https://github.com/rust-lang/rust/commit/fbc4168d809dae0408c2520ccfe585f564ad4a0b"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "904720125d3d74b2ab4e934c24093ae4972cf4b1", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e4ec7965ef364e3860cb8d24a877d3e420f015b9/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ec7965ef364e3860cb8d24a877d3e420f015b9/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e4ec7965ef364e3860cb8d24a877d3e420f015b9", "patch": "@@ -292,7 +292,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 )),\n                                 Some(\n                                     \"the question mark operation (`?`) implicitly performs a \\\n-                                     conversion on the error value using the `From` trait\"\n+                                        conversion on the error value using the `From` trait\"\n                                         .to_owned(),\n                                 ),\n                             )\n@@ -312,6 +312,27 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             ))\n                         );\n \n+                        let should_convert_option_to_result =\n+                            format!(\"{}\", trait_ref.print_only_trait_path())\n+                                .starts_with(\"std::convert::From<std::option::NoneError\");\n+                        let should_convert_result_to_option = format!(\"{}\", trait_ref)\n+                            .starts_with(\"<std::option::NoneError as std::convert::From<\");\n+                        if is_try && is_from && should_convert_option_to_result {\n+                            err.span_suggestion_verbose(\n+                                span.shrink_to_lo(),\n+                                \"consider converting the `Option<T>` into a `Result<T, _>` using `Option::ok_or` or `Option::ok_or_else`\",\n+                                \".ok_or_else(|| /* error value */)\".to_string(),\n+                                Applicability::HasPlaceholders,\n+                            );\n+                        } else if is_try && is_from && should_convert_result_to_option {\n+                            err.span_suggestion_verbose(\n+                                span.shrink_to_lo(),\n+                                \"consider converting the `Result<T, _>` into an `Option<T>` using `Result::ok`\",\n+                                \".ok()\".to_string(),\n+                                Applicability::MachineApplicable,\n+                            );\n+                        }\n+\n                         let explanation =\n                             if obligation.cause.code == ObligationCauseCode::MainFunctionType {\n                                 \"consider using `()`, or a `Result`\".to_owned()"}, {"sha": "00e8b5244c54a418883fbc1b2818bd35d9b556f0", "filename": "src/test/ui/option-to-result.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e4ec7965ef364e3860cb8d24a877d3e420f015b9/src%2Ftest%2Fui%2Foption-to-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4ec7965ef364e3860cb8d24a877d3e420f015b9/src%2Ftest%2Fui%2Foption-to-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foption-to-result.rs?ref=e4ec7965ef364e3860cb8d24a877d3e420f015b9", "patch": "@@ -0,0 +1,13 @@\n+fn main(){ }\n+\n+fn test_result() -> Result<(),()> {\n+    let a:Option<()> = Some(());\n+    a?;//~ ERROR `?` couldn't convert the error\n+    Ok(())\n+}\n+\n+fn test_option() -> Option<i32>{\n+    let a:Result<i32, i32> = Ok(5);\n+    a?;//~ ERROR `?` couldn't convert the error\n+    Some(5)\n+}"}, {"sha": "f673ef7fc1e690af24e09538f339193e5101eeeb", "filename": "src/test/ui/option-to-result.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e4ec7965ef364e3860cb8d24a877d3e420f015b9/src%2Ftest%2Fui%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ec7965ef364e3860cb8d24a877d3e420f015b9/src%2Ftest%2Fui%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foption-to-result.stderr?ref=e4ec7965ef364e3860cb8d24a877d3e420f015b9", "patch": "@@ -0,0 +1,29 @@\n+error[E0277]: `?` couldn't convert the error to `()`\n+  --> $DIR/option-to-result.rs:5:6\n+   |\n+LL |     a?;\n+   |      ^ the trait `std::convert::From<std::option::NoneError>` is not implemented for `()`\n+   |\n+   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n+   = note: required by `std::convert::From::from`\n+help: consider converting the `Option<T>` into a `Result<T, _>` using `Option::ok_or` or `Option::ok_or_else`\n+   |\n+LL |     a.ok_or_else(|| /* error value */)?;\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `?` couldn't convert the error to `std::option::NoneError`\n+  --> $DIR/option-to-result.rs:11:6\n+   |\n+LL |     a?;\n+   |      ^ the trait `std::convert::From<i32>` is not implemented for `std::option::NoneError`\n+   |\n+   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n+   = note: required by `std::convert::From::from`\n+help: consider converting the `Result<T, _>` into an `Option<T>` using `Result::ok`\n+   |\n+LL |     a.ok()?;\n+   |      ^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7a4bb75967b1f8764e08b978f2904506293774fa", "filename": "src/test/ui/try-on-option.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4ec7965ef364e3860cb8d24a877d3e420f015b9/src%2Ftest%2Fui%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4ec7965ef364e3860cb8d24a877d3e420f015b9/src%2Ftest%2Fui%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.stderr?ref=e4ec7965ef364e3860cb8d24a877d3e420f015b9", "patch": "@@ -6,6 +6,10 @@ LL |     x?;\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = note: required by `std::convert::From::from`\n+help: consider converting the `Option<T>` into a `Result<T, _>` using `Option::ok_or` or `Option::ok_or_else`\n+   |\n+LL |     x.ok_or_else(|| /* error value */)?;\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option.rs:13:5"}]}