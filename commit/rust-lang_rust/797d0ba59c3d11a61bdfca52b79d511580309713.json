{"sha": "797d0ba59c3d11a61bdfca52b79d511580309713", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5N2QwYmE1OWMzZDExYTYxYmRmY2E1MmI3OWQ1MTE1ODAzMDk3MTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-24T12:47:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-24T12:47:57Z"}, "message": "Auto merge of #27857 - Manishearth:improve-fnkind, r=pnkfelix\n\nSince enums are namespaced now, should we also remove the `Fk` prefixes from `FnKind` and remove the reexport? (The reexport must be removed because otherwise it clashes with glob imports containing `ItemFn`). IMO writing `FnKind::Method` is much clearer than `FkMethod`.", "tree": {"sha": "c4a872798b0190a70c5a61d52bc84833e205e228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4a872798b0190a70c5a61d52bc84833e205e228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/797d0ba59c3d11a61bdfca52b79d511580309713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/797d0ba59c3d11a61bdfca52b79d511580309713", "html_url": "https://github.com/rust-lang/rust/commit/797d0ba59c3d11a61bdfca52b79d511580309713", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/797d0ba59c3d11a61bdfca52b79d511580309713/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db67cbe43dfce043c664c53d709b91252d5afc9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/db67cbe43dfce043c664c53d709b91252d5afc9e", "html_url": "https://github.com/rust-lang/rust/commit/db67cbe43dfce043c664c53d709b91252d5afc9e"}, {"sha": "c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d", "html_url": "https://github.com/rust-lang/rust/commit/c03bf18b84bb47b1b86a26c49db7d4e5f1acc30d"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "59eba6880a6d05a6cf49f859a62be85fddf966fe", "filename": "src/librustc/ast_map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fast_map%2Fblocks.rs?ref=797d0ba59c3d11a61bdfca52b79d511580309713", "patch": "@@ -191,7 +191,7 @@ impl<'a> FnLikeNode<'a> {\n             visit::FkItemFn(p.ident, p.generics, p.unsafety, p.constness, p.abi, p.vis)\n         };\n         let closure = |_: ClosureParts| {\n-            visit::FkFnBlock\n+            visit::FkClosure\n         };\n         let method = |_, ident, sig: &'a ast::MethodSig, vis, _, _| {\n             visit::FkMethod(ident, sig, vis)"}, {"sha": "25390535e608762810f654040ac8732636b042c0", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=797d0ba59c3d11a61bdfca52b79d511580309713", "patch": "@@ -1007,7 +1007,7 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n             sp: Span,\n             fn_id: NodeId) {\n     match kind {\n-        visit::FkFnBlock => {}\n+        visit::FkClosure => {}\n         _ => cx.param_env = ParameterEnvironment::for_item(cx.tcx, fn_id),\n     }\n "}, {"sha": "1e640ce47b6b2d5a23fc2bb3e4e6d4c9d043173a", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=797d0ba59c3d11a61bdfca52b79d511580309713", "patch": "@@ -225,7 +225,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n                 visit::walk_fn(self, fk, fd, b, s);\n                 self.param_envs.pop();\n             }\n-            visit::FkFnBlock(..) => {\n+            visit::FkClosure(..) => {\n                 visit::walk_fn(self, fk, fd, b, s);\n             }\n         }"}, {"sha": "fee24f61d4cc388811e6f01a376d0847de0b68cc", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=797d0ba59c3d11a61bdfca52b79d511580309713", "patch": "@@ -186,7 +186,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                     this.walk_fn(fk, fd, b, s)\n                 })\n             }\n-            visit::FkFnBlock(..) => {\n+            visit::FkClosure(..) => {\n                 self.walk_fn(fk, fd, b, s)\n             }\n         }\n@@ -484,7 +484,7 @@ impl<'a> LifetimeContext<'a> {\n                 self.visit_generics(&sig.generics);\n                 self.visit_explicit_self(&sig.explicit_self);\n             }\n-            visit::FkFnBlock(..) => {\n+            visit::FkClosure(..) => {\n                 visit::walk_fn_decl(self, fd);\n             }\n         }"}, {"sha": "187d4b4e5deb90687bb1355cc40191391ae7e881", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=797d0ba59c3d11a61bdfca52b79d511580309713", "patch": "@@ -68,7 +68,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n                 self.free_region_map = old_free_region_map;\n             }\n \n-            visit::FkFnBlock => {\n+            visit::FkClosure => {\n                 borrowck_fn(self, fk, fd, b, s, id);\n             }\n         }"}, {"sha": "7af2b3c1bfcc990cd88aece989701ba6a53f8e78", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=797d0ba59c3d11a61bdfca52b79d511580309713", "patch": "@@ -2137,7 +2137,7 @@ impl LintPass for UnconditionalRecursion {\n                 cx.tcx.impl_or_trait_item(DefId::local(id)).as_opt_method()\n             }\n             // closures can't recur, so they don't matter.\n-            visit::FkFnBlock => return\n+            visit::FkClosure => return\n         };\n \n         // Walk through this function (say `f`) looking to see if"}, {"sha": "0f8dc4d54a0c9da563bdad1e66a92cb17e891dc7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=797d0ba59c3d11a61bdfca52b79d511580309713", "patch": "@@ -542,7 +542,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n                 self.visit_explicit_self(&sig.explicit_self);\n                 MethodRibKind\n             }\n-            visit::FkFnBlock(..) => ClosureRibKind(node_id)\n+            visit::FkClosure(..) => ClosureRibKind(node_id)\n         };\n         self.resolve_function(rib_kind, declaration, block);\n     }"}, {"sha": "d1e159d445605e2ebc286672690a383374798339", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=797d0ba59c3d11a61bdfca52b79d511580309713", "patch": "@@ -428,7 +428,7 @@ impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                 fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n                 b: &'v ast::Block, span: Span, id: ast::NodeId) {\n         match fk {\n-            visit::FkFnBlock | visit::FkItemFn(..) => {}\n+            visit::FkClosure | visit::FkItemFn(..) => {}\n             visit::FkMethod(..) => {\n                 match self.tcx().impl_or_trait_item(DefId::local(id)) {\n                     ty::ImplOrTraitItem::MethodTraitItem(ty_method) => {"}, {"sha": "61c182f638f40bc628223735c091f838e9057b05", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=797d0ba59c3d11a61bdfca52b79d511580309713", "patch": "@@ -438,7 +438,7 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n             visit::FkMethod(_, sig, _) => {\n                 self.visit_generics_helper(&sig.generics)\n             }\n-            visit::FkFnBlock => {}\n+            visit::FkClosure => {}\n         }\n \n         for argument in &function_declaration.inputs {"}, {"sha": "824aee74ce5a6734ea638d5d97c5c3ce78c2f61f", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/797d0ba59c3d11a61bdfca52b79d511580309713/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=797d0ba59c3d11a61bdfca52b79d511580309713", "patch": "@@ -32,17 +32,16 @@ use codemap::Span;\n use ptr::P;\n use owned_slice::OwnedSlice;\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n     FkItemFn(Ident, &'a Generics, Unsafety, Constness, Abi, Visibility),\n \n     /// fn foo(&self)\n     FkMethod(Ident, &'a MethodSig, Option<Visibility>),\n \n-    /// |x, y| ...\n-    /// proc(x, y) ...\n-    FkFnBlock,\n+    /// |x, y| {}\n+    FkClosure,\n }\n \n /// Each method of the Visitor trait is a hook to be potentially\n@@ -616,7 +615,7 @@ pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n             visitor.visit_generics(&sig.generics);\n             visitor.visit_explicit_self(&sig.explicit_self);\n         }\n-        FkFnBlock(..) => {}\n+        FkClosure(..) => {}\n     }\n \n     visitor.visit_block(function_body)\n@@ -817,7 +816,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             }\n         }\n         ExprClosure(_, ref function_declaration, ref body) => {\n-            visitor.visit_fn(FkFnBlock,\n+            visitor.visit_fn(FkClosure,\n                              &**function_declaration,\n                              &**body,\n                              expression.span,"}]}