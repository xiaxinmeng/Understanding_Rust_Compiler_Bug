{"sha": "36b4199a8e4197420760438df464cffcaa674e6c", "node_id": "C_kwDOAAsO6NoAKDM2YjQxOTlhOGU0MTk3NDIwNzYwNDM4ZGY0NjRjZmZjYWE2NzRlNmM", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-26T09:00:26Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-04-06T06:25:53Z"}, "message": "Don't rely on `Debug` impl for `Erased`", "tree": {"sha": "043e301eb539cdfd187063b0b725059407d557a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/043e301eb539cdfd187063b0b725059407d557a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36b4199a8e4197420760438df464cffcaa674e6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36b4199a8e4197420760438df464cffcaa674e6c", "html_url": "https://github.com/rust-lang/rust/commit/36b4199a8e4197420760438df464cffcaa674e6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36b4199a8e4197420760438df464cffcaa674e6c/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "785459d630a129c4007e865b3c907cd5c469d604", "url": "https://api.github.com/repos/rust-lang/rust/commits/785459d630a129c4007e865b3c907cd5c469d604", "html_url": "https://github.com/rust-lang/rust/commit/785459d630a129c4007e865b3c907cd5c469d604"}], "stats": {"total": 56, "additions": 33, "deletions": 23}, "files": [{"sha": "705300b9b7a78167d4bad7edf88a8992b7f85142", "filename": "compiler/rustc_middle/src/query/erase.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/36b4199a8e4197420760438df464cffcaa674e6c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b4199a8e4197420760438df464cffcaa674e6c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs?ref=36b4199a8e4197420760438df464cffcaa674e6c", "patch": "@@ -1,21 +1,12 @@\n use crate::ty;\n use std::intrinsics::type_name;\n-use std::{\n-    fmt,\n-    mem::{size_of, transmute_copy, MaybeUninit},\n-};\n+use std::mem::{size_of, transmute_copy, MaybeUninit};\n \n #[derive(Copy, Clone)]\n pub struct Erased<T: Copy> {\n     data: MaybeUninit<T>,\n }\n \n-impl<T: Copy> fmt::Debug for Erased<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"Erased\")\n-    }\n-}\n-\n pub trait EraseType: Copy {\n     type Result: Copy;\n }"}, {"sha": "fa9fea723448660c44ba518a215744a29f87af20", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36b4199a8e4197420760438df464cffcaa674e6c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b4199a8e4197420760438df464cffcaa674e6c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=36b4199a8e4197420760438df464cffcaa674e6c", "patch": "@@ -501,6 +501,7 @@ macro_rules! define_feedable {\n \n                 match try_get_cached(tcx, cache, &key) {\n                     Some(old) => {\n+                        let old = restore::<$V>(old);\n                         bug!(\n                             \"Trying to feed an already recorded value for query {} key={key:?}:\\nold value: {old:?}\\nnew value: {value:?}\",\n                             stringify!($name),"}, {"sha": "a1dfb27c5d73abca9f7242cd351b1748a1a97ee7", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b4199a8e4197420760438df464cffcaa674e6c/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b4199a8e4197420760438df464cffcaa674e6c/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=36b4199a8e4197420760438df464cffcaa674e6c", "patch": "@@ -486,6 +486,11 @@ macro_rules! define_queries {\n                 stringify!($name)\n             }\n \n+            #[inline]\n+            fn format_value(self) -> fn(&Self::Value) -> String {\n+                |value| format!(\"{:?}\", restore::<query_values::$name<'tcx>>(*value))\n+            }\n+\n             #[inline]\n             fn cache_on_disk(self, tcx: TyCtxt<'tcx>, key: &Self::Key) -> bool {\n                 ::rustc_middle::query::cached::$name(tcx, key)\n@@ -819,7 +824,7 @@ macro_rules! define_queries_struct {\n \n             $($(#[$attr])*\n             #[inline(always)]\n-            #[tracing::instrument(level = \"trace\", skip(self, tcx), ret)]\n+            #[tracing::instrument(level = \"trace\", skip(self, tcx))]\n             fn $name(\n                 &'tcx self,\n                 tcx: TyCtxt<'tcx>,"}, {"sha": "534d13b1ae0f4a643c11022f56614c30649f259f", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/36b4199a8e4197420760438df464cffcaa674e6c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b4199a8e4197420760438df464cffcaa674e6c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=36b4199a8e4197420760438df464cffcaa674e6c", "patch": "@@ -538,7 +538,14 @@ impl<K: DepKind> DepGraph<K> {\n             if let Some(prev_index) = data.previous.node_to_index_opt(&node) {\n                 let dep_node_index = data.current.prev_index_to_index.lock()[prev_index];\n                 if let Some(dep_node_index) = dep_node_index {\n-                    crate::query::incremental_verify_ich(cx, data, result, prev_index, hash_result);\n+                    crate::query::incremental_verify_ich(\n+                        cx,\n+                        data,\n+                        result,\n+                        prev_index,\n+                        hash_result,\n+                        |value| format!(\"{:?}\", value),\n+                    );\n \n                     #[cfg(debug_assertions)]\n                     if hash_result.is_some() {"}, {"sha": "3ac8a852a4e77b7dd993df9915912f1f003cde52", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36b4199a8e4197420760438df464cffcaa674e6c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b4199a8e4197420760438df464cffcaa674e6c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=36b4199a8e4197420760438df464cffcaa674e6c", "patch": "@@ -18,7 +18,7 @@ pub trait CacheSelector<'tcx, V> {\n \n pub trait QueryCache: Sized {\n     type Key: Hash + Eq + Copy + Debug;\n-    type Value: Copy + Debug;\n+    type Value: Copy;\n \n     /// Checks if the query is already computed and in the cache.\n     fn lookup(&self, key: &Self::Key) -> Option<(Self::Value, DepNodeIndex)>;\n@@ -52,7 +52,7 @@ impl<K, V> Default for DefaultCache<K, V> {\n impl<K, V> QueryCache for DefaultCache<K, V>\n where\n     K: Eq + Hash + Copy + Debug,\n-    V: Copy + Debug,\n+    V: Copy,\n {\n     type Key = K;\n     type Value = V;\n@@ -120,7 +120,7 @@ impl<V> Default for SingleCache<V> {\n \n impl<V> QueryCache for SingleCache<V>\n where\n-    V: Copy + Debug,\n+    V: Copy,\n {\n     type Key = ();\n     type Value = V;\n@@ -164,7 +164,7 @@ impl<K: Idx, V> Default for VecCache<K, V> {\n impl<K, V> QueryCache for VecCache<K, V>\n where\n     K: Eq + Idx + Copy + Debug,\n-    V: Copy + Debug,\n+    V: Copy,\n {\n     type Key = K;\n     type Value = V;"}, {"sha": "dc981a802f366752063b8cc9d510f86c397a3c84", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36b4199a8e4197420760438df464cffcaa674e6c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b4199a8e4197420760438df464cffcaa674e6c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=36b4199a8e4197420760438df464cffcaa674e6c", "patch": "@@ -20,10 +20,12 @@ pub trait QueryConfig<Qcx: QueryContext>: Copy {\n     // `Key` and `Value` are `Copy` instead of `Clone` to ensure copying them stays cheap,\n     // but it isn't necessary.\n     type Key: DepNodeParams<Qcx::DepContext> + Eq + Hash + Copy + Debug;\n-    type Value: Debug + Copy;\n+    type Value: Copy;\n \n     type Cache: QueryCache<Key = Self::Key, Value = Self::Value>;\n \n+    fn format_value(self) -> fn(&Self::Value) -> String;\n+\n     // Don't use this method to access query results, instead use the methods on TyCtxt\n     fn query_state<'a>(self, tcx: Qcx) -> &'a QueryState<Self::Key, Qcx::DepKind>\n     where"}, {"sha": "95366e1ad0b8f65b684e09eec8f73ddf8bd9124b", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/36b4199a8e4197420760438df464cffcaa674e6c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b4199a8e4197420760438df464cffcaa674e6c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=36b4199a8e4197420760438df464cffcaa674e6c", "patch": "@@ -411,7 +411,8 @@ where\n         // get evaluated first, and re-feed the query.\n         if let Some((cached_result, _)) = cache.lookup(&key) {\n             panic!(\n-                \"fed query later has its value computed. The already cached value: {cached_result:?}\"\n+                \"fed query later has its value computed. The already cached value: {}\",\n+                (query.format_value())(&cached_result)\n             );\n         }\n     }\n@@ -582,6 +583,7 @@ where\n                     &result,\n                     prev_dep_node_index,\n                     query.hash_result(),\n+                    query.format_value(),\n                 );\n             }\n \n@@ -627,19 +629,21 @@ where\n         &result,\n         prev_dep_node_index,\n         query.hash_result(),\n+        query.format_value(),\n     );\n \n     Some((result, dep_node_index))\n }\n \n #[inline]\n-#[instrument(skip(tcx, dep_graph_data, result, hash_result), level = \"debug\")]\n-pub(crate) fn incremental_verify_ich<Tcx, V: Debug>(\n+#[instrument(skip(tcx, dep_graph_data, result, hash_result, format_value), level = \"debug\")]\n+pub(crate) fn incremental_verify_ich<Tcx, V>(\n     tcx: Tcx,\n     dep_graph_data: &DepGraphData<Tcx::DepKind>,\n     result: &V,\n     prev_index: SerializedDepNodeIndex,\n     hash_result: Option<fn(&mut StableHashingContext<'_>, &V) -> Fingerprint>,\n+    format_value: fn(&V) -> String,\n ) where\n     Tcx: DepContext,\n {\n@@ -654,7 +658,7 @@ pub(crate) fn incremental_verify_ich<Tcx, V: Debug>(\n     let old_hash = dep_graph_data.prev_fingerprint_of(prev_index);\n \n     if new_hash != old_hash {\n-        incremental_verify_ich_failed(tcx, prev_index, result);\n+        incremental_verify_ich_failed(tcx, prev_index, &|| format_value(&result));\n     }\n }\n \n@@ -678,7 +682,7 @@ where\n fn incremental_verify_ich_failed<Tcx>(\n     tcx: Tcx,\n     prev_index: SerializedDepNodeIndex,\n-    result: &dyn Debug,\n+    result: &dyn Fn() -> String,\n ) where\n     Tcx: DepContext,\n {\n@@ -708,7 +712,7 @@ fn incremental_verify_ich_failed<Tcx>(\n             run_cmd,\n             dep_node: format!(\"{dep_node:?}\"),\n         });\n-        panic!(\"Found unstable fingerprints for {dep_node:?}: {result:?}\");\n+        panic!(\"Found unstable fingerprints for {dep_node:?}: {}\", result());\n     }\n \n     INSIDE_VERIFY_PANIC.with(|in_panic| in_panic.set(old_in_panic));"}]}