{"sha": "6db68938ac3cb510f196c2649cea397aba403c9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYjY4OTM4YWMzY2I1MTBmMTk2YzI2NDljZWEzOTdhYmE0MDNjOWM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-15T01:35:35Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-16T23:37:10Z"}, "message": "MIR: hide .rodata constants vs by-ref ABI clash in trans.", "tree": {"sha": "77d4c65c50ef8ab5e9e972b51bf5421ec88b0168", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77d4c65c50ef8ab5e9e972b51bf5421ec88b0168"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6db68938ac3cb510f196c2649cea397aba403c9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6db68938ac3cb510f196c2649cea397aba403c9c", "html_url": "https://github.com/rust-lang/rust/commit/6db68938ac3cb510f196c2649cea397aba403c9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6db68938ac3cb510f196c2649cea397aba403c9c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0f8e2913a93573c78cddfd297944cff4eb4c41a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f8e2913a93573c78cddfd297944cff4eb4c41a", "html_url": "https://github.com/rust-lang/rust/commit/d0f8e2913a93573c78cddfd297944cff4eb4c41a"}], "stats": {"total": 59, "additions": 36, "deletions": 23}, "files": [{"sha": "3cc159978a8734efe0394bc56db3f8eaff477f83", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6db68938ac3cb510f196c2649cea397aba403c9c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db68938ac3cb510f196c2649cea397aba403c9c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=6db68938ac3cb510f196c2649cea397aba403c9c", "patch": "@@ -684,9 +684,10 @@ pub enum TerminatorKind<'tcx> {\n     Call {\n         /// The function that\u2019s being called\n         func: Operand<'tcx>,\n-        /// Arguments the function is called with. These are owned by the callee, which is free to\n-        /// modify them. This is important as \"by-value\" arguments might be passed by-reference at\n-        /// the ABI level.\n+        /// Arguments the function is called with.\n+        /// These are owned by the callee, which is free to modify them.\n+        /// This allows the memory occupied by \"by-value\" arguments to be\n+        /// reused across function calls without duplicating the contents.\n         args: Vec<Operand<'tcx>>,\n         /// Destination for the return value. If some, the call is converging.\n         destination: Option<(Lvalue<'tcx>, BasicBlock)>,"}, {"sha": "cdbcb43370fe0e6eb91f0d5829e53bfaa201bbc7", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6db68938ac3cb510f196c2649cea397aba403c9c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db68938ac3cb510f196c2649cea397aba403c9c/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=6db68938ac3cb510f196c2649cea397aba403c9c", "patch": "@@ -247,13 +247,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 } else {\n                     let args: Vec<_> =\n                         args.into_iter()\n-                            .map(|arg| {\n-                                let scope = this.local_scope();\n-                                // Function arguments are owned by the callee, so we need as_temp()\n-                                // instead of as_operand() to enforce copies\n-                                let operand = unpack!(block = this.as_temp(block, scope, arg));\n-                                Operand::Consume(Lvalue::Local(operand))\n-                            })\n+                            .map(|arg| unpack!(block = this.as_local_operand(block, arg)))\n                             .collect();\n \n                     let success = this.cfg.start_new_block();"}, {"sha": "bd26c961bb28b59558f7b85ce5e130d56f9dedca", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6db68938ac3cb510f196c2649cea397aba403c9c/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db68938ac3cb510f196c2649cea397aba403c9c/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=6db68938ac3cb510f196c2649cea397aba403c9c", "patch": "@@ -524,7 +524,16 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                         }\n                     }\n \n-                    let op = self.trans_operand(&bcx, arg);\n+                    let mut op = self.trans_operand(&bcx, arg);\n+\n+                    // The callee needs to own the argument memory if we pass it\n+                    // by-ref, so make a local copy of non-immediate constants.\n+                    if let (&mir::Operand::Constant(_), Ref(..)) = (arg, op.val) {\n+                        let tmp = LvalueRef::alloca(&bcx, op.ty, \"const\");\n+                        self.store_operand(&bcx, tmp.llval, tmp.alignment.to_align(), op);\n+                        op.val = Ref(tmp.llval, tmp.alignment);\n+                    }\n+\n                     self.trans_argument(&bcx, op, &mut llargs, &fn_ty,\n                                         &mut idx, &mut llfn, &def);\n                 }"}, {"sha": "59a1d4891f66fab5c2ab36ea02d590d975b90cd6", "filename": "src/test/mir-opt/nll/liveness-call-subtlety.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6db68938ac3cb510f196c2649cea397aba403c9c/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db68938ac3cb510f196c2649cea397aba403c9c/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fliveness-call-subtlety.rs?ref=6db68938ac3cb510f196c2649cea397aba403c9c", "patch": "@@ -31,21 +31,15 @@ fn main() {\n //            | Live variables at bb0[0]: []\n //        StorageLive(_1);\n //            | Live variables at bb0[1]: []\n-//        StorageLive(_2);\n-//            | Live variables at bb0[2]: []\n-//        _2 = const 22usize;\n-//            | Live variables at bb0[3]: [_2]\n-//        _1 = const <std::boxed::Box<T>>::new(_2) -> bb1;\n+//        _1 = const <std::boxed::Box<T>>::new(const 22usize) -> bb1;\n //    }\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n //    | Live variables on entry to bb1: [_1 (drop)]\n //    bb1: {\n //            | Live variables at bb1[0]: [_1 (drop)]\n-//        StorageDead(_2);\n+//        StorageLive(_2);\n //            | Live variables at bb1[1]: [_1 (drop)]\n-//        StorageLive(_3);\n-//            | Live variables at bb1[2]: [_1 (drop)]\n-//        _3 = const can_panic() -> [return: bb2, unwind: bb4];\n+//        _2 = const can_panic() -> [return: bb2, unwind: bb4];\n //    }\n // END rustc.main.nll.0.mir"}, {"sha": "aaeebe7495166d858629e124f40fe4ce0b8ee5fd", "filename": "src/test/mir-opt/nll/region-liveness-drop-no-may-dangle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6db68938ac3cb510f196c2649cea397aba403c9c/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-no-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db68938ac3cb510f196c2649cea397aba403c9c/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-no-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-no-may-dangle.rs?ref=6db68938ac3cb510f196c2649cea397aba403c9c", "patch": "@@ -46,5 +46,5 @@ impl<T> Drop for Wrap<T> {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#5r: {bb1[3], bb1[4], bb1[5], bb2[0], bb2[1], bb2[2], bb3[0], bb3[1], bb3[2], bb4[0], bb4[1], bb4[2], bb6[0], bb7[0], bb7[1], bb7[2], bb8[0]}\n+// | '_#5r: {bb1[3], bb1[4], bb1[5], bb2[0], bb2[1], bb2[2], bb3[0], bb4[0], bb4[1], bb4[2], bb6[0], bb7[0], bb7[1], bb8[0]}\n // END rustc.main.nll.0.mir"}, {"sha": "5c28746126a643c92e84123e7d43db0f4b961cdc", "filename": "src/test/mir-opt/nll/region-liveness-two-disjoint-uses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6db68938ac3cb510f196c2649cea397aba403c9c/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db68938ac3cb510f196c2649cea397aba403c9c/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs?ref=6db68938ac3cb510f196c2649cea397aba403c9c", "patch": "@@ -45,5 +45,5 @@ fn main() {\n // ...\n // _2 = &'_#1r _1[_3];\n // ...\n-// _2 = &'_#3r (*_11);\n+// _2 = &'_#3r (*_10);\n // END rustc.main.nll.0.mir"}, {"sha": "d02e3287bc38a0e123dbda9c9703e0e1c871cb03", "filename": "src/test/run-pass/mir_trans_calls.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6db68938ac3cb510f196c2649cea397aba403c9c/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db68938ac3cb510f196c2649cea397aba403c9c/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs?ref=6db68938ac3cb510f196c2649cea397aba403c9c", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(fn_traits)]\n+#![feature(fn_traits, test)]\n+\n+extern crate test;\n \n fn test1(a: isize, b: (i32, i32), c: &[i32]) -> (isize, (i32, i32), &[i32]) {\n     // Test passing a number of arguments including a fat pointer.\n@@ -156,6 +158,16 @@ fn test_fn_nested_pair(x: &((f32, f32), u32)) -> (f32, f32) {\n     (z.0, z.1)\n }\n \n+fn test_fn_const_arg_by_ref(mut a: [u64; 4]) -> u64 {\n+    // Mutate the by-reference argument, which won't work with\n+    // a non-immediate constant unless it's copied to the stack.\n+    let a = test::black_box(&mut a);\n+    a[0] += a[1];\n+    a[0] += a[2];\n+    a[0] += a[3];\n+    a[0]\n+}\n+\n fn main() {\n     assert_eq!(test1(1, (2, 3), &[4, 5, 6]), (1, (2, 3), &[4, 5, 6][..]));\n     assert_eq!(test2(98), 98);\n@@ -182,4 +194,7 @@ fn main() {\n     assert_eq!(test_fn_ignored_pair_0(), ());\n     assert_eq!(test_fn_ignored_pair_named(), (Foo, Foo));\n     assert_eq!(test_fn_nested_pair(&((1.0, 2.0), 0)), (1.0, 2.0));\n+\n+    const ARRAY: [u64; 4] = [1, 2, 3, 4];\n+    assert_eq!(test_fn_const_arg_by_ref(ARRAY), 1 + 2 + 3 + 4);\n }"}]}