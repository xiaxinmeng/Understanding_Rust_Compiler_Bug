{"sha": "7455f986a8cbf2ee628cf0fb4c164012e9a06031", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NTVmOTg2YThjYmYyZWU2MjhjZjBmYjRjMTY0MDEyZTlhMDYwMzE=", "commit": {"author": {"name": "Sangeun Kim", "email": "sammy.kim@samsung.com", "date": "2013-05-07T07:28:58Z"}, "committer": {"name": "Sangeun Kim", "email": "sammy.kim@samsung.com", "date": "2013-05-07T07:28:58Z"}, "message": "Make lint_table static", "tree": {"sha": "8b7a0abd9c08ef7d0e6729d92e9b8e4309140da8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b7a0abd9c08ef7d0e6729d92e9b8e4309140da8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7455f986a8cbf2ee628cf0fb4c164012e9a06031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7455f986a8cbf2ee628cf0fb4c164012e9a06031", "html_url": "https://github.com/rust-lang/rust/commit/7455f986a8cbf2ee628cf0fb4c164012e9a06031", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7455f986a8cbf2ee628cf0fb4c164012e9a06031/comments", "author": {"login": "sammykim", "id": 3492634, "node_id": "MDQ6VXNlcjM0OTI2MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3492634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sammykim", "html_url": "https://github.com/sammykim", "followers_url": "https://api.github.com/users/sammykim/followers", "following_url": "https://api.github.com/users/sammykim/following{/other_user}", "gists_url": "https://api.github.com/users/sammykim/gists{/gist_id}", "starred_url": "https://api.github.com/users/sammykim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sammykim/subscriptions", "organizations_url": "https://api.github.com/users/sammykim/orgs", "repos_url": "https://api.github.com/users/sammykim/repos", "events_url": "https://api.github.com/users/sammykim/events{/privacy}", "received_events_url": "https://api.github.com/users/sammykim/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sammykim", "id": 3492634, "node_id": "MDQ6VXNlcjM0OTI2MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3492634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sammykim", "html_url": "https://github.com/sammykim", "followers_url": "https://api.github.com/users/sammykim/followers", "following_url": "https://api.github.com/users/sammykim/following{/other_user}", "gists_url": "https://api.github.com/users/sammykim/gists{/gist_id}", "starred_url": "https://api.github.com/users/sammykim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sammykim/subscriptions", "organizations_url": "https://api.github.com/users/sammykim/orgs", "repos_url": "https://api.github.com/users/sammykim/repos", "events_url": "https://api.github.com/users/sammykim/events{/privacy}", "received_events_url": "https://api.github.com/users/sammykim/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e6a4be19d8e6a2cedc66be6cc602db8a1e71acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e6a4be19d8e6a2cedc66be6cc602db8a1e71acd", "html_url": "https://github.com/rust-lang/rust/commit/6e6a4be19d8e6a2cedc66be6cc602db8a1e71acd"}], "stats": {"total": 289, "additions": 145, "deletions": 144}, "files": [{"sha": "aad64d2ffe368f5ef405cfef743d206cca61b652", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 145, "deletions": 144, "changes": 289, "blob_url": "https://github.com/rust-lang/rust/blob/7455f986a8cbf2ee628cf0fb4c164012e9a06031/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7455f986a8cbf2ee628cf0fb4c164012e9a06031/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=7455f986a8cbf2ee628cf0fb4c164012e9a06031", "patch": "@@ -90,156 +90,157 @@ struct LintSpec {\n \n pub type LintDict = @HashMap<~str, LintSpec>;\n \n+static lint_table: &'static [(&'static str, LintSpec)] = &[\n+    (\"ctypes\",\n+     LintSpec {\n+        lint: ctypes,\n+        desc: \"proper use of core::libc types in foreign modules\",\n+        default: warn\n+     }),\n+\n+    (\"unused_imports\",\n+     LintSpec {\n+        lint: unused_imports,\n+        desc: \"imports that are never used\",\n+        default: warn\n+     }),\n+\n+    (\"while_true\",\n+     LintSpec {\n+        lint: while_true,\n+        desc: \"suggest using loop { } instead of while(true) { }\",\n+        default: warn\n+     }),\n+\n+    (\"path_statement\",\n+     LintSpec {\n+        lint: path_statement,\n+        desc: \"path statements with no effect\",\n+        default: warn\n+     }),\n+\n+    (\"unrecognized_lint\",\n+     LintSpec {\n+        lint: unrecognized_lint,\n+        desc: \"unrecognized lint attribute\",\n+        default: warn\n+     }),\n+\n+    (\"non_implicitly_copyable_typarams\",\n+     LintSpec {\n+        lint: non_implicitly_copyable_typarams,\n+        desc: \"passing non implicitly copyable types as copy type params\",\n+        default: warn\n+     }),\n+\n+    (\"vecs_implicitly_copyable\",\n+     LintSpec {\n+        lint: vecs_implicitly_copyable,\n+        desc: \"make vecs and strs not implicitly copyable \\\n+              (only checked at top level)\",\n+        default: warn\n+     }),\n+\n+    (\"implicit_copies\",\n+     LintSpec {\n+        lint: implicit_copies,\n+        desc: \"implicit copies of non implicitly copyable data\",\n+        default: warn\n+     }),\n+\n+    (\"deprecated_pattern\",\n+     LintSpec {\n+        lint: deprecated_pattern,\n+        desc: \"warn about deprecated uses of pattern bindings\",\n+        default: allow\n+     }),\n+\n+    (\"non_camel_case_types\",\n+     LintSpec {\n+        lint: non_camel_case_types,\n+        desc: \"types, variants and traits should have camel case names\",\n+        default: allow\n+     }),\n+\n+    (\"managed_heap_memory\",\n+     LintSpec {\n+        lint: managed_heap_memory,\n+        desc: \"use of managed (@ type) heap memory\",\n+        default: allow\n+     }),\n+\n+    (\"owned_heap_memory\",\n+     LintSpec {\n+        lint: owned_heap_memory,\n+        desc: \"use of owned (~ type) heap memory\",\n+        default: allow\n+     }),\n+\n+    (\"heap_memory\",\n+     LintSpec {\n+        lint: heap_memory,\n+        desc: \"use of any (~ type or @ type) heap memory\",\n+        default: allow\n+     }),\n+\n+    (\"type_limits\",\n+     LintSpec {\n+        lint: type_limits,\n+        desc: \"comparisons made useless by limits of the types involved\",\n+        default: warn\n+     }),\n+\n+    (\"default_methods\",\n+     LintSpec {\n+        lint: default_methods,\n+        desc: \"allow default methods\",\n+        default: deny\n+     }),\n+\n+    (\"deprecated_mutable_fields\",\n+     LintSpec {\n+        lint: deprecated_mutable_fields,\n+        desc: \"deprecated mutable fields in structures\",\n+        default: deny\n+    }),\n+\n+    (\"unused_unsafe\",\n+     LintSpec {\n+        lint: unused_unsafe,\n+        desc: \"unnecessary use of an `unsafe` block\",\n+        default: warn\n+    }),\n+\n+    (\"unused_variable\",\n+     LintSpec {\n+        lint: unused_variable,\n+        desc: \"detect variables which are not used in any way\",\n+        default: warn\n+    }),\n+\n+    (\"dead_assignment\",\n+     LintSpec {\n+        lint: dead_assignment,\n+        desc: \"detect assignments that will never be read\",\n+        default: warn\n+    }),\n+\n+    (\"unused_mut\",\n+     LintSpec {\n+        lint: unused_mut,\n+        desc: \"detect mut variables which don't need to be mutable\",\n+        default: warn\n+    }),\n+];\n+\n /*\n   Pass names should not contain a '-', as the compiler normalizes\n   '-' to '_' in command-line flags\n  */\n pub fn get_lint_dict() -> LintDict {\n-    let v = ~[\n-        (~\"ctypes\",\n-         LintSpec {\n-            lint: ctypes,\n-            desc: \"proper use of core::libc types in foreign modules\",\n-            default: warn\n-         }),\n-\n-        (~\"unused_imports\",\n-         LintSpec {\n-            lint: unused_imports,\n-            desc: \"imports that are never used\",\n-            default: warn\n-         }),\n-\n-        (~\"while_true\",\n-         LintSpec {\n-            lint: while_true,\n-            desc: \"suggest using loop { } instead of while(true) { }\",\n-            default: warn\n-         }),\n-\n-        (~\"path_statement\",\n-         LintSpec {\n-            lint: path_statement,\n-            desc: \"path statements with no effect\",\n-            default: warn\n-         }),\n-\n-        (~\"unrecognized_lint\",\n-         LintSpec {\n-            lint: unrecognized_lint,\n-            desc: \"unrecognized lint attribute\",\n-            default: warn\n-         }),\n-\n-        (~\"non_implicitly_copyable_typarams\",\n-         LintSpec {\n-            lint: non_implicitly_copyable_typarams,\n-            desc: \"passing non implicitly copyable types as copy type params\",\n-            default: warn\n-         }),\n-\n-        (~\"vecs_implicitly_copyable\",\n-         LintSpec {\n-            lint: vecs_implicitly_copyable,\n-            desc: \"make vecs and strs not implicitly copyable \\\n-                  (only checked at top level)\",\n-            default: warn\n-         }),\n-\n-        (~\"implicit_copies\",\n-         LintSpec {\n-            lint: implicit_copies,\n-            desc: \"implicit copies of non implicitly copyable data\",\n-            default: warn\n-         }),\n-\n-        (~\"deprecated_pattern\",\n-         LintSpec {\n-            lint: deprecated_pattern,\n-            desc: \"warn about deprecated uses of pattern bindings\",\n-            default: allow\n-         }),\n-\n-        (~\"non_camel_case_types\",\n-         LintSpec {\n-            lint: non_camel_case_types,\n-            desc: \"types, variants and traits should have camel case names\",\n-            default: allow\n-         }),\n-\n-        (~\"managed_heap_memory\",\n-         LintSpec {\n-            lint: managed_heap_memory,\n-            desc: \"use of managed (@ type) heap memory\",\n-            default: allow\n-         }),\n-\n-        (~\"owned_heap_memory\",\n-         LintSpec {\n-            lint: owned_heap_memory,\n-            desc: \"use of owned (~ type) heap memory\",\n-            default: allow\n-         }),\n-\n-        (~\"heap_memory\",\n-         LintSpec {\n-            lint: heap_memory,\n-            desc: \"use of any (~ type or @ type) heap memory\",\n-            default: allow\n-         }),\n-\n-        (~\"type_limits\",\n-         LintSpec {\n-            lint: type_limits,\n-            desc: \"comparisons made useless by limits of the types involved\",\n-            default: warn\n-         }),\n-\n-        (~\"default_methods\",\n-         LintSpec {\n-            lint: default_methods,\n-            desc: \"allow default methods\",\n-            default: deny\n-         }),\n-\n-        (~\"deprecated_mutable_fields\",\n-         LintSpec {\n-            lint: deprecated_mutable_fields,\n-            desc: \"deprecated mutable fields in structures\",\n-            default: deny\n-        }),\n-\n-        (~\"unused_unsafe\",\n-         LintSpec {\n-            lint: unused_unsafe,\n-            desc: \"unnecessary use of an `unsafe` block\",\n-            default: warn\n-        }),\n-\n-        (~\"unused_variable\",\n-         LintSpec {\n-            lint: unused_variable,\n-            desc: \"detect variables which are not used in any way\",\n-            default: warn\n-        }),\n-\n-        (~\"dead_assignment\",\n-         LintSpec {\n-            lint: dead_assignment,\n-            desc: \"detect assignments that will never be read\",\n-            default: warn\n-        }),\n-\n-        (~\"unused_mut\",\n-         LintSpec {\n-            lint: unused_mut,\n-            desc: \"detect mut variables which don't need to be mutable\",\n-            default: warn\n-        }),\n-    ];\n     let mut map = HashMap::new();\n-    do vec::consume(v) |_, (k, v)| {\n-        map.insert(k, v);\n+    for lint_table.each() |&(k, v)| {\n+        map.insert(k.to_str(), v);\n     }\n     return @map;\n }"}]}