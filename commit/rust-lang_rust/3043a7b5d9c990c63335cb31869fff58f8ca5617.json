{"sha": "3043a7b5d9c990c63335cb31869fff58f8ca5617", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNDNhN2I1ZDljOTkwYzYzMzM1Y2IzMTg2OWZmZjU4ZjhjYTU2MTc=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-12-14T08:25:29Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-12-14T20:55:46Z"}, "message": "Improve warnings on incompatible options involving -Zinstrument-coverage\n\nAdds checks for:\n\n* `no_core` attribute\n* explicitly-enabled `legacy` symbol mangling\n* mir_opt_level > 1 (which enables inlining)\n\nI removed code from the `Inline` MIR pass that forcibly disabled\ninlining if `-Zinstrument-coverage` was set. The default `mir_opt_level`\ndoes not enable inlining anyway. But if the level is explicitly set and\nis greater than 1, I issue a warning.\n\nThe new warnings show up in tests, which is much better for diagnosing\npotential option conflicts in these cases.", "tree": {"sha": "a506c00ae3c0ac9b835c180219f750b535d901d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a506c00ae3c0ac9b835c180219f750b535d901d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3043a7b5d9c990c63335cb31869fff58f8ca5617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3043a7b5d9c990c63335cb31869fff58f8ca5617", "html_url": "https://github.com/rust-lang/rust/commit/3043a7b5d9c990c63335cb31869fff58f8ca5617", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3043a7b5d9c990c63335cb31869fff58f8ca5617/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e527baf775221dc25cba5c48cbf44d28893d8cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e527baf775221dc25cba5c48cbf44d28893d8cd", "html_url": "https://github.com/rust-lang/rust/commit/0e527baf775221dc25cba5c48cbf44d28893d8cd"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "9e5ae21f7026e19db25fff9d29fbc0ef791997ba", "filename": "src/driver.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3043a7b5d9c990c63335cb31869fff58f8ca5617/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3043a7b5d9c990c63335cb31869fff58f8ca5617/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=3043a7b5d9c990c63335cb31869fff58f8ca5617", "patch": "@@ -41,7 +41,7 @@ fn arg_value<'a, T: Deref<Target = str>>(\n \n         match arg.next().or_else(|| args.next()) {\n             Some(v) if pred(v) => return Some(v),\n-            _ => {},\n+            _ => {}\n         }\n     }\n     None\n@@ -85,7 +85,7 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n         // run on the unoptimized MIR. On the other hand this results in some false negatives. If\n         // MIR passes can be enabled / disabled separately, we should figure out, what passes to\n         // use for Clippy.\n-        config.opts.debugging_opts.mir_opt_level = 0;\n+        config.opts.debugging_opts.mir_opt_level = Some(0);\n     }\n }\n \n@@ -121,11 +121,12 @@ You can use tool lints to allow or deny lints from your code, eg.:\n \n const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust-clippy/issues/new\";\n \n-static ICE_HOOK: SyncLazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> = SyncLazy::new(|| {\n-    let hook = panic::take_hook();\n-    panic::set_hook(Box::new(|info| report_clippy_ice(info, BUG_REPORT_URL)));\n-    hook\n-});\n+static ICE_HOOK: SyncLazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> =\n+    SyncLazy::new(|| {\n+        let hook = panic::take_hook();\n+        panic::set_hook(Box::new(|info| report_clippy_ice(info, BUG_REPORT_URL)));\n+        hook\n+    });\n \n fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Invoke our ICE handler, which prints the actual panic message and optionally a backtrace\n@@ -257,14 +258,17 @@ pub fn main() {\n \n         // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n         // We're invoking the compiler programmatically, so we ignore this/\n-        let wrapper_mode = orig_args.get(1).map(Path::new).and_then(Path::file_stem) == Some(\"rustc\".as_ref());\n+        let wrapper_mode =\n+            orig_args.get(1).map(Path::new).and_then(Path::file_stem) == Some(\"rustc\".as_ref());\n \n         if wrapper_mode {\n             // we still want to be able to invoke it normally though\n             orig_args.remove(1);\n         }\n \n-        if !wrapper_mode && (orig_args.iter().any(|a| a == \"--help\" || a == \"-h\") || orig_args.len() == 1) {\n+        if !wrapper_mode\n+            && (orig_args.iter().any(|a| a == \"--help\" || a == \"-h\") || orig_args.len() == 1)\n+        {\n             display_help();\n             exit(0);\n         }\n@@ -285,13 +289,11 @@ pub fn main() {\n         if clippy_enabled {\n             args.extend(vec![\"--cfg\".into(), r#\"feature=\"cargo-clippy\"\"#.into()]);\n             if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n-                args.extend(extra_args.split(\"__CLIPPY_HACKERY__\").filter_map(|s| {\n-                    if s.is_empty() {\n-                        None\n-                    } else {\n-                        Some(s.to_string())\n-                    }\n-                }));\n+                args.extend(\n+                    extra_args\n+                        .split(\"__CLIPPY_HACKERY__\")\n+                        .filter_map(|s| if s.is_empty() { None } else { Some(s.to_string()) }),\n+                );\n             }\n         }\n         let mut clippy = ClippyCallbacks;"}]}