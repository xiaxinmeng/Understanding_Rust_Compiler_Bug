{"sha": "75ed34223adb02c7bbfa5ae5e62c48952ff29914", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZWQzNDIyM2FkYjAyYzdiYmZhNWFlNWU2MmM0ODk1MmZmMjk5MTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-22T09:30:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-22T09:30:15Z"}, "message": "Auto merge of #84910 - eopb:stabilize_int_error_matching, r=yaahc\n\nstabilize `int_error_matching`\n\ncloses #22639\n\n> It has been over half a year since https://github.com/rust-lang/rust/pull/77640#pullrequestreview-511263516, and the indexing question is rejected in https://github.com/rust-lang/rust/pull/79728#pullrequestreview-633030341, so I guess we can submit another stabilization attempt? \ud83d\ude09\n\n_Originally posted by `@kennytm` in https://github.com/rust-lang/rust/issues/22639#issuecomment-831738266_", "tree": {"sha": "ced3ec1c4cc8b540c86aabf77195373780a789f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ced3ec1c4cc8b540c86aabf77195373780a789f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75ed34223adb02c7bbfa5ae5e62c48952ff29914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75ed34223adb02c7bbfa5ae5e62c48952ff29914", "html_url": "https://github.com/rust-lang/rust/commit/75ed34223adb02c7bbfa5ae5e62c48952ff29914", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75ed34223adb02c7bbfa5ae5e62c48952ff29914/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44f4a87d7047db0deff5ef033fd2af820722e9a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/44f4a87d7047db0deff5ef033fd2af820722e9a5", "html_url": "https://github.com/rust-lang/rust/commit/44f4a87d7047db0deff5ef033fd2af820722e9a5"}, {"sha": "52a6885c50698abad26a91e0643d336df4d6f39e", "url": "https://api.github.com/repos/rust-lang/rust/commits/52a6885c50698abad26a91e0643d336df4d6f39e", "html_url": "https://github.com/rust-lang/rust/commit/52a6885c50698abad26a91e0643d336df4d6f39e"}], "stats": {"total": 41, "additions": 10, "deletions": 31}, "files": [{"sha": "649913dd025b5838a02d717505cceaf994a78680", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75ed34223adb02c7bbfa5ae5e62c48952ff29914/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ed34223adb02c7bbfa5ae5e62c48952ff29914/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=75ed34223adb02c7bbfa5ae5e62c48952ff29914", "patch": "@@ -42,7 +42,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n-#![feature(int_error_matching)]\n #![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n #![feature(control_flow_enum)]"}, {"sha": "73959291481d8d1bc944700a0c4c72713497d7f6", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75ed34223adb02c7bbfa5ae5e62c48952ff29914/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ed34223adb02c7bbfa5ae5e62c48952ff29914/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=75ed34223adb02c7bbfa5ae5e62c48952ff29914", "patch": "@@ -165,7 +165,6 @@\n #![feature(slice_ptr_get)]\n #![feature(no_niche)] // rust-lang/rust#68303\n #![feature(no_coverage)] // rust-lang/rust#84605\n-#![feature(int_error_matching)]\n #![cfg_attr(bootstrap, feature(target_feature_11))]\n #![deny(unsafe_op_in_unsafe_fn)]\n #![deny(or_patterns_back_compat)]"}, {"sha": "cdeba9c0792738be5fb55ebe76cf8f9f604172f5", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/75ed34223adb02c7bbfa5ae5e62c48952ff29914/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ed34223adb02c7bbfa5ae5e62c48952ff29914/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=75ed34223adb02c7bbfa5ae5e62c48952ff29914", "patch": "@@ -74,26 +74,20 @@ pub struct ParseIntError {\n /// # Example\n ///\n /// ```\n-/// #![feature(int_error_matching)]\n-///\n /// # fn main() {\n /// if let Err(e) = i32::from_str_radix(\"a12\", 10) {\n ///     println!(\"Failed conversion to i32: {:?}\", e.kind());\n /// }\n /// # }\n /// ```\n-#[unstable(\n-    feature = \"int_error_matching\",\n-    reason = \"it can be useful to match errors when making error messages \\\n-              for integer parsing\",\n-    issue = \"22639\"\n-)]\n+#[stable(feature = \"int_error_matching\", since = \"1.55.0\")]\n #[derive(Debug, Clone, PartialEq, Eq)]\n #[non_exhaustive]\n pub enum IntErrorKind {\n     /// Value being parsed is empty.\n     ///\n-    /// Among other causes, this variant will be constructed when parsing an empty string.\n+    /// This variant will be constructed when parsing an empty string.\n+    #[stable(feature = \"int_error_matching\", since = \"1.55.0\")]\n     Empty,\n     /// Contains an invalid digit in its context.\n     ///\n@@ -102,26 +96,25 @@ pub enum IntErrorKind {\n     ///\n     /// This variant is also constructed when a `+` or `-` is misplaced within a string\n     /// either on its own or in the middle of a number.\n+    #[stable(feature = \"int_error_matching\", since = \"1.55.0\")]\n     InvalidDigit,\n     /// Integer is too large to store in target integer type.\n+    #[stable(feature = \"int_error_matching\", since = \"1.55.0\")]\n     PosOverflow,\n     /// Integer is too small to store in target integer type.\n+    #[stable(feature = \"int_error_matching\", since = \"1.55.0\")]\n     NegOverflow,\n     /// Value was Zero\n     ///\n     /// This variant will be emitted when the parsing string has a value of zero, which\n     /// would be illegal for non-zero types.\n+    #[stable(feature = \"int_error_matching\", since = \"1.55.0\")]\n     Zero,\n }\n \n impl ParseIntError {\n     /// Outputs the detailed cause of parsing an integer failing.\n-    #[unstable(\n-        feature = \"int_error_matching\",\n-        reason = \"it can be useful to match errors when making error messages \\\n-              for integer parsing\",\n-        issue = \"22639\"\n-    )]\n+    #[stable(feature = \"int_error_matching\", since = \"1.55.0\")]\n     pub fn kind(&self) -> &IntErrorKind {\n         &self.kind\n     }"}, {"sha": "6351f9564a4efb578133e0681511433d04ac7082", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75ed34223adb02c7bbfa5ae5e62c48952ff29914/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ed34223adb02c7bbfa5ae5e62c48952ff29914/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=75ed34223adb02c7bbfa5ae5e62c48952ff29914", "patch": "@@ -57,12 +57,7 @@ pub use nonzero::{NonZeroI128, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI8, No\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub use error::TryFromIntError;\n \n-#[unstable(\n-    feature = \"int_error_matching\",\n-    reason = \"it can be useful to match errors when making error messages \\\n-              for integer parsing\",\n-    issue = \"22639\"\n-)]\n+#[stable(feature = \"int_error_matching\", since = \"1.55.0\")]\n pub use error::IntErrorKind;\n \n macro_rules! usize_isize_to_xe_bytes_doc {"}, {"sha": "56af38485847c263d170bfb044b8a6836eaf4c3e", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75ed34223adb02c7bbfa5ae5e62c48952ff29914/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ed34223adb02c7bbfa5ae5e62c48952ff29914/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=75ed34223adb02c7bbfa5ae5e62c48952ff29914", "patch": "@@ -45,7 +45,6 @@\n #![feature(try_trait_v2)]\n #![feature(slice_internals)]\n #![feature(slice_partition_dedup)]\n-#![feature(int_error_matching)]\n #![feature(iter_advance_by)]\n #![feature(iter_partition_in_place)]\n #![feature(iter_intersperse)]"}, {"sha": "1cfa71e250f1adfd8a377f245d1ea5ee4b52cb6a", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/75ed34223adb02c7bbfa5ae5e62c48952ff29914/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ed34223adb02c7bbfa5ae5e62c48952ff29914/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=75ed34223adb02c7bbfa5ae5e62c48952ff29914", "patch": "@@ -278,7 +278,6 @@\n #![feature(global_asm)]\n #![feature(hashmap_internals)]\n #![feature(int_error_internals)]\n-#![feature(int_error_matching)]\n #![feature(integer_atomics)]\n #![feature(into_future)]\n #![feature(intra_doc_pointers)]"}, {"sha": "e7051f0ce95b24e2610fd14a92c31b7fb6b3bdb5", "filename": "library/std/src/num.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75ed34223adb02c7bbfa5ae5e62c48952ff29914/library%2Fstd%2Fsrc%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ed34223adb02c7bbfa5ae5e62c48952ff29914/library%2Fstd%2Fsrc%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnum.rs?ref=75ed34223adb02c7bbfa5ae5e62c48952ff29914", "patch": "@@ -22,12 +22,7 @@ pub use core::num::{NonZeroI128, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI8,\n #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n pub use core::num::{NonZeroU128, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8, NonZeroUsize};\n \n-#[unstable(\n-    feature = \"int_error_matching\",\n-    reason = \"it can be useful to match errors when making error messages \\\n-              for integer parsing\",\n-    issue = \"22639\"\n-)]\n+#[stable(feature = \"int_error_matching\", since = \"1.55.0\")]\n pub use core::num::IntErrorKind;\n \n #[cfg(test)]"}]}