{"sha": "2bb96ff5619714d174f0fd511426955fb7b21d51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYjk2ZmY1NjE5NzE0ZDE3NGYwZmQ1MTE0MjY5NTVmYjdiMjFkNTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-22T11:20:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-22T11:20:04Z"}, "message": "Auto merge of #1428 - RalfJung:shim-arg-size-verify, r=RalfJung\n\nverify the size of all shim arguments", "tree": {"sha": "f8d35ea0934a1f88ef256a479ce902b55983ddad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8d35ea0934a1f88ef256a479ce902b55983ddad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bb96ff5619714d174f0fd511426955fb7b21d51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb96ff5619714d174f0fd511426955fb7b21d51", "html_url": "https://github.com/rust-lang/rust/commit/2bb96ff5619714d174f0fd511426955fb7b21d51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bb96ff5619714d174f0fd511426955fb7b21d51/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "427c8a6bb876ec7856d69ef7037294a1f1d2a1db", "url": "https://api.github.com/repos/rust-lang/rust/commits/427c8a6bb876ec7856d69ef7037294a1f1d2a1db", "html_url": "https://github.com/rust-lang/rust/commit/427c8a6bb876ec7856d69ef7037294a1f1d2a1db"}, {"sha": "fbb8c1526ae55f479bdfaf7c00341cb4d36ad597", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb8c1526ae55f479bdfaf7c00341cb4d36ad597", "html_url": "https://github.com/rust-lang/rust/commit/fbb8c1526ae55f479bdfaf7c00341cb4d36ad597"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "09191011a4a897a4c4d3e15f88c5dc7f62b9c82b", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bb96ff5619714d174f0fd511426955fb7b21d51/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb96ff5619714d174f0fd511426955fb7b21d51/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=2bb96ff5619714d174f0fd511426955fb7b21d51", "patch": "@@ -170,7 +170,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Dynamic symbol loading\n             \"dlsym\" => {\n                 let &[handle, symbol] = check_arg_count(args)?;\n-                this.read_scalar(handle)?.not_undef()?;\n+                this.read_scalar(handle)?.to_machine_usize(this)?;\n                 let symbol = this.read_scalar(symbol)?.not_undef()?;\n                 let symbol_name = this.memory.read_c_str(symbol)?;\n                 if let Some(dlsym) = Dlsym::from_str(symbol_name, &this.tcx.sess.target.target.target_os)? {\n@@ -369,9 +369,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"pthread_atfork\" => {\n                 let &[prepare, parent, child] = check_arg_count(args)?;\n-                this.read_scalar(prepare)?.not_undef()?;\n-                this.read_scalar(parent)?.not_undef()?;\n-                this.read_scalar(child)?.not_undef()?;\n+                this.force_bits(this.read_scalar(prepare)?.not_undef()?, this.memory.pointer_size())?;\n+                this.force_bits(this.read_scalar(parent)?.not_undef()?, this.memory.pointer_size())?;\n+                this.force_bits(this.read_scalar(child)?.not_undef()?, this.memory.pointer_size())?;\n                 // We do not support forking, so there is nothing to do here.\n                 this.write_null(dest)?;\n             }"}, {"sha": "e6d39af453958f3c569fba31af347bc88eae25b9", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bb96ff5619714d174f0fd511426955fb7b21d51/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb96ff5619714d174f0fd511426955fb7b21d51/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=2bb96ff5619714d174f0fd511426955fb7b21d51", "patch": "@@ -105,13 +105,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Querying system information\n             \"pthread_get_stackaddr_np\" => {\n                 let &[thread] = check_arg_count(args)?;\n-                this.read_scalar(thread)?.not_undef()?;\n+                this.read_scalar(thread)?.to_machine_usize(this)?;\n                 let stack_addr = Scalar::from_uint(STACK_ADDR, this.pointer_size());\n                 this.write_scalar(stack_addr, dest)?;\n             }\n             \"pthread_get_stacksize_np\" => {\n                 let &[thread] = check_arg_count(args)?;\n-                this.read_scalar(thread)?.not_undef()?;\n+                this.read_scalar(thread)?.to_machine_usize(this)?;\n                 let stack_size = Scalar::from_uint(STACK_SIZE, this.pointer_size());\n                 this.write_scalar(stack_size, dest)?;\n             }"}, {"sha": "c24824153ca24121e194d64ce8714ac4db4aa966", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bb96ff5619714d174f0fd511426955fb7b21d51/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb96ff5619714d174f0fd511426955fb7b21d51/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=2bb96ff5619714d174f0fd511426955fb7b21d51", "patch": "@@ -210,7 +210,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"GetProcAddress\" => {\n                 #[allow(non_snake_case)]\n                 let &[hModule, lpProcName] = check_arg_count(args)?;\n-                this.read_scalar(hModule)?.not_undef()?;\n+                this.read_scalar(hModule)?.to_machine_isize(this)?;\n                 let name = this.memory.read_c_str(this.read_scalar(lpProcName)?.not_undef()?)?;\n                 if let Some(dlsym) = Dlsym::from_str(name, &this.tcx.sess.target.target.target_os)? {\n                     let ptr = this.memory.create_fn_alloc(FnVal::Other(dlsym));"}]}