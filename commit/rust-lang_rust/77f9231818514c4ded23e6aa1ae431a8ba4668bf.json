{"sha": "77f9231818514c4ded23e6aa1ae431a8ba4668bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZjkyMzE4MTg1MTRjNGRlZDIzZTZhYTFhZTQzMWE4YmE0NjY4YmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-12T05:53:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-12T05:53:18Z"}, "message": "Auto merge of #31368 - JohanLorenzo:dont-strip-if-test-build, r=alexcrichton\n\nTools which rely on DWARF for generating code coverage report, don't generate accurate numbers on test builds. For instance, [this sample main](https://github.com/JohanLorenzo/rust-testing-example/blob/757bdbf3887f43db9771c20cb72dfc32aa8f4321/src/main.rs) returns [100% coverage](https://coveralls.io/builds/4940156/source?filename=main.rs) when [kcov](https://github.com/SimonKagstrom/kcov/) runs.\n\nWith @pnkfelix 's great help, we could narrow down the issue: The linker strips unused function during phase 6. Here's a patch which stops stripping when someone calls `rustc --test $ARGS`. @pnkfelix wasn't sure if we should add a new flag, or just use --test. What do you think @alexcrichton ?\n\nAlso, I'm not too sure: where is the best place to add a test for this addition?\n\nThanks for the help!", "tree": {"sha": "dc9f1a3f52e60a85d57c56d385afbbba0a9898b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc9f1a3f52e60a85d57c56d385afbbba0a9898b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77f9231818514c4ded23e6aa1ae431a8ba4668bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77f9231818514c4ded23e6aa1ae431a8ba4668bf", "html_url": "https://github.com/rust-lang/rust/commit/77f9231818514c4ded23e6aa1ae431a8ba4668bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77f9231818514c4ded23e6aa1ae431a8ba4668bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b2c7030fd3c8773fc9d567ae240e896d5616be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b2c7030fd3c8773fc9d567ae240e896d5616be7", "html_url": "https://github.com/rust-lang/rust/commit/4b2c7030fd3c8773fc9d567ae240e896d5616be7"}, {"sha": "274f27a476d48a006f8e7142d4a239f63ea2d403", "url": "https://api.github.com/repos/rust-lang/rust/commits/274f27a476d48a006f8e7142d4a239f63ea2d403", "html_url": "https://github.com/rust-lang/rust/commit/274f27a476d48a006f8e7142d4a239f63ea2d403"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "b02cef6c6669b004f063534362162b30db4fb00c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f9231818514c4ded23e6aa1ae431a8ba4668bf/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f9231818514c4ded23e6aa1ae431a8ba4668bf/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=77f9231818514c4ded23e6aa1ae431a8ba4668bf", "patch": "@@ -507,6 +507,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"system linker to link outputs with\"),\n     link_args: Option<Vec<String>> = (None, parse_opt_list,\n         \"extra arguments to pass to the linker (space separated)\"),\n+    link_dead_code: bool = (false, parse_bool,\n+        \"let the linker strip dead coded (turning it on can be used for code coverage)\"),\n     lto: bool = (false, parse_bool,\n         \"perform LLVM link-time optimizations\"),\n     target_cpu: Option<String> = (None, parse_opt_string,"}, {"sha": "d3131f209e8a75899e299cf635c134bfa5dbdde8", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77f9231818514c4ded23e6aa1ae431a8ba4668bf/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f9231818514c4ded23e6aa1ae431a8ba4668bf/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=77f9231818514c4ded23e6aa1ae431a8ba4668bf", "patch": "@@ -976,7 +976,9 @@ fn link_args(cmd: &mut Linker,\n \n     // Try to strip as much out of the generated object by removing unused\n     // sections if possible. See more comments in linker.rs\n-    cmd.gc_sections(dylib);\n+    if !sess.opts.cg.link_dead_code {\n+        cmd.gc_sections(dylib);\n+    }\n \n     let used_link_args = sess.cstore.used_link_args();\n "}, {"sha": "c1f9065e9d2d621d37bbf8574f0b7725da3ec218", "filename": "src/test/run-make/codegen-options-parsing/Makefile", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77f9231818514c4ded23e6aa1ae431a8ba4668bf/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/77f9231818514c4ded23e6aa1ae431a8ba4668bf/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile?ref=77f9231818514c4ded23e6aa1ae431a8ba4668bf", "patch": "@@ -22,3 +22,10 @@ all:\n \t$(RUSTC) -C lto=foo dummy.rs 2>&1 | \\\n \t\tgrep 'codegen option `lto` takes no value'\n \t$(RUSTC) -C lto dummy.rs\n+\n+\t# Should not link dead code...\n+\t$(RUSTC) -Z print-link-args dummy.rs 2>&1 | \\\n+\t\tgrep -e '--gc-sections\\|-dead_strip\\|/OPT:REF,ICF'\n+\t# ... unless you specifically ask to keep it\n+\t$(RUSTC) -Z print-link-args -C link-dead-code dummy.rs 2>&1 | \\\n+\t\t(! grep -e '--gc-sections\\|-dead_strip\\|/OPT:REF,ICF')"}]}