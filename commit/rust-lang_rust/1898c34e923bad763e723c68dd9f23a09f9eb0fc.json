{"sha": "1898c34e923bad763e723c68dd9f23a09f9eb0fc", "node_id": "C_kwDOAAsO6NoAKDE4OThjMzRlOTIzYmFkNzYzZTcyM2M2OGRkOWYyM2EwOWY5ZWIwZmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-26T21:06:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-26T21:06:38Z"}, "message": "Auto merge of #103571 - RalfJung:miri, r=RalfJung\n\nupdate Miri\n\nr? `@ghost`", "tree": {"sha": "17ffe73852caae02d84b5c0e86673eb044d6ca6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17ffe73852caae02d84b5c0e86673eb044d6ca6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1898c34e923bad763e723c68dd9f23a09f9eb0fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1898c34e923bad763e723c68dd9f23a09f9eb0fc", "html_url": "https://github.com/rust-lang/rust/commit/1898c34e923bad763e723c68dd9f23a09f9eb0fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1898c34e923bad763e723c68dd9f23a09f9eb0fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36285c5de8915ecc00d91ae0baa79a87ed5858d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/36285c5de8915ecc00d91ae0baa79a87ed5858d5", "html_url": "https://github.com/rust-lang/rust/commit/36285c5de8915ecc00d91ae0baa79a87ed5858d5"}, {"sha": "6ce5226b4b2b35cb261d92e6ca8622abad28aa6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce5226b4b2b35cb261d92e6ca8622abad28aa6e", "html_url": "https://github.com/rust-lang/rust/commit/6ce5226b4b2b35cb261d92e6ca8622abad28aa6e"}], "stats": {"total": 326, "additions": 234, "deletions": 92}, "files": [{"sha": "5803a88c0e757846d1e1661d411d30baf4f04e83", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -538,15 +538,23 @@ extern \"Rust\" {\n     fn miri_start_panic(payload: *mut u8) -> !;\n \n     /// Miri-provided extern function to get the internal unique identifier for the allocation that a pointer\n-    /// points to. This is only useful as an input to `miri_print_stacks`, and it is a separate call because\n+    /// points to. If this pointer is invalid (not pointing to an allocation), interpretation will abort.\n+    ///\n+    /// This is only useful as an input to `miri_print_borrow_stacks`, and it is a separate call because\n     /// getting a pointer to an allocation at runtime can change the borrow stacks in the allocation.\n+    /// This function should be considered unstable. It exists only to support `miri_print_borrow_stacks` and so\n+    /// inherits all of its instability.\n     fn miri_get_alloc_id(ptr: *const ()) -> u64;\n \n     /// Miri-provided extern function to print (from the interpreter, not the program) the contents of all\n-    /// borrow stacks in an allocation. The format of what this emits is unstable and may change at any time.\n-    /// In particular, users should be aware that Miri will periodically attempt to garbage collect the\n-    /// contents of all stacks. Callers of this function may wish to pass `-Zmiri-tag-gc=0` to disable the GC.\n-    fn miri_print_stacks(alloc_id: u64);\n+    /// borrow stacks in an allocation. The leftmost tag is the bottom of the stack.\n+    /// The format of what this emits is unstable and may change at any time. In particular, users should be\n+    /// aware that Miri will periodically attempt to garbage collect the contents of all stacks. Callers of\n+    /// this function may wish to pass `-Zmiri-tag-gc=0` to disable the GC.\n+    ///\n+    /// This function is extremely unstable. At any time the format of its output may change, its signature may\n+    /// change, or it may be removed entirely.\n+    fn miri_print_borrow_stacks(alloc_id: u64);\n \n     /// Miri-provided extern function to print (from the interpreter, not the\n     /// program) the contents of a section of program memory, as bytes. Bytes"}, {"sha": "0977c0ba016bd6d93973b69130b97edcdc5344bc", "filename": "src/tools/miri/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fbuild.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     // Re-export the TARGET environment variable so it can\n     // be accessed by miri.\n     let target = std::env::var(\"TARGET\").unwrap();\n-    println!(\"cargo:rustc-env=TARGET={}\", target);\n+    println!(\"cargo:rustc-env=TARGET={target}\");\n }"}, {"sha": "22da80be90211c9584f802646ec0d738f3fe94ae", "filename": "src/tools/miri/cargo-miri/src/phases.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -34,7 +34,7 @@ Examples:\n \"#;\n \n fn show_help() {\n-    println!(\"{}\", CARGO_MIRI_HELP);\n+    println!(\"{CARGO_MIRI_HELP}\");\n }\n \n fn show_version() {\n@@ -52,7 +52,7 @@ fn forward_patched_extern_arg(args: &mut impl Iterator<Item = String>, cmd: &mut\n     let path = args.next().expect(\"`--extern` should be followed by a filename\");\n     if let Some(lib) = path.strip_suffix(\".rlib\") {\n         // If this is an rlib, make it an rmeta.\n-        cmd.arg(format!(\"{}.rmeta\", lib));\n+        cmd.arg(format!(\"{lib}.rmeta\"));\n     } else {\n         // Some other extern file (e.g. a `.so`). Forward unchanged.\n         cmd.arg(path);\n@@ -336,7 +336,7 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n                     \"[cargo-miri rustc inside rustdoc] captured input:\\n{}\",\n                     std::str::from_utf8(&env.stdin).unwrap()\n                 );\n-                eprintln!(\"[cargo-miri rustc inside rustdoc] going to run:\\n{:?}\", cmd);\n+                eprintln!(\"[cargo-miri rustc inside rustdoc] going to run:\\n{cmd:?}\");\n             }\n \n             exec_with_pipe(cmd, &env.stdin, format!(\"{}.stdin\", out_filename(\"\", \"\").display()));\n@@ -374,7 +374,7 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n                         val.push(\"metadata\");\n                     }\n                 }\n-                cmd.arg(format!(\"{}={}\", emit_flag, val.join(\",\")));\n+                cmd.arg(format!(\"{emit_flag}={}\", val.join(\",\")));\n             } else if arg == \"--extern\" {\n                 // Patch `--extern` filenames, since Cargo sometimes passes stub `.rlib` files:\n                 // https://github.com/rust-lang/miri/issues/1705\n@@ -535,7 +535,7 @@ pub fn phase_runner(mut binary_args: impl Iterator<Item = String>, phase: Runner\n     // Run it.\n     debug_cmd(\"[cargo-miri runner]\", verbose, &cmd);\n     match phase {\n-        RunnerPhase::Rustdoc => exec_with_pipe(cmd, &info.stdin, format!(\"{}.stdin\", binary)),\n+        RunnerPhase::Rustdoc => exec_with_pipe(cmd, &info.stdin, format!(\"{binary}.stdin\")),\n         RunnerPhase::Cargo => exec(cmd),\n     }\n }"}, {"sha": "60f39cb36abaa458a19147731b22d939f7ac36a4", "filename": "src/tools/miri/cargo-miri/src/util.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Futil.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -83,7 +83,7 @@ pub fn escape_for_toml(s: &str) -> String {\n     // We want to surround this string in quotes `\"`. So we first escape all quotes,\n     // and also all backslashes (that are used to escape quotes).\n     let s = s.replace('\\\\', r#\"\\\\\"#).replace('\"', r#\"\\\"\"#);\n-    format!(\"\\\"{}\\\"\", s)\n+    format!(\"\\\"{s}\\\"\")\n }\n \n /// Returns the path to the `miri` binary\n@@ -175,7 +175,7 @@ pub fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n     let is_ci = env::var_os(\"CI\").is_some() || env::var_os(\"TF_BUILD\").is_some();\n     if ask && !is_ci {\n         let mut buf = String::new();\n-        print!(\"I will run `{:?}` to {}. Proceed? [Y/n] \", cmd, text);\n+        print!(\"I will run `{cmd:?}` to {text}. Proceed? [Y/n] \");\n         io::stdout().flush().unwrap();\n         io::stdin().read_line(&mut buf).unwrap();\n         match buf.trim().to_lowercase().as_ref() {\n@@ -185,10 +185,10 @@ pub fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n             a => show_error!(\"invalid answer `{}`\", a),\n         };\n     } else {\n-        eprintln!(\"Running `{:?}` to {}.\", cmd, text);\n+        eprintln!(\"Running `{cmd:?}` to {text}.\");\n     }\n \n-    if cmd.status().unwrap_or_else(|_| panic!(\"failed to execute {:?}\", cmd)).success().not() {\n+    if cmd.status().unwrap_or_else(|_| panic!(\"failed to execute {cmd:?}\")).success().not() {\n         show_error!(\"failed to {}\", text);\n     }\n }\n@@ -276,12 +276,12 @@ pub fn debug_cmd(prefix: &str, verbose: usize, cmd: &Command) {\n         // Print only what has been changed for this `cmd`.\n         for (var, val) in cmd.get_envs() {\n             if let Some(val) = val {\n-                writeln!(out, \"{}={:?} \\\\\", var.to_string_lossy(), val).unwrap();\n+                writeln!(out, \"{}={val:?} \\\\\", var.to_string_lossy()).unwrap();\n             } else {\n                 writeln!(out, \"--unset={}\", var.to_string_lossy()).unwrap();\n             }\n         }\n     }\n     write!(out, \"{cmd:?}\").unwrap();\n-    eprintln!(\"{}\", out);\n+    eprintln!(\"{out}\");\n }"}, {"sha": "d0e98a8b0dba9ce8f6346bc2dc75fbafaa25e7d6", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -1 +1 @@\n-b1ab3b738ac718da74cd4aa0bb7f362d0adbdf84\n+85d089b41e2a0c0f07ab34f6c5a7c451389f25e6"}, {"sha": "bd01ea655dd70b0f40a51dab5fab13c030b69fc5", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -192,7 +192,7 @@ fn init_late_loggers(tcx: TyCtxt<'_>) {\n             if log::Level::from_str(&var).is_ok() {\n                 env::set_var(\n                     \"RUSTC_LOG\",\n-                    &format!(\n+                    format!(\n                         \"rustc_middle::mir::interpret={0},rustc_const_eval::interpret={0}\",\n                         var\n                     ),\n@@ -243,7 +243,7 @@ fn host_sysroot() -> Option<String> {\n                     )\n                 }\n             }\n-            format!(\"{}/toolchains/{}\", home, toolchain)\n+            format!(\"{home}/toolchains/{toolchain}\")\n         }\n         _ => option_env!(\"RUST_SYSROOT\")\n             .unwrap_or_else(|| {\n@@ -330,7 +330,7 @@ fn main() {\n         } else if crate_kind == \"host\" {\n             false\n         } else {\n-            panic!(\"invalid `MIRI_BE_RUSTC` value: {:?}\", crate_kind)\n+            panic!(\"invalid `MIRI_BE_RUSTC` value: {crate_kind:?}\")\n         };\n \n         // We cannot use `rustc_driver::main` as we need to adjust the CLI arguments."}, {"sha": "ac5dcbf0f4f2fc8b799d046bf69f54bada7dc0fa", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -870,6 +870,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         this.machine.threads.active_thread_stack_mut()\n     }\n \n+    /// Set the name of the current thread. The buffer must not include the null terminator.\n     #[inline]\n     fn set_thread_name(&mut self, thread: ThreadId, new_thread_name: Vec<u8>) {\n         let this = self.eval_context_mut();"}, {"sha": "e7e5b35ac2cd2aa6143b1242dfa222b1b7bdbd44", "filename": "src/tools/miri/src/concurrency/vector_clock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -399,7 +399,7 @@ mod tests {\n \n         //Test partial_cmp\n         let compare = l.partial_cmp(&r);\n-        assert_eq!(compare, o, \"Invalid comparison\\n l: {:?}\\n r: {:?}\", l, r);\n+        assert_eq!(compare, o, \"Invalid comparison\\n l: {l:?}\\n r: {r:?}\");\n         let alt_compare = r.partial_cmp(&l);\n         assert_eq!(\n             alt_compare,"}, {"sha": "ec81ffd3cd5c9c681c2fc6a23beb3d1d78773e01", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -263,7 +263,7 @@ pub fn report_error<'tcx, 'mir>(\n     msg.insert(0, e.to_string());\n     report_msg(\n         DiagLevel::Error,\n-        &if let Some(title) = title { format!(\"{}: {}\", title, msg[0]) } else { msg[0].clone() },\n+        &if let Some(title) = title { format!(\"{title}: {}\", msg[0]) } else { msg[0].clone() },\n         msg,\n         vec![],\n         helps,"}, {"sha": "f98727186c48d91f07159b875e414e1cc454cf99", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -1,6 +1,7 @@\n pub mod convert;\n \n use std::cmp;\n+use std::iter;\n use std::mem;\n use std::num::NonZeroUsize;\n use std::time::Duration;\n@@ -107,7 +108,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Gets an instance for a path.\n     fn resolve_path(&self, path: &[&str]) -> ty::Instance<'tcx> {\n         self.try_resolve_path(path)\n-            .unwrap_or_else(|| panic!(\"failed to find required Rust item: {:?}\", path))\n+            .unwrap_or_else(|| panic!(\"failed to find required Rust item: {path:?}\"))\n     }\n \n     /// Evaluates the scalar at the specified path. Returns Some(val)\n@@ -505,7 +506,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             RejectOpWith::WarningWithoutBacktrace => {\n                 this.tcx\n                     .sess\n-                    .warn(&format!(\"{} was made to return an error due to isolation\", op_name));\n+                    .warn(format!(\"{op_name} was made to return an error due to isolation\"));\n                 Ok(())\n             }\n             RejectOpWith::Warning => {\n@@ -735,6 +736,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         })\n     }\n \n+    /// Read a sequence of bytes until the first null terminator.\n     fn read_c_str<'a>(&'a self, ptr: Pointer<Option<Provenance>>) -> InterpResult<'tcx, &'a [u8]>\n     where\n         'tcx: 'a,\n@@ -761,6 +763,30 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         this.read_bytes_ptr_strip_provenance(ptr, len)\n     }\n \n+    /// Helper function to write a sequence of bytes with an added null-terminator, which is what\n+    /// the Unix APIs usually handle. This function returns `Ok((false, length))` without trying\n+    /// to write if `size` is not large enough to fit the contents of `c_str` plus a null\n+    /// terminator. It returns `Ok((true, length))` if the writing process was successful. The\n+    /// string length returned does include the null terminator.\n+    fn write_c_str(\n+        &mut self,\n+        c_str: &[u8],\n+        ptr: Pointer<Option<Provenance>>,\n+        size: u64,\n+    ) -> InterpResult<'tcx, (bool, u64)> {\n+        // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n+        // terminator to memory using the `ptr` pointer would cause an out-of-bounds access.\n+        let string_length = u64::try_from(c_str.len()).unwrap();\n+        let string_length = string_length.checked_add(1).unwrap();\n+        if size < string_length {\n+            return Ok((false, string_length));\n+        }\n+        self.eval_context_mut()\n+            .write_bytes_ptr(ptr, c_str.iter().copied().chain(iter::once(0u8)))?;\n+        Ok((true, string_length))\n+    }\n+\n+    /// Read a sequence of u16 until the first null terminator.\n     fn read_wide_str(&self, mut ptr: Pointer<Option<Provenance>>) -> InterpResult<'tcx, Vec<u16>> {\n         let this = self.eval_context_ref();\n         let size2 = Size::from_bytes(2);\n@@ -783,6 +809,39 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         Ok(wchars)\n     }\n \n+    /// Helper function to write a sequence of u16 with an added 0x0000-terminator, which is what\n+    /// the Windows APIs usually handle. This function returns `Ok((false, length))` without trying\n+    /// to write if `size` is not large enough to fit the contents of `os_string` plus a null\n+    /// terminator. It returns `Ok((true, length))` if the writing process was successful. The\n+    /// string length returned does include the null terminator. Length is measured in units of\n+    /// `u16.`\n+    fn write_wide_str(\n+        &mut self,\n+        wide_str: &[u16],\n+        ptr: Pointer<Option<Provenance>>,\n+        size: u64,\n+    ) -> InterpResult<'tcx, (bool, u64)> {\n+        // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required\n+        // 0x0000 terminator to memory would cause an out-of-bounds access.\n+        let string_length = u64::try_from(wide_str.len()).unwrap();\n+        let string_length = string_length.checked_add(1).unwrap();\n+        if size < string_length {\n+            return Ok((false, string_length));\n+        }\n+\n+        // Store the UTF-16 string.\n+        let size2 = Size::from_bytes(2);\n+        let this = self.eval_context_mut();\n+        let mut alloc = this\n+            .get_ptr_alloc_mut(ptr, size2 * string_length, Align::from_bytes(2).unwrap())?\n+            .unwrap(); // not a ZST, so we will get a result\n+        for (offset, wchar) in wide_str.iter().copied().chain(iter::once(0x0000)).enumerate() {\n+            let offset = u64::try_from(offset).unwrap();\n+            alloc.write_scalar(alloc_range(size2 * offset, size2), Scalar::from_u16(wchar))?;\n+        }\n+        Ok((true, string_length))\n+    }\n+\n     /// Check that the ABI is what we expect.\n     fn check_abi<'a>(&self, abi: Abi, exp_abi: Abi) -> InterpResult<'a, ()> {\n         if self.eval_context_ref().machine.enforce_abi && abi != exp_abi {"}, {"sha": "e014e2db1e1f2061f624671374a51ef1f0967e09", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -191,12 +191,12 @@ impl interpret::Provenance for Provenance {\n             Provenance::Concrete { alloc_id, sb } => {\n                 // Forward `alternate` flag to `alloc_id` printing.\n                 if f.alternate() {\n-                    write!(f, \"[{:#?}]\", alloc_id)?;\n+                    write!(f, \"[{alloc_id:#?}]\")?;\n                 } else {\n-                    write!(f, \"[{:?}]\", alloc_id)?;\n+                    write!(f, \"[{alloc_id:?}]\")?;\n                 }\n                 // Print Stacked Borrows tag.\n-                write!(f, \"{:?}\", sb)?;\n+                write!(f, \"{sb:?}\")?;\n             }\n             Provenance::Wildcard => {\n                 write!(f, \"[wildcard]\")?;"}, {"sha": "c8ff06a36652d4d02ed429f4278c699d44673b30", "filename": "src/tools/miri/src/range_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -40,7 +40,7 @@ impl<T> RangeMap<T> {\n         let mut left = 0usize; // inclusive\n         let mut right = self.v.len(); // exclusive\n         loop {\n-            debug_assert!(left < right, \"find_offset: offset {} is out-of-bounds\", offset);\n+            debug_assert!(left < right, \"find_offset: offset {offset} is out-of-bounds\");\n             let candidate = left.checked_add(right).unwrap() / 2;\n             let elem = &self.v[candidate];\n             if offset < elem.range.start {"}, {"sha": "1b3205aabc99da2663dc4d4f82240baeafa887e2", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -321,7 +321,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     return Ok(Some(body));\n                 }\n \n-                this.handle_unsupported(format!(\"can't call foreign function: {}\", link_name))?;\n+                this.handle_unsupported(format!(\"can't call foreign function: {link_name}\"))?;\n                 return Ok(None);\n             }\n         }\n@@ -420,10 +420,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"miri_get_alloc_id\" => {\n                 let [ptr] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let (alloc_id, _, _) = this.ptr_get_alloc_id(ptr)?;\n+                let (alloc_id, _, _) = this.ptr_get_alloc_id(ptr).map_err(|_e| {\n+                    err_machine_stop!(TerminationInfo::Abort(\n+                        format!(\"pointer passed to miri_get_alloc_id must not be dangling, got {ptr:?}\")\n+                    ))\n+                })?;\n                 this.write_scalar(Scalar::from_u64(alloc_id.0.get()), dest)?;\n             }\n-            \"miri_print_stacks\" => {\n+            \"miri_print_borrow_stacks\" => {\n                 let [id] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n                 let id = this.read_scalar(id)?.to_u64()?;\n                 if let Some(id) = std::num::NonZeroU64::new(id) {"}, {"sha": "99b3605c60175458d117488ab67d7bc01f22c5ce", "filename": "src/tools/miri/src/shims/os_str.rs", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -1,6 +1,5 @@\n use std::borrow::Cow;\n use std::ffi::{OsStr, OsString};\n-use std::iter;\n use std::path::{Path, PathBuf};\n \n #[cfg(unix)]\n@@ -9,7 +8,6 @@ use std::os::unix::ffi::{OsStrExt, OsStringExt};\n use std::os::windows::ffi::{OsStrExt, OsStringExt};\n \n use rustc_middle::ty::layout::LayoutOf;\n-use rustc_target::abi::{Align, Size};\n \n use crate::*;\n \n@@ -100,16 +98,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let bytes = os_str_to_bytes(os_str)?;\n-        // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n-        // terminator to memory using the `ptr` pointer would cause an out-of-bounds access.\n-        let string_length = u64::try_from(bytes.len()).unwrap();\n-        let string_length = string_length.checked_add(1).unwrap();\n-        if size < string_length {\n-            return Ok((false, string_length));\n-        }\n-        self.eval_context_mut()\n-            .write_bytes_ptr(ptr, bytes.iter().copied().chain(iter::once(0u8)))?;\n-        Ok((true, string_length))\n+        self.eval_context_mut().write_c_str(bytes, ptr, size)\n     }\n \n     /// Helper function to write an OsStr as a 0x0000-terminated u16-sequence, which is what\n@@ -140,25 +129,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         }\n \n         let u16_vec = os_str_to_u16vec(os_str)?;\n-        // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required\n-        // 0x0000 terminator to memory would cause an out-of-bounds access.\n-        let string_length = u64::try_from(u16_vec.len()).unwrap();\n-        let string_length = string_length.checked_add(1).unwrap();\n-        if size < string_length {\n-            return Ok((false, string_length));\n-        }\n-\n-        // Store the UTF-16 string.\n-        let size2 = Size::from_bytes(2);\n-        let this = self.eval_context_mut();\n-        let mut alloc = this\n-            .get_ptr_alloc_mut(ptr, size2 * string_length, Align::from_bytes(2).unwrap())?\n-            .unwrap(); // not a ZST, so we will get a result\n-        for (offset, wchar) in u16_vec.into_iter().chain(iter::once(0x0000)).enumerate() {\n-            let offset = u64::try_from(offset).unwrap();\n-            alloc.write_scalar(alloc_range(size2 * offset, size2), Scalar::from_u16(wchar))?;\n-        }\n-        Ok((true, string_length))\n+        self.eval_context_mut().write_wide_str(&u16_vec, ptr, size)\n     }\n \n     /// Allocate enough memory to store the given `OsStr` as a null-terminated sequence of bytes."}, {"sha": "d755e5f10bae897947b7bd6bc41da1def3f196c7", "filename": "src/tools/miri/src/shims/unix/freebsd/foreign_items.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffreebsd%2Fforeign_items.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -26,8 +26,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"pthread_set_name_np\" => {\n                 let [thread, name] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let res =\n-                    this.pthread_setname_np(this.read_scalar(thread)?, this.read_scalar(name)?)?;\n+                let max_len = usize::MAX; // freebsd does not seem to have a limit.\n+                let res = this.pthread_setname_np(\n+                    this.read_scalar(thread)?,\n+                    this.read_scalar(name)?,\n+                    max_len,\n+                )?;\n                 this.write_scalar(res, dest)?;\n             }\n "}, {"sha": "b152082b4deb80f21f22538cfcc4ff07bb74ef9e", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -621,7 +621,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             return Ok(-1);\n         }\n \n-        let fd = options.open(&path).map(|file| {\n+        let fd = options.open(path).map(|file| {\n             let fh = &mut this.machine.file_handler;\n             fh.insert_fd(Box::new(FileHandle { file, writable }))\n         });\n@@ -1862,7 +1862,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n             let possibly_unique = std::env::temp_dir().join::<PathBuf>(p.into());\n \n-            let file = fopts.open(&possibly_unique);\n+            let file = fopts.open(possibly_unique);\n \n             match file {\n                 Ok(f) => {"}, {"sha": "2b53152688bb787abd713355236435213048034c", "filename": "src/tools/miri/src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -68,8 +68,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"pthread_setname_np\" => {\n                 let [thread, name] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let res =\n-                    this.pthread_setname_np(this.read_scalar(thread)?, this.read_scalar(name)?)?;\n+                let max_len = 16;\n+                let res = this.pthread_setname_np(\n+                    this.read_scalar(thread)?,\n+                    this.read_scalar(name)?,\n+                    max_len,\n+                )?;\n+                this.write_scalar(res, dest)?;\n+            }\n+            \"pthread_getname_np\" => {\n+                let [thread, name, len] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let res = this.pthread_getname_np(\n+                    this.read_scalar(thread)?,\n+                    this.read_scalar(name)?,\n+                    this.read_scalar(len)?,\n+                )?;\n                 this.write_scalar(res, dest)?;\n             }\n \n@@ -126,7 +140,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                         futex(this, &args[1..], dest)?;\n                     }\n                     id => {\n-                        this.handle_unsupported(format!(\"can't execute syscall with ID {}\", id))?;\n+                        this.handle_unsupported(format!(\"can't execute syscall with ID {id}\"))?;\n                         return Ok(EmulateByNameResult::AlreadyJumped);\n                     }\n                 }"}, {"sha": "371f56ca3555077abba010b91266352031505a8e", "filename": "src/tools/miri/src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -176,7 +176,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"pthread_setname_np\" => {\n                 let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let thread = this.pthread_self()?;\n-                this.pthread_setname_np(thread, this.read_scalar(name)?)?;\n+                let max_len = this.eval_libc(\"MAXTHREADNAMESIZE\")?.to_machine_usize(this)?;\n+                this.pthread_setname_np(\n+                    thread,\n+                    this.read_scalar(name)?,\n+                    max_len.try_into().unwrap(),\n+                )?;\n+            }\n+            \"pthread_getname_np\" => {\n+                let [thread, name, len] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let res = this.pthread_getname_np(\n+                    this.read_scalar(thread)?,\n+                    this.read_scalar(name)?,\n+                    this.read_scalar(len)?,\n+                )?;\n+                this.write_scalar(res, dest)?;\n             }\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work."}, {"sha": "b43682710bbe5c4adfba87955bb184f259348845", "filename": "src/tools/miri/src/shims/unix/thread.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fthread.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -67,22 +67,49 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         Ok(Scalar::from_machine_usize(thread_id.into(), this))\n     }\n \n+    /// Set the name of the current thread. `max_name_len` is the maximal length of the name\n+    /// including the null terminator.\n     fn pthread_setname_np(\n         &mut self,\n         thread: Scalar<Provenance>,\n         name: Scalar<Provenance>,\n+        max_name_len: usize,\n     ) -> InterpResult<'tcx, Scalar<Provenance>> {\n         let this = self.eval_context_mut();\n \n         let thread = ThreadId::try_from(thread.to_machine_usize(this)?).unwrap();\n         let name = name.to_pointer(this)?;\n \n         let name = this.read_c_str(name)?.to_owned();\n+\n+        // Comparing with `>=` to account for null terminator.\n+        if name.len() >= max_name_len {\n+            return this.eval_libc(\"ERANGE\");\n+        }\n+\n         this.set_thread_name(thread, name);\n \n         Ok(Scalar::from_u32(0))\n     }\n \n+    fn pthread_getname_np(\n+        &mut self,\n+        thread: Scalar<Provenance>,\n+        name_out: Scalar<Provenance>,\n+        len: Scalar<Provenance>,\n+    ) -> InterpResult<'tcx, Scalar<Provenance>> {\n+        let this = self.eval_context_mut();\n+\n+        let thread = ThreadId::try_from(thread.to_machine_usize(this)?).unwrap();\n+        let name_out = name_out.to_pointer(this)?;\n+        let len = len.to_machine_usize(this)?;\n+\n+        let name = this.get_thread_name(thread).to_owned();\n+        let (success, _written) = this.write_c_str(&name, name_out, len)?;\n+\n+        if success { Ok(Scalar::from_u32(0)) } else { this.eval_libc(\"ERANGE\") }\n+    }\n+\n     fn sched_yield(&mut self) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n "}, {"sha": "2a34a3a47bbb5c3f2160b8cd4ba325bdee6f5e74", "filename": "src/tools/miri/src/shims/windows/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -418,13 +418,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // Indicate an error.\n                 this.write_null(dest)?;\n             }\n-            \"GetFileInformationByHandleEx\" if this.frame_in_std() => {\n-                #[allow(non_snake_case)]\n-                let [_hFile, _FileInformationClass, _lpFileInformation, _dwBufferSize] =\n-                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n-                // Just make it fail.\n-                this.write_null(dest)?;\n-            }\n             \"GetFileType\" if this.frame_in_std() => {\n                 #[allow(non_snake_case)]\n                 let [_hFile] ="}, {"sha": "d3843b030347fe69cbc0f685411171df4b3dbf2a", "filename": "src/tools/miri/src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -86,12 +86,12 @@ impl Invalidation {\n impl fmt::Display for InvalidationCause {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            InvalidationCause::Access(kind) => write!(f, \"{}\", kind),\n+            InvalidationCause::Access(kind) => write!(f, \"{kind}\"),\n             InvalidationCause::Retag(perm, kind) =>\n                 if *kind == RetagCause::FnEntry {\n-                    write!(f, \"{:?} FnEntry retag\", perm)\n+                    write!(f, \"{perm:?} FnEntry retag\")\n                 } else {\n-                    write!(f, \"{:?} retag\", perm)\n+                    write!(f, \"{perm:?} retag\")\n                 },\n         }\n     }\n@@ -339,7 +339,7 @@ impl<'span, 'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'span, 'history, 'ecx, 'mir\n                 // this allocation.\n                 if self.history.base.0.tag() == tag {\n                     Some((\n-                        format!(\"{:?} was created here, as the base tag for {:?}\", tag, self.history.id),\n+                        format!(\"{tag:?} was created here, as the base tag for {:?}\", self.history.id),\n                         self.history.base.1.data()\n                     ))\n                 } else {\n@@ -381,7 +381,7 @@ impl<'span, 'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'span, 'history, 'ecx, 'mir\n             self.offset.bytes(),\n         );\n         err_sb_ub(\n-            format!(\"{}{}\", action, error_cause(stack, op.orig_tag)),\n+            format!(\"{action}{}\", error_cause(stack, op.orig_tag)),\n             Some(operation_summary(&op.cause.summary(), self.history.id, op.range)),\n             op.orig_tag.and_then(|orig_tag| self.get_logs_relevant_to(orig_tag, None)),\n         )\n@@ -401,7 +401,7 @@ impl<'span, 'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'span, 'history, 'ecx, 'mir\n             offset = self.offset.bytes(),\n         );\n         err_sb_ub(\n-            format!(\"{}{}\", action, error_cause(stack, op.tag)),\n+            format!(\"{action}{}\", error_cause(stack, op.tag)),\n             Some(operation_summary(\"an access\", self.history.id, op.range)),\n             op.tag.and_then(|tag| self.get_logs_relevant_to(tag, None)),\n         )"}, {"sha": "cc27b71eb5604ea8d42335e6307df1c81d9e84a5", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -1153,7 +1153,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         let alloc_extra = this.get_alloc_extra(alloc_id)?;\n         let stacks = alloc_extra.stacked_borrows.as_ref().unwrap().borrow();\n         for (range, stack) in stacks.stacks.iter_all() {\n-            print!(\"{:?}: [\", range);\n+            print!(\"{range:?}: [\");\n+            if let Some(bottom) = stack.unknown_bottom() {\n+                print!(\" unknown-bottom(..{bottom:?})\");\n+            }\n             for i in 0..stack.len() {\n                 let item = stack.get(i).unwrap();\n                 print!(\" {:?}{:?}\", item.perm(), item.tag());"}, {"sha": "bbddca74754c50125e47a2b46e5893da292b74da", "filename": "src/tools/miri/tests/pass-dep/shims/pthreads.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Fpthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Fpthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Fpthreads.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -1,10 +1,14 @@\n //@ignore-target-windows: No libc on Windows\n+#![feature(cstr_from_bytes_until_nul)]\n+use std::ffi::CStr;\n+use std::thread;\n \n fn main() {\n     test_mutex_libc_init_recursive();\n     test_mutex_libc_init_normal();\n     test_mutex_libc_init_errorcheck();\n     test_rwlock_libc_static_initializer();\n+    test_named_thread_truncation();\n \n     #[cfg(any(target_os = \"linux\"))]\n     test_mutex_libc_static_initializer_recursive();\n@@ -125,3 +129,24 @@ fn test_rwlock_libc_static_initializer() {\n         assert_eq!(libc::pthread_rwlock_destroy(rw.get()), 0);\n     }\n }\n+\n+fn test_named_thread_truncation() {\n+    let long_name = std::iter::once(\"test_named_thread_truncation\")\n+        .chain(std::iter::repeat(\" yada\").take(100))\n+        .collect::<String>();\n+\n+    let result = thread::Builder::new().name(long_name.clone()).spawn(move || {\n+        // Rust remembers the full thread name itself.\n+        assert_eq!(thread::current().name(), Some(long_name.as_str()));\n+\n+        // But the system is limited -- make sure we successfully set a truncation.\n+        let mut buf = vec![0u8; long_name.len() + 1];\n+        unsafe {\n+            libc::pthread_getname_np(libc::pthread_self(), buf.as_mut_ptr().cast(), buf.len());\n+        }\n+        let cstr = CStr::from_bytes_until_nul(&buf).unwrap();\n+        assert!(cstr.to_bytes().len() >= 15); // POSIX seems to promise at least 15 chars\n+        assert!(long_name.as_bytes().starts_with(cstr.to_bytes()));\n+    });\n+    result.unwrap().join().unwrap();\n+}"}, {"sha": "3ca937ae13db810aff8863bac703a55b20ba92c3", "filename": "src/tools/miri/tests/pass/stacked-borrows/stack-printing.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fstack-printing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fstack-printing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fstack-printing.rs?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -1,29 +1,46 @@\n+//@compile-flags: -Zmiri-permissive-provenance\n+#![feature(strict_provenance)]\n use std::{\n     alloc::{self, Layout},\n     mem::ManuallyDrop,\n };\n \n extern \"Rust\" {\n     fn miri_get_alloc_id(ptr: *const u8) -> u64;\n-    fn miri_print_stacks(alloc_id: u64);\n+    fn miri_print_borrow_stacks(alloc_id: u64);\n+}\n+\n+fn get_alloc_id(ptr: *const u8) -> u64 {\n+    unsafe { miri_get_alloc_id(ptr) }\n+}\n+\n+fn print_borrow_stacks(alloc_id: u64) {\n+    unsafe { miri_print_borrow_stacks(alloc_id) }\n }\n \n fn main() {\n     let ptr = unsafe { alloc::alloc(Layout::new::<u8>()) };\n-    let alloc_id = unsafe { miri_get_alloc_id(ptr) };\n-    unsafe { miri_print_stacks(alloc_id) };\n+    let alloc_id = get_alloc_id(ptr);\n+    print_borrow_stacks(alloc_id);\n \n     assert!(!ptr.is_null());\n-    unsafe { miri_print_stacks(alloc_id) };\n+    print_borrow_stacks(alloc_id);\n \n     unsafe { *ptr = 42 };\n-    unsafe { miri_print_stacks(alloc_id) };\n+    print_borrow_stacks(alloc_id);\n \n     let _b = unsafe { ManuallyDrop::new(Box::from_raw(ptr)) };\n-    unsafe { miri_print_stacks(alloc_id) };\n+    print_borrow_stacks(alloc_id);\n \n     let _ptr = unsafe { &*ptr };\n-    unsafe { miri_print_stacks(alloc_id) };\n+    print_borrow_stacks(alloc_id);\n+\n+    // Create an unknown bottom, and print it\n+    let ptr = ptr as usize as *mut u8;\n+    unsafe {\n+        *ptr = 5;\n+    }\n+    print_borrow_stacks(alloc_id);\n \n     unsafe { alloc::dealloc(ptr, Layout::new::<u8>()) };\n }"}, {"sha": "838733078209def1b9a84c17a96a30c1921a520b", "filename": "src/tools/miri/tests/pass/stacked-borrows/stack-printing.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fstack-printing.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1898c34e923bad763e723c68dd9f23a09f9eb0fc/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fstack-printing.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Fstack-printing.stdout?ref=1898c34e923bad763e723c68dd9f23a09f9eb0fc", "patch": "@@ -3,3 +3,4 @@\n 0..1: [ SharedReadWrite<TAG> ]\n 0..1: [ SharedReadWrite<TAG> Unique<TAG> Unique<TAG> Unique<TAG> Unique<TAG> Unique<TAG> ]\n 0..1: [ SharedReadWrite<TAG> Disabled<TAG> Disabled<TAG> Disabled<TAG> Disabled<TAG> Disabled<TAG> SharedReadOnly<TAG> ]\n+0..1: [ unknown-bottom(..<TAG>) ]"}]}